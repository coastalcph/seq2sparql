[
    {
        "questionIdx": 4,
        "questionPatternModEntities": "Did M0 's male actor marry M2",
        "questionTemplate": "Did [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] [VP_SIMPLE] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P2 M2 .\nFILTER ( ?x0 != M2 )\n}",
        "recursionDepth": 20,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P453 wd:Q50807639 .\n?x0 wdt:P21 wd:Q6581097 .\n?x0 wdt:P26 wd:Q1560129 .\nFILTER ( ?x0 != wd:Q1560129 )\n}",
        "questionWithBrackets": "Did [Lohengrin] 's male actor marry [Margarete Joswig]"
    },
    {
        "questionIdx": 15,
        "questionPatternModEntities": "Did M2 star a actor of M0 and M1 and star M3",
        "questionTemplate": "Did [entity] [VP_SIMPLE] a [ROLE_SIMPLE] of [entity] and [entity] and [VP_SIMPLE] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\nM2 P1 ?x0 .\nM2 P1 M3\n}",
        "recursionDepth": 32,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P453 wd:Q207990 .\n?x0 wdt:P453 wd:Q50386864 .\nwd:Q640054 wdt:P161 ?x0 .\nwd:Q640054 wdt:P161 wd:Q229179\n}",
        "questionWithBrackets": "Did [Aida] star a actor of [Cio-Cio-san (Madama Butterfly)] and [Turandot] and star [Renata Tebaldi]"
    },
    {
        "questionIdx": 16,
        "questionPatternModEntities": "Did M2 star M3 and M4 and star M0 's British employee 's sibling",
        "questionTemplate": "Did [entity] [VP_SIMPLE] [entity] and [entity] and [VP_SIMPLE] [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x1 P1 M0 .\n?x1 P2 M1 .\nFILTER ( ?x0 != ?x1 ) .\nM2 P3 ?x0 .\nM2 P3 M3 .\nM2 P3 M4\n}",
        "recursionDepth": 39,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P3373 ?x1 .\n?x1 wdt:P108 wd:Q9531 .\n?x1 wdt:P27 wd:Q145 .\nFILTER ( ?x0 != ?x1 ) .\nwd:Q23572 wdt:P161 ?x0 .\nwd:Q23572 wdt:P161 wd:Q2514417 .\nwd:Q23572 wdt:P161 wd:Q212351\n}",
        "questionWithBrackets": "Did [Game of Thrones] star [Ellie Kendrick] and [Kate Dickie] and star [BBC] 's British employee 's sibling"
    },
    {
        "questionIdx": 26,
        "questionPatternModEntities": "Did M1 star M2 , star a actor of M0 , and star M3",
        "questionTemplate": "Did [entity] [VP_SIMPLE] [entity] , [VP_SIMPLE] a [ROLE_SIMPLE] of [entity] , and [VP_SIMPLE] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 ?x0 .\nM1 P1 M2 .\nM1 P1 M3\n}",
        "recursionDepth": 37,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P453 wd:Q50386892 .\nwd:Q696096 wdt:P161 ?x0 .\nwd:Q696096 wdt:P161 wd:Q6376821 .\nwd:Q696096 wdt:P161 wd:Q78516\n}",
        "questionWithBrackets": "Did [The Princess Diaries 2: Royal Engagement] star [Kathleen Marshall] , star a actor of [Mim\u00ec] , and star [Anna Netrebko]"
    },
    {
        "questionIdx": 28,
        "questionPatternModEntities": "Did M0 star M1 , M2 , M3 , and M4",
        "questionTemplate": "Did [entity] [VP_SIMPLE] [entity] , [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P0 M3 .\nM0 P0 M4\n}",
        "recursionDepth": 21,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q50861 wdt:P161 wd:Q207 .\nwd:Q50861 wdt:P161 wd:Q23685 .\nwd:Q50861 wdt:P161 wd:Q207873 .\nwd:Q50861 wdt:P161 wd:Q9582\n}",
        "questionWithBrackets": "Did [Live Free or Die Hard] star [George W. Bush] , [Mary Elizabeth Winstead] , [Jimmy Carter] , and [Gerald Ford]"
    },
    {
        "questionIdx": 30,
        "questionPatternModEntities": "Did M1 star a actor of M0 and star M2 and M3",
        "questionTemplate": "Did [entity] [VP_SIMPLE] a [ROLE_SIMPLE] of [entity] and [VP_SIMPLE] [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 ?x0 .\nM1 P1 M2 .\nM1 P1 M3\n}",
        "recursionDepth": 32,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P453 wd:Q48463568 .\nwd:Q290640 wdt:P161 ?x0 .\nwd:Q290640 wdt:P161 wd:Q1394107 .\nwd:Q290640 wdt:P161 wd:Q402300\n}",
        "questionWithBrackets": "Did [Yes, Giorgio] star a actor of [Andrea Ch\u00e9nier] and star [Joseph Mascolo] and [Alexander Courage]"
    },
    {
        "questionIdx": 88,
        "questionPatternModEntities": "Did M2 star M3 , M4 , and M5 and star M1 's Swedish actor",
        "questionTemplate": "Did [entity] [VP_SIMPLE] [entity] , [entity] , and [entity] and [VP_SIMPLE] [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nM2 P2 ?x0 .\nM2 P2 M3 .\nM2 P2 M4 .\nM2 P2 M5\n}",
        "recursionDepth": 38,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P453 wd:Q10518313 .\n?x0 wdt:P27 wd:Q34 .\nwd:Q2806739 wdt:P161 ?x0 .\nwd:Q2806739 wdt:P161 wd:Q1799593 .\nwd:Q2806739 wdt:P161 wd:Q279709 .\nwd:Q2806739 wdt:P161 wd:Q440826\n}",
        "questionWithBrackets": "Did [Deadline] star [Niklas Hjulstr\u00f6m] , [Brasse Br\u00e4nnstr\u00f6m] , and [Maria Lundqvist] and star [No label defined] 's Swedish actor"
    },
    {
        "questionIdx": 92,
        "questionPatternModEntities": "Did M2 's employee 's female sibling marry M1",
        "questionTemplate": "Did [entity] 's [ROLE_SIMPLE] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] [VP_SIMPLE] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x0 P1 M0 .\n?x0 P2 M1 .\n?x1 P3 M2 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x0 != M1 )\n}",
        "recursionDepth": 24,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P21 wd:Q6581072 .\n?x0 wdt:P3373 ?x1 .\n?x0 wdt:P26 wd:Q93738722 .\n?x1 wdt:P108 wd:Q131252 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x0 != wd:Q93738722 )\n}",
        "questionWithBrackets": "Did [University of Chicago] 's employee 's female sibling marry [Konrad Ng]"
    },
    {
        "questionIdx": 142,
        "questionPatternModEntities": "Did M2 , M3 , M4 , and M5 star a Spanish spouse of M1",
        "questionTemplate": "Did [entity] , [entity] , [entity] , and [entity] [VP_SIMPLE] a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M1 ) .\nM2 P2 ?x0 .\nM3 P2 ?x0 .\nM4 P2 ?x0 .\nM5 P2 ?x0\n}",
        "recursionDepth": 32,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P27 wd:Q29 .\n?x0 wdt:P26 wd:Q527988 .\nFILTER ( ?x0 != wd:Q527988 ) .\nwd:Q4890405 wdt:P161 ?x0 .\nwd:Q128624 wdt:P161 ?x0 .\nwd:Q190765 wdt:P161 ?x0 .\nwd:Q19069 wdt:P161 ?x0\n}",
        "questionWithBrackets": "Did [El bosque animado] , [The Crime of Cuenca] , [The Magnificent Seven] , and [1492 \u2013 Conquest of Paradise] star a Spanish spouse of [Mabel Karr]"
    },
    {
        "questionIdx": 197,
        "questionPatternModEntities": "Did M0 star M1 , star M2 , and star M3",
        "questionTemplate": "Did [entity] [VP_SIMPLE] [entity] , [VP_SIMPLE] [entity] , and [VP_SIMPLE] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P0 M3\n}",
        "recursionDepth": 31,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q116068 wdt:P161 wd:Q352 .\nwd:Q116068 wdt:P161 wd:Q9916 .\nwd:Q116068 wdt:P161 wd:Q90136\n}",
        "questionWithBrackets": "Did [Last Days of Mussolini] star [Dwight D. Eisenhower] , star [Adolf Hitler] , and star [Manfred Freyberger]"
    },
    {
        "questionIdx": 420,
        "questionPatternModEntities": "Did M1 star M0 's actor",
        "questionTemplate": "Did [entity] [VP_SIMPLE] [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 ?x0\n}",
        "recursionDepth": 15,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P453 wd:Q905926 .\nwd:Q17487202 wdt:P161 ?x0\n}",
        "questionWithBrackets": "Did [Non-Summit] star [Protoss] 's actor"
    },
    {
        "questionIdx": 488,
        "questionPatternModEntities": "Did M2 star M3 , star M0 's Mexican employee , and star M4",
        "questionTemplate": "Did [entity] [VP_SIMPLE] [entity] , [VP_SIMPLE] [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] , and [VP_SIMPLE] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nM2 P2 ?x0 .\nM2 P2 M3 .\nM2 P2 M4\n}",
        "recursionDepth": 40,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P108 wd:Q209842 .\n?x0 wdt:P27 wd:Q96 .\nwd:Q5789782 wdt:P161 ?x0 .\nwd:Q5789782 wdt:P161 wd:Q16873 .\nwd:Q5789782 wdt:P161 wd:Q46739\n}",
        "questionWithBrackets": "Did [No label defined] star [Octavio Paz] , star [University of Paris] 's Mexican employee , and star [Juan Carlos Onetti]"
    },
    {
        "questionIdx": 517,
        "questionPatternModEntities": "Did M1 and M3 marry M0 's spouse and sibling and marry M2",
        "questionTemplate": "Did [entity] and [entity] [VP_SIMPLE] [entity] 's [ROLE_SIMPLE] and [ROLE_SIMPLE] and [VP_SIMPLE] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M0 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x0 != M0 ) .\nFILTER ( M1 != ?x0 ) .\nFILTER ( M1 != M2 ) .\nFILTER ( M3 != ?x0 ) .\nFILTER ( M3 != M2 ) .\nM1 P1 ?x0 .\nM1 P1 M2 .\nM3 P1 ?x0 .\nM3 P1 M2\n}",
        "recursionDepth": 35,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P3373 wd:Q3362 .\n?x0 wdt:P26 wd:Q3362 .\nFILTER ( ?x0 != wd:Q3362 ) .\nFILTER ( ?x0 != wd:Q3362 ) .\nFILTER ( wd:Q3356 != ?x0 ) .\nFILTER ( wd:Q3356 != wd:Q451082 ) .\nFILTER ( wd:Q2045778 != ?x0 ) .\nFILTER ( wd:Q2045778 != wd:Q451082 ) .\nwd:Q3356 wdt:P26 ?x0 .\nwd:Q3356 wdt:P26 wd:Q451082 .\nwd:Q2045778 wdt:P26 ?x0 .\nwd:Q2045778 wdt:P26 wd:Q451082\n}",
        "questionWithBrackets": "Did [Antiochus IV Epiphanes] and [Antiochus] marry [Seleucus IV Philopator] 's spouse and sibling and marry [Laodice IV]"
    },
    {
        "questionIdx": 529,
        "questionPatternModEntities": "Did M1 star M2 , star M3 , and star a child of M0",
        "questionTemplate": "Did [entity] [VP_SIMPLE] [entity] , [VP_SIMPLE] [entity] , and [VP_SIMPLE] a [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 ?x0 .\nM1 P1 M2 .\nM1 P1 M3\n}",
        "recursionDepth": 37,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P749 wd:Q48525 .\nwd:Q3800839 wdt:P161 ?x0 .\nwd:Q3800839 wdt:P161 wd:Q726054 .\nwd:Q3800839 wdt:P161 wd:Q1256\n}",
        "questionWithBrackets": "Did [No label defined] star [Liguria] , star [Giuseppe Dossena] , and star a child of [Federal Government of the United States of America]"
    },
    {
        "questionIdx": 622,
        "questionPatternModEntities": "Did M2 marry a Mexican spouse of M1 and marry M3 , M4 , M5 , and M6",
        "questionTemplate": "Did [entity] [VP_SIMPLE] a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] and [VP_SIMPLE] [entity] , [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M1 ) .\nFILTER ( M2 != ?x0 ) .\nFILTER ( M2 != M3 ) .\nFILTER ( M2 != M4 ) .\nFILTER ( M2 != M5 ) .\nFILTER ( M2 != M6 ) .\nM2 P1 ?x0 .\nM2 P1 M3 .\nM2 P1 M4 .\nM2 P1 M5 .\nM2 P1 M6\n}",
        "recursionDepth": 43,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P27 wd:Q96 .\n?x0 wdt:P26 wd:Q63306 .\nFILTER ( ?x0 != wd:Q63306 ) .\nFILTER ( wd:Q171128 != ?x0 ) .\nFILTER ( wd:Q171128 != wd:Q276375 ) .\nFILTER ( wd:Q171128 != wd:Q100231161 ) .\nFILTER ( wd:Q171128 != wd:Q529975 ) .\nFILTER ( wd:Q171128 != wd:Q5588 ) .\nwd:Q171128 wdt:P26 ?x0 .\nwd:Q171128 wdt:P26 wd:Q276375 .\nwd:Q171128 wdt:P26 wd:Q100231161 .\nwd:Q171128 wdt:P26 wd:Q529975 .\nwd:Q171128 wdt:P26 wd:Q5588\n}",
        "questionWithBrackets": "Did [Diego Rivera] marry a Mexican spouse of [Jorge Cuesta] and marry [Guadalupe Mar\u00edn] , [Emma Hurtado] , [Angelina Beloff] , and [Frida Kahlo]"
    },
    {
        "questionIdx": 1072,
        "questionPatternModEntities": "Did M3 marry a German employee of M0 and marry a sibling of M2",
        "questionTemplate": "Did [entity] [VP_SIMPLE] a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] and [VP_SIMPLE] a [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x1 P2 M2 .\nFILTER ( ?x1 != M2 ) .\nFILTER ( M3 != ?x0 ) .\nFILTER ( M3 != ?x1 ) .\nM3 P3 ?x0 .\nM3 P3 ?x1\n}",
        "recursionDepth": 39,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P108 wd:Q9531 .\n?x0 wdt:P27 wd:Q183 .\n?x1 wdt:P3373 wd:Q614675 .\nFILTER ( ?x1 != wd:Q614675 ) .\nFILTER ( wd:Q230138 != ?x0 ) .\nFILTER ( wd:Q230138 != ?x1 ) .\nwd:Q230138 wdt:P26 ?x0 .\nwd:Q230138 wdt:P26 ?x1\n}",
        "questionWithBrackets": "Did [Tatum O'Neal] marry a German employee of [BBC] and marry a sibling of [Patrick McEnroe]"
    },
    {
        "questionIdx": 1191,
        "questionPatternModEntities": "Did M0 's parent and sibling marry M1 , M2 , M3 , and M4",
        "questionTemplate": "Did [entity] 's [ROLE_SIMPLE] and [ROLE_SIMPLE] [VP_SIMPLE] [entity] , [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M0 .\n?x0 P2 M1 .\n?x0 P2 M2 .\n?x0 P2 M3 .\n?x0 P2 M4 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x0 != M1 ) .\nFILTER ( ?x0 != M2 ) .\nFILTER ( ?x0 != M3 ) .\nFILTER ( ?x0 != M4 )\n}",
        "recursionDepth": 30,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q187602 .\n?x0 wdt:P3373 wd:Q187602 .\n?x0 wdt:P26 wd:Q2293877 .\n?x0 wdt:P26 wd:Q1378483 .\n?x0 wdt:P26 wd:Q58324367 .\n?x0 wdt:P26 wd:Q106076620 .\nFILTER ( ?x0 != wd:Q187602 ) .\nFILTER ( ?x0 != wd:Q2293877 ) .\nFILTER ( ?x0 != wd:Q1378483 ) .\nFILTER ( ?x0 != wd:Q58324367 ) .\nFILTER ( ?x0 != wd:Q106076620 )\n}",
        "questionWithBrackets": "Did [Circe] 's parent and sibling marry [N\u00e9\u00e8re (N\u00e9r\u00e9ide) N\u00e9\u00e8re (N\u00e9r\u00e9ide) inlanguage:fr] , [Eurylyte] , [Eidyia] , and [Clytia]"
    },
    {
        "questionIdx": 1228,
        "questionPatternModEntities": "Did M0 's Spanish sibling marry M2",
        "questionTemplate": "Did [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] [VP_SIMPLE] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P2 M2 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x0 != M2 )\n}",
        "recursionDepth": 20,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P27 wd:Q29 .\n?x0 wdt:P3373 wd:Q129179 .\n?x0 wdt:P26 wd:Q160001 .\nFILTER ( ?x0 != wd:Q129179 ) .\nFILTER ( ?x0 != wd:Q160001 )\n}",
        "questionWithBrackets": "Did [Mercedes, Princess of Asturias] 's Spanish sibling marry [Victoria Eugenie of Battenberg]"
    },
    {
        "questionIdx": 1265,
        "questionPatternModEntities": "Did M1 's Italian actor play M2 and play M3 and M4",
        "questionTemplate": "Did [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] [VP_SIMPLE] [entity] and [VP_SIMPLE] [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\n?x0 P1 M3 .\n?x0 P1 M4\n}",
        "recursionDepth": 35,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P453 wd:Q48463568 .\n?x0 wdt:P453 wd:Q64005951 .\n?x0 wdt:P453 wd:Q5815108 .\n?x0 wdt:P453 wd:Q50386907 .\n?x0 wdt:P27 wd:Q38\n}",
        "questionWithBrackets": "Did [Duke of Mantua] 's Italian actor play [Andrea Ch\u00e9nier] and play [Rodolfo] and [Mario Cavaradossi]"
    },
    {
        "questionIdx": 1272,
        "questionPatternModEntities": "Did M0 's child marry M1",
        "questionTemplate": "Did [entity] 's [ROLE_SIMPLE] [VP_SIMPLE] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M1 )\n}",
        "recursionDepth": 15,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P749 wd:Q1089760 .\n?x0 wdt:P26 wd:Q76375112 .\nFILTER ( ?x0 != wd:Q76375112 )\n}",
        "questionWithBrackets": "Did [Church Mission Society] 's child marry [Eliazbeth Fristan]"
    },
    {
        "questionIdx": 1341,
        "questionPatternModEntities": "Did M3 and M4 marry a Swedish spouse of M1 's American sibling",
        "questionTemplate": "Did [entity] and [entity] [VP_SIMPLE] a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 ?x1 .\n?x1 P0 M2 .\n?x1 P2 M1 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x1 != M1 ) .\nFILTER ( M3 != ?x0 ) .\nFILTER ( M4 != ?x0 ) .\nM3 P1 ?x0 .\nM4 P1 ?x0\n}",
        "recursionDepth": 35,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P27 wd:Q34 .\n?x0 wdt:P26 ?x1 .\n?x1 wdt:P27 wd:Q30 .\n?x1 wdt:P3373 wd:Q237446 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x1 != wd:Q237446 ) .\nFILTER ( wd:Q434907 != ?x0 ) .\nFILTER ( wd:Q3291257 != ?x0 ) .\nwd:Q434907 wdt:P26 ?x0 .\nwd:Q3291257 wdt:P26 ?x0\n}",
        "questionWithBrackets": "Did [Loredana Bert\u00e8] and [Mariana Simionescu] marry a Swedish spouse of [Mia Martini] 's American sibling"
    },
    {
        "questionIdx": 1448,
        "questionPatternModEntities": "Did M0 's male sibling marry M2",
        "questionTemplate": "Did [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] [VP_SIMPLE] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P2 M2 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x0 != M2 )\n}",
        "recursionDepth": 20,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P21 wd:Q6581097 .\n?x0 wdt:P3373 wd:Q329 .\n?x0 wdt:P26 wd:Q1151944 .\nFILTER ( ?x0 != wd:Q329 ) .\nFILTER ( ?x0 != wd:Q1151944 )\n}",
        "questionWithBrackets": "Did [Nicolas Sarkozy] 's male sibling marry [Mary-Kate Olsen]"
    },
    {
        "questionIdx": 1616,
        "questionPatternModEntities": "Did M0 , M2 , and M3 marry M1",
        "questionTemplate": "Did [entity] , [entity] , and [entity] [VP_SIMPLE] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nFILTER ( M0 != M1 ) .\nFILTER ( M2 != M1 ) .\nFILTER ( M3 != M1 ) .\nM0 P0 M1 .\nM2 P0 M1 .\nM3 P0 M1\n}",
        "recursionDepth": 18,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nFILTER ( wd:Q4502265 != wd:Q720 ) .\nFILTER ( wd:Q30948830 != wd:Q720 ) .\nFILTER ( wd:Q4177255 != wd:Q720 ) .\nwd:Q4502265 wdt:P26 wd:Q720 .\nwd:Q30948830 wdt:P26 wd:Q720 .\nwd:Q4177255 wdt:P26 wd:Q720\n}",
        "questionWithBrackets": "Did [Ibaqa beki] , [Yesugen] , and [Khulan] marry [Genghis Khan]"
    },
    {
        "questionIdx": 1716,
        "questionPatternModEntities": "Did M2 marry a Mexican sibling of M0",
        "questionTemplate": "Did [entity] [VP_SIMPLE] a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( M2 != ?x0 ) .\nM2 P2 ?x0\n}",
        "recursionDepth": 22,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P27 wd:Q96 .\n?x0 wdt:P3373 wd:Q250397 .\nFILTER ( ?x0 != wd:Q250397 ) .\nFILTER ( wd:Q4748059 != ?x0 ) .\nwd:Q4748059 wdt:P26 ?x0\n}",
        "questionWithBrackets": "Did [Amparo D\u00e1vila] marry a Mexican sibling of [Rafael Coronel]"
    },
    {
        "questionIdx": 1805,
        "questionPatternModEntities": "Did M1 marry M0 's sibling and parent",
        "questionTemplate": "Did [entity] [VP_SIMPLE] [entity] 's [ROLE_SIMPLE] and [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M0 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( M1 != ?x0 ) .\nM1 P2 ?x0\n}",
        "recursionDepth": 20,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q5659 .\n?x0 wdt:P3373 wd:Q5659 .\nFILTER ( ?x0 != wd:Q5659 ) .\nFILTER ( wd:Q82764 != ?x0 ) .\nwd:Q82764 wdt:P26 ?x0\n}",
        "questionWithBrackets": "Did [Mathilda of Dendermonde] marry [Conon de B\u00e9thune] 's sibling and parent"
    },
    {
        "questionIdx": 1815,
        "questionPatternModEntities": "Did M1 and M2 marry M0 's sibling , parent , and spouse",
        "questionTemplate": "Did [entity] and [entity] [VP_SIMPLE] [entity] 's [ROLE_SIMPLE] , [ROLE_SIMPLE] , and [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M0 .\n?x0 P2 M0 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x0 != M0 ) .\nFILTER ( M1 != ?x0 ) .\nFILTER ( M2 != ?x0 ) .\nM1 P2 ?x0 .\nM2 P2 ?x0\n}",
        "recursionDepth": 28,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q443473 .\n?x0 wdt:P3373 wd:Q443473 .\n?x0 wdt:P26 wd:Q443473 .\nFILTER ( ?x0 != wd:Q443473 ) .\nFILTER ( ?x0 != wd:Q443473 ) .\nFILTER ( wd:Q210535 != ?x0 ) .\nFILTER ( wd:Q256430 != ?x0 ) .\nwd:Q210535 wdt:P26 ?x0 .\nwd:Q256430 wdt:P26 ?x0\n}",
        "questionWithBrackets": "Did [Nefertarilllala] and [Maathorneferure] marry [Henutmire] 's sibling , parent , and spouse"
    },
    {
        "questionIdx": 1816,
        "questionPatternModEntities": "Did M1 marry M0 's sibling and spouse",
        "questionTemplate": "Did [entity] [VP_SIMPLE] [entity] 's [ROLE_SIMPLE] and [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M0 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x0 != M0 ) .\nFILTER ( M1 != ?x0 ) .\nM1 P1 ?x0\n}",
        "recursionDepth": 20,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P3373 wd:Q3356 .\n?x0 wdt:P26 wd:Q3356 .\nFILTER ( ?x0 != wd:Q3356 ) .\nFILTER ( ?x0 != wd:Q3356 ) .\nFILTER ( wd:Q2045778 != ?x0 ) .\nwd:Q2045778 wdt:P26 ?x0\n}",
        "questionWithBrackets": "Did [Antiochus] marry [Antiochus IV Epiphanes] 's sibling and spouse"
    },
    {
        "questionIdx": 1817,
        "questionPatternModEntities": "Did M1 's sibling 's spouse and parent marry M0",
        "questionTemplate": "Did [entity] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE] and [ROLE_SIMPLE] [VP_SIMPLE] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P1 M0 .\n?x1 P2 M1 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x1 != M1 )\n}",
        "recursionDepth": 24,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 ?x1 .\n?x0 wdt:P26 ?x1 .\n?x0 wdt:P26 wd:Q40020 .\n?x1 wdt:P3373 wd:Q635 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x0 != wd:Q40020 ) .\nFILTER ( ?x1 != wd:Q635 )\n}",
        "questionWithBrackets": "Did [Cleopatra] 's sibling 's spouse and parent marry [Cleopatra VI of Egypt]"
    },
    {
        "questionIdx": 2102,
        "questionPatternModEntities": "Did M1 , M2 , and M3 star M0 's parent",
        "questionTemplate": "Did [entity] , [entity] , and [entity] [VP_SIMPLE] [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 ?x0 .\nM2 P1 ?x0 .\nM3 P1 ?x0\n}",
        "recursionDepth": 22,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q15070044 .\nwd:Q26824229 wdt:P161 ?x0 .\nwd:Q464964 wdt:P161 ?x0 .\nwd:Q511347 wdt:P161 ?x0\n}",
        "questionWithBrackets": "Did [The Dictator] , [This Must Be the Place] , and [The 13th] star [Malia Obama] 's parent"
    },
    {
        "questionIdx": 2176,
        "questionPatternModEntities": "Did M1 star M0 's parent 's actor and star M2",
        "questionTemplate": "Did [entity] [VP_SIMPLE] [entity] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE] and [VP_SIMPLE] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x1 P1 M0 .\nM1 P2 ?x0 .\nM1 P2 M2\n}",
        "recursionDepth": 30,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P453 ?x1 .\n?x1 wdt:P40|wdt:P355 wd:Q8125562 .\nwd:Q202028 wdt:P161 ?x0 .\nwd:Q202028 wdt:P161 wd:Q115541\n}",
        "questionWithBrackets": "Did [War of the Worlds] star [Elboron] 's parent 's actor and star [Dakota Fanning]"
    },
    {
        "questionIdx": 2279,
        "questionPatternModEntities": "Did M1 star a spouse of M0",
        "questionTemplate": "Did [entity] [VP_SIMPLE] a [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nM1 P1 ?x0\n}",
        "recursionDepth": 17,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P26 wd:Q1698 .\nFILTER ( ?x0 != wd:Q1698 ) .\nwd:Q980257 wdt:P161 ?x0\n}",
        "questionWithBrackets": "Did [Evil Under the Sun] star a spouse of [Serge Gainsbourg]"
    },
    {
        "questionIdx": 2575,
        "questionPatternModEntities": "Did M2 marry M1 's female spouse and marry M3",
        "questionTemplate": "Did [entity] [VP_SIMPLE] [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] and [VP_SIMPLE] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M1 ) .\nFILTER ( M2 != ?x0 ) .\nFILTER ( M2 != M3 ) .\nM2 P1 ?x0 .\nM2 P1 M3\n}",
        "recursionDepth": 31,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P21 wd:Q6581072 .\n?x0 wdt:P26 wd:Q2186 .\nFILTER ( ?x0 != wd:Q2186 ) .\nFILTER ( wd:Q2739033 != ?x0 ) .\nFILTER ( wd:Q2739033 != wd:Q1402198 ) .\nwd:Q2739033 wdt:P26 ?x0 .\nwd:Q2739033 wdt:P26 wd:Q1402198\n}",
        "questionWithBrackets": "Did [Hostus Hostilius] marry [Romulus] 's female spouse and marry [Hersilia]"
    },
    {
        "questionIdx": 2627,
        "questionPatternModEntities": "Did M2 marry M1 's spouse and marry a sibling of M0",
        "questionTemplate": "Did [entity] [VP_SIMPLE] [entity] 's [ROLE_SIMPLE] and [VP_SIMPLE] a [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x1 P1 M1 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x1 != M1 ) .\nFILTER ( M2 != ?x0 ) .\nFILTER ( M2 != ?x1 ) .\nM2 P1 ?x0 .\nM2 P1 ?x1\n}",
        "recursionDepth": 32,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P3373 wd:Q1043 .\n?x1 wdt:P26 wd:Q64706971 .\nFILTER ( ?x0 != wd:Q1043 ) .\nFILTER ( ?x1 != wd:Q64706971 ) .\nFILTER ( wd:Q80090868 != ?x0 ) .\nFILTER ( wd:Q80090868 != ?x1 ) .\nwd:Q80090868 wdt:P26 ?x0 .\nwd:Q80090868 wdt:P26 ?x1\n}",
        "questionWithBrackets": "Did [Johannes Collin] marry [Gabriel H\u00f6\u00f6k] 's spouse and marry a sibling of [Carl Linnaeus]"
    },
    {
        "questionIdx": 2894,
        "questionPatternModEntities": "Did M1 , M2 , and M3 marry M0 's parent 's employee",
        "questionTemplate": "Did [entity] , [entity] , and [entity] [VP_SIMPLE] [entity] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x1 P1 M0 .\nFILTER ( M1 != ?x0 ) .\nFILTER ( M2 != ?x0 ) .\nFILTER ( M3 != ?x0 ) .\nM1 P2 ?x0 .\nM2 P2 ?x0 .\nM3 P2 ?x0\n}",
        "recursionDepth": 26,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P108 ?x1 .\n?x1 wdt:P40|wdt:P355 wd:Q3154144 .\nFILTER ( wd:Q1618950 != ?x0 ) .\nFILTER ( wd:Q40531172 != ?x0 ) .\nFILTER ( wd:Q21885991 != ?x0 ) .\nwd:Q1618950 wdt:P26 ?x0 .\nwd:Q40531172 wdt:P26 ?x0 .\nwd:Q21885991 wdt:P26 ?x0\n}",
        "questionWithBrackets": "Did [Hiltrud Schwetje] , [Eva Schubach] , and [Kim So-yeon] marry [Yuganskneftegaz] 's parent 's employee"
    },
    {
        "questionIdx": 2950,
        "questionPatternModEntities": "Did M0 and M4 marry M1 and M2 and marry M3",
        "questionTemplate": "Did [entity] and [entity] [VP_SIMPLE] [entity] and [entity] and [VP_SIMPLE] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nFILTER ( M0 != M1 ) .\nFILTER ( M0 != M2 ) .\nFILTER ( M0 != M3 ) .\nFILTER ( M4 != M1 ) .\nFILTER ( M4 != M2 ) .\nFILTER ( M4 != M3 ) .\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P0 M3 .\nM4 P0 M1 .\nM4 P0 M2 .\nM4 P0 M3\n}",
        "recursionDepth": 30,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nFILTER ( wd:Q203559 != wd:Q3051180 ) .\nFILTER ( wd:Q203559 != wd:Q91157930 ) .\nFILTER ( wd:Q203559 != wd:Q8072227 ) .\nFILTER ( wd:Q47102 != wd:Q3051180 ) .\nFILTER ( wd:Q47102 != wd:Q91157930 ) .\nFILTER ( wd:Q47102 != wd:Q8072227 ) .\nwd:Q203559 wdt:P26 wd:Q3051180 .\nwd:Q203559 wdt:P26 wd:Q91157930 .\nwd:Q203559 wdt:P26 wd:Q8072227 .\nwd:Q47102 wdt:P26 wd:Q3051180 .\nwd:Q47102 wdt:P26 wd:Q91157930 .\nwd:Q47102 wdt:P26 wd:Q8072227\n}",
        "questionWithBrackets": "Did [Brigham Young] and [Joseph Smith] marry [Eliza Roxcy Snow] and [Zina D. H. Young] and marry [Emily Dow Partridge]"
    },
    {
        "questionIdx": 2951,
        "questionPatternModEntities": "Did M2 and M4 marry M0 's female sibling and marry M3",
        "questionTemplate": "Did [entity] and [entity] [VP_SIMPLE] [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] and [VP_SIMPLE] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( M2 != ?x0 ) .\nFILTER ( M2 != M3 ) .\nFILTER ( M4 != ?x0 ) .\nFILTER ( M4 != M3 ) .\nM2 P2 ?x0 .\nM2 P2 M3 .\nM4 P2 ?x0 .\nM4 P2 M3\n}",
        "recursionDepth": 35,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P21 wd:Q6581072 .\n?x0 wdt:P3373 wd:Q5005 .\nFILTER ( ?x0 != wd:Q5005 ) .\nFILTER ( wd:Q16260178 != ?x0 ) .\nFILTER ( wd:Q16260178 != wd:Q16603288 ) .\nFILTER ( wd:Q30946614 != ?x0 ) .\nFILTER ( wd:Q30946614 != wd:Q16603288 ) .\nwd:Q16260178 wdt:P26 ?x0 .\nwd:Q16260178 wdt:P26 wd:Q16603288 .\nwd:Q30946614 wdt:P26 ?x0 .\nwd:Q30946614 wdt:P26 wd:Q16603288\n}",
        "questionWithBrackets": "Did [Xiao Hui] and [Xiao Chuobu] marry [Emperor Xingzong of Liao] 's female sibling and marry [Yel\u00fc Yanmujin]"
    },
    {
        "questionIdx": 2957,
        "questionPatternModEntities": "Did M1 marry M2 and M3 and marry M0 's spouse",
        "questionTemplate": "Did [entity] [VP_SIMPLE] [entity] and [entity] and [VP_SIMPLE] [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( M1 != ?x0 ) .\nFILTER ( M1 != M2 ) .\nFILTER ( M1 != M3 ) .\nM1 P0 ?x0 .\nM1 P0 M2 .\nM1 P0 M3\n}",
        "recursionDepth": 30,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P26 wd:Q1048 .\nFILTER ( ?x0 != wd:Q1048 ) .\nFILTER ( wd:Q521446 != ?x0 ) .\nFILTER ( wd:Q521446 != wd:Q234825 ) .\nFILTER ( wd:Q521446 != wd:Q3618991 ) .\nwd:Q521446 wdt:P26 ?x0 .\nwd:Q521446 wdt:P26 wd:Q234825 .\nwd:Q521446 wdt:P26 wd:Q3618991\n}",
        "questionWithBrackets": "Did [Publius Vatinius] marry [Antonia] and [Pompeia] and marry [Julius Caesar] 's spouse"
    },
    {
        "questionIdx": 3023,
        "questionPatternModEntities": "Did M3 star M2 's Spanish spouse 's female sibling and star M4 , M5 , and M6",
        "questionTemplate": "Did [entity] [VP_SIMPLE] [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] and [VP_SIMPLE] [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x0 P1 M0 .\n?x1 P2 M1 .\n?x1 P3 M2 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x1 != M2 ) .\nM3 P4 ?x0 .\nM3 P4 M4 .\nM3 P4 M5 .\nM3 P4 M6\n}",
        "recursionDepth": 47,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P21 wd:Q6581072 .\n?x0 wdt:P3373 ?x1 .\n?x1 wdt:P27 wd:Q29 .\n?x1 wdt:P26 wd:Q134895 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x1 != wd:Q134895 ) .\nwd:Q273676 wdt:P161 ?x0 .\nwd:Q273676 wdt:P161 wd:Q951671 .\nwd:Q273676 wdt:P161 wd:Q319527 .\nwd:Q273676 wdt:P161 wd:Q171998\n}",
        "questionWithBrackets": "Did [Asterix at the Olympic Games] star [Javier Bardem] 's Spanish spouse 's female sibling and star [Rachid Bouchareb] , [Jean Todt] , and [Jean-Pierre Cassel]"
    },
    {
        "questionIdx": 3083,
        "questionPatternModEntities": "Did M2 star a Mexican sibling of M0 and star M3 and M4",
        "questionTemplate": "Did [entity] [VP_SIMPLE] a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] and [VP_SIMPLE] [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M0 ) .\nM2 P2 ?x0 .\nM2 P2 M3 .\nM2 P2 M4\n}",
        "recursionDepth": 37,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P27 wd:Q96 .\n?x0 wdt:P3373 wd:Q1165261 .\nFILTER ( ?x0 != wd:Q1165261 ) .\nwd:Q16612088 wdt:P161 ?x0 .\nwd:Q16612088 wdt:P161 wd:Q5943686 .\nwd:Q16612088 wdt:P161 wd:Q1414640\n}",
        "questionWithBrackets": "Did [No s\u00e9 si cortarme las venas o dej\u00e1rmelas largas] star a Mexican sibling of [Marimar.] and star [Jos\u00e9 Mar\u00eda Yazpik] and [Claudia \u00c1lvarez]"
    },
    {
        "questionIdx": 3194,
        "questionPatternModEntities": "Did M0 's Canadian employee marry M2",
        "questionTemplate": "Did [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] [VP_SIMPLE] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P2 M2 .\nFILTER ( ?x0 != M2 )\n}",
        "recursionDepth": 20,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P108 wd:Q37156 .\n?x0 wdt:P27 wd:Q16 .\n?x0 wdt:P26 wd:Q92711 .\nFILTER ( ?x0 != wd:Q92711 )\n}",
        "questionWithBrackets": "Did [IBM] 's Canadian employee marry [Nick Pippenger]"
    },
    {
        "questionIdx": 3616,
        "questionPatternModEntities": "Did M0 's sibling play M1",
        "questionTemplate": "Did [entity] 's [ROLE_SIMPLE] [VP_SIMPLE] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M0 )\n}",
        "recursionDepth": 15,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P453 wd:Q222573 .\n?x0 wdt:P3373 wd:Q203236 .\nFILTER ( ?x0 != wd:Q203236 )\n}",
        "questionWithBrackets": "Did [Pasipha\u00eb] 's sibling play [femme fatale]"
    },
    {
        "questionIdx": 3971,
        "questionPatternModEntities": "Did M3 's Dutch spouse marry M1 and M2",
        "questionTemplate": "Did [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] [VP_SIMPLE] [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\n?x0 P1 M3 .\nFILTER ( ?x0 != M1 ) .\nFILTER ( ?x0 != M2 ) .\nFILTER ( ?x0 != M3 )\n}",
        "recursionDepth": 24,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P27 wd:Q29999 .\n?x0 wdt:P26 wd:Q13428735 .\n?x0 wdt:P26 wd:Q2021031 .\n?x0 wdt:P26 wd:Q3114275 .\nFILTER ( ?x0 != wd:Q13428735 ) .\nFILTER ( ?x0 != wd:Q2021031 ) .\nFILTER ( ?x0 != wd:Q3114275 )\n}",
        "questionWithBrackets": "Did [Agnita Feis] 's Dutch spouse marry [Nelly van Doesburg] and [Lena Milius]"
    },
    {
        "questionIdx": 4227,
        "questionPatternModEntities": "Did M2 marry a Canadian sibling of a Canadian sibling of M1",
        "questionTemplate": "Did [entity] [VP_SIMPLE] a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x0 P1 M0 .\n?x1 P0 M1 .\n?x1 P1 M0 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x1 != M1 ) .\nFILTER ( M2 != ?x0 ) .\nM2 P2 ?x0\n}",
        "recursionDepth": 33,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P27 wd:Q16 .\n?x0 wdt:P3373 ?x1 .\n?x1 wdt:P27 wd:Q16 .\n?x1 wdt:P3373 wd:Q192812 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x1 != wd:Q192812 ) .\nFILTER ( wd:Q220949 != ?x0 ) .\nwd:Q220949 wdt:P26 ?x0\n}",
        "questionWithBrackets": "Did [Rachel Bilson] marry a Canadian sibling of a Canadian sibling of [Hayden Christensen]"
    },
    {
        "questionIdx": 4312,
        "questionPatternModEntities": "Did M4 star a Canadian British female spouse of M3",
        "questionTemplate": "Did [entity] [VP_SIMPLE] a [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P1 M2 .\n?x0 P2 M3 .\nFILTER ( ?x0 != M3 ) .\nM4 P3 ?x0\n}",
        "recursionDepth": 32,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P21 wd:Q6581072 .\n?x0 wdt:P27 wd:Q145 .\n?x0 wdt:P27 wd:Q16 .\n?x0 wdt:P26 wd:Q144904 .\nFILTER ( ?x0 != wd:Q144904 ) .\nwd:Q466792 wdt:P161 ?x0\n}",
        "questionWithBrackets": "Did [The Dead Zone] star a Canadian British female spouse of [Zal Yanovsky]"
    },
    {
        "questionIdx": 4859,
        "questionPatternModEntities": "Did M3 star M4 and M5 and star a Italian employee of M0 and M1",
        "questionTemplate": "Did [entity] [VP_SIMPLE] [entity] and [entity] and [VP_SIMPLE] a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P1 M2 .\nM3 P2 ?x0 .\nM3 P2 M4 .\nM3 P2 M5\n}",
        "recursionDepth": 41,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P108 wd:Q202660 .\n?x0 wdt:P108 wd:Q131262 .\n?x0 wdt:P27 wd:Q38 .\nwd:Q1215047 wdt:P161 ?x0 .\nwd:Q1215047 wdt:P161 wd:Q55469 .\nwd:Q1215047 wdt:P161 wd:Q12807\n}",
        "questionWithBrackets": "Did [La Notte] star [Umberto Eco] and [Marcello Mastroianni] and star a Italian employee of [University of Bologna] and [Coll\u00e8ge de France]"
    },
    {
        "questionIdx": 4915,
        "questionPatternModEntities": "Did M1 star a parent of M0 and star M2",
        "questionTemplate": "Did [entity] [VP_SIMPLE] a [ROLE_SIMPLE] of [entity] and [VP_SIMPLE] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 ?x0 .\nM1 P1 M2\n}",
        "recursionDepth": 28,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q153730 .\nwd:Q50861 wdt:P161 ?x0 .\nwd:Q50861 wdt:P161 wd:Q1124\n}",
        "questionWithBrackets": "Did [Live Free or Die Hard] star a parent of [Barbara Pierce Bush] and star [Bill Clinton]"
    },
    {
        "questionIdx": 5088,
        "questionPatternModEntities": "Did M2 marry a female spouse of M1 , marry M3 , and marry M4",
        "questionTemplate": "Did [entity] [VP_SIMPLE] a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] , [VP_SIMPLE] [entity] , and [VP_SIMPLE] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M1 ) .\nFILTER ( M2 != ?x0 ) .\nFILTER ( M2 != M3 ) .\nFILTER ( M2 != M4 ) .\nM2 P1 ?x0 .\nM2 P1 M3 .\nM2 P1 M4\n}",
        "recursionDepth": 42,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P21 wd:Q6581072 .\n?x0 wdt:P26 wd:Q2908 .\nFILTER ( ?x0 != wd:Q2908 ) .\nFILTER ( wd:Q5379720 != ?x0 ) .\nFILTER ( wd:Q5379720 != wd:Q4822525 ) .\nFILTER ( wd:Q5379720 != wd:Q445703 ) .\nwd:Q5379720 wdt:P26 ?x0 .\nwd:Q5379720 wdt:P26 wd:Q4822525 .\nwd:Q5379720 wdt:P26 wd:Q445703\n}",
        "questionWithBrackets": "Did [Enrique G\u00f3mez Carrillo] marry a female spouse of [Antoine de Saint-Exup\u00e9ry] , marry [Consuelo de Saint Exup\u00e9ry] , and marry [Aurora C\u00e1ceres]"
    },
    {
        "questionIdx": 5115,
        "questionPatternModEntities": "Did M1 marry M0 's sibling , marry M2 , and marry M3",
        "questionTemplate": "Did [entity] [VP_SIMPLE] [entity] 's [ROLE_SIMPLE] , [VP_SIMPLE] [entity] , and [VP_SIMPLE] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( M1 != ?x0 ) .\nFILTER ( M1 != M2 ) .\nFILTER ( M1 != M3 ) .\nM1 P1 ?x0 .\nM1 P1 M2 .\nM1 P1 M3\n}",
        "recursionDepth": 35,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P3373 wd:Q635 .\nFILTER ( ?x0 != wd:Q635 ) .\nFILTER ( wd:Q39991 != ?x0 ) .\nFILTER ( wd:Q39991 != wd:Q40020 ) .\nFILTER ( wd:Q39991 != wd:Q40242 ) .\nwd:Q39991 wdt:P26 ?x0 .\nwd:Q39991 wdt:P26 wd:Q40020 .\nwd:Q39991 wdt:P26 wd:Q40242\n}",
        "questionWithBrackets": "Did [Ptolemy XII Auletes] marry [Cleopatra] 's sibling , marry [Cleopatra VI of Egypt] , and marry [Cleopatra V or VI of Egypt]"
    },
    {
        "questionIdx": 5716,
        "questionPatternModEntities": "Did M2 star M3 and star M0 's French employee",
        "questionTemplate": "Did [entity] [VP_SIMPLE] [entity] and [VP_SIMPLE] [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nM2 P2 ?x0 .\nM2 P2 M3\n}",
        "recursionDepth": 31,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P108 wd:Q743706 .\n?x0 wdt:P27 wd:Q142 .\nwd:Q2709328 wdt:P161 ?x0 .\nwd:Q2709328 wdt:P161 wd:Q106326\n}",
        "questionWithBrackets": "Did [Amour de poche] star [Jean-Claude Brialy] and star [AFNOR] 's French employee"
    },
    {
        "questionIdx": 5748,
        "questionPatternModEntities": "Did M0 's female actor marry M2",
        "questionTemplate": "Did [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] [VP_SIMPLE] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P2 M2 .\nFILTER ( ?x0 != M2 )\n}",
        "recursionDepth": 20,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P453 wd:Q222573 .\n?x0 wdt:P21 wd:Q6581072 .\n?x0 wdt:P26 wd:Q192482 .\nFILTER ( ?x0 != wd:Q192482 )\n}",
        "questionWithBrackets": "Did [femme fatale] 's female actor marry [Telemachus]"
    },
    {
        "questionIdx": 5970,
        "questionPatternModEntities": "Did M2 marry a sibling and spouse of a female sibling of M0",
        "questionTemplate": "Did [entity] [VP_SIMPLE] a [ROLE_SIMPLE] and [ROLE_SIMPLE] of a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x1 P0 M0 .\n?x1 P2 M1 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x1 != M0 ) .\nFILTER ( M2 != ?x0 ) .\nM2 P1 ?x0\n}",
        "recursionDepth": 33,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P3373 ?x1 .\n?x0 wdt:P26 ?x1 .\n?x1 wdt:P21 wd:Q6581072 .\n?x1 wdt:P3373 wd:Q39938 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x1 != wd:Q39938 ) .\nFILTER ( wd:Q635 != ?x0 ) .\nwd:Q635 wdt:P26 ?x0\n}",
        "questionWithBrackets": "Did [Cleopatra] marry a sibling and spouse of a female sibling of [Ptolemy XIII Theos Philopator]"
    },
    {
        "questionIdx": 6308,
        "questionPatternModEntities": "Did M2 marry M1 's female spouse",
        "questionTemplate": "Did [entity] [VP_SIMPLE] [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M1 ) .\nFILTER ( M2 != ?x0 ) .\nM2 P1 ?x0\n}",
        "recursionDepth": 20,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P21 wd:Q6581072 .\n?x0 wdt:P26 wd:Q1203 .\nFILTER ( ?x0 != wd:Q1203 ) .\nFILTER ( wd:Q1190476 != ?x0 ) .\nwd:Q1190476 wdt:P26 ?x0\n}",
        "questionWithBrackets": "Did [Toshi Ichiyanagi] marry [John Lennon] 's female spouse"
    },
    {
        "questionIdx": 6373,
        "questionPatternModEntities": "Did M2 marry M3 and marry a male spouse of M1",
        "questionTemplate": "Did [entity] [VP_SIMPLE] [entity] and [VP_SIMPLE] a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M1 ) .\nFILTER ( M2 != ?x0 ) .\nFILTER ( M2 != M3 ) .\nM2 P1 ?x0 .\nM2 P1 M3\n}",
        "recursionDepth": 33,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P21 wd:Q6581097 .\n?x0 wdt:P26 wd:Q635 .\nFILTER ( ?x0 != wd:Q635 ) .\nFILTER ( wd:Q229483 != ?x0 ) .\nFILTER ( wd:Q229483 != wd:Q51673 ) .\nwd:Q229483 wdt:P26 ?x0 .\nwd:Q229483 wdt:P26 wd:Q51673\n}",
        "questionWithBrackets": "Did [Octavia the Younger] marry [Mark Antony] and marry a male spouse of [Cleopatra]"
    },
    {
        "questionIdx": 6466,
        "questionPatternModEntities": "Did M2 's British Dutch parent marry M3",
        "questionTemplate": "Did [entity] 's [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] [VP_SIMPLE] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P1 M2 .\n?x0 P2 M3 .\nFILTER ( ?x0 != M3 )\n}",
        "recursionDepth": 25,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q76137993 .\n?x0 wdt:P27 wd:Q29999 .\n?x0 wdt:P27 wd:Q145 .\n?x0 wdt:P26 wd:Q76223018 .\nFILTER ( ?x0 != wd:Q76223018 )\n}",
        "questionWithBrackets": "Did [Elizabeth Mary Mackay] 's British Dutch parent marry [Charlotte Mary Younger]"
    },
    {
        "questionIdx": 6483,
        "questionPatternModEntities": "Did M1 marry a sibling of M0 and marry M2 and M3",
        "questionTemplate": "Did [entity] [VP_SIMPLE] a [ROLE_SIMPLE] of [entity] and [VP_SIMPLE] [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( M1 != ?x0 ) .\nFILTER ( M1 != M2 ) .\nFILTER ( M1 != M3 ) .\nM1 P1 ?x0 .\nM1 P1 M2 .\nM1 P1 M3\n}",
        "recursionDepth": 32,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P3373 wd:Q720 .\nFILTER ( ?x0 != wd:Q720 ) .\nFILTER ( wd:Q28416764 != ?x0 ) .\nFILTER ( wd:Q28416764 != wd:Q7068897 ) .\nFILTER ( wd:Q28416764 != wd:Q1914424 ) .\nwd:Q28416764 wdt:P26 ?x0 .\nwd:Q28416764 wdt:P26 wd:Q7068897 .\nwd:Q28416764 wdt:P26 wd:Q1914424\n}",
        "questionWithBrackets": "Did [Butu] marry a sibling of [Genghis Khan] and marry [Huochenbieji] and [Temulin]"
    },
    {
        "questionIdx": 6630,
        "questionPatternModEntities": "Did M0 , M2 , M3 , M4 , and M5 marry M1",
        "questionTemplate": "Did [entity] , [entity] , [entity] , [entity] , and [entity] [VP_SIMPLE] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nFILTER ( M0 != M1 ) .\nFILTER ( M2 != M1 ) .\nFILTER ( M3 != M1 ) .\nFILTER ( M4 != M1 ) .\nFILTER ( M5 != M1 ) .\nM0 P0 M1 .\nM2 P0 M1 .\nM3 P0 M1 .\nM4 P0 M1 .\nM5 P0 M1\n}",
        "recursionDepth": 24,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nFILTER ( wd:Q25632215 != wd:Q720 ) .\nFILTER ( wd:Q234805 != wd:Q720 ) .\nFILTER ( wd:Q4177255 != wd:Q720 ) .\nFILTER ( wd:Q7067167 != wd:Q720 ) .\nFILTER ( wd:Q7065392 != wd:Q720 ) .\nwd:Q25632215 wdt:P26 wd:Q720 .\nwd:Q234805 wdt:P26 wd:Q720 .\nwd:Q4177255 wdt:P26 wd:Q720 .\nwd:Q7067167 wdt:P26 wd:Q720 .\nwd:Q7065392 wdt:P26 wd:Q720\n}",
        "questionWithBrackets": "Did [Chahe] , [Hedaan] , [B\u00f6rte] , [Yesugen] , and [Yesugen] marry [Genghis Khan]"
    },
    {
        "questionIdx": 6641,
        "questionPatternModEntities": "Did M1 star a parent of M0 , star M2 , and star M3",
        "questionTemplate": "Did [entity] [VP_SIMPLE] a [ROLE_SIMPLE] of [entity] , [VP_SIMPLE] [entity] , and [VP_SIMPLE] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 ?x0 .\nM1 P1 M2 .\nM1 P1 M3\n}",
        "recursionDepth": 37,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q153481 .\nwd:Q50861 wdt:P161 ?x0 .\nwd:Q50861 wdt:P161 wd:Q207 .\nwd:Q50861 wdt:P161 wd:Q1124\n}",
        "questionWithBrackets": "Did [Live Free or Die Hard] star a parent of [Jenna Bush Hager] , star [Bill Clinton] , and star [George W. Bush]"
    },
    {
        "questionIdx": 7086,
        "questionPatternModEntities": "Did M0 's male sibling marry M2 and M3",
        "questionTemplate": "Did [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] [VP_SIMPLE] [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P2 M2 .\n?x0 P2 M3 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x0 != M2 ) .\nFILTER ( ?x0 != M3 )\n}",
        "recursionDepth": 24,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P21 wd:Q6581097 .\n?x0 wdt:P3373 wd:Q3345 .\n?x0 wdt:P26 wd:Q40023 .\n?x0 wdt:P26 wd:Q40027 .\nFILTER ( ?x0 != wd:Q3345 ) .\nFILTER ( ?x0 != wd:Q40023 ) .\nFILTER ( ?x0 != wd:Q40027 )\n}",
        "questionWithBrackets": "Did [Ptolemy X Alexander I] 's male sibling marry [Cleopatra IV of Egypt] and [Cleopatra Selene of Egypt and Syria]"
    },
    {
        "questionIdx": 7167,
        "questionPatternModEntities": "Did M1 star M0 's child",
        "questionTemplate": "Did [entity] [VP_SIMPLE] [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 ?x0\n}",
        "recursionDepth": 15,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P749 wd:Q7414 .\nwd:Q612680 wdt:P161 ?x0\n}",
        "questionWithBrackets": "Did [Father Dowling Mysteries] star [The Walt Disney Company] 's child"
    },
    {
        "questionIdx": 7302,
        "questionPatternModEntities": "Did M2 , M5 , and M6 star M3 , star M1 's Mexican spouse , and star M4",
        "questionTemplate": "Did [entity] , [entity] , and [entity] [VP_SIMPLE] [entity] , [VP_SIMPLE] [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] , and [VP_SIMPLE] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M1 ) .\nM2 P2 ?x0 .\nM2 P2 M3 .\nM2 P2 M4 .\nM5 P2 ?x0 .\nM5 P2 M3 .\nM5 P2 M4 .\nM6 P2 ?x0 .\nM6 P2 M3 .\nM6 P2 M4\n}",
        "recursionDepth": 47,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P27 wd:Q96 .\n?x0 wdt:P26 wd:Q1371822 .\nFILTER ( ?x0 != wd:Q1371822 ) .\nwd:Q61951885 wdt:P161 ?x0 .\nwd:Q61951885 wdt:P161 wd:Q125106 .\nwd:Q61951885 wdt:P161 wd:Q41548 .\nwd:Q35738 wdt:P161 ?x0 .\nwd:Q35738 wdt:P161 wd:Q125106 .\nwd:Q35738 wdt:P161 wd:Q41548 .\nwd:Q93853 wdt:P161 ?x0 .\nwd:Q93853 wdt:P161 wd:Q125106 .\nwd:Q93853 wdt:P161 wd:Q41548\n}",
        "questionWithBrackets": "Did [The Hitman's Wife's Bodyguard] , [Once Upon a Time in Mexico] , and [Frida] star [Salma Hayek] , star [Fran\u00e7ois-Henri Pinault] 's Mexican spouse , and star [Antonio Banderas]"
    },
    {
        "questionIdx": 7338,
        "questionPatternModEntities": "Did M0 's Mexican employee marry M2",
        "questionTemplate": "Did [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] [VP_SIMPLE] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P2 M2 .\nFILTER ( ?x0 != M2 )\n}",
        "recursionDepth": 20,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P108 wd:Q13371 .\n?x0 wdt:P27 wd:Q96 .\n?x0 wdt:P26 wd:Q6109133 .\nFILTER ( ?x0 != wd:Q6109133 )\n}",
        "questionWithBrackets": "Did [Harvard University] 's Mexican employee marry [Rita Macedo]"
    },
    {
        "questionIdx": 7940,
        "questionPatternModEntities": "Did M3 and M4 marry a female German sibling of M0",
        "questionTemplate": "Did [entity] and [entity] [VP_SIMPLE] a [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P2 M2 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( M3 != ?x0 ) .\nFILTER ( M4 != ?x0 ) .\nM3 P3 ?x0 .\nM4 P3 ?x0\n}",
        "recursionDepth": 31,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P21 wd:Q6581072 .\n?x0 wdt:P27 wd:Q183 .\n?x0 wdt:P3373 wd:Q56119579 .\nFILTER ( ?x0 != wd:Q56119579 ) .\nFILTER ( wd:Q62085 != ?x0 ) .\nFILTER ( wd:Q13415350 != ?x0 ) .\nwd:Q62085 wdt:P26 ?x0 .\nwd:Q13415350 wdt:P26 ?x0\n}",
        "questionWithBrackets": "Did [Joachim Sauer] and [Ulrich Merkel] marry a female German sibling of [Marcus Kasner]"
    },
    {
        "questionIdx": 8196,
        "questionPatternModEntities": "Did M3 marry a female actor of M0 and M1",
        "questionTemplate": "Did [entity] [VP_SIMPLE] a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P1 M2 .\nFILTER ( M3 != ?x0 ) .\nM3 P2 ?x0\n}",
        "recursionDepth": 26,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P453 wd:Q12742668 .\n?x0 wdt:P453 wd:Q50386809 .\n?x0 wdt:P21 wd:Q6581072 .\nFILTER ( wd:Q182360 != ?x0 ) .\nwd:Q182360 wdt:P26 ?x0\n}",
        "questionWithBrackets": "Did [Giovanni Battista Meneghini] marry a female actor of [Carmen] and [Princess Turandot]"
    },
    {
        "questionIdx": 8495,
        "questionPatternModEntities": "Did M0 's parent marry M1",
        "questionTemplate": "Did [entity] 's [ROLE_SIMPLE] [VP_SIMPLE] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M1 )\n}",
        "recursionDepth": 15,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q101014 .\n?x0 wdt:P26 wd:Q1511 .\nFILTER ( ?x0 != wd:Q1511 )\n}",
        "questionWithBrackets": "Did [Daniela von B\u00fclow] 's parent marry [Richard Wagner]"
    },
    {
        "questionIdx": 8553,
        "questionPatternModEntities": "Did M1 star M2 , star M0 's employee , star M3 , and star M4 and M5",
        "questionTemplate": "Did [entity] [VP_SIMPLE] [entity] , [VP_SIMPLE] [entity] 's [ROLE_SIMPLE] , [VP_SIMPLE] [entity] , and [VP_SIMPLE] [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 ?x0 .\nM1 P1 M2 .\nM1 P1 M3 .\nM1 P1 M4 .\nM1 P1 M5\n}",
        "recursionDepth": 48,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P108 wd:Q935818 .\nwd:Q640395 wdt:P161 ?x0 .\nwd:Q640395 wdt:P161 wd:Q430276 .\nwd:Q640395 wdt:P161 wd:Q119546 .\nwd:Q640395 wdt:P161 wd:Q181 .\nwd:Q640395 wdt:P161 wd:Q185\n}",
        "questionWithBrackets": "Did [Truth in Numbers? Everything, According to Wikipedia] star [Howard Zinn] , star [Bomis] 's employee , star [Jimmy Wales] , and star [Andrew Keen] and [Larry Sanger]"
    },
    {
        "questionIdx": 8692,
        "questionPatternModEntities": "Did M2 star M3 and M4 and star a spouse of a Japanese spouse of M1",
        "questionTemplate": "Did [entity] [VP_SIMPLE] [entity] and [entity] and [VP_SIMPLE] a [ROLE_SIMPLE] of a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x1 P0 M1 .\n?x1 P1 M0 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x1 != M1 ) .\nM2 P2 ?x0 .\nM2 P2 M3 .\nM2 P2 M4\n}",
        "recursionDepth": 43,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P26 ?x1 .\n?x1 wdt:P27 wd:Q17 .\n?x1 wdt:P26 wd:Q11430084 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x1 != wd:Q11430084 ) .\nwd:Q95680233 wdt:P161 ?x0 .\nwd:Q95680233 wdt:P161 wd:Q3188302 .\nwd:Q95680233 wdt:P161 wd:Q16264004\n}",
        "questionWithBrackets": "Did [No label defined] star [J\u016bkichi Uno] and [Hiroshi Ishii] and star a spouse of a Japanese spouse of [Kyoko Natsume]"
    },
    {
        "questionIdx": 9121,
        "questionPatternModEntities": "Did M1 , M2 , and M3 star M0 's employee 's parent",
        "questionTemplate": "Did [entity] , [entity] , and [entity] [VP_SIMPLE] [entity] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x1 P1 M0 .\nM1 P2 ?x0 .\nM2 P2 ?x0 .\nM3 P2 ?x0\n}",
        "recursionDepth": 26,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 ?x1 .\n?x1 wdt:P108 wd:Q13164 .\nwd:Q10357564 wdt:P161 ?x0 .\nwd:Q754855 wdt:P161 ?x0 .\nwd:Q894846 wdt:P161 ?x0\n}",
        "questionWithBrackets": "Did [Mission to Moscow] , [Capitalism: A Love Story] , and [8 hlav \u0161\u00edlenstv\u00ed] star [Moscow State University] 's employee 's parent"
    },
    {
        "questionIdx": 9600,
        "questionPatternModEntities": "Did M0 play M1",
        "questionTemplate": "Did [entity] [VP_SIMPLE] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1\n}",
        "recursionDepth": 11,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q29765 wdt:P453 wd:Q845913\n}",
        "questionWithBrackets": "Did [Lim Jae-Duk] play [Zerg]"
    },
    {
        "questionIdx": 9767,
        "questionPatternModEntities": "Did M2 star M0 's Mexican sibling 's spouse , star M3 and M4 , and star M5",
        "questionTemplate": "Did [entity] [VP_SIMPLE] [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] 's [ROLE_SIMPLE] , [VP_SIMPLE] [entity] and [entity] , and [VP_SIMPLE] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x1 P1 M0 .\n?x1 P2 M1 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x1 != M0 ) .\nM2 P3 ?x0 .\nM2 P3 M3 .\nM2 P3 M4 .\nM2 P3 M5\n}",
        "recursionDepth": 48,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P26 ?x1 .\n?x1 wdt:P27 wd:Q96 .\n?x1 wdt:P3373 wd:Q47541637 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x1 != wd:Q47541637 ) .\nwd:Q3987995 wdt:P161 ?x0 .\nwd:Q3987995 wdt:P161 wd:Q230151 .\nwd:Q3987995 wdt:P161 wd:Q23880 .\nwd:Q3987995 wdt:P161 wd:Q171128\n}",
        "questionWithBrackets": "Did [The Life and Times of Frida Kahlo] star [Cristina Kahlo] 's Mexican sibling 's spouse , star [Diego Rivera] and [Lila Downs] , and star [Rita Moreno]"
    },
    {
        "questionIdx": 9786,
        "questionPatternModEntities": "Did M0 's Spanish employee marry M2 and M3",
        "questionTemplate": "Did [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] [VP_SIMPLE] [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P2 M2 .\n?x0 P2 M3 .\nFILTER ( ?x0 != M2 ) .\nFILTER ( ?x0 != M3 )\n}",
        "recursionDepth": 24,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P108 wd:Q209842 .\n?x0 wdt:P27 wd:Q29 .\n?x0 wdt:P26 wd:Q446437 .\n?x0 wdt:P26 wd:Q30223627 .\nFILTER ( ?x0 != wd:Q446437 ) .\nFILTER ( ?x0 != wd:Q30223627 )\n}",
        "questionWithBrackets": "Did [University of Paris] 's Spanish employee marry [Elena Garro] and [Marie Jos\u00e9 Tramini]"
    },
    {
        "questionIdx": 9847,
        "questionPatternModEntities": "Did M1 , M2 , M3 , and M4 star M0 's parent 's spouse",
        "questionTemplate": "Did [entity] , [entity] , [entity] , and [entity] [VP_SIMPLE] [entity] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x1 P1 M0 .\nFILTER ( ?x0 != ?x1 ) .\nM1 P2 ?x0 .\nM2 P2 ?x0 .\nM3 P2 ?x0 .\nM4 P2 ?x0\n}",
        "recursionDepth": 29,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P26 ?x1 .\n?x1 wdt:P40|wdt:P355 wd:Q229671 .\nFILTER ( ?x0 != ?x1 ) .\nwd:Q11946199 wdt:P161 ?x0 .\nwd:Q753518 wdt:P161 ?x0 .\nwd:Q527965 wdt:P161 ?x0 .\nwd:Q432102 wdt:P161 ?x0\n}",
        "questionWithBrackets": "Did [Darfur Now] , [Vypr\u00e1v\u011bj] , [Shine a Light] , and [Mayday] star [Chelsea Clinton] 's parent 's spouse"
    },
    {
        "questionIdx": 10018,
        "questionPatternModEntities": "Did M4 marry a French employee of M0 , M1 , and M2",
        "questionTemplate": "Did [entity] [VP_SIMPLE] a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P1 M3 .\nFILTER ( M4 != ?x0 ) .\nM4 P2 ?x0\n}",
        "recursionDepth": 29,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P108 wd:Q49110 .\n?x0 wdt:P108 wd:Q762266 .\n?x0 wdt:P108 wd:Q1132126 .\n?x0 wdt:P27 wd:Q142 .\nFILTER ( wd:Q104290760 != ?x0 ) .\nwd:Q104290760 wdt:P26 ?x0\n}",
        "questionWithBrackets": "Did [Marion Wiesel] marry a French employee of [Boston University] , [City University of New York] , and [Yedioth Ahronoth]"
    },
    {
        "questionIdx": 10240,
        "questionPatternModEntities": "Did M3 's German spouse play M1 and M2",
        "questionTemplate": "Did [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] [VP_SIMPLE] [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\n?x0 P2 M3 .\nFILTER ( ?x0 != M3 )\n}",
        "recursionDepth": 24,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P453 wd:Q64005951 .\n?x0 wdt:P453 wd:Q50807639 .\n?x0 wdt:P27 wd:Q183 .\n?x0 wdt:P26 wd:Q1560129 .\nFILTER ( ?x0 != wd:Q1560129 )\n}",
        "questionWithBrackets": "Did [Margarete Joswig] 's German spouse play [Lohengrin] and [Mario Cavaradossi]"
    },
    {
        "questionIdx": 10248,
        "questionPatternModEntities": "Did M2 star M1 's sibling and star M0 's sibling",
        "questionTemplate": "Did [entity] [VP_SIMPLE] [entity] 's [ROLE_SIMPLE] and [VP_SIMPLE] [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x1 P0 M1 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x1 != M1 ) .\nM2 P1 ?x0 .\nM2 P1 ?x1\n}",
        "recursionDepth": 30,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P3373 wd:Q76 .\n?x1 wdt:P3373 wd:Q15982167 .\nFILTER ( ?x0 != wd:Q76 ) .\nFILTER ( ?x1 != wd:Q15982167 ) .\nwd:Q17492289 wdt:P161 ?x0 .\nwd:Q17492289 wdt:P161 ?x1\n}",
        "questionWithBrackets": "Did [The Education of Auma Obama] star [Malik Obama] 's sibling and star [Barack Obama] 's sibling"
    },
    {
        "questionIdx": 10253,
        "questionPatternModEntities": "Did M2 star M0 's Spanish employee , star M3 , star M4 , and star M5",
        "questionTemplate": "Did [entity] [VP_SIMPLE] [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] , [VP_SIMPLE] [entity] , [VP_SIMPLE] [entity] , and [VP_SIMPLE] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nM2 P2 ?x0 .\nM2 P2 M3 .\nM2 P2 M4 .\nM2 P2 M5\n}",
        "recursionDepth": 49,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P108 wd:Q54829 .\n?x0 wdt:P27 wd:Q29 .\nwd:Q1421902 wdt:P161 ?x0 .\nwd:Q1421902 wdt:P161 wd:Q3826907 .\nwd:Q1421902 wdt:P161 wd:Q21208476 .\nwd:Q1421902 wdt:P161 wd:Q240949\n}",
        "questionWithBrackets": "Did [Alatriste] star [Radiotelevisi\u00f3n Espa\u00f1ola] 's Spanish employee , star [Paco Tous] , star [Jes\u00fas Ruyman] , and star [Elena Anaya]"
    },
    {
        "questionIdx": 10406,
        "questionPatternModEntities": "Did M1 marry M0 's spouse 's spouse",
        "questionTemplate": "Did [entity] [VP_SIMPLE] [entity] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x1 P0 M0 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x1 != M0 ) .\nFILTER ( M1 != ?x0 ) .\nM1 P0 ?x0\n}",
        "recursionDepth": 19,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P26 ?x1 .\n?x1 wdt:P26 wd:Q2293889 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x1 != wd:Q2293889 ) .\nFILTER ( wd:Q1812 != ?x0 ) .\nwd:Q1812 wdt:P26 ?x0\n}",
        "questionWithBrackets": "Did [Gordian III] marry [Tranquillina] 's spouse 's spouse"
    },
    {
        "questionIdx": 10433,
        "questionPatternModEntities": "Did M0 's American sibling marry M2 and M3",
        "questionTemplate": "Did [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] [VP_SIMPLE] [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P2 M2 .\n?x0 P2 M3 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x0 != M2 ) .\nFILTER ( ?x0 != M3 )\n}",
        "recursionDepth": 24,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P27 wd:Q30 .\n?x0 wdt:P3373 wd:Q23 .\n?x0 wdt:P26 wd:Q75764491 .\n?x0 wdt:P26 wd:Q105961124 .\nFILTER ( ?x0 != wd:Q75764491 ) .\nFILTER ( ?x0 != wd:Q105961124 ) .\nFILTER ( ?x0 != wd:Q23 )\n}",
        "questionWithBrackets": "Did [George Washington] 's American sibling marry [Mildred Thornton] and [Jane Champe]"
    },
    {
        "questionIdx": 10466,
        "questionPatternModEntities": "Did M1 marry M0 's parent and marry M2",
        "questionTemplate": "Did [entity] [VP_SIMPLE] [entity] 's [ROLE_SIMPLE] and [VP_SIMPLE] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( M1 != ?x0 ) .\nFILTER ( M1 != M2 ) .\nM1 P1 ?x0 .\nM1 P1 M2\n}",
        "recursionDepth": 26,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q7519 .\nFILTER ( wd:Q30948830 != ?x0 ) .\nFILTER ( wd:Q30948830 != wd:Q28690898 ) .\nwd:Q30948830 wdt:P26 ?x0 .\nwd:Q30948830 wdt:P26 wd:Q28690898\n}",
        "questionWithBrackets": "Did [Ibaqa beki] marry [\u00d6gedei Khan] 's parent and marry [Jurcedei]"
    },
    {
        "questionIdx": 10487,
        "questionPatternModEntities": "Did M2 marry a Japanese spouse of M1 , marry M3 and M4 , and marry M5",
        "questionTemplate": "Did [entity] [VP_SIMPLE] a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] , [VP_SIMPLE] [entity] and [entity] , and [VP_SIMPLE] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M1 ) .\nFILTER ( M2 != ?x0 ) .\nFILTER ( M2 != M3 ) .\nFILTER ( M2 != M4 ) .\nFILTER ( M2 != M5 ) .\nM2 P1 ?x0 .\nM2 P1 M3 .\nM2 P1 M4 .\nM2 P1 M5\n}",
        "recursionDepth": 46,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P27 wd:Q17 .\n?x0 wdt:P26 wd:Q314802 .\nFILTER ( ?x0 != wd:Q314802 ) .\nFILTER ( wd:Q335181 != ?x0 ) .\nFILTER ( wd:Q335181 != wd:Q6647029 ) .\nFILTER ( wd:Q335181 != wd:Q48765570 ) .\nFILTER ( wd:Q335181 != wd:Q11464914 ) .\nwd:Q335181 wdt:P26 ?x0 .\nwd:Q335181 wdt:P26 wd:Q6647029 .\nwd:Q335181 wdt:P26 wd:Q48765570 .\nwd:Q335181 wdt:P26 wd:Q11464914\n}",
        "questionWithBrackets": "Did [Temmu] marry a Japanese spouse of [Tenji] , marry [Amako no iratsume] and [Niitabe] , and marry [No label defined]"
    },
    {
        "questionIdx": 10697,
        "questionPatternModEntities": "Did M4 star M0 's French male Spanish sibling , star M5 , and star M6",
        "questionTemplate": "Did [entity] [VP_SIMPLE] [entity] 's [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] , [VP_SIMPLE] [entity] , and [VP_SIMPLE] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\n?x0 P2 M3 .\nFILTER ( ?x0 != M0 ) .\nM4 P3 ?x0 .\nM4 P3 M5 .\nM4 P3 M6\n}",
        "recursionDepth": 50,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P21 wd:Q6581097 .\n?x0 wdt:P27 wd:Q29 .\n?x0 wdt:P27 wd:Q142 .\n?x0 wdt:P3373 wd:Q2853780 .\nFILTER ( ?x0 != wd:Q2853780 ) .\nwd:Q5307144 wdt:P161 ?x0 .\nwd:Q5307144 wdt:P161 wd:Q3183419 .\nwd:Q5307144 wdt:P161 wd:Q6308327\n}",
        "questionWithBrackets": "Did [Drew Carey's Green Screen Show] star [Antoine Chao] 's French male Spanish sibling , star [Julie Larson] , and star [Jonathan Mangum]"
    },
    {
        "questionIdx": 10758,
        "questionPatternModEntities": "Did M3 and M4 marry a Spanish employee of M0 and M1",
        "questionTemplate": "Did [entity] and [entity] [VP_SIMPLE] a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P1 M2 .\nFILTER ( M3 != ?x0 ) .\nFILTER ( M4 != ?x0 ) .\nM3 P2 ?x0 .\nM4 P2 ?x0\n}",
        "recursionDepth": 30,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P108 wd:Q740308 .\n?x0 wdt:P108 wd:Q7156 .\n?x0 wdt:P27 wd:Q29 .\nFILTER ( wd:Q32999543 != ?x0 ) .\nFILTER ( wd:Q713928 != ?x0 ) .\nwd:Q32999543 wdt:P26 ?x0 .\nwd:Q713928 wdt:P26 ?x0\n}",
        "questionWithBrackets": "Did [Antonella Roccuzzo] and [Kevin Cheng] marry a Spanish employee of [UNICEF] and [FC Barcelona]"
    },
    {
        "questionIdx": 11090,
        "questionPatternModEntities": "Did M1 's German parent marry M2 and marry M3",
        "questionTemplate": "Did [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] [VP_SIMPLE] [entity] and [VP_SIMPLE] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P2 M2 .\n?x0 P2 M3 .\nFILTER ( ?x0 != M2 ) .\nFILTER ( ?x0 != M3 )\n}",
        "recursionDepth": 31,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q150652 .\n?x0 wdt:P27 wd:Q183 .\n?x0 wdt:P26 wd:Q66525 .\n?x0 wdt:P26 wd:Q156723 .\nFILTER ( ?x0 != wd:Q66525 ) .\nFILTER ( ?x0 != wd:Q156723 )\n}",
        "questionWithBrackets": "Did [Wilhelm I of Germany] 's German parent marry [Auguste von Harrach] and marry [Louise of Mecklenburg-Strelitz]"
    },
    {
        "questionIdx": 11350,
        "questionPatternModEntities": "Did M1 , M2 , and M3 marry a employee of M0",
        "questionTemplate": "Did [entity] , [entity] , and [entity] [VP_SIMPLE] a [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( M1 != ?x0 ) .\nFILTER ( M2 != ?x0 ) .\nFILTER ( M3 != ?x0 ) .\nM1 P1 ?x0 .\nM2 P1 ?x0 .\nM3 P1 ?x0\n}",
        "recursionDepth": 24,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P108 wd:Q21578 .\nFILTER ( wd:Q108941 != ?x0 ) .\nFILTER ( wd:Q75788694 != ?x0 ) .\nFILTER ( wd:Q260649 != ?x0 ) .\nwd:Q108941 wdt:P26 ?x0 .\nwd:Q75788694 wdt:P26 ?x0 .\nwd:Q260649 wdt:P26 ?x0\n}",
        "questionWithBrackets": "Did [Edie Brickell] , [Carrie Fisher] , and [Peggy Harper] marry a employee of [Princeton University]"
    },
    {
        "questionIdx": 11414,
        "questionPatternModEntities": "Did M1 and M3 marry a sibling of M0 and marry M2",
        "questionTemplate": "Did [entity] and [entity] [VP_SIMPLE] a [ROLE_SIMPLE] of [entity] and [VP_SIMPLE] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( M1 != ?x0 ) .\nFILTER ( M1 != M2 ) .\nFILTER ( M3 != ?x0 ) .\nFILTER ( M3 != M2 ) .\nM1 P1 ?x0 .\nM1 P1 M2 .\nM3 P1 ?x0 .\nM3 P1 M2\n}",
        "recursionDepth": 32,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P3373 wd:Q1048 .\nFILTER ( ?x0 != wd:Q1048 ) .\nFILTER ( wd:Q93714494 != ?x0 ) .\nFILTER ( wd:Q93714494 != wd:Q2743448 ) .\nFILTER ( wd:Q93953755 != ?x0 ) .\nFILTER ( wd:Q93953755 != wd:Q2743448 ) .\nwd:Q93714494 wdt:P26 ?x0 .\nwd:Q93714494 wdt:P26 wd:Q2743448 .\nwd:Q93953755 wdt:P26 ?x0 .\nwd:Q93953755 wdt:P26 wd:Q2743448\n}",
        "questionWithBrackets": "Did [Pinarius] and [Pedius] marry a sibling of [Julius Caesar] and marry [Julia Major]"
    },
    {
        "questionIdx": 11416,
        "questionPatternModEntities": "Did M1 marry M0 's spouse and marry M2 and M3",
        "questionTemplate": "Did [entity] [VP_SIMPLE] [entity] 's [ROLE_SIMPLE] and [VP_SIMPLE] [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( M1 != ?x0 ) .\nFILTER ( M1 != M2 ) .\nFILTER ( M1 != M3 ) .\nM1 P0 ?x0 .\nM1 P0 M2 .\nM1 P0 M3\n}",
        "recursionDepth": 30,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P26 wd:Q5721 .\nFILTER ( ?x0 != wd:Q5721 ) .\nFILTER ( wd:Q20745623 != ?x0 ) .\nFILTER ( wd:Q20745623 != wd:Q20745628 ) .\nFILTER ( wd:Q20745623 != wd:Q2851706 ) .\nwd:Q20745623 wdt:P26 ?x0 .\nwd:Q20745623 wdt:P26 wd:Q20745628 .\nwd:Q20745623 wdt:P26 wd:Q2851706\n}",
        "questionWithBrackets": "Did [Fran\u00e7ois de H\u00e9rain] marry [Philippe P\u00e9tain] 's spouse and marry [Jenny Philippoteaux] and [Annie P\u00e9tain]"
    },
    {
        "questionIdx": 11417,
        "questionPatternModEntities": "Did M1 marry M2 , marry a sibling of M0 , and marry M3 and M4",
        "questionTemplate": "Did [entity] [VP_SIMPLE] [entity] , [VP_SIMPLE] a [ROLE_SIMPLE] of [entity] , and [VP_SIMPLE] [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( M1 != ?x0 ) .\nFILTER ( M1 != M2 ) .\nFILTER ( M1 != M3 ) .\nFILTER ( M1 != M4 ) .\nM1 P1 ?x0 .\nM1 P1 M2 .\nM1 P1 M3 .\nM1 P1 M4\n}",
        "recursionDepth": 41,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P3373 wd:Q939 .\nFILTER ( ?x0 != wd:Q939 ) .\nFILTER ( wd:Q186256 != ?x0 ) .\nFILTER ( wd:Q186256 != wd:Q232488 ) .\nFILTER ( wd:Q186256 != wd:Q230566 ) .\nFILTER ( wd:Q186256 != wd:Q234405 ) .\nwd:Q186256 wdt:P26 ?x0 .\nwd:Q186256 wdt:P26 wd:Q232488 .\nwd:Q186256 wdt:P26 wd:Q230566 .\nwd:Q186256 wdt:P26 wd:Q234405\n}",
        "questionWithBrackets": "Did [Ferdinand VII of Spain] marry [Maria Isabel of Braganza] , marry a sibling of [Pedro I of Brazil] , and marry [Maria Christina of the Two Sicilies] and [Princess Maria Antonia of Naples and Sicily]"
    },
    {
        "questionIdx": 11418,
        "questionPatternModEntities": "Did M1 marry M2 , marry M0 's sibling , and marry M3 and M4",
        "questionTemplate": "Did [entity] [VP_SIMPLE] [entity] , [VP_SIMPLE] [entity] 's [ROLE_SIMPLE] , and [VP_SIMPLE] [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( M1 != ?x0 ) .\nFILTER ( M1 != M2 ) .\nFILTER ( M1 != M3 ) .\nFILTER ( M1 != M4 ) .\nM1 P1 ?x0 .\nM1 P1 M2 .\nM1 P1 M3 .\nM1 P1 M4\n}",
        "recursionDepth": 39,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P3373 wd:Q11581 .\nFILTER ( ?x0 != wd:Q11581 ) .\nFILTER ( wd:Q10856191 != ?x0 ) .\nFILTER ( wd:Q10856191 != wd:Q6150516 ) .\nFILTER ( wd:Q10856191 != wd:Q11769851 ) .\nFILTER ( wd:Q10856191 != wd:Q15406831 ) .\nwd:Q10856191 wdt:P26 ?x0 .\nwd:Q10856191 wdt:P26 wd:Q6150516 .\nwd:Q10856191 wdt:P26 wd:Q11769851 .\nwd:Q10856191 wdt:P26 wd:Q15406831\n}",
        "questionWithBrackets": "Did [Libor Bou\u010dek] marry [Marianna \u010eurianov\u00e1] , marry [Andrea Sestini Hlav\u00e1\u010dkov\u00e1] 's sibling , and marry [Jana Hlav\u00e1\u010dkov\u00e1] and [Gabriela Bendov\u00e1]"
    },
    {
        "questionIdx": 11419,
        "questionPatternModEntities": "Did M1 marry a parent and sibling of M0",
        "questionTemplate": "Did [entity] [VP_SIMPLE] a [ROLE_SIMPLE] and [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M0 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( M1 != ?x0 ) .\nM1 P2 ?x0\n}",
        "recursionDepth": 22,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q40022 .\n?x0 wdt:P3373 wd:Q40022 .\nFILTER ( ?x0 != wd:Q40022 ) .\nFILTER ( wd:Q39991 != ?x0 ) .\nwd:Q39991 wdt:P26 ?x0\n}",
        "questionWithBrackets": "Did [Ptolemy XII Auletes] marry a parent and sibling of [Berenice IV of Egypt]"
    },
    {
        "questionIdx": 11420,
        "questionPatternModEntities": "Did M0 's sibling , parent , and spouse marry M1",
        "questionTemplate": "Did [entity] 's [ROLE_SIMPLE] , [ROLE_SIMPLE] , and [ROLE_SIMPLE] [VP_SIMPLE] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M0 .\n?x0 P2 M0 .\n?x0 P2 M1 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x0 != M1 )\n}",
        "recursionDepth": 24,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q443473 .\n?x0 wdt:P3373 wd:Q443473 .\n?x0 wdt:P26 wd:Q443473 .\n?x0 wdt:P26 wd:Q210535 .\nFILTER ( ?x0 != wd:Q443473 ) .\nFILTER ( ?x0 != wd:Q443473 ) .\nFILTER ( ?x0 != wd:Q210535 )\n}",
        "questionWithBrackets": "Did [Henutmire] 's sibling , parent , and spouse marry [Nefertarilllala]"
    },
    {
        "questionIdx": 11449,
        "questionPatternModEntities": "Did M2 marry M3 and marry M0 's Chinese sibling",
        "questionTemplate": "Did [entity] [VP_SIMPLE] [entity] and [VP_SIMPLE] [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( M2 != ?x0 ) .\nFILTER ( M2 != M3 ) .\nM2 P2 ?x0 .\nM2 P2 M3\n}",
        "recursionDepth": 31,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P27 wd:Q148 .\n?x0 wdt:P3373 wd:Q9064696 .\nFILTER ( ?x0 != wd:Q9064696 ) .\nFILTER ( wd:Q16988 != ?x0 ) .\nFILTER ( wd:Q16988 != wd:Q9069005 ) .\nwd:Q16988 wdt:P26 ?x0 .\nwd:Q16988 wdt:P26 wd:Q9069005\n}",
        "questionWithBrackets": "Did [Liu Shaoqi] marry [Xie Fei] and marry [Wang Guangying] 's Chinese sibling"
    },
    {
        "questionIdx": 11457,
        "questionPatternModEntities": "Did M0 's male sibling play M1",
        "questionTemplate": "Did [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] [VP_SIMPLE] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P2 M2 .\nFILTER ( ?x0 != M0 )\n}",
        "recursionDepth": 20,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P453 wd:Q5815108 .\n?x0 wdt:P21 wd:Q6581097 .\n?x0 wdt:P3373 wd:Q3756757 .\nFILTER ( ?x0 != wd:Q3756757 )\n}",
        "questionWithBrackets": "Did [Gabriella Pavarotti] 's male sibling play [Duke of Mantua]"
    },
    {
        "questionIdx": 11576,
        "questionPatternModEntities": "Did M1 's sibling 's sibling marry M0",
        "questionTemplate": "Did [entity] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE] [VP_SIMPLE] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x0 P1 M0 .\n?x1 P0 M1 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x1 != M1 )\n}",
        "recursionDepth": 19,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P3373 ?x1 .\n?x0 wdt:P26 wd:Q96085758 .\n?x1 wdt:P3373 wd:Q96085759 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x0 != wd:Q96085758 ) .\nFILTER ( ?x1 != wd:Q96085759 )\n}",
        "questionWithBrackets": "Did [Avril Nora Blair] 's sibling 's sibling marry [Humphrey Burns Dakin]"
    },
    {
        "questionIdx": 11577,
        "questionPatternModEntities": "Did M1 's Dutch actor marry M2",
        "questionTemplate": "Did [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] [VP_SIMPLE] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P2 M2 .\nFILTER ( ?x0 != M2 )\n}",
        "recursionDepth": 20,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P453 wd:Q47490616 .\n?x0 wdt:P27 wd:Q29999 .\n?x0 wdt:P26 wd:Q47490609 .\nFILTER ( ?x0 != wd:Q47490609 )\n}",
        "questionWithBrackets": "Did [No label defined] 's Dutch actor marry [Aike Dirkzwager]"
    },
    {
        "questionIdx": 11696,
        "questionPatternModEntities": "Did M0 , M2 , and M3 play M1",
        "questionTemplate": "Did [entity] , [entity] , and [entity] [VP_SIMPLE] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM2 P0 M1 .\nM3 P0 M1\n}",
        "recursionDepth": 18,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q12602706 wdt:P453 wd:Q905926 .\nwd:Q483967 wdt:P453 wd:Q905926 .\nwd:Q491109 wdt:P453 wd:Q905926\n}",
        "questionWithBrackets": "Did [StarDust] , [Kingdom] , and [Stork] play [Protoss]"
    },
    {
        "questionIdx": 11918,
        "questionPatternModEntities": "Did M0 and M4 marry M1 , M2 , and M3",
        "questionTemplate": "Did [entity] and [entity] [VP_SIMPLE] [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nFILTER ( M0 != M1 ) .\nFILTER ( M0 != M2 ) .\nFILTER ( M0 != M3 ) .\nFILTER ( M4 != M1 ) .\nFILTER ( M4 != M2 ) .\nFILTER ( M4 != M3 ) .\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P0 M3 .\nM4 P0 M1 .\nM4 P0 M2 .\nM4 P0 M3\n}",
        "recursionDepth": 22,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nFILTER ( wd:Q203559 != wd:Q3051180 ) .\nFILTER ( wd:Q203559 != wd:Q91157930 ) .\nFILTER ( wd:Q203559 != wd:Q8072227 ) .\nFILTER ( wd:Q47102 != wd:Q3051180 ) .\nFILTER ( wd:Q47102 != wd:Q91157930 ) .\nFILTER ( wd:Q47102 != wd:Q8072227 ) .\nwd:Q203559 wdt:P26 wd:Q3051180 .\nwd:Q203559 wdt:P26 wd:Q91157930 .\nwd:Q203559 wdt:P26 wd:Q8072227 .\nwd:Q47102 wdt:P26 wd:Q3051180 .\nwd:Q47102 wdt:P26 wd:Q91157930 .\nwd:Q47102 wdt:P26 wd:Q8072227\n}",
        "questionWithBrackets": "Did [Joseph Smith] and [Brigham Young] marry [Eliza Roxcy Snow] , [Zina D. H. Young] , and [Emily Dow Partridge]"
    },
    {
        "questionIdx": 12109,
        "questionPatternModEntities": "Did M1 , M2 , and M3 marry a spouse of M0 's sibling",
        "questionTemplate": "Did [entity] , [entity] , and [entity] [VP_SIMPLE] a [ROLE_SIMPLE] of [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x1 P1 M0 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x1 != M0 ) .\nFILTER ( M1 != ?x0 ) .\nFILTER ( M2 != ?x0 ) .\nFILTER ( M3 != ?x0 ) .\nM1 P0 ?x0 .\nM2 P0 ?x0 .\nM3 P0 ?x0\n}",
        "recursionDepth": 28,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P26 ?x1 .\n?x1 wdt:P3373 wd:Q353 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x1 != wd:Q353 ) .\nFILTER ( wd:Q72556 != ?x0 ) .\nFILTER ( wd:Q51779 != ?x0 ) .\nFILTER ( wd:Q3572684 != ?x0 ) .\nwd:Q72556 wdt:P26 ?x0 .\nwd:Q51779 wdt:P26 ?x0 .\nwd:Q3572684 wdt:P26 ?x0\n}",
        "questionWithBrackets": "Did [Violant of Hungary] , [Teresa Gil de Vidaure] , and [Eleanor of Castile I] marry a spouse of [Blanche of Castile] 's sibling"
    },
    {
        "questionIdx": 12129,
        "questionPatternModEntities": "Did M2 , M4 , and M5 star M0 's Swedish sibling and star M3",
        "questionTemplate": "Did [entity] , [entity] , and [entity] [VP_SIMPLE] [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] and [VP_SIMPLE] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M0 ) .\nM2 P2 ?x0 .\nM2 P2 M3 .\nM4 P2 ?x0 .\nM4 P2 M3 .\nM5 P2 ?x0 .\nM5 P2 M3\n}",
        "recursionDepth": 38,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P27 wd:Q34 .\n?x0 wdt:P3373 wd:Q94881390 .\nFILTER ( ?x0 != wd:Q94881390 ) .\nwd:Q480696 wdt:P161 ?x0 .\nwd:Q480696 wdt:P161 wd:Q84563 .\nwd:Q205693 wdt:P161 ?x0 .\nwd:Q205693 wdt:P161 wd:Q84563 .\nwd:Q124246 wdt:P161 ?x0 .\nwd:Q124246 wdt:P161 wd:Q84563\n}",
        "questionWithBrackets": "Did [The Great King] , [The Great Sacrifice] , and [The Immortal Heart] star [Ulla S\u00f6derbaum] 's Swedish sibling and star [Franz Schafheitlin]"
    },
    {
        "questionIdx": 12185,
        "questionPatternModEntities": "Did M0 's employee marry M1",
        "questionTemplate": "Did [entity] 's [ROLE_SIMPLE] [VP_SIMPLE] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M1 )\n}",
        "recursionDepth": 15,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P108 wd:Q76845 .\n?x0 wdt:P26 wd:Q2607 .\nFILTER ( ?x0 != wd:Q2607 )\n}",
        "questionWithBrackets": "Did [Free German Youth] 's employee marry [Erich Honecker]"
    },
    {
        "questionIdx": 12204,
        "questionPatternModEntities": "Did M3 's Japanese spouse marry M1 and marry M2",
        "questionTemplate": "Did [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] [VP_SIMPLE] [entity] and [VP_SIMPLE] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\n?x0 P1 M3 .\nFILTER ( ?x0 != M1 ) .\nFILTER ( ?x0 != M2 ) .\nFILTER ( ?x0 != M3 )\n}",
        "recursionDepth": 31,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P27 wd:Q17 .\n?x0 wdt:P26 wd:Q11548763 .\n?x0 wdt:P26 wd:Q3546783 .\n?x0 wdt:P26 wd:Q11616294 .\nFILTER ( ?x0 != wd:Q11548763 ) .\nFILTER ( ?x0 != wd:Q3546783 ) .\nFILTER ( ?x0 != wd:Q11616294 )\n}",
        "questionWithBrackets": "Did [Setsuko Wakayama] 's Japanese spouse marry [Kaoru Yachigusa] and marry [Y\u014dko Mizuki]"
    },
    {
        "questionIdx": 12206,
        "questionPatternModEntities": "Did M0 marry M1 , M2 , and M3",
        "questionTemplate": "Did [entity] [VP_SIMPLE] [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nFILTER ( M0 != M1 ) .\nFILTER ( M0 != M2 ) .\nFILTER ( M0 != M3 ) .\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P0 M3\n}",
        "recursionDepth": 18,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nFILTER ( wd:Q253192 != wd:Q1203 ) .\nFILTER ( wd:Q253192 != wd:Q55965840 ) .\nFILTER ( wd:Q253192 != wd:Q15485232 ) .\nwd:Q253192 wdt:P26 wd:Q1203 .\nwd:Q253192 wdt:P26 wd:Q55965840 .\nwd:Q253192 wdt:P26 wd:Q15485232\n}",
        "questionWithBrackets": "Did [Cynthia Lennon] marry [John Twist] , [John Lennon] , and [Roberto Bassanini]"
    },
    {
        "questionIdx": 12283,
        "questionPatternModEntities": "Did M0 's sibling marry M1 's spouse",
        "questionTemplate": "Did [entity] 's [ROLE_SIMPLE] [VP_SIMPLE] [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 ?x1 .\n?x1 P1 M1 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x1 != M1 )\n}",
        "recursionDepth": 19,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P3373 wd:Q720 .\n?x0 wdt:P26 ?x1 .\n?x1 wdt:P26 wd:Q1914424 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x0 != wd:Q720 ) .\nFILTER ( ?x1 != wd:Q1914424 )\n}",
        "questionWithBrackets": "Did [Genghis Khan] 's sibling marry [Huochenbieji] 's spouse"
    },
    {
        "questionIdx": 12293,
        "questionPatternModEntities": "Did M2 marry a employee of M0 and M1 and marry M3 and M4",
        "questionTemplate": "Did [entity] [VP_SIMPLE] a [ROLE_SIMPLE] of [entity] and [entity] and [VP_SIMPLE] [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\nFILTER ( M2 != ?x0 ) .\nFILTER ( M2 != M3 ) .\nFILTER ( M2 != M4 ) .\nM2 P1 ?x0 .\nM2 P1 M3 .\nM2 P1 M4\n}",
        "recursionDepth": 36,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P108 wd:Q55044 .\n?x0 wdt:P108 wd:Q153006 .\nFILTER ( wd:Q75346790 != ?x0 ) .\nFILTER ( wd:Q75346790 != wd:Q75346788 ) .\nFILTER ( wd:Q75346790 != wd:Q2563 ) .\nwd:Q75346790 wdt:P26 ?x0 .\nwd:Q75346790 wdt:P26 wd:Q75346788 .\nwd:Q75346790 wdt:P26 wd:Q2563\n}",
        "questionWithBrackets": "Did [Alexandra von Vultejus] marry a employee of [Freie Universit\u00e4t Berlin] and [Ludwig Maximilian University of Munich] and marry [Gotz Baron von Berlichingen] and [Roman Herzog]"
    },
    {
        "questionIdx": 12545,
        "questionPatternModEntities": "Did M1 star M0 's sibling and parent and star M2",
        "questionTemplate": "Did [entity] [VP_SIMPLE] [entity] 's [ROLE_SIMPLE] and [ROLE_SIMPLE] and [VP_SIMPLE] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M0 .\nFILTER ( ?x0 != M0 ) .\nM1 P2 ?x0 .\nM1 P2 M2\n}",
        "recursionDepth": 31,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q1926267 .\n?x0 wdt:P3373 wd:Q1926267 .\nFILTER ( ?x0 != wd:Q1926267 ) .\nwd:Q1571851 wdt:P161 ?x0 .\nwd:Q1571851 wdt:P161 wd:Q191037\n}",
        "questionWithBrackets": "Did [Sam and Friends] star [John Henson] 's sibling and parent and star [Jim Henson]"
    },
    {
        "questionIdx": 12586,
        "questionPatternModEntities": "Did M5 marry a British employee of M0 , M1 , M2 , and M3",
        "questionTemplate": "Did [entity] [VP_SIMPLE] a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] , [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P0 M3 .\n?x0 P1 M4 .\nFILTER ( M5 != ?x0 ) .\nM5 P2 ?x0\n}",
        "recursionDepth": 32,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P108 wd:Q501758 .\n?x0 wdt:P108 wd:Q738258 .\n?x0 wdt:P108 wd:Q152838 .\n?x0 wdt:P108 wd:Q861548 .\n?x0 wdt:P27 wd:Q145 .\nFILTER ( wd:Q22097468 != ?x0 ) .\nwd:Q22097468 wdt:P26 ?x0\n}",
        "questionWithBrackets": "Did [Margit Dirac] marry a British employee of [Florida State University] , [University of Florida] , [University of G\u00f6ttingen] , and [University of Miami]"
    },
    {
        "questionIdx": 12600,
        "questionPatternModEntities": "Did M1 and M3 marry M2 and marry a sibling of M0",
        "questionTemplate": "Did [entity] and [entity] [VP_SIMPLE] [entity] and [VP_SIMPLE] a [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( M1 != ?x0 ) .\nFILTER ( M1 != M2 ) .\nFILTER ( M3 != ?x0 ) .\nFILTER ( M3 != M2 ) .\nM1 P1 ?x0 .\nM1 P1 M2 .\nM3 P1 ?x0 .\nM3 P1 M2\n}",
        "recursionDepth": 32,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P3373 wd:Q1043 .\nFILTER ( ?x0 != wd:Q1043 ) .\nFILTER ( wd:Q80090868 != ?x0 ) .\nFILTER ( wd:Q80090868 != wd:Q64706973 ) .\nFILTER ( wd:Q64706971 != ?x0 ) .\nFILTER ( wd:Q64706971 != wd:Q64706973 ) .\nwd:Q80090868 wdt:P26 ?x0 .\nwd:Q80090868 wdt:P26 wd:Q64706973 .\nwd:Q64706971 wdt:P26 ?x0 .\nwd:Q64706971 wdt:P26 wd:Q64706973\n}",
        "questionWithBrackets": "Did [Gabriel H\u00f6\u00f6k] and [Johannes Collin] marry [Anna Maria Linn\u00e6] and marry a sibling of [Carl Linnaeus]"
    },
    {
        "questionIdx": 12649,
        "questionPatternModEntities": "Did M1 marry M2 and M3 and marry a sibling of M0",
        "questionTemplate": "Did [entity] [VP_SIMPLE] [entity] and [entity] and [VP_SIMPLE] a [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( M1 != ?x0 ) .\nFILTER ( M1 != M2 ) .\nFILTER ( M1 != M3 ) .\nM1 P1 ?x0 .\nM1 P1 M2 .\nM1 P1 M3\n}",
        "recursionDepth": 32,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P3373 wd:Q1035 .\nFILTER ( ?x0 != wd:Q1035 ) .\nFILTER ( wd:Q76053168 != ?x0 ) .\nFILTER ( wd:Q76053168 != wd:Q76053167 ) .\nFILTER ( wd:Q76053168 != wd:Q76053176 ) .\nwd:Q76053168 wdt:P26 ?x0 .\nwd:Q76053168 wdt:P26 wd:Q76053167 .\nwd:Q76053168 wdt:P26 wd:Q76053176\n}",
        "questionWithBrackets": "Did [Charles Langton] marry [Charlotte Wedgwood] and [Emily Darwin] and marry a sibling of [Charles Darwin]"
    },
    {
        "questionIdx": 12665,
        "questionPatternModEntities": "Did M0 's spouse and sibling marry M1 , M2 , M3 , and M4",
        "questionTemplate": "Did [entity] 's [ROLE_SIMPLE] and [ROLE_SIMPLE] [VP_SIMPLE] [entity] , [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\n?x0 P1 M3 .\n?x0 P1 M4 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x0 != M1 ) .\nFILTER ( ?x0 != M2 ) .\nFILTER ( ?x0 != M3 ) .\nFILTER ( ?x0 != M4 )\n}",
        "recursionDepth": 30,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P3373 wd:Q277524 .\n?x0 wdt:P26 wd:Q19280 .\n?x0 wdt:P26 wd:Q19281 .\n?x0 wdt:P26 wd:Q19299 .\n?x0 wdt:P26 wd:Q19284 .\n?x0 wdt:P26 wd:Q277524 .\nFILTER ( ?x0 != wd:Q19280 ) .\nFILTER ( ?x0 != wd:Q19281 ) .\nFILTER ( ?x0 != wd:Q19299 ) .\nFILTER ( ?x0 != wd:Q19284 ) .\nFILTER ( ?x0 != wd:Q277524 ) .\nFILTER ( ?x0 != wd:Q277524 )\n}",
        "questionWithBrackets": "Did [Neferu II] 's spouse and sibling marry [Tem] , [Ashayet] , [Kemsit] , and [Henhenet]"
    },
    {
        "questionIdx": 12683,
        "questionPatternModEntities": "Did M1 's spouse 's sibling marry M0",
        "questionTemplate": "Did [entity] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE] [VP_SIMPLE] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x0 P1 M0 .\n?x1 P1 M1 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x1 != M1 )\n}",
        "recursionDepth": 19,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P3373 ?x1 .\n?x0 wdt:P26 wd:Q75357392 .\n?x1 wdt:P26 wd:Q75270813 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x0 != wd:Q75357392 ) .\nFILTER ( ?x1 != wd:Q75270813 )\n}",
        "questionWithBrackets": "Did [Diana Henderson] 's spouse 's sibling marry [Edith Csanady de Telegd]"
    },
    {
        "questionIdx": 12700,
        "questionPatternModEntities": "Did M1 star M0 's sibling and parent",
        "questionTemplate": "Did [entity] [VP_SIMPLE] [entity] 's [ROLE_SIMPLE] and [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M0 .\nFILTER ( ?x0 != M0 ) .\nM1 P2 ?x0\n}",
        "recursionDepth": 20,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q1926267 .\n?x0 wdt:P3373 wd:Q1926267 .\nFILTER ( ?x0 != wd:Q1926267 ) .\nwd:Q1571851 wdt:P161 ?x0\n}",
        "questionWithBrackets": "Did [Sam and Friends] star [John Henson] 's sibling and parent"
    },
    {
        "questionIdx": 12702,
        "questionPatternModEntities": "Did M1 star M2 and star M0 's parent 's actor",
        "questionTemplate": "Did [entity] [VP_SIMPLE] [entity] and [VP_SIMPLE] [entity] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x1 P1 M0 .\nM1 P2 ?x0 .\nM1 P2 M2\n}",
        "recursionDepth": 30,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P453 ?x1 .\n?x1 wdt:P40|wdt:P355 wd:Q8125562 .\nwd:Q23594 wdt:P161 ?x0 .\nwd:Q23594 wdt:P161 wd:Q63187\n}",
        "questionWithBrackets": "Did [Homeland] star [Sebastian Koch] and star [Elboron] 's parent 's actor"
    },
    {
        "questionIdx": 12750,
        "questionPatternModEntities": "Did M1 , M2 , M3 , and M4 marry a parent of M0",
        "questionTemplate": "Did [entity] , [entity] , [entity] , and [entity] [VP_SIMPLE] a [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( M1 != ?x0 ) .\nFILTER ( M2 != ?x0 ) .\nFILTER ( M3 != ?x0 ) .\nFILTER ( M4 != ?x0 ) .\nM1 P1 ?x0 .\nM2 P1 ?x0 .\nM3 P1 ?x0 .\nM4 P1 ?x0\n}",
        "recursionDepth": 27,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q7519 .\nFILTER ( wd:Q4177257 != ?x0 ) .\nFILTER ( wd:Q30948830 != ?x0 ) .\nFILTER ( wd:Q7065392 != ?x0 ) .\nFILTER ( wd:Q4177255 != ?x0 ) .\nwd:Q4177257 wdt:P26 ?x0 .\nwd:Q30948830 wdt:P26 ?x0 .\nwd:Q7065392 wdt:P26 ?x0 .\nwd:Q4177255 wdt:P26 ?x0\n}",
        "questionWithBrackets": "Did [Yesugen] , [Yesui] , [Ibaqa beki] , and [Chahe] marry a parent of [\u00d6gedei Khan]"
    },
    {
        "questionIdx": 12754,
        "questionPatternModEntities": "Did M1 , M2 , and M3 marry M0 's parent",
        "questionTemplate": "Did [entity] , [entity] , and [entity] [VP_SIMPLE] [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( M1 != ?x0 ) .\nFILTER ( M2 != ?x0 ) .\nFILTER ( M3 != ?x0 ) .\nM1 P1 ?x0 .\nM2 P1 ?x0 .\nM3 P1 ?x0\n}",
        "recursionDepth": 22,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q7517 .\nFILTER ( wd:Q4177255 != ?x0 ) .\nFILTER ( wd:Q4177257 != ?x0 ) .\nFILTER ( wd:Q4502265 != ?x0 ) .\nwd:Q4177255 wdt:P26 ?x0 .\nwd:Q4177257 wdt:P26 ?x0 .\nwd:Q4502265 wdt:P26 ?x0\n}",
        "questionWithBrackets": "Did [Yesugen] , [Khulan] , and [Yesui] marry [Tolui] 's parent"
    },
    {
        "questionIdx": 12784,
        "questionPatternModEntities": "Did M2 , M3 , M4 , and M5 marry M0 's Chinese sibling",
        "questionTemplate": "Did [entity] , [entity] , [entity] , and [entity] [VP_SIMPLE] [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( M2 != ?x0 ) .\nFILTER ( M3 != ?x0 ) .\nFILTER ( M4 != ?x0 ) .\nFILTER ( M5 != ?x0 ) .\nM2 P2 ?x0 .\nM3 P2 ?x0 .\nM4 P2 ?x0 .\nM5 P2 ?x0\n}",
        "recursionDepth": 30,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P27 wd:Q148 .\n?x0 wdt:P3373 wd:Q4990857 .\nFILTER ( ?x0 != wd:Q4990857 ) .\nFILTER ( wd:Q698749 != ?x0 ) .\nFILTER ( wd:Q699692 != ?x0 ) .\nFILTER ( wd:Q708839 != ?x0 ) .\nFILTER ( wd:Q434584 != ?x0 ) .\nwd:Q698749 wdt:P26 ?x0 .\nwd:Q699692 wdt:P26 ?x0 .\nwd:Q708839 wdt:P26 ?x0 .\nwd:Q434584 wdt:P26 ?x0\n}",
        "questionWithBrackets": "Did [Tan Yuling] , [Li Shuxian] , [Li Yuqin] , and [Wenxiu] marry [Jin Yunying] 's Chinese sibling"
    },
    {
        "questionIdx": 12785,
        "questionPatternModEntities": "Did M2 and M3 marry a Japanese spouse of M1",
        "questionTemplate": "Did [entity] and [entity] [VP_SIMPLE] a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M1 ) .\nFILTER ( M2 != ?x0 ) .\nFILTER ( M3 != ?x0 ) .\nM2 P1 ?x0 .\nM3 P1 ?x0\n}",
        "recursionDepth": 26,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P27 wd:Q17 .\n?x0 wdt:P26 wd:Q3546783 .\nFILTER ( ?x0 != wd:Q3546783 ) .\nFILTER ( wd:Q11548763 != ?x0 ) .\nFILTER ( wd:Q11616294 != ?x0 ) .\nwd:Q11548763 wdt:P26 ?x0 .\nwd:Q11616294 wdt:P26 ?x0\n}",
        "questionWithBrackets": "Did [Setsuko Wakayama] and [Y\u014dko Mizuki] marry a Japanese spouse of [Kaoru Yachigusa]"
    },
    {
        "questionIdx": 12806,
        "questionPatternModEntities": "Did M3 's male spouse play M0 and M1",
        "questionTemplate": "Did [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] [VP_SIMPLE] [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P1 M2 .\n?x0 P2 M3 .\nFILTER ( ?x0 != M3 )\n}",
        "recursionDepth": 24,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P453 wd:Q64005951 .\n?x0 wdt:P453 wd:Q50807639 .\n?x0 wdt:P21 wd:Q6581097 .\n?x0 wdt:P26 wd:Q1560129 .\nFILTER ( ?x0 != wd:Q1560129 )\n}",
        "questionWithBrackets": "Did [Margarete Joswig] 's male spouse play [Mario Cavaradossi] and [Lohengrin]"
    },
    {
        "questionIdx": 12823,
        "questionPatternModEntities": "Did M0 star M1 and star M2",
        "questionTemplate": "Did [entity] [VP_SIMPLE] [entity] and [VP_SIMPLE] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2\n}",
        "recursionDepth": 22,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q50861 wdt:P161 wd:Q207 .\nwd:Q50861 wdt:P161 wd:Q207873\n}",
        "questionWithBrackets": "Did [Live Free or Die Hard] star [Mary Elizabeth Winstead] and star [George W. Bush]"
    },
    {
        "questionIdx": 12886,
        "questionPatternModEntities": "Did M2 marry M1 's sibling and marry M0 's sibling",
        "questionTemplate": "Did [entity] [VP_SIMPLE] [entity] 's [ROLE_SIMPLE] and [VP_SIMPLE] [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x1 P0 M1 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x1 != M1 ) .\nFILTER ( M2 != ?x0 ) .\nFILTER ( M2 != ?x1 ) .\nM2 P1 ?x0 .\nM2 P1 ?x1\n}",
        "recursionDepth": 30,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P3373 wd:Q720 .\n?x1 wdt:P3373 wd:Q7519 .\nFILTER ( ?x0 != wd:Q720 ) .\nFILTER ( ?x1 != wd:Q7519 ) .\nFILTER ( wd:Q28416764 != ?x0 ) .\nFILTER ( wd:Q28416764 != ?x1 ) .\nwd:Q28416764 wdt:P26 ?x0 .\nwd:Q28416764 wdt:P26 ?x1\n}",
        "questionWithBrackets": "Did [Butu] marry [\u00d6gedei Khan] 's sibling and marry [Genghis Khan] 's sibling"
    },
    {
        "questionIdx": 12936,
        "questionPatternModEntities": "Did M2 star M3 and star a French spouse of M1",
        "questionTemplate": "Did [entity] [VP_SIMPLE] [entity] and [VP_SIMPLE] a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M1 ) .\nM2 P2 ?x0 .\nM2 P2 M3\n}",
        "recursionDepth": 33,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P27 wd:Q142 .\n?x0 wdt:P26 wd:Q48991121 .\nFILTER ( ?x0 != wd:Q48991121 ) .\nwd:Q3221713 wdt:P161 ?x0 .\nwd:Q3221713 wdt:P161 wd:Q128543\n}",
        "questionWithBrackets": "Did [Le confort et l'indiff\u00e9rence] star [Jean Chr\u00e9tien] and star a French spouse of [Eve Barre]"
    },
    {
        "questionIdx": 12996,
        "questionPatternModEntities": "Did M1 and M2 marry M0 's spouse",
        "questionTemplate": "Did [entity] and [entity] [VP_SIMPLE] [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( M1 != ?x0 ) .\nFILTER ( M2 != ?x0 ) .\nM1 P0 ?x0 .\nM2 P0 ?x0\n}",
        "recursionDepth": 19,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P26 wd:Q1407 .\nFILTER ( ?x0 != wd:Q1407 ) .\nFILTER ( wd:Q48174 != ?x0 ) .\nFILTER ( wd:Q315492 != ?x0 ) .\nwd:Q48174 wdt:P26 ?x0 .\nwd:Q315492 wdt:P26 ?x0\n}",
        "questionWithBrackets": "Did [Marcus Claudius Marcellus] and [Marcus Vipsanius Agrippa] marry [Tiberius] 's spouse"
    },
    {
        "questionIdx": 12997,
        "questionPatternModEntities": "Did M1 , M2 , and M3 marry a spouse of M0",
        "questionTemplate": "Did [entity] , [entity] , and [entity] [VP_SIMPLE] a [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( M1 != ?x0 ) .\nFILTER ( M2 != ?x0 ) .\nFILTER ( M3 != ?x0 ) .\nM1 P0 ?x0 .\nM2 P0 ?x0 .\nM3 P0 ?x0\n}",
        "recursionDepth": 24,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P26 wd:Q635 .\nFILTER ( ?x0 != wd:Q635 ) .\nFILTER ( wd:Q598225 != ?x0 ) .\nFILTER ( wd:Q229483 != ?x0 ) .\nFILTER ( wd:Q233077 != ?x0 ) .\nwd:Q598225 wdt:P26 ?x0 .\nwd:Q229483 wdt:P26 ?x0 .\nwd:Q233077 wdt:P26 ?x0\n}",
        "questionWithBrackets": "Did [Fulvia] , [Antonia Hybrida Minor] , and [Octavia the Younger] marry a spouse of [Cleopatra]"
    },
    {
        "questionIdx": 12999,
        "questionPatternModEntities": "Did M1 and M2 marry M0 's sibling 's sibling",
        "questionTemplate": "Did [entity] and [entity] [VP_SIMPLE] [entity] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x1 P0 M0 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x1 != M0 ) .\nFILTER ( M1 != ?x0 ) .\nFILTER ( M2 != ?x0 ) .\nM1 P1 ?x0 .\nM2 P1 ?x0\n}",
        "recursionDepth": 23,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P3373 ?x1 .\n?x1 wdt:P3373 wd:Q232488 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x1 != wd:Q232488 ) .\nFILTER ( wd:Q343621 != ?x0 ) .\nFILTER ( wd:Q3129915 != ?x0 ) .\nwd:Q343621 wdt:P26 ?x0 .\nwd:Q3129915 wdt:P26 ?x0\n}",
        "questionWithBrackets": "Did [Infante Carlos, Count of Molina] and [Infante Pedro Carlos of Spain and Portugal] marry [Maria Isabel of Braganza] 's sibling 's sibling"
    },
    {
        "questionIdx": 13087,
        "questionPatternModEntities": "Did M1 star a sibling and parent of M0 and star M2",
        "questionTemplate": "Did [entity] [VP_SIMPLE] a [ROLE_SIMPLE] and [ROLE_SIMPLE] of [entity] and [VP_SIMPLE] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M0 .\nFILTER ( ?x0 != M0 ) .\nM1 P2 ?x0 .\nM1 P2 M2\n}",
        "recursionDepth": 33,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q1926267 .\n?x0 wdt:P3373 wd:Q1926267 .\nFILTER ( ?x0 != wd:Q1926267 ) .\nwd:Q1571851 wdt:P161 ?x0 .\nwd:Q1571851 wdt:P161 wd:Q191037\n}",
        "questionWithBrackets": "Did [Sam and Friends] star a sibling and parent of [John Henson] and star [Jim Henson]"
    },
    {
        "questionIdx": 13095,
        "questionPatternModEntities": "Did M1 star M0 's employee , star M2 , M3 , M4 , and M5 , and star M6",
        "questionTemplate": "Did [entity] [VP_SIMPLE] [entity] 's [ROLE_SIMPLE] , [VP_SIMPLE] [entity] , [entity] , [entity] , and [entity] , and [VP_SIMPLE] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 ?x0 .\nM1 P1 M2 .\nM1 P1 M3 .\nM1 P1 M4 .\nM1 P1 M5 .\nM1 P1 M6\n}",
        "recursionDepth": 45,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P108 wd:Q45132200 .\nwd:Q147235 wdt:P161 ?x0 .\nwd:Q147235 wdt:P161 wd:Q446481 .\nwd:Q147235 wdt:P161 wd:Q8349 .\nwd:Q147235 wdt:P161 wd:Q607 .\nwd:Q147235 wdt:P161 wd:Q40715 .\nwd:Q147235 wdt:P161 wd:Q42493\n}",
        "questionWithBrackets": "Did [How I Met Your Mother] star [Bloomberg Family Foundation] 's employee , star [Jennifer Lopez] , [\"Weird Al\" Yankovic] , [Katy Perry] , and [Harvey Fierstein] , and star [Michael Bloomberg]"
    },
    {
        "questionIdx": 13149,
        "questionPatternModEntities": "Did M1 , M2 , M3 , and M4 marry M0 's actor 's parent",
        "questionTemplate": "Did [entity] , [entity] , [entity] , and [entity] [VP_SIMPLE] [entity] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x1 P1 M0 .\nFILTER ( M1 != ?x0 ) .\nFILTER ( M2 != ?x0 ) .\nFILTER ( M3 != ?x0 ) .\nFILTER ( M4 != ?x0 ) .\nM1 P2 ?x0 .\nM2 P2 ?x0 .\nM3 P2 ?x0 .\nM4 P2 ?x0\n}",
        "recursionDepth": 29,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 ?x1 .\n?x1 wdt:P453 wd:Q222573 .\nFILTER ( wd:Q748574 != ?x0 ) .\nFILTER ( wd:Q58324367 != ?x0 ) .\nFILTER ( wd:Q2293877 != ?x0 ) .\nFILTER ( wd:Q106076620 != ?x0 ) .\nwd:Q748574 wdt:P26 ?x0 .\nwd:Q58324367 wdt:P26 ?x0 .\nwd:Q2293877 wdt:P26 ?x0 .\nwd:Q106076620 wdt:P26 ?x0\n}",
        "questionWithBrackets": "Did [Asterodeia] , [Eidyia] , [Clytia] , and [N\u00e9\u00e8re (N\u00e9r\u00e9ide) N\u00e9\u00e8re (N\u00e9r\u00e9ide) inlanguage:fr] marry [femme fatale] 's actor 's parent"
    },
    {
        "questionIdx": 13330,
        "questionPatternModEntities": "Did M0 's parent marry a spouse of M1",
        "questionTemplate": "Did [entity] 's [ROLE_SIMPLE] [VP_SIMPLE] a [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 ?x1 .\n?x1 P1 M1 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x1 != M1 )\n}",
        "recursionDepth": 21,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q5007 .\n?x0 wdt:P26 ?x1 .\n?x1 wdt:P26 wd:Q8253326 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x1 != wd:Q8253326 )\n}",
        "questionWithBrackets": "Did [Emperor Daozong of Liao] 's parent marry a spouse of [Xiaosanqian]"
    },
    {
        "questionIdx": 13423,
        "questionPatternModEntities": "Did M2 star M3 , M4 , M5 , and M6 and star M0 's Spanish sibling",
        "questionTemplate": "Did [entity] [VP_SIMPLE] [entity] , [entity] , [entity] , and [entity] and [VP_SIMPLE] [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M0 ) .\nM2 P2 ?x0 .\nM2 P2 M3 .\nM2 P2 M4 .\nM2 P2 M5 .\nM2 P2 M6\n}",
        "recursionDepth": 41,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P27 wd:Q29 .\n?x0 wdt:P3373 wd:Q330014 .\nFILTER ( ?x0 != wd:Q330014 ) .\nwd:Q4941 wdt:P161 ?x0 .\nwd:Q4941 wdt:P161 wd:Q231310 .\nwd:Q4941 wdt:P161 wd:Q28054 .\nwd:Q4941 wdt:P161 wd:Q4547 .\nwd:Q4941 wdt:P161 wd:Q28463\n}",
        "questionWithBrackets": "Did [Skyfall] star [Helen McCrory] , [Daniel Craig] , [B\u00e9r\u00e9nice Marlohe] , and [Judi Dench] and star [Carlos Bardem] 's Spanish sibling"
    },
    {
        "questionIdx": 13424,
        "questionPatternModEntities": "Did M2 star M3 and M4 , star a French employee of M0 , and star M5 and M6",
        "questionTemplate": "Did [entity] [VP_SIMPLE] [entity] and [entity] , [VP_SIMPLE] a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] , and [VP_SIMPLE] [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nM2 P2 ?x0 .\nM2 P2 M3 .\nM2 P2 M4 .\nM2 P2 M5 .\nM2 P2 M6\n}",
        "recursionDepth": 50,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P108 wd:Q740308 .\n?x0 wdt:P27 wd:Q142 .\nwd:Q25521 wdt:P161 ?x0 .\nwd:Q25521 wdt:P161 wd:Q383420 .\nwd:Q25521 wdt:P161 wd:Q1785 .\nwd:Q25521 wdt:P161 wd:Q83158 .\nwd:Q25521 wdt:P161 wd:Q5593\n}",
        "questionWithBrackets": "Did [Testament of Orpheus] star [Roger Vadim] and [Jean Cocteau] , star a French employee of [UNICEF] , and star [Pablo Picasso] and [Charles Aznavour]"
    },
    {
        "questionIdx": 13425,
        "questionPatternModEntities": "Did M2 star a Spanish sibling of M0 and star M3 , M4 , M5 , and M6",
        "questionTemplate": "Did [entity] [VP_SIMPLE] a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] and [VP_SIMPLE] [entity] , [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M0 ) .\nM2 P2 ?x0 .\nM2 P2 M3 .\nM2 P2 M4 .\nM2 P2 M5 .\nM2 P2 M6\n}",
        "recursionDepth": 43,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P27 wd:Q29 .\n?x0 wdt:P3373 wd:Q11905647 .\nFILTER ( ?x0 != wd:Q11905647 ) .\nwd:Q190575 wdt:P161 ?x0 .\nwd:Q190575 wdt:P161 wd:Q5577 .\nwd:Q190575 wdt:P161 wd:Q1027034 .\nwd:Q190575 wdt:P161 wd:Q51545 .\nwd:Q190575 wdt:P161 wd:Q1027426\n}",
        "questionWithBrackets": "Did [Un Chien Andalou] star a Spanish sibling of [Anna Maria Dal\u00ed] and star [Pierre Batcheff] , [Salvador Dal\u00ed] , [Jaume Miravitlles] , and [Luis Bu\u00f1uel]"
    },
    {
        "questionIdx": 13441,
        "questionPatternModEntities": "Did M1 marry M0 's sibling",
        "questionTemplate": "Did [entity] [VP_SIMPLE] [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( M1 != ?x0 ) .\nM1 P1 ?x0\n}",
        "recursionDepth": 15,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P3373 wd:Q4992 .\nFILTER ( ?x0 != wd:Q4992 ) .\nFILTER ( wd:Q1071957 != ?x0 ) .\nwd:Q1071957 wdt:P26 ?x0\n}",
        "questionWithBrackets": "Did [Kuchlug] marry [Emperor Shizong of Liao] 's sibling"
    },
    {
        "questionIdx": 13442,
        "questionPatternModEntities": "Did M0 and M3 marry M1 and M2",
        "questionTemplate": "Did [entity] and [entity] [VP_SIMPLE] [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nFILTER ( M0 != M1 ) .\nFILTER ( M0 != M2 ) .\nFILTER ( M3 != M1 ) .\nFILTER ( M3 != M2 ) .\nM0 P0 M1 .\nM0 P0 M2 .\nM3 P0 M1 .\nM3 P0 M2\n}",
        "recursionDepth": 19,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nFILTER ( wd:Q40023 != wd:Q3340 ) .\nFILTER ( wd:Q40023 != wd:Q296446 ) .\nFILTER ( wd:Q40027 != wd:Q3340 ) .\nFILTER ( wd:Q40027 != wd:Q296446 ) .\nwd:Q40023 wdt:P26 wd:Q3340 .\nwd:Q40023 wdt:P26 wd:Q296446 .\nwd:Q40027 wdt:P26 wd:Q3340 .\nwd:Q40027 wdt:P26 wd:Q296446\n}",
        "questionWithBrackets": "Did [Cleopatra Selene of Egypt and Syria] and [Cleopatra IV of Egypt] marry [Antiochus IX Cyzicenus] and [Ptolemy IX Lathyros]"
    },
    {
        "questionIdx": 13443,
        "questionPatternModEntities": "Did M1 marry M2 , M3 , and M4 and marry M0 's sibling",
        "questionTemplate": "Did [entity] [VP_SIMPLE] [entity] , [entity] , and [entity] and [VP_SIMPLE] [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( M1 != ?x0 ) .\nFILTER ( M1 != M2 ) .\nFILTER ( M1 != M3 ) .\nFILTER ( M1 != M4 ) .\nM1 P1 ?x0 .\nM1 P1 M2 .\nM1 P1 M3 .\nM1 P1 M4\n}",
        "recursionDepth": 33,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P3373 wd:Q939 .\nFILTER ( ?x0 != wd:Q939 ) .\nFILTER ( wd:Q186256 != ?x0 ) .\nFILTER ( wd:Q186256 != wd:Q230566 ) .\nFILTER ( wd:Q186256 != wd:Q232488 ) .\nFILTER ( wd:Q186256 != wd:Q234405 ) .\nwd:Q186256 wdt:P26 ?x0 .\nwd:Q186256 wdt:P26 wd:Q230566 .\nwd:Q186256 wdt:P26 wd:Q232488 .\nwd:Q186256 wdt:P26 wd:Q234405\n}",
        "questionWithBrackets": "Did [Ferdinand VII of Spain] marry [Maria Isabel of Braganza] , [Princess Maria Antonia of Naples and Sicily] , and [Maria Christina of the Two Sicilies] and marry [Pedro I of Brazil] 's sibling"
    },
    {
        "questionIdx": 13444,
        "questionPatternModEntities": "Did M0 's sibling , spouse , and parent marry M1",
        "questionTemplate": "Did [entity] 's [ROLE_SIMPLE] , [ROLE_SIMPLE] , and [ROLE_SIMPLE] [VP_SIMPLE] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M0 .\n?x0 P2 M0 .\n?x0 P2 M1 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x0 != M1 )\n}",
        "recursionDepth": 24,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q443473 .\n?x0 wdt:P3373 wd:Q443473 .\n?x0 wdt:P26 wd:Q443473 .\n?x0 wdt:P26 wd:Q210535 .\nFILTER ( ?x0 != wd:Q443473 ) .\nFILTER ( ?x0 != wd:Q443473 ) .\nFILTER ( ?x0 != wd:Q210535 )\n}",
        "questionWithBrackets": "Did [Henutmire] 's sibling , spouse , and parent marry [Nefertarilllala]"
    },
    {
        "questionIdx": 13455,
        "questionPatternModEntities": "Did M1 marry a sibling and parent of M0",
        "questionTemplate": "Did [entity] [VP_SIMPLE] a [ROLE_SIMPLE] and [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M0 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( M1 != ?x0 ) .\nM1 P2 ?x0\n}",
        "recursionDepth": 22,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q5659 .\n?x0 wdt:P3373 wd:Q5659 .\nFILTER ( ?x0 != wd:Q5659 ) .\nFILTER ( wd:Q82764 != ?x0 ) .\nwd:Q82764 wdt:P26 ?x0\n}",
        "questionWithBrackets": "Did [Mathilda of Dendermonde] marry a sibling and parent of [Conon de B\u00e9thune]"
    },
    {
        "questionIdx": 13518,
        "questionPatternModEntities": "Did M1 star M2 and star M0 's sibling and parent",
        "questionTemplate": "Did [entity] [VP_SIMPLE] [entity] and [VP_SIMPLE] [entity] 's [ROLE_SIMPLE] and [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M0 .\nFILTER ( ?x0 != M0 ) .\nM1 P2 ?x0 .\nM1 P2 M2\n}",
        "recursionDepth": 31,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q1926267 .\n?x0 wdt:P3373 wd:Q1926267 .\nFILTER ( ?x0 != wd:Q1926267 ) .\nwd:Q1571851 wdt:P161 ?x0 .\nwd:Q1571851 wdt:P161 wd:Q191037\n}",
        "questionWithBrackets": "Did [Sam and Friends] star [Jim Henson] and star [John Henson] 's sibling and parent"
    },
    {
        "questionIdx": 13522,
        "questionPatternModEntities": "Did M2 star M3 and star a Swedish sibling of M0",
        "questionTemplate": "Did [entity] [VP_SIMPLE] [entity] and [VP_SIMPLE] a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M0 ) .\nM2 P2 ?x0 .\nM2 P2 M3\n}",
        "recursionDepth": 33,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P27 wd:Q34 .\n?x0 wdt:P3373 wd:Q5411103 .\nFILTER ( ?x0 != wd:Q5411103 ) .\nwd:Q6805748 wdt:P161 ?x0 .\nwd:Q6805748 wdt:P161 wd:Q2632\n}",
        "questionWithBrackets": "Did [Palme] star [Ringo Starr] and star a Swedish sibling of [Gunnar Ericsson]"
    },
    {
        "questionIdx": 13595,
        "questionPatternModEntities": "Did M3 's Italian spouse play M1 and M2",
        "questionTemplate": "Did [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] [VP_SIMPLE] [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\n?x0 P2 M3 .\nFILTER ( ?x0 != M3 )\n}",
        "recursionDepth": 24,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P453 wd:Q12742668 .\n?x0 wdt:P453 wd:Q50386892 .\n?x0 wdt:P27 wd:Q38 .\n?x0 wdt:P26 wd:Q485165 .\nFILTER ( ?x0 != wd:Q485165 )\n}",
        "questionWithBrackets": "Did [Jos\u00e9 Carreras] 's Italian spouse play [Mim\u00ec] and [Princess Turandot]"
    },
    {
        "questionIdx": 13612,
        "questionPatternModEntities": "Did M1 's sibling 's actor play M0",
        "questionTemplate": "Did [entity] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE] [VP_SIMPLE] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x0 P0 M0 .\n?x1 P1 M1 .\nFILTER ( ?x1 != M1 )\n}",
        "recursionDepth": 19,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P453 ?x1 .\n?x0 wdt:P453 wd:Q9054901 .\n?x1 wdt:P3373 wd:Q55011312 .\nFILTER ( ?x1 != wd:Q55011312 )\n}",
        "questionWithBrackets": "Did [Duke Gottfried] 's sibling 's actor play [Pamina]"
    },
    {
        "questionIdx": 13673,
        "questionPatternModEntities": "Did M2 and M3 marry a male sibling of M0",
        "questionTemplate": "Did [entity] and [entity] [VP_SIMPLE] a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( M2 != ?x0 ) .\nFILTER ( M3 != ?x0 ) .\nM2 P2 ?x0 .\nM3 P2 ?x0\n}",
        "recursionDepth": 26,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P21 wd:Q6581097 .\n?x0 wdt:P3373 wd:Q3345 .\nFILTER ( ?x0 != wd:Q3345 ) .\nFILTER ( wd:Q40023 != ?x0 ) .\nFILTER ( wd:Q40027 != ?x0 ) .\nwd:Q40023 wdt:P26 ?x0 .\nwd:Q40027 wdt:P26 ?x0\n}",
        "questionWithBrackets": "Did [Cleopatra Selene of Egypt and Syria] and [Cleopatra IV of Egypt] marry a male sibling of [Ptolemy X Alexander I]"
    },
    {
        "questionIdx": 13789,
        "questionPatternModEntities": "Did M1 , M2 , M3 , and M4 marry a spouse of M0",
        "questionTemplate": "Did [entity] , [entity] , [entity] , and [entity] [VP_SIMPLE] a [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( M1 != ?x0 ) .\nFILTER ( M2 != ?x0 ) .\nFILTER ( M3 != ?x0 ) .\nFILTER ( M4 != ?x0 ) .\nM1 P0 ?x0 .\nM2 P0 ?x0 .\nM3 P0 ?x0 .\nM4 P0 ?x0\n}",
        "recursionDepth": 27,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P26 wd:Q635 .\nFILTER ( ?x0 != wd:Q635 ) .\nFILTER ( wd:Q11923347 != ?x0 ) .\nFILTER ( wd:Q229483 != ?x0 ) .\nFILTER ( wd:Q598225 != ?x0 ) .\nFILTER ( wd:Q233077 != ?x0 ) .\nwd:Q11923347 wdt:P26 ?x0 .\nwd:Q229483 wdt:P26 ?x0 .\nwd:Q598225 wdt:P26 ?x0 .\nwd:Q233077 wdt:P26 ?x0\n}",
        "questionWithBrackets": "Did [Fulvia] , [Antonia Hybrida Minor] , [Fadia] , and [Octavia the Younger] marry a spouse of [Cleopatra]"
    },
    {
        "questionIdx": 13830,
        "questionPatternModEntities": "Did M1 marry a parent of M0",
        "questionTemplate": "Did [entity] [VP_SIMPLE] a [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( M1 != ?x0 ) .\nM1 P1 ?x0\n}",
        "recursionDepth": 17,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q143867 .\nFILTER ( wd:Q75789 != ?x0 ) .\nwd:Q75789 wdt:P26 ?x0\n}",
        "questionWithBrackets": "Did [Cosima Wagner] marry a parent of [Mar\u00eda ojos marrones]"
    },
    {
        "questionIdx": 13831,
        "questionPatternModEntities": "Did M2 and M5 star M3 and M4 and star M1 's Dutch spouse",
        "questionTemplate": "Did [entity] and [entity] [VP_SIMPLE] [entity] and [entity] and [VP_SIMPLE] [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M1 ) .\nM2 P2 ?x0 .\nM2 P2 M3 .\nM2 P2 M4 .\nM5 P2 ?x0 .\nM5 P2 M3 .\nM5 P2 M4\n}",
        "recursionDepth": 39,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P27 wd:Q29999 .\n?x0 wdt:P26 wd:Q64638 .\nFILTER ( ?x0 != wd:Q64638 ) .\nwd:Q19089 wdt:P161 ?x0 .\nwd:Q19089 wdt:P161 wd:Q316629 .\nwd:Q19089 wdt:P161 wd:Q190794 .\nwd:Q219776 wdt:P161 ?x0 .\nwd:Q219776 wdt:P161 wd:Q316629 .\nwd:Q219776 wdt:P161 wd:Q190794\n}",
        "questionWithBrackets": "Did [X2] and [GoldenEye] star [Alan Cumming] and [Famke Janssen] and star [Kip Williams] 's Dutch spouse"
    },
    {
        "questionIdx": 13832,
        "questionPatternModEntities": "Did M0 's actor play M1",
        "questionTemplate": "Did [entity] 's [ROLE_SIMPLE] [VP_SIMPLE] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P0 M1\n}",
        "recursionDepth": 15,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P453 wd:Q913318 .\n?x0 wdt:P453 wd:Q845913\n}",
        "questionWithBrackets": "Did [Zerg] 's actor play [Terran]"
    },
    {
        "questionIdx": 13921,
        "questionPatternModEntities": "Did M2 marry M3 and M4 and marry a Chinese spouse of M1",
        "questionTemplate": "Did [entity] [VP_SIMPLE] [entity] and [entity] and [VP_SIMPLE] a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M1 ) .\nFILTER ( M2 != ?x0 ) .\nFILTER ( M2 != M3 ) .\nFILTER ( M2 != M4 ) .\nM2 P1 ?x0 .\nM2 P1 M3 .\nM2 P1 M4\n}",
        "recursionDepth": 37,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P27 wd:Q148 .\n?x0 wdt:P26 wd:Q4264931 .\nFILTER ( ?x0 != wd:Q4264931 ) .\nFILTER ( wd:Q5816 != ?x0 ) .\nFILTER ( wd:Q5816 != wd:Q236017 ) .\nFILTER ( wd:Q5816 != wd:Q272321 ) .\nwd:Q5816 wdt:P26 ?x0 .\nwd:Q5816 wdt:P26 wd:Q236017 .\nwd:Q5816 wdt:P26 wd:Q272321\n}",
        "questionWithBrackets": "Did [Mao Zedong] marry [Jiang Qing] and [He Zizhen] and marry a Chinese spouse of [Tang Na]"
    },
    {
        "questionIdx": 14127,
        "questionPatternModEntities": "Did M2 marry M0 's British sibling and marry M3",
        "questionTemplate": "Did [entity] [VP_SIMPLE] [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] and [VP_SIMPLE] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( M2 != ?x0 ) .\nFILTER ( M2 != M3 ) .\nM2 P2 ?x0 .\nM2 P2 M3\n}",
        "recursionDepth": 31,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P27 wd:Q145 .\n?x0 wdt:P3373 wd:Q75542536 .\nFILTER ( ?x0 != wd:Q75542536 ) .\nFILTER ( wd:Q4769390 != ?x0 ) .\nFILTER ( wd:Q4769390 != wd:Q24311 ) .\nwd:Q4769390 wdt:P26 ?x0 .\nwd:Q4769390 wdt:P26 wd:Q24311\n}",
        "questionWithBrackets": "Did [Annie Meinertzhagen] marry [Barbara Meinertzhagen] 's British sibling and marry [Richard Meinertzhagen]"
    },
    {
        "questionIdx": 14131,
        "questionPatternModEntities": "Did M2 star M1 's sibling 's sibling 's French spouse",
        "questionTemplate": "Did [entity] [VP_SIMPLE] [entity] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 ?x1 .\n?x1 P2 ?x2 .\n?x2 P2 M1 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x1 != ?x2 ) .\nFILTER ( ?x2 != M1 ) .\nM2 P3 ?x0\n}",
        "recursionDepth": 28,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P27 wd:Q142 .\n?x0 wdt:P26 ?x1 .\n?x1 wdt:P3373 ?x2 .\n?x2 wdt:P3373 wd:Q270703 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x1 != ?x2 ) .\nFILTER ( ?x2 != wd:Q270703 ) .\nwd:Q507285 wdt:P161 ?x0\n}",
        "questionWithBrackets": "Did [Lumi\u00e8re and Company] star [Danielle Mitterrand] 's sibling 's sibling 's French spouse"
    },
    {
        "questionIdx": 14310,
        "questionPatternModEntities": "Did M0 's sibling play M1 and M2",
        "questionTemplate": "Did [entity] 's [ROLE_SIMPLE] [VP_SIMPLE] [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\nFILTER ( ?x0 != M0 )\n}",
        "recursionDepth": 19,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P453 wd:Q48463568 .\n?x0 wdt:P453 wd:Q5815108 .\n?x0 wdt:P3373 wd:Q3756757 .\nFILTER ( ?x0 != wd:Q3756757 )\n}",
        "questionWithBrackets": "Did [Gabriella Pavarotti] 's sibling play [Andrea Ch\u00e9nier] and [Duke of Mantua]"
    },
    {
        "questionIdx": 14331,
        "questionPatternModEntities": "Did M1 marry M2 and marry M0 's spouse and parent",
        "questionTemplate": "Did [entity] [VP_SIMPLE] [entity] and [VP_SIMPLE] [entity] 's [ROLE_SIMPLE] and [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M0 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( M1 != ?x0 ) .\nFILTER ( M1 != M2 ) .\nM1 P1 ?x0 .\nM1 P1 M2\n}",
        "recursionDepth": 31,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q40020 .\n?x0 wdt:P26 wd:Q40020 .\nFILTER ( ?x0 != wd:Q40020 ) .\nFILTER ( wd:Q40242 != ?x0 ) .\nFILTER ( wd:Q40242 != wd:Q39991 ) .\nwd:Q40242 wdt:P26 ?x0 .\nwd:Q40242 wdt:P26 wd:Q39991\n}",
        "questionWithBrackets": "Did [Cleopatra V or VI of Egypt] marry [Ptolemy XII Auletes] and marry [Cleopatra VI of Egypt] 's spouse and parent"
    },
    {
        "questionIdx": 14365,
        "questionPatternModEntities": "Did M1 , M2 , and M3 star a parent of M0",
        "questionTemplate": "Did [entity] , [entity] , and [entity] [VP_SIMPLE] a [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 ?x0 .\nM2 P1 ?x0 .\nM3 P1 ?x0\n}",
        "recursionDepth": 24,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q237324 .\nwd:Q3986379 wdt:P161 ?x0 .\nwd:Q250252 wdt:P161 ?x0 .\nwd:Q337940 wdt:P161 ?x0\n}",
        "questionWithBrackets": "Did [Flaming Star] , [The Compleat Beatles] , and [Fun in Acapulco] star a parent of [Lisa Marie Presley]"
    },
    {
        "questionIdx": 14535,
        "questionPatternModEntities": "Did M1 and M2 marry a employee of M0",
        "questionTemplate": "Did [entity] and [entity] [VP_SIMPLE] a [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( M1 != ?x0 ) .\nFILTER ( M2 != ?x0 ) .\nM1 P1 ?x0 .\nM2 P1 ?x0\n}",
        "recursionDepth": 21,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P108 wd:Q7587689 .\nFILTER ( wd:Q238871 != ?x0 ) .\nFILTER ( wd:Q27431355 != ?x0 ) .\nwd:Q238871 wdt:P26 ?x0 .\nwd:Q27431355 wdt:P26 ?x0\n}",
        "questionWithBrackets": "Did [Micheline Roquebrune] and [Diane Cilento] marry a employee of [St. Cuthbert's Co-operative Society]"
    },
    {
        "questionIdx": 14539,
        "questionPatternModEntities": "Did M2 's sequel star M0 and M1",
        "questionTemplate": "Did [entity] 's [ROLE_SIMPLE] [VP_SIMPLE] [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P1 M2\n}",
        "recursionDepth": 19,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P155 wd:Q3997 .\n?x0 wdt:P161 wd:Q7042213 .\n?x0 wdt:P161 wd:Q1749508\n}",
        "questionWithBrackets": "Did [Nalai Manithan] 's sequel star [Nizhalgal Ravi] and [Silk Smitha]"
    },
    {
        "questionIdx": 14555,
        "questionPatternModEntities": "Did M1 marry a sibling of M0",
        "questionTemplate": "Did [entity] [VP_SIMPLE] a [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( M1 != ?x0 ) .\nM1 P1 ?x0\n}",
        "recursionDepth": 17,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P3373 wd:Q859 .\nFILTER ( ?x0 != wd:Q859 ) .\nFILTER ( wd:Q1378512 != ?x0 ) .\nwd:Q1378512 wdt:P26 ?x0\n}",
        "questionWithBrackets": "Did [Eurymedon of Myrrhinus] marry a sibling of [Plato]"
    },
    {
        "questionIdx": 14576,
        "questionPatternModEntities": "Did M3 and M4 marry a American employee of M0 and M1",
        "questionTemplate": "Did [entity] and [entity] [VP_SIMPLE] a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P1 M2 .\nFILTER ( M3 != ?x0 ) .\nFILTER ( M4 != ?x0 ) .\nM3 P2 ?x0 .\nM4 P2 ?x0\n}",
        "recursionDepth": 30,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P108 wd:Q49117 .\n?x0 wdt:P108 wd:Q3443325 .\n?x0 wdt:P27 wd:Q30 .\nFILTER ( wd:Q235349 != ?x0 ) .\nFILTER ( wd:Q19285477 != ?x0 ) .\nwd:Q235349 wdt:P26 ?x0 .\nwd:Q19285477 wdt:P26 ?x0\n}",
        "questionWithBrackets": "Did [Neilia Hunter] and [Jill Biden] marry a American employee of [University of Pennsylvania] and [Widener University]"
    },
    {
        "questionIdx": 14766,
        "questionPatternModEntities": "Did M2 marry M0 's male sibling and marry M3",
        "questionTemplate": "Did [entity] [VP_SIMPLE] [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] and [VP_SIMPLE] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( M2 != ?x0 ) .\nFILTER ( M2 != M3 ) .\nM2 P2 ?x0 .\nM2 P2 M3\n}",
        "recursionDepth": 31,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P21 wd:Q6581097 .\n?x0 wdt:P3373 wd:Q939 .\nFILTER ( ?x0 != wd:Q939 ) .\nFILTER ( wd:Q261811 != ?x0 ) .\nFILTER ( wd:Q261811 != wd:Q310790 ) .\nwd:Q261811 wdt:P26 ?x0 .\nwd:Q261811 wdt:P26 wd:Q310790\n}",
        "questionWithBrackets": "Did [Adelaide of L\u00f6wenstein-Wertheim-Rosenberg] marry [Pedro I of Brazil] 's male sibling and marry [Miguel I of Portugal]"
    },
    {
        "questionIdx": 14913,
        "questionPatternModEntities": "Did M4 marry a Japanese employee of M0 , M1 , and M2",
        "questionTemplate": "Did [entity] [VP_SIMPLE] a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P1 M3 .\nFILTER ( M4 != ?x0 ) .\nM4 P2 ?x0\n}",
        "recursionDepth": 29,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P108 wd:Q1136386 .\n?x0 wdt:P108 wd:Q11371930 .\n?x0 wdt:P108 wd:Q11490471 .\n?x0 wdt:P27 wd:Q17 .\nFILTER ( wd:Q2828975 != ?x0 ) .\nwd:Q2828975 wdt:P26 ?x0\n}",
        "questionWithBrackets": "Did [Akemi \u014cta] marry a Japanese employee of [Shin-Ei Animation] , [Nibariki] , and [The Tokuma Memorial Cultural Foundation for Animation]"
    },
    {
        "questionIdx": 14956,
        "questionPatternModEntities": "Did M0 's sibling marry M1 , M2 , and M3",
        "questionTemplate": "Did [entity] 's [ROLE_SIMPLE] [VP_SIMPLE] [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\n?x0 P1 M3 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x0 != M1 ) .\nFILTER ( ?x0 != M2 ) .\nFILTER ( ?x0 != M3 )\n}",
        "recursionDepth": 22,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P3373 wd:Q3340 .\n?x0 wdt:P26 wd:Q296446 .\n?x0 wdt:P26 wd:Q310808 .\n?x0 wdt:P26 wd:Q311112 .\nFILTER ( ?x0 != wd:Q3340 ) .\nFILTER ( ?x0 != wd:Q296446 ) .\nFILTER ( ?x0 != wd:Q310808 ) .\nFILTER ( ?x0 != wd:Q311112 )\n}",
        "questionWithBrackets": "Did [Ptolemy IX Lathyros] 's sibling marry [Antiochus VIII Grypus] , [Antiochus IX Cyzicenus] , and [Antiochus X Eusebes]"
    },
    {
        "questionIdx": 15176,
        "questionPatternModEntities": "Did M2 star M3 and star M0 's Canadian employee",
        "questionTemplate": "Did [entity] [VP_SIMPLE] [entity] and [VP_SIMPLE] [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nM2 P2 ?x0 .\nM2 P2 M3\n}",
        "recursionDepth": 31,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P108 wd:Q2974690 .\n?x0 wdt:P27 wd:Q16 .\nwd:Q2815259 wdt:P161 ?x0 .\nwd:Q2815259 wdt:P161 wd:Q8619\n}",
        "questionWithBrackets": "Did [24 heures ou plus] star [Pierre Trudeau] and star [Cit\u00e9 Libre] 's Canadian employee"
    },
    {
        "questionIdx": 15197,
        "questionPatternModEntities": "Did M1 star M2 and star M0 's spouse",
        "questionTemplate": "Did [entity] [VP_SIMPLE] [entity] and [VP_SIMPLE] [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nM1 P1 ?x0 .\nM1 P1 M2\n}",
        "recursionDepth": 26,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P26 wd:Q76 .\nFILTER ( ?x0 != wd:Q76 ) .\nwd:Q4525 wdt:P161 ?x0 .\nwd:Q4525 wdt:P161 wd:Q73930\n}",
        "questionWithBrackets": "Did [NCIS] star [Lochlyn Munro] and star [Barack Obama] 's spouse"
    },
    {
        "questionIdx": 15214,
        "questionPatternModEntities": "Did M2 's actor 's male spouse marry M1",
        "questionTemplate": "Did [entity] 's [ROLE_SIMPLE] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] [VP_SIMPLE] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 ?x1 .\n?x0 P1 M1 .\n?x1 P2 M2 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x0 != M1 )\n}",
        "recursionDepth": 24,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P21 wd:Q6581097 .\n?x0 wdt:P26 ?x1 .\n?x0 wdt:P26 wd:Q135224 .\n?x1 wdt:P453 wd:Q222573 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x0 != wd:Q135224 )\n}",
        "questionWithBrackets": "Did [femme fatale] 's actor 's male spouse marry [Nausicaa]"
    },
    {
        "questionIdx": 15286,
        "questionPatternModEntities": "Did M1 marry M2 , marry M3 and M4 , and marry a sibling of M0",
        "questionTemplate": "Did [entity] [VP_SIMPLE] [entity] , [VP_SIMPLE] [entity] and [entity] , and [VP_SIMPLE] a [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( M1 != ?x0 ) .\nFILTER ( M1 != M2 ) .\nFILTER ( M1 != M3 ) .\nFILTER ( M1 != M4 ) .\nM1 P1 ?x0 .\nM1 P1 M2 .\nM1 P1 M3 .\nM1 P1 M4\n}",
        "recursionDepth": 41,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P3373 wd:Q939 .\nFILTER ( ?x0 != wd:Q939 ) .\nFILTER ( wd:Q186256 != ?x0 ) .\nFILTER ( wd:Q186256 != wd:Q232488 ) .\nFILTER ( wd:Q186256 != wd:Q230566 ) .\nFILTER ( wd:Q186256 != wd:Q234405 ) .\nwd:Q186256 wdt:P26 ?x0 .\nwd:Q186256 wdt:P26 wd:Q232488 .\nwd:Q186256 wdt:P26 wd:Q230566 .\nwd:Q186256 wdt:P26 wd:Q234405\n}",
        "questionWithBrackets": "Did [Ferdinand VII of Spain] marry [Maria Isabel of Braganza] , marry [Princess Maria Antonia of Naples and Sicily] and [Maria Christina of the Two Sicilies] , and marry a sibling of [Pedro I of Brazil]"
    },
    {
        "questionIdx": 15292,
        "questionPatternModEntities": "Did M1 marry M2 and M3 and marry M0 's sibling",
        "questionTemplate": "Did [entity] [VP_SIMPLE] [entity] and [entity] and [VP_SIMPLE] [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( M1 != ?x0 ) .\nFILTER ( M1 != M2 ) .\nFILTER ( M1 != M3 ) .\nM1 P1 ?x0 .\nM1 P1 M2 .\nM1 P1 M3\n}",
        "recursionDepth": 30,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P3373 wd:Q720 .\nFILTER ( ?x0 != wd:Q720 ) .\nFILTER ( wd:Q28416764 != ?x0 ) .\nFILTER ( wd:Q28416764 != wd:Q1914424 ) .\nFILTER ( wd:Q28416764 != wd:Q7068897 ) .\nwd:Q28416764 wdt:P26 ?x0 .\nwd:Q28416764 wdt:P26 wd:Q1914424 .\nwd:Q28416764 wdt:P26 wd:Q7068897\n}",
        "questionWithBrackets": "Did [Butu] marry [Temulin] and [Huochenbieji] and marry [Genghis Khan] 's sibling"
    },
    {
        "questionIdx": 15331,
        "questionPatternModEntities": "Did M2 and M4 star M3 and star M0 's Japanese sibling",
        "questionTemplate": "Did [entity] and [entity] [VP_SIMPLE] [entity] and [VP_SIMPLE] [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M0 ) .\nM2 P2 ?x0 .\nM2 P2 M3 .\nM4 P2 ?x0 .\nM4 P2 M3\n}",
        "recursionDepth": 35,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P27 wd:Q17 .\n?x0 wdt:P3373 wd:Q7401008 .\nFILTER ( ?x0 != wd:Q7401008 ) .\nwd:Q2423884 wdt:P161 ?x0 .\nwd:Q2423884 wdt:P161 wd:Q134456 .\nwd:Q3410840 wdt:P161 ?x0 .\nwd:Q3410840 wdt:P161 wd:Q134456\n}",
        "questionWithBrackets": "Did [Hitokiri] and [Black Lizard] star [Yukio Mishima] and star [Chiyuki Hiraoka] 's Japanese sibling"
    },
    {
        "questionIdx": 15418,
        "questionPatternModEntities": "Did M1 marry M2 and marry M0 's spouse",
        "questionTemplate": "Did [entity] [VP_SIMPLE] [entity] and [VP_SIMPLE] [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( M1 != ?x0 ) .\nFILTER ( M1 != M2 ) .\nM1 P0 ?x0 .\nM1 P0 M2\n}",
        "recursionDepth": 26,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P26 wd:Q635 .\nFILTER ( ?x0 != wd:Q635 ) .\nFILTER ( wd:Q11923347 != ?x0 ) .\nFILTER ( wd:Q11923347 != wd:Q51673 ) .\nwd:Q11923347 wdt:P26 ?x0 .\nwd:Q11923347 wdt:P26 wd:Q51673\n}",
        "questionWithBrackets": "Did [Fadia] marry [Mark Antony] and marry [Cleopatra] 's spouse"
    },
    {
        "questionIdx": 15536,
        "questionPatternModEntities": "Did M2 's American spouse marry M1",
        "questionTemplate": "Did [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] [VP_SIMPLE] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\nFILTER ( ?x0 != M1 ) .\nFILTER ( ?x0 != M2 )\n}",
        "recursionDepth": 20,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P27 wd:Q30 .\n?x0 wdt:P26 wd:Q27167 .\n?x0 wdt:P26 wd:Q234583 .\nFILTER ( ?x0 != wd:Q27167 ) .\nFILTER ( ?x0 != wd:Q234583 )\n}",
        "questionWithBrackets": "Did [Lynn Margulis] 's American spouse marry [Ann Druyan]"
    },
    {
        "questionIdx": 15537,
        "questionPatternModEntities": "Did M1 's sequel star M0",
        "questionTemplate": "Did [entity] 's [ROLE_SIMPLE] [VP_SIMPLE] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1\n}",
        "recursionDepth": 15,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P155 wd:Q5415 .\n?x0 wdt:P161 wd:Q4029\n}",
        "questionWithBrackets": "Did [My Little Pony: Friendship Is Magic] 's sequel star [Tara Strong]"
    },
    {
        "questionIdx": 15555,
        "questionPatternModEntities": "Did M0 's spouse and sibling marry M1",
        "questionTemplate": "Did [entity] 's [ROLE_SIMPLE] and [ROLE_SIMPLE] [VP_SIMPLE] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x0 != M1 )\n}",
        "recursionDepth": 20,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P3373 wd:Q3340 .\n?x0 wdt:P26 wd:Q296446 .\n?x0 wdt:P26 wd:Q3340 .\nFILTER ( ?x0 != wd:Q296446 ) .\nFILTER ( ?x0 != wd:Q3340 ) .\nFILTER ( ?x0 != wd:Q3340 )\n}",
        "questionWithBrackets": "Did [Ptolemy IX Lathyros] 's spouse and sibling marry [Antiochus IX Cyzicenus]"
    },
    {
        "questionIdx": 15564,
        "questionPatternModEntities": "Did M1 star M0 's actor , star M2 , star M3 , and star M4",
        "questionTemplate": "Did [entity] [VP_SIMPLE] [entity] 's [ROLE_SIMPLE] , [VP_SIMPLE] [entity] , [VP_SIMPLE] [entity] , and [VP_SIMPLE] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 ?x0 .\nM1 P1 M2 .\nM1 P1 M3 .\nM1 P1 M4\n}",
        "recursionDepth": 44,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P453 wd:Q1945499 .\nwd:Q804434 wdt:P161 ?x0 .\nwd:Q804434 wdt:P161 wd:Q2468138 .\nwd:Q804434 wdt:P161 wd:Q49554 .\nwd:Q804434 wdt:P161 wd:Q49547\n}",
        "questionWithBrackets": "Did [Bleach: Memories of Nobody] star [Chun-Li] 's actor , star [Rie Kugimiya] , star [Fumiko Orikasa] , and star [Johnny Yong Bosch]"
    },
    {
        "questionIdx": 15579,
        "questionPatternModEntities": "Did M2 's Canadian spouse marry M1",
        "questionTemplate": "Did [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] [VP_SIMPLE] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\nFILTER ( ?x0 != M1 ) .\nFILTER ( ?x0 != M2 )\n}",
        "recursionDepth": 20,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P27 wd:Q16 .\n?x0 wdt:P26 wd:Q17309225 .\n?x0 wdt:P26 wd:Q26945290 .\nFILTER ( ?x0 != wd:Q17309225 ) .\nFILTER ( ?x0 != wd:Q26945290 )\n}",
        "questionWithBrackets": "Did [Lorca Cohen] 's Canadian spouse marry [J\u00f6rn Weisbrodt]"
    },
    {
        "questionIdx": 15600,
        "questionPatternModEntities": "Did M0 marry M1 and M2 , marry M3 , marry M4 , and marry M5",
        "questionTemplate": "Did [entity] [VP_SIMPLE] [entity] and [entity] , [VP_SIMPLE] [entity] , [VP_SIMPLE] [entity] , and [VP_SIMPLE] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nFILTER ( M0 != M1 ) .\nFILTER ( M0 != M2 ) .\nFILTER ( M0 != M3 ) .\nFILTER ( M0 != M4 ) .\nFILTER ( M0 != M5 ) .\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P0 M3 .\nM0 P0 M4 .\nM0 P0 M5\n}",
        "recursionDepth": 44,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nFILTER ( wd:Q51673 != wd:Q635 ) .\nFILTER ( wd:Q51673 != wd:Q11923347 ) .\nFILTER ( wd:Q51673 != wd:Q229483 ) .\nFILTER ( wd:Q51673 != wd:Q598225 ) .\nFILTER ( wd:Q51673 != wd:Q233077 ) .\nwd:Q51673 wdt:P26 wd:Q635 .\nwd:Q51673 wdt:P26 wd:Q11923347 .\nwd:Q51673 wdt:P26 wd:Q229483 .\nwd:Q51673 wdt:P26 wd:Q598225 .\nwd:Q51673 wdt:P26 wd:Q233077\n}",
        "questionWithBrackets": "Did [Mark Antony] marry [Cleopatra] and [Fulvia] , marry [Antonia Hybrida Minor] , marry [Octavia the Younger] , and marry [Fadia]"
    },
    {
        "questionIdx": 15601,
        "questionPatternModEntities": "Did M0 marry M1 , M2 , M3 , M4 , and M5",
        "questionTemplate": "Did [entity] [VP_SIMPLE] [entity] , [entity] , [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nFILTER ( M0 != M1 ) .\nFILTER ( M0 != M2 ) .\nFILTER ( M0 != M3 ) .\nFILTER ( M0 != M4 ) .\nFILTER ( M0 != M5 ) .\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P0 M3 .\nM0 P0 M4 .\nM0 P0 M5\n}",
        "recursionDepth": 24,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nFILTER ( wd:Q51673 != wd:Q635 ) .\nFILTER ( wd:Q51673 != wd:Q11923347 ) .\nFILTER ( wd:Q51673 != wd:Q229483 ) .\nFILTER ( wd:Q51673 != wd:Q598225 ) .\nFILTER ( wd:Q51673 != wd:Q233077 ) .\nwd:Q51673 wdt:P26 wd:Q635 .\nwd:Q51673 wdt:P26 wd:Q11923347 .\nwd:Q51673 wdt:P26 wd:Q229483 .\nwd:Q51673 wdt:P26 wd:Q598225 .\nwd:Q51673 wdt:P26 wd:Q233077\n}",
        "questionWithBrackets": "Did [Mark Antony] marry [Cleopatra] , [Fulvia] , [Octavia the Younger] , [Fadia] , and [Antonia Hybrida Minor]"
    },
    {
        "questionIdx": 15805,
        "questionPatternModEntities": "Did M1 and M2 marry M0 's spouse , sibling , and parent",
        "questionTemplate": "Did [entity] and [entity] [VP_SIMPLE] [entity] 's [ROLE_SIMPLE] , [ROLE_SIMPLE] , and [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M0 .\n?x0 P2 M0 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x0 != M0 ) .\nFILTER ( M1 != ?x0 ) .\nFILTER ( M2 != ?x0 ) .\nM1 P2 ?x0 .\nM2 P2 ?x0\n}",
        "recursionDepth": 28,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q443473 .\n?x0 wdt:P3373 wd:Q443473 .\n?x0 wdt:P26 wd:Q443473 .\nFILTER ( ?x0 != wd:Q443473 ) .\nFILTER ( ?x0 != wd:Q443473 ) .\nFILTER ( wd:Q210535 != ?x0 ) .\nFILTER ( wd:Q256430 != ?x0 ) .\nwd:Q210535 wdt:P26 ?x0 .\nwd:Q256430 wdt:P26 ?x0\n}",
        "questionWithBrackets": "Did [Maathorneferure] and [Nefertarilllala] marry [Henutmire] 's spouse , sibling , and parent"
    },
    {
        "questionIdx": 15831,
        "questionPatternModEntities": "Did M1 marry M0 's child",
        "questionTemplate": "Did [entity] [VP_SIMPLE] [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( M1 != ?x0 ) .\nM1 P1 ?x0\n}",
        "recursionDepth": 15,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P749 wd:Q1089760 .\nFILTER ( wd:Q76375112 != ?x0 ) .\nwd:Q76375112 wdt:P26 ?x0\n}",
        "questionWithBrackets": "Did [Eliazbeth Fristan] marry [Church Mission Society] 's child"
    },
    {
        "questionIdx": 15833,
        "questionPatternModEntities": "Did M3 and M5 star M4 , star M2 's sibling , and star a Mexican sibling of M0",
        "questionTemplate": "Did [entity] and [entity] [VP_SIMPLE] [entity] , [VP_SIMPLE] [entity] 's [ROLE_SIMPLE] , and [VP_SIMPLE] a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x1 P0 M2 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x1 != M2 ) .\nM3 P2 ?x0 .\nM3 P2 ?x1 .\nM3 P2 M4 .\nM5 P2 ?x0 .\nM5 P2 ?x1 .\nM5 P2 M4\n}",
        "recursionDepth": 50,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P27 wd:Q96 .\n?x0 wdt:P3373 wd:Q7290570 .\n?x1 wdt:P3373 wd:Q6752929 .\nFILTER ( ?x0 != wd:Q7290570 ) .\nFILTER ( ?x1 != wd:Q6752929 ) .\nwd:Q24905850 wdt:P161 ?x0 .\nwd:Q24905850 wdt:P161 ?x1 .\nwd:Q24905850 wdt:P161 wd:Q41129 .\nwd:Q1117272 wdt:P161 ?x0 .\nwd:Q1117272 wdt:P161 ?x1 .\nwd:Q1117272 wdt:P161 wd:Q41129\n}",
        "questionWithBrackets": "Did [Kill Me Because I'm Dying!] and [\u00a1Suic\u00eddate, mi amor!] star [Germ\u00e1n Vald\u00e9s] , star [Manuel Vald\u00e9s] 's sibling , and star a Mexican sibling of [Ram\u00f3n Vald\u00e9s]"
    },
    {
        "questionIdx": 15908,
        "questionPatternModEntities": "Did M1 marry M2 and marry M0 's sibling",
        "questionTemplate": "Did [entity] [VP_SIMPLE] [entity] and [VP_SIMPLE] [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( M1 != ?x0 ) .\nFILTER ( M1 != M2 ) .\nM1 P1 ?x0 .\nM1 P1 M2\n}",
        "recursionDepth": 26,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P3373 wd:Q635 .\nFILTER ( ?x0 != wd:Q635 ) .\nFILTER ( wd:Q632595 != ?x0 ) .\nFILTER ( wd:Q632595 != wd:Q40022 ) .\nwd:Q632595 wdt:P26 ?x0 .\nwd:Q632595 wdt:P26 wd:Q40022\n}",
        "questionWithBrackets": "Did [Archelaus] marry [Berenice IV of Egypt] and marry [Cleopatra] 's sibling"
    },
    {
        "questionIdx": 15943,
        "questionPatternModEntities": "Did M1 star M0 's sibling 's parent",
        "questionTemplate": "Did [entity] [VP_SIMPLE] [entity] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x1 P1 M0 .\nFILTER ( ?x1 != M0 ) .\nM1 P2 ?x0\n}",
        "recursionDepth": 19,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 ?x1 .\n?x1 wdt:P3373 wd:Q4235 .\nFILTER ( ?x1 != wd:Q4235 ) .\nwd:Q126631 wdt:P161 ?x0\n}",
        "questionWithBrackets": "Did [Hannah Montana] star [Miley Cyrus] 's sibling 's parent"
    },
    {
        "questionIdx": 16075,
        "questionPatternModEntities": "Did M1 and M3 marry M0 's spouse 's sibling and marry M2",
        "questionTemplate": "Did [entity] and [entity] [VP_SIMPLE] [entity] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE] and [VP_SIMPLE] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x1 P1 M0 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x1 != M0 ) .\nFILTER ( M1 != ?x0 ) .\nFILTER ( M1 != M2 ) .\nFILTER ( M3 != ?x0 ) .\nFILTER ( M3 != M2 ) .\nM1 P1 ?x0 .\nM1 P1 M2 .\nM3 P1 ?x0 .\nM3 P1 M2\n}",
        "recursionDepth": 34,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P3373 ?x1 .\n?x1 wdt:P26 wd:Q76433 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x1 != wd:Q76433 ) .\nFILTER ( wd:Q22572343 != ?x0 ) .\nFILTER ( wd:Q22572343 != wd:Q66225 ) .\nFILTER ( wd:Q454576 != ?x0 ) .\nFILTER ( wd:Q454576 != wd:Q66225 ) .\nwd:Q22572343 wdt:P26 ?x0 .\nwd:Q22572343 wdt:P26 wd:Q66225 .\nwd:Q454576 wdt:P26 ?x0 .\nwd:Q454576 wdt:P26 wd:Q66225\n}",
        "questionWithBrackets": "Did [Bridget Dowling] and [Hedwig Mickley] marry [Eva Braun] 's spouse 's sibling and marry [Alois Hitler, Jr.]"
    },
    {
        "questionIdx": 16076,
        "questionPatternModEntities": "Did M1 and M3 marry M0 's spouse and marry M2",
        "questionTemplate": "Did [entity] and [entity] [VP_SIMPLE] [entity] 's [ROLE_SIMPLE] and [VP_SIMPLE] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( M1 != ?x0 ) .\nFILTER ( M1 != M2 ) .\nFILTER ( M3 != ?x0 ) .\nFILTER ( M3 != M2 ) .\nM1 P0 ?x0 .\nM1 P0 M2 .\nM3 P0 ?x0 .\nM3 P0 M2\n}",
        "recursionDepth": 30,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P26 wd:Q1416 .\nFILTER ( ?x0 != wd:Q1416 ) .\nFILTER ( wd:Q1413 != ?x0 ) .\nFILTER ( wd:Q1413 != wd:Q230716 ) .\nFILTER ( wd:Q2321555 != ?x0 ) .\nFILTER ( wd:Q2321555 != wd:Q230716 ) .\nwd:Q1413 wdt:P26 ?x0 .\nwd:Q1413 wdt:P26 wd:Q230716 .\nwd:Q2321555 wdt:P26 ?x0 .\nwd:Q2321555 wdt:P26 wd:Q230716\n}",
        "questionWithBrackets": "Did [Rufrius Crispinus] and [Nero] marry [Otho] 's spouse and marry [Poppaea Sabina]"
    },
    {
        "questionIdx": 16084,
        "questionPatternModEntities": "Did M2 marry M0 's female actor and marry M3 and M4",
        "questionTemplate": "Did [entity] [VP_SIMPLE] [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] and [VP_SIMPLE] [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( M2 != ?x0 ) .\nFILTER ( M2 != M3 ) .\nFILTER ( M2 != M4 ) .\nM2 P2 ?x0 .\nM2 P2 M3 .\nM2 P2 M4\n}",
        "recursionDepth": 35,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P453 wd:Q222573 .\n?x0 wdt:P21 wd:Q6581072 .\nFILTER ( wd:Q192482 != ?x0 ) .\nFILTER ( wd:Q192482 != wd:Q135224 ) .\nFILTER ( wd:Q192482 != wd:Q187602 ) .\nwd:Q192482 wdt:P26 ?x0 .\nwd:Q192482 wdt:P26 wd:Q135224 .\nwd:Q192482 wdt:P26 wd:Q187602\n}",
        "questionWithBrackets": "Did [Telemachus] marry [femme fatale] 's female actor and marry [Circe] and [Nausicaa]"
    },
    {
        "questionIdx": 16310,
        "questionPatternModEntities": "Did M1 star M0 's sibling 's sibling",
        "questionTemplate": "Did [entity] [VP_SIMPLE] [entity] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x1 P0 M0 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x1 != M0 ) .\nM1 P1 ?x0\n}",
        "recursionDepth": 19,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P3373 ?x1 .\n?x1 wdt:P3373 wd:Q2978381 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x1 != wd:Q2978381 ) .\nwd:Q101095474 wdt:P161 ?x0\n}",
        "questionWithBrackets": "Did [Les Sorci\u00e8res de Salem] star [Claudette Dion] 's sibling 's sibling"
    },
    {
        "questionIdx": 16702,
        "questionPatternModEntities": "Did M3 's Canadian sibling 's spouse marry M0 , M1 , and M2",
        "questionTemplate": "Did [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] 's [ROLE_SIMPLE] [VP_SIMPLE] [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x1 P1 M3 .\n?x1 P2 M4 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x0 != M1 ) .\nFILTER ( ?x0 != M2 ) .\nFILTER ( ?x1 != M3 )\n}",
        "recursionDepth": 31,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P26 ?x1 .\n?x0 wdt:P26 wd:Q75758338 .\n?x0 wdt:P26 wd:Q104109 .\n?x0 wdt:P26 wd:Q7660883 .\n?x1 wdt:P27 wd:Q16 .\n?x1 wdt:P3373 wd:Q430929 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x0 != wd:Q75758338 ) .\nFILTER ( ?x0 != wd:Q104109 ) .\nFILTER ( ?x0 != wd:Q7660883 ) .\nFILTER ( ?x1 != wd:Q430929 )\n}",
        "questionWithBrackets": "Did [Olive Thomas] 's Canadian sibling 's spouse marry [Sylvia Ashley] , [Anna Beth Sully] , and [Mary Pickford]"
    },
    {
        "questionIdx": 16713,
        "questionPatternModEntities": "Did M0 's Italian sibling marry M2",
        "questionTemplate": "Did [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] [VP_SIMPLE] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P2 M2 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x0 != M2 )\n}",
        "recursionDepth": 20,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P27 wd:Q38 .\n?x0 wdt:P3373 wd:Q179728 .\n?x0 wdt:P26 wd:Q51068 .\nFILTER ( ?x0 != wd:Q179728 ) .\nFILTER ( ?x0 != wd:Q51068 )\n}",
        "questionWithBrackets": "Did [Xavier of Bourbon-Parma] 's Italian sibling marry [Charles I of Austria]"
    },
    {
        "questionIdx": 16752,
        "questionPatternModEntities": "Did M1 marry M0 's employee",
        "questionTemplate": "Did [entity] [VP_SIMPLE] [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( M1 != ?x0 ) .\nM1 P1 ?x0\n}",
        "recursionDepth": 15,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P108 wd:Q1137404 .\nFILTER ( wd:Q4137 != ?x0 ) .\nwd:Q4137 wdt:P26 ?x0\n}",
        "questionWithBrackets": "Did [Elsa Triolet] marry [L'Humanit\u00e9] 's employee"
    },
    {
        "questionIdx": 16784,
        "questionPatternModEntities": "Did M0 's sibling marry M1",
        "questionTemplate": "Did [entity] 's [ROLE_SIMPLE] [VP_SIMPLE] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x0 != M1 )\n}",
        "recursionDepth": 15,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P3373 wd:Q4992 .\n?x0 wdt:P26 wd:Q1071957 .\nFILTER ( ?x0 != wd:Q4992 ) .\nFILTER ( ?x0 != wd:Q1071957 )\n}",
        "questionWithBrackets": "Did [Emperor Shizong of Liao] 's sibling marry [Kuchlug]"
    },
    {
        "questionIdx": 16883,
        "questionPatternModEntities": "Did M0 's parent marry M1 's employee",
        "questionTemplate": "Did [entity] 's [ROLE_SIMPLE] [VP_SIMPLE] [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 ?x1 .\n?x1 P2 M1 .\nFILTER ( ?x0 != ?x1 )\n}",
        "recursionDepth": 19,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q101014 .\n?x0 wdt:P26 ?x1 .\n?x1 wdt:P108 wd:Q686522 .\nFILTER ( ?x0 != ?x1 )\n}",
        "questionWithBrackets": "Did [Daniela von B\u00fclow] 's parent marry [University of Music and Performing Arts Vienna] 's employee"
    },
    {
        "questionIdx": 16887,
        "questionPatternModEntities": "Did M1 and M2 marry M0 's parent , spouse , and sibling",
        "questionTemplate": "Did [entity] and [entity] [VP_SIMPLE] [entity] 's [ROLE_SIMPLE] , [ROLE_SIMPLE] , and [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M0 .\n?x0 P2 M0 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x0 != M0 ) .\nFILTER ( M1 != ?x0 ) .\nFILTER ( M2 != ?x0 ) .\nM1 P2 ?x0 .\nM2 P2 ?x0\n}",
        "recursionDepth": 28,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q443473 .\n?x0 wdt:P3373 wd:Q443473 .\n?x0 wdt:P26 wd:Q443473 .\nFILTER ( ?x0 != wd:Q443473 ) .\nFILTER ( ?x0 != wd:Q443473 ) .\nFILTER ( wd:Q210535 != ?x0 ) .\nFILTER ( wd:Q256430 != ?x0 ) .\nwd:Q210535 wdt:P26 ?x0 .\nwd:Q256430 wdt:P26 ?x0\n}",
        "questionWithBrackets": "Did [Maathorneferure] and [Nefertarilllala] marry [Henutmire] 's parent , spouse , and sibling"
    },
    {
        "questionIdx": 16888,
        "questionPatternModEntities": "Did M1 and M2 marry M0 's parent , sibling , and spouse",
        "questionTemplate": "Did [entity] and [entity] [VP_SIMPLE] [entity] 's [ROLE_SIMPLE] , [ROLE_SIMPLE] , and [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M0 .\n?x0 P2 M0 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x0 != M0 ) .\nFILTER ( M1 != ?x0 ) .\nFILTER ( M2 != ?x0 ) .\nM1 P2 ?x0 .\nM2 P2 ?x0\n}",
        "recursionDepth": 28,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q443473 .\n?x0 wdt:P3373 wd:Q443473 .\n?x0 wdt:P26 wd:Q443473 .\nFILTER ( ?x0 != wd:Q443473 ) .\nFILTER ( ?x0 != wd:Q443473 ) .\nFILTER ( wd:Q210535 != ?x0 ) .\nFILTER ( wd:Q256430 != ?x0 ) .\nwd:Q210535 wdt:P26 ?x0 .\nwd:Q256430 wdt:P26 ?x0\n}",
        "questionWithBrackets": "Did [Maathorneferure] and [Nefertarilllala] marry [Henutmire] 's parent , sibling , and spouse"
    },
    {
        "questionIdx": 16889,
        "questionPatternModEntities": "Did M0 's parent , spouse , and sibling marry M1 and M2",
        "questionTemplate": "Did [entity] 's [ROLE_SIMPLE] , [ROLE_SIMPLE] , and [ROLE_SIMPLE] [VP_SIMPLE] [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M0 .\n?x0 P2 M0 .\n?x0 P2 M1 .\n?x0 P2 M2 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x0 != M1 ) .\nFILTER ( ?x0 != M2 )\n}",
        "recursionDepth": 28,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q443473 .\n?x0 wdt:P3373 wd:Q443473 .\n?x0 wdt:P26 wd:Q210535 .\n?x0 wdt:P26 wd:Q443473 .\n?x0 wdt:P26 wd:Q256430 .\nFILTER ( ?x0 != wd:Q210535 ) .\nFILTER ( ?x0 != wd:Q443473 ) .\nFILTER ( ?x0 != wd:Q443473 ) .\nFILTER ( ?x0 != wd:Q256430 )\n}",
        "questionWithBrackets": "Did [Henutmire] 's parent , spouse , and sibling marry [Nefertarilllala] and [Maathorneferure]"
    },
    {
        "questionIdx": 16890,
        "questionPatternModEntities": "Did M0 's sibling , parent , and spouse marry M1 and M2",
        "questionTemplate": "Did [entity] 's [ROLE_SIMPLE] , [ROLE_SIMPLE] , and [ROLE_SIMPLE] [VP_SIMPLE] [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M0 .\n?x0 P2 M0 .\n?x0 P2 M1 .\n?x0 P2 M2 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x0 != M1 ) .\nFILTER ( ?x0 != M2 )\n}",
        "recursionDepth": 28,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q443473 .\n?x0 wdt:P3373 wd:Q443473 .\n?x0 wdt:P26 wd:Q210535 .\n?x0 wdt:P26 wd:Q256430 .\n?x0 wdt:P26 wd:Q443473 .\nFILTER ( ?x0 != wd:Q210535 ) .\nFILTER ( ?x0 != wd:Q256430 ) .\nFILTER ( ?x0 != wd:Q443473 ) .\nFILTER ( ?x0 != wd:Q443473 )\n}",
        "questionWithBrackets": "Did [Henutmire] 's sibling , parent , and spouse marry [Nefertarilllala] and [Maathorneferure]"
    },
    {
        "questionIdx": 16898,
        "questionPatternModEntities": "Did M0 's sibling marry M1 and M2",
        "questionTemplate": "Did [entity] 's [ROLE_SIMPLE] [VP_SIMPLE] [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x0 != M1 ) .\nFILTER ( ?x0 != M2 )\n}",
        "recursionDepth": 19,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P3373 wd:Q635 .\n?x0 wdt:P26 wd:Q40060 .\n?x0 wdt:P26 wd:Q632595 .\nFILTER ( ?x0 != wd:Q40060 ) .\nFILTER ( ?x0 != wd:Q632595 ) .\nFILTER ( ?x0 != wd:Q635 )\n}",
        "questionWithBrackets": "Did [Cleopatra] 's sibling marry [Seleucus VII Kybiosaktes] and [Archelaus]"
    },
    {
        "questionIdx": 16899,
        "questionPatternModEntities": "Did M0 's spouse , parent , and sibling marry M1",
        "questionTemplate": "Did [entity] 's [ROLE_SIMPLE] , [ROLE_SIMPLE] , and [ROLE_SIMPLE] [VP_SIMPLE] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M0 .\n?x0 P2 M0 .\n?x0 P2 M1 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x0 != M1 )\n}",
        "recursionDepth": 24,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q443473 .\n?x0 wdt:P3373 wd:Q443473 .\n?x0 wdt:P26 wd:Q210535 .\n?x0 wdt:P26 wd:Q443473 .\nFILTER ( ?x0 != wd:Q210535 ) .\nFILTER ( ?x0 != wd:Q443473 ) .\nFILTER ( ?x0 != wd:Q443473 )\n}",
        "questionWithBrackets": "Did [Henutmire] 's spouse , parent , and sibling marry [Nefertarilllala]"
    },
    {
        "questionIdx": 16900,
        "questionPatternModEntities": "Did M0 's spouse , sibling , and parent marry M1",
        "questionTemplate": "Did [entity] 's [ROLE_SIMPLE] , [ROLE_SIMPLE] , and [ROLE_SIMPLE] [VP_SIMPLE] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M0 .\n?x0 P2 M0 .\n?x0 P2 M1 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x0 != M1 )\n}",
        "recursionDepth": 24,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q443473 .\n?x0 wdt:P3373 wd:Q443473 .\n?x0 wdt:P26 wd:Q210535 .\n?x0 wdt:P26 wd:Q443473 .\nFILTER ( ?x0 != wd:Q210535 ) .\nFILTER ( ?x0 != wd:Q443473 ) .\nFILTER ( ?x0 != wd:Q443473 )\n}",
        "questionWithBrackets": "Did [Henutmire] 's spouse , sibling , and parent marry [Nefertarilllala]"
    },
    {
        "questionIdx": 16922,
        "questionPatternModEntities": "Did M0 's Italian sibling play M2 and M3 and play M4 and M5",
        "questionTemplate": "Did [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] [VP_SIMPLE] [entity] and [entity] and [VP_SIMPLE] [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P2 M2 .\n?x0 P2 M3 .\n?x0 P2 M4 .\n?x0 P2 M5 .\nFILTER ( ?x0 != M0 )\n}",
        "recursionDepth": 39,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P453 wd:Q48463568 .\n?x0 wdt:P453 wd:Q64005951 .\n?x0 wdt:P453 wd:Q50386907 .\n?x0 wdt:P453 wd:Q5815108 .\n?x0 wdt:P27 wd:Q38 .\n?x0 wdt:P3373 wd:Q3756757 .\nFILTER ( ?x0 != wd:Q3756757 )\n}",
        "questionWithBrackets": "Did [Gabriella Pavarotti] 's Italian sibling play [Andrea Ch\u00e9nier] and [Duke of Mantua] and play [Mario Cavaradossi] and [Rodolfo]"
    },
    {
        "questionIdx": 17103,
        "questionPatternModEntities": "Did M3 star M4 , star M5 and M6 , and star M2 's German Canadian spouse",
        "questionTemplate": "Did [entity] [VP_SIMPLE] [entity] , [VP_SIMPLE] [entity] and [entity] , and [VP_SIMPLE] [entity] 's [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P1 M2 .\nFILTER ( ?x0 != M2 ) .\nM3 P2 ?x0 .\nM3 P2 M4 .\nM3 P2 M5 .\nM3 P2 M6\n}",
        "recursionDepth": 49,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P27 wd:Q183 .\n?x0 wdt:P27 wd:Q16 .\n?x0 wdt:P26 wd:Q1098508 .\nFILTER ( ?x0 != wd:Q1098508 ) .\nwd:Q518765 wdt:P161 ?x0 .\nwd:Q518765 wdt:P161 wd:Q1208833 .\nwd:Q518765 wdt:P161 wd:Q45292 .\nwd:Q518765 wdt:P161 wd:Q45572\n}",
        "questionWithBrackets": "Did [Der Schuh des Manitu] star [Joseph Hannesschl\u00e4ger] , star [Diana Herold] and [Michael \"Bully\" Herbig] , and star [Claus Fischer] 's German Canadian spouse"
    },
    {
        "questionIdx": 17123,
        "questionPatternModEntities": "Did M0 and M2 star M1",
        "questionTemplate": "Did [entity] and [entity] [VP_SIMPLE] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM2 P0 M1\n}",
        "recursionDepth": 15,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q11220194 wdt:P161 wd:Q76 .\nwd:Q1529637 wdt:P161 wd:Q76\n}",
        "questionWithBrackets": "Did [Dawn of the Planet of the Apes] and [Oldboy] star [Barack Obama]"
    },
    {
        "questionIdx": 17134,
        "questionPatternModEntities": "Did M3 and M5 star a French Canadian sibling of M0 and star M4",
        "questionTemplate": "Did [entity] and [entity] [VP_SIMPLE] a [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] and [VP_SIMPLE] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\nFILTER ( ?x0 != M0 ) .\nM3 P2 ?x0 .\nM3 P2 M4 .\nM5 P2 ?x0 .\nM5 P2 M4\n}",
        "recursionDepth": 42,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P27 wd:Q16 .\n?x0 wdt:P27 wd:Q142 .\n?x0 wdt:P3373 wd:Q88006341 .\nFILTER ( ?x0 != wd:Q88006341 ) .\nwd:Q770000 wdt:P161 ?x0 .\nwd:Q770000 wdt:P161 wd:Q30449 .\nwd:Q465192 wdt:P161 ?x0 .\nwd:Q465192 wdt:P161 wd:Q30449\n}",
        "questionWithBrackets": "Did [Fast Food Nation] and [The Flock] star a French Canadian sibling of [Michelle Lavigne] and star [Avril Lavigne]"
    },
    {
        "questionIdx": 17136,
        "questionPatternModEntities": "Did M1 star M2 and star M0 's employee",
        "questionTemplate": "Did [entity] [VP_SIMPLE] [entity] and [VP_SIMPLE] [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 ?x0 .\nM1 P1 M2\n}",
        "recursionDepth": 26,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P108 wd:Q131252 .\nwd:Q464964 wdt:P161 ?x0 .\nwd:Q464964 wdt:P161 wd:Q80069\n}",
        "questionWithBrackets": "Did [The Dictator] star [Megan Fox] and star [University of Chicago] 's employee"
    },
    {
        "questionIdx": 17257,
        "questionPatternModEntities": "Did M2 star M0 's male actor",
        "questionTemplate": "Did [entity] [VP_SIMPLE] [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nM2 P2 ?x0\n}",
        "recursionDepth": 20,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P453 wd:Q50807639 .\n?x0 wdt:P21 wd:Q6581097 .\nwd:Q98808398 wdt:P161 ?x0\n}",
        "questionWithBrackets": "Did [Jonas Kaufmann: My Vienna] star [Lohengrin] 's male actor"
    },
    {
        "questionIdx": 17307,
        "questionPatternModEntities": "Did M1 star M2 and star a employee of M0",
        "questionTemplate": "Did [entity] [VP_SIMPLE] [entity] and [VP_SIMPLE] a [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 ?x0 .\nM1 P1 M2\n}",
        "recursionDepth": 28,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P108 wd:Q141336 .\nwd:Q221760 wdt:P161 ?x0 .\nwd:Q221760 wdt:P161 wd:Q253395\n}",
        "questionWithBrackets": "Did [I Am Twenty] star [Bella Akhmadulina] and star a employee of [Mosfilm]"
    },
    {
        "questionIdx": 17315,
        "questionPatternModEntities": "Did M1 star M0 's parent and sibling",
        "questionTemplate": "Did [entity] [VP_SIMPLE] [entity] 's [ROLE_SIMPLE] and [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M0 .\nFILTER ( ?x0 != M0 ) .\nM1 P2 ?x0\n}",
        "recursionDepth": 20,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q1938151 .\n?x0 wdt:P3373 wd:Q1938151 .\nFILTER ( ?x0 != wd:Q1938151 ) .\nwd:Q15168753 wdt:P161 ?x0\n}",
        "questionWithBrackets": "Did [No label defined] star [Miriam Maertens] 's parent and sibling"
    },
    {
        "questionIdx": 17360,
        "questionPatternModEntities": "Did M2 star a Chinese sibling of M0",
        "questionTemplate": "Did [entity] [VP_SIMPLE] a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M0 ) .\nM2 P2 ?x0\n}",
        "recursionDepth": 22,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P27 wd:Q148 .\n?x0 wdt:P3373 wd:Q77895 .\nFILTER ( ?x0 != wd:Q77895 ) .\nwd:Q1144659 wdt:P161 ?x0\n}",
        "questionWithBrackets": "Did [Prelude to War] star a Chinese sibling of [Pujie]"
    },
    {
        "questionIdx": 17401,
        "questionPatternModEntities": "Did M0 's Canadian employee marry M2 and M3",
        "questionTemplate": "Did [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] [VP_SIMPLE] [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P2 M2 .\n?x0 P2 M3 .\nFILTER ( ?x0 != M2 ) .\nFILTER ( ?x0 != M3 )\n}",
        "recursionDepth": 24,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P108 wd:Q849751 .\n?x0 wdt:P27 wd:Q16 .\n?x0 wdt:P26 wd:Q717744 .\n?x0 wdt:P26 wd:Q15489778 .\nFILTER ( ?x0 != wd:Q717744 ) .\nFILTER ( ?x0 != wd:Q15489778 )\n}",
        "questionWithBrackets": "Did [York University] 's Canadian employee marry [Neal Wood] and [Ed Broadbent]"
    },
    {
        "questionIdx": 17553,
        "questionPatternModEntities": "Did M0 and M2 marry M1",
        "questionTemplate": "Did [entity] and [entity] [VP_SIMPLE] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nFILTER ( M0 != M1 ) .\nFILTER ( M2 != M1 ) .\nM0 P0 M1 .\nM2 P0 M1\n}",
        "recursionDepth": 15,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nFILTER ( wd:Q57212 != wd:Q1339 ) .\nFILTER ( wd:Q57487 != wd:Q1339 ) .\nwd:Q57212 wdt:P26 wd:Q1339 .\nwd:Q57487 wdt:P26 wd:Q1339\n}",
        "questionWithBrackets": "Did [Anna Magdalena Bach] and [Maria Barbara Bach] marry [Johann Sebastian Bach]"
    },
    {
        "questionIdx": 18130,
        "questionPatternModEntities": "Did M1 star a sibling of M0",
        "questionTemplate": "Did [entity] [VP_SIMPLE] a [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nM1 P1 ?x0\n}",
        "recursionDepth": 17,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P3373 wd:Q882 .\nFILTER ( ?x0 != wd:Q882 ) .\nwd:Q1070484 wdt:P161 ?x0\n}",
        "questionWithBrackets": "Did [A Dog's Life] star a sibling of [Charlie Chaplin]"
    },
    {
        "questionIdx": 18348,
        "questionPatternModEntities": "Did M0 's parent and spouse marry M1 , M2 , M3 , and M4",
        "questionTemplate": "Did [entity] 's [ROLE_SIMPLE] and [ROLE_SIMPLE] [VP_SIMPLE] [entity] , [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\n?x0 P1 M3 .\n?x0 P1 M4 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x0 != M1 ) .\nFILTER ( ?x0 != M2 ) .\nFILTER ( ?x0 != M3 ) .\nFILTER ( ?x0 != M4 )\n}",
        "recursionDepth": 30,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q270864 .\n?x0 wdt:P26 wd:Q152230 .\n?x0 wdt:P26 wd:Q461520 .\n?x0 wdt:P26 wd:Q262428 .\n?x0 wdt:P26 wd:Q270864 .\n?x0 wdt:P26 wd:Q469955 .\nFILTER ( ?x0 != wd:Q152230 ) .\nFILTER ( ?x0 != wd:Q461520 ) .\nFILTER ( ?x0 != wd:Q262428 ) .\nFILTER ( ?x0 != wd:Q270864 ) .\nFILTER ( ?x0 != wd:Q469955 )\n}",
        "questionWithBrackets": "Did [Sitamun] 's parent and spouse marry [Tadukhipa] , [Iset] , [Gilukhipa] , and [Tiye]"
    },
    {
        "questionIdx": 18660,
        "questionPatternModEntities": "Did M1 and M2 star M0 's parent 's actor",
        "questionTemplate": "Did [entity] and [entity] [VP_SIMPLE] [entity] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x1 P1 M0 .\nM1 P2 ?x0 .\nM2 P2 ?x0\n}",
        "recursionDepth": 23,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P453 ?x1 .\n?x1 wdt:P40|wdt:P355 wd:Q8125562 .\nwd:Q62390957 wdt:P161 ?x0 .\nwd:Q131074 wdt:P161 ?x0\n}",
        "questionWithBrackets": "Did [Chapter Eleven: A Midwinter's Tale] and [The Lord of the Rings: The Return of the King] star [Elboron] 's parent 's actor"
    },
    {
        "questionIdx": 18815,
        "questionPatternModEntities": "Did M2 marry a employee of M0 and M1",
        "questionTemplate": "Did [entity] [VP_SIMPLE] a [ROLE_SIMPLE] of [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\nFILTER ( M2 != ?x0 ) .\nM2 P1 ?x0\n}",
        "recursionDepth": 21,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P108 wd:Q23548 .\n?x0 wdt:P108 wd:Q37043 .\nFILTER ( wd:Q21179251 != ?x0 ) .\nwd:Q21179251 wdt:P26 ?x0\n}",
        "questionWithBrackets": "Did [Janet Shearon] marry a employee of [NASA] and [Tallahassee]"
    },
    {
        "questionIdx": 18928,
        "questionPatternModEntities": "Did M2 marry M1 's actor and marry a spouse of M0",
        "questionTemplate": "Did [entity] [VP_SIMPLE] [entity] 's [ROLE_SIMPLE] and [VP_SIMPLE] a [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x1 P1 M1 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( M2 != ?x0 ) .\nFILTER ( M2 != ?x1 ) .\nM2 P0 ?x0 .\nM2 P0 ?x1\n}",
        "recursionDepth": 32,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P26 wd:Q485165 .\n?x1 wdt:P453 wd:Q12742668 .\nFILTER ( ?x0 != wd:Q485165 ) .\nFILTER ( wd:Q50896 != ?x0 ) .\nFILTER ( wd:Q50896 != ?x1 ) .\nwd:Q50896 wdt:P26 ?x0 .\nwd:Q50896 wdt:P26 ?x1\n}",
        "questionWithBrackets": "Did [Pippo Baudo] marry [Princess Turandot] 's actor and marry a spouse of [Jos\u00e9 Carreras]"
    },
    {
        "questionIdx": 18990,
        "questionPatternModEntities": "Did M2 star a male sibling of M0",
        "questionTemplate": "Did [entity] [VP_SIMPLE] a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M0 ) .\nM2 P2 ?x0\n}",
        "recursionDepth": 22,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P21 wd:Q6581097 .\n?x0 wdt:P3373 wd:Q882 .\nFILTER ( ?x0 != wd:Q882 ) .\nwd:Q109116 wdt:P161 ?x0\n}",
        "questionWithBrackets": "Did [The Great Dictator] star a male sibling of [Charlie Chaplin]"
    },
    {
        "questionIdx": 19019,
        "questionPatternModEntities": "Did M1 and M2 marry M0 's employee",
        "questionTemplate": "Did [entity] and [entity] [VP_SIMPLE] [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( M1 != ?x0 ) .\nFILTER ( M2 != ?x0 ) .\nM1 P1 ?x0 .\nM2 P1 ?x0\n}",
        "recursionDepth": 19,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P108 wd:Q49115 .\nFILTER ( wd:Q4526447 != ?x0 ) .\nFILTER ( wd:Q27167 != ?x0 ) .\nwd:Q4526447 wdt:P26 ?x0 .\nwd:Q27167 wdt:P26 ?x0\n}",
        "questionWithBrackets": "Did [Ann Druyan] and [Linda Salzman Sagan] marry [Cornell University] 's employee"
    },
    {
        "questionIdx": 19032,
        "questionPatternModEntities": "Did M0 's female sibling play M1",
        "questionTemplate": "Did [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] [VP_SIMPLE] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P2 M2 .\nFILTER ( ?x0 != M0 )\n}",
        "recursionDepth": 20,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P453 wd:Q222573 .\n?x0 wdt:P21 wd:Q6581072 .\n?x0 wdt:P3373 wd:Q203236 .\nFILTER ( ?x0 != wd:Q203236 )\n}",
        "questionWithBrackets": "Did [Pasipha\u00eb] 's female sibling play [femme fatale]"
    },
    {
        "questionIdx": 19067,
        "questionPatternModEntities": "Did M2 's spouse 's spouse and sibling marry M0 and marry M1",
        "questionTemplate": "Did [entity] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE] and [ROLE_SIMPLE] [VP_SIMPLE] [entity] and [VP_SIMPLE] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P1 M0 .\n?x0 P1 M1 .\n?x1 P1 M2 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x0 != M1 ) .\nFILTER ( ?x1 != M2 )\n}",
        "recursionDepth": 35,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P3373 ?x1 .\n?x0 wdt:P26 ?x1 .\n?x0 wdt:P26 wd:Q3350 .\n?x0 wdt:P26 wd:Q39952 .\n?x1 wdt:P26 wd:Q40003 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x0 != wd:Q3350 ) .\nFILTER ( ?x0 != wd:Q39952 ) .\nFILTER ( ?x1 != wd:Q40003 )\n}",
        "questionWithBrackets": "Did [Cleopatra III of Egypt] 's spouse 's spouse and sibling marry [Ptolemy VI] and marry [Ptolemy VIII Physcon]"
    },
    {
        "questionIdx": 19102,
        "questionPatternModEntities": "Did M4 's Italian spouse marry M1 , M2 , and M3",
        "questionTemplate": "Did [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] [VP_SIMPLE] [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\n?x0 P1 M3 .\n?x0 P1 M4 .\nFILTER ( ?x0 != M1 ) .\nFILTER ( ?x0 != M2 ) .\nFILTER ( ?x0 != M3 ) .\nFILTER ( ?x0 != M4 )\n}",
        "recursionDepth": 27,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P27 wd:Q38 .\n?x0 wdt:P26 wd:Q539582 .\n?x0 wdt:P26 wd:Q3343458 .\n?x0 wdt:P26 wd:Q3707674 .\n?x0 wdt:P26 wd:Q202144 .\nFILTER ( ?x0 != wd:Q539582 ) .\nFILTER ( ?x0 != wd:Q3343458 ) .\nFILTER ( ?x0 != wd:Q3707674 ) .\nFILTER ( ?x0 != wd:Q202144 )\n}",
        "questionWithBrackets": "Did [Juliette Mayniel] 's Italian spouse marry [Shelley Winters] , [Diletta D'Andrea] , and [Nora Ricci]"
    },
    {
        "questionIdx": 19125,
        "questionPatternModEntities": "Did M2 star a Chinese sibling of M0 , star M3 , and star M4",
        "questionTemplate": "Did [entity] [VP_SIMPLE] a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] , [VP_SIMPLE] [entity] , and [VP_SIMPLE] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M0 ) .\nM2 P2 ?x0 .\nM2 P2 M3 .\nM2 P2 M4\n}",
        "recursionDepth": 42,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P27 wd:Q148 .\n?x0 wdt:P3373 wd:Q77895 .\nFILTER ( ?x0 != wd:Q77895 ) .\nwd:Q1144659 wdt:P161 ?x0 .\nwd:Q1144659 wdt:P161 wd:Q314826 .\nwd:Q1144659 wdt:P161 wd:Q352\n}",
        "questionWithBrackets": "Did [Prelude to War] star a Chinese sibling of [Pujie] , star [Henry L. Stimson] , and star [Adolf Hitler]"
    },
    {
        "questionIdx": 19140,
        "questionPatternModEntities": "Did M6 marry a employee of M0 , M1 , M2 , M3 , M4 , and M5",
        "questionTemplate": "Did [entity] [VP_SIMPLE] a [ROLE_SIMPLE] of [entity] , [entity] , [entity] , [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P0 M3 .\n?x0 P0 M4 .\n?x0 P0 M5 .\nFILTER ( M6 != ?x0 ) .\nM6 P1 ?x0\n}",
        "recursionDepth": 33,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P108 wd:Q500740 .\n?x0 wdt:P108 wd:Q3551621 .\n?x0 wdt:P108 wd:Q391083 .\n?x0 wdt:P108 wd:Q273461 .\n?x0 wdt:P108 wd:Q83259 .\n?x0 wdt:P108 wd:Q1322289 .\nFILTER ( wd:Q13666556 != ?x0 ) .\nwd:Q13666556 wdt:P26 ?x0\n}",
        "questionWithBrackets": "Did [Marie Pasteur] marry a employee of [University of Lille] , [Lille University of Science and Technology] , [\u00c9cole Centrale de Lille] , [Pasteur Institute] , [\u00c9cole normale sup\u00e9rieure] , and [Lille North of France University]"
    },
    {
        "questionIdx": 19187,
        "questionPatternModEntities": "Did M1 star M0 's actor and star M2 and M3",
        "questionTemplate": "Did [entity] [VP_SIMPLE] [entity] 's [ROLE_SIMPLE] and [VP_SIMPLE] [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 ?x0 .\nM1 P1 M2 .\nM1 P1 M3\n}",
        "recursionDepth": 30,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P453 wd:Q65115227 .\nwd:Q804434 wdt:P161 ?x0 .\nwd:Q804434 wdt:P161 wd:Q4356496 .\nwd:Q804434 wdt:P161 wd:Q49547\n}",
        "questionWithBrackets": "Did [Bleach: Memories of Nobody] star [Meia Gisborn] 's actor and star [Fumiko Orikasa] and [Neil Kaplan]"
    },
    {
        "questionIdx": 19285,
        "questionPatternModEntities": "Did M2 star M1 's Dutch actor and star M3 , M4 , and M5",
        "questionTemplate": "Did [entity] [VP_SIMPLE] [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] and [VP_SIMPLE] [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nM2 P2 ?x0 .\nM2 P2 M3 .\nM2 P2 M4 .\nM2 P2 M5\n}",
        "recursionDepth": 38,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P453 wd:Q47490616 .\n?x0 wdt:P27 wd:Q29999 .\nwd:Q1976649 wdt:P161 ?x0 .\nwd:Q1976649 wdt:P161 wd:Q1960990 .\nwd:Q1976649 wdt:P161 wd:Q2736668 .\nwd:Q1976649 wdt:P161 wd:Q262886\n}",
        "questionWithBrackets": "Did [Last Call] star [No label defined] 's Dutch actor and star [Willem Nijholt] , [Kitty Courbois] , and [Rijk de Gooyer]"
    },
    {
        "questionIdx": 19366,
        "questionPatternModEntities": "Did M4 star M0 's Dutch employee and star a female employee of M2",
        "questionTemplate": "Did [entity] [VP_SIMPLE] [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] and [VP_SIMPLE] a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x1 P0 M2 .\n?x1 P2 M3 .\nM4 P3 ?x0 .\nM4 P3 ?x1\n}",
        "recursionDepth": 42,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P108 wd:Q880447 .\n?x0 wdt:P27 wd:Q29999 .\n?x1 wdt:P108 wd:Q1446181 .\n?x1 wdt:P21 wd:Q6581072 .\nwd:Q3889029 wdt:P161 ?x0 .\nwd:Q3889029 wdt:P161 ?x1\n}",
        "questionWithBrackets": "Did [Painters Painting] star [Black Mountain College] 's Dutch employee and star a female employee of [Hunter College]"
    },
    {
        "questionIdx": 19388,
        "questionPatternModEntities": "Did M2 and M3 star a Mexican employee of M0",
        "questionTemplate": "Did [entity] and [entity] [VP_SIMPLE] a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nM2 P2 ?x0 .\nM3 P2 ?x0\n}",
        "recursionDepth": 26,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P108 wd:Q4614 .\n?x0 wdt:P27 wd:Q96 .\nwd:Q3837421 wdt:P161 ?x0 .\nwd:Q3961975 wdt:P161 ?x0\n}",
        "questionWithBrackets": "Did [No label defined] and [Next to Be Gone] star a Mexican employee of [University of Southern California]"
    },
    {
        "questionIdx": 19424,
        "questionPatternModEntities": "Did M3 star a Spanish French sibling of M0",
        "questionTemplate": "Did [entity] [VP_SIMPLE] a [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\nFILTER ( ?x0 != M0 ) .\nM3 P2 ?x0\n}",
        "recursionDepth": 27,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P27 wd:Q29 .\n?x0 wdt:P27 wd:Q142 .\n?x0 wdt:P3373 wd:Q2977959 .\nFILTER ( ?x0 != wd:Q2977959 ) .\nwd:Q928800 wdt:P161 ?x0\n}",
        "questionWithBrackets": "Did [Immoral Tales] star a Spanish French sibling of [Claude Picasso]"
    },
    {
        "questionIdx": 19531,
        "questionPatternModEntities": "Did M1 marry a spouse of M0 's sibling",
        "questionTemplate": "Did [entity] [VP_SIMPLE] a [ROLE_SIMPLE] of [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x1 P1 M0 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x1 != M0 ) .\nFILTER ( M1 != ?x0 ) .\nM1 P0 ?x0\n}",
        "recursionDepth": 21,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P26 ?x1 .\n?x1 wdt:P3373 wd:Q720 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x1 != wd:Q720 ) .\nFILTER ( wd:Q1914424 != ?x0 ) .\nwd:Q1914424 wdt:P26 ?x0\n}",
        "questionWithBrackets": "Did [Huochenbieji] marry a spouse of [Genghis Khan] 's sibling"
    },
    {
        "questionIdx": 19536,
        "questionPatternModEntities": "Did M3 star a female German employee of M0",
        "questionTemplate": "Did [entity] [VP_SIMPLE] a [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P2 M2 .\nM3 P3 ?x0\n}",
        "recursionDepth": 27,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P108 wd:Q26882567 .\n?x0 wdt:P21 wd:Q6581072 .\n?x0 wdt:P27 wd:Q183 .\nwd:Q187154 wdt:P161 ?x0\n}",
        "questionWithBrackets": "Did [The Day the Earth Stood Still] star a female German employee of [No label defined]"
    },
    {
        "questionIdx": 19583,
        "questionPatternModEntities": "Did M1 and M2 star a child of M0",
        "questionTemplate": "Did [entity] and [entity] [VP_SIMPLE] a [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 ?x0 .\nM2 P1 ?x0\n}",
        "recursionDepth": 21,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P749 wd:Q218038 .\nwd:Q555468 wdt:P161 ?x0 .\nwd:Q612680 wdt:P161 ?x0\n}",
        "questionWithBrackets": "Did [The Singing Bee] and [Father Dowling Mysteries] star a child of [RCA Corporation]"
    },
    {
        "questionIdx": 19732,
        "questionPatternModEntities": "Did M2 star a Italian actor that M1 was played by",
        "questionTemplate": "Did [entity] [VP_SIMPLE] a [ADJECTIVE_SIMPLE] [NP_SIMPLE] that [entity] was [VP_SIMPLE] by",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nM2 P2 ?x0\n}",
        "recursionDepth": 30,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P453 wd:Q5815108 .\n?x0 wdt:P27 wd:Q38 .\nwd:Q290640 wdt:P161 ?x0\n}",
        "questionWithBrackets": "Did [Yes, Giorgio] star a Italian actor that [Duke of Mantua] was played by"
    },
    {
        "questionIdx": 19755,
        "questionPatternModEntities": "Did M0 's spouse , sibling , and parent marry M1 and M2",
        "questionTemplate": "Did [entity] 's [ROLE_SIMPLE] , [ROLE_SIMPLE] , and [ROLE_SIMPLE] [VP_SIMPLE] [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M0 .\n?x0 P2 M0 .\n?x0 P2 M1 .\n?x0 P2 M2 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x0 != M1 ) .\nFILTER ( ?x0 != M2 )\n}",
        "recursionDepth": 28,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q443473 .\n?x0 wdt:P3373 wd:Q443473 .\n?x0 wdt:P26 wd:Q210535 .\n?x0 wdt:P26 wd:Q443473 .\n?x0 wdt:P26 wd:Q256430 .\nFILTER ( ?x0 != wd:Q210535 ) .\nFILTER ( ?x0 != wd:Q443473 ) .\nFILTER ( ?x0 != wd:Q443473 ) .\nFILTER ( ?x0 != wd:Q256430 )\n}",
        "questionWithBrackets": "Did [Henutmire] 's spouse , sibling , and parent marry [Nefertarilllala] and [Maathorneferure]"
    },
    {
        "questionIdx": 19996,
        "questionPatternModEntities": "Did M2 star M3 and star a British sibling of M0",
        "questionTemplate": "Did [entity] [VP_SIMPLE] [entity] and [VP_SIMPLE] a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M0 ) .\nM2 P2 ?x0 .\nM2 P2 M3\n}",
        "recursionDepth": 33,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P27 wd:Q145 .\n?x0 wdt:P3373 wd:Q606780 .\nFILTER ( ?x0 != wd:Q606780 ) .\nwd:Q45602 wdt:P161 ?x0 .\nwd:Q45602 wdt:P161 wd:Q882\n}",
        "questionWithBrackets": "Did [Modern Times] star [Charlie Chaplin] and star a British sibling of [Sydney Chaplin]"
    },
    {
        "questionIdx": 20102,
        "questionPatternModEntities": "Did M2 marry M3 and M4 and marry M0 's Chinese sibling",
        "questionTemplate": "Did [entity] [VP_SIMPLE] [entity] and [entity] and [VP_SIMPLE] [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( M2 != ?x0 ) .\nFILTER ( M2 != M3 ) .\nFILTER ( M2 != M4 ) .\nM2 P2 ?x0 .\nM2 P2 M3 .\nM2 P2 M4\n}",
        "recursionDepth": 35,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P27 wd:Q148 .\n?x0 wdt:P3373 wd:Q11572913 .\nFILTER ( ?x0 != wd:Q11572913 ) .\nFILTER ( wd:Q16988 != ?x0 ) .\nFILTER ( wd:Q16988 != wd:Q9069005 ) .\nFILTER ( wd:Q16988 != wd:Q272307 ) .\nwd:Q16988 wdt:P26 ?x0 .\nwd:Q16988 wdt:P26 wd:Q9069005 .\nwd:Q16988 wdt:P26 wd:Q272307\n}",
        "questionWithBrackets": "Did [Liu Shaoqi] marry [Wang Guangmei] and [Xie Fei] and marry [Wang Guangfu] 's Chinese sibling"
    },
    {
        "questionIdx": 20185,
        "questionPatternModEntities": "Did M1 star M0 's employee",
        "questionTemplate": "Did [entity] [VP_SIMPLE] [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 ?x0\n}",
        "recursionDepth": 15,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P108 wd:Q9531 .\nwd:Q2924230 wdt:P161 ?x0\n}",
        "questionWithBrackets": "Did [Break the Science Barrier] star [BBC] 's employee"
    },
    {
        "questionIdx": 20226,
        "questionPatternModEntities": "Did M2 star M0 's Spanish employee",
        "questionTemplate": "Did [entity] [VP_SIMPLE] [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nM2 P2 ?x0\n}",
        "recursionDepth": 20,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P108 wd:Q1811146 .\n?x0 wdt:P27 wd:Q29 .\nwd:Q1402826 wdt:P161 ?x0\n}",
        "questionWithBrackets": "Did [La colmena] star [University of the Balearic Islands] 's Spanish employee"
    },
    {
        "questionIdx": 21085,
        "questionPatternModEntities": "Did M1 star a child of M0",
        "questionTemplate": "Did [entity] [VP_SIMPLE] a [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 ?x0\n}",
        "recursionDepth": 17,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P749 wd:Q48525 .\nwd:Q3800839 wdt:P161 ?x0\n}",
        "questionWithBrackets": "Did [No label defined] star a child of [Federal Government of the United States of America]"
    },
    {
        "questionIdx": 21846,
        "questionPatternModEntities": "Did M2 star M3 and M4 , star M5 , and star a employee of M0 and M1",
        "questionTemplate": "Did [entity] [VP_SIMPLE] [entity] and [entity] , [VP_SIMPLE] [entity] , and [VP_SIMPLE] a [ROLE_SIMPLE] of [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\nM2 P1 ?x0 .\nM2 P1 M3 .\nM2 P1 M4 .\nM2 P1 M5\n}",
        "recursionDepth": 45,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P108 wd:Q131252 .\n?x0 wdt:P108 wd:Q4537781 .\nwd:Q464964 wdt:P161 ?x0 .\nwd:Q464964 wdt:P161 wd:Q1374481 .\nwd:Q464964 wdt:P161 wd:Q555227 .\nwd:Q464964 wdt:P161 wd:Q76\n}",
        "questionWithBrackets": "Did [The Dictator] star [Garry Shandling] and [Barack Obama] , star [Fred Melamed] , and star a employee of [University of Chicago] and [New York Public Interest Research Group]"
    },
    {
        "questionIdx": 21859,
        "questionPatternModEntities": "Did M1 star M0 's employee and star M2 , M3 , M4 , and M5",
        "questionTemplate": "Did [entity] [VP_SIMPLE] [entity] 's [ROLE_SIMPLE] and [VP_SIMPLE] [entity] , [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 ?x0 .\nM1 P1 M2 .\nM1 P1 M3 .\nM1 P1 M4 .\nM1 P1 M5\n}",
        "recursionDepth": 36,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P108 wd:Q4537328 .\nwd:Q464964 wdt:P161 ?x0 .\nwd:Q464964 wdt:P161 wd:Q14535 .\nwd:Q464964 wdt:P161 wd:Q303538 .\nwd:Q464964 wdt:P161 wd:Q80069 .\nwd:Q464964 wdt:P161 wd:Q4491\n}",
        "questionWithBrackets": "Did [The Dictator] star [Business International Corporation] 's employee and star [Megan Fox] , [Anna Faris] , [Fred Armisen] , and [Aasif Mandvi]"
    },
    {
        "questionIdx": 21861,
        "questionPatternModEntities": "Did M1 star M2 , star M3 , star M4 and M5 , and star M0 's employee",
        "questionTemplate": "Did [entity] [VP_SIMPLE] [entity] , [VP_SIMPLE] [entity] , [VP_SIMPLE] [entity] and [entity] , and [VP_SIMPLE] [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 ?x0 .\nM1 P1 M2 .\nM1 P1 M3 .\nM1 P1 M4 .\nM1 P1 M5\n}",
        "recursionDepth": 48,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P108 wd:Q3483312 .\nwd:Q464964 wdt:P161 ?x0 .\nwd:Q464964 wdt:P161 wd:Q1334725 .\nwd:Q464964 wdt:P161 wd:Q14535 .\nwd:Q464964 wdt:P161 wd:Q4491 .\nwd:Q464964 wdt:P161 wd:Q6294\n}",
        "questionWithBrackets": "Did [The Dictator] star [Fred Armisen] , star [Kevin Corrigan] , star [Hillary Clinton] and [Anna Faris] , and star [Sidley Austin] 's employee"
    },
    {
        "questionIdx": 21901,
        "questionPatternModEntities": "Did M0 star M1 , M2 , and M3",
        "questionTemplate": "Did [entity] [VP_SIMPLE] [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P0 M3\n}",
        "recursionDepth": 18,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q11928 wdt:P161 wd:Q489 .\nwd:Q11928 wdt:P161 wd:Q73035 .\nwd:Q11928 wdt:P161 wd:Q102711\n}",
        "questionWithBrackets": "Did [Swing Vote] star [Dennis Hopper] , [George Lopez] , and [Bill Maher]"
    },
    {
        "questionIdx": 21958,
        "questionPatternModEntities": "Did M0 's prequel star M1 and M2",
        "questionTemplate": "Did [entity] 's [ROLE_SIMPLE] [VP_SIMPLE] [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P1 M2\n}",
        "recursionDepth": 19,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P156 wd:Q4533 .\n?x0 wdt:P161 wd:Q55497 .\n?x0 wdt:P161 wd:Q253968\n}",
        "questionWithBrackets": "Did [Victorious] 's prequel star [Jamie Lynn Spears] and [Paul Butcher]"
    },
    {
        "questionIdx": 21967,
        "questionPatternModEntities": "Did M2 star M0 's Dutch sibling and star M3",
        "questionTemplate": "Did [entity] [VP_SIMPLE] [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] and [VP_SIMPLE] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M0 ) .\nM2 P2 ?x0 .\nM2 P2 M3\n}",
        "recursionDepth": 31,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P27 wd:Q29999 .\n?x0 wdt:P3373 wd:Q3175856 .\nFILTER ( ?x0 != wd:Q3175856 ) .\nwd:Q3036787 wdt:P161 ?x0 .\nwd:Q3036787 wdt:P161 wd:Q108301\n}",
        "questionWithBrackets": "Did [Donne-moi tes yeux] star [Jean van Dongen] 's Dutch sibling and star [Maurice Utrillo]"
    },
    {
        "questionIdx": 21991,
        "questionPatternModEntities": "Did M1 and M2 star M0 's child",
        "questionTemplate": "Did [entity] and [entity] [VP_SIMPLE] [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 ?x0 .\nM2 P1 ?x0\n}",
        "recursionDepth": 19,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P749 wd:Q218038 .\nwd:Q555468 wdt:P161 ?x0 .\nwd:Q612680 wdt:P161 ?x0\n}",
        "questionWithBrackets": "Did [The Singing Bee] and [Father Dowling Mysteries] star [RCA Corporation] 's child"
    },
    {
        "questionIdx": 22031,
        "questionPatternModEntities": "Did M2 and M4 star M1 's Mexican spouse 's sibling and star M3",
        "questionTemplate": "Did [entity] and [entity] [VP_SIMPLE] [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] 's [ROLE_SIMPLE] and [VP_SIMPLE] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x1 P1 M0 .\n?x1 P2 M1 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x1 != M1 ) .\nM2 P3 ?x0 .\nM2 P3 M3 .\nM4 P3 ?x0 .\nM4 P3 M3\n}",
        "recursionDepth": 39,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P3373 ?x1 .\n?x1 wdt:P27 wd:Q96 .\n?x1 wdt:P26 wd:Q4712055 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x1 != wd:Q4712055 ) .\nwd:Q16612088 wdt:P161 ?x0 .\nwd:Q16612088 wdt:P161 wd:Q1165261 .\nwd:Q86528525 wdt:P161 ?x0 .\nwd:Q86528525 wdt:P161 wd:Q1165261\n}",
        "questionWithBrackets": "Did [Grandma's Wedding] and [No s\u00e9 si cortarme las venas o dej\u00e1rmelas largas] star [Bacar Buana Anlu] 's Mexican spouse 's sibling and star [Marimar.]"
    },
    {
        "questionIdx": 22055,
        "questionPatternModEntities": "Did M1 , M2 , M3 , and M4 star M0 's spouse 's sibling",
        "questionTemplate": "Did [entity] , [entity] , [entity] , and [entity] [VP_SIMPLE] [entity] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x1 P1 M0 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x1 != M0 ) .\nM1 P2 ?x0 .\nM2 P2 ?x0 .\nM3 P2 ?x0 .\nM4 P2 ?x0\n}",
        "recursionDepth": 29,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P3373 ?x1 .\n?x1 wdt:P26 wd:Q32337 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x1 != wd:Q32337 ) .\nwd:Q7756688 wdt:P161 ?x0 .\nwd:Q199039 wdt:P161 ?x0 .\nwd:Q1151401 wdt:P161 ?x0 .\nwd:Q1070484 wdt:P161 ?x0\n}",
        "questionWithBrackets": "Did [Pay Day] , [A Dog's Life] , [The Perfect Flapper] , and [The Pilgrim] star [Lita Grey] 's spouse 's sibling"
    },
    {
        "questionIdx": 22129,
        "questionPatternModEntities": "Did M3 star M0 's Italian Canadian sibling , star M4 , and star M5",
        "questionTemplate": "Did [entity] [VP_SIMPLE] [entity] 's [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] , [VP_SIMPLE] [entity] , and [VP_SIMPLE] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\nFILTER ( ?x0 != M0 ) .\nM3 P2 ?x0 .\nM3 P2 M4 .\nM3 P2 M5\n}",
        "recursionDepth": 45,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P27 wd:Q38 .\n?x0 wdt:P27 wd:Q16 .\n?x0 wdt:P3373 wd:Q1687608 .\nFILTER ( ?x0 != wd:Q1687608 ) .\nwd:Q100941675 wdt:P161 ?x0 .\nwd:Q100941675 wdt:P161 wd:Q111238 .\nwd:Q100941675 wdt:P161 wd:Q124800\n}",
        "questionWithBrackets": "Did [Over Christmas] star [Jeremy Mockridge] 's Italian Canadian sibling , star [Johanna Gastdorf] , and star [Rudolf Kowalski]"
    },
    {
        "questionIdx": 22136,
        "questionPatternModEntities": "Did M1 star a parent and sibling of M0",
        "questionTemplate": "Did [entity] [VP_SIMPLE] a [ROLE_SIMPLE] and [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M0 .\nFILTER ( ?x0 != M0 ) .\nM1 P2 ?x0\n}",
        "recursionDepth": 22,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q1938151 .\n?x0 wdt:P3373 wd:Q1938151 .\nFILTER ( ?x0 != wd:Q1938151 ) .\nwd:Q15168753 wdt:P161 ?x0\n}",
        "questionWithBrackets": "Did [No label defined] star a parent and sibling of [Miriam Maertens]"
    },
    {
        "questionIdx": 22218,
        "questionPatternModEntities": "Did M2 star a British spouse of M1 and star M3 , M4 , and M5",
        "questionTemplate": "Did [entity] [VP_SIMPLE] a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] and [VP_SIMPLE] [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M1 ) .\nM2 P2 ?x0 .\nM2 P2 M3 .\nM2 P2 M4 .\nM2 P2 M5\n}",
        "recursionDepth": 40,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P27 wd:Q145 .\n?x0 wdt:P26 wd:Q32337 .\nFILTER ( ?x0 != wd:Q32337 ) .\nwd:Q109116 wdt:P161 ?x0 .\nwd:Q109116 wdt:P161 wd:Q16003718 .\nwd:Q109116 wdt:P161 wd:Q458513 .\nwd:Q109116 wdt:P161 wd:Q882\n}",
        "questionWithBrackets": "Did [The Great Dictator] star a British spouse of [Lita Grey] and star [George Lynn] , [Emma Dunn] , and [Charlie Chaplin]"
    },
    {
        "questionIdx": 22334,
        "questionPatternModEntities": "Did M1 star a employee of M0",
        "questionTemplate": "Did [entity] [VP_SIMPLE] a [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 ?x0\n}",
        "recursionDepth": 17,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P108 wd:Q49114 .\nwd:Q53679499 wdt:P161 ?x0\n}",
        "questionWithBrackets": "Did [Acta General de Chile] star a employee of [Brown University]"
    },
    {
        "questionIdx": 22382,
        "questionPatternModEntities": "Did M1 star M2 and star a parent of M0",
        "questionTemplate": "Did [entity] [VP_SIMPLE] [entity] and [VP_SIMPLE] a [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 ?x0 .\nM1 P1 M2\n}",
        "recursionDepth": 28,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q153481 .\nwd:Q50861 wdt:P161 ?x0 .\nwd:Q50861 wdt:P161 wd:Q1124\n}",
        "questionWithBrackets": "Did [Live Free or Die Hard] star [Bill Clinton] and star a parent of [Jenna Bush Hager]"
    },
    {
        "questionIdx": 22474,
        "questionPatternModEntities": "Did M2 star M3 and M4 , star M5 , and star M0 's Chinese employee",
        "questionTemplate": "Did [entity] [VP_SIMPLE] [entity] and [entity] , [VP_SIMPLE] [entity] , and [VP_SIMPLE] [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nM2 P2 ?x0 .\nM2 P2 M3 .\nM2 P2 M4 .\nM2 P2 M5\n}",
        "recursionDepth": 44,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P108 wd:Q10902170 .\n?x0 wdt:P27 wd:Q148 .\nwd:Q754855 wdt:P161 ?x0 .\nwd:Q754855 wdt:P161 wd:Q855 .\nwd:Q754855 wdt:P161 wd:Q76 .\nwd:Q754855 wdt:P161 wd:Q207\n}",
        "questionWithBrackets": "Did [Capitalism: A Love Story] star [George W. Bush] and [Joseph Stalin] , star [Barack Obama] , and star [Peking University Library] 's Chinese employee"
    },
    {
        "questionIdx": 22475,
        "questionPatternModEntities": "Did M1 star a employee of M0 and star M2",
        "questionTemplate": "Did [entity] [VP_SIMPLE] a [ROLE_SIMPLE] of [entity] and [VP_SIMPLE] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 ?x0 .\nM1 P1 M2\n}",
        "recursionDepth": 28,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P108 wd:Q45132200 .\nwd:Q147235 wdt:P161 ?x0 .\nwd:Q147235 wdt:P161 wd:Q6151232\n}",
        "questionWithBrackets": "Did [How I Met Your Mother] star a employee of [Bloomberg Family Foundation] and star [Jane Carr]"
    },
    {
        "questionIdx": 22524,
        "questionPatternModEntities": "Did M1 star M0 's spouse 's actor and star M2",
        "questionTemplate": "Did [entity] [VP_SIMPLE] [entity] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE] and [VP_SIMPLE] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x1 P1 M0 .\nFILTER ( ?x1 != M0 ) .\nM1 P2 ?x0 .\nM1 P2 M2\n}",
        "recursionDepth": 30,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P453 ?x1 .\n?x1 wdt:P26 wd:Q223468 .\nFILTER ( ?x1 != wd:Q223468 ) .\nwd:Q23594 wdt:P161 ?x0 .\nwd:Q23594 wdt:P161 wd:Q63187\n}",
        "questionWithBrackets": "Did [Homeland] star [Faramir] 's spouse 's actor and star [Sebastian Koch]"
    },
    {
        "questionIdx": 22552,
        "questionPatternModEntities": "Did M1 star M2 and star M0 's sibling",
        "questionTemplate": "Did [entity] [VP_SIMPLE] [entity] and [VP_SIMPLE] [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nM1 P1 ?x0 .\nM1 P1 M2\n}",
        "recursionDepth": 26,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P3373 wd:Q4235 .\nFILTER ( ?x0 != wd:Q4235 ) .\nwd:Q126631 wdt:P161 ?x0 .\nwd:Q126631 wdt:P161 wd:Q83287\n}",
        "questionWithBrackets": "Did [Hannah Montana] star [Selena Gomez] and star [Miley Cyrus] 's sibling"
    },
    {
        "questionIdx": 22750,
        "questionPatternModEntities": "Did M2 star a employee of M0 and M1",
        "questionTemplate": "Did [entity] [VP_SIMPLE] a [ROLE_SIMPLE] of [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\nM2 P1 ?x0\n}",
        "recursionDepth": 21,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P108 wd:Q232141 .\n?x0 wdt:P108 wd:Q1129925 .\nwd:Q2620241 wdt:P161 ?x0\n}",
        "questionWithBrackets": "Did [No] star a employee of [Pontifical Catholic University of Chile] and [University of Chile]"
    },
    {
        "questionIdx": 22761,
        "questionPatternModEntities": "Did M1 and M2 star a employee of M0",
        "questionTemplate": "Did [entity] and [entity] [VP_SIMPLE] a [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 ?x0 .\nM2 P1 ?x0\n}",
        "recursionDepth": 21,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P108 wd:Q3483312 .\nwd:Q26824229 wdt:P161 ?x0 .\nwd:Q464964 wdt:P161 ?x0\n}",
        "questionWithBrackets": "Did [The 13th] and [The Dictator] star a employee of [Sidley Austin]"
    },
    {
        "questionIdx": 22814,
        "questionPatternModEntities": "Did M2 star M3 and star a Italian spouse of M1",
        "questionTemplate": "Did [entity] [VP_SIMPLE] [entity] and [VP_SIMPLE] a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M1 ) .\nM2 P2 ?x0 .\nM2 P2 M3\n}",
        "recursionDepth": 33,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P27 wd:Q38 .\n?x0 wdt:P26 wd:Q404341 .\nFILTER ( ?x0 != wd:Q404341 ) .\nwd:Q42047 wdt:P161 ?x0 .\nwd:Q42047 wdt:P161 wd:Q20178\n}",
        "questionWithBrackets": "Did [Goodfellas] star [Joe Pesci] and star a Italian spouse of [Grace Hightower]"
    },
    {
        "questionIdx": 22948,
        "questionPatternModEntities": "Did M0 's employee play M1",
        "questionTemplate": "Did [entity] 's [ROLE_SIMPLE] [VP_SIMPLE] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1\n}",
        "recursionDepth": 15,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P453 wd:Q9054901 .\n?x0 wdt:P108 wd:Q207028\n}",
        "questionWithBrackets": "Did [Mariinsky Theatre] 's employee play [Pamina]"
    },
    {
        "questionIdx": 23089,
        "questionPatternModEntities": "Did M2 star M3 and star M0 's Spanish employee",
        "questionTemplate": "Did [entity] [VP_SIMPLE] [entity] and [VP_SIMPLE] [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nM2 P2 ?x0 .\nM2 P2 M3\n}",
        "recursionDepth": 31,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P108 wd:Q7156 .\n?x0 wdt:P27 wd:Q29 .\nwd:Q18703186 wdt:P161 ?x0 .\nwd:Q18703186 wdt:P161 wd:Q615\n}",
        "questionWithBrackets": "Did [Messi] star [Lionel Messi] and star [FC Barcelona] 's Spanish employee"
    },
    {
        "questionIdx": 23127,
        "questionPatternModEntities": "Did M1 and M2 marry a sibling , spouse , and parent of M0",
        "questionTemplate": "Did [entity] and [entity] [VP_SIMPLE] a [ROLE_SIMPLE] , [ROLE_SIMPLE] , and [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M0 .\n?x0 P2 M0 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x0 != M0 ) .\nFILTER ( M1 != ?x0 ) .\nFILTER ( M2 != ?x0 ) .\nM1 P2 ?x0 .\nM2 P2 ?x0\n}",
        "recursionDepth": 30,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q443473 .\n?x0 wdt:P3373 wd:Q443473 .\n?x0 wdt:P26 wd:Q443473 .\nFILTER ( ?x0 != wd:Q443473 ) .\nFILTER ( ?x0 != wd:Q443473 ) .\nFILTER ( wd:Q210535 != ?x0 ) .\nFILTER ( wd:Q256430 != ?x0 ) .\nwd:Q210535 wdt:P26 ?x0 .\nwd:Q256430 wdt:P26 ?x0\n}",
        "questionWithBrackets": "Did [Maathorneferure] and [Nefertarilllala] marry a sibling , spouse , and parent of [Henutmire]"
    },
    {
        "questionIdx": 23209,
        "questionPatternModEntities": "Did M1 , M2 , M3 , M4 , and M5 marry M0 's employee",
        "questionTemplate": "Did [entity] , [entity] , [entity] , [entity] , and [entity] [VP_SIMPLE] [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( M1 != ?x0 ) .\nFILTER ( M2 != ?x0 ) .\nFILTER ( M3 != ?x0 ) .\nFILTER ( M4 != ?x0 ) .\nFILTER ( M5 != ?x0 ) .\nM1 P1 ?x0 .\nM2 P1 ?x0 .\nM3 P1 ?x0 .\nM4 P1 ?x0 .\nM5 P1 ?x0\n}",
        "recursionDepth": 28,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P108 wd:Q1961890 .\nFILTER ( wd:Q40531172 != ?x0 ) .\nFILTER ( wd:Q72617 != ?x0 ) .\nFILTER ( wd:Q21885996 != ?x0 ) .\nFILTER ( wd:Q1618950 != ?x0 ) .\nFILTER ( wd:Q21885991 != ?x0 ) .\nwd:Q40531172 wdt:P26 ?x0 .\nwd:Q72617 wdt:P26 ?x0 .\nwd:Q21885996 wdt:P26 ?x0 .\nwd:Q1618950 wdt:P26 ?x0 .\nwd:Q21885991 wdt:P26 ?x0\n}",
        "questionWithBrackets": "Did [Eva Schubach] , [Kim So-yeon] , [Hiltrud Schwetje] , [Anne Taschenmacher] , and [Doris Schr\u00f6der-K\u00f6pf] marry [N M Rothschild & Sons] 's employee"
    },
    {
        "questionIdx": 23223,
        "questionPatternModEntities": "Did M1 and M2 marry a parent of M0",
        "questionTemplate": "Did [entity] and [entity] [VP_SIMPLE] a [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( M1 != ?x0 ) .\nFILTER ( M2 != ?x0 ) .\nM1 P1 ?x0 .\nM2 P1 ?x0\n}",
        "recursionDepth": 21,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q2770270 .\nFILTER ( wd:Q60618814 != ?x0 ) .\nFILTER ( wd:Q7064842 != ?x0 ) .\nwd:Q60618814 wdt:P26 ?x0 .\nwd:Q7064842 wdt:P26 ?x0\n}",
        "questionWithBrackets": "Did [M\u00f6ge Khatun] and [G\u00fcrbesu] marry a parent of [Alahaibieji]"
    },
    {
        "questionIdx": 23297,
        "questionPatternModEntities": "Did M3 star a employee of M0 , M1 , and M2",
        "questionTemplate": "Did [entity] [VP_SIMPLE] a [ROLE_SIMPLE] of [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\nM3 P1 ?x0\n}",
        "recursionDepth": 24,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P108 wd:Q935818 .\n?x0 wdt:P108 wd:Q187801 .\n?x0 wdt:P108 wd:Q309331 .\nwd:Q640395 wdt:P161 ?x0\n}",
        "questionWithBrackets": "Did [Truth in Numbers? Everything, According to Wikipedia] star a employee of [Ohio State University] , [Bomis] , and [Citizendium]"
    },
    {
        "questionIdx": 23427,
        "questionPatternModEntities": "Did M1 's parent play M0",
        "questionTemplate": "Did [entity] 's [ROLE_SIMPLE] [VP_SIMPLE] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1\n}",
        "recursionDepth": 15,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P453 wd:Q222573 .\n?x0 wdt:P40|wdt:P355 wd:Q779406\n}",
        "questionWithBrackets": "Did [Latinus] 's parent play [femme fatale]"
    },
    {
        "questionIdx": 23434,
        "questionPatternModEntities": "Did M2 marry M3 and marry a actor of M0 and M1",
        "questionTemplate": "Did [entity] [VP_SIMPLE] [entity] and [VP_SIMPLE] a [ROLE_SIMPLE] of [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\nFILTER ( M2 != ?x0 ) .\nFILTER ( M2 != M3 ) .\nM2 P1 ?x0 .\nM2 P1 M3\n}",
        "recursionDepth": 32,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P453 wd:Q50386892 .\n?x0 wdt:P453 wd:Q12742668 .\nFILTER ( wd:Q50896 != ?x0 ) .\nFILTER ( wd:Q50896 != wd:Q242538 ) .\nwd:Q50896 wdt:P26 ?x0 .\nwd:Q50896 wdt:P26 wd:Q242538\n}",
        "questionWithBrackets": "Did [Pippo Baudo] marry [Katia Ricciarelli] and marry a actor of [Mim\u00ec] and [Princess Turandot]"
    },
    {
        "questionIdx": 23435,
        "questionPatternModEntities": "Did M1 , M2 , and M3 marry a spouse and parent of M0",
        "questionTemplate": "Did [entity] , [entity] , and [entity] [VP_SIMPLE] a [ROLE_SIMPLE] and [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M0 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( M1 != ?x0 ) .\nFILTER ( M2 != ?x0 ) .\nFILTER ( M3 != ?x0 ) .\nM1 P1 ?x0 .\nM2 P1 ?x0 .\nM3 P1 ?x0\n}",
        "recursionDepth": 29,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q261213 .\n?x0 wdt:P26 wd:Q261213 .\nFILTER ( ?x0 != wd:Q261213 ) .\nFILTER ( wd:Q210535 != ?x0 ) .\nFILTER ( wd:Q256430 != ?x0 ) .\nFILTER ( wd:Q460946 != ?x0 ) .\nwd:Q210535 wdt:P26 ?x0 .\nwd:Q256430 wdt:P26 ?x0 .\nwd:Q460946 wdt:P26 ?x0\n}",
        "questionWithBrackets": "Did [Nebettawy] , [Maathorneferure] , and [Nefertarilllala] marry a spouse and parent of [Bintanath]"
    },
    {
        "questionIdx": 23571,
        "questionPatternModEntities": "Did M0 's Japanese sibling marry M2 , M3 , M4 , and M5",
        "questionTemplate": "Did [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] [VP_SIMPLE] [entity] , [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P2 M2 .\n?x0 P2 M3 .\n?x0 P2 M4 .\n?x0 P2 M5 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x0 != M2 ) .\nFILTER ( ?x0 != M3 ) .\nFILTER ( ?x0 != M4 ) .\nFILTER ( ?x0 != M5 )\n}",
        "recursionDepth": 30,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P27 wd:Q17 .\n?x0 wdt:P3373 wd:Q11480092 .\n?x0 wdt:P26 wd:Q10564976 .\n?x0 wdt:P26 wd:Q838180 .\n?x0 wdt:P26 wd:Q6470026 .\n?x0 wdt:P26 wd:Q4415657 .\nFILTER ( ?x0 != wd:Q11480092 ) .\nFILTER ( ?x0 != wd:Q10564976 ) .\nFILTER ( ?x0 != wd:Q838180 ) .\nFILTER ( ?x0 != wd:Q6470026 ) .\nFILTER ( ?x0 != wd:Q4415657 )\n}",
        "questionWithBrackets": "Did [Ichiba-hime] 's Japanese sibling marry [Tsukiyama-dono] , [Yegonvie] , [Asahihime] , and [Chaa no Tsubone]"
    },
    {
        "questionIdx": 23669,
        "questionPatternModEntities": "Did M0 's Dutch employee marry M2 , M3 , and M4",
        "questionTemplate": "Did [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] [VP_SIMPLE] [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P2 M2 .\n?x0 P2 M3 .\n?x0 P2 M4 .\nFILTER ( ?x0 != M2 ) .\nFILTER ( ?x0 != M3 ) .\nFILTER ( ?x0 != M4 )\n}",
        "recursionDepth": 27,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P108 wd:Q2269524 .\n?x0 wdt:P27 wd:Q29999 .\n?x0 wdt:P26 wd:Q20740265 .\n?x0 wdt:P26 wd:Q20740272 .\n?x0 wdt:P26 wd:Q469283 .\nFILTER ( ?x0 != wd:Q20740265 ) .\nFILTER ( ?x0 != wd:Q20740272 ) .\nFILTER ( ?x0 != wd:Q469283 )\n}",
        "questionWithBrackets": "Did [L'Ind\u00e9pendant] 's Dutch employee marry [Connie Palmen] , [Anna Los] , and [Olla van Maasdijk]"
    },
    {
        "questionIdx": 23686,
        "questionPatternModEntities": "Did M0 marry M1 and marry M2",
        "questionTemplate": "Did [entity] [VP_SIMPLE] [entity] and [VP_SIMPLE] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nFILTER ( M0 != M1 ) .\nFILTER ( M0 != M2 ) .\nM0 P0 M1 .\nM0 P0 M2\n}",
        "recursionDepth": 22,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nFILTER ( wd:Q44221 != wd:Q1744 ) .\nFILTER ( wd:Q44221 != wd:Q50082651 ) .\nwd:Q44221 wdt:P26 wd:Q1744 .\nwd:Q44221 wdt:P26 wd:Q50082651\n}",
        "questionWithBrackets": "Did [Sean Penn] marry [Leila George] and marry [Madonna]"
    },
    {
        "questionIdx": 23689,
        "questionPatternModEntities": "Did M1 , M2 , M3 , and M4 marry M0 's sibling",
        "questionTemplate": "Did [entity] , [entity] , [entity] , and [entity] [VP_SIMPLE] [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( M1 != ?x0 ) .\nFILTER ( M2 != ?x0 ) .\nFILTER ( M3 != ?x0 ) .\nFILTER ( M4 != ?x0 ) .\nM1 P1 ?x0 .\nM2 P1 ?x0 .\nM3 P1 ?x0 .\nM4 P1 ?x0\n}",
        "recursionDepth": 25,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P3373 wd:Q23 .\nFILTER ( ?x0 != wd:Q23 ) .\nFILTER ( wd:Q75764491 != ?x0 ) .\nFILTER ( wd:Q105961124 != ?x0 ) .\nFILTER ( wd:Q105961136 != ?x0 ) .\nFILTER ( wd:Q105961247 != ?x0 ) .\nwd:Q75764491 wdt:P26 ?x0 .\nwd:Q105961124 wdt:P26 ?x0 .\nwd:Q105961136 wdt:P26 ?x0 .\nwd:Q105961247 wdt:P26 ?x0\n}",
        "questionWithBrackets": "Did [Lucy Chapman] , [Jane Champe] , [Mildred Thornton] , and [Susannah Perrin] marry [George Washington] 's sibling"
    },
    {
        "questionIdx": 23697,
        "questionPatternModEntities": "Did M1 , M2 , and M3 marry a sibling of M0",
        "questionTemplate": "Did [entity] , [entity] , and [entity] [VP_SIMPLE] a [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( M1 != ?x0 ) .\nFILTER ( M2 != ?x0 ) .\nFILTER ( M3 != ?x0 ) .\nM1 P1 ?x0 .\nM2 P1 ?x0 .\nM3 P1 ?x0\n}",
        "recursionDepth": 24,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P3373 wd:Q517 .\nFILTER ( ?x0 != wd:Q517 ) .\nFILTER ( wd:Q5565556 != ?x0 ) .\nFILTER ( wd:Q236184 != ?x0 ) .\nFILTER ( wd:Q268344 != ?x0 ) .\nwd:Q5565556 wdt:P26 ?x0 .\nwd:Q236184 wdt:P26 ?x0 .\nwd:Q268344 wdt:P26 ?x0\n}",
        "questionWithBrackets": "Did [Giustina Pecori-Su\u00e1rez] , [Catharina of W\u00fcrttemberg] , and [Elizabeth Patterson Bonaparte] marry a sibling of [Napoleon]"
    },
    {
        "questionIdx": 24200,
        "questionPatternModEntities": "Did M2 marry a American spouse of M1",
        "questionTemplate": "Did [entity] [VP_SIMPLE] a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M1 ) .\nFILTER ( M2 != ?x0 ) .\nM2 P1 ?x0\n}",
        "recursionDepth": 22,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P27 wd:Q30 .\n?x0 wdt:P26 wd:Q4445403 .\nFILTER ( ?x0 != wd:Q4445403 ) .\nFILTER ( wd:Q99029959 != ?x0 ) .\nwd:Q99029959 wdt:P26 ?x0\n}",
        "questionWithBrackets": "Did [Yekaterina Nosenko] marry a American spouse of [Vera de Bosset]"
    },
    {
        "questionIdx": 24241,
        "questionPatternModEntities": "Did M2 marry M3 and marry a Dutch employee of M0",
        "questionTemplate": "Did [entity] [VP_SIMPLE] [entity] and [VP_SIMPLE] a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( M2 != ?x0 ) .\nFILTER ( M2 != M3 ) .\nM2 P2 ?x0 .\nM2 P2 M3\n}",
        "recursionDepth": 33,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P108 wd:Q156152 .\n?x0 wdt:P27 wd:Q29999 .\nFILTER ( wd:Q154946 != ?x0 ) .\nFILTER ( wd:Q154946 != wd:Q57304 ) .\nwd:Q154946 wdt:P26 ?x0 .\nwd:Q154946 wdt:P26 wd:Q57304\n}",
        "questionWithBrackets": "Did [Juliana of the Netherlands] marry [Prince Bernhard of the Netherlands] and marry a Dutch employee of [IG Farben]"
    },
    {
        "questionIdx": 24351,
        "questionPatternModEntities": "Did M1 marry M2 , marry a spouse of M0 , and marry M3",
        "questionTemplate": "Did [entity] [VP_SIMPLE] [entity] , [VP_SIMPLE] a [ROLE_SIMPLE] of [entity] , and [VP_SIMPLE] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( M1 != ?x0 ) .\nFILTER ( M1 != M2 ) .\nFILTER ( M1 != M3 ) .\nM1 P0 ?x0 .\nM1 P0 M2 .\nM1 P0 M3\n}",
        "recursionDepth": 37,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P26 wd:Q1048 .\nFILTER ( ?x0 != wd:Q1048 ) .\nFILTER ( wd:Q521446 != ?x0 ) .\nFILTER ( wd:Q521446 != wd:Q3618991 ) .\nFILTER ( wd:Q521446 != wd:Q234825 ) .\nwd:Q521446 wdt:P26 ?x0 .\nwd:Q521446 wdt:P26 wd:Q3618991 .\nwd:Q521446 wdt:P26 wd:Q234825\n}",
        "questionWithBrackets": "Did [Publius Vatinius] marry [Pompeia] , marry a spouse of [Julius Caesar] , and marry [Antonia]"
    },
    {
        "questionIdx": 24352,
        "questionPatternModEntities": "Did M1 marry a sibling and spouse of M0",
        "questionTemplate": "Did [entity] [VP_SIMPLE] a [ROLE_SIMPLE] and [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M0 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x0 != M0 ) .\nFILTER ( M1 != ?x0 ) .\nM1 P1 ?x0\n}",
        "recursionDepth": 22,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P3373 wd:Q3356 .\n?x0 wdt:P26 wd:Q3356 .\nFILTER ( ?x0 != wd:Q3356 ) .\nFILTER ( ?x0 != wd:Q3356 ) .\nFILTER ( wd:Q2045778 != ?x0 ) .\nwd:Q2045778 wdt:P26 ?x0\n}",
        "questionWithBrackets": "Did [Antiochus] marry a sibling and spouse of [Antiochus IV Epiphanes]"
    },
    {
        "questionIdx": 25693,
        "questionPatternModEntities": "Did M2 , M3 , and M4 marry M1 's Chinese spouse 's spouse",
        "questionTemplate": "Did [entity] , [entity] , and [entity] [VP_SIMPLE] [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x1 P0 M1 .\n?x1 P1 M0 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x1 != M1 ) .\nFILTER ( M2 != ?x0 ) .\nFILTER ( M3 != ?x0 ) .\nFILTER ( M4 != ?x0 ) .\nM2 P0 ?x0 .\nM3 P0 ?x0 .\nM4 P0 ?x0\n}",
        "recursionDepth": 31,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P26 ?x1 .\n?x1 wdt:P27 wd:Q148 .\n?x1 wdt:P26 wd:Q8259567 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x1 != wd:Q8259567 ) .\nFILTER ( wd:Q10895264 != ?x0 ) .\nFILTER ( wd:Q197431 != ?x0 ) .\nFILTER ( wd:Q67273081 != ?x0 ) .\nwd:Q10895264 wdt:P26 ?x0 .\nwd:Q197431 wdt:P26 ?x0 .\nwd:Q67273081 wdt:P26 ?x0\n}",
        "questionWithBrackets": "Did [Zhao Dan] , [Cheng Shuyao] , and [Feng Yidai] marry [Huang Zongying] 's Chinese spouse 's spouse"
    },
    {
        "questionIdx": 25714,
        "questionPatternModEntities": "Did M2 and M3 star a Canadian sibling of M0",
        "questionTemplate": "Did [entity] and [entity] [VP_SIMPLE] a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M0 ) .\nM2 P2 ?x0 .\nM3 P2 ?x0\n}",
        "recursionDepth": 26,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P27 wd:Q16 .\n?x0 wdt:P3373 wd:Q929579 .\nFILTER ( ?x0 != wd:Q929579 ) .\nwd:Q2413683 wdt:P161 ?x0 .\nwd:Q24620 wdt:P161 ?x0\n}",
        "questionWithBrackets": "Did [Spanish Movie] and [Due South] star a Canadian sibling of [Erik Nielsen]"
    },
    {
        "questionIdx": 25814,
        "questionPatternModEntities": "Did a British German employee of M0 marry M3",
        "questionTemplate": "Did a [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] [VP_SIMPLE] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\n?x0 P2 M3 .\nFILTER ( ?x0 != M3 )\n}",
        "recursionDepth": 27,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P108 wd:Q210175 .\n?x0 wdt:P27 wd:Q183 .\n?x0 wdt:P27 wd:Q145 .\n?x0 wdt:P26 wd:Q3334825 .\nFILTER ( ?x0 != wd:Q3334825 )\n}",
        "questionWithBrackets": "Did a British German employee of [MI5] marry [Nadia Benois]"
    },
    {
        "questionIdx": 26892,
        "questionPatternModEntities": "Did a Chinese sibling of M0 marry M2",
        "questionTemplate": "Did a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] [VP_SIMPLE] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P2 M2 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x0 != M2 )\n}",
        "recursionDepth": 22,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P27 wd:Q148 .\n?x0 wdt:P3373 wd:Q9064696 .\n?x0 wdt:P26 wd:Q16988 .\nFILTER ( ?x0 != wd:Q16988 ) .\nFILTER ( ?x0 != wd:Q9064696 )\n}",
        "questionWithBrackets": "Did a Chinese sibling of [Wang Guangying] marry [Liu Shaoqi]"
    },
    {
        "questionIdx": 27182,
        "questionPatternModEntities": "Did a Dutch spouse of M2 play M1",
        "questionTemplate": "Did a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] [VP_SIMPLE] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P2 M2 .\nFILTER ( ?x0 != M2 )\n}",
        "recursionDepth": 22,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P453 wd:Q47490616 .\n?x0 wdt:P27 wd:Q29999 .\n?x0 wdt:P26 wd:Q47490609 .\nFILTER ( ?x0 != wd:Q47490609 )\n}",
        "questionWithBrackets": "Did a Dutch spouse of [Aike Dirkzwager] play [No label defined]"
    },
    {
        "questionIdx": 27373,
        "questionPatternModEntities": "Did a French employee of M0 marry M2 and M3 , marry M4 and M5 , and marry M6",
        "questionTemplate": "Did a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] [VP_SIMPLE] [entity] and [entity] , [VP_SIMPLE] [entity] and [entity] , and [VP_SIMPLE] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P2 M2 .\n?x0 P2 M3 .\n?x0 P2 M4 .\n?x0 P2 M5 .\n?x0 P2 M6 .\nFILTER ( ?x0 != M2 ) .\nFILTER ( ?x0 != M3 ) .\nFILTER ( ?x0 != M4 ) .\nFILTER ( ?x0 != M5 ) .\nFILTER ( ?x0 != M6 )\n}",
        "recursionDepth": 50,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P108 wd:Q678095 .\n?x0 wdt:P27 wd:Q142 .\n?x0 wdt:P26 wd:Q239845 .\n?x0 wdt:P26 wd:Q75360656 .\n?x0 wdt:P26 wd:Q36268 .\n?x0 wdt:P26 wd:Q2534120 .\n?x0 wdt:P26 wd:Q41142 .\nFILTER ( ?x0 != wd:Q239845 ) .\nFILTER ( ?x0 != wd:Q75360656 ) .\nFILTER ( ?x0 != wd:Q36268 ) .\nFILTER ( ?x0 != wd:Q2534120 ) .\nFILTER ( ?x0 != wd:Q41142 )\n}",
        "questionWithBrackets": "Did a French employee of [Paris Match] marry [Catherine Marie Helene Schneider] and [Brigitte Bardot] , marry [Jane Fonda] and [Annette Vadim] , and marry [Marie-Christine Barrault]"
    },
    {
        "questionIdx": 27583,
        "questionPatternModEntities": "Did a French spouse of M2 marry M1",
        "questionTemplate": "Did a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] [VP_SIMPLE] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\nFILTER ( ?x0 != M1 ) .\nFILTER ( ?x0 != M2 )\n}",
        "recursionDepth": 22,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P27 wd:Q142 .\n?x0 wdt:P26 wd:Q3094175 .\n?x0 wdt:P26 wd:Q3176121 .\nFILTER ( ?x0 != wd:Q3094175 ) .\nFILTER ( ?x0 != wd:Q3176121 )\n}",
        "questionWithBrackets": "Did a French spouse of [Jeanne Mauchain] marry [Gaby Basset]"
    },
    {
        "questionIdx": 27586,
        "questionPatternModEntities": "Did a French spouse of M4 marry M1 , M2 , and M3",
        "questionTemplate": "Did a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] [VP_SIMPLE] [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\n?x0 P1 M3 .\n?x0 P1 M4 .\nFILTER ( ?x0 != M1 ) .\nFILTER ( ?x0 != M2 ) .\nFILTER ( ?x0 != M3 ) .\nFILTER ( ?x0 != M4 )\n}",
        "recursionDepth": 29,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P27 wd:Q142 .\n?x0 wdt:P26 wd:Q2877830 .\n?x0 wdt:P26 wd:Q2824208 .\n?x0 wdt:P26 wd:Q240885 .\n?x0 wdt:P26 wd:Q3216058 .\nFILTER ( ?x0 != wd:Q2877830 ) .\nFILTER ( ?x0 != wd:Q2824208 ) .\nFILTER ( ?x0 != wd:Q240885 ) .\nFILTER ( ?x0 != wd:Q3216058 )\n}",
        "questionWithBrackets": "Did a French spouse of [Sylvie Vartan] marry [Adeline Blondieau] , [Laeticia Hallyday] , and [Babeth \u00c9tienne]"
    },
    {
        "questionIdx": 27591,
        "questionPatternModEntities": "Did a French spouse of M3 marry M1 and marry M2",
        "questionTemplate": "Did a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] [VP_SIMPLE] [entity] and [VP_SIMPLE] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\n?x0 P1 M3 .\nFILTER ( ?x0 != M1 ) .\nFILTER ( ?x0 != M2 ) .\nFILTER ( ?x0 != M3 )\n}",
        "recursionDepth": 33,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P27 wd:Q142 .\n?x0 wdt:P26 wd:Q3094175 .\n?x0 wdt:P26 wd:Q3176121 .\n?x0 wdt:P26 wd:Q26297738 .\nFILTER ( ?x0 != wd:Q3094175 ) .\nFILTER ( ?x0 != wd:Q3176121 ) .\nFILTER ( ?x0 != wd:Q26297738 )\n}",
        "questionWithBrackets": "Did a French spouse of [Jeanne Mauchain] marry [Christiane Fournier] and marry [Gaby Basset]"
    },
    {
        "questionIdx": 27806,
        "questionPatternModEntities": "Did a German sibling of a spouse of M5 marry M1 and marry M2 , M3 , and M4",
        "questionTemplate": "Did a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of a [ROLE_SIMPLE] of [entity] [VP_SIMPLE] [entity] and [VP_SIMPLE] [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x0 P1 M0 .\n?x0 P2 M1 .\n?x0 P2 M2 .\n?x0 P2 M3 .\n?x0 P2 M4 .\n?x1 P2 M5 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x0 != M1 ) .\nFILTER ( ?x0 != M2 ) .\nFILTER ( ?x0 != M3 ) .\nFILTER ( ?x0 != M4 ) .\nFILTER ( ?x1 != M5 )\n}",
        "recursionDepth": 46,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P27 wd:Q183 .\n?x0 wdt:P3373 ?x1 .\n?x0 wdt:P26 wd:Q528613 .\n?x0 wdt:P26 wd:Q6334303 .\n?x0 wdt:P26 wd:Q18211123 .\n?x0 wdt:P26 wd:Q91737 .\n?x1 wdt:P26 wd:Q61093 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x0 != wd:Q528613 ) .\nFILTER ( ?x0 != wd:Q6334303 ) .\nFILTER ( ?x0 != wd:Q18211123 ) .\nFILTER ( ?x0 != wd:Q91737 ) .\nFILTER ( ?x1 != wd:Q61093 )\n}",
        "questionWithBrackets": "Did a German sibling of a spouse of [John George IV, Elector of Saxony] marry [Marie Christine Felizitas of Leiningen-Dagsburg-Falkenburg-Heidesheim] and marry [Christine Juliane of Baden-Durlach] , [Amalie of Nassau-Dietz] , and [Magdalene Sibylle of Saxe-Weissenfels]"
    },
    {
        "questionIdx": 27984,
        "questionPatternModEntities": "Did a Japanese employee of M0 and M1 marry M3",
        "questionTemplate": "Did a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] and [entity] [VP_SIMPLE] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P1 M2 .\n?x0 P2 M3 .\nFILTER ( ?x0 != M3 )\n}",
        "recursionDepth": 26,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P108 wd:Q182950 .\n?x0 wdt:P108 wd:Q730179 .\n?x0 wdt:P27 wd:Q17 .\n?x0 wdt:P26 wd:Q2828975 .\nFILTER ( ?x0 != wd:Q2828975 )\n}",
        "questionWithBrackets": "Did a Japanese employee of [Toei Animation] and [Studio Ghibli] marry [Akemi \u014cta]"
    },
    {
        "questionIdx": 28913,
        "questionPatternModEntities": "Did a Spanish sibling of M0 marry M2 's sibling",
        "questionTemplate": "Did a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] [VP_SIMPLE] [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P2 ?x1 .\n?x1 P0 M2 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x1 != M2 )\n}",
        "recursionDepth": 26,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P27 wd:Q29 .\n?x0 wdt:P3373 wd:Q62994 .\n?x0 wdt:P26 ?x1 .\n?x1 wdt:P3373 wd:Q6004857 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x0 != wd:Q62994 ) .\nFILTER ( ?x1 != wd:Q6004857 )\n}",
        "questionWithBrackets": "Did a Spanish sibling of [Princess Isabella of Bavaria] marry [Infanta Mar\u00eda de la Concepci\u00f3n of Spain] 's sibling"
    },
    {
        "questionIdx": 29071,
        "questionPatternModEntities": "Did a Swedish employee of M0 marry M2",
        "questionTemplate": "Did a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] [VP_SIMPLE] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P2 M2 .\nFILTER ( ?x0 != M2 )\n}",
        "recursionDepth": 22,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P108 wd:Q1065 .\n?x0 wdt:P27 wd:Q34 .\n?x0 wdt:P26 wd:Q441551 .\nFILTER ( ?x0 != wd:Q441551 )\n}",
        "questionWithBrackets": "Did a Swedish employee of [United Nations] marry [Anna Maria Corazza Bildt]"
    },
    {
        "questionIdx": 29729,
        "questionPatternModEntities": "Did a child of M0 marry M2 's spouse and marry M1",
        "questionTemplate": "Did a [ROLE_SIMPLE] of [entity] [VP_SIMPLE] [entity] 's [ROLE_SIMPLE] and [VP_SIMPLE] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 ?x1 .\n?x0 P1 M1 .\n?x1 P1 M2 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x0 != M1 ) .\nFILTER ( ?x1 != M2 )\n}",
        "recursionDepth": 32,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P749 wd:Q1089760 .\n?x0 wdt:P26 ?x1 .\n?x0 wdt:P26 wd:Q76375112 .\n?x1 wdt:P26 wd:Q1702147 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x0 != wd:Q76375112 ) .\nFILTER ( ?x1 != wd:Q1702147 )\n}",
        "questionWithBrackets": "Did a child of [Church Mission Society] marry [Samuel Marsden] 's spouse and marry [Eliazbeth Fristan]"
    },
    {
        "questionIdx": 29741,
        "questionPatternModEntities": "Did a child of M0 marry M1",
        "questionTemplate": "Did a [ROLE_SIMPLE] of [entity] [VP_SIMPLE] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M1 )\n}",
        "recursionDepth": 17,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P749 wd:Q1089760 .\n?x0 wdt:P26 wd:Q76375112 .\nFILTER ( ?x0 != wd:Q76375112 )\n}",
        "questionWithBrackets": "Did a child of [Church Mission Society] marry [Eliazbeth Fristan]"
    },
    {
        "questionIdx": 32147,
        "questionPatternModEntities": "Did a female actor of M0 marry M2",
        "questionTemplate": "Did a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] [VP_SIMPLE] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P2 M2 .\nFILTER ( ?x0 != M2 )\n}",
        "recursionDepth": 22,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P453 wd:Q222573 .\n?x0 wdt:P21 wd:Q6581072 .\n?x0 wdt:P26 wd:Q192482 .\nFILTER ( ?x0 != wd:Q192482 )\n}",
        "questionWithBrackets": "Did a female actor of [femme fatale] marry [Telemachus]"
    },
    {
        "questionIdx": 32148,
        "questionPatternModEntities": "Did a female actor of M0 marry M2 and marry M3",
        "questionTemplate": "Did a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] [VP_SIMPLE] [entity] and [VP_SIMPLE] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P2 M2 .\n?x0 P2 M3 .\nFILTER ( ?x0 != M2 ) .\nFILTER ( ?x0 != M3 )\n}",
        "recursionDepth": 33,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P453 wd:Q12742668 .\n?x0 wdt:P21 wd:Q6581072 .\n?x0 wdt:P26 wd:Q50896 .\n?x0 wdt:P26 wd:Q485165 .\nFILTER ( ?x0 != wd:Q50896 ) .\nFILTER ( ?x0 != wd:Q485165 )\n}",
        "questionWithBrackets": "Did a female actor of [Princess Turandot] marry [Pippo Baudo] and marry [Jos\u00e9 Carreras]"
    },
    {
        "questionIdx": 32149,
        "questionPatternModEntities": "Did a female actor of M0 play M1",
        "questionTemplate": "Did a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] [VP_SIMPLE] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P1 M2\n}",
        "recursionDepth": 22,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P453 wd:Q207990 .\n?x0 wdt:P453 wd:Q50386864 .\n?x0 wdt:P21 wd:Q6581072\n}",
        "questionWithBrackets": "Did a female actor of [Turandot] play [Cio-Cio-san (Madama Butterfly)]"
    },
    {
        "questionIdx": 32152,
        "questionPatternModEntities": "Did a female actor of M0 play M1 and play M2",
        "questionTemplate": "Did a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] [VP_SIMPLE] [entity] and [VP_SIMPLE] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P1 M3\n}",
        "recursionDepth": 33,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P453 wd:Q12742668 .\n?x0 wdt:P453 wd:Q50386809 .\n?x0 wdt:P453 wd:Q50926083 .\n?x0 wdt:P21 wd:Q6581072\n}",
        "questionWithBrackets": "Did a female actor of [Lucia Ashton] play [Princess Turandot] and play [Carmen]"
    },
    {
        "questionIdx": 32156,
        "questionPatternModEntities": "Did a female actor play M0 and M1",
        "questionTemplate": "Did a [ADJECTIVE_SIMPLE] [NP_SIMPLE] [VP_SIMPLE] [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P1 M2\n}",
        "recursionDepth": 23,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P453 wd:Q207990 .\n?x0 wdt:P453 wd:Q50386864 .\n?x0 wdt:P21 wd:Q6581072\n}",
        "questionWithBrackets": "Did a female actor play [Cio-Cio-san (Madama Butterfly)] and [Turandot]"
    },
    {
        "questionIdx": 32157,
        "questionPatternModEntities": "Did a female actor play M0 , play M1 , and play M2",
        "questionTemplate": "Did a [ADJECTIVE_SIMPLE] [NP_SIMPLE] [VP_SIMPLE] [entity] , [VP_SIMPLE] [entity] , and [VP_SIMPLE] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P1 M3\n}",
        "recursionDepth": 39,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P453 wd:Q12742668 .\n?x0 wdt:P453 wd:Q50386809 .\n?x0 wdt:P453 wd:Q50926083 .\n?x0 wdt:P21 wd:Q6581072\n}",
        "questionWithBrackets": "Did a female actor play [Princess Turandot] , play [Carmen] , and play [Lucia Ashton]"
    },
    {
        "questionIdx": 32567,
        "questionPatternModEntities": "Did a female sibling of M0 marry M2 and marry M3",
        "questionTemplate": "Did a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] [VP_SIMPLE] [entity] and [VP_SIMPLE] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P2 M2 .\n?x0 P2 M3 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x0 != M2 ) .\nFILTER ( ?x0 != M3 )\n}",
        "recursionDepth": 33,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P21 wd:Q6581072 .\n?x0 wdt:P3373 wd:Q635 .\n?x0 wdt:P26 wd:Q40060 .\n?x0 wdt:P26 wd:Q632595 .\nFILTER ( ?x0 != wd:Q40060 ) .\nFILTER ( ?x0 != wd:Q635 ) .\nFILTER ( ?x0 != wd:Q632595 )\n}",
        "questionWithBrackets": "Did a female sibling of [Cleopatra] marry [Archelaus] and marry [Seleucus VII Kybiosaktes]"
    },
    {
        "questionIdx": 32571,
        "questionPatternModEntities": "Did a female sibling of M0 play M1",
        "questionTemplate": "Did a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] [VP_SIMPLE] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P2 M2 .\nFILTER ( ?x0 != M0 )\n}",
        "recursionDepth": 22,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P453 wd:Q222573 .\n?x0 wdt:P21 wd:Q6581072 .\n?x0 wdt:P3373 wd:Q203236 .\nFILTER ( ?x0 != wd:Q203236 )\n}",
        "questionWithBrackets": "Did a female sibling of [Pasipha\u00eb] play [femme fatale]"
    },
    {
        "questionIdx": 32572,
        "questionPatternModEntities": "Did a female sibling of M0 marry M2 and M3",
        "questionTemplate": "Did a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] [VP_SIMPLE] [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P2 M2 .\n?x0 P2 M3 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x0 != M2 ) .\nFILTER ( ?x0 != M3 )\n}",
        "recursionDepth": 26,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P21 wd:Q6581072 .\n?x0 wdt:P3373 wd:Q1048 .\n?x0 wdt:P26 wd:Q93714494 .\n?x0 wdt:P26 wd:Q93953755 .\nFILTER ( ?x0 != wd:Q1048 ) .\nFILTER ( ?x0 != wd:Q93714494 ) .\nFILTER ( ?x0 != wd:Q93953755 )\n}",
        "questionWithBrackets": "Did a female sibling of [Julius Caesar] marry [Pedius] and [Pinarius]"
    },
    {
        "questionIdx": 32579,
        "questionPatternModEntities": "Did a female spouse of M3 marry M1 and M2",
        "questionTemplate": "Did a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] [VP_SIMPLE] [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\n?x0 P1 M3 .\nFILTER ( ?x0 != M1 ) .\nFILTER ( ?x0 != M2 ) .\nFILTER ( ?x0 != M3 )\n}",
        "recursionDepth": 26,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P21 wd:Q6581072 .\n?x0 wdt:P26 wd:Q1405 .\n?x0 wdt:P26 wd:Q721788 .\n?x0 wdt:P26 wd:Q1269233 .\nFILTER ( ?x0 != wd:Q1405 ) .\nFILTER ( ?x0 != wd:Q721788 ) .\nFILTER ( ?x0 != wd:Q1269233 )\n}",
        "questionWithBrackets": "Did a female spouse of [Gnaeus Cornelius Lentulus Marcellinus] marry [Augustus] and [Cornelius Scipio Salvito]"
    },
    {
        "questionIdx": 32582,
        "questionPatternModEntities": "Did a female spouse of M2 marry M1",
        "questionTemplate": "Did a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] [VP_SIMPLE] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\nFILTER ( ?x0 != M1 ) .\nFILTER ( ?x0 != M2 )\n}",
        "recursionDepth": 22,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P21 wd:Q6581072 .\n?x0 wdt:P26 wd:Q254 .\n?x0 wdt:P26 wd:Q955658 .\nFILTER ( ?x0 != wd:Q254 ) .\nFILTER ( ?x0 != wd:Q955658 )\n}",
        "questionWithBrackets": "Did a female spouse of [Wolfgang Amadeus Mozart] marry [Georg Nikolaus von Nissen]"
    },
    {
        "questionIdx": 32585,
        "questionPatternModEntities": "Did a female spouse of M3 play M0 and play M1",
        "questionTemplate": "Did a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] [VP_SIMPLE] [entity] and [VP_SIMPLE] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P1 M2 .\n?x0 P2 M3 .\nFILTER ( ?x0 != M3 )\n}",
        "recursionDepth": 33,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P453 wd:Q12742668 .\n?x0 wdt:P453 wd:Q50386809 .\n?x0 wdt:P21 wd:Q6581072 .\n?x0 wdt:P26 wd:Q182360 .\nFILTER ( ?x0 != wd:Q182360 )\n}",
        "questionWithBrackets": "Did a female spouse of [Giovanni Battista Meneghini] play [Carmen] and play [Princess Turandot]"
    },
    {
        "questionIdx": 32592,
        "questionPatternModEntities": "Did a female spouse of M3 play M0 and M1",
        "questionTemplate": "Did a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] [VP_SIMPLE] [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P1 M2 .\n?x0 P2 M3 .\nFILTER ( ?x0 != M3 )\n}",
        "recursionDepth": 26,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P453 wd:Q64005751 .\n?x0 wdt:P453 wd:Q50386892 .\n?x0 wdt:P21 wd:Q6581072 .\n?x0 wdt:P26 wd:Q50896 .\nFILTER ( ?x0 != wd:Q50896 )\n}",
        "questionWithBrackets": "Did a female spouse of [Pippo Baudo] play [Floria Tosca] and [Mim\u00ec]"
    },
    {
        "questionIdx": 36883,
        "questionPatternModEntities": "Did a male actor of M0 marry M2",
        "questionTemplate": "Did a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] [VP_SIMPLE] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P2 M2 .\nFILTER ( ?x0 != M2 )\n}",
        "recursionDepth": 22,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P453 wd:Q50807639 .\n?x0 wdt:P21 wd:Q6581097 .\n?x0 wdt:P26 wd:Q1560129 .\nFILTER ( ?x0 != wd:Q1560129 )\n}",
        "questionWithBrackets": "Did a male actor of [Lohengrin] marry [Margarete Joswig]"
    },
    {
        "questionIdx": 37340,
        "questionPatternModEntities": "Did a male sibling of M2 's sibling marry M1",
        "questionTemplate": "Did a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] 's [ROLE_SIMPLE] [VP_SIMPLE] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x0 P1 M0 .\n?x0 P2 M1 .\n?x1 P0 M2 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x0 != M1 ) .\nFILTER ( ?x1 != M2 )\n}",
        "recursionDepth": 26,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P21 wd:Q6581097 .\n?x0 wdt:P3373 ?x1 .\n?x0 wdt:P26 wd:Q635 .\n?x1 wdt:P3373 wd:Q39938 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x0 != wd:Q635 ) .\nFILTER ( ?x1 != wd:Q39938 )\n}",
        "questionWithBrackets": "Did a male sibling of [Ptolemy XIII Theos Philopator] 's sibling marry [Cleopatra]"
    },
    {
        "questionIdx": 37358,
        "questionPatternModEntities": "Did a male spouse of M2 play M0",
        "questionTemplate": "Did a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] [VP_SIMPLE] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P2 M2 .\nFILTER ( ?x0 != M2 )\n}",
        "recursionDepth": 22,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P453 wd:Q50807639 .\n?x0 wdt:P21 wd:Q6581097 .\n?x0 wdt:P26 wd:Q1560129 .\nFILTER ( ?x0 != wd:Q1560129 )\n}",
        "questionWithBrackets": "Did a male spouse of [Margarete Joswig] play [Lohengrin]"
    },
    {
        "questionIdx": 37430,
        "questionPatternModEntities": "Did a parent and sibling of M1 's spouse marry M0",
        "questionTemplate": "Did a [ROLE_SIMPLE] and [ROLE_SIMPLE] of [entity] 's [ROLE_SIMPLE] [VP_SIMPLE] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 M0 .\n?x1 P2 M1 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x1 != M1 )\n}",
        "recursionDepth": 26,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 ?x1 .\n?x0 wdt:P3373 ?x1 .\n?x0 wdt:P26 wd:Q39991 .\n?x1 wdt:P26 wd:Q632595 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x0 != wd:Q39991 ) .\nFILTER ( ?x1 != wd:Q632595 )\n}",
        "questionWithBrackets": "Did a parent and sibling of [Archelaus] 's spouse marry [Ptolemy XII Auletes]"
    },
    {
        "questionIdx": 37437,
        "questionPatternModEntities": "Did a parent and sibling of M0 marry M1 and marry M2 , M3 , and M4",
        "questionTemplate": "Did a [ROLE_SIMPLE] and [ROLE_SIMPLE] of [entity] [VP_SIMPLE] [entity] and [VP_SIMPLE] [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M0 .\n?x0 P2 M1 .\n?x0 P2 M2 .\n?x0 P2 M3 .\n?x0 P2 M4 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x0 != M1 ) .\nFILTER ( ?x0 != M2 ) .\nFILTER ( ?x0 != M3 ) .\nFILTER ( ?x0 != M4 )\n}",
        "recursionDepth": 40,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q187602 .\n?x0 wdt:P3373 wd:Q187602 .\n?x0 wdt:P26 wd:Q2293877 .\n?x0 wdt:P26 wd:Q106076620 .\n?x0 wdt:P26 wd:Q1378483 .\n?x0 wdt:P26 wd:Q748574 .\nFILTER ( ?x0 != wd:Q187602 ) .\nFILTER ( ?x0 != wd:Q2293877 ) .\nFILTER ( ?x0 != wd:Q106076620 ) .\nFILTER ( ?x0 != wd:Q1378483 ) .\nFILTER ( ?x0 != wd:Q748574 )\n}",
        "questionWithBrackets": "Did a parent and sibling of [Circe] marry [Asterodeia] and marry [Eurylyte] , [N\u00e9\u00e8re (N\u00e9r\u00e9ide) N\u00e9\u00e8re (N\u00e9r\u00e9ide) inlanguage:fr] , and [Eidyia]"
    },
    {
        "questionIdx": 37441,
        "questionPatternModEntities": "Did a parent and spouse of M0 marry M1 and marry M2 and M3",
        "questionTemplate": "Did a [ROLE_SIMPLE] and [ROLE_SIMPLE] of [entity] [VP_SIMPLE] [entity] and [VP_SIMPLE] [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\n?x0 P1 M3 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x0 != M1 ) .\nFILTER ( ?x0 != M2 ) .\nFILTER ( ?x0 != M3 )\n}",
        "recursionDepth": 37,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q469955 .\n?x0 wdt:P26 wd:Q152230 .\n?x0 wdt:P26 wd:Q262428 .\n?x0 wdt:P26 wd:Q270864 .\n?x0 wdt:P26 wd:Q469955 .\nFILTER ( ?x0 != wd:Q152230 ) .\nFILTER ( ?x0 != wd:Q262428 ) .\nFILTER ( ?x0 != wd:Q270864 ) .\nFILTER ( ?x0 != wd:Q469955 )\n}",
        "questionWithBrackets": "Did a parent and spouse of [Iset] marry [Tiye] and marry [Sitamun] and [Tadukhipa]"
    },
    {
        "questionIdx": 37498,
        "questionPatternModEntities": "Did a parent of M0 marry M1",
        "questionTemplate": "Did a [ROLE_SIMPLE] of [entity] [VP_SIMPLE] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M1 )\n}",
        "recursionDepth": 17,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q89422 .\n?x0 wdt:P26 wd:Q517 .\nFILTER ( ?x0 != wd:Q517 )\n}",
        "questionWithBrackets": "Did a parent of [William Albert, 1st Prince of Montenuovo] marry [Napoleon]"
    },
    {
        "questionIdx": 37516,
        "questionPatternModEntities": "Did a parent of M1 play M0",
        "questionTemplate": "Did a [ROLE_SIMPLE] of [entity] [VP_SIMPLE] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1\n}",
        "recursionDepth": 17,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P453 wd:Q222573 .\n?x0 wdt:P40|wdt:P355 wd:Q779406\n}",
        "questionWithBrackets": "Did a parent of [Latinus] play [femme fatale]"
    },
    {
        "questionIdx": 39524,
        "questionPatternModEntities": "Did a sequel of M0 star a German female sibling of M1",
        "questionTemplate": "Did a [ROLE_SIMPLE] of [entity] [VP_SIMPLE] a [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x0 P1 M0 .\n?x1 P2 M1 .\n?x1 P3 M2 .\n?x1 P4 M3 .\nFILTER ( ?x1 != M1 )\n}",
        "recursionDepth": 33,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P155 wd:Q108006 .\n?x0 wdt:P161 ?x1 .\n?x1 wdt:P21 wd:Q6581072 .\n?x1 wdt:P27 wd:Q183 .\n?x1 wdt:P3373 wd:Q5553615 .\nFILTER ( ?x1 != wd:Q5553615 )\n}",
        "questionWithBrackets": "Did a sequel of [Speed] star a German female sibling of [Gesine Bullock-Prado]"
    },
    {
        "questionIdx": 39527,
        "questionPatternModEntities": "Did a sequel of M2 star M0 and M1",
        "questionTemplate": "Did a [ROLE_SIMPLE] of [entity] [VP_SIMPLE] [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P1 M2\n}",
        "recursionDepth": 21,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P155 wd:Q2085 .\n?x0 wdt:P161 wd:Q103946 .\n?x0 wdt:P161 wd:Q2071\n}",
        "questionWithBrackets": "Did a sequel of [Twin Peaks] star [David Lynch] and [Kiefer Sutherland]"
    },
    {
        "questionIdx": 39547,
        "questionPatternModEntities": "Did a sibling and spouse of M0 marry M1 and M2",
        "questionTemplate": "Did a [ROLE_SIMPLE] and [ROLE_SIMPLE] of [entity] [VP_SIMPLE] [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x0 != M1 ) .\nFILTER ( ?x0 != M2 )\n}",
        "recursionDepth": 26,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P3373 wd:Q3340 .\n?x0 wdt:P26 wd:Q296446 .\n?x0 wdt:P26 wd:Q3340 .\n?x0 wdt:P26 wd:Q310808 .\nFILTER ( ?x0 != wd:Q296446 ) .\nFILTER ( ?x0 != wd:Q3340 ) .\nFILTER ( ?x0 != wd:Q3340 ) .\nFILTER ( ?x0 != wd:Q310808 )\n}",
        "questionWithBrackets": "Did a sibling and spouse of [Ptolemy IX Lathyros] marry [Antiochus IX Cyzicenus] and [Antiochus X Eusebes]"
    },
    {
        "questionIdx": 39553,
        "questionPatternModEntities": "Did a sibling and spouse of M0 marry M1 's spouse",
        "questionTemplate": "Did a [ROLE_SIMPLE] and [ROLE_SIMPLE] of [entity] [VP_SIMPLE] [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 ?x1 .\n?x0 P1 M0 .\n?x1 P1 M1 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x1 != M1 )\n}",
        "recursionDepth": 26,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P3373 wd:Q635 .\n?x0 wdt:P26 ?x1 .\n?x0 wdt:P26 wd:Q635 .\n?x1 wdt:P26 wd:Q39938 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x0 != wd:Q635 ) .\nFILTER ( ?x0 != wd:Q635 ) .\nFILTER ( ?x1 != wd:Q39938 )\n}",
        "questionWithBrackets": "Did a sibling and spouse of [Cleopatra] marry [Ptolemy XIII Theos Philopator] 's spouse"
    },
    {
        "questionIdx": 39555,
        "questionPatternModEntities": "Did a sibling of M0 play M1",
        "questionTemplate": "Did a [ROLE_SIMPLE] of [entity] [VP_SIMPLE] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M0 )\n}",
        "recursionDepth": 17,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P453 wd:Q222573 .\n?x0 wdt:P3373 wd:Q203236 .\nFILTER ( ?x0 != wd:Q203236 )\n}",
        "questionWithBrackets": "Did a sibling of [Pasipha\u00eb] play [femme fatale]"
    },
    {
        "questionIdx": 39639,
        "questionPatternModEntities": "Did a sibling of M0 marry M1 and M2",
        "questionTemplate": "Did a [ROLE_SIMPLE] of [entity] [VP_SIMPLE] [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x0 != M1 ) .\nFILTER ( ?x0 != M2 )\n}",
        "recursionDepth": 21,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P3373 wd:Q1628 .\n?x0 wdt:P26 wd:Q75357392 .\n?x0 wdt:P26 wd:Q75357397 .\nFILTER ( ?x0 != wd:Q1628 ) .\nFILTER ( ?x0 != wd:Q75357392 ) .\nFILTER ( ?x0 != wd:Q75357397 )\n}",
        "questionWithBrackets": "Did a sibling of [David Cecil, 6th Marquess of Exeter] marry [Lillian Johnson] and [Edith Csanady de Telegd]"
    },
    {
        "questionIdx": 39644,
        "questionPatternModEntities": "Did a sibling of M0 marry M1",
        "questionTemplate": "Did a [ROLE_SIMPLE] of [entity] [VP_SIMPLE] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x0 != M1 )\n}",
        "recursionDepth": 17,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P3373 wd:Q939 .\n?x0 wdt:P26 wd:Q116972 .\nFILTER ( ?x0 != wd:Q116972 ) .\nFILTER ( ?x0 != wd:Q939 )\n}",
        "questionWithBrackets": "Did a sibling of [Pedro I of Brazil] marry [Nuno Jos\u00e9 Severo de Mendo\u00e7a Rolim de Moura Barreto, 1st Duke of Loul\u00e9]"
    },
    {
        "questionIdx": 39649,
        "questionPatternModEntities": "Did a sibling of M0 play M1 , play M2 , and play M3",
        "questionTemplate": "Did a [ROLE_SIMPLE] of [entity] [VP_SIMPLE] [entity] , [VP_SIMPLE] [entity] , and [VP_SIMPLE] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\n?x0 P1 M3 .\nFILTER ( ?x0 != M0 )\n}",
        "recursionDepth": 37,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P453 wd:Q48463568 .\n?x0 wdt:P453 wd:Q64005951 .\n?x0 wdt:P453 wd:Q5815108 .\n?x0 wdt:P3373 wd:Q3756757 .\nFILTER ( ?x0 != wd:Q3756757 )\n}",
        "questionWithBrackets": "Did a sibling of [Gabriella Pavarotti] play [Duke of Mantua] , play [Mario Cavaradossi] , and play [Andrea Ch\u00e9nier]"
    },
    {
        "questionIdx": 39753,
        "questionPatternModEntities": "Did a spouse and sibling of M0 marry M1 and marry M2",
        "questionTemplate": "Did a [ROLE_SIMPLE] and [ROLE_SIMPLE] of [entity] [VP_SIMPLE] [entity] and [VP_SIMPLE] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x0 != M1 ) .\nFILTER ( ?x0 != M2 )\n}",
        "recursionDepth": 33,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P3373 wd:Q3340 .\n?x0 wdt:P26 wd:Q296446 .\n?x0 wdt:P26 wd:Q3340 .\n?x0 wdt:P26 wd:Q310808 .\nFILTER ( ?x0 != wd:Q296446 ) .\nFILTER ( ?x0 != wd:Q3340 ) .\nFILTER ( ?x0 != wd:Q3340 ) .\nFILTER ( ?x0 != wd:Q310808 )\n}",
        "questionWithBrackets": "Did a spouse and sibling of [Ptolemy IX Lathyros] marry [Antiochus X Eusebes] and marry [Antiochus IX Cyzicenus]"
    },
    {
        "questionIdx": 39800,
        "questionPatternModEntities": "Did a spouse of M1 marry M0",
        "questionTemplate": "Did a [ROLE_SIMPLE] of [entity] [VP_SIMPLE] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x0 != M1 )\n}",
        "recursionDepth": 17,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P26 wd:Q1423 .\n?x0 wdt:P26 wd:Q1159574 .\nFILTER ( ?x0 != wd:Q1423 ) .\nFILTER ( ?x0 != wd:Q1159574 )\n}",
        "questionWithBrackets": "Did a spouse of [Domitian] marry [Lucius Aelius Plautius Lamia Aelianus]"
    },
    {
        "questionIdx": 39846,
        "questionPatternModEntities": "Did a spouse of M2 's spouse and sibling marry M0 and M1",
        "questionTemplate": "Did a [ROLE_SIMPLE] of [entity] 's [ROLE_SIMPLE] and [ROLE_SIMPLE] [VP_SIMPLE] [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x1 P0 M2 .\n?x1 P1 M2 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x0 != M1 ) .\nFILTER ( ?x1 != M2 ) .\nFILTER ( ?x1 != M2 )\n}",
        "recursionDepth": 30,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P26 ?x1 .\n?x0 wdt:P26 wd:Q39938 .\n?x0 wdt:P26 wd:Q40017 .\n?x1 wdt:P3373 wd:Q635 .\n?x1 wdt:P26 wd:Q635 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x0 != wd:Q39938 ) .\nFILTER ( ?x0 != wd:Q40017 ) .\nFILTER ( ?x1 != wd:Q635 ) .\nFILTER ( ?x1 != wd:Q635 )\n}",
        "questionWithBrackets": "Did a spouse of [Cleopatra] 's spouse and sibling marry [Ptolemy XIV of Egypt] and [Ptolemy XIII Theos Philopator]"
    },
    {
        "questionIdx": 39929,
        "questionPatternModEntities": "Did a spouse of a parent , sibling , and spouse of M1 marry M0",
        "questionTemplate": "Did a [ROLE_SIMPLE] of a [ROLE_SIMPLE] , [ROLE_SIMPLE] , and [ROLE_SIMPLE] of [entity] [VP_SIMPLE] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x0 P0 M0 .\n?x1 P0 M1 .\n?x1 P1 M1 .\n?x1 P2 M1 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x1 != M1 ) .\nFILTER ( ?x1 != M1 )\n}",
        "recursionDepth": 32,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P26 ?x1 .\n?x0 wdt:P26 wd:Q1523 .\n?x1 wdt:P40|wdt:P355 wd:Q443473 .\n?x1 wdt:P3373 wd:Q443473 .\n?x1 wdt:P26 wd:Q443473 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x0 != wd:Q1523 ) .\nFILTER ( ?x1 != wd:Q443473 ) .\nFILTER ( ?x1 != wd:Q443473 )\n}",
        "questionWithBrackets": "Did a spouse of a parent , sibling , and spouse of [Henutmire] marry [Ramesses II]"
    },
    {
        "questionIdx": 39946,
        "questionPatternModEntities": "Did a spouse of a spouse of M1 play M0",
        "questionTemplate": "Did a [ROLE_SIMPLE] of a [ROLE_SIMPLE] of [entity] [VP_SIMPLE] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 ?x1 .\n?x1 P1 M1 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x1 != M1 )\n}",
        "recursionDepth": 23,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P453 wd:Q222573 .\n?x0 wdt:P26 ?x1 .\n?x1 wdt:P26 wd:Q135224 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x1 != wd:Q135224 )\n}",
        "questionWithBrackets": "Did a spouse of a spouse of [Nausicaa] play [femme fatale]"
    },
    {
        "questionIdx": 39973,
        "questionPatternModEntities": "Did a spouse , sibling , and parent of M0 marry M1 and marry M2",
        "questionTemplate": "Did a [ROLE_SIMPLE] , [ROLE_SIMPLE] , and [ROLE_SIMPLE] of [entity] [VP_SIMPLE] [entity] and [VP_SIMPLE] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M0 .\n?x0 P2 M0 .\n?x0 P2 M1 .\n?x0 P2 M2 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x0 != M1 ) .\nFILTER ( ?x0 != M2 )\n}",
        "recursionDepth": 37,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q443473 .\n?x0 wdt:P3373 wd:Q443473 .\n?x0 wdt:P26 wd:Q443473 .\n?x0 wdt:P26 wd:Q210535 .\n?x0 wdt:P26 wd:Q256430 .\nFILTER ( ?x0 != wd:Q443473 ) .\nFILTER ( ?x0 != wd:Q443473 ) .\nFILTER ( ?x0 != wd:Q210535 ) .\nFILTER ( ?x0 != wd:Q256430 )\n}",
        "questionWithBrackets": "Did a spouse , sibling , and parent of [Henutmire] marry [Maathorneferure] and marry [Nefertarilllala]"
    },
    {
        "questionIdx": 39974,
        "questionPatternModEntities": "Did a spouse , sibling , and parent of M0 marry M1",
        "questionTemplate": "Did a [ROLE_SIMPLE] , [ROLE_SIMPLE] , and [ROLE_SIMPLE] of [entity] [VP_SIMPLE] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M0 .\n?x0 P2 M0 .\n?x0 P2 M1 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x0 != M1 )\n}",
        "recursionDepth": 26,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q443473 .\n?x0 wdt:P3373 wd:Q443473 .\n?x0 wdt:P26 wd:Q210535 .\n?x0 wdt:P26 wd:Q443473 .\nFILTER ( ?x0 != wd:Q210535 ) .\nFILTER ( ?x0 != wd:Q443473 ) .\nFILTER ( ?x0 != wd:Q443473 )\n}",
        "questionWithBrackets": "Did a spouse , sibling , and parent of [Henutmire] marry [Nefertarilllala]"
    },
    {
        "questionIdx": 40489,
        "questionPatternModEntities": "Did a American German employee of M0 marry M3 and M4",
        "questionTemplate": "Did a [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] [VP_SIMPLE] [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\n?x0 P2 M3 .\n?x0 P2 M4 .\nFILTER ( ?x0 != M3 ) .\nFILTER ( ?x0 != M4 )\n}",
        "recursionDepth": 31,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P108 wd:Q21578 .\n?x0 wdt:P27 wd:Q183 .\n?x0 wdt:P27 wd:Q30 .\n?x0 wdt:P26 wd:Q60884 .\n?x0 wdt:P26 wd:Q71696 .\nFILTER ( ?x0 != wd:Q60884 ) .\nFILTER ( ?x0 != wd:Q71696 )\n}",
        "questionWithBrackets": "Did a American German employee of [Princeton University] marry [G\u00fcnther Anders] and [Heinrich Bl\u00fccher]"
    },
    {
        "questionIdx": 40620,
        "questionPatternModEntities": "Did a American sibling of M0 marry M2 and marry M3",
        "questionTemplate": "Did a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] [VP_SIMPLE] [entity] and [VP_SIMPLE] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P2 M2 .\n?x0 P2 M3 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x0 != M2 ) .\nFILTER ( ?x0 != M3 )\n}",
        "recursionDepth": 33,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P27 wd:Q30 .\n?x0 wdt:P3373 wd:Q23 .\n?x0 wdt:P26 wd:Q75764491 .\n?x0 wdt:P26 wd:Q75767077 .\nFILTER ( ?x0 != wd:Q23 ) .\nFILTER ( ?x0 != wd:Q75764491 ) .\nFILTER ( ?x0 != wd:Q75767077 )\n}",
        "questionWithBrackets": "Did a American sibling of [George Washington] marry [Mildred Thornton] and marry [Anne Steptoe]"
    },
    {
        "questionIdx": 40985,
        "questionPatternModEntities": "Did a Italian sibling of M0 play M2",
        "questionTemplate": "Did a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] [VP_SIMPLE] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P2 M2 .\nFILTER ( ?x0 != M0 )\n}",
        "recursionDepth": 22,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P453 wd:Q5815108 .\n?x0 wdt:P27 wd:Q38 .\n?x0 wdt:P3373 wd:Q3756757 .\nFILTER ( ?x0 != wd:Q3756757 )\n}",
        "questionWithBrackets": "Did a Italian sibling of [Gabriella Pavarotti] play [Duke of Mantua]"
    },
    {
        "questionIdx": 41086,
        "questionPatternModEntities": "Did a actor employed by M0 play M1 , M2 , M3 , and M4",
        "questionTemplate": "Did a [NP_SIMPLE] [VP_SIMPLE] by [entity] [VP_SIMPLE] [entity] , [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\n?x0 P1 M3 .\n?x0 P1 M4\n}",
        "recursionDepth": 33,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P453 wd:Q50391147 .\n?x0 wdt:P453 wd:Q12742668 .\n?x0 wdt:P453 wd:Q50926083 .\n?x0 wdt:P453 wd:Q50386809 .\n?x0 wdt:P108 wd:Q503246\n}",
        "questionWithBrackets": "Did a actor employed by [Juilliard School] play [Violetta Val\u00e9ry] , [Carmen] , [Princess Turandot] , and [Lucia Ashton]"
    },
    {
        "questionIdx": 41324,
        "questionPatternModEntities": "Did a actor of M0 play M1",
        "questionTemplate": "Did a [ROLE_SIMPLE] of [entity] [VP_SIMPLE] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P0 M1\n}",
        "recursionDepth": 17,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P453 wd:Q33999 .\n?x0 wdt:P453 wd:Q34350831\n}",
        "questionWithBrackets": "Did a actor of [actor] play [Super Boy]"
    },
    {
        "questionIdx": 41333,
        "questionPatternModEntities": "Did a actor of M0 marry M1",
        "questionTemplate": "Did a [ROLE_SIMPLE] of [entity] [VP_SIMPLE] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M1 )\n}",
        "recursionDepth": 17,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P453 wd:Q222573 .\n?x0 wdt:P26 wd:Q192482 .\nFILTER ( ?x0 != wd:Q192482 )\n}",
        "questionWithBrackets": "Did a actor of [femme fatale] marry [Telemachus]"
    },
    {
        "questionIdx": 41348,
        "questionPatternModEntities": "Did a actor of M0 and M1 marry M2",
        "questionTemplate": "Did a [ROLE_SIMPLE] of [entity] and [entity] [VP_SIMPLE] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P1 M2 .\nFILTER ( ?x0 != M2 )\n}",
        "recursionDepth": 21,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P453 wd:Q12742668 .\n?x0 wdt:P453 wd:Q50386809 .\n?x0 wdt:P26 wd:Q182360 .\nFILTER ( ?x0 != wd:Q182360 )\n}",
        "questionWithBrackets": "Did a actor of [Carmen] and [Princess Turandot] marry [Giovanni Battista Meneghini]"
    },
    {
        "questionIdx": 41351,
        "questionPatternModEntities": "Did a actor of M0 marry M1 and M2",
        "questionTemplate": "Did a [ROLE_SIMPLE] of [entity] [VP_SIMPLE] [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\nFILTER ( ?x0 != M1 ) .\nFILTER ( ?x0 != M2 )\n}",
        "recursionDepth": 21,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P453 wd:Q12742668 .\n?x0 wdt:P26 wd:Q50896 .\n?x0 wdt:P26 wd:Q485165 .\nFILTER ( ?x0 != wd:Q50896 ) .\nFILTER ( ?x0 != wd:Q485165 )\n}",
        "questionWithBrackets": "Did a actor of [Princess Turandot] marry [Jos\u00e9 Carreras] and [Pippo Baudo]"
    },
    {
        "questionIdx": 41361,
        "questionPatternModEntities": "Did a actor play M0 and M1",
        "questionTemplate": "Did a [NP_SIMPLE] [VP_SIMPLE] [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P0 M1\n}",
        "recursionDepth": 18,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P453 wd:Q33999 .\n?x0 wdt:P453 wd:Q34350831\n}",
        "questionWithBrackets": "Did a actor play [Super Boy] and [actor]"
    },
    {
        "questionIdx": 42630,
        "questionPatternModEntities": "Did a employee of M0 marry M1",
        "questionTemplate": "Did a [ROLE_SIMPLE] of [entity] [VP_SIMPLE] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M1 )\n}",
        "recursionDepth": 17,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P108 wd:Q280413 .\n?x0 wdt:P26 wd:Q1257 .\nFILTER ( ?x0 != wd:Q1257 )\n}",
        "questionWithBrackets": "Did a employee of [National Center for Scientific Research] marry [Boutros Boutros-Ghali]"
    },
    {
        "questionIdx": 42667,
        "questionPatternModEntities": "Did a employee of M0 marry M1 and M2",
        "questionTemplate": "Did a [ROLE_SIMPLE] of [entity] [VP_SIMPLE] [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\nFILTER ( ?x0 != M1 ) .\nFILTER ( ?x0 != M2 )\n}",
        "recursionDepth": 21,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P108 wd:Q152171 .\n?x0 wdt:P26 wd:Q2514 .\n?x0 wdt:P26 wd:Q112286 .\nFILTER ( ?x0 != wd:Q2514 ) .\nFILTER ( ?x0 != wd:Q112286 )\n}",
        "questionWithBrackets": "Did a employee of [University of Bonn] marry [Hilmar Kopper] and [Willy Brandt]"
    },
    {
        "questionIdx": 43066,
        "questionPatternModEntities": "Was M1 produced by M0 's sibling",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nM1 P1 ?x0\n}",
        "recursionDepth": 16,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P3373 wd:Q3360333 .\nFILTER ( ?x0 != wd:Q3360333 ) .\nwd:Q241444 wdt:P162|wdt:P272 ?x0\n}",
        "questionWithBrackets": "Was [50 Words for Snow] produced by [Paddy Bush] 's sibling"
    },
    {
        "questionIdx": 43125,
        "questionPatternModEntities": "Was M1 executive produced by M2 , M3 , and M4 , edited by M0 's sibling , and written by M5",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] , [entity] , and [entity] , [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nM1 P1 M2 .\nM1 P1 M3 .\nM1 P1 M4 .\nM1 P2 M5 .\nM1 P3 ?x0\n}",
        "recursionDepth": 44,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P3373 wd:Q6228653 .\nFILTER ( ?x0 != wd:Q6228653 ) .\nwd:Q110397 wdt:P1040 ?x0 .\nwd:Q110397 wdt:P1431 wd:Q3436301 .\nwd:Q110397 wdt:P1431 wd:Q15463435 .\nwd:Q110397 wdt:P1431 wd:Q17415497 .\nwd:Q110397 wdt:P58 wd:Q471010\n}",
        "questionWithBrackets": "Was [True Lies] executive produced by [Rae Sanchini] , [Bobby Shriver] , and [Larry Kasanoff] , edited by [John David Cameron] 's sibling , and written by [Claude Zidi]"
    },
    {
        "questionIdx": 43141,
        "questionPatternModEntities": "Was M0 edited by M6 and M7 , written by M1 , and written by M2 , M3 , M4 , and M5",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] and [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity] , [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P0 M3 .\nM0 P0 M4 .\nM0 P0 M5 .\nM0 P1 M6 .\nM0 P1 M7\n}",
        "recursionDepth": 46,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q603857 wdt:P1040 wd:Q55211 .\nwd:Q603857 wdt:P1040 wd:Q18021284 .\nwd:Q603857 wdt:P58 wd:Q20438470 .\nwd:Q603857 wdt:P58 wd:Q44221 .\nwd:Q603857 wdt:P58 wd:Q55238 .\nwd:Q603857 wdt:P58 wd:Q295093 .\nwd:Q603857 wdt:P58 wd:Q113628\n}",
        "questionWithBrackets": "Was [11'09\"01 September 11] edited by [Mohsen Makhmalbaf] and [Jonathan Morris] , written by [Sean Penn] , and written by [Tatjana \u0160oji\u0107] , [Idrissa Ou\u00e9draogo] , [Ken Loach] , and [Claude Lelouch]"
    },
    {
        "questionIdx": 43171,
        "questionPatternModEntities": "Was M0 distributed and produced by M1",
        "questionTemplate": "Was [entity] [VP_SIMPLE] and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1\n}",
        "recursionDepth": 19,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q779039 wdt:P750 wd:Q3587 .\nwd:Q779039 wdt:P162|wdt:P272 wd:Q3587\n}",
        "questionWithBrackets": "Was [Os Caras de Pau] distributed and produced by [Rede Globo]"
    },
    {
        "questionIdx": 43303,
        "questionPatternModEntities": "Was M0 's prequel executive produced by and written by M1",
        "questionTemplate": "Was [entity] 's [ROLE_SIMPLE] [VP_SIMPLE] by and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P2 M1\n}",
        "recursionDepth": 25,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P1431 wd:Q2071 .\n?x0 wdt:P156 wd:Q1140578 .\n?x0 wdt:P58 wd:Q2071\n}",
        "questionWithBrackets": "Was [Twin Peaks: Fire Walk with Me] 's prequel executive produced by and written by [David Lynch]"
    },
    {
        "questionIdx": 43440,
        "questionPatternModEntities": "Was M0 edited by M1 , edited by M2 , M3 , M4 , M5 , and M6 , and edited by M7",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , [entity] , [entity] , [entity] , and [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P0 M3 .\nM0 P0 M4 .\nM0 P0 M5 .\nM0 P0 M6 .\nM0 P0 M7\n}",
        "recursionDepth": 45,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q1206255 wdt:P1040 wd:Q293078 .\nwd:Q1206255 wdt:P1040 wd:Q17493395 .\nwd:Q1206255 wdt:P1040 wd:Q96190 .\nwd:Q1206255 wdt:P1040 wd:Q72685 .\nwd:Q1206255 wdt:P1040 wd:Q832573 .\nwd:Q1206255 wdt:P1040 wd:Q17537097 .\nwd:Q1206255 wdt:P1040 wd:Q17537229\n}",
        "questionWithBrackets": "Was [Germany 09] edited by [Mathilde Bonnefoy] , edited by [Bettina B\u00f6hler] , [Oliver Neumann] , [Romuald Karmakar] , [Dietmar Kraus] , and [Katja Dringenberg] , and edited by [Peter R. Adam]"
    },
    {
        "questionIdx": 43488,
        "questionPatternModEntities": "Was M0 written by M1 , directed by M4 , M5 , M6 , and M7 , and edited by M2 and M3",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , [entity] , [entity] , and [entity] , and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M2 .\nM0 P1 M3 .\nM0 P2 M4 .\nM0 P2 M5 .\nM0 P2 M6 .\nM0 P2 M7\n}",
        "recursionDepth": 46,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q603857 wdt:P57 wd:Q55215 .\nwd:Q603857 wdt:P57 wd:Q55238 .\nwd:Q603857 wdt:P57 wd:Q295093 .\nwd:Q603857 wdt:P57 wd:Q113628 .\nwd:Q603857 wdt:P1040 wd:Q55211 .\nwd:Q603857 wdt:P1040 wd:Q541826 .\nwd:Q603857 wdt:P58 wd:Q1764766\n}",
        "questionWithBrackets": "Was [11'09\"01 September 11] written by [Pierre Uytterhoeven] , directed by [Claude Lelouch] , [Idrissa Ou\u00e9draogo] , [Ken Loach] , and [Alejandro Gonz\u00e1lez I\u00f1\u00e1rritu] , and edited by [Mohsen Makhmalbaf] and [Jay Cassidy]"
    },
    {
        "questionIdx": 43517,
        "questionPatternModEntities": "Was M0 directed by M7 , edited by M3 , M4 , M5 , and M6 , and written by M1 and M2",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , [entity] , [entity] , and [entity] , and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P1 M3 .\nM0 P1 M4 .\nM0 P1 M5 .\nM0 P1 M6 .\nM0 P2 M7\n}",
        "recursionDepth": 46,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q603857 wdt:P57 wd:Q55238 .\nwd:Q603857 wdt:P1040 wd:Q55211 .\nwd:Q603857 wdt:P1040 wd:Q18021284 .\nwd:Q603857 wdt:P1040 wd:Q5639976 .\nwd:Q603857 wdt:P1040 wd:Q22074634 .\nwd:Q603857 wdt:P58 wd:Q55215 .\nwd:Q603857 wdt:P58 wd:Q44221\n}",
        "questionWithBrackets": "Was [11'09\"01 September 11] directed by [Ken Loach] , edited by [Hajime Okayasu] , [Jonathan Morris] , [Mohsen Makhmalbaf] , and [Robert Duffy] , and written by [Alejandro Gonz\u00e1lez I\u00f1\u00e1rritu] and [Sean Penn]"
    },
    {
        "questionIdx": 43519,
        "questionPatternModEntities": "Was M0 executive produced by and edited by M1",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1\n}",
        "recursionDepth": 21,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q236728 wdt:P1040 wd:Q55400 .\nwd:Q236728 wdt:P1431 wd:Q55400\n}",
        "questionWithBrackets": "Was [Ponyo on the Cliff by the Sea] executive produced by and edited by [Hayao Miyazaki]"
    },
    {
        "questionIdx": 43634,
        "questionPatternModEntities": "Was M1 distributed by M2 and M3 , distributed by M0 's parent , and distributed by M4",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] and [entity] , [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 ?x0 .\nM1 P1 M2 .\nM1 P1 M3 .\nM1 P1 M4\n}",
        "recursionDepth": 40,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q4835018 .\nwd:Q34316 wdt:P750 ?x0 .\nwd:Q34316 wdt:P750 wd:Q65359104 .\nwd:Q34316 wdt:P750 wd:Q907311 .\nwd:Q34316 wdt:P750 wd:Q9531\n}",
        "questionWithBrackets": "Was [Doctor Who] distributed by [BBC] and [Netflix] , distributed by [BBC Yorkshire] 's parent , and distributed by [HBO Max]"
    },
    {
        "questionIdx": 43736,
        "questionPatternModEntities": "Was M2 directed , produced , and written by a Spanish sibling of M0",
        "questionTemplate": "Was [entity] [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M0 ) .\nM2 P2 ?x0 .\nM2 P3 ?x0 .\nM2 P4 ?x0\n}",
        "recursionDepth": 35,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P27 wd:Q29 .\n?x0 wdt:P3373 wd:Q399076 .\nFILTER ( ?x0 != wd:Q399076 ) .\nwd:Q46044 wdt:P57 ?x0 .\nwd:Q46044 wdt:P162|wdt:P272 ?x0 .\nwd:Q46044 wdt:P58 ?x0\n}",
        "questionWithBrackets": "Was [Labyrinth of Passion] directed , produced , and written by a Spanish sibling of [Agust\u00edn Almod\u00f3var]"
    },
    {
        "questionIdx": 43742,
        "questionPatternModEntities": "Was M1 a prequel of M0 's prequel",
        "questionTemplate": "Was [entity] a [ROLE_SIMPLE] of [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P0 ?x0\n}",
        "recursionDepth": 17,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P156 wd:Q2895 .\nwd:Q68678 wdt:P156 ?x0\n}",
        "questionWithBrackets": "Was [Socialist Soviet Republic of Byelorussia] a prequel of [Byelorussian Soviet Socialist Republic] 's prequel"
    },
    {
        "questionIdx": 43752,
        "questionPatternModEntities": "Was M1 executive produced by M2 and edited by M0 's parent",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 M2 .\nM1 P2 ?x0\n}",
        "recursionDepth": 28,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q104373360 .\nwd:Q1140578 wdt:P1040 ?x0 .\nwd:Q1140578 wdt:P1431 wd:Q2071\n}",
        "questionWithBrackets": "Was [Twin Peaks: Fire Walk with Me] executive produced by [David Lynch] and edited by [Riley Sweeney Lynch] 's parent"
    },
    {
        "questionIdx": 43889,
        "questionPatternModEntities": "Was M3 produced by a German French spouse of M2",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P1 M2 .\nFILTER ( ?x0 != M2 ) .\nM3 P2 ?x0\n}",
        "recursionDepth": 28,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P27 wd:Q183 .\n?x0 wdt:P27 wd:Q142 .\n?x0 wdt:P26 wd:Q19723896 .\nFILTER ( ?x0 != wd:Q19723896 ) .\nwd:Q959611 wdt:P162|wdt:P272 ?x0\n}",
        "questionWithBrackets": "Was [The Tender Enemy] produced by a German French spouse of [Hilde Wall]"
    },
    {
        "questionIdx": 43890,
        "questionPatternModEntities": "Was M1 executive produced by and directed by M0 's spouse",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nM1 P1 ?x0 .\nM1 P2 ?x0\n}",
        "recursionDepth": 25,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P26 wd:Q38842 .\nFILTER ( ?x0 != wd:Q38842 ) .\nwd:Q182206 wdt:P57 ?x0 .\nwd:Q182206 wdt:P1431 ?x0\n}",
        "questionWithBrackets": "Was [Evangelion: 3.0 You Can (Not) Redo] executive produced by and directed by [Moyoco Anno] 's spouse"
    },
    {
        "questionIdx": 43941,
        "questionPatternModEntities": "Was M2 directed by a male sibling of M0",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M0 ) .\nM2 P2 ?x0\n}",
        "recursionDepth": 23,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P21 wd:Q6581097 .\n?x0 wdt:P3373 wd:Q3567655 .\nFILTER ( ?x0 != wd:Q3567655 ) .\nwd:Q669929 wdt:P57 ?x0\n}",
        "questionWithBrackets": "Was [The Circus] directed by a male sibling of [Wheeler Dryden]"
    },
    {
        "questionIdx": 43992,
        "questionPatternModEntities": "Was M0 's prequel edited by M3 and M4 , produced by M2 , executive produced by M1 , and directed by M5",
        "questionTemplate": "Was [entity] 's [ROLE_SIMPLE] [VP_SIMPLE] by [entity] and [entity] , [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P2 M2 .\n?x0 P3 M3 .\n?x0 P3 M4 .\n?x0 P4 M5\n}",
        "recursionDepth": 50,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P57 wd:Q103646 .\n?x0 wdt:P1040 wd:Q484948 .\n?x0 wdt:P1040 wd:Q487090 .\n?x0 wdt:P1431 wd:Q7345 .\n?x0 wdt:P162|wdt:P272 wd:Q186941 .\n?x0 wdt:P156 wd:Q192934\n}",
        "questionWithBrackets": "Was [Angels & Demons] 's prequel edited by [Daniel P. Hanley] and [Mike Hill] , produced by [Columbia Pictures] , executive produced by [Dan Brown] , and directed by [Ron Howard]"
    },
    {
        "questionIdx": 43995,
        "questionPatternModEntities": "Was M0 's prequel edited by and directed by M1 , M2 , M3 , and M4",
        "questionTemplate": "Was [entity] 's [ROLE_SIMPLE] [VP_SIMPLE] by and [VP_SIMPLE] by [entity] , [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\n?x0 P1 M3 .\n?x0 P1 M4 .\n?x0 P2 M1 .\n?x0 P2 M2 .\n?x0 P2 M3 .\n?x0 P2 M4\n}",
        "recursionDepth": 34,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P57 wd:Q1291210 .\n?x0 wdt:P57 wd:Q4679987 .\n?x0 wdt:P57 wd:Q4207234 .\n?x0 wdt:P57 wd:Q16198328 .\n?x0 wdt:P1040 wd:Q1291210 .\n?x0 wdt:P1040 wd:Q4679987 .\n?x0 wdt:P1040 wd:Q4207234 .\n?x0 wdt:P1040 wd:Q16198328 .\n?x0 wdt:P156 wd:Q17183987\n}",
        "questionWithBrackets": "Was [V/H/S: Viral] 's prequel edited by and directed by [Gareth Evans] , [Eduardo S\u00e1nchez] , [Jason Eisener] , and [Adam Wingard]"
    },
    {
        "questionIdx": 44000,
        "questionPatternModEntities": "Was M0 's prequel written and directed by M1 , M2 , M3 , and M4",
        "questionTemplate": "Was [entity] 's [ROLE_SIMPLE] [VP_SIMPLE] and [VP_SIMPLE] by [entity] , [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\n?x0 P1 M3 .\n?x0 P1 M4 .\n?x0 P2 M1 .\n?x0 P2 M2 .\n?x0 P2 M3 .\n?x0 P2 M4\n}",
        "recursionDepth": 33,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P57 wd:Q382387 .\n?x0 wdt:P57 wd:Q5658534 .\n?x0 wdt:P57 wd:Q18002672 .\n?x0 wdt:P57 wd:Q6271517 .\n?x0 wdt:P156 wd:Q18207699 .\n?x0 wdt:P58 wd:Q382387 .\n?x0 wdt:P58 wd:Q5658534 .\n?x0 wdt:P58 wd:Q18002672 .\n?x0 wdt:P58 wd:Q6271517\n}",
        "questionWithBrackets": "Was [ABCs of Death 2] 's prequel written and directed by [Adri\u00e1n Garc\u00eda Bogliano] , [Jon Schnepp] , [Noboru Iguchi] , and [Lee Hardcastle]"
    },
    {
        "questionIdx": 44001,
        "questionPatternModEntities": "Was M0 's prequel written and edited by M1 , M2 , M3 , and M4",
        "questionTemplate": "Was [entity] 's [ROLE_SIMPLE] [VP_SIMPLE] and [VP_SIMPLE] by [entity] , [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\n?x0 P1 M3 .\n?x0 P1 M4 .\n?x0 P2 M1 .\n?x0 P2 M2 .\n?x0 P2 M3 .\n?x0 P2 M4\n}",
        "recursionDepth": 33,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P1040 wd:Q5836844 .\n?x0 wdt:P1040 wd:Q4022902 .\n?x0 wdt:P1040 wd:Q4023328 .\n?x0 wdt:P1040 wd:Q5658534 .\n?x0 wdt:P156 wd:Q18207699 .\n?x0 wdt:P58 wd:Q5836844 .\n?x0 wdt:P58 wd:Q4022902 .\n?x0 wdt:P58 wd:Q4023328 .\n?x0 wdt:P58 wd:Q5658534\n}",
        "questionWithBrackets": "Was [ABCs of Death 2] 's prequel written and edited by [Yoshihiro Nishimura] , [Ernesto D\u00edaz Espinoza] , [Adri\u00e1n Garc\u00eda Bogliano] , and [Y\u016bdai Yamaguchi]"
    },
    {
        "questionIdx": 44002,
        "questionPatternModEntities": "Was M0 's prequel written by M1 and M2 , produced by M6 , and written by M3 , M4 , and M5",
        "questionTemplate": "Was [entity] 's [ROLE_SIMPLE] [VP_SIMPLE] by [entity] and [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\n?x0 P1 M3 .\n?x0 P1 M4 .\n?x0 P1 M5 .\n?x0 P2 M6\n}",
        "recursionDepth": 47,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P162|wdt:P272 wd:Q168383 .\n?x0 wdt:P156 wd:Q21203766 .\n?x0 wdt:P58 wd:Q4465 .\n?x0 wdt:P58 wd:Q116854 .\n?x0 wdt:P58 wd:Q116861 .\n?x0 wdt:P58 wd:Q271824 .\n?x0 wdt:P58 wd:Q446427\n}",
        "questionWithBrackets": "Was [Kong: Skull Island] 's prequel written by [Merian C. Cooper] and [Peter Jackson] , produced by [Universal Pictures] , and written by [Philippa Boyens] , [Fran Walsh] , and [Edgar Wallace]"
    },
    {
        "questionIdx": 44003,
        "questionPatternModEntities": "Was M0 's prequel written by M1 and M2 , edited by M4 and M5 , and written by M3",
        "questionTemplate": "Was [entity] 's [ROLE_SIMPLE] [VP_SIMPLE] by [entity] and [entity] , [VP_SIMPLE] by [entity] and [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\n?x0 P1 M3 .\n?x0 P2 M4 .\n?x0 P2 M5\n}",
        "recursionDepth": 44,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P1040 wd:Q484948 .\n?x0 wdt:P1040 wd:Q487090 .\n?x0 wdt:P156 wd:Q82094 .\n?x0 wdt:P58 wd:Q179555 .\n?x0 wdt:P58 wd:Q4977733 .\n?x0 wdt:P58 wd:Q320025\n}",
        "questionWithBrackets": "Was [Splash] 's prequel written by [Brian Grazer] and [Babaloo Mandel] , edited by [Mike Hill] and [Daniel P. Hanley] , and written by [Bruce Jay Friedman]"
    },
    {
        "questionIdx": 44009,
        "questionPatternModEntities": "Was M1 's Italian Spanish employee M0",
        "questionTemplate": "Was [entity] 's [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M2 .\nM0 P1 M3\n}",
        "recursionDepth": 21,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q615 wdt:P108 wd:Q7156 .\nwd:Q615 wdt:P27 wd:Q38 .\nwd:Q615 wdt:P27 wd:Q29\n}",
        "questionWithBrackets": "Was [FC Barcelona] 's Italian Spanish employee [Lionel Messi]"
    },
    {
        "questionIdx": 44067,
        "questionPatternModEntities": "Was M1 produced by a sibling of M0 's employee",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x1 P1 M0 .\nFILTER ( ?x0 != ?x1 ) .\nM1 P2 ?x0\n}",
        "recursionDepth": 22,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P3373 ?x1 .\n?x1 wdt:P108 wd:Q457281 .\nFILTER ( ?x0 != ?x1 ) .\nwd:Q208048 wdt:P162|wdt:P272 ?x0\n}",
        "questionWithBrackets": "Was [Band of Brothers] produced by a sibling of [University of Illinois at Urbana\u2013Champaign] 's employee"
    },
    {
        "questionIdx": 44087,
        "questionPatternModEntities": "Was M1 's male sibling 's spouse M0 's sibling",
        "questionTemplate": "Was [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] 's [ROLE_SIMPLE] [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 ?x1 .\n?x1 P0 M1 .\n?x1 P2 M2 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x1 != M1 )\n}",
        "recursionDepth": 24,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P3373 wd:Q939 .\n?x0 wdt:P26 ?x1 .\n?x1 wdt:P21 wd:Q6581097 .\n?x1 wdt:P3373 wd:Q186256 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x0 != wd:Q939 ) .\nFILTER ( ?x1 != wd:Q186256 )\n}",
        "questionWithBrackets": "Was [Ferdinand VII of Spain] 's male sibling 's spouse [Pedro I of Brazil] 's sibling"
    },
    {
        "questionIdx": 44088,
        "questionPatternModEntities": "Was M0 's parent 's sibling M1",
        "questionTemplate": "Was [entity] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( M1 != ?x0 ) .\nM1 P1 ?x0\n}",
        "recursionDepth": 15,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q7519 .\nFILTER ( wd:Q1014890 != ?x0 ) .\nwd:Q1014890 wdt:P3373 ?x0\n}",
        "questionWithBrackets": "Was [\u00d6gedei Khan] 's parent 's sibling [Belgutei]"
    },
    {
        "questionIdx": 44090,
        "questionPatternModEntities": "Was M0 's female sibling M1 's sibling",
        "questionTemplate": "Was [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P1 M2 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x0 != M1 )\n}",
        "recursionDepth": 20,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P21 wd:Q6581072 .\n?x0 wdt:P3373 wd:Q346 .\n?x0 wdt:P3373 wd:Q2496961 .\nFILTER ( ?x0 != wd:Q346 ) .\nFILTER ( ?x0 != wd:Q2496961 )\n}",
        "questionWithBrackets": "Was [Louis IX of France] 's female sibling [John Tristan, Count of Anjou and Maine] 's sibling"
    },
    {
        "questionIdx": 44103,
        "questionPatternModEntities": "Was M1 influenced by a child of M0 and influenced by M2",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity] and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 ?x0 .\nM1 P1 M2\n}",
        "recursionDepth": 29,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P749 wd:Q20800404 .\nwd:Q5281 wdt:P737 ?x0 .\nwd:Q5281 wdt:P737 wd:Q95\n}",
        "questionWithBrackets": "Was [Yandex] influenced by a child of [Alphabet Inc.] and influenced by [Google]"
    },
    {
        "questionIdx": 44110,
        "questionPatternModEntities": "Was M1 produced by , edited by , and directed by a spouse of M0",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nM1 P1 ?x0 .\nM1 P2 ?x0 .\nM1 P3 ?x0\n}",
        "recursionDepth": 32,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P26 wd:Q28487 .\nFILTER ( ?x0 != wd:Q28487 ) .\nwd:Q16320113 wdt:P57 ?x0 .\nwd:Q16320113 wdt:P1040 ?x0 .\nwd:Q16320113 wdt:P162|wdt:P272 ?x0\n}",
        "questionWithBrackets": "Was [The Search] produced by , edited by , and directed by a spouse of [B\u00e9r\u00e9nice Bejo]"
    },
    {
        "questionIdx": 44126,
        "questionPatternModEntities": "Was M2 directed by , written by , and executive produced by a German employee of M0",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nM2 P2 ?x0 .\nM2 P3 ?x0 .\nM2 P4 ?x0\n}",
        "recursionDepth": 38,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P108 wd:Q1622237 .\n?x0 wdt:P27 wd:Q183 .\nwd:Q16736285 wdt:P57 ?x0 .\nwd:Q16736285 wdt:P1431 ?x0 .\nwd:Q16736285 wdt:P58 ?x0\n}",
        "questionWithBrackets": "Was [The Salt of the Earth] directed by , written by , and executive produced by a German employee of [Hochschule f\u00fcr bildende K\u00fcnste Hamburg]"
    },
    {
        "questionIdx": 44134,
        "questionPatternModEntities": "Was M1 a sibling of M0 's actor",
        "questionTemplate": "Was [entity] a [ROLE_SIMPLE] of [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( M1 != ?x0 ) .\nM1 P1 ?x0\n}",
        "recursionDepth": 17,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P453 wd:Q222573 .\nFILTER ( wd:Q203236 != ?x0 ) .\nwd:Q203236 wdt:P3373 ?x0\n}",
        "questionWithBrackets": "Was [Pasipha\u00eb] a sibling of [femme fatale] 's actor"
    },
    {
        "questionIdx": 44165,
        "questionPatternModEntities": "Was M2 written by M0 's male actor",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nM2 P2 ?x0\n}",
        "recursionDepth": 21,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P453 wd:Q947873 .\n?x0 wdt:P21 wd:Q6581097 .\nwd:Q56571114 wdt:P58 ?x0\n}",
        "questionWithBrackets": "Was [No label defined] written by [television presenter] 's male actor"
    },
    {
        "questionIdx": 44442,
        "questionPatternModEntities": "Was M1 's actor M0 's male sibling",
        "questionTemplate": "Was [entity] 's [ROLE_SIMPLE] [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P2 M2 .\nFILTER ( ?x0 != M0 )\n}",
        "recursionDepth": 20,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P453 wd:Q5815108 .\n?x0 wdt:P21 wd:Q6581097 .\n?x0 wdt:P3373 wd:Q3756757 .\nFILTER ( ?x0 != wd:Q3756757 )\n}",
        "questionWithBrackets": "Was [Duke of Mantua] 's actor [Gabriella Pavarotti] 's male sibling"
    },
    {
        "questionIdx": 44461,
        "questionPatternModEntities": "Was M2 directed by , produced by , written by , edited by , and executive produced by a male employee of M0",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nM2 P2 ?x0 .\nM2 P3 ?x0 .\nM2 P4 ?x0 .\nM2 P5 ?x0 .\nM2 P6 ?x0\n}",
        "recursionDepth": 50,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P108 wd:Q681250 .\n?x0 wdt:P21 wd:Q6581097 .\nwd:Q3505719 wdt:P57 ?x0 .\nwd:Q3505719 wdt:P1040 ?x0 .\nwd:Q3505719 wdt:P1431 ?x0 .\nwd:Q3505719 wdt:P162|wdt:P272 ?x0 .\nwd:Q3505719 wdt:P58 ?x0\n}",
        "questionWithBrackets": "Was [Suspension of Disbelief] directed by , produced by , written by , edited by , and executive produced by a male employee of [European Graduate School]"
    },
    {
        "questionIdx": 44465,
        "questionPatternModEntities": "Was M2 edited , executive produced , produced , and directed by M0 's male employee",
        "questionTemplate": "Was [entity] [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nM2 P2 ?x0 .\nM2 P3 ?x0 .\nM2 P4 ?x0 .\nM2 P5 ?x0\n}",
        "recursionDepth": 39,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P108 wd:Q681250 .\n?x0 wdt:P21 wd:Q6581097 .\nwd:Q3505719 wdt:P57 ?x0 .\nwd:Q3505719 wdt:P1040 ?x0 .\nwd:Q3505719 wdt:P1431 ?x0 .\nwd:Q3505719 wdt:P162|wdt:P272 ?x0\n}",
        "questionWithBrackets": "Was [Suspension of Disbelief] edited , executive produced , produced , and directed by [European Graduate School] 's male employee"
    },
    {
        "questionIdx": 44466,
        "questionPatternModEntities": "Was M2 executive produced by , edited by , produced by , directed by , and written by a male employee of M0",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nM2 P2 ?x0 .\nM2 P3 ?x0 .\nM2 P4 ?x0 .\nM2 P5 ?x0 .\nM2 P6 ?x0\n}",
        "recursionDepth": 50,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P108 wd:Q681250 .\n?x0 wdt:P21 wd:Q6581097 .\nwd:Q3505719 wdt:P57 ?x0 .\nwd:Q3505719 wdt:P1040 ?x0 .\nwd:Q3505719 wdt:P1431 ?x0 .\nwd:Q3505719 wdt:P162|wdt:P272 ?x0 .\nwd:Q3505719 wdt:P58 ?x0\n}",
        "questionWithBrackets": "Was [Suspension of Disbelief] executive produced by , edited by , produced by , directed by , and written by a male employee of [European Graduate School]"
    },
    {
        "questionIdx": 44468,
        "questionPatternModEntities": "Was M2 executive produced by , produced by , edited by , directed by , and written by M0 's male employee",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nM2 P2 ?x0 .\nM2 P3 ?x0 .\nM2 P4 ?x0 .\nM2 P5 ?x0 .\nM2 P6 ?x0\n}",
        "recursionDepth": 48,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P108 wd:Q174710 .\n?x0 wdt:P21 wd:Q6581097 .\nwd:Q1453226 wdt:P57 ?x0 .\nwd:Q1453226 wdt:P1040 ?x0 .\nwd:Q1453226 wdt:P1431 ?x0 .\nwd:Q1453226 wdt:P162|wdt:P272 ?x0 .\nwd:Q1453226 wdt:P58 ?x0\n}",
        "questionWithBrackets": "Was [Teza] executive produced by , produced by , edited by , directed by , and written by [University of California, Los Angeles] 's male employee"
    },
    {
        "questionIdx": 44475,
        "questionPatternModEntities": "Was M1 produced by , directed by , written by , edited by , and executive produced by a employee of M0",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 ?x0 .\nM1 P2 ?x0 .\nM1 P3 ?x0 .\nM1 P4 ?x0 .\nM1 P5 ?x0\n}",
        "recursionDepth": 45,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P108 wd:Q681250 .\nwd:Q3505719 wdt:P57 ?x0 .\nwd:Q3505719 wdt:P1040 ?x0 .\nwd:Q3505719 wdt:P1431 ?x0 .\nwd:Q3505719 wdt:P162|wdt:P272 ?x0 .\nwd:Q3505719 wdt:P58 ?x0\n}",
        "questionWithBrackets": "Was [Suspension of Disbelief] produced by , directed by , written by , edited by , and executive produced by a employee of [European Graduate School]"
    },
    {
        "questionIdx": 44479,
        "questionPatternModEntities": "Was M1 written by , directed by , produced by , edited by , and executive produced by a employee of M0",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 ?x0 .\nM1 P2 ?x0 .\nM1 P3 ?x0 .\nM1 P4 ?x0 .\nM1 P5 ?x0\n}",
        "recursionDepth": 45,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P108 wd:Q174710 .\nwd:Q1453226 wdt:P57 ?x0 .\nwd:Q1453226 wdt:P1040 ?x0 .\nwd:Q1453226 wdt:P1431 ?x0 .\nwd:Q1453226 wdt:P162|wdt:P272 ?x0 .\nwd:Q1453226 wdt:P58 ?x0\n}",
        "questionWithBrackets": "Was [Teza] written by , directed by , produced by , edited by , and executive produced by a employee of [University of California, Los Angeles]"
    },
    {
        "questionIdx": 44512,
        "questionPatternModEntities": "Was M0 executive produced by M1 , written by M4 , produced by M5 , and executive produced by M2 and M3",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P0 M3 .\nM0 P1 M4 .\nM0 P2 M5\n}",
        "recursionDepth": 47,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q102438 wdt:P1431 wd:Q75079 .\nwd:Q102438 wdt:P1431 wd:Q1900360 .\nwd:Q102438 wdt:P1431 wd:Q11778321 .\nwd:Q102438 wdt:P162|wdt:P272 wd:Q319986 .\nwd:Q102438 wdt:P58 wd:Q362061\n}",
        "questionWithBrackets": "Was [Harry Potter and the Philosopher's Stone] executive produced by [Mark Radcliffe] , written by [Steve Kloves] , produced by [David Heyman] , and executive produced by [Chris Columbus] and [Michael Barnathan]"
    },
    {
        "questionIdx": 44558,
        "questionPatternModEntities": "Was M0 edited , directed , produced , and written by M1",
        "questionTemplate": "Was [entity] [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1 .\nM0 P2 M1 .\nM0 P3 M1\n}",
        "recursionDepth": 29,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q854990 wdt:P57 wd:Q8006 .\nwd:Q854990 wdt:P1040 wd:Q8006 .\nwd:Q854990 wdt:P162|wdt:P272 wd:Q8006 .\nwd:Q854990 wdt:P58 wd:Q8006\n}",
        "questionWithBrackets": "Was [Kagemusha] edited , directed , produced , and written by [Akira Kurosawa]"
    },
    {
        "questionIdx": 44568,
        "questionPatternModEntities": "Was M0 produced by M6 , executive produced by M1 and M2 , and executive produced by M3 , M4 , and M5",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] and [entity] , and [VP_SIMPLE] by [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P0 M3 .\nM0 P0 M4 .\nM0 P0 M5 .\nM0 P1 M6\n}",
        "recursionDepth": 45,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q13220443 wdt:P1431 wd:Q31820 .\nwd:Q13220443 wdt:P1431 wd:Q6163789 .\nwd:Q13220443 wdt:P1431 wd:Q5246313 .\nwd:Q13220443 wdt:P1431 wd:Q504720 .\nwd:Q13220443 wdt:P1431 wd:Q16730323 .\nwd:Q13220443 wdt:P162|wdt:P272 wd:Q2717612\n}",
        "questionWithBrackets": "Was [The Crazy Ones] produced by [20th Century Fox Television] , executive produced by [Bill D'Elia] and [Dean Lorey] , and executive produced by [David E. Kelley] , [John R. Montgomery] , and [Jason Winer]"
    },
    {
        "questionIdx": 44577,
        "questionPatternModEntities": "Was M1 's sibling 's sibling M0 's sibling",
        "questionTemplate": "Was [entity] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE] [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x0 P0 M0 .\n?x1 P0 M1 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x1 != M1 )\n}",
        "recursionDepth": 19,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P3373 ?x1 .\n?x0 wdt:P3373 wd:Q352 .\n?x1 wdt:P3373 wd:Q66225 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x0 != wd:Q352 ) .\nFILTER ( ?x1 != wd:Q66225 )\n}",
        "questionWithBrackets": "Was [Alois Hitler, Jr.] 's sibling 's sibling [Adolf Hitler] 's sibling"
    },
    {
        "questionIdx": 44582,
        "questionPatternModEntities": "Was M1 M0 's sibling 's male sibling",
        "questionTemplate": "Was [entity] [entity] 's [ROLE_SIMPLE] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( M1 != ?x0 ) .\nM1 P0 ?x0 .\nM1 P1 M2\n}",
        "recursionDepth": 20,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P3373 wd:Q352 .\nFILTER ( ?x0 != wd:Q352 ) .\nFILTER ( wd:Q66225 != ?x0 ) .\nwd:Q66225 wdt:P21 wd:Q6581097 .\nwd:Q66225 wdt:P3373 ?x0\n}",
        "questionWithBrackets": "Was [Alois Hitler, Jr.] [Adolf Hitler] 's sibling 's male sibling"
    },
    {
        "questionIdx": 44584,
        "questionPatternModEntities": "Was M2 M1 's female parent 's spouse and sibling",
        "questionTemplate": "Was [entity] [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] 's [ROLE_SIMPLE] and [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( M2 != ?x0 ) .\nFILTER ( M2 != ?x0 ) .\nM2 P2 ?x0 .\nM2 P3 ?x0\n}",
        "recursionDepth": 25,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q350246 .\n?x0 wdt:P21 wd:Q6581072 .\nFILTER ( wd:Q39938 != ?x0 ) .\nFILTER ( wd:Q39938 != ?x0 ) .\nwd:Q39938 wdt:P3373 ?x0 .\nwd:Q39938 wdt:P26 ?x0\n}",
        "questionWithBrackets": "Was [Ptolemy XIII Theos Philopator] [Ptolemy Philadelphus] 's female parent 's spouse and sibling"
    },
    {
        "questionIdx": 44585,
        "questionPatternModEntities": "Was M2 's male spouse M0 's spouse and sibling",
        "questionTemplate": "Was [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] [entity] 's [ROLE_SIMPLE] and [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P2 M0 .\n?x0 P2 M2 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x0 != M2 )\n}",
        "recursionDepth": 25,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P21 wd:Q6581097 .\n?x0 wdt:P3373 wd:Q40234 .\n?x0 wdt:P26 wd:Q231668 .\n?x0 wdt:P26 wd:Q40234 .\nFILTER ( ?x0 != wd:Q231668 ) .\nFILTER ( ?x0 != wd:Q40234 ) .\nFILTER ( ?x0 != wd:Q40234 )\n}",
        "questionWithBrackets": "Was [Arsinoe I] 's male spouse [Arsinoe II] 's spouse and sibling"
    },
    {
        "questionIdx": 44622,
        "questionPatternModEntities": "Was M0 written , directed , and executive produced by M1 , M2 , and M3",
        "questionTemplate": "Was [entity] [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P0 M3 .\nM0 P1 M1 .\nM0 P1 M2 .\nM0 P1 M3 .\nM0 P2 M1 .\nM0 P2 M2 .\nM0 P2 M3\n}",
        "recursionDepth": 32,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q497256 wdt:P57 wd:Q363666 .\nwd:Q497256 wdt:P57 wd:Q448604 .\nwd:Q497256 wdt:P57 wd:Q452794 .\nwd:Q497256 wdt:P1431 wd:Q363666 .\nwd:Q497256 wdt:P1431 wd:Q448604 .\nwd:Q497256 wdt:P1431 wd:Q452794 .\nwd:Q497256 wdt:P58 wd:Q363666 .\nwd:Q497256 wdt:P58 wd:Q448604 .\nwd:Q497256 wdt:P58 wd:Q452794\n}",
        "questionWithBrackets": "Was [Airplane!] written , directed , and executive produced by [Jim Abrahams] , [David Zucker] , and [Jerry Zucker]"
    },
    {
        "questionIdx": 44627,
        "questionPatternModEntities": "Was M0 M2 's Dutch spouse",
        "questionTemplate": "Was [entity] [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\nFILTER ( M0 != M2 ) .\nM0 P0 M1 .\nM0 P1 M2\n}",
        "recursionDepth": 16,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nFILTER ( wd:Q190794 != wd:Q64638 ) .\nwd:Q190794 wdt:P27 wd:Q29999 .\nwd:Q190794 wdt:P26 wd:Q64638\n}",
        "questionWithBrackets": "Was [Famke Janssen] [Kip Williams] 's Dutch spouse"
    },
    {
        "questionIdx": 44634,
        "questionPatternModEntities": "Was M0 produced , written , and executive produced by M1",
        "questionTemplate": "Was [entity] [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1 .\nM0 P2 M1\n}",
        "recursionDepth": 25,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q854990 wdt:P1431 wd:Q8006 .\nwd:Q854990 wdt:P162|wdt:P272 wd:Q8006 .\nwd:Q854990 wdt:P58 wd:Q8006\n}",
        "questionWithBrackets": "Was [Kagemusha] produced , written , and executive produced by [Akira Kurosawa]"
    },
    {
        "questionIdx": 44641,
        "questionPatternModEntities": "Was M3 's Italian German parent M0",
        "questionTemplate": "Was [entity] 's [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P1 M3\n}",
        "recursionDepth": 21,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q97037 wdt:P40|wdt:P355 wd:Q437336 .\nwd:Q97037 wdt:P27 wd:Q183 .\nwd:Q97037 wdt:P27 wd:Q38\n}",
        "questionWithBrackets": "Was [Eva Klotz] 's Italian German parent [Georg Klotz]"
    },
    {
        "questionIdx": 44642,
        "questionPatternModEntities": "Was M0 a Italian Dutch female spouse of M4",
        "questionTemplate": "Was [entity] a [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nFILTER ( M0 != M4 ) .\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P1 M3 .\nM0 P2 M4\n}",
        "recursionDepth": 28,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nFILTER ( wd:Q240527 != wd:Q1398564 ) .\nwd:Q240527 wdt:P21 wd:Q6581072 .\nwd:Q240527 wdt:P27 wd:Q38 .\nwd:Q240527 wdt:P27 wd:Q29999 .\nwd:Q240527 wdt:P26 wd:Q1398564\n}",
        "questionWithBrackets": "Was [Laura Gemser] a Italian Dutch female spouse of [Gabriele Tinti]"
    },
    {
        "questionIdx": 44645,
        "questionPatternModEntities": "Was M0 a male spouse of M2",
        "questionTemplate": "Was [entity] a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nFILTER ( M0 != M2 ) .\nM0 P0 M1 .\nM0 P1 M2\n}",
        "recursionDepth": 18,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nFILTER ( wd:Q1174489 != wd:Q2808 ) .\nwd:Q1174489 wdt:P21 wd:Q6581097 .\nwd:Q1174489 wdt:P26 wd:Q2808\n}",
        "questionWithBrackets": "Was [David Furnish] a male spouse of [Elton John]"
    },
    {
        "questionIdx": 44696,
        "questionPatternModEntities": "Was M1 founded by M2 and founded by M0 's child",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 ?x0 .\nM1 P1 M2\n}",
        "recursionDepth": 27,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P749 wd:Q20800404 .\nwd:Q42274 wdt:P112 ?x0 .\nwd:Q42274 wdt:P112 wd:Q95\n}",
        "questionWithBrackets": "Was [Google Earth] founded by [Google] and founded by [Alphabet Inc.] 's child"
    },
    {
        "questionIdx": 44698,
        "questionPatternModEntities": "Was M0 's employee influenced by M1",
        "questionTemplate": "Was [entity] 's [ROLE_SIMPLE] [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1\n}",
        "recursionDepth": 16,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P737 wd:Q868 .\n?x0 wdt:P108 wd:Q81162\n}",
        "questionWithBrackets": "Was [Magdalen College] 's employee influenced by [Aristotle]"
    },
    {
        "questionIdx": 44707,
        "questionPatternModEntities": "Was M1 's French Dutch sibling M0",
        "questionTemplate": "Was [entity] 's [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nFILTER ( M0 != M1 ) .\nM0 P0 M1 .\nM0 P1 M2 .\nM0 P1 M3\n}",
        "recursionDepth": 21,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nFILTER ( wd:Q69776 != wd:Q94757521 ) .\nwd:Q69776 wdt:P27 wd:Q29999 .\nwd:Q69776 wdt:P27 wd:Q142 .\nwd:Q69776 wdt:P3373 wd:Q94757521\n}",
        "questionWithBrackets": "Was [Berthe Krull] 's French Dutch sibling [Germaine Krull]"
    },
    {
        "questionIdx": 44715,
        "questionPatternModEntities": "Was M2 executive produced by M0 's Japanese employee , produced by M3 , and edited by M4",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nM2 P2 ?x0 .\nM2 P3 M3 .\nM2 P4 M4\n}",
        "recursionDepth": 42,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P108 wd:Q1051884 .\n?x0 wdt:P27 wd:Q17 .\nwd:Q1045889 wdt:P1040 wd:Q1379022 .\nwd:Q1045889 wdt:P1431 ?x0 .\nwd:Q1045889 wdt:P162|wdt:P272 wd:Q182950\n}",
        "questionWithBrackets": "Was [Only Yesterday] executive produced by [Nippon Animation] 's Japanese employee , produced by [Studio Ghibli] , and edited by [Takeshi Seyama]"
    },
    {
        "questionIdx": 44739,
        "questionPatternModEntities": "Was M0 written by and executive produced by M1 , M2 , M3 , and M4",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by and [VP_SIMPLE] by [entity] , [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P0 M3 .\nM0 P0 M4 .\nM0 P1 M1 .\nM0 P1 M2 .\nM0 P1 M3 .\nM0 P1 M4\n}",
        "recursionDepth": 31,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q23567 wdt:P1431 wd:Q713912 .\nwd:Q23567 wdt:P1431 wd:Q1134799 .\nwd:Q23567 wdt:P1431 wd:Q443440 .\nwd:Q23567 wdt:P1431 wd:Q2395333 .\nwd:Q23567 wdt:P58 wd:Q713912 .\nwd:Q23567 wdt:P58 wd:Q1134799 .\nwd:Q23567 wdt:P58 wd:Q443440 .\nwd:Q23567 wdt:P58 wd:Q2395333\n}",
        "questionWithBrackets": "Was [Lost] written by and executive produced by [Carlton Cuse] , [Elizabeth Sarnoff] , [Adam Horowitz] , and [Edward Kitsis]"
    },
    {
        "questionIdx": 44757,
        "questionPatternModEntities": "Was M2 influenced by a American spouse of M1 and influenced by M3 and M4",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M1 ) .\nM2 P2 ?x0 .\nM2 P2 M3 .\nM2 P2 M4\n}",
        "recursionDepth": 38,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P27 wd:Q30 .\n?x0 wdt:P26 wd:Q234773 .\nFILTER ( ?x0 != wd:Q234773 ) .\nwd:Q1299 wdt:P737 ?x0 .\nwd:Q1299 wdt:P737 wd:Q303 .\nwd:Q1299 wdt:P737 wd:Q255\n}",
        "questionWithBrackets": "Was [The Beatles] influenced by a American spouse of [Priscilla Presley] and influenced by [Elvis Presley] and [Ludwig van Beethoven]"
    },
    {
        "questionIdx": 44774,
        "questionPatternModEntities": "Was M0 a Mexican employee of M1 and M2",
        "questionTemplate": "Was [entity] a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P1 M3\n}",
        "recursionDepth": 22,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q274060 wdt:P108 wd:Q222738 .\nwd:Q274060 wdt:P108 wd:Q5018694 .\nwd:Q274060 wdt:P27 wd:Q96\n}",
        "questionWithBrackets": "Was [Margo Glantz] a Mexican employee of [Montclair State University] and [National Autonomous University of Mexico]"
    },
    {
        "questionIdx": 44825,
        "questionPatternModEntities": "Was M1 influenced by M0 's parent and sibling and influenced by M2",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] and [ROLE_SIMPLE] and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M0 .\nFILTER ( ?x0 != M0 ) .\nM1 P2 ?x0 .\nM1 P2 M2\n}",
        "recursionDepth": 32,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q42175155 .\n?x0 wdt:P3373 wd:Q42175155 .\nFILTER ( ?x0 != wd:Q42175155 ) .\nwd:Q40826 wdt:P737 ?x0 .\nwd:Q40826 wdt:P737 wd:Q9358\n}",
        "questionWithBrackets": "Was [Knut Hamsun] influenced by [Greta Strindberg] 's parent and sibling and influenced by [Friedrich Nietzsche]"
    },
    {
        "questionIdx": 44826,
        "questionPatternModEntities": "Was M1 influenced by M0 's sibling and parent",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] and [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M0 .\nFILTER ( ?x0 != M0 ) .\nM1 P2 ?x0\n}",
        "recursionDepth": 21,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q42175155 .\n?x0 wdt:P3373 wd:Q42175155 .\nFILTER ( ?x0 != wd:Q42175155 ) .\nwd:Q36661 wdt:P737 ?x0\n}",
        "questionWithBrackets": "Was [Henrik Ibsen] influenced by [Greta Strindberg] 's sibling and parent"
    },
    {
        "questionIdx": 44828,
        "questionPatternModEntities": "Was M1 influenced by M2 and M3 and influenced by M0 's parent and sibling",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] and [entity] and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] and [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M0 .\nFILTER ( ?x0 != M0 ) .\nM1 P2 ?x0 .\nM1 P2 M2 .\nM1 P2 M3\n}",
        "recursionDepth": 36,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q42175155 .\n?x0 wdt:P3373 wd:Q42175155 .\nFILTER ( ?x0 != wd:Q42175155 ) .\nwd:Q134456 wdt:P737 ?x0 .\nwd:Q134456 wdt:P737 wd:Q81731 .\nwd:Q134456 wdt:P737 wd:Q7724\n}",
        "questionWithBrackets": "Was [Yukio Mishima] influenced by [Murasaki Shikibu] and [August Strindberg] and influenced by [Greta Strindberg] 's parent and sibling"
    },
    {
        "questionIdx": 44830,
        "questionPatternModEntities": "Was M1 influenced by M2 and influenced by M0 's parent and sibling",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] and [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M0 .\nFILTER ( ?x0 != M0 ) .\nM1 P2 ?x0 .\nM1 P2 M2\n}",
        "recursionDepth": 32,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q42175155 .\n?x0 wdt:P3373 wd:Q42175155 .\nFILTER ( ?x0 != wd:Q42175155 ) .\nwd:Q40826 wdt:P737 ?x0 .\nwd:Q40826 wdt:P737 wd:Q9358\n}",
        "questionWithBrackets": "Was [Knut Hamsun] influenced by [Friedrich Nietzsche] and influenced by [Greta Strindberg] 's parent and sibling"
    },
    {
        "questionIdx": 44833,
        "questionPatternModEntities": "Was M1 influenced by M2 and influenced by M0 's sibling and parent",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] and [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M0 .\nFILTER ( ?x0 != M0 ) .\nM1 P2 ?x0 .\nM1 P2 M2\n}",
        "recursionDepth": 32,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q42175155 .\n?x0 wdt:P3373 wd:Q42175155 .\nFILTER ( ?x0 != wd:Q42175155 ) .\nwd:Q36661 wdt:P737 ?x0 .\nwd:Q36661 wdt:P737 wd:Q6512\n}",
        "questionWithBrackets": "Was [Henrik Ibsen] influenced by [S\u00f8ren Kierkegaard] and influenced by [Greta Strindberg] 's sibling and parent"
    },
    {
        "questionIdx": 44839,
        "questionPatternModEntities": "Was M1 influenced by a sibling and parent of M0",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by a [ROLE_SIMPLE] and [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M0 .\nFILTER ( ?x0 != M0 ) .\nM1 P2 ?x0\n}",
        "recursionDepth": 23,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q42175155 .\n?x0 wdt:P3373 wd:Q42175155 .\nFILTER ( ?x0 != wd:Q42175155 ) .\nwd:Q36661 wdt:P737 ?x0\n}",
        "questionWithBrackets": "Was [Henrik Ibsen] influenced by a sibling and parent of [Greta Strindberg]"
    },
    {
        "questionIdx": 44853,
        "questionPatternModEntities": "Was M2 a actor of M1 's female spouse",
        "questionTemplate": "Was [entity] a [ROLE_SIMPLE] of [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M1 ) .\nM2 P2 ?x0\n}",
        "recursionDepth": 22,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P21 wd:Q6581072 .\n?x0 wdt:P26 wd:Q223468 .\nFILTER ( ?x0 != wd:Q223468 ) .\nwd:Q294975 wdt:P453 ?x0\n}",
        "questionWithBrackets": "Was [Miranda Otto] a actor of [Faramir] 's female spouse"
    },
    {
        "questionIdx": 44876,
        "questionPatternModEntities": "Was M0 a Canadian male Mexican parent of M4",
        "questionTemplate": "Was [entity] a [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P1 M3 .\nM0 P2 M4\n}",
        "recursionDepth": 28,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q530824 wdt:P40|wdt:P355 wd:Q24954423 .\nwd:Q530824 wdt:P21 wd:Q6581097 .\nwd:Q530824 wdt:P27 wd:Q96 .\nwd:Q530824 wdt:P27 wd:Q16\n}",
        "questionWithBrackets": "Was [Alex Phillips] a Canadian male Mexican parent of [Alex Phillips Jr.]"
    },
    {
        "questionIdx": 44877,
        "questionPatternModEntities": "Was M0 a Mexican Canadian parent of M3",
        "questionTemplate": "Was [entity] a [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P1 M3\n}",
        "recursionDepth": 23,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q530824 wdt:P40|wdt:P355 wd:Q24954423 .\nwd:Q530824 wdt:P27 wd:Q96 .\nwd:Q530824 wdt:P27 wd:Q16\n}",
        "questionWithBrackets": "Was [Alex Phillips] a Mexican Canadian parent of [Alex Phillips Jr.]"
    },
    {
        "questionIdx": 44930,
        "questionPatternModEntities": "Was M2 's parent influenced by M0 and M1",
        "questionTemplate": "Was [entity] 's [ROLE_SIMPLE] [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P1 M2\n}",
        "recursionDepth": 20,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P737 wd:Q255 .\n?x0 wdt:P737 wd:Q1339 .\n?x0 wdt:P40|wdt:P355 wd:Q28653656\n}",
        "questionWithBrackets": "Was [Sebastian Hensel] 's parent influenced by [Ludwig van Beethoven] and [Johann Sebastian Bach]"
    },
    {
        "questionIdx": 44995,
        "questionPatternModEntities": "Was M4 M3 's Mexican male Canadian parent 's spouse",
        "questionTemplate": "Was [entity] [entity] 's [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P1 M2 .\n?x0 P2 M3 .\nFILTER ( M4 != ?x0 ) .\nM4 P3 ?x0\n}",
        "recursionDepth": 30,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q55446409 .\n?x0 wdt:P21 wd:Q6581097 .\n?x0 wdt:P27 wd:Q96 .\n?x0 wdt:P27 wd:Q16 .\nFILTER ( wd:Q27445213 != ?x0 ) .\nwd:Q27445213 wdt:P26 ?x0\n}",
        "questionWithBrackets": "Was [Jane Carrey] [Jackson Santana] 's Mexican male Canadian parent 's spouse"
    },
    {
        "questionIdx": 45034,
        "questionPatternModEntities": "Was M0 executive produced by M1 and M2 , directed by M5 , produced by M4 , and executive produced by M3",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] and [entity] , [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P0 M3 .\nM0 P1 M4 .\nM0 P2 M5\n}",
        "recursionDepth": 47,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q3077738 wdt:P57 wd:Q193628 .\nwd:Q3077738 wdt:P1431 wd:Q56094 .\nwd:Q3077738 wdt:P1431 wd:Q5223835 .\nwd:Q3077738 wdt:P1431 wd:Q2675693 .\nwd:Q3077738 wdt:P162|wdt:P272 wd:Q64764402\n}",
        "questionWithBrackets": "Was [The Bling Ring] executive produced by [Fred Roos] and [Darlene Caama\u00f1o] , directed by [Sofia Coppola] , produced by [Youree Henley] , and executive produced by [Francis Ford Coppola]"
    },
    {
        "questionIdx": 45077,
        "questionPatternModEntities": "Was M1 directed by M3 , M4 , and M5 , executive produced by a sibling of M0 , and edited by M2",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] , [entity] , and [entity] , [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nM1 P1 ?x0 .\nM1 P2 M2 .\nM1 P3 M3 .\nM1 P3 M4 .\nM1 P3 M5\n}",
        "recursionDepth": 46,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P3373 wd:Q104161 .\nFILTER ( ?x0 != wd:Q104161 ) .\nwd:Q1304891 wdt:P57 wd:Q983092 .\nwd:Q1304891 wdt:P57 wd:Q1349886 .\nwd:Q1304891 wdt:P57 wd:Q72756 .\nwd:Q1304891 wdt:P1040 wd:Q17306788 .\nwd:Q1304891 wdt:P1431 ?x0\n}",
        "questionWithBrackets": "Was [San Antonio] directed by [David Butler] , [Robert Florey] , and [Raoul Walsh] , executive produced by a sibling of [Harry Warner] , and edited by [Irene Morra]"
    },
    {
        "questionIdx": 45091,
        "questionPatternModEntities": "Was M1 edited by M3 , M4 , and M5 , produced by M2 , and executive produced by M0 's sibling",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] , [entity] , and [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nM1 P1 ?x0 .\nM1 P2 M2 .\nM1 P3 M3 .\nM1 P3 M4 .\nM1 P3 M5\n}",
        "recursionDepth": 44,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P3373 wd:Q4820677 .\nFILTER ( ?x0 != wd:Q4820677 ) .\nwd:Q1740171 wdt:P1040 wd:Q614630 .\nwd:Q1740171 wdt:P1040 wd:Q15835006 .\nwd:Q1740171 wdt:P1040 wd:Q7820333 .\nwd:Q1740171 wdt:P1431 ?x0 .\nwd:Q1740171 wdt:P162|wdt:P272 wd:Q242446\n}",
        "questionWithBrackets": "Was [Mishima: A Life in Four Chapters] edited by [Tomoyo \u014cshima] , [Michael Chandler] , and [Michael Chandler] , produced by [Lucasfilm] , and executive produced by [August Coppola] 's sibling"
    },
    {
        "questionIdx": 45095,
        "questionPatternModEntities": "Was M0 edited by M2 , edited by M3 , edited by M4 , and produced by M1",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M2 .\nM0 P1 M3 .\nM0 P1 M4\n}",
        "recursionDepth": 41,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q1137372 wdt:P1040 wd:Q47284 .\nwd:Q1137372 wdt:P1040 wd:Q273379 .\nwd:Q1137372 wdt:P1040 wd:Q541143 .\nwd:Q1137372 wdt:P162|wdt:P272 wd:Q514913\n}",
        "questionWithBrackets": "Was [Four Rooms] edited by [Robert Rodriguez] , edited by [Terry Rawlings] , edited by [Sally Menke] , and produced by [Lawrence Bender]"
    },
    {
        "questionIdx": 45099,
        "questionPatternModEntities": "Was M0 executive produced by M1 , M2 , and M3 , produced by M4 , and edited by M5 , M6 , and M7",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] , [entity] , and [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P0 M3 .\nM0 P1 M4 .\nM0 P2 M5 .\nM0 P2 M6 .\nM0 P2 M7\n}",
        "recursionDepth": 47,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q20630763 wdt:P1040 wd:Q20722014 .\nwd:Q20630763 wdt:P1040 wd:Q20722018 .\nwd:Q20630763 wdt:P1040 wd:Q20722019 .\nwd:Q20630763 wdt:P1431 wd:Q350405 .\nwd:Q20630763 wdt:P1431 wd:Q20722010 .\nwd:Q20630763 wdt:P1431 wd:Q20722012 .\nwd:Q20630763 wdt:P162|wdt:P272 wd:Q20721968\n}",
        "questionWithBrackets": "Was [The Yes Men Are Revolting] executive produced by [Alex Cooke] , [Adam McKay] , and [Alan Hayling] , produced by [No label defined] , and edited by [Steven Simone-Friedland] , [Todd Woody Richman] , and [Claire L. Chandler]"
    },
    {
        "questionIdx": 45136,
        "questionPatternModEntities": "Was M1 a parent of a spouse of M0",
        "questionTemplate": "Was [entity] a [ROLE_SIMPLE] of a [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nM1 P1 ?x0\n}",
        "recursionDepth": 19,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P26 wd:Q2259 .\nFILTER ( ?x0 != wd:Q2259 ) .\nwd:Q2165262 wdt:P40|wdt:P355 ?x0\n}",
        "questionWithBrackets": "Was [Marcus Gallius] a parent of a spouse of [Julia the Elder]"
    },
    {
        "questionIdx": 45163,
        "questionPatternModEntities": "Was M3 founded by M0 's German female employee",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P2 M2 .\nM3 P3 ?x0\n}",
        "recursionDepth": 26,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P108 wd:Q26882567 .\n?x0 wdt:P21 wd:Q6581072 .\n?x0 wdt:P27 wd:Q183 .\nwd:Q1371235 wdt:P112 ?x0\n}",
        "questionWithBrackets": "Was [No label defined] founded by [No label defined] 's German female employee"
    },
    {
        "questionIdx": 45189,
        "questionPatternModEntities": "Was M0 produced , directed , and edited by M1 and M2",
        "questionTemplate": "Was [entity] [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P1 M1 .\nM0 P1 M2 .\nM0 P2 M1 .\nM0 P2 M2\n}",
        "recursionDepth": 28,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q20729551 wdt:P57 wd:Q562108 .\nwd:Q20729551 wdt:P57 wd:Q1687239 .\nwd:Q20729551 wdt:P1040 wd:Q562108 .\nwd:Q20729551 wdt:P1040 wd:Q1687239 .\nwd:Q20729551 wdt:P162|wdt:P272 wd:Q562108 .\nwd:Q20729551 wdt:P162|wdt:P272 wd:Q1687239\n}",
        "questionWithBrackets": "Was [Stop for Bud] produced , directed , and edited by [J\u00f8rgen Leth] and [Jens J\u00f8rgen Thorsen]"
    },
    {
        "questionIdx": 45223,
        "questionPatternModEntities": "Was M1 's Chinese sibling M0",
        "questionTemplate": "Was [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nFILTER ( M0 != M1 ) .\nM0 P0 M1 .\nM0 P1 M2\n}",
        "recursionDepth": 16,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nFILTER ( wd:Q197324 != wd:Q48936751 ) .\nwd:Q197324 wdt:P27 wd:Q148 .\nwd:Q197324 wdt:P3373 wd:Q48936751\n}",
        "questionWithBrackets": "Was [Zhang Shiming] 's Chinese sibling [Zhang Yihe]"
    },
    {
        "questionIdx": 45225,
        "questionPatternModEntities": "Was M1 a child of M0 's spouse",
        "questionTemplate": "Was [entity] a [ROLE_SIMPLE] of [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nM1 P1 ?x0\n}",
        "recursionDepth": 17,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P26 wd:Q40858679 .\nFILTER ( ?x0 != wd:Q40858679 ) .\nwd:Q642212 wdt:P749 ?x0\n}",
        "questionWithBrackets": "Was [F. W. Woolworth Company] a child of [Jennie Creighton] 's spouse"
    },
    {
        "questionIdx": 45267,
        "questionPatternModEntities": "Was M2 founded by a parent of M0 and founded by a spouse of M1",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity] and [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x1 P1 M1 .\nFILTER ( ?x1 != M1 ) .\nM2 P2 ?x0 .\nM2 P2 ?x1\n}",
        "recursionDepth": 35,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q106204654 .\n?x1 wdt:P26 wd:Q13564310 .\nFILTER ( ?x1 != wd:Q13564310 ) .\nwd:Q367 wdt:P112 ?x0 .\nwd:Q367 wdt:P112 ?x1\n}",
        "questionWithBrackets": "Was [Wikibooks] founded by a parent of [Wikimedia, LLC] and founded by a spouse of [Kate Garvey]"
    },
    {
        "questionIdx": 45305,
        "questionPatternModEntities": "Was M1 a female American spouse of a sibling of M0",
        "questionTemplate": "Was [entity] a [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of a [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( M1 != ?x0 ) .\nM1 P1 M2 .\nM1 P2 M3 .\nM1 P3 ?x0\n}",
        "recursionDepth": 29,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P3373 wd:Q2263 .\nFILTER ( ?x0 != wd:Q2263 ) .\nFILTER ( wd:Q64702064 != ?x0 ) .\nwd:Q64702064 wdt:P21 wd:Q6581072 .\nwd:Q64702064 wdt:P27 wd:Q30 .\nwd:Q64702064 wdt:P26 ?x0\n}",
        "questionWithBrackets": "Was [Karen Praxel] a female American spouse of a sibling of [Tom Hanks]"
    },
    {
        "questionIdx": 45344,
        "questionPatternModEntities": "Was M1 edited by M0 's employee",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 ?x0\n}",
        "recursionDepth": 16,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P108 wd:Q141336 .\nwd:Q281988 wdt:P1040 ?x0\n}",
        "questionWithBrackets": "Was [The Sacrifice] edited by [Mosfilm] 's employee"
    },
    {
        "questionIdx": 45372,
        "questionPatternModEntities": "Was M0 's French employee employed by M1 and M2",
        "questionTemplate": "Was [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P1 M3\n}",
        "recursionDepth": 25,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P108 wd:Q209842 .\n?x0 wdt:P108 wd:Q214654 .\n?x0 wdt:P108 wd:Q2451973 .\n?x0 wdt:P27 wd:Q142\n}",
        "questionWithBrackets": "Was [Sorbonne] 's French employee employed by [Curie Institute] and [University of Paris]"
    },
    {
        "questionIdx": 45435,
        "questionPatternModEntities": "Was M3 edited by M2 's parent and written by a Mexican sibling of M0",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] and [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x1 P2 M2 .\nFILTER ( ?x0 != M0 ) .\nM3 P3 ?x0 .\nM3 P4 ?x1\n}",
        "recursionDepth": 38,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P27 wd:Q96 .\n?x0 wdt:P3373 wd:Q2840325 .\n?x1 wdt:P40|wdt:P355 wd:Q15142000 .\nFILTER ( ?x0 != wd:Q2840325 ) .\nwd:Q128848 wdt:P1040 ?x1 .\nwd:Q128848 wdt:P58 ?x0\n}",
        "questionWithBrackets": "Was [Y tu mam\u00e1 tambi\u00e9n] edited by [Jon\u00e1s Cuar\u00f3n] 's parent and written by a Mexican sibling of [Carlos Cuar\u00f3n]"
    },
    {
        "questionIdx": 45437,
        "questionPatternModEntities": "Was M0 a Spanish Dutch sibling of M1",
        "questionTemplate": "Was [entity] a [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nFILTER ( M0 != M1 ) .\nM0 P0 M1 .\nM0 P1 M2 .\nM0 P1 M3\n}",
        "recursionDepth": 23,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nFILTER ( wd:Q723001 != wd:Q3780525 ) .\nwd:Q723001 wdt:P27 wd:Q29999 .\nwd:Q723001 wdt:P27 wd:Q29 .\nwd:Q723001 wdt:P3373 wd:Q3780525\n}",
        "questionWithBrackets": "Was [Aschwin Wildeboer] a Spanish Dutch sibling of [Olaf Wildeboer]"
    },
    {
        "questionIdx": 45439,
        "questionPatternModEntities": "Was M0 's sibling 's sibling M1",
        "questionTemplate": "Was [entity] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( M1 != ?x0 ) .\nM1 P0 ?x0\n}",
        "recursionDepth": 15,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P3373 wd:Q3008 .\nFILTER ( ?x0 != wd:Q3008 ) .\nFILTER ( wd:Q975209 != ?x0 ) .\nwd:Q975209 wdt:P3373 ?x0\n}",
        "questionWithBrackets": "Was [Mike Oldfield] 's sibling 's sibling [Terry Oldfield]"
    },
    {
        "questionIdx": 45485,
        "questionPatternModEntities": "Was M2 directed , edited , and produced by a Mexican sibling of M0",
        "questionTemplate": "Was [entity] [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M0 ) .\nM2 P2 ?x0 .\nM2 P3 ?x0 .\nM2 P4 ?x0\n}",
        "recursionDepth": 35,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P27 wd:Q96 .\n?x0 wdt:P3373 wd:Q2840325 .\nFILTER ( ?x0 != wd:Q2840325 ) .\nwd:Q2579784 wdt:P57 ?x0 .\nwd:Q2579784 wdt:P1040 ?x0 .\nwd:Q2579784 wdt:P162|wdt:P272 ?x0\n}",
        "questionWithBrackets": "Was [Gravity] directed , edited , and produced by a Mexican sibling of [Carlos Cuar\u00f3n]"
    },
    {
        "questionIdx": 45487,
        "questionPatternModEntities": "Was M2 edited by and directed by M0 's Mexican sibling",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by and [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M0 ) .\nM2 P2 ?x0 .\nM2 P3 ?x0\n}",
        "recursionDepth": 29,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P27 wd:Q96 .\n?x0 wdt:P3373 wd:Q2840325 .\nFILTER ( ?x0 != wd:Q2840325 ) .\nwd:Q128848 wdt:P57 ?x0 .\nwd:Q128848 wdt:P1040 ?x0\n}",
        "questionWithBrackets": "Was [Y tu mam\u00e1 tambi\u00e9n] edited by and directed by [Carlos Cuar\u00f3n] 's Mexican sibling"
    },
    {
        "questionIdx": 45490,
        "questionPatternModEntities": "Was M2 edited , produced , and written by M0 's Mexican sibling",
        "questionTemplate": "Was [entity] [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M0 ) .\nM2 P2 ?x0 .\nM2 P3 ?x0 .\nM2 P4 ?x0\n}",
        "recursionDepth": 33,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P27 wd:Q96 .\n?x0 wdt:P3373 wd:Q2840325 .\nFILTER ( ?x0 != wd:Q2840325 ) .\nwd:Q2579784 wdt:P1040 ?x0 .\nwd:Q2579784 wdt:P162|wdt:P272 ?x0 .\nwd:Q2579784 wdt:P58 ?x0\n}",
        "questionWithBrackets": "Was [Gravity] edited , produced , and written by [Carlos Cuar\u00f3n] 's Mexican sibling"
    },
    {
        "questionIdx": 45493,
        "questionPatternModEntities": "Was M2 written and edited by a Mexican sibling of M0",
        "questionTemplate": "Was [entity] [VP_SIMPLE] and [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M0 ) .\nM2 P2 ?x0 .\nM2 P3 ?x0\n}",
        "recursionDepth": 30,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P27 wd:Q96 .\n?x0 wdt:P3373 wd:Q2840325 .\nFILTER ( ?x0 != wd:Q2840325 ) .\nwd:Q128848 wdt:P1040 ?x0 .\nwd:Q128848 wdt:P58 ?x0\n}",
        "questionWithBrackets": "Was [Y tu mam\u00e1 tambi\u00e9n] written and edited by a Mexican sibling of [Carlos Cuar\u00f3n]"
    },
    {
        "questionIdx": 45501,
        "questionPatternModEntities": "Was M2 written by , directed by , and edited by a Dutch sibling of M0",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M0 ) .\nM2 P2 ?x0 .\nM2 P3 ?x0 .\nM2 P4 ?x0\n}",
        "recursionDepth": 37,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P27 wd:Q29999 .\n?x0 wdt:P3373 wd:Q27032273 .\nFILTER ( ?x0 != wd:Q27032273 ) .\nwd:Q2238758 wdt:P57 ?x0 .\nwd:Q2238758 wdt:P1040 ?x0 .\nwd:Q2238758 wdt:P58 ?x0\n}",
        "questionWithBrackets": "Was [The Family of Chimps] written by , directed by , and edited by a Dutch sibling of [Johan Haanstra]"
    },
    {
        "questionIdx": 45509,
        "questionPatternModEntities": "Was M2 directed by M4 , executive produced by M3 , and written by M0 's British sibling",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M0 ) .\nM2 P2 M3 .\nM2 P3 ?x0 .\nM2 P4 M4\n}",
        "recursionDepth": 42,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P27 wd:Q145 .\n?x0 wdt:P3373 wd:Q556941 .\nFILTER ( ?x0 != wd:Q556941 ) .\nwd:Q7152308 wdt:P57 wd:Q41330312 .\nwd:Q7152308 wdt:P1431 wd:Q2599 .\nwd:Q7152308 wdt:P58 ?x0\n}",
        "questionWithBrackets": "Was [Paul McCartney: Music & Animation] directed by [Geoff Dunbar] , executive produced by [Paul McCartney] , and written by [Mike McGear] 's British sibling"
    },
    {
        "questionIdx": 45510,
        "questionPatternModEntities": "Was M1 executive produced by M2 and executive produced by M0 's employee",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 ?x0 .\nM1 P1 M2\n}",
        "recursionDepth": 29,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P108 wd:Q740308 .\nwd:Q50969 wdt:P1431 ?x0 .\nwd:Q50969 wdt:P1431 wd:Q28493\n}",
        "questionWithBrackets": "Was [Onegin] executive produced by [Ralph Fiennes] and executive produced by [UNICEF] 's employee"
    },
    {
        "questionIdx": 45526,
        "questionPatternModEntities": "Was M1 distributed by M2 and distributed by a child of M0",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] and [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 ?x0 .\nM1 P1 M2\n}",
        "recursionDepth": 29,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P749 wd:Q2283 .\nwd:Q283878 wdt:P750 ?x0 .\nwd:Q283878 wdt:P750 wd:Q73801\n}",
        "questionWithBrackets": "Was [Halo: Reach] distributed by [Xbox Game Studios] and distributed by a child of [Microsoft]"
    },
    {
        "questionIdx": 45529,
        "questionPatternModEntities": "Was M2 written by M4 and M5 , executive produced by M3 , and directed by M0 's Swedish sibling 's parent",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] and [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x1 P1 M0 .\n?x1 P2 M1 .\nFILTER ( ?x1 != M0 ) .\nM2 P3 M3 .\nM2 P4 M4 .\nM2 P4 M5 .\nM2 P5 ?x0\n}",
        "recursionDepth": 50,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 ?x1 .\n?x1 wdt:P27 wd:Q34 .\n?x1 wdt:P3373 wd:Q508325 .\nFILTER ( ?x1 != wd:Q508325 ) .\nwd:Q540624 wdt:P57 ?x0 .\nwd:Q540624 wdt:P1431 wd:Q520399 .\nwd:Q540624 wdt:P58 wd:Q53003 .\nwd:Q540624 wdt:P58 wd:Q26208\n}",
        "questionWithBrackets": "Was [Germany, Year Zero] written by [Carlo Lizzani] and [Roberto Rossellini] , executive produced by [Alfredo Guarini] , and directed by [Pia Lindstr\u00f6m] 's Swedish sibling 's parent"
    },
    {
        "questionIdx": 45534,
        "questionPatternModEntities": "Was M1 M0 's actor 's female actor",
        "questionTemplate": "Was [entity] [entity] 's [ROLE_SIMPLE] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P0 ?x0 .\nM1 P1 M2\n}",
        "recursionDepth": 20,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P453 wd:Q105565656 .\nwd:Q105565856 wdt:P453 ?x0 .\nwd:Q105565856 wdt:P21 wd:Q6581072\n}",
        "questionWithBrackets": "Was [No label defined] [No label defined] 's actor 's female actor"
    },
    {
        "questionIdx": 45538,
        "questionPatternModEntities": "Was M1 M0 's employee 's actor",
        "questionTemplate": "Was [entity] [entity] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 ?x0\n}",
        "recursionDepth": 15,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P108 wd:Q86105647 .\nwd:Q37269398 wdt:P453 ?x0\n}",
        "questionWithBrackets": "Was [Jonathan Evans-Jones] [No label defined] 's employee 's actor"
    },
    {
        "questionIdx": 45544,
        "questionPatternModEntities": "Was M0 's Spanish sibling influenced by M1 and M2",
        "questionTemplate": "Was [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\n?x0 P2 M3 .\nFILTER ( ?x0 != M0 )\n}",
        "recursionDepth": 25,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P737 wd:Q449 .\n?x0 wdt:P737 wd:Q1666 .\n?x0 wdt:P27 wd:Q29 .\n?x0 wdt:P3373 wd:Q99322890 .\nFILTER ( ?x0 != wd:Q99322890 )\n}",
        "questionWithBrackets": "Was [Luis Labordeta Sub\u00edas] 's Spanish sibling influenced by [Georges Brassens] and [Jacques Brel]"
    },
    {
        "questionIdx": 45698,
        "questionPatternModEntities": "Was M0 a Mexican employee of M1 , M2 , M3 , M4 , and M5",
        "questionTemplate": "Was [entity] a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] , [entity] , [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P0 M3 .\nM0 P0 M4 .\nM0 P0 M5 .\nM0 P1 M6\n}",
        "recursionDepth": 31,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q154691 wdt:P108 wd:Q49114 .\nwd:Q154691 wdt:P108 wd:Q13371 .\nwd:Q154691 wdt:P108 wd:Q49088 .\nwd:Q154691 wdt:P108 wd:Q49117 .\nwd:Q154691 wdt:P108 wd:Q21578 .\nwd:Q154691 wdt:P27 wd:Q96\n}",
        "questionWithBrackets": "Was [Carlos Fuentes] a Mexican employee of [Harvard University] , [Princeton University] , [University of Pennsylvania] , [Brown University] , and [Columbia University]"
    },
    {
        "questionIdx": 45770,
        "questionPatternModEntities": "Was M0 's French sibling influenced by M1 , M2 , and M3",
        "questionTemplate": "Was [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] [VP_SIMPLE] by [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\n?x0 P1 M3 .\n?x0 P2 M4 .\nFILTER ( ?x0 != M0 )\n}",
        "recursionDepth": 28,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P737 wd:Q501 .\n?x0 wdt:P737 wd:Q535 .\n?x0 wdt:P737 wd:Q2371393 .\n?x0 wdt:P27 wd:Q142 .\n?x0 wdt:P3373 wd:Q8308563 .\nFILTER ( ?x0 != wd:Q8308563 )\n}",
        "questionWithBrackets": "Was [Fr\u00e9d\u00e9ric Rimbaud] 's French sibling influenced by [Victor Hugo] , [Albert M\u00e9rat] , and [Charles Baudelaire]"
    },
    {
        "questionIdx": 45772,
        "questionPatternModEntities": "Was M1 M0 's spouse 's sibling",
        "questionTemplate": "Was [entity] [entity] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( M1 != ?x0 ) .\nM1 P1 ?x0\n}",
        "recursionDepth": 15,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P26 wd:Q13133 .\nFILTER ( ?x0 != wd:Q13133 ) .\nFILTER ( wd:Q773197 != ?x0 ) .\nwd:Q773197 wdt:P3373 ?x0\n}",
        "questionWithBrackets": "Was [Auma Obama] [Michelle Obama] 's spouse 's sibling"
    },
    {
        "questionIdx": 45773,
        "questionPatternModEntities": "Was M1 a Italian spouse of M0 's actor",
        "questionTemplate": "Was [entity] a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( M1 != ?x0 ) .\nM1 P1 M2 .\nM1 P2 ?x0\n}",
        "recursionDepth": 22,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P453 wd:Q12742668 .\nFILTER ( wd:Q50896 != ?x0 ) .\nwd:Q50896 wdt:P27 wd:Q38 .\nwd:Q50896 wdt:P26 ?x0\n}",
        "questionWithBrackets": "Was [Pippo Baudo] a Italian spouse of [Princess Turandot] 's actor"
    },
    {
        "questionIdx": 45801,
        "questionPatternModEntities": "Was M0 distributed by M1 , M2 , M3 , M4 , and M5",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] , [entity] , [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P0 M3 .\nM0 P0 M4 .\nM0 P0 M5\n}",
        "recursionDepth": 25,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q692821 wdt:P750 wd:Q145 .\nwd:Q692821 wdt:P750 wd:Q80948336 .\nwd:Q692821 wdt:P750 wd:Q5371838 .\nwd:Q692821 wdt:P750 wd:Q907311 .\nwd:Q692821 wdt:P750 wd:Q9589\n}",
        "questionWithBrackets": "Was [My Summer of Love] distributed by [FandangoNow] , [United Kingdom] , [Netflix] , [iTunes] , and [Vudu]"
    },
    {
        "questionIdx": 45916,
        "questionPatternModEntities": "Was M0 produced by , written by , and executive produced by M1",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1 .\nM0 P2 M1\n}",
        "recursionDepth": 27,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q181086 wdt:P1431 wd:Q2001 .\nwd:Q181086 wdt:P162|wdt:P272 wd:Q2001 .\nwd:Q181086 wdt:P58 wd:Q2001\n}",
        "questionWithBrackets": "Was [A Clockwork Orange] produced by , written by , and executive produced by [Stanley Kubrick]"
    },
    {
        "questionIdx": 45917,
        "questionPatternModEntities": "Was M0 's prequel executive produced by and edited by M1",
        "questionTemplate": "Was [entity] 's [ROLE_SIMPLE] [VP_SIMPLE] by and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P2 M1\n}",
        "recursionDepth": 25,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P1040 wd:Q4679987 .\n?x0 wdt:P1431 wd:Q4679987 .\n?x0 wdt:P156 wd:Q17183987\n}",
        "questionWithBrackets": "Was [V/H/S: Viral] 's prequel executive produced by and edited by [Adam Wingard]"
    },
    {
        "questionIdx": 45933,
        "questionPatternModEntities": "Was M2 written by , produced by , edited by , and directed by M0 's Mexican sibling",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M0 ) .\nM2 P2 ?x0 .\nM2 P3 ?x0 .\nM2 P4 ?x0 .\nM2 P5 ?x0\n}",
        "recursionDepth": 41,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P27 wd:Q96 .\n?x0 wdt:P3373 wd:Q2840325 .\nFILTER ( ?x0 != wd:Q2840325 ) .\nwd:Q2579784 wdt:P57 ?x0 .\nwd:Q2579784 wdt:P1040 ?x0 .\nwd:Q2579784 wdt:P162|wdt:P272 ?x0 .\nwd:Q2579784 wdt:P58 ?x0\n}",
        "questionWithBrackets": "Was [Gravity] written by , produced by , edited by , and directed by [Carlos Cuar\u00f3n] 's Mexican sibling"
    },
    {
        "questionIdx": 45938,
        "questionPatternModEntities": "Was M0 's male sibling 's sibling M2",
        "questionTemplate": "Was [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] 's [ROLE_SIMPLE] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( M2 != ?x0 ) .\nM2 P0 ?x0\n}",
        "recursionDepth": 20,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P21 wd:Q6581097 .\n?x0 wdt:P3373 wd:Q352 .\nFILTER ( ?x0 != wd:Q352 ) .\nFILTER ( wd:Q78643 != ?x0 ) .\nwd:Q78643 wdt:P3373 ?x0\n}",
        "questionWithBrackets": "Was [Adolf Hitler] 's male sibling 's sibling [Angela Hitler]"
    },
    {
        "questionIdx": 45942,
        "questionPatternModEntities": "Was M1 a actor of M0 's spouse",
        "questionTemplate": "Was [entity] a [ROLE_SIMPLE] of [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nM1 P1 ?x0\n}",
        "recursionDepth": 17,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P26 wd:Q223468 .\nFILTER ( ?x0 != wd:Q223468 ) .\nwd:Q294975 wdt:P453 ?x0\n}",
        "questionWithBrackets": "Was [Miranda Otto] a actor of [Faramir] 's spouse"
    },
    {
        "questionIdx": 45944,
        "questionPatternModEntities": "Was M1 M0 's parent 's spouse",
        "questionTemplate": "Was [entity] [entity] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( M1 != ?x0 ) .\nM1 P1 ?x0\n}",
        "recursionDepth": 15,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q229413 .\nFILTER ( wd:Q48174 != ?x0 ) .\nwd:Q48174 wdt:P26 ?x0\n}",
        "questionWithBrackets": "Was [Marcus Vipsanius Agrippa] [Agrippina the Elder] 's parent 's spouse"
    },
    {
        "questionIdx": 45971,
        "questionPatternModEntities": "Was M2 M0 's British sibling 's sibling",
        "questionTemplate": "Was [entity] [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( M2 != ?x0 ) .\nM2 P0 ?x0\n}",
        "recursionDepth": 20,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P27 wd:Q145 .\n?x0 wdt:P3373 wd:Q75542536 .\nFILTER ( ?x0 != wd:Q75542536 ) .\nFILTER ( wd:Q21557476 != ?x0 ) .\nwd:Q21557476 wdt:P3373 ?x0\n}",
        "questionWithBrackets": "Was [Margaret Booth (n\u00e9e Meinertzhagen)] [Barbara Meinertzhagen] 's British sibling 's sibling"
    },
    {
        "questionIdx": 45979,
        "questionPatternModEntities": "Was M0 a Italian sibling of M1",
        "questionTemplate": "Was [entity] a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nFILTER ( M0 != M1 ) .\nM0 P0 M1 .\nM0 P1 M2\n}",
        "recursionDepth": 18,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nFILTER ( wd:Q25100 != wd:Q971600 ) .\nwd:Q25100 wdt:P27 wd:Q38 .\nwd:Q25100 wdt:P3373 wd:Q971600\n}",
        "questionWithBrackets": "Was [Nanni Moretti] a Italian sibling of [Franco Moretti]"
    },
    {
        "questionIdx": 45982,
        "questionPatternModEntities": "Was M0 's sibling a Dutch sibling of M1",
        "questionTemplate": "Was [entity] 's [ROLE_SIMPLE] a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P1 M2 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x0 != M1 )\n}",
        "recursionDepth": 22,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P27 wd:Q29999 .\n?x0 wdt:P3373 wd:Q71738329 .\n?x0 wdt:P3373 wd:Q4218595 .\nFILTER ( ?x0 != wd:Q71738329 ) .\nFILTER ( ?x0 != wd:Q4218595 )\n}",
        "questionWithBrackets": "Was [Barend Kwast] 's sibling a Dutch sibling of [Jan Albert Kwast]"
    },
    {
        "questionIdx": 45986,
        "questionPatternModEntities": "Was M0 a German spouse of M2",
        "questionTemplate": "Was [entity] a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nFILTER ( M0 != M2 ) .\nM0 P0 M1 .\nM0 P1 M2\n}",
        "recursionDepth": 18,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nFILTER ( wd:Q25878 != wd:Q91223 ) .\nwd:Q25878 wdt:P27 wd:Q183 .\nwd:Q25878 wdt:P26 wd:Q91223\n}",
        "questionWithBrackets": "Was [Rita K\u00f6nig] a German spouse of [Uwe R\u00f6mer]"
    },
    {
        "questionIdx": 46005,
        "questionPatternModEntities": "Was M1 's German female sibling M0",
        "questionTemplate": "Was [entity] 's [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nFILTER ( M0 != M1 ) .\nM0 P0 M1 .\nM0 P1 M2 .\nM0 P2 M3\n}",
        "recursionDepth": 21,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nFILTER ( wd:Q40791 != wd:Q5553615 ) .\nwd:Q40791 wdt:P21 wd:Q6581072 .\nwd:Q40791 wdt:P27 wd:Q183 .\nwd:Q40791 wdt:P3373 wd:Q5553615\n}",
        "questionWithBrackets": "Was [Gesine Bullock-Prado] 's German female sibling [Sandra Bullock]"
    },
    {
        "questionIdx": 46008,
        "questionPatternModEntities": "Was M0 M1 's spouse",
        "questionTemplate": "Was [entity] [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\nFILTER ( M0 != M1 ) .\nM0 P0 M1\n}",
        "recursionDepth": 11,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nFILTER ( wd:Q1089201 != wd:Q407 ) .\nwd:Q1089201 wdt:P26 wd:Q407\n}",
        "questionWithBrackets": "Was [Chuck Traynor] [Linda Lovelace] 's spouse"
    },
    {
        "questionIdx": 46013,
        "questionPatternModEntities": "Was M1 's Dutch spouse M2 's spouse",
        "questionTemplate": "Was [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\nFILTER ( ?x0 != M1 ) .\nFILTER ( ?x0 != M2 )\n}",
        "recursionDepth": 20,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P27 wd:Q29999 .\n?x0 wdt:P26 wd:Q385704 .\n?x0 wdt:P26 wd:Q2010175 .\nFILTER ( ?x0 != wd:Q385704 ) .\nFILTER ( ?x0 != wd:Q2010175 )\n}",
        "questionWithBrackets": "Was [Edwin Jansen] 's Dutch spouse [Remon Stotijn] 's spouse"
    },
    {
        "questionIdx": 46174,
        "questionPatternModEntities": "Was M2 's male sibling 's Dutch French sibling 's male sibling M4",
        "questionTemplate": "Was [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] 's [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x0 P1 M0 .\n?x0 P1 M1 .\n?x1 P0 M2 .\n?x1 P2 M3 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x1 != M2 ) .\nFILTER ( M4 != ?x0 ) .\nM4 P0 ?x0 .\nM4 P2 M3\n}",
        "recursionDepth": 39,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P27 wd:Q29999 .\n?x0 wdt:P27 wd:Q142 .\n?x0 wdt:P3373 ?x1 .\n?x1 wdt:P21 wd:Q6581097 .\n?x1 wdt:P3373 wd:Q170345 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x1 != wd:Q170345 ) .\nFILTER ( wd:Q3175856 != ?x0 ) .\nwd:Q3175856 wdt:P21 wd:Q6581097 .\nwd:Q3175856 wdt:P3373 ?x0\n}",
        "questionWithBrackets": "Was [Kees van Dongen] 's male sibling 's Dutch French sibling 's male sibling [Jean van Dongen]"
    },
    {
        "questionIdx": 46204,
        "questionPatternModEntities": "Was M1 influenced by M0 's sibling , influenced by M2 , and influenced by M3 , M4 , M5 , and M6",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity] , [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nM1 P1 ?x0 .\nM1 P1 M2 .\nM1 P1 M3 .\nM1 P1 M4 .\nM1 P1 M5 .\nM1 P1 M6\n}",
        "recursionDepth": 46,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P3373 wd:Q318448 .\nFILTER ( ?x0 != wd:Q318448 ) .\nwd:Q501 wdt:P737 ?x0 .\nwd:Q501 wdt:P737 wd:Q317160 .\nwd:Q501 wdt:P737 wd:Q535 .\nwd:Q501 wdt:P737 wd:Q16867 .\nwd:Q501 wdt:P737 wd:Q309854 .\nwd:Q501 wdt:P737 wd:Q7198\n}",
        "questionWithBrackets": "Was [Charles Baudelaire] influenced by [Abel Hugo] 's sibling , influenced by [Victor Hugo] , and influenced by [Ovid] , [Edgar Allan Poe] , [Joseph de Maistre] , and [Thomas De Quincey]"
    },
    {
        "questionIdx": 46207,
        "questionPatternModEntities": "Was M1 influenced by a sibling of M0 , influenced by M2 and M3 , and influenced by M4 , M5 , and M6",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity] , [VP_SIMPLE] by [entity] and [entity] , and [VP_SIMPLE] by [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nM1 P1 ?x0 .\nM1 P1 M2 .\nM1 P1 M3 .\nM1 P1 M4 .\nM1 P1 M5 .\nM1 P1 M6\n}",
        "recursionDepth": 49,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P3373 wd:Q3059936 .\nFILTER ( ?x0 != wd:Q3059936 ) .\nwd:Q991 wdt:P737 ?x0 .\nwd:Q991 wdt:P737 wd:Q642420 .\nwd:Q991 wdt:P737 wd:Q9312 .\nwd:Q991 wdt:P737 wd:Q3816 .\nwd:Q991 wdt:P737 wd:Q5682 .\nwd:Q991 wdt:P737 wd:Q5686\n}",
        "questionWithBrackets": "Was [Fyodor Dostoyevsky] influenced by a sibling of [Eug\u00e8ne Hugo] , influenced by [Christ] and [Miguel de Cervantes] , and influenced by [George Sand] , [Charles Dickens] , and [Immanuel Kant]"
    },
    {
        "questionIdx": 46233,
        "questionPatternModEntities": "Was M1 's spouse a sibling and parent of M0",
        "questionTemplate": "Was [entity] 's [ROLE_SIMPLE] a [ROLE_SIMPLE] and [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M0 .\n?x0 P2 M1 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x0 != M1 )\n}",
        "recursionDepth": 22,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q493 .\n?x0 wdt:P3373 wd:Q493 .\n?x0 wdt:P26 wd:Q17148576 .\nFILTER ( ?x0 != wd:Q493 ) .\nFILTER ( ?x0 != wd:Q17148576 )\n}",
        "questionWithBrackets": "Was [Vitalie Rimbaud] 's spouse a sibling and parent of [Arthur Rimbaud]"
    },
    {
        "questionIdx": 46260,
        "questionPatternModEntities": "Was M1 directed and produced by a spouse of M0",
        "questionTemplate": "Was [entity] [VP_SIMPLE] and [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nM1 P1 ?x0 .\nM1 P2 ?x0\n}",
        "recursionDepth": 25,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P26 wd:Q457433 .\nFILTER ( ?x0 != wd:Q457433 ) .\nwd:Q1278397 wdt:P57 ?x0 .\nwd:Q1278397 wdt:P162|wdt:P272 ?x0\n}",
        "questionWithBrackets": "Was [Eat the Document] directed and produced by a spouse of [Sara Dylan]"
    },
    {
        "questionIdx": 46285,
        "questionPatternModEntities": "Was M2 distributed by M3 , M4 , M5 , and M6 and produced by M1 's Italian spouse",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] , [entity] , [entity] , and [entity] and [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M1 ) .\nM2 P2 M3 .\nM2 P2 M4 .\nM2 P2 M5 .\nM2 P2 M6 .\nM2 P3 ?x0\n}",
        "recursionDepth": 42,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P27 wd:Q38 .\n?x0 wdt:P26 wd:Q21694246 .\nFILTER ( ?x0 != wd:Q21694246 ) .\nwd:Q206576 wdt:P750 wd:Q159846 .\nwd:Q206576 wdt:P750 wd:Q80948336 .\nwd:Q206576 wdt:P750 wd:Q907311 .\nwd:Q206576 wdt:P750 wd:Q1329615 .\nwd:Q206576 wdt:P162|wdt:P272 ?x0\n}",
        "questionWithBrackets": "Was [Hugo] distributed by [Netflix] , [Paramount Pictures] , [UIP-Dunafilm] , and [FandangoNow] and produced by [Helen Schermerhorn Morris] 's Italian spouse"
    },
    {
        "questionIdx": 46344,
        "questionPatternModEntities": "Was M5 's parent employed by M0 , employed by M1 and M2 , and employed by M3 and M4",
        "questionTemplate": "Was [entity] 's [ROLE_SIMPLE] [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] and [entity] , and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P0 M3 .\n?x0 P0 M4 .\n?x0 P1 M5\n}",
        "recursionDepth": 44,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q118253 .\n?x0 wdt:P108 wd:Q70 .\n?x0 wdt:P108 wd:Q206702 .\n?x0 wdt:P108 wd:Q685539 .\n?x0 wdt:P108 wd:Q156598 .\n?x0 wdt:P108 wd:Q168756\n}",
        "questionWithBrackets": "Was [Eduard Einstein] 's parent employed by [University of Zurich] , employed by [University of California, Berkeley] and [Swiss Federal Institute of Intellectual Property] , and employed by [Leiden University] and [Bern]"
    },
    {
        "questionIdx": 46357,
        "questionPatternModEntities": "Was M2 directed by M0 's male employee",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nM2 P2 ?x0\n}",
        "recursionDepth": 21,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P108 wd:Q141336 .\n?x0 wdt:P21 wd:Q6581097 .\nwd:Q125772 wdt:P57 ?x0\n}",
        "questionWithBrackets": "Was [Solaris] directed by [Mosfilm] 's male employee"
    },
    {
        "questionIdx": 46369,
        "questionPatternModEntities": "Was M0 a male sibling and spouse of M1",
        "questionTemplate": "Was [entity] a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] and [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nFILTER ( M0 != M1 ) .\nFILTER ( M0 != M1 ) .\nM0 P0 M1 .\nM0 P1 M2 .\nM0 P2 M1\n}",
        "recursionDepth": 23,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nFILTER ( wd:Q39938 != wd:Q635 ) .\nFILTER ( wd:Q39938 != wd:Q635 ) .\nwd:Q39938 wdt:P21 wd:Q6581097 .\nwd:Q39938 wdt:P3373 wd:Q635 .\nwd:Q39938 wdt:P26 wd:Q635\n}",
        "questionWithBrackets": "Was [Ptolemy XIII Theos Philopator] a male sibling and spouse of [Cleopatra]"
    },
    {
        "questionIdx": 46370,
        "questionPatternModEntities": "Was M0 's sibling and spouse M1 's female sibling",
        "questionTemplate": "Was [entity] 's [ROLE_SIMPLE] and [ROLE_SIMPLE] [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P1 M2 .\n?x0 P2 M0 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x0 != M1 )\n}",
        "recursionDepth": 25,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P21 wd:Q6581072 .\n?x0 wdt:P3373 wd:Q3345 .\n?x0 wdt:P3373 wd:Q3340 .\n?x0 wdt:P26 wd:Q3340 .\nFILTER ( ?x0 != wd:Q3345 ) .\nFILTER ( ?x0 != wd:Q3340 ) .\nFILTER ( ?x0 != wd:Q3340 )\n}",
        "questionWithBrackets": "Was [Ptolemy IX Lathyros] 's sibling and spouse [Ptolemy X Alexander I] 's female sibling"
    },
    {
        "questionIdx": 46380,
        "questionPatternModEntities": "Was M0 written by M1 , written by M2 , M3 , M4 , and M5 , and edited by M6 and M7",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , [entity] , [entity] , and [entity] , and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P0 M3 .\nM0 P0 M4 .\nM0 P0 M5 .\nM0 P1 M6 .\nM0 P1 M7\n}",
        "recursionDepth": 46,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q603857 wdt:P1040 wd:Q55211 .\nwd:Q603857 wdt:P1040 wd:Q541826 .\nwd:Q603857 wdt:P58 wd:Q55215 .\nwd:Q603857 wdt:P58 wd:Q113628 .\nwd:Q603857 wdt:P58 wd:Q44221 .\nwd:Q603857 wdt:P58 wd:Q7396408 .\nwd:Q603857 wdt:P58 wd:Q295093\n}",
        "questionWithBrackets": "Was [11'09\"01 September 11] written by [Sean Penn] , written by [Claude Lelouch] , [Sabrina Dhawan] , [Alejandro Gonz\u00e1lez I\u00f1\u00e1rritu] , and [Idrissa Ou\u00e9draogo] , and edited by [Mohsen Makhmalbaf] and [Jay Cassidy]"
    },
    {
        "questionIdx": 46396,
        "questionPatternModEntities": "Was M1 's female French Canadian employee M0",
        "questionTemplate": "Was [entity] 's [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M2 .\nM0 P1 M3 .\nM0 P2 M4\n}",
        "recursionDepth": 26,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q128933 wdt:P108 wd:Q461761 .\nwd:Q128933 wdt:P21 wd:Q6581072 .\nwd:Q128933 wdt:P27 wd:Q16 .\nwd:Q128933 wdt:P27 wd:Q142\n}",
        "questionWithBrackets": "Was [Canadian Broadcasting Corporation] 's female French Canadian employee [Micha\u00eblle Jean]"
    },
    {
        "questionIdx": 46510,
        "questionPatternModEntities": "Was M1 M0 's parent 's sibling and spouse",
        "questionTemplate": "Was [entity] [entity] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE] and [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( M1 != ?x0 ) .\nFILTER ( M1 != ?x0 ) .\nM1 P1 ?x0 .\nM1 P2 ?x0\n}",
        "recursionDepth": 20,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q4064 .\nFILTER ( wd:Q910463 != ?x0 ) .\nFILTER ( wd:Q910463 != ?x0 ) .\nwd:Q910463 wdt:P3373 ?x0 .\nwd:Q910463 wdt:P26 ?x0\n}",
        "questionWithBrackets": "Was [Duatentopet] [Ramesses V] 's parent 's sibling and spouse"
    },
    {
        "questionIdx": 46539,
        "questionPatternModEntities": "Was M0 a British Italian employee of M1 , M2 , and M3",
        "questionTemplate": "Was [entity] a [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P0 M3 .\nM0 P1 M4 .\nM0 P1 M5\n}",
        "recursionDepth": 30,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q453557 wdt:P108 wd:Q209344 .\nwd:Q453557 wdt:P108 wd:Q259517 .\nwd:Q453557 wdt:P108 wd:Q1059760 .\nwd:Q453557 wdt:P27 wd:Q38 .\nwd:Q453557 wdt:P27 wd:Q145\n}",
        "questionWithBrackets": "Was [Bruno Pontecorvo] a British Italian employee of [Joint Institute for Nuclear Research] , [Sapienza University of Rome] , and [Chalk River Laboratories]"
    },
    {
        "questionIdx": 46597,
        "questionPatternModEntities": "Was M0 directed by , executive produced by , written by , and produced by M1",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1 .\nM0 P2 M1 .\nM0 P3 M1\n}",
        "recursionDepth": 33,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q208047 wdt:P57 wd:Q61347 .\nwd:Q208047 wdt:P1431 wd:Q61347 .\nwd:Q208047 wdt:P162|wdt:P272 wd:Q61347 .\nwd:Q208047 wdt:P58 wd:Q61347\n}",
        "questionWithBrackets": "Was [1968 Tunnel Rats] directed by , executive produced by , written by , and produced by [Uwe Boll]"
    },
    {
        "questionIdx": 46621,
        "questionPatternModEntities": "Was M0 a sibling and spouse of M1",
        "questionTemplate": "Was [entity] a [ROLE_SIMPLE] and [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nFILTER ( M0 != M1 ) .\nFILTER ( M0 != M1 ) .\nM0 P0 M1 .\nM0 P1 M1\n}",
        "recursionDepth": 18,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nFILTER ( wd:Q125046 != wd:Q4649 ) .\nFILTER ( wd:Q125046 != wd:Q4649 ) .\nwd:Q125046 wdt:P3373 wd:Q4649 .\nwd:Q125046 wdt:P26 wd:Q4649\n}",
        "questionWithBrackets": "Was [Juno] a sibling and spouse of [Jupiter]"
    },
    {
        "questionIdx": 46624,
        "questionPatternModEntities": "Was M1 's spouse M0 's parent and sibling",
        "questionTemplate": "Was [entity] 's [ROLE_SIMPLE] [entity] 's [ROLE_SIMPLE] and [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M0 .\n?x0 P2 M1 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x0 != M1 )\n}",
        "recursionDepth": 20,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q493 .\n?x0 wdt:P3373 wd:Q493 .\n?x0 wdt:P26 wd:Q17148576 .\nFILTER ( ?x0 != wd:Q493 ) .\nFILTER ( ?x0 != wd:Q17148576 )\n}",
        "questionWithBrackets": "Was [Vitalie Rimbaud] 's spouse [Arthur Rimbaud] 's parent and sibling"
    },
    {
        "questionIdx": 46640,
        "questionPatternModEntities": "Was M1 's British sibling M0",
        "questionTemplate": "Was [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nFILTER ( M0 != M1 ) .\nM0 P0 M1 .\nM0 P1 M2\n}",
        "recursionDepth": 16,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nFILTER ( wd:Q10633 != wd:Q75411 ) .\nwd:Q10633 wdt:P27 wd:Q145 .\nwd:Q10633 wdt:P3373 wd:Q75411\n}",
        "questionWithBrackets": "Was [John Bowes-Lyon] 's British sibling [Queen Elizabeth The Queen Mother]"
    },
    {
        "questionIdx": 46661,
        "questionPatternModEntities": "Was M2 's male spouse 's sibling M0 's spouse and parent",
        "questionTemplate": "Was [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] 's [ROLE_SIMPLE] [entity] 's [ROLE_SIMPLE] and [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x0 P1 M0 .\n?x0 P2 M0 .\n?x1 P2 M2 .\n?x1 P3 M1 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x1 != M2 )\n}",
        "recursionDepth": 29,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q297390 .\n?x0 wdt:P3373 ?x1 .\n?x0 wdt:P26 wd:Q297390 .\n?x1 wdt:P21 wd:Q6581097 .\n?x1 wdt:P26 wd:Q242293 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x0 != wd:Q297390 ) .\nFILTER ( ?x1 != wd:Q242293 )\n}",
        "questionWithBrackets": "Was [Thessalonike of Macedon] 's male spouse 's sibling [Craterus] 's spouse and parent"
    },
    {
        "questionIdx": 46681,
        "questionPatternModEntities": "Was M0 's sibling influenced by M1 and M2 , influenced by M3 and M4 , and influenced by M5",
        "questionTemplate": "Was [entity] 's [ROLE_SIMPLE] [VP_SIMPLE] by [entity] and [entity] , [VP_SIMPLE] by [entity] and [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\n?x0 P1 M3 .\n?x0 P1 M4 .\n?x0 P1 M5 .\nFILTER ( ?x0 != M0 )\n}",
        "recursionDepth": 44,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P737 wd:Q303 .\n?x0 wdt:P737 wd:Q231106 .\n?x0 wdt:P737 wd:Q1744 .\n?x0 wdt:P737 wd:Q11975 .\n?x0 wdt:P737 wd:Q179257 .\n?x0 wdt:P3373 wd:Q17312598 .\nFILTER ( ?x0 != wd:Q17312598 )\n}",
        "questionWithBrackets": "Was [Brandi Cyrus] 's sibling influenced by [Joan Jett] and [Elvis Presley] , influenced by [Timbaland] and [Britney Spears] , and influenced by [Madonna]"
    },
    {
        "questionIdx": 46717,
        "questionPatternModEntities": "Was M0 edited , directed , and produced by M1",
        "questionTemplate": "Was [entity] [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1 .\nM0 P2 M1\n}",
        "recursionDepth": 24,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q590570 wdt:P57 wd:Q25186 .\nwd:Q590570 wdt:P1040 wd:Q25186 .\nwd:Q590570 wdt:P162|wdt:P272 wd:Q25186\n}",
        "questionWithBrackets": "Was [Mala Noche] edited , directed , and produced by [Gus Van Sant]"
    },
    {
        "questionIdx": 46725,
        "questionPatternModEntities": "Was M0 written , produced , and executive produced by M1 and M2",
        "questionTemplate": "Was [entity] [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P1 M1 .\nM0 P1 M2 .\nM0 P2 M1 .\nM0 P2 M2\n}",
        "recursionDepth": 29,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q104814 wdt:P1431 wd:Q2396324 .\nwd:Q104814 wdt:P1431 wd:Q350422 .\nwd:Q104814 wdt:P162|wdt:P272 wd:Q2396324 .\nwd:Q104814 wdt:P162|wdt:P272 wd:Q350422 .\nwd:Q104814 wdt:P58 wd:Q2396324 .\nwd:Q104814 wdt:P58 wd:Q350422\n}",
        "questionWithBrackets": "Was [Aliens] written , produced , and executive produced by [David Giler] and [Walter Hill]"
    },
    {
        "questionIdx": 46753,
        "questionPatternModEntities": "Was M0 written by M2 , executive produced by M1 , edited by M4 and M5 , and written by M3",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] and [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M2 .\nM0 P1 M3 .\nM0 P2 M4 .\nM0 P2 M5\n}",
        "recursionDepth": 46,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q1740171 wdt:P1040 wd:Q614630 .\nwd:Q1740171 wdt:P1040 wd:Q7820333 .\nwd:Q1740171 wdt:P1431 wd:Q38222 .\nwd:Q1740171 wdt:P58 wd:Q9292586 .\nwd:Q1740171 wdt:P58 wd:Q134456\n}",
        "questionWithBrackets": "Was [Mishima: A Life in Four Chapters] written by [Leonard Schrader] , executive produced by [George Lucas] , edited by [Michael Chandler] and [Tomoyo \u014cshima] , and written by [Yukio Mishima]"
    },
    {
        "questionIdx": 46791,
        "questionPatternModEntities": "Was M0 's employee 's female spouse M1",
        "questionTemplate": "Was [entity] 's [ROLE_SIMPLE] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( M1 != ?x0 ) .\nM1 P1 M2 .\nM1 P2 ?x0\n}",
        "recursionDepth": 20,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P108 wd:Q23548 .\nFILTER ( wd:Q21179251 != ?x0 ) .\nwd:Q21179251 wdt:P21 wd:Q6581072 .\nwd:Q21179251 wdt:P26 ?x0\n}",
        "questionWithBrackets": "Was [NASA] 's employee 's female spouse [Janet Shearon]"
    },
    {
        "questionIdx": 46922,
        "questionPatternModEntities": "Was M2 written by , directed by , and produced by a Mexican spouse of M1",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M1 ) .\nM2 P2 ?x0 .\nM2 P3 ?x0 .\nM2 P4 ?x0\n}",
        "recursionDepth": 37,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P27 wd:Q96 .\n?x0 wdt:P26 wd:Q2626040 .\nFILTER ( ?x0 != wd:Q2626040 ) .\nwd:Q5654856 wdt:P57 ?x0 .\nwd:Q5654856 wdt:P162|wdt:P272 ?x0 .\nwd:Q5654856 wdt:P58 ?x0\n}",
        "questionWithBrackets": "Was [Abel] written by , directed by , and produced by a Mexican spouse of [Camila Sodi]"
    },
    {
        "questionIdx": 47128,
        "questionPatternModEntities": "Was M2 's child 's Spanish employee employed by M0",
        "questionTemplate": "Was [entity] 's [ROLE_SIMPLE] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x1 P2 M2\n}",
        "recursionDepth": 25,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P108 ?x1 .\n?x0 wdt:P108 wd:Q11906838 .\n?x0 wdt:P27 wd:Q29 .\n?x1 wdt:P749 wd:Q1065\n}",
        "questionWithBrackets": "Was [United Nations] 's child 's Spanish employee employed by [No label defined]"
    },
    {
        "questionIdx": 47253,
        "questionPatternModEntities": "Was M2 written by M3 , produced by a employee of M0 and M1 , and directed by M4 , M5 , and M6",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] , [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity] and [entity] , and [VP_SIMPLE] by [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\nM2 P1 M3 .\nM2 P2 ?x0 .\nM2 P3 M4 .\nM2 P3 M5 .\nM2 P3 M6\n}",
        "recursionDepth": 49,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P108 wd:Q575662 .\n?x0 wdt:P108 wd:Q1474157 .\nwd:Q208048 wdt:P57 wd:Q1372455 .\nwd:Q208048 wdt:P57 wd:Q7823572 .\nwd:Q208048 wdt:P57 wd:Q325805 .\nwd:Q208048 wdt:P162|wdt:P272 ?x0 .\nwd:Q208048 wdt:P58 wd:Q2263\n}",
        "questionWithBrackets": "Was [Band of Brothers] written by [Tom Hanks] , produced by a employee of [University of New Orleans] and [Naval War College] , and directed by [Richard Loncraine] , [David Leland] , and [Tony To]"
    },
    {
        "questionIdx": 47284,
        "questionPatternModEntities": "Was M2 produced and edited by a Mexican parent of M1",
        "questionTemplate": "Was [entity] [VP_SIMPLE] and [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nM2 P2 ?x0 .\nM2 P3 ?x0\n}",
        "recursionDepth": 30,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q1710546 .\n?x0 wdt:P27 wd:Q96 .\nwd:Q190575 wdt:P1040 ?x0 .\nwd:Q190575 wdt:P162|wdt:P272 ?x0\n}",
        "questionWithBrackets": "Was [Un Chien Andalou] produced and edited by a Mexican parent of [Juan Luis Bu\u00f1uel]"
    },
    {
        "questionIdx": 47289,
        "questionPatternModEntities": "Was M0 edited by M2 and written by M1",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M2\n}",
        "recursionDepth": 23,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q2296227 wdt:P1040 wd:Q8006 .\nwd:Q2296227 wdt:P58 wd:Q3541671\n}",
        "questionWithBrackets": "Was [Sanshiro Sugata Part II] edited by [Akira Kurosawa] and written by [Tsuneo Tomita]"
    },
    {
        "questionIdx": 47365,
        "questionPatternModEntities": "Was M1 's child influenced by M0",
        "questionTemplate": "Was [entity] 's [ROLE_SIMPLE] [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1\n}",
        "recursionDepth": 16,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P737 wd:Q149964 .\n?x0 wdt:P749 wd:Q8896\n}",
        "questionWithBrackets": "Was [Council of the European Union] 's child influenced by [Eurogroup]"
    },
    {
        "questionIdx": 47432,
        "questionPatternModEntities": "Was M0 executive produced and produced by M1 , M2 , M3 , and M4",
        "questionTemplate": "Was [entity] [VP_SIMPLE] and [VP_SIMPLE] by [entity] , [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P0 M3 .\nM0 P0 M4 .\nM0 P1 M1 .\nM0 P1 M2 .\nM0 P1 M3 .\nM0 P1 M4\n}",
        "recursionDepth": 30,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q819109 wdt:P1431 wd:Q1295611 .\nwd:Q819109 wdt:P1431 wd:Q81520 .\nwd:Q819109 wdt:P1431 wd:Q381545 .\nwd:Q819109 wdt:P1431 wd:Q1969128 .\nwd:Q819109 wdt:P162|wdt:P272 wd:Q1295611 .\nwd:Q819109 wdt:P162|wdt:P272 wd:Q81520 .\nwd:Q819109 wdt:P162|wdt:P272 wd:Q381545 .\nwd:Q819109 wdt:P162|wdt:P272 wd:Q1969128\n}",
        "questionWithBrackets": "Was [Laws of Attraction] executive produced and produced by [Bob Yari] , [Pierce Brosnan] , [Toby Emmerich] , and [Elie Samaha]"
    },
    {
        "questionIdx": 47446,
        "questionPatternModEntities": "Was M1 edited by M0 's sibling 's sibling",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x1 P0 M0 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x1 != M0 ) .\nM1 P1 ?x0\n}",
        "recursionDepth": 20,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P3373 ?x1 .\n?x1 wdt:P3373 wd:Q2071 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x1 != wd:Q2071 ) .\nwd:Q862058 wdt:P1040 ?x0\n}",
        "questionWithBrackets": "Was [Inland Empire] edited by [David Lynch] 's sibling 's sibling"
    },
    {
        "questionIdx": 47484,
        "questionPatternModEntities": "Was M2 's spouse a male sibling of M0",
        "questionTemplate": "Was [entity] 's [ROLE_SIMPLE] a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P2 M2 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x0 != M2 )\n}",
        "recursionDepth": 22,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P21 wd:Q6581097 .\n?x0 wdt:P3373 wd:Q1317 .\n?x0 wdt:P26 wd:Q118980 .\nFILTER ( ?x0 != wd:Q118980 ) .\nFILTER ( ?x0 != wd:Q1317 )\n}",
        "questionWithBrackets": "Was [Carmen Binladin] 's spouse a male sibling of [Osama bin Laden]"
    },
    {
        "questionIdx": 47539,
        "questionPatternModEntities": "Was M0 produced , executive produced , and directed by M1",
        "questionTemplate": "Was [entity] [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1 .\nM0 P2 M1\n}",
        "recursionDepth": 25,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q886 wdt:P57 wd:Q43994 .\nwd:Q886 wdt:P1431 wd:Q43994 .\nwd:Q886 wdt:P162|wdt:P272 wd:Q43994\n}",
        "questionWithBrackets": "Was [The Simpsons] produced , executive produced , and directed by [Matt Groening]"
    },
    {
        "questionIdx": 47615,
        "questionPatternModEntities": "Was M1 influenced by M2 and M3 , influenced by M4 , M5 , and M6 , and influenced by M0 's sibling",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] and [entity] , [VP_SIMPLE] by [entity] , [entity] , and [entity] , and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nM1 P1 ?x0 .\nM1 P1 M2 .\nM1 P1 M3 .\nM1 P1 M4 .\nM1 P1 M5 .\nM1 P1 M6\n}",
        "recursionDepth": 47,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P3373 wd:Q318448 .\nFILTER ( ?x0 != wd:Q318448 ) .\nwd:Q991 wdt:P737 ?x0 .\nwd:Q991 wdt:P737 wd:Q7200 .\nwd:Q991 wdt:P737 wd:Q46599 .\nwd:Q991 wdt:P737 wd:Q9312 .\nwd:Q991 wdt:P737 wd:Q535 .\nwd:Q991 wdt:P737 wd:Q5686\n}",
        "questionWithBrackets": "Was [Fyodor Dostoyevsky] influenced by [Immanuel Kant] and [Alexander Pushkin] , influenced by [Mikhail Lermontov] , [Victor Hugo] , and [Charles Dickens] , and influenced by [Abel Hugo] 's sibling"
    },
    {
        "questionIdx": 47641,
        "questionPatternModEntities": "Was M1 executive produced by M2 and M3 , executive produced by a spouse of M0 , and produced by M4",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] and [entity] , [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nM1 P1 ?x0 .\nM1 P1 M2 .\nM1 P1 M3 .\nM1 P2 M4\n}",
        "recursionDepth": 44,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P26 wd:Q40162 .\nFILTER ( ?x0 != wd:Q40162 ) .\nwd:Q34220038 wdt:P1431 ?x0 .\nwd:Q34220038 wdt:P1431 wd:Q67206382 .\nwd:Q34220038 wdt:P1431 wd:Q8877 .\nwd:Q34220038 wdt:P162|wdt:P272 wd:Q636664\n}",
        "questionWithBrackets": "Was [Bumblebee] executive produced by [Steven Spielberg] and [Edward Cheng] , executive produced by a spouse of [Kate Capshaw] , and produced by [Lorenzo di Bonaventura]"
    },
    {
        "questionIdx": 47661,
        "questionPatternModEntities": "Was M4 's Mexican French male spouse M0",
        "questionTemplate": "Was [entity] 's [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nFILTER ( M0 != M4 ) .\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P1 M3 .\nM0 P2 M4\n}",
        "recursionDepth": 26,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nFILTER ( wd:Q356546 != wd:Q20101470 ) .\nwd:Q356546 wdt:P21 wd:Q6581097 .\nwd:Q356546 wdt:P27 wd:Q96 .\nwd:Q356546 wdt:P27 wd:Q142 .\nwd:Q356546 wdt:P26 wd:Q20101470\n}",
        "questionWithBrackets": "Was [Perpetua Barjau Mart\u00edn] 's Mexican French male spouse [Max Aub]"
    },
    {
        "questionIdx": 47704,
        "questionPatternModEntities": "Was M3 's spouse 's Chinese sibling employed by M0 and employed by M1",
        "questionTemplate": "Was [entity] 's [ROLE_SIMPLE] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] [VP_SIMPLE] by [entity] and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x0 P1 M0 .\n?x0 P1 M1 .\n?x0 P2 M2 .\n?x1 P3 M3 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x1 != M3 )\n}",
        "recursionDepth": 36,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P108 wd:Q732353 .\n?x0 wdt:P108 wd:Q894657 .\n?x0 wdt:P27 wd:Q148 .\n?x0 wdt:P3373 ?x1 .\n?x1 wdt:P26 wd:Q448018 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x1 != wd:Q448018 )\n}",
        "questionWithBrackets": "Was [Hiro Saga] 's spouse 's Chinese sibling employed by [Beijing Botanical Garden] and employed by [National Library of China]"
    },
    {
        "questionIdx": 47757,
        "questionPatternModEntities": "Was M1 executive produced by M2 and M3 , executive produced by M4 and M5 , and produced by a sibling of M0",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] and [entity] , [VP_SIMPLE] by [entity] and [entity] , and [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nM1 P1 M2 .\nM1 P1 M3 .\nM1 P1 M4 .\nM1 P1 M5 .\nM1 P2 ?x0\n}",
        "recursionDepth": 48,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P3373 wd:Q469204 .\nFILTER ( ?x0 != wd:Q469204 ) .\nwd:Q2947967 wdt:P1431 wd:Q39829 .\nwd:Q2947967 wdt:P1431 wd:Q8877 .\nwd:Q2947967 wdt:P1431 wd:Q6984051 .\nwd:Q2947967 wdt:P1431 wd:Q362793 .\nwd:Q2947967 wdt:P162|wdt:P272 ?x0\n}",
        "questionWithBrackets": "Was [Under the Dome] executive produced by [Neal Baer] and [Stephen King] , executive produced by [Jack Bender] and [Steven Spielberg] , and produced by a sibling of [Anne Spielberg]"
    },
    {
        "questionIdx": 47773,
        "questionPatternModEntities": "Was M0 M1 's female sibling",
        "questionTemplate": "Was [entity] [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\nFILTER ( M0 != M1 ) .\nM0 P0 M1 .\nM0 P1 M2\n}",
        "recursionDepth": 16,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nFILTER ( wd:Q1332115 != wd:Q905 ) .\nwd:Q1332115 wdt:P21 wd:Q6581072 .\nwd:Q1332115 wdt:P3373 wd:Q905\n}",
        "questionWithBrackets": "Was [Elli Kafka] [Franz Kafka] 's female sibling"
    },
    {
        "questionIdx": 47891,
        "questionPatternModEntities": "Was M2 M1 's male spouse 's spouse 's spouse",
        "questionTemplate": "Was [entity] [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x1 P0 M1 .\n?x1 P1 M0 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x1 != M1 ) .\nFILTER ( M2 != ?x0 ) .\nM2 P0 ?x0\n}",
        "recursionDepth": 24,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P26 ?x1 .\n?x1 wdt:P21 wd:Q6581097 .\n?x1 wdt:P26 wd:Q7067167 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x1 != wd:Q7067167 ) .\nFILTER ( wd:Q720 != ?x0 ) .\nwd:Q720 wdt:P26 ?x0\n}",
        "questionWithBrackets": "Was [Genghis Khan] [Hedaan] 's male spouse 's spouse 's spouse"
    },
    {
        "questionIdx": 47918,
        "questionPatternModEntities": "Was M2 written by and edited by M0 's Spanish sibling",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by and [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M0 ) .\nM2 P2 ?x0 .\nM2 P3 ?x0\n}",
        "recursionDepth": 29,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P27 wd:Q29 .\n?x0 wdt:P3373 wd:Q5833303 .\nFILTER ( ?x0 != wd:Q5833303 ) .\nwd:Q475766 wdt:P1040 ?x0 .\nwd:Q475766 wdt:P58 ?x0\n}",
        "questionWithBrackets": "Was [Diamonds of Kilimandjaro] written by and edited by [Enrique Franco] 's Spanish sibling"
    },
    {
        "questionIdx": 48002,
        "questionPatternModEntities": "Was M3 's employee 's female spouse influenced by M0 and M1",
        "questionTemplate": "Was [entity] 's [ROLE_SIMPLE] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P1 M2 .\n?x0 P2 ?x1 .\n?x1 P3 M3 .\nFILTER ( ?x0 != ?x1 )\n}",
        "recursionDepth": 29,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P737 wd:Q302 .\n?x0 wdt:P737 wd:Q859 .\n?x0 wdt:P21 wd:Q6581072 .\n?x0 wdt:P26 ?x1 .\n?x1 wdt:P108 wd:Q599316 .\nFILTER ( ?x0 != ?x1 )\n}",
        "questionWithBrackets": "Was [New School] 's employee 's female spouse influenced by [Jesus] and [Plato]"
    },
    {
        "questionIdx": 48009,
        "questionPatternModEntities": "Was M0 edited , directed , and produced by M1 and M2",
        "questionTemplate": "Was [entity] [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P1 M1 .\nM0 P1 M2 .\nM0 P2 M1 .\nM0 P2 M2\n}",
        "recursionDepth": 28,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q20729551 wdt:P57 wd:Q562108 .\nwd:Q20729551 wdt:P57 wd:Q1687239 .\nwd:Q20729551 wdt:P1040 wd:Q562108 .\nwd:Q20729551 wdt:P1040 wd:Q1687239 .\nwd:Q20729551 wdt:P162|wdt:P272 wd:Q562108 .\nwd:Q20729551 wdt:P162|wdt:P272 wd:Q1687239\n}",
        "questionWithBrackets": "Was [Stop for Bud] edited , directed , and produced by [J\u00f8rgen Leth] and [Jens J\u00f8rgen Thorsen]"
    },
    {
        "questionIdx": 48087,
        "questionPatternModEntities": "Was M0 written , produced , edited , and directed by M1 and M2",
        "questionTemplate": "Was [entity] [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P1 M1 .\nM0 P1 M2 .\nM0 P2 M1 .\nM0 P2 M2 .\nM0 P3 M1 .\nM0 P3 M2\n}",
        "recursionDepth": 33,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q20729551 wdt:P57 wd:Q562108 .\nwd:Q20729551 wdt:P57 wd:Q1687239 .\nwd:Q20729551 wdt:P1040 wd:Q562108 .\nwd:Q20729551 wdt:P1040 wd:Q1687239 .\nwd:Q20729551 wdt:P162|wdt:P272 wd:Q562108 .\nwd:Q20729551 wdt:P162|wdt:P272 wd:Q1687239 .\nwd:Q20729551 wdt:P58 wd:Q562108 .\nwd:Q20729551 wdt:P58 wd:Q1687239\n}",
        "questionWithBrackets": "Was [Stop for Bud] written , produced , edited , and directed by [Jens J\u00f8rgen Thorsen] and [J\u00f8rgen Leth]"
    },
    {
        "questionIdx": 48127,
        "questionPatternModEntities": "Was M2 executive produced by a male spouse of M1 , executive produced by M3 and M4 , and written by M5",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] , [VP_SIMPLE] by [entity] and [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M1 ) .\nM2 P2 ?x0 .\nM2 P2 M3 .\nM2 P2 M4 .\nM2 P3 M5\n}",
        "recursionDepth": 49,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P21 wd:Q6581097 .\n?x0 wdt:P26 wd:Q13909 .\nFILTER ( ?x0 != wd:Q13909 ) .\nwd:Q7740514 wdt:P1431 ?x0 .\nwd:Q7740514 wdt:P1431 wd:Q44857 .\nwd:Q7740514 wdt:P1431 wd:Q962378 .\nwd:Q7740514 wdt:P58 wd:Q1342745\n}",
        "questionWithBrackets": "Was [The House I Live In] executive produced by a male spouse of [Angelina Jolie] , executive produced by [John Legend] and [Russell Simmons] , and written by [Eugene Jarecki]"
    },
    {
        "questionIdx": 48131,
        "questionPatternModEntities": "Was M1 directed by M4 and M5 , executive produced by M0 's sibling , and written by M2 and M3",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] and [entity] , [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] , and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nM1 P1 ?x0 .\nM1 P2 M2 .\nM1 P2 M3 .\nM1 P3 M4 .\nM1 P3 M5\n}",
        "recursionDepth": 45,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P3373 wd:Q469204 .\nFILTER ( ?x0 != wd:Q469204 ) .\nwd:Q598499 wdt:P57 wd:Q1279660 .\nwd:Q598499 wdt:P57 wd:Q643246 .\nwd:Q598499 wdt:P1431 ?x0 .\nwd:Q598499 wdt:P58 wd:Q1508039 .\nwd:Q598499 wdt:P58 wd:Q1332253\n}",
        "questionWithBrackets": "Was [The Pacific] directed by [Carl Franklin] and [David Nutter] , executive produced by [Anne Spielberg] 's sibling , and written by [George Pelecanos] and [Robert Leckie]"
    },
    {
        "questionIdx": 48136,
        "questionPatternModEntities": "Was M1 executive produced by M0 's spouse , written by M2 and M3 , and written by M4 and M5",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] , [VP_SIMPLE] by [entity] and [entity] , and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nM1 P1 ?x0 .\nM1 P2 M2 .\nM1 P2 M3 .\nM1 P2 M4 .\nM1 P2 M5\n}",
        "recursionDepth": 45,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P26 wd:Q164065 .\nFILTER ( ?x0 != wd:Q164065 ) .\nwd:Q172837 wdt:P1431 ?x0 .\nwd:Q172837 wdt:P58 wd:Q1521637 .\nwd:Q172837 wdt:P58 wd:Q3828654 .\nwd:Q172837 wdt:P58 wd:Q53004 .\nwd:Q172837 wdt:P58 wd:Q268443\n}",
        "questionWithBrackets": "Was [Bicycle Thieves] executive produced by [Giuditta Rissone] 's spouse , written by [Suso Cecchi d'Amico] and [Vittorio De Sica] , and written by [Gherardo Gherardi] and [Adolfo Franci]"
    },
    {
        "questionIdx": 48141,
        "questionPatternModEntities": "Was M1 written by M2 , M3 , and M4 , directed by M5 , and executive produced by M0 's sibling",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] , [entity] , and [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nM1 P1 ?x0 .\nM1 P2 M2 .\nM1 P2 M3 .\nM1 P2 M4 .\nM1 P3 M5\n}",
        "recursionDepth": 44,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P3373 wd:Q469204 .\nFILTER ( ?x0 != wd:Q469204 ) .\nwd:Q15072814 wdt:P57 wd:Q340213 .\nwd:Q15072814 wdt:P1431 ?x0 .\nwd:Q15072814 wdt:P58 wd:Q5181436 .\nwd:Q15072814 wdt:P58 wd:Q2333174 .\nwd:Q15072814 wdt:P58 wd:Q5362114\n}",
        "questionWithBrackets": "Was [Extant] written by [Eliza Clark] , [Leslie Bohem] , and [Craig Shapiro] , directed by [Adam Arkin] , and executive produced by [Anne Spielberg] 's sibling"
    },
    {
        "questionIdx": 48152,
        "questionPatternModEntities": "Was M1 directed by , executive produced by , produced by , edited by , and written by a parent of M0",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 ?x0 .\nM1 P2 ?x0 .\nM1 P3 ?x0 .\nM1 P4 ?x0 .\nM1 P5 ?x0\n}",
        "recursionDepth": 45,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q1620638 .\nwd:Q854990 wdt:P57 ?x0 .\nwd:Q854990 wdt:P1040 ?x0 .\nwd:Q854990 wdt:P1431 ?x0 .\nwd:Q854990 wdt:P162|wdt:P272 ?x0 .\nwd:Q854990 wdt:P58 ?x0\n}",
        "questionWithBrackets": "Was [Kagemusha] directed by , executive produced by , produced by , edited by , and written by a parent of [Hisao Kurosawa]"
    },
    {
        "questionIdx": 48166,
        "questionPatternModEntities": "Was M1 edited by , executive produced by , written by , and produced by M0 's parent",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 ?x0 .\nM1 P2 ?x0 .\nM1 P3 ?x0 .\nM1 P4 ?x0\n}",
        "recursionDepth": 37,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q1620638 .\nwd:Q854990 wdt:P1040 ?x0 .\nwd:Q854990 wdt:P1431 ?x0 .\nwd:Q854990 wdt:P162|wdt:P272 ?x0 .\nwd:Q854990 wdt:P58 ?x0\n}",
        "questionWithBrackets": "Was [Kagemusha] edited by , executive produced by , written by , and produced by [Hisao Kurosawa] 's parent"
    },
    {
        "questionIdx": 48167,
        "questionPatternModEntities": "Was M1 edited by , produced by , directed by , executive produced by , and written by M0 's parent",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 ?x0 .\nM1 P2 ?x0 .\nM1 P3 ?x0 .\nM1 P4 ?x0 .\nM1 P5 ?x0\n}",
        "recursionDepth": 43,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q1620638 .\nwd:Q854990 wdt:P57 ?x0 .\nwd:Q854990 wdt:P1040 ?x0 .\nwd:Q854990 wdt:P1431 ?x0 .\nwd:Q854990 wdt:P162|wdt:P272 ?x0 .\nwd:Q854990 wdt:P58 ?x0\n}",
        "questionWithBrackets": "Was [Kagemusha] edited by , produced by , directed by , executive produced by , and written by [Hisao Kurosawa] 's parent"
    },
    {
        "questionIdx": 48169,
        "questionPatternModEntities": "Was M1 edited by , produced by , executive produced by , written by , and directed by M0 's parent",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 ?x0 .\nM1 P2 ?x0 .\nM1 P3 ?x0 .\nM1 P4 ?x0 .\nM1 P5 ?x0\n}",
        "recursionDepth": 43,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q1620638 .\nwd:Q854990 wdt:P57 ?x0 .\nwd:Q854990 wdt:P1040 ?x0 .\nwd:Q854990 wdt:P1431 ?x0 .\nwd:Q854990 wdt:P162|wdt:P272 ?x0 .\nwd:Q854990 wdt:P58 ?x0\n}",
        "questionWithBrackets": "Was [Kagemusha] edited by , produced by , executive produced by , written by , and directed by [Hisao Kurosawa] 's parent"
    },
    {
        "questionIdx": 48210,
        "questionPatternModEntities": "Was M1 produced , executive produced , directed , edited , and written by M0 's parent",
        "questionTemplate": "Was [entity] [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 ?x0 .\nM1 P2 ?x0 .\nM1 P3 ?x0 .\nM1 P4 ?x0 .\nM1 P5 ?x0\n}",
        "recursionDepth": 39,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q1620638 .\nwd:Q854990 wdt:P57 ?x0 .\nwd:Q854990 wdt:P1040 ?x0 .\nwd:Q854990 wdt:P1431 ?x0 .\nwd:Q854990 wdt:P162|wdt:P272 ?x0 .\nwd:Q854990 wdt:P58 ?x0\n}",
        "questionWithBrackets": "Was [Kagemusha] produced , executive produced , directed , edited , and written by [Hisao Kurosawa] 's parent"
    },
    {
        "questionIdx": 48226,
        "questionPatternModEntities": "Was M1 written , produced , directed , edited , and executive produced by a parent of M0",
        "questionTemplate": "Was [entity] [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 ?x0 .\nM1 P2 ?x0 .\nM1 P3 ?x0 .\nM1 P4 ?x0 .\nM1 P5 ?x0\n}",
        "recursionDepth": 41,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q1620638 .\nwd:Q854990 wdt:P57 ?x0 .\nwd:Q854990 wdt:P1040 ?x0 .\nwd:Q854990 wdt:P1431 ?x0 .\nwd:Q854990 wdt:P162|wdt:P272 ?x0 .\nwd:Q854990 wdt:P58 ?x0\n}",
        "questionWithBrackets": "Was [Kagemusha] written , produced , directed , edited , and executive produced by a parent of [Hisao Kurosawa]"
    },
    {
        "questionIdx": 48288,
        "questionPatternModEntities": "Was M1 distributed by M2 , distributed by M3 , and distributed by a parent of M0",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 ?x0 .\nM1 P1 M2 .\nM1 P1 M3\n}",
        "recursionDepth": 38,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q29000247 .\nwd:Q16258992 wdt:P750 ?x0 .\nwd:Q16258992 wdt:P750 wd:Q337535 .\nwd:Q16258992 wdt:P750 wd:Q312\n}",
        "questionWithBrackets": "Was [Nimble Quest] distributed by [Apple Inc.] , distributed by [Steam] , and distributed by a parent of [Apple (Germany)]"
    },
    {
        "questionIdx": 48355,
        "questionPatternModEntities": "Was M1 edited by a employee of M0",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 ?x0\n}",
        "recursionDepth": 18,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P108 wd:Q141336 .\nwd:Q281988 wdt:P1040 ?x0\n}",
        "questionWithBrackets": "Was [The Sacrifice] edited by a employee of [Mosfilm]"
    },
    {
        "questionIdx": 48361,
        "questionPatternModEntities": "Was M0 directed by M3 , produced by M2 , and executive produced by M1",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M2 .\nM0 P2 M3\n}",
        "recursionDepth": 33,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q939084 wdt:P57 wd:Q912547 .\nwd:Q939084 wdt:P1431 wd:Q8877 .\nwd:Q939084 wdt:P162|wdt:P272 wd:Q190373\n}",
        "questionWithBrackets": "Was [The Flintstones in Viva Rock Vegas] directed by [Brian Levant] , produced by [Joseph Barbera] , and executive produced by [Steven Spielberg]"
    },
    {
        "questionIdx": 48422,
        "questionPatternModEntities": "Was M1 's actor a employee of M0",
        "questionTemplate": "Was [entity] 's [ROLE_SIMPLE] a [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1\n}",
        "recursionDepth": 17,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P453 wd:Q9054901 .\n?x0 wdt:P108 wd:Q207028\n}",
        "questionWithBrackets": "Was [Pamina] 's actor a employee of [Mariinsky Theatre]"
    },
    {
        "questionIdx": 48438,
        "questionPatternModEntities": "Was M1 a parent and spouse of a parent and sibling of M0",
        "questionTemplate": "Was [entity] a [ROLE_SIMPLE] and [ROLE_SIMPLE] of a [ROLE_SIMPLE] and [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M0 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( M1 != ?x0 ) .\nM1 P1 ?x0 .\nM1 P2 ?x0\n}",
        "recursionDepth": 29,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q40022 .\n?x0 wdt:P3373 wd:Q40022 .\nFILTER ( ?x0 != wd:Q40022 ) .\nFILTER ( wd:Q39991 != ?x0 ) .\nwd:Q39991 wdt:P40|wdt:P355 ?x0 .\nwd:Q39991 wdt:P26 ?x0\n}",
        "questionWithBrackets": "Was [Ptolemy XII Auletes] a parent and spouse of a parent and sibling of [Berenice IV of Egypt]"
    },
    {
        "questionIdx": 48451,
        "questionPatternModEntities": "Was M1 a actor of M0 's sibling",
        "questionTemplate": "Was [entity] a [ROLE_SIMPLE] of [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nM1 P1 ?x0\n}",
        "recursionDepth": 17,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P3373 wd:Q216605 .\nFILTER ( ?x0 != wd:Q216605 ) .\nwd:Q294975 wdt:P453 ?x0\n}",
        "questionWithBrackets": "Was [Miranda Otto] a actor of [\u00c9omer] 's sibling"
    },
    {
        "questionIdx": 48461,
        "questionPatternModEntities": "Was M0 directed by , edited by , and written by M1",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1 .\nM0 P2 M1\n}",
        "recursionDepth": 26,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q171861 wdt:P57 wd:Q28556 .\nwd:Q171861 wdt:P1040 wd:Q28556 .\nwd:Q171861 wdt:P58 wd:Q28556\n}",
        "questionWithBrackets": "Was [The Artist] directed by , edited by , and written by [Michel Hazanavicius]"
    },
    {
        "questionIdx": 48475,
        "questionPatternModEntities": "Was M2 's American female actor M0",
        "questionTemplate": "Was [entity] 's [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M2 .\nM0 P2 M3\n}",
        "recursionDepth": 21,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q4355802 wdt:P453 wd:Q682243 .\nwd:Q4355802 wdt:P21 wd:Q6581072 .\nwd:Q4355802 wdt:P27 wd:Q30\n}",
        "questionWithBrackets": "Was [Mikoto Misaka] 's American female actor [Brittney Karbowski]"
    },
    {
        "questionIdx": 48510,
        "questionPatternModEntities": "Was M2 influenced by M0 's American sibling 's spouse",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x1 P1 M0 .\n?x1 P2 M1 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x1 != M0 ) .\nM2 P3 ?x0\n}",
        "recursionDepth": 25,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P26 ?x1 .\n?x1 wdt:P27 wd:Q30 .\n?x1 wdt:P3373 wd:Q2073960 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x1 != wd:Q2073960 ) .\nwd:Q69358316 wdt:P737 ?x0\n}",
        "questionWithBrackets": "Was [Birane Hane] influenced by [Craig Robinson] 's American sibling 's spouse"
    },
    {
        "questionIdx": 48516,
        "questionPatternModEntities": "Was M1 employed by M2 , employed by M0 's parent , and employed by M3",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 ?x0 .\nM1 P1 M2 .\nM1 P1 M3\n}",
        "recursionDepth": 36,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q866 .\nwd:Q55118 wdt:P108 ?x0 .\nwd:Q55118 wdt:P108 wd:Q95 .\nwd:Q55118 wdt:P108 wd:Q210057\n}",
        "questionWithBrackets": "Was [Ben Goodger] employed by [Netscape Communications Corporation] , employed by [YouTube] 's parent , and employed by [Google]"
    },
    {
        "questionIdx": 48519,
        "questionPatternModEntities": "Was M1 employed by M2 and M3 , employed by M4 and M5 , and employed by M0 's child",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] and [entity] , [VP_SIMPLE] by [entity] and [entity] , and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 ?x0 .\nM1 P1 M2 .\nM1 P1 M3 .\nM1 P1 M4 .\nM1 P1 M5\n}",
        "recursionDepth": 44,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P749 wd:Q458 .\nwd:Q17426028 wdt:P108 ?x0 .\nwd:Q17426028 wdt:P108 wd:Q1078474 .\nwd:Q17426028 wdt:P108 wd:Q459026 .\nwd:Q17426028 wdt:P108 wd:Q34433 .\nwd:Q17426028 wdt:P108 wd:Q3152304\n}",
        "questionWithBrackets": "Was [Leila Vignal] employed by [University of Rennes 2 \u2013 Upper Brittany] and [University of Oxford] , employed by [Zagazig University] and [Institut fran\u00e7ais du Proche-Orient] , and employed by [European Union] 's child"
    },
    {
        "questionIdx": 48520,
        "questionPatternModEntities": "Was M1 employed by a parent of M0 , employed by M2 , and employed by M3",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 ?x0 .\nM1 P1 M2 .\nM1 P1 M3\n}",
        "recursionDepth": 38,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q776845 .\nwd:Q27450001 wdt:P108 ?x0 .\nwd:Q27450001 wdt:P108 wd:Q1416215 .\nwd:Q27450001 wdt:P108 wd:Q2283\n}",
        "questionWithBrackets": "Was [Elissa Murphy] employed by a parent of [FeedBurner] , employed by [GoDaddy] , and employed by [Microsoft]"
    },
    {
        "questionIdx": 48522,
        "questionPatternModEntities": "Was M1 's British Canadian male sibling M0",
        "questionTemplate": "Was [entity] 's [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nFILTER ( M0 != M1 ) .\nM0 P0 M1 .\nM0 P1 M2 .\nM0 P1 M3 .\nM0 P2 M4\n}",
        "recursionDepth": 26,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nFILTER ( wd:Q192955 != wd:Q546765 ) .\nwd:Q192955 wdt:P21 wd:Q6581097 .\nwd:Q192955 wdt:P27 wd:Q145 .\nwd:Q192955 wdt:P27 wd:Q16 .\nwd:Q192955 wdt:P3373 wd:Q546765\n}",
        "questionWithBrackets": "Was [Martin Nash] 's British Canadian male sibling [Steve Nash]"
    },
    {
        "questionIdx": 48525,
        "questionPatternModEntities": "Was M0 influenced by M1 and influenced by M2",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2\n}",
        "recursionDepth": 23,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q4235 wdt:P737 wd:Q303 .\nwd:Q4235 wdt:P737 wd:Q62372907\n}",
        "questionWithBrackets": "Was [Miley Cyrus] influenced by [Luisito Comunica] and influenced by [Elvis Presley]"
    },
    {
        "questionIdx": 48573,
        "questionPatternModEntities": "Was M3 's male spouse influenced by M0 and M1",
        "questionTemplate": "Was [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P1 M2 .\n?x0 P2 M3 .\nFILTER ( ?x0 != M3 )\n}",
        "recursionDepth": 25,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P737 wd:Q502 .\n?x0 wdt:P737 wd:Q535 .\n?x0 wdt:P21 wd:Q6581097 .\n?x0 wdt:P26 wd:Q271934 .\nFILTER ( ?x0 != wd:Q271934 )\n}",
        "questionWithBrackets": "Was [Sophia Tolstaya] 's male spouse influenced by [Victor Hugo] and [Stendhal]"
    },
    {
        "questionIdx": 48591,
        "questionPatternModEntities": "Was M1 's spouse 's parent employed by M0",
        "questionTemplate": "Was [entity] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE] [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 ?x1 .\n?x1 P2 M1 .\nFILTER ( ?x1 != M1 )\n}",
        "recursionDepth": 20,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 ?x1 .\n?x0 wdt:P108 wd:Q30250463 .\n?x1 wdt:P26 wd:Q937 .\nFILTER ( ?x1 != wd:Q937 )\n}",
        "questionWithBrackets": "Was [Albert Einstein] 's spouse 's parent employed by [District Court in Ruma]"
    },
    {
        "questionIdx": 48598,
        "questionPatternModEntities": "Was M1 founded by M2 and founded by M0 's sibling",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nM1 P1 ?x0 .\nM1 P1 M2\n}",
        "recursionDepth": 27,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P3373 wd:Q5959371 .\nFILTER ( ?x0 != wd:Q5959371 ) .\nwd:Q191583 wdt:P112 ?x0 .\nwd:Q191583 wdt:P112 wd:Q362485\n}",
        "questionWithBrackets": "Was [Royal Swedish Academy of Sciences] founded by [Sten Carl Bielke] and founded by [Samuel Linnaeus] 's sibling"
    },
    {
        "questionIdx": 48619,
        "questionPatternModEntities": "Was M1 M0 's spouse 's sibling 's spouse , sibling , and parent",
        "questionTemplate": "Was [entity] [entity] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE] , [ROLE_SIMPLE] , and [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x1 P1 M0 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x1 != M0 ) .\nFILTER ( M1 != ?x0 ) .\nFILTER ( M1 != ?x0 ) .\nM1 P0 ?x0 .\nM1 P1 ?x0 .\nM1 P2 ?x0\n}",
        "recursionDepth": 28,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P3373 ?x1 .\n?x1 wdt:P26 wd:Q210535 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x1 != wd:Q210535 ) .\nFILTER ( wd:Q1523 != ?x0 ) .\nFILTER ( wd:Q1523 != ?x0 ) .\nwd:Q1523 wdt:P40|wdt:P355 ?x0 .\nwd:Q1523 wdt:P3373 ?x0 .\nwd:Q1523 wdt:P26 ?x0\n}",
        "questionWithBrackets": "Was [Ramesses II] [Nefertarilllala] 's spouse 's sibling 's spouse , sibling , and parent"
    },
    {
        "questionIdx": 48621,
        "questionPatternModEntities": "Was M0 M1 's parent , spouse , and sibling",
        "questionTemplate": "Was [entity] [entity] 's [ROLE_SIMPLE] , [ROLE_SIMPLE] , and [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\nFILTER ( M0 != M1 ) .\nFILTER ( M0 != M1 ) .\nM0 P0 M1 .\nM0 P1 M1 .\nM0 P2 M1\n}",
        "recursionDepth": 20,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nFILTER ( wd:Q1523 != wd:Q443473 ) .\nFILTER ( wd:Q1523 != wd:Q443473 ) .\nwd:Q1523 wdt:P40|wdt:P355 wd:Q443473 .\nwd:Q1523 wdt:P3373 wd:Q443473 .\nwd:Q1523 wdt:P26 wd:Q443473\n}",
        "questionWithBrackets": "Was [Ramesses II] [Henutmire] 's parent , spouse , and sibling"
    },
    {
        "questionIdx": 48625,
        "questionPatternModEntities": "Was M0 a parent , spouse , and sibling of M1",
        "questionTemplate": "Was [entity] a [ROLE_SIMPLE] , [ROLE_SIMPLE] , and [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nFILTER ( M0 != M1 ) .\nFILTER ( M0 != M1 ) .\nM0 P0 M1 .\nM0 P1 M1 .\nM0 P2 M1\n}",
        "recursionDepth": 22,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nFILTER ( wd:Q1523 != wd:Q443473 ) .\nFILTER ( wd:Q1523 != wd:Q443473 ) .\nwd:Q1523 wdt:P40|wdt:P355 wd:Q443473 .\nwd:Q1523 wdt:P3373 wd:Q443473 .\nwd:Q1523 wdt:P26 wd:Q443473\n}",
        "questionWithBrackets": "Was [Ramesses II] a parent , spouse , and sibling of [Henutmire]"
    },
    {
        "questionIdx": 48628,
        "questionPatternModEntities": "Was M0 's parent and sibling a spouse of M1",
        "questionTemplate": "Was [entity] 's [ROLE_SIMPLE] and [ROLE_SIMPLE] a [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M0 .\n?x0 P2 M1 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x0 != M1 )\n}",
        "recursionDepth": 22,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q493 .\n?x0 wdt:P3373 wd:Q493 .\n?x0 wdt:P26 wd:Q17148576 .\nFILTER ( ?x0 != wd:Q17148576 ) .\nFILTER ( ?x0 != wd:Q493 )\n}",
        "questionWithBrackets": "Was [Arthur Rimbaud] 's parent and sibling a spouse of [Vitalie Rimbaud]"
    },
    {
        "questionIdx": 48629,
        "questionPatternModEntities": "Was M1 's sibling , spouse , and parent M0",
        "questionTemplate": "Was [entity] 's [ROLE_SIMPLE] , [ROLE_SIMPLE] , and [ROLE_SIMPLE] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nFILTER ( M0 != M1 ) .\nFILTER ( M0 != M1 ) .\nM0 P0 M1 .\nM0 P1 M1 .\nM0 P2 M1\n}",
        "recursionDepth": 20,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nFILTER ( wd:Q1523 != wd:Q443473 ) .\nFILTER ( wd:Q1523 != wd:Q443473 ) .\nwd:Q1523 wdt:P40|wdt:P355 wd:Q443473 .\nwd:Q1523 wdt:P3373 wd:Q443473 .\nwd:Q1523 wdt:P26 wd:Q443473\n}",
        "questionWithBrackets": "Was [Henutmire] 's sibling , spouse , and parent [Ramesses II]"
    },
    {
        "questionIdx": 48631,
        "questionPatternModEntities": "Was M1 's spouse , parent , and sibling M0",
        "questionTemplate": "Was [entity] 's [ROLE_SIMPLE] , [ROLE_SIMPLE] , and [ROLE_SIMPLE] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nFILTER ( M0 != M1 ) .\nFILTER ( M0 != M1 ) .\nM0 P0 M1 .\nM0 P1 M1 .\nM0 P2 M1\n}",
        "recursionDepth": 20,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nFILTER ( wd:Q1523 != wd:Q443473 ) .\nFILTER ( wd:Q1523 != wd:Q443473 ) .\nwd:Q1523 wdt:P40|wdt:P355 wd:Q443473 .\nwd:Q1523 wdt:P3373 wd:Q443473 .\nwd:Q1523 wdt:P26 wd:Q443473\n}",
        "questionWithBrackets": "Was [Henutmire] 's spouse , parent , and sibling [Ramesses II]"
    },
    {
        "questionIdx": 48638,
        "questionPatternModEntities": "Was M0 directed by M5 , M6 , and M7 , written by M1 , and edited by M2 , M3 , and M4",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] , [entity] , and [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M2 .\nM0 P1 M3 .\nM0 P1 M4 .\nM0 P2 M5 .\nM0 P2 M6 .\nM0 P2 M7\n}",
        "recursionDepth": 46,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q1137372 wdt:P57 wd:Q549956 .\nwd:Q1137372 wdt:P57 wd:Q2838329 .\nwd:Q1137372 wdt:P57 wd:Q3772 .\nwd:Q1137372 wdt:P1040 wd:Q47284 .\nwd:Q1137372 wdt:P1040 wd:Q273379 .\nwd:Q1137372 wdt:P1040 wd:Q541143 .\nwd:Q1137372 wdt:P58 wd:Q25161\n}",
        "questionWithBrackets": "Was [Four Rooms] directed by [Quentin Tarantino] , [Alexandre Rockwell] , and [Allison Anders] , written by [Roald Dahl] , and edited by [Sally Menke] , [Robert Rodriguez] , and [Terry Rawlings]"
    },
    {
        "questionIdx": 48643,
        "questionPatternModEntities": "Was M2 founded by M0 's male sibling",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M0 ) .\nM2 P2 ?x0\n}",
        "recursionDepth": 21,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P21 wd:Q6581097 .\n?x0 wdt:P3373 wd:Q850421 .\nFILTER ( ?x0 != wd:Q850421 ) .\nwd:Q54122 wdt:P112 ?x0\n}",
        "questionWithBrackets": "Was [Continental Army] founded by [Betty Washington Lewis] 's male sibling"
    },
    {
        "questionIdx": 48680,
        "questionPatternModEntities": "Was M0 's Italian sibling a spouse of M2",
        "questionTemplate": "Was [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] a [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P2 M2 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x0 != M2 )\n}",
        "recursionDepth": 22,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P27 wd:Q38 .\n?x0 wdt:P3373 wd:Q73802232 .\n?x0 wdt:P26 wd:Q1052374 .\nFILTER ( ?x0 != wd:Q73802232 ) .\nFILTER ( ?x0 != wd:Q1052374 )\n}",
        "questionWithBrackets": "Was [Mauro De Andr\u00e9] 's Italian sibling a spouse of [Dori Ghezzi]"
    },
    {
        "questionIdx": 48713,
        "questionPatternModEntities": "Was M1 influenced by a employee of M0 's parent and influenced by M2",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity] 's [ROLE_SIMPLE] and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x1 P1 M0 .\nM1 P2 ?x0 .\nM1 P2 M2\n}",
        "recursionDepth": 33,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P108 ?x1 .\n?x1 wdt:P40|wdt:P355 wd:Q4834874 .\nwd:Q44461 wdt:P737 ?x0 .\nwd:Q44461 wdt:P737 wd:Q1035\n}",
        "questionWithBrackets": "Was [Richard Dawkins] influenced by a employee of [BBC North] 's parent and influenced by [Charles Darwin]"
    },
    {
        "questionIdx": 48726,
        "questionPatternModEntities": "Was M2 directed by M0 's female sibling",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M0 ) .\nM2 P2 ?x0\n}",
        "recursionDepth": 21,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P21 wd:Q6581072 .\n?x0 wdt:P3373 wd:Q3360333 .\nFILTER ( ?x0 != wd:Q3360333 ) .\nwd:Q3521591 wdt:P57 ?x0\n}",
        "questionWithBrackets": "Was [The Line, the Cross and the Curve] directed by [Paddy Bush] 's female sibling"
    },
    {
        "questionIdx": 48730,
        "questionPatternModEntities": "Was M0 M1 's sequel",
        "questionTemplate": "Was [entity] [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1\n}",
        "recursionDepth": 11,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q1042294 wdt:P155 wd:Q721\n}",
        "questionWithBrackets": "Was [So Long, and Thanks for All the Fish] [Life, the Universe and Everything] 's sequel"
    },
    {
        "questionIdx": 48814,
        "questionPatternModEntities": "Was M2 directed by a male employee of M0",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nM2 P2 ?x0\n}",
        "recursionDepth": 23,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P108 wd:Q141336 .\n?x0 wdt:P21 wd:Q6581097 .\nwd:Q125772 wdt:P57 ?x0\n}",
        "questionWithBrackets": "Was [Solaris] directed by a male employee of [Mosfilm]"
    },
    {
        "questionIdx": 48841,
        "questionPatternModEntities": "Was M0 written by and edited by M1",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1\n}",
        "recursionDepth": 20,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q118976 wdt:P1040 wd:Q8003 .\nwd:Q118976 wdt:P58 wd:Q8003\n}",
        "questionWithBrackets": "Was [Alexander Nevsky] written by and edited by [Sergei Eisenstein]"
    },
    {
        "questionIdx": 48846,
        "questionPatternModEntities": "Was M0 written by M1 , M2 , and M3 , edited by M4 , M5 , and M6 , and directed by M7",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] , [entity] , and [entity] , [VP_SIMPLE] by [entity] , [entity] , and [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P0 M3 .\nM0 P1 M4 .\nM0 P1 M5 .\nM0 P1 M6 .\nM0 P2 M7\n}",
        "recursionDepth": 46,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q1137372 wdt:P57 wd:Q3772 .\nwd:Q1137372 wdt:P1040 wd:Q47284 .\nwd:Q1137372 wdt:P1040 wd:Q273379 .\nwd:Q1137372 wdt:P1040 wd:Q5359064 .\nwd:Q1137372 wdt:P58 wd:Q25161 .\nwd:Q1137372 wdt:P58 wd:Q2838329 .\nwd:Q1137372 wdt:P58 wd:Q549956\n}",
        "questionWithBrackets": "Was [Four Rooms] written by [Allison Anders] , [Alexandre Rockwell] , and [Roald Dahl] , edited by [Elena Maganini] , [Robert Rodriguez] , and [Sally Menke] , and directed by [Quentin Tarantino]"
    },
    {
        "questionIdx": 48851,
        "questionPatternModEntities": "Was M0 directed , written , edited , and produced by M1 and M2",
        "questionTemplate": "Was [entity] [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P1 M1 .\nM0 P1 M2 .\nM0 P2 M1 .\nM0 P2 M2 .\nM0 P3 M1 .\nM0 P3 M2\n}",
        "recursionDepth": 33,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q20729551 wdt:P57 wd:Q562108 .\nwd:Q20729551 wdt:P57 wd:Q1687239 .\nwd:Q20729551 wdt:P1040 wd:Q562108 .\nwd:Q20729551 wdt:P1040 wd:Q1687239 .\nwd:Q20729551 wdt:P162|wdt:P272 wd:Q562108 .\nwd:Q20729551 wdt:P162|wdt:P272 wd:Q1687239 .\nwd:Q20729551 wdt:P58 wd:Q562108 .\nwd:Q20729551 wdt:P58 wd:Q1687239\n}",
        "questionWithBrackets": "Was [Stop for Bud] directed , written , edited , and produced by [Jens J\u00f8rgen Thorsen] and [J\u00f8rgen Leth]"
    },
    {
        "questionIdx": 48893,
        "questionPatternModEntities": "Was M1 influenced by a parent of M0",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 ?x0\n}",
        "recursionDepth": 18,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q61904342 .\nwd:Q360366 wdt:P737 ?x0\n}",
        "questionWithBrackets": "Was [Nicomachus] influenced by a parent of [Pythias]"
    },
    {
        "questionIdx": 48931,
        "questionPatternModEntities": "Was M0 produced , edited , and written by M1 and M2",
        "questionTemplate": "Was [entity] [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P1 M1 .\nM0 P1 M2 .\nM0 P2 M1 .\nM0 P2 M2\n}",
        "recursionDepth": 28,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q20729551 wdt:P1040 wd:Q562108 .\nwd:Q20729551 wdt:P1040 wd:Q1687239 .\nwd:Q20729551 wdt:P162|wdt:P272 wd:Q562108 .\nwd:Q20729551 wdt:P162|wdt:P272 wd:Q1687239 .\nwd:Q20729551 wdt:P58 wd:Q562108 .\nwd:Q20729551 wdt:P58 wd:Q1687239\n}",
        "questionWithBrackets": "Was [Stop for Bud] produced , edited , and written by [J\u00f8rgen Leth] and [Jens J\u00f8rgen Thorsen]"
    },
    {
        "questionIdx": 48945,
        "questionPatternModEntities": "Was M0 's spouse employed by M1 's parent",
        "questionTemplate": "Was [entity] 's [ROLE_SIMPLE] [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x0 P1 M0 .\n?x1 P2 M1 .\nFILTER ( ?x0 != M0 )\n}",
        "recursionDepth": 20,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P108 ?x1 .\n?x0 wdt:P26 wd:Q76 .\n?x1 wdt:P40|wdt:P355 wd:Q2603905 .\nFILTER ( ?x0 != wd:Q76 )\n}",
        "questionWithBrackets": "Was [Barack Obama] 's spouse employed by [Princeton University Art Museum] 's parent"
    },
    {
        "questionIdx": 48946,
        "questionPatternModEntities": "Was M2 produced by and edited by M1 's Swedish parent",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by and [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nM2 P2 ?x0 .\nM2 P3 ?x0\n}",
        "recursionDepth": 29,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q709448 .\n?x0 wdt:P27 wd:Q34 .\nwd:Q1415845 wdt:P1040 ?x0 .\nwd:Q1415845 wdt:P162|wdt:P272 ?x0\n}",
        "questionWithBrackets": "Was [Fimpen] produced by and edited by [Johan Widerberg] 's Swedish parent"
    },
    {
        "questionIdx": 48964,
        "questionPatternModEntities": "Was M0 produced by , executive produced by , and written by M1 and M2",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P1 M1 .\nM0 P1 M2 .\nM0 P2 M1 .\nM0 P2 M2\n}",
        "recursionDepth": 31,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q104814 wdt:P1431 wd:Q350422 .\nwd:Q104814 wdt:P1431 wd:Q2396324 .\nwd:Q104814 wdt:P162|wdt:P272 wd:Q350422 .\nwd:Q104814 wdt:P162|wdt:P272 wd:Q2396324 .\nwd:Q104814 wdt:P58 wd:Q350422 .\nwd:Q104814 wdt:P58 wd:Q2396324\n}",
        "questionWithBrackets": "Was [Aliens] produced by , executive produced by , and written by [Walter Hill] and [David Giler]"
    },
    {
        "questionIdx": 49023,
        "questionPatternModEntities": "Was M1 written and produced by a spouse of M0",
        "questionTemplate": "Was [entity] [VP_SIMPLE] and [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nM1 P1 ?x0 .\nM1 P2 ?x0\n}",
        "recursionDepth": 25,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P26 wd:Q76717 .\nFILTER ( ?x0 != wd:Q76717 ) .\nwd:Q2201 wdt:P162|wdt:P272 ?x0 .\nwd:Q2201 wdt:P58 ?x0\n}",
        "questionWithBrackets": "Was [Kick-Ass] written and produced by a spouse of [Claudia Schiffer]"
    },
    {
        "questionIdx": 49061,
        "questionPatternModEntities": "Was M1 's Chinese Canadian employee M0",
        "questionTemplate": "Was [entity] 's [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M2 .\nM0 P1 M3\n}",
        "recursionDepth": 21,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q270650 wdt:P108 wd:Q1065 .\nwd:Q270650 wdt:P27 wd:Q148 .\nwd:Q270650 wdt:P27 wd:Q16\n}",
        "questionWithBrackets": "Was [United Nations] 's Chinese Canadian employee [Margaret Chan]"
    },
    {
        "questionIdx": 49063,
        "questionPatternModEntities": "Was M0 's employee a Canadian spouse of M2",
        "questionTemplate": "Was [entity] 's [ROLE_SIMPLE] a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P2 M2 .\nFILTER ( ?x0 != M2 )\n}",
        "recursionDepth": 22,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P108 wd:Q461761 .\n?x0 wdt:P27 wd:Q16 .\n?x0 wdt:P26 wd:Q3087911 .\nFILTER ( ?x0 != wd:Q3087911 )\n}",
        "questionWithBrackets": "Was [Canadian Broadcasting Corporation] 's employee a Canadian spouse of [Jean-Daniel Lafond]"
    },
    {
        "questionIdx": 49073,
        "questionPatternModEntities": "Was M1 executive produced by M2 and directed by M0 's employee",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 M2 .\nM1 P2 ?x0\n}",
        "recursionDepth": 28,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P108 wd:Q168383 .\nwd:Q1629592 wdt:P57 ?x0 .\nwd:Q1629592 wdt:P1431 wd:Q72291\n}",
        "questionWithBrackets": "Was [A Farewell to Arms] executive produced by [David O. Selznick] and directed by [Universal Pictures] 's employee"
    },
    {
        "questionIdx": 49211,
        "questionPatternModEntities": "Was M0 executive produced , written , and produced by M1",
        "questionTemplate": "Was [entity] [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1 .\nM0 P2 M1\n}",
        "recursionDepth": 25,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q854990 wdt:P1431 wd:Q8006 .\nwd:Q854990 wdt:P162|wdt:P272 wd:Q8006 .\nwd:Q854990 wdt:P58 wd:Q8006\n}",
        "questionWithBrackets": "Was [Kagemusha] executive produced , written , and produced by [Akira Kurosawa]"
    },
    {
        "questionIdx": 49221,
        "questionPatternModEntities": "Was M1 's sequel M0",
        "questionTemplate": "Was [entity] 's [ROLE_SIMPLE] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1\n}",
        "recursionDepth": 11,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q131593 wdt:P155 wd:Q168\n}",
        "questionWithBrackets": "Was [\u03a0] 's sequel [san]"
    },
    {
        "questionIdx": 49246,
        "questionPatternModEntities": "Was M0 produced by and written by M1",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1\n}",
        "recursionDepth": 20,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q1068968 wdt:P162|wdt:P272 wd:Q882 .\nwd:Q1068968 wdt:P58 wd:Q882\n}",
        "questionWithBrackets": "Was [A King in New York] produced by and written by [Charlie Chaplin]"
    },
    {
        "questionIdx": 49305,
        "questionPatternModEntities": "Was M2 executive produced by M3 , edited by M4 , M5 , and M6 , and executive produced by M0 's American employee",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , [entity] , and [entity] , and [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nM2 P2 ?x0 .\nM2 P2 M3 .\nM2 P3 M4 .\nM2 P3 M5 .\nM2 P3 M6\n}",
        "recursionDepth": 50,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P108 wd:Q49210 .\n?x0 wdt:P27 wd:Q30 .\nwd:Q1137372 wdt:P1040 wd:Q541143 .\nwd:Q1137372 wdt:P1040 wd:Q273379 .\nwd:Q1137372 wdt:P1040 wd:Q5359064 .\nwd:Q1137372 wdt:P1431 ?x0 .\nwd:Q1137372 wdt:P1431 wd:Q549956\n}",
        "questionWithBrackets": "Was [Four Rooms] executive produced by [Alexandre Rockwell] , edited by [Terry Rawlings] , [Sally Menke] , and [Elena Maganini] , and executive produced by [New York University] 's American employee"
    },
    {
        "questionIdx": 49318,
        "questionPatternModEntities": "Was M0 's employee 's actor M1",
        "questionTemplate": "Was [entity] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 ?x0\n}",
        "recursionDepth": 15,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P108 wd:Q86105647 .\nwd:Q37269398 wdt:P453 ?x0\n}",
        "questionWithBrackets": "Was [No label defined] 's employee 's actor [Jonathan Evans-Jones]"
    },
    {
        "questionIdx": 49323,
        "questionPatternModEntities": "Was M1 produced by M2 and executive produced by a sibling of M0 's sibling",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] and [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x1 P0 M0 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x1 != M0 ) .\nM1 P1 ?x0 .\nM1 P2 M2\n}",
        "recursionDepth": 34,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P3373 ?x1 .\n?x1 wdt:P3373 wd:Q40791 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x1 != wd:Q40791 ) .\nwd:Q924642 wdt:P1431 ?x0 .\nwd:Q924642 wdt:P162|wdt:P272 wd:Q6708571\n}",
        "questionWithBrackets": "Was [Hope Floats] produced by [Lynda Obst] and executive produced by a sibling of [Sandra Bullock] 's sibling"
    },
    {
        "questionIdx": 49325,
        "questionPatternModEntities": "Was M0 's sequel written by and executive produced by M1 's sibling",
        "questionTemplate": "Was [entity] 's [ROLE_SIMPLE] [VP_SIMPLE] by and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 M0 .\n?x1 P3 M1 .\nFILTER ( ?x1 != M1 )\n}",
        "recursionDepth": 29,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P1431 ?x1 .\n?x0 wdt:P155 wd:Q2085 .\n?x0 wdt:P58 ?x1 .\n?x1 wdt:P3373 wd:Q104373781 .\nFILTER ( ?x1 != wd:Q104373781 )\n}",
        "questionWithBrackets": "Was [Twin Peaks] 's sequel written by and executive produced by [John Lynch] 's sibling"
    },
    {
        "questionIdx": 49338,
        "questionPatternModEntities": "Was M1 's spouse M2 's male spouse",
        "questionTemplate": "Was [entity] 's [ROLE_SIMPLE] [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\nFILTER ( ?x0 != M1 ) .\nFILTER ( ?x0 != M2 )\n}",
        "recursionDepth": 20,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P21 wd:Q6581097 .\n?x0 wdt:P26 wd:Q2259 .\n?x0 wdt:P26 wd:Q152626 .\nFILTER ( ?x0 != wd:Q2259 ) .\nFILTER ( ?x0 != wd:Q152626 )\n}",
        "questionWithBrackets": "Was [Julia the Elder] 's spouse [Pomponia Caecilia Attica] 's male spouse"
    },
    {
        "questionIdx": 49348,
        "questionPatternModEntities": "Was M0 executive produced by M1 , executive produced by M2 , and directed by M3",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P1 M3\n}",
        "recursionDepth": 34,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q18907860 wdt:P57 wd:Q4754876 .\nwd:Q18907860 wdt:P1431 wd:Q55258 .\nwd:Q18907860 wdt:P1431 wd:Q1680948\n}",
        "questionWithBrackets": "Was [Night Will Fall] executive produced by [Stephen Frears] , executive produced by [James Packer] , and directed by [Andr\u00e9 Singer]"
    },
    {
        "questionIdx": 49377,
        "questionPatternModEntities": "Was M0 M1 's child",
        "questionTemplate": "Was [entity] [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1\n}",
        "recursionDepth": 11,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q155573 wdt:P749 wd:Q67\n}",
        "questionWithBrackets": "Was [Airbus Helicopters] [Airbus] 's child"
    },
    {
        "questionIdx": 49385,
        "questionPatternModEntities": "Was M0 a German employee of M1 , M2 , M3 , and M4",
        "questionTemplate": "Was [entity] a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] , [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P0 M3 .\nM0 P0 M4 .\nM0 P1 M5\n}",
        "recursionDepth": 28,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q39525 wdt:P108 wd:Q23317 .\nwd:Q39525 wdt:P108 wd:Q39898 .\nwd:Q39525 wdt:P108 wd:Q26678 .\nwd:Q39525 wdt:P108 wd:Q940689 .\nwd:Q39525 wdt:P27 wd:Q183\n}",
        "questionWithBrackets": "Was [Claus Luthe] a German employee of [NSU] , [Fiat S.p.A.] , [Audi] , and [BMW]"
    },
    {
        "questionIdx": 49477,
        "questionPatternModEntities": "Was M1 's American German male employee M0",
        "questionTemplate": "Was [entity] 's [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M2 .\nM0 P1 M3 .\nM0 P2 M4\n}",
        "recursionDepth": 26,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q41508 wdt:P108 wd:Q124354 .\nwd:Q41508 wdt:P21 wd:Q6581097 .\nwd:Q41508 wdt:P27 wd:Q183 .\nwd:Q41508 wdt:P27 wd:Q30\n}",
        "questionWithBrackets": "Was [Bauhaus] 's American German male employee [Ludwig Mies van der Rohe]"
    },
    {
        "questionIdx": 49479,
        "questionPatternModEntities": "Was M2 directed by and executive produced by a Italian parent of M1",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by and [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nM2 P2 ?x0 .\nM2 P3 ?x0\n}",
        "recursionDepth": 32,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q554787 .\n?x0 wdt:P27 wd:Q38 .\nwd:Q172837 wdt:P57 ?x0 .\nwd:Q172837 wdt:P1431 ?x0\n}",
        "questionWithBrackets": "Was [Bicycle Thieves] directed by and executive produced by a Italian parent of [Christian De Sica]"
    },
    {
        "questionIdx": 49506,
        "questionPatternModEntities": "Was M1 M0 's spouse 's sibling and spouse",
        "questionTemplate": "Was [entity] [entity] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE] and [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( M1 != ?x0 ) .\nFILTER ( M1 != ?x0 ) .\nM1 P0 ?x0 .\nM1 P1 ?x0\n}",
        "recursionDepth": 20,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P26 wd:Q39938 .\nFILTER ( ?x0 != wd:Q39938 ) .\nFILTER ( wd:Q40017 != ?x0 ) .\nFILTER ( wd:Q40017 != ?x0 ) .\nwd:Q40017 wdt:P3373 ?x0 .\nwd:Q40017 wdt:P26 ?x0\n}",
        "questionWithBrackets": "Was [Ptolemy XIV of Egypt] [Ptolemy XIII Theos Philopator] 's spouse 's sibling and spouse"
    },
    {
        "questionIdx": 49510,
        "questionPatternModEntities": "Was M0 's sibling M1 's parent , sibling , and spouse",
        "questionTemplate": "Was [entity] 's [ROLE_SIMPLE] [entity] 's [ROLE_SIMPLE] , [ROLE_SIMPLE] , and [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P1 M1 .\n?x0 P2 M1 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x0 != M1 ) .\nFILTER ( ?x0 != M1 )\n}",
        "recursionDepth": 24,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q443473 .\n?x0 wdt:P3373 wd:Q443473 .\n?x0 wdt:P3373 wd:Q273990 .\n?x0 wdt:P26 wd:Q443473 .\nFILTER ( ?x0 != wd:Q443473 ) .\nFILTER ( ?x0 != wd:Q443473 ) .\nFILTER ( ?x0 != wd:Q273990 )\n}",
        "questionWithBrackets": "Was [Princess Tia] 's sibling [Henutmire] 's parent , sibling , and spouse"
    },
    {
        "questionIdx": 49515,
        "questionPatternModEntities": "Was M2 's spouse a actor of M0 and M1",
        "questionTemplate": "Was [entity] 's [ROLE_SIMPLE] a [ROLE_SIMPLE] of [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P1 M2 .\nFILTER ( ?x0 != M2 )\n}",
        "recursionDepth": 21,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P453 wd:Q12742668 .\n?x0 wdt:P453 wd:Q50386809 .\n?x0 wdt:P26 wd:Q182360 .\nFILTER ( ?x0 != wd:Q182360 )\n}",
        "questionWithBrackets": "Was [Giovanni Battista Meneghini] 's spouse a actor of [Princess Turandot] and [Carmen]"
    },
    {
        "questionIdx": 49548,
        "questionPatternModEntities": "Was M1 executive produced by M2 , executive produced by M3 and M4 , and directed by M0 's parent",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] and [entity] , and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 M2 .\nM1 P1 M3 .\nM1 P1 M4 .\nM1 P2 ?x0\n}",
        "recursionDepth": 42,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q956349 .\nwd:Q102244 wdt:P57 ?x0 .\nwd:Q102244 wdt:P1431 wd:Q75079 .\nwd:Q102244 wdt:P1431 wd:Q975579 .\nwd:Q102244 wdt:P1431 wd:Q1900360\n}",
        "questionWithBrackets": "Was [Harry Potter and the Chamber of Secrets] executive produced by [Chris Columbus] , executive produced by [David Barron] and [Mark Radcliffe] , and directed by [Eleanor Columbus] 's parent"
    },
    {
        "questionIdx": 49612,
        "questionPatternModEntities": "Was M1 a actor of a parent of M0",
        "questionTemplate": "Was [entity] a [ROLE_SIMPLE] of a [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 ?x0\n}",
        "recursionDepth": 19,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q130832 .\nwd:Q37739859 wdt:P453 ?x0\n}",
        "questionWithBrackets": "Was [shower of gold] a actor of a parent of [Perseus]"
    },
    {
        "questionIdx": 49650,
        "questionPatternModEntities": "Was M1 edited by , executive produced by , directed by , produced by , and written by M0 's sibling",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nM1 P1 ?x0 .\nM1 P2 ?x0 .\nM1 P3 ?x0 .\nM1 P4 ?x0 .\nM1 P5 ?x0\n}",
        "recursionDepth": 43,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P3373 wd:Q28370409 .\nFILTER ( ?x0 != wd:Q28370409 ) .\nwd:Q28146810 wdt:P57 ?x0 .\nwd:Q28146810 wdt:P1040 ?x0 .\nwd:Q28146810 wdt:P1431 ?x0 .\nwd:Q28146810 wdt:P162|wdt:P272 ?x0 .\nwd:Q28146810 wdt:P58 ?x0\n}",
        "questionWithBrackets": "Was [Bullets, Fangs and Dinner at 8] edited by , executive produced by , directed by , produced by , and written by [Everton Rocca] 's sibling"
    },
    {
        "questionIdx": 49656,
        "questionPatternModEntities": "Was M1 edited by , produced by , executive produced by , directed by , and written by M0 's spouse",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nM1 P1 ?x0 .\nM1 P2 ?x0 .\nM1 P3 ?x0 .\nM1 P4 ?x0 .\nM1 P5 ?x0\n}",
        "recursionDepth": 43,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P26 wd:Q3032150 .\nFILTER ( ?x0 != wd:Q3032150 ) .\nwd:Q854990 wdt:P57 ?x0 .\nwd:Q854990 wdt:P1040 ?x0 .\nwd:Q854990 wdt:P1431 ?x0 .\nwd:Q854990 wdt:P162|wdt:P272 ?x0 .\nwd:Q854990 wdt:P58 ?x0\n}",
        "questionWithBrackets": "Was [Kagemusha] edited by , produced by , executive produced by , directed by , and written by [Y\u014dko Yaguchi] 's spouse"
    },
    {
        "questionIdx": 49659,
        "questionPatternModEntities": "Was M1 edited , executive produced , written , and produced by M0 's sibling",
        "questionTemplate": "Was [entity] [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nM1 P1 ?x0 .\nM1 P2 ?x0 .\nM1 P3 ?x0 .\nM1 P4 ?x0\n}",
        "recursionDepth": 34,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P3373 wd:Q28370409 .\nFILTER ( ?x0 != wd:Q28370409 ) .\nwd:Q28146810 wdt:P1040 ?x0 .\nwd:Q28146810 wdt:P1431 ?x0 .\nwd:Q28146810 wdt:P162|wdt:P272 ?x0 .\nwd:Q28146810 wdt:P58 ?x0\n}",
        "questionWithBrackets": "Was [Bullets, Fangs and Dinner at 8] edited , executive produced , written , and produced by [Everton Rocca] 's sibling"
    },
    {
        "questionIdx": 49667,
        "questionPatternModEntities": "Was M1 executive produced by , produced by , written by , and edited by a sibling of M0",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nM1 P1 ?x0 .\nM1 P2 ?x0 .\nM1 P3 ?x0 .\nM1 P4 ?x0\n}",
        "recursionDepth": 39,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P3373 wd:Q28370409 .\nFILTER ( ?x0 != wd:Q28370409 ) .\nwd:Q28146810 wdt:P1040 ?x0 .\nwd:Q28146810 wdt:P1431 ?x0 .\nwd:Q28146810 wdt:P162|wdt:P272 ?x0 .\nwd:Q28146810 wdt:P58 ?x0\n}",
        "questionWithBrackets": "Was [Bullets, Fangs and Dinner at 8] executive produced by , produced by , written by , and edited by a sibling of [Everton Rocca]"
    },
    {
        "questionIdx": 49668,
        "questionPatternModEntities": "Was M1 executive produced by , written by , directed by , produced by , and edited by M0 's spouse",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nM1 P1 ?x0 .\nM1 P2 ?x0 .\nM1 P3 ?x0 .\nM1 P4 ?x0 .\nM1 P5 ?x0\n}",
        "recursionDepth": 43,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P26 wd:Q3032150 .\nFILTER ( ?x0 != wd:Q3032150 ) .\nwd:Q854990 wdt:P57 ?x0 .\nwd:Q854990 wdt:P1040 ?x0 .\nwd:Q854990 wdt:P1431 ?x0 .\nwd:Q854990 wdt:P162|wdt:P272 ?x0 .\nwd:Q854990 wdt:P58 ?x0\n}",
        "questionWithBrackets": "Was [Kagemusha] executive produced by , written by , directed by , produced by , and edited by [Y\u014dko Yaguchi] 's spouse"
    },
    {
        "questionIdx": 49669,
        "questionPatternModEntities": "Was M1 executive produced by , written by , edited by , and produced by M0 's parent",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 ?x0 .\nM1 P2 ?x0 .\nM1 P3 ?x0 .\nM1 P4 ?x0\n}",
        "recursionDepth": 37,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q1620638 .\nwd:Q854990 wdt:P1040 ?x0 .\nwd:Q854990 wdt:P1431 ?x0 .\nwd:Q854990 wdt:P162|wdt:P272 ?x0 .\nwd:Q854990 wdt:P58 ?x0\n}",
        "questionWithBrackets": "Was [Kagemusha] executive produced by , written by , edited by , and produced by [Hisao Kurosawa] 's parent"
    },
    {
        "questionIdx": 49671,
        "questionPatternModEntities": "Was M1 executive produced , produced , edited , and written by M0 's parent",
        "questionTemplate": "Was [entity] [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 ?x0 .\nM1 P2 ?x0 .\nM1 P3 ?x0 .\nM1 P4 ?x0\n}",
        "recursionDepth": 34,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q4739681 .\nwd:Q17738 wdt:P1040 ?x0 .\nwd:Q17738 wdt:P1431 ?x0 .\nwd:Q17738 wdt:P162|wdt:P272 ?x0 .\nwd:Q17738 wdt:P58 ?x0\n}",
        "questionWithBrackets": "Was [Star Wars: Episode IV \u2013 A New Hope] executive produced , produced , edited , and written by [Amanda Lucas] 's parent"
    },
    {
        "questionIdx": 49675,
        "questionPatternModEntities": "Was M1 produced by , directed by , written by , executive produced by , and edited by M0 's spouse",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nM1 P1 ?x0 .\nM1 P2 ?x0 .\nM1 P3 ?x0 .\nM1 P4 ?x0 .\nM1 P5 ?x0\n}",
        "recursionDepth": 43,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P26 wd:Q3032150 .\nFILTER ( ?x0 != wd:Q3032150 ) .\nwd:Q854990 wdt:P57 ?x0 .\nwd:Q854990 wdt:P1040 ?x0 .\nwd:Q854990 wdt:P1431 ?x0 .\nwd:Q854990 wdt:P162|wdt:P272 ?x0 .\nwd:Q854990 wdt:P58 ?x0\n}",
        "questionWithBrackets": "Was [Kagemusha] produced by , directed by , written by , executive produced by , and edited by [Y\u014dko Yaguchi] 's spouse"
    },
    {
        "questionIdx": 49676,
        "questionPatternModEntities": "Was M1 produced by , edited by , executive produced by , written by , and directed by M0 's parent",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 ?x0 .\nM1 P2 ?x0 .\nM1 P3 ?x0 .\nM1 P4 ?x0 .\nM1 P5 ?x0\n}",
        "recursionDepth": 43,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q1620638 .\nwd:Q854990 wdt:P57 ?x0 .\nwd:Q854990 wdt:P1040 ?x0 .\nwd:Q854990 wdt:P1431 ?x0 .\nwd:Q854990 wdt:P162|wdt:P272 ?x0 .\nwd:Q854990 wdt:P58 ?x0\n}",
        "questionWithBrackets": "Was [Kagemusha] produced by , edited by , executive produced by , written by , and directed by [Hisao Kurosawa] 's parent"
    },
    {
        "questionIdx": 49686,
        "questionPatternModEntities": "Was M1 produced , edited , executive produced , directed , and written by M0 's spouse",
        "questionTemplate": "Was [entity] [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nM1 P1 ?x0 .\nM1 P2 ?x0 .\nM1 P3 ?x0 .\nM1 P4 ?x0 .\nM1 P5 ?x0\n}",
        "recursionDepth": 39,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P26 wd:Q3032150 .\nFILTER ( ?x0 != wd:Q3032150 ) .\nwd:Q854990 wdt:P57 ?x0 .\nwd:Q854990 wdt:P1040 ?x0 .\nwd:Q854990 wdt:P1431 ?x0 .\nwd:Q854990 wdt:P162|wdt:P272 ?x0 .\nwd:Q854990 wdt:P58 ?x0\n}",
        "questionWithBrackets": "Was [Kagemusha] produced , edited , executive produced , directed , and written by [Y\u014dko Yaguchi] 's spouse"
    },
    {
        "questionIdx": 49698,
        "questionPatternModEntities": "Was M1 written , directed , edited , and executive produced by M0 's sibling",
        "questionTemplate": "Was [entity] [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nM1 P1 ?x0 .\nM1 P2 ?x0 .\nM1 P3 ?x0 .\nM1 P4 ?x0\n}",
        "recursionDepth": 34,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P3373 wd:Q28370409 .\nFILTER ( ?x0 != wd:Q28370409 ) .\nwd:Q28146810 wdt:P57 ?x0 .\nwd:Q28146810 wdt:P1040 ?x0 .\nwd:Q28146810 wdt:P1431 ?x0 .\nwd:Q28146810 wdt:P58 ?x0\n}",
        "questionWithBrackets": "Was [Bullets, Fangs and Dinner at 8] written , directed , edited , and executive produced by [Everton Rocca] 's sibling"
    },
    {
        "questionIdx": 49700,
        "questionPatternModEntities": "Was M1 written , edited , produced , executive produced , and directed by M0 's spouse",
        "questionTemplate": "Was [entity] [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nM1 P1 ?x0 .\nM1 P2 ?x0 .\nM1 P3 ?x0 .\nM1 P4 ?x0 .\nM1 P5 ?x0\n}",
        "recursionDepth": 39,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P26 wd:Q3032150 .\nFILTER ( ?x0 != wd:Q3032150 ) .\nwd:Q854990 wdt:P57 ?x0 .\nwd:Q854990 wdt:P1040 ?x0 .\nwd:Q854990 wdt:P1431 ?x0 .\nwd:Q854990 wdt:P162|wdt:P272 ?x0 .\nwd:Q854990 wdt:P58 ?x0\n}",
        "questionWithBrackets": "Was [Kagemusha] written , edited , produced , executive produced , and directed by [Y\u014dko Yaguchi] 's spouse"
    },
    {
        "questionIdx": 49727,
        "questionPatternModEntities": "Was M3 executive produced by a female employee of M0 and M1",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P1 M2 .\nM3 P2 ?x0\n}",
        "recursionDepth": 28,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P108 wd:Q2012913 .\n?x0 wdt:P108 wd:Q3050972 .\n?x0 wdt:P21 wd:Q6581072 .\nwd:Q7098683 wdt:P1431 ?x0\n}",
        "questionWithBrackets": "Was [Oprah Winfrey's Legends Ball] executive produced by a female employee of [Harpo Productions] and [WLS-TV]"
    },
    {
        "questionIdx": 49744,
        "questionPatternModEntities": "Was M3 's French Italian parent M0",
        "questionTemplate": "Was [entity] 's [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P1 M3\n}",
        "recursionDepth": 21,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q4261 wdt:P40|wdt:P355 wd:Q55332442 .\nwd:Q4261 wdt:P27 wd:Q38 .\nwd:Q4261 wdt:P27 wd:Q142\n}",
        "questionWithBrackets": "Was [Laurent Platini] 's French Italian parent [Michel Platini]"
    },
    {
        "questionIdx": 49831,
        "questionPatternModEntities": "Was M0 M4 's Dutch female British spouse",
        "questionTemplate": "Was [entity] [entity] 's [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\nFILTER ( M0 != M4 ) .\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P1 M3 .\nM0 P2 M4\n}",
        "recursionDepth": 26,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nFILTER ( wd:Q66132763 != wd:Q705270 ) .\nwd:Q66132763 wdt:P21 wd:Q6581072 .\nwd:Q66132763 wdt:P27 wd:Q29999 .\nwd:Q66132763 wdt:P27 wd:Q145 .\nwd:Q66132763 wdt:P26 wd:Q705270\n}",
        "questionWithBrackets": "Was [Beatrice Boeke-Cadbury] [Kees Boeke] 's Dutch female British spouse"
    },
    {
        "questionIdx": 49832,
        "questionPatternModEntities": "Was M0 a Dutch British female spouse of M4",
        "questionTemplate": "Was [entity] a [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nFILTER ( M0 != M4 ) .\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P1 M3 .\nM0 P2 M4\n}",
        "recursionDepth": 28,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nFILTER ( wd:Q66132763 != wd:Q705270 ) .\nwd:Q66132763 wdt:P21 wd:Q6581072 .\nwd:Q66132763 wdt:P27 wd:Q29999 .\nwd:Q66132763 wdt:P27 wd:Q145 .\nwd:Q66132763 wdt:P26 wd:Q705270\n}",
        "questionWithBrackets": "Was [Beatrice Boeke-Cadbury] a Dutch British female spouse of [Kees Boeke]"
    },
    {
        "questionIdx": 49868,
        "questionPatternModEntities": "Was M0 M1 's Italian Spanish male sibling",
        "questionTemplate": "Was [entity] [entity] 's [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\nFILTER ( M0 != M1 ) .\nM0 P0 M1 .\nM0 P1 M2 .\nM0 P1 M3 .\nM0 P2 M4\n}",
        "recursionDepth": 26,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nFILTER ( wd:Q505383 != wd:Q2963377 ) .\nwd:Q505383 wdt:P21 wd:Q6581097 .\nwd:Q505383 wdt:P27 wd:Q38 .\nwd:Q505383 wdt:P27 wd:Q29 .\nwd:Q505383 wdt:P3373 wd:Q2963377\n}",
        "questionWithBrackets": "Was [Rafael S\u00e1nchez Ferlosio] [Chicho S\u00e1nchez Ferlosio] 's Italian Spanish male sibling"
    },
    {
        "questionIdx": 49878,
        "questionPatternModEntities": "Was M3 M2 's Japanese British spouse 's sibling",
        "questionTemplate": "Was [entity] [entity] 's [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P1 M2 .\nFILTER ( ?x0 != M2 ) .\nFILTER ( M3 != ?x0 ) .\nM3 P2 ?x0\n}",
        "recursionDepth": 25,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P27 wd:Q17 .\n?x0 wdt:P27 wd:Q145 .\n?x0 wdt:P26 wd:Q96087986 .\nFILTER ( ?x0 != wd:Q96087986 ) .\nFILTER ( wd:Q96087979 != ?x0 ) .\nwd:Q96087979 wdt:P3373 ?x0\n}",
        "questionWithBrackets": "Was [James Daniel Hearn] [Althea Foley] 's Japanese British spouse 's sibling"
    },
    {
        "questionIdx": 49882,
        "questionPatternModEntities": "Was M3 's female spouse influenced by M0 and M1",
        "questionTemplate": "Was [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P1 M2 .\n?x0 P2 M3 .\nFILTER ( ?x0 != M3 )\n}",
        "recursionDepth": 25,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P737 wd:Q255 .\n?x0 wdt:P737 wd:Q1339 .\n?x0 wdt:P21 wd:Q6581072 .\n?x0 wdt:P26 wd:Q560757 .\nFILTER ( ?x0 != wd:Q560757 )\n}",
        "questionWithBrackets": "Was [Wilhelm Hensel] 's female spouse influenced by [Ludwig van Beethoven] and [Johann Sebastian Bach]"
    },
    {
        "questionIdx": 49894,
        "questionPatternModEntities": "Was M1 M0 's actor 's parent",
        "questionTemplate": "Was [entity] [entity] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 ?x0\n}",
        "recursionDepth": 15,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P453 wd:Q222573 .\nwd:Q131575 wdt:P40|wdt:P355 ?x0\n}",
        "questionWithBrackets": "Was [Hecate] [femme fatale] 's actor 's parent"
    },
    {
        "questionIdx": 49971,
        "questionPatternModEntities": "Was M2 M0 's French sibling 's French British parent",
        "questionTemplate": "Was [entity] [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] 's [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M0 ) .\nM2 P1 M1 .\nM2 P1 M3 .\nM2 P2 ?x0\n}",
        "recursionDepth": 30,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P27 wd:Q142 .\n?x0 wdt:P3373 wd:Q3341887 .\nFILTER ( ?x0 != wd:Q3341887 ) .\nwd:Q2984076 wdt:P40|wdt:P355 ?x0 .\nwd:Q2984076 wdt:P27 wd:Q145 .\nwd:Q2984076 wdt:P27 wd:Q142\n}",
        "questionWithBrackets": "Was [Colo Tavernier] [Nils Tavernier] 's French sibling 's French British parent"
    },
    {
        "questionIdx": 50004,
        "questionPatternModEntities": "Was M2 executive produced by , edited by , and written by a male spouse of M1",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M1 ) .\nM2 P2 ?x0 .\nM2 P3 ?x0 .\nM2 P4 ?x0\n}",
        "recursionDepth": 38,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P21 wd:Q6581097 .\n?x0 wdt:P26 wd:Q3032150 .\nFILTER ( ?x0 != wd:Q3032150 ) .\nwd:Q854990 wdt:P1040 ?x0 .\nwd:Q854990 wdt:P1431 ?x0 .\nwd:Q854990 wdt:P58 ?x0\n}",
        "questionWithBrackets": "Was [Kagemusha] executive produced by , edited by , and written by a male spouse of [Y\u014dko Yaguchi]"
    },
    {
        "questionIdx": 50028,
        "questionPatternModEntities": "Was M2 M0 's Chinese employee 's male parent",
        "questionTemplate": "Was [entity] [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nM2 P2 M3 .\nM2 P3 ?x0\n}",
        "recursionDepth": 25,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P108 wd:Q219563 .\n?x0 wdt:P27 wd:Q148 .\nwd:Q62126 wdt:P40|wdt:P355 ?x0 .\nwd:Q62126 wdt:P21 wd:Q6581097\n}",
        "questionWithBrackets": "Was [Richard Wilhelm] [University of Washington] 's Chinese employee 's male parent"
    },
    {
        "questionIdx": 50063,
        "questionPatternModEntities": "Was M2 's parent 's employee employed by M0 and M1",
        "questionTemplate": "Was [entity] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE] [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x1 P1 M2\n}",
        "recursionDepth": 24,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P108 ?x1 .\n?x0 wdt:P108 wd:Q35476 .\n?x0 wdt:P108 wd:Q186285 .\n?x1 wdt:P40|wdt:P355 wd:Q866\n}",
        "questionWithBrackets": "Was [YouTube] 's parent 's employee employed by [AT&T] and [University of Copenhagen]"
    },
    {
        "questionIdx": 50128,
        "questionPatternModEntities": "Was M0 edited , executive produced , directed , written , and produced by M1",
        "questionTemplate": "Was [entity] [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1 .\nM0 P2 M1 .\nM0 P3 M1 .\nM0 P4 M1\n}",
        "recursionDepth": 35,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q854990 wdt:P57 wd:Q8006 .\nwd:Q854990 wdt:P1040 wd:Q8006 .\nwd:Q854990 wdt:P1431 wd:Q8006 .\nwd:Q854990 wdt:P162|wdt:P272 wd:Q8006 .\nwd:Q854990 wdt:P58 wd:Q8006\n}",
        "questionWithBrackets": "Was [Kagemusha] edited , executive produced , directed , written , and produced by [Akira Kurosawa]"
    },
    {
        "questionIdx": 50130,
        "questionPatternModEntities": "Was M0 a sequel of M1",
        "questionTemplate": "Was [entity] a [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1\n}",
        "recursionDepth": 13,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q1042294 wdt:P155 wd:Q721\n}",
        "questionWithBrackets": "Was [So Long, and Thanks for All the Fish] a sequel of [Life, the Universe and Everything]"
    },
    {
        "questionIdx": 50140,
        "questionPatternModEntities": "Was M0 directed , written , and executive produced by M1 , M2 , and M3",
        "questionTemplate": "Was [entity] [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P0 M3 .\nM0 P1 M1 .\nM0 P1 M2 .\nM0 P1 M3 .\nM0 P2 M1 .\nM0 P2 M2 .\nM0 P2 M3\n}",
        "recursionDepth": 32,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q497256 wdt:P57 wd:Q363666 .\nwd:Q497256 wdt:P57 wd:Q448604 .\nwd:Q497256 wdt:P57 wd:Q452794 .\nwd:Q497256 wdt:P1431 wd:Q363666 .\nwd:Q497256 wdt:P1431 wd:Q448604 .\nwd:Q497256 wdt:P1431 wd:Q452794 .\nwd:Q497256 wdt:P58 wd:Q363666 .\nwd:Q497256 wdt:P58 wd:Q448604 .\nwd:Q497256 wdt:P58 wd:Q452794\n}",
        "questionWithBrackets": "Was [Airplane!] directed , written , and executive produced by [David Zucker] , [Jerry Zucker] , and [Jim Abrahams]"
    },
    {
        "questionIdx": 50147,
        "questionPatternModEntities": "Was M0 executive produced by , directed by , and written by M1 , M2 , and M3",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P0 M3 .\nM0 P1 M1 .\nM0 P1 M2 .\nM0 P1 M3 .\nM0 P2 M1 .\nM0 P2 M2 .\nM0 P2 M3\n}",
        "recursionDepth": 34,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q497256 wdt:P57 wd:Q363666 .\nwd:Q497256 wdt:P57 wd:Q448604 .\nwd:Q497256 wdt:P57 wd:Q452794 .\nwd:Q497256 wdt:P1431 wd:Q363666 .\nwd:Q497256 wdt:P1431 wd:Q448604 .\nwd:Q497256 wdt:P1431 wd:Q452794 .\nwd:Q497256 wdt:P58 wd:Q363666 .\nwd:Q497256 wdt:P58 wd:Q448604 .\nwd:Q497256 wdt:P58 wd:Q452794\n}",
        "questionWithBrackets": "Was [Airplane!] executive produced by , directed by , and written by [David Zucker] , [Jerry Zucker] , and [Jim Abrahams]"
    },
    {
        "questionIdx": 50149,
        "questionPatternModEntities": "Was M0 executive produced , written , and directed by M1 , M2 , and M3",
        "questionTemplate": "Was [entity] [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P0 M3 .\nM0 P1 M1 .\nM0 P1 M2 .\nM0 P1 M3 .\nM0 P2 M1 .\nM0 P2 M2 .\nM0 P2 M3\n}",
        "recursionDepth": 32,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q497256 wdt:P57 wd:Q363666 .\nwd:Q497256 wdt:P57 wd:Q448604 .\nwd:Q497256 wdt:P57 wd:Q452794 .\nwd:Q497256 wdt:P1431 wd:Q363666 .\nwd:Q497256 wdt:P1431 wd:Q448604 .\nwd:Q497256 wdt:P1431 wd:Q452794 .\nwd:Q497256 wdt:P58 wd:Q363666 .\nwd:Q497256 wdt:P58 wd:Q448604 .\nwd:Q497256 wdt:P58 wd:Q452794\n}",
        "questionWithBrackets": "Was [Airplane!] executive produced , written , and directed by [David Zucker] , [Jerry Zucker] , and [Jim Abrahams]"
    },
    {
        "questionIdx": 50223,
        "questionPatternModEntities": "Was M4 's Spanish male German parent M0",
        "questionTemplate": "Was [entity] 's [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P1 M3 .\nM0 P2 M4\n}",
        "recursionDepth": 26,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q62263 wdt:P40|wdt:P355 wd:Q215873 .\nwd:Q62263 wdt:P21 wd:Q6581097 .\nwd:Q62263 wdt:P27 wd:Q183 .\nwd:Q62263 wdt:P27 wd:Q29\n}",
        "questionWithBrackets": "Was [Prince Adalbert of Bavaria] 's Spanish male German parent [Prince Ludwig Ferdinand of Bavaria]"
    },
    {
        "questionIdx": 50227,
        "questionPatternModEntities": "Was M3 's spouse a Canadian employee of M0 and M1",
        "questionTemplate": "Was [entity] 's [ROLE_SIMPLE] a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P1 M2 .\n?x0 P2 M3 .\nFILTER ( ?x0 != M3 )\n}",
        "recursionDepth": 26,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P108 wd:Q2413375 .\n?x0 wdt:P108 wd:Q4614 .\n?x0 wdt:P27 wd:Q16 .\n?x0 wdt:P26 wd:Q4726119 .\nFILTER ( ?x0 != wd:Q4726119 )\n}",
        "questionWithBrackets": "Was [Alice Taylor] 's spouse a Canadian employee of [University of Southern California] and [The Open University]"
    },
    {
        "questionIdx": 50256,
        "questionPatternModEntities": "Was M0 employed by M1 and M2 , employed by M3 , M4 , M5 , and M6 , and employed by M7",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] and [entity] , [VP_SIMPLE] by [entity] , [entity] , [entity] , and [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P0 M3 .\nM0 P0 M4 .\nM0 P0 M5 .\nM0 P0 M6 .\nM0 P0 M7\n}",
        "recursionDepth": 46,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q937 wdt:P108 wd:Q70 .\nwd:Q937 wdt:P108 wd:Q659080 .\nwd:Q937 wdt:P108 wd:Q21578 .\nwd:Q937 wdt:P108 wd:Q31519 .\nwd:Q937 wdt:P108 wd:Q11942 .\nwd:Q937 wdt:P108 wd:Q152087 .\nwd:Q937 wdt:P108 wd:Q156598\n}",
        "questionWithBrackets": "Was [Albert Einstein] employed by [Leiden University] and [Princeton University] , employed by [University of Bern] , [Charles University] , [Bern] , and [ETH Z\u00fcrich] , and employed by [Humboldt University of Berlin]"
    },
    {
        "questionIdx": 50257,
        "questionPatternModEntities": "Was M0 employed by M1 , M2 , M3 , and M4 , employed by M5 , and employed by M6 and M7",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] , [entity] , [entity] , and [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P0 M3 .\nM0 P0 M4 .\nM0 P0 M5 .\nM0 P0 M6 .\nM0 P0 M7\n}",
        "recursionDepth": 46,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q91984 wdt:P108 wd:Q67 .\nwd:Q91984 wdt:P108 wd:Q836325 .\nwd:Q91984 wdt:P108 wd:Q552581 .\nwd:Q91984 wdt:P108 wd:Q156829 .\nwd:Q91984 wdt:P108 wd:Q138133 .\nwd:Q91984 wdt:P108 wd:Q9322 .\nwd:Q91984 wdt:P108 wd:Q517841\n}",
        "questionWithBrackets": "Was [Hartmut Mehdorn] employed by [Deutsche Bahn] , [SAP SE] , [Air Berlin] , and [Vereinigte Flugtechnische Werke] , employed by [Airbus] , and employed by [RWE] and [Messerschmitt-B\u00f6lkow-Blohm]"
    },
    {
        "questionIdx": 50309,
        "questionPatternModEntities": "Was M0 's Canadian sibling a sibling of M1",
        "questionTemplate": "Was [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] a [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P1 M2 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x0 != M1 )\n}",
        "recursionDepth": 22,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P27 wd:Q16 .\n?x0 wdt:P3373 wd:Q5300478 .\n?x0 wdt:P3373 wd:Q39503265 .\nFILTER ( ?x0 != wd:Q5300478 ) .\nFILTER ( ?x0 != wd:Q39503265 )\n}",
        "questionWithBrackets": "Was [Doug Ford] 's Canadian sibling a sibling of [Kathy Stirpe]"
    },
    {
        "questionIdx": 50320,
        "questionPatternModEntities": "Was M1 a male sibling of M0 's sibling",
        "questionTemplate": "Was [entity] a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( M1 != ?x0 ) .\nM1 P0 ?x0 .\nM1 P1 M2\n}",
        "recursionDepth": 22,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P3373 wd:Q352 .\nFILTER ( ?x0 != wd:Q352 ) .\nFILTER ( wd:Q66225 != ?x0 ) .\nwd:Q66225 wdt:P21 wd:Q6581097 .\nwd:Q66225 wdt:P3373 ?x0\n}",
        "questionWithBrackets": "Was [Alois Hitler, Jr.] a male sibling of [Adolf Hitler] 's sibling"
    },
    {
        "questionIdx": 50395,
        "questionPatternModEntities": "Was M1 influenced by M0 's spouse",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nM1 P1 ?x0\n}",
        "recursionDepth": 16,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P26 wd:Q84464 .\nFILTER ( ?x0 != wd:Q84464 ) .\nwd:Q255 wdt:P737 ?x0\n}",
        "questionWithBrackets": "Was [Ludwig van Beethoven] influenced by [Constanze Mozart] 's spouse"
    },
    {
        "questionIdx": 50432,
        "questionPatternModEntities": "Was M1 's spouse a parent of M0",
        "questionTemplate": "Was [entity] 's [ROLE_SIMPLE] a [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M1 )\n}",
        "recursionDepth": 17,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q135687 .\n?x0 wdt:P26 wd:Q91 .\nFILTER ( ?x0 != wd:Q91 )\n}",
        "questionWithBrackets": "Was [Abraham Lincoln] 's spouse a parent of [Tad Lincoln]"
    },
    {
        "questionIdx": 50494,
        "questionPatternModEntities": "Was M1 founded by M0 's child and founded by M2",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 ?x0 .\nM1 P1 M2\n}",
        "recursionDepth": 27,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P749 wd:Q20800404 .\nwd:Q356 wdt:P112 ?x0 .\nwd:Q356 wdt:P112 wd:Q95\n}",
        "questionWithBrackets": "Was [Google+] founded by [Alphabet Inc.] 's child and founded by [Google]"
    },
    {
        "questionIdx": 50520,
        "questionPatternModEntities": "Was M1 edited and produced by M0 's parent",
        "questionTemplate": "Was [entity] [VP_SIMPLE] and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 ?x0 .\nM1 P2 ?x0\n}",
        "recursionDepth": 23,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q1620638 .\nwd:Q854990 wdt:P1040 ?x0 .\nwd:Q854990 wdt:P162|wdt:P272 ?x0\n}",
        "questionWithBrackets": "Was [Kagemusha] edited and produced by [Hisao Kurosawa] 's parent"
    },
    {
        "questionIdx": 50564,
        "questionPatternModEntities": "Was M0 M1 's female American employee",
        "questionTemplate": "Was [entity] [entity] 's [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M2 .\nM0 P2 M3\n}",
        "recursionDepth": 21,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q11636 wdt:P108 wd:Q666140 .\nwd:Q11636 wdt:P21 wd:Q6581072 .\nwd:Q11636 wdt:P27 wd:Q30\n}",
        "questionWithBrackets": "Was [Betty Holberton] [David Taylor Model Basin] 's female American employee"
    },
    {
        "questionIdx": 50572,
        "questionPatternModEntities": "Was M1 a sibling of M0 's sibling",
        "questionTemplate": "Was [entity] a [ROLE_SIMPLE] of [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( M1 != ?x0 ) .\nM1 P0 ?x0\n}",
        "recursionDepth": 17,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P3373 wd:Q352 .\nFILTER ( ?x0 != wd:Q352 ) .\nFILTER ( wd:Q66225 != ?x0 ) .\nwd:Q66225 wdt:P3373 ?x0\n}",
        "questionWithBrackets": "Was [Alois Hitler, Jr.] a sibling of [Adolf Hitler] 's sibling"
    },
    {
        "questionIdx": 50602,
        "questionPatternModEntities": "Was M0 a American female employee of M1",
        "questionTemplate": "Was [entity] a [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M2 .\nM0 P2 M3\n}",
        "recursionDepth": 23,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q11105 wdt:P108 wd:Q131252 .\nwd:Q11105 wdt:P21 wd:Q6581072 .\nwd:Q11105 wdt:P27 wd:Q30\n}",
        "questionWithBrackets": "Was [Elena Kagan] a American female employee of [University of Chicago]"
    },
    {
        "questionIdx": 50625,
        "questionPatternModEntities": "Was M1 's male spouse 's sibling and spouse M2",
        "questionTemplate": "Was [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] 's [ROLE_SIMPLE] and [ROLE_SIMPLE] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M1 ) .\nFILTER ( M2 != ?x0 ) .\nFILTER ( M2 != ?x0 ) .\nM2 P1 ?x0 .\nM2 P2 ?x0\n}",
        "recursionDepth": 25,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P21 wd:Q6581097 .\n?x0 wdt:P26 wd:Q210535 .\nFILTER ( ?x0 != wd:Q210535 ) .\nFILTER ( wd:Q443473 != ?x0 ) .\nFILTER ( wd:Q443473 != ?x0 ) .\nwd:Q443473 wdt:P3373 ?x0 .\nwd:Q443473 wdt:P26 ?x0\n}",
        "questionWithBrackets": "Was [Nefertarilllala] 's male spouse 's sibling and spouse [Henutmire]"
    },
    {
        "questionIdx": 50636,
        "questionPatternModEntities": "Was M0 's prequel edited by , directed by , and written by M1 's employee",
        "questionTemplate": "Was [entity] 's [ROLE_SIMPLE] [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x0 P3 ?x1 .\n?x1 P4 M1\n}",
        "recursionDepth": 34,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P57 ?x1 .\n?x0 wdt:P1040 ?x1 .\n?x0 wdt:P156 wd:Q152350 .\n?x0 wdt:P58 ?x1 .\n?x1 wdt:P108 wd:Q1130457\n}",
        "questionWithBrackets": "Was [Battleship Potemkin] 's prequel edited by , directed by , and written by [Gerasimov Institute of Cinematography] 's employee"
    },
    {
        "questionIdx": 50769,
        "questionPatternModEntities": "Was M0 's sibling a spouse and parent of M1",
        "questionTemplate": "Was [entity] 's [ROLE_SIMPLE] a [ROLE_SIMPLE] and [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P2 M1 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x0 != M1 )\n}",
        "recursionDepth": 22,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q40020 .\n?x0 wdt:P3373 wd:Q40242 .\n?x0 wdt:P26 wd:Q40020 .\nFILTER ( ?x0 != wd:Q40242 ) .\nFILTER ( ?x0 != wd:Q40020 )\n}",
        "questionWithBrackets": "Was [Cleopatra V or VI of Egypt] 's sibling a spouse and parent of [Cleopatra VI of Egypt]"
    },
    {
        "questionIdx": 50771,
        "questionPatternModEntities": "Was M2 founded by M3 and founded by M0 's Spanish sibling",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] and [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M0 ) .\nM2 P2 ?x0 .\nM2 P2 M3\n}",
        "recursionDepth": 32,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P27 wd:Q29 .\n?x0 wdt:P3373 wd:Q129179 .\nFILTER ( ?x0 != wd:Q129179 ) .\nwd:Q2703201 wdt:P112 ?x0 .\nwd:Q2703201 wdt:P112 wd:Q18363\n}",
        "questionWithBrackets": "Was [Order of Civil Merit] founded by [Alfonso XIII of Spain] and founded by [Mercedes, Princess of Asturias] 's Spanish sibling"
    },
    {
        "questionIdx": 50794,
        "questionPatternModEntities": "Was M1 's German female employee M0",
        "questionTemplate": "Was [entity] 's [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M2 .\nM0 P2 M3\n}",
        "recursionDepth": 21,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q11689 wdt:P108 wd:Q122453 .\nwd:Q11689 wdt:P21 wd:Q6581072 .\nwd:Q11689 wdt:P27 wd:Q183\n}",
        "questionWithBrackets": "Was [University of Stuttgart] 's German female employee [Sabina Jeschke]"
    },
    {
        "questionIdx": 50801,
        "questionPatternModEntities": "Was M1 written by M0 's parent",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 ?x0\n}",
        "recursionDepth": 16,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q120593 .\nwd:Q921678 wdt:P58 ?x0\n}",
        "questionWithBrackets": "Was [Shanghaied] written by [Eugene Chaplin] 's parent"
    },
    {
        "questionIdx": 50840,
        "questionPatternModEntities": "Was M2 founded by M1 's Chinese parent and founded by M3",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nM2 P2 ?x0 .\nM2 P2 M3\n}",
        "recursionDepth": 32,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q28415575 .\n?x0 wdt:P27 wd:Q148 .\nwd:Q1895661 wdt:P112 ?x0 .\nwd:Q1895661 wdt:P112 wd:Q197216\n}",
        "questionWithBrackets": "Was [Suning Appliance Group Co., Ltd.] founded by [Steven Zhang] 's Chinese parent and founded by [Zhang Jindong]"
    },
    {
        "questionIdx": 50961,
        "questionPatternModEntities": "Was M0 's sibling 's spouse and parent M1",
        "questionTemplate": "Was [entity] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE] and [ROLE_SIMPLE] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( M1 != ?x0 ) .\nM1 P1 ?x0 .\nM1 P2 ?x0\n}",
        "recursionDepth": 20,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P3373 wd:Q635 .\nFILTER ( ?x0 != wd:Q635 ) .\nFILTER ( wd:Q39991 != ?x0 ) .\nwd:Q39991 wdt:P40|wdt:P355 ?x0 .\nwd:Q39991 wdt:P26 ?x0\n}",
        "questionWithBrackets": "Was [Cleopatra] 's sibling 's spouse and parent [Ptolemy XII Auletes]"
    },
    {
        "questionIdx": 50976,
        "questionPatternModEntities": "Was M1 's Canadian German male employee M0",
        "questionTemplate": "Was [entity] 's [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M2 .\nM0 P1 M3 .\nM0 P2 M4\n}",
        "recursionDepth": 26,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q96996 wdt:P108 wd:Q180865 .\nwd:Q96996 wdt:P21 wd:Q6581097 .\nwd:Q96996 wdt:P27 wd:Q183 .\nwd:Q96996 wdt:P27 wd:Q16\n}",
        "questionWithBrackets": "Was [University of Toronto] 's Canadian German male employee [Fritz Heichelheim]"
    },
    {
        "questionIdx": 50986,
        "questionPatternModEntities": "Was M2 's American actor M0",
        "questionTemplate": "Was [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M2\n}",
        "recursionDepth": 16,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q4355802 wdt:P453 wd:Q682243 .\nwd:Q4355802 wdt:P27 wd:Q30\n}",
        "questionWithBrackets": "Was [Mikoto Misaka] 's American actor [Brittney Karbowski]"
    },
    {
        "questionIdx": 51025,
        "questionPatternModEntities": "Was M1 founded by M2 and founded by a child of M0",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] and [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 ?x0 .\nM1 P1 M2\n}",
        "recursionDepth": 29,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P749 wd:Q20800404 .\nwd:Q356 wdt:P112 ?x0 .\nwd:Q356 wdt:P112 wd:Q95\n}",
        "questionWithBrackets": "Was [Google+] founded by [Google] and founded by a child of [Alphabet Inc.]"
    },
    {
        "questionIdx": 51090,
        "questionPatternModEntities": "Was M1 a spouse and sibling of M0 's sibling",
        "questionTemplate": "Was [entity] a [ROLE_SIMPLE] and [ROLE_SIMPLE] of [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( M1 != ?x0 ) .\nFILTER ( M1 != ?x0 ) .\nM1 P0 ?x0 .\nM1 P1 ?x0\n}",
        "recursionDepth": 22,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P3373 wd:Q3345 .\nFILTER ( ?x0 != wd:Q3345 ) .\nFILTER ( wd:Q3340 != ?x0 ) .\nFILTER ( wd:Q3340 != ?x0 ) .\nwd:Q3340 wdt:P3373 ?x0 .\nwd:Q3340 wdt:P26 ?x0\n}",
        "questionWithBrackets": "Was [Ptolemy IX Lathyros] a spouse and sibling of [Ptolemy X Alexander I] 's sibling"
    },
    {
        "questionIdx": 51093,
        "questionPatternModEntities": "Was M0 directed by M2 , executive produced by M1 , and directed by M3",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M2 .\nM0 P1 M3\n}",
        "recursionDepth": 33,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q1079 wdt:P57 wd:Q10307893 .\nwd:Q1079 wdt:P57 wd:Q5144932 .\nwd:Q1079 wdt:P1431 wd:Q4500\n}",
        "questionWithBrackets": "Was [Breaking Bad] directed by [John Shiban] , executive produced by [Vince Gilligan] , and directed by [Colin Bucksey]"
    },
    {
        "questionIdx": 51115,
        "questionPatternModEntities": "Was M1 directed by a child of M0 and directed by M2 and M3",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity] and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 ?x0 .\nM1 P1 M2 .\nM1 P1 M3\n}",
        "recursionDepth": 33,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P749 wd:Q2167923 .\nwd:Q30110172 wdt:P57 ?x0 .\nwd:Q30110172 wdt:P57 wd:Q4245991 .\nwd:Q30110172 wdt:P57 wd:Q4402592\n}",
        "questionWithBrackets": "Was [No label defined] directed by a child of [Rostselmash] and directed by [Yury Kulakov] and [Yuri Ryazanov]"
    },
    {
        "questionIdx": 51175,
        "questionPatternModEntities": "Was M0 M1 's Italian employee",
        "questionTemplate": "Was [entity] [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M2\n}",
        "recursionDepth": 16,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q64631 wdt:P108 wd:Q392904 .\nwd:Q64631 wdt:P27 wd:Q38\n}",
        "questionWithBrackets": "Was [Orazio Svelto] [Politecnico di Milano] 's Italian employee"
    },
    {
        "questionIdx": 51214,
        "questionPatternModEntities": "Was M2 produced by M1 's Spanish spouse 's parent",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x1 P1 M0 .\n?x1 P2 M1 .\nFILTER ( ?x1 != M1 ) .\nM2 P3 ?x0\n}",
        "recursionDepth": 25,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 ?x1 .\n?x1 wdt:P27 wd:Q29 .\n?x1 wdt:P26 wd:Q22910233 .\nFILTER ( ?x1 != wd:Q22910233 ) .\nwd:Q45602 wdt:P162|wdt:P272 ?x0\n}",
        "questionWithBrackets": "Was [Modern Times] produced by [Patricio Castilla] 's Spanish spouse 's parent"
    },
    {
        "questionIdx": 51240,
        "questionPatternModEntities": "Was M1 's parent M0 's employee",
        "questionTemplate": "Was [entity] 's [ROLE_SIMPLE] [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1\n}",
        "recursionDepth": 15,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q102649059 .\n?x0 wdt:P108 wd:Q95\n}",
        "questionWithBrackets": "Was [Kavya Pichai] 's parent [Google] 's employee"
    },
    {
        "questionIdx": 51256,
        "questionPatternModEntities": "Was M0 produced , directed , and edited by M1",
        "questionTemplate": "Was [entity] [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1 .\nM0 P2 M1\n}",
        "recursionDepth": 24,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q590570 wdt:P57 wd:Q25186 .\nwd:Q590570 wdt:P1040 wd:Q25186 .\nwd:Q590570 wdt:P162|wdt:P272 wd:Q25186\n}",
        "questionWithBrackets": "Was [Mala Noche] produced , directed , and edited by [Gus Van Sant]"
    },
    {
        "questionIdx": 51264,
        "questionPatternModEntities": "Was M1 influenced by a employee of M0",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 ?x0\n}",
        "recursionDepth": 18,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P108 wd:Q49115 .\nwd:Q310903 wdt:P737 ?x0\n}",
        "questionWithBrackets": "Was [Neil deGrasse Tyson] influenced by a employee of [Cornell University]"
    },
    {
        "questionIdx": 51358,
        "questionPatternModEntities": "Was M1 written by M5 , executive produced by M2 , M3 , and M4 , and executive produced by M0 's spouse",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , [entity] , and [entity] , and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nM1 P1 ?x0 .\nM1 P1 M2 .\nM1 P1 M3 .\nM1 P1 M4 .\nM1 P2 M5\n}",
        "recursionDepth": 45,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P26 wd:Q40162 .\nFILTER ( ?x0 != wd:Q40162 ) .\nwd:Q602094 wdt:P1431 ?x0 .\nwd:Q602094 wdt:P1431 wd:Q1385337 .\nwd:Q602094 wdt:P1431 wd:Q8877 .\nwd:Q602094 wdt:P1431 wd:Q190373 .\nwd:Q602094 wdt:P58 wd:Q724018\n}",
        "questionWithBrackets": "Was [The Flintstones] written by [Steven E. de Souza] , executive produced by [Joseph Barbera] , [Gerald R. Molen] , and [Steven Spielberg] , and executive produced by [Kate Capshaw] 's spouse"
    },
    {
        "questionIdx": 51418,
        "questionPatternModEntities": "Was M0 's spouse M1 's parent 's actor",
        "questionTemplate": "Was [entity] 's [ROLE_SIMPLE] [entity] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x0 P1 M0 .\n?x1 P2 M1 .\nFILTER ( ?x0 != M0 )\n}",
        "recursionDepth": 19,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P453 ?x1 .\n?x0 wdt:P26 wd:Q522724 .\n?x1 wdt:P40|wdt:P355 wd:Q8125562 .\nFILTER ( ?x0 != wd:Q522724 )\n}",
        "questionWithBrackets": "Was [Peter O'Brien] 's spouse [Elboron] 's parent 's actor"
    },
    {
        "questionIdx": 51465,
        "questionPatternModEntities": "Was M0 a German Spanish sibling of M1",
        "questionTemplate": "Was [entity] a [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nFILTER ( M0 != M1 ) .\nM0 P0 M1 .\nM0 P1 M2 .\nM0 P1 M3\n}",
        "recursionDepth": 23,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nFILTER ( wd:Q57651 != wd:Q67198 ) .\nwd:Q57651 wdt:P27 wd:Q183 .\nwd:Q57651 wdt:P27 wd:Q29 .\nwd:Q57651 wdt:P3373 wd:Q67198\n}",
        "questionWithBrackets": "Was [Maria Anna of Neuburg] a German Spanish sibling of [Philip William August, Count Palatine of Neuburg]"
    },
    {
        "questionIdx": 51468,
        "questionPatternModEntities": "Was M0 's Italian sibling influenced by M4 's American employee and influenced by M1 and M2",
        "questionTemplate": "Was [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 ?x1 .\n?x0 P1 M1 .\n?x0 P1 M2 .\n?x0 P2 M3 .\n?x1 P2 M5 .\n?x1 P3 M4 .\nFILTER ( ?x0 != M0 )\n}",
        "recursionDepth": 45,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P737 ?x1 .\n?x0 wdt:P737 wd:Q1512 .\n?x0 wdt:P737 wd:Q36591 .\n?x0 wdt:P27 wd:Q38 .\n?x0 wdt:P3373 wd:Q17141899 .\n?x1 wdt:P108 wd:Q13371 .\n?x1 wdt:P27 wd:Q30 .\nFILTER ( ?x0 != wd:Q17141899 )\n}",
        "questionWithBrackets": "Was [Floriano Calvino] 's Italian sibling influenced by [Harvard University] 's American employee and influenced by [Vladimir Nabokov] and [Robert Louis Stevenson]"
    },
    {
        "questionIdx": 51475,
        "questionPatternModEntities": "Was M1 M0 's parent 's male Canadian French employee",
        "questionTemplate": "Was [entity] [entity] 's [ROLE_SIMPLE] 's [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 ?x0 .\nM1 P2 M2 .\nM1 P2 M3 .\nM1 P3 M4\n}",
        "recursionDepth": 30,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q3064280 .\nwd:Q119386 wdt:P108 ?x0 .\nwd:Q119386 wdt:P21 wd:Q6581097 .\nwd:Q119386 wdt:P27 wd:Q16 .\nwd:Q119386 wdt:P27 wd:Q142\n}",
        "questionWithBrackets": "Was [Auguste Viatte] [Facult\u00e9 de m\u00e9decine de l'Universit\u00e9 Laval] 's parent 's male Canadian French employee"
    },
    {
        "questionIdx": 51532,
        "questionPatternModEntities": "Was M1 's sibling , parent , and spouse M0",
        "questionTemplate": "Was [entity] 's [ROLE_SIMPLE] , [ROLE_SIMPLE] , and [ROLE_SIMPLE] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nFILTER ( M0 != M1 ) .\nFILTER ( M0 != M1 ) .\nM0 P0 M1 .\nM0 P1 M1 .\nM0 P2 M1\n}",
        "recursionDepth": 20,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nFILTER ( wd:Q1523 != wd:Q443473 ) .\nFILTER ( wd:Q1523 != wd:Q443473 ) .\nwd:Q1523 wdt:P40|wdt:P355 wd:Q443473 .\nwd:Q1523 wdt:P3373 wd:Q443473 .\nwd:Q1523 wdt:P26 wd:Q443473\n}",
        "questionWithBrackets": "Was [Henutmire] 's sibling , parent , and spouse [Ramesses II]"
    },
    {
        "questionIdx": 51534,
        "questionPatternModEntities": "Was M2 executive produced by M0 's British sibling",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M0 ) .\nM2 P2 ?x0\n}",
        "recursionDepth": 22,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P27 wd:Q145 .\n?x0 wdt:P3373 wd:Q5112102 .\nFILTER ( ?x0 != wd:Q5112102 ) .\nwd:Q946478 wdt:P1431 ?x0\n}",
        "questionWithBrackets": "Was [Filth and Wisdom] executive produced by [Christopher Ciccone] 's British sibling"
    },
    {
        "questionIdx": 51737,
        "questionPatternModEntities": "Was M0 M1 's employee",
        "questionTemplate": "Was [entity] [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1\n}",
        "recursionDepth": 11,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q79070 wdt:P108 wd:Q40\n}",
        "questionWithBrackets": "Was [Max Margules] [Austria] 's employee"
    },
    {
        "questionIdx": 51744,
        "questionPatternModEntities": "Was M1 M0 's actor 's spouse",
        "questionTemplate": "Was [entity] [entity] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( M1 != ?x0 ) .\nM1 P1 ?x0\n}",
        "recursionDepth": 15,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P453 wd:Q222573 .\nFILTER ( wd:Q192482 != ?x0 ) .\nwd:Q192482 wdt:P26 ?x0\n}",
        "questionWithBrackets": "Was [Telemachus] [femme fatale] 's actor 's spouse"
    },
    {
        "questionIdx": 51750,
        "questionPatternModEntities": "Was M2 M1 's female parent 's Chinese Canadian spouse",
        "questionTemplate": "Was [entity] [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] 's [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( M2 != ?x0 ) .\nM2 P2 M3 .\nM2 P2 M4 .\nM2 P3 ?x0\n}",
        "recursionDepth": 30,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q97351767 .\n?x0 wdt:P21 wd:Q6581072 .\nFILTER ( wd:Q704140 != ?x0 ) .\nwd:Q704140 wdt:P27 wd:Q148 .\nwd:Q704140 wdt:P27 wd:Q16 .\nwd:Q704140 wdt:P26 ?x0\n}",
        "questionWithBrackets": "Was [David Chiang] [John Chiang, Jr] 's female parent 's Chinese Canadian spouse"
    },
    {
        "questionIdx": 51789,
        "questionPatternModEntities": "Was M0 a parent and spouse of M1",
        "questionTemplate": "Was [entity] a [ROLE_SIMPLE] and [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nFILTER ( M0 != M1 ) .\nM0 P0 M1 .\nM0 P1 M1\n}",
        "recursionDepth": 18,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nFILTER ( wd:Q39991 != wd:Q40020 ) .\nwd:Q39991 wdt:P40|wdt:P355 wd:Q40020 .\nwd:Q39991 wdt:P26 wd:Q40020\n}",
        "questionWithBrackets": "Was [Ptolemy XII Auletes] a parent and spouse of [Cleopatra VI of Egypt]"
    },
    {
        "questionIdx": 51896,
        "questionPatternModEntities": "Was M1 written by , executive produced by , and produced by a parent of M0",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 ?x0 .\nM1 P2 ?x0 .\nM1 P3 ?x0\n}",
        "recursionDepth": 33,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q104373223 .\nwd:Q2085 wdt:P1431 ?x0 .\nwd:Q2085 wdt:P162|wdt:P272 ?x0 .\nwd:Q2085 wdt:P58 ?x0\n}",
        "questionWithBrackets": "Was [Twin Peaks] written by , executive produced by , and produced by a parent of [Austin Jack Lynch]"
    },
    {
        "questionIdx": 51916,
        "questionPatternModEntities": "Was M0 a German female sibling of M1",
        "questionTemplate": "Was [entity] a [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nFILTER ( M0 != M1 ) .\nM0 P0 M1 .\nM0 P1 M2 .\nM0 P2 M3\n}",
        "recursionDepth": 23,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nFILTER ( wd:Q25878 != wd:Q3978282 ) .\nwd:Q25878 wdt:P21 wd:Q6581072 .\nwd:Q25878 wdt:P27 wd:Q183 .\nwd:Q25878 wdt:P3373 wd:Q3978282\n}",
        "questionWithBrackets": "Was [Rita K\u00f6nig] a German female sibling of [Susanne K\u00f6nig]"
    },
    {
        "questionIdx": 51931,
        "questionPatternModEntities": "Was M2 written by M0 's Dutch sibling",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M0 ) .\nM2 P2 ?x0\n}",
        "recursionDepth": 21,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P27 wd:Q29999 .\n?x0 wdt:P3373 wd:Q1816701 .\nFILTER ( ?x0 != wd:Q1816701 ) .\nwd:Q2069092 wdt:P58 ?x0\n}",
        "questionWithBrackets": "Was [Op Hoop van Zegen] written by [Louis Heijermans] 's Dutch sibling"
    },
    {
        "questionIdx": 51932,
        "questionPatternModEntities": "Was M3 written by M1 's male sibling 's Dutch sibling and directed by M4",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x0 P1 M0 .\n?x1 P0 M1 .\n?x1 P2 M2 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x1 != M1 ) .\nM3 P3 ?x0 .\nM3 P4 M4\n}",
        "recursionDepth": 41,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P27 wd:Q29999 .\n?x0 wdt:P3373 ?x1 .\n?x1 wdt:P21 wd:Q6581097 .\n?x1 wdt:P3373 wd:Q3458419 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x1 != wd:Q3458419 ) .\nwd:Q2069092 wdt:P57 wd:Q2109122 .\nwd:Q2069092 wdt:P58 ?x0\n}",
        "questionWithBrackets": "Was [Op Hoop van Zegen] written by [Marie Heijermans] 's male sibling 's Dutch sibling and directed by [Alex Benno]"
    },
    {
        "questionIdx": 51945,
        "questionPatternModEntities": "Was M0 produced by M2 and executive produced by M1",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M2\n}",
        "recursionDepth": 24,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q51416 wdt:P1431 wd:Q8877 .\nwd:Q51416 wdt:P162|wdt:P272 wd:Q1971768\n}",
        "questionWithBrackets": "Was [Men in Black] produced by [Walter F. Parkes] and executive produced by [Steven Spielberg]"
    },
    {
        "questionIdx": 51951,
        "questionPatternModEntities": "Was M2 edited by M3 and M4 and executive produced by M0 's British sibling",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] and [entity] and [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M0 ) .\nM2 P2 ?x0 .\nM2 P3 M3 .\nM2 P3 M4\n}",
        "recursionDepth": 37,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P27 wd:Q145 .\n?x0 wdt:P3373 wd:Q7599509 .\nFILTER ( ?x0 != wd:Q7599509 ) .\nwd:Q7730725 wdt:P1040 wd:Q436125 .\nwd:Q7730725 wdt:P1040 wd:Q64681734 .\nwd:Q7730725 wdt:P1431 ?x0\n}",
        "questionWithBrackets": "Was [The Double] edited by [Chris Dickens] and [Nick Fenton] and executive produced by [Stanley Caine] 's British sibling"
    },
    {
        "questionIdx": 51952,
        "questionPatternModEntities": "Was M0 edited by M5 and M6 , written by M1 , M2 , M3 , and M4 , and edited by M7",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] and [entity] , [VP_SIMPLE] by [entity] , [entity] , [entity] , and [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P0 M3 .\nM0 P0 M4 .\nM0 P1 M5 .\nM0 P1 M6 .\nM0 P1 M7\n}",
        "recursionDepth": 46,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q603857 wdt:P1040 wd:Q55211 .\nwd:Q603857 wdt:P1040 wd:Q541826 .\nwd:Q603857 wdt:P1040 wd:Q5639976 .\nwd:Q603857 wdt:P58 wd:Q55238 .\nwd:Q603857 wdt:P58 wd:Q312611 .\nwd:Q603857 wdt:P58 wd:Q44221 .\nwd:Q603857 wdt:P58 wd:Q55215\n}",
        "questionWithBrackets": "Was [11'09\"01 September 11] edited by [Mohsen Makhmalbaf] and [Jay Cassidy] , written by [Sean Penn] , [Youssef Chahine] , [Alejandro Gonz\u00e1lez I\u00f1\u00e1rritu] , and [Ken Loach] , and edited by [Hajime Okayasu]"
    },
    {
        "questionIdx": 52091,
        "questionPatternModEntities": "Was M0 employed by M1 , employed by M2 , M3 , and M4 , and employed by M5 , M6 , and M7",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , [entity] , and [entity] , and [VP_SIMPLE] by [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P0 M3 .\nM0 P0 M4 .\nM0 P0 M5 .\nM0 P0 M6 .\nM0 P0 M7\n}",
        "recursionDepth": 46,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q937 wdt:P108 wd:Q70 .\nwd:Q937 wdt:P108 wd:Q329464 .\nwd:Q937 wdt:P108 wd:Q1729754 .\nwd:Q937 wdt:P108 wd:Q21578 .\nwd:Q937 wdt:P108 wd:Q11942 .\nwd:Q937 wdt:P108 wd:Q156598 .\nwd:Q937 wdt:P108 wd:Q31519\n}",
        "questionWithBrackets": "Was [Albert Einstein] employed by [Charles University] , employed by [German University in Prague] , [Leiden University] , and [Princeton University] , and employed by [Royal Prussian Academy of Sciences] , [ETH Z\u00fcrich] , and [Bern]"
    },
    {
        "questionIdx": 52096,
        "questionPatternModEntities": "Was M1 employed by M0 's parent , employed by M2 , and employed by M3 , M4 , and M5",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 ?x0 .\nM1 P1 M2 .\nM1 P1 M3 .\nM1 P1 M4 .\nM1 P1 M5\n}",
        "recursionDepth": 43,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q51712 .\nwd:Q92832 wdt:P108 ?x0 .\nwd:Q92832 wdt:P108 wd:Q181052 .\nwd:Q92832 wdt:P108 wd:Q4614 .\nwd:Q92832 wdt:P108 wd:Q95 .\nwd:Q92832 wdt:P108 wd:Q168756\n}",
        "questionWithBrackets": "Was [Peter Norvig] employed by [Google Voice] 's parent , employed by [University of Southern California] , and employed by [University of California, Berkeley] , [Ames Research Center] , and [Google]"
    },
    {
        "questionIdx": 52105,
        "questionPatternModEntities": "Was M0 a employee of M1 and M2",
        "questionTemplate": "Was [entity] a [ROLE_SIMPLE] of [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2\n}",
        "recursionDepth": 17,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q43393 wdt:P108 wd:Q84 .\nwd:Q43393 wdt:P108 wd:Q83164\n}",
        "questionWithBrackets": "Was [Robert Boyle] a employee of [London] and [East India Company]"
    },
    {
        "questionIdx": 52140,
        "questionPatternModEntities": "Was M2 's Canadian spouse M0 's sibling",
        "questionTemplate": "Was [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P2 M2 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x0 != M2 )\n}",
        "recursionDepth": 20,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P27 wd:Q16 .\n?x0 wdt:P3373 wd:Q95019 .\n?x0 wdt:P26 wd:Q75759997 .\nFILTER ( ?x0 != wd:Q75759997 ) .\nFILTER ( ?x0 != wd:Q95019 )\n}",
        "questionWithBrackets": "Was [Ann Lee Cunningham] 's Canadian spouse [Norma Shearer] 's sibling"
    },
    {
        "questionIdx": 52232,
        "questionPatternModEntities": "Was M0 founded by M1 , M2 , and M3 , founded by M4 and M5 , and founded by M6 and M7",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] , [entity] , and [entity] , [VP_SIMPLE] by [entity] and [entity] , and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P0 M3 .\nM0 P0 M4 .\nM0 P0 M5 .\nM0 P0 M6 .\nM0 P0 M7\n}",
        "recursionDepth": 47,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q1065 wdt:P112 wd:Q32 .\nwd:Q1065 wdt:P112 wd:Q822 .\nwd:Q1065 wdt:P112 wd:Q16 .\nwd:Q1065 wdt:P112 wd:Q30 .\nwd:Q1065 wdt:P112 wd:Q36 .\nwd:Q1065 wdt:P112 wd:Q20 .\nwd:Q1065 wdt:P112 wd:Q31\n}",
        "questionWithBrackets": "Was [United Nations] founded by [Belgium] , [Canada] , and [Poland] , founded by [Luxembourg] and [United States of America] , and founded by [Lebanon] and [Norway]"
    },
    {
        "questionIdx": 52282,
        "questionPatternModEntities": "Was M0 's spouse 's child M1",
        "questionTemplate": "Was [entity] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nM1 P1 ?x0\n}",
        "recursionDepth": 15,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P26 wd:Q21157038 .\nFILTER ( ?x0 != wd:Q21157038 ) .\nwd:Q59918234 wdt:P749 ?x0\n}",
        "questionWithBrackets": "Was [Clarisse Coudert] 's spouse 's child [Conde Nast Johansens]"
    },
    {
        "questionIdx": 52286,
        "questionPatternModEntities": "Was M0 a Italian British employee of M1 and M2",
        "questionTemplate": "Was [entity] a [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P1 M3 .\nM0 P1 M4\n}",
        "recursionDepth": 27,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q453557 wdt:P108 wd:Q209344 .\nwd:Q453557 wdt:P108 wd:Q259517 .\nwd:Q453557 wdt:P27 wd:Q38 .\nwd:Q453557 wdt:P27 wd:Q145\n}",
        "questionWithBrackets": "Was [Bruno Pontecorvo] a Italian British employee of [Joint Institute for Nuclear Research] and [Sapienza University of Rome]"
    },
    {
        "questionIdx": 52309,
        "questionPatternModEntities": "Was M0 directed by , written by , and edited by M1",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1 .\nM0 P2 M1\n}",
        "recursionDepth": 26,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q118976 wdt:P57 wd:Q8003 .\nwd:Q118976 wdt:P1040 wd:Q8003 .\nwd:Q118976 wdt:P58 wd:Q8003\n}",
        "questionWithBrackets": "Was [Alexander Nevsky] directed by , written by , and edited by [Sergei Eisenstein]"
    },
    {
        "questionIdx": 52407,
        "questionPatternModEntities": "Was M0 's prequel produced by and distributed by M1",
        "questionTemplate": "Was [entity] 's [ROLE_SIMPLE] [VP_SIMPLE] by and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P2 M1\n}",
        "recursionDepth": 24,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P750 wd:Q9531 .\n?x0 wdt:P162|wdt:P272 wd:Q9531 .\n?x0 wdt:P156 wd:Q20667011\n}",
        "questionWithBrackets": "Was [The Magician's Apprentice] 's prequel produced by and distributed by [BBC]"
    },
    {
        "questionIdx": 52411,
        "questionPatternModEntities": "Was M1 's actor a sibling of M0",
        "questionTemplate": "Was [entity] 's [ROLE_SIMPLE] a [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M0 )\n}",
        "recursionDepth": 17,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P453 wd:Q5815108 .\n?x0 wdt:P3373 wd:Q3756757 .\nFILTER ( ?x0 != wd:Q3756757 )\n}",
        "questionWithBrackets": "Was [Duke of Mantua] 's actor a sibling of [Gabriella Pavarotti]"
    },
    {
        "questionIdx": 52447,
        "questionPatternModEntities": "Was M1 's male actor a sibling of M0",
        "questionTemplate": "Was [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] a [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P2 M2 .\nFILTER ( ?x0 != M0 )\n}",
        "recursionDepth": 22,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P453 wd:Q5815108 .\n?x0 wdt:P21 wd:Q6581097 .\n?x0 wdt:P3373 wd:Q3756757 .\nFILTER ( ?x0 != wd:Q3756757 )\n}",
        "questionWithBrackets": "Was [Duke of Mantua] 's male actor a sibling of [Gabriella Pavarotti]"
    },
    {
        "questionIdx": 52449,
        "questionPatternModEntities": "Was M3 's Mexican British parent M0",
        "questionTemplate": "Was [entity] 's [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P1 M3\n}",
        "recursionDepth": 21,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q442991 wdt:P40|wdt:P355 wd:Q611349 .\nwd:Q442991 wdt:P27 wd:Q145 .\nwd:Q442991 wdt:P27 wd:Q96\n}",
        "questionWithBrackets": "Was [Dhani Harrison] 's Mexican British parent [Olivia Harrison]"
    },
    {
        "questionIdx": 52528,
        "questionPatternModEntities": "Was M0 M3 's Dutch Japanese parent",
        "questionTemplate": "Was [entity] [entity] 's [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P1 M3\n}",
        "recursionDepth": 21,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q1210645 wdt:P40|wdt:P355 wd:Q467187 .\nwd:Q1210645 wdt:P27 wd:Q17 .\nwd:Q1210645 wdt:P27 wd:Q29999\n}",
        "questionWithBrackets": "Was [Dido Havenaar] [Mike Havenaar] 's Dutch Japanese parent"
    },
    {
        "questionIdx": 52529,
        "questionPatternModEntities": "Was M0 a Japanese Dutch parent of M3",
        "questionTemplate": "Was [entity] a [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P1 M3\n}",
        "recursionDepth": 23,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q1210645 wdt:P40|wdt:P355 wd:Q467187 .\nwd:Q1210645 wdt:P27 wd:Q17 .\nwd:Q1210645 wdt:P27 wd:Q29999\n}",
        "questionWithBrackets": "Was [Dido Havenaar] a Japanese Dutch parent of [Mike Havenaar]"
    },
    {
        "questionIdx": 52531,
        "questionPatternModEntities": "Was M0 's prequel edited by M1",
        "questionTemplate": "Was [entity] 's [ROLE_SIMPLE] [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1\n}",
        "recursionDepth": 16,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P1040 wd:Q8003 .\n?x0 wdt:P156 wd:Q152350\n}",
        "questionWithBrackets": "Was [Battleship Potemkin] 's prequel edited by [Sergei Eisenstein]"
    },
    {
        "questionIdx": 52541,
        "questionPatternModEntities": "Was M2 edited by M4 and M5 , written by M3 , and directed by M0 's British sibling 's sibling",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] and [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x1 P0 M0 .\n?x1 P1 M1 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x1 != M0 ) .\nM2 P2 M3 .\nM2 P3 M4 .\nM2 P3 M5 .\nM2 P4 ?x0\n}",
        "recursionDepth": 49,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P3373 ?x1 .\n?x1 wdt:P27 wd:Q145 .\n?x1 wdt:P3373 wd:Q471402 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x1 != wd:Q471402 ) .\nwd:Q181803 wdt:P57 ?x0 .\nwd:Q181803 wdt:P1040 wd:Q38222 .\nwd:Q181803 wdt:P1040 wd:Q463119 .\nwd:Q181803 wdt:P58 wd:Q240872\n}",
        "questionWithBrackets": "Was [Star Wars: Episode VI \u2013 Return of the Jedi] edited by [George Lucas] and [Marcia Lucas] , written by [Lawrence Kasdan] , and directed by [Richard Marquand] 's British sibling 's sibling"
    },
    {
        "questionIdx": 52676,
        "questionPatternModEntities": "Was M1 distributed by M0 's parent and distributed by M2 and M3",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 ?x0 .\nM1 P1 M2 .\nM1 P1 M3\n}",
        "recursionDepth": 31,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q133928 .\nwd:Q14563775 wdt:P750 ?x0 .\nwd:Q14563775 wdt:P750 wd:Q95 .\nwd:Q14563775 wdt:P750 wd:Q337535\n}",
        "questionWithBrackets": "Was [ARMA Tactics] distributed by [X] 's parent and distributed by [Steam] and [Google]"
    },
    {
        "questionIdx": 52683,
        "questionPatternModEntities": "Was M0 directed , executive produced , and written by M1",
        "questionTemplate": "Was [entity] [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1 .\nM0 P2 M1\n}",
        "recursionDepth": 25,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q181086 wdt:P57 wd:Q2001 .\nwd:Q181086 wdt:P1431 wd:Q2001 .\nwd:Q181086 wdt:P58 wd:Q2001\n}",
        "questionWithBrackets": "Was [A Clockwork Orange] directed , executive produced , and written by [Stanley Kubrick]"
    },
    {
        "questionIdx": 52708,
        "questionPatternModEntities": "Was M1 's spouse and parent M0",
        "questionTemplate": "Was [entity] 's [ROLE_SIMPLE] and [ROLE_SIMPLE] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nFILTER ( M0 != M1 ) .\nM0 P0 M1 .\nM0 P1 M1\n}",
        "recursionDepth": 16,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nFILTER ( wd:Q299737 != wd:Q9304 ) .\nwd:Q299737 wdt:P40|wdt:P355 wd:Q9304 .\nwd:Q299737 wdt:P26 wd:Q9304\n}",
        "questionWithBrackets": "Was [Dayan Khan] 's spouse and parent [Mandukhai Khatun]"
    },
    {
        "questionIdx": 52817,
        "questionPatternModEntities": "Was M5 's spouse 's spouse employed by M0 , M1 , and M2 and employed by M3 and M4",
        "questionTemplate": "Was [entity] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE] [VP_SIMPLE] by [entity] , [entity] , and [entity] and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P0 M3 .\n?x0 P0 M4 .\n?x0 P1 ?x1 .\n?x1 P1 M5 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x1 != M5 )\n}",
        "recursionDepth": 42,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P108 wd:Q7367828 .\n?x0 wdt:P108 wd:Q5098068 .\n?x0 wdt:P108 wd:Q8047418 .\n?x0 wdt:P108 wd:Q12073283 .\n?x0 wdt:P108 wd:Q1070333 .\n?x0 wdt:P26 ?x1 .\n?x1 wdt:P26 wd:Q6294 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x1 != wd:Q6294 )\n}",
        "questionWithBrackets": "Was [Hillary Clinton] 's spouse 's spouse employed by [Yale \u2013 New Haven Hospital] , [Rose Law Firm] , and [University of Arkansas] and employed by [Yale Review of Law and Social Action] and [Children's Defense Fund]"
    },
    {
        "questionIdx": 52901,
        "questionPatternModEntities": "Was M0 's Canadian sibling employed by M1 and M2",
        "questionTemplate": "Was [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\n?x0 P2 M3 .\nFILTER ( ?x0 != M0 )\n}",
        "recursionDepth": 25,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P108 wd:Q41506 .\n?x0 wdt:P108 wd:Q13371 .\n?x0 wdt:P27 wd:Q16 .\n?x0 wdt:P3373 wd:Q542461 .\nFILTER ( ?x0 != wd:Q542461 )\n}",
        "questionWithBrackets": "Was [Susan Pinker] 's Canadian sibling employed by [Harvard University] and [Stanford University]"
    },
    {
        "questionIdx": 52902,
        "questionPatternModEntities": "Was M1 's spouse M0 's sibling and parent",
        "questionTemplate": "Was [entity] 's [ROLE_SIMPLE] [entity] 's [ROLE_SIMPLE] and [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M0 .\n?x0 P2 M1 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x0 != M1 )\n}",
        "recursionDepth": 20,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q493 .\n?x0 wdt:P3373 wd:Q493 .\n?x0 wdt:P26 wd:Q17148576 .\nFILTER ( ?x0 != wd:Q493 ) .\nFILTER ( ?x0 != wd:Q17148576 )\n}",
        "questionWithBrackets": "Was [Vitalie Rimbaud] 's spouse [Arthur Rimbaud] 's sibling and parent"
    },
    {
        "questionIdx": 52957,
        "questionPatternModEntities": "Was M0 edited , executive produced , and written by M1",
        "questionTemplate": "Was [entity] [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1 .\nM0 P2 M1\n}",
        "recursionDepth": 25,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q181803 wdt:P1040 wd:Q38222 .\nwd:Q181803 wdt:P1431 wd:Q38222 .\nwd:Q181803 wdt:P58 wd:Q38222\n}",
        "questionWithBrackets": "Was [Star Wars: Episode VI \u2013 Return of the Jedi] edited , executive produced , and written by [George Lucas]"
    },
    {
        "questionIdx": 52962,
        "questionPatternModEntities": "Was M0 written by , produced by , and edited by M1",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1 .\nM0 P2 M1\n}",
        "recursionDepth": 26,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q854990 wdt:P1040 wd:Q8006 .\nwd:Q854990 wdt:P162|wdt:P272 wd:Q8006 .\nwd:Q854990 wdt:P58 wd:Q8006\n}",
        "questionWithBrackets": "Was [Kagemusha] written by , produced by , and edited by [Akira Kurosawa]"
    },
    {
        "questionIdx": 53002,
        "questionPatternModEntities": "Was M2 influenced by a American sibling of M0 and influenced by M3",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M0 ) .\nM2 P2 ?x0 .\nM2 P2 M3\n}",
        "recursionDepth": 34,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P27 wd:Q30 .\n?x0 wdt:P3373 wd:Q16408125 .\nFILTER ( ?x0 != wd:Q16408125 ) .\nwd:Q1299 wdt:P737 ?x0 .\nwd:Q1299 wdt:P737 wd:Q82222\n}",
        "questionWithBrackets": "Was [The Beatles] influenced by a American sibling of [Jessie Garon Presley] and influenced by [Little Richard]"
    },
    {
        "questionIdx": 53168,
        "questionPatternModEntities": "Was M2 produced by M3 and produced by M0 's Chinese sibling",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] and [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M0 ) .\nM2 P2 ?x0 .\nM2 P2 M3\n}",
        "recursionDepth": 32,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P27 wd:Q148 .\n?x0 wdt:P3373 wd:Q7379888 .\nFILTER ( ?x0 != wd:Q7379888 ) .\nwd:Q7445670 wdt:P162|wdt:P272 ?x0 .\nwd:Q7445670 wdt:P162|wdt:P272 wd:Q444591\n}",
        "questionWithBrackets": "Was [Seeding of a Ghost] produced by [Run Run Shaw] and produced by [Runje Shaw] 's Chinese sibling"
    },
    {
        "questionIdx": 53251,
        "questionPatternModEntities": "Was M0 edited , written , and produced by M1 and M2",
        "questionTemplate": "Was [entity] [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P1 M1 .\nM0 P1 M2 .\nM0 P2 M1 .\nM0 P2 M2\n}",
        "recursionDepth": 28,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q20729551 wdt:P1040 wd:Q562108 .\nwd:Q20729551 wdt:P1040 wd:Q1687239 .\nwd:Q20729551 wdt:P162|wdt:P272 wd:Q562108 .\nwd:Q20729551 wdt:P162|wdt:P272 wd:Q1687239 .\nwd:Q20729551 wdt:P58 wd:Q562108 .\nwd:Q20729551 wdt:P58 wd:Q1687239\n}",
        "questionWithBrackets": "Was [Stop for Bud] edited , written , and produced by [Jens J\u00f8rgen Thorsen] and [J\u00f8rgen Leth]"
    },
    {
        "questionIdx": 53254,
        "questionPatternModEntities": "Was M2 written by M1 's female spouse",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M1 ) .\nM2 P2 ?x0\n}",
        "recursionDepth": 21,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P21 wd:Q6581072 .\n?x0 wdt:P26 wd:Q315051 .\nFILTER ( ?x0 != wd:Q315051 ) .\nwd:Q780469 wdt:P58 ?x0\n}",
        "questionWithBrackets": "Was [Yentl] written by [James Brolin] 's female spouse"
    },
    {
        "questionIdx": 53276,
        "questionPatternModEntities": "Was M1 's American female employee M0",
        "questionTemplate": "Was [entity] 's [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M2 .\nM0 P2 M3\n}",
        "recursionDepth": 21,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q7433 wdt:P108 wd:Q131252 .\nwd:Q7433 wdt:P21 wd:Q6581072 .\nwd:Q7433 wdt:P27 wd:Q30\n}",
        "questionWithBrackets": "Was [University of Chicago] 's American female employee [Myrtle Bachelder]"
    },
    {
        "questionIdx": 53297,
        "questionPatternModEntities": "Was M0 's British employee influenced by M1",
        "questionTemplate": "Was [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P2 M2\n}",
        "recursionDepth": 21,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P737 wd:Q868 .\n?x0 wdt:P108 wd:Q34433 .\n?x0 wdt:P27 wd:Q145\n}",
        "questionWithBrackets": "Was [University of Oxford] 's British employee influenced by [Aristotle]"
    },
    {
        "questionIdx": 53310,
        "questionPatternModEntities": "Was M0 's prequel written by a sibling of M1",
        "questionTemplate": "Was [entity] 's [ROLE_SIMPLE] [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 ?x1 .\n?x1 P2 M1 .\nFILTER ( ?x1 != M1 )\n}",
        "recursionDepth": 22,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P156 wd:Q378913 .\n?x0 wdt:P58 ?x1 .\n?x1 wdt:P3373 wd:Q10295543 .\nFILTER ( ?x1 != wd:Q10295543 )\n}",
        "questionWithBrackets": "Was [The Lord of the Rings] 's prequel written by a sibling of [Hilary Arthur Reuel Tolkien]"
    },
    {
        "questionIdx": 53313,
        "questionPatternModEntities": "Was M0 distributed by M1 and distributed by M2 and M3",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P0 M3\n}",
        "recursionDepth": 27,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q13409492 wdt:P750 wd:Q312 .\nwd:Q13409492 wdt:P750 wd:Q79576 .\nwd:Q13409492 wdt:P750 wd:Q337535\n}",
        "questionWithBrackets": "Was [The Room] distributed by [Google Play] and distributed by [Apple Inc.] and [Steam]"
    },
    {
        "questionIdx": 53326,
        "questionPatternModEntities": "Was M2 executive produced by M0 's male employee",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nM2 P2 ?x0\n}",
        "recursionDepth": 22,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P108 wd:Q9531 .\n?x0 wdt:P21 wd:Q6581097 .\nwd:Q836821 wdt:P1431 ?x0\n}",
        "questionWithBrackets": "Was [The Hitchhiker's Guide to the Galaxy] executive produced by [BBC] 's male employee"
    },
    {
        "questionIdx": 53353,
        "questionPatternModEntities": "Was M0 executive produced by M1 , M2 , M3 , and M4",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] , [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P0 M3 .\nM0 P0 M4\n}",
        "recursionDepth": 23,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q102244 wdt:P1431 wd:Q75079 .\nwd:Q102244 wdt:P1431 wd:Q975579 .\nwd:Q102244 wdt:P1431 wd:Q1900360 .\nwd:Q102244 wdt:P1431 wd:Q11778321\n}",
        "questionWithBrackets": "Was [Harry Potter and the Chamber of Secrets] executive produced by [David Barron] , [Chris Columbus] , [Michael Barnathan] , and [Mark Radcliffe]"
    },
    {
        "questionIdx": 53356,
        "questionPatternModEntities": "Was M1 's parent influenced by M0",
        "questionTemplate": "Was [entity] 's [ROLE_SIMPLE] [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1\n}",
        "recursionDepth": 16,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P737 wd:Q868 .\n?x0 wdt:P40|wdt:P355 wd:Q86130\n}",
        "questionWithBrackets": "Was [Karl Von Hegel] 's parent influenced by [Aristotle]"
    },
    {
        "questionIdx": 53505,
        "questionPatternModEntities": "Was M0 M1 's German Dutch sibling",
        "questionTemplate": "Was [entity] [entity] 's [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\nFILTER ( M0 != M1 ) .\nM0 P0 M1 .\nM0 P1 M2 .\nM0 P1 M3\n}",
        "recursionDepth": 21,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nFILTER ( wd:Q67425 != wd:Q71738329 ) .\nwd:Q67425 wdt:P27 wd:Q183 .\nwd:Q67425 wdt:P27 wd:Q29999 .\nwd:Q67425 wdt:P3373 wd:Q71738329\n}",
        "questionWithBrackets": "Was [James Kwast] [Barend Kwast] 's German Dutch sibling"
    },
    {
        "questionIdx": 53531,
        "questionPatternModEntities": "Was M3 's Italian French parent M0",
        "questionTemplate": "Was [entity] 's [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P1 M3\n}",
        "recursionDepth": 21,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q4261 wdt:P40|wdt:P355 wd:Q55332442 .\nwd:Q4261 wdt:P27 wd:Q38 .\nwd:Q4261 wdt:P27 wd:Q142\n}",
        "questionWithBrackets": "Was [Laurent Platini] 's Italian French parent [Michel Platini]"
    },
    {
        "questionIdx": 53659,
        "questionPatternModEntities": "Was M1 directed by , written by , produced by , and edited by a sibling of M0",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nM1 P1 ?x0 .\nM1 P2 ?x0 .\nM1 P3 ?x0 .\nM1 P4 ?x0\n}",
        "recursionDepth": 38,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P3373 wd:Q372788 .\nFILTER ( ?x0 != wd:Q372788 ) .\nwd:Q685817 wdt:P57 ?x0 .\nwd:Q685817 wdt:P1040 ?x0 .\nwd:Q685817 wdt:P162|wdt:P272 ?x0 .\nwd:Q685817 wdt:P58 ?x0\n}",
        "questionWithBrackets": "Was [Following] directed by , written by , produced by , and edited by a sibling of [Jonathan Nolan]"
    },
    {
        "questionIdx": 53795,
        "questionPatternModEntities": "Was M1 influenced by a sibling of M0",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nM1 P1 ?x0\n}",
        "recursionDepth": 18,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P3373 wd:Q157928 .\nFILTER ( ?x0 != wd:Q157928 ) .\nwd:Q255 wdt:P737 ?x0\n}",
        "questionWithBrackets": "Was [Ludwig van Beethoven] influenced by a sibling of [Anna Mozart]"
    },
    {
        "questionIdx": 53803,
        "questionPatternModEntities": "Was M0 a German Japanese spouse of M3",
        "questionTemplate": "Was [entity] a [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nFILTER ( M0 != M3 ) .\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P1 M3\n}",
        "recursionDepth": 23,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nFILTER ( wd:Q214289 != wd:Q171998 ) .\nwd:Q214289 wdt:P27 wd:Q183 .\nwd:Q214289 wdt:P27 wd:Q17 .\nwd:Q214289 wdt:P26 wd:Q171998\n}",
        "questionWithBrackets": "Was [Michelle Yeoh] a German Japanese spouse of [Jean Todt]"
    },
    {
        "questionIdx": 53839,
        "questionPatternModEntities": "Was M0 's spouse 's spouse M1",
        "questionTemplate": "Was [entity] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( M1 != ?x0 ) .\nM1 P0 ?x0\n}",
        "recursionDepth": 15,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P26 wd:Q1423 .\nFILTER ( ?x0 != wd:Q1423 ) .\nFILTER ( wd:Q1159574 != ?x0 ) .\nwd:Q1159574 wdt:P26 ?x0\n}",
        "questionWithBrackets": "Was [Domitian] 's spouse 's spouse [Lucius Aelius Plautius Lamia Aelianus]"
    },
    {
        "questionIdx": 53850,
        "questionPatternModEntities": "Was M0 a German female American spouse of M4",
        "questionTemplate": "Was [entity] a [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nFILTER ( M0 != M4 ) .\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P1 M3 .\nM0 P2 M4\n}",
        "recursionDepth": 28,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nFILTER ( wd:Q18994 != wd:Q734944 ) .\nwd:Q18994 wdt:P21 wd:Q6581072 .\nwd:Q18994 wdt:P27 wd:Q183 .\nwd:Q18994 wdt:P27 wd:Q30 .\nwd:Q18994 wdt:P26 wd:Q734944\n}",
        "questionWithBrackets": "Was [Luise Rainer] a German female American spouse of [Clifford Odets]"
    },
    {
        "questionIdx": 53866,
        "questionPatternModEntities": "Was M0 's sibling M1 's Dutch sibling",
        "questionTemplate": "Was [entity] 's [ROLE_SIMPLE] [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P1 M2 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x0 != M1 )\n}",
        "recursionDepth": 20,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P27 wd:Q29999 .\n?x0 wdt:P3373 wd:Q242862 .\n?x0 wdt:P3373 wd:Q705129 .\nFILTER ( ?x0 != wd:Q242862 ) .\nFILTER ( ?x0 != wd:Q705129 )\n}",
        "questionWithBrackets": "Was [Prince Henry of the Netherlands] 's sibling [Princess Sophie of the Netherlands] 's Dutch sibling"
    },
    {
        "questionIdx": 53933,
        "questionPatternModEntities": "Was M2 produced by a Swedish sibling of M0",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M0 ) .\nM2 P2 ?x0\n}",
        "recursionDepth": 23,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P27 wd:Q34 .\n?x0 wdt:P3373 wd:Q4938582 .\nFILTER ( ?x0 != wd:Q4938582 ) .\nwd:Q98098574 wdt:P162|wdt:P272 ?x0\n}",
        "questionWithBrackets": "Was [Scenes from a Marriage] produced by a Swedish sibling of [Margareta Bergman]"
    },
    {
        "questionIdx": 53939,
        "questionPatternModEntities": "Was M0 's Spanish sibling employed by M1 , employed by M2 , and employed by M3",
        "questionTemplate": "Was [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\n?x0 P1 M3 .\n?x0 P2 M4 .\nFILTER ( ?x0 != M0 )\n}",
        "recursionDepth": 41,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P108 wd:Q21705070 .\n?x0 wdt:P108 wd:Q219615 .\n?x0 wdt:P108 wd:Q383568 .\n?x0 wdt:P27 wd:Q29 .\n?x0 wdt:P3373 wd:Q11815394 .\nFILTER ( ?x0 != wd:Q11815394 )\n}",
        "questionWithBrackets": "Was [Pedro Ram\u00f3n y Cajal] 's Spanish sibling employed by [University of Valencia] , employed by [Universidad Central] , and employed by [University of Barcelona]"
    },
    {
        "questionIdx": 53951,
        "questionPatternModEntities": "Was M0 's spouse 's spouse and sibling M1",
        "questionTemplate": "Was [entity] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE] and [ROLE_SIMPLE] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( M1 != ?x0 ) .\nFILTER ( M1 != ?x0 ) .\nM1 P0 ?x0 .\nM1 P1 ?x0\n}",
        "recursionDepth": 20,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P26 wd:Q40017 .\nFILTER ( ?x0 != wd:Q40017 ) .\nFILTER ( wd:Q39938 != ?x0 ) .\nFILTER ( wd:Q39938 != ?x0 ) .\nwd:Q39938 wdt:P3373 ?x0 .\nwd:Q39938 wdt:P26 ?x0\n}",
        "questionWithBrackets": "Was [Ptolemy XIV of Egypt] 's spouse 's spouse and sibling [Ptolemy XIII Theos Philopator]"
    },
    {
        "questionIdx": 53953,
        "questionPatternModEntities": "Was M1 M0 's spouse 's sibling and parent",
        "questionTemplate": "Was [entity] [entity] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE] and [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( M1 != ?x0 ) .\nM1 P1 ?x0 .\nM1 P2 ?x0\n}",
        "recursionDepth": 20,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P26 wd:Q632595 .\nFILTER ( ?x0 != wd:Q632595 ) .\nFILTER ( wd:Q40020 != ?x0 ) .\nwd:Q40020 wdt:P40|wdt:P355 ?x0 .\nwd:Q40020 wdt:P3373 ?x0\n}",
        "questionWithBrackets": "Was [Cleopatra VI of Egypt] [Archelaus] 's spouse 's sibling and parent"
    },
    {
        "questionIdx": 53965,
        "questionPatternModEntities": "Was M0 a German Dutch sibling of M1",
        "questionTemplate": "Was [entity] a [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nFILTER ( M0 != M1 ) .\nM0 P0 M1 .\nM0 P1 M2 .\nM0 P1 M3\n}",
        "recursionDepth": 23,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nFILTER ( wd:Q57664 != wd:Q68089 ) .\nwd:Q57664 wdt:P27 wd:Q183 .\nwd:Q57664 wdt:P27 wd:Q29999 .\nwd:Q57664 wdt:P3373 wd:Q68089\n}",
        "questionWithBrackets": "Was [Emma of Waldeck and Pyrmont] a German Dutch sibling of [Princess Pauline of Waldeck and Pyrmont]"
    },
    {
        "questionIdx": 54058,
        "questionPatternModEntities": "Was M0 's Swedish employee employed by M1 , employed by M2 , and employed by M3",
        "questionTemplate": "Was [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P0 M3 .\n?x0 P1 M4\n}",
        "recursionDepth": 41,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P108 wd:Q153987 .\n?x0 wdt:P108 wd:Q11942 .\n?x0 wdt:P108 wd:Q186285 .\n?x0 wdt:P108 wd:Q221645 .\n?x0 wdt:P27 wd:Q34\n}",
        "questionWithBrackets": "Was [University of Copenhagen] 's Swedish employee employed by [Stockholm University] , employed by [University of Freiburg] , and employed by [ETH Z\u00fcrich]"
    },
    {
        "questionIdx": 54070,
        "questionPatternModEntities": "Was M0 a Italian actor of M2 , M3 , and M4",
        "questionTemplate": "Was [entity] a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M2 .\nM0 P1 M3 .\nM0 P1 M4\n}",
        "recursionDepth": 25,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q242538 wdt:P453 wd:Q50386892 .\nwd:Q242538 wdt:P453 wd:Q12742668 .\nwd:Q242538 wdt:P453 wd:Q64005751 .\nwd:Q242538 wdt:P27 wd:Q38\n}",
        "questionWithBrackets": "Was [Katia Ricciarelli] a Italian actor of [Princess Turandot] , [Mim\u00ec] , and [Floria Tosca]"
    },
    {
        "questionIdx": 54180,
        "questionPatternModEntities": "Was M0 's Swedish employee employed by M2 's parent",
        "questionTemplate": "Was [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x1 P2 M2\n}",
        "recursionDepth": 25,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P108 ?x1 .\n?x0 wdt:P108 wd:Q1065 .\n?x0 wdt:P27 wd:Q34 .\n?x1 wdt:P40|wdt:P355 wd:Q170075\n}",
        "questionWithBrackets": "Was [United Nations] 's Swedish employee employed by [United Nations Economic and Social Council] 's parent"
    },
    {
        "questionIdx": 54183,
        "questionPatternModEntities": "Was M0 a sibling of M1",
        "questionTemplate": "Was [entity] a [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nFILTER ( M0 != M1 ) .\nM0 P0 M1\n}",
        "recursionDepth": 13,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nFILTER ( wd:Q157928 != wd:Q254 ) .\nwd:Q157928 wdt:P3373 wd:Q254\n}",
        "questionWithBrackets": "Was [Anna Mozart] a sibling of [Wolfgang Amadeus Mozart]"
    },
    {
        "questionIdx": 54242,
        "questionPatternModEntities": "Was M2 written by M1 's male spouse",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M1 ) .\nM2 P2 ?x0\n}",
        "recursionDepth": 21,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P21 wd:Q6581097 .\n?x0 wdt:P26 wd:Q137808 .\nFILTER ( ?x0 != wd:Q137808 ) .\nwd:Q921678 wdt:P58 ?x0\n}",
        "questionWithBrackets": "Was [Shanghaied] written by [Oona O'Neill] 's male spouse"
    },
    {
        "questionIdx": 54342,
        "questionPatternModEntities": "Was M0 distributed by M1 , distributed by M2 and M3 , produced by M6 , and distributed by M4 and M5",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] and [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P0 M3 .\nM0 P0 M4 .\nM0 P0 M5 .\nM0 P1 M6\n}",
        "recursionDepth": 49,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q692821 wdt:P750 wd:Q145 .\nwd:Q692821 wdt:P750 wd:Q5371838 .\nwd:Q692821 wdt:P750 wd:Q907311 .\nwd:Q692821 wdt:P750 wd:Q80948336 .\nwd:Q692821 wdt:P750 wd:Q9589 .\nwd:Q692821 wdt:P162|wdt:P272 wd:Q79618131\n}",
        "questionWithBrackets": "Was [My Summer of Love] distributed by [iTunes] , distributed by [FandangoNow] and [Vudu] , produced by [Apocalypso Pictures] , and distributed by [Netflix] and [United Kingdom]"
    },
    {
        "questionIdx": 54348,
        "questionPatternModEntities": "Was M0 's female employee influenced by M1 , M2 , and M3",
        "questionTemplate": "Was [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] [VP_SIMPLE] by [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\n?x0 P1 M3 .\n?x0 P2 M4\n}",
        "recursionDepth": 28,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P737 wd:Q859 .\n?x0 wdt:P737 wd:Q76509 .\n?x0 wdt:P737 wd:Q77148 .\n?x0 wdt:P108 wd:Q21578 .\n?x0 wdt:P21 wd:Q6581072\n}",
        "questionWithBrackets": "Was [Princeton University] 's female employee influenced by [Plato] , [Carl Schmitt] , and [Karl Jaspers]"
    },
    {
        "questionIdx": 54354,
        "questionPatternModEntities": "Was M0 a female German employee of M1",
        "questionTemplate": "Was [entity] a [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M2 .\nM0 P2 M3\n}",
        "recursionDepth": 23,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q16477 wdt:P108 wd:Q835440 .\nwd:Q16477 wdt:P21 wd:Q6581072 .\nwd:Q16477 wdt:P27 wd:Q183\n}",
        "questionWithBrackets": "Was [Dorothea Wagner] a female German employee of [University of Konstanz]"
    },
    {
        "questionIdx": 54382,
        "questionPatternModEntities": "Was M1 edited by and directed by M0 's spouse",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nM1 P1 ?x0 .\nM1 P2 ?x0\n}",
        "recursionDepth": 24,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P26 wd:Q58866 .\nFILTER ( ?x0 != wd:Q58866 ) .\nwd:Q151599 wdt:P57 ?x0 .\nwd:Q151599 wdt:P1040 ?x0\n}",
        "questionWithBrackets": "Was [Metropolis] edited by and directed by [Thea von Harbou] 's spouse"
    },
    {
        "questionIdx": 54386,
        "questionPatternModEntities": "Was M1 's female American sibling M0",
        "questionTemplate": "Was [entity] 's [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nFILTER ( M0 != M1 ) .\nM0 P0 M1 .\nM0 P1 M2 .\nM0 P2 M3\n}",
        "recursionDepth": 21,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nFILTER ( wd:Q447799 != wd:Q1225 ) .\nwd:Q447799 wdt:P21 wd:Q6581072 .\nwd:Q447799 wdt:P27 wd:Q30 .\nwd:Q447799 wdt:P3373 wd:Q1225\n}",
        "questionWithBrackets": "Was [Bruce Springsteen] 's female American sibling [Pamela Springsteen]"
    },
    {
        "questionIdx": 54601,
        "questionPatternModEntities": "Was M0 executive produced and produced by M1",
        "questionTemplate": "Was [entity] [VP_SIMPLE] and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1\n}",
        "recursionDepth": 20,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q181086 wdt:P1431 wd:Q2001 .\nwd:Q181086 wdt:P162|wdt:P272 wd:Q2001\n}",
        "questionWithBrackets": "Was [A Clockwork Orange] executive produced and produced by [Stanley Kubrick]"
    },
    {
        "questionIdx": 54676,
        "questionPatternModEntities": "Was M0 M3 's Mexican Canadian parent",
        "questionTemplate": "Was [entity] [entity] 's [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P1 M3\n}",
        "recursionDepth": 21,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q530824 wdt:P40|wdt:P355 wd:Q24954423 .\nwd:Q530824 wdt:P27 wd:Q96 .\nwd:Q530824 wdt:P27 wd:Q16\n}",
        "questionWithBrackets": "Was [Alex Phillips] [Alex Phillips Jr.] 's Mexican Canadian parent"
    },
    {
        "questionIdx": 54679,
        "questionPatternModEntities": "Was M0 written by and executive produced by M1 and M2",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P1 M1 .\nM0 P1 M2\n}",
        "recursionDepth": 25,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q1137372 wdt:P1431 wd:Q3772 .\nwd:Q1137372 wdt:P1431 wd:Q549956 .\nwd:Q1137372 wdt:P58 wd:Q3772 .\nwd:Q1137372 wdt:P58 wd:Q549956\n}",
        "questionWithBrackets": "Was [Four Rooms] written by and executive produced by [Quentin Tarantino] and [Alexandre Rockwell]"
    },
    {
        "questionIdx": 54686,
        "questionPatternModEntities": "Was M2 written by , edited by , directed by , and produced by M0 's female employee",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nM2 P2 ?x0 .\nM2 P3 ?x0 .\nM2 P4 ?x0 .\nM2 P5 ?x0\n}",
        "recursionDepth": 41,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P108 wd:Q681250 .\n?x0 wdt:P21 wd:Q6581072 .\nwd:Q2493884 wdt:P57 ?x0 .\nwd:Q2493884 wdt:P1040 ?x0 .\nwd:Q2493884 wdt:P162|wdt:P272 ?x0 .\nwd:Q2493884 wdt:P58 ?x0\n}",
        "questionWithBrackets": "Was [The Gleaners and I] written by , edited by , directed by , and produced by [European Graduate School] 's female employee"
    },
    {
        "questionIdx": 54705,
        "questionPatternModEntities": "Was M0 produced , directed , executive produced , and edited by M1",
        "questionTemplate": "Was [entity] [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1 .\nM0 P2 M1 .\nM0 P3 M1\n}",
        "recursionDepth": 30,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q854990 wdt:P57 wd:Q8006 .\nwd:Q854990 wdt:P1040 wd:Q8006 .\nwd:Q854990 wdt:P1431 wd:Q8006 .\nwd:Q854990 wdt:P162|wdt:P272 wd:Q8006\n}",
        "questionWithBrackets": "Was [Kagemusha] produced , directed , executive produced , and edited by [Akira Kurosawa]"
    },
    {
        "questionIdx": 54715,
        "questionPatternModEntities": "Was M1 's prequel 's prequel directed by M0",
        "questionTemplate": "Was [entity] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE] [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x0 P1 M0 .\n?x1 P0 M1\n}",
        "recursionDepth": 20,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P57 wd:Q4465 .\n?x0 wdt:P156 ?x1 .\n?x1 wdt:P156 wd:Q74331\n}",
        "questionWithBrackets": "Was [The Hobbit trilogy] 's prequel 's prequel directed by [Peter Jackson]"
    },
    {
        "questionIdx": 54751,
        "questionPatternModEntities": "Was M0 executive produced and directed by M1",
        "questionTemplate": "Was [entity] [VP_SIMPLE] and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1\n}",
        "recursionDepth": 20,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q105387 wdt:P57 wd:Q60100 .\nwd:Q105387 wdt:P1431 wd:Q60100\n}",
        "questionWithBrackets": "Was [Independence Day] executive produced and directed by [Roland Emmerich]"
    },
    {
        "questionIdx": 54762,
        "questionPatternModEntities": "Was M0 's prequel 's sequel M1",
        "questionTemplate": "Was [entity] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 ?x0\n}",
        "recursionDepth": 15,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P156 wd:Q4948 .\nwd:Q1365493 wdt:P155 ?x0\n}",
        "questionWithBrackets": "Was [Republic of Venice] 's prequel 's sequel [Republic of Pisa]"
    },
    {
        "questionIdx": 54956,
        "questionPatternModEntities": "Was M0 Swedish",
        "questionTemplate": "Was [entity] [ADJECTIVE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1\n}",
        "recursionDepth": 9,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q530 wdt:P27 wd:Q34\n}LIMIT 1",
        "questionWithBrackets": "Was [Ingemar Stenmark] Swedish"
    },
    {
        "questionIdx": 54960,
        "questionPatternModEntities": "Was M0 's prequel executive produced by and written by M1 's male employee",
        "questionTemplate": "Was [entity] 's [ROLE_SIMPLE] [VP_SIMPLE] by and [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x1 P3 M1 .\n?x1 P4 M2\n}",
        "recursionDepth": 34,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P1431 ?x1 .\n?x0 wdt:P156 wd:Q19961444 .\n?x0 wdt:P58 ?x1 .\n?x1 wdt:P108 wd:Q740308 .\n?x1 wdt:P21 wd:Q6581097\n}",
        "questionWithBrackets": "Was [Kung Fu Yoga] 's prequel executive produced by and written by [UNICEF] 's male employee"
    },
    {
        "questionIdx": 55007,
        "questionPatternModEntities": "Was M2 written by and executive produced by a female employee of M0",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by and [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nM2 P2 ?x0 .\nM2 P3 ?x0\n}",
        "recursionDepth": 32,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P108 wd:Q847743 .\n?x0 wdt:P21 wd:Q6581072 .\nwd:Q946478 wdt:P1431 ?x0 .\nwd:Q946478 wdt:P58 ?x0\n}",
        "questionWithBrackets": "Was [Filth and Wisdom] written by and executive produced by a female employee of [Dunkin']"
    },
    {
        "questionIdx": 55161,
        "questionPatternModEntities": "Was M0 written , directed , and edited by M1 and M2",
        "questionTemplate": "Was [entity] [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P1 M1 .\nM0 P1 M2 .\nM0 P2 M1 .\nM0 P2 M2\n}",
        "recursionDepth": 28,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q543382 wdt:P57 wd:Q44426 .\nwd:Q543382 wdt:P57 wd:Q96024 .\nwd:Q543382 wdt:P1040 wd:Q44426 .\nwd:Q543382 wdt:P1040 wd:Q96024 .\nwd:Q543382 wdt:P58 wd:Q44426 .\nwd:Q543382 wdt:P58 wd:Q96024\n}",
        "questionWithBrackets": "Was [Why Does Herr R. Run Amok?] written , directed , and edited by [Rainer Werner Fassbinder] and [Michael Fengler]"
    },
    {
        "questionIdx": 55190,
        "questionPatternModEntities": "Was M3 's German Dutch parent M0",
        "questionTemplate": "Was [entity] 's [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P1 M3\n}",
        "recursionDepth": 21,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q106580 wdt:P40|wdt:P355 wd:Q1095182 .\nwd:Q106580 wdt:P27 wd:Q183 .\nwd:Q106580 wdt:P27 wd:Q29999\n}",
        "questionWithBrackets": "Was [Clara Gertrud Wichmann] 's German Dutch parent [C. E. A. Wichmann]"
    },
    {
        "questionIdx": 55397,
        "questionPatternModEntities": "Was M0 directed , written , and edited by M1 , M2 , M3 , and M4",
        "questionTemplate": "Was [entity] [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by [entity] , [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P0 M3 .\nM0 P0 M4 .\nM0 P1 M1 .\nM0 P1 M2 .\nM0 P1 M3 .\nM0 P1 M4 .\nM0 P2 M1 .\nM0 P2 M2 .\nM0 P2 M3 .\nM0 P2 M4\n}",
        "recursionDepth": 34,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q74535 wdt:P57 wd:Q4022902 .\nwd:Q74535 wdt:P57 wd:Q5658534 .\nwd:Q74535 wdt:P57 wd:Q4023328 .\nwd:Q74535 wdt:P57 wd:Q5836844 .\nwd:Q74535 wdt:P1040 wd:Q4022902 .\nwd:Q74535 wdt:P1040 wd:Q5658534 .\nwd:Q74535 wdt:P1040 wd:Q4023328 .\nwd:Q74535 wdt:P1040 wd:Q5836844 .\nwd:Q74535 wdt:P58 wd:Q4022902 .\nwd:Q74535 wdt:P58 wd:Q5658534 .\nwd:Q74535 wdt:P58 wd:Q4023328 .\nwd:Q74535 wdt:P58 wd:Q5836844\n}",
        "questionWithBrackets": "Was [The ABCs of Death] directed , written , and edited by [Ernesto D\u00edaz Espinoza] , [Yoshihiro Nishimura] , [Y\u016bdai Yamaguchi] , and [Adri\u00e1n Garc\u00eda Bogliano]"
    },
    {
        "questionIdx": 55399,
        "questionPatternModEntities": "Was M0 edited by , written by , and directed by M1 , M2 , M3 , and M4",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity] , [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P0 M3 .\nM0 P0 M4 .\nM0 P1 M1 .\nM0 P1 M2 .\nM0 P1 M3 .\nM0 P1 M4 .\nM0 P2 M1 .\nM0 P2 M2 .\nM0 P2 M3 .\nM0 P2 M4\n}",
        "recursionDepth": 36,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q74535 wdt:P57 wd:Q4022902 .\nwd:Q74535 wdt:P57 wd:Q5658534 .\nwd:Q74535 wdt:P57 wd:Q4023328 .\nwd:Q74535 wdt:P57 wd:Q5836844 .\nwd:Q74535 wdt:P1040 wd:Q4022902 .\nwd:Q74535 wdt:P1040 wd:Q5658534 .\nwd:Q74535 wdt:P1040 wd:Q4023328 .\nwd:Q74535 wdt:P1040 wd:Q5836844 .\nwd:Q74535 wdt:P58 wd:Q4022902 .\nwd:Q74535 wdt:P58 wd:Q5658534 .\nwd:Q74535 wdt:P58 wd:Q4023328 .\nwd:Q74535 wdt:P58 wd:Q5836844\n}",
        "questionWithBrackets": "Was [The ABCs of Death] edited by , written by , and directed by [Yoshihiro Nishimura] , [Ernesto D\u00edaz Espinoza] , [Adri\u00e1n Garc\u00eda Bogliano] , and [Y\u016bdai Yamaguchi]"
    },
    {
        "questionIdx": 55445,
        "questionPatternModEntities": "Was M1 M0 's spouse 's sibling 's sibling",
        "questionTemplate": "Was [entity] [entity] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x1 P1 M0 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x1 != M0 ) .\nFILTER ( M1 != ?x0 ) .\nM1 P0 ?x0\n}",
        "recursionDepth": 19,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P3373 ?x1 .\n?x1 wdt:P26 wd:Q171480 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x1 != wd:Q171480 ) .\nFILTER ( wd:Q75304908 != ?x0 ) .\nwd:Q75304908 wdt:P3373 ?x0\n}",
        "questionWithBrackets": "Was [Maria Anna Bonaparte] [Jos\u00e9phine de Beauharnais] 's spouse 's sibling 's sibling"
    },
    {
        "questionIdx": 55453,
        "questionPatternModEntities": "Was M0 M1 's Italian sibling",
        "questionTemplate": "Was [entity] [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\nFILTER ( M0 != M1 ) .\nM0 P0 M1 .\nM0 P1 M2\n}",
        "recursionDepth": 16,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nFILTER ( wd:Q25100 != wd:Q971600 ) .\nwd:Q25100 wdt:P27 wd:Q38 .\nwd:Q25100 wdt:P3373 wd:Q971600\n}",
        "questionWithBrackets": "Was [Nanni Moretti] [Franco Moretti] 's Italian sibling"
    },
    {
        "questionIdx": 55454,
        "questionPatternModEntities": "Was M2 executive produced by M1 's Italian spouse",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M1 ) .\nM2 P2 ?x0\n}",
        "recursionDepth": 22,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P27 wd:Q38 .\n?x0 wdt:P26 wd:Q164065 .\nFILTER ( ?x0 != wd:Q164065 ) .\nwd:Q172837 wdt:P1431 ?x0\n}",
        "questionWithBrackets": "Was [Bicycle Thieves] executive produced by [Giuditta Rissone] 's Italian spouse"
    },
    {
        "questionIdx": 55461,
        "questionPatternModEntities": "Was M0 French",
        "questionTemplate": "Was [entity] [ADJECTIVE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1\n}",
        "recursionDepth": 9,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q260 wdt:P27 wd:Q142\n}LIMIT 1",
        "questionWithBrackets": "Was [Jean-Fran\u00e7ois Champollion] French"
    },
    {
        "questionIdx": 55477,
        "questionPatternModEntities": "Was M0 's Spanish sibling influenced by M1",
        "questionTemplate": "Was [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P2 M2 .\nFILTER ( ?x0 != M0 )\n}",
        "recursionDepth": 21,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P737 wd:Q449 .\n?x0 wdt:P27 wd:Q29 .\n?x0 wdt:P3373 wd:Q3572431 .\nFILTER ( ?x0 != wd:Q3572431 )\n}",
        "questionWithBrackets": "Was [Miguel Labordeta Sub\u00edas] 's Spanish sibling influenced by [Georges Brassens]"
    },
    {
        "questionIdx": 55492,
        "questionPatternModEntities": "Was M1 employed by M0 's parent , employed by M2 and M3 , employed by M4 , and employed by M5",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] , [VP_SIMPLE] by [entity] and [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 ?x0 .\nM1 P1 M2 .\nM1 P1 M3 .\nM1 P1 M4 .\nM1 P1 M5\n}",
        "recursionDepth": 49,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q140258 .\nwd:Q689785 wdt:P108 ?x0 .\nwd:Q689785 wdt:P108 wd:Q41506 .\nwd:Q689785 wdt:P108 wd:Q1245999 .\nwd:Q689785 wdt:P108 wd:Q95 .\nwd:Q689785 wdt:P108 wd:Q168756\n}",
        "questionWithBrackets": "Was [Hal Varian] employed by [Zagat] 's parent , employed by [Stanford University] and [Google] , employed by [University of California, Berkeley] , and employed by [University of Siena]"
    },
    {
        "questionIdx": 55497,
        "questionPatternModEntities": "Was M0 's male sibling influenced by M1 and influenced by M2 , M3 , and M4",
        "questionTemplate": "Was [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] [VP_SIMPLE] by [entity] and [VP_SIMPLE] by [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\n?x0 P1 M3 .\n?x0 P1 M4 .\n?x0 P2 M5 .\nFILTER ( ?x0 != M0 )\n}",
        "recursionDepth": 39,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P737 wd:Q501 .\n?x0 wdt:P737 wd:Q2371393 .\n?x0 wdt:P737 wd:Q535 .\n?x0 wdt:P737 wd:Q755 .\n?x0 wdt:P21 wd:Q6581097 .\n?x0 wdt:P3373 wd:Q8308563 .\nFILTER ( ?x0 != wd:Q8308563 )\n}",
        "questionWithBrackets": "Was [Fr\u00e9d\u00e9ric Rimbaud] 's male sibling influenced by [Victor Hugo] and influenced by [Albert M\u00e9rat] , [Paul Verlaine] , and [Charles Baudelaire]"
    },
    {
        "questionIdx": 55504,
        "questionPatternModEntities": "Was M0 M3 's Japanese Italian parent",
        "questionTemplate": "Was [entity] [entity] 's [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P1 M3\n}",
        "recursionDepth": 21,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q3783562 wdt:P40|wdt:P355 wd:Q3980228 .\nwd:Q3783562 wdt:P27 wd:Q17 .\nwd:Q3783562 wdt:P27 wd:Q38\n}",
        "questionWithBrackets": "Was [Haruhiko Yamanouchi] [Taiyo Yamanouchi] 's Japanese Italian parent"
    },
    {
        "questionIdx": 55514,
        "questionPatternModEntities": "Was M2 's German actor M0",
        "questionTemplate": "Was [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M2\n}",
        "recursionDepth": 16,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q60876294 wdt:P453 wd:Q905926 .\nwd:Q60876294 wdt:P27 wd:Q183\n}",
        "questionWithBrackets": "Was [Protoss] 's German actor [ShoWTimE]"
    },
    {
        "questionIdx": 55517,
        "questionPatternModEntities": "Was M0 written and produced by M1 , M2 , and M3",
        "questionTemplate": "Was [entity] [VP_SIMPLE] and [VP_SIMPLE] by [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P0 M3 .\nM0 P1 M1 .\nM0 P1 M2 .\nM0 P1 M3\n}",
        "recursionDepth": 26,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q679023 wdt:P162|wdt:P272 wd:Q3772 .\nwd:Q679023 wdt:P162|wdt:P272 wd:Q47284 .\nwd:Q679023 wdt:P162|wdt:P272 wd:Q358714 .\nwd:Q679023 wdt:P58 wd:Q3772 .\nwd:Q679023 wdt:P58 wd:Q47284 .\nwd:Q679023 wdt:P58 wd:Q358714\n}",
        "questionWithBrackets": "Was [Grindhouse] written and produced by [Robert Rodriguez] , [Quentin Tarantino] , and [Eli Roth]"
    },
    {
        "questionIdx": 55529,
        "questionPatternModEntities": "Was M3 's sibling 's parent influenced by M0 , influenced by M1 , and influenced by M2",
        "questionTemplate": "Was [entity] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE] [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P1 ?x1 .\n?x1 P2 M3 .\nFILTER ( ?x1 != M3 )\n}",
        "recursionDepth": 40,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P737 wd:Q502 .\n?x0 wdt:P737 wd:Q535 .\n?x0 wdt:P737 wd:Q131149 .\n?x0 wdt:P40|wdt:P355 ?x1 .\n?x1 wdt:P3373 wd:Q3609559 .\nFILTER ( ?x1 != wd:Q3609559 )\n}",
        "questionWithBrackets": "Was [Alexandra Tolstaya] 's sibling 's parent influenced by [Stendhal] , influenced by [Victor Hugo] , and influenced by [Henry David Thoreau]"
    },
    {
        "questionIdx": 55556,
        "questionPatternModEntities": "Was M1 M0 's sibling 's parent",
        "questionTemplate": "Was [entity] [entity] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nM1 P1 ?x0\n}",
        "recursionDepth": 15,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P3373 wd:Q3911 .\nFILTER ( ?x0 != wd:Q3911 ) .\nwd:Q81179 wdt:P40|wdt:P355 ?x0\n}",
        "questionWithBrackets": "Was [Lilian, Princess of R\u00e9thy] [Albert II of Belgium] 's sibling 's parent"
    },
    {
        "questionIdx": 55558,
        "questionPatternModEntities": "Was M2 M0 's female actor 's spouse",
        "questionTemplate": "Was [entity] [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( M2 != ?x0 ) .\nM2 P2 ?x0\n}",
        "recursionDepth": 20,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P453 wd:Q222573 .\n?x0 wdt:P21 wd:Q6581072 .\nFILTER ( wd:Q192482 != ?x0 ) .\nwd:Q192482 wdt:P26 ?x0\n}",
        "questionWithBrackets": "Was [Telemachus] [femme fatale] 's female actor 's spouse"
    },
    {
        "questionIdx": 55574,
        "questionPatternModEntities": "Was M0 's prequel written by , executive produced by , and directed by M1 's parent",
        "questionTemplate": "Was [entity] 's [ROLE_SIMPLE] [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x0 P3 ?x1 .\n?x1 P4 M1\n}",
        "recursionDepth": 35,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P57 ?x1 .\n?x0 wdt:P1431 ?x1 .\n?x0 wdt:P156 wd:Q19961444 .\n?x0 wdt:P58 ?x1 .\n?x1 wdt:P40|wdt:P355 wd:Q561310\n}",
        "questionWithBrackets": "Was [Kung Fu Yoga] 's prequel written by , executive produced by , and directed by [Jaycee Chan] 's parent"
    },
    {
        "questionIdx": 55614,
        "questionPatternModEntities": "Was M4 directed and written by a male employee of M0 , M1 , and M2",
        "questionTemplate": "Was [entity] [VP_SIMPLE] and [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P1 M3 .\nM4 P2 ?x0 .\nM4 P3 ?x0\n}",
        "recursionDepth": 37,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P108 wd:Q686375 .\n?x0 wdt:P108 wd:Q3415172 .\n?x0 wdt:P108 wd:Q314407 .\n?x0 wdt:P21 wd:Q6581097 .\nwd:Q3563242 wdt:P57 ?x0 .\nwd:Q3563242 wdt:P58 ?x0\n}",
        "questionWithBrackets": "Was [You Won't Have Alsace-Lorraine] directed and written by a male employee of [Europe 1] , [RMC] , and [RFM]"
    },
    {
        "questionIdx": 55629,
        "questionPatternModEntities": "Was M0 executive produced by , directed by , and edited by M1",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1 .\nM0 P2 M1\n}",
        "recursionDepth": 27,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q854990 wdt:P57 wd:Q8006 .\nwd:Q854990 wdt:P1040 wd:Q8006 .\nwd:Q854990 wdt:P1431 wd:Q8006\n}",
        "questionWithBrackets": "Was [Kagemusha] executive produced by , directed by , and edited by [Akira Kurosawa]"
    },
    {
        "questionIdx": 55665,
        "questionPatternModEntities": "Was M1 influenced by M0 's child , influenced by M2 , and influenced by M3",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 ?x0 .\nM1 P1 M2 .\nM1 P1 M3\n}",
        "recursionDepth": 36,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P749 wd:Q458 .\nwd:Q22986077 wdt:P737 ?x0 .\nwd:Q22986077 wdt:P737 wd:Q8880 .\nwd:Q22986077 wdt:P737 wd:Q8886\n}",
        "questionWithBrackets": "Was [El Khomri law] influenced by [European Union] 's child , influenced by [European Council] , and influenced by [European Commission]"
    },
    {
        "questionIdx": 55668,
        "questionPatternModEntities": "Was M2 edited by a female spouse of M1",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M1 ) .\nM2 P2 ?x0\n}",
        "recursionDepth": 23,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P21 wd:Q6581072 .\n?x0 wdt:P26 wd:Q1252342 .\nFILTER ( ?x0 != wd:Q1252342 ) .\nwd:Q58972 wdt:P1040 ?x0\n}",
        "questionWithBrackets": "Was [Masters of the Universe] edited by a female spouse of [Douglas Hickox]"
    },
    {
        "questionIdx": 55671,
        "questionPatternModEntities": "Was M0 edited and produced by M1 and M2",
        "questionTemplate": "Was [entity] [VP_SIMPLE] and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P1 M1 .\nM0 P1 M2\n}",
        "recursionDepth": 23,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q747877 wdt:P1040 wd:Q354010 .\nwd:Q747877 wdt:P1040 wd:Q489831 .\nwd:Q747877 wdt:P162|wdt:P272 wd:Q354010 .\nwd:Q747877 wdt:P162|wdt:P272 wd:Q489831\n}",
        "questionWithBrackets": "Was [Clerks] edited and produced by [Scott Mosier] and [Kevin Smith]"
    },
    {
        "questionIdx": 55726,
        "questionPatternModEntities": "Was M1 produced by and executive produced by M0 's parent 's employee",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x1 P1 M0 .\nM1 P2 ?x0 .\nM1 P3 ?x0\n}",
        "recursionDepth": 29,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P108 ?x1 .\n?x1 wdt:P40|wdt:P355 wd:Q11822512 .\nwd:Q50969 wdt:P1431 ?x0 .\nwd:Q50969 wdt:P162|wdt:P272 ?x0\n}",
        "questionWithBrackets": "Was [Onegin] produced by and executive produced by [No label defined] 's parent 's employee"
    },
    {
        "questionIdx": 55727,
        "questionPatternModEntities": "Was M2 written by , produced by , and executive produced by M0 's male employee",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nM2 P2 ?x0 .\nM2 P3 ?x0 .\nM2 P4 ?x0\n}",
        "recursionDepth": 36,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P108 wd:Q740308 .\n?x0 wdt:P21 wd:Q6581097 .\nwd:Q391143 wdt:P1431 ?x0 .\nwd:Q391143 wdt:P162|wdt:P272 ?x0 .\nwd:Q391143 wdt:P58 ?x0\n}",
        "questionWithBrackets": "Was [Chinese Zodiac] written by , produced by , and executive produced by [UNICEF] 's male employee"
    },
    {
        "questionIdx": 55770,
        "questionPatternModEntities": "Was M4 's sequel directed and written by M0 , M1 , M2 , and M3",
        "questionTemplate": "Was [entity] 's [ROLE_SIMPLE] [VP_SIMPLE] and [VP_SIMPLE] by [entity] , [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P0 M3 .\n?x0 P1 M4 .\n?x0 P2 M0 .\n?x0 P2 M1 .\n?x0 P2 M2 .\n?x0 P2 M3\n}",
        "recursionDepth": 33,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P57 wd:Q1291210 .\n?x0 wdt:P57 wd:Q18002667 .\n?x0 wdt:P57 wd:Q4207234 .\n?x0 wdt:P57 wd:Q16198328 .\n?x0 wdt:P155 wd:Q1359366 .\n?x0 wdt:P58 wd:Q1291210 .\n?x0 wdt:P58 wd:Q18002667 .\n?x0 wdt:P58 wd:Q4207234 .\n?x0 wdt:P58 wd:Q16198328\n}",
        "questionWithBrackets": "Was [V/H/S] 's sequel directed and written by [Simon Barrett] , [Jason Eisener] , [Gareth Evans] , and [Eduardo S\u00e1nchez]"
    },
    {
        "questionIdx": 55778,
        "questionPatternModEntities": "Was M3 's sequel edited by , directed by , and written by M0 , M1 , and M2",
        "questionTemplate": "Was [entity] 's [ROLE_SIMPLE] [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P1 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\n?x0 P2 M3 .\n?x0 P3 M0 .\n?x0 P3 M1 .\n?x0 P3 M2\n}",
        "recursionDepth": 37,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P57 wd:Q1291210 .\n?x0 wdt:P57 wd:Q16198328 .\n?x0 wdt:P57 wd:Q4207234 .\n?x0 wdt:P1040 wd:Q1291210 .\n?x0 wdt:P1040 wd:Q16198328 .\n?x0 wdt:P1040 wd:Q4207234 .\n?x0 wdt:P155 wd:Q1359366 .\n?x0 wdt:P58 wd:Q1291210 .\n?x0 wdt:P58 wd:Q16198328 .\n?x0 wdt:P58 wd:Q4207234\n}",
        "questionWithBrackets": "Was [V/H/S] 's sequel edited by , directed by , and written by [Jason Eisener] , [Gareth Evans] , and [Eduardo S\u00e1nchez]"
    },
    {
        "questionIdx": 55779,
        "questionPatternModEntities": "Was M3 's sequel edited , written , and directed by M0 , M1 , and M2",
        "questionTemplate": "Was [entity] 's [ROLE_SIMPLE] [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P1 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\n?x0 P2 M3 .\n?x0 P3 M0 .\n?x0 P3 M1 .\n?x0 P3 M2\n}",
        "recursionDepth": 35,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P57 wd:Q1291210 .\n?x0 wdt:P57 wd:Q4207234 .\n?x0 wdt:P57 wd:Q16198328 .\n?x0 wdt:P1040 wd:Q1291210 .\n?x0 wdt:P1040 wd:Q4207234 .\n?x0 wdt:P1040 wd:Q16198328 .\n?x0 wdt:P155 wd:Q1359366 .\n?x0 wdt:P58 wd:Q1291210 .\n?x0 wdt:P58 wd:Q4207234 .\n?x0 wdt:P58 wd:Q16198328\n}",
        "questionWithBrackets": "Was [V/H/S] 's sequel edited , written , and directed by [Eduardo S\u00e1nchez] , [Gareth Evans] , and [Jason Eisener]"
    },
    {
        "questionIdx": 55782,
        "questionPatternModEntities": "Was M3 's sequel written by , directed by , and edited by M0 , M1 , and M2",
        "questionTemplate": "Was [entity] 's [ROLE_SIMPLE] [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P1 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\n?x0 P2 M3 .\n?x0 P3 M0 .\n?x0 P3 M1 .\n?x0 P3 M2\n}",
        "recursionDepth": 37,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P57 wd:Q1291210 .\n?x0 wdt:P57 wd:Q4207234 .\n?x0 wdt:P57 wd:Q16198328 .\n?x0 wdt:P1040 wd:Q1291210 .\n?x0 wdt:P1040 wd:Q4207234 .\n?x0 wdt:P1040 wd:Q16198328 .\n?x0 wdt:P155 wd:Q1359366 .\n?x0 wdt:P58 wd:Q1291210 .\n?x0 wdt:P58 wd:Q4207234 .\n?x0 wdt:P58 wd:Q16198328\n}",
        "questionWithBrackets": "Was [V/H/S] 's sequel written by , directed by , and edited by [Eduardo S\u00e1nchez] , [Jason Eisener] , and [Gareth Evans]"
    },
    {
        "questionIdx": 55807,
        "questionPatternModEntities": "Was M0 written by and directed by M1 , M2 , and M3",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by and [VP_SIMPLE] by [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P0 M3 .\nM0 P1 M1 .\nM0 P1 M2 .\nM0 P1 M3\n}",
        "recursionDepth": 27,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q1079 wdt:P57 wd:Q4500 .\nwd:Q1079 wdt:P57 wd:Q7407299 .\nwd:Q1079 wdt:P57 wd:Q5542223 .\nwd:Q1079 wdt:P58 wd:Q4500 .\nwd:Q1079 wdt:P58 wd:Q7407299 .\nwd:Q1079 wdt:P58 wd:Q5542223\n}",
        "questionWithBrackets": "Was [Breaking Bad] written by and directed by [Sam Catlin] , [Vince Gilligan] , and [George Mastras]"
    },
    {
        "questionIdx": 55810,
        "questionPatternModEntities": "Was M0 's prequel directed by and edited by M1 , M2 , M3 , and M4",
        "questionTemplate": "Was [entity] 's [ROLE_SIMPLE] [VP_SIMPLE] by and [VP_SIMPLE] by [entity] , [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\n?x0 P1 M3 .\n?x0 P1 M4 .\n?x0 P2 M1 .\n?x0 P2 M2 .\n?x0 P2 M3 .\n?x0 P2 M4\n}",
        "recursionDepth": 34,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P57 wd:Q1291210 .\n?x0 wdt:P57 wd:Q4679987 .\n?x0 wdt:P57 wd:Q4207234 .\n?x0 wdt:P57 wd:Q16198328 .\n?x0 wdt:P1040 wd:Q1291210 .\n?x0 wdt:P1040 wd:Q4679987 .\n?x0 wdt:P1040 wd:Q4207234 .\n?x0 wdt:P1040 wd:Q16198328 .\n?x0 wdt:P156 wd:Q17183987\n}",
        "questionWithBrackets": "Was [V/H/S: Viral] 's prequel directed by and edited by [Gareth Evans] , [Eduardo S\u00e1nchez] , [Adam Wingard] , and [Jason Eisener]"
    },
    {
        "questionIdx": 55811,
        "questionPatternModEntities": "Was M0 's prequel edited and written by M1 , M2 , M3 , and M4",
        "questionTemplate": "Was [entity] 's [ROLE_SIMPLE] [VP_SIMPLE] and [VP_SIMPLE] by [entity] , [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\n?x0 P1 M3 .\n?x0 P1 M4 .\n?x0 P2 M1 .\n?x0 P2 M2 .\n?x0 P2 M3 .\n?x0 P2 M4\n}",
        "recursionDepth": 33,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P1040 wd:Q5658534 .\n?x0 wdt:P1040 wd:Q4022902 .\n?x0 wdt:P1040 wd:Q4023328 .\n?x0 wdt:P1040 wd:Q5836844 .\n?x0 wdt:P156 wd:Q18207699 .\n?x0 wdt:P58 wd:Q5658534 .\n?x0 wdt:P58 wd:Q4022902 .\n?x0 wdt:P58 wd:Q4023328 .\n?x0 wdt:P58 wd:Q5836844\n}",
        "questionWithBrackets": "Was [ABCs of Death 2] 's prequel edited and written by [Y\u016bdai Yamaguchi] , [Adri\u00e1n Garc\u00eda Bogliano] , [Ernesto D\u00edaz Espinoza] , and [Yoshihiro Nishimura]"
    },
    {
        "questionIdx": 55899,
        "questionPatternModEntities": "Was M0 directed by M5 , M6 , and M7 , written by M1 , M2 , and M3 , and edited by M4",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] , [entity] , and [entity] , [VP_SIMPLE] by [entity] , [entity] , and [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P0 M3 .\nM0 P1 M4 .\nM0 P2 M5 .\nM0 P2 M6 .\nM0 P2 M7\n}",
        "recursionDepth": 46,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q603857 wdt:P57 wd:Q55215 .\nwd:Q603857 wdt:P57 wd:Q44221 .\nwd:Q603857 wdt:P57 wd:Q113628 .\nwd:Q603857 wdt:P1040 wd:Q55211 .\nwd:Q603857 wdt:P58 wd:Q1764766 .\nwd:Q603857 wdt:P58 wd:Q432709 .\nwd:Q603857 wdt:P58 wd:Q55238\n}",
        "questionWithBrackets": "Was [11'09\"01 September 11] directed by [Idrissa Ou\u00e9draogo] , [Sean Penn] , and [Alejandro Gonz\u00e1lez I\u00f1\u00e1rritu] , written by [Samira Makhmalbaf] , [Pierre Uytterhoeven] , and [Ken Loach] , and edited by [Mohsen Makhmalbaf]"
    },
    {
        "questionIdx": 55907,
        "questionPatternModEntities": "Was M1 's sequel 's sequel written by and executive produced by M0",
        "questionTemplate": "Was [entity] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE] [VP_SIMPLE] by and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M0 .\n?x0 P2 ?x1 .\n?x1 P2 M1\n}",
        "recursionDepth": 29,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P1431 wd:Q36970 .\n?x0 wdt:P155 ?x1 .\n?x0 wdt:P58 wd:Q36970 .\n?x1 wdt:P155 wd:Q1199513\n}",
        "questionWithBrackets": "Was [Armour of God] 's sequel 's sequel written by and executive produced by [Jackie Chan]"
    },
    {
        "questionIdx": 55940,
        "questionPatternModEntities": "Was M1 directed by a employee of M0",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 ?x0\n}",
        "recursionDepth": 18,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P108 wd:Q141336 .\nwd:Q125772 wdt:P57 ?x0\n}",
        "questionWithBrackets": "Was [Solaris] directed by a employee of [Mosfilm]"
    },
    {
        "questionIdx": 55943,
        "questionPatternModEntities": "Was M0 M3 's French German spouse",
        "questionTemplate": "Was [entity] [entity] 's [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\nFILTER ( M0 != M3 ) .\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P1 M3\n}",
        "recursionDepth": 21,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nFILTER ( wd:Q61449 != wd:Q454297 ) .\nwd:Q61449 wdt:P27 wd:Q183 .\nwd:Q61449 wdt:P27 wd:Q142 .\nwd:Q61449 wdt:P26 wd:Q454297\n}",
        "questionWithBrackets": "Was [Princess Victoria of Saxe-Coburg and Gotha] [Prince Louis, Duke of Nemours] 's French German spouse"
    },
    {
        "questionIdx": 55956,
        "questionPatternModEntities": "Was M0 's prequel distributed by M1 , M2 , M3 , and M4",
        "questionTemplate": "Was [entity] 's [ROLE_SIMPLE] [VP_SIMPLE] by [entity] , [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\n?x0 P1 M3 .\n?x0 P1 M4\n}",
        "recursionDepth": 26,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P750 wd:Q866 .\n?x0 wdt:P750 wd:Q689141 .\n?x0 wdt:P750 wd:Q4740860 .\n?x0 wdt:P750 wd:Q3884 .\n?x0 wdt:P156 wd:Q72303901\n}",
        "questionWithBrackets": "Was [Kill My Mind] 's prequel distributed by [Amazon Music] , [YouTube] , [Amazon] , and [Spotify]"
    },
    {
        "questionIdx": 56018,
        "questionPatternModEntities": "Was M0 's male sibling influenced by M1 and M2 and influenced by M3",
        "questionTemplate": "Was [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] [VP_SIMPLE] by [entity] and [entity] and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\n?x0 P1 M3 .\n?x0 P2 M4 .\nFILTER ( ?x0 != M0 )\n}",
        "recursionDepth": 36,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P737 wd:Q692 .\n?x0 wdt:P737 wd:Q79822 .\n?x0 wdt:P737 wd:Q5682 .\n?x0 wdt:P21 wd:Q6581097 .\n?x0 wdt:P3373 wd:Q4167253 .\nFILTER ( ?x0 != wd:Q4167253 )\n}",
        "questionWithBrackets": "Was [Mikhail Dostoyevsky] 's male sibling influenced by [William Shakespeare] and [Miguel de Cervantes] and influenced by [Adam Mickiewicz]"
    },
    {
        "questionIdx": 56040,
        "questionPatternModEntities": "Was M0 M1 's French Canadian male sibling",
        "questionTemplate": "Was [entity] [entity] 's [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\nFILTER ( M0 != M1 ) .\nM0 P0 M1 .\nM0 P1 M2 .\nM0 P1 M3 .\nM0 P2 M4\n}",
        "recursionDepth": 26,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nFILTER ( wd:Q55250 != wd:Q3159315 ) .\nwd:Q55250 wdt:P21 wd:Q6581097 .\nwd:Q55250 wdt:P27 wd:Q16 .\nwd:Q55250 wdt:P27 wd:Q142 .\nwd:Q55250 wdt:P3373 wd:Q3159315\n}",
        "questionWithBrackets": "Was [Pierre Le Moyne d'Iberville] [Jacques le Moyne de Sainte-H\u00e9l\u00e8ne] 's French Canadian male sibling"
    },
    {
        "questionIdx": 56150,
        "questionPatternModEntities": "Was M0 influenced by M1 , influenced by M2 , and influenced by M3",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P0 M3\n}",
        "recursionDepth": 32,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q9358 wdt:P737 wd:Q692 .\nwd:Q9358 wdt:P737 wd:Q859 .\nwd:Q9358 wdt:P737 wd:Q502\n}",
        "questionWithBrackets": "Was [Friedrich Nietzsche] influenced by [Stendhal] , influenced by [Plato] , and influenced by [William Shakespeare]"
    },
    {
        "questionIdx": 56174,
        "questionPatternModEntities": "Was M1 influenced by M2 , influenced by M3 , influenced by M0 's employee , and influenced by M4",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 ?x0 .\nM1 P1 M2 .\nM1 P1 M3 .\nM1 P1 M4\n}",
        "recursionDepth": 45,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P108 wd:Q615681 .\nwd:Q255 wdt:P737 ?x0 .\nwd:Q255 wdt:P737 wd:Q1339 .\nwd:Q255 wdt:P737 wd:Q311378 .\nwd:Q255 wdt:P737 wd:Q7349\n}",
        "questionWithBrackets": "Was [Ludwig van Beethoven] influenced by [Johann Sebastian Bach] , influenced by [Joseph Haydn] , influenced by [Count Hieronymus von Colloredo] 's employee , and influenced by [Johann Joseph Fux]"
    },
    {
        "questionIdx": 56218,
        "questionPatternModEntities": "Was M2 influenced by M3 and M4 and influenced by a Mexican spouse of M1",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] and [entity] and [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M1 ) .\nM2 P2 ?x0 .\nM2 P2 M3 .\nM2 P2 M4\n}",
        "recursionDepth": 38,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P27 wd:Q96 .\n?x0 wdt:P26 wd:Q63894324 .\nFILTER ( ?x0 != wd:Q63894324 ) .\nwd:Q61754914 wdt:P737 ?x0 .\nwd:Q61754914 wdt:P737 wd:Q326939 .\nwd:Q61754914 wdt:P737 wd:Q73035\n}",
        "questionWithBrackets": "Was [Max Marin] influenced by [Paul Rodriguez] and [George Lopez] and influenced by a Mexican spouse of [Alix Bailey]"
    },
    {
        "questionIdx": 56242,
        "questionPatternModEntities": "Was M2 influenced by M0 's American employee , influenced by M3 , influenced by M4 , and influenced by M5",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] , [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nM2 P2 ?x0 .\nM2 P2 M3 .\nM2 P2 M4 .\nM2 P2 M5\n}",
        "recursionDepth": 50,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P108 wd:Q131252 .\n?x0 wdt:P27 wd:Q30 .\nwd:Q69358316 wdt:P737 ?x0 .\nwd:Q69358316 wdt:P737 wd:Q76 .\nwd:Q69358316 wdt:P737 wd:Q311147 .\nwd:Q69358316 wdt:P737 wd:Q104905452\n}",
        "questionWithBrackets": "Was [Birane Hane] influenced by [University of Chicago] 's American employee , influenced by [Barack Obama] , influenced by [Robert Kiyosaki] , and influenced by [Tidjane Hane]"
    },
    {
        "questionIdx": 56246,
        "questionPatternModEntities": "Was M4 influenced by M5 and influenced by a female American employee of M0 and M1",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] and [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P1 M2 .\n?x0 P2 M3 .\nM4 P3 ?x0 .\nM4 P3 M5\n}",
        "recursionDepth": 43,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P108 wd:Q51929447 .\n?x0 wdt:P108 wd:Q392667 .\n?x0 wdt:P21 wd:Q6581072 .\n?x0 wdt:P27 wd:Q30 .\nwd:Q55800 wdt:P737 ?x0 .\nwd:Q55800 wdt:P737 wd:Q3131983\n}",
        "questionWithBrackets": "Was [Oprah Winfrey] influenced by [Marianne Williamson] and influenced by a female American employee of [Wake Forest University] and [third-person singular]"
    },
    {
        "questionIdx": 56254,
        "questionPatternModEntities": "Was M2 influenced by M0 's German employee , influenced by M3 and M4 , and influenced by M5",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] , [VP_SIMPLE] by [entity] and [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nM2 P2 ?x0 .\nM2 P2 M3 .\nM2 P2 M4 .\nM2 P2 M5\n}",
        "recursionDepth": 45,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P108 wd:Q312578 .\n?x0 wdt:P27 wd:Q183 .\nwd:Q10742768 wdt:P737 ?x0 .\nwd:Q10742768 wdt:P737 wd:Q104919 .\nwd:Q10742768 wdt:P737 wd:Q7351 .\nwd:Q10742768 wdt:P737 wd:Q7023137\n}",
        "questionWithBrackets": "Was [No label defined] influenced by [University of Music and Theatre Leipzig] 's German employee , influenced by [Gabriel Faur\u00e9] and [Nguy\u1ec5n V\u0103n Th\u01b0\u01a1ng] , and influenced by [Robert Schumann]"
    },
    {
        "questionIdx": 56269,
        "questionPatternModEntities": "Was M2 influenced by a German spouse of M1 and influenced by M3 , M4 , and M5",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] and [VP_SIMPLE] by [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M1 ) .\nM2 P2 ?x0 .\nM2 P2 M3 .\nM2 P2 M4 .\nM2 P2 M5\n}",
        "recursionDepth": 41,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P27 wd:Q183 .\n?x0 wdt:P26 wd:Q695722 .\nFILTER ( ?x0 != wd:Q695722 ) .\nwd:Q505296 wdt:P737 ?x0 .\nwd:Q505296 wdt:P737 wd:Q7231 .\nwd:Q505296 wdt:P737 wd:Q83003 .\nwd:Q505296 wdt:P737 wd:Q1394\n}",
        "questionWithBrackets": "Was [Nikos Poulantzas] influenced by a German spouse of [Julian Marchlewski] and influenced by [Rosa Luxemburg] , [Antonio Gramsci] , and [Vladimir Lenin]"
    },
    {
        "questionIdx": 56290,
        "questionPatternModEntities": "Was M2 influenced by a sibling of M0 's Dutch sibling and influenced by M3 and M4",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x1 P0 M0 .\n?x1 P1 M1 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x1 != M0 ) .\nM2 P2 ?x0 .\nM2 P2 M3 .\nM2 P2 M4\n}",
        "recursionDepth": 42,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P3373 ?x1 .\n?x1 wdt:P27 wd:Q29999 .\n?x1 wdt:P3373 wd:Q4583 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x1 != wd:Q4583 ) .\nwd:Q187019 wdt:P737 ?x0 .\nwd:Q187019 wdt:P737 wd:Q991 .\nwd:Q187019 wdt:P737 wd:Q905\n}",
        "questionWithBrackets": "Was [Philip Roth] influenced by a sibling of [Anne Frank] 's Dutch sibling and influenced by [Fyodor Dostoyevsky] and [Franz Kafka]"
    },
    {
        "questionIdx": 56291,
        "questionPatternModEntities": "Was M2 influenced by a sibling of M1 and influenced by M0 's spouse",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity] and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x1 P1 M1 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x1 != M1 ) .\nM2 P2 ?x0 .\nM2 P2 ?x1\n}",
        "recursionDepth": 33,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P26 wd:Q84464 .\n?x1 wdt:P3373 wd:Q157928 .\nFILTER ( ?x0 != wd:Q84464 ) .\nFILTER ( ?x1 != wd:Q157928 ) .\nwd:Q7294 wdt:P737 ?x0 .\nwd:Q7294 wdt:P737 ?x1\n}",
        "questionWithBrackets": "Was [Johannes Brahms] influenced by a sibling of [Anna Mozart] and influenced by [Constanze Mozart] 's spouse"
    },
    {
        "questionIdx": 56331,
        "questionPatternModEntities": "Was M2 produced and executive produced by a Spanish spouse of M1",
        "questionTemplate": "Was [entity] [VP_SIMPLE] and [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M1 ) .\nM2 P2 ?x0 .\nM2 P3 ?x0\n}",
        "recursionDepth": 31,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P27 wd:Q29 .\n?x0 wdt:P26 wd:Q18206431 .\nFILTER ( ?x0 != wd:Q18206431 ) .\nwd:Q590308 wdt:P1431 ?x0 .\nwd:Q590308 wdt:P162|wdt:P272 ?x0\n}",
        "questionWithBrackets": "Was [The Other Conquest] produced and executive produced by a Spanish spouse of [Marta Domingo]"
    },
    {
        "questionIdx": 56385,
        "questionPatternModEntities": "Was M0 edited , directed , written , and produced by M1",
        "questionTemplate": "Was [entity] [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1 .\nM0 P2 M1 .\nM0 P3 M1\n}",
        "recursionDepth": 29,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q854990 wdt:P57 wd:Q8006 .\nwd:Q854990 wdt:P1040 wd:Q8006 .\nwd:Q854990 wdt:P162|wdt:P272 wd:Q8006 .\nwd:Q854990 wdt:P58 wd:Q8006\n}",
        "questionWithBrackets": "Was [Kagemusha] edited , directed , written , and produced by [Akira Kurosawa]"
    },
    {
        "questionIdx": 56413,
        "questionPatternModEntities": "Was M0 executive produced , produced , written , directed , and edited by M1",
        "questionTemplate": "Was [entity] [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1 .\nM0 P2 M1 .\nM0 P3 M1 .\nM0 P4 M1\n}",
        "recursionDepth": 35,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q17738 wdt:P57 wd:Q38222 .\nwd:Q17738 wdt:P1040 wd:Q38222 .\nwd:Q17738 wdt:P1431 wd:Q38222 .\nwd:Q17738 wdt:P162|wdt:P272 wd:Q38222 .\nwd:Q17738 wdt:P58 wd:Q38222\n}",
        "questionWithBrackets": "Was [Star Wars: Episode IV \u2013 A New Hope] executive produced , produced , written , directed , and edited by [George Lucas]"
    },
    {
        "questionIdx": 56417,
        "questionPatternModEntities": "Was M0 directed , edited , and produced by M1",
        "questionTemplate": "Was [entity] [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1 .\nM0 P2 M1\n}",
        "recursionDepth": 24,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q590570 wdt:P57 wd:Q25186 .\nwd:Q590570 wdt:P1040 wd:Q25186 .\nwd:Q590570 wdt:P162|wdt:P272 wd:Q25186\n}",
        "questionWithBrackets": "Was [Mala Noche] directed , edited , and produced by [Gus Van Sant]"
    },
    {
        "questionIdx": 56422,
        "questionPatternModEntities": "Was M0 written by M1 , edited by M6 and M7 , and written by M2 , M3 , M4 , and M5",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] and [entity] , and [VP_SIMPLE] by [entity] , [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P0 M3 .\nM0 P0 M4 .\nM0 P0 M5 .\nM0 P1 M6 .\nM0 P1 M7\n}",
        "recursionDepth": 46,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q603857 wdt:P1040 wd:Q55211 .\nwd:Q603857 wdt:P1040 wd:Q22074634 .\nwd:Q603857 wdt:P58 wd:Q11289113 .\nwd:Q603857 wdt:P58 wd:Q295093 .\nwd:Q603857 wdt:P58 wd:Q113628 .\nwd:Q603857 wdt:P58 wd:Q312611 .\nwd:Q603857 wdt:P58 wd:Q44221\n}",
        "questionWithBrackets": "Was [11'09\"01 September 11] written by [Vladimir Vega] , edited by [Mohsen Makhmalbaf] and [Robert Duffy] , and written by [Idrissa Ou\u00e9draogo] , [Sean Penn] , [Claude Lelouch] , and [Youssef Chahine]"
    },
    {
        "questionIdx": 56432,
        "questionPatternModEntities": "Was M2 M0 's Japanese sibling 's sibling",
        "questionTemplate": "Was [entity] [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( M2 != ?x0 ) .\nM2 P0 ?x0\n}",
        "recursionDepth": 20,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P27 wd:Q17 .\n?x0 wdt:P3373 wd:Q11455081 .\nFILTER ( ?x0 != wd:Q11455081 ) .\nFILTER ( wd:Q83075302 != ?x0 ) .\nwd:Q83075302 wdt:P3373 ?x0\n}",
        "questionWithBrackets": "Was [Toshi Miyazawa] [Seiroku Miyazawa] 's Japanese sibling 's sibling"
    },
    {
        "questionIdx": 56436,
        "questionPatternModEntities": "Was M0 Mexican",
        "questionTemplate": "Was [entity] [ADJECTIVE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1\n}",
        "recursionDepth": 9,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q71941 wdt:P27 wd:Q96\n}LIMIT 1",
        "questionWithBrackets": "Was [Salvador de Iturbide y Marz\u00e1n] Mexican"
    },
    {
        "questionIdx": 56572,
        "questionPatternModEntities": "Was M0 M1 's male French Canadian sibling",
        "questionTemplate": "Was [entity] [entity] 's [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\nFILTER ( M0 != M1 ) .\nM0 P0 M1 .\nM0 P1 M2 .\nM0 P1 M3 .\nM0 P2 M4\n}",
        "recursionDepth": 26,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nFILTER ( wd:Q55250 != wd:Q3159315 ) .\nwd:Q55250 wdt:P21 wd:Q6581097 .\nwd:Q55250 wdt:P27 wd:Q16 .\nwd:Q55250 wdt:P27 wd:Q142 .\nwd:Q55250 wdt:P3373 wd:Q3159315\n}",
        "questionWithBrackets": "Was [Pierre Le Moyne d'Iberville] [Jacques le Moyne de Sainte-H\u00e9l\u00e8ne] 's male French Canadian sibling"
    },
    {
        "questionIdx": 56605,
        "questionPatternModEntities": "Was M4 M3 's female French British spouse 's sibling",
        "questionTemplate": "Was [entity] [entity] 's [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P1 M2 .\n?x0 P2 M3 .\nFILTER ( ?x0 != M3 ) .\nFILTER ( M4 != ?x0 ) .\nM4 P3 ?x0\n}",
        "recursionDepth": 30,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P21 wd:Q6581072 .\n?x0 wdt:P27 wd:Q145 .\n?x0 wdt:P27 wd:Q142 .\n?x0 wdt:P26 wd:Q16193278 .\nFILTER ( ?x0 != wd:Q16193278 ) .\nFILTER ( wd:Q466957 != ?x0 ) .\nwd:Q466957 wdt:P3373 ?x0\n}",
        "questionWithBrackets": "Was [Serena Scott Thomas] [Fran\u00e7ois Olivennes] 's female French British spouse 's sibling"
    },
    {
        "questionIdx": 56616,
        "questionPatternModEntities": "Was M1 's actor M0",
        "questionTemplate": "Was [entity] 's [ROLE_SIMPLE] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1\n}",
        "recursionDepth": 11,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q29772 wdt:P453 wd:Q905926\n}",
        "questionWithBrackets": "Was [Protoss] 's actor [Jang Min Chul]"
    },
    {
        "questionIdx": 56630,
        "questionPatternModEntities": "Was M1 M0 's spouse 's French Dutch spouse",
        "questionTemplate": "Was [entity] [entity] 's [ROLE_SIMPLE] 's [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( M1 != ?x0 ) .\nM1 P0 ?x0 .\nM1 P1 M2 .\nM1 P1 M3\n}",
        "recursionDepth": 25,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P26 wd:Q521115 .\nFILTER ( ?x0 != wd:Q521115 ) .\nFILTER ( wd:Q69776 != ?x0 ) .\nwd:Q69776 wdt:P27 wd:Q29999 .\nwd:Q69776 wdt:P27 wd:Q142 .\nwd:Q69776 wdt:P26 ?x0\n}",
        "questionWithBrackets": "Was [Germaine Krull] [Marceline Loridan-Ivens] 's spouse 's French Dutch spouse"
    },
    {
        "questionIdx": 56673,
        "questionPatternModEntities": "Was M1 executive produced by M2 , directed by M4 , executive produced by M3 , and executive produced by M0 's child",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 ?x0 .\nM1 P1 M2 .\nM1 P1 M3 .\nM1 P2 M4\n}",
        "recursionDepth": 48,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P749 wd:Q20937928 .\nwd:Q738526 wdt:P57 wd:Q352030 .\nwd:Q738526 wdt:P1431 ?x0 .\nwd:Q738526 wdt:P1431 wd:Q299419 .\nwd:Q738526 wdt:P1431 wd:Q790756\n}",
        "questionWithBrackets": "Was [Closely Watched Trains] executive produced by [Carlo Ponti] , directed by [Ji\u0159\u00ed Menzel] , executive produced by [Barrandov Studios] , and executive produced by [Moravia Steel] 's child"
    },
    {
        "questionIdx": 56709,
        "questionPatternModEntities": "Was M0 written by M1 , edited by M3 , M4 , M5 , M6 , and M7 , and written by M2",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , [entity] , [entity] , [entity] , and [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P1 M3 .\nM0 P1 M4 .\nM0 P1 M5 .\nM0 P1 M6 .\nM0 P1 M7\n}",
        "recursionDepth": 45,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q603857 wdt:P1040 wd:Q55211 .\nwd:Q603857 wdt:P1040 wd:Q541826 .\nwd:Q603857 wdt:P1040 wd:Q18021284 .\nwd:Q603857 wdt:P1040 wd:Q22074634 .\nwd:Q603857 wdt:P1040 wd:Q55215 .\nwd:Q603857 wdt:P58 wd:Q474262 .\nwd:Q603857 wdt:P58 wd:Q44221\n}",
        "questionWithBrackets": "Was [11'09\"01 September 11] written by [Sean Penn] , edited by [Jonathan Morris] , [Alejandro Gonz\u00e1lez I\u00f1\u00e1rritu] , [Mohsen Makhmalbaf] , [Jay Cassidy] , and [Robert Duffy] , and written by [Amos Gitai]"
    },
    {
        "questionIdx": 56725,
        "questionPatternModEntities": "Was M2 's Italian spouse employed by M0",
        "questionTemplate": "Was [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P2 M2 .\nFILTER ( ?x0 != M2 )\n}",
        "recursionDepth": 21,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P108 wd:Q209344 .\n?x0 wdt:P27 wd:Q38 .\n?x0 wdt:P26 wd:Q55964 .\nFILTER ( ?x0 != wd:Q55964 )\n}",
        "questionWithBrackets": "Was [Anna L\u00f6wenstein] 's Italian spouse employed by [Sapienza University of Rome]"
    },
    {
        "questionIdx": 56749,
        "questionPatternModEntities": "Was M0 employed by M1 , employed by M2 , and employed by M3",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P0 M3\n}",
        "recursionDepth": 32,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q507469 wdt:P108 wd:Q95 .\nwd:Q507469 wdt:P108 wd:Q312 .\nwd:Q507469 wdt:P108 wd:Q956568\n}",
        "questionWithBrackets": "Was [Guy Kawasaki] employed by [Google] , employed by [Apple Inc.] , and employed by [Forbes]"
    },
    {
        "questionIdx": 56761,
        "questionPatternModEntities": "Was M2 influenced by a French sibling of M1 's spouse",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x0 P1 M0 .\n?x1 P2 M1 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x1 != M1 ) .\nM2 P3 ?x0\n}",
        "recursionDepth": 27,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P27 wd:Q142 .\n?x0 wdt:P3373 ?x1 .\n?x1 wdt:P26 wd:Q17148576 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x1 != wd:Q17148576 ) .\nwd:Q34189 wdt:P737 ?x0\n}",
        "questionWithBrackets": "Was [Pablo Neruda] influenced by a French sibling of [Vitalie Rimbaud] 's spouse"
    },
    {
        "questionIdx": 56768,
        "questionPatternModEntities": "Was M0 's female American sibling influenced by M1",
        "questionTemplate": "Was [entity] 's [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P2 M2 .\n?x0 P3 M3 .\nFILTER ( ?x0 != M0 )\n}",
        "recursionDepth": 26,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P737 wd:Q692 .\n?x0 wdt:P21 wd:Q6581072 .\n?x0 wdt:P27 wd:Q30 .\n?x0 wdt:P3373 wd:Q6372006 .\nFILTER ( ?x0 != wd:Q6372006 )\n}",
        "questionWithBrackets": "Was [Karl Kroeber] 's female American sibling influenced by [William Shakespeare]"
    },
    {
        "questionIdx": 56778,
        "questionPatternModEntities": "Was M0 a Italian spouse of M2",
        "questionTemplate": "Was [entity] a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nFILTER ( M0 != M2 ) .\nM0 P0 M1 .\nM0 P1 M2\n}",
        "recursionDepth": 18,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nFILTER ( wd:Q26252 != wd:Q493492 ) .\nwd:Q26252 wdt:P27 wd:Q38 .\nwd:Q26252 wdt:P26 wd:Q493492\n}",
        "questionWithBrackets": "Was [Francesca Bortolozzi] a Italian spouse of [Andrea Borella]"
    },
    {
        "questionIdx": 56782,
        "questionPatternModEntities": "Was M0 a male Mexican Spanish sibling of M1",
        "questionTemplate": "Was [entity] a [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nFILTER ( M0 != M1 ) .\nM0 P0 M1 .\nM0 P1 M2 .\nM0 P1 M3 .\nM0 P2 M4\n}",
        "recursionDepth": 28,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nFILTER ( wd:Q17492 != wd:Q562337 ) .\nwd:Q17492 wdt:P21 wd:Q6581097 .\nwd:Q17492 wdt:P27 wd:Q29 .\nwd:Q17492 wdt:P27 wd:Q96 .\nwd:Q17492 wdt:P3373 wd:Q562337\n}",
        "questionWithBrackets": "Was [Jonathan dos Santos] a male Mexican Spanish sibling of [Giovani dos Santos]"
    },
    {
        "questionIdx": 56817,
        "questionPatternModEntities": "Was M0 a female American sibling of M1",
        "questionTemplate": "Was [entity] a [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nFILTER ( M0 != M1 ) .\nM0 P0 M1 .\nM0 P1 M2 .\nM0 P2 M3\n}",
        "recursionDepth": 23,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nFILTER ( wd:Q131324 != wd:Q2831 ) .\nwd:Q131324 wdt:P21 wd:Q6581072 .\nwd:Q131324 wdt:P27 wd:Q30 .\nwd:Q131324 wdt:P3373 wd:Q2831\n}",
        "questionWithBrackets": "Was [Janet Jackson] a female American sibling of [Michael Jackson]"
    },
    {
        "questionIdx": 56823,
        "questionPatternModEntities": "Was M4 M3 's male French Italian spouse 's parent",
        "questionTemplate": "Was [entity] [entity] 's [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P1 M2 .\n?x0 P2 M3 .\nFILTER ( ?x0 != M3 ) .\nM4 P3 ?x0\n}",
        "recursionDepth": 30,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P21 wd:Q6581097 .\n?x0 wdt:P27 wd:Q38 .\n?x0 wdt:P27 wd:Q142 .\n?x0 wdt:P26 wd:Q2939617 .\nFILTER ( ?x0 != wd:Q2939617 ) .\nwd:Q703780 wdt:P40|wdt:P355 ?x0\n}",
        "questionWithBrackets": "Was [Infante Jaime, Duke of Segovia] [Mar\u00eda del Carmen Mart\u00ednez-Bordi\u00fa y Franco] 's male French Italian spouse 's parent"
    },
    {
        "questionIdx": 56856,
        "questionPatternModEntities": "Was M0 executive produced by M1 and M2",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2\n}",
        "recursionDepth": 17,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q102244 wdt:P1431 wd:Q75079 .\nwd:Q102244 wdt:P1431 wd:Q975579\n}",
        "questionWithBrackets": "Was [Harry Potter and the Chamber of Secrets] executive produced by [Chris Columbus] and [David Barron]"
    },
    {
        "questionIdx": 57017,
        "questionPatternModEntities": "Was M0 produced , written , and edited by M1",
        "questionTemplate": "Was [entity] [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1 .\nM0 P2 M1\n}",
        "recursionDepth": 24,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q590570 wdt:P1040 wd:Q25186 .\nwd:Q590570 wdt:P162|wdt:P272 wd:Q25186 .\nwd:Q590570 wdt:P58 wd:Q25186\n}",
        "questionWithBrackets": "Was [Mala Noche] produced , written , and edited by [Gus Van Sant]"
    },
    {
        "questionIdx": 57044,
        "questionPatternModEntities": "Was M0 directed and written by M1",
        "questionTemplate": "Was [entity] [VP_SIMPLE] and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1\n}",
        "recursionDepth": 19,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q1068968 wdt:P57 wd:Q882 .\nwd:Q1068968 wdt:P58 wd:Q882\n}",
        "questionWithBrackets": "Was [A King in New York] directed and written by [Charlie Chaplin]"
    },
    {
        "questionIdx": 57066,
        "questionPatternModEntities": "Was M0 M1 's American British Canadian employee",
        "questionTemplate": "Was [entity] [entity] 's [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M2 .\nM0 P1 M3 .\nM0 P1 M4\n}",
        "recursionDepth": 26,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q8006709 wdt:P108 wd:Q76039 .\nwd:Q8006709 wdt:P27 wd:Q145 .\nwd:Q8006709 wdt:P27 wd:Q30 .\nwd:Q8006709 wdt:P27 wd:Q16\n}",
        "questionWithBrackets": "Was [William Charles] [Hudson's Bay Company] 's American British Canadian employee"
    },
    {
        "questionIdx": 57067,
        "questionPatternModEntities": "Was M0 a Canadian British employee of M1",
        "questionTemplate": "Was [entity] a [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M2 .\nM0 P1 M3\n}",
        "recursionDepth": 23,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q48979 wdt:P108 wd:Q1045828 .\nwd:Q48979 wdt:P27 wd:Q145 .\nwd:Q48979 wdt:P27 wd:Q16\n}",
        "questionWithBrackets": "Was [Richard Laurence Millington Synge] a Canadian British employee of [University of East Anglia]"
    },
    {
        "questionIdx": 57117,
        "questionPatternModEntities": "Was M0 executive produced by , directed by , and produced by M1",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1 .\nM0 P2 M1\n}",
        "recursionDepth": 27,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q221102 wdt:P57 wd:Q134867 .\nwd:Q221102 wdt:P1431 wd:Q134867 .\nwd:Q221102 wdt:P162|wdt:P272 wd:Q134867\n}",
        "questionWithBrackets": "Was [28 Weeks Later] executive produced by , directed by , and produced by [Danny Boyle]"
    },
    {
        "questionIdx": 57126,
        "questionPatternModEntities": "Was M0 's Chinese employee employed by M1 and M2 and employed by M3",
        "questionTemplate": "Was [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] [VP_SIMPLE] by [entity] and [entity] and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P0 M3 .\n?x0 P1 M4\n}",
        "recursionDepth": 36,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P108 wd:Q1065 .\n?x0 wdt:P108 wd:Q2303626 .\n?x0 wdt:P108 wd:Q7817 .\n?x0 wdt:P108 wd:Q15164 .\n?x0 wdt:P27 wd:Q148\n}",
        "questionWithBrackets": "Was [Department of Health] 's Chinese employee employed by [United Nations] and [Government of Hong Kong] and employed by [World Health Organization]"
    },
    {
        "questionIdx": 57185,
        "questionPatternModEntities": "Was M2 executive produced by M1 's male spouse",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M1 ) .\nM2 P2 ?x0\n}",
        "recursionDepth": 22,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P21 wd:Q6581097 .\n?x0 wdt:P26 wd:Q175913 .\nFILTER ( ?x0 != wd:Q175913 ) .\nwd:Q480696 wdt:P1431 ?x0\n}",
        "questionWithBrackets": "Was [The Great King] executive produced by [Kristina S\u00f6derbaum] 's male spouse"
    },
    {
        "questionIdx": 57192,
        "questionPatternModEntities": "Was M1 's British employee M0",
        "questionTemplate": "Was [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M2\n}",
        "recursionDepth": 16,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q11626 wdt:P108 wd:Q76473 .\nwd:Q11626 wdt:P27 wd:Q145\n}",
        "questionWithBrackets": "Was [University of Southampton] 's British employee [Wendy Hall]"
    },
    {
        "questionIdx": 57204,
        "questionPatternModEntities": "Was M0 directed , written , and produced by M1",
        "questionTemplate": "Was [entity] [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1 .\nM0 P2 M1\n}",
        "recursionDepth": 24,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q826678 wdt:P57 wd:Q6096 .\nwd:Q826678 wdt:P162|wdt:P272 wd:Q6096 .\nwd:Q826678 wdt:P58 wd:Q6096\n}",
        "questionWithBrackets": "Was [Snoop Dogg's Hustlaz: Diary of a Pimp] directed , written , and produced by [Snoop Dogg]"
    },
    {
        "questionIdx": 57210,
        "questionPatternModEntities": "Was M0 edited , directed , executive produced , written , and produced by M1",
        "questionTemplate": "Was [entity] [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1 .\nM0 P2 M1 .\nM0 P3 M1 .\nM0 P4 M1\n}",
        "recursionDepth": 35,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q854990 wdt:P57 wd:Q8006 .\nwd:Q854990 wdt:P1040 wd:Q8006 .\nwd:Q854990 wdt:P1431 wd:Q8006 .\nwd:Q854990 wdt:P162|wdt:P272 wd:Q8006 .\nwd:Q854990 wdt:P58 wd:Q8006\n}",
        "questionWithBrackets": "Was [Kagemusha] edited , directed , executive produced , written , and produced by [Akira Kurosawa]"
    },
    {
        "questionIdx": 57244,
        "questionPatternModEntities": "Was M0 edited by M1 , edited by M2 , M3 , and M4 , and directed by M5 , M6 , and M7",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , [entity] , and [entity] , and [VP_SIMPLE] by [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P0 M3 .\nM0 P0 M4 .\nM0 P1 M5 .\nM0 P1 M6 .\nM0 P1 M7\n}",
        "recursionDepth": 46,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q1137372 wdt:P57 wd:Q3772 .\nwd:Q1137372 wdt:P57 wd:Q549956 .\nwd:Q1137372 wdt:P57 wd:Q2838329 .\nwd:Q1137372 wdt:P1040 wd:Q47284 .\nwd:Q1137372 wdt:P1040 wd:Q541143 .\nwd:Q1137372 wdt:P1040 wd:Q5359064 .\nwd:Q1137372 wdt:P1040 wd:Q273379\n}",
        "questionWithBrackets": "Was [Four Rooms] edited by [Elena Maganini] , edited by [Robert Rodriguez] , [Terry Rawlings] , and [Sally Menke] , and directed by [Alexandre Rockwell] , [Allison Anders] , and [Quentin Tarantino]"
    },
    {
        "questionIdx": 57261,
        "questionPatternModEntities": "Was M2 directed by M0 's French sibling",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M0 ) .\nM2 P2 ?x0\n}",
        "recursionDepth": 21,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P27 wd:Q142 .\n?x0 wdt:P3373 wd:Q2272454 .\nFILTER ( ?x0 != wd:Q2272454 ) .\nwd:Q171861 wdt:P57 ?x0\n}",
        "questionWithBrackets": "Was [The Artist] directed by [Serge Hazanavicius] 's French sibling"
    },
    {
        "questionIdx": 57331,
        "questionPatternModEntities": "Was M0 's spouse M1 's sibling 's actor",
        "questionTemplate": "Was [entity] 's [ROLE_SIMPLE] [entity] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x0 P1 M0 .\n?x1 P2 M1 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x1 != M1 )\n}",
        "recursionDepth": 19,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P453 ?x1 .\n?x0 wdt:P26 wd:Q522724 .\n?x1 wdt:P3373 wd:Q216605 .\nFILTER ( ?x0 != wd:Q522724 ) .\nFILTER ( ?x1 != wd:Q216605 )\n}",
        "questionWithBrackets": "Was [Peter O'Brien] 's spouse [\u00c9omer] 's sibling 's actor"
    },
    {
        "questionIdx": 57367,
        "questionPatternModEntities": "Was M1 edited by M3 , edited by M0 's sibling , and executive produced by M2",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nM1 P1 M2 .\nM1 P2 ?x0 .\nM1 P2 M3\n}",
        "recursionDepth": 37,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P3373 wd:Q3723398 .\nFILTER ( ?x0 != wd:Q3723398 ) .\nwd:Q580653 wdt:P1040 ?x0 .\nwd:Q580653 wdt:P1040 wd:Q15462 .\nwd:Q580653 wdt:P1431 wd:Q72291\n}",
        "questionWithBrackets": "Was [No Other Woman] edited by [William Hamilton] , edited by [Elizabeth Hamilton] 's sibling , and executive produced by [David O. Selznick]"
    },
    {
        "questionIdx": 57486,
        "questionPatternModEntities": "Was M1 directed by M0 's parent",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 ?x0\n}",
        "recursionDepth": 16,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q120593 .\nwd:Q45602 wdt:P57 ?x0\n}",
        "questionWithBrackets": "Was [Modern Times] directed by [Eugene Chaplin] 's parent"
    },
    {
        "questionIdx": 57491,
        "questionPatternModEntities": "Was M0 edited by M4 , edited by M5 , M6 , and M7 , and written by M1 , M2 , and M3",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , [entity] , and [entity] , and [VP_SIMPLE] by [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P0 M3 .\nM0 P1 M4 .\nM0 P1 M5 .\nM0 P1 M6 .\nM0 P1 M7\n}",
        "recursionDepth": 46,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q603857 wdt:P1040 wd:Q55215 .\nwd:Q603857 wdt:P1040 wd:Q55211 .\nwd:Q603857 wdt:P1040 wd:Q18021284 .\nwd:Q603857 wdt:P1040 wd:Q22074634 .\nwd:Q603857 wdt:P58 wd:Q20438470 .\nwd:Q603857 wdt:P58 wd:Q44221 .\nwd:Q603857 wdt:P58 wd:Q295093\n}",
        "questionWithBrackets": "Was [11'09\"01 September 11] edited by [Alejandro Gonz\u00e1lez I\u00f1\u00e1rritu] , edited by [Mohsen Makhmalbaf] , [Robert Duffy] , and [Jonathan Morris] , and written by [Claude Lelouch] , [Sean Penn] , and [Tatjana \u0160oji\u0107]"
    },
    {
        "questionIdx": 57502,
        "questionPatternModEntities": "Was M0 directed and edited by M1 , M2 , M3 , and M4",
        "questionTemplate": "Was [entity] [VP_SIMPLE] and [VP_SIMPLE] by [entity] , [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P0 M3 .\nM0 P0 M4 .\nM0 P1 M1 .\nM0 P1 M2 .\nM0 P1 M3 .\nM0 P1 M4\n}",
        "recursionDepth": 29,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q74535 wdt:P57 wd:Q5836844 .\nwd:Q74535 wdt:P57 wd:Q4022902 .\nwd:Q74535 wdt:P57 wd:Q4023328 .\nwd:Q74535 wdt:P57 wd:Q5658534 .\nwd:Q74535 wdt:P1040 wd:Q5836844 .\nwd:Q74535 wdt:P1040 wd:Q4022902 .\nwd:Q74535 wdt:P1040 wd:Q4023328 .\nwd:Q74535 wdt:P1040 wd:Q5658534\n}",
        "questionWithBrackets": "Was [The ABCs of Death] directed and edited by [Adri\u00e1n Garc\u00eda Bogliano] , [Ernesto D\u00edaz Espinoza] , [Yoshihiro Nishimura] , and [Y\u016bdai Yamaguchi]"
    },
    {
        "questionIdx": 57504,
        "questionPatternModEntities": "Was M0 a Mexican spouse of M2",
        "questionTemplate": "Was [entity] a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nFILTER ( M0 != M2 ) .\nM0 P0 M1 .\nM0 P1 M2\n}",
        "recursionDepth": 18,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nFILTER ( wd:Q318491 != wd:Q439879 ) .\nwd:Q318491 wdt:P27 wd:Q96 .\nwd:Q318491 wdt:P26 wd:Q439879\n}",
        "questionWithBrackets": "Was [Abel Salazar] a Mexican spouse of [Gloria Mar\u00edn]"
    },
    {
        "questionIdx": 57505,
        "questionPatternModEntities": "Was M0 M1 's Mexican Spanish sibling",
        "questionTemplate": "Was [entity] [entity] 's [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\nFILTER ( M0 != M1 ) .\nM0 P0 M1 .\nM0 P1 M2 .\nM0 P1 M3\n}",
        "recursionDepth": 21,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nFILTER ( wd:Q17492 != wd:Q562337 ) .\nwd:Q17492 wdt:P27 wd:Q29 .\nwd:Q17492 wdt:P27 wd:Q96 .\nwd:Q17492 wdt:P3373 wd:Q562337\n}",
        "questionWithBrackets": "Was [Jonathan dos Santos] [Giovani dos Santos] 's Mexican Spanish sibling"
    },
    {
        "questionIdx": 57506,
        "questionPatternModEntities": "Was M1 M0 's parent 's Mexican male Spanish parent",
        "questionTemplate": "Was [entity] [entity] 's [ROLE_SIMPLE] 's [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P0 ?x0 .\nM1 P1 M2 .\nM1 P1 M3 .\nM1 P2 M4\n}",
        "recursionDepth": 30,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q1091200 .\nwd:Q51545 wdt:P40|wdt:P355 ?x0 .\nwd:Q51545 wdt:P21 wd:Q6581097 .\nwd:Q51545 wdt:P27 wd:Q29 .\nwd:Q51545 wdt:P27 wd:Q96\n}",
        "questionWithBrackets": "Was [Luis Bu\u00f1uel] [Diego Bu\u00f1uel] 's parent 's Mexican male Spanish parent"
    },
    {
        "questionIdx": 57595,
        "questionPatternModEntities": "Was M5 's female spouse influenced by M0 , M1 , M2 , and M3",
        "questionTemplate": "Was [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] [VP_SIMPLE] by [entity] , [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P0 M3 .\n?x0 P1 M4 .\n?x0 P2 M5 .\nFILTER ( ?x0 != M5 )\n}",
        "recursionDepth": 31,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P737 wd:Q692 .\n?x0 wdt:P737 wd:Q37388 .\n?x0 wdt:P737 wd:Q1398 .\n?x0 wdt:P737 wd:Q1067 .\n?x0 wdt:P21 wd:Q6581072 .\n?x0 wdt:P26 wd:Q1047458 .\nFILTER ( ?x0 != wd:Q1047458 )\n}",
        "questionWithBrackets": "Was [Casimir Dudevant] 's female spouse influenced by [William Shakespeare] , [Virgil] , [Dante Alighieri] , and [Francis Bacon]"
    },
    {
        "questionIdx": 57663,
        "questionPatternModEntities": "Was M1 influenced by M2 , M3 , M4 , and M5 and influenced by M0 's parent",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] , [entity] , [entity] , and [entity] and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 ?x0 .\nM1 P1 M2 .\nM1 P1 M3 .\nM1 P1 M4 .\nM1 P1 M5\n}",
        "recursionDepth": 37,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q2217419 .\nwd:Q1067 wdt:P737 ?x0 .\nwd:Q1067 wdt:P737 wd:Q7198 .\nwd:Q1067 wdt:P737 wd:Q34943 .\nwd:Q1067 wdt:P737 wd:Q1398 .\nwd:Q1067 wdt:P737 wd:Q868\n}",
        "questionWithBrackets": "Was [Dante Alighieri] influenced by [Ovid] , [Ptolemy] , [Virgil] , and [Aristotle] and influenced by [Nicomachus] 's parent"
    },
    {
        "questionIdx": 57664,
        "questionPatternModEntities": "Was M0 influenced by M1 , M2 , and M3",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P0 M3\n}",
        "recursionDepth": 19,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q143 wdt:P737 wd:Q150 .\nwd:Q143 wdt:P737 wd:Q397 .\nwd:Q143 wdt:P737 wd:Q809\n}",
        "questionWithBrackets": "Was [Esperanto] influenced by [Latin] , [Polish] , and [French]"
    },
    {
        "questionIdx": 57695,
        "questionPatternModEntities": "Was M3 produced by , directed by , and written by a male sibling of a American spouse of M2",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x0 P1 M0 .\n?x1 P2 M1 .\n?x1 P3 M2 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x1 != M2 ) .\nM3 P4 ?x0 .\nM3 P5 ?x0 .\nM3 P6 ?x0\n}",
        "recursionDepth": 48,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P21 wd:Q6581097 .\n?x0 wdt:P3373 ?x1 .\n?x1 wdt:P27 wd:Q30 .\n?x1 wdt:P26 wd:Q64702064 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x1 != wd:Q64702064 ) .\nwd:Q208048 wdt:P57 ?x0 .\nwd:Q208048 wdt:P162|wdt:P272 ?x0 .\nwd:Q208048 wdt:P58 ?x0\n}",
        "questionWithBrackets": "Was [Band of Brothers] produced by , directed by , and written by a male sibling of a American spouse of [Karen Praxel]"
    },
    {
        "questionIdx": 57706,
        "questionPatternModEntities": "Was M1 's Swedish employee M0",
        "questionTemplate": "Was [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M2\n}",
        "recursionDepth": 16,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q126946 wdt:P108 wd:Q28695 .\nwd:Q126946 wdt:P27 wd:Q34\n}",
        "questionWithBrackets": "Was [University of Helsinki] 's Swedish employee [Matti Bergstr\u00f6m]"
    },
    {
        "questionIdx": 57752,
        "questionPatternModEntities": "Was M2 a sibling of a Dutch sibling of M0",
        "questionTemplate": "Was [entity] a [ROLE_SIMPLE] of a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( M2 != ?x0 ) .\nM2 P0 ?x0\n}",
        "recursionDepth": 24,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P27 wd:Q29999 .\n?x0 wdt:P3373 wd:Q242862 .\nFILTER ( ?x0 != wd:Q242862 ) .\nFILTER ( wd:Q705129 != ?x0 ) .\nwd:Q705129 wdt:P3373 ?x0\n}",
        "questionWithBrackets": "Was [Prince Henry of the Netherlands] a sibling of a Dutch sibling of [Princess Sophie of the Netherlands]"
    },
    {
        "questionIdx": 57756,
        "questionPatternModEntities": "Was M1 M0 's sibling 's Japanese Italian parent",
        "questionTemplate": "Was [entity] [entity] 's [ROLE_SIMPLE] 's [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nM1 P1 M2 .\nM1 P1 M3 .\nM1 P2 ?x0\n}",
        "recursionDepth": 25,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P3373 wd:Q3808162 .\nFILTER ( ?x0 != wd:Q3808162 ) .\nwd:Q3783562 wdt:P40|wdt:P355 ?x0 .\nwd:Q3783562 wdt:P27 wd:Q17 .\nwd:Q3783562 wdt:P27 wd:Q38\n}",
        "questionWithBrackets": "Was [Haruhiko Yamanouchi] [Jesto] 's sibling 's Japanese Italian parent"
    },
    {
        "questionIdx": 57772,
        "questionPatternModEntities": "Was M0 distributed by and produced by M1",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1\n}",
        "recursionDepth": 20,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q26267945 wdt:P750 wd:Q9543 .\nwd:Q26267945 wdt:P162|wdt:P272 wd:Q9543\n}",
        "questionWithBrackets": "Was [Tubelight] distributed by and produced by [Salman Rashid Khan]"
    },
    {
        "questionIdx": 57787,
        "questionPatternModEntities": "Was M2 directed by M0 's Japanese sibling , written by M4 and M5 , and executive produced by M3",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] , [VP_SIMPLE] by [entity] and [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M0 ) .\nM2 P2 M3 .\nM2 P3 M4 .\nM2 P3 M5 .\nM2 P4 ?x0\n}",
        "recursionDepth": 46,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P27 wd:Q17 .\n?x0 wdt:P3373 wd:Q11646700 .\nFILTER ( ?x0 != wd:Q11646700 ) .\nwd:Q1533961 wdt:P57 ?x0 .\nwd:Q1533961 wdt:P1431 wd:Q2697380 .\nwd:Q1533961 wdt:P58 wd:Q6383621 .\nwd:Q1533961 wdt:P58 wd:Q2630544\n}",
        "questionWithBrackets": "Was [Godzilla, Mothra and King Ghidorah: Giant Monsters All-Out Attack] directed by [Jir\u014d Kaneko] 's Japanese sibling , written by [Keiichi Hasegawa] and [Sh\u016bsuke Kaneko] , and executive produced by [Sh\u014dgo Tomiyama]"
    },
    {
        "questionIdx": 57795,
        "questionPatternModEntities": "Was M3 executive produced by M4 and M5 and directed by a employee of M0 , M1 , and M2",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] and [entity] and [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\nM3 P1 M4 .\nM3 P1 M5 .\nM3 P2 ?x0\n}",
        "recursionDepth": 41,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P108 wd:Q1051884 .\n?x0 wdt:P108 wd:Q730179 .\n?x0 wdt:P108 wd:Q182950 .\nwd:Q236728 wdt:P57 ?x0 .\nwd:Q236728 wdt:P1431 wd:Q55400 .\nwd:Q236728 wdt:P1431 wd:Q269214\n}",
        "questionWithBrackets": "Was [Ponyo on the Cliff by the Sea] executive produced by [Hayao Miyazaki] and [John Lasseter] and directed by a employee of [Nippon Animation] , [Toei Animation] , and [Studio Ghibli]"
    },
    {
        "questionIdx": 57845,
        "questionPatternModEntities": "Was M1 directed by a actor of M0",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 ?x0\n}",
        "recursionDepth": 18,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P453 wd:Q913318 .\nwd:Q15982923 wdt:P57 ?x0\n}",
        "questionWithBrackets": "Was [Man in Love] directed by a actor of [Terran]"
    },
    {
        "questionIdx": 57863,
        "questionPatternModEntities": "Was M0 a German actor of M2 and M3",
        "questionTemplate": "Was [entity] a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M2 .\nM0 P1 M3\n}",
        "recursionDepth": 22,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q62358 wdt:P453 wd:Q50807639 .\nwd:Q62358 wdt:P453 wd:Q64005951 .\nwd:Q62358 wdt:P27 wd:Q183\n}",
        "questionWithBrackets": "Was [Jonas Kaufmann] a German actor of [Mario Cavaradossi] and [Lohengrin]"
    },
    {
        "questionIdx": 57874,
        "questionPatternModEntities": "Was M2 's female American spouse 's American spouse M3",
        "questionTemplate": "Was [entity] 's [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P2 M2 .\nFILTER ( ?x0 != M2 ) .\nFILTER ( M3 != ?x0 ) .\nM3 P0 M0 .\nM3 P2 ?x0\n}",
        "recursionDepth": 30,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P21 wd:Q6581072 .\n?x0 wdt:P27 wd:Q30 .\n?x0 wdt:P26 wd:Q297142 .\nFILTER ( ?x0 != wd:Q297142 ) .\nFILTER ( wd:Q80596 != ?x0 ) .\nwd:Q80596 wdt:P27 wd:Q30 .\nwd:Q80596 wdt:P26 ?x0\n}",
        "questionWithBrackets": "Was [Joe DiMaggio] 's female American spouse 's American spouse [Arthur Miller]"
    },
    {
        "questionIdx": 57884,
        "questionPatternModEntities": "Was M3 's German French spouse M0",
        "questionTemplate": "Was [entity] 's [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nFILTER ( M0 != M3 ) .\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P1 M3\n}",
        "recursionDepth": 21,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nFILTER ( wd:Q61449 != wd:Q454297 ) .\nwd:Q61449 wdt:P27 wd:Q183 .\nwd:Q61449 wdt:P27 wd:Q142 .\nwd:Q61449 wdt:P26 wd:Q454297\n}",
        "questionWithBrackets": "Was [Prince Louis, Duke of Nemours] 's German French spouse [Princess Victoria of Saxe-Coburg and Gotha]"
    },
    {
        "questionIdx": 57893,
        "questionPatternModEntities": "Was M0 edited by and executive produced by M1",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1\n}",
        "recursionDepth": 21,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q854990 wdt:P1040 wd:Q8006 .\nwd:Q854990 wdt:P1431 wd:Q8006\n}",
        "questionWithBrackets": "Was [Kagemusha] edited by and executive produced by [Akira Kurosawa]"
    },
    {
        "questionIdx": 57907,
        "questionPatternModEntities": "Was M0 directed , produced , edited , and written by M1 and M2",
        "questionTemplate": "Was [entity] [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P1 M1 .\nM0 P1 M2 .\nM0 P2 M1 .\nM0 P2 M2 .\nM0 P3 M1 .\nM0 P3 M2\n}",
        "recursionDepth": 33,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q20729551 wdt:P57 wd:Q562108 .\nwd:Q20729551 wdt:P57 wd:Q1687239 .\nwd:Q20729551 wdt:P1040 wd:Q562108 .\nwd:Q20729551 wdt:P1040 wd:Q1687239 .\nwd:Q20729551 wdt:P162|wdt:P272 wd:Q562108 .\nwd:Q20729551 wdt:P162|wdt:P272 wd:Q1687239 .\nwd:Q20729551 wdt:P58 wd:Q562108 .\nwd:Q20729551 wdt:P58 wd:Q1687239\n}",
        "questionWithBrackets": "Was [Stop for Bud] directed , produced , edited , and written by [Jens J\u00f8rgen Thorsen] and [J\u00f8rgen Leth]"
    },
    {
        "questionIdx": 57937,
        "questionPatternModEntities": "Was M0 produced and written by M1 and M2",
        "questionTemplate": "Was [entity] [VP_SIMPLE] and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P1 M1 .\nM0 P1 M2\n}",
        "recursionDepth": 23,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q679023 wdt:P162|wdt:P272 wd:Q3772 .\nwd:Q679023 wdt:P162|wdt:P272 wd:Q47284 .\nwd:Q679023 wdt:P58 wd:Q3772 .\nwd:Q679023 wdt:P58 wd:Q47284\n}",
        "questionWithBrackets": "Was [Grindhouse] produced and written by [Quentin Tarantino] and [Robert Rodriguez]"
    },
    {
        "questionIdx": 58000,
        "questionPatternModEntities": "Was M1 produced , directed , and edited by a parent of M0",
        "questionTemplate": "Was [entity] [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 ?x0 .\nM1 P2 ?x0 .\nM1 P3 ?x0\n}",
        "recursionDepth": 30,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q120593 .\nwd:Q45602 wdt:P57 ?x0 .\nwd:Q45602 wdt:P1040 ?x0 .\nwd:Q45602 wdt:P162|wdt:P272 ?x0\n}",
        "questionWithBrackets": "Was [Modern Times] produced , directed , and edited by a parent of [Eugene Chaplin]"
    },
    {
        "questionIdx": 58092,
        "questionPatternModEntities": "Was M1 influenced by a spouse of M0",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nM1 P1 ?x0\n}",
        "recursionDepth": 18,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P26 wd:Q84464 .\nFILTER ( ?x0 != wd:Q84464 ) .\nwd:Q255 wdt:P737 ?x0\n}",
        "questionWithBrackets": "Was [Ludwig van Beethoven] influenced by a spouse of [Constanze Mozart]"
    },
    {
        "questionIdx": 58136,
        "questionPatternModEntities": "Was M0 a female sibling and spouse of M1",
        "questionTemplate": "Was [entity] a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] and [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nFILTER ( M0 != M1 ) .\nFILTER ( M0 != M1 ) .\nM0 P0 M1 .\nM0 P1 M2 .\nM0 P2 M1\n}",
        "recursionDepth": 23,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nFILTER ( wd:Q125046 != wd:Q4649 ) .\nFILTER ( wd:Q125046 != wd:Q4649 ) .\nwd:Q125046 wdt:P21 wd:Q6581072 .\nwd:Q125046 wdt:P3373 wd:Q4649 .\nwd:Q125046 wdt:P26 wd:Q4649\n}",
        "questionWithBrackets": "Was [Juno] a female sibling and spouse of [Jupiter]"
    },
    {
        "questionIdx": 58248,
        "questionPatternModEntities": "Was M0 's child 's Mexican employee M1",
        "questionTemplate": "Was [entity] 's [ROLE_SIMPLE] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 ?x0 .\nM1 P2 M2\n}",
        "recursionDepth": 20,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P749 wd:Q482267 .\nwd:Q170419 wdt:P108 ?x0 .\nwd:Q170419 wdt:P27 wd:Q96\n}",
        "questionWithBrackets": "Was [Am\u00e9rica M\u00f3vil] 's child 's Mexican employee [Carlos Slim]"
    },
    {
        "questionIdx": 58361,
        "questionPatternModEntities": "Was M0 written and directed by M1",
        "questionTemplate": "Was [entity] [VP_SIMPLE] and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1\n}",
        "recursionDepth": 19,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q1068968 wdt:P57 wd:Q882 .\nwd:Q1068968 wdt:P58 wd:Q882\n}",
        "questionWithBrackets": "Was [A King in New York] written and directed by [Charlie Chaplin]"
    },
    {
        "questionIdx": 58375,
        "questionPatternModEntities": "Was M0 's sibling influenced by M1 and M2",
        "questionTemplate": "Was [entity] 's [ROLE_SIMPLE] [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\nFILTER ( ?x0 != M0 )\n}",
        "recursionDepth": 20,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P737 wd:Q255 .\n?x0 wdt:P737 wd:Q46096 .\n?x0 wdt:P3373 wd:Q95404 .\nFILTER ( ?x0 != wd:Q95404 )\n}",
        "questionWithBrackets": "Was [Rebecka Mendelssohn] 's sibling influenced by [Felix Mendelssohn] and [Ludwig van Beethoven]"
    },
    {
        "questionIdx": 58390,
        "questionPatternModEntities": "Was M1 influenced by M2 , influenced by a spouse of M0 , and influenced by M3 , M4 , and M5",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] , [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity] , and [VP_SIMPLE] by [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nM1 P1 ?x0 .\nM1 P1 M2 .\nM1 P1 M3 .\nM1 P1 M4 .\nM1 P1 M5\n}",
        "recursionDepth": 45,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P26 wd:Q234773 .\nFILTER ( ?x0 != wd:Q234773 ) .\nwd:Q1299 wdt:P737 ?x0 .\nwd:Q1299 wdt:P737 wd:Q392 .\nwd:Q1299 wdt:P737 wd:Q5921 .\nwd:Q1299 wdt:P737 wd:Q255 .\nwd:Q1299 wdt:P737 wd:Q303\n}",
        "questionWithBrackets": "Was [The Beatles] influenced by [Ludwig van Beethoven] , influenced by a spouse of [Priscilla Presley] , and influenced by [Elvis Presley] , [Bob Dylan] , and [Chuck Berry]"
    },
    {
        "questionIdx": 58392,
        "questionPatternModEntities": "Was M2 influenced by M3 , influenced by M4 , M5 , and M6 , and influenced by M0 's French sibling",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , [entity] , and [entity] , and [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M0 ) .\nM2 P2 ?x0 .\nM2 P2 M3 .\nM2 P2 M4 .\nM2 P2 M5 .\nM2 P2 M6\n}",
        "recursionDepth": 48,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P27 wd:Q142 .\n?x0 wdt:P3373 wd:Q318448 .\nFILTER ( ?x0 != wd:Q318448 ) .\nwd:Q991 wdt:P737 ?x0 .\nwd:Q991 wdt:P737 wd:Q22670 .\nwd:Q991 wdt:P737 wd:Q43718 .\nwd:Q991 wdt:P737 wd:Q7200 .\nwd:Q991 wdt:P737 wd:Q3816\n}",
        "questionWithBrackets": "Was [Fyodor Dostoyevsky] influenced by [Nikolai Gogol] , influenced by [George Sand] , [Alexander Pushkin] , and [Friedrich Schiller] , and influenced by [Abel Hugo] 's French sibling"
    },
    {
        "questionIdx": 58438,
        "questionPatternModEntities": "Was M2 M1 's male spouse 's actor",
        "questionTemplate": "Was [entity] [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M1 ) .\nM2 P2 ?x0\n}",
        "recursionDepth": 20,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P21 wd:Q6581097 .\n?x0 wdt:P26 wd:Q9323420 .\nFILTER ( ?x0 != wd:Q9323420 ) .\nwd:Q160427 wdt:P453 ?x0\n}",
        "questionWithBrackets": "Was [Juan Diego Fl\u00f3rez] [Rosina] 's male spouse 's actor"
    },
    {
        "questionIdx": 58457,
        "questionPatternModEntities": "Was M4 a parent of a Dutch employee of M0 , M1 , and M2",
        "questionTemplate": "Was [entity] a [ROLE_SIMPLE] of a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P1 M3 .\nM4 P2 ?x0\n}",
        "recursionDepth": 31,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P108 wd:Q32120 .\n?x0 wdt:P108 wd:Q40025 .\n?x0 wdt:P108 wd:Q156598 .\n?x0 wdt:P27 wd:Q29999 .\nwd:Q91271 wdt:P40|wdt:P355 ?x0\n}",
        "questionWithBrackets": "Was [Gustav Veit] a parent of a Dutch employee of [University of Halle-Wittenberg] , [University of Erlangen-Nuremberg] , and [Leiden University]"
    },
    {
        "questionIdx": 58464,
        "questionPatternModEntities": "Was M3 's female German sibling 's spouse influenced by M0 and influenced by M1 and M2",
        "questionTemplate": "Was [entity] 's [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] 's [ROLE_SIMPLE] [VP_SIMPLE] by [entity] and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P1 ?x1 .\n?x1 P2 M3 .\n?x1 P3 M4 .\n?x1 P4 M5 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x1 != M3 )\n}",
        "recursionDepth": 45,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P737 wd:Q517 .\n?x0 wdt:P737 wd:Q6240 .\n?x0 wdt:P737 wd:Q9068 .\n?x0 wdt:P26 ?x1 .\n?x1 wdt:P21 wd:Q6581072 .\n?x1 wdt:P27 wd:Q183 .\n?x1 wdt:P3373 wd:Q65376 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x1 != wd:Q65376 )\n}",
        "questionWithBrackets": "Was [Christian August Vulpius] 's female German sibling 's spouse influenced by [Hafez] and influenced by [Napoleon] and [Voltaire]"
    },
    {
        "questionIdx": 58468,
        "questionPatternModEntities": "Was M1 's sequel edited by M0",
        "questionTemplate": "Was [entity] 's [ROLE_SIMPLE] [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1\n}",
        "recursionDepth": 16,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P1040 wd:Q8293 .\n?x0 wdt:P155 wd:Q519619\n}",
        "questionWithBrackets": "Was [Atlas Shrugged: Part I] 's sequel edited by [John Gilbert]"
    },
    {
        "questionIdx": 58494,
        "questionPatternModEntities": "Was M0 's prequel edited by , produced by , written by , and directed by M1 's spouse",
        "questionTemplate": "Was [entity] 's [ROLE_SIMPLE] [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x0 P3 ?x1 .\n?x0 P4 ?x1 .\n?x1 P5 M1 .\nFILTER ( ?x1 != M1 )\n}",
        "recursionDepth": 40,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P57 ?x1 .\n?x0 wdt:P1040 ?x1 .\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x0 wdt:P156 wd:Q128187 .\n?x0 wdt:P58 ?x1 .\n?x1 wdt:P26 wd:Q465517 .\nFILTER ( ?x1 != wd:Q465517 )\n}",
        "questionWithBrackets": "Was [Machete Kills] 's prequel edited by , produced by , written by , and directed by [Elizabeth Avell\u00e1n Ochoa] 's spouse"
    },
    {
        "questionIdx": 58495,
        "questionPatternModEntities": "Was M2 edited by M3 and executive produced by M0 's male sibling",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] and [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M0 ) .\nM2 P2 ?x0 .\nM2 P3 M3\n}",
        "recursionDepth": 33,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P21 wd:Q6581097 .\n?x0 wdt:P3373 wd:Q443128 .\nFILTER ( ?x0 != wd:Q443128 ) .\nwd:Q772260 wdt:P1040 wd:Q182835 .\nwd:Q772260 wdt:P1431 ?x0\n}",
        "questionWithBrackets": "Was [The Ruins] edited by [Jeff Betancourt] and executive produced by [Amy Stiller] 's male sibling"
    },
    {
        "questionIdx": 58518,
        "questionPatternModEntities": "Was M0 's prequel distributed and produced by M1",
        "questionTemplate": "Was [entity] 's [ROLE_SIMPLE] [VP_SIMPLE] and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P2 M1\n}",
        "recursionDepth": 23,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P750 wd:Q9531 .\n?x0 wdt:P162|wdt:P272 wd:Q9531 .\n?x0 wdt:P156 wd:Q20667011\n}",
        "questionWithBrackets": "Was [The Magician's Apprentice] 's prequel distributed and produced by [BBC]"
    },
    {
        "questionIdx": 58564,
        "questionPatternModEntities": "Was M2 founded by M3 and founded by a German sibling of M0",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] and [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M0 ) .\nM2 P2 ?x0 .\nM2 P2 M3\n}",
        "recursionDepth": 34,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P27 wd:Q183 .\n?x0 wdt:P3373 wd:Q56119579 .\nFILTER ( ?x0 != wd:Q56119579 ) .\nwd:Q1371235 wdt:P112 ?x0 .\nwd:Q1371235 wdt:P112 wd:Q567\n}",
        "questionWithBrackets": "Was [No label defined] founded by [Angela Merkel] and founded by a German sibling of [Marcus Kasner]"
    },
    {
        "questionIdx": 58565,
        "questionPatternModEntities": "Was M2 edited and directed by M1 's German spouse 's spouse",
        "questionTemplate": "Was [entity] [VP_SIMPLE] and [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x1 P0 M1 .\n?x1 P1 M0 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x1 != M1 ) .\nM2 P2 ?x0 .\nM2 P3 ?x0\n}",
        "recursionDepth": 32,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P26 ?x1 .\n?x1 wdt:P27 wd:Q183 .\n?x1 wdt:P26 wd:Q2001 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x1 != wd:Q2001 ) .\nwd:Q1434632 wdt:P57 ?x0 .\nwd:Q1434632 wdt:P1040 ?x0\n}",
        "questionWithBrackets": "Was [Flying Padre] edited and directed by [Stanley Kubrick] 's German spouse 's spouse"
    },
    {
        "questionIdx": 58672,
        "questionPatternModEntities": "Was M0 directed by , edited by , written by , and produced by M1 and M2",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P1 M1 .\nM0 P1 M2 .\nM0 P2 M1 .\nM0 P2 M2 .\nM0 P3 M1 .\nM0 P3 M2\n}",
        "recursionDepth": 36,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q20729551 wdt:P57 wd:Q562108 .\nwd:Q20729551 wdt:P57 wd:Q1687239 .\nwd:Q20729551 wdt:P1040 wd:Q562108 .\nwd:Q20729551 wdt:P1040 wd:Q1687239 .\nwd:Q20729551 wdt:P162|wdt:P272 wd:Q562108 .\nwd:Q20729551 wdt:P162|wdt:P272 wd:Q1687239 .\nwd:Q20729551 wdt:P58 wd:Q562108 .\nwd:Q20729551 wdt:P58 wd:Q1687239\n}",
        "questionWithBrackets": "Was [Stop for Bud] directed by , edited by , written by , and produced by [Jens J\u00f8rgen Thorsen] and [J\u00f8rgen Leth]"
    },
    {
        "questionIdx": 58673,
        "questionPatternModEntities": "Was M0 directed by , edited by , written by , and produced by M1",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1 .\nM0 P2 M1 .\nM0 P3 M1\n}",
        "recursionDepth": 32,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q854990 wdt:P57 wd:Q8006 .\nwd:Q854990 wdt:P1040 wd:Q8006 .\nwd:Q854990 wdt:P162|wdt:P272 wd:Q8006 .\nwd:Q854990 wdt:P58 wd:Q8006\n}",
        "questionWithBrackets": "Was [Kagemusha] directed by , edited by , written by , and produced by [Akira Kurosawa]"
    },
    {
        "questionIdx": 58682,
        "questionPatternModEntities": "Was M0 produced , written , and directed by M1 and M2",
        "questionTemplate": "Was [entity] [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P1 M1 .\nM0 P1 M2 .\nM0 P2 M1 .\nM0 P2 M2\n}",
        "recursionDepth": 28,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q679023 wdt:P57 wd:Q3772 .\nwd:Q679023 wdt:P57 wd:Q358714 .\nwd:Q679023 wdt:P162|wdt:P272 wd:Q3772 .\nwd:Q679023 wdt:P162|wdt:P272 wd:Q358714 .\nwd:Q679023 wdt:P58 wd:Q3772 .\nwd:Q679023 wdt:P58 wd:Q358714\n}",
        "questionWithBrackets": "Was [Grindhouse] produced , written , and directed by [Eli Roth] and [Quentin Tarantino]"
    },
    {
        "questionIdx": 58683,
        "questionPatternModEntities": "Was M0 produced , written , edited , and directed by M1 and M2",
        "questionTemplate": "Was [entity] [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P1 M1 .\nM0 P1 M2 .\nM0 P2 M1 .\nM0 P2 M2 .\nM0 P3 M1 .\nM0 P3 M2\n}",
        "recursionDepth": 33,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q20729551 wdt:P57 wd:Q562108 .\nwd:Q20729551 wdt:P57 wd:Q1687239 .\nwd:Q20729551 wdt:P1040 wd:Q562108 .\nwd:Q20729551 wdt:P1040 wd:Q1687239 .\nwd:Q20729551 wdt:P162|wdt:P272 wd:Q562108 .\nwd:Q20729551 wdt:P162|wdt:P272 wd:Q1687239 .\nwd:Q20729551 wdt:P58 wd:Q562108 .\nwd:Q20729551 wdt:P58 wd:Q1687239\n}",
        "questionWithBrackets": "Was [Stop for Bud] produced , written , edited , and directed by [Jens J\u00f8rgen Thorsen] and [J\u00f8rgen Leth]"
    },
    {
        "questionIdx": 58691,
        "questionPatternModEntities": "Was M3 founded by M1 's Canadian sibling 's spouse 's male spouse",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] 's [ROLE_SIMPLE] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 ?x1 .\n?x1 P1 ?x2 .\n?x2 P2 M1 .\n?x2 P3 M2 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x1 != ?x2 ) .\nFILTER ( ?x2 != M1 ) .\nM3 P4 ?x0\n}",
        "recursionDepth": 34,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P21 wd:Q6581097 .\n?x0 wdt:P26 ?x1 .\n?x1 wdt:P26 ?x2 .\n?x2 wdt:P27 wd:Q16 .\n?x2 wdt:P3373 wd:Q4811453 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x1 != ?x2 ) .\nFILTER ( ?x2 != wd:Q4811453 ) .\nwd:Q10712777 wdt:P112 ?x0\n}",
        "questionWithBrackets": "Was [Vapor Records] founded by [Astrid Young] 's Canadian sibling 's spouse 's male spouse"
    },
    {
        "questionIdx": 58696,
        "questionPatternModEntities": "Was M1 's child M0",
        "questionTemplate": "Was [entity] 's [ROLE_SIMPLE] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1\n}",
        "recursionDepth": 11,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q155573 wdt:P749 wd:Q67\n}",
        "questionWithBrackets": "Was [Airbus] 's child [Airbus Helicopters]"
    },
    {
        "questionIdx": 58717,
        "questionPatternModEntities": "Was M0 produced by and distributed by M1",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1\n}",
        "recursionDepth": 20,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q4316335 wdt:P750 wd:Q9531 .\nwd:Q4316335 wdt:P162|wdt:P272 wd:Q9531\n}",
        "questionWithBrackets": "Was [The Tenant of Wildfell Hall] produced by and distributed by [BBC]"
    },
    {
        "questionIdx": 58724,
        "questionPatternModEntities": "Was M2 edited by and directed by M1 's spouse 's Spanish spouse",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 ?x1 .\n?x1 P1 M1 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x1 != M1 ) .\nM2 P2 ?x0 .\nM2 P3 ?x0\n}",
        "recursionDepth": 33,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P27 wd:Q29 .\n?x0 wdt:P26 ?x1 .\n?x1 wdt:P26 wd:Q51545 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x1 != wd:Q51545 ) .\nwd:Q190575 wdt:P57 ?x0 .\nwd:Q190575 wdt:P1040 ?x0\n}",
        "questionWithBrackets": "Was [Un Chien Andalou] edited by and directed by [Luis Bu\u00f1uel] 's spouse 's Spanish spouse"
    },
    {
        "questionIdx": 58738,
        "questionPatternModEntities": "Was M2 founded by M1 's child and founded by M0 's sibling",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x1 P1 M1 .\nFILTER ( ?x0 != M0 ) .\nM2 P2 ?x0 .\nM2 P2 ?x1\n}",
        "recursionDepth": 31,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P3373 wd:Q94577506 .\n?x1 wdt:P749 wd:Q1310001 .\nFILTER ( ?x0 != wd:Q94577506 ) .\nwd:Q88150951 wdt:P112 ?x0 .\nwd:Q88150951 wdt:P112 ?x1\n}",
        "questionWithBrackets": "Was [No label defined] founded by [Erste Group] 's child and founded by [Franz Xaver Sonnleithner] 's sibling"
    },
    {
        "questionIdx": 58740,
        "questionPatternModEntities": "Was M0 directed , written , and executive produced by M1",
        "questionTemplate": "Was [entity] [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1 .\nM0 P2 M1\n}",
        "recursionDepth": 25,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q181086 wdt:P57 wd:Q2001 .\nwd:Q181086 wdt:P1431 wd:Q2001 .\nwd:Q181086 wdt:P58 wd:Q2001\n}",
        "questionWithBrackets": "Was [A Clockwork Orange] directed , written , and executive produced by [Stanley Kubrick]"
    },
    {
        "questionIdx": 58774,
        "questionPatternModEntities": "Was M0 edited by , written by , produced by , and directed by M1 and M2",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P1 M1 .\nM0 P1 M2 .\nM0 P2 M1 .\nM0 P2 M2 .\nM0 P3 M1 .\nM0 P3 M2\n}",
        "recursionDepth": 36,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q20729551 wdt:P57 wd:Q562108 .\nwd:Q20729551 wdt:P57 wd:Q1687239 .\nwd:Q20729551 wdt:P1040 wd:Q562108 .\nwd:Q20729551 wdt:P1040 wd:Q1687239 .\nwd:Q20729551 wdt:P162|wdt:P272 wd:Q562108 .\nwd:Q20729551 wdt:P162|wdt:P272 wd:Q1687239 .\nwd:Q20729551 wdt:P58 wd:Q562108 .\nwd:Q20729551 wdt:P58 wd:Q1687239\n}",
        "questionWithBrackets": "Was [Stop for Bud] edited by , written by , produced by , and directed by [Jens J\u00f8rgen Thorsen] and [J\u00f8rgen Leth]"
    },
    {
        "questionIdx": 58779,
        "questionPatternModEntities": "Was M1 distributed by M2 , M3 , and M4 and distributed by M0 's child",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] , [entity] , and [entity] and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 ?x0 .\nM1 P1 M2 .\nM1 P1 M3 .\nM1 P1 M4\n}",
        "recursionDepth": 34,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P749 wd:Q2283 .\nwd:Q19360088 wdt:P750 ?x0 .\nwd:Q19360088 wdt:P750 wd:Q42328566 .\nwd:Q19360088 wdt:P750 wd:Q193559 .\nwd:Q19360088 wdt:P750 wd:Q73801\n}",
        "questionWithBrackets": "Was [The Escapists] distributed by [Valve Corporation] , [Humble Store] , and [Xbox Game Studios] and distributed by [Microsoft] 's child"
    },
    {
        "questionIdx": 58788,
        "questionPatternModEntities": "Was M1 's spouse a sibling and spouse of M0",
        "questionTemplate": "Was [entity] 's [ROLE_SIMPLE] a [ROLE_SIMPLE] and [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x0 != M1 )\n}",
        "recursionDepth": 22,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P3373 wd:Q3340 .\n?x0 wdt:P26 wd:Q296446 .\n?x0 wdt:P26 wd:Q3340 .\nFILTER ( ?x0 != wd:Q296446 ) .\nFILTER ( ?x0 != wd:Q3340 ) .\nFILTER ( ?x0 != wd:Q3340 )\n}",
        "questionWithBrackets": "Was [Antiochus IX Cyzicenus] 's spouse a sibling and spouse of [Ptolemy IX Lathyros]"
    },
    {
        "questionIdx": 58891,
        "questionPatternModEntities": "Was M0 produced , written , edited , and directed by M1",
        "questionTemplate": "Was [entity] [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1 .\nM0 P2 M1 .\nM0 P3 M1\n}",
        "recursionDepth": 29,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q854990 wdt:P57 wd:Q8006 .\nwd:Q854990 wdt:P1040 wd:Q8006 .\nwd:Q854990 wdt:P162|wdt:P272 wd:Q8006 .\nwd:Q854990 wdt:P58 wd:Q8006\n}",
        "questionWithBrackets": "Was [Kagemusha] produced , written , edited , and directed by [Akira Kurosawa]"
    },
    {
        "questionIdx": 58923,
        "questionPatternModEntities": "Was M1 's parent employed by M0",
        "questionTemplate": "Was [entity] 's [ROLE_SIMPLE] [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1\n}",
        "recursionDepth": 16,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q102649059 .\n?x0 wdt:P108 wd:Q95\n}",
        "questionWithBrackets": "Was [Kavya Pichai] 's parent employed by [Google]"
    },
    {
        "questionIdx": 58934,
        "questionPatternModEntities": "Was M1 distributed by M0 's parent and distributed by M2",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 ?x0 .\nM1 P1 M2\n}",
        "recursionDepth": 27,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q991149 .\nwd:Q2690094 wdt:P750 ?x0 .\nwd:Q2690094 wdt:P750 wd:Q337535\n}",
        "questionWithBrackets": "Was [Castlevania: Lords of Shadow \u2013 Mirror of Fate] distributed by [1-Up Studio] 's parent and distributed by [Steam]"
    },
    {
        "questionIdx": 58941,
        "questionPatternModEntities": "Was M1 M0 's sibling 's sibling 's spouse",
        "questionTemplate": "Was [entity] [entity] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x1 P0 M0 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x1 != M0 ) .\nFILTER ( M1 != ?x0 ) .\nM1 P1 ?x0\n}",
        "recursionDepth": 19,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P3373 ?x1 .\n?x1 wdt:P3373 wd:Q39938 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x1 != wd:Q39938 ) .\nFILTER ( wd:Q632595 != ?x0 ) .\nwd:Q632595 wdt:P26 ?x0\n}",
        "questionWithBrackets": "Was [Archelaus] [Ptolemy XIII Theos Philopator] 's sibling 's sibling 's spouse"
    },
    {
        "questionIdx": 58981,
        "questionPatternModEntities": "Was M2 founded by M3 , M4 , and M5 and founded by M1 's female spouse",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] , [entity] , and [entity] and [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M1 ) .\nM2 P2 ?x0 .\nM2 P2 M3 .\nM2 P2 M4 .\nM2 P2 M5\n}",
        "recursionDepth": 39,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P21 wd:Q6581072 .\n?x0 wdt:P26 wd:Q383420 .\nFILTER ( ?x0 != wd:Q383420 ) .\nwd:Q8031000 wdt:P112 ?x0 .\nwd:Q8031000 wdt:P112 wd:Q41142 .\nwd:Q8031000 wdt:P112 wd:Q231178 .\nwd:Q8031000 wdt:P112 wd:Q450796\n}",
        "questionWithBrackets": "Was [Women's Media Center] founded by [Gloria Steinem] , [Robin Morgan] , and [Jane Fonda] and founded by [Roger Vadim] 's female spouse"
    },
    {
        "questionIdx": 58984,
        "questionPatternModEntities": "Was M1 founded by M0 's parent , founded by M2 , founded by M3 , and founded by M4",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] , [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 ?x0 .\nM1 P1 M2 .\nM1 P1 M3 .\nM1 P1 M4\n}",
        "recursionDepth": 45,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q106204654 .\nwd:Q964 wdt:P112 ?x0 .\nwd:Q964 wdt:P112 wd:Q180 .\nwd:Q964 wdt:P112 wd:Q181 .\nwd:Q964 wdt:P112 wd:Q15176445\n}",
        "questionWithBrackets": "Was [Wikinews] founded by [Wikimedia, LLC] 's parent , founded by [Wikimedia Foundation] , founded by [Jimmy Wales] , and founded by [Daniel Alston]"
    },
    {
        "questionIdx": 58986,
        "questionPatternModEntities": "Was M2 founded by M1 's female spouse and founded by M3",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M1 ) .\nM2 P2 ?x0 .\nM2 P2 M3\n}",
        "recursionDepth": 32,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P21 wd:Q6581072 .\n?x0 wdt:P26 wd:Q62085 .\nFILTER ( ?x0 != wd:Q62085 ) .\nwd:Q1371235 wdt:P112 ?x0 .\nwd:Q1371235 wdt:P112 wd:Q567\n}",
        "questionWithBrackets": "Was [No label defined] founded by [Joachim Sauer] 's female spouse and founded by [Angela Merkel]"
    },
    {
        "questionIdx": 58990,
        "questionPatternModEntities": "Was M0 founded by M1 and M2 and founded by M3",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] and [entity] and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P0 M3\n}",
        "recursionDepth": 27,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q673158 wdt:P112 wd:Q16 .\nwd:Q673158 wdt:P112 wd:Q30 .\nwd:Q673158 wdt:P112 wd:Q17\n}",
        "questionWithBrackets": "Was [Wassenaar Arrangement] founded by [Canada] and m.03_3d and founded by [United States of America]"
    },
    {
        "questionIdx": 58993,
        "questionPatternModEntities": "Was M1 founded by M2 , founded by M0 's child , and founded by M3",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 ?x0 .\nM1 P1 M2 .\nM1 P1 M3\n}",
        "recursionDepth": 36,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P749 wd:Q20800404 .\nwd:Q5570513 wdt:P112 ?x0 .\nwd:Q5570513 wdt:P112 wd:Q2283 .\nwd:Q5570513 wdt:P112 wd:Q95\n}",
        "questionWithBrackets": "Was [Global Network Initiative] founded by [Microsoft] , founded by [Alphabet Inc.] 's child , and founded by [Google]"
    },
    {
        "questionIdx": 58996,
        "questionPatternModEntities": "Was M0 founded by M1 and founded by M2",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2\n}",
        "recursionDepth": 23,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q458 wdt:P112 wd:Q31 .\nwd:Q458 wdt:P112 wd:Q29999\n}",
        "questionWithBrackets": "Was [European Union] founded by [Belgium] and founded by [Kingdom of the Netherlands]"
    },
    {
        "questionIdx": 58998,
        "questionPatternModEntities": "Was M1 founded by M0 's child , founded by M2 , and founded by M3",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 ?x0 .\nM1 P1 M2 .\nM1 P1 M3\n}",
        "recursionDepth": 36,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P749 wd:Q860580 .\nwd:Q953568 wdt:P112 ?x0 .\nwd:Q953568 wdt:P112 wd:Q1806936 .\nwd:Q953568 wdt:P112 wd:Q3884\n}",
        "questionWithBrackets": "Was [DDEX] founded by [Tencent] 's child , founded by [SACEM] , and founded by [Amazon]"
    },
    {
        "questionIdx": 59008,
        "questionPatternModEntities": "Was M1 founded by M2 , founded by M3 , founded by M0 's spouse , and founded by M4",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nM1 P1 ?x0 .\nM1 P1 M2 .\nM1 P1 M3 .\nM1 P1 M4\n}",
        "recursionDepth": 45,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P26 wd:Q13564310 .\nFILTER ( ?x0 != wd:Q13564310 ) .\nwd:Q151 wdt:P112 ?x0 .\nwd:Q151 wdt:P112 wd:Q180 .\nwd:Q151 wdt:P112 wd:Q181 .\nwd:Q151 wdt:P112 wd:Q185\n}",
        "questionWithBrackets": "Was [Wiktionary] founded by [Larry Sanger] , founded by [Wikimedia Foundation] , founded by [Kate Garvey] 's spouse , and founded by [Jimmy Wales]"
    },
    {
        "questionIdx": 59013,
        "questionPatternModEntities": "Was M1 founded by M2 , founded by M3 , founded by M0 's parent , and founded by M4",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 ?x0 .\nM1 P1 M2 .\nM1 P1 M3 .\nM1 P1 M4\n}",
        "recursionDepth": 45,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q106204654 .\nwd:Q565 wdt:P112 ?x0 .\nwd:Q565 wdt:P112 wd:Q180 .\nwd:Q565 wdt:P112 wd:Q181 .\nwd:Q565 wdt:P112 wd:Q577729\n}",
        "questionWithBrackets": "Was [Wikimedia Commons] founded by [Jimmy Wales] , founded by [Erik M\u00f6ller] , founded by [Wikimedia, LLC] 's parent , and founded by [Wikimedia Foundation]"
    },
    {
        "questionIdx": 59019,
        "questionPatternModEntities": "Was M1 founded by a child of M0 and founded by M2",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity] and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 ?x0 .\nM1 P1 M2\n}",
        "recursionDepth": 29,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P749 wd:Q20800404 .\nwd:Q356 wdt:P112 ?x0 .\nwd:Q356 wdt:P112 wd:Q95\n}",
        "questionWithBrackets": "Was [Google+] founded by a child of [Alphabet Inc.] and founded by [Google]"
    },
    {
        "questionIdx": 59023,
        "questionPatternModEntities": "Was M2 founded by a female spouse of M1 and founded by M3",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M1 ) .\nM2 P2 ?x0 .\nM2 P2 M3\n}",
        "recursionDepth": 34,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P21 wd:Q6581072 .\n?x0 wdt:P26 wd:Q62085 .\nFILTER ( ?x0 != wd:Q62085 ) .\nwd:Q1371235 wdt:P112 ?x0 .\nwd:Q1371235 wdt:P112 wd:Q567\n}",
        "questionWithBrackets": "Was [No label defined] founded by a female spouse of [Joachim Sauer] and founded by [Angela Merkel]"
    },
    {
        "questionIdx": 59035,
        "questionPatternModEntities": "Was M1 founded by a spouse of M0 , founded by M2 , and founded by M3 and M4",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nM1 P1 ?x0 .\nM1 P1 M2 .\nM1 P1 M3 .\nM1 P1 M4\n}",
        "recursionDepth": 42,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P26 wd:Q87553 .\nFILTER ( ?x0 != wd:Q87553 ) .\nwd:Q20850669 wdt:P112 ?x0 .\nwd:Q20850669 wdt:P112 wd:Q86954 .\nwd:Q20850669 wdt:P112 wd:Q18456 .\nwd:Q20850669 wdt:P112 wd:Q85002\n}",
        "questionWithBrackets": "Was [Verein der Schriftstellerinnen und K\u00fcnstlerinnen Wien] founded by a spouse of [Arthur Gundaccar von Suttner] , founded by [Bertha von Suttner] , and founded by [Ada Christen] and [Marie von Najmajer]"
    },
    {
        "questionIdx": 59036,
        "questionPatternModEntities": "Was M1 founded by a spouse of a spouse of M0 and founded by M2 and M3",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by a [ROLE_SIMPLE] of a [ROLE_SIMPLE] of [entity] and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x1 P0 M0 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x1 != M0 ) .\nM1 P1 ?x0 .\nM1 P1 M2 .\nM1 P1 M3\n}",
        "recursionDepth": 39,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P26 ?x1 .\n?x1 wdt:P26 wd:Q13894 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x1 != wd:Q13894 ) .\nwd:Q256443 wdt:P112 ?x0 .\nwd:Q256443 wdt:P112 wd:Q51513 .\nwd:Q256443 wdt:P112 wd:Q78639\n}",
        "questionWithBrackets": "Was [Salzburg Festival] founded by a spouse of a spouse of [Richard Strauss] and founded by [Max Reinhardt] and [Hugo von Hofmannsthal]"
    },
    {
        "questionIdx": 59043,
        "questionPatternModEntities": "Was M1 founded by M2 , founded by M0 's parent , and founded by M3",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 ?x0 .\nM1 P1 M2 .\nM1 P1 M3\n}",
        "recursionDepth": 36,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q106204654 .\nwd:Q565 wdt:P112 ?x0 .\nwd:Q565 wdt:P112 wd:Q180 .\nwd:Q565 wdt:P112 wd:Q577729\n}",
        "questionWithBrackets": "Was [Wikimedia Commons] founded by [Erik M\u00f6ller] , founded by [Wikimedia, LLC] 's parent , and founded by [Wikimedia Foundation]"
    },
    {
        "questionIdx": 59048,
        "questionPatternModEntities": "Was M3 's Mexican Canadian spouse M0",
        "questionTemplate": "Was [entity] 's [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nFILTER ( M0 != M3 ) .\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P1 M3\n}",
        "recursionDepth": 21,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nFILTER ( wd:Q3117917 != wd:Q47003984 ) .\nwd:Q3117917 wdt:P27 wd:Q96 .\nwd:Q3117917 wdt:P27 wd:Q16 .\nwd:Q3117917 wdt:P26 wd:Q47003984\n}",
        "questionWithBrackets": "Was [Aaron Dudley] 's Mexican Canadian spouse [Ona Grauer]"
    },
    {
        "questionIdx": 59077,
        "questionPatternModEntities": "Was M0 executive produced by , edited by , directed by , produced by , and written by M1",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1 .\nM0 P2 M1 .\nM0 P3 M1 .\nM0 P4 M1\n}",
        "recursionDepth": 39,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q854990 wdt:P57 wd:Q8006 .\nwd:Q854990 wdt:P1040 wd:Q8006 .\nwd:Q854990 wdt:P1431 wd:Q8006 .\nwd:Q854990 wdt:P162|wdt:P272 wd:Q8006 .\nwd:Q854990 wdt:P58 wd:Q8006\n}",
        "questionWithBrackets": "Was [Kagemusha] executive produced by , edited by , directed by , produced by , and written by [Akira Kurosawa]"
    },
    {
        "questionIdx": 59094,
        "questionPatternModEntities": "Was M0 executive produced and written by M1",
        "questionTemplate": "Was [entity] [VP_SIMPLE] and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1\n}",
        "recursionDepth": 20,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q181086 wdt:P1431 wd:Q2001 .\nwd:Q181086 wdt:P58 wd:Q2001\n}",
        "questionWithBrackets": "Was [A Clockwork Orange] executive produced and written by [Stanley Kubrick]"
    },
    {
        "questionIdx": 59097,
        "questionPatternModEntities": "Was M0 a Mexican employee of M1",
        "questionTemplate": "Was [entity] a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M2\n}",
        "recursionDepth": 18,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q154691 wdt:P108 wd:Q49088 .\nwd:Q154691 wdt:P27 wd:Q96\n}",
        "questionWithBrackets": "Was [Carlos Fuentes] a Mexican employee of [Columbia University]"
    },
    {
        "questionIdx": 59100,
        "questionPatternModEntities": "Was M6 's French spouse employed by M0 , M1 , and M2 and employed by M3 and M4",
        "questionTemplate": "Was [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] [VP_SIMPLE] by [entity] , [entity] , and [entity] and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P0 M3 .\n?x0 P0 M4 .\n?x0 P1 M5 .\n?x0 P2 M6 .\nFILTER ( ?x0 != M6 )\n}",
        "recursionDepth": 43,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P108 wd:Q1322289 .\n?x0 wdt:P108 wd:Q500740 .\n?x0 wdt:P108 wd:Q3551621 .\n?x0 wdt:P108 wd:Q83259 .\n?x0 wdt:P108 wd:Q157575 .\n?x0 wdt:P27 wd:Q142 .\n?x0 wdt:P26 wd:Q13666556 .\nFILTER ( ?x0 != wd:Q13666556 )\n}",
        "questionWithBrackets": "Was [Marie Pasteur] 's French spouse employed by [University of Strasbourg] , [\u00c9cole normale sup\u00e9rieure] , and [Lille University of Science and Technology] and employed by [University of Lille] and [Lille North of France University]"
    },
    {
        "questionIdx": 59105,
        "questionPatternModEntities": "Was M0 's French sibling influenced by M1 and influenced by M2",
        "questionTemplate": "Was [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] [VP_SIMPLE] by [entity] and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\n?x0 P2 M3 .\nFILTER ( ?x0 != M0 )\n}",
        "recursionDepth": 32,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P737 wd:Q501 .\n?x0 wdt:P737 wd:Q2371393 .\n?x0 wdt:P27 wd:Q142 .\n?x0 wdt:P3373 wd:Q8308563 .\nFILTER ( ?x0 != wd:Q8308563 )\n}",
        "questionWithBrackets": "Was [Fr\u00e9d\u00e9ric Rimbaud] 's French sibling influenced by [Albert M\u00e9rat] and influenced by [Charles Baudelaire]"
    },
    {
        "questionIdx": 59151,
        "questionPatternModEntities": "Was M0 produced by , executive produced by , and edited by M1",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1 .\nM0 P2 M1\n}",
        "recursionDepth": 27,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q854990 wdt:P1040 wd:Q8006 .\nwd:Q854990 wdt:P1431 wd:Q8006 .\nwd:Q854990 wdt:P162|wdt:P272 wd:Q8006\n}",
        "questionWithBrackets": "Was [Kagemusha] produced by , executive produced by , and edited by [Akira Kurosawa]"
    },
    {
        "questionIdx": 59234,
        "questionPatternModEntities": "Was M0 produced and written by M1",
        "questionTemplate": "Was [entity] [VP_SIMPLE] and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1\n}",
        "recursionDepth": 19,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q45602 wdt:P162|wdt:P272 wd:Q882 .\nwd:Q45602 wdt:P58 wd:Q882\n}",
        "questionWithBrackets": "Was [Modern Times] produced and written by [Charlie Chaplin]"
    },
    {
        "questionIdx": 59323,
        "questionPatternModEntities": "Was M0 's child 's Japanese employee M1",
        "questionTemplate": "Was [entity] 's [ROLE_SIMPLE] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 ?x0 .\nM1 P2 M2\n}",
        "recursionDepth": 20,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P749 wd:Q1065 .\nwd:Q5384493 wdt:P108 ?x0 .\nwd:Q5384493 wdt:P27 wd:Q17\n}",
        "questionWithBrackets": "Was [United Nations] 's child 's Japanese employee [Naoyuki Shinohara]"
    },
    {
        "questionIdx": 59379,
        "questionPatternModEntities": "Was M0 edited by M2 and executive produced by M1",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M2\n}",
        "recursionDepth": 24,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q171048 wdt:P1040 wd:Q380920 .\nwd:Q171048 wdt:P1431 wd:Q93161\n}",
        "questionWithBrackets": "Was [Toy Story] edited by [Lee Unkrich] and executive produced by [Edwin Catmull]"
    },
    {
        "questionIdx": 59392,
        "questionPatternModEntities": "Was M0 directed by M1 and directed by M2",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2\n}",
        "recursionDepth": 23,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q18409 wdt:P57 wd:Q7371 .\nwd:Q18409 wdt:P57 wd:Q13888\n}",
        "questionWithBrackets": "Was [Boccaccio '70] directed by [Luchino Visconti] and directed by [Federico Fellini]"
    },
    {
        "questionIdx": 59394,
        "questionPatternModEntities": "Was M1 directed by and edited by a spouse of M0",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by and [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nM1 P1 ?x0 .\nM1 P2 ?x0\n}",
        "recursionDepth": 26,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P26 wd:Q508871 .\nFILTER ( ?x0 != wd:Q508871 ) .\nwd:Q11618 wdt:P57 ?x0 .\nwd:Q11618 wdt:P1040 ?x0\n}",
        "questionWithBrackets": "Was [Eraserhead] directed by and edited by a spouse of [Mary Sweeney]"
    },
    {
        "questionIdx": 59408,
        "questionPatternModEntities": "Was M2 edited by M3 and directed by a Dutch spouse of M1",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] and [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M1 ) .\nM2 P2 M3 .\nM2 P3 ?x0\n}",
        "recursionDepth": 34,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P27 wd:Q29999 .\n?x0 wdt:P26 wd:Q69776 .\nFILTER ( ?x0 != wd:Q69776 ) .\nwd:Q1057777 wdt:P57 ?x0 .\nwd:Q1057777 wdt:P1040 wd:Q238616\n}",
        "questionWithBrackets": "Was [Rain] edited by [Joris Ivens] and directed by a Dutch spouse of [Germaine Krull]"
    },
    {
        "questionIdx": 59445,
        "questionPatternModEntities": "Was M1 a spouse of a spouse of M0",
        "questionTemplate": "Was [entity] a [ROLE_SIMPLE] of a [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( M1 != ?x0 ) .\nM1 P0 ?x0\n}",
        "recursionDepth": 19,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P26 wd:Q1203 .\nFILTER ( ?x0 != wd:Q1203 ) .\nFILTER ( wd:Q1190476 != ?x0 ) .\nwd:Q1190476 wdt:P26 ?x0\n}",
        "questionWithBrackets": "Was [Toshi Ichiyanagi] a spouse of a spouse of [John Lennon]"
    },
    {
        "questionIdx": 59508,
        "questionPatternModEntities": "Was M0 executive produced , directed , edited , and produced by M1",
        "questionTemplate": "Was [entity] [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1 .\nM0 P2 M1 .\nM0 P3 M1\n}",
        "recursionDepth": 30,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q854990 wdt:P57 wd:Q8006 .\nwd:Q854990 wdt:P1040 wd:Q8006 .\nwd:Q854990 wdt:P1431 wd:Q8006 .\nwd:Q854990 wdt:P162|wdt:P272 wd:Q8006\n}",
        "questionWithBrackets": "Was [Kagemusha] executive produced , directed , edited , and produced by [Akira Kurosawa]"
    },
    {
        "questionIdx": 59509,
        "questionPatternModEntities": "Was M0 executive produced , edited , and written by M1",
        "questionTemplate": "Was [entity] [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1 .\nM0 P2 M1\n}",
        "recursionDepth": 25,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q854990 wdt:P1040 wd:Q8006 .\nwd:Q854990 wdt:P1431 wd:Q8006 .\nwd:Q854990 wdt:P58 wd:Q8006\n}",
        "questionWithBrackets": "Was [Kagemusha] executive produced , edited , and written by [Akira Kurosawa]"
    },
    {
        "questionIdx": 59510,
        "questionPatternModEntities": "Was M1 executive produced , edited , directed , produced , and written by M0 's spouse",
        "questionTemplate": "Was [entity] [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nM1 P1 ?x0 .\nM1 P2 ?x0 .\nM1 P3 ?x0 .\nM1 P4 ?x0 .\nM1 P5 ?x0\n}",
        "recursionDepth": 39,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P26 wd:Q3032150 .\nFILTER ( ?x0 != wd:Q3032150 ) .\nwd:Q854990 wdt:P57 ?x0 .\nwd:Q854990 wdt:P1040 ?x0 .\nwd:Q854990 wdt:P1431 ?x0 .\nwd:Q854990 wdt:P162|wdt:P272 ?x0 .\nwd:Q854990 wdt:P58 ?x0\n}",
        "questionWithBrackets": "Was [Kagemusha] executive produced , edited , directed , produced , and written by [Y\u014dko Yaguchi] 's spouse"
    },
    {
        "questionIdx": 59531,
        "questionPatternModEntities": "Was M0 edited , written , and directed by M1 and M2",
        "questionTemplate": "Was [entity] [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P1 M1 .\nM0 P1 M2 .\nM0 P2 M1 .\nM0 P2 M2\n}",
        "recursionDepth": 28,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q543382 wdt:P57 wd:Q44426 .\nwd:Q543382 wdt:P57 wd:Q96024 .\nwd:Q543382 wdt:P1040 wd:Q44426 .\nwd:Q543382 wdt:P1040 wd:Q96024 .\nwd:Q543382 wdt:P58 wd:Q44426 .\nwd:Q543382 wdt:P58 wd:Q96024\n}",
        "questionWithBrackets": "Was [Why Does Herr R. Run Amok?] edited , written , and directed by [Rainer Werner Fassbinder] and [Michael Fengler]"
    },
    {
        "questionIdx": 59573,
        "questionPatternModEntities": "Was M1 executive produced , written , edited , and directed by a sibling of M0",
        "questionTemplate": "Was [entity] [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nM1 P1 ?x0 .\nM1 P2 ?x0 .\nM1 P3 ?x0 .\nM1 P4 ?x0\n}",
        "recursionDepth": 36,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P3373 wd:Q28370409 .\nFILTER ( ?x0 != wd:Q28370409 ) .\nwd:Q28146810 wdt:P57 ?x0 .\nwd:Q28146810 wdt:P1040 ?x0 .\nwd:Q28146810 wdt:P1431 ?x0 .\nwd:Q28146810 wdt:P58 ?x0\n}",
        "questionWithBrackets": "Was [Bullets, Fangs and Dinner at 8] executive produced , written , edited , and directed by a sibling of [Everton Rocca]"
    },
    {
        "questionIdx": 59591,
        "questionPatternModEntities": "Was M0 edited by , produced by , written by , and directed by M1",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1 .\nM0 P2 M1 .\nM0 P3 M1\n}",
        "recursionDepth": 32,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q854990 wdt:P57 wd:Q8006 .\nwd:Q854990 wdt:P1040 wd:Q8006 .\nwd:Q854990 wdt:P162|wdt:P272 wd:Q8006 .\nwd:Q854990 wdt:P58 wd:Q8006\n}",
        "questionWithBrackets": "Was [Kagemusha] edited by , produced by , written by , and directed by [Akira Kurosawa]"
    },
    {
        "questionIdx": 59641,
        "questionPatternModEntities": "Was M0 directed by , executive produced by , and edited by M1",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1 .\nM0 P2 M1\n}",
        "recursionDepth": 27,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q854990 wdt:P57 wd:Q8006 .\nwd:Q854990 wdt:P1040 wd:Q8006 .\nwd:Q854990 wdt:P1431 wd:Q8006\n}",
        "questionWithBrackets": "Was [Kagemusha] directed by , executive produced by , and edited by [Akira Kurosawa]"
    },
    {
        "questionIdx": 59768,
        "questionPatternModEntities": "Was M1 distributed by M0 's child and distributed by M2 , M3 , M4 , and M5",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] and [VP_SIMPLE] by [entity] , [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 ?x0 .\nM1 P1 M2 .\nM1 P1 M3 .\nM1 P1 M4 .\nM1 P1 M5\n}",
        "recursionDepth": 37,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P749 wd:Q866 .\nwd:Q17415814 wdt:P750 ?x0 .\nwd:Q17415814 wdt:P750 wd:Q9589 .\nwd:Q17415814 wdt:P750 wd:Q602243 .\nwd:Q17415814 wdt:P750 wd:Q28404534 .\nwd:Q17415814 wdt:P750 wd:Q689141\n}",
        "questionWithBrackets": "Was [Woppaa] distributed by [YouTube] 's child and distributed by [YouTube Music] , [Deezer] , [Spotify] , and [iTunes]"
    },
    {
        "questionIdx": 59773,
        "questionPatternModEntities": "Was M1 distributed by M2 and M3 , distributed by M4 , and distributed by a child of M0",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] and [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 ?x0 .\nM1 P1 M2 .\nM1 P1 M3 .\nM1 P1 M4\n}",
        "recursionDepth": 42,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P749 wd:Q866 .\nwd:Q104996560 wdt:P750 ?x0 .\nwd:Q104996560 wdt:P750 wd:Q19711013 .\nwd:Q104996560 wdt:P750 wd:Q28404534 .\nwd:Q104996560 wdt:P750 wd:Q602243\n}",
        "questionWithBrackets": "Was [Dark Side] distributed by [Tidal] and [YouTube Music] , distributed by [Deezer] , and distributed by a child of [YouTube]"
    },
    {
        "questionIdx": 59774,
        "questionPatternModEntities": "Was M0 distributed by M1 and M2 , distributed by M3 , produced by M6 , and distributed by M4 and M5",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] and [entity] , [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P0 M3 .\nM0 P0 M4 .\nM0 P0 M5 .\nM0 P1 M6\n}",
        "recursionDepth": 49,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q692821 wdt:P750 wd:Q145 .\nwd:Q692821 wdt:P750 wd:Q5371838 .\nwd:Q692821 wdt:P750 wd:Q80948336 .\nwd:Q692821 wdt:P750 wd:Q9589 .\nwd:Q692821 wdt:P750 wd:Q907311 .\nwd:Q692821 wdt:P162|wdt:P272 wd:Q7684047\n}",
        "questionWithBrackets": "Was [My Summer of Love] distributed by [Vudu] and [Netflix] , distributed by [FandangoNow] , produced by [Tanya Seghatchian] , and distributed by [United Kingdom] and [iTunes]"
    },
    {
        "questionIdx": 59794,
        "questionPatternModEntities": "Was M1 distributed by M2 and M3 , distributed by M0 's child , distributed by M4 , and distributed by M5",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] and [entity] , [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 ?x0 .\nM1 P1 M2 .\nM1 P1 M3 .\nM1 P1 M4 .\nM1 P1 M5\n}",
        "recursionDepth": 49,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P749 wd:Q866 .\nwd:Q17415814 wdt:P750 ?x0 .\nwd:Q17415814 wdt:P750 wd:Q9589 .\nwd:Q17415814 wdt:P750 wd:Q602243 .\nwd:Q17415814 wdt:P750 wd:Q28404534 .\nwd:Q17415814 wdt:P750 wd:Q689141\n}",
        "questionWithBrackets": "Was [Woppaa] distributed by [Deezer] and [Spotify] , distributed by [YouTube] 's child , distributed by [iTunes] , and distributed by [YouTube Music]"
    },
    {
        "questionIdx": 59797,
        "questionPatternModEntities": "Was M1 distributed by M2 , M3 , M4 , and M5 and distributed by a parent of M0",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] , [entity] , [entity] , and [entity] and [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 ?x0 .\nM1 P1 M2 .\nM1 P1 M3 .\nM1 P1 M4 .\nM1 P1 M5\n}",
        "recursionDepth": 39,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q223142 .\nwd:Q11280072 wdt:P750 ?x0 .\nwd:Q11280072 wdt:P750 wd:Q11298273 .\nwd:Q11280072 wdt:P750 wd:Q3884 .\nwd:Q11280072 wdt:P750 wd:Q337535 .\nwd:Q11280072 wdt:P750 wd:Q5366830\n}",
        "questionWithBrackets": "Was [Monobeno] distributed by [Amazon] , [DMM.com] , [Steam] , and [Gyutto] and distributed by a parent of [Box Office Mojo]"
    },
    {
        "questionIdx": 59804,
        "questionPatternModEntities": "Was M1 distributed by M2 , M3 , and M4 and distributed by M0 's parent",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] , [entity] , and [entity] and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 ?x0 .\nM1 P1 M2 .\nM1 P1 M3 .\nM1 P1 M4\n}",
        "recursionDepth": 34,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q223142 .\nwd:Q22129701 wdt:P750 ?x0 .\nwd:Q22129701 wdt:P750 wd:Q5366830 .\nwd:Q22129701 wdt:P750 wd:Q337535 .\nwd:Q22129701 wdt:P750 wd:Q11196047\n}",
        "questionWithBrackets": "Was [Sakuranomori Dreamers] distributed by [DMM.com] , [Steam] , and [DLsite] and distributed by [Box Office Mojo] 's parent"
    },
    {
        "questionIdx": 59816,
        "questionPatternModEntities": "Was M1 distributed by M2 , M3 , and M4 , distributed by M5 and M6 , and produced by a sibling of M0",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] , [entity] , and [entity] , [VP_SIMPLE] by [entity] and [entity] , and [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nM1 P1 M2 .\nM1 P1 M3 .\nM1 P1 M4 .\nM1 P1 M5 .\nM1 P1 M6 .\nM1 P2 ?x0\n}",
        "recursionDepth": 49,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P3373 wd:Q99693584 .\nFILTER ( ?x0 != wd:Q99693584 ) .\nwd:Q102310431 wdt:P750 wd:Q3884 .\nwd:Q102310431 wdt:P750 wd:Q9589 .\nwd:Q102310431 wdt:P750 wd:Q602243 .\nwd:Q102310431 wdt:P750 wd:Q9593 .\nwd:Q102310431 wdt:P750 wd:Q20056642 .\nwd:Q102310431 wdt:P162|wdt:P272 ?x0\n}",
        "questionWithBrackets": "Was [Fall Into The Sun] distributed by [Deezer] , [iTunes] , and [Apple Music] , distributed by [iTunes Store] and [Amazon] , and produced by a sibling of [Dina Herrmann]"
    },
    {
        "questionIdx": 59822,
        "questionPatternModEntities": "Was M0 distributed by M1 and M2 , distributed by M3 and M4 , produced by M6 , and distributed by M5",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] and [entity] , [VP_SIMPLE] by [entity] and [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P0 M3 .\nM0 P0 M4 .\nM0 P0 M5 .\nM0 P1 M6\n}",
        "recursionDepth": 49,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q692821 wdt:P750 wd:Q145 .\nwd:Q692821 wdt:P750 wd:Q5371838 .\nwd:Q692821 wdt:P750 wd:Q907311 .\nwd:Q692821 wdt:P750 wd:Q80948336 .\nwd:Q692821 wdt:P750 wd:Q9589 .\nwd:Q692821 wdt:P162|wdt:P272 wd:Q79618131\n}",
        "questionWithBrackets": "Was [My Summer of Love] distributed by [iTunes] and [FandangoNow] , distributed by [Netflix] and [United Kingdom] , produced by [Apocalypso Pictures] , and distributed by [Vudu]"
    },
    {
        "questionIdx": 59825,
        "questionPatternModEntities": "Was M1 distributed by M2 , distributed by M3 , distributed by M4 and M5 , and distributed by M0 's child",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] and [entity] , and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 ?x0 .\nM1 P1 M2 .\nM1 P1 M3 .\nM1 P1 M4 .\nM1 P1 M5\n}",
        "recursionDepth": 49,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P749 wd:Q2283 .\nwd:Q19360088 wdt:P750 ?x0 .\nwd:Q19360088 wdt:P750 wd:Q59510068 .\nwd:Q19360088 wdt:P750 wd:Q1486288 .\nwd:Q19360088 wdt:P750 wd:Q42328566 .\nwd:Q19360088 wdt:P750 wd:Q73801\n}",
        "questionWithBrackets": "Was [The Escapists] distributed by [Xbox Game Studios] , distributed by [Epic Games Store] , distributed by [Humble Store] and [GOG.com] , and distributed by [Microsoft] 's child"
    },
    {
        "questionIdx": 59842,
        "questionPatternModEntities": "Was M0 distributed by M1 , produced by M6 , distributed by M2 and M3 , and distributed by M4 and M5",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] and [entity] , and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P0 M3 .\nM0 P0 M4 .\nM0 P0 M5 .\nM0 P1 M6\n}",
        "recursionDepth": 49,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q692821 wdt:P750 wd:Q145 .\nwd:Q692821 wdt:P750 wd:Q5371838 .\nwd:Q692821 wdt:P750 wd:Q80948336 .\nwd:Q692821 wdt:P750 wd:Q9589 .\nwd:Q692821 wdt:P750 wd:Q907311 .\nwd:Q692821 wdt:P162|wdt:P272 wd:Q7684047\n}",
        "questionWithBrackets": "Was [My Summer of Love] distributed by [iTunes] , produced by [Tanya Seghatchian] , distributed by [Vudu] and [United Kingdom] , and distributed by [Netflix] and [FandangoNow]"
    },
    {
        "questionIdx": 59851,
        "questionPatternModEntities": "Was M1 distributed by M0 's child and distributed by M2 and M3",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 ?x0 .\nM1 P1 M2 .\nM1 P1 M3\n}",
        "recursionDepth": 31,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P749 wd:Q8093 .\nwd:Q2701206 wdt:P750 ?x0 .\nwd:Q2701206 wdt:P750 wd:Q7039137 .\nwd:Q2701206 wdt:P750 wd:Q3070866\n}",
        "questionWithBrackets": "Was [Harvest Moon: Animal Parade] distributed by [Nintendo] 's child and distributed by [Nintendo Australia] and [Nintendo eShop]"
    },
    {
        "questionIdx": 59853,
        "questionPatternModEntities": "Was M1 distributed by M0 's child , distributed by M2 , M3 , and M4 , and distributed by M5",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] , [VP_SIMPLE] by [entity] , [entity] , and [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 ?x0 .\nM1 P1 M2 .\nM1 P1 M3 .\nM1 P1 M4 .\nM1 P1 M5\n}",
        "recursionDepth": 43,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P749 wd:Q2283 .\nwd:Q19360088 wdt:P750 ?x0 .\nwd:Q19360088 wdt:P750 wd:Q59510068 .\nwd:Q19360088 wdt:P750 wd:Q73801 .\nwd:Q19360088 wdt:P750 wd:Q42328566 .\nwd:Q19360088 wdt:P750 wd:Q1486288\n}",
        "questionWithBrackets": "Was [The Escapists] distributed by [Microsoft] 's child , distributed by [Epic Games Store] , [GOG.com] , and [Humble Store] , and distributed by [Xbox Game Studios]"
    },
    {
        "questionIdx": 59859,
        "questionPatternModEntities": "Was M0 distributed by M1 and M2 , distributed by M3 and M4 , and distributed by M5 and M6",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] and [entity] , [VP_SIMPLE] by [entity] and [entity] , and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P0 M3 .\nM0 P0 M4 .\nM0 P0 M5 .\nM0 P0 M6\n}",
        "recursionDepth": 44,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q106528085 wdt:P750 wd:Q3884 .\nwd:Q106528085 wdt:P750 wd:Q10855191 .\nwd:Q106528085 wdt:P750 wd:Q7553789 .\nwd:Q106528085 wdt:P750 wd:Q105329094 .\nwd:Q106528085 wdt:P750 wd:Q10851653 .\nwd:Q106528085 wdt:P750 wd:Q5366830\n}",
        "questionWithBrackets": "Was [Yoru Meguru, Bokura no Maigo Kyoushitsu] distributed by [Amazon] and [Melonbooks] , distributed by [getchu.com] and [Sofmap] , and distributed by [ALICENET] and [DMM.com]"
    },
    {
        "questionIdx": 59863,
        "questionPatternModEntities": "Was M1 distributed by M2 , M3 , M4 , M5 , and M6 and produced by M0 's spouse",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] , [entity] , [entity] , [entity] , and [entity] and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nM1 P1 M2 .\nM1 P1 M3 .\nM1 P1 M4 .\nM1 P1 M5 .\nM1 P1 M6 .\nM1 P2 ?x0\n}",
        "recursionDepth": 40,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P26 wd:Q236138 .\nFILTER ( ?x0 != wd:Q236138 ) .\nwd:Q8119033 wdt:P750 wd:Q9589 .\nwd:Q8119033 wdt:P750 wd:Q602243 .\nwd:Q8119033 wdt:P750 wd:Q19711013 .\nwd:Q8119033 wdt:P750 wd:Q3238917 .\nwd:Q8119033 wdt:P750 wd:Q689141 .\nwd:Q8119033 wdt:P162|wdt:P272 ?x0\n}",
        "questionWithBrackets": "Was [Random Access Memories] distributed by [iTunes] , [Deezer] , [Google Play Music] , [Spotify] , and [Tidal] and produced by [\u00c9lodie Bouchez] 's spouse"
    },
    {
        "questionIdx": 59865,
        "questionPatternModEntities": "Was M0 distributed by M1 and M2 and distributed by M3",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] and [entity] and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P0 M3\n}",
        "recursionDepth": 27,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q692821 wdt:P750 wd:Q145 .\nwd:Q692821 wdt:P750 wd:Q9589 .\nwd:Q692821 wdt:P750 wd:Q80948336\n}",
        "questionWithBrackets": "Was [My Summer of Love] distributed by [United Kingdom] and [iTunes] and distributed by [FandangoNow]"
    },
    {
        "questionIdx": 59866,
        "questionPatternModEntities": "Was M1 distributed by M0 's child and distributed by M2 , M3 , M4 , M5 , and M6",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] and [VP_SIMPLE] by [entity] , [entity] , [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 ?x0 .\nM1 P1 M2 .\nM1 P1 M3 .\nM1 P1 M4 .\nM1 P1 M5 .\nM1 P1 M6\n}",
        "recursionDepth": 40,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P749 wd:Q2283 .\nwd:Q19360088 wdt:P750 ?x0 .\nwd:Q19360088 wdt:P750 wd:Q193559 .\nwd:Q19360088 wdt:P750 wd:Q42328566 .\nwd:Q19360088 wdt:P750 wd:Q73801 .\nwd:Q19360088 wdt:P750 wd:Q1486288 .\nwd:Q19360088 wdt:P750 wd:Q337535\n}",
        "questionWithBrackets": "Was [The Escapists] distributed by [Microsoft] 's child and distributed by [GOG.com] , [Steam] , [Valve Corporation] , [Humble Store] , and [Xbox Game Studios]"
    },
    {
        "questionIdx": 59892,
        "questionPatternModEntities": "Was M0 produced by M6 , distributed by M1 and M2 , distributed by M3 and M4 , and distributed by M5",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] and [entity] , [VP_SIMPLE] by [entity] and [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P0 M3 .\nM0 P0 M4 .\nM0 P0 M5 .\nM0 P1 M6\n}",
        "recursionDepth": 49,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q692821 wdt:P750 wd:Q145 .\nwd:Q692821 wdt:P750 wd:Q5371838 .\nwd:Q692821 wdt:P750 wd:Q907311 .\nwd:Q692821 wdt:P750 wd:Q80948336 .\nwd:Q692821 wdt:P750 wd:Q9589 .\nwd:Q692821 wdt:P162|wdt:P272 wd:Q79618131\n}",
        "questionWithBrackets": "Was [My Summer of Love] produced by [Apocalypso Pictures] , distributed by [iTunes] and [FandangoNow] , distributed by [Vudu] and [United Kingdom] , and distributed by [Netflix]"
    },
    {
        "questionIdx": 59894,
        "questionPatternModEntities": "Was M0 produced by M1 , directed by M2 , and directed by M3",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M2 .\nM0 P1 M3\n}",
        "recursionDepth": 32,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q943192 wdt:P57 wd:Q280187 .\nwd:Q943192 wdt:P57 wd:Q28439679 .\nwd:Q943192 wdt:P162|wdt:P272 wd:Q7414\n}",
        "questionWithBrackets": "Was [Fantasia] produced by [The Walt Disney Company] , directed by [Norm Ferguson] , and directed by [Paul Satterfield]"
    },
    {
        "questionIdx": 59898,
        "questionPatternModEntities": "Was M0 produced by M3 and distributed by M1 and M2",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P1 M3\n}",
        "recursionDepth": 27,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q21825325 wdt:P750 wd:Q8093 .\nwd:Q21825325 wdt:P750 wd:Q875920 .\nwd:Q21825325 wdt:P162|wdt:P272 wd:Q947930\n}",
        "questionWithBrackets": "Was [Pok\u00e9mon the Movie: Volcanion and the Exquisite Magearna] produced by [OLM, Inc.] and distributed by [T\u014dh\u014d] and [Nintendo]"
    },
    {
        "questionIdx": 59957,
        "questionPatternModEntities": "Was M2 founded by M0 's male employee",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nM2 P2 ?x0\n}",
        "recursionDepth": 21,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P108 wd:Q9531 .\n?x0 wdt:P21 wd:Q6581097 .\nwd:Q3520623 wdt:P112 ?x0\n}",
        "questionWithBrackets": "Was [The Digital Village] founded by [BBC] 's male employee"
    },
    {
        "questionIdx": 60001,
        "questionPatternModEntities": "Was M2 edited by and executive produced by a male parent of M1",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by and [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nM2 P2 ?x0 .\nM2 P3 ?x0\n}",
        "recursionDepth": 32,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q1620638 .\n?x0 wdt:P21 wd:Q6581097 .\nwd:Q854990 wdt:P1040 ?x0 .\nwd:Q854990 wdt:P1431 ?x0\n}",
        "questionWithBrackets": "Was [Kagemusha] edited by and executive produced by a male parent of [Hisao Kurosawa]"
    },
    {
        "questionIdx": 60012,
        "questionPatternModEntities": "Was M2 executive produced by and edited by a male parent of M1",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by and [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nM2 P2 ?x0 .\nM2 P3 ?x0\n}",
        "recursionDepth": 32,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q1620638 .\n?x0 wdt:P21 wd:Q6581097 .\nwd:Q854990 wdt:P1040 ?x0 .\nwd:Q854990 wdt:P1431 ?x0\n}",
        "questionWithBrackets": "Was [Kagemusha] executive produced by and edited by a male parent of [Hisao Kurosawa]"
    },
    {
        "questionIdx": 60040,
        "questionPatternModEntities": "Was M0 written by M1 and edited by M2",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M2\n}",
        "recursionDepth": 23,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q24911 wdt:P1040 wd:Q24907 .\nwd:Q24911 wdt:P58 wd:Q3183909\n}",
        "questionWithBrackets": "Was [The Last Winter] written by [J\u00f8rgen Roos] and edited by [Anker S\u00f8rensen]"
    },
    {
        "questionIdx": 60085,
        "questionPatternModEntities": "Was M0 's sibling M1 's employee",
        "questionTemplate": "Was [entity] 's [ROLE_SIMPLE] [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M0 )\n}",
        "recursionDepth": 15,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P108 wd:Q83164 .\n?x0 wdt:P3373 wd:Q2655 .\nFILTER ( ?x0 != wd:Q2655 )\n}",
        "questionWithBrackets": "Was [John Franklin] 's sibling [East India Company] 's employee"
    },
    {
        "questionIdx": 60128,
        "questionPatternModEntities": "Was M2 a female spouse of a male spouse of M1",
        "questionTemplate": "Was [entity] a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M1 ) .\nFILTER ( M2 != ?x0 ) .\nM2 P0 M3 .\nM2 P1 ?x0\n}",
        "recursionDepth": 29,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P21 wd:Q6581097 .\n?x0 wdt:P26 wd:Q2259 .\nFILTER ( ?x0 != wd:Q2259 ) .\nFILTER ( wd:Q152626 != ?x0 ) .\nwd:Q152626 wdt:P21 wd:Q6581072 .\nwd:Q152626 wdt:P26 ?x0\n}",
        "questionWithBrackets": "Was [Pomponia Caecilia Attica] a female spouse of a male spouse of [Julia the Elder]"
    },
    {
        "questionIdx": 60139,
        "questionPatternModEntities": "Was M0 's sibling M1 's Italian employee",
        "questionTemplate": "Was [entity] 's [ROLE_SIMPLE] [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P2 M2 .\nFILTER ( ?x0 != M0 )\n}",
        "recursionDepth": 20,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P108 wd:Q1543 .\n?x0 wdt:P27 wd:Q38 .\n?x0 wdt:P3373 wd:Q2050307 .\nFILTER ( ?x0 != wd:Q2050307 )\n}",
        "questionWithBrackets": "Was [Paolo Berlusconi] 's sibling [A.C. Milan] 's Italian employee"
    },
    {
        "questionIdx": 60144,
        "questionPatternModEntities": "Was M4 M3 's Spanish French male parent 's spouse",
        "questionTemplate": "Was [entity] [entity] 's [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P1 M2 .\n?x0 P2 M3 .\nFILTER ( M4 != ?x0 ) .\nM4 P3 ?x0\n}",
        "recursionDepth": 30,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q464657 .\n?x0 wdt:P21 wd:Q6581097 .\n?x0 wdt:P27 wd:Q29 .\n?x0 wdt:P27 wd:Q142 .\nFILTER ( wd:Q233798 != ?x0 ) .\nwd:Q233798 wdt:P26 ?x0\n}",
        "questionWithBrackets": "Was [Princess Maria Theresa of Savoy] [Charles Ferdinand, Duke of Berry] 's Spanish French male parent 's spouse"
    },
    {
        "questionIdx": 60192,
        "questionPatternModEntities": "Was M1 's Japanese Canadian sibling M0",
        "questionTemplate": "Was [entity] 's [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nFILTER ( M0 != M1 ) .\nM0 P0 M1 .\nM0 P1 M2 .\nM0 P1 M3\n}",
        "recursionDepth": 21,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nFILTER ( wd:Q5733248 != wd:Q6810897 ) .\nwd:Q5733248 wdt:P27 wd:Q17 .\nwd:Q5733248 wdt:P27 wd:Q16 .\nwd:Q5733248 wdt:P3373 wd:Q6810897\n}",
        "questionWithBrackets": "Was [Mel Wakabayashi] 's Japanese Canadian sibling [Herb Wakabayashi]"
    },
    {
        "questionIdx": 60204,
        "questionPatternModEntities": "Was M0 written by M1 , written by M2 , and produced by M3",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P1 M3\n}",
        "recursionDepth": 32,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q1437321 wdt:P162|wdt:P272 wd:Q3569323 .\nwd:Q1437321 wdt:P58 wd:Q4465 .\nwd:Q1437321 wdt:P58 wd:Q5174827\n}",
        "questionWithBrackets": "Was [Forgotten Silver] written by [Costa Botes] , written by [Peter Jackson] , and produced by [WingNut Films]"
    },
    {
        "questionIdx": 60247,
        "questionPatternModEntities": "Was M0 directed by , edited by , and written by M1 , M2 , and M3",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P0 M3 .\nM0 P1 M1 .\nM0 P1 M2 .\nM0 P1 M3 .\nM0 P2 M1 .\nM0 P2 M2 .\nM0 P2 M3\n}",
        "recursionDepth": 33,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q20729551 wdt:P57 wd:Q562108 .\nwd:Q20729551 wdt:P57 wd:Q1687239 .\nwd:Q20729551 wdt:P57 wd:Q35979475 .\nwd:Q20729551 wdt:P1040 wd:Q562108 .\nwd:Q20729551 wdt:P1040 wd:Q1687239 .\nwd:Q20729551 wdt:P1040 wd:Q35979475 .\nwd:Q20729551 wdt:P58 wd:Q562108 .\nwd:Q20729551 wdt:P58 wd:Q1687239 .\nwd:Q20729551 wdt:P58 wd:Q35979475\n}",
        "questionWithBrackets": "Was [Stop for Bud] directed by , edited by , and written by [J\u00f8rgen Leth] , [Ole John] , and [Jens J\u00f8rgen Thorsen]"
    },
    {
        "questionIdx": 60261,
        "questionPatternModEntities": "Was M0 edited and directed by M1 , M2 , and M3",
        "questionTemplate": "Was [entity] [VP_SIMPLE] and [VP_SIMPLE] by [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P0 M3 .\nM0 P1 M1 .\nM0 P1 M2 .\nM0 P1 M3\n}",
        "recursionDepth": 26,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q20729551 wdt:P57 wd:Q562108 .\nwd:Q20729551 wdt:P57 wd:Q1687239 .\nwd:Q20729551 wdt:P57 wd:Q35979475 .\nwd:Q20729551 wdt:P1040 wd:Q562108 .\nwd:Q20729551 wdt:P1040 wd:Q1687239 .\nwd:Q20729551 wdt:P1040 wd:Q35979475\n}",
        "questionWithBrackets": "Was [Stop for Bud] edited and directed by [J\u00f8rgen Leth] , [Jens J\u00f8rgen Thorsen] , and [Ole John]"
    },
    {
        "questionIdx": 60262,
        "questionPatternModEntities": "Was M0 edited and written by M1 , M2 , and M3",
        "questionTemplate": "Was [entity] [VP_SIMPLE] and [VP_SIMPLE] by [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P0 M3 .\nM0 P1 M1 .\nM0 P1 M2 .\nM0 P1 M3\n}",
        "recursionDepth": 26,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q20729551 wdt:P1040 wd:Q562108 .\nwd:Q20729551 wdt:P1040 wd:Q1687239 .\nwd:Q20729551 wdt:P1040 wd:Q35979475 .\nwd:Q20729551 wdt:P58 wd:Q562108 .\nwd:Q20729551 wdt:P58 wd:Q1687239 .\nwd:Q20729551 wdt:P58 wd:Q35979475\n}",
        "questionWithBrackets": "Was [Stop for Bud] edited and written by [Ole John] , [Jens J\u00f8rgen Thorsen] , and [J\u00f8rgen Leth]"
    },
    {
        "questionIdx": 60272,
        "questionPatternModEntities": "Was M0 edited by M1 , directed by M3 , and edited by M2",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P1 M3\n}",
        "recursionDepth": 32,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q181795 wdt:P57 wd:Q119348 .\nwd:Q181795 wdt:P1040 wd:Q38222 .\nwd:Q181795 wdt:P1040 wd:Q429973\n}",
        "questionWithBrackets": "Was [Star Wars: Episode V \u2013 The Empire Strikes Back] edited by [George Lucas] , directed by [Irvin Kershner] , and edited by [Paul Hirsch]"
    },
    {
        "questionIdx": 60294,
        "questionPatternModEntities": "Was M1 edited by M2 , directed by M5 , edited by M3 and M4 , and executive produced by M0 's parent",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] and [entity] , and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 ?x0 .\nM1 P2 M2 .\nM1 P2 M3 .\nM1 P2 M4 .\nM1 P3 M5\n}",
        "recursionDepth": 50,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q6377498 .\nwd:Q1740171 wdt:P57 wd:Q363989 .\nwd:Q1740171 wdt:P1040 wd:Q614630 .\nwd:Q1740171 wdt:P1040 wd:Q7820333 .\nwd:Q1740171 wdt:P1040 wd:Q15835006 .\nwd:Q1740171 wdt:P1431 ?x0\n}",
        "questionWithBrackets": "Was [Mishima: A Life in Four Chapters] edited by [Michael Chandler] , directed by [Paul Schrader] , edited by [Tomoyo \u014cshima] and [Michael Chandler] , and executive produced by [Katie Lucas] 's parent"
    },
    {
        "questionIdx": 60302,
        "questionPatternModEntities": "Was M1 edited by a parent of M0 , edited by M2 , M3 , and M4 , and directed by M5",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity] , [VP_SIMPLE] by [entity] , [entity] , and [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 ?x0 .\nM1 P1 M2 .\nM1 P1 M3 .\nM1 P1 M4 .\nM1 P2 M5\n}",
        "recursionDepth": 45,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q573338 .\nwd:Q14566553 wdt:P57 wd:Q1273122 .\nwd:Q14566553 wdt:P1040 ?x0 .\nwd:Q14566553 wdt:P1040 wd:Q31294 .\nwd:Q14566553 wdt:P1040 wd:Q18354431 .\nwd:Q14566553 wdt:P1040 wd:Q1181629\n}",
        "questionWithBrackets": "Was [Fifty Shades of Grey] edited by a parent of [Anthony Hickox] , edited by [Debra Neil-Fisher] , [Lisa Gunning] , and [Anne V. Coates] , and directed by [Sam Taylor-Johnson]"
    },
    {
        "questionIdx": 60304,
        "questionPatternModEntities": "Was M0 edited by and directed by M1 , M2 , and M3",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by and [VP_SIMPLE] by [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P0 M3 .\nM0 P1 M1 .\nM0 P1 M2 .\nM0 P1 M3\n}",
        "recursionDepth": 27,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q20729551 wdt:P57 wd:Q562108 .\nwd:Q20729551 wdt:P57 wd:Q1687239 .\nwd:Q20729551 wdt:P57 wd:Q35979475 .\nwd:Q20729551 wdt:P1040 wd:Q562108 .\nwd:Q20729551 wdt:P1040 wd:Q1687239 .\nwd:Q20729551 wdt:P1040 wd:Q35979475\n}",
        "questionWithBrackets": "Was [Stop for Bud] edited by and directed by [J\u00f8rgen Leth] , [Ole John] , and [Jens J\u00f8rgen Thorsen]"
    },
    {
        "questionIdx": 60306,
        "questionPatternModEntities": "Was M0 edited by and directed by M1 , M2 , M3 , and M4",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by and [VP_SIMPLE] by [entity] , [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P0 M3 .\nM0 P0 M4 .\nM0 P1 M1 .\nM0 P1 M2 .\nM0 P1 M3 .\nM0 P1 M4\n}",
        "recursionDepth": 30,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q7906333 wdt:P57 wd:Q1291210 .\nwd:Q7906333 wdt:P57 wd:Q16198328 .\nwd:Q7906333 wdt:P57 wd:Q4207234 .\nwd:Q7906333 wdt:P57 wd:Q4679987 .\nwd:Q7906333 wdt:P1040 wd:Q1291210 .\nwd:Q7906333 wdt:P1040 wd:Q16198328 .\nwd:Q7906333 wdt:P1040 wd:Q4207234 .\nwd:Q7906333 wdt:P1040 wd:Q4679987\n}",
        "questionWithBrackets": "Was [V/H/S/2] edited by and directed by [Eduardo S\u00e1nchez] , [Jason Eisener] , [Adam Wingard] , and [Gareth Evans]"
    },
    {
        "questionIdx": 60307,
        "questionPatternModEntities": "Was M0 edited by and written by M1 , M2 , and M3",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by and [VP_SIMPLE] by [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P0 M3 .\nM0 P1 M1 .\nM0 P1 M2 .\nM0 P1 M3\n}",
        "recursionDepth": 27,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q20729551 wdt:P1040 wd:Q562108 .\nwd:Q20729551 wdt:P1040 wd:Q1687239 .\nwd:Q20729551 wdt:P1040 wd:Q35979475 .\nwd:Q20729551 wdt:P58 wd:Q562108 .\nwd:Q20729551 wdt:P58 wd:Q1687239 .\nwd:Q20729551 wdt:P58 wd:Q35979475\n}",
        "questionWithBrackets": "Was [Stop for Bud] edited by and written by [Jens J\u00f8rgen Thorsen] , [J\u00f8rgen Leth] , and [Ole John]"
    },
    {
        "questionIdx": 60309,
        "questionPatternModEntities": "Was M0 edited by and written by M1 , M2 , M3 , and M4",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by and [VP_SIMPLE] by [entity] , [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P0 M3 .\nM0 P0 M4 .\nM0 P1 M1 .\nM0 P1 M2 .\nM0 P1 M3 .\nM0 P1 M4\n}",
        "recursionDepth": 30,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q74535 wdt:P1040 wd:Q5836844 .\nwd:Q74535 wdt:P1040 wd:Q4022902 .\nwd:Q74535 wdt:P1040 wd:Q4023328 .\nwd:Q74535 wdt:P1040 wd:Q5658534 .\nwd:Q74535 wdt:P58 wd:Q5836844 .\nwd:Q74535 wdt:P58 wd:Q4022902 .\nwd:Q74535 wdt:P58 wd:Q4023328 .\nwd:Q74535 wdt:P58 wd:Q5658534\n}",
        "questionWithBrackets": "Was [The ABCs of Death] edited by and written by [Adri\u00e1n Garc\u00eda Bogliano] , [Y\u016bdai Yamaguchi] , [Ernesto D\u00edaz Espinoza] , and [Yoshihiro Nishimura]"
    },
    {
        "questionIdx": 60310,
        "questionPatternModEntities": "Was M0 edited by , directed by , and written by M1 , M2 , and M3",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P0 M3 .\nM0 P1 M1 .\nM0 P1 M2 .\nM0 P1 M3 .\nM0 P2 M1 .\nM0 P2 M2 .\nM0 P2 M3\n}",
        "recursionDepth": 33,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q20729551 wdt:P57 wd:Q562108 .\nwd:Q20729551 wdt:P57 wd:Q1687239 .\nwd:Q20729551 wdt:P57 wd:Q35979475 .\nwd:Q20729551 wdt:P1040 wd:Q562108 .\nwd:Q20729551 wdt:P1040 wd:Q1687239 .\nwd:Q20729551 wdt:P1040 wd:Q35979475 .\nwd:Q20729551 wdt:P58 wd:Q562108 .\nwd:Q20729551 wdt:P58 wd:Q1687239 .\nwd:Q20729551 wdt:P58 wd:Q35979475\n}",
        "questionWithBrackets": "Was [Stop for Bud] edited by , directed by , and written by [J\u00f8rgen Leth] , [Ole John] , and [Jens J\u00f8rgen Thorsen]"
    },
    {
        "questionIdx": 60318,
        "questionPatternModEntities": "Was M0 edited by , written by , and directed by M1 , M2 , and M3",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P0 M3 .\nM0 P1 M1 .\nM0 P1 M2 .\nM0 P1 M3 .\nM0 P2 M1 .\nM0 P2 M2 .\nM0 P2 M3\n}",
        "recursionDepth": 33,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q20729551 wdt:P57 wd:Q562108 .\nwd:Q20729551 wdt:P57 wd:Q1687239 .\nwd:Q20729551 wdt:P57 wd:Q35979475 .\nwd:Q20729551 wdt:P1040 wd:Q562108 .\nwd:Q20729551 wdt:P1040 wd:Q1687239 .\nwd:Q20729551 wdt:P1040 wd:Q35979475 .\nwd:Q20729551 wdt:P58 wd:Q562108 .\nwd:Q20729551 wdt:P58 wd:Q1687239 .\nwd:Q20729551 wdt:P58 wd:Q35979475\n}",
        "questionWithBrackets": "Was [Stop for Bud] edited by , written by , and directed by [Ole John] , [J\u00f8rgen Leth] , and [Jens J\u00f8rgen Thorsen]"
    },
    {
        "questionIdx": 60323,
        "questionPatternModEntities": "Was M0 edited , directed , and written by M1 and M2",
        "questionTemplate": "Was [entity] [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P1 M1 .\nM0 P1 M2 .\nM0 P2 M1 .\nM0 P2 M2\n}",
        "recursionDepth": 28,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q543382 wdt:P57 wd:Q44426 .\nwd:Q543382 wdt:P57 wd:Q96024 .\nwd:Q543382 wdt:P1040 wd:Q44426 .\nwd:Q543382 wdt:P1040 wd:Q96024 .\nwd:Q543382 wdt:P58 wd:Q44426 .\nwd:Q543382 wdt:P58 wd:Q96024\n}",
        "questionWithBrackets": "Was [Why Does Herr R. Run Amok?] edited , directed , and written by [Michael Fengler] and [Rainer Werner Fassbinder]"
    },
    {
        "questionIdx": 60363,
        "questionPatternModEntities": "Was M1 executive produced , written , edited , and produced by M0 's parent",
        "questionTemplate": "Was [entity] [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 ?x0 .\nM1 P2 ?x0 .\nM1 P3 ?x0 .\nM1 P4 ?x0\n}",
        "recursionDepth": 34,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q1620638 .\nwd:Q854990 wdt:P1040 ?x0 .\nwd:Q854990 wdt:P1431 ?x0 .\nwd:Q854990 wdt:P162|wdt:P272 ?x0 .\nwd:Q854990 wdt:P58 ?x0\n}",
        "questionWithBrackets": "Was [Kagemusha] executive produced , written , edited , and produced by [Hisao Kurosawa] 's parent"
    },
    {
        "questionIdx": 60374,
        "questionPatternModEntities": "Was M1 produced by , executive produced by , written by , and edited by M0 's parent",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 ?x0 .\nM1 P2 ?x0 .\nM1 P3 ?x0 .\nM1 P4 ?x0\n}",
        "recursionDepth": 37,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q1620638 .\nwd:Q854990 wdt:P1040 ?x0 .\nwd:Q854990 wdt:P1431 ?x0 .\nwd:Q854990 wdt:P162|wdt:P272 ?x0 .\nwd:Q854990 wdt:P58 ?x0\n}",
        "questionWithBrackets": "Was [Kagemusha] produced by , executive produced by , written by , and edited by [Hisao Kurosawa] 's parent"
    },
    {
        "questionIdx": 60380,
        "questionPatternModEntities": "Was M1 produced , written , executive produced , and edited by M0 's parent",
        "questionTemplate": "Was [entity] [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 ?x0 .\nM1 P2 ?x0 .\nM1 P3 ?x0 .\nM1 P4 ?x0\n}",
        "recursionDepth": 34,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q1620638 .\nwd:Q854990 wdt:P1040 ?x0 .\nwd:Q854990 wdt:P1431 ?x0 .\nwd:Q854990 wdt:P162|wdt:P272 ?x0 .\nwd:Q854990 wdt:P58 ?x0\n}",
        "questionWithBrackets": "Was [Kagemusha] produced , written , executive produced , and edited by [Hisao Kurosawa] 's parent"
    },
    {
        "questionIdx": 60382,
        "questionPatternModEntities": "Was M0 written and edited by M1 , M2 , M3 , and M4",
        "questionTemplate": "Was [entity] [VP_SIMPLE] and [VP_SIMPLE] by [entity] , [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P0 M3 .\nM0 P0 M4 .\nM0 P1 M1 .\nM0 P1 M2 .\nM0 P1 M3 .\nM0 P1 M4\n}",
        "recursionDepth": 29,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q74535 wdt:P1040 wd:Q5658534 .\nwd:Q74535 wdt:P1040 wd:Q4022902 .\nwd:Q74535 wdt:P1040 wd:Q4023328 .\nwd:Q74535 wdt:P1040 wd:Q5836844 .\nwd:Q74535 wdt:P58 wd:Q5658534 .\nwd:Q74535 wdt:P58 wd:Q4022902 .\nwd:Q74535 wdt:P58 wd:Q4023328 .\nwd:Q74535 wdt:P58 wd:Q5836844\n}",
        "questionWithBrackets": "Was [The ABCs of Death] written and edited by [Y\u016bdai Yamaguchi] , [Adri\u00e1n Garc\u00eda Bogliano] , [Yoshihiro Nishimura] , and [Ernesto D\u00edaz Espinoza]"
    },
    {
        "questionIdx": 60404,
        "questionPatternModEntities": "Was M0 written by and directed by M1 , M2 , M3 , and M4",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by and [VP_SIMPLE] by [entity] , [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P0 M3 .\nM0 P0 M4 .\nM0 P1 M1 .\nM0 P1 M2 .\nM0 P1 M3 .\nM0 P1 M4\n}",
        "recursionDepth": 30,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q1079 wdt:P57 wd:Q4500 .\nwd:Q1079 wdt:P57 wd:Q15042700 .\nwd:Q1079 wdt:P57 wd:Q7407299 .\nwd:Q1079 wdt:P57 wd:Q10307893 .\nwd:Q1079 wdt:P58 wd:Q4500 .\nwd:Q1079 wdt:P58 wd:Q15042700 .\nwd:Q1079 wdt:P58 wd:Q7407299 .\nwd:Q1079 wdt:P58 wd:Q10307893\n}",
        "questionWithBrackets": "Was [Breaking Bad] written by and directed by [Vince Gilligan] , [Thomas Schnauz] , [John Shiban] , and [Sam Catlin]"
    },
    {
        "questionIdx": 60405,
        "questionPatternModEntities": "Was M0 written by and edited by M1 , M2 , M3 , and M4",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by and [VP_SIMPLE] by [entity] , [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P0 M3 .\nM0 P0 M4 .\nM0 P1 M1 .\nM0 P1 M2 .\nM0 P1 M3 .\nM0 P1 M4\n}",
        "recursionDepth": 30,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q74535 wdt:P1040 wd:Q5658534 .\nwd:Q74535 wdt:P1040 wd:Q4022902 .\nwd:Q74535 wdt:P1040 wd:Q4023328 .\nwd:Q74535 wdt:P1040 wd:Q5836844 .\nwd:Q74535 wdt:P58 wd:Q5658534 .\nwd:Q74535 wdt:P58 wd:Q4022902 .\nwd:Q74535 wdt:P58 wd:Q4023328 .\nwd:Q74535 wdt:P58 wd:Q5836844\n}",
        "questionWithBrackets": "Was [The ABCs of Death] written by and edited by [Y\u016bdai Yamaguchi] , [Adri\u00e1n Garc\u00eda Bogliano] , [Ernesto D\u00edaz Espinoza] , and [Yoshihiro Nishimura]"
    },
    {
        "questionIdx": 60406,
        "questionPatternModEntities": "Was M0 written by , directed by , and edited by M1 , M2 , and M3",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P0 M3 .\nM0 P1 M1 .\nM0 P1 M2 .\nM0 P1 M3 .\nM0 P2 M1 .\nM0 P2 M2 .\nM0 P2 M3\n}",
        "recursionDepth": 33,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q20729551 wdt:P57 wd:Q562108 .\nwd:Q20729551 wdt:P57 wd:Q1687239 .\nwd:Q20729551 wdt:P57 wd:Q35979475 .\nwd:Q20729551 wdt:P1040 wd:Q562108 .\nwd:Q20729551 wdt:P1040 wd:Q1687239 .\nwd:Q20729551 wdt:P1040 wd:Q35979475 .\nwd:Q20729551 wdt:P58 wd:Q562108 .\nwd:Q20729551 wdt:P58 wd:Q1687239 .\nwd:Q20729551 wdt:P58 wd:Q35979475\n}",
        "questionWithBrackets": "Was [Stop for Bud] written by , directed by , and edited by [J\u00f8rgen Leth] , [Jens J\u00f8rgen Thorsen] , and [Ole John]"
    },
    {
        "questionIdx": 60407,
        "questionPatternModEntities": "Was M0 written by , edited by , and directed by M1 , M2 , M3 , and M4",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity] , [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P0 M3 .\nM0 P0 M4 .\nM0 P1 M1 .\nM0 P1 M2 .\nM0 P1 M3 .\nM0 P1 M4 .\nM0 P2 M1 .\nM0 P2 M2 .\nM0 P2 M3 .\nM0 P2 M4\n}",
        "recursionDepth": 36,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q74535 wdt:P57 wd:Q5658534 .\nwd:Q74535 wdt:P57 wd:Q4023328 .\nwd:Q74535 wdt:P57 wd:Q5836844 .\nwd:Q74535 wdt:P57 wd:Q4022902 .\nwd:Q74535 wdt:P1040 wd:Q5658534 .\nwd:Q74535 wdt:P1040 wd:Q4023328 .\nwd:Q74535 wdt:P1040 wd:Q5836844 .\nwd:Q74535 wdt:P1040 wd:Q4022902 .\nwd:Q74535 wdt:P58 wd:Q5658534 .\nwd:Q74535 wdt:P58 wd:Q4023328 .\nwd:Q74535 wdt:P58 wd:Q5836844 .\nwd:Q74535 wdt:P58 wd:Q4022902\n}",
        "questionWithBrackets": "Was [The ABCs of Death] written by , edited by , and directed by [Ernesto D\u00edaz Espinoza] , [Y\u016bdai Yamaguchi] , [Yoshihiro Nishimura] , and [Adri\u00e1n Garc\u00eda Bogliano]"
    },
    {
        "questionIdx": 60411,
        "questionPatternModEntities": "Was M1 written by , executive produced by , edited by , and produced by M0 's parent",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 ?x0 .\nM1 P2 ?x0 .\nM1 P3 ?x0 .\nM1 P4 ?x0\n}",
        "recursionDepth": 37,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q1620638 .\nwd:Q854990 wdt:P1040 ?x0 .\nwd:Q854990 wdt:P1431 ?x0 .\nwd:Q854990 wdt:P162|wdt:P272 ?x0 .\nwd:Q854990 wdt:P58 ?x0\n}",
        "questionWithBrackets": "Was [Kagemusha] written by , executive produced by , edited by , and produced by [Hisao Kurosawa] 's parent"
    },
    {
        "questionIdx": 60418,
        "questionPatternModEntities": "Was M0 written , directed , and edited by M1 , M2 , and M3",
        "questionTemplate": "Was [entity] [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P0 M3 .\nM0 P1 M1 .\nM0 P1 M2 .\nM0 P1 M3 .\nM0 P2 M1 .\nM0 P2 M2 .\nM0 P2 M3\n}",
        "recursionDepth": 31,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q20729551 wdt:P57 wd:Q562108 .\nwd:Q20729551 wdt:P57 wd:Q1687239 .\nwd:Q20729551 wdt:P57 wd:Q35979475 .\nwd:Q20729551 wdt:P1040 wd:Q562108 .\nwd:Q20729551 wdt:P1040 wd:Q1687239 .\nwd:Q20729551 wdt:P1040 wd:Q35979475 .\nwd:Q20729551 wdt:P58 wd:Q562108 .\nwd:Q20729551 wdt:P58 wd:Q1687239 .\nwd:Q20729551 wdt:P58 wd:Q35979475\n}",
        "questionWithBrackets": "Was [Stop for Bud] written , directed , and edited by [Jens J\u00f8rgen Thorsen] , [Ole John] , and [J\u00f8rgen Leth]"
    },
    {
        "questionIdx": 60420,
        "questionPatternModEntities": "Was M0 written , edited , and directed by M1 , M2 , M3 , and M4",
        "questionTemplate": "Was [entity] [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by [entity] , [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P0 M3 .\nM0 P0 M4 .\nM0 P1 M1 .\nM0 P1 M2 .\nM0 P1 M3 .\nM0 P1 M4 .\nM0 P2 M1 .\nM0 P2 M2 .\nM0 P2 M3 .\nM0 P2 M4\n}",
        "recursionDepth": 34,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q74535 wdt:P57 wd:Q5836844 .\nwd:Q74535 wdt:P57 wd:Q4022902 .\nwd:Q74535 wdt:P57 wd:Q4023328 .\nwd:Q74535 wdt:P57 wd:Q5658534 .\nwd:Q74535 wdt:P1040 wd:Q5836844 .\nwd:Q74535 wdt:P1040 wd:Q4022902 .\nwd:Q74535 wdt:P1040 wd:Q4023328 .\nwd:Q74535 wdt:P1040 wd:Q5658534 .\nwd:Q74535 wdt:P58 wd:Q5836844 .\nwd:Q74535 wdt:P58 wd:Q4022902 .\nwd:Q74535 wdt:P58 wd:Q4023328 .\nwd:Q74535 wdt:P58 wd:Q5658534\n}",
        "questionWithBrackets": "Was [The ABCs of Death] written , edited , and directed by [Y\u016bdai Yamaguchi] , [Adri\u00e1n Garc\u00eda Bogliano] , [Yoshihiro Nishimura] , and [Ernesto D\u00edaz Espinoza]"
    },
    {
        "questionIdx": 60421,
        "questionPatternModEntities": "Was M0 written , edited , and directed by M1 , M2 , and M3",
        "questionTemplate": "Was [entity] [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P0 M3 .\nM0 P1 M1 .\nM0 P1 M2 .\nM0 P1 M3 .\nM0 P2 M1 .\nM0 P2 M2 .\nM0 P2 M3\n}",
        "recursionDepth": 31,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q20729551 wdt:P57 wd:Q562108 .\nwd:Q20729551 wdt:P57 wd:Q1687239 .\nwd:Q20729551 wdt:P57 wd:Q35979475 .\nwd:Q20729551 wdt:P1040 wd:Q562108 .\nwd:Q20729551 wdt:P1040 wd:Q1687239 .\nwd:Q20729551 wdt:P1040 wd:Q35979475 .\nwd:Q20729551 wdt:P58 wd:Q562108 .\nwd:Q20729551 wdt:P58 wd:Q1687239 .\nwd:Q20729551 wdt:P58 wd:Q35979475\n}",
        "questionWithBrackets": "Was [Stop for Bud] written , edited , and directed by [J\u00f8rgen Leth] , [Ole John] , and [Jens J\u00f8rgen Thorsen]"
    },
    {
        "questionIdx": 60448,
        "questionPatternModEntities": "Was M3 produced by a employee of M0 , M1 , and M2",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\nM3 P1 ?x0\n}",
        "recursionDepth": 25,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P108 wd:Q56760250 .\n?x0 wdt:P108 wd:Q38903 .\n?x0 wdt:P108 wd:Q334800 .\nwd:Q97647250 wdt:P162|wdt:P272 ?x0\n}",
        "questionWithBrackets": "Was [\u00bfD\u00f3nde est\u00e1n los ladrones?] produced by a employee of [PepsiCo] , [Universal Music Group] , and [Sony Music]"
    },
    {
        "questionIdx": 60478,
        "questionPatternModEntities": "Was M0 's sibling influenced by M1 and M2 , influenced by M3 , and influenced by M4 and M5",
        "questionTemplate": "Was [entity] 's [ROLE_SIMPLE] [VP_SIMPLE] by [entity] and [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\n?x0 P1 M3 .\n?x0 P1 M4 .\n?x0 P1 M5 .\nFILTER ( ?x0 != M0 )\n}",
        "recursionDepth": 44,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P737 wd:Q502 .\n?x0 wdt:P737 wd:Q713261 .\n?x0 wdt:P737 wd:Q218960 .\n?x0 wdt:P737 wd:Q535 .\n?x0 wdt:P737 wd:Q868 .\n?x0 wdt:P3373 wd:Q20645988 .\nFILTER ( ?x0 != wd:Q20645988 )\n}",
        "questionWithBrackets": "Was [Maria Tolstoy] 's sibling influenced by [Laurence Sterne] and [Petr Chel\u010dick\u00fd] , influenced by [Aristotle] , and influenced by [Stendhal] and [Victor Hugo]"
    },
    {
        "questionIdx": 60485,
        "questionPatternModEntities": "Was M4 M3 's Canadian female French parent 's spouse",
        "questionTemplate": "Was [entity] [entity] 's [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P1 M2 .\n?x0 P2 M3 .\nFILTER ( M4 != ?x0 ) .\nM4 P3 ?x0\n}",
        "recursionDepth": 30,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q3315962 .\n?x0 wdt:P21 wd:Q6581072 .\n?x0 wdt:P27 wd:Q16 .\n?x0 wdt:P27 wd:Q142 .\nFILTER ( wd:Q3132729 != ?x0 ) .\nwd:Q3132729 wdt:P26 ?x0\n}",
        "questionWithBrackets": "Was [Henry Deyglun] [Mireille Deyglun] 's Canadian female French parent 's spouse"
    },
    {
        "questionIdx": 60495,
        "questionPatternModEntities": "Was M0 a Mexican sibling of M1",
        "questionTemplate": "Was [entity] a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nFILTER ( M0 != M1 ) .\nM0 P0 M1 .\nM0 P1 M2\n}",
        "recursionDepth": 18,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nFILTER ( wd:Q17492 != wd:Q562337 ) .\nwd:Q17492 wdt:P27 wd:Q96 .\nwd:Q17492 wdt:P3373 wd:Q562337\n}",
        "questionWithBrackets": "Was [Jonathan dos Santos] a Mexican sibling of [Giovani dos Santos]"
    },
    {
        "questionIdx": 60496,
        "questionPatternModEntities": "Was M3 's British Japanese parent M0",
        "questionTemplate": "Was [entity] 's [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P1 M3\n}",
        "recursionDepth": 21,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q117012 wdt:P40|wdt:P355 wd:Q311238 .\nwd:Q117012 wdt:P27 wd:Q17 .\nwd:Q117012 wdt:P27 wd:Q145\n}",
        "questionWithBrackets": "Was [Sean Lennon] 's British Japanese parent [Yoko Ono]"
    },
    {
        "questionIdx": 60498,
        "questionPatternModEntities": "Was M0 a German Mexican parent of M3",
        "questionTemplate": "Was [entity] a [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P1 M3\n}",
        "recursionDepth": 23,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q87075 wdt:P40|wdt:P355 wd:Q4750428 .\nwd:Q87075 wdt:P27 wd:Q183 .\nwd:Q87075 wdt:P27 wd:Q96\n}",
        "questionWithBrackets": "Was [Max Cetto] a German Mexican parent of [Ana Mar\u00eda Cetto]"
    },
    {
        "questionIdx": 60502,
        "questionPatternModEntities": "Was M1 directed and written by a spouse of M0",
        "questionTemplate": "Was [entity] [VP_SIMPLE] and [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nM1 P1 ?x0 .\nM1 P2 ?x0\n}",
        "recursionDepth": 25,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P26 wd:Q105215736 .\nFILTER ( ?x0 != wd:Q105215736 ) .\nwd:Q1592282 wdt:P57 ?x0 .\nwd:Q1592282 wdt:P58 ?x0\n}",
        "questionWithBrackets": "Was [Head of State] directed and written by a spouse of [Malaak Compton]"
    },
    {
        "questionIdx": 60517,
        "questionPatternModEntities": "Was M0 a Japanese sibling of M1",
        "questionTemplate": "Was [entity] a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nFILTER ( M0 != M1 ) .\nM0 P0 M1 .\nM0 P1 M2\n}",
        "recursionDepth": 18,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nFILTER ( wd:Q60949 != wd:Q7244858 ) .\nwd:Q60949 wdt:P27 wd:Q17 .\nwd:Q60949 wdt:P3373 wd:Q7244858\n}",
        "questionWithBrackets": "Was [Emperor Shirakawa] a Japanese sibling of [Tokushi-naishinn\u014d]"
    },
    {
        "questionIdx": 60576,
        "questionPatternModEntities": "Was M0 's child 's employee M1",
        "questionTemplate": "Was [entity] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 ?x0\n}",
        "recursionDepth": 15,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P749 wd:Q1065 .\nwd:Q230850 wdt:P108 ?x0\n}",
        "questionWithBrackets": "Was [United Nations] 's child 's employee [Irina Bokova]"
    },
    {
        "questionIdx": 60624,
        "questionPatternModEntities": "Was M1 executive produced by M2 , produced by M4 , written by M0 's employee , and executive produced by M3",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 M2 .\nM1 P1 M3 .\nM1 P2 ?x0 .\nM1 P3 M4\n}",
        "recursionDepth": 47,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P108 wd:Q106255029 .\nwd:Q725578 wdt:P1431 wd:Q8877 .\nwd:Q725578 wdt:P1431 wd:Q202945 .\nwd:Q725578 wdt:P162|wdt:P272 wd:Q192557 .\nwd:Q725578 wdt:P58 ?x0\n}",
        "questionWithBrackets": "Was [Cowboys & Aliens] executive produced by [Ryan Kavanaugh] , produced by [DreamWorks] , written by [Sneaky Shark] 's employee , and executive produced by [Steven Spielberg]"
    },
    {
        "questionIdx": 60661,
        "questionPatternModEntities": "Was M0 M2 's male spouse",
        "questionTemplate": "Was [entity] [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\nFILTER ( M0 != M2 ) .\nM0 P0 M1 .\nM0 P1 M2\n}",
        "recursionDepth": 16,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nFILTER ( wd:Q222805 != wd:Q1480 ) .\nwd:Q222805 wdt:P21 wd:Q6581097 .\nwd:Q222805 wdt:P26 wd:Q1480\n}",
        "questionWithBrackets": "Was [Benigno Aquino Jr.] [Corazon Aquino] 's male spouse"
    },
    {
        "questionIdx": 60719,
        "questionPatternModEntities": "Was M0 a French sibling of M1",
        "questionTemplate": "Was [entity] a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nFILTER ( M0 != M1 ) .\nM0 P0 M1 .\nM0 P1 M2\n}",
        "recursionDepth": 18,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nFILTER ( wd:Q517 != wd:Q151083 ) .\nwd:Q517 wdt:P27 wd:Q142 .\nwd:Q517 wdt:P3373 wd:Q151083\n}",
        "questionWithBrackets": "Was [Napoleon] a French sibling of [Elisa Bonaparte]"
    },
    {
        "questionIdx": 60748,
        "questionPatternModEntities": "Was M1 's Canadian sibling M0",
        "questionTemplate": "Was [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nFILTER ( M0 != M1 ) .\nM0 P0 M1 .\nM0 P1 M2\n}",
        "recursionDepth": 16,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nFILTER ( wd:Q95019 != wd:Q8651 ) .\nwd:Q95019 wdt:P27 wd:Q16 .\nwd:Q95019 wdt:P3373 wd:Q8651\n}",
        "questionWithBrackets": "Was [Douglas Shearer] 's Canadian sibling [Norma Shearer]"
    },
    {
        "questionIdx": 60757,
        "questionPatternModEntities": "Was M6 's parent influenced by M0 and M1 , influenced by M2 , M3 , and M4 , and influenced by M5",
        "questionTemplate": "Was [entity] 's [ROLE_SIMPLE] [VP_SIMPLE] by [entity] and [entity] , [VP_SIMPLE] by [entity] , [entity] , and [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P0 M3 .\n?x0 P0 M4 .\n?x0 P0 M5 .\n?x0 P1 M6\n}",
        "recursionDepth": 47,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P737 wd:Q859 .\n?x0 wdt:P737 wd:Q125551 .\n?x0 wdt:P737 wd:Q132157 .\n?x0 wdt:P737 wd:Q913 .\n?x0 wdt:P737 wd:Q5264 .\n?x0 wdt:P737 wd:Q42458 .\n?x0 wdt:P40|wdt:P355 wd:Q2217419\n}",
        "questionWithBrackets": "Was [Nicomachus] 's parent influenced by [Hippocrates] and [Plato] , influenced by [Zeno of Elea] , [Parmenides] , and [Socrates] , and influenced by [Anaximander]"
    },
    {
        "questionIdx": 60758,
        "questionPatternModEntities": "Was M6 's parent influenced by M0 , M1 , and M2 , influenced by M3 , and influenced by M4 and M5",
        "questionTemplate": "Was [entity] 's [ROLE_SIMPLE] [VP_SIMPLE] by [entity] , [entity] , and [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P0 M3 .\n?x0 P0 M4 .\n?x0 P0 M5 .\n?x0 P1 M6\n}",
        "recursionDepth": 47,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P737 wd:Q868 .\n?x0 wdt:P737 wd:Q1067 .\n?x0 wdt:P737 wd:Q49767 .\n?x0 wdt:P737 wd:Q692 .\n?x0 wdt:P737 wd:Q41568 .\n?x0 wdt:P737 wd:Q37388 .\n?x0 wdt:P40|wdt:P355 wd:Q1385973\n}",
        "questionWithBrackets": "Was [Maurice Sand] 's parent influenced by [Aristotle] , [Dante Alighieri] , and [William Shakespeare] , influenced by [Michel de Montaigne] , and influenced by [Fran\u00e7ois-Ren\u00e9 de Chateaubriand] and [Francis Bacon]"
    },
    {
        "questionIdx": 60759,
        "questionPatternModEntities": "Was M6 's parent influenced by M0 and M1 , influenced by M2 , and influenced by M3 , M4 , and M5",
        "questionTemplate": "Was [entity] 's [ROLE_SIMPLE] [VP_SIMPLE] by [entity] and [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P0 M3 .\n?x0 P0 M4 .\n?x0 P0 M5 .\n?x0 P1 M6\n}",
        "recursionDepth": 47,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P737 wd:Q868 .\n?x0 wdt:P737 wd:Q6527 .\n?x0 wdt:P737 wd:Q37388 .\n?x0 wdt:P737 wd:Q692 .\n?x0 wdt:P737 wd:Q1067 .\n?x0 wdt:P737 wd:Q1290 .\n?x0 wdt:P40|wdt:P355 wd:Q1385973\n}",
        "questionWithBrackets": "Was [Maurice Sand] 's parent influenced by [Dante Alighieri] and [Aristotle] , influenced by [Jean-Jacques Rousseau] , and influenced by [William Shakespeare] , [Francis Bacon] , and [Blaise Pascal]"
    },
    {
        "questionIdx": 60780,
        "questionPatternModEntities": "Was M0 edited by M4 , written by M3 , edited by M5 , and executive produced by M1 and M2",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P1 M3 .\nM0 P2 M4 .\nM0 P2 M5\n}",
        "recursionDepth": 46,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q24075 wdt:P1040 wd:Q3376423 .\nwd:Q24075 wdt:P1040 wd:Q21280711 .\nwd:Q24075 wdt:P1431 wd:Q60100 .\nwd:Q24075 wdt:P1431 wd:Q2390812 .\nwd:Q24075 wdt:P58 wd:Q942914\n}",
        "questionWithBrackets": "Was [Godzilla] edited by [David Siegel] , written by [Terry Rossio] , edited by [Peter Amundson] , and executive produced by [Roland Emmerich] and [Ute Emmerich]"
    },
    {
        "questionIdx": 60788,
        "questionPatternModEntities": "Was M1 a child of M0 's employee",
        "questionTemplate": "Was [entity] a [ROLE_SIMPLE] of [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 ?x0\n}",
        "recursionDepth": 17,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P108 wd:Q15067369 .\nwd:Q2277744 wdt:P749 ?x0\n}",
        "questionWithBrackets": "Was [Avanade] a child of [Pierre Nanterme] 's employee"
    },
    {
        "questionIdx": 60806,
        "questionPatternModEntities": "Was M0 's Swedish sibling 's sibling M2",
        "questionTemplate": "Was [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] 's [ROLE_SIMPLE] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( M2 != ?x0 ) .\nM2 P0 ?x0\n}",
        "recursionDepth": 20,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P27 wd:Q34 .\n?x0 wdt:P3373 wd:Q75246921 .\nFILTER ( ?x0 != wd:Q75246921 ) .\nFILTER ( wd:Q86959 != ?x0 ) .\nwd:Q86959 wdt:P3373 ?x0\n}",
        "questionWithBrackets": "Was [Adelheid von Oldenburg] 's Swedish sibling 's sibling [Gerhard VI]"
    },
    {
        "questionIdx": 60815,
        "questionPatternModEntities": "Was M0 's sibling M2 's British spouse",
        "questionTemplate": "Was [entity] 's [ROLE_SIMPLE] [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P2 M2 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x0 != M2 )\n}",
        "recursionDepth": 20,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P27 wd:Q145 .\n?x0 wdt:P3373 wd:Q75381406 .\n?x0 wdt:P26 wd:Q280856 .\nFILTER ( ?x0 != wd:Q75381406 ) .\nFILTER ( ?x0 != wd:Q280856 )\n}",
        "questionWithBrackets": "Was [Violet Bowes-Lyon] 's sibling [George VI] 's British spouse"
    },
    {
        "questionIdx": 60816,
        "questionPatternModEntities": "Was M0 's sibling influenced by M1 's parent",
        "questionTemplate": "Was [entity] 's [ROLE_SIMPLE] [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 ?x1 .\n?x1 P2 M1 .\nFILTER ( ?x0 != M0 )\n}",
        "recursionDepth": 20,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P737 ?x1 .\n?x0 wdt:P3373 wd:Q105137970 .\n?x1 wdt:P40|wdt:P355 wd:Q15070044 .\nFILTER ( ?x0 != wd:Q105137970 )\n}",
        "questionWithBrackets": "Was [Elimane Samba Hane] 's sibling influenced by [Malia Obama] 's parent"
    },
    {
        "questionIdx": 60826,
        "questionPatternModEntities": "Was M2 influenced by a Italian parent of M1",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nM2 P2 ?x0\n}",
        "recursionDepth": 23,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q494547 .\n?x0 wdt:P27 wd:Q38 .\nwd:Q2296028 wdt:P737 ?x0\n}",
        "questionWithBrackets": "Was [Shunsuke Kikuchi] influenced by a Italian parent of [Andrea Morricone]"
    },
    {
        "questionIdx": 60834,
        "questionPatternModEntities": "Was M0 's child a spouse of M1",
        "questionTemplate": "Was [entity] 's [ROLE_SIMPLE] a [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M1 )\n}",
        "recursionDepth": 17,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P749 wd:Q1089760 .\n?x0 wdt:P26 wd:Q76375112 .\nFILTER ( ?x0 != wd:Q76375112 )\n}",
        "questionWithBrackets": "Was [Church Mission Society] 's child a spouse of [Eliazbeth Fristan]"
    },
    {
        "questionIdx": 60890,
        "questionPatternModEntities": "Was M0 a French Swedish male sibling of M1",
        "questionTemplate": "Was [entity] a [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nFILTER ( M0 != M1 ) .\nM0 P0 M1 .\nM0 P1 M2 .\nM0 P1 M3 .\nM0 P2 M4\n}",
        "recursionDepth": 28,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nFILTER ( wd:Q52927 != wd:Q15968159 ) .\nwd:Q52927 wdt:P21 wd:Q6581097 .\nwd:Q52927 wdt:P27 wd:Q34 .\nwd:Q52927 wdt:P27 wd:Q142 .\nwd:Q52927 wdt:P3373 wd:Q15968159\n}",
        "questionWithBrackets": "Was [Charles XIV John of Sweden] a French Swedish male sibling of [Jean-\u00c9vang\u00e9liste Bernadotte]"
    },
    {
        "questionIdx": 61001,
        "questionPatternModEntities": "Was M2 's male spouse M0 's sibling and spouse",
        "questionTemplate": "Was [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] [entity] 's [ROLE_SIMPLE] and [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P2 M0 .\n?x0 P2 M2 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x0 != M2 )\n}",
        "recursionDepth": 25,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P21 wd:Q6581097 .\n?x0 wdt:P3373 wd:Q40027 .\n?x0 wdt:P26 wd:Q40023 .\n?x0 wdt:P26 wd:Q40027 .\nFILTER ( ?x0 != wd:Q40023 ) .\nFILTER ( ?x0 != wd:Q40027 ) .\nFILTER ( ?x0 != wd:Q40027 )\n}",
        "questionWithBrackets": "Was [Cleopatra IV of Egypt] 's male spouse [Cleopatra Selene of Egypt and Syria] 's sibling and spouse"
    },
    {
        "questionIdx": 61068,
        "questionPatternModEntities": "Was M3 's Canadian spouse influenced by M0 and influenced by M1",
        "questionTemplate": "Was [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] [VP_SIMPLE] by [entity] and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P1 M2 .\n?x0 P2 M3 .\nFILTER ( ?x0 != M3 )\n}",
        "recursionDepth": 32,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P737 wd:Q714 .\n?x0 wdt:P737 wd:Q165911 .\n?x0 wdt:P27 wd:Q16 .\n?x0 wdt:P26 wd:Q20983703 .\nFILTER ( ?x0 != wd:Q20983703 )\n}",
        "questionWithBrackets": "Was [Hailey Baldwin] 's Canadian spouse influenced by [Stevie Wonder] and influenced by [Usher]"
    },
    {
        "questionIdx": 61069,
        "questionPatternModEntities": "Was M2 written by M3 , written by M0 's female sibling , and written by M4",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M0 ) .\nM2 P2 ?x0 .\nM2 P2 M3 .\nM2 P2 M4\n}",
        "recursionDepth": 41,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P21 wd:Q6581072 .\n?x0 wdt:P3373 wd:Q4208690 .\nFILTER ( ?x0 != wd:Q4208690 ) .\nwd:Q780469 wdt:P58 ?x0 .\nwd:Q780469 wdt:P58 wd:Q4636 .\nwd:Q780469 wdt:P58 wd:Q1677193\n}",
        "questionWithBrackets": "Was [Yentl] written by [Barbra Streisand] , written by [Roslyn Kind] 's female sibling , and written by [Jack Rosenthal]"
    },
    {
        "questionIdx": 61120,
        "questionPatternModEntities": "Was M1 's sequel 's prequel executive produced by and written by M0",
        "questionTemplate": "Was [entity] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE] [VP_SIMPLE] by and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x0 P1 M0 .\n?x0 P2 M0 .\n?x1 P3 M1\n}",
        "recursionDepth": 29,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P1431 wd:Q2071 .\n?x0 wdt:P156 ?x1 .\n?x0 wdt:P58 wd:Q2071 .\n?x1 wdt:P155 wd:Q1140578\n}",
        "questionWithBrackets": "Was [Twin Peaks: Fire Walk with Me] 's sequel 's prequel executive produced by and written by [David Lynch]"
    },
    {
        "questionIdx": 61265,
        "questionPatternModEntities": "Was M0 a American employee of M1",
        "questionTemplate": "Was [entity] a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M2\n}",
        "recursionDepth": 18,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q7346 wdt:P108 wd:Q885833 .\nwd:Q7346 wdt:P27 wd:Q30\n}",
        "questionWithBrackets": "Was [John Coltrane] a American employee of [Blue Note]"
    },
    {
        "questionIdx": 61367,
        "questionPatternModEntities": "Was M1 a prequel of a prequel of M0",
        "questionTemplate": "Was [entity] a [ROLE_SIMPLE] of a [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P0 ?x0\n}",
        "recursionDepth": 19,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P156 wd:Q4734 .\nwd:Q167922 wdt:P156 ?x0\n}",
        "questionWithBrackets": "Was [Zairean zaire] a prequel of a prequel of [Congolese franc]"
    },
    {
        "questionIdx": 61379,
        "questionPatternModEntities": "Was M0 M1 's Mexican Spanish employee",
        "questionTemplate": "Was [entity] [entity] 's [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M2 .\nM0 P1 M3\n}",
        "recursionDepth": 21,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q365193 wdt:P108 wd:Q222738 .\nwd:Q365193 wdt:P27 wd:Q29 .\nwd:Q365193 wdt:P27 wd:Q96\n}",
        "questionWithBrackets": "Was [Adolfo S\u00e1nchez V\u00e1zquez] [National Autonomous University of Mexico] 's Mexican Spanish employee"
    },
    {
        "questionIdx": 61380,
        "questionPatternModEntities": "Was M0 M1 's Spanish Mexican employee",
        "questionTemplate": "Was [entity] [entity] 's [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M2 .\nM0 P1 M3\n}",
        "recursionDepth": 21,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q46739 wdt:P108 wd:Q209842 .\nwd:Q46739 wdt:P27 wd:Q29 .\nwd:Q46739 wdt:P27 wd:Q96\n}",
        "questionWithBrackets": "Was [Octavio Paz] [University of Paris] 's Spanish Mexican employee"
    },
    {
        "questionIdx": 61381,
        "questionPatternModEntities": "Was M1 M0 's child 's Mexican Spanish employee",
        "questionTemplate": "Was [entity] [entity] 's [ROLE_SIMPLE] 's [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 ?x0 .\nM1 P2 M2 .\nM1 P2 M3\n}",
        "recursionDepth": 25,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P749 wd:Q1145814 .\nwd:Q704609 wdt:P108 ?x0 .\nwd:Q704609 wdt:P27 wd:Q29 .\nwd:Q704609 wdt:P27 wd:Q96\n}",
        "questionWithBrackets": "Was [F\u00e9lix Candela] [University of Illinois system] 's child 's Mexican Spanish employee"
    },
    {
        "questionIdx": 61382,
        "questionPatternModEntities": "Was M0 a Spanish Mexican employee of M1",
        "questionTemplate": "Was [entity] a [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M2 .\nM0 P1 M3\n}",
        "recursionDepth": 23,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q46739 wdt:P108 wd:Q209842 .\nwd:Q46739 wdt:P27 wd:Q29 .\nwd:Q46739 wdt:P27 wd:Q96\n}",
        "questionWithBrackets": "Was [Octavio Paz] a Spanish Mexican employee of [University of Paris]"
    },
    {
        "questionIdx": 61383,
        "questionPatternModEntities": "Was M4 's Spanish Mexican male parent M0",
        "questionTemplate": "Was [entity] 's [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P1 M3 .\nM0 P2 M4\n}",
        "recursionDepth": 26,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q51545 wdt:P40|wdt:P355 wd:Q1710546 .\nwd:Q51545 wdt:P21 wd:Q6581097 .\nwd:Q51545 wdt:P27 wd:Q29 .\nwd:Q51545 wdt:P27 wd:Q96\n}",
        "questionWithBrackets": "Was [Juan Luis Bu\u00f1uel] 's Spanish Mexican male parent [Luis Bu\u00f1uel]"
    },
    {
        "questionIdx": 61393,
        "questionPatternModEntities": "Was M4 's American spouse employed by M0 and M1 and employed by M2",
        "questionTemplate": "Was [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] [VP_SIMPLE] by [entity] and [entity] and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P1 M3 .\n?x0 P2 M4 .\nFILTER ( ?x0 != M4 )\n}",
        "recursionDepth": 36,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P108 wd:Q37093 .\n?x0 wdt:P108 wd:Q95 .\n?x0 wdt:P108 wd:Q64824323 .\n?x0 wdt:P27 wd:Q30 .\n?x0 wdt:P26 wd:Q19564224 .\nFILTER ( ?x0 != wd:Q19564224 )\n}",
        "questionWithBrackets": "Was [Zachary Bogue] 's American spouse employed by [Google] and [Lumi Labs] and employed by [Yahoo]"
    },
    {
        "questionIdx": 61400,
        "questionPatternModEntities": "Was M1 a female spouse and sibling of M0 's spouse and parent",
        "questionTemplate": "Was [entity] a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] and [ROLE_SIMPLE] of [entity] 's [ROLE_SIMPLE] and [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M0 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( M1 != ?x0 ) .\nFILTER ( M1 != ?x0 ) .\nM1 P1 ?x0 .\nM1 P2 ?x0 .\nM1 P3 M2\n}",
        "recursionDepth": 32,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q261213 .\n?x0 wdt:P26 wd:Q261213 .\nFILTER ( ?x0 != wd:Q261213 ) .\nFILTER ( wd:Q443473 != ?x0 ) .\nFILTER ( wd:Q443473 != ?x0 ) .\nwd:Q443473 wdt:P21 wd:Q6581072 .\nwd:Q443473 wdt:P3373 ?x0 .\nwd:Q443473 wdt:P26 ?x0\n}",
        "questionWithBrackets": "Was [Henutmire] a female spouse and sibling of [Bintanath] 's spouse and parent"
    },
    {
        "questionIdx": 61401,
        "questionPatternModEntities": "Was M0 a sibling , parent , and spouse of M1",
        "questionTemplate": "Was [entity] a [ROLE_SIMPLE] , [ROLE_SIMPLE] , and [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nFILTER ( M0 != M1 ) .\nFILTER ( M0 != M1 ) .\nM0 P0 M1 .\nM0 P1 M1 .\nM0 P2 M1\n}",
        "recursionDepth": 22,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nFILTER ( wd:Q1523 != wd:Q443473 ) .\nFILTER ( wd:Q1523 != wd:Q443473 ) .\nwd:Q1523 wdt:P40|wdt:P355 wd:Q443473 .\nwd:Q1523 wdt:P3373 wd:Q443473 .\nwd:Q1523 wdt:P26 wd:Q443473\n}",
        "questionWithBrackets": "Was [Ramesses II] a sibling , parent , and spouse of [Henutmire]"
    },
    {
        "questionIdx": 61402,
        "questionPatternModEntities": "Was M0 's sibling M1 's sibling , parent , and spouse",
        "questionTemplate": "Was [entity] 's [ROLE_SIMPLE] [entity] 's [ROLE_SIMPLE] , [ROLE_SIMPLE] , and [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P1 M1 .\n?x0 P2 M1 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x0 != M1 ) .\nFILTER ( ?x0 != M1 )\n}",
        "recursionDepth": 24,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q443473 .\n?x0 wdt:P3373 wd:Q273990 .\n?x0 wdt:P3373 wd:Q443473 .\n?x0 wdt:P26 wd:Q443473 .\nFILTER ( ?x0 != wd:Q273990 ) .\nFILTER ( ?x0 != wd:Q443473 ) .\nFILTER ( ?x0 != wd:Q443473 )\n}",
        "questionWithBrackets": "Was [Princess Tia] 's sibling [Henutmire] 's sibling , parent , and spouse"
    },
    {
        "questionIdx": 61406,
        "questionPatternModEntities": "Was M4 's Spanish German male spouse M0",
        "questionTemplate": "Was [entity] 's [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nFILTER ( M0 != M4 ) .\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P1 M3 .\nM0 P2 M4\n}",
        "recursionDepth": 26,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nFILTER ( wd:Q62263 != wd:Q242421 ) .\nwd:Q62263 wdt:P21 wd:Q6581097 .\nwd:Q62263 wdt:P27 wd:Q183 .\nwd:Q62263 wdt:P27 wd:Q29 .\nwd:Q62263 wdt:P26 wd:Q242421\n}",
        "questionWithBrackets": "Was [Infanta Mar\u00eda de la Paz of Spain] 's Spanish German male spouse [Prince Ludwig Ferdinand of Bavaria]"
    },
    {
        "questionIdx": 61408,
        "questionPatternModEntities": "Was M1 's female German sibling M0",
        "questionTemplate": "Was [entity] 's [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nFILTER ( M0 != M1 ) .\nM0 P0 M1 .\nM0 P1 M2 .\nM0 P2 M3\n}",
        "recursionDepth": 21,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nFILTER ( wd:Q25878 != wd:Q3978282 ) .\nwd:Q25878 wdt:P21 wd:Q6581072 .\nwd:Q25878 wdt:P27 wd:Q183 .\nwd:Q25878 wdt:P3373 wd:Q3978282\n}",
        "questionWithBrackets": "Was [Susanne K\u00f6nig] 's female German sibling [Rita K\u00f6nig]"
    },
    {
        "questionIdx": 61409,
        "questionPatternModEntities": "Was M0 's Italian sibling employed by M1 and employed by M2",
        "questionTemplate": "Was [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] [VP_SIMPLE] by [entity] and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\n?x0 P2 M3 .\nFILTER ( ?x0 != M0 )\n}",
        "recursionDepth": 32,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P108 wd:Q13371 .\n?x0 wdt:P108 wd:Q131262 .\n?x0 wdt:P27 wd:Q38 .\n?x0 wdt:P3373 wd:Q3742011 .\nFILTER ( ?x0 != wd:Q3742011 )\n}",
        "questionWithBrackets": "Was [Giorgio Prodi] 's Italian sibling employed by [Harvard University] and employed by [University of Bologna]"
    },
    {
        "questionIdx": 61410,
        "questionPatternModEntities": "Was M0 's sibling M1 's Spanish employee",
        "questionTemplate": "Was [entity] 's [ROLE_SIMPLE] [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P2 M2 .\nFILTER ( ?x0 != M0 )\n}",
        "recursionDepth": 20,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P108 wd:Q333886 .\n?x0 wdt:P27 wd:Q29 .\n?x0 wdt:P3373 wd:Q5992333 .\nFILTER ( ?x0 != wd:Q5992333 )\n}",
        "questionWithBrackets": "Was [Manuel Aznar L\u00f3pez] 's sibling [Georgetown University] 's Spanish employee"
    },
    {
        "questionIdx": 61413,
        "questionPatternModEntities": "Was M0 produced by M3 , written by M1 , and written by M2",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P1 M3\n}",
        "recursionDepth": 32,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q80379 wdt:P162|wdt:P272 wd:Q8066124 .\nwd:Q80379 wdt:P58 wd:Q892 .\nwd:Q80379 wdt:P58 wd:Q4465\n}",
        "questionWithBrackets": "Was [The Hobbit: An Unexpected Journey] produced by [Zane Weiner] , written by [J.\u00a0R.\u00a0R. Tolkien] , and written by [Peter Jackson]"
    },
    {
        "questionIdx": 61455,
        "questionPatternModEntities": "Was M1 's sequel produced by M0",
        "questionTemplate": "Was [entity] 's [ROLE_SIMPLE] [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1\n}",
        "recursionDepth": 16,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P155 wd:Q1198611 .\n?x0 wdt:P162|wdt:P272 wd:Q7414\n}",
        "questionWithBrackets": "Was [The Absent-Minded Professor] 's sequel produced by [The Walt Disney Company]"
    },
    {
        "questionIdx": 61465,
        "questionPatternModEntities": "Was M1 a parent and spouse of a spouse of M0",
        "questionTemplate": "Was [entity] a [ROLE_SIMPLE] and [ROLE_SIMPLE] of a [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( M1 != ?x0 ) .\nM1 P0 ?x0 .\nM1 P1 ?x0\n}",
        "recursionDepth": 24,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P26 wd:Q79999 .\nFILTER ( ?x0 != wd:Q79999 ) .\nFILTER ( wd:Q12656482 != ?x0 ) .\nwd:Q12656482 wdt:P40|wdt:P355 ?x0 .\nwd:Q12656482 wdt:P26 ?x0\n}",
        "questionWithBrackets": "Was [Hydros] a parent and spouse of a spouse of [Uranus]"
    },
    {
        "questionIdx": 61475,
        "questionPatternModEntities": "Was M1 a spouse of M0 's parent",
        "questionTemplate": "Was [entity] a [ROLE_SIMPLE] of [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( M1 != ?x0 ) .\nM1 P1 ?x0\n}",
        "recursionDepth": 17,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q302 .\nFILTER ( wd:Q5915109 != ?x0 ) .\nwd:Q5915109 wdt:P26 ?x0\n}",
        "questionWithBrackets": "Was [Ebrahim Fakhar] a spouse of [Jesus] 's parent"
    },
    {
        "questionIdx": 61502,
        "questionPatternModEntities": "Was M1 founded by M0 's parent and founded by M2",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 ?x0 .\nM1 P1 M2\n}",
        "recursionDepth": 27,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q133928 .\nwd:Q356 wdt:P112 ?x0 .\nwd:Q356 wdt:P112 wd:Q95\n}",
        "questionWithBrackets": "Was [Google+] founded by [X] 's parent and founded by [Google]"
    },
    {
        "questionIdx": 61515,
        "questionPatternModEntities": "Was M0 M1 's Chinese sibling",
        "questionTemplate": "Was [entity] [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\nFILTER ( M0 != M1 ) .\nM0 P0 M1 .\nM0 P1 M2\n}",
        "recursionDepth": 16,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nFILTER ( wd:Q197324 != wd:Q48936751 ) .\nwd:Q197324 wdt:P27 wd:Q148 .\nwd:Q197324 wdt:P3373 wd:Q48936751\n}",
        "questionWithBrackets": "Was [Zhang Yihe] [Zhang Shiming] 's Chinese sibling"
    },
    {
        "questionIdx": 61535,
        "questionPatternModEntities": "Was M0 's Swedish sibling influenced by M1 and influenced by M2 and M3",
        "questionTemplate": "Was [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] [VP_SIMPLE] by [entity] and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\n?x0 P1 M3 .\n?x0 P2 M4 .\nFILTER ( ?x0 != M0 )\n}",
        "recursionDepth": 36,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P737 wd:Q6527 .\n?x0 wdt:P737 wd:Q9358 .\n?x0 wdt:P737 wd:Q150471 .\n?x0 wdt:P27 wd:Q34 .\n?x0 wdt:P3373 wd:Q44635029 .\nFILTER ( ?x0 != wd:Q44635029 )\n}",
        "questionWithBrackets": "Was [Nora Strindberg] 's Swedish sibling influenced by [Friedrich Nietzsche] and influenced by [E. T. A. Hoffmann] and [Jean-Jacques Rousseau]"
    },
    {
        "questionIdx": 61566,
        "questionPatternModEntities": "Was M0 M4 's female Chinese British spouse",
        "questionTemplate": "Was [entity] [entity] 's [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\nFILTER ( M0 != M4 ) .\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P1 M3 .\nM0 P2 M4\n}",
        "recursionDepth": 26,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nFILTER ( wd:Q16400 != wd:Q28864829 ) .\nwd:Q16400 wdt:P21 wd:Q6581072 .\nwd:Q16400 wdt:P27 wd:Q145 .\nwd:Q16400 wdt:P27 wd:Q148 .\nwd:Q16400 wdt:P26 wd:Q28864829\n}",
        "questionWithBrackets": "Was [Han Suyin] [Leon Comber] 's female Chinese British spouse"
    },
    {
        "questionIdx": 61738,
        "questionPatternModEntities": "Was M1 employed by M2 , employed by M3 , and employed by M0 's child",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 ?x0 .\nM1 P1 M2 .\nM1 P1 M3\n}",
        "recursionDepth": 36,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P749 wd:Q458 .\nwd:Q12329473 wdt:P108 ?x0 .\nwd:Q12329473 wdt:P108 wd:Q8880 .\nwd:Q12329473 wdt:P108 wd:Q12328033\n}",
        "questionWithBrackets": "Was [Nynne Bjerre Christensen] employed by [European Commission] , employed by [No label defined] , and employed by [European Union] 's child"
    },
    {
        "questionIdx": 61861,
        "questionPatternModEntities": "Was M1 M0 's sibling 's sibling 's actor",
        "questionTemplate": "Was [entity] [entity] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x1 P0 M0 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x1 != M0 ) .\nM1 P1 ?x0\n}",
        "recursionDepth": 19,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P3373 ?x1 .\n?x1 wdt:P3373 wd:Q716565 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x1 != wd:Q716565 ) .\nwd:Q294975 wdt:P453 ?x0\n}",
        "questionWithBrackets": "Was [Miranda Otto] [\u00c9owyn] 's sibling 's sibling 's actor"
    },
    {
        "questionIdx": 61969,
        "questionPatternModEntities": "Was M0 's Spanish sibling M1 's employee",
        "questionTemplate": "Was [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P2 M2 .\nFILTER ( ?x0 != M0 )\n}",
        "recursionDepth": 20,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P108 wd:Q333886 .\n?x0 wdt:P27 wd:Q29 .\n?x0 wdt:P3373 wd:Q5992333 .\nFILTER ( ?x0 != wd:Q5992333 )\n}",
        "questionWithBrackets": "Was [Manuel Aznar L\u00f3pez] 's Spanish sibling [Georgetown University] 's employee"
    },
    {
        "questionIdx": 62024,
        "questionPatternModEntities": "Was M1 edited by M2 and written by a parent and sibling of M0",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] and [VP_SIMPLE] by a [ROLE_SIMPLE] and [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M0 .\nFILTER ( ?x0 != M0 ) .\nM1 P2 ?x0 .\nM1 P3 M2\n}",
        "recursionDepth": 34,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q42175155 .\n?x0 wdt:P3373 wd:Q42175155 .\nFILTER ( ?x0 != wd:Q42175155 ) .\nwd:Q18552221 wdt:P1040 wd:Q1677647 .\nwd:Q18552221 wdt:P58 ?x0\n}",
        "questionWithBrackets": "Was [No label defined] edited by [Jacob Thuesen] and written by a parent and sibling of [Greta Strindberg]"
    },
    {
        "questionIdx": 62026,
        "questionPatternModEntities": "Was M1 produced by M2 and written by M0 's sibling and parent",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] and [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M0 .\nFILTER ( ?x0 != M0 ) .\nM1 P2 ?x0 .\nM1 P3 M2\n}",
        "recursionDepth": 32,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q42175155 .\n?x0 wdt:P3373 wd:Q42175155 .\nFILTER ( ?x0 != wd:Q42175155 ) .\nwd:Q1471325 wdt:P162|wdt:P272 wd:Q1484829 .\nwd:Q1471325 wdt:P58 ?x0\n}",
        "questionWithBrackets": "Was [Miss Julie] produced by [Rune Waldekranz] and written by [Greta Strindberg] 's sibling and parent"
    },
    {
        "questionIdx": 62030,
        "questionPatternModEntities": "Was M1 written by M0 's sibling and parent",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] and [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M0 .\nFILTER ( ?x0 != M0 ) .\nM1 P2 ?x0\n}",
        "recursionDepth": 21,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q42175155 .\n?x0 wdt:P3373 wd:Q42175155 .\nFILTER ( ?x0 != wd:Q42175155 ) .\nwd:Q104893617 wdt:P58 ?x0\n}",
        "questionWithBrackets": "Was [No label defined] written by [Greta Strindberg] 's sibling and parent"
    },
    {
        "questionIdx": 62040,
        "questionPatternModEntities": "Was M1 written by a sibling and parent of M0 and directed by M2",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by a [ROLE_SIMPLE] and [ROLE_SIMPLE] of [entity] and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M0 .\nFILTER ( ?x0 != M0 ) .\nM1 P2 ?x0 .\nM1 P3 M2\n}",
        "recursionDepth": 34,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q42175155 .\n?x0 wdt:P3373 wd:Q42175155 .\nFILTER ( ?x0 != wd:Q42175155 ) .\nwd:Q2133469 wdt:P57 wd:Q51562 .\nwd:Q2133469 wdt:P58 ?x0\n}",
        "questionWithBrackets": "Was [Intoxication] written by a sibling and parent of [Greta Strindberg] and directed by [Ernst Lubitsch]"
    },
    {
        "questionIdx": 62072,
        "questionPatternModEntities": "Was M1 's sibling 's actor employed by M0",
        "questionTemplate": "Was [entity] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE] [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 ?x1 .\n?x1 P2 M1 .\nFILTER ( ?x1 != M1 )\n}",
        "recursionDepth": 20,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P453 ?x1 .\n?x0 wdt:P108 wd:Q207028 .\n?x1 wdt:P3373 wd:Q55011312 .\nFILTER ( ?x1 != wd:Q55011312 )\n}",
        "questionWithBrackets": "Was [Duke Gottfried] 's sibling 's actor employed by [Mariinsky Theatre]"
    },
    {
        "questionIdx": 62096,
        "questionPatternModEntities": "Was M0 M1 's Mexican employee",
        "questionTemplate": "Was [entity] [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M2\n}",
        "recursionDepth": 16,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q315647 wdt:P108 wd:Q4614 .\nwd:Q315647 wdt:P27 wd:Q96\n}",
        "questionWithBrackets": "Was [David Alfaro Siqueiros] [University of Southern California] 's Mexican employee"
    },
    {
        "questionIdx": 62150,
        "questionPatternModEntities": "Was M0 produced , written , and edited by M1 and M2",
        "questionTemplate": "Was [entity] [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P1 M1 .\nM0 P1 M2 .\nM0 P2 M1 .\nM0 P2 M2\n}",
        "recursionDepth": 28,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q20729551 wdt:P1040 wd:Q562108 .\nwd:Q20729551 wdt:P1040 wd:Q1687239 .\nwd:Q20729551 wdt:P162|wdt:P272 wd:Q562108 .\nwd:Q20729551 wdt:P162|wdt:P272 wd:Q1687239 .\nwd:Q20729551 wdt:P58 wd:Q562108 .\nwd:Q20729551 wdt:P58 wd:Q1687239\n}",
        "questionWithBrackets": "Was [Stop for Bud] produced , written , and edited by [J\u00f8rgen Leth] and [Jens J\u00f8rgen Thorsen]"
    },
    {
        "questionIdx": 62195,
        "questionPatternModEntities": "Was M1 directed and written by a sibling of M0",
        "questionTemplate": "Was [entity] [VP_SIMPLE] and [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nM1 P1 ?x0 .\nM1 P2 ?x0\n}",
        "recursionDepth": 25,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P3373 wd:Q3567655 .\nFILTER ( ?x0 != wd:Q3567655 ) .\nwd:Q2590524 wdt:P57 ?x0 .\nwd:Q2590524 wdt:P58 ?x0\n}",
        "questionWithBrackets": "Was [Mabel's Busy Day] directed and written by a sibling of [Wheeler Dryden]"
    },
    {
        "questionIdx": 62207,
        "questionPatternModEntities": "Was M4 's male spouse influenced by M0 and M1 and influenced by M2",
        "questionTemplate": "Was [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] [VP_SIMPLE] by [entity] and [entity] and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P1 M3 .\n?x0 P2 M4 .\nFILTER ( ?x0 != M4 )\n}",
        "recursionDepth": 36,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P737 wd:Q868 .\n?x0 wdt:P737 wd:Q1398 .\n?x0 wdt:P737 wd:Q102851 .\n?x0 wdt:P21 wd:Q6581097 .\n?x0 wdt:P26 wd:Q3759380 .\nFILTER ( ?x0 != wd:Q3759380 )\n}",
        "questionWithBrackets": "Was [Gemma Donati] 's male spouse influenced by [Virgil] and [Aristotle] and influenced by [Boethius]"
    },
    {
        "questionIdx": 62247,
        "questionPatternModEntities": "Was M3 's British Canadian spouse employed by M0",
        "questionTemplate": "Was [entity] 's [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\n?x0 P2 M3 .\nFILTER ( ?x0 != M3 )\n}",
        "recursionDepth": 26,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P108 wd:Q193326 .\n?x0 wdt:P27 wd:Q145 .\n?x0 wdt:P27 wd:Q16 .\n?x0 wdt:P26 wd:Q75449953 .\nFILTER ( ?x0 != wd:Q75449953 )\n}",
        "questionWithBrackets": "Was [Diana Fox] 's British Canadian spouse employed by [Goldman Sachs]"
    },
    {
        "questionIdx": 62293,
        "questionPatternModEntities": "Was M5 's male spouse influenced by M0 , M1 , M2 , and M3",
        "questionTemplate": "Was [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] [VP_SIMPLE] by [entity] , [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P0 M3 .\n?x0 P1 M4 .\n?x0 P2 M5 .\nFILTER ( ?x0 != M5 )\n}",
        "recursionDepth": 31,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P737 wd:Q859 .\n?x0 wdt:P737 wd:Q913 .\n?x0 wdt:P737 wd:Q41155 .\n?x0 wdt:P737 wd:Q5264 .\n?x0 wdt:P21 wd:Q6581097 .\n?x0 wdt:P26 wd:Q462582 .\nFILTER ( ?x0 != wd:Q462582 )\n}",
        "questionWithBrackets": "Was [Pythias] 's male spouse influenced by [Heraclitus] , [Hippocrates] , [Socrates] , and [Plato]"
    },
    {
        "questionIdx": 62355,
        "questionPatternModEntities": "Was M0 executive produced by M1 and M2 , edited by M5 , produced by M4 , and executive produced by M3",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] and [entity] , [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P0 M3 .\nM0 P1 M4 .\nM0 P2 M5\n}",
        "recursionDepth": 47,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q102244 wdt:P1040 wd:Q977704 .\nwd:Q102244 wdt:P1431 wd:Q75079 .\nwd:Q102244 wdt:P1431 wd:Q11778321 .\nwd:Q102244 wdt:P1431 wd:Q1900360 .\nwd:Q102244 wdt:P162|wdt:P272 wd:Q319986\n}",
        "questionWithBrackets": "Was [Harry Potter and the Chamber of Secrets] executive produced by [Michael Barnathan] and [Chris Columbus] , edited by [Peter Honess] , produced by [David Heyman] , and executive produced by [Mark Radcliffe]"
    },
    {
        "questionIdx": 62383,
        "questionPatternModEntities": "Was M0 's employee M1 's spouse",
        "questionTemplate": "Was [entity] 's [ROLE_SIMPLE] [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M1 )\n}",
        "recursionDepth": 15,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P108 wd:Q1070333 .\n?x0 wdt:P26 wd:Q1124 .\nFILTER ( ?x0 != wd:Q1124 )\n}",
        "questionWithBrackets": "Was [University of Arkansas] 's employee [Bill Clinton] 's spouse"
    },
    {
        "questionIdx": 62445,
        "questionPatternModEntities": "Was M1 written , executive produced , and produced by M0 's spouse 's parent",
        "questionTemplate": "Was [entity] [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x1 P1 M0 .\nFILTER ( ?x1 != M0 ) .\nM1 P2 ?x0 .\nM1 P3 ?x0 .\nM1 P4 ?x0\n}",
        "recursionDepth": 33,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 ?x1 .\n?x1 wdt:P26 wd:Q3549527 .\nFILTER ( ?x1 != wd:Q3549527 ) .\nwd:Q854990 wdt:P1431 ?x0 .\nwd:Q854990 wdt:P162|wdt:P272 ?x0 .\nwd:Q854990 wdt:P58 ?x0\n}",
        "questionWithBrackets": "Was [Kagemusha] written , executive produced , and produced by [Hiroko Hayashi] 's spouse 's parent"
    },
    {
        "questionIdx": 62479,
        "questionPatternModEntities": "Was M0 written by M1 and M2 , directed by M7 , and edited by M3 , M4 , M5 , and M6",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] and [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity] , [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P1 M3 .\nM0 P1 M4 .\nM0 P1 M5 .\nM0 P1 M6 .\nM0 P2 M7\n}",
        "recursionDepth": 46,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q1137372 wdt:P57 wd:Q3772 .\nwd:Q1137372 wdt:P1040 wd:Q47284 .\nwd:Q1137372 wdt:P1040 wd:Q273379 .\nwd:Q1137372 wdt:P1040 wd:Q541143 .\nwd:Q1137372 wdt:P1040 wd:Q5359064 .\nwd:Q1137372 wdt:P58 wd:Q25161 .\nwd:Q1137372 wdt:P58 wd:Q2838329\n}",
        "questionWithBrackets": "Was [Four Rooms] written by [Allison Anders] and [Roald Dahl] , directed by [Quentin Tarantino] , and edited by [Sally Menke] , [Elena Maganini] , [Robert Rodriguez] , and [Terry Rawlings]"
    },
    {
        "questionIdx": 62488,
        "questionPatternModEntities": "Was M0 directed by M2 , M3 , M4 , and M5 , directed by M6 and M7 , and edited by M1",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] , [entity] , [entity] , and [entity] , [VP_SIMPLE] by [entity] and [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M2 .\nM0 P1 M3 .\nM0 P1 M4 .\nM0 P1 M5 .\nM0 P1 M6 .\nM0 P1 M7\n}",
        "recursionDepth": 46,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q603857 wdt:P57 wd:Q313497 .\nwd:Q603857 wdt:P57 wd:Q55238 .\nwd:Q603857 wdt:P57 wd:Q295093 .\nwd:Q603857 wdt:P57 wd:Q309950 .\nwd:Q603857 wdt:P57 wd:Q44221 .\nwd:Q603857 wdt:P57 wd:Q113628 .\nwd:Q603857 wdt:P1040 wd:Q55211\n}",
        "questionWithBrackets": "Was [11'09\"01 September 11] directed by [Sean Penn] , [Claude Lelouch] , [Shohei Imamura] , and [Ken Loach] , directed by [Danis Tanovi\u0107] and [Idrissa Ou\u00e9draogo] , and edited by [Mohsen Makhmalbaf]"
    },
    {
        "questionIdx": 62528,
        "questionPatternModEntities": "Was M0 founded by M1 , M2 , M3 , M4 , M5 , M6 , and M7",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] , [entity] , [entity] , [entity] , [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P0 M3 .\nM0 P0 M4 .\nM0 P0 M5 .\nM0 P0 M6 .\nM0 P0 M7\n}",
        "recursionDepth": 31,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q1065 wdt:P112 wd:Q30 .\nwd:Q1065 wdt:P112 wd:Q851 .\nwd:Q1065 wdt:P112 wd:Q20 .\nwd:Q1065 wdt:P112 wd:Q16 .\nwd:Q1065 wdt:P112 wd:Q31 .\nwd:Q1065 wdt:P112 wd:Q35 .\nwd:Q1065 wdt:P112 wd:Q36\n}",
        "questionWithBrackets": "Was [United Nations] founded by [Belgium] , [United States of America] , [Saudi Arabia] , [Poland] , [Canada] , [Norway] , and [Denmark]"
    },
    {
        "questionIdx": 62530,
        "questionPatternModEntities": "Was M0 founded by M1 , founded by M2 , and founded by M3 , M4 , M5 , M6 , and M7",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity] , [entity] , [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P0 M3 .\nM0 P0 M4 .\nM0 P0 M5 .\nM0 P0 M6 .\nM0 P0 M7\n}",
        "recursionDepth": 45,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q1065 wdt:P112 wd:Q96 .\nwd:Q1065 wdt:P112 wd:Q241 .\nwd:Q1065 wdt:P112 wd:Q20 .\nwd:Q1065 wdt:P112 wd:Q32 .\nwd:Q1065 wdt:P112 wd:Q16 .\nwd:Q1065 wdt:P112 wd:Q31 .\nwd:Q1065 wdt:P112 wd:Q77\n}",
        "questionWithBrackets": "Was [United Nations] founded by [Belgium] , founded by [Mexico] , and founded by [Norway] , [Luxembourg] , [Uruguay] , [Canada] , and [Cuba]"
    },
    {
        "questionIdx": 62539,
        "questionPatternModEntities": "Was M0 's Swedish sibling a employee of M1 and M2",
        "questionTemplate": "Was [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] a [ROLE_SIMPLE] of [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\n?x0 P2 M3 .\nFILTER ( ?x0 != M0 )\n}",
        "recursionDepth": 26,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P108 wd:Q151510 .\n?x0 wdt:P108 wd:Q218506 .\n?x0 wdt:P27 wd:Q34 .\n?x0 wdt:P3373 wd:Q1366665 .\nFILTER ( ?x0 != wd:Q1366665 )\n}",
        "questionWithBrackets": "Was [Esaias Pufendorf] 's Swedish sibling a employee of [Heidelberg University] and [Lund University]"
    },
    {
        "questionIdx": 62574,
        "questionPatternModEntities": "Was M2 influenced by M3 and influenced by a German sibling of M0",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] and [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M0 ) .\nM2 P2 ?x0 .\nM2 P2 M3\n}",
        "recursionDepth": 34,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P27 wd:Q183 .\n?x0 wdt:P3373 wd:Q94848579 .\nFILTER ( ?x0 != wd:Q94848579 ) .\nwd:Q6512 wdt:P737 ?x0 .\nwd:Q6512 wdt:P737 wd:Q868\n}",
        "questionWithBrackets": "Was [S\u00f8ren Kierkegaard] influenced by [Aristotle] and influenced by a German sibling of [Theophilius Lessing]"
    },
    {
        "questionIdx": 62648,
        "questionPatternModEntities": "Was M2 M0 's American sibling 's sibling",
        "questionTemplate": "Was [entity] [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( M2 != ?x0 ) .\nM2 P0 ?x0\n}",
        "recursionDepth": 20,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P27 wd:Q30 .\n?x0 wdt:P3373 wd:Q2831 .\nFILTER ( ?x0 != wd:Q2831 ) .\nFILTER ( wd:Q44855 != ?x0 ) .\nwd:Q44855 wdt:P3373 ?x0\n}",
        "questionWithBrackets": "Was [Jackie Jackson] [Michael Jackson] 's American sibling 's sibling"
    },
    {
        "questionIdx": 62671,
        "questionPatternModEntities": "Was M0 's sibling M1 's spouse , parent , and sibling",
        "questionTemplate": "Was [entity] 's [ROLE_SIMPLE] [entity] 's [ROLE_SIMPLE] , [ROLE_SIMPLE] , and [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P1 M1 .\n?x0 P2 M1 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x0 != M1 ) .\nFILTER ( ?x0 != M1 )\n}",
        "recursionDepth": 24,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q443473 .\n?x0 wdt:P3373 wd:Q273990 .\n?x0 wdt:P3373 wd:Q443473 .\n?x0 wdt:P26 wd:Q443473 .\nFILTER ( ?x0 != wd:Q273990 ) .\nFILTER ( ?x0 != wd:Q443473 ) .\nFILTER ( ?x0 != wd:Q443473 )\n}",
        "questionWithBrackets": "Was [Princess Tia] 's sibling [Henutmire] 's spouse , parent , and sibling"
    },
    {
        "questionIdx": 62674,
        "questionPatternModEntities": "Was M3 directed by a Swedish French spouse of M2 and written by M4",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P1 M2 .\nFILTER ( ?x0 != M2 ) .\nM3 P2 M4 .\nM3 P3 ?x0\n}",
        "recursionDepth": 39,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P27 wd:Q34 .\n?x0 wdt:P27 wd:Q142 .\n?x0 wdt:P26 wd:Q60320238 .\nFILTER ( ?x0 != wd:Q60320238 ) .\nwd:Q3363736 wdt:P57 ?x0 .\nwd:Q3363736 wdt:P58 wd:Q555324\n}",
        "questionWithBrackets": "Was [Katinka] directed by a Swedish French spouse of [Catherine Brelet] and written by [Klaus Rifbjerg]"
    },
    {
        "questionIdx": 62682,
        "questionPatternModEntities": "Was M0 a female spouse of M2",
        "questionTemplate": "Was [entity] a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nFILTER ( M0 != M2 ) .\nM0 P0 M1 .\nM0 P1 M2\n}",
        "recursionDepth": 18,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nFILTER ( wd:Q969767 != wd:Q1528 ) .\nwd:Q969767 wdt:P21 wd:Q6581072 .\nwd:Q969767 wdt:P26 wd:Q1528\n}",
        "questionWithBrackets": "Was [Tiye] a female spouse of [Ramesses III]"
    },
    {
        "questionIdx": 62755,
        "questionPatternModEntities": "Was M1 employed by M0 's parent , employed by M2 , and employed by M3",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 ?x0 .\nM1 P1 M2 .\nM1 P1 M3\n}",
        "recursionDepth": 36,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q165765 .\nwd:Q91984 wdt:P108 ?x0 .\nwd:Q91984 wdt:P108 wd:Q933681 .\nwd:Q91984 wdt:P108 wd:Q138133\n}",
        "questionWithBrackets": "Was [Hartmut Mehdorn] employed by [Dornier] 's parent , employed by [Flughafen Berlin Brandenburg GmbH] , and employed by [RWE]"
    },
    {
        "questionIdx": 62756,
        "questionPatternModEntities": "Was M1 employed by M0 's parent",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 ?x0\n}",
        "recursionDepth": 16,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q866 .\nwd:Q76694 wdt:P108 ?x0\n}",
        "questionWithBrackets": "Was [Jawed Karim] employed by [YouTube] 's parent"
    },
    {
        "questionIdx": 62761,
        "questionPatternModEntities": "Was M0 's sibling a actor of M1",
        "questionTemplate": "Was [entity] 's [ROLE_SIMPLE] a [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M0 )\n}",
        "recursionDepth": 17,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P453 wd:Q222573 .\n?x0 wdt:P3373 wd:Q203236 .\nFILTER ( ?x0 != wd:Q203236 )\n}",
        "questionWithBrackets": "Was [Pasipha\u00eb] 's sibling a actor of [femme fatale]"
    },
    {
        "questionIdx": 62797,
        "questionPatternModEntities": "Was M1 M0 's sibling 's spouse 's sibling",
        "questionTemplate": "Was [entity] [entity] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x1 P1 M0 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x1 != M0 ) .\nFILTER ( M1 != ?x0 ) .\nM1 P1 ?x0\n}",
        "recursionDepth": 19,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P26 ?x1 .\n?x1 wdt:P3373 wd:Q5074 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x1 != wd:Q5074 ) .\nFILTER ( wd:Q8253396 != ?x0 ) .\nwd:Q8253396 wdt:P3373 ?x0\n}",
        "questionWithBrackets": "Was [Empress Minghui] [Emperor Zhangzong of Jin] 's sibling 's spouse 's sibling"
    },
    {
        "questionIdx": 62808,
        "questionPatternModEntities": "Was M1 M0 's parent 's actor",
        "questionTemplate": "Was [entity] [entity] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 ?x0\n}",
        "recursionDepth": 15,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q8125562 .\nwd:Q294975 wdt:P453 ?x0\n}",
        "questionWithBrackets": "Was [Miranda Otto] [Elboron] 's parent 's actor"
    },
    {
        "questionIdx": 62827,
        "questionPatternModEntities": "Was M0 's sibling a Japanese employee of M1 and M2",
        "questionTemplate": "Was [entity] 's [ROLE_SIMPLE] a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\n?x0 P2 M3 .\nFILTER ( ?x0 != M0 )\n}",
        "recursionDepth": 26,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P108 wd:Q3083225 .\n?x0 wdt:P108 wd:Q3180921 .\n?x0 wdt:P27 wd:Q17 .\n?x0 wdt:P3373 wd:Q1241150 .\nFILTER ( ?x0 != wd:Q1241150 )\n}",
        "questionWithBrackets": "Was [Yuka Murofushi] 's sibling a Japanese employee of [Tokyo Medical and Dental University] and [Chukyo University]"
    },
    {
        "questionIdx": 62833,
        "questionPatternModEntities": "Was M0 's spouse a spouse of M1",
        "questionTemplate": "Was [entity] 's [ROLE_SIMPLE] a [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x0 != M1 )\n}",
        "recursionDepth": 17,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P26 wd:Q1423 .\n?x0 wdt:P26 wd:Q1159574 .\nFILTER ( ?x0 != wd:Q1423 ) .\nFILTER ( ?x0 != wd:Q1159574 )\n}",
        "questionWithBrackets": "Was [Lucius Aelius Plautius Lamia Aelianus] 's spouse a spouse of [Domitian]"
    },
    {
        "questionIdx": 62839,
        "questionPatternModEntities": "Was M2 's Japanese actor M0",
        "questionTemplate": "Was [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M2\n}",
        "recursionDepth": 16,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q49547 wdt:P453 wd:Q1945499 .\nwd:Q49547 wdt:P27 wd:Q17\n}",
        "questionWithBrackets": "Was [Chun-Li] 's Japanese actor [Fumiko Orikasa]"
    },
    {
        "questionIdx": 62847,
        "questionPatternModEntities": "Was M0 written by , directed by , and edited by M1 , M2 , M3 , and M4",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity] , [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P0 M3 .\nM0 P0 M4 .\nM0 P1 M1 .\nM0 P1 M2 .\nM0 P1 M3 .\nM0 P1 M4 .\nM0 P2 M1 .\nM0 P2 M2 .\nM0 P2 M3 .\nM0 P2 M4\n}",
        "recursionDepth": 36,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q74535 wdt:P57 wd:Q4022902 .\nwd:Q74535 wdt:P57 wd:Q5658534 .\nwd:Q74535 wdt:P57 wd:Q4023328 .\nwd:Q74535 wdt:P57 wd:Q5836844 .\nwd:Q74535 wdt:P1040 wd:Q4022902 .\nwd:Q74535 wdt:P1040 wd:Q5658534 .\nwd:Q74535 wdt:P1040 wd:Q4023328 .\nwd:Q74535 wdt:P1040 wd:Q5836844 .\nwd:Q74535 wdt:P58 wd:Q4022902 .\nwd:Q74535 wdt:P58 wd:Q5658534 .\nwd:Q74535 wdt:P58 wd:Q4023328 .\nwd:Q74535 wdt:P58 wd:Q5836844\n}",
        "questionWithBrackets": "Was [The ABCs of Death] written by , directed by , and edited by [Yoshihiro Nishimura] , [Ernesto D\u00edaz Espinoza] , [Adri\u00e1n Garc\u00eda Bogliano] , and [Y\u016bdai Yamaguchi]"
    },
    {
        "questionIdx": 62860,
        "questionPatternModEntities": "Was M1 a parent and sibling of M0 's sibling",
        "questionTemplate": "Was [entity] a [ROLE_SIMPLE] and [ROLE_SIMPLE] of [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( M1 != ?x0 ) .\nM1 P0 ?x0 .\nM1 P1 ?x0\n}",
        "recursionDepth": 22,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P3373 wd:Q635 .\nFILTER ( ?x0 != wd:Q635 ) .\nFILTER ( wd:Q40020 != ?x0 ) .\nwd:Q40020 wdt:P40|wdt:P355 ?x0 .\nwd:Q40020 wdt:P3373 ?x0\n}",
        "questionWithBrackets": "Was [Cleopatra VI of Egypt] a parent and sibling of [Cleopatra] 's sibling"
    },
    {
        "questionIdx": 62861,
        "questionPatternModEntities": "Was M1 a sibling and spouse of M0 's sibling",
        "questionTemplate": "Was [entity] a [ROLE_SIMPLE] and [ROLE_SIMPLE] of [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( M1 != ?x0 ) .\nFILTER ( M1 != ?x0 ) .\nM1 P0 ?x0 .\nM1 P1 ?x0\n}",
        "recursionDepth": 22,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P3373 wd:Q3345 .\nFILTER ( ?x0 != wd:Q3345 ) .\nFILTER ( wd:Q3340 != ?x0 ) .\nFILTER ( wd:Q3340 != ?x0 ) .\nwd:Q3340 wdt:P3373 ?x0 .\nwd:Q3340 wdt:P26 ?x0\n}",
        "questionWithBrackets": "Was [Ptolemy IX Lathyros] a sibling and spouse of [Ptolemy X Alexander I] 's sibling"
    },
    {
        "questionIdx": 62970,
        "questionPatternModEntities": "Was M0 executive produced by M1 and M2 , written by M4 , produced by M5 , and executive produced by M3",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] and [entity] , [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P0 M3 .\nM0 P1 M4 .\nM0 P2 M5\n}",
        "recursionDepth": 47,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q2947967 wdt:P1431 wd:Q8877 .\nwd:Q2947967 wdt:P1431 wd:Q362793 .\nwd:Q2947967 wdt:P1431 wd:Q55602356 .\nwd:Q2947967 wdt:P162|wdt:P272 wd:Q63656290 .\nwd:Q2947967 wdt:P58 wd:Q6984051\n}",
        "questionWithBrackets": "Was [Under the Dome] executive produced by [Jack Bender] and [Steven Spielberg] , written by [Neal Baer] , produced by [Randy Sutter] , and executive produced by [Justin Falvey]"
    },
    {
        "questionIdx": 63121,
        "questionPatternModEntities": "Was M1 executive produced by M0 's sibling 's spouse",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x1 P1 M0 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x1 != M0 ) .\nM1 P2 ?x0\n}",
        "recursionDepth": 21,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P26 ?x1 .\n?x1 wdt:P3373 wd:Q94881390 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x1 != wd:Q94881390 ) .\nwd:Q480696 wdt:P1431 ?x0\n}",
        "questionWithBrackets": "Was [The Great King] executive produced by [Ulla S\u00f6derbaum] 's sibling 's spouse"
    },
    {
        "questionIdx": 63158,
        "questionPatternModEntities": "Was M2 produced by M3 and M4 and executive produced by a Canadian sibling of M0",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] and [entity] and [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M0 ) .\nM2 P2 ?x0 .\nM2 P3 M3 .\nM2 P3 M4\n}",
        "recursionDepth": 39,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P27 wd:Q16 .\n?x0 wdt:P3373 wd:Q86157610 .\nFILTER ( ?x0 != wd:Q86157610 ) .\nwd:Q48796994 wdt:P1431 ?x0 .\nwd:Q48796994 wdt:P162|wdt:P272 wd:Q336075 .\nwd:Q48796994 wdt:P162|wdt:P272 wd:Q17092493\n}",
        "questionWithBrackets": "Was [The Boys] produced by [Eric Kripke] and [Point Grey Pictures] and executive produced by a Canadian sibling of [Danya Rogen]"
    },
    {
        "questionIdx": 63211,
        "questionPatternModEntities": "Was M0 M1 's Japanese employee",
        "questionTemplate": "Was [entity] [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M2\n}",
        "recursionDepth": 16,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q55400 wdt:P108 wd:Q182950 .\nwd:Q55400 wdt:P27 wd:Q17\n}",
        "questionWithBrackets": "Was [Hayao Miyazaki] [Studio Ghibli] 's Japanese employee"
    },
    {
        "questionIdx": 63336,
        "questionPatternModEntities": "Was M0 produced , edited , written , and executive produced by M1",
        "questionTemplate": "Was [entity] [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1 .\nM0 P2 M1 .\nM0 P3 M1\n}",
        "recursionDepth": 30,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q854990 wdt:P1040 wd:Q8006 .\nwd:Q854990 wdt:P1431 wd:Q8006 .\nwd:Q854990 wdt:P162|wdt:P272 wd:Q8006 .\nwd:Q854990 wdt:P58 wd:Q8006\n}",
        "questionWithBrackets": "Was [Kagemusha] produced , edited , written , and executive produced by [Akira Kurosawa]"
    },
    {
        "questionIdx": 63357,
        "questionPatternModEntities": "Was M2 executive produced , written , and directed by a female spouse of M1",
        "questionTemplate": "Was [entity] [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M1 ) .\nM2 P2 ?x0 .\nM2 P3 ?x0 .\nM2 P4 ?x0\n}",
        "recursionDepth": 36,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P21 wd:Q6581072 .\n?x0 wdt:P26 wd:Q44221 .\nFILTER ( ?x0 != wd:Q44221 ) .\nwd:Q946478 wdt:P57 ?x0 .\nwd:Q946478 wdt:P1431 ?x0 .\nwd:Q946478 wdt:P58 ?x0\n}",
        "questionWithBrackets": "Was [Filth and Wisdom] executive produced , written , and directed by a female spouse of [Sean Penn]"
    },
    {
        "questionIdx": 63400,
        "questionPatternModEntities": "Was M1 's employee M0 's Chinese sibling",
        "questionTemplate": "Was [entity] 's [ROLE_SIMPLE] [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P2 M2 .\nFILTER ( ?x0 != M0 )\n}",
        "recursionDepth": 20,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P108 wd:Q732353 .\n?x0 wdt:P27 wd:Q148 .\n?x0 wdt:P3373 wd:Q77895 .\nFILTER ( ?x0 != wd:Q77895 )\n}",
        "questionWithBrackets": "Was [National Library of China] 's employee [Pujie] 's Chinese sibling"
    },
    {
        "questionIdx": 63433,
        "questionPatternModEntities": "Was M0 M3 's German Italian parent",
        "questionTemplate": "Was [entity] [entity] 's [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P1 M3\n}",
        "recursionDepth": 21,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q97037 wdt:P40|wdt:P355 wd:Q437336 .\nwd:Q97037 wdt:P27 wd:Q183 .\nwd:Q97037 wdt:P27 wd:Q38\n}",
        "questionWithBrackets": "Was [Georg Klotz] [Eva Klotz] 's German Italian parent"
    },
    {
        "questionIdx": 63566,
        "questionPatternModEntities": "Was M2 executive produced by M0 's male sibling and written by M3 and M4",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M0 ) .\nM2 P2 ?x0 .\nM2 P3 M3 .\nM2 P3 M4\n}",
        "recursionDepth": 37,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P21 wd:Q6581097 .\n?x0 wdt:P3373 wd:Q15982167 .\nFILTER ( ?x0 != wd:Q15982167 ) .\nwd:Q90340902 wdt:P1431 ?x0 .\nwd:Q90340902 wdt:P58 wd:Q89738028 .\nwd:Q90340902 wdt:P58 wd:Q90341521\n}",
        "questionWithBrackets": "Was [Crip Camp] executive produced by [Malik Obama] 's male sibling and written by [James LeBrecht] and [Nicole Newnham]"
    },
    {
        "questionIdx": 63601,
        "questionPatternModEntities": "Was M2 edited by M0 's male employee",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nM2 P2 ?x0\n}",
        "recursionDepth": 21,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P108 wd:Q1130457 .\n?x0 wdt:P21 wd:Q6581097 .\nwd:Q118976 wdt:P1040 ?x0\n}",
        "questionWithBrackets": "Was [Alexander Nevsky] edited by [Gerasimov Institute of Cinematography] 's male employee"
    },
    {
        "questionIdx": 63614,
        "questionPatternModEntities": "Was M0 M1 's British Japanese sibling",
        "questionTemplate": "Was [entity] [entity] 's [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\nFILTER ( M0 != M1 ) .\nM0 P0 M1 .\nM0 P1 M2 .\nM0 P1 M3\n}",
        "recursionDepth": 21,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nFILTER ( wd:Q313638 != wd:Q96087979 ) .\nwd:Q313638 wdt:P27 wd:Q17 .\nwd:Q313638 wdt:P27 wd:Q145 .\nwd:Q313638 wdt:P3373 wd:Q96087979\n}",
        "questionWithBrackets": "Was [Lafcadio Hearn] [James Daniel Hearn] 's British Japanese sibling"
    },
    {
        "questionIdx": 63616,
        "questionPatternModEntities": "Was M0 a British Japanese male sibling of M1",
        "questionTemplate": "Was [entity] a [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nFILTER ( M0 != M1 ) .\nM0 P0 M1 .\nM0 P1 M2 .\nM0 P1 M3 .\nM0 P2 M4\n}",
        "recursionDepth": 28,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nFILTER ( wd:Q313638 != wd:Q96087979 ) .\nwd:Q313638 wdt:P21 wd:Q6581097 .\nwd:Q313638 wdt:P27 wd:Q17 .\nwd:Q313638 wdt:P27 wd:Q145 .\nwd:Q313638 wdt:P3373 wd:Q96087979\n}",
        "questionWithBrackets": "Was [Lafcadio Hearn] a British Japanese male sibling of [James Daniel Hearn]"
    },
    {
        "questionIdx": 63618,
        "questionPatternModEntities": "Was M0 a Japanese British sibling of M1",
        "questionTemplate": "Was [entity] a [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nFILTER ( M0 != M1 ) .\nM0 P0 M1 .\nM0 P1 M2 .\nM0 P1 M3\n}",
        "recursionDepth": 23,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nFILTER ( wd:Q313638 != wd:Q96087979 ) .\nwd:Q313638 wdt:P27 wd:Q17 .\nwd:Q313638 wdt:P27 wd:Q145 .\nwd:Q313638 wdt:P3373 wd:Q96087979\n}",
        "questionWithBrackets": "Was [Lafcadio Hearn] a Japanese British sibling of [James Daniel Hearn]"
    },
    {
        "questionIdx": 63626,
        "questionPatternModEntities": "Was M0 's employee 's parent and sibling M1",
        "questionTemplate": "Was [entity] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE] and [ROLE_SIMPLE] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( M1 != ?x0 ) .\nM1 P1 ?x0 .\nM1 P2 ?x0\n}",
        "recursionDepth": 20,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P108 wd:Q209842 .\nFILTER ( wd:Q76395756 != ?x0 ) .\nwd:Q76395756 wdt:P40|wdt:P355 ?x0 .\nwd:Q76395756 wdt:P3373 ?x0\n}",
        "questionWithBrackets": "Was [University of Paris] 's employee 's parent and sibling [Goudchaux Brunschvicg]"
    },
    {
        "questionIdx": 63631,
        "questionPatternModEntities": "Was M0 executive produced , written , directed , and produced by M1",
        "questionTemplate": "Was [entity] [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1 .\nM0 P2 M1 .\nM0 P3 M1\n}",
        "recursionDepth": 30,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q391143 wdt:P57 wd:Q36970 .\nwd:Q391143 wdt:P1431 wd:Q36970 .\nwd:Q391143 wdt:P162|wdt:P272 wd:Q36970 .\nwd:Q391143 wdt:P58 wd:Q36970\n}",
        "questionWithBrackets": "Was [Chinese Zodiac] executive produced , written , directed , and produced by [Jackie Chan]"
    },
    {
        "questionIdx": 63650,
        "questionPatternModEntities": "Was M0 's employee influenced by a spouse of M1",
        "questionTemplate": "Was [entity] 's [ROLE_SIMPLE] [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 ?x1 .\n?x1 P2 M1 .\nFILTER ( ?x1 != M1 )\n}",
        "recursionDepth": 22,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P737 ?x1 .\n?x0 wdt:P108 wd:Q34433 .\n?x1 wdt:P26 wd:Q14623681 .\nFILTER ( ?x1 != wd:Q14623681 )\n}",
        "questionWithBrackets": "Was [University of Oxford] 's employee influenced by a spouse of [Jane Belson]"
    },
    {
        "questionIdx": 63719,
        "questionPatternModEntities": "Was M0 executive produced by M1 and edited by M2",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M2\n}",
        "recursionDepth": 24,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q15072814 wdt:P1040 wd:Q18674647 .\nwd:Q15072814 wdt:P1431 wd:Q8877\n}",
        "questionWithBrackets": "Was [Extant] executive produced by [Steven Spielberg] and edited by [Augie Hess]"
    },
    {
        "questionIdx": 63726,
        "questionPatternModEntities": "Was M1 directed , edited , produced , and written by a spouse of M0",
        "questionTemplate": "Was [entity] [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nM1 P1 ?x0 .\nM1 P2 ?x0 .\nM1 P3 ?x0 .\nM1 P4 ?x0\n}",
        "recursionDepth": 35,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P26 wd:Q3032150 .\nFILTER ( ?x0 != wd:Q3032150 ) .\nwd:Q854990 wdt:P57 ?x0 .\nwd:Q854990 wdt:P1040 ?x0 .\nwd:Q854990 wdt:P162|wdt:P272 ?x0 .\nwd:Q854990 wdt:P58 ?x0\n}",
        "questionWithBrackets": "Was [Kagemusha] directed , edited , produced , and written by a spouse of [Y\u014dko Yaguchi]"
    },
    {
        "questionIdx": 63743,
        "questionPatternModEntities": "Was M1 edited by , directed by , written by , executive produced by , and produced by M0 's sibling",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nM1 P1 ?x0 .\nM1 P2 ?x0 .\nM1 P3 ?x0 .\nM1 P4 ?x0 .\nM1 P5 ?x0\n}",
        "recursionDepth": 43,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P3373 wd:Q28370409 .\nFILTER ( ?x0 != wd:Q28370409 ) .\nwd:Q28146810 wdt:P57 ?x0 .\nwd:Q28146810 wdt:P1040 ?x0 .\nwd:Q28146810 wdt:P1431 ?x0 .\nwd:Q28146810 wdt:P162|wdt:P272 ?x0 .\nwd:Q28146810 wdt:P58 ?x0\n}",
        "questionWithBrackets": "Was [Bullets, Fangs and Dinner at 8] edited by , directed by , written by , executive produced by , and produced by [Everton Rocca] 's sibling"
    },
    {
        "questionIdx": 63748,
        "questionPatternModEntities": "Was M1 edited by , produced by , executive produced by , directed by , and written by M0 's sibling",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nM1 P1 ?x0 .\nM1 P2 ?x0 .\nM1 P3 ?x0 .\nM1 P4 ?x0 .\nM1 P5 ?x0\n}",
        "recursionDepth": 43,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P3373 wd:Q28370409 .\nFILTER ( ?x0 != wd:Q28370409 ) .\nwd:Q28146810 wdt:P57 ?x0 .\nwd:Q28146810 wdt:P1040 ?x0 .\nwd:Q28146810 wdt:P1431 ?x0 .\nwd:Q28146810 wdt:P162|wdt:P272 ?x0 .\nwd:Q28146810 wdt:P58 ?x0\n}",
        "questionWithBrackets": "Was [Bullets, Fangs and Dinner at 8] edited by , produced by , executive produced by , directed by , and written by [Everton Rocca] 's sibling"
    },
    {
        "questionIdx": 63749,
        "questionPatternModEntities": "Was M1 edited by , produced by , written by , executive produced by , and directed by M0 's sibling",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nM1 P1 ?x0 .\nM1 P2 ?x0 .\nM1 P3 ?x0 .\nM1 P4 ?x0 .\nM1 P5 ?x0\n}",
        "recursionDepth": 43,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P3373 wd:Q28370409 .\nFILTER ( ?x0 != wd:Q28370409 ) .\nwd:Q28146810 wdt:P57 ?x0 .\nwd:Q28146810 wdt:P1040 ?x0 .\nwd:Q28146810 wdt:P1431 ?x0 .\nwd:Q28146810 wdt:P162|wdt:P272 ?x0 .\nwd:Q28146810 wdt:P58 ?x0\n}",
        "questionWithBrackets": "Was [Bullets, Fangs and Dinner at 8] edited by , produced by , written by , executive produced by , and directed by [Everton Rocca] 's sibling"
    },
    {
        "questionIdx": 63750,
        "questionPatternModEntities": "Was M1 edited by , written by , executive produced by , directed by , and produced by M0 's sibling",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nM1 P1 ?x0 .\nM1 P2 ?x0 .\nM1 P3 ?x0 .\nM1 P4 ?x0 .\nM1 P5 ?x0\n}",
        "recursionDepth": 43,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P3373 wd:Q28370409 .\nFILTER ( ?x0 != wd:Q28370409 ) .\nwd:Q28146810 wdt:P57 ?x0 .\nwd:Q28146810 wdt:P1040 ?x0 .\nwd:Q28146810 wdt:P1431 ?x0 .\nwd:Q28146810 wdt:P162|wdt:P272 ?x0 .\nwd:Q28146810 wdt:P58 ?x0\n}",
        "questionWithBrackets": "Was [Bullets, Fangs and Dinner at 8] edited by , written by , executive produced by , directed by , and produced by [Everton Rocca] 's sibling"
    },
    {
        "questionIdx": 63758,
        "questionPatternModEntities": "Was M1 executive produced , directed , edited , and written by M0 's sibling",
        "questionTemplate": "Was [entity] [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nM1 P1 ?x0 .\nM1 P2 ?x0 .\nM1 P3 ?x0 .\nM1 P4 ?x0\n}",
        "recursionDepth": 34,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P3373 wd:Q28370409 .\nFILTER ( ?x0 != wd:Q28370409 ) .\nwd:Q28146810 wdt:P57 ?x0 .\nwd:Q28146810 wdt:P1040 ?x0 .\nwd:Q28146810 wdt:P1431 ?x0 .\nwd:Q28146810 wdt:P58 ?x0\n}",
        "questionWithBrackets": "Was [Bullets, Fangs and Dinner at 8] executive produced , directed , edited , and written by [Everton Rocca] 's sibling"
    },
    {
        "questionIdx": 63759,
        "questionPatternModEntities": "Was M1 executive produced , written , produced , directed , and edited by M0 's sibling",
        "questionTemplate": "Was [entity] [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nM1 P1 ?x0 .\nM1 P2 ?x0 .\nM1 P3 ?x0 .\nM1 P4 ?x0 .\nM1 P5 ?x0\n}",
        "recursionDepth": 39,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P3373 wd:Q28370409 .\nFILTER ( ?x0 != wd:Q28370409 ) .\nwd:Q28146810 wdt:P57 ?x0 .\nwd:Q28146810 wdt:P1040 ?x0 .\nwd:Q28146810 wdt:P1431 ?x0 .\nwd:Q28146810 wdt:P162|wdt:P272 ?x0 .\nwd:Q28146810 wdt:P58 ?x0\n}",
        "questionWithBrackets": "Was [Bullets, Fangs and Dinner at 8] executive produced , written , produced , directed , and edited by [Everton Rocca] 's sibling"
    },
    {
        "questionIdx": 63805,
        "questionPatternModEntities": "Was M0 M2 's Chinese parent",
        "questionTemplate": "Was [entity] [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M2\n}",
        "recursionDepth": 16,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q197431 wdt:P40|wdt:P355 wd:Q15895648 .\nwd:Q197431 wdt:P27 wd:Q148\n}",
        "questionWithBrackets": "Was [Zhao Dan] [Zhao Qing] 's Chinese parent"
    },
    {
        "questionIdx": 63809,
        "questionPatternModEntities": "Was M0 a spouse and parent of M1",
        "questionTemplate": "Was [entity] a [ROLE_SIMPLE] and [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nFILTER ( M0 != M1 ) .\nM0 P0 M1 .\nM0 P1 M1\n}",
        "recursionDepth": 18,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nFILTER ( wd:Q299737 != wd:Q9304 ) .\nwd:Q299737 wdt:P40|wdt:P355 wd:Q9304 .\nwd:Q299737 wdt:P26 wd:Q9304\n}",
        "questionWithBrackets": "Was [Mandukhai Khatun] a spouse and parent of [Dayan Khan]"
    },
    {
        "questionIdx": 64010,
        "questionPatternModEntities": "Was M2 founded by M1 's male spouse",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M1 ) .\nM2 P2 ?x0\n}",
        "recursionDepth": 21,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P21 wd:Q6581097 .\n?x0 wdt:P26 wd:Q13133 .\nFILTER ( ?x0 != wd:Q13133 ) .\nwd:Q17501863 wdt:P112 ?x0\n}",
        "questionWithBrackets": "Was [Young African Leaders Initiative] founded by [Michelle Obama] 's male spouse"
    },
    {
        "questionIdx": 64013,
        "questionPatternModEntities": "Was M4 's male Chinese Japanese spouse M0",
        "questionTemplate": "Was [entity] 's [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nFILTER ( M0 != M4 ) .\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P1 M3 .\nM0 P2 M4\n}",
        "recursionDepth": 26,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nFILTER ( wd:Q11434592 != wd:Q6875103 ) .\nwd:Q11434592 wdt:P21 wd:Q6581097 .\nwd:Q11434592 wdt:P27 wd:Q17 .\nwd:Q11434592 wdt:P27 wd:Q148 .\nwd:Q11434592 wdt:P26 wd:Q6875103\n}",
        "questionWithBrackets": "Was [Misako Watanabe] 's male Chinese Japanese spouse [Katsumi \u014cyama]"
    },
    {
        "questionIdx": 64064,
        "questionPatternModEntities": "Was M0 edited by M1 and M2 , directed by M6 and M7 , and edited by M3 , M4 , and M5",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] and [entity] , [VP_SIMPLE] by [entity] and [entity] , and [VP_SIMPLE] by [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P0 M3 .\nM0 P0 M4 .\nM0 P0 M5 .\nM0 P1 M6 .\nM0 P1 M7\n}",
        "recursionDepth": 47,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q603857 wdt:P57 wd:Q474262 .\nwd:Q603857 wdt:P57 wd:Q295093 .\nwd:Q603857 wdt:P1040 wd:Q55211 .\nwd:Q603857 wdt:P1040 wd:Q541826 .\nwd:Q603857 wdt:P1040 wd:Q5639976 .\nwd:Q603857 wdt:P1040 wd:Q22074634 .\nwd:Q603857 wdt:P1040 wd:Q18021284\n}",
        "questionWithBrackets": "Was [11'09\"01 September 11] edited by [Robert Duffy] and [Jonathan Morris] , directed by [Amos Gitai] and [Claude Lelouch] , and edited by [Jay Cassidy] , [Hajime Okayasu] , and [Mohsen Makhmalbaf]"
    },
    {
        "questionIdx": 64071,
        "questionPatternModEntities": "Was M2 produced by M0 's Japanese sibling and produced by M3",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M0 ) .\nM2 P2 ?x0 .\nM2 P2 M3\n}",
        "recursionDepth": 32,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P27 wd:Q17 .\n?x0 wdt:P3373 wd:Q22023377 .\nFILTER ( ?x0 != wd:Q22023377 ) .\nwd:Q926134 wdt:P162|wdt:P272 ?x0 .\nwd:Q926134 wdt:P162|wdt:P272 wd:Q55403\n}",
        "questionWithBrackets": "Was [Death by Hanging] produced by [Eiko Oshima] 's Japanese sibling and produced by [Nagisa \u014cshima]"
    },
    {
        "questionIdx": 64097,
        "questionPatternModEntities": "Was M1 's spouse M0 's child",
        "questionTemplate": "Was [entity] 's [ROLE_SIMPLE] [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M1 )\n}",
        "recursionDepth": 15,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P749 wd:Q1089760 .\n?x0 wdt:P26 wd:Q76375112 .\nFILTER ( ?x0 != wd:Q76375112 )\n}",
        "questionWithBrackets": "Was [Eliazbeth Fristan] 's spouse [Church Mission Society] 's child"
    },
    {
        "questionIdx": 64099,
        "questionPatternModEntities": "Was M0 a Dutch sibling of M1",
        "questionTemplate": "Was [entity] a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nFILTER ( M0 != M1 ) .\nM0 P0 M1 .\nM0 P1 M2\n}",
        "recursionDepth": 18,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nFILTER ( wd:Q57664 != wd:Q68089 ) .\nwd:Q57664 wdt:P27 wd:Q29999 .\nwd:Q57664 wdt:P3373 wd:Q68089\n}",
        "questionWithBrackets": "Was [Emma of Waldeck and Pyrmont] a Dutch sibling of [Princess Pauline of Waldeck and Pyrmont]"
    },
    {
        "questionIdx": 64109,
        "questionPatternModEntities": "Was M1 M0 's actor 's sibling 's sibling",
        "questionTemplate": "Was [entity] [entity] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x1 P1 M0 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( M1 != ?x0 ) .\nM1 P0 ?x0\n}",
        "recursionDepth": 19,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P3373 ?x1 .\n?x1 wdt:P453 wd:Q222573 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( wd:Q187602 != ?x0 ) .\nwd:Q187602 wdt:P3373 ?x0\n}",
        "questionWithBrackets": "Was [Circe] [femme fatale] 's actor 's sibling 's sibling"
    },
    {
        "questionIdx": 64140,
        "questionPatternModEntities": "Was M0 M3 's British Mexican spouse",
        "questionTemplate": "Was [entity] [entity] 's [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\nFILTER ( M0 != M3 ) .\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P1 M3\n}",
        "recursionDepth": 21,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nFILTER ( wd:Q233207 != wd:Q58640382 ) .\nwd:Q233207 wdt:P27 wd:Q145 .\nwd:Q233207 wdt:P27 wd:Q96 .\nwd:Q233207 wdt:P26 wd:Q58640382\n}",
        "questionWithBrackets": "Was [Leonora Carrington] [Em\u00e9rico Weisz] 's British Mexican spouse"
    },
    {
        "questionIdx": 64207,
        "questionPatternModEntities": "Was M1 directed and edited by a spouse of M0",
        "questionTemplate": "Was [entity] [VP_SIMPLE] and [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nM1 P1 ?x0 .\nM1 P2 ?x0\n}",
        "recursionDepth": 25,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P26 wd:Q40162 .\nFILTER ( ?x0 != wd:Q40162 ) .\nwd:Q457886 wdt:P57 ?x0 .\nwd:Q457886 wdt:P1040 ?x0\n}",
        "questionWithBrackets": "Was [Amblin'] directed and edited by a spouse of [Kate Capshaw]"
    },
    {
        "questionIdx": 64402,
        "questionPatternModEntities": "Was M1 edited by a parent of M0",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 ?x0\n}",
        "recursionDepth": 18,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q120593 .\nwd:Q45602 wdt:P1040 ?x0\n}",
        "questionWithBrackets": "Was [Modern Times] edited by a parent of [Eugene Chaplin]"
    },
    {
        "questionIdx": 64423,
        "questionPatternModEntities": "Was M2 directed by a Japanese employee of M0",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nM2 P2 ?x0\n}",
        "recursionDepth": 23,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P108 wd:Q8093 .\n?x0 wdt:P27 wd:Q17 .\nwd:Q2264301 wdt:P57 ?x0\n}",
        "questionWithBrackets": "Was [Donkey Kong Jr.] directed by a Japanese employee of [Nintendo]"
    },
    {
        "questionIdx": 64447,
        "questionPatternModEntities": "Was M2 a female sibling of a American employee of M0",
        "questionTemplate": "Was [entity] a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( M2 != ?x0 ) .\nM2 P2 ?x0 .\nM2 P3 M3\n}",
        "recursionDepth": 29,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P108 wd:Q131252 .\n?x0 wdt:P27 wd:Q30 .\nFILTER ( wd:Q773197 != ?x0 ) .\nwd:Q773197 wdt:P21 wd:Q6581072 .\nwd:Q773197 wdt:P3373 ?x0\n}",
        "questionWithBrackets": "Was [Auma Obama] a female sibling of a American employee of [University of Chicago]"
    },
    {
        "questionIdx": 64458,
        "questionPatternModEntities": "Was M0 M1 's British sibling",
        "questionTemplate": "Was [entity] [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\nFILTER ( M0 != M1 ) .\nM0 P0 M1 .\nM0 P1 M2\n}",
        "recursionDepth": 16,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nFILTER ( wd:Q25191 != wd:Q372788 ) .\nwd:Q25191 wdt:P27 wd:Q145 .\nwd:Q25191 wdt:P3373 wd:Q372788\n}",
        "questionWithBrackets": "Was [Christopher Nolan] [Jonathan Nolan] 's British sibling"
    },
    {
        "questionIdx": 64459,
        "questionPatternModEntities": "Was M0 's sibling employed by M1 and M2",
        "questionTemplate": "Was [entity] 's [ROLE_SIMPLE] [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\nFILTER ( ?x0 != M0 )\n}",
        "recursionDepth": 20,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P108 wd:Q50662 .\n?x0 wdt:P108 wd:Q470438 .\n?x0 wdt:P3373 wd:Q567 .\nFILTER ( ?x0 != wd:Q567 )\n}",
        "questionWithBrackets": "Was [Angela Merkel] 's sibling employed by [Goethe University Frankfurt] and [Physikalisch-Technische Bundesanstalt]"
    },
    {
        "questionIdx": 64488,
        "questionPatternModEntities": "Was M2 written by and directed by a French sibling of M0",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by and [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M0 ) .\nM2 P2 ?x0 .\nM2 P3 ?x0\n}",
        "recursionDepth": 31,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P27 wd:Q142 .\n?x0 wdt:P3373 wd:Q105946886 .\nFILTER ( ?x0 != wd:Q105946886 ) .\nwd:Q176147 wdt:P57 ?x0 .\nwd:Q176147 wdt:P58 ?x0\n}",
        "questionWithBrackets": "Was [Charlotte for Ever] written by and directed by a French sibling of [Liliane Gainsbourg]"
    },
    {
        "questionIdx": 64565,
        "questionPatternModEntities": "Was M1 directed by , written by , edited by , executive produced by , and produced by M0 's parent",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 ?x0 .\nM1 P2 ?x0 .\nM1 P3 ?x0 .\nM1 P4 ?x0 .\nM1 P5 ?x0\n}",
        "recursionDepth": 43,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q1620638 .\nwd:Q854990 wdt:P57 ?x0 .\nwd:Q854990 wdt:P1040 ?x0 .\nwd:Q854990 wdt:P1431 ?x0 .\nwd:Q854990 wdt:P162|wdt:P272 ?x0 .\nwd:Q854990 wdt:P58 ?x0\n}",
        "questionWithBrackets": "Was [Kagemusha] directed by , written by , edited by , executive produced by , and produced by [Hisao Kurosawa] 's parent"
    },
    {
        "questionIdx": 64569,
        "questionPatternModEntities": "Was M1 edited by , written by , executive produced by , directed by , and produced by M0 's parent",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 ?x0 .\nM1 P2 ?x0 .\nM1 P3 ?x0 .\nM1 P4 ?x0 .\nM1 P5 ?x0\n}",
        "recursionDepth": 43,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q1620638 .\nwd:Q854990 wdt:P57 ?x0 .\nwd:Q854990 wdt:P1040 ?x0 .\nwd:Q854990 wdt:P1431 ?x0 .\nwd:Q854990 wdt:P162|wdt:P272 ?x0 .\nwd:Q854990 wdt:P58 ?x0\n}",
        "questionWithBrackets": "Was [Kagemusha] edited by , written by , executive produced by , directed by , and produced by [Hisao Kurosawa] 's parent"
    },
    {
        "questionIdx": 64573,
        "questionPatternModEntities": "Was M1 executive produced by , produced by , edited by , and written by M0 's spouse",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nM1 P1 ?x0 .\nM1 P2 ?x0 .\nM1 P3 ?x0 .\nM1 P4 ?x0\n}",
        "recursionDepth": 37,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P26 wd:Q6813152 .\nFILTER ( ?x0 != wd:Q6813152 ) .\nwd:Q17738 wdt:P1040 ?x0 .\nwd:Q17738 wdt:P1431 ?x0 .\nwd:Q17738 wdt:P162|wdt:P272 ?x0 .\nwd:Q17738 wdt:P58 ?x0\n}",
        "questionWithBrackets": "Was [Star Wars: Episode IV \u2013 A New Hope] executive produced by , produced by , edited by , and written by [Mellody Hobson] 's spouse"
    },
    {
        "questionIdx": 64590,
        "questionPatternModEntities": "Was M0 written by M1 , M2 , and M3 , directed by M5 , M6 , and M7 , and produced by M4",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] , [entity] , and [entity] , [VP_SIMPLE] by [entity] , [entity] , and [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P0 M3 .\nM0 P1 M4 .\nM0 P2 M5 .\nM0 P2 M6 .\nM0 P2 M7\n}",
        "recursionDepth": 46,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q1079 wdt:P57 wd:Q3440795 .\nwd:Q1079 wdt:P57 wd:Q371455 .\nwd:Q1079 wdt:P57 wd:Q23547 .\nwd:Q1079 wdt:P162|wdt:P272 wd:Q652390 .\nwd:Q1079 wdt:P58 wd:Q4500 .\nwd:Q1079 wdt:P58 wd:Q5542223 .\nwd:Q1079 wdt:P58 wd:Q7174311\n}",
        "questionWithBrackets": "Was [Breaking Bad] written by [George Mastras] , [Peter Gould] , and [Vince Gilligan] , directed by [David Slade] , [Adam Bernstein] , and [Bryan Cranston] , and produced by [Sony Pictures Television]"
    },
    {
        "questionIdx": 64615,
        "questionPatternModEntities": "Was M1 executive produced , edited , directed , produced , and written by M0 's sibling",
        "questionTemplate": "Was [entity] [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nM1 P1 ?x0 .\nM1 P2 ?x0 .\nM1 P3 ?x0 .\nM1 P4 ?x0 .\nM1 P5 ?x0\n}",
        "recursionDepth": 39,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P3373 wd:Q28370409 .\nFILTER ( ?x0 != wd:Q28370409 ) .\nwd:Q28146810 wdt:P57 ?x0 .\nwd:Q28146810 wdt:P1040 ?x0 .\nwd:Q28146810 wdt:P1431 ?x0 .\nwd:Q28146810 wdt:P162|wdt:P272 ?x0 .\nwd:Q28146810 wdt:P58 ?x0\n}",
        "questionWithBrackets": "Was [Bullets, Fangs and Dinner at 8] executive produced , edited , directed , produced , and written by [Everton Rocca] 's sibling"
    },
    {
        "questionIdx": 64621,
        "questionPatternModEntities": "Was M1 produced , written , edited , directed , and executive produced by M0 's sibling",
        "questionTemplate": "Was [entity] [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nM1 P1 ?x0 .\nM1 P2 ?x0 .\nM1 P3 ?x0 .\nM1 P4 ?x0 .\nM1 P5 ?x0\n}",
        "recursionDepth": 39,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P3373 wd:Q28370409 .\nFILTER ( ?x0 != wd:Q28370409 ) .\nwd:Q28146810 wdt:P57 ?x0 .\nwd:Q28146810 wdt:P1040 ?x0 .\nwd:Q28146810 wdt:P1431 ?x0 .\nwd:Q28146810 wdt:P162|wdt:P272 ?x0 .\nwd:Q28146810 wdt:P58 ?x0\n}",
        "questionWithBrackets": "Was [Bullets, Fangs and Dinner at 8] produced , written , edited , directed , and executive produced by [Everton Rocca] 's sibling"
    },
    {
        "questionIdx": 64622,
        "questionPatternModEntities": "Was M1 written by , directed by , executive produced by , edited by , and produced by M0 's spouse",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nM1 P1 ?x0 .\nM1 P2 ?x0 .\nM1 P3 ?x0 .\nM1 P4 ?x0 .\nM1 P5 ?x0\n}",
        "recursionDepth": 43,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P26 wd:Q6813152 .\nFILTER ( ?x0 != wd:Q6813152 ) .\nwd:Q17738 wdt:P57 ?x0 .\nwd:Q17738 wdt:P1040 ?x0 .\nwd:Q17738 wdt:P1431 ?x0 .\nwd:Q17738 wdt:P162|wdt:P272 ?x0 .\nwd:Q17738 wdt:P58 ?x0\n}",
        "questionWithBrackets": "Was [Star Wars: Episode IV \u2013 A New Hope] written by , directed by , executive produced by , edited by , and produced by [Mellody Hobson] 's spouse"
    },
    {
        "questionIdx": 64626,
        "questionPatternModEntities": "Was M0 written by , produced by , and executive produced by M1 and M2",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P1 M1 .\nM0 P1 M2 .\nM0 P2 M1 .\nM0 P2 M2\n}",
        "recursionDepth": 31,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q23572 wdt:P1431 wd:Q503997 .\nwd:Q23572 wdt:P1431 wd:Q1151388 .\nwd:Q23572 wdt:P162|wdt:P272 wd:Q503997 .\nwd:Q23572 wdt:P162|wdt:P272 wd:Q1151388 .\nwd:Q23572 wdt:P58 wd:Q503997 .\nwd:Q23572 wdt:P58 wd:Q1151388\n}",
        "questionWithBrackets": "Was [Game of Thrones] written by , produced by , and executive produced by [David Benioff] and [D. B. Weiss]"
    },
    {
        "questionIdx": 64678,
        "questionPatternModEntities": "Was M1 's Dutch Spanish sibling M0",
        "questionTemplate": "Was [entity] 's [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nFILTER ( M0 != M1 ) .\nM0 P0 M1 .\nM0 P1 M2 .\nM0 P1 M3\n}",
        "recursionDepth": 21,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nFILTER ( wd:Q723001 != wd:Q3780525 ) .\nwd:Q723001 wdt:P27 wd:Q29999 .\nwd:Q723001 wdt:P27 wd:Q29 .\nwd:Q723001 wdt:P3373 wd:Q3780525\n}",
        "questionWithBrackets": "Was [Olaf Wildeboer] 's Dutch Spanish sibling [Aschwin Wildeboer]"
    },
    {
        "questionIdx": 64684,
        "questionPatternModEntities": "Was M0 produced by and directed by M1 , M2 , M3 , and M4",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by and [VP_SIMPLE] by [entity] , [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P0 M3 .\nM0 P0 M4 .\nM0 P1 M1 .\nM0 P1 M2 .\nM0 P1 M3 .\nM0 P1 M4\n}",
        "recursionDepth": 30,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q3977597 wdt:P57 wd:Q4235 .\nwd:Q3977597 wdt:P57 wd:Q5127380 .\nwd:Q3977597 wdt:P57 wd:Q2607618 .\nwd:Q3977597 wdt:P57 wd:Q40220 .\nwd:Q3977597 wdt:P162|wdt:P272 wd:Q4235 .\nwd:Q3977597 wdt:P162|wdt:P272 wd:Q5127380 .\nwd:Q3977597 wdt:P162|wdt:P272 wd:Q2607618 .\nwd:Q3977597 wdt:P162|wdt:P272 wd:Q40220\n}",
        "questionWithBrackets": "Was [Super Rhino] produced by and directed by [Clark Spencer] , [Mark Walton] , [Susie Essman] , and [Miley Cyrus]"
    },
    {
        "questionIdx": 64685,
        "questionPatternModEntities": "Was M0 's employee 's Canadian male British parent M1",
        "questionTemplate": "Was [entity] 's [ROLE_SIMPLE] 's [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 M2 .\nM1 P1 M3 .\nM1 P2 M4 .\nM1 P3 ?x0\n}",
        "recursionDepth": 30,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P108 wd:Q795988 .\nwd:Q21338413 wdt:P40|wdt:P355 ?x0 .\nwd:Q21338413 wdt:P21 wd:Q6581097 .\nwd:Q21338413 wdt:P27 wd:Q145 .\nwd:Q21338413 wdt:P27 wd:Q16\n}",
        "questionWithBrackets": "Was [University of Guelph] 's employee 's Canadian male British parent [Douglas Keith McEwan Kevan]"
    },
    {
        "questionIdx": 64694,
        "questionPatternModEntities": "Was M2 written by and executive produced by M1 's sibling 's French spouse",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 ?x1 .\n?x1 P2 M1 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x1 != M1 ) .\nM2 P3 ?x0 .\nM2 P4 ?x0\n}",
        "recursionDepth": 34,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P27 wd:Q142 .\n?x0 wdt:P26 ?x1 .\n?x1 wdt:P3373 wd:Q3193313 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x1 != wd:Q3193313 ) .\nwd:Q531362 wdt:P1431 ?x0 .\nwd:Q531362 wdt:P58 ?x0\n}",
        "questionWithBrackets": "Was [Angel-A] written by and executive produced by [Karine Silla] 's sibling 's French spouse"
    },
    {
        "questionIdx": 64809,
        "questionPatternModEntities": "Was M0 's sibling 's male sibling M1",
        "questionTemplate": "Was [entity] 's [ROLE_SIMPLE] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( M1 != ?x0 ) .\nM1 P0 ?x0 .\nM1 P1 M2\n}",
        "recursionDepth": 20,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P3373 wd:Q207 .\nFILTER ( ?x0 != wd:Q207 ) .\nFILTER ( wd:Q221997 != ?x0 ) .\nwd:Q221997 wdt:P21 wd:Q6581097 .\nwd:Q221997 wdt:P3373 ?x0\n}",
        "questionWithBrackets": "Was [George W. Bush] 's sibling 's male sibling [Jeb Bush]"
    },
    {
        "questionIdx": 64896,
        "questionPatternModEntities": "Was M0 M4 's French male Dutch spouse",
        "questionTemplate": "Was [entity] [entity] 's [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\nFILTER ( M0 != M4 ) .\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P1 M3 .\nM0 P2 M4\n}",
        "recursionDepth": 26,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nFILTER ( wd:Q170345 != wd:Q4820953 ) .\nwd:Q170345 wdt:P21 wd:Q6581097 .\nwd:Q170345 wdt:P27 wd:Q29999 .\nwd:Q170345 wdt:P27 wd:Q142 .\nwd:Q170345 wdt:P26 wd:Q4820953\n}",
        "questionWithBrackets": "Was [Kees van Dongen] [Augusta Preitinger] 's French male Dutch spouse"
    },
    {
        "questionIdx": 64897,
        "questionPatternModEntities": "Was M2 M1 's female parent 's spouse 's Dutch sibling",
        "questionTemplate": "Was [entity] [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] 's [ROLE_SIMPLE] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x1 P1 M0 .\n?x1 P2 M1 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( M2 != ?x0 ) .\nM2 P3 ?x0 .\nM2 P4 M3\n}",
        "recursionDepth": 29,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P26 ?x1 .\n?x1 wdt:P40|wdt:P355 wd:Q27492 .\n?x1 wdt:P21 wd:Q6581072 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( wd:Q168674 != ?x0 ) .\nwd:Q168674 wdt:P27 wd:Q29999 .\nwd:Q168674 wdt:P3373 ?x0\n}",
        "questionWithBrackets": "Was [Sophie of W\u00fcrttemberg] [Duke Constantine Petrovich of Oldenburg] 's female parent 's spouse 's Dutch sibling"
    },
    {
        "questionIdx": 64898,
        "questionPatternModEntities": "Was M0 M1 's French Dutch male sibling",
        "questionTemplate": "Was [entity] [entity] 's [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\nFILTER ( M0 != M1 ) .\nM0 P0 M1 .\nM0 P1 M2 .\nM0 P1 M3 .\nM0 P2 M4\n}",
        "recursionDepth": 26,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nFILTER ( wd:Q170345 != wd:Q3175856 ) .\nwd:Q170345 wdt:P21 wd:Q6581097 .\nwd:Q170345 wdt:P27 wd:Q29999 .\nwd:Q170345 wdt:P27 wd:Q142 .\nwd:Q170345 wdt:P3373 wd:Q3175856\n}",
        "questionWithBrackets": "Was [Kees van Dongen] [Jean van Dongen] 's French Dutch male sibling"
    },
    {
        "questionIdx": 65011,
        "questionPatternModEntities": "Was M0 edited by M1 , directed by M7 , and edited by M2 , M3 , M4 , M5 , and M6",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity] , [entity] , [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P0 M3 .\nM0 P0 M4 .\nM0 P0 M5 .\nM0 P0 M6 .\nM0 P1 M7\n}",
        "recursionDepth": 45,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q1206255 wdt:P57 wd:Q77061 .\nwd:Q1206255 wdt:P1040 wd:Q72685 .\nwd:Q1206255 wdt:P1040 wd:Q17537229 .\nwd:Q1206255 wdt:P1040 wd:Q503742 .\nwd:Q1206255 wdt:P1040 wd:Q85942962 .\nwd:Q1206255 wdt:P1040 wd:Q17493395 .\nwd:Q1206255 wdt:P1040 wd:Q832573\n}",
        "questionWithBrackets": "Was [Germany 09] edited by [Katja Dringenberg] , directed by [Fatih Ak\u0131n] , and edited by [Romuald Karmakar] , [Anne J\u00fcnemann] , [Andrew Bird] , [Dietmar Kraus] , and [Bettina B\u00f6hler]"
    },
    {
        "questionIdx": 65034,
        "questionPatternModEntities": "Was M0 produced by M2 and written by M1",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M2\n}",
        "recursionDepth": 23,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q44477 wdt:P162|wdt:P272 wd:Q320211 .\nwd:Q44477 wdt:P58 wd:Q2831\n}",
        "questionWithBrackets": "Was [Michael Jackson's Ghosts] produced by [Stan Winston] and written by [Michael Jackson]"
    },
    {
        "questionIdx": 65163,
        "questionPatternModEntities": "Was M2 written by M1 's employee 's Italian sibling 's parent",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x1 P1 ?x2 .\n?x1 P2 M0 .\n?x2 P3 M1 .\nFILTER ( ?x1 != ?x2 ) .\nM2 P4 ?x0\n}",
        "recursionDepth": 29,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 ?x1 .\n?x1 wdt:P27 wd:Q38 .\n?x1 wdt:P3373 ?x2 .\n?x2 wdt:P108 wd:Q21578 .\nFILTER ( ?x1 != ?x2 ) .\nwd:Q13423943 wdt:P58 ?x0\n}",
        "questionWithBrackets": "Was [No label defined] written by [Princeton University] 's employee 's Italian sibling 's parent"
    },
    {
        "questionIdx": 65176,
        "questionPatternModEntities": "Was M2 a parent of M0 's Chinese sibling",
        "questionTemplate": "Was [entity] a [ROLE_SIMPLE] of [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M0 ) .\nM2 P2 ?x0\n}",
        "recursionDepth": 22,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P27 wd:Q148 .\n?x0 wdt:P3373 wd:Q48936751 .\nFILTER ( ?x0 != wd:Q48936751 ) .\nwd:Q197164 wdt:P40|wdt:P355 ?x0\n}",
        "questionWithBrackets": "Was [Zhang Bojun] a parent of [Zhang Shiming] 's Chinese sibling"
    },
    {
        "questionIdx": 65203,
        "questionPatternModEntities": "Was M3 's Spanish Italian parent M0",
        "questionTemplate": "Was [entity] 's [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P1 M3\n}",
        "recursionDepth": 21,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q267724 wdt:P40|wdt:P355 wd:Q356762 .\nwd:Q267724 wdt:P27 wd:Q38 .\nwd:Q267724 wdt:P27 wd:Q29\n}",
        "questionWithBrackets": "Was [Miguel Bos\u00e9] 's Spanish Italian parent [Lucia Bos\u00e9]"
    },
    {
        "questionIdx": 65218,
        "questionPatternModEntities": "Was M0 a Mexican Spanish male spouse of M4",
        "questionTemplate": "Was [entity] a [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nFILTER ( M0 != M4 ) .\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P1 M3 .\nM0 P2 M4\n}",
        "recursionDepth": 28,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nFILTER ( wd:Q356546 != wd:Q20101470 ) .\nwd:Q356546 wdt:P21 wd:Q6581097 .\nwd:Q356546 wdt:P27 wd:Q29 .\nwd:Q356546 wdt:P27 wd:Q96 .\nwd:Q356546 wdt:P26 wd:Q20101470\n}",
        "questionWithBrackets": "Was [Max Aub] a Mexican Spanish male spouse of [Perpetua Barjau Mart\u00edn]"
    },
    {
        "questionIdx": 65326,
        "questionPatternModEntities": "Was M0 executive produced by M1 and directed by M2",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M2\n}",
        "recursionDepth": 24,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q1079 wdt:P57 wd:Q1279422 .\nwd:Q1079 wdt:P1431 wd:Q4500\n}",
        "questionWithBrackets": "Was [Breaking Bad] executive produced by [Vince Gilligan] and directed by [Charles Haid]"
    },
    {
        "questionIdx": 65354,
        "questionPatternModEntities": "Was M2 directed by M1 's French spouse , executive produced by M3 , and directed by M4 , M5 , and M6",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M1 ) .\nM2 P2 M3 .\nM2 P3 ?x0 .\nM2 P3 M4 .\nM2 P3 M5 .\nM2 P3 M6\n}",
        "recursionDepth": 49,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P27 wd:Q142 .\n?x0 wdt:P26 wd:Q22691021 .\nFILTER ( ?x0 != wd:Q22691021 ) .\nwd:Q3666222 wdt:P57 ?x0 .\nwd:Q3666222 wdt:P57 wd:Q1751108 .\nwd:Q3666222 wdt:P57 wd:Q2059987 .\nwd:Q3666222 wdt:P57 wd:Q1369749 .\nwd:Q3666222 wdt:P1431 wd:Q361208\n}",
        "questionWithBrackets": "Was [Changing Husbands] directed by [Jeanne Dyris] 's French spouse , executive produced by [Adolph Zukor] , and directed by [Rupert Julian] , [Frank Urson] , and [Paul Iribe]"
    },
    {
        "questionIdx": 65369,
        "questionPatternModEntities": "Was M1 executive produced by M2 , produced by M0 's sibling , and directed by M3 , M4 , and M5",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] , and [VP_SIMPLE] by [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nM1 P1 M2 .\nM1 P2 ?x0 .\nM1 P3 M3 .\nM1 P3 M4 .\nM1 P3 M5\n}",
        "recursionDepth": 44,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P3373 wd:Q469204 .\nFILTER ( ?x0 != wd:Q469204 ) .\nwd:Q2947967 wdt:P57 wd:Q3139378 .\nwd:Q2947967 wdt:P57 wd:Q362793 .\nwd:Q2947967 wdt:P57 wd:Q360477 .\nwd:Q2947967 wdt:P1431 wd:Q8877 .\nwd:Q2947967 wdt:P162|wdt:P272 ?x0\n}",
        "questionWithBrackets": "Was [Under the Dome] executive produced by [Steven Spielberg] , produced by [Anne Spielberg] 's sibling , and directed by [Peter Weller] , [Jack Bender] , and [Holly Dale]"
    },
    {
        "questionIdx": 65399,
        "questionPatternModEntities": "Was M0 produced and edited by M1 , M2 , and M3",
        "questionTemplate": "Was [entity] [VP_SIMPLE] and [VP_SIMPLE] by [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P0 M3 .\nM0 P1 M1 .\nM0 P1 M2 .\nM0 P1 M3\n}",
        "recursionDepth": 26,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q20729551 wdt:P1040 wd:Q562108 .\nwd:Q20729551 wdt:P1040 wd:Q1687239 .\nwd:Q20729551 wdt:P1040 wd:Q35979475 .\nwd:Q20729551 wdt:P162|wdt:P272 wd:Q562108 .\nwd:Q20729551 wdt:P162|wdt:P272 wd:Q1687239 .\nwd:Q20729551 wdt:P162|wdt:P272 wd:Q35979475\n}",
        "questionWithBrackets": "Was [Stop for Bud] produced and edited by [Jens J\u00f8rgen Thorsen] , [Ole John] , and [J\u00f8rgen Leth]"
    },
    {
        "questionIdx": 65400,
        "questionPatternModEntities": "Was M0 produced by and edited by M1 , M2 , and M3",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by and [VP_SIMPLE] by [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P0 M3 .\nM0 P1 M1 .\nM0 P1 M2 .\nM0 P1 M3\n}",
        "recursionDepth": 27,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q20729551 wdt:P1040 wd:Q562108 .\nwd:Q20729551 wdt:P1040 wd:Q1687239 .\nwd:Q20729551 wdt:P1040 wd:Q35979475 .\nwd:Q20729551 wdt:P162|wdt:P272 wd:Q562108 .\nwd:Q20729551 wdt:P162|wdt:P272 wd:Q1687239 .\nwd:Q20729551 wdt:P162|wdt:P272 wd:Q35979475\n}",
        "questionWithBrackets": "Was [Stop for Bud] produced by and edited by [Ole John] , [J\u00f8rgen Leth] , and [Jens J\u00f8rgen Thorsen]"
    },
    {
        "questionIdx": 65437,
        "questionPatternModEntities": "Was M1 written by M3 , executive produced by M2 , and edited by M0 's employee 's sibling",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x1 P1 M0 .\nFILTER ( ?x0 != ?x1 ) .\nM1 P2 M2 .\nM1 P3 M3 .\nM1 P4 ?x0\n}",
        "recursionDepth": 41,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P3373 ?x1 .\n?x1 wdt:P108 wd:Q678095 .\nFILTER ( ?x0 != ?x1 ) .\nwd:Q2365791 wdt:P1040 ?x0 .\nwd:Q2365791 wdt:P1431 wd:Q104326 .\nwd:Q2365791 wdt:P58 wd:Q2979534\n}",
        "questionWithBrackets": "Was [The Burned Barns] written by [Jean Chapot] , executive produced by [Jean-Michel Jarre] , and edited by [Paris Match] 's employee 's sibling"
    },
    {
        "questionIdx": 65439,
        "questionPatternModEntities": "Was M1 a Dutch sibling of M0 's employee",
        "questionTemplate": "Was [entity] a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( M1 != ?x0 ) .\nM1 P1 ?x0 .\nM1 P2 M2\n}",
        "recursionDepth": 22,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P108 wd:Q7842 .\nFILTER ( wd:Q107609 != ?x0 ) .\nwd:Q107609 wdt:P27 wd:Q29999 .\nwd:Q107609 wdt:P3373 ?x0\n}",
        "questionWithBrackets": "Was [Christiaan Eijkman] a Dutch sibling of [University of Tokyo] 's employee"
    },
    {
        "questionIdx": 65442,
        "questionPatternModEntities": "Was M0 's Italian French sibling 's male sibling M3",
        "questionTemplate": "Was [entity] 's [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( M3 != ?x0 ) .\nM3 P0 ?x0 .\nM3 P2 M4\n}",
        "recursionDepth": 30,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P27 wd:Q38 .\n?x0 wdt:P27 wd:Q142 .\n?x0 wdt:P3373 wd:Q75392623 .\nFILTER ( ?x0 != wd:Q75392623 ) .\nFILTER ( wd:Q1850305 != ?x0 ) .\nwd:Q1850305 wdt:P21 wd:Q6581097 .\nwd:Q1850305 wdt:P3373 ?x0\n}",
        "questionWithBrackets": "Was [Princess Anne of Bourbon-Two Sicilies] 's Italian French sibling 's male sibling [Prince Carlo, Duke of Castro]"
    },
    {
        "questionIdx": 65447,
        "questionPatternModEntities": "Was M1 edited and written by M0 's sibling",
        "questionTemplate": "Was [entity] [VP_SIMPLE] and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nM1 P1 ?x0 .\nM1 P2 ?x0\n}",
        "recursionDepth": 23,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P3373 wd:Q469204 .\nFILTER ( ?x0 != wd:Q469204 ) .\nwd:Q457886 wdt:P1040 ?x0 .\nwd:Q457886 wdt:P58 ?x0\n}",
        "questionWithBrackets": "Was [Amblin'] edited and written by [Anne Spielberg] 's sibling"
    },
    {
        "questionIdx": 65463,
        "questionPatternModEntities": "Was M0 's female sibling influenced by M1 and M2 and influenced by M3",
        "questionTemplate": "Was [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] [VP_SIMPLE] by [entity] and [entity] and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\n?x0 P1 M3 .\n?x0 P2 M4 .\nFILTER ( ?x0 != M0 )\n}",
        "recursionDepth": 36,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P737 wd:Q692 .\n?x0 wdt:P737 wd:Q79969 .\n?x0 wdt:P737 wd:Q892 .\n?x0 wdt:P21 wd:Q6581072 .\n?x0 wdt:P3373 wd:Q6372006 .\nFILTER ( ?x0 != wd:Q6372006 )\n}",
        "questionWithBrackets": "Was [Karl Kroeber] 's female sibling influenced by [J.\u00a0R.\u00a0R. Tolkien] and [William Shakespeare] and influenced by [Emma Goldman]"
    },
    {
        "questionIdx": 65500,
        "questionPatternModEntities": "Was M1 's Italian employee M0",
        "questionTemplate": "Was [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M2\n}",
        "recursionDepth": 16,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q8753 wdt:P108 wd:Q820887 .\nwd:Q8753 wdt:P27 wd:Q38\n}",
        "questionWithBrackets": "Was [University of Florence] 's Italian employee [Enrico Fermi]"
    },
    {
        "questionIdx": 65528,
        "questionPatternModEntities": "Was M0 's employee M1 's employee",
        "questionTemplate": "Was [entity] 's [ROLE_SIMPLE] [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P0 M1\n}",
        "recursionDepth": 15,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P108 wd:Q95 .\n?x0 wdt:P108 wd:Q152171\n}",
        "questionWithBrackets": "Was [Google] 's employee [University of Bonn] 's employee"
    },
    {
        "questionIdx": 65537,
        "questionPatternModEntities": "Was M0 's actor M1 's actor",
        "questionTemplate": "Was [entity] 's [ROLE_SIMPLE] [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P0 M1\n}",
        "recursionDepth": 15,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P453 wd:Q33999 .\n?x0 wdt:P453 wd:Q34350831\n}",
        "questionWithBrackets": "Was [Super Boy] 's actor [actor] 's actor"
    },
    {
        "questionIdx": 65564,
        "questionPatternModEntities": "Was M1 directed and edited by a sibling of M0",
        "questionTemplate": "Was [entity] [VP_SIMPLE] and [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nM1 P1 ?x0 .\nM1 P2 ?x0\n}",
        "recursionDepth": 25,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P3373 wd:Q6228653 .\nFILTER ( ?x0 != wd:Q6228653 ) .\nwd:Q24871 wdt:P57 ?x0 .\nwd:Q24871 wdt:P1040 ?x0\n}",
        "questionWithBrackets": "Was [Avatar] directed and edited by a sibling of [John David Cameron]"
    },
    {
        "questionIdx": 65569,
        "questionPatternModEntities": "Was M3 founded by M2 's female American spouse and founded by M4 and M5",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P2 M2 .\nFILTER ( ?x0 != M2 ) .\nM3 P3 ?x0 .\nM3 P3 M4 .\nM3 P3 M5\n}",
        "recursionDepth": 41,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P21 wd:Q6581072 .\n?x0 wdt:P27 wd:Q30 .\n?x0 wdt:P26 wd:Q896740 .\nFILTER ( ?x0 != wd:Q896740 ) .\nwd:Q1102919 wdt:P112 ?x0 .\nwd:Q1102919 wdt:P112 wd:Q400 .\nwd:Q1102919 wdt:P112 wd:Q40263\n}",
        "questionWithBrackets": "Was [ClubJenna] founded by [Brad Armstrong] 's female American spouse and founded by [Jenna Jameson] and [Jay Grdina]"
    },
    {
        "questionIdx": 65595,
        "questionPatternModEntities": "Was M1 's American female sibling 's spouse a sibling of a employee of M0",
        "questionTemplate": "Was [entity] 's [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] 's [ROLE_SIMPLE] a [ROLE_SIMPLE] of a [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x2 .\n?x1 P2 M0 .\n?x2 P0 M1 .\n?x2 P3 M2 .\n?x2 P4 M3 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x0 != ?x2 ) .\nFILTER ( ?x2 != M1 )\n}",
        "recursionDepth": 37,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P3373 ?x1 .\n?x0 wdt:P26 ?x2 .\n?x1 wdt:P108 wd:Q29052 .\n?x2 wdt:P21 wd:Q6581072 .\n?x2 wdt:P27 wd:Q30 .\n?x2 wdt:P3373 wd:Q31112 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x0 != ?x2 ) .\nFILTER ( ?x2 != wd:Q31112 )\n}",
        "questionWithBrackets": "Was [Bill Frist] 's American female sibling 's spouse a sibling of a employee of [Vanderbilt University]"
    },
    {
        "questionIdx": 65624,
        "questionPatternModEntities": "Was M0 's male sibling influenced by M1 and influenced by M2 and M3",
        "questionTemplate": "Was [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] [VP_SIMPLE] by [entity] and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\n?x0 P1 M3 .\n?x0 P2 M4 .\nFILTER ( ?x0 != M0 )\n}",
        "recursionDepth": 36,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P737 wd:Q859 .\n?x0 wdt:P737 wd:Q82925 .\n?x0 wdt:P737 wd:Q1398 .\n?x0 wdt:P21 wd:Q6581097 .\n?x0 wdt:P3373 wd:Q3343469 .\nFILTER ( ?x0 != wd:Q3343469 )\n}",
        "questionWithBrackets": "Was [Norah Borges] 's male sibling influenced by [Plato] and influenced by [Virgil] and [Joseph Conrad]"
    },
    {
        "questionIdx": 65658,
        "questionPatternModEntities": "Was M0 written , produced , and directed by M1",
        "questionTemplate": "Was [entity] [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1 .\nM0 P2 M1\n}",
        "recursionDepth": 24,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q973676 wdt:P57 wd:Q882 .\nwd:Q973676 wdt:P162|wdt:P272 wd:Q882 .\nwd:Q973676 wdt:P58 wd:Q882\n}",
        "questionWithBrackets": "Was [A Day's Pleasure] written , produced , and directed by [Charlie Chaplin]"
    },
    {
        "questionIdx": 65669,
        "questionPatternModEntities": "Was M1 M0 's sibling 's child",
        "questionTemplate": "Was [entity] [entity] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nM1 P1 ?x0\n}",
        "recursionDepth": 15,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P3373 wd:Q5082770 .\nFILTER ( ?x0 != wd:Q5082770 ) .\nwd:Q642212 wdt:P749 ?x0\n}",
        "questionWithBrackets": "Was [F. W. Woolworth Company] [Charles Sumner Woolworth] 's sibling 's child"
    },
    {
        "questionIdx": 65679,
        "questionPatternModEntities": "Was M0 executive produced by M1 and M2 , produced by M4 , executive produced by M3 , and directed by M5",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] and [entity] , [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P0 M3 .\nM0 P1 M4 .\nM0 P2 M5\n}",
        "recursionDepth": 47,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q90340902 wdt:P57 wd:Q89738028 .\nwd:Q90340902 wdt:P1431 wd:Q76 .\nwd:Q90340902 wdt:P1431 wd:Q22115301 .\nwd:Q90340902 wdt:P1431 wd:Q63940538 .\nwd:Q90340902 wdt:P162|wdt:P272 wd:Q90341521\n}",
        "questionWithBrackets": "Was [Crip Camp] executive produced by [Tonia Davis] and [Barack Obama] , produced by [Nicole Newnham] , executive produced by [Howard Gertler] , and directed by [James LeBrecht]"
    },
    {
        "questionIdx": 65686,
        "questionPatternModEntities": "Was M0 a Spanish employee of M1 , M2 , and M3",
        "questionTemplate": "Was [entity] a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P0 M3 .\nM0 P1 M4\n}",
        "recursionDepth": 25,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q117990 wdt:P108 wd:Q219694 .\nwd:Q117990 wdt:P108 wd:Q308963 .\nwd:Q117990 wdt:P108 wd:Q633561 .\nwd:Q117990 wdt:P27 wd:Q29\n}",
        "questionWithBrackets": "Was [Francisco Yndur\u00e1in Hern\u00e1ndez] a Spanish employee of [University of Salamanca] , [Complutense University of Madrid] , and [University of Zaragoza]"
    },
    {
        "questionIdx": 65688,
        "questionPatternModEntities": "Was M0 's Canadian employee employed by M1 , M2 , M3 , and M4 and employed by M5 and M6",
        "questionTemplate": "Was [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] [VP_SIMPLE] by [entity] , [entity] , [entity] , and [entity] and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P0 M3 .\n?x0 P0 M4 .\n?x0 P0 M5 .\n?x0 P0 M6 .\n?x0 P1 M7\n}",
        "recursionDepth": 46,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P108 wd:Q180865 .\n?x0 wdt:P108 wd:Q170027 .\n?x0 wdt:P108 wd:Q34433 .\n?x0 wdt:P108 wd:Q13371 .\n?x0 wdt:P108 wd:Q156598 .\n?x0 wdt:P108 wd:Q757391 .\n?x0 wdt:P108 wd:Q174570 .\n?x0 wdt:P27 wd:Q16\n}",
        "questionWithBrackets": "Was [University of Oxford] 's Canadian employee employed by [University of London] , [Central European University] , [London School of Economics and Political Science] , and [Leiden University] and employed by [University of Toronto] and [Harvard University]"
    },
    {
        "questionIdx": 65701,
        "questionPatternModEntities": "Was M0 a Swedish employee of M1",
        "questionTemplate": "Was [entity] a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M2\n}",
        "recursionDepth": 18,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q52950 wdt:P108 wd:Q185246 .\nwd:Q52950 wdt:P27 wd:Q34\n}",
        "questionWithBrackets": "Was [Louis de Geer the Elder] a Swedish employee of [Uppsala University]"
    },
    {
        "questionIdx": 65719,
        "questionPatternModEntities": "Was M0 's Japanese sibling employed by M1",
        "questionTemplate": "Was [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P2 M2 .\nFILTER ( ?x0 != M0 )\n}",
        "recursionDepth": 21,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P108 wd:Q11474767 .\n?x0 wdt:P27 wd:Q17 .\n?x0 wdt:P3373 wd:Q11455081 .\nFILTER ( ?x0 != wd:Q11455081 )\n}",
        "questionWithBrackets": "Was [Seiroku Miyazawa] 's Japanese sibling employed by [Iwate Kenritsu Hanamaki N\u014dgy\u014d K\u014dt\u014d Gakk\u014d]"
    },
    {
        "questionIdx": 65763,
        "questionPatternModEntities": "Was M0 's German sibling influenced by M1",
        "questionTemplate": "Was [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P2 M2 .\nFILTER ( ?x0 != M0 )\n}",
        "recursionDepth": 21,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P737 wd:Q859 .\n?x0 wdt:P27 wd:Q183 .\n?x0 wdt:P3373 wd:Q75090 .\nFILTER ( ?x0 != wd:Q75090 )\n}",
        "questionWithBrackets": "Was [Adele Schopenhauer] 's German sibling influenced by [Plato]"
    },
    {
        "questionIdx": 65911,
        "questionPatternModEntities": "Was M0 M1 's Canadian Swedish employee",
        "questionTemplate": "Was [entity] [entity] 's [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M2 .\nM0 P1 M3\n}",
        "recursionDepth": 21,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q7175462 wdt:P108 wd:Q201603 .\nwd:Q7175462 wdt:P27 wd:Q16 .\nwd:Q7175462 wdt:P27 wd:Q34\n}",
        "questionWithBrackets": "Was [Peter Liljedahl] [Simon Fraser University] 's Canadian Swedish employee"
    },
    {
        "questionIdx": 65914,
        "questionPatternModEntities": "Was M1 produced by a spouse of M0",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nM1 P1 ?x0\n}",
        "recursionDepth": 18,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P26 wd:Q117012 .\nFILTER ( ?x0 != wd:Q117012 ) .\nwd:Q27722 wdt:P162|wdt:P272 ?x0\n}",
        "questionWithBrackets": "Was [Jealous Guy] produced by a spouse of [Yoko Ono]"
    },
    {
        "questionIdx": 65917,
        "questionPatternModEntities": "Was M2 a spouse of a actor of M0 and M1",
        "questionTemplate": "Was [entity] a [ROLE_SIMPLE] of a [ROLE_SIMPLE] of [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\nFILTER ( M2 != ?x0 ) .\nM2 P1 ?x0\n}",
        "recursionDepth": 23,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P453 wd:Q64005751 .\n?x0 wdt:P453 wd:Q50386892 .\nFILTER ( wd:Q50896 != ?x0 ) .\nwd:Q50896 wdt:P26 ?x0\n}",
        "questionWithBrackets": "Was [Pippo Baudo] a spouse of a actor of [Mim\u00ec] and [Floria Tosca]"
    },
    {
        "questionIdx": 65918,
        "questionPatternModEntities": "Was M0 distributed by M1 , distributed by M2 , produced by M4 , and distributed by M3",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P0 M3 .\nM0 P1 M4\n}",
        "recursionDepth": 41,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q377165 wdt:P750 wd:Q9531 .\nwd:Q377165 wdt:P750 wd:Q907311 .\nwd:Q377165 wdt:P750 wd:Q80948336 .\nwd:Q377165 wdt:P162|wdt:P272 wd:Q721429\n}",
        "questionWithBrackets": "Was [Planet Earth] distributed by [BBC] , distributed by [Netflix] , produced by [Alastair Fothergill] , and distributed by [FandangoNow]"
    },
    {
        "questionIdx": 65977,
        "questionPatternModEntities": "Was M0 edited by M1 , M2 , and M3 , edited by M4 , and directed by M5 , M6 , and M7",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] , [entity] , and [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P0 M3 .\nM0 P0 M4 .\nM0 P1 M5 .\nM0 P1 M6 .\nM0 P1 M7\n}",
        "recursionDepth": 46,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q603857 wdt:P57 wd:Q474262 .\nwd:Q603857 wdt:P57 wd:Q312611 .\nwd:Q603857 wdt:P57 wd:Q55215 .\nwd:Q603857 wdt:P1040 wd:Q55211 .\nwd:Q603857 wdt:P1040 wd:Q5639976 .\nwd:Q603857 wdt:P1040 wd:Q18021284 .\nwd:Q603857 wdt:P1040 wd:Q22074634\n}",
        "questionWithBrackets": "Was [11'09\"01 September 11] edited by [Jonathan Morris] , [Mohsen Makhmalbaf] , and [Robert Duffy] , edited by [Hajime Okayasu] , and directed by [Youssef Chahine] , [Alejandro Gonz\u00e1lez I\u00f1\u00e1rritu] , and [Amos Gitai]"
    },
    {
        "questionIdx": 66071,
        "questionPatternModEntities": "Was M2 edited by M0 's Italian sibling and produced by M3 , M4 , M5 , and M6",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] and [VP_SIMPLE] by [entity] , [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M0 ) .\nM2 P2 M3 .\nM2 P2 M4 .\nM2 P2 M5 .\nM2 P2 M6 .\nM2 P3 ?x0\n}",
        "recursionDepth": 42,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P27 wd:Q38 .\n?x0 wdt:P3373 wd:Q55469 .\nFILTER ( ?x0 != wd:Q55469 ) .\nwd:Q1077585 wdt:P1040 ?x0 .\nwd:Q1077585 wdt:P162|wdt:P272 wd:Q92780879 .\nwd:Q1077585 wdt:P162|wdt:P272 wd:Q87899017 .\nwd:Q1077585 wdt:P162|wdt:P272 wd:Q92780895 .\nwd:Q1077585 wdt:P162|wdt:P272 wd:Q3564206\n}",
        "questionWithBrackets": "Was [The Truce] edited by [Marcello Mastroianni] 's Italian sibling and produced by [V\u00e9ra Belmont] , [Guido De Laurentiis] , [St\u00e9phan Films] , and [3 Emme Cinematografica]"
    },
    {
        "questionIdx": 66104,
        "questionPatternModEntities": "Was M0 's parent and sibling influenced by M1",
        "questionTemplate": "Was [entity] 's [ROLE_SIMPLE] and [ROLE_SIMPLE] [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P2 M0 .\nFILTER ( ?x0 != M0 )\n}",
        "recursionDepth": 21,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P737 wd:Q9358 .\n?x0 wdt:P40|wdt:P355 wd:Q42175155 .\n?x0 wdt:P3373 wd:Q42175155 .\nFILTER ( ?x0 != wd:Q42175155 )\n}",
        "questionWithBrackets": "Was [Greta Strindberg] 's parent and sibling influenced by [Friedrich Nietzsche]"
    },
    {
        "questionIdx": 66113,
        "questionPatternModEntities": "Was M4 's American female sibling 's sibling 's male sibling influenced by M0 , M1 , and M2",
        "questionTemplate": "Was [entity] 's [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] 's [ROLE_SIMPLE] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] [VP_SIMPLE] by [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x0 P1 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\n?x0 P2 M3 .\n?x1 P0 ?x2 .\n?x2 P0 M4 .\n?x2 P2 M6 .\n?x2 P3 M5 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x1 != ?x2 ) .\nFILTER ( ?x2 != M4 )\n}",
        "recursionDepth": 46,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P737 wd:Q5950 .\n?x0 wdt:P737 wd:Q882 .\n?x0 wdt:P737 wd:Q297816 .\n?x0 wdt:P21 wd:Q6581097 .\n?x0 wdt:P3373 ?x1 .\n?x1 wdt:P3373 ?x2 .\n?x2 wdt:P21 wd:Q6581072 .\n?x2 wdt:P27 wd:Q30 .\n?x2 wdt:P3373 wd:Q234388 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x1 != ?x2 ) .\nFILTER ( ?x2 != wd:Q234388 )\n}",
        "questionWithBrackets": "Was [Rebbie Jackson] 's American female sibling 's sibling 's male sibling influenced by [Charlie Chaplin] , [James Brown] , and [Sammy Davis Jr.]"
    },
    {
        "questionIdx": 66142,
        "questionPatternModEntities": "Was M0 M1 's Swedish Italian sibling",
        "questionTemplate": "Was [entity] [entity] 's [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\nFILTER ( M0 != M1 ) .\nM0 P0 M1 .\nM0 P1 M2 .\nM0 P1 M3\n}",
        "recursionDepth": 21,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nFILTER ( wd:Q203840 != wd:Q508325 ) .\nwd:Q203840 wdt:P27 wd:Q38 .\nwd:Q203840 wdt:P27 wd:Q34 .\nwd:Q203840 wdt:P3373 wd:Q508325\n}",
        "questionWithBrackets": "Was [Isabella Rossellini] [Pia Lindstr\u00f6m] 's Swedish Italian sibling"
    },
    {
        "questionIdx": 66187,
        "questionPatternModEntities": "Was M2 produced by M3 and executive produced by M0 's British sibling",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] and [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M0 ) .\nM2 P2 ?x0 .\nM2 P3 M3\n}",
        "recursionDepth": 33,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P27 wd:Q145 .\n?x0 wdt:P3373 wd:Q14623673 .\nFILTER ( ?x0 != wd:Q14623673 ) .\nwd:Q836821 wdt:P1431 ?x0 .\nwd:Q836821 wdt:P162|wdt:P272 wd:Q497155\n}",
        "questionWithBrackets": "Was [The Hitchhiker's Guide to the Galaxy] produced by [Touchstone Pictures] and executive produced by [Susan Adams] 's British sibling"
    },
    {
        "questionIdx": 66195,
        "questionPatternModEntities": "Was M1 's male spouse 's spouse M2",
        "questionTemplate": "Was [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] 's [ROLE_SIMPLE] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M1 ) .\nFILTER ( M2 != ?x0 ) .\nM2 P1 ?x0\n}",
        "recursionDepth": 20,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P21 wd:Q6581097 .\n?x0 wdt:P26 wd:Q2259 .\nFILTER ( ?x0 != wd:Q2259 ) .\nFILTER ( wd:Q152626 != ?x0 ) .\nwd:Q152626 wdt:P26 ?x0\n}",
        "questionWithBrackets": "Was [Julia the Elder] 's male spouse 's spouse [Pomponia Caecilia Attica]"
    },
    {
        "questionIdx": 66218,
        "questionPatternModEntities": "Was M0 a male Dutch British sibling of M1",
        "questionTemplate": "Was [entity] a [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nFILTER ( M0 != M1 ) .\nM0 P0 M1 .\nM0 P1 M2 .\nM0 P1 M3 .\nM0 P2 M4\n}",
        "recursionDepth": 28,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nFILTER ( wd:Q153890 != wd:Q183181 ) .\nwd:Q153890 wdt:P21 wd:Q6581097 .\nwd:Q153890 wdt:P27 wd:Q29999 .\nwd:Q153890 wdt:P27 wd:Q145 .\nwd:Q153890 wdt:P3373 wd:Q183181\n}",
        "questionWithBrackets": "Was [Niko Tinbergen] a male Dutch British sibling of [Jan Tinbergen]"
    },
    {
        "questionIdx": 66224,
        "questionPatternModEntities": "Was M0 a female sibling of M1",
        "questionTemplate": "Was [entity] a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nFILTER ( M0 != M1 ) .\nM0 P0 M1 .\nM0 P1 M2\n}",
        "recursionDepth": 18,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nFILTER ( wd:Q157928 != wd:Q254 ) .\nwd:Q157928 wdt:P21 wd:Q6581072 .\nwd:Q157928 wdt:P3373 wd:Q254\n}",
        "questionWithBrackets": "Was [Anna Mozart] a female sibling of [Wolfgang Amadeus Mozart]"
    },
    {
        "questionIdx": 66231,
        "questionPatternModEntities": "Was M0 's spouse M1 's spouse 's actor",
        "questionTemplate": "Was [entity] 's [ROLE_SIMPLE] [entity] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x0 P1 M0 .\n?x1 P1 M1 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x1 != M1 )\n}",
        "recursionDepth": 19,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P453 ?x1 .\n?x0 wdt:P26 wd:Q522724 .\n?x1 wdt:P26 wd:Q223468 .\nFILTER ( ?x0 != wd:Q522724 ) .\nFILTER ( ?x1 != wd:Q223468 )\n}",
        "questionWithBrackets": "Was [Peter O'Brien] 's spouse [Faramir] 's spouse 's actor"
    },
    {
        "questionIdx": 66243,
        "questionPatternModEntities": "Was M1 a child of a sibling of M0",
        "questionTemplate": "Was [entity] a [ROLE_SIMPLE] of a [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nM1 P1 ?x0\n}",
        "recursionDepth": 19,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P3373 wd:Q5082770 .\nFILTER ( ?x0 != wd:Q5082770 ) .\nwd:Q642212 wdt:P749 ?x0\n}",
        "questionWithBrackets": "Was [F. W. Woolworth Company] a child of a sibling of [Charles Sumner Woolworth]"
    },
    {
        "questionIdx": 66245,
        "questionPatternModEntities": "Was M0 's male sibling a spouse and sibling of M1",
        "questionTemplate": "Was [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] a [ROLE_SIMPLE] and [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P1 M2 .\n?x0 P2 M1 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x0 != M1 ) .\nFILTER ( ?x0 != M1 )\n}",
        "recursionDepth": 27,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P21 wd:Q6581097 .\n?x0 wdt:P3373 wd:Q3345 .\n?x0 wdt:P3373 wd:Q40023 .\n?x0 wdt:P26 wd:Q40023 .\nFILTER ( ?x0 != wd:Q3345 ) .\nFILTER ( ?x0 != wd:Q40023 ) .\nFILTER ( ?x0 != wd:Q40023 )\n}",
        "questionWithBrackets": "Was [Ptolemy X Alexander I] 's male sibling a spouse and sibling of [Cleopatra IV of Egypt]"
    },
    {
        "questionIdx": 66270,
        "questionPatternModEntities": "Was M6 's spouse influenced by M0 and M1 , influenced by M2 , M3 , and M4 , and influenced by M5",
        "questionTemplate": "Was [entity] 's [ROLE_SIMPLE] [VP_SIMPLE] by [entity] and [entity] , [VP_SIMPLE] by [entity] , [entity] , and [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P0 M3 .\n?x0 P0 M4 .\n?x0 P0 M5 .\n?x0 P1 M6 .\nFILTER ( ?x0 != M6 )\n}",
        "recursionDepth": 47,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P737 wd:Q535 .\n?x0 wdt:P737 wd:Q16867 .\n?x0 wdt:P737 wd:Q5682 .\n?x0 wdt:P737 wd:Q9312 .\n?x0 wdt:P737 wd:Q692 .\n?x0 wdt:P737 wd:Q3816 .\n?x0 wdt:P26 wd:Q15833960 .\nFILTER ( ?x0 != wd:Q15833960 )\n}",
        "questionWithBrackets": "Was [Maria Dostoevskaya] 's spouse influenced by [George Sand] and [Victor Hugo] , influenced by [Miguel de Cervantes] , [Immanuel Kant] , and [William Shakespeare] , and influenced by [Edgar Allan Poe]"
    },
    {
        "questionIdx": 66293,
        "questionPatternModEntities": "Was M1 M0 's spouse 's female spouse",
        "questionTemplate": "Was [entity] [entity] 's [ROLE_SIMPLE] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( M1 != ?x0 ) .\nM1 P0 ?x0 .\nM1 P1 M2\n}",
        "recursionDepth": 20,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P26 wd:Q1646 .\nFILTER ( ?x0 != wd:Q1646 ) .\nFILTER ( wd:Q7520367 != ?x0 ) .\nwd:Q7520367 wdt:P21 wd:Q6581072 .\nwd:Q7520367 wdt:P26 ?x0\n}",
        "questionWithBrackets": "Was [Simone Micheline Bodin] [Fran\u00e7oise Sagan] 's spouse 's female spouse"
    },
    {
        "questionIdx": 66294,
        "questionPatternModEntities": "Was M1 's spouse influenced by M0",
        "questionTemplate": "Was [entity] 's [ROLE_SIMPLE] [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M1 )\n}",
        "recursionDepth": 16,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P737 wd:Q868 .\n?x0 wdt:P26 wd:Q1047458 .\nFILTER ( ?x0 != wd:Q1047458 )\n}",
        "questionWithBrackets": "Was [Casimir Dudevant] 's spouse influenced by [Aristotle]"
    },
    {
        "questionIdx": 66308,
        "questionPatternModEntities": "Was M0 employed by M1 and M2",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2\n}",
        "recursionDepth": 16,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q14257 wdt:P108 wd:Q95 .\nwd:Q14257 wdt:P108 wd:Q638859\n}",
        "questionWithBrackets": "Was [Ellen Spertus] employed by [Google] and [Mills College]"
    },
    {
        "questionIdx": 66325,
        "questionPatternModEntities": "Was M0 edited , produced , and executive produced by M1",
        "questionTemplate": "Was [entity] [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1 .\nM0 P2 M1\n}",
        "recursionDepth": 25,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q854990 wdt:P1040 wd:Q8006 .\nwd:Q854990 wdt:P1431 wd:Q8006 .\nwd:Q854990 wdt:P162|wdt:P272 wd:Q8006\n}",
        "questionWithBrackets": "Was [Kagemusha] edited , produced , and executive produced by [Akira Kurosawa]"
    },
    {
        "questionIdx": 66381,
        "questionPatternModEntities": "Was M0 M1 's parent and spouse",
        "questionTemplate": "Was [entity] [entity] 's [ROLE_SIMPLE] and [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\nFILTER ( M0 != M1 ) .\nM0 P0 M1 .\nM0 P1 M1\n}",
        "recursionDepth": 16,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nFILTER ( wd:Q299737 != wd:Q9304 ) .\nwd:Q299737 wdt:P40|wdt:P355 wd:Q9304 .\nwd:Q299737 wdt:P26 wd:Q9304\n}",
        "questionWithBrackets": "Was [Mandukhai Khatun] [Dayan Khan] 's parent and spouse"
    },
    {
        "questionIdx": 66387,
        "questionPatternModEntities": "Was M2 's Canadian spouse M0 's employee",
        "questionTemplate": "Was [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P2 M2 .\nFILTER ( ?x0 != M2 )\n}",
        "recursionDepth": 20,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P108 wd:Q13371 .\n?x0 wdt:P27 wd:Q16 .\n?x0 wdt:P26 wd:Q5052689 .\nFILTER ( ?x0 != wd:Q5052689 )\n}",
        "questionWithBrackets": "Was [Catherine Galbraith] 's Canadian spouse [Harvard University] 's employee"
    },
    {
        "questionIdx": 66406,
        "questionPatternModEntities": "Was M1 a parent of M0 's sibling",
        "questionTemplate": "Was [entity] a [ROLE_SIMPLE] of [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nM1 P1 ?x0\n}",
        "recursionDepth": 17,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P3373 wd:Q1339 .\nFILTER ( ?x0 != wd:Q1339 ) .\nwd:Q66671 wdt:P40|wdt:P355 ?x0\n}",
        "questionWithBrackets": "Was [Maria Elisabeth L\u00e4mmerhirt] a parent of [Johann Sebastian Bach] 's sibling"
    },
    {
        "questionIdx": 66421,
        "questionPatternModEntities": "Was M2 influenced by M1 's Mexican spouse 's spouse",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x1 P0 M1 .\n?x1 P1 M0 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x1 != M1 ) .\nM2 P2 ?x0\n}",
        "recursionDepth": 25,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P26 ?x1 .\n?x1 wdt:P27 wd:Q96 .\n?x1 wdt:P26 wd:Q5588 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x1 != wd:Q5588 ) .\nwd:Q715219 wdt:P737 ?x0\n}",
        "questionWithBrackets": "Was [Arturo Estrada Hern\u00e1ndez] influenced by [Frida Kahlo] 's Mexican spouse 's spouse"
    },
    {
        "questionIdx": 66428,
        "questionPatternModEntities": "Was M0 a Dutch employee of M1 , M2 , M3 , and M4",
        "questionTemplate": "Was [entity] a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] , [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P0 M3 .\nM0 P0 M4 .\nM0 P1 M5\n}",
        "recursionDepth": 28,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q159840 wdt:P108 wd:Q13371 .\nwd:Q159840 wdt:P108 wd:Q1065 .\nwd:Q159840 wdt:P108 wd:Q2387732 .\nwd:Q159840 wdt:P108 wd:Q595668 .\nwd:Q159840 wdt:P27 wd:Q29999\n}",
        "questionWithBrackets": "Was [Ruud Lubbers] a Dutch employee of [Hollandia] , [Tilburg University] , [United Nations] , and [Harvard University]"
    },
    {
        "questionIdx": 66441,
        "questionPatternModEntities": "Was M0 's German sibling employed by M1 and M2 and employed by M3",
        "questionTemplate": "Was [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] [VP_SIMPLE] by [entity] and [entity] and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\n?x0 P1 M3 .\n?x0 P2 M4 .\nFILTER ( ?x0 != M0 )\n}",
        "recursionDepth": 36,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P108 wd:Q32120 .\n?x0 wdt:P108 wd:Q152838 .\n?x0 wdt:P108 wd:Q850730 .\n?x0 wdt:P27 wd:Q183 .\n?x0 wdt:P3373 wd:Q74622028 .\nFILTER ( ?x0 != wd:Q74622028 )\n}",
        "questionWithBrackets": "Was [Cornelia Emilia Baehrens] 's German sibling employed by [University of Halle-Wittenberg] and [University of Groningen] and employed by [University of G\u00f6ttingen]"
    },
    {
        "questionIdx": 66442,
        "questionPatternModEntities": "Was M4 a spouse of a Dutch employee of M0 , M1 , and M2",
        "questionTemplate": "Was [entity] a [ROLE_SIMPLE] of a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P1 M3 .\nFILTER ( M4 != ?x0 ) .\nM4 P2 ?x0\n}",
        "recursionDepth": 31,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P108 wd:Q1245999 .\n?x0 wdt:P108 wd:Q686522 .\n?x0 wdt:P108 wd:Q1127380 .\n?x0 wdt:P27 wd:Q29999 .\nFILTER ( wd:Q1897406 != ?x0 ) .\nwd:Q1897406 wdt:P26 ?x0\n}",
        "questionWithBrackets": "Was [Marie Leonhardt] a spouse of a Dutch employee of [University of Siena] , [University of Music and Performing Arts Vienna] , and [Conservatorium van Amsterdam]"
    },
    {
        "questionIdx": 66443,
        "questionPatternModEntities": "Was M5 's Dutch spouse employed by M0 , M1 , M2 , and M3",
        "questionTemplate": "Was [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] [VP_SIMPLE] by [entity] , [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P0 M3 .\n?x0 P1 M4 .\n?x0 P2 M5 .\nFILTER ( ?x0 != M5 )\n}",
        "recursionDepth": 31,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P108 wd:Q2387732 .\n?x0 wdt:P108 wd:Q595668 .\n?x0 wdt:P108 wd:Q1065 .\n?x0 wdt:P108 wd:Q13371 .\n?x0 wdt:P27 wd:Q29999 .\n?x0 wdt:P26 wd:Q2206095 .\nFILTER ( ?x0 != wd:Q2206095 )\n}",
        "questionWithBrackets": "Was [Ria Hoogeweegen] 's Dutch spouse employed by [United Nations] , [Hollandia] , [Harvard University] , and [Tilburg University]"
    },
    {
        "questionIdx": 66454,
        "questionPatternModEntities": "Was M0 written by M2 and executive produced by M1",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M2\n}",
        "recursionDepth": 24,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q51416 wdt:P1431 wd:Q8877 .\nwd:Q51416 wdt:P58 wd:Q513402\n}",
        "questionWithBrackets": "Was [Men in Black] written by [Ed Solomon] and executive produced by [Steven Spielberg]"
    },
    {
        "questionIdx": 66461,
        "questionPatternModEntities": "Was M2 's Spanish spouse M0",
        "questionTemplate": "Was [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nFILTER ( M0 != M2 ) .\nM0 P0 M1 .\nM0 P1 M2\n}",
        "recursionDepth": 16,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nFILTER ( wd:Q156657 != wd:Q34417 ) .\nwd:Q156657 wdt:P27 wd:Q29 .\nwd:Q156657 wdt:P26 wd:Q34417\n}",
        "questionWithBrackets": "Was [Philip II of Spain] 's Spanish spouse [Anna of Austria, Queen of Spain]"
    },
    {
        "questionIdx": 66470,
        "questionPatternModEntities": "Was M0 edited , written , and executive produced by M1",
        "questionTemplate": "Was [entity] [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1 .\nM0 P2 M1\n}",
        "recursionDepth": 25,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q854990 wdt:P1040 wd:Q8006 .\nwd:Q854990 wdt:P1431 wd:Q8006 .\nwd:Q854990 wdt:P58 wd:Q8006\n}",
        "questionWithBrackets": "Was [Kagemusha] edited , written , and executive produced by [Akira Kurosawa]"
    },
    {
        "questionIdx": 66471,
        "questionPatternModEntities": "Was M1 written by , directed by , executive produced by , and edited by a sibling of M0",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nM1 P1 ?x0 .\nM1 P2 ?x0 .\nM1 P3 ?x0 .\nM1 P4 ?x0\n}",
        "recursionDepth": 39,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P3373 wd:Q28370409 .\nFILTER ( ?x0 != wd:Q28370409 ) .\nwd:Q28146810 wdt:P57 ?x0 .\nwd:Q28146810 wdt:P1040 ?x0 .\nwd:Q28146810 wdt:P1431 ?x0 .\nwd:Q28146810 wdt:P58 ?x0\n}",
        "questionWithBrackets": "Was [Bullets, Fangs and Dinner at 8] written by , directed by , executive produced by , and edited by a sibling of [Everton Rocca]"
    },
    {
        "questionIdx": 66479,
        "questionPatternModEntities": "Was M1 influenced by M0 's sibling 's sibling",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x1 P0 M0 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x1 != M0 ) .\nM1 P1 ?x0\n}",
        "recursionDepth": 20,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P3373 ?x1 .\n?x1 wdt:P3373 wd:Q502 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x1 != wd:Q502 ) .\nwd:Q83059 wdt:P737 ?x0\n}",
        "questionWithBrackets": "Was [Saul Bellow] influenced by [Stendhal] 's sibling 's sibling"
    },
    {
        "questionIdx": 66526,
        "questionPatternModEntities": "Was M0 's sibling M2 's male spouse",
        "questionTemplate": "Was [entity] 's [ROLE_SIMPLE] [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P2 M2 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x0 != M2 )\n}",
        "recursionDepth": 20,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P21 wd:Q6581097 .\n?x0 wdt:P3373 wd:Q3911 .\n?x0 wdt:P26 wd:Q2489332 .\nFILTER ( ?x0 != wd:Q3911 ) .\nFILTER ( ?x0 != wd:Q2489332 )\n}",
        "questionWithBrackets": "Was [Albert II of Belgium] 's sibling [Princess L\u00e9a of Belgium] 's male spouse"
    },
    {
        "questionIdx": 66551,
        "questionPatternModEntities": "Was M2 M1 's British spouse 's spouse",
        "questionTemplate": "Was [entity] [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M1 ) .\nFILTER ( M2 != ?x0 ) .\nM2 P1 ?x0\n}",
        "recursionDepth": 20,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P27 wd:Q145 .\n?x0 wdt:P26 wd:Q15062110 .\nFILTER ( ?x0 != wd:Q15062110 ) .\nFILTER ( wd:Q15062111 != ?x0 ) .\nwd:Q15062111 wdt:P26 ?x0\n}",
        "questionWithBrackets": "Was [Birthe Lapenna] [Ljuba Lapenna] 's British spouse 's spouse"
    },
    {
        "questionIdx": 66593,
        "questionPatternModEntities": "Was M0 's sibling M1 's Mexican sibling",
        "questionTemplate": "Was [entity] 's [ROLE_SIMPLE] [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P1 M2 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x0 != M1 )\n}",
        "recursionDepth": 20,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P27 wd:Q96 .\n?x0 wdt:P3373 wd:Q452517 .\n?x0 wdt:P3373 wd:Q4415594 .\nFILTER ( ?x0 != wd:Q452517 ) .\nFILTER ( ?x0 != wd:Q4415594 )\n}",
        "questionWithBrackets": "Was [Semen Semkovski] 's sibling [Olga Kameneva] 's Mexican sibling"
    },
    {
        "questionIdx": 66602,
        "questionPatternModEntities": "Was M0 a female Spanish Italian parent of M4",
        "questionTemplate": "Was [entity] a [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P1 M3 .\nM0 P2 M4\n}",
        "recursionDepth": 28,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q267724 wdt:P40|wdt:P355 wd:Q356762 .\nwd:Q267724 wdt:P21 wd:Q6581072 .\nwd:Q267724 wdt:P27 wd:Q38 .\nwd:Q267724 wdt:P27 wd:Q29\n}",
        "questionWithBrackets": "Was [Lucia Bos\u00e9] a female Spanish Italian parent of [Miguel Bos\u00e9]"
    },
    {
        "questionIdx": 66614,
        "questionPatternModEntities": "Was M0 's Italian employee employed by M1 and employed by M2",
        "questionTemplate": "Was [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] [VP_SIMPLE] by [entity] and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P1 M3\n}",
        "recursionDepth": 32,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P108 wd:Q131252 .\n?x0 wdt:P108 wd:Q209344 .\n?x0 wdt:P108 wd:Q820887 .\n?x0 wdt:P27 wd:Q38\n}",
        "questionWithBrackets": "Was [Sapienza University of Rome] 's Italian employee employed by [University of Florence] and employed by [University of Chicago]"
    },
    {
        "questionIdx": 66631,
        "questionPatternModEntities": "Was M1 M0 's spouse 's spouse and sibling",
        "questionTemplate": "Was [entity] [entity] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE] and [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( M1 != ?x0 ) .\nFILTER ( M1 != ?x0 ) .\nM1 P0 ?x0 .\nM1 P1 ?x0\n}",
        "recursionDepth": 20,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P26 wd:Q39938 .\nFILTER ( ?x0 != wd:Q39938 ) .\nFILTER ( wd:Q40017 != ?x0 ) .\nFILTER ( wd:Q40017 != ?x0 ) .\nwd:Q40017 wdt:P3373 ?x0 .\nwd:Q40017 wdt:P26 ?x0\n}",
        "questionWithBrackets": "Was [Ptolemy XIV of Egypt] [Ptolemy XIII Theos Philopator] 's spouse 's spouse and sibling"
    },
    {
        "questionIdx": 66636,
        "questionPatternModEntities": "Was M0 a spouse , parent , and sibling of M1",
        "questionTemplate": "Was [entity] a [ROLE_SIMPLE] , [ROLE_SIMPLE] , and [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nFILTER ( M0 != M1 ) .\nFILTER ( M0 != M1 ) .\nM0 P0 M1 .\nM0 P1 M1 .\nM0 P2 M1\n}",
        "recursionDepth": 22,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nFILTER ( wd:Q1523 != wd:Q443473 ) .\nFILTER ( wd:Q1523 != wd:Q443473 ) .\nwd:Q1523 wdt:P40|wdt:P355 wd:Q443473 .\nwd:Q1523 wdt:P3373 wd:Q443473 .\nwd:Q1523 wdt:P26 wd:Q443473\n}",
        "questionWithBrackets": "Was [Ramesses II] a spouse , parent , and sibling of [Henutmire]"
    },
    {
        "questionIdx": 66638,
        "questionPatternModEntities": "Was M1 's spouse M0 's sibling , parent , and spouse",
        "questionTemplate": "Was [entity] 's [ROLE_SIMPLE] [entity] 's [ROLE_SIMPLE] , [ROLE_SIMPLE] , and [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M0 .\n?x0 P2 M0 .\n?x0 P2 M1 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x0 != M1 )\n}",
        "recursionDepth": 24,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q443473 .\n?x0 wdt:P3373 wd:Q443473 .\n?x0 wdt:P26 wd:Q210535 .\n?x0 wdt:P26 wd:Q443473 .\nFILTER ( ?x0 != wd:Q210535 ) .\nFILTER ( ?x0 != wd:Q443473 ) .\nFILTER ( ?x0 != wd:Q443473 )\n}",
        "questionWithBrackets": "Was [Nefertarilllala] 's spouse [Henutmire] 's sibling , parent , and spouse"
    },
    {
        "questionIdx": 66656,
        "questionPatternModEntities": "Was M0 written and edited by M1",
        "questionTemplate": "Was [entity] [VP_SIMPLE] and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1\n}",
        "recursionDepth": 19,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q847709 wdt:P1040 wd:Q8006 .\nwd:Q847709 wdt:P58 wd:Q8006\n}",
        "questionWithBrackets": "Was [Red Beard] written and edited by [Akira Kurosawa]"
    },
    {
        "questionIdx": 66676,
        "questionPatternModEntities": "Was M1 's parent 's spouse M0 's actor",
        "questionTemplate": "Was [entity] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE] [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 ?x1 .\n?x1 P2 M1 .\nFILTER ( ?x0 != ?x1 )\n}",
        "recursionDepth": 19,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P453 wd:Q222573 .\n?x0 wdt:P26 ?x1 .\n?x1 wdt:P40|wdt:P355 wd:Q779406 .\nFILTER ( ?x0 != ?x1 )\n}",
        "questionWithBrackets": "Was [Latinus] 's parent 's spouse [femme fatale] 's actor"
    },
    {
        "questionIdx": 66679,
        "questionPatternModEntities": "Was M1 's sequel written and produced by M0",
        "questionTemplate": "Was [entity] 's [ROLE_SIMPLE] [VP_SIMPLE] and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M0 .\n?x0 P2 M1\n}",
        "recursionDepth": 23,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P155 wd:Q2401367 .\n?x0 wdt:P162|wdt:P272 wd:Q4465 .\n?x0 wdt:P58 wd:Q4465\n}",
        "questionWithBrackets": "Was [Batman Begins] 's sequel written and produced by [Peter Jackson]"
    },
    {
        "questionIdx": 66691,
        "questionPatternModEntities": "Was M0 a German American sibling of M1",
        "questionTemplate": "Was [entity] a [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nFILTER ( M0 != M1 ) .\nM0 P0 M1 .\nM0 P1 M2 .\nM0 P1 M3\n}",
        "recursionDepth": 23,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nFILTER ( wd:Q16474 != wd:Q614675 ) .\nwd:Q16474 wdt:P27 wd:Q183 .\nwd:Q16474 wdt:P27 wd:Q30 .\nwd:Q16474 wdt:P3373 wd:Q614675\n}",
        "questionWithBrackets": "Was [John McEnroe] a German American sibling of [Patrick McEnroe]"
    },
    {
        "questionIdx": 66692,
        "questionPatternModEntities": "Was M0 a American German parent of M3",
        "questionTemplate": "Was [entity] a [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P1 M3\n}",
        "recursionDepth": 23,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q16474 wdt:P40|wdt:P355 wd:Q75761311 .\nwd:Q16474 wdt:P27 wd:Q183 .\nwd:Q16474 wdt:P27 wd:Q30\n}",
        "questionWithBrackets": "Was [John McEnroe] a American German parent of [Sean McEnroe]"
    },
    {
        "questionIdx": 66696,
        "questionPatternModEntities": "Was M0 M1 's Canadian male German sibling",
        "questionTemplate": "Was [entity] [entity] 's [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\nFILTER ( M0 != M1 ) .\nM0 P0 M1 .\nM0 P1 M2 .\nM0 P1 M3 .\nM0 P2 M4\n}",
        "recursionDepth": 26,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nFILTER ( wd:Q324325 != wd:Q518347 ) .\nwd:Q324325 wdt:P21 wd:Q6581097 .\nwd:Q324325 wdt:P27 wd:Q183 .\nwd:Q324325 wdt:P27 wd:Q16 .\nwd:Q324325 wdt:P3373 wd:Q518347\n}",
        "questionWithBrackets": "Was [Darin Olver] [Mark Olver] 's Canadian male German sibling"
    },
    {
        "questionIdx": 66712,
        "questionPatternModEntities": "Was M3 's British Chinese parent M0",
        "questionTemplate": "Was [entity] 's [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P1 M3\n}",
        "recursionDepth": 21,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q1196262 wdt:P40|wdt:P355 wd:Q75603090 .\nwd:Q1196262 wdt:P27 wd:Q145 .\nwd:Q1196262 wdt:P27 wd:Q148\n}",
        "questionWithBrackets": "Was [Lin Siao Fou-Menuhin] 's British Chinese parent [Fou Ts'ong]"
    },
    {
        "questionIdx": 66772,
        "questionPatternModEntities": "Was M0 M1 's British Dutch sibling",
        "questionTemplate": "Was [entity] [entity] 's [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\nFILTER ( M0 != M1 ) .\nM0 P0 M1 .\nM0 P1 M2 .\nM0 P1 M3\n}",
        "recursionDepth": 21,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nFILTER ( wd:Q153890 != wd:Q183181 ) .\nwd:Q153890 wdt:P27 wd:Q29999 .\nwd:Q153890 wdt:P27 wd:Q145 .\nwd:Q153890 wdt:P3373 wd:Q183181\n}",
        "questionWithBrackets": "Was [Niko Tinbergen] [Jan Tinbergen] 's British Dutch sibling"
    },
    {
        "questionIdx": 66773,
        "questionPatternModEntities": "Was M0 M1 's Dutch British sibling",
        "questionTemplate": "Was [entity] [entity] 's [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\nFILTER ( M0 != M1 ) .\nM0 P0 M1 .\nM0 P1 M2 .\nM0 P1 M3\n}",
        "recursionDepth": 21,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nFILTER ( wd:Q153890 != wd:Q183181 ) .\nwd:Q153890 wdt:P27 wd:Q29999 .\nwd:Q153890 wdt:P27 wd:Q145 .\nwd:Q153890 wdt:P3373 wd:Q183181\n}",
        "questionWithBrackets": "Was [Niko Tinbergen] [Jan Tinbergen] 's Dutch British sibling"
    },
    {
        "questionIdx": 66774,
        "questionPatternModEntities": "Was M0 a British Dutch sibling of M1",
        "questionTemplate": "Was [entity] a [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nFILTER ( M0 != M1 ) .\nM0 P0 M1 .\nM0 P1 M2 .\nM0 P1 M3\n}",
        "recursionDepth": 23,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nFILTER ( wd:Q153890 != wd:Q183181 ) .\nwd:Q153890 wdt:P27 wd:Q29999 .\nwd:Q153890 wdt:P27 wd:Q145 .\nwd:Q153890 wdt:P3373 wd:Q183181\n}",
        "questionWithBrackets": "Was [Niko Tinbergen] a British Dutch sibling of [Jan Tinbergen]"
    },
    {
        "questionIdx": 66800,
        "questionPatternModEntities": "Was M2 's female spouse M0",
        "questionTemplate": "Was [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nFILTER ( M0 != M2 ) .\nM0 P0 M1 .\nM0 P1 M2\n}",
        "recursionDepth": 16,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nFILTER ( wd:Q969767 != wd:Q1528 ) .\nwd:Q969767 wdt:P21 wd:Q6581072 .\nwd:Q969767 wdt:P26 wd:Q1528\n}",
        "questionWithBrackets": "Was [Ramesses III] 's female spouse [Tiye]"
    },
    {
        "questionIdx": 66829,
        "questionPatternModEntities": "Was M0 written by , directed by , edited by , and produced by M1",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1 .\nM0 P2 M1 .\nM0 P3 M1\n}",
        "recursionDepth": 32,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q854990 wdt:P57 wd:Q8006 .\nwd:Q854990 wdt:P1040 wd:Q8006 .\nwd:Q854990 wdt:P162|wdt:P272 wd:Q8006 .\nwd:Q854990 wdt:P58 wd:Q8006\n}",
        "questionWithBrackets": "Was [Kagemusha] written by , directed by , edited by , and produced by [Akira Kurosawa]"
    },
    {
        "questionIdx": 66849,
        "questionPatternModEntities": "Was M1 produced by M0 's employee 's spouse , edited by M2 , and directed by M3",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x1 P1 M0 .\nFILTER ( ?x0 != ?x1 ) .\nM1 P2 ?x0 .\nM1 P3 M2 .\nM1 P4 M3\n}",
        "recursionDepth": 40,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P26 ?x1 .\n?x1 wdt:P108 wd:Q13371 .\nFILTER ( ?x0 != ?x1 ) .\nwd:Q426631 wdt:P57 wd:Q714651 .\nwd:Q426631 wdt:P1040 wd:Q49023 .\nwd:Q426631 wdt:P162|wdt:P272 ?x0\n}",
        "questionWithBrackets": "Was [Albert Nobbs] produced by [Harvard University] 's employee 's spouse , edited by [Steven Weisberg] , and directed by [Rodrigo Garc\u00eda]"
    },
    {
        "questionIdx": 66975,
        "questionPatternModEntities": "Was M0 's spouse 's sibling and parent M1",
        "questionTemplate": "Was [entity] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE] and [ROLE_SIMPLE] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( M1 != ?x0 ) .\nM1 P1 ?x0 .\nM1 P2 ?x0\n}",
        "recursionDepth": 20,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P26 wd:Q632595 .\nFILTER ( ?x0 != wd:Q632595 ) .\nFILTER ( wd:Q40020 != ?x0 ) .\nwd:Q40020 wdt:P40|wdt:P355 ?x0 .\nwd:Q40020 wdt:P3373 ?x0\n}",
        "questionWithBrackets": "Was [Archelaus] 's spouse 's sibling and parent [Cleopatra VI of Egypt]"
    },
    {
        "questionIdx": 66977,
        "questionPatternModEntities": "Was M1 's Mexican sibling M0",
        "questionTemplate": "Was [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nFILTER ( M0 != M1 ) .\nM0 P0 M1 .\nM0 P1 M2\n}",
        "recursionDepth": 16,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nFILTER ( wd:Q250397 != wd:Q380779 ) .\nwd:Q250397 wdt:P27 wd:Q96 .\nwd:Q250397 wdt:P3373 wd:Q380779\n}",
        "questionWithBrackets": "Was [Pedro Coronel] 's Mexican sibling [Rafael Coronel]"
    },
    {
        "questionIdx": 67007,
        "questionPatternModEntities": "Was M0 a actor of M1 and M2",
        "questionTemplate": "Was [entity] a [ROLE_SIMPLE] of [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2\n}",
        "recursionDepth": 17,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q12588774 wdt:P453 wd:Q905926 .\nwd:Q12588774 wdt:P453 wd:Q845913\n}",
        "questionWithBrackets": "Was [Kim Joon-ho] a actor of [Zerg] and [Protoss]"
    },
    {
        "questionIdx": 67046,
        "questionPatternModEntities": "Was M0 directed by and written by M1 and M2",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P1 M1 .\nM0 P1 M2\n}",
        "recursionDepth": 24,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q2590524 wdt:P57 wd:Q882 .\nwd:Q2590524 wdt:P57 wd:Q235918 .\nwd:Q2590524 wdt:P58 wd:Q882 .\nwd:Q2590524 wdt:P58 wd:Q235918\n}",
        "questionWithBrackets": "Was [Mabel's Busy Day] directed by and written by [Charlie Chaplin] and [Mabel Normand]"
    },
    {
        "questionIdx": 67071,
        "questionPatternModEntities": "Was M0 edited by M1 and edited by M2",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2\n}",
        "recursionDepth": 23,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q281988 wdt:P1040 wd:Q853 .\nwd:Q281988 wdt:P1040 wd:Q603265\n}",
        "questionWithBrackets": "Was [The Sacrifice] edited by [Andrei Tarkovsky] and edited by [Michal Leszczylowski]"
    },
    {
        "questionIdx": 67072,
        "questionPatternModEntities": "Was M1 's Dutch German employee M0",
        "questionTemplate": "Was [entity] 's [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M2 .\nM0 P1 M3\n}",
        "recursionDepth": 21,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q112883 wdt:P108 wd:Q34433 .\nwd:Q112883 wdt:P27 wd:Q183 .\nwd:Q112883 wdt:P27 wd:Q29999\n}",
        "questionWithBrackets": "Was [University of Oxford] 's Dutch German employee [Edith B\u00fclbring]"
    },
    {
        "questionIdx": 67085,
        "questionPatternModEntities": "Was M0 executive produced , written , edited , and produced by M1",
        "questionTemplate": "Was [entity] [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1 .\nM0 P2 M1 .\nM0 P3 M1\n}",
        "recursionDepth": 30,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q854990 wdt:P1040 wd:Q8006 .\nwd:Q854990 wdt:P1431 wd:Q8006 .\nwd:Q854990 wdt:P162|wdt:P272 wd:Q8006 .\nwd:Q854990 wdt:P58 wd:Q8006\n}",
        "questionWithBrackets": "Was [Kagemusha] executive produced , written , edited , and produced by [Akira Kurosawa]"
    },
    {
        "questionIdx": 67096,
        "questionPatternModEntities": "Was M1 produced and edited by M0 's sibling 's sibling",
        "questionTemplate": "Was [entity] [VP_SIMPLE] and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x1 P0 M0 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x1 != M0 ) .\nM1 P1 ?x0 .\nM1 P2 ?x0\n}",
        "recursionDepth": 27,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P3373 ?x1 .\n?x1 wdt:P3373 wd:Q25191 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x1 != wd:Q25191 ) .\nwd:Q685817 wdt:P1040 ?x0 .\nwd:Q685817 wdt:P162|wdt:P272 ?x0\n}",
        "questionWithBrackets": "Was [Following] produced and edited by [Christopher Nolan] 's sibling 's sibling"
    },
    {
        "questionIdx": 67097,
        "questionPatternModEntities": "Was M1 directed by a sibling of M0",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nM1 P1 ?x0\n}",
        "recursionDepth": 18,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P3373 wd:Q104373794 .\nFILTER ( ?x0 != wd:Q104373794 ) .\nwd:Q4669986 wdt:P57 ?x0\n}",
        "questionWithBrackets": "Was [Absurda] directed by a sibling of [Martha Lynch Levacy]"
    },
    {
        "questionIdx": 67150,
        "questionPatternModEntities": "Was M0 produced and written by M1 , M2 , M3 , M4 , and M5",
        "questionTemplate": "Was [entity] [VP_SIMPLE] and [VP_SIMPLE] by [entity] , [entity] , [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P0 M3 .\nM0 P0 M4 .\nM0 P0 M5 .\nM0 P1 M1 .\nM0 P1 M2 .\nM0 P1 M3 .\nM0 P1 M4 .\nM0 P1 M5\n}",
        "recursionDepth": 32,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q643220 wdt:P162|wdt:P272 wd:Q16390 .\nwd:Q643220 wdt:P162|wdt:P272 wd:Q93188 .\nwd:Q643220 wdt:P162|wdt:P272 wd:Q295984 .\nwd:Q643220 wdt:P162|wdt:P272 wd:Q4420093 .\nwd:Q643220 wdt:P162|wdt:P272 wd:Q242477 .\nwd:Q643220 wdt:P58 wd:Q16390 .\nwd:Q643220 wdt:P58 wd:Q93188 .\nwd:Q643220 wdt:P58 wd:Q295984 .\nwd:Q643220 wdt:P58 wd:Q4420093 .\nwd:Q643220 wdt:P58 wd:Q242477\n}",
        "questionWithBrackets": "Was [Virginia City] produced and written by [Errol Flynn] , [Robert Buckner] , [Miriam Hopkins] , [Randolph Scott] , and [Humphrey Bogart]"
    },
    {
        "questionIdx": 67154,
        "questionPatternModEntities": "Was M1 's parent M0 's sibling and spouse",
        "questionTemplate": "Was [entity] 's [ROLE_SIMPLE] [entity] 's [ROLE_SIMPLE] and [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P2 M0 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x0 != M0 )\n}",
        "recursionDepth": 20,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q4064 .\n?x0 wdt:P3373 wd:Q1532 .\n?x0 wdt:P26 wd:Q1532 .\nFILTER ( ?x0 != wd:Q1532 ) .\nFILTER ( ?x0 != wd:Q1532 )\n}",
        "questionWithBrackets": "Was [Ramesses V] 's parent [Ramesses IV] 's sibling and spouse"
    },
    {
        "questionIdx": 67171,
        "questionPatternModEntities": "Was M0 's prequel written by and executive produced by M1",
        "questionTemplate": "Was [entity] 's [ROLE_SIMPLE] [VP_SIMPLE] by and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P2 M1\n}",
        "recursionDepth": 25,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P1431 wd:Q11313 .\n?x0 wdt:P156 wd:Q18486021 .\n?x0 wdt:P58 wd:Q11313\n}",
        "questionWithBrackets": "Was [Star Wars: Episode VIII \u2013 The Last Jedi] 's prequel written by and executive produced by [John Knoll]"
    },
    {
        "questionIdx": 67184,
        "questionPatternModEntities": "Was M0 written by , produced by , and executive produced by M1",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1 .\nM0 P2 M1\n}",
        "recursionDepth": 27,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q208047 wdt:P1431 wd:Q61347 .\nwd:Q208047 wdt:P162|wdt:P272 wd:Q61347 .\nwd:Q208047 wdt:P58 wd:Q61347\n}",
        "questionWithBrackets": "Was [1968 Tunnel Rats] written by , produced by , and executive produced by [Uwe Boll]"
    },
    {
        "questionIdx": 67370,
        "questionPatternModEntities": "Was M0 's sibling a employee of M1 and M2",
        "questionTemplate": "Was [entity] 's [ROLE_SIMPLE] a [ROLE_SIMPLE] of [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\nFILTER ( ?x0 != M0 )\n}",
        "recursionDepth": 21,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P108 wd:Q144488 .\n?x0 wdt:P108 wd:Q1658883 .\n?x0 wdt:P3373 wd:Q2757 .\nFILTER ( ?x0 != wd:Q2757 )\n}",
        "questionWithBrackets": "Was [Lech Kaczy\u0144ski] 's sibling a employee of [University of Bia\u0142ystok] and [University of Warsaw]"
    },
    {
        "questionIdx": 67384,
        "questionPatternModEntities": "Was M2 M1 's British spouse 's parent",
        "questionTemplate": "Was [entity] [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M1 ) .\nM2 P2 ?x0\n}",
        "recursionDepth": 20,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P27 wd:Q145 .\n?x0 wdt:P26 wd:Q4768219 .\nFILTER ( ?x0 != wd:Q4768219 ) .\nwd:Q75570971 wdt:P40|wdt:P355 ?x0\n}",
        "questionWithBrackets": "Was [Florence Kenrick] [Anne Chamberlain] 's British spouse 's parent"
    },
    {
        "questionIdx": 67407,
        "questionPatternModEntities": "Was M0 M2 's Canadian actor",
        "questionTemplate": "Was [entity] [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M2\n}",
        "recursionDepth": 16,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q5107264 wdt:P453 wd:Q905926 .\nwd:Q5107264 wdt:P27 wd:Q16\n}",
        "questionWithBrackets": "Was [Chris Loranger] [Protoss] 's Canadian actor"
    },
    {
        "questionIdx": 67410,
        "questionPatternModEntities": "Was M0 directed by M2 and M3 and executive produced by M1",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] and [entity] and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M2 .\nM0 P1 M3\n}",
        "recursionDepth": 28,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q1079 wdt:P57 wd:Q3952882 .\nwd:Q1079 wdt:P57 wd:Q371455 .\nwd:Q1079 wdt:P1431 wd:Q4500\n}",
        "questionWithBrackets": "Was [Breaking Bad] directed by [Scott Winant] and [David Slade] and executive produced by [Vince Gilligan]"
    },
    {
        "questionIdx": 67417,
        "questionPatternModEntities": "Was M1 directed by M3 , M4 , and M5 , executive produced by M2 , and executive produced by M0 's child",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] , [entity] , and [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 ?x0 .\nM1 P1 M2 .\nM1 P2 M3 .\nM1 P2 M4 .\nM1 P2 M5\n}",
        "recursionDepth": 45,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P749 wd:Q54829 .\nwd:Q18590678 wdt:P57 wd:Q6123711 .\nwd:Q18590678 wdt:P57 wd:Q2893408 .\nwd:Q18590678 wdt:P57 wd:Q8961363 .\nwd:Q18590678 wdt:P1431 ?x0 .\nwd:Q18590678 wdt:P1431 wd:Q544560\n}",
        "questionWithBrackets": "Was [No label defined] directed by [Jaime Ch\u00e1varri] , [Fernando M\u00e9ndez-Leite] , and [Emilio Mart\u00ednez-L\u00e1zaro] , executive produced by [Televisi\u00f3n Espa\u00f1ola] , and executive produced by [Radiotelevisi\u00f3n Espa\u00f1ola] 's child"
    },
    {
        "questionIdx": 67446,
        "questionPatternModEntities": "Was M0 a Canadian actor of M2",
        "questionTemplate": "Was [entity] a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M2\n}",
        "recursionDepth": 18,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q5107264 wdt:P453 wd:Q905926 .\nwd:Q5107264 wdt:P27 wd:Q16\n}",
        "questionWithBrackets": "Was [Chris Loranger] a Canadian actor of [Protoss]"
    },
    {
        "questionIdx": 67447,
        "questionPatternModEntities": "Was M0 's sibling a sibling of M1",
        "questionTemplate": "Was [entity] 's [ROLE_SIMPLE] a [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x0 != M1 )\n}",
        "recursionDepth": 17,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P3373 wd:Q207 .\n?x0 wdt:P3373 wd:Q221997 .\nFILTER ( ?x0 != wd:Q207 ) .\nFILTER ( ?x0 != wd:Q221997 )\n}",
        "questionWithBrackets": "Was [Jeb Bush] 's sibling a sibling of [George W. Bush]"
    },
    {
        "questionIdx": 67496,
        "questionPatternModEntities": "Was M2 's French spouse M0",
        "questionTemplate": "Was [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nFILTER ( M0 != M2 ) .\nM0 P0 M1 .\nM0 P1 M2\n}",
        "recursionDepth": 16,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nFILTER ( wd:Q1151 != wd:Q1034113 ) .\nwd:Q1151 wdt:P27 wd:Q142 .\nwd:Q1151 wdt:P26 wd:Q1034113\n}",
        "questionWithBrackets": "Was [Harriet Smithson] 's French spouse [Hector Berlioz]"
    },
    {
        "questionIdx": 67522,
        "questionPatternModEntities": "Was M0 's Italian sibling 's Canadian sibling M2",
        "questionTemplate": "Was [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( M2 != ?x0 ) .\nM2 P0 ?x0 .\nM2 P1 M3\n}",
        "recursionDepth": 25,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P27 wd:Q38 .\n?x0 wdt:P3373 wd:Q273774 .\nFILTER ( ?x0 != wd:Q273774 ) .\nFILTER ( wd:Q5041043 != ?x0 ) .\nwd:Q5041043 wdt:P27 wd:Q16 .\nwd:Q5041043 wdt:P3373 ?x0\n}",
        "questionWithBrackets": "Was [Taryn Power] 's Italian sibling 's Canadian sibling [Carla Collins]"
    },
    {
        "questionIdx": 67580,
        "questionPatternModEntities": "Was M0 M4 's Spanish male Italian parent",
        "questionTemplate": "Was [entity] [entity] 's [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P1 M3 .\nM0 P2 M4\n}",
        "recursionDepth": 26,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q518879 wdt:P40|wdt:P355 wd:Q235128 .\nwd:Q518879 wdt:P21 wd:Q6581097 .\nwd:Q518879 wdt:P27 wd:Q38 .\nwd:Q518879 wdt:P27 wd:Q29\n}",
        "questionWithBrackets": "Was [Prince Carlos of Bourbon-Two Sicilies] [Princess Mar\u00eda de las Mercedes of Bourbon-Two Sicilies] 's Spanish male Italian parent"
    },
    {
        "questionIdx": 67663,
        "questionPatternModEntities": "Was M0 executive produced , edited , and produced by M1",
        "questionTemplate": "Was [entity] [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1 .\nM0 P2 M1\n}",
        "recursionDepth": 25,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q854990 wdt:P1040 wd:Q8006 .\nwd:Q854990 wdt:P1431 wd:Q8006 .\nwd:Q854990 wdt:P162|wdt:P272 wd:Q8006\n}",
        "questionWithBrackets": "Was [Kagemusha] executive produced , edited , and produced by [Akira Kurosawa]"
    },
    {
        "questionIdx": 67679,
        "questionPatternModEntities": "Was M1 's Italian sibling M0",
        "questionTemplate": "Was [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nFILTER ( M0 != M1 ) .\nM0 P0 M1 .\nM0 P1 M2\n}",
        "recursionDepth": 16,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nFILTER ( wd:Q50926 != wd:Q179728 ) .\nwd:Q50926 wdt:P27 wd:Q38 .\nwd:Q50926 wdt:P3373 wd:Q179728\n}",
        "questionWithBrackets": "Was [Xavier of Bourbon-Parma] 's Italian sibling [Zita of Bourbon-Parma]"
    },
    {
        "questionIdx": 67703,
        "questionPatternModEntities": "Was M0 a actor of M1",
        "questionTemplate": "Was [entity] a [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1\n}",
        "recursionDepth": 13,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q29765 wdt:P453 wd:Q845913\n}",
        "questionWithBrackets": "Was [Lim Jae-Duk] a actor of [Zerg]"
    },
    {
        "questionIdx": 67766,
        "questionPatternModEntities": "Was M4 's French female Canadian parent M0",
        "questionTemplate": "Was [entity] 's [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P1 M3 .\nM0 P2 M4\n}",
        "recursionDepth": 26,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q3162017 wdt:P40|wdt:P355 wd:Q3315962 .\nwd:Q3162017 wdt:P21 wd:Q6581072 .\nwd:Q3162017 wdt:P27 wd:Q16 .\nwd:Q3162017 wdt:P27 wd:Q142\n}",
        "questionWithBrackets": "Was [Mireille Deyglun] 's French female Canadian parent [Janine Sutto]"
    },
    {
        "questionIdx": 67796,
        "questionPatternModEntities": "Was M2 executive produced by M0 's Mexican employee , written by M3 , and written by M4",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nM2 P2 ?x0 .\nM2 P3 M3 .\nM2 P3 M4\n}",
        "recursionDepth": 42,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P108 wd:Q106255029 .\n?x0 wdt:P27 wd:Q96 .\nwd:Q213081 wdt:P1431 ?x0 .\nwd:Q213081 wdt:P58 wd:Q432598 .\nwd:Q213081 wdt:P58 wd:Q467500\n}",
        "questionWithBrackets": "Was [Star Trek] executive produced by [Sneaky Shark] 's Mexican employee , written by [Alex Kurtzman] , and written by [Roberto Orci]"
    },
    {
        "questionIdx": 67801,
        "questionPatternModEntities": "Was M0 executive produced and edited by M1",
        "questionTemplate": "Was [entity] [VP_SIMPLE] and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1\n}",
        "recursionDepth": 20,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q181803 wdt:P1040 wd:Q38222 .\nwd:Q181803 wdt:P1431 wd:Q38222\n}",
        "questionWithBrackets": "Was [Star Wars: Episode VI \u2013 Return of the Jedi] executive produced and edited by [George Lucas]"
    },
    {
        "questionIdx": 67860,
        "questionPatternModEntities": "Was M1 's male actor M0",
        "questionTemplate": "Was [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M2\n}",
        "recursionDepth": 16,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q12586942 wdt:P453 wd:Q913318 .\nwd:Q12586942 wdt:P21 wd:Q6581097\n}",
        "questionWithBrackets": "Was [Terran] 's male actor [Notice]"
    },
    {
        "questionIdx": 67866,
        "questionPatternModEntities": "Was M0 a actor that M1 was played by",
        "questionTemplate": "Was [entity] a [NP_SIMPLE] that [entity] was [VP_SIMPLE] by",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1\n}",
        "recursionDepth": 21,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q29765 wdt:P453 wd:Q845913\n}",
        "questionWithBrackets": "Was [Lim Jae-Duk] a actor that [Zerg] was played by"
    },
    {
        "questionIdx": 67870,
        "questionPatternModEntities": "Was M2 directed by M0 's Japanese sibling",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M0 ) .\nM2 P2 ?x0\n}",
        "recursionDepth": 21,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P27 wd:Q17 .\n?x0 wdt:P3373 wd:Q11404271 .\nFILTER ( ?x0 != wd:Q11404271 ) .\nwd:Q148330 wdt:P57 ?x0\n}",
        "questionWithBrackets": "Was [Zat\u014dichi] directed by [Masaru Kitano] 's Japanese sibling"
    },
    {
        "questionIdx": 67873,
        "questionPatternModEntities": "Was M2 M0 's male sibling 's sibling and spouse",
        "questionTemplate": "Was [entity] [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] 's [ROLE_SIMPLE] and [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( M2 != ?x0 ) .\nFILTER ( M2 != ?x0 ) .\nM2 P0 ?x0 .\nM2 P2 ?x0\n}",
        "recursionDepth": 25,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P21 wd:Q6581097 .\n?x0 wdt:P3373 wd:Q3345 .\nFILTER ( ?x0 != wd:Q3345 ) .\nFILTER ( wd:Q40023 != ?x0 ) .\nFILTER ( wd:Q40023 != ?x0 ) .\nwd:Q40023 wdt:P3373 ?x0 .\nwd:Q40023 wdt:P26 ?x0\n}",
        "questionWithBrackets": "Was [Cleopatra IV of Egypt] [Ptolemy X Alexander I] 's male sibling 's sibling and spouse"
    },
    {
        "questionIdx": 67893,
        "questionPatternModEntities": "Was M2 executive produced by M3 , edited by M0 's British sibling 's sibling , and executive produced by M4",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] 's [ROLE_SIMPLE] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x1 P0 M0 .\n?x1 P1 M1 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x1 != M0 ) .\nM2 P2 M3 .\nM2 P2 M4 .\nM2 P3 ?x0\n}",
        "recursionDepth": 47,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P3373 ?x1 .\n?x1 wdt:P27 wd:Q145 .\n?x1 wdt:P3373 wd:Q1645834 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x1 != wd:Q1645834 ) .\nwd:Q273568 wdt:P1040 ?x0 .\nwd:Q273568 wdt:P1431 wd:Q710924 .\nwd:Q273568 wdt:P1431 wd:Q202945\n}",
        "questionWithBrackets": "Was [Charlie Wilson's War] executive produced by [Jeff Skoll] , edited by [John Bloom] 's British sibling 's sibling , and executive produced by [Ryan Kavanaugh]"
    },
    {
        "questionIdx": 67894,
        "questionPatternModEntities": "Was M1 executive produced by M2 , M3 , M4 , M5 , and M6 and edited by a sibling of M0",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] , [entity] , [entity] , [entity] , and [entity] and [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nM1 P1 M2 .\nM1 P1 M3 .\nM1 P1 M4 .\nM1 P1 M5 .\nM1 P1 M6 .\nM1 P2 ?x0\n}",
        "recursionDepth": 43,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P3373 wd:Q28370409 .\nFILTER ( ?x0 != wd:Q28370409 ) .\nwd:Q28146810 wdt:P1040 ?x0 .\nwd:Q28146810 wdt:P1431 wd:Q30176178 .\nwd:Q28146810 wdt:P1431 wd:Q28146812 .\nwd:Q28146810 wdt:P1431 wd:Q33694176 .\nwd:Q28146810 wdt:P1431 wd:Q33693924 .\nwd:Q28146810 wdt:P1431 wd:Q33694740\n}",
        "questionWithBrackets": "Was [Bullets, Fangs and Dinner at 8] executive produced by [Jay Rock] , [Leslie Rocca] , [Matthew Rocca] , [Vito Rocca] , and [Joe D'Amato] and edited by a sibling of [Everton Rocca]"
    },
    {
        "questionIdx": 67925,
        "questionPatternModEntities": "Was M1 a sibling of M0 's parent",
        "questionTemplate": "Was [entity] a [ROLE_SIMPLE] of [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( M1 != ?x0 ) .\nM1 P1 ?x0\n}",
        "recursionDepth": 17,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q350246 .\nFILTER ( wd:Q39938 != ?x0 ) .\nwd:Q39938 wdt:P3373 ?x0\n}",
        "questionWithBrackets": "Was [Ptolemy XIII Theos Philopator] a sibling of [Ptolemy Philadelphus] 's parent"
    },
    {
        "questionIdx": 67963,
        "questionPatternModEntities": "Was M0 executive produced and directed by M1 and M2",
        "questionTemplate": "Was [entity] [VP_SIMPLE] and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P1 M1 .\nM0 P1 M2\n}",
        "recursionDepth": 24,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q24204524 wdt:P57 wd:Q25186 .\nwd:Q24204524 wdt:P57 wd:Q717302 .\nwd:Q24204524 wdt:P1431 wd:Q25186 .\nwd:Q24204524 wdt:P1431 wd:Q717302\n}",
        "questionWithBrackets": "Was [When We Rise] executive produced and directed by [Gus Van Sant] and [Dustin Lance Black]"
    },
    {
        "questionIdx": 67982,
        "questionPatternModEntities": "Was M0 edited by M2 , M3 , M4 , M5 , and M6 , directed by M7 , and written by M1",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] , [entity] , [entity] , [entity] , and [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M2 .\nM0 P1 M3 .\nM0 P1 M4 .\nM0 P1 M5 .\nM0 P1 M6 .\nM0 P2 M7\n}",
        "recursionDepth": 45,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q603857 wdt:P57 wd:Q432709 .\nwd:Q603857 wdt:P1040 wd:Q55215 .\nwd:Q603857 wdt:P1040 wd:Q5639976 .\nwd:Q603857 wdt:P1040 wd:Q541826 .\nwd:Q603857 wdt:P1040 wd:Q22074634 .\nwd:Q603857 wdt:P1040 wd:Q18021284 .\nwd:Q603857 wdt:P58 wd:Q11443774\n}",
        "questionWithBrackets": "Was [11'09\"01 September 11] edited by [Robert Duffy] , [Jay Cassidy] , [Hajime Okayasu] , [Alejandro Gonz\u00e1lez I\u00f1\u00e1rritu] , and [Jonathan Morris] , directed by [Samira Makhmalbaf] , and written by [Daisuke Tengan]"
    },
    {
        "questionIdx": 68130,
        "questionPatternModEntities": "Was M2 's spouse M0 's female sibling",
        "questionTemplate": "Was [entity] 's [ROLE_SIMPLE] [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P2 M2 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x0 != M2 )\n}",
        "recursionDepth": 20,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P21 wd:Q6581072 .\n?x0 wdt:P3373 wd:Q859 .\n?x0 wdt:P26 wd:Q1378512 .\nFILTER ( ?x0 != wd:Q859 ) .\nFILTER ( ?x0 != wd:Q1378512 )\n}",
        "questionWithBrackets": "Was [Eurymedon of Myrrhinus] 's spouse [Plato] 's female sibling"
    },
    {
        "questionIdx": 68137,
        "questionPatternModEntities": "Was M1 executive produced by , produced by , written by , directed by , and edited by M0 's sibling",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nM1 P1 ?x0 .\nM1 P2 ?x0 .\nM1 P3 ?x0 .\nM1 P4 ?x0 .\nM1 P5 ?x0\n}",
        "recursionDepth": 43,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P3373 wd:Q28370409 .\nFILTER ( ?x0 != wd:Q28370409 ) .\nwd:Q28146810 wdt:P57 ?x0 .\nwd:Q28146810 wdt:P1040 ?x0 .\nwd:Q28146810 wdt:P1431 ?x0 .\nwd:Q28146810 wdt:P162|wdt:P272 ?x0 .\nwd:Q28146810 wdt:P58 ?x0\n}",
        "questionWithBrackets": "Was [Bullets, Fangs and Dinner at 8] executive produced by , produced by , written by , directed by , and edited by [Everton Rocca] 's sibling"
    },
    {
        "questionIdx": 68172,
        "questionPatternModEntities": "Was M0 's sequel produced by M1 's sibling",
        "questionTemplate": "Was [entity] 's [ROLE_SIMPLE] [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x0 P1 M0 .\n?x1 P2 M1 .\nFILTER ( ?x1 != M1 )\n}",
        "recursionDepth": 20,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P155 wd:Q761651 .\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x1 wdt:P3373 wd:Q16408125 .\nFILTER ( ?x1 != wd:Q16408125 )\n}",
        "questionWithBrackets": "Was [Elvis] 's sequel produced by [Jessie Garon Presley] 's sibling"
    },
    {
        "questionIdx": 68179,
        "questionPatternModEntities": "Was M0 executive produced by and written by M1 , M2 , and M3",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by and [VP_SIMPLE] by [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P0 M3 .\nM0 P1 M1 .\nM0 P1 M2 .\nM0 P1 M3\n}",
        "recursionDepth": 28,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q23572 wdt:P1431 wd:Q181677 .\nwd:Q23572 wdt:P1431 wd:Q503997 .\nwd:Q23572 wdt:P1431 wd:Q1151388 .\nwd:Q23572 wdt:P58 wd:Q181677 .\nwd:Q23572 wdt:P58 wd:Q503997 .\nwd:Q23572 wdt:P58 wd:Q1151388\n}",
        "questionWithBrackets": "Was [Game of Thrones] executive produced by and written by [D. B. Weiss] , [George R. R. Martin] , and [David Benioff]"
    },
    {
        "questionIdx": 68201,
        "questionPatternModEntities": "Was M0 edited by M4 , edited by M5 , M6 , and M7 , and executive produced by M1 , M2 , and M3",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , [entity] , and [entity] , and [VP_SIMPLE] by [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P0 M3 .\nM0 P1 M4 .\nM0 P1 M5 .\nM0 P1 M6 .\nM0 P1 M7\n}",
        "recursionDepth": 47,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q20630763 wdt:P1040 wd:Q20722014 .\nwd:Q20630763 wdt:P1040 wd:Q20722018 .\nwd:Q20630763 wdt:P1040 wd:Q20722019 .\nwd:Q20630763 wdt:P1040 wd:Q20722013 .\nwd:Q20630763 wdt:P1431 wd:Q350405 .\nwd:Q20630763 wdt:P1431 wd:Q20722010 .\nwd:Q20630763 wdt:P1431 wd:Q20722012\n}",
        "questionWithBrackets": "Was [The Yes Men Are Revolting] edited by [Claire L. Chandler] , edited by [Todd Woody Richman] , [Geraud Brisson] , and [Steven Simone-Friedland] , and executive produced by [Alex Cooke] , [Alan Hayling] , and [Adam McKay]"
    },
    {
        "questionIdx": 68208,
        "questionPatternModEntities": "Was M0 executive produced by M1 , directed by M4 and M5 , written by M2 , and edited by M3",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] and [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M2 .\nM0 P2 M3 .\nM0 P3 M4 .\nM0 P3 M5\n}",
        "recursionDepth": 46,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q221102 wdt:P57 wd:Q506124 .\nwd:Q221102 wdt:P57 wd:Q461315 .\nwd:Q221102 wdt:P1040 wd:Q15794136 .\nwd:Q221102 wdt:P1431 wd:Q134867 .\nwd:Q221102 wdt:P58 wd:Q2170671\n}",
        "questionWithBrackets": "Was [28 Weeks Later] executive produced by [Danny Boyle] , directed by [Andrew Macdonald] and [Juan Carlos Fresnadillo] , written by [Rowan Joff\u00e9] , and edited by [Chris Gill]"
    },
    {
        "questionIdx": 68209,
        "questionPatternModEntities": "Was M0 executive produced by M1 , edited by M2 , edited by M3 , and edited by M4",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M2 .\nM0 P1 M3 .\nM0 P1 M4\n}",
        "recursionDepth": 42,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q5351351 wdt:P1040 wd:Q32975777 .\nwd:Q5351351 wdt:P1040 wd:Q32974950 .\nwd:Q5351351 wdt:P1040 wd:Q17086778 .\nwd:Q5351351 wdt:P1431 wd:Q28310\n}",
        "questionWithBrackets": "Was [El Gringo] executive produced by [Scott Adkins] , edited by [Harold Parker] , edited by [Eduardo Rodr\u00edguez] , and edited by [Don Adams]"
    },
    {
        "questionIdx": 68210,
        "questionPatternModEntities": "Was M0 executive produced by M1 , written by M2 and M3 , edited by M4 , and directed by M5",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] and [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M2 .\nM0 P1 M3 .\nM0 P2 M4 .\nM0 P3 M5\n}",
        "recursionDepth": 46,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q938858 wdt:P57 wd:Q520001 .\nwd:Q938858 wdt:P1040 wd:Q3084812 .\nwd:Q938858 wdt:P1431 wd:Q56094 .\nwd:Q938858 wdt:P58 wd:Q160534 .\nwd:Q938858 wdt:P58 wd:Q1709607\n}",
        "questionWithBrackets": "Was [On the Road] executive produced by [Francis Ford Coppola] , written by [Jos\u00e9 Rivera] and [Jack Kerouac] , edited by [Fran\u00e7ois G\u00e9digier] , and directed by [Sam Riley]"
    },
    {
        "questionIdx": 68217,
        "questionPatternModEntities": "Was M2 written by M3 , written by M0 's Canadian sibling , and written by M4 , M5 , and M6",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] , and [VP_SIMPLE] by [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M0 ) .\nM2 P2 ?x0 .\nM2 P2 M3 .\nM2 P2 M4 .\nM2 P2 M5 .\nM2 P2 M6\n}",
        "recursionDepth": 48,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P27 wd:Q16 .\n?x0 wdt:P3373 wd:Q6228653 .\nFILTER ( ?x0 != wd:Q6228653 ) .\nwd:Q110397 wdt:P58 ?x0 .\nwd:Q110397 wdt:P58 wd:Q42574 .\nwd:Q110397 wdt:P58 wd:Q2409167 .\nwd:Q110397 wdt:P58 wd:Q1210550 .\nwd:Q110397 wdt:P58 wd:Q471010\n}",
        "questionWithBrackets": "Was [True Lies] written by [James Cameron] , written by [John David Cameron] 's Canadian sibling , and written by [Didier Kaminka] , [Simon Micha\u00ebl] , and [Claude Zidi]"
    },
    {
        "questionIdx": 68220,
        "questionPatternModEntities": "Was M0 written by M3 and M4 , executive produced by M1 and M2 , and written by M5 and M6",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] and [entity] , [VP_SIMPLE] by [entity] and [entity] , and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P1 M3 .\nM0 P1 M4 .\nM0 P1 M5 .\nM0 P1 M6\n}",
        "recursionDepth": 45,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q842306 wdt:P1431 wd:Q280187 .\nwd:Q842306 wdt:P1431 wd:Q1262568 .\nwd:Q842306 wdt:P58 wd:Q3139660 .\nwd:Q842306 wdt:P58 wd:Q3127896 .\nwd:Q842306 wdt:P58 wd:Q205002 .\nwd:Q842306 wdt:P58 wd:Q7373501\n}",
        "questionWithBrackets": "Was [Saludos Amigos] written by [Roy Williams] and [Homer Brightman] , executive produced by [Norm Ferguson] and [Jack Cutting] , and written by [Harry Reeves] and [Joe Grant]"
    },
    {
        "questionIdx": 68222,
        "questionPatternModEntities": "Was M1 written by M2 and M3 , edited by a parent of M0 , and written by M4 and M5",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] and [entity] , [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity] , and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 M2 .\nM1 P1 M3 .\nM1 P1 M4 .\nM1 P1 M5 .\nM1 P2 ?x0\n}",
        "recursionDepth": 46,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q432709 .\nwd:Q603857 wdt:P1040 ?x0 .\nwd:Q603857 wdt:P58 wd:Q922492 .\nwd:Q603857 wdt:P58 wd:Q113628 .\nwd:Q603857 wdt:P58 wd:Q313497 .\nwd:Q603857 wdt:P58 wd:Q44221\n}",
        "questionWithBrackets": "Was [11'09\"01 September 11] written by [Danis Tanovi\u0107] and [Sean Penn] , edited by a parent of [Samira Makhmalbaf] , and written by [Paul Laverty] and [Idrissa Ou\u00e9draogo]"
    },
    {
        "questionIdx": 68223,
        "questionPatternModEntities": "Was M0 written by M2 , edited by M5 , written by M3 and M4 , and executive produced by M1",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] and [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M2 .\nM0 P1 M3 .\nM0 P1 M4 .\nM0 P2 M5\n}",
        "recursionDepth": 46,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q22350906 wdt:P1040 wd:Q5295252 .\nwd:Q22350906 wdt:P1431 wd:Q8877 .\nwd:Q22350906 wdt:P58 wd:Q28753838 .\nwd:Q22350906 wdt:P58 wd:Q28846433 .\nwd:Q22350906 wdt:P58 wd:Q1151111\n}",
        "questionWithBrackets": "Was [Tummy Trouble] written by [Kevin Harkey] , edited by [Donald W. Ernst] , written by [Rob Minkoff] and [Mark Kausler] , and executive produced by [Steven Spielberg]"
    },
    {
        "questionIdx": 68224,
        "questionPatternModEntities": "Was M0 written by M1 , edited by M3 , written by M2 , and edited by M4",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P1 M3 .\nM0 P1 M4\n}",
        "recursionDepth": 41,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q2579784 wdt:P1040 wd:Q28028 .\nwd:Q2579784 wdt:P1040 wd:Q15694643 .\nwd:Q2579784 wdt:P58 wd:Q23844 .\nwd:Q2579784 wdt:P58 wd:Q714651\n}",
        "questionWithBrackets": "Was [Gravity] written by [George Clooney] , edited by [Alfonso Cuar\u00f3n] , written by [Rodrigo Garc\u00eda] , and edited by [Mark Sanger]"
    },
    {
        "questionIdx": 68252,
        "questionPatternModEntities": "Was M0 's prequel directed by M6 , written by M2 , M3 , M4 , and M5 , and executive produced by M1",
        "questionTemplate": "Was [entity] 's [ROLE_SIMPLE] [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , [entity] , [entity] , and [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P2 M2 .\n?x0 P2 M3 .\n?x0 P2 M4 .\n?x0 P2 M5 .\n?x0 P3 M6\n}",
        "recursionDepth": 47,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P57 wd:Q282033 .\n?x0 wdt:P1431 wd:Q8877 .\n?x0 wdt:P156 wd:Q947737 .\n?x0 wdt:P58 wd:Q943506 .\n?x0 wdt:P58 wd:Q942914 .\n?x0 wdt:P58 wd:Q720293 .\n?x0 wdt:P58 wd:Q15433295\n}",
        "questionWithBrackets": "Was [The Legend of Zorro] 's prequel directed by [Martin Campbell] , written by [John Eskow] , [Ted Elliott] , [David S. Ward] , and [Terry Rossio] , and executive produced by [Steven Spielberg]"
    },
    {
        "questionIdx": 68334,
        "questionPatternModEntities": "Was M0 produced by M3 , directed by M5 , edited by M4 , and executive produced by M1 and M2",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P1 M3 .\nM0 P2 M4 .\nM0 P3 M5\n}",
        "recursionDepth": 46,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q172271 wdt:P57 wd:Q2158922 .\nwd:Q172271 wdt:P1040 wd:Q562675 .\nwd:Q172271 wdt:P1431 wd:Q13909 .\nwd:Q172271 wdt:P1431 wd:Q1072843 .\nwd:Q172271 wdt:P162|wdt:P272 wd:Q919992\n}",
        "questionWithBrackets": "Was [Maleficent] produced by [Joe Roth] , directed by [Robert Stromberg] , edited by [Rick Pearson] , and executive produced by [Don Hahn] and [Angelina Jolie]"
    },
    {
        "questionIdx": 68374,
        "questionPatternModEntities": "Was M0 written , executive produced , and directed by M1",
        "questionTemplate": "Was [entity] [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1 .\nM0 P2 M1\n}",
        "recursionDepth": 25,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q181086 wdt:P57 wd:Q2001 .\nwd:Q181086 wdt:P1431 wd:Q2001 .\nwd:Q181086 wdt:P58 wd:Q2001\n}",
        "questionWithBrackets": "Was [A Clockwork Orange] written , executive produced , and directed by [Stanley Kubrick]"
    },
    {
        "questionIdx": 68412,
        "questionPatternModEntities": "Was M0 written by M1 and M2 , produced by M3 , and directed by M4 , M5 , M6 , and M7",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] and [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity] , [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P1 M3 .\nM0 P2 M4 .\nM0 P2 M5 .\nM0 P2 M6 .\nM0 P2 M7\n}",
        "recursionDepth": 46,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q901203 wdt:P57 wd:Q2643 .\nwd:Q901203 wdt:P57 wd:Q1203 .\nwd:Q901203 wdt:P57 wd:Q822523 .\nwd:Q901203 wdt:P57 wd:Q2599 .\nwd:Q901203 wdt:P162|wdt:P272 wd:Q621231 .\nwd:Q901203 wdt:P58 wd:Q1299 .\nwd:Q901203 wdt:P58 wd:Q2632\n}",
        "questionWithBrackets": "Was [Magical Mystery Tour] written by [Ringo Starr] and [The Beatles] , produced by [Apple Corps] , and directed by [Paul McCartney] , [George Harrison] , [Bernard Knowles] , and [John Lennon]"
    },
    {
        "questionIdx": 68493,
        "questionPatternModEntities": "Was M0 edited by M3 , edited by M4 and M5 , executive produced by M1 , and executive produced by M2",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] and [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P1 M3 .\nM0 P1 M4 .\nM0 P1 M5\n}",
        "recursionDepth": 47,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q1137372 wdt:P1040 wd:Q273379 .\nwd:Q1137372 wdt:P1040 wd:Q47284 .\nwd:Q1137372 wdt:P1040 wd:Q541143 .\nwd:Q1137372 wdt:P1431 wd:Q3772 .\nwd:Q1137372 wdt:P1431 wd:Q549956\n}",
        "questionWithBrackets": "Was [Four Rooms] edited by [Sally Menke] , edited by [Terry Rawlings] and [Robert Rodriguez] , executive produced by [Alexandre Rockwell] , and executive produced by [Quentin Tarantino]"
    },
    {
        "questionIdx": 68495,
        "questionPatternModEntities": "Was M1 executive produced by M2 , edited by M4 and M5 , produced by M3 , and edited by M0 's sibling",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] and [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nM1 P1 M2 .\nM1 P2 M3 .\nM1 P3 ?x0 .\nM1 P3 M4 .\nM1 P3 M5\n}",
        "recursionDepth": 50,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P3373 wd:Q353117 .\nFILTER ( ?x0 != wd:Q353117 ) .\nwd:Q19590955 wdt:P1040 ?x0 .\nwd:Q19590955 wdt:P1040 wd:Q3181589 .\nwd:Q19590955 wdt:P1040 wd:Q6110147 .\nwd:Q19590955 wdt:P1431 wd:Q11313 .\nwd:Q19590955 wdt:P162|wdt:P272 wd:Q242446\n}",
        "questionWithBrackets": "Was [Rogue One] executive produced by [John Knoll] , edited by [John Gilroy] and [Jabez Olssen] , produced by [Lucasfilm] , and edited by [Tony Gilroy] 's sibling"
    },
    {
        "questionIdx": 68586,
        "questionPatternModEntities": "Was M1 written by M0 's sibling",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nM1 P1 ?x0\n}",
        "recursionDepth": 16,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P3373 wd:Q3343469 .\nFILTER ( ?x0 != wd:Q3343469 ) .\nwd:Q97176681 wdt:P58 ?x0\n}",
        "questionWithBrackets": "Was [No label defined] written by [Norah Borges] 's sibling"
    },
    {
        "questionIdx": 68636,
        "questionPatternModEntities": "Was M1 's actor M0 's sibling",
        "questionTemplate": "Was [entity] 's [ROLE_SIMPLE] [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M0 )\n}",
        "recursionDepth": 15,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P453 wd:Q222573 .\n?x0 wdt:P3373 wd:Q203236 .\nFILTER ( ?x0 != wd:Q203236 )\n}",
        "questionWithBrackets": "Was [femme fatale] 's actor [Pasipha\u00eb] 's sibling"
    },
    {
        "questionIdx": 68697,
        "questionPatternModEntities": "Was M0 written by M1 , edited by M4 , M5 , M6 , and M7 , and written by M2 and M3",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , [entity] , [entity] , and [entity] , and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P0 M3 .\nM0 P1 M4 .\nM0 P1 M5 .\nM0 P1 M6 .\nM0 P1 M7\n}",
        "recursionDepth": 46,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q603857 wdt:P1040 wd:Q55211 .\nwd:Q603857 wdt:P1040 wd:Q55215 .\nwd:Q603857 wdt:P1040 wd:Q5639976 .\nwd:Q603857 wdt:P1040 wd:Q22074634 .\nwd:Q603857 wdt:P58 wd:Q113628 .\nwd:Q603857 wdt:P58 wd:Q44221 .\nwd:Q603857 wdt:P58 wd:Q313497\n}",
        "questionWithBrackets": "Was [11'09\"01 September 11] written by [Idrissa Ou\u00e9draogo] , edited by [Mohsen Makhmalbaf] , [Robert Duffy] , [Alejandro Gonz\u00e1lez I\u00f1\u00e1rritu] , and [Hajime Okayasu] , and written by [Sean Penn] and [Danis Tanovi\u0107]"
    },
    {
        "questionIdx": 68761,
        "questionPatternModEntities": "Was M3 's Japanese British parent M0",
        "questionTemplate": "Was [entity] 's [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P1 M3\n}",
        "recursionDepth": 21,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q117012 wdt:P40|wdt:P355 wd:Q311238 .\nwd:Q117012 wdt:P27 wd:Q17 .\nwd:Q117012 wdt:P27 wd:Q145\n}",
        "questionWithBrackets": "Was [Sean Lennon] 's Japanese British parent [Yoko Ono]"
    },
    {
        "questionIdx": 68813,
        "questionPatternModEntities": "Was M1 's British spouse 's spouse M2",
        "questionTemplate": "Was [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] 's [ROLE_SIMPLE] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M1 ) .\nFILTER ( M2 != ?x0 ) .\nM2 P1 ?x0\n}",
        "recursionDepth": 20,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P27 wd:Q145 .\n?x0 wdt:P26 wd:Q231187 .\nFILTER ( ?x0 != wd:Q231187 ) .\nFILTER ( wd:Q75262695 != ?x0 ) .\nwd:Q75262695 wdt:P26 ?x0\n}",
        "questionWithBrackets": "Was [Sarah Miles] 's British spouse 's spouse [Ann Jones]"
    },
    {
        "questionIdx": 68851,
        "questionPatternModEntities": "Was M2 founded by M3 and founded by M1 's employee 's British spouse",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 ?x1 .\n?x1 P2 M1 .\nFILTER ( ?x0 != ?x1 ) .\nM2 P3 ?x0 .\nM2 P3 M3\n}",
        "recursionDepth": 36,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P27 wd:Q145 .\n?x0 wdt:P26 ?x1 .\n?x1 wdt:P108 wd:Q5503246 .\nFILTER ( ?x0 != ?x1 ) .\nwd:Q367 wdt:P112 ?x0 .\nwd:Q367 wdt:P112 wd:Q180\n}",
        "questionWithBrackets": "Was [Wikibooks] founded by [Wikimedia Foundation] and founded by [Freud Communications] 's employee 's British spouse"
    },
    {
        "questionIdx": 68888,
        "questionPatternModEntities": "Was M0 's parent 's employee M1",
        "questionTemplate": "Was [entity] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 ?x0\n}",
        "recursionDepth": 15,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q866 .\nwd:Q4734351 wdt:P108 ?x0\n}",
        "questionWithBrackets": "Was [YouTube] 's parent 's employee [Alon Y. Halevy]"
    },
    {
        "questionIdx": 69047,
        "questionPatternModEntities": "Was M0 's actor a male spouse of M2",
        "questionTemplate": "Was [entity] 's [ROLE_SIMPLE] a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P2 M2 .\nFILTER ( ?x0 != M2 )\n}",
        "recursionDepth": 22,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P453 wd:Q50807639 .\n?x0 wdt:P21 wd:Q6581097 .\n?x0 wdt:P26 wd:Q1560129 .\nFILTER ( ?x0 != wd:Q1560129 )\n}",
        "questionWithBrackets": "Was [Lohengrin] 's actor a male spouse of [Margarete Joswig]"
    },
    {
        "questionIdx": 69074,
        "questionPatternModEntities": "Was M0 directed by M5 and M6 , executive produced by M1 and M2 , and executive produced by M3 and M4",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] and [entity] , [VP_SIMPLE] by [entity] and [entity] , and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P0 M3 .\nM0 P0 M4 .\nM0 P1 M5 .\nM0 P1 M6\n}",
        "recursionDepth": 46,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q2947967 wdt:P57 wd:Q532944 .\nwd:Q2947967 wdt:P57 wd:Q360477 .\nwd:Q2947967 wdt:P1431 wd:Q8877 .\nwd:Q2947967 wdt:P1431 wd:Q39829 .\nwd:Q2947967 wdt:P1431 wd:Q362793 .\nwd:Q2947967 wdt:P1431 wd:Q7804237\n}",
        "questionWithBrackets": "Was [Under the Dome] directed by [Eriq La Salle] and [Peter Weller] , executive produced by [Jack Bender] and [Steven Spielberg] , and executive produced by [Stephen King] and [Tim Schlattmann]"
    },
    {
        "questionIdx": 69086,
        "questionPatternModEntities": "Was M0 directed by M7 , executive produced by M1 , M2 , M3 , and M4 , and written by M5 and M6",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , [entity] , [entity] , and [entity] , and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P0 M3 .\nM0 P0 M4 .\nM0 P1 M5 .\nM0 P1 M6 .\nM0 P2 M7\n}",
        "recursionDepth": 47,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q2947967 wdt:P57 wd:Q360477 .\nwd:Q2947967 wdt:P1431 wd:Q8877 .\nwd:Q2947967 wdt:P1431 wd:Q55601945 .\nwd:Q2947967 wdt:P1431 wd:Q362793 .\nwd:Q2947967 wdt:P1431 wd:Q849628 .\nwd:Q2947967 wdt:P58 wd:Q6984051 .\nwd:Q2947967 wdt:P58 wd:Q4133060\n}",
        "questionWithBrackets": "Was [Under the Dome] directed by [Peter Weller] , executive produced by [Steven Spielberg] , [Darryl Frank] , [Brian K. Vaughan] , and [Jack Bender] , and written by [Neal Baer] and [Rick Cleveland]"
    },
    {
        "questionIdx": 69087,
        "questionPatternModEntities": "Was M0 directed by M5 , written by M2 and M3 , executive produced by M1 , and edited by M4",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] and [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M2 .\nM0 P1 M3 .\nM0 P2 M4 .\nM0 P3 M5\n}",
        "recursionDepth": 46,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q2031960 wdt:P57 wd:Q56014 .\nwd:Q2031960 wdt:P1040 wd:Q656020 .\nwd:Q2031960 wdt:P1431 wd:Q72291 .\nwd:Q2031960 wdt:P58 wd:Q436164 .\nwd:Q2031960 wdt:P58 wd:Q3100447\n}",
        "questionWithBrackets": "Was [What Price Hollywood?] directed by [George Cukor] , written by [Gene Fowler] and [Jane Murfin] , executive produced by [David O. Selznick] , and edited by [Del Andrews]"
    },
    {
        "questionIdx": 69096,
        "questionPatternModEntities": "Was M4 directed by M2 's American employee and written by M0 's female sibling",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] and [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x1 P2 M2 .\n?x1 P3 M3 .\nFILTER ( ?x0 != M0 ) .\nM4 P4 ?x0 .\nM4 P5 ?x1\n}",
        "recursionDepth": 41,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P21 wd:Q6581072 .\n?x0 wdt:P3373 wd:Q5112102 .\n?x1 wdt:P108 wd:Q847743 .\n?x1 wdt:P27 wd:Q30 .\nFILTER ( ?x0 != wd:Q5112102 ) .\nwd:Q946478 wdt:P57 ?x1 .\nwd:Q946478 wdt:P58 ?x0\n}",
        "questionWithBrackets": "Was [Filth and Wisdom] directed by [Dunkin'] 's American employee and written by [Christopher Ciccone] 's female sibling"
    },
    {
        "questionIdx": 69098,
        "questionPatternModEntities": "Was M2 directed by M3 and M4 and written by a male sibling of M0",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] and [entity] and [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M0 ) .\nM2 P2 ?x0 .\nM2 P3 M3 .\nM2 P3 M4\n}",
        "recursionDepth": 38,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P21 wd:Q6581097 .\n?x0 wdt:P3373 wd:Q104373781 .\nFILTER ( ?x0 != wd:Q104373781 ) .\nwd:Q7735260 wdt:P57 wd:Q53015 .\nwd:Q7735260 wdt:P57 wd:Q2071 .\nwd:Q7735260 wdt:P58 ?x0\n}",
        "questionWithBrackets": "Was [The French as Seen By...] directed by [Luigi Comencini] and [David Lynch] and written by a male sibling of [John Lynch]"
    },
    {
        "questionIdx": 69104,
        "questionPatternModEntities": "Was M0 edited by M5 , M6 , and M7 , executive produced by M1 , M2 , and M3 , and written by M4",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] , [entity] , and [entity] , [VP_SIMPLE] by [entity] , [entity] , and [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P0 M3 .\nM0 P1 M4 .\nM0 P2 M5 .\nM0 P2 M6 .\nM0 P2 M7\n}",
        "recursionDepth": 47,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q329316 wdt:P1040 wd:Q19545136 .\nwd:Q329316 wdt:P1040 wd:Q28790143 .\nwd:Q329316 wdt:P1040 wd:Q28797815 .\nwd:Q329316 wdt:P1431 wd:Q1072843 .\nwd:Q329316 wdt:P1431 wd:Q2165499 .\nwd:Q329316 wdt:P1431 wd:Q16028524 .\nwd:Q329316 wdt:P58 wd:Q28796709\n}",
        "questionWithBrackets": "Was [The Black Cauldron] edited by [James Koford] , [Armetta Jackson-Hamlett] , and [James Melton] , executive produced by [Don Hahn] , [Edward Hansen] , and [Ron W. Miller] , and written by [Roy Morita]"
    },
    {
        "questionIdx": 69112,
        "questionPatternModEntities": "Was M0 edited by M5 and M6 , edited by M7 , and executive produced by M1 , M2 , M3 , and M4",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] and [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity] , [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P0 M3 .\nM0 P0 M4 .\nM0 P1 M5 .\nM0 P1 M6 .\nM0 P1 M7\n}",
        "recursionDepth": 47,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q106182 wdt:P1040 wd:Q2347669 .\nwd:Q106182 wdt:P1040 wd:Q2704409 .\nwd:Q106182 wdt:P1040 wd:Q6397505 .\nwd:Q106182 wdt:P1431 wd:Q545394 .\nwd:Q106182 wdt:P1431 wd:Q6811130 .\nwd:Q106182 wdt:P1431 wd:Q262130 .\nwd:Q106182 wdt:P1431 wd:Q181900\n}",
        "questionWithBrackets": "Was [X-Men] edited by [John Wright] and [Kevin Stitt] , edited by [Steven Rosenblum] , and executive produced by [Stan Lee] , [Avi Arad] , [Tom DeSanto] , and [Richard Donner]"
    },
    {
        "questionIdx": 69117,
        "questionPatternModEntities": "Was M1 edited by M3 and M4 , executive produced by M2 , directed by M5 , and directed by M0 's employee",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] and [entity] , [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 M2 .\nM1 P2 M3 .\nM1 P2 M4 .\nM1 P3 ?x0 .\nM1 P3 M5\n}",
        "recursionDepth": 50,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P108 wd:Q49210 .\nwd:Q1137372 wdt:P57 ?x0 .\nwd:Q1137372 wdt:P57 wd:Q549956 .\nwd:Q1137372 wdt:P1040 wd:Q541143 .\nwd:Q1137372 wdt:P1040 wd:Q273379 .\nwd:Q1137372 wdt:P1431 wd:Q3772\n}",
        "questionWithBrackets": "Was [Four Rooms] edited by [Sally Menke] and [Terry Rawlings] , executive produced by [Quentin Tarantino] , directed by [Alexandre Rockwell] , and directed by [New York University] 's employee"
    },
    {
        "questionIdx": 69120,
        "questionPatternModEntities": "Was M0 edited by M3 , edited by M4 , executive produced by M1 and M2 , and directed by M5",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] and [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P1 M3 .\nM0 P1 M4 .\nM0 P2 M5\n}",
        "recursionDepth": 46,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q548919 wdt:P57 wd:Q295463 .\nwd:Q548919 wdt:P1040 wd:Q16225548 .\nwd:Q548919 wdt:P1040 wd:Q1138711 .\nwd:Q548919 wdt:P1431 wd:Q37175 .\nwd:Q548919 wdt:P1431 wd:Q5386431\n}",
        "questionWithBrackets": "Was [The Lone Ranger] edited by [Craig Wood] , edited by [James Haygood] , executive produced by [Johnny Depp] and [Eric Ellenbogen] , and directed by [Gore Verbinski]"
    },
    {
        "questionIdx": 69146,
        "questionPatternModEntities": "Was M0 executive produced by M1 and M2 , written by M4 , executive produced by M3 , and written by M5",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] and [entity] , [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P0 M3 .\nM0 P1 M4 .\nM0 P1 M5\n}",
        "recursionDepth": 47,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q90340902 wdt:P1431 wd:Q76 .\nwd:Q90340902 wdt:P1431 wd:Q63940538 .\nwd:Q90340902 wdt:P1431 wd:Q22115301 .\nwd:Q90340902 wdt:P58 wd:Q89738028 .\nwd:Q90340902 wdt:P58 wd:Q90341521\n}",
        "questionWithBrackets": "Was [Crip Camp] executive produced by [Barack Obama] and [Howard Gertler] , written by [James LeBrecht] , executive produced by [Tonia Davis] , and written by [Nicole Newnham]"
    },
    {
        "questionIdx": 69152,
        "questionPatternModEntities": "Was M0 executive produced by M1 , edited by M2 , directed by M4 and M5 , and edited by M3",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] and [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M2 .\nM0 P1 M3 .\nM0 P2 M4 .\nM0 P2 M5\n}",
        "recursionDepth": 46,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q2875 wdt:P57 wd:Q56014 .\nwd:Q2875 wdt:P57 wd:Q62503 .\nwd:Q2875 wdt:P1040 wd:Q1192220 .\nwd:Q2875 wdt:P1040 wd:Q1680316 .\nwd:Q2875 wdt:P1431 wd:Q72291\n}",
        "questionWithBrackets": "Was [Gone with the Wind] executive produced by [David O. Selznick] , edited by [James E. Newcom] , directed by [George Cukor] and [Victor Fleming] , and edited by [Hal C. Kern]"
    },
    {
        "questionIdx": 69156,
        "questionPatternModEntities": "Was M1 executive produced by M0 's spouse , edited by M4 and M5 , and executive produced by M2 and M3",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] , [VP_SIMPLE] by [entity] and [entity] , and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nM1 P1 ?x0 .\nM1 P1 M2 .\nM1 P1 M3 .\nM1 P2 M4 .\nM1 P2 M5\n}",
        "recursionDepth": 46,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P26 wd:Q20971283 .\nFILTER ( ?x0 != wd:Q20971283 ) .\nwd:Q548919 wdt:P1040 wd:Q16225548 .\nwd:Q548919 wdt:P1040 wd:Q1138711 .\nwd:Q548919 wdt:P1431 ?x0 .\nwd:Q548919 wdt:P1431 wd:Q5386431 .\nwd:Q548919 wdt:P1431 wd:Q37175\n}",
        "questionWithBrackets": "Was [The Lone Ranger] executive produced by [Lori Anne Allison] 's spouse , edited by [Craig Wood] and [James Haygood] , and executive produced by [Johnny Depp] and [Eric Ellenbogen]"
    },
    {
        "questionIdx": 69162,
        "questionPatternModEntities": "Was M0 executive produced by M1 and M2 , written by M3 and M4 , and written by M5 and M6",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] and [entity] , [VP_SIMPLE] by [entity] and [entity] , and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P1 M3 .\nM0 P1 M4 .\nM0 P1 M5 .\nM0 P1 M6\n}",
        "recursionDepth": 45,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q22350906 wdt:P1431 wd:Q8877 .\nwd:Q22350906 wdt:P1431 wd:Q549570 .\nwd:Q22350906 wdt:P58 wd:Q28855446 .\nwd:Q22350906 wdt:P58 wd:Q3306897 .\nwd:Q22350906 wdt:P58 wd:Q28846433 .\nwd:Q22350906 wdt:P58 wd:Q28753838\n}",
        "questionWithBrackets": "Was [Tummy Trouble] executive produced by [Steven Spielberg] and [Frank Marshall] , written by [Patrick A. Ventura] and [Bill Kopp] , and written by [Mark Kausler] and [Kevin Harkey]"
    },
    {
        "questionIdx": 69165,
        "questionPatternModEntities": "Was M0 executive produced by M1 , M2 , and M3 , edited by M4 , and edited by M5 , M6 , and M7",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] , [entity] , and [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P0 M3 .\nM0 P1 M4 .\nM0 P1 M5 .\nM0 P1 M6 .\nM0 P1 M7\n}",
        "recursionDepth": 47,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q20630763 wdt:P1040 wd:Q20722013 .\nwd:Q20630763 wdt:P1040 wd:Q20722014 .\nwd:Q20630763 wdt:P1040 wd:Q20722018 .\nwd:Q20630763 wdt:P1040 wd:Q20722019 .\nwd:Q20630763 wdt:P1431 wd:Q350405 .\nwd:Q20630763 wdt:P1431 wd:Q20722010 .\nwd:Q20630763 wdt:P1431 wd:Q20722012\n}",
        "questionWithBrackets": "Was [The Yes Men Are Revolting] executive produced by [Adam McKay] , [Alan Hayling] , and [Alex Cooke] , edited by [Todd Woody Richman] , and edited by [Geraud Brisson] , [Steven Simone-Friedland] , and [Claire L. Chandler]"
    },
    {
        "questionIdx": 69191,
        "questionPatternModEntities": "Was M0 produced by M4 , edited by M5 , M6 , and M7 , and executive produced by M1 , M2 , and M3",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , [entity] , and [entity] , and [VP_SIMPLE] by [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P0 M3 .\nM0 P1 M4 .\nM0 P2 M5 .\nM0 P2 M6 .\nM0 P2 M7\n}",
        "recursionDepth": 47,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q20630763 wdt:P1040 wd:Q20722016 .\nwd:Q20630763 wdt:P1040 wd:Q20722014 .\nwd:Q20630763 wdt:P1040 wd:Q20722019 .\nwd:Q20630763 wdt:P1431 wd:Q350405 .\nwd:Q20630763 wdt:P1431 wd:Q20722010 .\nwd:Q20630763 wdt:P1431 wd:Q20722012 .\nwd:Q20630763 wdt:P162|wdt:P272 wd:Q3159997\n}",
        "questionWithBrackets": "Was [The Yes Men Are Revolting] produced by [Jacques Servin] , edited by [S\u00f8ren B. Ebbe] , [Claire L. Chandler] , and [Steven Simone-Friedland] , and executive produced by [Alex Cooke] , [Alan Hayling] , and [Adam McKay]"
    },
    {
        "questionIdx": 69192,
        "questionPatternModEntities": "Was M0 produced by M4 , executive produced by M1 , directed by M5 , and executive produced by M2 and M3",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P0 M3 .\nM0 P1 M4 .\nM0 P2 M5\n}",
        "recursionDepth": 47,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q19798744 wdt:P57 wd:Q13499404 .\nwd:Q19798744 wdt:P1431 wd:Q35332 .\nwd:Q19798744 wdt:P1431 wd:Q5249738 .\nwd:Q19798744 wdt:P1431 wd:Q289380 .\nwd:Q19798744 wdt:P162|wdt:P272 wd:Q22075534\n}",
        "questionWithBrackets": "Was [The OA] produced by [Michael Sugar] , executive produced by [Brad Pitt] , directed by [Zal Batmanglij] , and executive produced by [Brit Marling] and [Dede Gardner]"
    },
    {
        "questionIdx": 69200,
        "questionPatternModEntities": "Was M0 written by M3 , edited by M5 , executive produced by M1 and M2 , and written by M4",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] and [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P1 M3 .\nM0 P1 M4 .\nM0 P2 M5\n}",
        "recursionDepth": 46,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q102244 wdt:P1040 wd:Q977704 .\nwd:Q102244 wdt:P1431 wd:Q75079 .\nwd:Q102244 wdt:P1431 wd:Q1900360 .\nwd:Q102244 wdt:P58 wd:Q34660 .\nwd:Q102244 wdt:P58 wd:Q362061\n}",
        "questionWithBrackets": "Was [Harry Potter and the Chamber of Secrets] written by [J. K. Rowling] , edited by [Peter Honess] , executive produced by [Chris Columbus] and [Mark Radcliffe] , and written by [Steve Kloves]"
    },
    {
        "questionIdx": 69208,
        "questionPatternModEntities": "Was M1 written by M2 , M3 , and M4 , edited by M5 and M6 , and written by M0 's employee",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] , [entity] , and [entity] , [VP_SIMPLE] by [entity] and [entity] , and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 ?x0 .\nM1 P1 M2 .\nM1 P1 M3 .\nM1 P1 M4 .\nM1 P2 M5 .\nM1 P2 M6\n}",
        "recursionDepth": 47,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P108 wd:Q49210 .\nwd:Q603857 wdt:P1040 wd:Q55211 .\nwd:Q603857 wdt:P1040 wd:Q55215 .\nwd:Q603857 wdt:P58 ?x0 .\nwd:Q603857 wdt:P58 wd:Q295093 .\nwd:Q603857 wdt:P58 wd:Q55238 .\nwd:Q603857 wdt:P58 wd:Q432709\n}",
        "questionWithBrackets": "Was [11'09\"01 September 11] written by [Claude Lelouch] , [Samira Makhmalbaf] , and [Ken Loach] , edited by [Alejandro Gonz\u00e1lez I\u00f1\u00e1rritu] and [Mohsen Makhmalbaf] , and written by [New York University] 's employee"
    },
    {
        "questionIdx": 69210,
        "questionPatternModEntities": "Was M1 written by M5 , executive produced by M2 , M3 , and M4 , and directed by M0 's employee",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , [entity] , and [entity] , and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 M2 .\nM1 P1 M3 .\nM1 P1 M4 .\nM1 P2 M5 .\nM1 P3 ?x0\n}",
        "recursionDepth": 44,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P108 wd:Q182950 .\nwd:Q699835 wdt:P57 ?x0 .\nwd:Q699835 wdt:P1431 wd:Q55400 .\nwd:Q699835 wdt:P1431 wd:Q237207 .\nwd:Q699835 wdt:P1431 wd:Q549570 .\nwd:Q699835 wdt:P58 wd:Q11368627\n}",
        "questionWithBrackets": "Was [Arrietty] written by [Keiko Niwa] , executive produced by [Kathleen Kennedy] , [Frank Marshall] , and [Hayao Miyazaki] , and directed by [Studio Ghibli] 's employee"
    },
    {
        "questionIdx": 69212,
        "questionPatternModEntities": "Was M0 written by M2 , edited by M3 , executive produced by M1 , and edited by M4 and M5",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M2 .\nM0 P2 M3 .\nM0 P2 M4 .\nM0 P2 M5\n}",
        "recursionDepth": 46,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q1740171 wdt:P1040 wd:Q7820333 .\nwd:Q1740171 wdt:P1040 wd:Q15835006 .\nwd:Q1740171 wdt:P1040 wd:Q614630 .\nwd:Q1740171 wdt:P1431 wd:Q56094 .\nwd:Q1740171 wdt:P58 wd:Q134456\n}",
        "questionWithBrackets": "Was [Mishima: A Life in Four Chapters] written by [Yukio Mishima] , edited by [Tomoyo \u014cshima] , executive produced by [Francis Ford Coppola] , and edited by [Michael Chandler] and [Michael Chandler]"
    },
    {
        "questionIdx": 69242,
        "questionPatternModEntities": "Was M0 's prequel executive produced by M1 , directed by M3 , written by M2 , and directed by M4",
        "questionTemplate": "Was [entity] 's [ROLE_SIMPLE] [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P2 M2 .\n?x0 P3 M3 .\n?x0 P3 M4\n}",
        "recursionDepth": 46,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P57 wd:Q446427 .\n?x0 wdt:P57 wd:Q1117163 .\n?x0 wdt:P1431 wd:Q72291 .\n?x0 wdt:P156 wd:Q127632 .\n?x0 wdt:P58 wd:Q271824\n}",
        "questionWithBrackets": "Was [The Son of Kong] 's prequel executive produced by [David O. Selznick] , directed by [Merian C. Cooper] , written by [Edgar Wallace] , and directed by [Ernest B. Schoedsack]"
    },
    {
        "questionIdx": 69244,
        "questionPatternModEntities": "Was M0 's prequel written by M1 , M2 , and M3",
        "questionTemplate": "Was [entity] 's [ROLE_SIMPLE] [VP_SIMPLE] by [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\n?x0 P1 M3\n}",
        "recursionDepth": 23,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P156 wd:Q21203766 .\n?x0 wdt:P58 wd:Q4465 .\n?x0 wdt:P58 wd:Q116854 .\n?x0 wdt:P58 wd:Q116861\n}",
        "questionWithBrackets": "Was [Kong: Skull Island] 's prequel written by [Philippa Boyens] , [Fran Walsh] , and [Peter Jackson]"
    },
    {
        "questionIdx": 69247,
        "questionPatternModEntities": "Was M0 's prequel written by and directed by M1 , M2 , M3 , and M4",
        "questionTemplate": "Was [entity] 's [ROLE_SIMPLE] [VP_SIMPLE] by and [VP_SIMPLE] by [entity] , [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\n?x0 P1 M3 .\n?x0 P1 M4 .\n?x0 P2 M1 .\n?x0 P2 M2 .\n?x0 P2 M3 .\n?x0 P2 M4\n}",
        "recursionDepth": 34,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P57 wd:Q382387 .\n?x0 wdt:P57 wd:Q3527989 .\n?x0 wdt:P57 wd:Q2638166 .\n?x0 wdt:P57 wd:Q3961130 .\n?x0 wdt:P156 wd:Q18207699 .\n?x0 wdt:P58 wd:Q382387 .\n?x0 wdt:P58 wd:Q3527989 .\n?x0 wdt:P58 wd:Q2638166 .\n?x0 wdt:P58 wd:Q3961130\n}",
        "questionWithBrackets": "Was [ABCs of Death 2] 's prequel written by and directed by [Noboru Iguchi] , [Ti West] , [Simon Rumley] , and [Nacho Vigalondo]"
    },
    {
        "questionIdx": 69248,
        "questionPatternModEntities": "Was M0 edited by M1 , M2 , M3 , and M4",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] , [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P0 M3 .\nM0 P0 M4\n}",
        "recursionDepth": 22,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q17738 wdt:P1040 wd:Q38222 .\nwd:Q17738 wdt:P1040 wd:Q429973 .\nwd:Q17738 wdt:P1040 wd:Q463119 .\nwd:Q17738 wdt:P1040 wd:Q542167\n}",
        "questionWithBrackets": "Was [Star Wars: Episode IV \u2013 A New Hope] edited by [Richard Chew] , [Marcia Lucas] , [George Lucas] , and [Paul Hirsch]"
    },
    {
        "questionIdx": 69291,
        "questionPatternModEntities": "Was M0 M1 's German sibling",
        "questionTemplate": "Was [entity] [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\nFILTER ( M0 != M1 ) .\nM0 P0 M1 .\nM0 P1 M2\n}",
        "recursionDepth": 16,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nFILTER ( wd:Q37134 != wd:Q87916 ) .\nwd:Q37134 wdt:P27 wd:Q183 .\nwd:Q37134 wdt:P3373 wd:Q87916\n}",
        "questionWithBrackets": "Was [Frederick William III of Prussia] [Countess Julie von Brandenburg] 's German sibling"
    },
    {
        "questionIdx": 69297,
        "questionPatternModEntities": "Was M1 's spouse M0 's spouse , sibling , and parent",
        "questionTemplate": "Was [entity] 's [ROLE_SIMPLE] [entity] 's [ROLE_SIMPLE] , [ROLE_SIMPLE] , and [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M0 .\n?x0 P2 M0 .\n?x0 P2 M1 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x0 != M1 )\n}",
        "recursionDepth": 24,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q443473 .\n?x0 wdt:P3373 wd:Q443473 .\n?x0 wdt:P26 wd:Q443473 .\n?x0 wdt:P26 wd:Q210535 .\nFILTER ( ?x0 != wd:Q443473 ) .\nFILTER ( ?x0 != wd:Q443473 ) .\nFILTER ( ?x0 != wd:Q210535 )\n}",
        "questionWithBrackets": "Was [Nefertarilllala] 's spouse [Henutmire] 's spouse , sibling , and parent"
    },
    {
        "questionIdx": 69309,
        "questionPatternModEntities": "Was M2 's Chinese spouse M0",
        "questionTemplate": "Was [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nFILTER ( M0 != M2 ) .\nM0 P0 M1 .\nM0 P1 M2\n}",
        "recursionDepth": 16,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nFILTER ( wd:Q197261 != wd:Q270165 ) .\nwd:Q197261 wdt:P27 wd:Q148 .\nwd:Q197261 wdt:P26 wd:Q270165\n}",
        "questionWithBrackets": "Was [Tian Qing] 's Chinese spouse [Zhang Nan]"
    },
    {
        "questionIdx": 69311,
        "questionPatternModEntities": "Was M1 M0 's employee 's sibling",
        "questionTemplate": "Was [entity] [entity] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( M1 != ?x0 ) .\nM1 P1 ?x0\n}",
        "recursionDepth": 15,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P108 wd:Q37230 .\nFILTER ( wd:Q10290844 != ?x0 ) .\nwd:Q10290844 wdt:P3373 ?x0\n}",
        "questionWithBrackets": "Was [Graem Bauer] [Central Intelligence Agency] 's employee 's sibling"
    },
    {
        "questionIdx": 69314,
        "questionPatternModEntities": "Was M0 's spouse 's spouse and parent M1",
        "questionTemplate": "Was [entity] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE] and [ROLE_SIMPLE] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( M1 != ?x0 ) .\nM1 P0 ?x0 .\nM1 P1 ?x0\n}",
        "recursionDepth": 20,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P26 wd:Q79999 .\nFILTER ( ?x0 != wd:Q79999 ) .\nFILTER ( wd:Q12656482 != ?x0 ) .\nwd:Q12656482 wdt:P40|wdt:P355 ?x0 .\nwd:Q12656482 wdt:P26 ?x0\n}",
        "questionWithBrackets": "Was [Uranus] 's spouse 's spouse and parent [Hydros]"
    },
    {
        "questionIdx": 69316,
        "questionPatternModEntities": "Was M0 M4 's Swedish Italian male spouse",
        "questionTemplate": "Was [entity] [entity] 's [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\nFILTER ( M0 != M4 ) .\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P1 M3 .\nM0 P2 M4\n}",
        "recursionDepth": 26,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nFILTER ( wd:Q376652 != wd:Q3289531 ) .\nwd:Q376652 wdt:P21 wd:Q6581097 .\nwd:Q376652 wdt:P27 wd:Q38 .\nwd:Q376652 wdt:P27 wd:Q34 .\nwd:Q376652 wdt:P26 wd:Q3289531\n}",
        "questionWithBrackets": "Was [Lou Castel] [Marcella Michelangeli] 's Swedish Italian male spouse"
    },
    {
        "questionIdx": 69317,
        "questionPatternModEntities": "Was M0 directed by and edited by M1 and M2",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P1 M1 .\nM0 P1 M2\n}",
        "recursionDepth": 24,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q3228039 wdt:P57 wd:Q53001 .\nwd:Q3228039 wdt:P57 wd:Q604362 .\nwd:Q3228039 wdt:P1040 wd:Q53001 .\nwd:Q3228039 wdt:P1040 wd:Q604362\n}",
        "questionWithBrackets": "Was [Wind from the East] directed by and edited by [Jean-Luc Godard] and [Jean-Pierre Gorin]"
    },
    {
        "questionIdx": 69491,
        "questionPatternModEntities": "Was M2 founded by M0 's female employee and founded by M3",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nM2 P2 ?x0 .\nM2 P2 M3\n}",
        "recursionDepth": 32,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P108 wd:Q26882567 .\n?x0 wdt:P21 wd:Q6581072 .\nwd:Q1371235 wdt:P112 ?x0 .\nwd:Q1371235 wdt:P112 wd:Q567\n}",
        "questionWithBrackets": "Was [No label defined] founded by [No label defined] 's female employee and founded by [Angela Merkel]"
    },
    {
        "questionIdx": 69512,
        "questionPatternModEntities": "Was M0 's Japanese employee 's female parent M2",
        "questionTemplate": "Was [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nM2 P2 M3 .\nM2 P3 ?x0\n}",
        "recursionDepth": 25,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P108 wd:Q276599 .\n?x0 wdt:P27 wd:Q17 .\nwd:Q11534122 wdt:P40|wdt:P355 ?x0 .\nwd:Q11534122 wdt:P21 wd:Q6581072\n}",
        "questionWithBrackets": "Was [Kanazawa College of Art] 's Japanese employee 's female parent [Yanagi Kaneko]"
    },
    {
        "questionIdx": 69527,
        "questionPatternModEntities": "Was M0 directed by M7 , written by M1 and M2 , and edited by M3 , M4 , M5 , and M6",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] and [entity] , and [VP_SIMPLE] by [entity] , [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P1 M3 .\nM0 P1 M4 .\nM0 P1 M5 .\nM0 P1 M6 .\nM0 P2 M7\n}",
        "recursionDepth": 46,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q603857 wdt:P57 wd:Q55238 .\nwd:Q603857 wdt:P1040 wd:Q55211 .\nwd:Q603857 wdt:P1040 wd:Q541826 .\nwd:Q603857 wdt:P1040 wd:Q18021284 .\nwd:Q603857 wdt:P1040 wd:Q22074634 .\nwd:Q603857 wdt:P58 wd:Q432709 .\nwd:Q603857 wdt:P58 wd:Q44221\n}",
        "questionWithBrackets": "Was [11'09\"01 September 11] directed by [Ken Loach] , written by [Sean Penn] and [Samira Makhmalbaf] , and edited by [Mohsen Makhmalbaf] , [Jonathan Morris] , [Jay Cassidy] , and [Robert Duffy]"
    },
    {
        "questionIdx": 69534,
        "questionPatternModEntities": "Was M0 executive produced by M1",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1\n}",
        "recursionDepth": 13,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q72276 wdt:P1431 wd:Q2680\n}",
        "questionWithBrackets": "Was [A Good Day to Die Hard] executive produced by [Bruce Willis]"
    },
    {
        "questionIdx": 69556,
        "questionPatternModEntities": "Was M1 directed by M0 's actor",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 ?x0\n}",
        "recursionDepth": 16,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P453 wd:Q913318 .\nwd:Q15982923 wdt:P57 ?x0\n}",
        "questionWithBrackets": "Was [Man in Love] directed by [Terran] 's actor"
    },
    {
        "questionIdx": 69563,
        "questionPatternModEntities": "Was M1 directed by , written by , and executive produced by M0 's sibling",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nM1 P1 ?x0 .\nM1 P2 ?x0 .\nM1 P3 ?x0\n}",
        "recursionDepth": 31,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P3373 wd:Q104373781 .\nFILTER ( ?x0 != wd:Q104373781 ) .\nwd:Q2085 wdt:P57 ?x0 .\nwd:Q2085 wdt:P1431 ?x0 .\nwd:Q2085 wdt:P58 ?x0\n}",
        "questionWithBrackets": "Was [Twin Peaks] directed by , written by , and executive produced by [John Lynch] 's sibling"
    },
    {
        "questionIdx": 69567,
        "questionPatternModEntities": "Was M0 a Canadian Japanese female spouse of M4",
        "questionTemplate": "Was [entity] a [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nFILTER ( M0 != M4 ) .\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P1 M3 .\nM0 P2 M4\n}",
        "recursionDepth": 28,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nFILTER ( wd:Q214289 != wd:Q171998 ) .\nwd:Q214289 wdt:P21 wd:Q6581072 .\nwd:Q214289 wdt:P27 wd:Q17 .\nwd:Q214289 wdt:P27 wd:Q16 .\nwd:Q214289 wdt:P26 wd:Q171998\n}",
        "questionWithBrackets": "Was [Michelle Yeoh] a Canadian Japanese female spouse of [Jean Todt]"
    },
    {
        "questionIdx": 69578,
        "questionPatternModEntities": "Was M2 's Japanese spouse influenced by M0",
        "questionTemplate": "Was [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P2 M2 .\nFILTER ( ?x0 != M2 )\n}",
        "recursionDepth": 21,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P737 wd:Q7346 .\n?x0 wdt:P27 wd:Q17 .\n?x0 wdt:P26 wd:Q107424 .\nFILTER ( ?x0 != wd:Q107424 )\n}",
        "questionWithBrackets": "Was [Akiko Yano] 's Japanese spouse influenced by [John Coltrane]"
    },
    {
        "questionIdx": 69586,
        "questionPatternModEntities": "Was M1 's sibling 's sibling influenced by M0",
        "questionTemplate": "Was [entity] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE] [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x0 P1 M0 .\n?x1 P0 M1 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x1 != M1 )\n}",
        "recursionDepth": 20,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P737 wd:Q255 .\n?x0 wdt:P3373 ?x1 .\n?x1 wdt:P3373 wd:Q95404 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x1 != wd:Q95404 )\n}",
        "questionWithBrackets": "Was [Rebecka Mendelssohn] 's sibling 's sibling influenced by [Ludwig van Beethoven]"
    },
    {
        "questionIdx": 69612,
        "questionPatternModEntities": "Was M1 's sequel a prequel of M0",
        "questionTemplate": "Was [entity] 's [ROLE_SIMPLE] a [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1\n}",
        "recursionDepth": 17,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P155 wd:Q131964 .\n?x0 wdt:P156 wd:Q38\n}",
        "questionWithBrackets": "Was [Austrian Empire] 's sequel a prequel of [Italy]"
    },
    {
        "questionIdx": 69670,
        "questionPatternModEntities": "Was M1 a parent of M0 's employee",
        "questionTemplate": "Was [entity] a [ROLE_SIMPLE] of [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 ?x0\n}",
        "recursionDepth": 17,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P108 wd:Q95 .\nwd:Q588259 wdt:P40|wdt:P355 ?x0\n}",
        "questionWithBrackets": "Was [Hans Rosling] a parent of [Google] 's employee"
    },
    {
        "questionIdx": 69694,
        "questionPatternModEntities": "Was M2 written , directed , and produced by M0 's German sibling",
        "questionTemplate": "Was [entity] [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M0 ) .\nM2 P2 ?x0 .\nM2 P3 ?x0 .\nM2 P4 ?x0\n}",
        "recursionDepth": 33,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P27 wd:Q183 .\n?x0 wdt:P3373 wd:Q1891599 .\nFILTER ( ?x0 != wd:Q1891599 ) .\nwd:Q219188 wdt:P57 ?x0 .\nwd:Q219188 wdt:P162|wdt:P272 ?x0 .\nwd:Q219188 wdt:P58 ?x0\n}",
        "questionWithBrackets": "Was [Zombie Nation] written , directed , and produced by [Manuel Lommel] 's German sibling"
    },
    {
        "questionIdx": 69710,
        "questionPatternModEntities": "Was M2 directed by , edited by , produced by , and written by M0 's female employee",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nM2 P2 ?x0 .\nM2 P3 ?x0 .\nM2 P4 ?x0 .\nM2 P5 ?x0\n}",
        "recursionDepth": 41,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P108 wd:Q681250 .\n?x0 wdt:P21 wd:Q6581072 .\nwd:Q2493884 wdt:P57 ?x0 .\nwd:Q2493884 wdt:P1040 ?x0 .\nwd:Q2493884 wdt:P162|wdt:P272 ?x0 .\nwd:Q2493884 wdt:P58 ?x0\n}",
        "questionWithBrackets": "Was [The Gleaners and I] directed by , edited by , produced by , and written by [European Graduate School] 's female employee"
    },
    {
        "questionIdx": 69714,
        "questionPatternModEntities": "Was M0 edited , written , produced , and directed by M1",
        "questionTemplate": "Was [entity] [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1 .\nM0 P2 M1 .\nM0 P3 M1\n}",
        "recursionDepth": 29,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q854990 wdt:P57 wd:Q8006 .\nwd:Q854990 wdt:P1040 wd:Q8006 .\nwd:Q854990 wdt:P162|wdt:P272 wd:Q8006 .\nwd:Q854990 wdt:P58 wd:Q8006\n}",
        "questionWithBrackets": "Was [Kagemusha] edited , written , produced , and directed by [Akira Kurosawa]"
    },
    {
        "questionIdx": 69847,
        "questionPatternModEntities": "Was M0 directed , edited , produced , and executive produced by M1",
        "questionTemplate": "Was [entity] [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1 .\nM0 P2 M1 .\nM0 P3 M1\n}",
        "recursionDepth": 30,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q17738 wdt:P57 wd:Q38222 .\nwd:Q17738 wdt:P1040 wd:Q38222 .\nwd:Q17738 wdt:P1431 wd:Q38222 .\nwd:Q17738 wdt:P162|wdt:P272 wd:Q38222\n}",
        "questionWithBrackets": "Was [Star Wars: Episode IV \u2013 A New Hope] directed , edited , produced , and executive produced by [George Lucas]"
    },
    {
        "questionIdx": 69885,
        "questionPatternModEntities": "Was M5 founded by a employee of M0 , M1 , M2 , M3 , and M4 and founded by M6",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity] , [entity] , [entity] , [entity] , and [entity] and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P0 M3 .\n?x0 P0 M4 .\nM5 P1 ?x0 .\nM5 P1 M6\n}",
        "recursionDepth": 42,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P108 wd:Q7095994 .\n?x0 wdt:P108 wd:Q7432436 .\n?x0 wdt:P108 wd:Q42944 .\n?x0 wdt:P108 wd:Q49108 .\n?x0 wdt:P108 wd:Q7204713 .\nwd:Q37033 wdt:P112 ?x0 .\nwd:Q37033 wdt:P112 wd:Q80\n}",
        "questionWithBrackets": "Was [World Wide Web Consortium] founded by a employee of [Plessey] , [CERN] , [Massachusetts Institute of Technology] , [School of Electronics and Computer Science, University of Southampton] , and [Open Data Institute] and founded by [Tim Berners-Lee]"
    },
    {
        "questionIdx": 69937,
        "questionPatternModEntities": "Was M1 directed by , produced by , written by , edited by , and executive produced by M0 's spouse",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nM1 P1 ?x0 .\nM1 P2 ?x0 .\nM1 P3 ?x0 .\nM1 P4 ?x0 .\nM1 P5 ?x0\n}",
        "recursionDepth": 43,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P26 wd:Q3032150 .\nFILTER ( ?x0 != wd:Q3032150 ) .\nwd:Q854990 wdt:P57 ?x0 .\nwd:Q854990 wdt:P1040 ?x0 .\nwd:Q854990 wdt:P1431 ?x0 .\nwd:Q854990 wdt:P162|wdt:P272 ?x0 .\nwd:Q854990 wdt:P58 ?x0\n}",
        "questionWithBrackets": "Was [Kagemusha] directed by , produced by , written by , edited by , and executive produced by [Y\u014dko Yaguchi] 's spouse"
    },
    {
        "questionIdx": 69941,
        "questionPatternModEntities": "Was M1 produced by , directed by , written by , edited by , and executive produced by M0 's spouse",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nM1 P1 ?x0 .\nM1 P2 ?x0 .\nM1 P3 ?x0 .\nM1 P4 ?x0 .\nM1 P5 ?x0\n}",
        "recursionDepth": 43,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P26 wd:Q3032150 .\nFILTER ( ?x0 != wd:Q3032150 ) .\nwd:Q854990 wdt:P57 ?x0 .\nwd:Q854990 wdt:P1040 ?x0 .\nwd:Q854990 wdt:P1431 ?x0 .\nwd:Q854990 wdt:P162|wdt:P272 ?x0 .\nwd:Q854990 wdt:P58 ?x0\n}",
        "questionWithBrackets": "Was [Kagemusha] produced by , directed by , written by , edited by , and executive produced by [Y\u014dko Yaguchi] 's spouse"
    },
    {
        "questionIdx": 69953,
        "questionPatternModEntities": "Was M1 directed by , edited by , executive produced by , written by , and produced by a spouse of M0",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nM1 P1 ?x0 .\nM1 P2 ?x0 .\nM1 P3 ?x0 .\nM1 P4 ?x0 .\nM1 P5 ?x0\n}",
        "recursionDepth": 45,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P26 wd:Q3032150 .\nFILTER ( ?x0 != wd:Q3032150 ) .\nwd:Q854990 wdt:P57 ?x0 .\nwd:Q854990 wdt:P1040 ?x0 .\nwd:Q854990 wdt:P1431 ?x0 .\nwd:Q854990 wdt:P162|wdt:P272 ?x0 .\nwd:Q854990 wdt:P58 ?x0\n}",
        "questionWithBrackets": "Was [Kagemusha] directed by , edited by , executive produced by , written by , and produced by a spouse of [Y\u014dko Yaguchi]"
    },
    {
        "questionIdx": 69955,
        "questionPatternModEntities": "Was M1 edited by , written by , executive produced by , directed by , and produced by a spouse of M0",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nM1 P1 ?x0 .\nM1 P2 ?x0 .\nM1 P3 ?x0 .\nM1 P4 ?x0 .\nM1 P5 ?x0\n}",
        "recursionDepth": 45,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P26 wd:Q3032150 .\nFILTER ( ?x0 != wd:Q3032150 ) .\nwd:Q854990 wdt:P57 ?x0 .\nwd:Q854990 wdt:P1040 ?x0 .\nwd:Q854990 wdt:P1431 ?x0 .\nwd:Q854990 wdt:P162|wdt:P272 ?x0 .\nwd:Q854990 wdt:P58 ?x0\n}",
        "questionWithBrackets": "Was [Kagemusha] edited by , written by , executive produced by , directed by , and produced by a spouse of [Y\u014dko Yaguchi]"
    },
    {
        "questionIdx": 69956,
        "questionPatternModEntities": "Was M1 edited , executive produced , produced , directed , and written by M0 's spouse",
        "questionTemplate": "Was [entity] [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nM1 P1 ?x0 .\nM1 P2 ?x0 .\nM1 P3 ?x0 .\nM1 P4 ?x0 .\nM1 P5 ?x0\n}",
        "recursionDepth": 39,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P26 wd:Q3032150 .\nFILTER ( ?x0 != wd:Q3032150 ) .\nwd:Q854990 wdt:P57 ?x0 .\nwd:Q854990 wdt:P1040 ?x0 .\nwd:Q854990 wdt:P1431 ?x0 .\nwd:Q854990 wdt:P162|wdt:P272 ?x0 .\nwd:Q854990 wdt:P58 ?x0\n}",
        "questionWithBrackets": "Was [Kagemusha] edited , executive produced , produced , directed , and written by [Y\u014dko Yaguchi] 's spouse"
    },
    {
        "questionIdx": 69963,
        "questionPatternModEntities": "Was M6 's spouse influenced by M0 , M1 , and M2 , influenced by M3 and M4 , and influenced by M5",
        "questionTemplate": "Was [entity] 's [ROLE_SIMPLE] [VP_SIMPLE] by [entity] , [entity] , and [entity] , [VP_SIMPLE] by [entity] and [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P0 M3 .\n?x0 P0 M4 .\n?x0 P0 M5 .\n?x0 P1 M6 .\nFILTER ( ?x0 != M6 )\n}",
        "recursionDepth": 47,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P737 wd:Q303 .\n?x0 wdt:P737 wd:Q1438730 .\n?x0 wdt:P737 wd:Q179257 .\n?x0 wdt:P737 wd:Q1744 .\n?x0 wdt:P737 wd:Q11975 .\n?x0 wdt:P737 wd:Q180453 .\n?x0 wdt:P26 wd:Q32045 .\nFILTER ( ?x0 != wd:Q32045 )\n}",
        "questionWithBrackets": "Was [Liam Hemsworth] 's spouse influenced by [Madonna] , [Timbaland] , and [Elvis Presley] , influenced by [OneRepublic] and [Dolly Parton] , and influenced by [Britney Spears]"
    },
    {
        "questionIdx": 69970,
        "questionPatternModEntities": "Was M0 a British actor of M2",
        "questionTemplate": "Was [entity] a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M2\n}",
        "recursionDepth": 18,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q17517279 wdt:P453 wd:Q24909033 .\nwd:Q17517279 wdt:P27 wd:Q145\n}",
        "questionWithBrackets": "Was [Ruby O'Donnell] a British actor of [Peri Lomax]"
    },
    {
        "questionIdx": 70025,
        "questionPatternModEntities": "Was M0 edited , produced , executive produced , and directed by M1",
        "questionTemplate": "Was [entity] [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1 .\nM0 P2 M1 .\nM0 P3 M1\n}",
        "recursionDepth": 30,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q854990 wdt:P57 wd:Q8006 .\nwd:Q854990 wdt:P1040 wd:Q8006 .\nwd:Q854990 wdt:P1431 wd:Q8006 .\nwd:Q854990 wdt:P162|wdt:P272 wd:Q8006\n}",
        "questionWithBrackets": "Was [Kagemusha] edited , produced , executive produced , and directed by [Akira Kurosawa]"
    },
    {
        "questionIdx": 70031,
        "questionPatternModEntities": "Was M0 produced by , directed by , edited by , and written by M1",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1 .\nM0 P2 M1 .\nM0 P3 M1\n}",
        "recursionDepth": 32,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q590570 wdt:P57 wd:Q25186 .\nwd:Q590570 wdt:P1040 wd:Q25186 .\nwd:Q590570 wdt:P162|wdt:P272 wd:Q25186 .\nwd:Q590570 wdt:P58 wd:Q25186\n}",
        "questionWithBrackets": "Was [Mala Noche] produced by , directed by , edited by , and written by [Gus Van Sant]"
    },
    {
        "questionIdx": 70103,
        "questionPatternModEntities": "Was M0 directed and executive produced by M1 , M2 , and M3",
        "questionTemplate": "Was [entity] [VP_SIMPLE] and [VP_SIMPLE] by [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P0 M3 .\nM0 P1 M1 .\nM0 P1 M2 .\nM0 P1 M3\n}",
        "recursionDepth": 27,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q497256 wdt:P57 wd:Q363666 .\nwd:Q497256 wdt:P57 wd:Q448604 .\nwd:Q497256 wdt:P57 wd:Q452794 .\nwd:Q497256 wdt:P1431 wd:Q363666 .\nwd:Q497256 wdt:P1431 wd:Q448604 .\nwd:Q497256 wdt:P1431 wd:Q452794\n}",
        "questionWithBrackets": "Was [Airplane!] directed and executive produced by [Jerry Zucker] , [David Zucker] , and [Jim Abrahams]"
    },
    {
        "questionIdx": 70196,
        "questionPatternModEntities": "Was M2 directed by and executive produced by a female sibling of M0",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by and [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M0 ) .\nM2 P2 ?x0 .\nM2 P3 ?x0\n}",
        "recursionDepth": 32,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P21 wd:Q6581072 .\n?x0 wdt:P3373 wd:Q70473487 .\nFILTER ( ?x0 != wd:Q70473487 ) .\nwd:Q862515 wdt:P57 ?x0 .\nwd:Q862515 wdt:P1431 ?x0\n}",
        "questionWithBrackets": "Was [A Very Gaga Thanksgiving] directed by and executive produced by a female sibling of [Natali Germanotta]"
    },
    {
        "questionIdx": 70197,
        "questionPatternModEntities": "Was M0 directed by M2 , M3 , M4 , and M5 , produced by M1 , and directed by M6 and M7",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] , [entity] , [entity] , and [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M2 .\nM0 P1 M3 .\nM0 P1 M4 .\nM0 P1 M5 .\nM0 P1 M6 .\nM0 P1 M7\n}",
        "recursionDepth": 46,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q943192 wdt:P57 wd:Q3525855 .\nwd:Q943192 wdt:P57 wd:Q280187 .\nwd:Q943192 wdt:P57 wd:Q1385379 .\nwd:Q943192 wdt:P57 wd:Q2549739 .\nwd:Q943192 wdt:P57 wd:Q3471034 .\nwd:Q943192 wdt:P57 wd:Q715807 .\nwd:Q943192 wdt:P162|wdt:P272 wd:Q7414\n}",
        "questionWithBrackets": "Was [Fantasia] directed by [James Algar] , [Norm Ferguson] , [Wilfred Jackson] , and [Ben Sharpsteen] , produced by [The Walt Disney Company] , and directed by [Samuel Armstrong] and [T. Hee]"
    },
    {
        "questionIdx": 70230,
        "questionPatternModEntities": "Was M1 written by , edited by , directed by , and produced by a spouse of M0",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nM1 P1 ?x0 .\nM1 P2 ?x0 .\nM1 P3 ?x0 .\nM1 P4 ?x0\n}",
        "recursionDepth": 38,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P26 wd:Q3032150 .\nFILTER ( ?x0 != wd:Q3032150 ) .\nwd:Q854990 wdt:P57 ?x0 .\nwd:Q854990 wdt:P1040 ?x0 .\nwd:Q854990 wdt:P162|wdt:P272 ?x0 .\nwd:Q854990 wdt:P58 ?x0\n}",
        "questionWithBrackets": "Was [Kagemusha] written by , edited by , directed by , and produced by a spouse of [Y\u014dko Yaguchi]"
    },
    {
        "questionIdx": 70309,
        "questionPatternModEntities": "Was M2 's Swedish spouse M0",
        "questionTemplate": "Was [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nFILTER ( M0 != M2 ) .\nM0 P0 M1 .\nM0 P1 M2\n}",
        "recursionDepth": 16,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nFILTER ( wd:Q45068 != wd:Q152308 ) .\nwd:Q45068 wdt:P27 wd:Q34 .\nwd:Q45068 wdt:P26 wd:Q152308\n}",
        "questionWithBrackets": "Was [Queen Silvia of Sweden] 's Swedish spouse [Carl XVI Gustaf of Sweden]"
    },
    {
        "questionIdx": 70391,
        "questionPatternModEntities": "Was M1 's sequel M0 's prequel",
        "questionTemplate": "Was [entity] 's [ROLE_SIMPLE] [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1\n}",
        "recursionDepth": 15,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P155 wd:Q1982358 .\n?x0 wdt:P156 wd:Q2406\n}",
        "questionWithBrackets": "Was [I'm Me] 's sequel [\u00bfD\u00f3nde Est\u00e1n Coraz\u00f3n?] 's prequel"
    },
    {
        "questionIdx": 70539,
        "questionPatternModEntities": "Was M4 M0 's Chinese Canadian female sibling 's sibling",
        "questionTemplate": "Was [entity] [entity] 's [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\n?x0 P2 M3 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( M4 != ?x0 ) .\nM4 P0 ?x0\n}",
        "recursionDepth": 30,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P21 wd:Q6581072 .\n?x0 wdt:P27 wd:Q148 .\n?x0 wdt:P27 wd:Q16 .\n?x0 wdt:P3373 wd:Q7712715 .\nFILTER ( ?x0 != wd:Q7712715 ) .\nFILTER ( wd:Q455691 != ?x0 ) .\nwd:Q455691 wdt:P3373 ?x0\n}",
        "questionWithBrackets": "Was [Josie Ho] [Sabrina Ho] 's Chinese Canadian female sibling 's sibling"
    },
    {
        "questionIdx": 70596,
        "questionPatternModEntities": "Was M0 executive produced , edited , produced , directed , and written by M1",
        "questionTemplate": "Was [entity] [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1 .\nM0 P2 M1 .\nM0 P3 M1 .\nM0 P4 M1\n}",
        "recursionDepth": 35,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q854990 wdt:P57 wd:Q8006 .\nwd:Q854990 wdt:P1040 wd:Q8006 .\nwd:Q854990 wdt:P1431 wd:Q8006 .\nwd:Q854990 wdt:P162|wdt:P272 wd:Q8006 .\nwd:Q854990 wdt:P58 wd:Q8006\n}",
        "questionWithBrackets": "Was [Kagemusha] executive produced , edited , produced , directed , and written by [Akira Kurosawa]"
    },
    {
        "questionIdx": 70597,
        "questionPatternModEntities": "Was M0 produced by , edited by , directed by , and executive produced by M1",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1 .\nM0 P2 M1 .\nM0 P3 M1\n}",
        "recursionDepth": 33,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q854990 wdt:P57 wd:Q8006 .\nwd:Q854990 wdt:P1040 wd:Q8006 .\nwd:Q854990 wdt:P1431 wd:Q8006 .\nwd:Q854990 wdt:P162|wdt:P272 wd:Q8006\n}",
        "questionWithBrackets": "Was [Kagemusha] produced by , edited by , directed by , and executive produced by [Akira Kurosawa]"
    },
    {
        "questionIdx": 70629,
        "questionPatternModEntities": "Was M0 executive produced by M1 , M2 , M3 , M4 , and M5 , written by M7 , and executive produced by M6",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] , [entity] , [entity] , [entity] , and [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P0 M3 .\nM0 P0 M4 .\nM0 P0 M5 .\nM0 P0 M6 .\nM0 P1 M7\n}",
        "recursionDepth": 47,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q2947967 wdt:P1431 wd:Q8877 .\nwd:Q2947967 wdt:P1431 wd:Q55602356 .\nwd:Q2947967 wdt:P1431 wd:Q7804237 .\nwd:Q2947967 wdt:P1431 wd:Q362793 .\nwd:Q2947967 wdt:P1431 wd:Q39829 .\nwd:Q2947967 wdt:P1431 wd:Q55601945 .\nwd:Q2947967 wdt:P58 wd:Q4133060\n}",
        "questionWithBrackets": "Was [Under the Dome] executive produced by [Stephen King] , [Jack Bender] , [Darryl Frank] , [Tim Schlattmann] , and [Justin Falvey] , written by [Rick Cleveland] , and executive produced by [Steven Spielberg]"
    },
    {
        "questionIdx": 70639,
        "questionPatternModEntities": "Was M1 directed by M0 's spouse , written by M2 , produced by M4 , and written by M3",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] , [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nM1 P1 M2 .\nM1 P1 M3 .\nM1 P2 M4 .\nM1 P3 ?x0\n}",
        "recursionDepth": 45,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P26 wd:Q117012 .\nFILTER ( ?x0 != wd:Q117012 ) .\nwd:Q901203 wdt:P57 ?x0 .\nwd:Q901203 wdt:P162|wdt:P272 wd:Q621231 .\nwd:Q901203 wdt:P58 wd:Q1203 .\nwd:Q901203 wdt:P58 wd:Q1299\n}",
        "questionWithBrackets": "Was [Magical Mystery Tour] directed by [Yoko Ono] 's spouse , written by [The Beatles] , produced by [Apple Corps] , and written by [John Lennon]"
    },
    {
        "questionIdx": 70681,
        "questionPatternModEntities": "Was M0 directed by M3 , executive produced by M1 , executive produced by M2 , and directed by M4 and M5",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P1 M3 .\nM0 P1 M4 .\nM0 P1 M5\n}",
        "recursionDepth": 47,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q60747802 wdt:P57 wd:Q21066699 .\nwd:Q60747802 wdt:P57 wd:Q2273145 .\nwd:Q60747802 wdt:P57 wd:Q6135721 .\nwd:Q60747802 wdt:P1431 wd:Q56005 .\nwd:Q60747802 wdt:P1431 wd:Q63111594\n}",
        "questionWithBrackets": "Was [Raised by Wolves] directed by [Luke Scott] , executive produced by [Adam Kolbrenner] , executive produced by [Ridley Scott] , and directed by [James Hawes] and [Sergio Mimica-Gezzan]"
    },
    {
        "questionIdx": 70686,
        "questionPatternModEntities": "Was M1 directed by M0 's employee , written by M2 , and written by M3 , M4 , M5 , and M6",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity] , [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 M2 .\nM1 P1 M3 .\nM1 P1 M4 .\nM1 P1 M5 .\nM1 P1 M6 .\nM1 P2 ?x0\n}",
        "recursionDepth": 46,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P108 wd:Q2302311 .\nwd:Q426432 wdt:P57 ?x0 .\nwd:Q426432 wdt:P58 wd:Q2673 .\nwd:Q426432 wdt:P58 wd:Q280490 .\nwd:Q426432 wdt:P58 wd:Q14202747 .\nwd:Q426432 wdt:P58 wd:Q18601256 .\nwd:Q426432 wdt:P58 wd:Q126941\n}",
        "questionWithBrackets": "Was [Walker, Texas Ranger] directed by [University of Nevada, Las Vegas] 's employee , written by [J. Michael Straczynski] , and written by [Albert S. Ruddy] , [Chuck Norris] , [Leigh Chapman] , and [Hannah Louise Shearer]"
    },
    {
        "questionIdx": 70713,
        "questionPatternModEntities": "Was M0 directed by and written by M1 , M2 , M3 , and M4",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by and [VP_SIMPLE] by [entity] , [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P0 M3 .\nM0 P0 M4 .\nM0 P1 M1 .\nM0 P1 M2 .\nM0 P1 M3 .\nM0 P1 M4\n}",
        "recursionDepth": 30,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q1079 wdt:P57 wd:Q4500 .\nwd:Q1079 wdt:P57 wd:Q7174311 .\nwd:Q1079 wdt:P57 wd:Q10307893 .\nwd:Q1079 wdt:P57 wd:Q15042700 .\nwd:Q1079 wdt:P58 wd:Q4500 .\nwd:Q1079 wdt:P58 wd:Q7174311 .\nwd:Q1079 wdt:P58 wd:Q10307893 .\nwd:Q1079 wdt:P58 wd:Q15042700\n}",
        "questionWithBrackets": "Was [Breaking Bad] directed by and written by [Peter Gould] , [Thomas Schnauz] , [Vince Gilligan] , and [John Shiban]"
    },
    {
        "questionIdx": 70745,
        "questionPatternModEntities": "Was M0 executive produced by M1 , directed by M3 , and executive produced by M2",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P1 M3\n}",
        "recursionDepth": 34,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q1916423 wdt:P57 wd:Q503767 .\nwd:Q1916423 wdt:P1431 wd:Q61881 .\nwd:Q1916423 wdt:P1431 wd:Q1277426\n}",
        "questionWithBrackets": "Was [The Cement Garden] executive produced by [Bernd Eichinger] , directed by [Andrew Birkin] , and executive produced by [Martin Moszkowicz]"
    },
    {
        "questionIdx": 70747,
        "questionPatternModEntities": "Was M0 executive produced by M1 and M2 , edited by M5 and M6 , and executive produced by M3 and M4",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] and [entity] , [VP_SIMPLE] by [entity] and [entity] , and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P0 M3 .\nM0 P0 M4 .\nM0 P1 M5 .\nM0 P1 M6\n}",
        "recursionDepth": 46,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q28196 wdt:P1040 wd:Q1909156 .\nwd:Q28196 wdt:P1040 wd:Q725026 .\nwd:Q28196 wdt:P1431 wd:Q28497 .\nwd:Q28196 wdt:P1431 wd:Q5233363 .\nwd:Q28196 wdt:P1431 wd:Q653159 .\nwd:Q28196 wdt:P1431 wd:Q7807248\n}",
        "questionWithBrackets": "Was [World War Z] executive produced by [Timothy Headington] and [David Ellison] , edited by [Roger Barton] and [Matt Chesse] , and executive produced by [Marc Forster] and [Graham King]"
    },
    {
        "questionIdx": 70762,
        "questionPatternModEntities": "Was M0 executive produced by M1 , directed by M3 , executive produced by M2 , and directed by M4 and M5",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P1 M3 .\nM0 P1 M4 .\nM0 P1 M5\n}",
        "recursionDepth": 47,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q60747802 wdt:P57 wd:Q2273145 .\nwd:Q60747802 wdt:P57 wd:Q21066699 .\nwd:Q60747802 wdt:P57 wd:Q98931722 .\nwd:Q60747802 wdt:P1431 wd:Q56005 .\nwd:Q60747802 wdt:P1431 wd:Q63111594\n}",
        "questionWithBrackets": "Was [Raised by Wolves] executive produced by [Adam Kolbrenner] , directed by [Sergio Mimica-Gezzan] , executive produced by [Ridley Scott] , and directed by [Alex Gabassi] and [Luke Scott]"
    },
    {
        "questionIdx": 70767,
        "questionPatternModEntities": "Was M1 executive produced by M2 , M3 , and M4 , directed by M5 , and written by M0 's spouse",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] , [entity] , and [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nM1 P1 M2 .\nM1 P1 M3 .\nM1 P1 M4 .\nM1 P2 ?x0 .\nM1 P3 M5\n}",
        "recursionDepth": 44,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P26 wd:Q238877 .\nFILTER ( ?x0 != wd:Q238877 ) .\nwd:Q101089777 wdt:P57 wd:Q717015 .\nwd:Q101089777 wdt:P1431 wd:Q44437 .\nwd:Q101089777 wdt:P1431 wd:Q7176746 .\nwd:Q101089777 wdt:P1431 wd:Q20680269 .\nwd:Q101089777 wdt:P58 ?x0\n}",
        "questionWithBrackets": "Was [Peacemaker] executive produced by [Peter Safran] , [John Cena] , and [Matthew Miller] , directed by [James Gunn] , and written by [Jenna Fischer] 's spouse"
    },
    {
        "questionIdx": 70778,
        "questionPatternModEntities": "Was M1 executive produced by M2 and M3 , written by M0 's parent , and directed by M4 and M5",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] and [entity] , [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] , and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 M2 .\nM1 P1 M3 .\nM1 P2 ?x0 .\nM1 P3 M4 .\nM1 P3 M5\n}",
        "recursionDepth": 45,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q291806 .\nwd:Q1137372 wdt:P57 wd:Q2838329 .\nwd:Q1137372 wdt:P57 wd:Q47284 .\nwd:Q1137372 wdt:P1431 wd:Q3772 .\nwd:Q1137372 wdt:P1431 wd:Q549956 .\nwd:Q1137372 wdt:P58 ?x0\n}",
        "questionWithBrackets": "Was [Four Rooms] executive produced by [Alexandre Rockwell] and [Quentin Tarantino] , written by [Tessa Dahl] 's parent , and directed by [Robert Rodriguez] and [Allison Anders]"
    },
    {
        "questionIdx": 70783,
        "questionPatternModEntities": "Was M0 executive produced by M1 , written by M2 and M3 , written by M4 , and edited by M5",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] and [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M2 .\nM0 P1 M3 .\nM0 P1 M4 .\nM0 P2 M5\n}",
        "recursionDepth": 46,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q22350906 wdt:P1040 wd:Q5295252 .\nwd:Q22350906 wdt:P1431 wd:Q8877 .\nwd:Q22350906 wdt:P58 wd:Q28846433 .\nwd:Q22350906 wdt:P58 wd:Q3306897 .\nwd:Q22350906 wdt:P58 wd:Q28753838\n}",
        "questionWithBrackets": "Was [Tummy Trouble] executive produced by [Steven Spielberg] , written by [Kevin Harkey] and [Mark Kausler] , written by [Bill Kopp] , and edited by [Donald W. Ernst]"
    },
    {
        "questionIdx": 70822,
        "questionPatternModEntities": "Was M0 written by M2 , written by M3 and M4 , executive produced by M1 , and produced by M5",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] and [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M2 .\nM0 P1 M3 .\nM0 P1 M4 .\nM0 P2 M5\n}",
        "recursionDepth": 46,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q725578 wdt:P1431 wd:Q8877 .\nwd:Q725578 wdt:P162|wdt:P272 wd:Q103646 .\nwd:Q725578 wdt:P58 wd:Q432598 .\nwd:Q725578 wdt:P58 wd:Q3128755 .\nwd:Q725578 wdt:P58 wd:Q6767587\n}",
        "questionWithBrackets": "Was [Cowboys & Aliens] written by [Hawk Ostby] , written by [Alex Kurtzman] and [Mark Fergus and Hawk Ostby] , executive produced by [Steven Spielberg] , and produced by [Ron Howard]"
    },
    {
        "questionIdx": 70841,
        "questionPatternModEntities": "Was M1 written by M2 and M3 , directed by M4 , directed by M0 's employee , and directed by M5",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] and [entity] , [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 M2 .\nM1 P1 M3 .\nM1 P2 ?x0 .\nM1 P2 M4 .\nM1 P2 M5\n}",
        "recursionDepth": 49,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P108 wd:Q49210 .\nwd:Q1137372 wdt:P57 ?x0 .\nwd:Q1137372 wdt:P57 wd:Q2838329 .\nwd:Q1137372 wdt:P57 wd:Q47284 .\nwd:Q1137372 wdt:P58 wd:Q3772 .\nwd:Q1137372 wdt:P58 wd:Q549956\n}",
        "questionWithBrackets": "Was [Four Rooms] written by [Alexandre Rockwell] and [Quentin Tarantino] , directed by [Robert Rodriguez] , directed by [New York University] 's employee , and directed by [Allison Anders]"
    },
    {
        "questionIdx": 70854,
        "questionPatternModEntities": "Was M1 written by M4 and M5 , executive produced by M2 and M3 , and written by a parent of M0",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] and [entity] , [VP_SIMPLE] by [entity] and [entity] , and [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 M2 .\nM1 P1 M3 .\nM1 P2 ?x0 .\nM1 P2 M4 .\nM1 P2 M5\n}",
        "recursionDepth": 47,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q4769572 .\nwd:Q1916423 wdt:P1431 wd:Q61881 .\nwd:Q1916423 wdt:P1431 wd:Q1277426 .\nwd:Q1916423 wdt:P58 ?x0 .\nwd:Q1916423 wdt:P58 wd:Q503767 .\nwd:Q1916423 wdt:P58 wd:Q190379\n}",
        "questionWithBrackets": "Was [The Cement Garden] written by [Ian McEwan] and [Andrew Birkin] , executive produced by [Martin Moszkowicz] and [Bernd Eichinger] , and written by a parent of [Anno Birkin]"
    },
    {
        "questionIdx": 70898,
        "questionPatternModEntities": "Was M6 's sequel executive produced by M0 , written by M1 , and edited by M2 , M3 , M4 , and M5",
        "questionTemplate": "Was [entity] 's [ROLE_SIMPLE] [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity] , [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P2 M2 .\n?x0 P2 M3 .\n?x0 P2 M4 .\n?x0 P2 M5 .\n?x0 P3 M6\n}",
        "recursionDepth": 47,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P1040 wd:Q16198328 .\n?x0 wdt:P1040 wd:Q4679987 .\n?x0 wdt:P1040 wd:Q4207234 .\n?x0 wdt:P1040 wd:Q1291210 .\n?x0 wdt:P1431 wd:Q18002667 .\n?x0 wdt:P155 wd:Q1359366 .\n?x0 wdt:P58 wd:Q60633865\n}",
        "questionWithBrackets": "Was [V/H/S] 's sequel executive produced by [Simon Barrett] , written by [Timo Tjahjanto] , and edited by [Gareth Evans] , [Adam Wingard] , [Jason Eisener] , and [Eduardo S\u00e1nchez]"
    },
    {
        "questionIdx": 70900,
        "questionPatternModEntities": "Was M5 's sequel executive produced by M0 , written by M1 , and edited by M2 , M3 , and M4",
        "questionTemplate": "Was [entity] 's [ROLE_SIMPLE] [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P2 M2 .\n?x0 P2 M3 .\n?x0 P2 M4 .\n?x0 P3 M5\n}",
        "recursionDepth": 44,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P1040 wd:Q974615 .\n?x0 wdt:P1040 wd:Q25853675 .\n?x0 wdt:P1040 wd:Q23409645 .\n?x0 wdt:P1431 wd:Q359311 .\n?x0 wdt:P155 wd:Q1049545 .\n?x0 wdt:P58 wd:Q16225521\n}",
        "questionWithBrackets": "Was [Clash of the Titans] 's sequel executive produced by [Richard D. Zanuck] , written by [Phil Hay] , and edited by [Vincent Tabaillon] , [David Freeman] , and [Martin Walsh]"
    },
    {
        "questionIdx": 70902,
        "questionPatternModEntities": "Was M5 's sequel produced by M4 , executive produced by M0 , and written by M1 , M2 , and M3",
        "questionTemplate": "Was [entity] 's [ROLE_SIMPLE] [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\n?x0 P1 M3 .\n?x0 P2 M4 .\n?x0 P3 M5\n}",
        "recursionDepth": 44,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P1431 wd:Q56094 .\n?x0 wdt:P155 wd:Q1133622 .\n?x0 wdt:P162|wdt:P272 wd:Q1348531 .\n?x0 wdt:P58 wd:Q44714205 .\n?x0 wdt:P58 wd:Q2032881 .\n?x0 wdt:P58 wd:Q879793\n}",
        "questionWithBrackets": "Was [Glassworks] 's sequel produced by [Godfrey Reggio] , executive produced by [Francis Ford Coppola] , and written by [Ron Fricke] , [Alton Walpole] , and [Michael Hoenig]"
    },
    {
        "questionIdx": 70949,
        "questionPatternModEntities": "Was M1 M0 's actor 's male spouse",
        "questionTemplate": "Was [entity] [entity] 's [ROLE_SIMPLE] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( M1 != ?x0 ) .\nM1 P1 M2 .\nM1 P2 ?x0\n}",
        "recursionDepth": 20,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P453 wd:Q222573 .\nFILTER ( wd:Q192482 != ?x0 ) .\nwd:Q192482 wdt:P21 wd:Q6581097 .\nwd:Q192482 wdt:P26 ?x0\n}",
        "questionWithBrackets": "Was [Telemachus] [femme fatale] 's actor 's male spouse"
    },
    {
        "questionIdx": 71001,
        "questionPatternModEntities": "Was M0 edited and written by M1 , M2 , M3 , and M4",
        "questionTemplate": "Was [entity] [VP_SIMPLE] and [VP_SIMPLE] by [entity] , [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P0 M3 .\nM0 P0 M4 .\nM0 P1 M1 .\nM0 P1 M2 .\nM0 P1 M3 .\nM0 P1 M4\n}",
        "recursionDepth": 29,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q74535 wdt:P1040 wd:Q5836844 .\nwd:Q74535 wdt:P1040 wd:Q4022902 .\nwd:Q74535 wdt:P1040 wd:Q4023328 .\nwd:Q74535 wdt:P1040 wd:Q5658534 .\nwd:Q74535 wdt:P58 wd:Q5836844 .\nwd:Q74535 wdt:P58 wd:Q4022902 .\nwd:Q74535 wdt:P58 wd:Q4023328 .\nwd:Q74535 wdt:P58 wd:Q5658534\n}",
        "questionWithBrackets": "Was [The ABCs of Death] edited and written by [Adri\u00e1n Garc\u00eda Bogliano] , [Y\u016bdai Yamaguchi] , [Ernesto D\u00edaz Espinoza] , and [Yoshihiro Nishimura]"
    },
    {
        "questionIdx": 71014,
        "questionPatternModEntities": "Was M0 's parent , spouse , and sibling M1 's sibling",
        "questionTemplate": "Was [entity] 's [ROLE_SIMPLE] , [ROLE_SIMPLE] , and [ROLE_SIMPLE] [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P1 M0 .\n?x0 P2 M0 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x0 != M1 )\n}",
        "recursionDepth": 24,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q443473 .\n?x0 wdt:P3373 wd:Q443473 .\n?x0 wdt:P3373 wd:Q273990 .\n?x0 wdt:P26 wd:Q443473 .\nFILTER ( ?x0 != wd:Q443473 ) .\nFILTER ( ?x0 != wd:Q443473 ) .\nFILTER ( ?x0 != wd:Q273990 )\n}",
        "questionWithBrackets": "Was [Henutmire] 's parent , spouse , and sibling [Princess Tia] 's sibling"
    },
    {
        "questionIdx": 71030,
        "questionPatternModEntities": "Was M0 's prequel executive produced by M1 and produced by M2",
        "questionTemplate": "Was [entity] 's [ROLE_SIMPLE] [VP_SIMPLE] by [entity] and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P2 M2\n}",
        "recursionDepth": 28,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P1431 wd:Q2808 .\n?x0 wdt:P162|wdt:P272 wd:Q1174489 .\n?x0 wdt:P156 wd:Q24904727\n}",
        "questionWithBrackets": "Was [Sherlock Gnomes] 's prequel executive produced by [Elton John] and produced by [David Furnish]"
    },
    {
        "questionIdx": 71055,
        "questionPatternModEntities": "Was M0 edited by M7 , executive produced by M1 , M2 , M3 , M4 , and M5 , and executive produced by M6",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , [entity] , [entity] , [entity] , and [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P0 M3 .\nM0 P0 M4 .\nM0 P0 M5 .\nM0 P0 M6 .\nM0 P1 M7\n}",
        "recursionDepth": 47,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q56275326 wdt:P1040 wd:Q11737407 .\nwd:Q56275326 wdt:P1431 wd:Q36159 .\nwd:Q56275326 wdt:P1431 wd:Q459933 .\nwd:Q56275326 wdt:P1431 wd:Q105298512 .\nwd:Q56275326 wdt:P1431 wd:Q6154581 .\nwd:Q56275326 wdt:P1431 wd:Q27899287 .\nwd:Q56275326 wdt:P1431 wd:Q229254\n}",
        "questionWithBrackets": "Was [Self Made: Inspired by the Life of Madam C. J. Walker] edited by [Kathryn Himoff] , executive produced by [Kasi Lemmons] , [Janine Sherman Barrois] , [Maverick Carter] , [Elle Johnson] , and [LeBron James] , and executive produced by [Octavia Spencer]"
    },
    {
        "questionIdx": 71058,
        "questionPatternModEntities": "Was M0 's Canadian sibling influenced by M1",
        "questionTemplate": "Was [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P2 M2 .\nFILTER ( ?x0 != M0 )\n}",
        "recursionDepth": 21,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P737 wd:Q296 .\n?x0 wdt:P27 wd:Q16 .\n?x0 wdt:P3373 wd:Q50822561 .\nFILTER ( ?x0 != wd:Q50822561 )\n}",
        "questionWithBrackets": "Was [Paul Beau] 's Canadian sibling influenced by [Claude Monet]"
    },
    {
        "questionIdx": 71083,
        "questionPatternModEntities": "Was M3 's female American spouse M0",
        "questionTemplate": "Was [entity] 's [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nFILTER ( M0 != M3 ) .\nM0 P0 M1 .\nM0 P1 M2 .\nM0 P2 M3\n}",
        "recursionDepth": 21,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nFILTER ( wd:Q4616 != wd:Q946783 ) .\nwd:Q4616 wdt:P21 wd:Q6581072 .\nwd:Q4616 wdt:P27 wd:Q30 .\nwd:Q4616 wdt:P26 wd:Q946783\n}",
        "questionWithBrackets": "Was [James Dougherty] 's female American spouse [Marilyn Monroe]"
    },
    {
        "questionIdx": 71099,
        "questionPatternModEntities": "Was M1 's spouse a actor of M0",
        "questionTemplate": "Was [entity] 's [ROLE_SIMPLE] a [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M1 )\n}",
        "recursionDepth": 17,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P453 wd:Q222573 .\n?x0 wdt:P26 wd:Q192482 .\nFILTER ( ?x0 != wd:Q192482 )\n}",
        "questionWithBrackets": "Was [Telemachus] 's spouse a actor of [femme fatale]"
    },
    {
        "questionIdx": 71136,
        "questionPatternModEntities": "Was M1 's employee M0 's American sibling",
        "questionTemplate": "Was [entity] 's [ROLE_SIMPLE] [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P2 M2 .\nFILTER ( ?x0 != M0 )\n}",
        "recursionDepth": 20,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P108 wd:Q8333 .\n?x0 wdt:P27 wd:Q30 .\n?x0 wdt:P3373 wd:Q2738 .\nFILTER ( ?x0 != wd:Q2738 )\n}",
        "questionWithBrackets": "Was [Federal Bureau of Investigation] 's employee [Fox Mulder] 's American sibling"
    },
    {
        "questionIdx": 71185,
        "questionPatternModEntities": "Was M2 's female spouse influenced by M0",
        "questionTemplate": "Was [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P2 M2 .\nFILTER ( ?x0 != M2 )\n}",
        "recursionDepth": 21,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P737 wd:Q859 .\n?x0 wdt:P21 wd:Q6581072 .\n?x0 wdt:P26 wd:Q71696 .\nFILTER ( ?x0 != wd:Q71696 )\n}",
        "questionWithBrackets": "Was [Heinrich Bl\u00fccher] 's female spouse influenced by [Plato]"
    },
    {
        "questionIdx": 71186,
        "questionPatternModEntities": "Was M2 M0 's female sibling 's female actor",
        "questionTemplate": "Was [entity] [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M0 ) .\nM2 P1 M1 .\nM2 P2 ?x0\n}",
        "recursionDepth": 25,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P21 wd:Q6581072 .\n?x0 wdt:P3373 wd:Q216605 .\nFILTER ( ?x0 != wd:Q216605 ) .\nwd:Q294975 wdt:P453 ?x0 .\nwd:Q294975 wdt:P21 wd:Q6581072\n}",
        "questionWithBrackets": "Was [Miranda Otto] [\u00c9omer] 's female sibling 's female actor"
    },
    {
        "questionIdx": 71190,
        "questionPatternModEntities": "Was M0 's Chinese employee influenced by M1",
        "questionTemplate": "Was [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P2 M2\n}",
        "recursionDepth": 21,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P737 wd:Q5816 .\n?x0 wdt:P108 wd:Q10918560 .\n?x0 wdt:P27 wd:Q148\n}",
        "questionWithBrackets": "Was [Military and Political University of Resistance Against Japan] 's Chinese employee influenced by [Mao Zedong]"
    },
    {
        "questionIdx": 71220,
        "questionPatternModEntities": "Was M0 's Italian sibling 's sibling M2",
        "questionTemplate": "Was [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] 's [ROLE_SIMPLE] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( M2 != ?x0 ) .\nM2 P0 ?x0\n}",
        "recursionDepth": 20,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P27 wd:Q38 .\n?x0 wdt:P3373 wd:Q15291085 .\nFILTER ( ?x0 != wd:Q15291085 ) .\nFILTER ( wd:Q2050307 != ?x0 ) .\nwd:Q2050307 wdt:P3373 ?x0\n}",
        "questionWithBrackets": "Was [Maria Antonietta Berlusconi] 's Italian sibling 's sibling [Paolo Berlusconi]"
    },
    {
        "questionIdx": 71222,
        "questionPatternModEntities": "Was M0 's employee employed by M1",
        "questionTemplate": "Was [entity] 's [ROLE_SIMPLE] [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P0 M1\n}",
        "recursionDepth": 16,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P108 wd:Q95 .\n?x0 wdt:P108 wd:Q168756\n}",
        "questionWithBrackets": "Was [Google] 's employee employed by [University of California, Berkeley]"
    },
    {
        "questionIdx": 71227,
        "questionPatternModEntities": "Was M1 M0 's parent 's Swedish employee",
        "questionTemplate": "Was [entity] [entity] 's [ROLE_SIMPLE] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 ?x0 .\nM1 P2 M2\n}",
        "recursionDepth": 20,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q37470 .\nwd:Q152437 wdt:P108 ?x0 .\nwd:Q152437 wdt:P27 wd:Q34\n}",
        "questionWithBrackets": "Was [Alva Myrdal] [United Nations Security Council] 's parent 's Swedish employee"
    },
    {
        "questionIdx": 71274,
        "questionPatternModEntities": "Was M0 edited by M1 and M2 , directed by M3 and M4 , and directed by M5 , M6 , and M7",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] and [entity] , [VP_SIMPLE] by [entity] and [entity] , and [VP_SIMPLE] by [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P1 M3 .\nM0 P1 M4 .\nM0 P1 M5 .\nM0 P1 M6 .\nM0 P1 M7\n}",
        "recursionDepth": 47,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q603857 wdt:P57 wd:Q474262 .\nwd:Q603857 wdt:P57 wd:Q312611 .\nwd:Q603857 wdt:P57 wd:Q113628 .\nwd:Q603857 wdt:P57 wd:Q55238 .\nwd:Q603857 wdt:P57 wd:Q44221 .\nwd:Q603857 wdt:P1040 wd:Q55211 .\nwd:Q603857 wdt:P1040 wd:Q18021284\n}",
        "questionWithBrackets": "Was [11'09\"01 September 11] edited by [Jonathan Morris] and [Mohsen Makhmalbaf] , directed by [Ken Loach] and [Youssef Chahine] , and directed by [Amos Gitai] , [Sean Penn] , and [Idrissa Ou\u00e9draogo]"
    },
    {
        "questionIdx": 71287,
        "questionPatternModEntities": "Was M0 M1 's Canadian employee",
        "questionTemplate": "Was [entity] [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M2\n}",
        "recursionDepth": 16,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q111182 wdt:P108 wd:Q151510 .\nwd:Q111182 wdt:P27 wd:Q16\n}",
        "questionWithBrackets": "Was [Hinrich Bitter-Suermann] [Heidelberg University] 's Canadian employee"
    },
    {
        "questionIdx": 71305,
        "questionPatternModEntities": "Was M0 M2 's Swedish actor",
        "questionTemplate": "Was [entity] [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M2\n}",
        "recursionDepth": 16,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q6062217 wdt:P453 wd:Q10518313 .\nwd:Q6062217 wdt:P27 wd:Q34\n}",
        "questionWithBrackets": "Was [\u00d6rjan Ramberg] [No label defined] 's Swedish actor"
    },
    {
        "questionIdx": 71429,
        "questionPatternModEntities": "Was M1 's spouse a Canadian spouse of M2",
        "questionTemplate": "Was [entity] 's [ROLE_SIMPLE] a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\nFILTER ( ?x0 != M1 ) .\nFILTER ( ?x0 != M2 )\n}",
        "recursionDepth": 22,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P27 wd:Q16 .\n?x0 wdt:P26 wd:Q17309225 .\n?x0 wdt:P26 wd:Q26945290 .\nFILTER ( ?x0 != wd:Q17309225 ) .\nFILTER ( ?x0 != wd:Q26945290 )\n}",
        "questionWithBrackets": "Was [J\u00f6rn Weisbrodt] 's spouse a Canadian spouse of [Lorca Cohen]"
    },
    {
        "questionIdx": 71444,
        "questionPatternModEntities": "Was M4 a sibling of a Chinese employee of M0 , M1 , and M2",
        "questionTemplate": "Was [entity] a [ROLE_SIMPLE] of a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P1 M3 .\nFILTER ( M4 != ?x0 ) .\nM4 P2 ?x0\n}",
        "recursionDepth": 31,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P108 wd:Q16955 .\n?x0 wdt:P108 wd:Q16952 .\n?x0 wdt:P108 wd:Q178972 .\n?x0 wdt:P27 wd:Q148 .\nFILTER ( wd:Q3170503 != ?x0 ) .\nwd:Q3170503 wdt:P3373 ?x0\n}",
        "questionWithBrackets": "Was [Chen Shizeng] a sibling of a Chinese employee of [Sun Yat-sen University] , [Tsinghua University] , and [Peking University]"
    },
    {
        "questionIdx": 71449,
        "questionPatternModEntities": "Was M0 's French employee employed by M1 , employed by M2 , M3 , and M4 , and employed by M5",
        "questionTemplate": "Was [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , [entity] , and [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P0 M3 .\n?x0 P0 M4 .\n?x0 P0 M5 .\n?x0 P1 M6\n}",
        "recursionDepth": 48,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P108 wd:Q391083 .\n?x0 wdt:P108 wd:Q273461 .\n?x0 wdt:P108 wd:Q3551621 .\n?x0 wdt:P108 wd:Q83259 .\n?x0 wdt:P108 wd:Q500740 .\n?x0 wdt:P108 wd:Q157575 .\n?x0 wdt:P27 wd:Q142\n}",
        "questionWithBrackets": "Was [University of Strasbourg] 's French employee employed by [Pasteur Institute] , employed by [University of Lille] , [\u00c9cole normale sup\u00e9rieure] , and [\u00c9cole Centrale de Lille] , and employed by [Lille University of Science and Technology]"
    },
    {
        "questionIdx": 71465,
        "questionPatternModEntities": "Was M1 executive produced by M2 , directed by M3 , executive produced by M0 's parent , and directed by M4",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 ?x0 .\nM1 P1 M2 .\nM1 P2 M3 .\nM1 P2 M4\n}",
        "recursionDepth": 47,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q370377 .\nwd:Q2947967 wdt:P57 wd:Q362793 .\nwd:Q2947967 wdt:P57 wd:Q2273145 .\nwd:Q2947967 wdt:P1431 ?x0 .\nwd:Q2947967 wdt:P1431 wd:Q8877\n}",
        "questionWithBrackets": "Was [Under the Dome] executive produced by [Steven Spielberg] , directed by [Jack Bender] , executive produced by [Joe Hill] 's parent , and directed by [Sergio Mimica-Gezzan]"
    },
    {
        "questionIdx": 71474,
        "questionPatternModEntities": "Was M2 founded by M3 and founded by M0 's female employee",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] and [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nM2 P2 ?x0 .\nM2 P2 M3\n}",
        "recursionDepth": 32,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P108 wd:Q26882567 .\n?x0 wdt:P21 wd:Q6581072 .\nwd:Q1371235 wdt:P112 ?x0 .\nwd:Q1371235 wdt:P112 wd:Q567\n}",
        "questionWithBrackets": "Was [No label defined] founded by [Angela Merkel] and founded by [No label defined] 's female employee"
    },
    {
        "questionIdx": 71484,
        "questionPatternModEntities": "Was M2 produced by M0 's French sibling",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M0 ) .\nM2 P2 ?x0\n}",
        "recursionDepth": 21,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P27 wd:Q142 .\n?x0 wdt:P3373 wd:Q105946886 .\nFILTER ( ?x0 != wd:Q105946886 ) .\nwd:Q2961052 wdt:P162|wdt:P272 ?x0\n}",
        "questionWithBrackets": "Was [Charlotte for Ever] produced by [Liliane Gainsbourg] 's French sibling"
    },
    {
        "questionIdx": 71494,
        "questionPatternModEntities": "Was M1 M0 's parent 's sibling 's sibling and spouse",
        "questionTemplate": "Was [entity] [entity] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE] and [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x1 P1 M0 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( M1 != ?x0 ) .\nFILTER ( M1 != ?x0 ) .\nM1 P0 ?x0 .\nM1 P2 ?x0\n}",
        "recursionDepth": 24,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P3373 ?x1 .\n?x1 wdt:P40|wdt:P355 wd:Q350246 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( wd:Q635 != ?x0 ) .\nFILTER ( wd:Q635 != ?x0 ) .\nwd:Q635 wdt:P3373 ?x0 .\nwd:Q635 wdt:P26 ?x0\n}",
        "questionWithBrackets": "Was [Cleopatra] [Ptolemy Philadelphus] 's parent 's sibling 's sibling and spouse"
    },
    {
        "questionIdx": 71502,
        "questionPatternModEntities": "Was M0 's Swedish sibling employed by M1",
        "questionTemplate": "Was [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P2 M2 .\nFILTER ( ?x0 != M0 )\n}",
        "recursionDepth": 21,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P108 wd:Q221645 .\n?x0 wdt:P27 wd:Q34 .\n?x0 wdt:P3373 wd:Q2008597 .\nFILTER ( ?x0 != wd:Q2008597 )\n}",
        "questionWithBrackets": "Was [Anne Jaclard] 's Swedish sibling employed by [Stockholm University]"
    },
    {
        "questionIdx": 71522,
        "questionPatternModEntities": "Was M2 influenced by M3 and influenced by a Italian spouse of M1",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] and [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M1 ) .\nM2 P2 ?x0 .\nM2 P2 M3\n}",
        "recursionDepth": 34,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P27 wd:Q38 .\n?x0 wdt:P26 wd:Q6498895 .\nFILTER ( ?x0 != wd:Q6498895 ) .\nwd:Q155777 wdt:P737 ?x0 .\nwd:Q155777 wdt:P737 wd:Q8753\n}",
        "questionWithBrackets": "Was [Hideki Yukawa] influenced by [Enrico Fermi] and influenced by a Italian spouse of [Laura Fermi]"
    },
    {
        "questionIdx": 71548,
        "questionPatternModEntities": "Was M0 M4 's British Chinese female spouse",
        "questionTemplate": "Was [entity] [entity] 's [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\nFILTER ( M0 != M4 ) .\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P1 M3 .\nM0 P2 M4\n}",
        "recursionDepth": 26,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nFILTER ( wd:Q16400 != wd:Q28864829 ) .\nwd:Q16400 wdt:P21 wd:Q6581072 .\nwd:Q16400 wdt:P27 wd:Q145 .\nwd:Q16400 wdt:P27 wd:Q148 .\nwd:Q16400 wdt:P26 wd:Q28864829\n}",
        "questionWithBrackets": "Was [Han Suyin] [Leon Comber] 's British Chinese female spouse"
    },
    {
        "questionIdx": 71549,
        "questionPatternModEntities": "Was M0 M3 's Chinese British parent",
        "questionTemplate": "Was [entity] [entity] 's [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P1 M3\n}",
        "recursionDepth": 21,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q4757753 wdt:P40|wdt:P355 wd:Q28146999 .\nwd:Q4757753 wdt:P27 wd:Q145 .\nwd:Q4757753 wdt:P27 wd:Q148\n}",
        "questionWithBrackets": "Was [Andrew Leung] [Clarence Leung] 's Chinese British parent"
    },
    {
        "questionIdx": 71550,
        "questionPatternModEntities": "Was M2 's Spanish spouse influenced by M0",
        "questionTemplate": "Was [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P2 M2 .\nFILTER ( ?x0 != M2 )\n}",
        "recursionDepth": 21,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P737 wd:Q501 .\n?x0 wdt:P27 wd:Q29 .\n?x0 wdt:P26 wd:Q11939105 .\nFILTER ( ?x0 != wd:Q11939105 )\n}",
        "questionWithBrackets": "Was [N\u00faria Folch i Pi] 's Spanish spouse influenced by [Charles Baudelaire]"
    },
    {
        "questionIdx": 71580,
        "questionPatternModEntities": "Was M0 M4 's British male Swedish parent",
        "questionTemplate": "Was [entity] [entity] 's [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P1 M3 .\nM0 P2 M4\n}",
        "recursionDepth": 26,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q1192339 wdt:P40|wdt:P355 wd:Q76340928 .\nwd:Q1192339 wdt:P21 wd:Q6581097 .\nwd:Q1192339 wdt:P27 wd:Q145 .\nwd:Q1192339 wdt:P27 wd:Q34\n}",
        "questionWithBrackets": "Was [Ewan MacColl] [Hamish McColl] 's British male Swedish parent"
    },
    {
        "questionIdx": 71582,
        "questionPatternModEntities": "Was M3 's German Spanish parent M0",
        "questionTemplate": "Was [entity] 's [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P1 M3\n}",
        "recursionDepth": 21,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q62263 wdt:P40|wdt:P355 wd:Q215873 .\nwd:Q62263 wdt:P27 wd:Q183 .\nwd:Q62263 wdt:P27 wd:Q29\n}",
        "questionWithBrackets": "Was [Prince Adalbert of Bavaria] 's German Spanish parent [Prince Ludwig Ferdinand of Bavaria]"
    },
    {
        "questionIdx": 71586,
        "questionPatternModEntities": "Was M2 written by a Dutch sibling of M0",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M0 ) .\nM2 P2 ?x0\n}",
        "recursionDepth": 23,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P27 wd:Q29999 .\n?x0 wdt:P3373 wd:Q1816701 .\nFILTER ( ?x0 != wd:Q1816701 ) .\nwd:Q2069092 wdt:P58 ?x0\n}",
        "questionWithBrackets": "Was [Op Hoop van Zegen] written by a Dutch sibling of [Louis Heijermans]"
    },
    {
        "questionIdx": 71601,
        "questionPatternModEntities": "Was M0 written by M1 , edited by M2 , M3 , M4 , and M5 , and edited by M6 and M7",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , [entity] , [entity] , and [entity] , and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M2 .\nM0 P1 M3 .\nM0 P1 M4 .\nM0 P1 M5 .\nM0 P1 M6 .\nM0 P1 M7\n}",
        "recursionDepth": 46,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q603857 wdt:P1040 wd:Q55211 .\nwd:Q603857 wdt:P1040 wd:Q541826 .\nwd:Q603857 wdt:P1040 wd:Q5639976 .\nwd:Q603857 wdt:P1040 wd:Q22074634 .\nwd:Q603857 wdt:P1040 wd:Q18021284 .\nwd:Q603857 wdt:P1040 wd:Q55215 .\nwd:Q603857 wdt:P58 wd:Q55238\n}",
        "questionWithBrackets": "Was [11'09\"01 September 11] written by [Ken Loach] , edited by [Hajime Okayasu] , [Robert Duffy] , [Mohsen Makhmalbaf] , and [Jay Cassidy] , and edited by [Alejandro Gonz\u00e1lez I\u00f1\u00e1rritu] and [Jonathan Morris]"
    },
    {
        "questionIdx": 71640,
        "questionPatternModEntities": "Was M1 edited by M4 , edited by M0 's employee 's spouse , and executive produced by M2 and M3",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE] , and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x1 P1 M0 .\nFILTER ( ?x0 != ?x1 ) .\nM1 P2 M2 .\nM1 P2 M3 .\nM1 P3 ?x0 .\nM1 P3 M4\n}",
        "recursionDepth": 45,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P26 ?x1 .\n?x1 wdt:P108 wd:Q730179 .\nFILTER ( ?x0 != ?x1 ) .\nwd:Q236728 wdt:P1040 ?x0 .\nwd:Q236728 wdt:P1040 wd:Q1379022 .\nwd:Q236728 wdt:P1431 wd:Q55400 .\nwd:Q236728 wdt:P1431 wd:Q269214\n}",
        "questionWithBrackets": "Was [Ponyo on the Cliff by the Sea] edited by [Takeshi Seyama] , edited by [Toei Animation] 's employee 's spouse , and executive produced by [John Lasseter] and [Hayao Miyazaki]"
    },
    {
        "questionIdx": 71641,
        "questionPatternModEntities": "Was M1 edited by and directed by a spouse of a employee of M0",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by and [VP_SIMPLE] by a [ROLE_SIMPLE] of a [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x1 P1 M0 .\nFILTER ( ?x0 != ?x1 ) .\nM1 P2 ?x0 .\nM1 P3 ?x0\n}",
        "recursionDepth": 32,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P26 ?x1 .\n?x1 wdt:P108 wd:Q153006 .\nFILTER ( ?x0 != ?x1 ) .\nwd:Q151599 wdt:P57 ?x0 .\nwd:Q151599 wdt:P1040 ?x0\n}",
        "questionWithBrackets": "Was [Metropolis] edited by and directed by a spouse of a employee of [Freie Universit\u00e4t Berlin]"
    },
    {
        "questionIdx": 71694,
        "questionPatternModEntities": "Was M0 written , edited , and directed by M1 and M2",
        "questionTemplate": "Was [entity] [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P1 M1 .\nM0 P1 M2 .\nM0 P2 M1 .\nM0 P2 M2\n}",
        "recursionDepth": 28,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q543382 wdt:P57 wd:Q44426 .\nwd:Q543382 wdt:P57 wd:Q96024 .\nwd:Q543382 wdt:P1040 wd:Q44426 .\nwd:Q543382 wdt:P1040 wd:Q96024 .\nwd:Q543382 wdt:P58 wd:Q44426 .\nwd:Q543382 wdt:P58 wd:Q96024\n}",
        "questionWithBrackets": "Was [Why Does Herr R. Run Amok?] written , edited , and directed by [Michael Fengler] and [Rainer Werner Fassbinder]"
    },
    {
        "questionIdx": 71695,
        "questionPatternModEntities": "Was M1 founded by M0 's sibling",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nM1 P1 ?x0\n}",
        "recursionDepth": 16,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P3373 wd:Q850421 .\nFILTER ( ?x0 != wd:Q850421 ) .\nwd:Q54122 wdt:P112 ?x0\n}",
        "questionWithBrackets": "Was [Continental Army] founded by [Betty Washington Lewis] 's sibling"
    },
    {
        "questionIdx": 71697,
        "questionPatternModEntities": "Was M0 executive produced by , edited by , and directed by M1",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1 .\nM0 P2 M1\n}",
        "recursionDepth": 27,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q854990 wdt:P57 wd:Q8006 .\nwd:Q854990 wdt:P1040 wd:Q8006 .\nwd:Q854990 wdt:P1431 wd:Q8006\n}",
        "questionWithBrackets": "Was [Kagemusha] executive produced by , edited by , and directed by [Akira Kurosawa]"
    },
    {
        "questionIdx": 71702,
        "questionPatternModEntities": "Was M1 's employee 's spouse M0 's parent",
        "questionTemplate": "Was [entity] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE] [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 ?x1 .\n?x1 P2 M1 .\nFILTER ( ?x0 != ?x1 )\n}",
        "recursionDepth": 19,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q101014 .\n?x0 wdt:P26 ?x1 .\n?x1 wdt:P108 wd:Q686522 .\nFILTER ( ?x0 != ?x1 )\n}",
        "questionWithBrackets": "Was [University of Music and Performing Arts Vienna] 's employee 's spouse [Daniela von B\u00fclow] 's parent"
    },
    {
        "questionIdx": 71731,
        "questionPatternModEntities": "Was M1 's sequel produced and written by M0",
        "questionTemplate": "Was [entity] 's [ROLE_SIMPLE] [VP_SIMPLE] and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M0 .\n?x0 P2 M1\n}",
        "recursionDepth": 23,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P155 wd:Q2401367 .\n?x0 wdt:P162|wdt:P272 wd:Q4465 .\n?x0 wdt:P58 wd:Q4465\n}",
        "questionWithBrackets": "Was [Batman Begins] 's sequel produced and written by [Peter Jackson]"
    },
    {
        "questionIdx": 71737,
        "questionPatternModEntities": "Was M3 's sequel distributed by M0 , M1 , and M2",
        "questionTemplate": "Was [entity] 's [ROLE_SIMPLE] [VP_SIMPLE] by [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P1 M3\n}",
        "recursionDepth": 23,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P750 wd:Q866 .\n?x0 wdt:P750 wd:Q3884 .\n?x0 wdt:P750 wd:Q602243 .\n?x0 wdt:P155 wd:Q97127255\n}",
        "questionWithBrackets": "Was [Raise Your Banner] 's sequel distributed by [Amazon] , [Deezer] , and [YouTube]"
    },
    {
        "questionIdx": 71755,
        "questionPatternModEntities": "Was M0 's spouse 's female spouse M1",
        "questionTemplate": "Was [entity] 's [ROLE_SIMPLE] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( M1 != ?x0 ) .\nM1 P0 ?x0 .\nM1 P1 M2\n}",
        "recursionDepth": 20,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P26 wd:Q1646 .\nFILTER ( ?x0 != wd:Q1646 ) .\nFILTER ( wd:Q7520367 != ?x0 ) .\nwd:Q7520367 wdt:P21 wd:Q6581072 .\nwd:Q7520367 wdt:P26 ?x0\n}",
        "questionWithBrackets": "Was [Fran\u00e7oise Sagan] 's spouse 's female spouse [Simone Micheline Bodin]"
    },
    {
        "questionIdx": 71791,
        "questionPatternModEntities": "Was M1 executive produced by , written by , directed by , and edited by M0 's sibling",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nM1 P1 ?x0 .\nM1 P2 ?x0 .\nM1 P3 ?x0 .\nM1 P4 ?x0\n}",
        "recursionDepth": 37,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P3373 wd:Q28370409 .\nFILTER ( ?x0 != wd:Q28370409 ) .\nwd:Q28146810 wdt:P57 ?x0 .\nwd:Q28146810 wdt:P1040 ?x0 .\nwd:Q28146810 wdt:P1431 ?x0 .\nwd:Q28146810 wdt:P58 ?x0\n}",
        "questionWithBrackets": "Was [Bullets, Fangs and Dinner at 8] executive produced by , written by , directed by , and edited by [Everton Rocca] 's sibling"
    },
    {
        "questionIdx": 71828,
        "questionPatternModEntities": "Was M0 a American spouse of M2",
        "questionTemplate": "Was [entity] a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nFILTER ( M0 != M2 ) .\nM0 P0 M1 .\nM0 P1 M2\n}",
        "recursionDepth": 18,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nFILTER ( wd:Q14439 != wd:Q105817 ) .\nwd:Q14439 wdt:P27 wd:Q30 .\nwd:Q14439 wdt:P26 wd:Q105817\n}",
        "questionWithBrackets": "Was [Phoebe Cates Kline] a American spouse of [Kevin Kline]"
    },
    {
        "questionIdx": 71842,
        "questionPatternModEntities": "Was M0 's sequel M1 's sequel",
        "questionTemplate": "Was [entity] 's [ROLE_SIMPLE] [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P0 M1\n}",
        "recursionDepth": 15,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P155 wd:Q5988 .\n?x0 wdt:P155 wd:Q1369780\n}",
        "questionWithBrackets": "Was [Jurva] 's sequel [Jalasj\u00e4rvi] 's sequel"
    },
    {
        "questionIdx": 71863,
        "questionPatternModEntities": "Was M0 written by , executive produced by , and produced by M1 and M2",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P1 M1 .\nM0 P1 M2 .\nM0 P2 M1 .\nM0 P2 M2\n}",
        "recursionDepth": 31,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q104814 wdt:P1431 wd:Q2396324 .\nwd:Q104814 wdt:P1431 wd:Q350422 .\nwd:Q104814 wdt:P162|wdt:P272 wd:Q2396324 .\nwd:Q104814 wdt:P162|wdt:P272 wd:Q350422 .\nwd:Q104814 wdt:P58 wd:Q2396324 .\nwd:Q104814 wdt:P58 wd:Q350422\n}",
        "questionWithBrackets": "Was [Aliens] written by , executive produced by , and produced by [Walter Hill] and [David Giler]"
    },
    {
        "questionIdx": 71911,
        "questionPatternModEntities": "Was M0 written and produced by M1",
        "questionTemplate": "Was [entity] [VP_SIMPLE] and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1\n}",
        "recursionDepth": 19,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q901203 wdt:P162|wdt:P272 wd:Q1299 .\nwd:Q901203 wdt:P58 wd:Q1299\n}",
        "questionWithBrackets": "Was [Magical Mystery Tour] written and produced by [The Beatles]"
    },
    {
        "questionIdx": 71965,
        "questionPatternModEntities": "Was M0 edited by and produced by M1",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1\n}",
        "recursionDepth": 20,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q166739 wdt:P1040 wd:Q882 .\nwd:Q166739 wdt:P162|wdt:P272 wd:Q882\n}",
        "questionWithBrackets": "Was [The Floorwalker] edited by and produced by [Charlie Chaplin]"
    },
    {
        "questionIdx": 71972,
        "questionPatternModEntities": "Was M1 edited by , directed by , produced by , and written by a sibling of M0",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nM1 P1 ?x0 .\nM1 P2 ?x0 .\nM1 P3 ?x0 .\nM1 P4 ?x0\n}",
        "recursionDepth": 38,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P3373 wd:Q372788 .\nFILTER ( ?x0 != wd:Q372788 ) .\nwd:Q685817 wdt:P57 ?x0 .\nwd:Q685817 wdt:P1040 ?x0 .\nwd:Q685817 wdt:P162|wdt:P272 ?x0 .\nwd:Q685817 wdt:P58 ?x0\n}",
        "questionWithBrackets": "Was [Following] edited by , directed by , produced by , and written by a sibling of [Jonathan Nolan]"
    },
    {
        "questionIdx": 71974,
        "questionPatternModEntities": "Was M1 produced , edited , and directed by a sibling of M0",
        "questionTemplate": "Was [entity] [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nM1 P1 ?x0 .\nM1 P2 ?x0 .\nM1 P3 ?x0\n}",
        "recursionDepth": 30,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P3373 wd:Q372788 .\nFILTER ( ?x0 != wd:Q372788 ) .\nwd:Q685817 wdt:P57 ?x0 .\nwd:Q685817 wdt:P1040 ?x0 .\nwd:Q685817 wdt:P162|wdt:P272 ?x0\n}",
        "questionWithBrackets": "Was [Following] produced , edited , and directed by a sibling of [Jonathan Nolan]"
    },
    {
        "questionIdx": 71996,
        "questionPatternModEntities": "Was M3 influenced by M2 's British French spouse and influenced by M4",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P1 M2 .\nFILTER ( ?x0 != M2 ) .\nM3 P2 ?x0 .\nM3 P2 M4\n}",
        "recursionDepth": 37,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P27 wd:Q145 .\n?x0 wdt:P27 wd:Q142 .\n?x0 wdt:P26 wd:Q16856876 .\nFILTER ( ?x0 != wd:Q16856876 ) .\nwd:Q1307310 wdt:P737 ?x0 .\nwd:Q1307310 wdt:P737 wd:Q519129\n}",
        "questionWithBrackets": "Was [Jocelyn Toynbee] influenced by [Sandford Arthur Strong] 's British French spouse and influenced by [Eugenie Sellers Strong]"
    },
    {
        "questionIdx": 71998,
        "questionPatternModEntities": "Was M0 a British Italian parent of M3",
        "questionTemplate": "Was [entity] a [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P1 M3\n}",
        "recursionDepth": 23,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q320305 wdt:P40|wdt:P355 wd:Q2960441 .\nwd:Q320305 wdt:P27 wd:Q38 .\nwd:Q320305 wdt:P27 wd:Q145\n}",
        "questionWithBrackets": "Was [Valerian Wellesley, 8th Duke of Wellington] a British Italian parent of [Charles Wellesley, 9th Duke of Wellington]"
    },
    {
        "questionIdx": 72007,
        "questionPatternModEntities": "Was M1 M0 's spouse 's parent",
        "questionTemplate": "Was [entity] [entity] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nM1 P1 ?x0\n}",
        "recursionDepth": 15,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P26 wd:Q2259 .\nFILTER ( ?x0 != wd:Q2259 ) .\nwd:Q2165262 wdt:P40|wdt:P355 ?x0\n}",
        "questionWithBrackets": "Was [Marcus Gallius] [Julia the Elder] 's spouse 's parent"
    },
    {
        "questionIdx": 72022,
        "questionPatternModEntities": "Was M0 's Canadian employee employed by M1",
        "questionTemplate": "Was [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P1 M2\n}",
        "recursionDepth": 21,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P108 wd:Q4614 .\n?x0 wdt:P108 wd:Q891048 .\n?x0 wdt:P27 wd:Q16\n}",
        "questionWithBrackets": "Was [Boing Boing] 's Canadian employee employed by [University of Southern California]"
    },
    {
        "questionIdx": 72023,
        "questionPatternModEntities": "Was M0 's Japanese employee influenced by M1",
        "questionTemplate": "Was [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P2 M2\n}",
        "recursionDepth": 21,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P737 wd:Q8753 .\n?x0 wdt:P108 wd:Q7842 .\n?x0 wdt:P27 wd:Q17\n}",
        "questionWithBrackets": "Was [University of Tokyo] 's Japanese employee influenced by [Enrico Fermi]"
    },
    {
        "questionIdx": 72033,
        "questionPatternModEntities": "Was M1 's male spouse 's actor M2",
        "questionTemplate": "Was [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] 's [ROLE_SIMPLE] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M1 ) .\nM2 P2 ?x0\n}",
        "recursionDepth": 20,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P21 wd:Q6581097 .\n?x0 wdt:P26 wd:Q9323420 .\nFILTER ( ?x0 != wd:Q9323420 ) .\nwd:Q160427 wdt:P453 ?x0\n}",
        "questionWithBrackets": "Was [Rosina] 's male spouse 's actor [Juan Diego Fl\u00f3rez]"
    },
    {
        "questionIdx": 72979,
        "questionPatternModEntities": "Was M2 's Spanish actor M0",
        "questionTemplate": "Was [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M2\n}",
        "recursionDepth": 16,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q42747408 wdt:P453 wd:Q2713628 .\nwd:Q42747408 wdt:P27 wd:Q29\n}",
        "questionWithBrackets": "Was [Christine Daa\u00e9] 's Spanish actor [Isabel Patton]"
    },
    {
        "questionIdx": 73009,
        "questionPatternModEntities": "Was M0 's female sibling 's sibling and spouse M2",
        "questionTemplate": "Was [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] 's [ROLE_SIMPLE] and [ROLE_SIMPLE] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( M2 != ?x0 ) .\nFILTER ( M2 != ?x0 ) .\nM2 P0 ?x0 .\nM2 P2 ?x0\n}",
        "recursionDepth": 25,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P21 wd:Q6581072 .\n?x0 wdt:P3373 wd:Q3345 .\nFILTER ( ?x0 != wd:Q3345 ) .\nFILTER ( wd:Q3340 != ?x0 ) .\nFILTER ( wd:Q3340 != ?x0 ) .\nwd:Q3340 wdt:P3373 ?x0 .\nwd:Q3340 wdt:P26 ?x0\n}",
        "questionWithBrackets": "Was [Ptolemy X Alexander I] 's female sibling 's sibling and spouse [Ptolemy IX Lathyros]"
    },
    {
        "questionIdx": 73010,
        "questionPatternModEntities": "Was M2 M1 's female parent 's sibling and spouse",
        "questionTemplate": "Was [entity] [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] 's [ROLE_SIMPLE] and [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( M2 != ?x0 ) .\nFILTER ( M2 != ?x0 ) .\nM2 P2 ?x0 .\nM2 P3 ?x0\n}",
        "recursionDepth": 25,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q350246 .\n?x0 wdt:P21 wd:Q6581072 .\nFILTER ( wd:Q39938 != ?x0 ) .\nFILTER ( wd:Q39938 != ?x0 ) .\nwd:Q39938 wdt:P3373 ?x0 .\nwd:Q39938 wdt:P26 ?x0\n}",
        "questionWithBrackets": "Was [Ptolemy XIII Theos Philopator] [Ptolemy Philadelphus] 's female parent 's sibling and spouse"
    },
    {
        "questionIdx": 73011,
        "questionPatternModEntities": "Was M2 a sibling and spouse of a female parent of M1",
        "questionTemplate": "Was [entity] a [ROLE_SIMPLE] and [ROLE_SIMPLE] of a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( M2 != ?x0 ) .\nFILTER ( M2 != ?x0 ) .\nM2 P2 ?x0 .\nM2 P3 ?x0\n}",
        "recursionDepth": 29,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q350246 .\n?x0 wdt:P21 wd:Q6581072 .\nFILTER ( wd:Q39938 != ?x0 ) .\nFILTER ( wd:Q39938 != ?x0 ) .\nwd:Q39938 wdt:P3373 ?x0 .\nwd:Q39938 wdt:P26 ?x0\n}",
        "questionWithBrackets": "Was [Ptolemy XIII Theos Philopator] a sibling and spouse of a female parent of [Ptolemy Philadelphus]"
    },
    {
        "questionIdx": 73072,
        "questionPatternModEntities": "Was M0 written , produced , and edited by M1",
        "questionTemplate": "Was [entity] [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1 .\nM0 P2 M1\n}",
        "recursionDepth": 24,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q854990 wdt:P1040 wd:Q8006 .\nwd:Q854990 wdt:P162|wdt:P272 wd:Q8006 .\nwd:Q854990 wdt:P58 wd:Q8006\n}",
        "questionWithBrackets": "Was [Kagemusha] written , produced , and edited by [Akira Kurosawa]"
    },
    {
        "questionIdx": 73117,
        "questionPatternModEntities": "Was M0 edited by M2 , M3 , M4 , M5 , and M6 , written by M1 , and directed by M7",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] , [entity] , [entity] , [entity] , and [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M2 .\nM0 P1 M3 .\nM0 P1 M4 .\nM0 P1 M5 .\nM0 P1 M6 .\nM0 P2 M7\n}",
        "recursionDepth": 45,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q603857 wdt:P57 wd:Q55238 .\nwd:Q603857 wdt:P1040 wd:Q55211 .\nwd:Q603857 wdt:P1040 wd:Q5639976 .\nwd:Q603857 wdt:P1040 wd:Q541826 .\nwd:Q603857 wdt:P1040 wd:Q22074634 .\nwd:Q603857 wdt:P1040 wd:Q18021284 .\nwd:Q603857 wdt:P58 wd:Q11289113\n}",
        "questionWithBrackets": "Was [11'09\"01 September 11] edited by [Jonathan Morris] , [Hajime Okayasu] , [Jay Cassidy] , [Mohsen Makhmalbaf] , and [Robert Duffy] , written by [Vladimir Vega] , and directed by [Ken Loach]"
    },
    {
        "questionIdx": 73131,
        "questionPatternModEntities": "Was M0 a Chinese spouse of M2",
        "questionTemplate": "Was [entity] a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nFILTER ( M0 != M2 ) .\nM0 P0 M1 .\nM0 P1 M2\n}",
        "recursionDepth": 18,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nFILTER ( wd:Q197261 != wd:Q270165 ) .\nwd:Q197261 wdt:P27 wd:Q148 .\nwd:Q197261 wdt:P26 wd:Q270165\n}",
        "questionWithBrackets": "Was [Zhang Nan] a Chinese spouse of [Tian Qing]"
    },
    {
        "questionIdx": 73134,
        "questionPatternModEntities": "Was M0 's employee M1 's female employee",
        "questionTemplate": "Was [entity] 's [ROLE_SIMPLE] [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P1 M2\n}",
        "recursionDepth": 20,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P108 wd:Q95 .\n?x0 wdt:P108 wd:Q186285 .\n?x0 wdt:P21 wd:Q6581072\n}",
        "questionWithBrackets": "Was [Google] 's employee [University of Copenhagen] 's female employee"
    },
    {
        "questionIdx": 73147,
        "questionPatternModEntities": "Was M0 's Canadian British employee 's parent M3",
        "questionTemplate": "Was [entity] 's [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] 's [ROLE_SIMPLE] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\nM3 P2 ?x0\n}",
        "recursionDepth": 25,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P108 wd:Q1045828 .\n?x0 wdt:P27 wd:Q145 .\n?x0 wdt:P27 wd:Q16 .\nwd:Q76241115 wdt:P40|wdt:P355 ?x0\n}",
        "questionWithBrackets": "Was [University of East Anglia] 's Canadian British employee 's parent [Katherine Charlotte Swan]"
    },
    {
        "questionIdx": 73170,
        "questionPatternModEntities": "Was M2 edited by a male spouse of M1",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M1 ) .\nM2 P2 ?x0\n}",
        "recursionDepth": 23,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P21 wd:Q6581097 .\n?x0 wdt:P26 wd:Q40162 .\nFILTER ( ?x0 != wd:Q40162 ) .\nwd:Q457886 wdt:P1040 ?x0\n}",
        "questionWithBrackets": "Was [Amblin'] edited by a male spouse of [Kate Capshaw]"
    },
    {
        "questionIdx": 73201,
        "questionPatternModEntities": "Was M0 distributed by M1 , distributed by M2 , and distributed by M3",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P0 M3\n}",
        "recursionDepth": 32,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q34316 wdt:P750 wd:Q9531 .\nwd:Q34316 wdt:P750 wd:Q907311 .\nwd:Q34316 wdt:P750 wd:Q65359104\n}",
        "questionWithBrackets": "Was [Doctor Who] distributed by [BBC] , distributed by [Netflix] , and distributed by [HBO Max]"
    },
    {
        "questionIdx": 73244,
        "questionPatternModEntities": "Was M0 M1 's Canadian British female sibling",
        "questionTemplate": "Was [entity] [entity] 's [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\nFILTER ( M0 != M1 ) .\nM0 P0 M1 .\nM0 P1 M2 .\nM0 P1 M3 .\nM0 P2 M4\n}",
        "recursionDepth": 26,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nFILTER ( wd:Q3077944 != wd:Q5921597 ) .\nwd:Q3077944 wdt:P21 wd:Q6581072 .\nwd:Q3077944 wdt:P27 wd:Q145 .\nwd:Q3077944 wdt:P27 wd:Q16 .\nwd:Q3077944 wdt:P3373 wd:Q5921597\n}",
        "questionWithBrackets": "Was [Savannah Phillips] [Isla Phillips] 's Canadian British female sibling"
    },
    {
        "questionIdx": 73248,
        "questionPatternModEntities": "Was M2 M1 's Dutch spouse 's spouse",
        "questionTemplate": "Was [entity] [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M1 ) .\nFILTER ( M2 != ?x0 ) .\nM2 P1 ?x0\n}",
        "recursionDepth": 20,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P27 wd:Q29999 .\n?x0 wdt:P26 wd:Q385704 .\nFILTER ( ?x0 != wd:Q385704 ) .\nFILTER ( wd:Q2010175 != ?x0 ) .\nwd:Q2010175 wdt:P26 ?x0\n}",
        "questionWithBrackets": "Was [Edwin Jansen] [Remon Stotijn] 's Dutch spouse 's spouse"
    },
    {
        "questionIdx": 73288,
        "questionPatternModEntities": "Was M1 edited by a sibling of M0",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nM1 P1 ?x0\n}",
        "recursionDepth": 18,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P3373 wd:Q469204 .\nFILTER ( ?x0 != wd:Q469204 ) .\nwd:Q457886 wdt:P1040 ?x0\n}",
        "questionWithBrackets": "Was [Amblin'] edited by a sibling of [Anne Spielberg]"
    },
    {
        "questionIdx": 73292,
        "questionPatternModEntities": "Was M0 directed by M2 , M3 , and M4 , directed by M5 , M6 , and M7 , and edited by M1",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] , [entity] , and [entity] , [VP_SIMPLE] by [entity] , [entity] , and [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M2 .\nM0 P1 M3 .\nM0 P1 M4 .\nM0 P1 M5 .\nM0 P1 M6 .\nM0 P1 M7\n}",
        "recursionDepth": 46,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q603857 wdt:P57 wd:Q44221 .\nwd:Q603857 wdt:P57 wd:Q309950 .\nwd:Q603857 wdt:P57 wd:Q55215 .\nwd:Q603857 wdt:P57 wd:Q113628 .\nwd:Q603857 wdt:P57 wd:Q295093 .\nwd:Q603857 wdt:P57 wd:Q313497 .\nwd:Q603857 wdt:P1040 wd:Q55211\n}",
        "questionWithBrackets": "Was [11'09\"01 September 11] directed by [Shohei Imamura] , [Sean Penn] , and [Claude Lelouch] , directed by [Danis Tanovi\u0107] , [Alejandro Gonz\u00e1lez I\u00f1\u00e1rritu] , and [Idrissa Ou\u00e9draogo] , and edited by [Mohsen Makhmalbaf]"
    },
    {
        "questionIdx": 73318,
        "questionPatternModEntities": "Was M0 edited by , directed by , and executive produced by M1",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1 .\nM0 P2 M1\n}",
        "recursionDepth": 27,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q854990 wdt:P57 wd:Q8006 .\nwd:Q854990 wdt:P1040 wd:Q8006 .\nwd:Q854990 wdt:P1431 wd:Q8006\n}",
        "questionWithBrackets": "Was [Kagemusha] edited by , directed by , and executive produced by [Akira Kurosawa]"
    },
    {
        "questionIdx": 73335,
        "questionPatternModEntities": "Was M0 written by , edited by , produced by , and directed by M1 and M2",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P1 M1 .\nM0 P1 M2 .\nM0 P2 M1 .\nM0 P2 M2 .\nM0 P3 M1 .\nM0 P3 M2\n}",
        "recursionDepth": 36,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q20729551 wdt:P57 wd:Q562108 .\nwd:Q20729551 wdt:P57 wd:Q1687239 .\nwd:Q20729551 wdt:P1040 wd:Q562108 .\nwd:Q20729551 wdt:P1040 wd:Q1687239 .\nwd:Q20729551 wdt:P162|wdt:P272 wd:Q562108 .\nwd:Q20729551 wdt:P162|wdt:P272 wd:Q1687239 .\nwd:Q20729551 wdt:P58 wd:Q562108 .\nwd:Q20729551 wdt:P58 wd:Q1687239\n}",
        "questionWithBrackets": "Was [Stop for Bud] written by , edited by , produced by , and directed by [Jens J\u00f8rgen Thorsen] and [J\u00f8rgen Leth]"
    },
    {
        "questionIdx": 73370,
        "questionPatternModEntities": "Was M0 a British male German employee of M1",
        "questionTemplate": "Was [entity] a [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M2 .\nM0 P1 M3 .\nM0 P2 M4\n}",
        "recursionDepth": 28,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q4517 wdt:P108 wd:Q193196 .\nwd:Q4517 wdt:P21 wd:Q6581097 .\nwd:Q4517 wdt:P27 wd:Q183 .\nwd:Q4517 wdt:P27 wd:Q145\n}",
        "questionWithBrackets": "Was [Bernard Katz] a British male German employee of [University College London]"
    },
    {
        "questionIdx": 73398,
        "questionPatternModEntities": "Was M0 produced by M5 , distributed by M1 , distributed by M2 , and distributed by M3 and M4",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P0 M3 .\nM0 P0 M4 .\nM0 P1 M5\n}",
        "recursionDepth": 45,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q692821 wdt:P750 wd:Q145 .\nwd:Q692821 wdt:P750 wd:Q5371838 .\nwd:Q692821 wdt:P750 wd:Q907311 .\nwd:Q692821 wdt:P750 wd:Q80948336 .\nwd:Q692821 wdt:P162|wdt:P272 wd:Q7684047\n}",
        "questionWithBrackets": "Was [My Summer of Love] produced by [Tanya Seghatchian] , distributed by [United Kingdom] , distributed by [Vudu] , and distributed by [Netflix] and [FandangoNow]"
    },
    {
        "questionIdx": 73399,
        "questionPatternModEntities": "Was M0 produced by M5 , distributed by M1 , distributed by M2 and M3 , and distributed by M4",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] and [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P0 M3 .\nM0 P0 M4 .\nM0 P1 M5\n}",
        "recursionDepth": 45,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q692821 wdt:P750 wd:Q145 .\nwd:Q692821 wdt:P750 wd:Q5371838 .\nwd:Q692821 wdt:P750 wd:Q907311 .\nwd:Q692821 wdt:P750 wd:Q80948336 .\nwd:Q692821 wdt:P162|wdt:P272 wd:Q79618131\n}",
        "questionWithBrackets": "Was [My Summer of Love] produced by [Apocalypso Pictures] , distributed by [United Kingdom] , distributed by [Netflix] and [FandangoNow] , and distributed by [Vudu]"
    },
    {
        "questionIdx": 73414,
        "questionPatternModEntities": "Was M0 's Spanish Italian sibling 's spouse M3",
        "questionTemplate": "Was [entity] 's [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] 's [ROLE_SIMPLE] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( M3 != ?x0 ) .\nM3 P2 ?x0\n}",
        "recursionDepth": 25,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P27 wd:Q38 .\n?x0 wdt:P27 wd:Q29 .\n?x0 wdt:P3373 wd:Q946985 .\nFILTER ( ?x0 != wd:Q946985 ) .\nFILTER ( wd:Q2939617 != ?x0 ) .\nwd:Q2939617 wdt:P26 ?x0\n}",
        "questionWithBrackets": "Was [Gonzalo, Duke of Aquitaine] 's Spanish Italian sibling 's spouse [Mar\u00eda del Carmen Mart\u00ednez-Bordi\u00fa y Franco]"
    },
    {
        "questionIdx": 73484,
        "questionPatternModEntities": "Was M1 influenced by a child of M0",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 ?x0\n}",
        "recursionDepth": 18,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P749 wd:Q20800404 .\nwd:Q5281 wdt:P737 ?x0\n}",
        "questionWithBrackets": "Was [Yandex] influenced by a child of [Alphabet Inc.]"
    },
    {
        "questionIdx": 73566,
        "questionPatternModEntities": "Was M0 executive produced , written , and edited by M1",
        "questionTemplate": "Was [entity] [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1 .\nM0 P2 M1\n}",
        "recursionDepth": 25,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q854990 wdt:P1040 wd:Q8006 .\nwd:Q854990 wdt:P1431 wd:Q8006 .\nwd:Q854990 wdt:P58 wd:Q8006\n}",
        "questionWithBrackets": "Was [Kagemusha] executive produced , written , and edited by [Akira Kurosawa]"
    },
    {
        "questionIdx": 73577,
        "questionPatternModEntities": "Was M2 's sequel executive produced by M0 and M1",
        "questionTemplate": "Was [entity] 's [ROLE_SIMPLE] [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P1 M2\n}",
        "recursionDepth": 21,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P1431 wd:Q8877 .\n?x0 wdt:P1431 wd:Q190373 .\n?x0 wdt:P155 wd:Q602094\n}",
        "questionWithBrackets": "Was [The Flintstones] 's sequel executive produced by [Steven Spielberg] and [Joseph Barbera]"
    },
    {
        "questionIdx": 73632,
        "questionPatternModEntities": "Was M0 written by , directed by , produced by , and edited by M1",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1 .\nM0 P2 M1 .\nM0 P3 M1\n}",
        "recursionDepth": 32,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q854990 wdt:P57 wd:Q8006 .\nwd:Q854990 wdt:P1040 wd:Q8006 .\nwd:Q854990 wdt:P162|wdt:P272 wd:Q8006 .\nwd:Q854990 wdt:P58 wd:Q8006\n}",
        "questionWithBrackets": "Was [Kagemusha] written by , directed by , produced by , and edited by [Akira Kurosawa]"
    },
    {
        "questionIdx": 73655,
        "questionPatternModEntities": "Was M3 written by M1 's Canadian spouse and edited by M2 's spouse",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x1 P1 M2 .\nFILTER ( ?x0 != M1 ) .\nFILTER ( ?x1 != M2 ) .\nM3 P2 ?x0 .\nM3 P3 ?x1\n}",
        "recursionDepth": 36,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P27 wd:Q16 .\n?x0 wdt:P26 wd:Q3343708 .\n?x1 wdt:P26 wd:Q55394 .\nFILTER ( ?x0 != wd:Q3343708 ) .\nFILTER ( ?x1 != wd:Q55394 ) .\nwd:Q136605 wdt:P1040 ?x1 .\nwd:Q136605 wdt:P58 ?x0\n}",
        "questionWithBrackets": "Was [Z] written by [Norma Barzman] 's Canadian spouse and edited by [Henri Verneuil] 's spouse"
    },
    {
        "questionIdx": 73676,
        "questionPatternModEntities": "Was M1 a spouse of a sibling of M0",
        "questionTemplate": "Was [entity] a [ROLE_SIMPLE] of a [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( M1 != ?x0 ) .\nM1 P1 ?x0\n}",
        "recursionDepth": 19,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P3373 wd:Q3911 .\nFILTER ( ?x0 != wd:Q3911 ) .\nFILTER ( wd:Q901998 != ?x0 ) .\nwd:Q901998 wdt:P26 ?x0\n}",
        "questionWithBrackets": "Was [Salvador Moncada] a spouse of a sibling of [Albert II of Belgium]"
    },
    {
        "questionIdx": 73746,
        "questionPatternModEntities": "Was M2 executive produced by M3 , produced by M4 , and directed by M1 's German spouse",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M1 ) .\nM2 P2 M3 .\nM2 P3 M4 .\nM2 P4 ?x0\n}",
        "recursionDepth": 42,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P27 wd:Q183 .\n?x0 wdt:P26 wd:Q72126 .\nFILTER ( ?x0 != wd:Q72126 ) .\nwd:Q706951 wdt:P57 ?x0 .\nwd:Q706951 wdt:P1431 wd:Q41749 .\nwd:Q706951 wdt:P162|wdt:P272 wd:Q41468\n}",
        "questionWithBrackets": "Was [Kolberg] executive produced by [Joseph Goebbels] , produced by [Universum Film AG] , and directed by [Dora Gerson] 's German spouse"
    },
    {
        "questionIdx": 73835,
        "questionPatternModEntities": "Was M0 executive produced by M1 , M2 , M3 , M4 , and M5 , executive produced by M6 , and written by M7",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] , [entity] , [entity] , [entity] , and [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P0 M3 .\nM0 P0 M4 .\nM0 P0 M5 .\nM0 P0 M6 .\nM0 P1 M7\n}",
        "recursionDepth": 47,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q2947967 wdt:P1431 wd:Q8877 .\nwd:Q2947967 wdt:P1431 wd:Q55602356 .\nwd:Q2947967 wdt:P1431 wd:Q362793 .\nwd:Q2947967 wdt:P1431 wd:Q7595870 .\nwd:Q2947967 wdt:P1431 wd:Q849628 .\nwd:Q2947967 wdt:P1431 wd:Q39829 .\nwd:Q2947967 wdt:P58 wd:Q4133060\n}",
        "questionWithBrackets": "Was [Under the Dome] executive produced by [Stacey Snider] , [Stephen King] , [Brian K. Vaughan] , [Jack Bender] , and [Justin Falvey] , executive produced by [Steven Spielberg] , and written by [Rick Cleveland]"
    },
    {
        "questionIdx": 73836,
        "questionPatternModEntities": "Was M0 executive produced by M1 , executive produced by M2 , M3 , M4 , and M5 , and executive produced by M6",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , [entity] , [entity] , and [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P0 M3 .\nM0 P0 M4 .\nM0 P0 M5 .\nM0 P0 M6\n}",
        "recursionDepth": 45,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q2744 wdt:P1431 wd:Q4500 .\nwd:Q2744 wdt:P1431 wd:Q698951 .\nwd:Q2744 wdt:P1431 wd:Q463617 .\nwd:Q2744 wdt:P1431 wd:Q954319 .\nwd:Q2744 wdt:P1431 wd:Q127800 .\nwd:Q2744 wdt:P1431 wd:Q2410088\n}",
        "questionWithBrackets": "Was [The X-Files] executive produced by [Vince Gilligan] , executive produced by [Howard Gordon] , [Glen Morgan] , [Kim Manners] , and [James Wong] , and executive produced by [Michelle MacLaren]"
    },
    {
        "questionIdx": 73846,
        "questionPatternModEntities": "Was M0 executive produced , produced , and edited by M1",
        "questionTemplate": "Was [entity] [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1 .\nM0 P2 M1\n}",
        "recursionDepth": 25,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q854990 wdt:P1040 wd:Q8006 .\nwd:Q854990 wdt:P1431 wd:Q8006 .\nwd:Q854990 wdt:P162|wdt:P272 wd:Q8006\n}",
        "questionWithBrackets": "Was [Kagemusha] executive produced , produced , and edited by [Akira Kurosawa]"
    },
    {
        "questionIdx": 73867,
        "questionPatternModEntities": "Was M2 produced by M3 , directed by M4 , and directed by M1 's Mexican spouse",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M1 ) .\nM2 P2 M3 .\nM2 P3 ?x0 .\nM2 P3 M4\n}",
        "recursionDepth": 41,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P27 wd:Q96 .\n?x0 wdt:P26 wd:Q2626040 .\nFILTER ( ?x0 != wd:Q2626040 ) .\nwd:Q5654856 wdt:P57 ?x0 .\nwd:Q5654856 wdt:P57 wd:Q313044 .\nwd:Q5654856 wdt:P162|wdt:P272 wd:Q1127240\n}",
        "questionWithBrackets": "Was [Abel] produced by [Secretariat of Culture] , directed by [Diego Luna] , and directed by [Camila Sodi] 's Mexican spouse"
    },
    {
        "questionIdx": 73879,
        "questionPatternModEntities": "Was M2 's spouse a German sibling of M0",
        "questionTemplate": "Was [entity] 's [ROLE_SIMPLE] a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P2 M2 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x0 != M2 )\n}",
        "recursionDepth": 22,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P27 wd:Q183 .\n?x0 wdt:P3373 wd:Q65350 .\n?x0 wdt:P26 wd:Q77960 .\nFILTER ( ?x0 != wd:Q65350 ) .\nFILTER ( ?x0 != wd:Q77960 )\n}",
        "questionWithBrackets": "Was [Marianne von Weizs\u00e4cker] 's spouse a German sibling of [Carl Friedrich von Weizs\u00e4cker]"
    },
    {
        "questionIdx": 73951,
        "questionPatternModEntities": "Was M1 employed by M0 's child , employed by M2 and M3 , and employed by M4 and M5",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] , [VP_SIMPLE] by [entity] and [entity] , and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 ?x0 .\nM1 P1 M2 .\nM1 P1 M3 .\nM1 P1 M4 .\nM1 P1 M5\n}",
        "recursionDepth": 44,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P749 wd:Q1065 .\nwd:Q2965934 wdt:P108 ?x0 .\nwd:Q2965934 wdt:P108 wd:Q3083542 .\nwd:Q2965934 wdt:P108 wd:Q1322641 .\nwd:Q2965934 wdt:P108 wd:Q1127220 .\nwd:Q2965934 wdt:P108 wd:Q7809\n}",
        "questionWithBrackets": "Was [Christine Kelly] employed by [United Nations] 's child , employed by [Conseil sup\u00e9rieur de l'audiovisuel] and [France 3] , and employed by [UNESCO] and [CNews]"
    },
    {
        "questionIdx": 73997,
        "questionPatternModEntities": "Was M0 M4 's Canadian Chinese male parent",
        "questionTemplate": "Was [entity] [entity] 's [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P1 M3 .\nM0 P2 M4\n}",
        "recursionDepth": 26,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q704140 wdt:P40|wdt:P355 wd:Q97351767 .\nwd:Q704140 wdt:P21 wd:Q6581097 .\nwd:Q704140 wdt:P27 wd:Q148 .\nwd:Q704140 wdt:P27 wd:Q16\n}",
        "questionWithBrackets": "Was [David Chiang] [John Chiang, Jr] 's Canadian Chinese male parent"
    },
    {
        "questionIdx": 74000,
        "questionPatternModEntities": "Was M0 M1 's male Chinese Canadian employee",
        "questionTemplate": "Was [entity] [entity] 's [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M2 .\nM0 P1 M3 .\nM0 P2 M4\n}",
        "recursionDepth": 26,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q1345573 wdt:P108 wd:Q503424 .\nwd:Q1345573 wdt:P21 wd:Q6581097 .\nwd:Q1345573 wdt:P27 wd:Q148 .\nwd:Q1345573 wdt:P27 wd:Q16\n}",
        "questionWithBrackets": "Was [Jerome Ch'en] [University of Leeds] 's male Chinese Canadian employee"
    },
    {
        "questionIdx": 74130,
        "questionPatternModEntities": "Was M1 edited by , produced by , directed by , and executive produced by a parent of M0",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 ?x0 .\nM1 P2 ?x0 .\nM1 P3 ?x0 .\nM1 P4 ?x0\n}",
        "recursionDepth": 39,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q1620638 .\nwd:Q854990 wdt:P57 ?x0 .\nwd:Q854990 wdt:P1040 ?x0 .\nwd:Q854990 wdt:P1431 ?x0 .\nwd:Q854990 wdt:P162|wdt:P272 ?x0\n}",
        "questionWithBrackets": "Was [Kagemusha] edited by , produced by , directed by , and executive produced by a parent of [Hisao Kurosawa]"
    },
    {
        "questionIdx": 74185,
        "questionPatternModEntities": "Was M1 written , edited , executive produced , and produced by M0 's parent",
        "questionTemplate": "Was [entity] [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 ?x0 .\nM1 P2 ?x0 .\nM1 P3 ?x0 .\nM1 P4 ?x0\n}",
        "recursionDepth": 34,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q1620638 .\nwd:Q854990 wdt:P1040 ?x0 .\nwd:Q854990 wdt:P1431 ?x0 .\nwd:Q854990 wdt:P162|wdt:P272 ?x0 .\nwd:Q854990 wdt:P58 ?x0\n}",
        "questionWithBrackets": "Was [Kagemusha] written , edited , executive produced , and produced by [Hisao Kurosawa] 's parent"
    },
    {
        "questionIdx": 74207,
        "questionPatternModEntities": "Was M0 M1 's sibling , spouse , and parent",
        "questionTemplate": "Was [entity] [entity] 's [ROLE_SIMPLE] , [ROLE_SIMPLE] , and [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\nFILTER ( M0 != M1 ) .\nFILTER ( M0 != M1 ) .\nM0 P0 M1 .\nM0 P1 M1 .\nM0 P2 M1\n}",
        "recursionDepth": 20,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nFILTER ( wd:Q1523 != wd:Q443473 ) .\nFILTER ( wd:Q1523 != wd:Q443473 ) .\nwd:Q1523 wdt:P40|wdt:P355 wd:Q443473 .\nwd:Q1523 wdt:P3373 wd:Q443473 .\nwd:Q1523 wdt:P26 wd:Q443473\n}",
        "questionWithBrackets": "Was [Ramesses II] [Henutmire] 's sibling , spouse , and parent"
    },
    {
        "questionIdx": 74211,
        "questionPatternModEntities": "Was M1 M0 's sibling 's parent and sibling",
        "questionTemplate": "Was [entity] [entity] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE] and [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( M1 != ?x0 ) .\nM1 P0 ?x0 .\nM1 P1 ?x0\n}",
        "recursionDepth": 20,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P3373 wd:Q1043 .\nFILTER ( ?x0 != wd:Q1043 ) .\nFILTER ( wd:Q64706973 != ?x0 ) .\nwd:Q64706973 wdt:P40|wdt:P355 ?x0 .\nwd:Q64706973 wdt:P3373 ?x0\n}",
        "questionWithBrackets": "Was [Anna Maria Linn\u00e6] [Carl Linnaeus] 's sibling 's parent and sibling"
    },
    {
        "questionIdx": 74218,
        "questionPatternModEntities": "Was M0 's sibling and spouse M1 's parent",
        "questionTemplate": "Was [entity] 's [ROLE_SIMPLE] and [ROLE_SIMPLE] [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P2 M0 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x0 != M0 )\n}",
        "recursionDepth": 20,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q4064 .\n?x0 wdt:P3373 wd:Q1532 .\n?x0 wdt:P26 wd:Q1532 .\nFILTER ( ?x0 != wd:Q1532 ) .\nFILTER ( ?x0 != wd:Q1532 )\n}",
        "questionWithBrackets": "Was [Ramesses IV] 's sibling and spouse [Ramesses V] 's parent"
    },
    {
        "questionIdx": 74223,
        "questionPatternModEntities": "Was M0 edited by M4 and M5 , written by M2 , produced by M3 , and executive produced by M1",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] and [entity] , [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M2 .\nM0 P2 M3 .\nM0 P3 M4 .\nM0 P3 M5\n}",
        "recursionDepth": 46,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q21527875 wdt:P1040 wd:Q16980620 .\nwd:Q21527875 wdt:P1040 wd:Q28492224 .\nwd:Q21527875 wdt:P1431 wd:Q35332 .\nwd:Q21527875 wdt:P162|wdt:P272 wd:Q28534248 .\nwd:Q21527875 wdt:P58 wd:Q2394090\n}",
        "questionWithBrackets": "Was [Moonlight] edited by [Joi McMillon] and [Nat Sanders] , written by [Tarell Alvin McCraney] , produced by [Adele Romanski] , and executive produced by [Brad Pitt]"
    },
    {
        "questionIdx": 74267,
        "questionPatternModEntities": "Was M0 's Canadian sibling influenced by M1 and influenced by M2",
        "questionTemplate": "Was [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] [VP_SIMPLE] by [entity] and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\n?x0 P2 M3 .\nFILTER ( ?x0 != M0 )\n}",
        "recursionDepth": 32,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P737 wd:Q714 .\n?x0 wdt:P737 wd:Q165911 .\n?x0 wdt:P27 wd:Q16 .\n?x0 wdt:P3373 wd:Q27801043 .\nFILTER ( ?x0 != wd:Q27801043 )\n}",
        "questionWithBrackets": "Was [Jazmyn Bieber] 's Canadian sibling influenced by [Stevie Wonder] and influenced by [Usher]"
    },
    {
        "questionIdx": 74268,
        "questionPatternModEntities": "Was M1 directed by , edited by , produced by , executive produced by , and written by a spouse of M0",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nM1 P1 ?x0 .\nM1 P2 ?x0 .\nM1 P3 ?x0 .\nM1 P4 ?x0 .\nM1 P5 ?x0\n}",
        "recursionDepth": 45,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P26 wd:Q3032150 .\nFILTER ( ?x0 != wd:Q3032150 ) .\nwd:Q854990 wdt:P57 ?x0 .\nwd:Q854990 wdt:P1040 ?x0 .\nwd:Q854990 wdt:P1431 ?x0 .\nwd:Q854990 wdt:P162|wdt:P272 ?x0 .\nwd:Q854990 wdt:P58 ?x0\n}",
        "questionWithBrackets": "Was [Kagemusha] directed by , edited by , produced by , executive produced by , and written by a spouse of [Y\u014dko Yaguchi]"
    },
    {
        "questionIdx": 74275,
        "questionPatternModEntities": "Was M1 edited by , produced by , directed by , executive produced by , and written by M0 's spouse",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nM1 P1 ?x0 .\nM1 P2 ?x0 .\nM1 P3 ?x0 .\nM1 P4 ?x0 .\nM1 P5 ?x0\n}",
        "recursionDepth": 43,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P26 wd:Q3032150 .\nFILTER ( ?x0 != wd:Q3032150 ) .\nwd:Q854990 wdt:P57 ?x0 .\nwd:Q854990 wdt:P1040 ?x0 .\nwd:Q854990 wdt:P1431 ?x0 .\nwd:Q854990 wdt:P162|wdt:P272 ?x0 .\nwd:Q854990 wdt:P58 ?x0\n}",
        "questionWithBrackets": "Was [Kagemusha] edited by , produced by , directed by , executive produced by , and written by [Y\u014dko Yaguchi] 's spouse"
    },
    {
        "questionIdx": 74277,
        "questionPatternModEntities": "Was M1 edited by , written by , executive produced by , and directed by a parent of M0",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 ?x0 .\nM1 P2 ?x0 .\nM1 P3 ?x0 .\nM1 P4 ?x0\n}",
        "recursionDepth": 39,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q1620638 .\nwd:Q854990 wdt:P57 ?x0 .\nwd:Q854990 wdt:P1040 ?x0 .\nwd:Q854990 wdt:P1431 ?x0 .\nwd:Q854990 wdt:P58 ?x0\n}",
        "questionWithBrackets": "Was [Kagemusha] edited by , written by , executive produced by , and directed by a parent of [Hisao Kurosawa]"
    },
    {
        "questionIdx": 74281,
        "questionPatternModEntities": "Was M1 executive produced by , directed by , produced by , and edited by M0 's parent",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 ?x0 .\nM1 P2 ?x0 .\nM1 P3 ?x0 .\nM1 P4 ?x0\n}",
        "recursionDepth": 37,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q1620638 .\nwd:Q854990 wdt:P57 ?x0 .\nwd:Q854990 wdt:P1040 ?x0 .\nwd:Q854990 wdt:P1431 ?x0 .\nwd:Q854990 wdt:P162|wdt:P272 ?x0\n}",
        "questionWithBrackets": "Was [Kagemusha] executive produced by , directed by , produced by , and edited by [Hisao Kurosawa] 's parent"
    },
    {
        "questionIdx": 74294,
        "questionPatternModEntities": "Was M1 produced by , written by , directed by , edited by , and executive produced by M0 's parent",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 ?x0 .\nM1 P2 ?x0 .\nM1 P3 ?x0 .\nM1 P4 ?x0 .\nM1 P5 ?x0\n}",
        "recursionDepth": 43,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q1620638 .\nwd:Q854990 wdt:P57 ?x0 .\nwd:Q854990 wdt:P1040 ?x0 .\nwd:Q854990 wdt:P1431 ?x0 .\nwd:Q854990 wdt:P162|wdt:P272 ?x0 .\nwd:Q854990 wdt:P58 ?x0\n}",
        "questionWithBrackets": "Was [Kagemusha] produced by , written by , directed by , edited by , and executive produced by [Hisao Kurosawa] 's parent"
    },
    {
        "questionIdx": 74299,
        "questionPatternModEntities": "Was M1 written by , directed by , produced by , and edited by a spouse of M0",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nM1 P1 ?x0 .\nM1 P2 ?x0 .\nM1 P3 ?x0 .\nM1 P4 ?x0\n}",
        "recursionDepth": 38,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P26 wd:Q6813152 .\nFILTER ( ?x0 != wd:Q6813152 ) .\nwd:Q17738 wdt:P57 ?x0 .\nwd:Q17738 wdt:P1040 ?x0 .\nwd:Q17738 wdt:P162|wdt:P272 ?x0 .\nwd:Q17738 wdt:P58 ?x0\n}",
        "questionWithBrackets": "Was [Star Wars: Episode IV \u2013 A New Hope] written by , directed by , produced by , and edited by a spouse of [Mellody Hobson]"
    },
    {
        "questionIdx": 74330,
        "questionPatternModEntities": "Was M0 produced by and executive produced by M1",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1\n}",
        "recursionDepth": 21,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q221102 wdt:P1431 wd:Q134867 .\nwd:Q221102 wdt:P162|wdt:P272 wd:Q134867\n}",
        "questionWithBrackets": "Was [28 Weeks Later] produced by and executive produced by [Danny Boyle]"
    },
    {
        "questionIdx": 74334,
        "questionPatternModEntities": "Was M0 edited , produced , and written by M1 and M2",
        "questionTemplate": "Was [entity] [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P1 M1 .\nM0 P1 M2 .\nM0 P2 M1 .\nM0 P2 M2\n}",
        "recursionDepth": 28,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q20729551 wdt:P1040 wd:Q562108 .\nwd:Q20729551 wdt:P1040 wd:Q1687239 .\nwd:Q20729551 wdt:P162|wdt:P272 wd:Q562108 .\nwd:Q20729551 wdt:P162|wdt:P272 wd:Q1687239 .\nwd:Q20729551 wdt:P58 wd:Q562108 .\nwd:Q20729551 wdt:P58 wd:Q1687239\n}",
        "questionWithBrackets": "Was [Stop for Bud] edited , produced , and written by [J\u00f8rgen Leth] and [Jens J\u00f8rgen Thorsen]"
    },
    {
        "questionIdx": 74336,
        "questionPatternModEntities": "Was M0 written and edited by M1 , M2 , and M3",
        "questionTemplate": "Was [entity] [VP_SIMPLE] and [VP_SIMPLE] by [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P0 M3 .\nM0 P1 M1 .\nM0 P1 M2 .\nM0 P1 M3\n}",
        "recursionDepth": 26,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q20729551 wdt:P1040 wd:Q562108 .\nwd:Q20729551 wdt:P1040 wd:Q1687239 .\nwd:Q20729551 wdt:P1040 wd:Q35979475 .\nwd:Q20729551 wdt:P58 wd:Q562108 .\nwd:Q20729551 wdt:P58 wd:Q1687239 .\nwd:Q20729551 wdt:P58 wd:Q35979475\n}",
        "questionWithBrackets": "Was [Stop for Bud] written and edited by [Ole John] , [J\u00f8rgen Leth] , and [Jens J\u00f8rgen Thorsen]"
    },
    {
        "questionIdx": 74347,
        "questionPatternModEntities": "Was M1 's prequel M0",
        "questionTemplate": "Was [entity] 's [ROLE_SIMPLE] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1\n}",
        "recursionDepth": 11,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q112745 wdt:P156 wd:Q230\n}",
        "questionWithBrackets": "Was [Georgia] 's prequel [Kingdom of Lori]"
    },
    {
        "questionIdx": 74393,
        "questionPatternModEntities": "Was M0 's male sibling influenced by M1 , M2 , and M3 , influenced by M4 , and influenced by M5",
        "questionTemplate": "Was [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] [VP_SIMPLE] by [entity] , [entity] , and [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\n?x0 P1 M3 .\n?x0 P1 M4 .\n?x0 P1 M5 .\n?x0 P2 M6 .\nFILTER ( ?x0 != M0 )\n}",
        "recursionDepth": 48,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P737 wd:Q502 .\n?x0 wdt:P737 wd:Q379912 .\n?x0 wdt:P737 wd:Q692 .\n?x0 wdt:P737 wd:Q991 .\n?x0 wdt:P737 wd:Q1290 .\n?x0 wdt:P21 wd:Q6581097 .\n?x0 wdt:P3373 wd:Q77377 .\nFILTER ( ?x0 != wd:Q77377 )\n}",
        "questionWithBrackets": "Was [Elisabeth F\u00f6rster-Nietzsche] 's male sibling influenced by [William Shakespeare] , [Bernard Mandeville] , and [Stendhal] , influenced by [Fyodor Dostoyevsky] , and influenced by [Blaise Pascal]"
    },
    {
        "questionIdx": 74394,
        "questionPatternModEntities": "Was M0 's sibling influenced by M1 , influenced by M2 and M3 , and influenced by M4 and M5",
        "questionTemplate": "Was [entity] 's [ROLE_SIMPLE] [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] and [entity] , and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\n?x0 P1 M3 .\n?x0 P1 M4 .\n?x0 P1 M5 .\nFILTER ( ?x0 != M0 )\n}",
        "recursionDepth": 44,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P737 wd:Q504 .\n?x0 wdt:P737 wd:Q7243 .\n?x0 wdt:P737 wd:Q7200 .\n?x0 wdt:P737 wd:Q171976 .\n?x0 wdt:P737 wd:Q991 .\n?x0 wdt:P3373 wd:Q1978234 .\nFILTER ( ?x0 != wd:Q1978234 )\n}",
        "questionWithBrackets": "Was [Maria Chekhova] 's sibling influenced by [Fyodor Dostoyevsky] , influenced by [Leo Tolstoy] and [Alexander Pushkin] , and influenced by [\u00c9mile Zola] and [Alexander Ostrovsky]"
    },
    {
        "questionIdx": 74398,
        "questionPatternModEntities": "Was M1 's female spouse 's spouse M2",
        "questionTemplate": "Was [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] 's [ROLE_SIMPLE] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M1 ) .\nFILTER ( M2 != ?x0 ) .\nM2 P1 ?x0\n}",
        "recursionDepth": 20,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P21 wd:Q6581072 .\n?x0 wdt:P26 wd:Q2628 .\nFILTER ( ?x0 != wd:Q2628 ) .\nFILTER ( wd:Q110966 != ?x0 ) .\nwd:Q110966 wdt:P26 ?x0\n}",
        "questionWithBrackets": "Was [Walter Ulbricht] 's female spouse 's spouse [Erich Wendt]"
    },
    {
        "questionIdx": 74438,
        "questionPatternModEntities": "Was M1 's British Japanese sibling M0",
        "questionTemplate": "Was [entity] 's [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nFILTER ( M0 != M1 ) .\nM0 P0 M1 .\nM0 P1 M2 .\nM0 P1 M3\n}",
        "recursionDepth": 21,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nFILTER ( wd:Q313638 != wd:Q96087979 ) .\nwd:Q313638 wdt:P27 wd:Q17 .\nwd:Q313638 wdt:P27 wd:Q145 .\nwd:Q313638 wdt:P3373 wd:Q96087979\n}",
        "questionWithBrackets": "Was [James Daniel Hearn] 's British Japanese sibling [Lafcadio Hearn]"
    },
    {
        "questionIdx": 74444,
        "questionPatternModEntities": "Was M1 employed by M2 and M3 , employed by a child of M0 , and employed by M4 , M5 , and M6",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] and [entity] , [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity] , and [VP_SIMPLE] by [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 ?x0 .\nM1 P1 M2 .\nM1 P1 M3 .\nM1 P1 M4 .\nM1 P1 M5 .\nM1 P1 M6\n}",
        "recursionDepth": 49,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P749 wd:Q458 .\nwd:Q3430381 wdt:P108 ?x0 .\nwd:Q3430381 wdt:P108 wd:Q3344746 .\nwd:Q3430381 wdt:P108 wd:Q207770 .\nwd:Q3430381 wdt:P108 wd:Q8880 .\nwd:Q3430381 wdt:P108 wd:Q144617 .\nwd:Q3430381 wdt:P108 wd:Q642616\n}",
        "questionWithBrackets": "Was [Riccardo Perissich] employed by [Pirelli] and [Notre Europe] , employed by a child of [European Union] , and employed by [TIM Group] , [SEAT Pagine Gialle] , and [European Commission]"
    },
    {
        "questionIdx": 74557,
        "questionPatternModEntities": "Was M0 executive produced by M1 , M2 , and M3 , directed by M5 , M6 , and M7 , and produced by M4",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] , [entity] , and [entity] , [VP_SIMPLE] by [entity] , [entity] , and [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P0 M3 .\nM0 P1 M4 .\nM0 P2 M5 .\nM0 P2 M6 .\nM0 P2 M7\n}",
        "recursionDepth": 47,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q2947967 wdt:P57 wd:Q7117319 .\nwd:Q2947967 wdt:P57 wd:Q1356510 .\nwd:Q2947967 wdt:P57 wd:Q360477 .\nwd:Q2947967 wdt:P1431 wd:Q39829 .\nwd:Q2947967 wdt:P1431 wd:Q849628 .\nwd:Q2947967 wdt:P1431 wd:Q8877 .\nwd:Q2947967 wdt:P162|wdt:P272 wd:Q457893\n}",
        "questionWithBrackets": "Was [Under the Dome] executive produced by [Brian K. Vaughan] , [Stephen King] , and [Steven Spielberg] , directed by [Peter Weller] , [P. J. Pesce] , and [Ernest Dickerson] , and produced by [Amblin Entertainment]"
    },
    {
        "questionIdx": 74606,
        "questionPatternModEntities": "Was M0 a male employee of M1",
        "questionTemplate": "Was [entity] a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M2\n}",
        "recursionDepth": 18,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q76694 wdt:P108 wd:Q95 .\nwd:Q76694 wdt:P21 wd:Q6581097\n}",
        "questionWithBrackets": "Was [Jawed Karim] a male employee of [Google]"
    },
    {
        "questionIdx": 74694,
        "questionPatternModEntities": "Was M0 directed , produced , and written by M1",
        "questionTemplate": "Was [entity] [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1 .\nM0 P2 M1\n}",
        "recursionDepth": 24,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q1068968 wdt:P57 wd:Q882 .\nwd:Q1068968 wdt:P162|wdt:P272 wd:Q882 .\nwd:Q1068968 wdt:P58 wd:Q882\n}",
        "questionWithBrackets": "Was [A King in New York] directed , produced , and written by [Charlie Chaplin]"
    },
    {
        "questionIdx": 74700,
        "questionPatternModEntities": "Was M0 written , executive produced , edited , and produced by M1",
        "questionTemplate": "Was [entity] [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1 .\nM0 P2 M1 .\nM0 P3 M1\n}",
        "recursionDepth": 30,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q854990 wdt:P1040 wd:Q8006 .\nwd:Q854990 wdt:P1431 wd:Q8006 .\nwd:Q854990 wdt:P162|wdt:P272 wd:Q8006 .\nwd:Q854990 wdt:P58 wd:Q8006\n}",
        "questionWithBrackets": "Was [Kagemusha] written , executive produced , edited , and produced by [Akira Kurosawa]"
    },
    {
        "questionIdx": 74733,
        "questionPatternModEntities": "Was M0 M1 's Dutch employee",
        "questionTemplate": "Was [entity] [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M2\n}",
        "recursionDepth": 16,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q97645 wdt:P108 wd:Q32120 .\nwd:Q97645 wdt:P27 wd:Q29999\n}",
        "questionWithBrackets": "Was [Johann Veit] [University of Halle-Wittenberg] 's Dutch employee"
    },
    {
        "questionIdx": 74766,
        "questionPatternModEntities": "Was M1 executive produced by , written by , and edited by M0 's sibling",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nM1 P1 ?x0 .\nM1 P2 ?x0 .\nM1 P3 ?x0\n}",
        "recursionDepth": 31,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P3373 wd:Q28370409 .\nFILTER ( ?x0 != wd:Q28370409 ) .\nwd:Q28146810 wdt:P1040 ?x0 .\nwd:Q28146810 wdt:P1431 ?x0 .\nwd:Q28146810 wdt:P58 ?x0\n}",
        "questionWithBrackets": "Was [Bullets, Fangs and Dinner at 8] executive produced by , written by , and edited by [Everton Rocca] 's sibling"
    },
    {
        "questionIdx": 74798,
        "questionPatternModEntities": "Was M0 a Spanish employee of M1 and M2",
        "questionTemplate": "Was [entity] a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P1 M3\n}",
        "recursionDepth": 22,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q46739 wdt:P108 wd:Q35794 .\nwd:Q46739 wdt:P108 wd:Q209842 .\nwd:Q46739 wdt:P27 wd:Q29\n}",
        "questionWithBrackets": "Was [Octavio Paz] a Spanish employee of [University of Cambridge] and [University of Paris]"
    },
    {
        "questionIdx": 74879,
        "questionPatternModEntities": "Was M2 founded by M1 's female spouse , founded by M3 , and founded by M4",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M1 ) .\nM2 P2 ?x0 .\nM2 P2 M3 .\nM2 P2 M4\n}",
        "recursionDepth": 41,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P21 wd:Q6581072 .\n?x0 wdt:P26 wd:Q896740 .\nFILTER ( ?x0 != wd:Q896740 ) .\nwd:Q1102919 wdt:P112 ?x0 .\nwd:Q1102919 wdt:P112 wd:Q400 .\nwd:Q1102919 wdt:P112 wd:Q40263\n}",
        "questionWithBrackets": "Was [ClubJenna] founded by [Brad Armstrong] 's female spouse , founded by [Jenna Jameson] , and founded by [Jay Grdina]"
    },
    {
        "questionIdx": 74888,
        "questionPatternModEntities": "Was M1 founded by M2 , founded by M0 's child , and founded by M3 and M4",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] , and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 ?x0 .\nM1 P1 M2 .\nM1 P1 M3 .\nM1 P1 M4\n}",
        "recursionDepth": 40,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P749 wd:Q20800404 .\nwd:Q79106566 wdt:P112 ?x0 .\nwd:Q79106566 wdt:P112 wd:Q312 .\nwd:Q79106566 wdt:P112 wd:Q3884 .\nwd:Q79106566 wdt:P112 wd:Q95\n}",
        "questionWithBrackets": "Was [Connected Home over IP] founded by [Amazon] , founded by [Alphabet Inc.] 's child , and founded by [Google] and [Apple Inc.]"
    },
    {
        "questionIdx": 74894,
        "questionPatternModEntities": "Was M1 founded by M2 , founded by M3 , founded by M0 's child , and founded by M4",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 ?x0 .\nM1 P1 M2 .\nM1 P1 M3 .\nM1 P1 M4\n}",
        "recursionDepth": 45,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P749 wd:Q20800404 .\nwd:Q20947086 wdt:P112 ?x0 .\nwd:Q20947086 wdt:P112 wd:Q95 .\nwd:Q20947086 wdt:P112 wd:Q2283 .\nwd:Q20947086 wdt:P112 wd:Q907311\n}",
        "questionWithBrackets": "Was [Alliance for Open Media] founded by [Google] , founded by [Netflix] , founded by [Alphabet Inc.] 's child , and founded by [Microsoft]"
    },
    {
        "questionIdx": 74903,
        "questionPatternModEntities": "Was M1 founded by a parent of M0 , founded by M2 and M3 , and founded by M4",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity] , [VP_SIMPLE] by [entity] and [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 ?x0 .\nM1 P1 M2 .\nM1 P1 M3 .\nM1 P1 M4\n}",
        "recursionDepth": 42,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q106204654 .\nwd:Q151 wdt:P112 ?x0 .\nwd:Q151 wdt:P112 wd:Q180 .\nwd:Q151 wdt:P112 wd:Q181 .\nwd:Q151 wdt:P112 wd:Q185\n}",
        "questionWithBrackets": "Was [Wiktionary] founded by a parent of [Wikimedia, LLC] , founded by [Jimmy Wales] and [Larry Sanger] , and founded by [Wikimedia Foundation]"
    },
    {
        "questionIdx": 74905,
        "questionPatternModEntities": "Was M1 founded by a sibling of M0 , founded by M2 , and founded by M3 and M4",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nM1 P1 ?x0 .\nM1 P1 M2 .\nM1 P1 M3 .\nM1 P1 M4\n}",
        "recursionDepth": 42,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P3373 wd:Q3291439 .\nFILTER ( ?x0 != wd:Q3291439 ) .\nwd:Q25379453 wdt:P112 ?x0 .\nwd:Q25379453 wdt:P112 wd:Q1871995 .\nwd:Q25379453 wdt:P112 wd:Q2042 .\nwd:Q25379453 wdt:P112 wd:Q929334\n}",
        "questionWithBrackets": "Was [No label defined] founded by a sibling of [Marie-Agn\u00e8s de Gaulle] , founded by [Charles de Gaulle] , and founded by [Alain Peyrefitte] and [Louis Terrenoire]"
    },
    {
        "questionIdx": 74906,
        "questionPatternModEntities": "Was M2 founded by a employee of M0 and M1 , founded by M3 and M4 , and founded by M5",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity] and [entity] , [VP_SIMPLE] by [entity] and [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\nM2 P1 ?x0 .\nM2 P1 M3 .\nM2 P1 M4 .\nM2 P1 M5\n}",
        "recursionDepth": 46,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P108 wd:Q935818 .\n?x0 wdt:P108 wd:Q2665980 .\nwd:Q13679 wdt:P112 ?x0 .\nwd:Q13679 wdt:P112 wd:Q180 .\nwd:Q13679 wdt:P112 wd:Q181 .\nwd:Q13679 wdt:P112 wd:Q15154734\n}",
        "questionWithBrackets": "Was [Wikispecies] founded by a employee of [Bomis] and [Guardian Media Group] , founded by [Benedikt Mandl] and [Wikimedia Foundation] , and founded by [Jimmy Wales]"
    },
    {
        "questionIdx": 74907,
        "questionPatternModEntities": "Was M2 founded by a employee of M0 and M1 , founded by M3 and M4 , and founded by M5 and M6",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity] and [entity] , [VP_SIMPLE] by [entity] and [entity] , and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\nM2 P1 ?x0 .\nM2 P1 M3 .\nM2 P1 M4 .\nM2 P1 M5 .\nM2 P1 M6\n}",
        "recursionDepth": 50,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P108 wd:Q935818 .\n?x0 wdt:P108 wd:Q187801 .\nwd:Q151 wdt:P112 ?x0 .\nwd:Q151 wdt:P112 wd:Q180 .\nwd:Q151 wdt:P112 wd:Q15176445 .\nwd:Q151 wdt:P112 wd:Q181 .\nwd:Q151 wdt:P112 wd:Q185\n}",
        "questionWithBrackets": "Was [Wiktionary] founded by a employee of [Bomis] and [Citizendium] , founded by [Larry Sanger] and [Jimmy Wales] , and founded by [Wikimedia Foundation] and [Daniel Alston]"
    },
    {
        "questionIdx": 74913,
        "questionPatternModEntities": "Was M0 's Swedish employee influenced by M1 and influenced by M2",
        "questionTemplate": "Was [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] [VP_SIMPLE] by [entity] and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\n?x0 P2 M3\n}",
        "recursionDepth": 32,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P737 wd:Q123382 .\n?x0 wdt:P737 wd:Q496850 .\n?x0 wdt:P108 wd:Q185246 .\n?x0 wdt:P27 wd:Q34\n}",
        "questionWithBrackets": "Was [Uppsala University] 's Swedish employee influenced by [Ren\u00e9 Gu\u00e9non] and influenced by [Frithjof Schuon]"
    },
    {
        "questionIdx": 74915,
        "questionPatternModEntities": "Was M0 's Swedish employee 's Swedish sibling M2",
        "questionTemplate": "Was [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( M2 != ?x0 ) .\nM2 P1 M1 .\nM2 P2 ?x0\n}",
        "recursionDepth": 25,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P108 wd:Q1061504 .\n?x0 wdt:P27 wd:Q34 .\nFILTER ( wd:Q121564 != ?x0 ) .\nwd:Q121564 wdt:P27 wd:Q34 .\nwd:Q121564 wdt:P3373 ?x0\n}",
        "questionWithBrackets": "Was [Stockholm School of Economics] 's Swedish employee 's Swedish sibling [Jacob Wallenberg]"
    },
    {
        "questionIdx": 74925,
        "questionPatternModEntities": "Was M1 founded by M0 's spouse and sibling",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] and [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M0 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x0 != M0 ) .\nM1 P2 ?x0\n}",
        "recursionDepth": 21,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P3373 wd:Q225845 .\n?x0 wdt:P26 wd:Q225845 .\nFILTER ( ?x0 != wd:Q225845 ) .\nFILTER ( ?x0 != wd:Q225845 ) .\nwd:Q834058 wdt:P112 ?x0\n}",
        "questionWithBrackets": "Was [Temple of Amenhotep IV] founded by [Kiya] 's spouse and sibling"
    },
    {
        "questionIdx": 74926,
        "questionPatternModEntities": "Was M1 founded by M0 's sibling and spouse",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] and [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M0 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x0 != M0 ) .\nM1 P2 ?x0\n}",
        "recursionDepth": 21,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P3373 wd:Q225845 .\n?x0 wdt:P26 wd:Q225845 .\nFILTER ( ?x0 != wd:Q225845 ) .\nFILTER ( ?x0 != wd:Q225845 ) .\nwd:Q834058 wdt:P112 ?x0\n}",
        "questionWithBrackets": "Was [Temple of Amenhotep IV] founded by [Kiya] 's sibling and spouse"
    },
    {
        "questionIdx": 74929,
        "questionPatternModEntities": "Was M1 founded by a sibling and spouse of M0",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by a [ROLE_SIMPLE] and [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M0 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x0 != M0 ) .\nM1 P2 ?x0\n}",
        "recursionDepth": 23,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P3373 wd:Q225845 .\n?x0 wdt:P26 wd:Q225845 .\nFILTER ( ?x0 != wd:Q225845 ) .\nFILTER ( ?x0 != wd:Q225845 ) .\nwd:Q5736 wdt:P112 ?x0\n}",
        "questionWithBrackets": "Was [Amarna] founded by a sibling and spouse of [Kiya]"
    },
    {
        "questionIdx": 74930,
        "questionPatternModEntities": "Was M1 founded by a spouse and sibling of M0",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by a [ROLE_SIMPLE] and [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M0 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x0 != M0 ) .\nM1 P2 ?x0\n}",
        "recursionDepth": 23,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P3373 wd:Q225845 .\n?x0 wdt:P26 wd:Q225845 .\nFILTER ( ?x0 != wd:Q225845 ) .\nFILTER ( ?x0 != wd:Q225845 ) .\nwd:Q834058 wdt:P112 ?x0\n}",
        "questionWithBrackets": "Was [Temple of Amenhotep IV] founded by a spouse and sibling of [Kiya]"
    },
    {
        "questionIdx": 74942,
        "questionPatternModEntities": "Was M0 Spanish",
        "questionTemplate": "Was [entity] [ADJECTIVE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1\n}",
        "recursionDepth": 9,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q297 wdt:P27 wd:Q29\n}LIMIT 1",
        "questionWithBrackets": "Was [Diego Vel\u00e1zquez] Spanish"
    },
    {
        "questionIdx": 74949,
        "questionPatternModEntities": "Was M0 a French actor of M2",
        "questionTemplate": "Was [entity] a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M2\n}",
        "recursionDepth": 18,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q2834673 wdt:P453 wd:Q24136041 .\nwd:Q2834673 wdt:P27 wd:Q142\n}",
        "questionWithBrackets": "Was [Alexis Victor] a French actor of [Nick Wilde]"
    },
    {
        "questionIdx": 74954,
        "questionPatternModEntities": "Was M1 influenced by M0 's child",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 ?x0\n}",
        "recursionDepth": 16,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P749 wd:Q20800404 .\nwd:Q5281 wdt:P737 ?x0\n}",
        "questionWithBrackets": "Was [Yandex] influenced by [Alphabet Inc.] 's child"
    },
    {
        "questionIdx": 75042,
        "questionPatternModEntities": "Was M2 a French sibling of a Chinese spouse of M1",
        "questionTemplate": "Was [entity] a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M1 ) .\nFILTER ( M2 != ?x0 ) .\nM2 P0 M3 .\nM2 P2 ?x0\n}",
        "recursionDepth": 29,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P27 wd:Q148 .\n?x0 wdt:P26 wd:Q16925237 .\nFILTER ( ?x0 != wd:Q16925237 ) .\nFILTER ( wd:Q15908154 != ?x0 ) .\nwd:Q15908154 wdt:P27 wd:Q142 .\nwd:Q15908154 wdt:P3373 ?x0\n}",
        "questionWithBrackets": "Was [Cheng Zhifan] a French sibling of a Chinese spouse of [Chen Luzhi]"
    },
    {
        "questionIdx": 75083,
        "questionPatternModEntities": "Was M0 M1 's male sibling",
        "questionTemplate": "Was [entity] [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\nFILTER ( M0 != M1 ) .\nM0 P0 M1 .\nM0 P1 M2\n}",
        "recursionDepth": 16,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nFILTER ( wd:Q156778 != wd:Q1407 ) .\nwd:Q156778 wdt:P21 wd:Q6581097 .\nwd:Q156778 wdt:P3373 wd:Q1407\n}",
        "questionWithBrackets": "Was [Nero Claudius Drusus] [Tiberius] 's male sibling"
    },
    {
        "questionIdx": 75111,
        "questionPatternModEntities": "Was M1 founded by M0 's parent",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 ?x0\n}",
        "recursionDepth": 16,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q15330 .\nwd:Q953568 wdt:P112 ?x0\n}",
        "questionWithBrackets": "Was [DDEX] founded by [Waymo] 's parent"
    },
    {
        "questionIdx": 75113,
        "questionPatternModEntities": "Was M2 executive produced by M0 's Dutch sibling",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M0 ) .\nM2 P2 ?x0\n}",
        "recursionDepth": 22,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P27 wd:Q29999 .\n?x0 wdt:P3373 wd:Q469514 .\nFILTER ( ?x0 != wd:Q469514 ) .\nwd:Q490743 wdt:P1431 ?x0\n}",
        "questionWithBrackets": "Was [The Voice] executive produced by [Linda de Mol] 's Dutch sibling"
    },
    {
        "questionIdx": 75128,
        "questionPatternModEntities": "Was M0 's employee M1 's parent",
        "questionTemplate": "Was [entity] 's [ROLE_SIMPLE] [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1\n}",
        "recursionDepth": 15,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q102649059 .\n?x0 wdt:P108 wd:Q95\n}",
        "questionWithBrackets": "Was [Google] 's employee [Kavya Pichai] 's parent"
    },
    {
        "questionIdx": 75135,
        "questionPatternModEntities": "Was M2 written by a German sibling of M0",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M0 ) .\nM2 P2 ?x0\n}",
        "recursionDepth": 23,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P27 wd:Q183 .\n?x0 wdt:P3373 wd:Q1493426 .\nFILTER ( ?x0 != wd:Q1493426 ) .\nwd:Q3896511 wdt:P58 ?x0\n}",
        "questionWithBrackets": "Was [Parsifal] written by a German sibling of [Rosalie Wagner]"
    },
    {
        "questionIdx": 75138,
        "questionPatternModEntities": "Was M0 produced by M1 , directed by M2 , M3 , and M4 , and directed by M5 , M6 , and M7",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , [entity] , and [entity] , and [VP_SIMPLE] by [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M2 .\nM0 P1 M3 .\nM0 P1 M4 .\nM0 P1 M5 .\nM0 P1 M6 .\nM0 P1 M7\n}",
        "recursionDepth": 46,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q43051 wdt:P57 wd:Q6247507 .\nwd:Q43051 wdt:P57 wd:Q2903332 .\nwd:Q43051 wdt:P57 wd:Q3471034 .\nwd:Q43051 wdt:P57 wd:Q715807 .\nwd:Q43051 wdt:P57 wd:Q928976 .\nwd:Q43051 wdt:P57 wd:Q28439679 .\nwd:Q43051 wdt:P162|wdt:P272 wd:Q7414\n}",
        "questionWithBrackets": "Was [Bambi] produced by [The Walt Disney Company] , directed by [Paul Satterfield] , [Samuel Armstrong] , and [David Hand] , and directed by [James Algar] , [Norman Wright] , and [Bill Roberts]"
    },
    {
        "questionIdx": 75353,
        "questionPatternModEntities": "Was M1 influenced by M2 and influenced by a sibling of M0 's parent",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] and [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x1 P1 M0 .\nFILTER ( ?x0 != ?x1 ) .\nM1 P2 ?x0 .\nM1 P2 M2\n}",
        "recursionDepth": 33,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P3373 ?x1 .\n?x1 wdt:P40|wdt:P355 wd:Q15823075 .\nFILTER ( ?x0 != ?x1 ) .\nwd:Q1299 wdt:P737 ?x0 .\nwd:Q1299 wdt:P737 wd:Q255\n}",
        "questionWithBrackets": "Was [The Beatles] influenced by [Ludwig van Beethoven] and influenced by a sibling of [Karl van Beethoven] 's parent"
    },
    {
        "questionIdx": 75454,
        "questionPatternModEntities": "Was M0 M4 's Spanish female Mexican spouse",
        "questionTemplate": "Was [entity] [entity] 's [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\nFILTER ( M0 != M4 ) .\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P1 M3 .\nM0 P2 M4\n}",
        "recursionDepth": 26,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nFILTER ( wd:Q3373731 != wd:Q715461 ) .\nwd:Q3373731 wdt:P21 wd:Q6581072 .\nwd:Q3373731 wdt:P27 wd:Q29 .\nwd:Q3373731 wdt:P27 wd:Q96 .\nwd:Q3373731 wdt:P26 wd:Q715461\n}",
        "questionWithBrackets": "Was [Paz Alicia Garciadiego] [Arturo Ripstein] 's Spanish female Mexican spouse"
    },
    {
        "questionIdx": 75455,
        "questionPatternModEntities": "Was M0 M4 's female Mexican Spanish spouse",
        "questionTemplate": "Was [entity] [entity] 's [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\nFILTER ( M0 != M4 ) .\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P1 M3 .\nM0 P2 M4\n}",
        "recursionDepth": 26,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nFILTER ( wd:Q3373731 != wd:Q715461 ) .\nwd:Q3373731 wdt:P21 wd:Q6581072 .\nwd:Q3373731 wdt:P27 wd:Q29 .\nwd:Q3373731 wdt:P27 wd:Q96 .\nwd:Q3373731 wdt:P26 wd:Q715461\n}",
        "questionWithBrackets": "Was [Paz Alicia Garciadiego] [Arturo Ripstein] 's female Mexican Spanish spouse"
    },
    {
        "questionIdx": 75497,
        "questionPatternModEntities": "Was M0 's Spanish French male employee 's spouse M4",
        "questionTemplate": "Was [entity] 's [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] 's [ROLE_SIMPLE] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\n?x0 P2 M3 .\nFILTER ( M4 != ?x0 ) .\nM4 P3 ?x0\n}",
        "recursionDepth": 30,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P108 wd:Q13371 .\n?x0 wdt:P21 wd:Q6581097 .\n?x0 wdt:P27 wd:Q29 .\n?x0 wdt:P27 wd:Q142 .\nFILTER ( wd:Q263623 != ?x0 ) .\nwd:Q263623 wdt:P26 ?x0\n}",
        "questionWithBrackets": "Was [Harvard University] 's Spanish French male employee 's spouse [Princess Irene of the Netherlands]"
    },
    {
        "questionIdx": 75498,
        "questionPatternModEntities": "Was M0 a Dutch spouse of M2",
        "questionTemplate": "Was [entity] a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nFILTER ( M0 != M2 ) .\nM0 P0 M1 .\nM0 P1 M2\n}",
        "recursionDepth": 18,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nFILTER ( wd:Q125649 != wd:Q57664 ) .\nwd:Q125649 wdt:P27 wd:Q29999 .\nwd:Q125649 wdt:P26 wd:Q57664\n}",
        "questionWithBrackets": "Was [William III of the Netherlands] a Dutch spouse of [Emma of Waldeck and Pyrmont]"
    },
    {
        "questionIdx": 75500,
        "questionPatternModEntities": "Was M1 written and executive produced by M0 's spouse 's sibling",
        "questionTemplate": "Was [entity] [VP_SIMPLE] and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x1 P1 M0 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x1 != M0 ) .\nM1 P2 ?x0 .\nM1 P3 ?x0\n}",
        "recursionDepth": 28,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P3373 ?x1 .\n?x1 wdt:P26 wd:Q719035 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x1 != wd:Q719035 ) .\nwd:Q845102 wdt:P1431 ?x0 .\nwd:Q845102 wdt:P58 ?x0\n}",
        "questionWithBrackets": "Was [Rumble Fish] written and executive produced by [David Shire] 's spouse 's sibling"
    },
    {
        "questionIdx": 75535,
        "questionPatternModEntities": "Was M0 a actor that played M1 and played M2",
        "questionTemplate": "Was [entity] a [NP_SIMPLE] that [VP_SIMPLE] [entity] and [VP_SIMPLE] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2\n}",
        "recursionDepth": 30,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q12611790 wdt:P453 wd:Q905926 .\nwd:Q12611790 wdt:P453 wd:Q913318\n}",
        "questionWithBrackets": "Was [Firebathero] a actor that played [Protoss] and played [Terran]"
    },
    {
        "questionIdx": 75548,
        "questionPatternModEntities": "Was M0 a Italian male Canadian parent of M4",
        "questionTemplate": "Was [entity] a [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P1 M3 .\nM0 P2 M4\n}",
        "recursionDepth": 28,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q28023291 wdt:P40|wdt:P355 wd:Q28023505 .\nwd:Q28023291 wdt:P21 wd:Q6581097 .\nwd:Q28023291 wdt:P27 wd:Q38 .\nwd:Q28023291 wdt:P27 wd:Q16\n}",
        "questionWithBrackets": "Was [Franco Gallo] a Italian male Canadian parent of [Massimiliano Gallo]"
    },
    {
        "questionIdx": 75554,
        "questionPatternModEntities": "Was M0 's spouse influenced by a parent of M1",
        "questionTemplate": "Was [entity] 's [ROLE_SIMPLE] [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x0 P1 M0 .\n?x1 P2 M1 .\nFILTER ( ?x0 != M0 )\n}",
        "recursionDepth": 22,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P737 ?x1 .\n?x0 wdt:P26 wd:Q463978 .\n?x1 wdt:P40|wdt:P355 wd:Q3310371 .\nFILTER ( ?x0 != wd:Q463978 )\n}",
        "questionWithBrackets": "Was [Gabriele M\u00fcnter] 's spouse influenced by a parent of [Michel Monet]"
    },
    {
        "questionIdx": 75631,
        "questionPatternModEntities": "Was M0 directed by , written by , and produced by M1",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1 .\nM0 P2 M1\n}",
        "recursionDepth": 26,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q80379 wdt:P57 wd:Q4465 .\nwd:Q80379 wdt:P162|wdt:P272 wd:Q4465 .\nwd:Q80379 wdt:P58 wd:Q4465\n}",
        "questionWithBrackets": "Was [The Hobbit: An Unexpected Journey] directed by , written by , and produced by [Peter Jackson]"
    },
    {
        "questionIdx": 75715,
        "questionPatternModEntities": "Was M1 influenced by M0 's sibling , influenced by M2 , influenced by M3 and M4 , and influenced by M5",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] , [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] and [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nM1 P1 ?x0 .\nM1 P1 M2 .\nM1 P1 M3 .\nM1 P1 M4 .\nM1 P1 M5\n}",
        "recursionDepth": 49,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P3373 wd:Q318448 .\nFILTER ( ?x0 != wd:Q318448 ) .\nwd:Q501 wdt:P737 ?x0 .\nwd:Q501 wdt:P737 wd:Q535 .\nwd:Q501 wdt:P737 wd:Q43444 .\nwd:Q501 wdt:P737 wd:Q7198 .\nwd:Q501 wdt:P737 wd:Q309854\n}",
        "questionWithBrackets": "Was [Charles Baudelaire] influenced by [Abel Hugo] 's sibling , influenced by [Gustave Flaubert] , influenced by [Ovid] and [Victor Hugo] , and influenced by [Joseph de Maistre]"
    },
    {
        "questionIdx": 75722,
        "questionPatternModEntities": "Was M1 influenced by a sibling of M0 , influenced by M2 , influenced by M3 , and influenced by M4",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity] , [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nM1 P1 ?x0 .\nM1 P1 M2 .\nM1 P1 M3 .\nM1 P1 M4\n}",
        "recursionDepth": 47,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P3373 wd:Q88007074 .\nFILTER ( ?x0 != wd:Q88007074 ) .\nwd:Q9358 wdt:P737 ?x0 .\nwd:Q9358 wdt:P737 wd:Q40213 .\nwd:Q9358 wdt:P737 wd:Q502 .\nwd:Q9358 wdt:P737 wd:Q859\n}",
        "questionWithBrackets": "Was [Friedrich Nietzsche] influenced by a sibling of [Pauline Beyle] , influenced by [William Butler Yeats] , influenced by [Plato] , and influenced by [Stendhal]"
    },
    {
        "questionIdx": 75739,
        "questionPatternModEntities": "Was M0 executive produced , produced , directed , and edited by M1",
        "questionTemplate": "Was [entity] [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1 .\nM0 P2 M1 .\nM0 P3 M1\n}",
        "recursionDepth": 30,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q854990 wdt:P57 wd:Q8006 .\nwd:Q854990 wdt:P1040 wd:Q8006 .\nwd:Q854990 wdt:P1431 wd:Q8006 .\nwd:Q854990 wdt:P162|wdt:P272 wd:Q8006\n}",
        "questionWithBrackets": "Was [Kagemusha] executive produced , produced , directed , and edited by [Akira Kurosawa]"
    },
    {
        "questionIdx": 75748,
        "questionPatternModEntities": "Was M0 's employee M1 's actor",
        "questionTemplate": "Was [entity] 's [ROLE_SIMPLE] [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1\n}",
        "recursionDepth": 15,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P453 wd:Q9054901 .\n?x0 wdt:P108 wd:Q207028\n}",
        "questionWithBrackets": "Was [Mariinsky Theatre] 's employee [Pamina] 's actor"
    },
    {
        "questionIdx": 75756,
        "questionPatternModEntities": "Was M0 Canadian",
        "questionTemplate": "Was [entity] [ADJECTIVE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1\n}",
        "recursionDepth": 9,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q633 wdt:P27 wd:Q16\n}LIMIT 1",
        "questionWithBrackets": "Was [Neil Young] Canadian"
    },
    {
        "questionIdx": 75758,
        "questionPatternModEntities": "Was M0 's parent 's Canadian Swedish spouse M1",
        "questionTemplate": "Was [entity] 's [ROLE_SIMPLE] 's [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( M1 != ?x0 ) .\nM1 P1 M2 .\nM1 P1 M3 .\nM1 P2 ?x0\n}",
        "recursionDepth": 25,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q3178257 .\nFILTER ( wd:Q214289 != ?x0 ) .\nwd:Q214289 wdt:P27 wd:Q16 .\nwd:Q214289 wdt:P27 wd:Q34 .\nwd:Q214289 wdt:P26 ?x0\n}",
        "questionWithBrackets": "Was [Nicolas Todt] 's parent 's Canadian Swedish spouse [Michelle Yeoh]"
    },
    {
        "questionIdx": 75775,
        "questionPatternModEntities": "Was M0 edited by M1 and directed by M2",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M2\n}",
        "recursionDepth": 23,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q2294295 wdt:P57 wd:Q636252 .\nwd:Q2294295 wdt:P1040 wd:Q882\n}",
        "questionWithBrackets": "Was [A Night Out] edited by [Charlie Chaplin] and directed by [George D. Baker]"
    },
    {
        "questionIdx": 75832,
        "questionPatternModEntities": "Was M0 directed by and produced by M1",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1\n}",
        "recursionDepth": 20,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q1278397 wdt:P57 wd:Q392 .\nwd:Q1278397 wdt:P162|wdt:P272 wd:Q392\n}",
        "questionWithBrackets": "Was [Eat the Document] directed by and produced by [Bob Dylan]"
    },
    {
        "questionIdx": 75851,
        "questionPatternModEntities": "Was M2 directed by a British sibling of M0 and edited by M3 and M4",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M0 ) .\nM2 P2 M3 .\nM2 P2 M4 .\nM2 P3 ?x0\n}",
        "recursionDepth": 38,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P27 wd:Q145 .\n?x0 wdt:P3373 wd:Q5237142 .\nFILTER ( ?x0 != wd:Q5237142 ) .\nwd:Q181803 wdt:P57 ?x0 .\nwd:Q181803 wdt:P1040 wd:Q38222 .\nwd:Q181803 wdt:P1040 wd:Q463119\n}",
        "questionWithBrackets": "Was [Star Wars: Episode VI \u2013 Return of the Jedi] directed by a British sibling of [David Marquand] and edited by [Marcia Lucas] and [George Lucas]"
    },
    {
        "questionIdx": 75857,
        "questionPatternModEntities": "Was M1 a male parent of M0 's spouse and sibling",
        "questionTemplate": "Was [entity] a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] 's [ROLE_SIMPLE] and [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M0 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x0 != M0 ) .\nM1 P2 M2 .\nM1 P3 ?x0\n}",
        "recursionDepth": 27,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P3373 wd:Q635 .\n?x0 wdt:P26 wd:Q635 .\nFILTER ( ?x0 != wd:Q635 ) .\nFILTER ( ?x0 != wd:Q635 ) .\nwd:Q39991 wdt:P40|wdt:P355 ?x0 .\nwd:Q39991 wdt:P21 wd:Q6581097\n}",
        "questionWithBrackets": "Was [Ptolemy XII Auletes] a male parent of [Cleopatra] 's spouse and sibling"
    },
    {
        "questionIdx": 75863,
        "questionPatternModEntities": "Was M0 a Spanish German parent of M3",
        "questionTemplate": "Was [entity] a [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P1 M3\n}",
        "recursionDepth": 23,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q62263 wdt:P40|wdt:P355 wd:Q215873 .\nwd:Q62263 wdt:P27 wd:Q183 .\nwd:Q62263 wdt:P27 wd:Q29\n}",
        "questionWithBrackets": "Was [Prince Ludwig Ferdinand of Bavaria] a Spanish German parent of [Prince Adalbert of Bavaria]"
    },
    {
        "questionIdx": 75865,
        "questionPatternModEntities": "Was M0 's British sibling M1 's French sibling",
        "questionTemplate": "Was [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P1 M2 .\n?x0 P1 M3 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x0 != M1 )\n}",
        "recursionDepth": 25,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P27 wd:Q145 .\n?x0 wdt:P27 wd:Q142 .\n?x0 wdt:P3373 wd:Q26085584 .\n?x0 wdt:P3373 wd:Q26086075 .\nFILTER ( ?x0 != wd:Q26085584 ) .\nFILTER ( ?x0 != wd:Q26086075 )\n}",
        "questionWithBrackets": "Was [John Francis Reuel Tolkien] 's British sibling [Priscilla Mary Anne Reuel Tolkien] 's French sibling"
    },
    {
        "questionIdx": 75881,
        "questionPatternModEntities": "Was M0 a Canadian Italian employee of M1 , M2 , M3 , and M4",
        "questionTemplate": "Was [entity] a [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] , [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P0 M3 .\nM0 P0 M4 .\nM0 P1 M5 .\nM0 P1 M6\n}",
        "recursionDepth": 33,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q8262743 wdt:P108 wd:Q3107636 .\nwd:Q8262743 wdt:P108 wd:Q3003832 .\nwd:Q8262743 wdt:P108 wd:Q1424253 .\nwd:Q8262743 wdt:P108 wd:Q14928071 .\nwd:Q8262743 wdt:P27 wd:Q38 .\nwd:Q8262743 wdt:P27 wd:Q16\n}",
        "questionWithBrackets": "Was [Capri Cavanni] a Canadian Italian employee of [Wicked Pictures] , [Pure Play Media] , [Girlfriends Films] , and [New Sensations]"
    },
    {
        "questionIdx": 75882,
        "questionPatternModEntities": "Was M0 a Canadian employee of M1 , M2 , M3 , M4 , M5 , M6 , and M7",
        "questionTemplate": "Was [entity] a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] , [entity] , [entity] , [entity] , [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P0 M3 .\nM0 P0 M4 .\nM0 P0 M5 .\nM0 P0 M6 .\nM0 P0 M7 .\nM0 P1 M8\n}",
        "recursionDepth": 37,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q317521 wdt:P108 wd:Q7555824 .\nwd:Q317521 wdt:P108 wd:Q29043471 .\nwd:Q317521 wdt:P108 wd:Q28874479 .\nwd:Q317521 wdt:P108 wd:Q478214 .\nwd:Q317521 wdt:P108 wd:Q193701 .\nwd:Q317521 wdt:P108 wd:Q483959 .\nwd:Q317521 wdt:P108 wd:Q21708200 .\nwd:Q317521 wdt:P27 wd:Q16\n}",
        "questionWithBrackets": "Was [Elon Musk] a Canadian employee of [SpaceX] , [PayPal] , [Neuralink] , [The Boring Company] , [Tesla, Inc.] , [OpenAI] , and [SolarCity]"
    },
    {
        "questionIdx": 75885,
        "questionPatternModEntities": "Was M0 a Italian employee of M1 , M2 , M3 , M4 , and M5",
        "questionTemplate": "Was [entity] a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] , [entity] , [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P0 M3 .\nM0 P0 M4 .\nM0 P0 M5 .\nM0 P1 M6\n}",
        "recursionDepth": 31,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q71607 wdt:P108 wd:Q153978 .\nwd:Q71607 wdt:P108 wd:Q178848 .\nwd:Q71607 wdt:P108 wd:Q696757 .\nwd:Q71607 wdt:P108 wd:Q835662 .\nwd:Q71607 wdt:P108 wd:Q11942 .\nwd:Q71607 wdt:P27 wd:Q38\n}",
        "questionWithBrackets": "Was [Vittorio H\u00f6sle] a Italian employee of [University of T\u00fcbingen] , [University of Duisburg-Essen] , [University of Notre Dame] , [ETH Z\u00fcrich] , and [Ulm University]"
    },
    {
        "questionIdx": 75915,
        "questionPatternModEntities": "Was M0 executive produced by M1 , M2 , M3 , and M4 , produced by M7 , and written by M5 and M6",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] , [entity] , [entity] , and [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P0 M3 .\nM0 P0 M4 .\nM0 P1 M5 .\nM0 P1 M6 .\nM0 P2 M7\n}",
        "recursionDepth": 47,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q2947967 wdt:P1431 wd:Q8877 .\nwd:Q2947967 wdt:P1431 wd:Q7804237 .\nwd:Q2947967 wdt:P1431 wd:Q55601945 .\nwd:Q2947967 wdt:P1431 wd:Q849628 .\nwd:Q2947967 wdt:P162|wdt:P272 wd:Q457893 .\nwd:Q2947967 wdt:P58 wd:Q6984051 .\nwd:Q2947967 wdt:P58 wd:Q4133060\n}",
        "questionWithBrackets": "Was [Under the Dome] executive produced by [Steven Spielberg] , [Brian K. Vaughan] , [Tim Schlattmann] , and [Darryl Frank] , produced by [Amblin Entertainment] , and written by [Rick Cleveland] and [Neal Baer]"
    },
    {
        "questionIdx": 75918,
        "questionPatternModEntities": "Was M1 edited and produced by a spouse of M0",
        "questionTemplate": "Was [entity] [VP_SIMPLE] and [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nM1 P1 ?x0 .\nM1 P2 ?x0\n}",
        "recursionDepth": 25,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P26 wd:Q3032150 .\nFILTER ( ?x0 != wd:Q3032150 ) .\nwd:Q854990 wdt:P1040 ?x0 .\nwd:Q854990 wdt:P162|wdt:P272 ?x0\n}",
        "questionWithBrackets": "Was [Kagemusha] edited and produced by a spouse of [Y\u014dko Yaguchi]"
    },
    {
        "questionIdx": 75943,
        "questionPatternModEntities": "Was M1 directed by M0 's parent and directed by M2",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 ?x0 .\nM1 P1 M2\n}",
        "recursionDepth": 27,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q104373360 .\nwd:Q1144967 wdt:P57 ?x0 .\nwd:Q1144967 wdt:P57 wd:Q133730\n}",
        "questionWithBrackets": "Was [To Each His Own Cinema] directed by [Riley Sweeney Lynch] 's parent and directed by [Lars von Trier]"
    },
    {
        "questionIdx": 76044,
        "questionPatternModEntities": "Was M1 's Japanese spouse 's Canadian spouse M2",
        "questionTemplate": "Was [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M1 ) .\nFILTER ( M2 != ?x0 ) .\nM2 P0 M3 .\nM2 P1 ?x0\n}",
        "recursionDepth": 25,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P27 wd:Q17 .\n?x0 wdt:P26 wd:Q99692523 .\nFILTER ( ?x0 != wd:Q99692523 ) .\nFILTER ( wd:Q51846070 != ?x0 ) .\nwd:Q51846070 wdt:P27 wd:Q16 .\nwd:Q51846070 wdt:P26 ?x0\n}",
        "questionWithBrackets": "Was [Yan Shanshan] 's Japanese spouse 's Canadian spouse [Lim Cho Cho]"
    },
    {
        "questionIdx": 76050,
        "questionPatternModEntities": "Was M1 's sequel produced by and executive produced by M0",
        "questionTemplate": "Was [entity] 's [ROLE_SIMPLE] [VP_SIMPLE] by and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M0 .\n?x0 P2 M1\n}",
        "recursionDepth": 25,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P1431 wd:Q43994 .\n?x0 wdt:P155 wd:Q605111 .\n?x0 wdt:P162|wdt:P272 wd:Q43994\n}",
        "questionWithBrackets": "Was [The Simpsons shorts] 's sequel produced by and executive produced by [Matt Groening]"
    },
    {
        "questionIdx": 76066,
        "questionPatternModEntities": "Was M1 M0 's sibling 's spouse and sibling",
        "questionTemplate": "Was [entity] [entity] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE] and [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( M1 != ?x0 ) .\nFILTER ( M1 != ?x0 ) .\nM1 P0 ?x0 .\nM1 P1 ?x0\n}",
        "recursionDepth": 20,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P3373 wd:Q3345 .\nFILTER ( ?x0 != wd:Q3345 ) .\nFILTER ( wd:Q3340 != ?x0 ) .\nFILTER ( wd:Q3340 != ?x0 ) .\nwd:Q3340 wdt:P3373 ?x0 .\nwd:Q3340 wdt:P26 ?x0\n}",
        "questionWithBrackets": "Was [Ptolemy IX Lathyros] [Ptolemy X Alexander I] 's sibling 's spouse and sibling"
    },
    {
        "questionIdx": 76302,
        "questionPatternModEntities": "Was M3 M0 's Spanish Italian employee 's spouse",
        "questionTemplate": "Was [entity] [entity] 's [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\nFILTER ( M3 != ?x0 ) .\nM3 P2 ?x0\n}",
        "recursionDepth": 25,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P108 wd:Q7156 .\n?x0 wdt:P27 wd:Q38 .\n?x0 wdt:P27 wd:Q29 .\nFILTER ( wd:Q713928 != ?x0 ) .\nwd:Q713928 wdt:P26 ?x0\n}",
        "questionWithBrackets": "Was [Kevin Cheng] [FC Barcelona] 's Spanish Italian employee 's spouse"
    },
    {
        "questionIdx": 76306,
        "questionPatternModEntities": "Was M2 M1 's male spouse 's spouse",
        "questionTemplate": "Was [entity] [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M1 ) .\nFILTER ( M2 != ?x0 ) .\nM2 P1 ?x0\n}",
        "recursionDepth": 20,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P21 wd:Q6581097 .\n?x0 wdt:P26 wd:Q5105 .\nFILTER ( ?x0 != wd:Q5105 ) .\nFILTER ( wd:Q2851257 != ?x0 ) .\nwd:Q2851257 wdt:P26 ?x0\n}",
        "questionWithBrackets": "Was [Anne Ren\u00e9e] [C\u00e9line Dion] 's male spouse 's spouse"
    },
    {
        "questionIdx": 76336,
        "questionPatternModEntities": "Was M1 produced by a employee of M0",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 ?x0\n}",
        "recursionDepth": 18,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P108 wd:Q359 .\nwd:Q15475237 wdt:P162|wdt:P272 ?x0\n}",
        "questionWithBrackets": "Was [Mediastan] produced by a employee of [WikiLeaks]"
    },
    {
        "questionIdx": 76374,
        "questionPatternModEntities": "Was M0 written by M3 and executive produced by M1 and M2",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P1 M3\n}",
        "recursionDepth": 28,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q102244 wdt:P1431 wd:Q75079 .\nwd:Q102244 wdt:P1431 wd:Q975579 .\nwd:Q102244 wdt:P58 wd:Q362061\n}",
        "questionWithBrackets": "Was [Harry Potter and the Chamber of Secrets] written by [Steve Kloves] and executive produced by [David Barron] and [Chris Columbus]"
    },
    {
        "questionIdx": 76423,
        "questionPatternModEntities": "Was M1 executive produced by M2 , edited by M3 , produced by M0 's spouse , and directed by M4",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nM1 P1 M2 .\nM1 P2 ?x0 .\nM1 P3 M3 .\nM1 P4 M4\n}",
        "recursionDepth": 46,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P26 wd:Q462654 .\nFILTER ( ?x0 != wd:Q462654 ) .\nwd:Q160560 wdt:P57 wd:Q103646 .\nwd:Q160560 wdt:P1040 wd:Q484948 .\nwd:Q160560 wdt:P1431 wd:Q7345 .\nwd:Q160560 wdt:P162|wdt:P272 ?x0\n}",
        "questionWithBrackets": "Was [The Da Vinci Code] executive produced by [Dan Brown] , edited by [Mike Hill] , produced by [Olga Schoberov\u00e1] 's spouse , and directed by [Ron Howard]"
    },
    {
        "questionIdx": 76596,
        "questionPatternModEntities": "Was M3 's Swedish spouse influenced by M0 and M1",
        "questionTemplate": "Was [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P1 M2 .\n?x0 P2 M3 .\nFILTER ( ?x0 != M3 )\n}",
        "recursionDepth": 25,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P737 wd:Q6527 .\n?x0 wdt:P737 wd:Q77057 .\n?x0 wdt:P27 wd:Q34 .\n?x0 wdt:P26 wd:Q79179 .\nFILTER ( ?x0 != wd:Q79179 )\n}",
        "questionWithBrackets": "Was [Frida Uhl] 's Swedish spouse influenced by [Karl Robert Eduard von Hartmann] and [Jean-Jacques Rousseau]"
    },
    {
        "questionIdx": 76722,
        "questionPatternModEntities": "Was M0 distributed by M1 , produced by M5 , distributed by M2 , distributed by M3 , and distributed by M4",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P0 M3 .\nM0 P0 M4 .\nM0 P1 M5\n}",
        "recursionDepth": 50,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q692821 wdt:P750 wd:Q145 .\nwd:Q692821 wdt:P750 wd:Q80948336 .\nwd:Q692821 wdt:P750 wd:Q5371838 .\nwd:Q692821 wdt:P750 wd:Q907311 .\nwd:Q692821 wdt:P162|wdt:P272 wd:Q79618131\n}",
        "questionWithBrackets": "Was [My Summer of Love] distributed by [Vudu] , produced by [Apocalypso Pictures] , distributed by [United Kingdom] , distributed by [Netflix] , and distributed by [FandangoNow]"
    },
    {
        "questionIdx": 76726,
        "questionPatternModEntities": "Was M2 a spouse of a female sibling and spouse of M0",
        "questionTemplate": "Was [entity] a [ROLE_SIMPLE] of a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] and [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P2 M0 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x0 != M0 ) .\nFILTER ( M2 != ?x0 ) .\nM2 P2 ?x0\n}",
        "recursionDepth": 29,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P21 wd:Q6581072 .\n?x0 wdt:P3373 wd:Q3340 .\n?x0 wdt:P26 wd:Q3340 .\nFILTER ( ?x0 != wd:Q3340 ) .\nFILTER ( ?x0 != wd:Q3340 ) .\nFILTER ( wd:Q296446 != ?x0 ) .\nwd:Q296446 wdt:P26 ?x0\n}",
        "questionWithBrackets": "Was [Antiochus IX Cyzicenus] a spouse of a female sibling and spouse of [Ptolemy IX Lathyros]"
    },
    {
        "questionIdx": 76729,
        "questionPatternModEntities": "Was M2 written by a Swedish employee of M0 and produced by M3",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nM2 P2 ?x0 .\nM2 P3 M3\n}",
        "recursionDepth": 34,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P108 wd:Q254283 .\n?x0 wdt:P27 wd:Q34 .\nwd:Q57933964 wdt:P162|wdt:P272 wd:Q2881259 .\nwd:Q57933964 wdt:P58 ?x0\n}",
        "questionWithBrackets": "Was [Freule Julie] written by a Swedish employee of [Royal Swedish Opera] and produced by [Royal Ballet of Flanders]"
    },
    {
        "questionIdx": 76748,
        "questionPatternModEntities": "Was M0 written , directed , and executive produced by M1",
        "questionTemplate": "Was [entity] [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1 .\nM0 P2 M1\n}",
        "recursionDepth": 25,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q854990 wdt:P57 wd:Q8006 .\nwd:Q854990 wdt:P1431 wd:Q8006 .\nwd:Q854990 wdt:P58 wd:Q8006\n}",
        "questionWithBrackets": "Was [Kagemusha] written , directed , and executive produced by [Akira Kurosawa]"
    },
    {
        "questionIdx": 76770,
        "questionPatternModEntities": "Was M0 written by M1 and produced by M2",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M2\n}",
        "recursionDepth": 23,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q220376 wdt:P162|wdt:P272 wd:Q40096 .\nwd:Q220376 wdt:P58 wd:Q4500\n}",
        "questionWithBrackets": "Was [Hancock] written by [Vince Gilligan] and produced by [Will Smith]"
    },
    {
        "questionIdx": 76784,
        "questionPatternModEntities": "Was M1 executive produced , written , directed , produced , and edited by M0 's parent",
        "questionTemplate": "Was [entity] [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 ?x0 .\nM1 P2 ?x0 .\nM1 P3 ?x0 .\nM1 P4 ?x0 .\nM1 P5 ?x0\n}",
        "recursionDepth": 39,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q4739681 .\nwd:Q17738 wdt:P57 ?x0 .\nwd:Q17738 wdt:P1040 ?x0 .\nwd:Q17738 wdt:P1431 ?x0 .\nwd:Q17738 wdt:P162|wdt:P272 ?x0 .\nwd:Q17738 wdt:P58 ?x0\n}",
        "questionWithBrackets": "Was [Star Wars: Episode IV \u2013 A New Hope] executive produced , written , directed , produced , and edited by [Amanda Lucas] 's parent"
    },
    {
        "questionIdx": 76789,
        "questionPatternModEntities": "Was M1 written , directed , executive produced , and edited by a parent of M0",
        "questionTemplate": "Was [entity] [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 ?x0 .\nM1 P2 ?x0 .\nM1 P3 ?x0 .\nM1 P4 ?x0\n}",
        "recursionDepth": 36,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q1620638 .\nwd:Q854990 wdt:P57 ?x0 .\nwd:Q854990 wdt:P1040 ?x0 .\nwd:Q854990 wdt:P1431 ?x0 .\nwd:Q854990 wdt:P58 ?x0\n}",
        "questionWithBrackets": "Was [Kagemusha] written , directed , executive produced , and edited by a parent of [Hisao Kurosawa]"
    },
    {
        "questionIdx": 76790,
        "questionPatternModEntities": "Was M1 written , produced , executive produced , edited , and directed by M0 's parent",
        "questionTemplate": "Was [entity] [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 ?x0 .\nM1 P2 ?x0 .\nM1 P3 ?x0 .\nM1 P4 ?x0 .\nM1 P5 ?x0\n}",
        "recursionDepth": 39,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q1620638 .\nwd:Q854990 wdt:P57 ?x0 .\nwd:Q854990 wdt:P1040 ?x0 .\nwd:Q854990 wdt:P1431 ?x0 .\nwd:Q854990 wdt:P162|wdt:P272 ?x0 .\nwd:Q854990 wdt:P58 ?x0\n}",
        "questionWithBrackets": "Was [Kagemusha] written , produced , executive produced , edited , and directed by [Hisao Kurosawa] 's parent"
    },
    {
        "questionIdx": 76802,
        "questionPatternModEntities": "Was M2 edited and directed by a female spouse of M1",
        "questionTemplate": "Was [entity] [VP_SIMPLE] and [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M1 ) .\nM2 P2 ?x0 .\nM2 P3 ?x0\n}",
        "recursionDepth": 30,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P21 wd:Q6581072 .\n?x0 wdt:P26 wd:Q347950 .\nFILTER ( ?x0 != wd:Q347950 ) .\nwd:Q3206774 wdt:P57 ?x0 .\nwd:Q3206774 wdt:P1040 ?x0\n}",
        "questionWithBrackets": "Was [La Bouche de Jean-Pierre] edited and directed by a female spouse of [Gaspar No\u00e9]"
    },
    {
        "questionIdx": 76808,
        "questionPatternModEntities": "Was M1 's Chinese employee M0",
        "questionTemplate": "Was [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M2\n}",
        "recursionDepth": 16,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q197444 wdt:P108 wd:Q495015 .\nwd:Q197444 wdt:P27 wd:Q148\n}",
        "questionWithBrackets": "Was [Fudan University] 's Chinese employee [Zhao Jingshen]"
    },
    {
        "questionIdx": 76819,
        "questionPatternModEntities": "Was M0 produced by , edited by , written by , and directed by M1 and M2",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P1 M1 .\nM0 P1 M2 .\nM0 P2 M1 .\nM0 P2 M2 .\nM0 P3 M1 .\nM0 P3 M2\n}",
        "recursionDepth": 36,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q20729551 wdt:P57 wd:Q562108 .\nwd:Q20729551 wdt:P57 wd:Q1687239 .\nwd:Q20729551 wdt:P1040 wd:Q562108 .\nwd:Q20729551 wdt:P1040 wd:Q1687239 .\nwd:Q20729551 wdt:P162|wdt:P272 wd:Q562108 .\nwd:Q20729551 wdt:P162|wdt:P272 wd:Q1687239 .\nwd:Q20729551 wdt:P58 wd:Q562108 .\nwd:Q20729551 wdt:P58 wd:Q1687239\n}",
        "questionWithBrackets": "Was [Stop for Bud] produced by , edited by , written by , and directed by [J\u00f8rgen Leth] and [Jens J\u00f8rgen Thorsen]"
    },
    {
        "questionIdx": 76852,
        "questionPatternModEntities": "Was M0 edited and directed by M1 , M2 , M3 , and M4",
        "questionTemplate": "Was [entity] [VP_SIMPLE] and [VP_SIMPLE] by [entity] , [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P0 M3 .\nM0 P0 M4 .\nM0 P1 M1 .\nM0 P1 M2 .\nM0 P1 M3 .\nM0 P1 M4\n}",
        "recursionDepth": 29,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q7906333 wdt:P57 wd:Q1291210 .\nwd:Q7906333 wdt:P57 wd:Q16198328 .\nwd:Q7906333 wdt:P57 wd:Q4207234 .\nwd:Q7906333 wdt:P57 wd:Q4679987 .\nwd:Q7906333 wdt:P1040 wd:Q1291210 .\nwd:Q7906333 wdt:P1040 wd:Q16198328 .\nwd:Q7906333 wdt:P1040 wd:Q4207234 .\nwd:Q7906333 wdt:P1040 wd:Q4679987\n}",
        "questionWithBrackets": "Was [V/H/S/2] edited and directed by [Gareth Evans] , [Jason Eisener] , [Adam Wingard] , and [Eduardo S\u00e1nchez]"
    },
    {
        "questionIdx": 76861,
        "questionPatternModEntities": "Was M1 edited by a parent of M0 , written by M2 , and edited by M3 , M4 , and M5",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 M2 .\nM1 P2 ?x0 .\nM1 P2 M3 .\nM1 P2 M4 .\nM1 P2 M5\n}",
        "recursionDepth": 45,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q1338012 .\nwd:Q14566553 wdt:P1040 ?x0 .\nwd:Q14566553 wdt:P1040 wd:Q31294 .\nwd:Q14566553 wdt:P1040 wd:Q1181629 .\nwd:Q14566553 wdt:P1040 wd:Q18354431 .\nwd:Q14566553 wdt:P58 wd:Q6386180\n}",
        "questionWithBrackets": "Was [Fifty Shades of Grey] edited by a parent of [Emma E. Hickox] , written by [Kelly Marcel] , and edited by [Lisa Gunning] , [Anne V. Coates] , and [Debra Neil-Fisher]"
    },
    {
        "questionIdx": 76865,
        "questionPatternModEntities": "Was M0 edited , written , and directed by M1 , M2 , and M3",
        "questionTemplate": "Was [entity] [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P0 M3 .\nM0 P1 M1 .\nM0 P1 M2 .\nM0 P1 M3 .\nM0 P2 M1 .\nM0 P2 M2 .\nM0 P2 M3\n}",
        "recursionDepth": 31,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q20729551 wdt:P57 wd:Q562108 .\nwd:Q20729551 wdt:P57 wd:Q1687239 .\nwd:Q20729551 wdt:P57 wd:Q35979475 .\nwd:Q20729551 wdt:P1040 wd:Q562108 .\nwd:Q20729551 wdt:P1040 wd:Q1687239 .\nwd:Q20729551 wdt:P1040 wd:Q35979475 .\nwd:Q20729551 wdt:P58 wd:Q562108 .\nwd:Q20729551 wdt:P58 wd:Q1687239 .\nwd:Q20729551 wdt:P58 wd:Q35979475\n}",
        "questionWithBrackets": "Was [Stop for Bud] edited , written , and directed by [Jens J\u00f8rgen Thorsen] , [J\u00f8rgen Leth] , and [Ole John]"
    },
    {
        "questionIdx": 76923,
        "questionPatternModEntities": "Was M0 distributed by M1 and M2 , produced by M6 , distributed by M3 and M4 , and distributed by M5",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] and [entity] , [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] and [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P0 M3 .\nM0 P0 M4 .\nM0 P0 M5 .\nM0 P1 M6\n}",
        "recursionDepth": 49,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q692821 wdt:P750 wd:Q145 .\nwd:Q692821 wdt:P750 wd:Q5371838 .\nwd:Q692821 wdt:P750 wd:Q80948336 .\nwd:Q692821 wdt:P750 wd:Q9589 .\nwd:Q692821 wdt:P750 wd:Q907311 .\nwd:Q692821 wdt:P162|wdt:P272 wd:Q79618131\n}",
        "questionWithBrackets": "Was [My Summer of Love] distributed by [iTunes] and [Netflix] , produced by [Apocalypso Pictures] , distributed by [FandangoNow] and [Vudu] , and distributed by [United Kingdom]"
    },
    {
        "questionIdx": 76973,
        "questionPatternModEntities": "Was M0 M2 's French spouse",
        "questionTemplate": "Was [entity] [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\nFILTER ( M0 != M2 ) .\nM0 P0 M1 .\nM0 P1 M2\n}",
        "recursionDepth": 16,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nFILTER ( wd:Q5819 != wd:Q2836615 ) .\nwd:Q5819 wdt:P27 wd:Q142 .\nwd:Q5819 wdt:P26 wd:Q2836615\n}",
        "questionWithBrackets": "Was [Jos\u00e9 Bov\u00e9] [Alice Monier] 's French spouse"
    },
    {
        "questionIdx": 77074,
        "questionPatternModEntities": "Was M1 edited by and directed by a spouse of M0",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by and [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nM1 P1 ?x0 .\nM1 P2 ?x0\n}",
        "recursionDepth": 26,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P26 wd:Q58866 .\nFILTER ( ?x0 != wd:Q58866 ) .\nwd:Q151599 wdt:P57 ?x0 .\nwd:Q151599 wdt:P1040 ?x0\n}",
        "questionWithBrackets": "Was [Metropolis] edited by and directed by a spouse of [Thea von Harbou]"
    },
    {
        "questionIdx": 77106,
        "questionPatternModEntities": "Was M0 written by , directed by , and edited by M1",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1 .\nM0 P2 M1\n}",
        "recursionDepth": 26,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q151599 wdt:P57 wd:Q19504 .\nwd:Q151599 wdt:P1040 wd:Q19504 .\nwd:Q151599 wdt:P58 wd:Q19504\n}",
        "questionWithBrackets": "Was [Metropolis] written by , directed by , and edited by [Fritz Lang]"
    },
    {
        "questionIdx": 77110,
        "questionPatternModEntities": "Was M1 a spouse of a spouse and parent of M0",
        "questionTemplate": "Was [entity] a [ROLE_SIMPLE] of a [ROLE_SIMPLE] and [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M0 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( M1 != ?x0 ) .\nM1 P1 ?x0\n}",
        "recursionDepth": 24,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q9304 .\n?x0 wdt:P26 wd:Q9304 .\nFILTER ( ?x0 != wd:Q9304 ) .\nFILTER ( wd:Q9295 != ?x0 ) .\nwd:Q9295 wdt:P26 ?x0\n}",
        "questionWithBrackets": "Was [Manduul Khan] a spouse of a spouse and parent of [Dayan Khan]"
    },
    {
        "questionIdx": 77141,
        "questionPatternModEntities": "Was M0 executive produced by M1 , M2 , and M3 , executive produced by M4 and M5 , and written by M6",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] , [entity] , and [entity] , [VP_SIMPLE] by [entity] and [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P0 M3 .\nM0 P0 M4 .\nM0 P0 M5 .\nM0 P1 M6\n}",
        "recursionDepth": 45,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q60747802 wdt:P1431 wd:Q56005 .\nwd:Q60747802 wdt:P1431 wd:Q63111594 .\nwd:Q60747802 wdt:P1431 wd:Q22075526 .\nwd:Q60747802 wdt:P1431 wd:Q302063 .\nwd:Q60747802 wdt:P1431 wd:Q17145814 .\nwd:Q60747802 wdt:P58 wd:Q19560063\n}",
        "questionWithBrackets": "Was [Raised by Wolves] executive produced by [Aaron Guzikowski] , [Adam Kolbrenner] , and [Mark Huffam] , executive produced by [David W. Zucker] and [Ridley Scott] , and written by [Heather Bellson]"
    },
    {
        "questionIdx": 77215,
        "questionPatternModEntities": "Was M0 's actor 's spouse M1",
        "questionTemplate": "Was [entity] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( M1 != ?x0 ) .\nM1 P1 ?x0\n}",
        "recursionDepth": 15,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P453 wd:Q222573 .\nFILTER ( wd:Q192482 != ?x0 ) .\nwd:Q192482 wdt:P26 ?x0\n}",
        "questionWithBrackets": "Was [femme fatale] 's actor 's spouse [Telemachus]"
    },
    {
        "questionIdx": 77226,
        "questionPatternModEntities": "Was M1 founded by M0 's spouse and founded by M2",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nM1 P1 ?x0 .\nM1 P1 M2\n}",
        "recursionDepth": 27,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P26 wd:Q468844 .\nFILTER ( ?x0 != wd:Q468844 ) .\nwd:Q1003 wdt:P112 ?x0 .\nwd:Q1003 wdt:P112 wd:Q444\n}",
        "questionWithBrackets": "Was [Solidarity] founded by [Danuta Wa\u0142\u0119sa] 's spouse and founded by [Lech Wa\u0142\u0119sa]"
    },
    {
        "questionIdx": 77242,
        "questionPatternModEntities": "Was M0 a British sibling of M1",
        "questionTemplate": "Was [entity] a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nFILTER ( M0 != M1 ) .\nM0 P0 M1 .\nM0 P1 M2\n}",
        "recursionDepth": 18,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nFILTER ( wd:Q43274 != wd:Q151754 ) .\nwd:Q43274 wdt:P27 wd:Q145 .\nwd:Q43274 wdt:P3373 wd:Q151754\n}",
        "questionWithBrackets": "Was [Charles, Prince of Wales] a British sibling of [Anne, Princess Royal]"
    },
    {
        "questionIdx": 77244,
        "questionPatternModEntities": "Was M0 a Canadian male Chinese spouse of M4",
        "questionTemplate": "Was [entity] a [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nFILTER ( M0 != M4 ) .\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P1 M3 .\nM0 P2 M4\n}",
        "recursionDepth": 28,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nFILTER ( wd:Q2146157 != wd:Q7220251 ) .\nwd:Q2146157 wdt:P21 wd:Q6581097 .\nwd:Q2146157 wdt:P27 wd:Q148 .\nwd:Q2146157 wdt:P27 wd:Q16 .\nwd:Q2146157 wdt:P26 wd:Q7220251\n}",
        "questionWithBrackets": "Was [Patrick Tse] a Canadian male Chinese spouse of [Deborah Lee]"
    },
    {
        "questionIdx": 77249,
        "questionPatternModEntities": "Was M1 a spouse of M0 's actor",
        "questionTemplate": "Was [entity] a [ROLE_SIMPLE] of [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( M1 != ?x0 ) .\nM1 P1 ?x0\n}",
        "recursionDepth": 17,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P453 wd:Q222573 .\nFILTER ( wd:Q192482 != ?x0 ) .\nwd:Q192482 wdt:P26 ?x0\n}",
        "questionWithBrackets": "Was [Telemachus] a spouse of [femme fatale] 's actor"
    },
    {
        "questionIdx": 77284,
        "questionPatternModEntities": "Was M1 a sequel of M0 's sequel",
        "questionTemplate": "Was [entity] a [ROLE_SIMPLE] of [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P0 ?x0\n}",
        "recursionDepth": 17,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P155 wd:Q5487 .\nwd:Q5497 wdt:P155 ?x0\n}",
        "questionWithBrackets": "Was [1252] a sequel of [1250] 's sequel"
    },
    {
        "questionIdx": 77292,
        "questionPatternModEntities": "Was M2 edited by M4 and M5 , executive produced by M3 , and executive produced by M1 's male spouse",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] and [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M1 ) .\nM2 P2 ?x0 .\nM2 P2 M3 .\nM2 P3 M4 .\nM2 P3 M5\n}",
        "recursionDepth": 47,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P21 wd:Q6581097 .\n?x0 wdt:P26 wd:Q32947601 .\nFILTER ( ?x0 != wd:Q32947601 ) .\nwd:Q1137372 wdt:P1040 wd:Q47284 .\nwd:Q1137372 wdt:P1040 wd:Q273379 .\nwd:Q1137372 wdt:P1431 ?x0 .\nwd:Q1137372 wdt:P1431 wd:Q549956\n}",
        "questionWithBrackets": "Was [Four Rooms] edited by [Robert Rodriguez] and [Sally Menke] , executive produced by [Alexandre Rockwell] , and executive produced by [Daniella Pick] 's male spouse"
    },
    {
        "questionIdx": 77352,
        "questionPatternModEntities": "Was M0 M1 's Dutch Canadian employee",
        "questionTemplate": "Was [entity] [entity] 's [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M2 .\nM0 P1 M3\n}",
        "recursionDepth": 21,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q637441 wdt:P108 wd:Q72021385 .\nwd:Q637441 wdt:P27 wd:Q29999 .\nwd:Q637441 wdt:P27 wd:Q16\n}",
        "questionWithBrackets": "Was [Hubert Biermans] [Belgo Canadian Pulp & Paper Company] 's Dutch Canadian employee"
    },
    {
        "questionIdx": 77365,
        "questionPatternModEntities": "Was M1 a spouse of a spouse and sibling of M0",
        "questionTemplate": "Was [entity] a [ROLE_SIMPLE] of a [ROLE_SIMPLE] and [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M0 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x0 != M0 ) .\nFILTER ( M1 != ?x0 ) .\nM1 P1 ?x0\n}",
        "recursionDepth": 24,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P3373 wd:Q3340 .\n?x0 wdt:P26 wd:Q3340 .\nFILTER ( ?x0 != wd:Q3340 ) .\nFILTER ( ?x0 != wd:Q3340 ) .\nFILTER ( wd:Q296446 != ?x0 ) .\nwd:Q296446 wdt:P26 ?x0\n}",
        "questionWithBrackets": "Was [Antiochus IX Cyzicenus] a spouse of a spouse and sibling of [Ptolemy IX Lathyros]"
    },
    {
        "questionIdx": 77368,
        "questionPatternModEntities": "Was M0 's sibling , parent , and spouse M1 's sibling",
        "questionTemplate": "Was [entity] 's [ROLE_SIMPLE] , [ROLE_SIMPLE] , and [ROLE_SIMPLE] [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P1 M0 .\n?x0 P2 M0 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x0 != M1 )\n}",
        "recursionDepth": 24,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q443473 .\n?x0 wdt:P3373 wd:Q443473 .\n?x0 wdt:P3373 wd:Q273990 .\n?x0 wdt:P26 wd:Q443473 .\nFILTER ( ?x0 != wd:Q443473 ) .\nFILTER ( ?x0 != wd:Q443473 ) .\nFILTER ( ?x0 != wd:Q273990 )\n}",
        "questionWithBrackets": "Was [Henutmire] 's sibling , parent , and spouse [Princess Tia] 's sibling"
    },
    {
        "questionIdx": 77386,
        "questionPatternModEntities": "Was M0 distributed by M1 , distributed by M2 , produced by M5 , and distributed by M3 and M4",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P0 M3 .\nM0 P0 M4 .\nM0 P1 M5\n}",
        "recursionDepth": 45,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q692821 wdt:P750 wd:Q145 .\nwd:Q692821 wdt:P750 wd:Q5371838 .\nwd:Q692821 wdt:P750 wd:Q907311 .\nwd:Q692821 wdt:P750 wd:Q80948336 .\nwd:Q692821 wdt:P162|wdt:P272 wd:Q7684047\n}",
        "questionWithBrackets": "Was [My Summer of Love] distributed by [United Kingdom] , distributed by [Netflix] , produced by [Tanya Seghatchian] , and distributed by [Vudu] and [FandangoNow]"
    },
    {
        "questionIdx": 77389,
        "questionPatternModEntities": "Was M1 distributed by a child of M0 and distributed by M2 and M3",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity] and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 ?x0 .\nM1 P1 M2 .\nM1 P1 M3\n}",
        "recursionDepth": 33,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P749 wd:Q2283 .\nwd:Q3274092 wdt:P750 ?x0 .\nwd:Q3274092 wdt:P750 wd:Q1486288 .\nwd:Q3274092 wdt:P750 wd:Q73801\n}",
        "questionWithBrackets": "Was [Full Spectrum Warrior] distributed by a child of [Microsoft] and distributed by [Xbox Game Studios] and [GOG.com]"
    },
    {
        "questionIdx": 77392,
        "questionPatternModEntities": "Was M1 's sequel produced and distributed by M0",
        "questionTemplate": "Was [entity] 's [ROLE_SIMPLE] [VP_SIMPLE] and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M0 .\n?x0 P2 M1\n}",
        "recursionDepth": 23,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P750 wd:Q9531 .\n?x0 wdt:P155 wd:Q18328139 .\n?x0 wdt:P162|wdt:P272 wd:Q9531\n}",
        "questionWithBrackets": "Was [Death in Heaven] 's sequel produced and distributed by [BBC]"
    },
    {
        "questionIdx": 77455,
        "questionPatternModEntities": "Was M0 's spouse 's sibling M1",
        "questionTemplate": "Was [entity] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( M1 != ?x0 ) .\nM1 P1 ?x0\n}",
        "recursionDepth": 15,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P26 wd:Q22097538 .\nFILTER ( ?x0 != wd:Q22097538 ) .\nFILTER ( wd:Q87617579 != ?x0 ) .\nwd:Q87617579 wdt:P3373 ?x0\n}",
        "questionWithBrackets": "Was [Elizabeth Knapp Melville] 's spouse 's sibling [Allan Melville]"
    },
    {
        "questionIdx": 77478,
        "questionPatternModEntities": "Was M0 M1 's Chinese employee",
        "questionTemplate": "Was [entity] [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M2\n}",
        "recursionDepth": 16,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q197444 wdt:P108 wd:Q495015 .\nwd:Q197444 wdt:P27 wd:Q148\n}",
        "questionWithBrackets": "Was [Zhao Jingshen] [Fudan University] 's Chinese employee"
    },
    {
        "questionIdx": 77551,
        "questionPatternModEntities": "Was M0 directed by M2 and written by M1",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M2\n}",
        "recursionDepth": 23,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q2299920 wdt:P57 wd:Q235918 .\nwd:Q2299920 wdt:P58 wd:Q882\n}",
        "questionWithBrackets": "Was [Caught in a Cabaret] directed by [Mabel Normand] and written by [Charlie Chaplin]"
    },
    {
        "questionIdx": 77558,
        "questionPatternModEntities": "Was M0 edited , produced , directed , and written by M1",
        "questionTemplate": "Was [entity] [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1 .\nM0 P2 M1 .\nM0 P3 M1\n}",
        "recursionDepth": 29,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q854990 wdt:P57 wd:Q8006 .\nwd:Q854990 wdt:P1040 wd:Q8006 .\nwd:Q854990 wdt:P162|wdt:P272 wd:Q8006 .\nwd:Q854990 wdt:P58 wd:Q8006\n}",
        "questionWithBrackets": "Was [Kagemusha] edited , produced , directed , and written by [Akira Kurosawa]"
    },
    {
        "questionIdx": 77606,
        "questionPatternModEntities": "Was M0 executive produced , directed , written , and edited by M1",
        "questionTemplate": "Was [entity] [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1 .\nM0 P2 M1 .\nM0 P3 M1\n}",
        "recursionDepth": 30,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q236728 wdt:P57 wd:Q55400 .\nwd:Q236728 wdt:P1040 wd:Q55400 .\nwd:Q236728 wdt:P1431 wd:Q55400 .\nwd:Q236728 wdt:P58 wd:Q55400\n}",
        "questionWithBrackets": "Was [Ponyo on the Cliff by the Sea] executive produced , directed , written , and edited by [Hayao Miyazaki]"
    },
    {
        "questionIdx": 77609,
        "questionPatternModEntities": "Was M1 executive produced by M0 's employee , executive produced by M2 , executive produced by M3 , and executive produced by M4",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] , [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 ?x0 .\nM1 P1 M2 .\nM1 P1 M3 .\nM1 P1 M4\n}",
        "recursionDepth": 49,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P108 wd:Q740308 .\nwd:Q156519 wdt:P1431 ?x0 .\nwd:Q156519 wdt:P1431 wd:Q25266114 .\nwd:Q156519 wdt:P1431 wd:Q25266117 .\nwd:Q156519 wdt:P1431 wd:Q36970\n}",
        "questionWithBrackets": "Was [Around the World in 80 Days] executive produced by [UNICEF] 's employee , executive produced by [Alex Schwartz] , executive produced by [Solon So] , and executive produced by [Jackie Chan]"
    },
    {
        "questionIdx": 77653,
        "questionPatternModEntities": "Was M1 edited and directed by a spouse of M0",
        "questionTemplate": "Was [entity] [VP_SIMPLE] and [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nM1 P1 ?x0 .\nM1 P2 ?x0\n}",
        "recursionDepth": 25,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P26 wd:Q40162 .\nFILTER ( ?x0 != wd:Q40162 ) .\nwd:Q457886 wdt:P57 ?x0 .\nwd:Q457886 wdt:P1040 ?x0\n}",
        "questionWithBrackets": "Was [Amblin'] edited and directed by a spouse of [Kate Capshaw]"
    },
    {
        "questionIdx": 77661,
        "questionPatternModEntities": "Was M2 executive produced by M0 's American sibling",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M0 ) .\nM2 P2 ?x0\n}",
        "recursionDepth": 22,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P27 wd:Q30 .\n?x0 wdt:P3373 wd:Q2721194 .\nFILTER ( ?x0 != wd:Q2721194 ) .\nwd:Q1425082 wdt:P1431 ?x0\n}",
        "questionWithBrackets": "Was [Air Force] executive produced by [Albert Warner] 's American sibling"
    },
    {
        "questionIdx": 77713,
        "questionPatternModEntities": "Was M0 a French British sibling of M1",
        "questionTemplate": "Was [entity] a [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nFILTER ( M0 != M1 ) .\nM0 P0 M1 .\nM0 P1 M2 .\nM0 P1 M3\n}",
        "recursionDepth": 23,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nFILTER ( wd:Q291693 != wd:Q355024 ) .\nwd:Q291693 wdt:P27 wd:Q145 .\nwd:Q291693 wdt:P27 wd:Q142 .\nwd:Q291693 wdt:P3373 wd:Q355024\n}",
        "questionWithBrackets": "Was [Anastasia Griffith] a French British sibling of [Jamie Bamber]"
    },
    {
        "questionIdx": 77716,
        "questionPatternModEntities": "Was M2 a sibling of a female employee of M0",
        "questionTemplate": "Was [entity] a [ROLE_SIMPLE] of a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( M2 != ?x0 ) .\nM2 P2 ?x0\n}",
        "recursionDepth": 24,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P108 wd:Q26882567 .\n?x0 wdt:P21 wd:Q6581072 .\nFILTER ( wd:Q56119579 != ?x0 ) .\nwd:Q56119579 wdt:P3373 ?x0\n}",
        "questionWithBrackets": "Was [Marcus Kasner] a sibling of a female employee of [No label defined]"
    },
    {
        "questionIdx": 77742,
        "questionPatternModEntities": "Was M0 edited by , produced by , directed by , and written by M1",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1 .\nM0 P2 M1 .\nM0 P3 M1\n}",
        "recursionDepth": 32,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q854990 wdt:P57 wd:Q8006 .\nwd:Q854990 wdt:P1040 wd:Q8006 .\nwd:Q854990 wdt:P162|wdt:P272 wd:Q8006 .\nwd:Q854990 wdt:P58 wd:Q8006\n}",
        "questionWithBrackets": "Was [Kagemusha] edited by , produced by , directed by , and written by [Akira Kurosawa]"
    },
    {
        "questionIdx": 77784,
        "questionPatternModEntities": "Was M1 a parent of M0 's actor",
        "questionTemplate": "Was [entity] a [ROLE_SIMPLE] of [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 ?x0\n}",
        "recursionDepth": 17,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P453 wd:Q222573 .\nwd:Q131575 wdt:P40|wdt:P355 ?x0\n}",
        "questionWithBrackets": "Was [Hecate] a parent of [femme fatale] 's actor"
    },
    {
        "questionIdx": 77835,
        "questionPatternModEntities": "Was M2 directed by a German sibling of M0 and written by M3",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M0 ) .\nM2 P2 M3 .\nM2 P3 ?x0\n}",
        "recursionDepth": 34,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P27 wd:Q183 .\n?x0 wdt:P3373 wd:Q94841411 .\nFILTER ( ?x0 != wd:Q94841411 ) .\nwd:Q2666590 wdt:P57 ?x0 .\nwd:Q2666590 wdt:P58 wd:Q40645\n}",
        "questionWithBrackets": "Was [Pygmalion] directed by a German sibling of [Ernst August Bamberger] and written by [Ludwig Berger]"
    },
    {
        "questionIdx": 77917,
        "questionPatternModEntities": "Was M2 written by M4 , executive produced by M3 , and edited by M0 's American sibling",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M0 ) .\nM2 P2 M3 .\nM2 P3 M4 .\nM2 P4 ?x0\n}",
        "recursionDepth": 42,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P27 wd:Q30 .\n?x0 wdt:P3373 wd:Q17350650 .\nFILTER ( ?x0 != wd:Q17350650 ) .\nwd:Q1029546 wdt:P1040 ?x0 .\nwd:Q1029546 wdt:P1431 wd:Q187364 .\nwd:Q1029546 wdt:P58 wd:Q3141551\n}",
        "questionWithBrackets": "Was [The Public Eye] written by [Howard Franklin] , executive produced by [Robert Zemeckis] , and edited by [Herbert Lottman] 's American sibling"
    },
    {
        "questionIdx": 77953,
        "questionPatternModEntities": "Was M0 written by and produced by M1 and M2",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P1 M1 .\nM0 P1 M2\n}",
        "recursionDepth": 24,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q80379 wdt:P162|wdt:P272 wd:Q4465 .\nwd:Q80379 wdt:P162|wdt:P272 wd:Q116861 .\nwd:Q80379 wdt:P58 wd:Q4465 .\nwd:Q80379 wdt:P58 wd:Q116861\n}",
        "questionWithBrackets": "Was [The Hobbit: An Unexpected Journey] written by and produced by [Peter Jackson] and [Fran Walsh]"
    },
    {
        "questionIdx": 78037,
        "questionPatternModEntities": "Was M3 's female German spouse M0",
        "questionTemplate": "Was [entity] 's [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nFILTER ( M0 != M3 ) .\nM0 P0 M1 .\nM0 P1 M2 .\nM0 P2 M3\n}",
        "recursionDepth": 21,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nFILTER ( wd:Q25878 != wd:Q91223 ) .\nwd:Q25878 wdt:P21 wd:Q6581072 .\nwd:Q25878 wdt:P27 wd:Q183 .\nwd:Q25878 wdt:P26 wd:Q91223\n}",
        "questionWithBrackets": "Was [Uwe R\u00f6mer] 's female German spouse [Rita K\u00f6nig]"
    },
    {
        "questionIdx": 78039,
        "questionPatternModEntities": "Was M2 influenced by M1 's sibling , influenced by M3 , influenced by M4 , and influenced by M0 's employee",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] , [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x1 P1 M1 .\nFILTER ( ?x1 != M1 ) .\nM2 P2 ?x0 .\nM2 P2 ?x1 .\nM2 P2 M3 .\nM2 P2 M4\n}",
        "recursionDepth": 49,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P108 wd:Q615681 .\n?x1 wdt:P3373 wd:Q92059 .\nFILTER ( ?x1 != wd:Q92059 ) .\nwd:Q255 wdt:P737 ?x0 .\nwd:Q255 wdt:P737 ?x1 .\nwd:Q255 wdt:P737 wd:Q1339 .\nwd:Q255 wdt:P737 wd:Q254\n}",
        "questionWithBrackets": "Was [Ludwig van Beethoven] influenced by [Johann Evangelist Haydn] 's sibling , influenced by [Wolfgang Amadeus Mozart] , influenced by [Johann Sebastian Bach] , and influenced by [Count Hieronymus von Colloredo] 's employee"
    },
    {
        "questionIdx": 78047,
        "questionPatternModEntities": "Was M0 a German employee of M1",
        "questionTemplate": "Was [entity] a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M2\n}",
        "recursionDepth": 18,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q14678 wdt:P108 wd:Q130965 .\nwd:Q14678 wdt:P27 wd:Q183\n}",
        "questionWithBrackets": "Was [Dietrich von Hildebrand] a German employee of [Fordham University]"
    },
    {
        "questionIdx": 78057,
        "questionPatternModEntities": "Was M0 written by M1 and M2 , edited by M4 , M5 , M6 , and M7 , and written by M3",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] and [entity] , [VP_SIMPLE] by [entity] , [entity] , [entity] , and [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P0 M3 .\nM0 P1 M4 .\nM0 P1 M5 .\nM0 P1 M6 .\nM0 P1 M7\n}",
        "recursionDepth": 46,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q1137372 wdt:P1040 wd:Q47284 .\nwd:Q1137372 wdt:P1040 wd:Q541143 .\nwd:Q1137372 wdt:P1040 wd:Q273379 .\nwd:Q1137372 wdt:P1040 wd:Q5359064 .\nwd:Q1137372 wdt:P58 wd:Q25161 .\nwd:Q1137372 wdt:P58 wd:Q2838329 .\nwd:Q1137372 wdt:P58 wd:Q3772\n}",
        "questionWithBrackets": "Was [Four Rooms] written by [Allison Anders] and [Quentin Tarantino] , edited by [Robert Rodriguez] , [Terry Rawlings] , [Elena Maganini] , and [Sally Menke] , and written by [Roald Dahl]"
    },
    {
        "questionIdx": 78065,
        "questionPatternModEntities": "Was M2 executive produced by M3 , written by M4 , and edited by a American employee of M0",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nM2 P2 M3 .\nM2 P3 M4 .\nM2 P4 ?x0\n}",
        "recursionDepth": 44,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P108 wd:Q72267 .\n?x0 wdt:P27 wd:Q30 .\nwd:Q7774347 wdt:P1040 ?x0 .\nwd:Q7774347 wdt:P1431 wd:Q62503 .\nwd:Q7774347 wdt:P58 wd:Q216134\n}",
        "questionWithBrackets": "Was [The Wet Parade] executive produced by [Victor Fleming] , written by [Upton Sinclair] , and edited by a American employee of [Cecil B. DeMille]"
    },
    {
        "questionIdx": 78081,
        "questionPatternModEntities": "Was M3 's child 's employee employed by M0 , M1 , and M2",
        "questionTemplate": "Was [entity] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE] [VP_SIMPLE] by [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x1 P1 M3\n}",
        "recursionDepth": 27,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P108 ?x1 .\n?x0 wdt:P108 wd:Q1674863 .\n?x0 wdt:P108 wd:Q8880 .\n?x0 wdt:P108 wd:Q144617 .\n?x1 wdt:P749 wd:Q458\n}",
        "questionWithBrackets": "Was [European Union] 's child 's employee employed by [TIM Group] , [European Commission] , and [Istituto Affari Internazionali]"
    },
    {
        "questionIdx": 78118,
        "questionPatternModEntities": "Was M0 a Japanese female German spouse of M4",
        "questionTemplate": "Was [entity] a [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nFILTER ( M0 != M4 ) .\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P1 M3 .\nM0 P2 M4\n}",
        "recursionDepth": 28,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nFILTER ( wd:Q214289 != wd:Q171998 ) .\nwd:Q214289 wdt:P21 wd:Q6581072 .\nwd:Q214289 wdt:P27 wd:Q183 .\nwd:Q214289 wdt:P27 wd:Q17 .\nwd:Q214289 wdt:P26 wd:Q171998\n}",
        "questionWithBrackets": "Was [Michelle Yeoh] a Japanese female German spouse of [Jean Todt]"
    },
    {
        "questionIdx": 78173,
        "questionPatternModEntities": "Was M2 produced , directed , and edited by a Canadian spouse of M1",
        "questionTemplate": "Was [entity] [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M1 ) .\nM2 P2 ?x0 .\nM2 P3 ?x0 .\nM2 P4 ?x0\n}",
        "recursionDepth": 35,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P27 wd:Q16 .\n?x0 wdt:P26 wd:Q235635 .\nFILTER ( ?x0 != wd:Q235635 ) .\nwd:Q44578 wdt:P57 ?x0 .\nwd:Q44578 wdt:P1040 ?x0 .\nwd:Q44578 wdt:P162|wdt:P272 ?x0\n}",
        "questionWithBrackets": "Was [Titanic] produced , directed , and edited by a Canadian spouse of [Suzy Amis Cameron]"
    },
    {
        "questionIdx": 78175,
        "questionPatternModEntities": "Was M0 produced , directed , and executive produced by M1",
        "questionTemplate": "Was [entity] [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1 .\nM0 P2 M1\n}",
        "recursionDepth": 25,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q854990 wdt:P57 wd:Q8006 .\nwd:Q854990 wdt:P1431 wd:Q8006 .\nwd:Q854990 wdt:P162|wdt:P272 wd:Q8006\n}",
        "questionWithBrackets": "Was [Kagemusha] produced , directed , and executive produced by [Akira Kurosawa]"
    },
    {
        "questionIdx": 78231,
        "questionPatternModEntities": "Was M1 's spouse , sibling , and parent M0",
        "questionTemplate": "Was [entity] 's [ROLE_SIMPLE] , [ROLE_SIMPLE] , and [ROLE_SIMPLE] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nFILTER ( M0 != M1 ) .\nFILTER ( M0 != M1 ) .\nM0 P0 M1 .\nM0 P1 M1 .\nM0 P2 M1\n}",
        "recursionDepth": 20,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nFILTER ( wd:Q1523 != wd:Q443473 ) .\nFILTER ( wd:Q1523 != wd:Q443473 ) .\nwd:Q1523 wdt:P40|wdt:P355 wd:Q443473 .\nwd:Q1523 wdt:P3373 wd:Q443473 .\nwd:Q1523 wdt:P26 wd:Q443473\n}",
        "questionWithBrackets": "Was [Henutmire] 's spouse , sibling , and parent [Ramesses II]"
    },
    {
        "questionIdx": 78234,
        "questionPatternModEntities": "Was M1 's actor M2 's Dutch spouse",
        "questionTemplate": "Was [entity] 's [ROLE_SIMPLE] [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P2 M2 .\nFILTER ( ?x0 != M2 )\n}",
        "recursionDepth": 20,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P453 wd:Q47490616 .\n?x0 wdt:P27 wd:Q29999 .\n?x0 wdt:P26 wd:Q47490609 .\nFILTER ( ?x0 != wd:Q47490609 )\n}",
        "questionWithBrackets": "Was [No label defined] 's actor [Aike Dirkzwager] 's Dutch spouse"
    },
    {
        "questionIdx": 78238,
        "questionPatternModEntities": "Was M2 influenced by M3 , influenced by M4 , and influenced by M0 's American employee",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nM2 P2 ?x0 .\nM2 P2 M3 .\nM2 P2 M4\n}",
        "recursionDepth": 41,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P108 wd:Q49115 .\n?x0 wdt:P27 wd:Q30 .\nwd:Q310903 wdt:P737 ?x0 .\nwd:Q310903 wdt:P737 wd:Q410 .\nwd:Q310903 wdt:P737 wd:Q935\n}",
        "questionWithBrackets": "Was [Neil deGrasse Tyson] influenced by [Carl Sagan] , influenced by [Isaac Newton] , and influenced by [Cornell University] 's American employee"
    },
    {
        "questionIdx": 78307,
        "questionPatternModEntities": "Was M0 a Japanese spouse of M2",
        "questionTemplate": "Was [entity] a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nFILTER ( M0 != M2 ) .\nM0 P0 M1 .\nM0 P1 M2\n}",
        "recursionDepth": 18,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nFILTER ( wd:Q29365 != wd:Q317675 ) .\nwd:Q29365 wdt:P27 wd:Q17 .\nwd:Q29365 wdt:P26 wd:Q317675\n}",
        "questionWithBrackets": "Was [Mutsuko Miki] a Japanese spouse of [Takeo Miki]"
    },
    {
        "questionIdx": 78309,
        "questionPatternModEntities": "Was M0 M4 's Chinese male Japanese spouse",
        "questionTemplate": "Was [entity] [entity] 's [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\nFILTER ( M0 != M4 ) .\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P1 M3 .\nM0 P2 M4\n}",
        "recursionDepth": 26,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nFILTER ( wd:Q11434592 != wd:Q6875103 ) .\nwd:Q11434592 wdt:P21 wd:Q6581097 .\nwd:Q11434592 wdt:P27 wd:Q17 .\nwd:Q11434592 wdt:P27 wd:Q148 .\nwd:Q11434592 wdt:P26 wd:Q6875103\n}",
        "questionWithBrackets": "Was [Katsumi \u014cyama] [Misako Watanabe] 's Chinese male Japanese spouse"
    },
    {
        "questionIdx": 78322,
        "questionPatternModEntities": "Was M2 directed by M1 's German spouse",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M1 ) .\nM2 P2 ?x0\n}",
        "recursionDepth": 21,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P27 wd:Q183 .\n?x0 wdt:P26 wd:Q1575818 .\nFILTER ( ?x0 != wd:Q1575818 ) .\nwd:Q428380 wdt:P57 ?x0\n}",
        "questionWithBrackets": "Was [The English Marriage] directed by [Hanne Brinkmann] 's German spouse"
    },
    {
        "questionIdx": 78330,
        "questionPatternModEntities": "Was M1 's parent , spouse , and sibling M0",
        "questionTemplate": "Was [entity] 's [ROLE_SIMPLE] , [ROLE_SIMPLE] , and [ROLE_SIMPLE] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nFILTER ( M0 != M1 ) .\nFILTER ( M0 != M1 ) .\nM0 P0 M1 .\nM0 P1 M1 .\nM0 P2 M1\n}",
        "recursionDepth": 20,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nFILTER ( wd:Q1523 != wd:Q443473 ) .\nFILTER ( wd:Q1523 != wd:Q443473 ) .\nwd:Q1523 wdt:P40|wdt:P355 wd:Q443473 .\nwd:Q1523 wdt:P3373 wd:Q443473 .\nwd:Q1523 wdt:P26 wd:Q443473\n}",
        "questionWithBrackets": "Was [Henutmire] 's parent , spouse , and sibling [Ramesses II]"
    },
    {
        "questionIdx": 78332,
        "questionPatternModEntities": "Was M0 's spouse and sibling M1 's parent",
        "questionTemplate": "Was [entity] 's [ROLE_SIMPLE] and [ROLE_SIMPLE] [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P2 M0 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x0 != M0 )\n}",
        "recursionDepth": 20,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q39991 .\n?x0 wdt:P3373 wd:Q3340 .\n?x0 wdt:P26 wd:Q3340 .\nFILTER ( ?x0 != wd:Q3340 ) .\nFILTER ( ?x0 != wd:Q3340 )\n}",
        "questionWithBrackets": "Was [Ptolemy IX Lathyros] 's spouse and sibling [Ptolemy XII Auletes] 's parent"
    },
    {
        "questionIdx": 78337,
        "questionPatternModEntities": "Was M0 's sibling M1 's actor",
        "questionTemplate": "Was [entity] 's [ROLE_SIMPLE] [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M0 )\n}",
        "recursionDepth": 15,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P453 wd:Q222573 .\n?x0 wdt:P3373 wd:Q203236 .\nFILTER ( ?x0 != wd:Q203236 )\n}",
        "questionWithBrackets": "Was [Pasipha\u00eb] 's sibling [femme fatale] 's actor"
    },
    {
        "questionIdx": 78369,
        "questionPatternModEntities": "Was M1 's actor M0 's employee",
        "questionTemplate": "Was [entity] 's [ROLE_SIMPLE] [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1\n}",
        "recursionDepth": 15,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P453 wd:Q9054901 .\n?x0 wdt:P108 wd:Q207028\n}",
        "questionWithBrackets": "Was [Pamina] 's actor [Mariinsky Theatre] 's employee"
    },
    {
        "questionIdx": 78412,
        "questionPatternModEntities": "Was M0 's employee M2 's Mexican parent",
        "questionTemplate": "Was [entity] 's [ROLE_SIMPLE] [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P2 M2\n}",
        "recursionDepth": 20,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q5379858 .\n?x0 wdt:P108 wd:Q222738 .\n?x0 wdt:P27 wd:Q96\n}",
        "questionWithBrackets": "Was [National Autonomous University of Mexico] 's employee [Enrique de la Madrid Cordero] 's Mexican parent"
    },
    {
        "questionIdx": 78439,
        "questionPatternModEntities": "Was M0 a actor that M1 and M2 were played by",
        "questionTemplate": "Was [entity] a [NP_SIMPLE] that [entity] and [entity] were [VP_SIMPLE] by",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2\n}",
        "recursionDepth": 25,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q229179 wdt:P453 wd:Q207990 .\nwd:Q229179 wdt:P453 wd:Q50386864\n}",
        "questionWithBrackets": "Was [Renata Tebaldi] a actor that [Turandot] and [Cio-Cio-san (Madama Butterfly)] were played by"
    },
    {
        "questionIdx": 78440,
        "questionPatternModEntities": "Was M0 a American Chinese sibling of M1",
        "questionTemplate": "Was [entity] a [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nFILTER ( M0 != M1 ) .\nM0 P0 M1 .\nM0 P1 M2 .\nM0 P1 M3\n}",
        "recursionDepth": 23,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nFILTER ( wd:Q1374039 != wd:Q434790 ) .\nwd:Q1374039 wdt:P27 wd:Q30 .\nwd:Q1374039 wdt:P27 wd:Q148 .\nwd:Q1374039 wdt:P3373 wd:Q434790\n}",
        "questionWithBrackets": "Was [Michael Chow] a American Chinese sibling of [Tsai Chin]"
    },
    {
        "questionIdx": 78446,
        "questionPatternModEntities": "Was M2 a sibling of M0 's American employee",
        "questionTemplate": "Was [entity] a [ROLE_SIMPLE] of [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( M2 != ?x0 ) .\nM2 P2 ?x0\n}",
        "recursionDepth": 22,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P108 wd:Q847743 .\n?x0 wdt:P27 wd:Q30 .\nFILTER ( wd:Q5112102 != ?x0 ) .\nwd:Q5112102 wdt:P3373 ?x0\n}",
        "questionWithBrackets": "Was [Christopher Ciccone] a sibling of [Dunkin'] 's American employee"
    },
    {
        "questionIdx": 78475,
        "questionPatternModEntities": "Was M1 directed by , produced by , executive produced by , written by , and edited by M0 's spouse",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nM1 P1 ?x0 .\nM1 P2 ?x0 .\nM1 P3 ?x0 .\nM1 P4 ?x0 .\nM1 P5 ?x0\n}",
        "recursionDepth": 43,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P26 wd:Q3032150 .\nFILTER ( ?x0 != wd:Q3032150 ) .\nwd:Q854990 wdt:P57 ?x0 .\nwd:Q854990 wdt:P1040 ?x0 .\nwd:Q854990 wdt:P1431 ?x0 .\nwd:Q854990 wdt:P162|wdt:P272 ?x0 .\nwd:Q854990 wdt:P58 ?x0\n}",
        "questionWithBrackets": "Was [Kagemusha] directed by , produced by , executive produced by , written by , and edited by [Y\u014dko Yaguchi] 's spouse"
    },
    {
        "questionIdx": 78489,
        "questionPatternModEntities": "Was M1 produced , written , directed , executive produced , and edited by M0 's spouse",
        "questionTemplate": "Was [entity] [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nM1 P1 ?x0 .\nM1 P2 ?x0 .\nM1 P3 ?x0 .\nM1 P4 ?x0 .\nM1 P5 ?x0\n}",
        "recursionDepth": 39,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P26 wd:Q3032150 .\nFILTER ( ?x0 != wd:Q3032150 ) .\nwd:Q854990 wdt:P57 ?x0 .\nwd:Q854990 wdt:P1040 ?x0 .\nwd:Q854990 wdt:P1431 ?x0 .\nwd:Q854990 wdt:P162|wdt:P272 ?x0 .\nwd:Q854990 wdt:P58 ?x0\n}",
        "questionWithBrackets": "Was [Kagemusha] produced , written , directed , executive produced , and edited by [Y\u014dko Yaguchi] 's spouse"
    },
    {
        "questionIdx": 78842,
        "questionPatternModEntities": "Was M0 's German employee employed by M1 and employed by M2",
        "questionTemplate": "Was [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] [VP_SIMPLE] by [entity] and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P1 M3\n}",
        "recursionDepth": 32,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P108 wd:Q32120 .\n?x0 wdt:P108 wd:Q51985 .\n?x0 wdt:P108 wd:Q273263 .\n?x0 wdt:P27 wd:Q183\n}",
        "questionWithBrackets": "Was [Technical University of Berlin] 's German employee employed by [University of Halle-Wittenberg] and employed by [RWTH Aachen University]"
    },
    {
        "questionIdx": 78879,
        "questionPatternModEntities": "Was M2 's sequel executive produced by M0 and executive produced by M1",
        "questionTemplate": "Was [entity] 's [ROLE_SIMPLE] [VP_SIMPLE] by [entity] and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P1 M2\n}",
        "recursionDepth": 29,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P1431 wd:Q8296 .\n?x0 wdt:P1431 wd:Q1038416 .\n?x0 wdt:P155 wd:Q274167\n}",
        "questionWithBrackets": "Was [The Exorcist] 's sequel executive produced by [Rupert Wyatt] and executive produced by [David Robinson]"
    },
    {
        "questionIdx": 78920,
        "questionPatternModEntities": "Was M0 distributed by M1 , distributed by M2 , distributed by M3 and M4 , and distributed by M5 and M6",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] and [entity] , and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P0 M3 .\nM0 P0 M4 .\nM0 P0 M5 .\nM0 P0 M6\n}",
        "recursionDepth": 49,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q106528085 wdt:P750 wd:Q3884 .\nwd:Q106528085 wdt:P750 wd:Q10851653 .\nwd:Q106528085 wdt:P750 wd:Q5366830 .\nwd:Q106528085 wdt:P750 wd:Q10855191 .\nwd:Q106528085 wdt:P750 wd:Q7553789 .\nwd:Q106528085 wdt:P750 wd:Q105329094\n}",
        "questionWithBrackets": "Was [Yoru Meguru, Bokura no Maigo Kyoushitsu] distributed by [ALICENET] , distributed by [Sofmap] , distributed by [getchu.com] and [DMM.com] , and distributed by [Amazon] and [Melonbooks]"
    },
    {
        "questionIdx": 78933,
        "questionPatternModEntities": "Was M0 directed and written by M1 , M2 , M3 , and M4",
        "questionTemplate": "Was [entity] [VP_SIMPLE] and [VP_SIMPLE] by [entity] , [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P0 M3 .\nM0 P0 M4 .\nM0 P1 M1 .\nM0 P1 M2 .\nM0 P1 M3 .\nM0 P1 M4\n}",
        "recursionDepth": 29,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q1079 wdt:P57 wd:Q4500 .\nwd:Q1079 wdt:P57 wd:Q15042700 .\nwd:Q1079 wdt:P57 wd:Q7407299 .\nwd:Q1079 wdt:P57 wd:Q10307893 .\nwd:Q1079 wdt:P58 wd:Q4500 .\nwd:Q1079 wdt:P58 wd:Q15042700 .\nwd:Q1079 wdt:P58 wd:Q7407299 .\nwd:Q1079 wdt:P58 wd:Q10307893\n}",
        "questionWithBrackets": "Was [Breaking Bad] directed and written by [Sam Catlin] , [Vince Gilligan] , [John Shiban] , and [Thomas Schnauz]"
    },
    {
        "questionIdx": 78938,
        "questionPatternModEntities": "Was M0 directed by M2 and M3 , produced by M1 , and directed by M4 , M5 , M6 , and M7",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] and [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity] , [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M2 .\nM0 P1 M3 .\nM0 P1 M4 .\nM0 P1 M5 .\nM0 P1 M6 .\nM0 P1 M7\n}",
        "recursionDepth": 46,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q43051 wdt:P57 wd:Q3113248 .\nwd:Q43051 wdt:P57 wd:Q6247507 .\nwd:Q43051 wdt:P57 wd:Q3471034 .\nwd:Q43051 wdt:P57 wd:Q2903332 .\nwd:Q43051 wdt:P57 wd:Q928976 .\nwd:Q43051 wdt:P57 wd:Q715807 .\nwd:Q43051 wdt:P162|wdt:P272 wd:Q7414\n}",
        "questionWithBrackets": "Was [Bambi] directed by [David Hand] and [Norman Wright] , produced by [The Walt Disney Company] , and directed by [Graham Heid] , [Bill Roberts] , [James Algar] , and [Samuel Armstrong]"
    },
    {
        "questionIdx": 78939,
        "questionPatternModEntities": "Was M0 directed by M2 , M3 , and M4 , directed by M5 , M6 , and M7 , and produced by M1",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] , [entity] , and [entity] , [VP_SIMPLE] by [entity] , [entity] , and [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M2 .\nM0 P1 M3 .\nM0 P1 M4 .\nM0 P1 M5 .\nM0 P1 M6 .\nM0 P1 M7\n}",
        "recursionDepth": 46,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q40895 wdt:P57 wd:Q2903332 .\nwd:Q40895 wdt:P57 wd:Q1385379 .\nwd:Q40895 wdt:P57 wd:Q3157236 .\nwd:Q40895 wdt:P57 wd:Q3471034 .\nwd:Q40895 wdt:P57 wd:Q280187 .\nwd:Q40895 wdt:P57 wd:Q2549739 .\nwd:Q40895 wdt:P162|wdt:P272 wd:Q7414\n}",
        "questionWithBrackets": "Was [Dumbo] directed by [Norm Ferguson] , [Bill Roberts] , and [Samuel Armstrong] , directed by [Ben Sharpsteen] , [Jack Kinney] , and [Wilfred Jackson] , and produced by [The Walt Disney Company]"
    },
    {
        "questionIdx": 78947,
        "questionPatternModEntities": "Was M0 directed by M3 , produced by M2 , written by M1 , and directed by M4 and M5",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M2 .\nM0 P2 M3 .\nM0 P2 M4 .\nM0 P2 M5\n}",
        "recursionDepth": 45,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q15622760 wdt:P57 wd:Q6211325 .\nwd:Q15622760 wdt:P57 wd:Q5439920 .\nwd:Q15622760 wdt:P57 wd:Q5325070 .\nwd:Q15622760 wdt:P162|wdt:P272 wd:Q47284 .\nwd:Q15622760 wdt:P58 wd:Q3772\n}",
        "questionWithBrackets": "Was [From Dusk till Dawn: The Series] directed by [Eagle Egilsson] , produced by [Robert Rodriguez] , written by [Quentin Tarantino] , and directed by [Joe Menendez] and [Fede \u00c1lvarez]"
    },
    {
        "questionIdx": 78948,
        "questionPatternModEntities": "Was M0 directed by M5 , edited by M1 , M2 , M3 , and M4 , and directed by M6 and M7",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , [entity] , [entity] , and [entity] , and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P0 M3 .\nM0 P0 M4 .\nM0 P1 M5 .\nM0 P1 M6 .\nM0 P1 M7\n}",
        "recursionDepth": 46,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q1137372 wdt:P57 wd:Q2838329 .\nwd:Q1137372 wdt:P57 wd:Q549956 .\nwd:Q1137372 wdt:P57 wd:Q3772 .\nwd:Q1137372 wdt:P1040 wd:Q47284 .\nwd:Q1137372 wdt:P1040 wd:Q541143 .\nwd:Q1137372 wdt:P1040 wd:Q273379 .\nwd:Q1137372 wdt:P1040 wd:Q5359064\n}",
        "questionWithBrackets": "Was [Four Rooms] directed by [Alexandre Rockwell] , edited by [Sally Menke] , [Robert Rodriguez] , [Elena Maganini] , and [Terry Rawlings] , and directed by [Allison Anders] and [Quentin Tarantino]"
    },
    {
        "questionIdx": 78952,
        "questionPatternModEntities": "Was M0 directed by M4 and M5 , edited by M3 , executive produced by M1 , and written by M2",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] and [entity] , [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M2 .\nM0 P2 M3 .\nM0 P3 M4 .\nM0 P3 M5\n}",
        "recursionDepth": 46,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q579757 wdt:P57 wd:Q8312 .\nwd:Q579757 wdt:P57 wd:Q7288285 .\nwd:Q579757 wdt:P1040 wd:Q977397 .\nwd:Q579757 wdt:P1431 wd:Q16345 .\nwd:Q579757 wdt:P58 wd:Q6769506\n}",
        "questionWithBrackets": "Was [Star Trek VI: The Undiscovered Country] directed by [Ralph Winter] and [Nicholas Meyer] , edited by [William Hoy] , executive produced by [Leonard Nimoy] , and written by [Mark Rosenthal]"
    },
    {
        "questionIdx": 78966,
        "questionPatternModEntities": "Was M0 directed by M2 , directed by M3 , directed by M4 , and produced by M1",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M2 .\nM0 P1 M3 .\nM0 P1 M4\n}",
        "recursionDepth": 41,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q43051 wdt:P57 wd:Q28439679 .\nwd:Q43051 wdt:P57 wd:Q715807 .\nwd:Q43051 wdt:P57 wd:Q2903332 .\nwd:Q43051 wdt:P162|wdt:P272 wd:Q7414\n}",
        "questionWithBrackets": "Was [Bambi] directed by [Bill Roberts] , directed by [Paul Satterfield] , directed by [James Algar] , and produced by [The Walt Disney Company]"
    },
    {
        "questionIdx": 78967,
        "questionPatternModEntities": "Was M0 directed by M5 , written by M2 , edited by M3 and M4 , and executive produced by M1",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] and [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M2 .\nM0 P2 M3 .\nM0 P2 M4 .\nM0 P3 M5\n}",
        "recursionDepth": 46,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q1740171 wdt:P57 wd:Q363989 .\nwd:Q1740171 wdt:P1040 wd:Q15835006 .\nwd:Q1740171 wdt:P1040 wd:Q7820333 .\nwd:Q1740171 wdt:P1431 wd:Q38222 .\nwd:Q1740171 wdt:P58 wd:Q134456\n}",
        "questionWithBrackets": "Was [Mishima: A Life in Four Chapters] directed by [Paul Schrader] , written by [Yukio Mishima] , edited by [Michael Chandler] and [Tomoyo \u014cshima] , and executive produced by [George Lucas]"
    },
    {
        "questionIdx": 78968,
        "questionPatternModEntities": "Was M0 directed by M2 , directed by M3 , produced by M1 , and directed by M4",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M2 .\nM0 P1 M3 .\nM0 P1 M4\n}",
        "recursionDepth": 41,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q943192 wdt:P57 wd:Q3471034 .\nwd:Q943192 wdt:P57 wd:Q28109065 .\nwd:Q943192 wdt:P57 wd:Q715807 .\nwd:Q943192 wdt:P162|wdt:P272 wd:Q7414\n}",
        "questionWithBrackets": "Was [Fantasia] directed by [Jim Handley] , directed by [James Algar] , produced by [The Walt Disney Company] , and directed by [Samuel Armstrong]"
    },
    {
        "questionIdx": 78972,
        "questionPatternModEntities": "Was M2 directed by M3 , M4 , M5 , and M6 and edited by M0 's male sibling",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] , [entity] , [entity] , and [entity] and [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M0 ) .\nM2 P2 ?x0 .\nM2 P3 M3 .\nM2 P3 M4 .\nM2 P3 M5 .\nM2 P3 M6\n}",
        "recursionDepth": 42,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P21 wd:Q6581097 .\n?x0 wdt:P3373 wd:Q92404 .\nFILTER ( ?x0 != wd:Q92404 ) .\nwd:Q664532 wdt:P57 wd:Q3126919 .\nwd:Q664532 wdt:P57 wd:Q97713 .\nwd:Q664532 wdt:P57 wd:Q44426 .\nwd:Q664532 wdt:P57 wd:Q57316 .\nwd:Q664532 wdt:P1040 ?x0\n}",
        "questionWithBrackets": "Was [Germany in Autumn] directed by [Volker Schl\u00f6ndorff] , [Rainer Werner Fassbinder] , [Bernhard Sinkel] , and [Hans-Peter Cloos] and edited by [Alexandra Kluge] 's male sibling"
    },
    {
        "questionIdx": 78985,
        "questionPatternModEntities": "Was M2 directed by M0 's Spanish sibling and written by M3 , M4 , M5 , M6 , and M7",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] and [VP_SIMPLE] by [entity] , [entity] , [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M0 ) .\nM2 P2 M3 .\nM2 P2 M4 .\nM2 P2 M5 .\nM2 P2 M6 .\nM2 P2 M7 .\nM2 P3 ?x0\n}",
        "recursionDepth": 45,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P27 wd:Q29 .\n?x0 wdt:P3373 wd:Q16943607 .\nFILTER ( ?x0 != wd:Q16943607 ) .\nwd:Q2688944 wdt:P57 ?x0 .\nwd:Q2688944 wdt:P58 wd:Q51752263 .\nwd:Q2688944 wdt:P58 wd:Q11955895 .\nwd:Q2688944 wdt:P58 wd:Q4897429 .\nwd:Q2688944 wdt:P58 wd:Q46619344 .\nwd:Q2688944 wdt:P58 wd:Q17034206\n}",
        "questionWithBrackets": "Was [Pol\u00f2nia] directed by [S\u00edlvia Soler i Guasch] 's Spanish sibling and written by [Toni Soler i Guasch] , [\u00d2scar Andreu] , [Quim Morales] , [Jordi L\u00f3pez] , and [Xavier Navarro]"
    },
    {
        "questionIdx": 78989,
        "questionPatternModEntities": "Was M0 directed by M5 , directed by M6 and M7 , and executive produced by M1 , M2 , M3 , and M4",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] and [entity] , and [VP_SIMPLE] by [entity] , [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P0 M3 .\nM0 P0 M4 .\nM0 P1 M5 .\nM0 P1 M6 .\nM0 P1 M7\n}",
        "recursionDepth": 47,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q60747802 wdt:P57 wd:Q2273145 .\nwd:Q60747802 wdt:P57 wd:Q6135721 .\nwd:Q60747802 wdt:P57 wd:Q21066699 .\nwd:Q60747802 wdt:P1431 wd:Q56005 .\nwd:Q60747802 wdt:P1431 wd:Q63111594 .\nwd:Q60747802 wdt:P1431 wd:Q22075526 .\nwd:Q60747802 wdt:P1431 wd:Q302063\n}",
        "questionWithBrackets": "Was [Raised by Wolves] directed by [James Hawes] , directed by [Sergio Mimica-Gezzan] and [Luke Scott] , and executive produced by [Ridley Scott] , [Mark Huffam] , [Adam Kolbrenner] , and [Aaron Guzikowski]"
    },
    {
        "questionIdx": 78997,
        "questionPatternModEntities": "Was M0 directed by M3 , directed by M4 and M5 , edited by M1 , and edited by M2",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] and [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P1 M3 .\nM0 P1 M4 .\nM0 P1 M5\n}",
        "recursionDepth": 45,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q1137372 wdt:P57 wd:Q3772 .\nwd:Q1137372 wdt:P57 wd:Q2838329 .\nwd:Q1137372 wdt:P57 wd:Q549956 .\nwd:Q1137372 wdt:P1040 wd:Q47284 .\nwd:Q1137372 wdt:P1040 wd:Q5359064\n}",
        "questionWithBrackets": "Was [Four Rooms] directed by [Allison Anders] , directed by [Alexandre Rockwell] and [Quentin Tarantino] , edited by [Elena Maganini] , and edited by [Robert Rodriguez]"
    },
    {
        "questionIdx": 78998,
        "questionPatternModEntities": "Was M0 directed by M4 , edited by M3 , directed by M5 , and executive produced by M1 and M2",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P1 M3 .\nM0 P2 M4 .\nM0 P2 M5\n}",
        "recursionDepth": 46,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q1137372 wdt:P57 wd:Q47284 .\nwd:Q1137372 wdt:P57 wd:Q2838329 .\nwd:Q1137372 wdt:P1040 wd:Q5359064 .\nwd:Q1137372 wdt:P1431 wd:Q3772 .\nwd:Q1137372 wdt:P1431 wd:Q549956\n}",
        "questionWithBrackets": "Was [Four Rooms] directed by [Robert Rodriguez] , edited by [Elena Maganini] , directed by [Allison Anders] , and executive produced by [Quentin Tarantino] and [Alexandre Rockwell]"
    },
    {
        "questionIdx": 79001,
        "questionPatternModEntities": "Was M0 directed by M4 and M5 , produced by M3 , written by M2 , and executive produced by M1",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] and [entity] , [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M2 .\nM0 P2 M3 .\nM0 P3 M4 .\nM0 P3 M5\n}",
        "recursionDepth": 46,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q1315247 wdt:P57 wd:Q42879076 .\nwd:Q1315247 wdt:P57 wd:Q28861428 .\nwd:Q1315247 wdt:P1431 wd:Q8877 .\nwd:Q1315247 wdt:P162|wdt:P272 wd:Q3530867 .\nwd:Q1315247 wdt:P58 wd:Q3481979\n}",
        "questionWithBrackets": "Was [Tiny Toon Adventures: How I Spent My Vacation] directed by [Art Leonardi] and [Ken Boyer] , produced by [Tom Ruegger] , written by [Sherri Stoner] , and executive produced by [Steven Spielberg]"
    },
    {
        "questionIdx": 79002,
        "questionPatternModEntities": "Was M0 directed by M4 and M5 , directed by M6 and M7 , and edited by M1 , M2 , and M3",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] and [entity] , [VP_SIMPLE] by [entity] and [entity] , and [VP_SIMPLE] by [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P0 M3 .\nM0 P1 M4 .\nM0 P1 M5 .\nM0 P1 M6 .\nM0 P1 M7\n}",
        "recursionDepth": 47,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q603857 wdt:P57 wd:Q55238 .\nwd:Q603857 wdt:P57 wd:Q113628 .\nwd:Q603857 wdt:P57 wd:Q44221 .\nwd:Q603857 wdt:P57 wd:Q295093 .\nwd:Q603857 wdt:P1040 wd:Q55215 .\nwd:Q603857 wdt:P1040 wd:Q541826 .\nwd:Q603857 wdt:P1040 wd:Q22074634\n}",
        "questionWithBrackets": "Was [11'09\"01 September 11] directed by [Idrissa Ou\u00e9draogo] and [Ken Loach] , directed by [Sean Penn] and [Claude Lelouch] , and edited by [Robert Duffy] , [Jay Cassidy] , and [Alejandro Gonz\u00e1lez I\u00f1\u00e1rritu]"
    },
    {
        "questionIdx": 79005,
        "questionPatternModEntities": "Was M0 directed by M4 , M5 , M6 , and M7 , edited by M1 , and edited by M2 and M3",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] , [entity] , [entity] , and [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P0 M3 .\nM0 P1 M4 .\nM0 P1 M5 .\nM0 P1 M6 .\nM0 P1 M7\n}",
        "recursionDepth": 46,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q603857 wdt:P57 wd:Q474262 .\nwd:Q603857 wdt:P57 wd:Q432709 .\nwd:Q603857 wdt:P57 wd:Q466320 .\nwd:Q603857 wdt:P57 wd:Q44221 .\nwd:Q603857 wdt:P1040 wd:Q55215 .\nwd:Q603857 wdt:P1040 wd:Q18021284 .\nwd:Q603857 wdt:P1040 wd:Q22074634\n}",
        "questionWithBrackets": "Was [11'09\"01 September 11] directed by [Mira Nair] , [Sean Penn] , [Amos Gitai] , and [Samira Makhmalbaf] , edited by [Jonathan Morris] , and edited by [Alejandro Gonz\u00e1lez I\u00f1\u00e1rritu] and [Robert Duffy]"
    },
    {
        "questionIdx": 79006,
        "questionPatternModEntities": "Was M0 directed by M3 , edited by M1 and M2 , and directed by M4 , M5 , M6 , and M7",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] and [entity] , and [VP_SIMPLE] by [entity] , [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P1 M3 .\nM0 P1 M4 .\nM0 P1 M5 .\nM0 P1 M6 .\nM0 P1 M7\n}",
        "recursionDepth": 46,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q603857 wdt:P57 wd:Q474262 .\nwd:Q603857 wdt:P57 wd:Q312611 .\nwd:Q603857 wdt:P57 wd:Q113628 .\nwd:Q603857 wdt:P57 wd:Q313497 .\nwd:Q603857 wdt:P57 wd:Q295093 .\nwd:Q603857 wdt:P1040 wd:Q55211 .\nwd:Q603857 wdt:P1040 wd:Q18021284\n}",
        "questionWithBrackets": "Was [11'09\"01 September 11] directed by [Youssef Chahine] , edited by [Jonathan Morris] and [Mohsen Makhmalbaf] , and directed by [Claude Lelouch] , [Amos Gitai] , [Idrissa Ou\u00e9draogo] , and [Danis Tanovi\u0107]"
    },
    {
        "questionIdx": 79012,
        "questionPatternModEntities": "Was M0 directed by M3 , M4 , M5 , M6 , and M7 , produced by M2 , and written by M1",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] , [entity] , [entity] , [entity] , and [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M2 .\nM0 P2 M3 .\nM0 P2 M4 .\nM0 P2 M5 .\nM0 P2 M6 .\nM0 P2 M7\n}",
        "recursionDepth": 45,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q901203 wdt:P57 wd:Q1203 .\nwd:Q901203 wdt:P57 wd:Q2632 .\nwd:Q901203 wdt:P57 wd:Q2599 .\nwd:Q901203 wdt:P57 wd:Q2643 .\nwd:Q901203 wdt:P57 wd:Q822523 .\nwd:Q901203 wdt:P162|wdt:P272 wd:Q79202 .\nwd:Q901203 wdt:P58 wd:Q1299\n}",
        "questionWithBrackets": "Was [Magical Mystery Tour] directed by [Bernard Knowles] , [Paul McCartney] , [John Lennon] , [George Harrison] , and [Ringo Starr] , produced by [New Line Cinema] , and written by [The Beatles]"
    },
    {
        "questionIdx": 79037,
        "questionPatternModEntities": "Was M0 edited by M1 and M2 , edited by M3 and M4 , and directed by M5 , M6 , and M7",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] and [entity] , [VP_SIMPLE] by [entity] and [entity] , and [VP_SIMPLE] by [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P0 M3 .\nM0 P0 M4 .\nM0 P1 M5 .\nM0 P1 M6 .\nM0 P1 M7\n}",
        "recursionDepth": 47,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q1137372 wdt:P57 wd:Q2838329 .\nwd:Q1137372 wdt:P57 wd:Q549956 .\nwd:Q1137372 wdt:P57 wd:Q3772 .\nwd:Q1137372 wdt:P1040 wd:Q47284 .\nwd:Q1137372 wdt:P1040 wd:Q541143 .\nwd:Q1137372 wdt:P1040 wd:Q273379 .\nwd:Q1137372 wdt:P1040 wd:Q5359064\n}",
        "questionWithBrackets": "Was [Four Rooms] edited by [Elena Maganini] and [Terry Rawlings] , edited by [Sally Menke] and [Robert Rodriguez] , and directed by [Quentin Tarantino] , [Allison Anders] , and [Alexandre Rockwell]"
    },
    {
        "questionIdx": 79039,
        "questionPatternModEntities": "Was M0 edited by M1 and M2 , edited by M3 and M4 , and edited by M5 and M6",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] and [entity] , [VP_SIMPLE] by [entity] and [entity] , and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P0 M3 .\nM0 P0 M4 .\nM0 P0 M5 .\nM0 P0 M6\n}",
        "recursionDepth": 44,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q603857 wdt:P1040 wd:Q55211 .\nwd:Q603857 wdt:P1040 wd:Q18021284 .\nwd:Q603857 wdt:P1040 wd:Q55215 .\nwd:Q603857 wdt:P1040 wd:Q22074634 .\nwd:Q603857 wdt:P1040 wd:Q5639976 .\nwd:Q603857 wdt:P1040 wd:Q541826\n}",
        "questionWithBrackets": "Was [11'09\"01 September 11] edited by [Robert Duffy] and [Mohsen Makhmalbaf] , edited by [Alejandro Gonz\u00e1lez I\u00f1\u00e1rritu] and [Hajime Okayasu] , and edited by [Jay Cassidy] and [Jonathan Morris]"
    },
    {
        "questionIdx": 79046,
        "questionPatternModEntities": "Was M0 edited by M4 , directed by M5 , M6 , and M7 , and written by M1 , M2 , and M3",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , [entity] , and [entity] , and [VP_SIMPLE] by [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P0 M3 .\nM0 P1 M4 .\nM0 P2 M5 .\nM0 P2 M6 .\nM0 P2 M7\n}",
        "recursionDepth": 46,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q603857 wdt:P57 wd:Q113628 .\nwd:Q603857 wdt:P57 wd:Q55238 .\nwd:Q603857 wdt:P57 wd:Q309950 .\nwd:Q603857 wdt:P1040 wd:Q55211 .\nwd:Q603857 wdt:P58 wd:Q20438470 .\nwd:Q603857 wdt:P58 wd:Q295093 .\nwd:Q603857 wdt:P58 wd:Q55215\n}",
        "questionWithBrackets": "Was [11'09\"01 September 11] edited by [Mohsen Makhmalbaf] , directed by [Ken Loach] , [Shohei Imamura] , and [Idrissa Ou\u00e9draogo] , and written by [Claude Lelouch] , [Alejandro Gonz\u00e1lez I\u00f1\u00e1rritu] , and [Tatjana \u0160oji\u0107]"
    },
    {
        "questionIdx": 79055,
        "questionPatternModEntities": "Was M0 edited by M3 and M4 , edited by M5 , M6 , and M7 , and written by M1 and M2",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] and [entity] , [VP_SIMPLE] by [entity] , [entity] , and [entity] , and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P1 M3 .\nM0 P1 M4 .\nM0 P1 M5 .\nM0 P1 M6 .\nM0 P1 M7\n}",
        "recursionDepth": 47,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q603857 wdt:P1040 wd:Q55215 .\nwd:Q603857 wdt:P1040 wd:Q5639976 .\nwd:Q603857 wdt:P1040 wd:Q18021284 .\nwd:Q603857 wdt:P1040 wd:Q22074634 .\nwd:Q603857 wdt:P1040 wd:Q55211 .\nwd:Q603857 wdt:P58 wd:Q20438470 .\nwd:Q603857 wdt:P58 wd:Q44221\n}",
        "questionWithBrackets": "Was [11'09\"01 September 11] edited by [Jonathan Morris] and [Robert Duffy] , edited by [Alejandro Gonz\u00e1lez I\u00f1\u00e1rritu] , [Hajime Okayasu] , and [Mohsen Makhmalbaf] , and written by [Tatjana \u0160oji\u0107] and [Sean Penn]"
    },
    {
        "questionIdx": 79059,
        "questionPatternModEntities": "Was M0 edited by M2 , edited by M3 , M4 , M5 , M6 , and M7 , and written by M1",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , [entity] , [entity] , [entity] , and [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M2 .\nM0 P1 M3 .\nM0 P1 M4 .\nM0 P1 M5 .\nM0 P1 M6 .\nM0 P1 M7\n}",
        "recursionDepth": 45,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q603857 wdt:P1040 wd:Q55215 .\nwd:Q603857 wdt:P1040 wd:Q5639976 .\nwd:Q603857 wdt:P1040 wd:Q18021284 .\nwd:Q603857 wdt:P1040 wd:Q22074634 .\nwd:Q603857 wdt:P1040 wd:Q541826 .\nwd:Q603857 wdt:P1040 wd:Q55211 .\nwd:Q603857 wdt:P58 wd:Q313497\n}",
        "questionWithBrackets": "Was [11'09\"01 September 11] edited by [Hajime Okayasu] , edited by [Jay Cassidy] , [Robert Duffy] , [Jonathan Morris] , [Mohsen Makhmalbaf] , and [Alejandro Gonz\u00e1lez I\u00f1\u00e1rritu] , and written by [Danis Tanovi\u0107]"
    },
    {
        "questionIdx": 79064,
        "questionPatternModEntities": "Was M0 edited by M2 and M3 , written by M1 , and edited by M4 , M5 , M6 , and M7",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] and [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity] , [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M2 .\nM0 P1 M3 .\nM0 P1 M4 .\nM0 P1 M5 .\nM0 P1 M6 .\nM0 P1 M7\n}",
        "recursionDepth": 46,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q603857 wdt:P1040 wd:Q55211 .\nwd:Q603857 wdt:P1040 wd:Q541826 .\nwd:Q603857 wdt:P1040 wd:Q5639976 .\nwd:Q603857 wdt:P1040 wd:Q22074634 .\nwd:Q603857 wdt:P1040 wd:Q18021284 .\nwd:Q603857 wdt:P1040 wd:Q55215 .\nwd:Q603857 wdt:P58 wd:Q922492\n}",
        "questionWithBrackets": "Was [11'09\"01 September 11] edited by [Hajime Okayasu] and [Jay Cassidy] , written by [Paul Laverty] , and edited by [Mohsen Makhmalbaf] , [Alejandro Gonz\u00e1lez I\u00f1\u00e1rritu] , [Jonathan Morris] , and [Robert Duffy]"
    },
    {
        "questionIdx": 79070,
        "questionPatternModEntities": "Was M0 edited by M4 , written by M1 , edited by M5 , and written by M2 and M3",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P0 M3 .\nM0 P1 M4 .\nM0 P1 M5\n}",
        "recursionDepth": 45,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q152350 wdt:P1040 wd:Q8003 .\nwd:Q152350 wdt:P1040 wd:Q561459 .\nwd:Q152350 wdt:P58 wd:Q722164 .\nwd:Q152350 wdt:P58 wd:Q7495246 .\nwd:Q152350 wdt:P58 wd:Q460329\n}",
        "questionWithBrackets": "Was [Battleship Potemkin] edited by [Sergei Eisenstein] , written by [Sergei Tretyakov] , edited by [Grigori Aleksandrov] , and written by [Nikolai Aseev] and [Nina Agadzhanova-Shutko]"
    },
    {
        "questionIdx": 79072,
        "questionPatternModEntities": "Was M0 edited by M4 and M5 , written by M2 , executive produced by M1 , and written by M3",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] and [entity] , [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M2 .\nM0 P1 M3 .\nM0 P2 M4 .\nM0 P2 M5\n}",
        "recursionDepth": 46,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q1740171 wdt:P1040 wd:Q7820333 .\nwd:Q1740171 wdt:P1040 wd:Q15835006 .\nwd:Q1740171 wdt:P1431 wd:Q56094 .\nwd:Q1740171 wdt:P58 wd:Q134456 .\nwd:Q1740171 wdt:P58 wd:Q9292586\n}",
        "questionWithBrackets": "Was [Mishima: A Life in Four Chapters] edited by [Tomoyo \u014cshima] and [Michael Chandler] , written by [Yukio Mishima] , executive produced by [Francis Ford Coppola] , and written by [Leonard Schrader]"
    },
    {
        "questionIdx": 79073,
        "questionPatternModEntities": "Was M0 edited by M3 , M4 , M5 , and M6 , written by M1 and M2 , and directed by M7",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] , [entity] , [entity] , and [entity] , [VP_SIMPLE] by [entity] and [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P1 M3 .\nM0 P1 M4 .\nM0 P1 M5 .\nM0 P1 M6 .\nM0 P2 M7\n}",
        "recursionDepth": 46,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q1137372 wdt:P57 wd:Q3772 .\nwd:Q1137372 wdt:P1040 wd:Q47284 .\nwd:Q1137372 wdt:P1040 wd:Q5359064 .\nwd:Q1137372 wdt:P1040 wd:Q273379 .\nwd:Q1137372 wdt:P1040 wd:Q541143 .\nwd:Q1137372 wdt:P58 wd:Q2838329 .\nwd:Q1137372 wdt:P58 wd:Q549956\n}",
        "questionWithBrackets": "Was [Four Rooms] edited by [Elena Maganini] , [Sally Menke] , [Robert Rodriguez] , and [Terry Rawlings] , written by [Allison Anders] and [Alexandre Rockwell] , and directed by [Quentin Tarantino]"
    },
    {
        "questionIdx": 79074,
        "questionPatternModEntities": "Was M0 edited by M1 , directed by M2 , directed by M3 , and directed by M4",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M2 .\nM0 P1 M3 .\nM0 P1 M4\n}",
        "recursionDepth": 41,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q1137372 wdt:P57 wd:Q2838329 .\nwd:Q1137372 wdt:P57 wd:Q549956 .\nwd:Q1137372 wdt:P57 wd:Q3772 .\nwd:Q1137372 wdt:P1040 wd:Q47284\n}",
        "questionWithBrackets": "Was [Four Rooms] edited by [Robert Rodriguez] , directed by [Quentin Tarantino] , directed by [Allison Anders] , and directed by [Alexandre Rockwell]"
    },
    {
        "questionIdx": 79083,
        "questionPatternModEntities": "Was M0 edited by M2 , M3 , and M4 , edited by M5 , M6 , and M7 , and written by M1",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] , [entity] , and [entity] , [VP_SIMPLE] by [entity] , [entity] , and [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M2 .\nM0 P1 M3 .\nM0 P1 M4 .\nM0 P1 M5 .\nM0 P1 M6 .\nM0 P1 M7\n}",
        "recursionDepth": 46,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q603857 wdt:P1040 wd:Q55211 .\nwd:Q603857 wdt:P1040 wd:Q541826 .\nwd:Q603857 wdt:P1040 wd:Q5639976 .\nwd:Q603857 wdt:P1040 wd:Q22074634 .\nwd:Q603857 wdt:P1040 wd:Q18021284 .\nwd:Q603857 wdt:P1040 wd:Q55215 .\nwd:Q603857 wdt:P58 wd:Q922492\n}",
        "questionWithBrackets": "Was [11'09\"01 September 11] edited by [Alejandro Gonz\u00e1lez I\u00f1\u00e1rritu] , [Robert Duffy] , and [Mohsen Makhmalbaf] , edited by [Hajime Okayasu] , [Jonathan Morris] , and [Jay Cassidy] , and written by [Paul Laverty]"
    },
    {
        "questionIdx": 79104,
        "questionPatternModEntities": "Was M0 edited by M3 , M4 , M5 , M6 , and M7 , written by M1 , and written by M2",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] , [entity] , [entity] , [entity] , and [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P1 M3 .\nM0 P1 M4 .\nM0 P1 M5 .\nM0 P1 M6 .\nM0 P1 M7\n}",
        "recursionDepth": 45,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q603857 wdt:P1040 wd:Q55211 .\nwd:Q603857 wdt:P1040 wd:Q541826 .\nwd:Q603857 wdt:P1040 wd:Q18021284 .\nwd:Q603857 wdt:P1040 wd:Q22074634 .\nwd:Q603857 wdt:P1040 wd:Q55215 .\nwd:Q603857 wdt:P58 wd:Q432709 .\nwd:Q603857 wdt:P58 wd:Q55238\n}",
        "questionWithBrackets": "Was [11'09\"01 September 11] edited by [Jay Cassidy] , [Jonathan Morris] , [Mohsen Makhmalbaf] , [Alejandro Gonz\u00e1lez I\u00f1\u00e1rritu] , and [Robert Duffy] , written by [Ken Loach] , and written by [Samira Makhmalbaf]"
    },
    {
        "questionIdx": 79105,
        "questionPatternModEntities": "Was M0 edited by M3 , directed by M4 and M5 , produced by M2 , and executive produced by M1",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] and [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M2 .\nM0 P2 M3 .\nM0 P3 M4 .\nM0 P3 M5\n}",
        "recursionDepth": 46,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q579757 wdt:P57 wd:Q8312 .\nwd:Q579757 wdt:P57 wd:Q7614407 .\nwd:Q579757 wdt:P1040 wd:Q977397 .\nwd:Q579757 wdt:P1431 wd:Q16345 .\nwd:Q579757 wdt:P162|wdt:P272 wd:Q159846\n}",
        "questionWithBrackets": "Was [Star Trek VI: The Undiscovered Country] edited by [William Hoy] , directed by [Nicholas Meyer] and [Steven-Charles Jaffe] , produced by [Paramount Pictures] , and executive produced by [Leonard Nimoy]"
    },
    {
        "questionIdx": 79108,
        "questionPatternModEntities": "Was M0 edited by M6 , written by M1 , M2 , M3 , M4 , and M5 , and edited by M7",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , [entity] , [entity] , [entity] , and [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P0 M3 .\nM0 P0 M4 .\nM0 P0 M5 .\nM0 P1 M6 .\nM0 P1 M7\n}",
        "recursionDepth": 45,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q603857 wdt:P1040 wd:Q55211 .\nwd:Q603857 wdt:P1040 wd:Q5639976 .\nwd:Q603857 wdt:P58 wd:Q474262 .\nwd:Q603857 wdt:P58 wd:Q312611 .\nwd:Q603857 wdt:P58 wd:Q44221 .\nwd:Q603857 wdt:P58 wd:Q55215 .\nwd:Q603857 wdt:P58 wd:Q313497\n}",
        "questionWithBrackets": "Was [11'09\"01 September 11] edited by [Mohsen Makhmalbaf] , written by [Danis Tanovi\u0107] , [Youssef Chahine] , [Sean Penn] , [Amos Gitai] , and [Alejandro Gonz\u00e1lez I\u00f1\u00e1rritu] , and edited by [Hajime Okayasu]"
    },
    {
        "questionIdx": 79121,
        "questionPatternModEntities": "Was M0 edited by M2 , M3 , and M4 , written by M1 , and edited by M5 , M6 , and M7",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] , [entity] , and [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M2 .\nM0 P1 M3 .\nM0 P1 M4 .\nM0 P1 M5 .\nM0 P1 M6 .\nM0 P1 M7\n}",
        "recursionDepth": 46,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q1206255 wdt:P1040 wd:Q96190 .\nwd:Q1206255 wdt:P1040 wd:Q17537097 .\nwd:Q1206255 wdt:P1040 wd:Q72685 .\nwd:Q1206255 wdt:P1040 wd:Q503742 .\nwd:Q1206255 wdt:P1040 wd:Q832573 .\nwd:Q1206255 wdt:P1040 wd:Q85942962 .\nwd:Q1206255 wdt:P58 wd:Q77061\n}",
        "questionWithBrackets": "Was [Germany 09] edited by [Peter R. Adam] , [Romuald Karmakar] , and [Oliver Neumann] , written by [Fatih Ak\u0131n] , and edited by [Bettina B\u00f6hler] , [Anne J\u00fcnemann] , and [Andrew Bird]"
    },
    {
        "questionIdx": 79123,
        "questionPatternModEntities": "Was M0 edited by M5 , M6 , and M7 , written by M1 and M2 , and written by M3 and M4",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] , [entity] , and [entity] , [VP_SIMPLE] by [entity] and [entity] , and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P0 M3 .\nM0 P0 M4 .\nM0 P1 M5 .\nM0 P1 M6 .\nM0 P1 M7\n}",
        "recursionDepth": 47,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q1137372 wdt:P1040 wd:Q47284 .\nwd:Q1137372 wdt:P1040 wd:Q541143 .\nwd:Q1137372 wdt:P1040 wd:Q5359064 .\nwd:Q1137372 wdt:P58 wd:Q2838329 .\nwd:Q1137372 wdt:P58 wd:Q549956 .\nwd:Q1137372 wdt:P58 wd:Q25161 .\nwd:Q1137372 wdt:P58 wd:Q3772\n}",
        "questionWithBrackets": "Was [Four Rooms] edited by [Terry Rawlings] , [Robert Rodriguez] , and [Elena Maganini] , written by [Allison Anders] and [Alexandre Rockwell] , and written by [Quentin Tarantino] and [Roald Dahl]"
    },
    {
        "questionIdx": 79163,
        "questionPatternModEntities": "Was M1 executive produced by M2 and M3 , directed by M4 and M5 , and executive produced by M0 's parent",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] and [entity] , [VP_SIMPLE] by [entity] and [entity] , and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 ?x0 .\nM1 P1 M2 .\nM1 P1 M3 .\nM1 P2 M4 .\nM1 P2 M5\n}",
        "recursionDepth": 46,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q29109895 .\nwd:Q7734937 wdt:P57 wd:Q89552 .\nwd:Q7734937 wdt:P57 wd:Q302650 .\nwd:Q7734937 wdt:P1431 ?x0 .\nwd:Q7734937 wdt:P1431 wd:Q19479569 .\nwd:Q7734937 wdt:P1431 wd:Q919229\n}",
        "questionWithBrackets": "Was [The Fosters] executive produced by [Brad Bredeweg] and [Peter Paige] , directed by [Danny Nucci] and [Tate Donovan] , and executive produced by [Emme Mu\u00f1iz\u200e] 's parent"
    },
    {
        "questionIdx": 79169,
        "questionPatternModEntities": "Was M0 executive produced by M1 , edited by M3 , produced by M2 , and edited by M4",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M2 .\nM0 P2 M3 .\nM0 P2 M4\n}",
        "recursionDepth": 42,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q160560 wdt:P1040 wd:Q484948 .\nwd:Q160560 wdt:P1040 wd:Q487090 .\nwd:Q160560 wdt:P1431 wd:Q7345 .\nwd:Q160560 wdt:P162|wdt:P272 wd:Q511731\n}",
        "questionWithBrackets": "Was [The Da Vinci Code] executive produced by [Dan Brown] , edited by [Daniel P. Hanley] , produced by [Imagine Entertainment] , and edited by [Mike Hill]"
    },
    {
        "questionIdx": 79172,
        "questionPatternModEntities": "Was M0 executive produced by M1 , M2 , M3 , and M4 , directed by M5 , and directed by M6 and M7",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] , [entity] , [entity] , and [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P0 M3 .\nM0 P0 M4 .\nM0 P1 M5 .\nM0 P1 M6 .\nM0 P1 M7\n}",
        "recursionDepth": 47,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q60747802 wdt:P57 wd:Q98931722 .\nwd:Q60747802 wdt:P57 wd:Q21066699 .\nwd:Q60747802 wdt:P57 wd:Q2273145 .\nwd:Q60747802 wdt:P1431 wd:Q56005 .\nwd:Q60747802 wdt:P1431 wd:Q22075526 .\nwd:Q60747802 wdt:P1431 wd:Q17145814 .\nwd:Q60747802 wdt:P1431 wd:Q63111594\n}",
        "questionWithBrackets": "Was [Raised by Wolves] executive produced by [Ridley Scott] , [Adam Kolbrenner] , [Mark Huffam] , and [David W. Zucker] , directed by [Luke Scott] , and directed by [Alex Gabassi] and [Sergio Mimica-Gezzan]"
    },
    {
        "questionIdx": 79173,
        "questionPatternModEntities": "Was M0 executive produced by M1 and M2 , written by M3 , produced by M4 , and directed by M5",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] and [entity] , [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P1 M3 .\nM0 P2 M4 .\nM0 P3 M5\n}",
        "recursionDepth": 46,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q14513321 wdt:P57 wd:Q552731 .\nwd:Q14513321 wdt:P1431 wd:Q52994 .\nwd:Q14513321 wdt:P1431 wd:Q67206382 .\nwd:Q14513321 wdt:P162|wdt:P272 wd:Q16213294 .\nwd:Q14513321 wdt:P58 wd:Q5080142\n}",
        "questionWithBrackets": "Was [Warcraft] executive produced by [Edward Cheng] and [Michael Morhaime] , written by [Charles Leavitt] , produced by [Thomas Tull] , and directed by [Duncan Jones]"
    },
    {
        "questionIdx": 79200,
        "questionPatternModEntities": "Was M0 produced by M2 , directed by M3 , directed by M4 , and executive produced by M1",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M2 .\nM0 P2 M3 .\nM0 P2 M4\n}",
        "recursionDepth": 42,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q208048 wdt:P57 wd:Q1279660 .\nwd:Q208048 wdt:P57 wd:Q2263 .\nwd:Q208048 wdt:P1431 wd:Q8877 .\nwd:Q208048 wdt:P162|wdt:P272 wd:Q443953\n}",
        "questionWithBrackets": "Was [Band of Brothers] produced by [Stephen E. Ambrose] , directed by [David Nutter] , directed by [Tom Hanks] , and executive produced by [Steven Spielberg]"
    },
    {
        "questionIdx": 79208,
        "questionPatternModEntities": "Was M0 produced by M4 , directed by M5 , M6 , and M7 , and written by M1 , M2 , and M3",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , [entity] , and [entity] , and [VP_SIMPLE] by [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P0 M3 .\nM0 P1 M4 .\nM0 P2 M5 .\nM0 P2 M6 .\nM0 P2 M7\n}",
        "recursionDepth": 46,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q1079 wdt:P57 wd:Q371455 .\nwd:Q1079 wdt:P57 wd:Q462727 .\nwd:Q1079 wdt:P57 wd:Q1279422 .\nwd:Q1079 wdt:P162|wdt:P272 wd:Q652390 .\nwd:Q1079 wdt:P58 wd:Q4500 .\nwd:Q1079 wdt:P58 wd:Q7174311 .\nwd:Q1079 wdt:P58 wd:Q15042700\n}",
        "questionWithBrackets": "Was [Breaking Bad] produced by [Sony Pictures Television] , directed by [F\u00e9lix Enr\u00edquez Alcal\u00e1] , [Charles Haid] , and [David Slade] , and written by [Thomas Schnauz] , [Vince Gilligan] , and [Peter Gould]"
    },
    {
        "questionIdx": 79209,
        "questionPatternModEntities": "Was M0 produced by M3 , directed by M4 , M5 , M6 , and M7 , and written by M1 and M2",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , [entity] , [entity] , and [entity] , and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P1 M3 .\nM0 P2 M4 .\nM0 P2 M5 .\nM0 P2 M6 .\nM0 P2 M7\n}",
        "recursionDepth": 46,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q901203 wdt:P57 wd:Q2599 .\nwd:Q901203 wdt:P57 wd:Q2632 .\nwd:Q901203 wdt:P57 wd:Q822523 .\nwd:Q901203 wdt:P57 wd:Q1203 .\nwd:Q901203 wdt:P162|wdt:P272 wd:Q79202 .\nwd:Q901203 wdt:P58 wd:Q2643 .\nwd:Q901203 wdt:P58 wd:Q1299\n}",
        "questionWithBrackets": "Was [Magical Mystery Tour] produced by [New Line Cinema] , directed by [Paul McCartney] , [John Lennon] , [Ringo Starr] , and [Bernard Knowles] , and written by [The Beatles] and [George Harrison]"
    },
    {
        "questionIdx": 79210,
        "questionPatternModEntities": "Was M0 produced by M6 , edited by M7 , and written by M1 , M2 , M3 , M4 , and M5",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity] , [entity] , [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P0 M3 .\nM0 P0 M4 .\nM0 P0 M5 .\nM0 P1 M6 .\nM0 P2 M7\n}",
        "recursionDepth": 45,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q180098 wdt:P1040 wd:Q176929 .\nwd:Q180098 wdt:P162|wdt:P272 wd:Q1362717 .\nwd:Q180098 wdt:P58 wd:Q459300 .\nwd:Q180098 wdt:P58 wd:Q911096 .\nwd:Q180098 wdt:P58 wd:Q432919 .\nwd:Q180098 wdt:P58 wd:Q543468 .\nwd:Q180098 wdt:P58 wd:Q167821\n}",
        "questionWithBrackets": "Was [Ben-Hur] produced by [Sam Zimbalist] , edited by [John Dunning] , and written by [Maxwell Anderson] , [Gore Vidal] , [Christopher Fry] , [S. N. Behrman] , and [Karl Tunberg]"
    },
    {
        "questionIdx": 79211,
        "questionPatternModEntities": "Was M0 produced by M7 , executive produced by M1 , and written by M2 , M3 , M4 , M5 , and M6",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity] , [entity] , [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M2 .\nM0 P1 M3 .\nM0 P1 M4 .\nM0 P1 M5 .\nM0 P1 M6 .\nM0 P2 M7\n}",
        "recursionDepth": 46,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q725578 wdt:P1431 wd:Q8877 .\nwd:Q725578 wdt:P162|wdt:P272 wd:Q103646 .\nwd:Q725578 wdt:P58 wd:Q467500 .\nwd:Q725578 wdt:P58 wd:Q310556 .\nwd:Q725578 wdt:P58 wd:Q432598 .\nwd:Q725578 wdt:P58 wd:Q615343 .\nwd:Q725578 wdt:P58 wd:Q3128755\n}",
        "questionWithBrackets": "Was [Cowboys & Aliens] produced by [Ron Howard] , executive produced by [Steven Spielberg] , and written by [Hawk Ostby] , [Roberto Orci] , [Damon Lindelof] , [Mark Fergus] , and [Alex Kurtzman]"
    },
    {
        "questionIdx": 79212,
        "questionPatternModEntities": "Was M0 produced by M6 , written by M1 , M2 , M3 , M4 , and M5 , and directed by M7",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , [entity] , [entity] , [entity] , and [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P0 M3 .\nM0 P0 M4 .\nM0 P0 M5 .\nM0 P1 M6 .\nM0 P2 M7\n}",
        "recursionDepth": 45,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q28865118 wdt:P57 wd:Q220751 .\nwd:Q28865118 wdt:P162|wdt:P272 wd:Q434841 .\nwd:Q28865118 wdt:P58 wd:Q2593 .\nwd:Q28865118 wdt:P58 wd:Q7475875 .\nwd:Q28865118 wdt:P58 wd:Q219507 .\nwd:Q28865118 wdt:P58 wd:Q32661 .\nwd:Q28865118 wdt:P58 wd:Q4805527\n}",
        "questionWithBrackets": "Was [X-Men Beginnings] produced by [20th Century Studios] , written by [Zack Stentz] , [Jane Goldman] , [Ashley Miller] , [Simon Kinberg] , and [Matthew Vaughn] , and directed by [Bryan Singer]"
    },
    {
        "questionIdx": 79230,
        "questionPatternModEntities": "Was M0 written by M1 , M2 , and M3 , produced by M4 , and directed by M5 , M6 , and M7",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] , [entity] , and [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P0 M3 .\nM0 P1 M4 .\nM0 P2 M5 .\nM0 P2 M6 .\nM0 P2 M7\n}",
        "recursionDepth": 46,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q1079 wdt:P57 wd:Q371455 .\nwd:Q1079 wdt:P57 wd:Q127800 .\nwd:Q1079 wdt:P57 wd:Q621818 .\nwd:Q1079 wdt:P162|wdt:P272 wd:Q652390 .\nwd:Q1079 wdt:P58 wd:Q4500 .\nwd:Q1079 wdt:P58 wd:Q15042700 .\nwd:Q1079 wdt:P58 wd:Q5542223\n}",
        "questionWithBrackets": "Was [Breaking Bad] written by [George Mastras] , [Thomas Schnauz] , and [Vince Gilligan] , produced by [Sony Pictures Television] , and directed by [David Slade] , [Rian Johnson] , and [Michelle MacLaren]"
    },
    {
        "questionIdx": 79245,
        "questionPatternModEntities": "Was M0 written by M2 , M3 , M4 , M5 , and M6 , executive produced by M1 , and produced by M7",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] , [entity] , [entity] , [entity] , and [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M2 .\nM0 P1 M3 .\nM0 P1 M4 .\nM0 P1 M5 .\nM0 P1 M6 .\nM0 P2 M7\n}",
        "recursionDepth": 46,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q172837 wdt:P1431 wd:Q53004 .\nwd:Q172837 wdt:P162|wdt:P272 wd:Q5385224 .\nwd:Q172837 wdt:P58 wd:Q731702 .\nwd:Q172837 wdt:P58 wd:Q268443 .\nwd:Q172837 wdt:P58 wd:Q469164 .\nwd:Q172837 wdt:P58 wd:Q3828654 .\nwd:Q172837 wdt:P58 wd:Q1521637\n}",
        "questionWithBrackets": "Was [Bicycle Thieves] written by [Gherardo Gherardi] , [Suso Cecchi d'Amico] , [Adolfo Franci] , [Oreste Biancoli] , and [Cesare Zavattini] , executive produced by [Vittorio De Sica] , and produced by [Ercole Graziadei]"
    },
    {
        "questionIdx": 79246,
        "questionPatternModEntities": "Was M0 written by M1 , directed by M6 and M7 , and edited by M2 , M3 , M4 , and M5",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] and [entity] , and [VP_SIMPLE] by [entity] , [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M2 .\nM0 P1 M3 .\nM0 P1 M4 .\nM0 P1 M5 .\nM0 P2 M6 .\nM0 P2 M7\n}",
        "recursionDepth": 46,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q1137372 wdt:P57 wd:Q2838329 .\nwd:Q1137372 wdt:P57 wd:Q549956 .\nwd:Q1137372 wdt:P1040 wd:Q47284 .\nwd:Q1137372 wdt:P1040 wd:Q273379 .\nwd:Q1137372 wdt:P1040 wd:Q5359064 .\nwd:Q1137372 wdt:P1040 wd:Q541143 .\nwd:Q1137372 wdt:P58 wd:Q25161\n}",
        "questionWithBrackets": "Was [Four Rooms] written by [Roald Dahl] , directed by [Alexandre Rockwell] and [Allison Anders] , and edited by [Terry Rawlings] , [Sally Menke] , [Robert Rodriguez] , and [Elena Maganini]"
    },
    {
        "questionIdx": 79248,
        "questionPatternModEntities": "Was M0 written by M2 and M3 , executive produced by M1 , directed by M5 , and edited by M4",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] and [entity] , [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M2 .\nM0 P1 M3 .\nM0 P2 M4 .\nM0 P3 M5\n}",
        "recursionDepth": 46,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q3828687 wdt:P57 wd:Q1972350 .\nwd:Q3828687 wdt:P1040 wd:Q12810038 .\nwd:Q3828687 wdt:P1431 wd:Q72614 .\nwd:Q3828687 wdt:P58 wd:Q717015 .\nwd:Q3828687 wdt:P58 wd:Q1174564\n}",
        "questionWithBrackets": "Was [The Unfaithful] written by [David Goodis] and [James Gunn] , executive produced by [Jack Warner] , directed by [Vincent Sherman] , and edited by [Alan Crosland Jr.]"
    },
    {
        "questionIdx": 79254,
        "questionPatternModEntities": "Was M0 written by M1 , produced by M2 , edited by M3 , and directed by M4 and M5",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M2 .\nM0 P2 M3 .\nM0 P3 M4 .\nM0 P3 M5\n}",
        "recursionDepth": 45,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q497139 wdt:P57 wd:Q350717 .\nwd:Q497139 wdt:P57 wd:Q263486 .\nwd:Q497139 wdt:P1040 wd:Q8293 .\nwd:Q497139 wdt:P162|wdt:P272 wd:Q1279758 .\nwd:Q497139 wdt:P58 wd:Q6371057\n}",
        "questionWithBrackets": "Was [Chasing Mavericks] written by [Kario Salem] , produced by [Mark Johnson] , edited by [John Gilbert] , and directed by [Curtis Hanson] and [Michael Apted]"
    },
    {
        "questionIdx": 79263,
        "questionPatternModEntities": "Was M0 written by M1 and M2 , edited by M6 and M7 , and written by M3 , M4 , and M5",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] and [entity] , [VP_SIMPLE] by [entity] and [entity] , and [VP_SIMPLE] by [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P0 M3 .\nM0 P0 M4 .\nM0 P0 M5 .\nM0 P1 M6 .\nM0 P1 M7\n}",
        "recursionDepth": 47,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q603857 wdt:P1040 wd:Q55211 .\nwd:Q603857 wdt:P1040 wd:Q18021284 .\nwd:Q603857 wdt:P58 wd:Q295093 .\nwd:Q603857 wdt:P58 wd:Q44221 .\nwd:Q603857 wdt:P58 wd:Q55215 .\nwd:Q603857 wdt:P58 wd:Q113628 .\nwd:Q603857 wdt:P58 wd:Q55238\n}",
        "questionWithBrackets": "Was [11'09\"01 September 11] written by [Claude Lelouch] and [Ken Loach] , edited by [Mohsen Makhmalbaf] and [Jonathan Morris] , and written by [Idrissa Ou\u00e9draogo] , [Sean Penn] , and [Alejandro Gonz\u00e1lez I\u00f1\u00e1rritu]"
    },
    {
        "questionIdx": 79269,
        "questionPatternModEntities": "Was M0 written by M1 , edited by M3 , produced by M2 , and edited by M4",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M2 .\nM0 P2 M3 .\nM0 P2 M4\n}",
        "recursionDepth": 41,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q1166360 wdt:P1040 wd:Q3137 .\nwd:Q1166360 wdt:P1040 wd:Q360002 .\nwd:Q1166360 wdt:P162|wdt:P272 wd:Q1707323 .\nwd:Q1166360 wdt:P58 wd:Q1452750\n}",
        "questionWithBrackets": "Was [Darling] written by [Frederic Raphael] , edited by [Jim Clark] , produced by [Joseph Janni] , and edited by [Jim Clark]"
    },
    {
        "questionIdx": 79320,
        "questionPatternModEntities": "Was M0 directed , edited , and written by M1 , M2 , and M3",
        "questionTemplate": "Was [entity] [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P0 M3 .\nM0 P1 M1 .\nM0 P1 M2 .\nM0 P1 M3 .\nM0 P2 M1 .\nM0 P2 M2 .\nM0 P2 M3\n}",
        "recursionDepth": 31,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q20729551 wdt:P57 wd:Q562108 .\nwd:Q20729551 wdt:P57 wd:Q35979475 .\nwd:Q20729551 wdt:P57 wd:Q1687239 .\nwd:Q20729551 wdt:P1040 wd:Q562108 .\nwd:Q20729551 wdt:P1040 wd:Q35979475 .\nwd:Q20729551 wdt:P1040 wd:Q1687239 .\nwd:Q20729551 wdt:P58 wd:Q562108 .\nwd:Q20729551 wdt:P58 wd:Q35979475 .\nwd:Q20729551 wdt:P58 wd:Q1687239\n}",
        "questionWithBrackets": "Was [Stop for Bud] directed , edited , and written by [J\u00f8rgen Leth] , [Jens J\u00f8rgen Thorsen] , and [Ole John]"
    },
    {
        "questionIdx": 79334,
        "questionPatternModEntities": "Was M1 edited , produced , and written by a parent of M0",
        "questionTemplate": "Was [entity] [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 ?x0 .\nM1 P2 ?x0 .\nM1 P3 ?x0\n}",
        "recursionDepth": 30,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q1620638 .\nwd:Q854990 wdt:P1040 ?x0 .\nwd:Q854990 wdt:P162|wdt:P272 ?x0 .\nwd:Q854990 wdt:P58 ?x0\n}",
        "questionWithBrackets": "Was [Kagemusha] edited , produced , and written by a parent of [Hisao Kurosawa]"
    },
    {
        "questionIdx": 79339,
        "questionPatternModEntities": "Was M1 written , edited , produced , and directed by a parent of M0",
        "questionTemplate": "Was [entity] [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 ?x0 .\nM1 P2 ?x0 .\nM1 P3 ?x0 .\nM1 P4 ?x0\n}",
        "recursionDepth": 35,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q1620638 .\nwd:Q854990 wdt:P57 ?x0 .\nwd:Q854990 wdt:P1040 ?x0 .\nwd:Q854990 wdt:P162|wdt:P272 ?x0 .\nwd:Q854990 wdt:P58 ?x0\n}",
        "questionWithBrackets": "Was [Kagemusha] written , edited , produced , and directed by a parent of [Hisao Kurosawa]"
    },
    {
        "questionIdx": 79432,
        "questionPatternModEntities": "Was M2 edited by , produced by , directed by , and written by M0 's Canadian employee",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nM2 P2 ?x0 .\nM2 P3 ?x0 .\nM2 P4 ?x0 .\nM2 P5 ?x0\n}",
        "recursionDepth": 41,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P108 wd:Q180865 .\n?x0 wdt:P27 wd:Q16 .\nwd:Q1964819 wdt:P57 ?x0 .\nwd:Q1964819 wdt:P1040 ?x0 .\nwd:Q1964819 wdt:P162|wdt:P272 ?x0 .\nwd:Q1964819 wdt:P58 ?x0\n}",
        "questionWithBrackets": "Was [Calendar] edited by , produced by , directed by , and written by [University of Toronto] 's Canadian employee"
    },
    {
        "questionIdx": 79476,
        "questionPatternModEntities": "Was M2 written by , produced by , and edited by M1 's French spouse 's parent",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x1 P1 M0 .\n?x1 P2 M1 .\nFILTER ( ?x1 != M1 ) .\nM2 P3 ?x0 .\nM2 P4 ?x0 .\nM2 P5 ?x0\n}",
        "recursionDepth": 39,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 ?x1 .\n?x1 wdt:P27 wd:Q142 .\n?x1 wdt:P26 wd:Q3187220 .\nFILTER ( ?x1 != wd:Q3187220 ) .\nwd:Q190575 wdt:P1040 ?x0 .\nwd:Q190575 wdt:P162|wdt:P272 ?x0 .\nwd:Q190575 wdt:P58 ?x0\n}",
        "questionWithBrackets": "Was [Un Chien Andalou] written by , produced by , and edited by [Joyce Bu\u00f1uel] 's French spouse 's parent"
    },
    {
        "questionIdx": 79622,
        "questionPatternModEntities": "Was M1 executive produced , produced , directed , and written by a parent of M0",
        "questionTemplate": "Was [entity] [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 ?x0 .\nM1 P2 ?x0 .\nM1 P3 ?x0 .\nM1 P4 ?x0\n}",
        "recursionDepth": 36,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q561310 .\nwd:Q391143 wdt:P57 ?x0 .\nwd:Q391143 wdt:P1431 ?x0 .\nwd:Q391143 wdt:P162|wdt:P272 ?x0 .\nwd:Q391143 wdt:P58 ?x0\n}",
        "questionWithBrackets": "Was [Chinese Zodiac] executive produced , produced , directed , and written by a parent of [Jaycee Chan]"
    },
    {
        "questionIdx": 79938,
        "questionPatternModEntities": "Was M3 executive produced by M4 and executive produced by a female American spouse of M2",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] and [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P2 M2 .\nFILTER ( ?x0 != M2 ) .\nM3 P3 ?x0 .\nM3 P3 M4\n}",
        "recursionDepth": 41,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P21 wd:Q6581072 .\n?x0 wdt:P27 wd:Q30 .\n?x0 wdt:P26 wd:Q44221 .\nFILTER ( ?x0 != wd:Q44221 ) .\nwd:Q946478 wdt:P1431 ?x0 .\nwd:Q946478 wdt:P1431 wd:Q1744\n}",
        "questionWithBrackets": "Was [Filth and Wisdom] executive produced by [Madonna] and executive produced by a female American spouse of [Sean Penn]"
    },
    {
        "questionIdx": 79947,
        "questionPatternModEntities": "Was M0 edited by M5 , executive produced by M1 and M2 , executive produced by M3 , and produced by M4",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] and [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P0 M3 .\nM0 P1 M4 .\nM0 P2 M5\n}",
        "recursionDepth": 47,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q19689203 wdt:P1040 wd:Q692550 .\nwd:Q19689203 wdt:P1431 wd:Q51516 .\nwd:Q19689203 wdt:P1431 wd:Q22350822 .\nwd:Q19689203 wdt:P1431 wd:Q237207 .\nwd:Q19689203 wdt:P162|wdt:P272 wd:Q8877\n}",
        "questionWithBrackets": "Was [The BFG] edited by [Michael Kahn] , executive produced by [Kathleen Kennedy] and [Michael Siegel] , executive produced by [John Madden] , and produced by [Steven Spielberg]"
    },
    {
        "questionIdx": 79954,
        "questionPatternModEntities": "Was M0 executive produced by M1 , M2 , and M3 , directed by M6 , and executive produced by M4 and M5",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] , [entity] , and [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P0 M3 .\nM0 P0 M4 .\nM0 P0 M5 .\nM0 P1 M6\n}",
        "recursionDepth": 45,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q2744 wdt:P57 wd:Q693016 .\nwd:Q2744 wdt:P1431 wd:Q4500 .\nwd:Q2744 wdt:P1431 wd:Q437267 .\nwd:Q2744 wdt:P1431 wd:Q954319 .\nwd:Q2744 wdt:P1431 wd:Q2410088 .\nwd:Q2744 wdt:P1431 wd:Q463617\n}",
        "questionWithBrackets": "Was [The X-Files] executive produced by [Vince Gilligan] , [Glen Morgan] , and [Kim Manners] , directed by [Rob Bowman] , and executive produced by [Chris Carter] and [Howard Gordon]"
    },
    {
        "questionIdx": 79959,
        "questionPatternModEntities": "Was M1 executive produced by M2 , executive produced by M3 , M4 , M5 , and M6 , and directed by a parent of M0",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , [entity] , [entity] , and [entity] , and [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 M2 .\nM1 P1 M3 .\nM1 P1 M4 .\nM1 P1 M5 .\nM1 P1 M6 .\nM1 P2 ?x0\n}",
        "recursionDepth": 50,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q452925 .\nwd:Q60747802 wdt:P57 ?x0 .\nwd:Q60747802 wdt:P1431 wd:Q56005 .\nwd:Q60747802 wdt:P1431 wd:Q22075526 .\nwd:Q60747802 wdt:P1431 wd:Q302063 .\nwd:Q60747802 wdt:P1431 wd:Q63111594 .\nwd:Q60747802 wdt:P1431 wd:Q17145814\n}",
        "questionWithBrackets": "Was [Raised by Wolves] executive produced by [Adam Kolbrenner] , executive produced by [David W. Zucker] , [Ridley Scott] , [Mark Huffam] , and [Aaron Guzikowski] , and directed by a parent of [Jordan Scott]"
    },
    {
        "questionIdx": 79962,
        "questionPatternModEntities": "Was M0 executive produced by M1 and M2 , executive produced by M3 , M4 , and M5 , and executive produced by M6",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] and [entity] , [VP_SIMPLE] by [entity] , [entity] , and [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P0 M3 .\nM0 P0 M4 .\nM0 P0 M5 .\nM0 P0 M6\n}",
        "recursionDepth": 46,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q2947967 wdt:P1431 wd:Q8877 .\nwd:Q2947967 wdt:P1431 wd:Q55601945 .\nwd:Q2947967 wdt:P1431 wd:Q6984051 .\nwd:Q2947967 wdt:P1431 wd:Q849628 .\nwd:Q2947967 wdt:P1431 wd:Q39829 .\nwd:Q2947967 wdt:P1431 wd:Q7595870\n}",
        "questionWithBrackets": "Was [Under the Dome] executive produced by [Steven Spielberg] and [Stephen King] , executive produced by [Darryl Frank] , [Neal Baer] , and [Brian K. Vaughan] , and executive produced by [Stacey Snider]"
    },
    {
        "questionIdx": 79964,
        "questionPatternModEntities": "Was M0 executive produced by M1 , M2 , M3 , M4 , and M5 , written by M6 , and directed by M7",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] , [entity] , [entity] , [entity] , and [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P0 M3 .\nM0 P0 M4 .\nM0 P0 M5 .\nM0 P1 M6 .\nM0 P2 M7\n}",
        "recursionDepth": 46,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q477865 wdt:P57 wd:Q470251 .\nwd:Q477865 wdt:P1431 wd:Q42869 .\nwd:Q477865 wdt:P1431 wd:Q24809564 .\nwd:Q477865 wdt:P1431 wd:Q24809566 .\nwd:Q477865 wdt:P1431 wd:Q24817907 .\nwd:Q477865 wdt:P1431 wd:Q19878370 .\nwd:Q477865 wdt:P58 wd:Q24817952\n}",
        "questionWithBrackets": "Was [The Sorcerer's Apprentice] executive produced by [Nicolas Cage] , [Norman Golightly] , [Mike Stenson] , [Todd Garner] , and [Chad Oman] , written by [Matt Lopez] , and directed by [Jon Turteltaub]"
    },
    {
        "questionIdx": 79972,
        "questionPatternModEntities": "Was M1 executive produced by M2 , M3 , and M4 , executive produced by M5 and M6 , and directed by M0 's parent",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] , [entity] , and [entity] , [VP_SIMPLE] by [entity] and [entity] , and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 M2 .\nM1 P1 M3 .\nM1 P1 M4 .\nM1 P1 M5 .\nM1 P1 M6 .\nM1 P2 ?x0\n}",
        "recursionDepth": 49,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q11836555 .\nwd:Q1768437 wdt:P57 ?x0 .\nwd:Q1768437 wdt:P1431 wd:Q1473065 .\nwd:Q1768437 wdt:P1431 wd:Q18205036 .\nwd:Q1768437 wdt:P1431 wd:Q14946922 .\nwd:Q1768437 wdt:P1431 wd:Q7812411 .\nwd:Q1768437 wdt:P1431 wd:Q5622221\n}",
        "questionWithBrackets": "Was [Rush] executive produced by [Nigel Sinclair] , [Tim Bevan] , and [Guy East] , executive produced by [Tobin Armbrust] and [Todd Hallowell] , and directed by [Paige Howard] 's parent"
    },
    {
        "questionIdx": 79980,
        "questionPatternModEntities": "Was M0 written by M6 , directed by M7 , and executive produced by M1 , M2 , M3 , M4 , and M5",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity] , [entity] , [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P0 M3 .\nM0 P0 M4 .\nM0 P0 M5 .\nM0 P1 M6 .\nM0 P2 M7\n}",
        "recursionDepth": 46,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q60747802 wdt:P57 wd:Q98931722 .\nwd:Q60747802 wdt:P1431 wd:Q56005 .\nwd:Q60747802 wdt:P1431 wd:Q17145814 .\nwd:Q60747802 wdt:P1431 wd:Q63111594 .\nwd:Q60747802 wdt:P1431 wd:Q302063 .\nwd:Q60747802 wdt:P1431 wd:Q22075526 .\nwd:Q60747802 wdt:P58 wd:Q19560063\n}",
        "questionWithBrackets": "Was [Raised by Wolves] written by [Heather Bellson] , directed by [Alex Gabassi] , and executive produced by [Ridley Scott] , [David W. Zucker] , [Aaron Guzikowski] , [Adam Kolbrenner] , and [Mark Huffam]"
    },
    {
        "questionIdx": 79981,
        "questionPatternModEntities": "Was M0 written by M7 , executive produced by M1 , M2 , M3 , M4 , and M5 , and executive produced by M6",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , [entity] , [entity] , [entity] , and [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P0 M3 .\nM0 P0 M4 .\nM0 P0 M5 .\nM0 P0 M6 .\nM0 P1 M7\n}",
        "recursionDepth": 47,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q2947967 wdt:P1431 wd:Q8877 .\nwd:Q2947967 wdt:P1431 wd:Q362793 .\nwd:Q2947967 wdt:P1431 wd:Q55601945 .\nwd:Q2947967 wdt:P1431 wd:Q7804237 .\nwd:Q2947967 wdt:P1431 wd:Q39829 .\nwd:Q2947967 wdt:P1431 wd:Q6984051 .\nwd:Q2947967 wdt:P58 wd:Q4133060\n}",
        "questionWithBrackets": "Was [Under the Dome] written by [Rick Cleveland] , executive produced by [Tim Schlattmann] , [Darryl Frank] , [Jack Bender] , [Stephen King] , and [Steven Spielberg] , and executive produced by [Neal Baer]"
    },
    {
        "questionIdx": 80002,
        "questionPatternModEntities": "Was M2 written by , produced by , and edited by M0 's British sibling",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M0 ) .\nM2 P2 ?x0 .\nM2 P3 ?x0 .\nM2 P4 ?x0\n}",
        "recursionDepth": 35,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P27 wd:Q145 .\n?x0 wdt:P3373 wd:Q372788 .\nFILTER ( ?x0 != wd:Q372788 ) .\nwd:Q685817 wdt:P1040 ?x0 .\nwd:Q685817 wdt:P162|wdt:P272 ?x0 .\nwd:Q685817 wdt:P58 ?x0\n}",
        "questionWithBrackets": "Was [Following] written by , produced by , and edited by [Jonathan Nolan] 's British sibling"
    },
    {
        "questionIdx": 80016,
        "questionPatternModEntities": "Was M2 executive produced by M0 's Italian sibling",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M0 ) .\nM2 P2 ?x0\n}",
        "recursionDepth": 22,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P27 wd:Q38 .\n?x0 wdt:P3373 wd:Q106180552 .\nFILTER ( ?x0 != wd:Q106180552 ) .\nwd:Q172837 wdt:P1431 ?x0\n}",
        "questionWithBrackets": "Was [Bicycle Thieves] executive produced by [Elmo De Sica] 's Italian sibling"
    },
    {
        "questionIdx": 80018,
        "questionPatternModEntities": "Was M0 edited by M5 , M6 , and M7 , executive produced by M1 , M2 , and M3 , and produced by M4",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] , [entity] , and [entity] , [VP_SIMPLE] by [entity] , [entity] , and [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P0 M3 .\nM0 P1 M4 .\nM0 P2 M5 .\nM0 P2 M6 .\nM0 P2 M7\n}",
        "recursionDepth": 47,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q20630763 wdt:P1040 wd:Q20722014 .\nwd:Q20630763 wdt:P1040 wd:Q20722018 .\nwd:Q20630763 wdt:P1040 wd:Q20722019 .\nwd:Q20630763 wdt:P1431 wd:Q350405 .\nwd:Q20630763 wdt:P1431 wd:Q20722010 .\nwd:Q20630763 wdt:P1431 wd:Q20722012 .\nwd:Q20630763 wdt:P162|wdt:P272 wd:Q20721920\n}",
        "questionWithBrackets": "Was [The Yes Men Are Revolting] edited by [Claire L. Chandler] , [Steven Simone-Friedland] , and [Todd Woody Richman] , executive produced by [Adam McKay] , [Alex Cooke] , and [Alan Hayling] , and produced by [Pieter van Huystee]"
    },
    {
        "questionIdx": 80048,
        "questionPatternModEntities": "Was M0 produced , executive produced , edited , and directed by M1",
        "questionTemplate": "Was [entity] [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1 .\nM0 P2 M1 .\nM0 P3 M1\n}",
        "recursionDepth": 30,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q854990 wdt:P57 wd:Q8006 .\nwd:Q854990 wdt:P1040 wd:Q8006 .\nwd:Q854990 wdt:P1431 wd:Q8006 .\nwd:Q854990 wdt:P162|wdt:P272 wd:Q8006\n}",
        "questionWithBrackets": "Was [Kagemusha] produced , executive produced , edited , and directed by [Akira Kurosawa]"
    },
    {
        "questionIdx": 80128,
        "questionPatternModEntities": "Was M1 written by , directed by , executive produced by , edited by , and produced by M0 's sibling",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nM1 P1 ?x0 .\nM1 P2 ?x0 .\nM1 P3 ?x0 .\nM1 P4 ?x0 .\nM1 P5 ?x0\n}",
        "recursionDepth": 43,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P3373 wd:Q28370409 .\nFILTER ( ?x0 != wd:Q28370409 ) .\nwd:Q28146810 wdt:P57 ?x0 .\nwd:Q28146810 wdt:P1040 ?x0 .\nwd:Q28146810 wdt:P1431 ?x0 .\nwd:Q28146810 wdt:P162|wdt:P272 ?x0 .\nwd:Q28146810 wdt:P58 ?x0\n}",
        "questionWithBrackets": "Was [Bullets, Fangs and Dinner at 8] written by , directed by , executive produced by , edited by , and produced by [Everton Rocca] 's sibling"
    },
    {
        "questionIdx": 80178,
        "questionPatternModEntities": "Was M2 directed by M0 's German employee and directed by M3",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nM2 P2 ?x0 .\nM2 P2 M3\n}",
        "recursionDepth": 32,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P108 wd:Q156725 .\n?x0 wdt:P27 wd:Q183 .\nwd:Q1193240 wdt:P57 ?x0 .\nwd:Q1193240 wdt:P57 wd:Q28152\n}",
        "questionWithBrackets": "Was [No label defined] directed by [University of Hamburg] 's German employee and directed by [Hark Bohm]"
    },
    {
        "questionIdx": 80183,
        "questionPatternModEntities": "Was M1 produced by and written by a spouse of M0 's sibling",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by and [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x1 P1 M0 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x1 != M0 ) .\nM1 P2 ?x0 .\nM1 P3 ?x0\n}",
        "recursionDepth": 30,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P26 ?x1 .\n?x1 wdt:P3373 wd:Q5407585 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x1 != wd:Q5407585 ) .\nwd:Q973676 wdt:P162|wdt:P272 ?x0 .\nwd:Q973676 wdt:P58 ?x0\n}",
        "questionWithBrackets": "Was [A Day's Pleasure] produced by and written by a spouse of [Eugene O'Neill, Jr.] 's sibling"
    },
    {
        "questionIdx": 80234,
        "questionPatternModEntities": "Was M0 directed , executive produced , and produced by M1",
        "questionTemplate": "Was [entity] [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1 .\nM0 P2 M1\n}",
        "recursionDepth": 25,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q277281 wdt:P57 wd:Q53002 .\nwd:Q277281 wdt:P1431 wd:Q53002 .\nwd:Q277281 wdt:P162|wdt:P272 wd:Q53002\n}",
        "questionWithBrackets": "Was [Love on the Run] directed , executive produced , and produced by [Fran\u00e7ois Truffaut]"
    },
    {
        "questionIdx": 80236,
        "questionPatternModEntities": "Was M2 produced by M0 's Spanish sibling 's sibling and distributed by M3",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] 's [ROLE_SIMPLE] and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x1 P0 M0 .\n?x1 P1 M1 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x1 != M0 ) .\nM2 P2 M3 .\nM2 P3 ?x0\n}",
        "recursionDepth": 36,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P3373 ?x1 .\n?x1 wdt:P27 wd:Q29 .\n?x1 wdt:P3373 wd:Q399076 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x1 != wd:Q399076 ) .\nwd:Q192022 wdt:P750 wd:Q168383 .\nwd:Q192022 wdt:P162|wdt:P272 ?x0\n}",
        "questionWithBrackets": "Was [Broken Embraces] produced by [Agust\u00edn Almod\u00f3var] 's Spanish sibling 's sibling and distributed by [Universal Pictures]"
    },
    {
        "questionIdx": 80256,
        "questionPatternModEntities": "Was M1 edited by , produced by , executive produced by , and written by M0 's sibling",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nM1 P1 ?x0 .\nM1 P2 ?x0 .\nM1 P3 ?x0 .\nM1 P4 ?x0\n}",
        "recursionDepth": 37,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P3373 wd:Q28370409 .\nFILTER ( ?x0 != wd:Q28370409 ) .\nwd:Q28146810 wdt:P1040 ?x0 .\nwd:Q28146810 wdt:P1431 ?x0 .\nwd:Q28146810 wdt:P162|wdt:P272 ?x0 .\nwd:Q28146810 wdt:P58 ?x0\n}",
        "questionWithBrackets": "Was [Bullets, Fangs and Dinner at 8] edited by , produced by , executive produced by , and written by [Everton Rocca] 's sibling"
    },
    {
        "questionIdx": 80260,
        "questionPatternModEntities": "Was M2 edited , executive produced , and directed by M0 's male sibling",
        "questionTemplate": "Was [entity] [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M0 ) .\nM2 P2 ?x0 .\nM2 P3 ?x0 .\nM2 P4 ?x0\n}",
        "recursionDepth": 34,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P21 wd:Q6581097 .\n?x0 wdt:P3373 wd:Q28370409 .\nFILTER ( ?x0 != wd:Q28370409 ) .\nwd:Q28146810 wdt:P57 ?x0 .\nwd:Q28146810 wdt:P1040 ?x0 .\nwd:Q28146810 wdt:P1431 ?x0\n}",
        "questionWithBrackets": "Was [Bullets, Fangs and Dinner at 8] edited , executive produced , and directed by [Everton Rocca] 's male sibling"
    },
    {
        "questionIdx": 80271,
        "questionPatternModEntities": "Was M1 produced by , edited by , directed by , executive produced by , and written by M0 's sibling",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nM1 P1 ?x0 .\nM1 P2 ?x0 .\nM1 P3 ?x0 .\nM1 P4 ?x0 .\nM1 P5 ?x0\n}",
        "recursionDepth": 43,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P3373 wd:Q28370409 .\nFILTER ( ?x0 != wd:Q28370409 ) .\nwd:Q28146810 wdt:P57 ?x0 .\nwd:Q28146810 wdt:P1040 ?x0 .\nwd:Q28146810 wdt:P1431 ?x0 .\nwd:Q28146810 wdt:P162|wdt:P272 ?x0 .\nwd:Q28146810 wdt:P58 ?x0\n}",
        "questionWithBrackets": "Was [Bullets, Fangs and Dinner at 8] produced by , edited by , directed by , executive produced by , and written by [Everton Rocca] 's sibling"
    },
    {
        "questionIdx": 80272,
        "questionPatternModEntities": "Was M1 produced by , edited by , executive produced by , written by , and directed by M0 's sibling",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nM1 P1 ?x0 .\nM1 P2 ?x0 .\nM1 P3 ?x0 .\nM1 P4 ?x0 .\nM1 P5 ?x0\n}",
        "recursionDepth": 43,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P3373 wd:Q28370409 .\nFILTER ( ?x0 != wd:Q28370409 ) .\nwd:Q28146810 wdt:P57 ?x0 .\nwd:Q28146810 wdt:P1040 ?x0 .\nwd:Q28146810 wdt:P1431 ?x0 .\nwd:Q28146810 wdt:P162|wdt:P272 ?x0 .\nwd:Q28146810 wdt:P58 ?x0\n}",
        "questionWithBrackets": "Was [Bullets, Fangs and Dinner at 8] produced by , edited by , executive produced by , written by , and directed by [Everton Rocca] 's sibling"
    },
    {
        "questionIdx": 80278,
        "questionPatternModEntities": "Was M1 produced by , written by , executive produced by , and edited by M0 's sibling",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nM1 P1 ?x0 .\nM1 P2 ?x0 .\nM1 P3 ?x0 .\nM1 P4 ?x0\n}",
        "recursionDepth": 37,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P3373 wd:Q28370409 .\nFILTER ( ?x0 != wd:Q28370409 ) .\nwd:Q28146810 wdt:P1040 ?x0 .\nwd:Q28146810 wdt:P1431 ?x0 .\nwd:Q28146810 wdt:P162|wdt:P272 ?x0 .\nwd:Q28146810 wdt:P58 ?x0\n}",
        "questionWithBrackets": "Was [Bullets, Fangs and Dinner at 8] produced by , written by , executive produced by , and edited by [Everton Rocca] 's sibling"
    },
    {
        "questionIdx": 80286,
        "questionPatternModEntities": "Was M0 distributed by M1 , distributed by M2 , distributed by M3 , distributed by M4 , and distributed by M5",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P0 M3 .\nM0 P0 M4 .\nM0 P0 M5\n}",
        "recursionDepth": 50,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q692821 wdt:P750 wd:Q145 .\nwd:Q692821 wdt:P750 wd:Q80948336 .\nwd:Q692821 wdt:P750 wd:Q5371838 .\nwd:Q692821 wdt:P750 wd:Q907311 .\nwd:Q692821 wdt:P750 wd:Q9589\n}",
        "questionWithBrackets": "Was [My Summer of Love] distributed by [FandangoNow] , distributed by [Netflix] , distributed by [iTunes] , distributed by [Vudu] , and distributed by [United Kingdom]"
    },
    {
        "questionIdx": 80376,
        "questionPatternModEntities": "Was M0 executive produced and produced by M1 , M2 , and M3",
        "questionTemplate": "Was [entity] [VP_SIMPLE] and [VP_SIMPLE] by [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P0 M3 .\nM0 P1 M1 .\nM0 P1 M2 .\nM0 P1 M3\n}",
        "recursionDepth": 27,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q886 wdt:P1431 wd:Q43994 .\nwd:Q886 wdt:P1431 wd:Q365090 .\nwd:Q886 wdt:P1431 wd:Q95125 .\nwd:Q886 wdt:P162|wdt:P272 wd:Q43994 .\nwd:Q886 wdt:P162|wdt:P272 wd:Q365090 .\nwd:Q886 wdt:P162|wdt:P272 wd:Q95125\n}",
        "questionWithBrackets": "Was [The Simpsons] executive produced and produced by [Matt Groening] , [James L. Brooks] , and [Sam Simon]"
    },
    {
        "questionIdx": 80395,
        "questionPatternModEntities": "Was M1 executive produced by and produced by M0 's parent 's parent",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x1 P0 M0 .\nM1 P1 ?x0 .\nM1 P2 ?x0\n}",
        "recursionDepth": 29,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 ?x1 .\n?x1 wdt:P40|wdt:P355 wd:Q224754 .\nwd:Q524849 wdt:P1431 ?x0 .\nwd:Q524849 wdt:P162|wdt:P272 ?x0\n}",
        "questionWithBrackets": "Was [Barbary Coast] executive produced by and produced by [Tony Goldwyn] 's parent 's parent"
    },
    {
        "questionIdx": 80422,
        "questionPatternModEntities": "Was M2 edited and produced by a British sibling of M0",
        "questionTemplate": "Was [entity] [VP_SIMPLE] and [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M0 ) .\nM2 P2 ?x0 .\nM2 P3 ?x0\n}",
        "recursionDepth": 30,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P27 wd:Q145 .\n?x0 wdt:P3373 wd:Q372788 .\nFILTER ( ?x0 != wd:Q372788 ) .\nwd:Q685817 wdt:P1040 ?x0 .\nwd:Q685817 wdt:P162|wdt:P272 ?x0\n}",
        "questionWithBrackets": "Was [Following] edited and produced by a British sibling of [Jonathan Nolan]"
    },
    {
        "questionIdx": 80454,
        "questionPatternModEntities": "Was M1 distributed by M2 and M3 and distributed by a parent of M0",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] and [entity] and [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 ?x0 .\nM1 P1 M2 .\nM1 P1 M3\n}",
        "recursionDepth": 33,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q181197 .\nwd:Q2399580 wdt:P750 ?x0 .\nwd:Q2399580 wdt:P750 wd:Q9212 .\nwd:Q2399580 wdt:P750 wd:Q907311\n}",
        "questionWithBrackets": "Was [Let There Be Light] distributed by [Netflix] and [United States Army] and distributed by a parent of [United States Army Europe]"
    },
    {
        "questionIdx": 80467,
        "questionPatternModEntities": "Was M0 's prequel produced and distributed by M1",
        "questionTemplate": "Was [entity] 's [ROLE_SIMPLE] [VP_SIMPLE] and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P2 M1\n}",
        "recursionDepth": 23,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P750 wd:Q47099 .\n?x0 wdt:P162|wdt:P272 wd:Q47099 .\n?x0 wdt:P156 wd:Q94828\n}",
        "questionWithBrackets": "Was [Lazos de Amor] 's prequel produced and distributed by [Televisa]"
    },
    {
        "questionIdx": 80490,
        "questionPatternModEntities": "Was M1 executive produced by M2 , M3 , and M4 , written by M5 , and written by a employee of M0",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] , [entity] , and [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 M2 .\nM1 P1 M3 .\nM1 P1 M4 .\nM1 P2 ?x0 .\nM1 P2 M5\n}",
        "recursionDepth": 46,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P108 wd:Q84321374 .\nwd:Q28196 wdt:P1431 wd:Q28497 .\nwd:Q28196 wdt:P1431 wd:Q653159 .\nwd:Q28196 wdt:P1431 wd:Q7807248 .\nwd:Q28196 wdt:P58 ?x0 .\nwd:Q28196 wdt:P58 wd:Q310556\n}",
        "questionWithBrackets": "Was [World War Z] executive produced by [Graham King] , [Marc Forster] , and [Timothy Headington] , written by [Damon Lindelof] , and written by a employee of [Modern War Institute]"
    },
    {
        "questionIdx": 80501,
        "questionPatternModEntities": "Was M0 directed by and executive produced by M1",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1\n}",
        "recursionDepth": 21,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q166031 wdt:P57 wd:Q61347 .\nwd:Q166031 wdt:P1431 wd:Q61347\n}",
        "questionWithBrackets": "Was [In the Name of the King] directed by and executive produced by [Uwe Boll]"
    },
    {
        "questionIdx": 80574,
        "questionPatternModEntities": "Was M1 edited , executive produced , directed , written , and produced by a parent of M0",
        "questionTemplate": "Was [entity] [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 ?x0 .\nM1 P2 ?x0 .\nM1 P3 ?x0 .\nM1 P4 ?x0 .\nM1 P5 ?x0\n}",
        "recursionDepth": 41,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q4739681 .\nwd:Q17738 wdt:P57 ?x0 .\nwd:Q17738 wdt:P1040 ?x0 .\nwd:Q17738 wdt:P1431 ?x0 .\nwd:Q17738 wdt:P162|wdt:P272 ?x0 .\nwd:Q17738 wdt:P58 ?x0\n}",
        "questionWithBrackets": "Was [Star Wars: Episode IV \u2013 A New Hope] edited , executive produced , directed , written , and produced by a parent of [Amanda Lucas]"
    },
    {
        "questionIdx": 80737,
        "questionPatternModEntities": "Was M2 produced and written by a German parent of M1",
        "questionTemplate": "Was [entity] [VP_SIMPLE] and [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nM2 P2 ?x0 .\nM2 P3 ?x0\n}",
        "recursionDepth": 30,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q92052 .\n?x0 wdt:P27 wd:Q183 .\nwd:Q166355 wdt:P162|wdt:P272 ?x0 .\nwd:Q166355 wdt:P58 ?x0\n}",
        "questionWithBrackets": "Was [Knockin' on Heaven's Door] produced and written by a German parent of [Emma Schweiger]"
    },
    {
        "questionIdx": 80761,
        "questionPatternModEntities": "Was M2 directed , written , and produced by M0 's Chinese sibling 's sibling",
        "questionTemplate": "Was [entity] [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x1 P0 M0 .\n?x1 P1 M1 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x1 != M0 ) .\nM2 P2 ?x0 .\nM2 P3 ?x0 .\nM2 P4 ?x0\n}",
        "recursionDepth": 37,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P3373 ?x1 .\n?x1 wdt:P27 wd:Q148 .\n?x1 wdt:P3373 wd:Q16397 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x1 != wd:Q16397 ) .\nwd:Q462409 wdt:P57 ?x0 .\nwd:Q462409 wdt:P162|wdt:P272 ?x0 .\nwd:Q462409 wdt:P58 ?x0\n}",
        "questionWithBrackets": "Was [Way of the Dragon] directed , written , and produced by [Bruce Lee] 's Chinese sibling 's sibling"
    },
    {
        "questionIdx": 80830,
        "questionPatternModEntities": "Was M2 directed by and edited by M1 's female parent",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by and [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nM2 P2 ?x0 .\nM2 P3 ?x0\n}",
        "recursionDepth": 29,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q949017 .\n?x0 wdt:P21 wd:Q6581072 .\nwd:Q2298257 wdt:P57 ?x0 .\nwd:Q2298257 wdt:P1040 ?x0\n}",
        "questionWithBrackets": "Was [Vagabond] directed by and edited by [Mathieu Demy] 's female parent"
    },
    {
        "questionIdx": 80835,
        "questionPatternModEntities": "Was M1 edited by , directed by , and produced by a parent of M0",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 ?x0 .\nM1 P2 ?x0 .\nM1 P3 ?x0\n}",
        "recursionDepth": 32,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q1620638 .\nwd:Q854990 wdt:P57 ?x0 .\nwd:Q854990 wdt:P1040 ?x0 .\nwd:Q854990 wdt:P162|wdt:P272 ?x0\n}",
        "questionWithBrackets": "Was [Kagemusha] edited by , directed by , and produced by a parent of [Hisao Kurosawa]"
    },
    {
        "questionIdx": 80868,
        "questionPatternModEntities": "Was M2 written by , produced by , edited by , and directed by a British sibling of M0",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M0 ) .\nM2 P2 ?x0 .\nM2 P3 ?x0 .\nM2 P4 ?x0 .\nM2 P5 ?x0\n}",
        "recursionDepth": 43,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P27 wd:Q145 .\n?x0 wdt:P3373 wd:Q372788 .\nFILTER ( ?x0 != wd:Q372788 ) .\nwd:Q685817 wdt:P57 ?x0 .\nwd:Q685817 wdt:P1040 ?x0 .\nwd:Q685817 wdt:P162|wdt:P272 ?x0 .\nwd:Q685817 wdt:P58 ?x0\n}",
        "questionWithBrackets": "Was [Following] written by , produced by , edited by , and directed by a British sibling of [Jonathan Nolan]"
    },
    {
        "questionIdx": 80900,
        "questionPatternModEntities": "Was M2 executive produced by and edited by a male employee of M0",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by and [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nM2 P2 ?x0 .\nM2 P3 ?x0\n}",
        "recursionDepth": 32,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P108 wd:Q182950 .\n?x0 wdt:P21 wd:Q6581097 .\nwd:Q236728 wdt:P1040 ?x0 .\nwd:Q236728 wdt:P1431 ?x0\n}",
        "questionWithBrackets": "Was [Ponyo on the Cliff by the Sea] executive produced by and edited by a male employee of [Studio Ghibli]"
    },
    {
        "questionIdx": 80926,
        "questionPatternModEntities": "Was M0 produced by M3 , executive produced by M1 , directed by M4 , and executive produced by M2",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P1 M3 .\nM0 P2 M4\n}",
        "recursionDepth": 43,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q56275326 wdt:P57 wd:Q459933 .\nwd:Q56275326 wdt:P1431 wd:Q36159 .\nwd:Q56275326 wdt:P1431 wd:Q229254 .\nwd:Q56275326 wdt:P162|wdt:P272 wd:Q907311\n}",
        "questionWithBrackets": "Was [Self Made: Inspired by the Life of Madam C. J. Walker] produced by [Netflix] , executive produced by [Octavia Spencer] , directed by [Kasi Lemmons] , and executive produced by [LeBron James]"
    },
    {
        "questionIdx": 81080,
        "questionPatternModEntities": "Was M1 edited , directed , and written by a spouse of M0",
        "questionTemplate": "Was [entity] [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nM1 P1 ?x0 .\nM1 P2 ?x0 .\nM1 P3 ?x0\n}",
        "recursionDepth": 30,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P26 wd:Q40162 .\nFILTER ( ?x0 != wd:Q40162 ) .\nwd:Q457886 wdt:P57 ?x0 .\nwd:Q457886 wdt:P1040 ?x0 .\nwd:Q457886 wdt:P58 ?x0\n}",
        "questionWithBrackets": "Was [Amblin'] edited , directed , and written by a spouse of [Kate Capshaw]"
    },
    {
        "questionIdx": 81105,
        "questionPatternModEntities": "Was M2 directed and edited by a female sibling of M0",
        "questionTemplate": "Was [entity] [VP_SIMPLE] and [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M0 ) .\nM2 P2 ?x0 .\nM2 P3 ?x0\n}",
        "recursionDepth": 30,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P21 wd:Q6581072 .\n?x0 wdt:P3373 wd:Q143945 .\nFILTER ( ?x0 != wd:Q143945 ) .\nwd:Q344537 wdt:P57 ?x0 .\nwd:Q344537 wdt:P1040 ?x0\n}",
        "questionWithBrackets": "Was [Actrices] directed and edited by a female sibling of [Carla Bruni]"
    },
    {
        "questionIdx": 81196,
        "questionPatternModEntities": "Was M2 edited and produced by M1 's male parent",
        "questionTemplate": "Was [entity] [VP_SIMPLE] and [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nM2 P2 ?x0 .\nM2 P3 ?x0\n}",
        "recursionDepth": 28,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q4739681 .\n?x0 wdt:P21 wd:Q6581097 .\nwd:Q17738 wdt:P1040 ?x0 .\nwd:Q17738 wdt:P162|wdt:P272 ?x0\n}",
        "questionWithBrackets": "Was [Star Wars: Episode IV \u2013 A New Hope] edited and produced by [Amanda Lucas] 's male parent"
    },
    {
        "questionIdx": 81305,
        "questionPatternModEntities": "Was M2 written by M1 's male spouse 's spouse",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x1 P0 M1 .\n?x1 P1 M0 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x1 != M1 ) .\nM2 P2 ?x0\n}",
        "recursionDepth": 25,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P26 ?x1 .\n?x1 wdt:P21 wd:Q6581097 .\n?x1 wdt:P26 wd:Q4636 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x1 != wd:Q4636 ) .\nwd:Q780469 wdt:P58 ?x0\n}",
        "questionWithBrackets": "Was [Yentl] written by [Barbra Streisand] 's male spouse 's spouse"
    },
    {
        "questionIdx": 81397,
        "questionPatternModEntities": "Was M0 directed , produced , edited , and written by M1",
        "questionTemplate": "Was [entity] [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1 .\nM0 P2 M1 .\nM0 P3 M1\n}",
        "recursionDepth": 29,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q603857 wdt:P57 wd:Q55215 .\nwd:Q603857 wdt:P1040 wd:Q55215 .\nwd:Q603857 wdt:P162|wdt:P272 wd:Q55215 .\nwd:Q603857 wdt:P58 wd:Q55215\n}",
        "questionWithBrackets": "Was [11'09\"01 September 11] directed , produced , edited , and written by [Alejandro Gonz\u00e1lez I\u00f1\u00e1rritu]"
    },
    {
        "questionIdx": 81461,
        "questionPatternModEntities": "Was M2 directed by a female sibling of M0",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M0 ) .\nM2 P2 ?x0\n}",
        "recursionDepth": 23,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P21 wd:Q6581072 .\n?x0 wdt:P3373 wd:Q3360333 .\nFILTER ( ?x0 != wd:Q3360333 ) .\nwd:Q3521591 wdt:P57 ?x0\n}",
        "questionWithBrackets": "Was [The Line, the Cross and the Curve] directed by a female sibling of [Paddy Bush]"
    },
    {
        "questionIdx": 81501,
        "questionPatternModEntities": "Was M1 edited by M0 's spouse",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nM1 P1 ?x0\n}",
        "recursionDepth": 16,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P26 wd:Q58866 .\nFILTER ( ?x0 != wd:Q58866 ) .\nwd:Q151599 wdt:P1040 ?x0\n}",
        "questionWithBrackets": "Was [Metropolis] edited by [Thea von Harbou] 's spouse"
    },
    {
        "questionIdx": 81554,
        "questionPatternModEntities": "Was M1 executive produced by , produced by , directed by , written by , and edited by M0 's spouse",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nM1 P1 ?x0 .\nM1 P2 ?x0 .\nM1 P3 ?x0 .\nM1 P4 ?x0 .\nM1 P5 ?x0\n}",
        "recursionDepth": 43,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P26 wd:Q3032150 .\nFILTER ( ?x0 != wd:Q3032150 ) .\nwd:Q854990 wdt:P57 ?x0 .\nwd:Q854990 wdt:P1040 ?x0 .\nwd:Q854990 wdt:P1431 ?x0 .\nwd:Q854990 wdt:P162|wdt:P272 ?x0 .\nwd:Q854990 wdt:P58 ?x0\n}",
        "questionWithBrackets": "Was [Kagemusha] executive produced by , produced by , directed by , written by , and edited by [Y\u014dko Yaguchi] 's spouse"
    },
    {
        "questionIdx": 81586,
        "questionPatternModEntities": "Was M2 executive produced by M1 's Mexican spouse",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M1 ) .\nM2 P2 ?x0\n}",
        "recursionDepth": 22,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P27 wd:Q96 .\n?x0 wdt:P26 wd:Q105315526 .\nFILTER ( ?x0 != wd:Q105315526 ) .\nwd:Q13382543 wdt:P1431 ?x0\n}",
        "questionWithBrackets": "Was [Believe] executive produced by [Annalisa Bugliani] 's Mexican spouse"
    },
    {
        "questionIdx": 81634,
        "questionPatternModEntities": "Was M0 edited by M1 and M2 , directed by M4 , M5 , M6 , and M7 , and edited by M3",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] and [entity] , [VP_SIMPLE] by [entity] , [entity] , [entity] , and [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P0 M3 .\nM0 P1 M4 .\nM0 P1 M5 .\nM0 P1 M6 .\nM0 P1 M7\n}",
        "recursionDepth": 46,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q603857 wdt:P57 wd:Q295093 .\nwd:Q603857 wdt:P57 wd:Q44221 .\nwd:Q603857 wdt:P57 wd:Q55215 .\nwd:Q603857 wdt:P57 wd:Q312611 .\nwd:Q603857 wdt:P1040 wd:Q55211 .\nwd:Q603857 wdt:P1040 wd:Q18021284 .\nwd:Q603857 wdt:P1040 wd:Q541826\n}",
        "questionWithBrackets": "Was [11'09\"01 September 11] edited by [Jonathan Morris] and [Mohsen Makhmalbaf] , directed by [Sean Penn] , [Claude Lelouch] , [Youssef Chahine] , and [Alejandro Gonz\u00e1lez I\u00f1\u00e1rritu] , and edited by [Jay Cassidy]"
    },
    {
        "questionIdx": 81737,
        "questionPatternModEntities": "Was M2 written by M1 's spouse 's Canadian spouse and directed by M3",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 ?x1 .\n?x1 P1 M1 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x1 != M1 ) .\nM2 P2 ?x0 .\nM2 P3 M3\n}",
        "recursionDepth": 36,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P27 wd:Q16 .\n?x0 wdt:P26 ?x1 .\n?x1 wdt:P26 wd:Q137634 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x1 != wd:Q137634 ) .\nwd:Q12133944 wdt:P57 wd:Q16205864 .\nwd:Q12133944 wdt:P58 ?x0\n}",
        "questionWithBrackets": "Was [A Winter Tan] written by [Jackie Burroughs] 's spouse 's Canadian spouse and directed by [Aerlyn Weissman]"
    },
    {
        "questionIdx": 81758,
        "questionPatternModEntities": "Was M1 distributed by M2 and distributed by M0 's child",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 ?x0 .\nM1 P1 M2\n}",
        "recursionDepth": 27,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P749 wd:Q2283 .\nwd:Q104554480 wdt:P750 ?x0 .\nwd:Q104554480 wdt:P750 wd:Q337535\n}",
        "questionWithBrackets": "Was [Trailmakers] distributed by [Steam] and distributed by [Microsoft] 's child"
    },
    {
        "questionIdx": 81871,
        "questionPatternModEntities": "Was M1 executive produced by a spouse of M0 , directed by M5 , and edited by M2 , M3 , and M4",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nM1 P1 ?x0 .\nM1 P2 M2 .\nM1 P2 M3 .\nM1 P2 M4 .\nM1 P3 M5\n}",
        "recursionDepth": 46,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P26 wd:Q4943414 .\nFILTER ( ?x0 != wd:Q4943414 ) .\nwd:Q1740171 wdt:P57 wd:Q363989 .\nwd:Q1740171 wdt:P1040 wd:Q15835006 .\nwd:Q1740171 wdt:P1040 wd:Q614630 .\nwd:Q1740171 wdt:P1040 wd:Q7820333 .\nwd:Q1740171 wdt:P1431 ?x0\n}",
        "questionWithBrackets": "Was [Mishima: A Life in Four Chapters] executive produced by a spouse of [Eleanor Coppola] , directed by [Paul Schrader] , and edited by [Michael Chandler] , [Michael Chandler] , and [Tomoyo \u014cshima]"
    },
    {
        "questionIdx": 81894,
        "questionPatternModEntities": "Was M1 directed by , edited by , executive produced by , written by , and produced by a parent of M0",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 ?x0 .\nM1 P2 ?x0 .\nM1 P3 ?x0 .\nM1 P4 ?x0 .\nM1 P5 ?x0\n}",
        "recursionDepth": 45,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q1620638 .\nwd:Q854990 wdt:P57 ?x0 .\nwd:Q854990 wdt:P1040 ?x0 .\nwd:Q854990 wdt:P1431 ?x0 .\nwd:Q854990 wdt:P162|wdt:P272 ?x0 .\nwd:Q854990 wdt:P58 ?x0\n}",
        "questionWithBrackets": "Was [Kagemusha] directed by , edited by , executive produced by , written by , and produced by a parent of [Hisao Kurosawa]"
    },
    {
        "questionIdx": 81901,
        "questionPatternModEntities": "Was M2 edited by , executive produced by , produced by , and directed by M1 's American spouse",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M1 ) .\nM2 P2 ?x0 .\nM2 P3 ?x0 .\nM2 P4 ?x0 .\nM2 P5 ?x0\n}",
        "recursionDepth": 42,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P27 wd:Q30 .\n?x0 wdt:P26 wd:Q6813152 .\nFILTER ( ?x0 != wd:Q6813152 ) .\nwd:Q17738 wdt:P57 ?x0 .\nwd:Q17738 wdt:P1040 ?x0 .\nwd:Q17738 wdt:P1431 ?x0 .\nwd:Q17738 wdt:P162|wdt:P272 ?x0\n}",
        "questionWithBrackets": "Was [Star Wars: Episode IV \u2013 A New Hope] edited by , executive produced by , produced by , and directed by [Mellody Hobson] 's American spouse"
    },
    {
        "questionIdx": 82039,
        "questionPatternModEntities": "Was M2 written by and edited by a Dutch sibling of M0",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by and [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M0 ) .\nM2 P2 ?x0 .\nM2 P3 ?x0\n}",
        "recursionDepth": 31,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P27 wd:Q29999 .\n?x0 wdt:P3373 wd:Q27032273 .\nFILTER ( ?x0 != wd:Q27032273 ) .\nwd:Q2238758 wdt:P1040 ?x0 .\nwd:Q2238758 wdt:P58 ?x0\n}",
        "questionWithBrackets": "Was [The Family of Chimps] written by and edited by a Dutch sibling of [Johan Haanstra]"
    },
    {
        "questionIdx": 82116,
        "questionPatternModEntities": "Was M2 edited by , produced by , and directed by M0 's British sibling 's sibling",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x1 P0 M0 .\n?x1 P1 M1 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x1 != M0 ) .\nM2 P2 ?x0 .\nM2 P3 ?x0 .\nM2 P4 ?x0\n}",
        "recursionDepth": 39,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P3373 ?x1 .\n?x1 wdt:P27 wd:Q145 .\n?x1 wdt:P3373 wd:Q25191 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x1 != wd:Q25191 ) .\nwd:Q685817 wdt:P57 ?x0 .\nwd:Q685817 wdt:P1040 ?x0 .\nwd:Q685817 wdt:P162|wdt:P272 ?x0\n}",
        "questionWithBrackets": "Was [Following] edited by , produced by , and directed by [Christopher Nolan] 's British sibling 's sibling"
    },
    {
        "questionIdx": 82135,
        "questionPatternModEntities": "Was M0 edited , produced , and directed by M1 and M2",
        "questionTemplate": "Was [entity] [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P1 M1 .\nM0 P1 M2 .\nM0 P2 M1 .\nM0 P2 M2\n}",
        "recursionDepth": 28,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q20729551 wdt:P57 wd:Q562108 .\nwd:Q20729551 wdt:P57 wd:Q1687239 .\nwd:Q20729551 wdt:P1040 wd:Q562108 .\nwd:Q20729551 wdt:P1040 wd:Q1687239 .\nwd:Q20729551 wdt:P162|wdt:P272 wd:Q562108 .\nwd:Q20729551 wdt:P162|wdt:P272 wd:Q1687239\n}",
        "questionWithBrackets": "Was [Stop for Bud] edited , produced , and directed by [Jens J\u00f8rgen Thorsen] and [J\u00f8rgen Leth]"
    },
    {
        "questionIdx": 82147,
        "questionPatternModEntities": "Was M2 executive produced by a Italian parent of M1",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nM2 P2 ?x0\n}",
        "recursionDepth": 24,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q541821 .\n?x0 wdt:P27 wd:Q38 .\nwd:Q2518379 wdt:P1431 ?x0\n}",
        "questionWithBrackets": "Was [NYC 22] executive produced by a Italian parent of [Drena De Niro]"
    },
    {
        "questionIdx": 82151,
        "questionPatternModEntities": "Was M1 executive produced by M2 and M3 , produced by M0 's sibling , edited by M5 , and written by M4",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] and [entity] , [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nM1 P1 M2 .\nM1 P1 M3 .\nM1 P2 M4 .\nM1 P3 ?x0 .\nM1 P4 M5\n}",
        "recursionDepth": 50,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P3373 wd:Q4820677 .\nFILTER ( ?x0 != wd:Q4820677 ) .\nwd:Q1740171 wdt:P1040 wd:Q7820333 .\nwd:Q1740171 wdt:P1431 wd:Q56094 .\nwd:Q1740171 wdt:P1431 wd:Q38222 .\nwd:Q1740171 wdt:P162|wdt:P272 ?x0 .\nwd:Q1740171 wdt:P58 wd:Q134456\n}",
        "questionWithBrackets": "Was [Mishima: A Life in Four Chapters] executive produced by [Francis Ford Coppola] and [George Lucas] , produced by [August Coppola] 's sibling , edited by [Tomoyo \u014cshima] , and written by [Yukio Mishima]"
    },
    {
        "questionIdx": 82156,
        "questionPatternModEntities": "Was M1 edited by and written by a spouse of M0",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by and [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nM1 P1 ?x0 .\nM1 P2 ?x0\n}",
        "recursionDepth": 26,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P26 wd:Q28487 .\nFILTER ( ?x0 != wd:Q28487 ) .\nwd:Q171861 wdt:P1040 ?x0 .\nwd:Q171861 wdt:P58 ?x0\n}",
        "questionWithBrackets": "Was [The Artist] edited by and written by a spouse of [B\u00e9r\u00e9nice Bejo]"
    },
    {
        "questionIdx": 82247,
        "questionPatternModEntities": "Was M3 produced by M2 's female parent 's Chinese spouse and produced by M4 and M5",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 ?x1 .\n?x1 P2 M1 .\n?x1 P3 M2 .\nFILTER ( ?x0 != ?x1 ) .\nM3 P4 ?x0 .\nM3 P4 M4 .\nM3 P4 M5\n}",
        "recursionDepth": 45,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P27 wd:Q148 .\n?x0 wdt:P26 ?x1 .\n?x1 wdt:P40|wdt:P355 wd:Q4951018 .\n?x1 wdt:P21 wd:Q6581072 .\nFILTER ( ?x0 != ?x1 ) .\nwd:Q4185360 wdt:P162|wdt:P272 ?x0 .\nwd:Q4185360 wdt:P162|wdt:P272 wd:Q445608 .\nwd:Q4185360 wdt:P162|wdt:P272 wd:Q947354\n}",
        "questionWithBrackets": "Was [I Love Hong Kong 2012] produced by [Bowie Tsang] 's female parent 's Chinese spouse and produced by [Shaw Brothers Studio] and [Eric Tsang]"
    },
    {
        "questionIdx": 82266,
        "questionPatternModEntities": "Was M2 's sequel distributed by M0 and M1",
        "questionTemplate": "Was [entity] 's [ROLE_SIMPLE] [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P1 M2\n}",
        "recursionDepth": 20,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P750 wd:Q8093 .\n?x0 wdt:P750 wd:Q3070866 .\n?x0 wdt:P155 wd:Q2722404\n}",
        "questionWithBrackets": "Was [Game & Watch Gallery 2] 's sequel distributed by [Nintendo] and [Nintendo eShop]"
    },
    {
        "questionIdx": 82270,
        "questionPatternModEntities": "Was M1 executive produced by M0 's spouse 's parent",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x1 P1 M0 .\nFILTER ( ?x1 != M0 ) .\nM1 P2 ?x0\n}",
        "recursionDepth": 21,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 ?x1 .\n?x1 wdt:P26 wd:Q61668383 .\nFILTER ( ?x1 != wd:Q61668383 ) .\nwd:Q2518379 wdt:P1431 ?x0\n}",
        "questionWithBrackets": "Was [NYC 22] executive produced by [Hannah Carnes De Niro] 's spouse 's parent"
    },
    {
        "questionIdx": 82313,
        "questionPatternModEntities": "Was M0 directed , produced , and edited by M1 and M2",
        "questionTemplate": "Was [entity] [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P1 M1 .\nM0 P1 M2 .\nM0 P2 M1 .\nM0 P2 M2\n}",
        "recursionDepth": 28,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q20729551 wdt:P57 wd:Q562108 .\nwd:Q20729551 wdt:P57 wd:Q1687239 .\nwd:Q20729551 wdt:P1040 wd:Q562108 .\nwd:Q20729551 wdt:P1040 wd:Q1687239 .\nwd:Q20729551 wdt:P162|wdt:P272 wd:Q562108 .\nwd:Q20729551 wdt:P162|wdt:P272 wd:Q1687239\n}",
        "questionWithBrackets": "Was [Stop for Bud] directed , produced , and edited by [Jens J\u00f8rgen Thorsen] and [J\u00f8rgen Leth]"
    },
    {
        "questionIdx": 82325,
        "questionPatternModEntities": "Was M0 produced by and written by M1 and M2",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P1 M1 .\nM0 P1 M2\n}",
        "recursionDepth": 24,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q80379 wdt:P162|wdt:P272 wd:Q4465 .\nwd:Q80379 wdt:P162|wdt:P272 wd:Q116861 .\nwd:Q80379 wdt:P58 wd:Q4465 .\nwd:Q80379 wdt:P58 wd:Q116861\n}",
        "questionWithBrackets": "Was [The Hobbit: An Unexpected Journey] produced by and written by [Peter Jackson] and [Fran Walsh]"
    },
    {
        "questionIdx": 82352,
        "questionPatternModEntities": "Was M0 directed , produced , and edited by M1",
        "questionTemplate": "Was [entity] [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1 .\nM0 P2 M1\n}",
        "recursionDepth": 24,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q854990 wdt:P57 wd:Q8006 .\nwd:Q854990 wdt:P1040 wd:Q8006 .\nwd:Q854990 wdt:P162|wdt:P272 wd:Q8006\n}",
        "questionWithBrackets": "Was [Kagemusha] directed , produced , and edited by [Akira Kurosawa]"
    },
    {
        "questionIdx": 82383,
        "questionPatternModEntities": "Was M2 executive produced by M0 's German sibling and written by M3 , M4 , M5 , and M6",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] and [VP_SIMPLE] by [entity] , [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M0 ) .\nM2 P2 ?x0 .\nM2 P3 M3 .\nM2 P3 M4 .\nM2 P3 M5 .\nM2 P3 M6\n}",
        "recursionDepth": 43,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P27 wd:Q183 .\n?x0 wdt:P3373 wd:Q1479844 .\nFILTER ( ?x0 != wd:Q1479844 ) .\nwd:Q562046 wdt:P1431 ?x0 .\nwd:Q562046 wdt:P58 wd:Q114868 .\nwd:Q562046 wdt:P58 wd:Q60525 .\nwd:Q562046 wdt:P58 wd:Q86778 .\nwd:Q562046 wdt:P58 wd:Q1511834\n}",
        "questionWithBrackets": "Was [Die goldene Stadt] executive produced by [Peter Harlan] 's German sibling and written by [Werner Eplinius] , [Richard Billinger] , [Veit Harlan] , and [Alfred Braun]"
    },
    {
        "questionIdx": 82417,
        "questionPatternModEntities": "Was M0 executive produced by M1 , edited by M3 and M4 , executive produced by M2 , and edited by M5",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] and [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P1 M3 .\nM0 P1 M4 .\nM0 P1 M5\n}",
        "recursionDepth": 47,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q1740171 wdt:P1040 wd:Q15835006 .\nwd:Q1740171 wdt:P1040 wd:Q614630 .\nwd:Q1740171 wdt:P1040 wd:Q7820333 .\nwd:Q1740171 wdt:P1431 wd:Q38222 .\nwd:Q1740171 wdt:P1431 wd:Q56094\n}",
        "questionWithBrackets": "Was [Mishima: A Life in Four Chapters] executive produced by [George Lucas] , edited by [Michael Chandler] and [Michael Chandler] , executive produced by [Francis Ford Coppola] , and edited by [Tomoyo \u014cshima]"
    },
    {
        "questionIdx": 82447,
        "questionPatternModEntities": "Was M0 produced , executive produced , and edited by M1",
        "questionTemplate": "Was [entity] [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1 .\nM0 P2 M1\n}",
        "recursionDepth": 25,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q854990 wdt:P1040 wd:Q8006 .\nwd:Q854990 wdt:P1431 wd:Q8006 .\nwd:Q854990 wdt:P162|wdt:P272 wd:Q8006\n}",
        "questionWithBrackets": "Was [Kagemusha] produced , executive produced , and edited by [Akira Kurosawa]"
    },
    {
        "questionIdx": 82493,
        "questionPatternModEntities": "Was M0 edited by M1 and M2",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2\n}",
        "recursionDepth": 16,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q118976 wdt:P1040 wd:Q8003 .\nwd:Q118976 wdt:P1040 wd:Q4459088\n}",
        "questionWithBrackets": "Was [Alexander Nevsky] edited by [Sergei Eisenstein] and [Esfir Veniaminovna Tobak]"
    },
    {
        "questionIdx": 82600,
        "questionPatternModEntities": "Was M1 edited by , written by , directed by , produced by , and executive produced by a sibling of M0",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nM1 P1 ?x0 .\nM1 P2 ?x0 .\nM1 P3 ?x0 .\nM1 P4 ?x0 .\nM1 P5 ?x0\n}",
        "recursionDepth": 45,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P3373 wd:Q28370409 .\nFILTER ( ?x0 != wd:Q28370409 ) .\nwd:Q28146810 wdt:P57 ?x0 .\nwd:Q28146810 wdt:P1040 ?x0 .\nwd:Q28146810 wdt:P1431 ?x0 .\nwd:Q28146810 wdt:P162|wdt:P272 ?x0 .\nwd:Q28146810 wdt:P58 ?x0\n}",
        "questionWithBrackets": "Was [Bullets, Fangs and Dinner at 8] edited by , written by , directed by , produced by , and executive produced by a sibling of [Everton Rocca]"
    },
    {
        "questionIdx": 82606,
        "questionPatternModEntities": "Was M1 executive produced by , directed by , edited by , produced by , and written by a sibling of M0",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nM1 P1 ?x0 .\nM1 P2 ?x0 .\nM1 P3 ?x0 .\nM1 P4 ?x0 .\nM1 P5 ?x0\n}",
        "recursionDepth": 45,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P3373 wd:Q28370409 .\nFILTER ( ?x0 != wd:Q28370409 ) .\nwd:Q28146810 wdt:P57 ?x0 .\nwd:Q28146810 wdt:P1040 ?x0 .\nwd:Q28146810 wdt:P1431 ?x0 .\nwd:Q28146810 wdt:P162|wdt:P272 ?x0 .\nwd:Q28146810 wdt:P58 ?x0\n}",
        "questionWithBrackets": "Was [Bullets, Fangs and Dinner at 8] executive produced by , directed by , edited by , produced by , and written by a sibling of [Everton Rocca]"
    },
    {
        "questionIdx": 82618,
        "questionPatternModEntities": "Was M2 produced , directed , and executive produced by a female sibling of M0",
        "questionTemplate": "Was [entity] [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M0 ) .\nM2 P2 ?x0 .\nM2 P3 ?x0 .\nM2 P4 ?x0\n}",
        "recursionDepth": 36,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P21 wd:Q6581072 .\n?x0 wdt:P3373 wd:Q9696 .\nFILTER ( ?x0 != wd:Q9696 ) .\nwd:Q1420921 wdt:P57 ?x0 .\nwd:Q1420921 wdt:P1431 ?x0 .\nwd:Q1420921 wdt:P162|wdt:P272 ?x0\n}",
        "questionWithBrackets": "Was [Mary, Mother of Jesus] produced , directed , and executive produced by a female sibling of [John F. Kennedy]"
    },
    {
        "questionIdx": 82621,
        "questionPatternModEntities": "Was M1 written by , directed by , edited by , executive produced by , and produced by a sibling of M0",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nM1 P1 ?x0 .\nM1 P2 ?x0 .\nM1 P3 ?x0 .\nM1 P4 ?x0 .\nM1 P5 ?x0\n}",
        "recursionDepth": 45,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P3373 wd:Q28370409 .\nFILTER ( ?x0 != wd:Q28370409 ) .\nwd:Q28146810 wdt:P57 ?x0 .\nwd:Q28146810 wdt:P1040 ?x0 .\nwd:Q28146810 wdt:P1431 ?x0 .\nwd:Q28146810 wdt:P162|wdt:P272 ?x0 .\nwd:Q28146810 wdt:P58 ?x0\n}",
        "questionWithBrackets": "Was [Bullets, Fangs and Dinner at 8] written by , directed by , edited by , executive produced by , and produced by a sibling of [Everton Rocca]"
    },
    {
        "questionIdx": 82631,
        "questionPatternModEntities": "Was M1 written by M0 's parent and executive produced by M2",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 M2 .\nM1 P2 ?x0\n}",
        "recursionDepth": 28,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q454464 .\nwd:Q13423751 wdt:P1431 wd:Q72267 .\nwd:Q13423751 wdt:P58 ?x0\n}",
        "questionWithBrackets": "Was [Betty to the Rescue] written by [William Churchill deMille] 's parent and executive produced by [Cecil B. DeMille]"
    },
    {
        "questionIdx": 82637,
        "questionPatternModEntities": "Was M0 executive produced by , written by , and directed by M1",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1 .\nM0 P2 M1\n}",
        "recursionDepth": 27,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q182206 wdt:P57 wd:Q23261 .\nwd:Q182206 wdt:P1431 wd:Q23261 .\nwd:Q182206 wdt:P58 wd:Q23261\n}",
        "questionWithBrackets": "Was [Evangelion: 3.0 You Can (Not) Redo] executive produced by , written by , and directed by [Hideaki Anno]"
    },
    {
        "questionIdx": 82652,
        "questionPatternModEntities": "Was M2 written by and executive produced by a British employee of M0",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by and [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nM2 P2 ?x0 .\nM2 P3 ?x0\n}",
        "recursionDepth": 32,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P108 wd:Q9531 .\n?x0 wdt:P27 wd:Q145 .\nwd:Q836821 wdt:P1431 ?x0 .\nwd:Q836821 wdt:P58 ?x0\n}",
        "questionWithBrackets": "Was [The Hitchhiker's Guide to the Galaxy] written by and executive produced by a British employee of [BBC]"
    },
    {
        "questionIdx": 82659,
        "questionPatternModEntities": "Was M0 directed , edited , executive produced , and produced by M1",
        "questionTemplate": "Was [entity] [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1 .\nM0 P2 M1 .\nM0 P3 M1\n}",
        "recursionDepth": 30,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q17738 wdt:P57 wd:Q38222 .\nwd:Q17738 wdt:P1040 wd:Q38222 .\nwd:Q17738 wdt:P1431 wd:Q38222 .\nwd:Q17738 wdt:P162|wdt:P272 wd:Q38222\n}",
        "questionWithBrackets": "Was [Star Wars: Episode IV \u2013 A New Hope] directed , edited , executive produced , and produced by [George Lucas]"
    },
    {
        "questionIdx": 82702,
        "questionPatternModEntities": "Was M2 executive produced by M3 and M4 and edited by M1 's French spouse",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] and [entity] and [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M1 ) .\nM2 P2 M3 .\nM2 P2 M4 .\nM2 P3 ?x0\n}",
        "recursionDepth": 37,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P27 wd:Q142 .\n?x0 wdt:P26 wd:Q19278334 .\nFILTER ( ?x0 != wd:Q19278334 ) .\nwd:Q18218448 wdt:P1040 ?x0 .\nwd:Q18218448 wdt:P1431 wd:Q103917 .\nwd:Q18218448 wdt:P1431 wd:Q710924\n}",
        "questionWithBrackets": "Was [Citizenfour] executive produced by [Jeff Skoll] and [Steven Soderbergh] and edited by [Dirk Wilutzky] 's French spouse"
    },
    {
        "questionIdx": 82715,
        "questionPatternModEntities": "Was M0 produced , edited , and directed by M1 and M2",
        "questionTemplate": "Was [entity] [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P1 M1 .\nM0 P1 M2 .\nM0 P2 M1 .\nM0 P2 M2\n}",
        "recursionDepth": 28,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q20729551 wdt:P57 wd:Q562108 .\nwd:Q20729551 wdt:P57 wd:Q1687239 .\nwd:Q20729551 wdt:P1040 wd:Q562108 .\nwd:Q20729551 wdt:P1040 wd:Q1687239 .\nwd:Q20729551 wdt:P162|wdt:P272 wd:Q562108 .\nwd:Q20729551 wdt:P162|wdt:P272 wd:Q1687239\n}",
        "questionWithBrackets": "Was [Stop for Bud] produced , edited , and directed by [Jens J\u00f8rgen Thorsen] and [J\u00f8rgen Leth]"
    },
    {
        "questionIdx": 82777,
        "questionPatternModEntities": "Was M0 produced and distributed by M1",
        "questionTemplate": "Was [entity] [VP_SIMPLE] and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1\n}",
        "recursionDepth": 19,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q779039 wdt:P750 wd:Q3587 .\nwd:Q779039 wdt:P162|wdt:P272 wd:Q3587\n}",
        "questionWithBrackets": "Was [Os Caras de Pau] produced and distributed by [Rede Globo]"
    },
    {
        "questionIdx": 82840,
        "questionPatternModEntities": "Was M0 produced by M1 and directed by M2",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M2\n}",
        "recursionDepth": 23,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q1097615 wdt:P57 wd:Q53007 .\nwd:Q1097615 wdt:P162|wdt:P272 wd:Q220\n}",
        "questionWithBrackets": "Was [Figaro qua, Figaro l\u00e0] produced by [Rome] and directed by [Carlo Ludovico Bragaglia]"
    },
    {
        "questionIdx": 82849,
        "questionPatternModEntities": "Was M0 produced , written , executive produced , and edited by M1",
        "questionTemplate": "Was [entity] [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1 .\nM0 P2 M1 .\nM0 P3 M1\n}",
        "recursionDepth": 30,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q854990 wdt:P1040 wd:Q8006 .\nwd:Q854990 wdt:P1431 wd:Q8006 .\nwd:Q854990 wdt:P162|wdt:P272 wd:Q8006 .\nwd:Q854990 wdt:P58 wd:Q8006\n}",
        "questionWithBrackets": "Was [Kagemusha] produced , written , executive produced , and edited by [Akira Kurosawa]"
    },
    {
        "questionIdx": 82862,
        "questionPatternModEntities": "Was M0 written by M4 , executive produced by M1 and M2 , executive produced by M3 , and produced by M5",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] and [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P0 M3 .\nM0 P1 M4 .\nM0 P2 M5\n}",
        "recursionDepth": 47,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q102244 wdt:P1431 wd:Q75079 .\nwd:Q102244 wdt:P1431 wd:Q1900360 .\nwd:Q102244 wdt:P1431 wd:Q975579 .\nwd:Q102244 wdt:P162|wdt:P272 wd:Q319986 .\nwd:Q102244 wdt:P58 wd:Q362061\n}",
        "questionWithBrackets": "Was [Harry Potter and the Chamber of Secrets] written by [Steve Kloves] , executive produced by [David Barron] and [Mark Radcliffe] , executive produced by [Chris Columbus] , and produced by [David Heyman]"
    },
    {
        "questionIdx": 82921,
        "questionPatternModEntities": "Was M2 produced by M1 's Dutch spouse",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M1 ) .\nM2 P2 ?x0\n}",
        "recursionDepth": 21,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P27 wd:Q29999 .\n?x0 wdt:P26 wd:Q64638 .\nFILTER ( ?x0 != wd:Q64638 ) .\nwd:Q2082065 wdt:P162|wdt:P272 ?x0\n}",
        "questionWithBrackets": "Was [Bringing Up Bobby] produced by [Kip Williams] 's Dutch spouse"
    },
    {
        "questionIdx": 82983,
        "questionPatternModEntities": "Was M2 directed by M1 's American spouse",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M1 ) .\nM2 P2 ?x0\n}",
        "recursionDepth": 21,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P27 wd:Q30 .\n?x0 wdt:P26 wd:Q644565 .\nFILTER ( ?x0 != wd:Q644565 ) .\nwd:Q32450 wdt:P57 ?x0\n}",
        "questionWithBrackets": "Was [Pretty Little Liars] directed by [Patrick J. Adams] 's American spouse"
    },
    {
        "questionIdx": 82999,
        "questionPatternModEntities": "Was M1 edited , directed , produced , and written by a spouse of M0",
        "questionTemplate": "Was [entity] [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nM1 P1 ?x0 .\nM1 P2 ?x0 .\nM1 P3 ?x0 .\nM1 P4 ?x0\n}",
        "recursionDepth": 35,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P26 wd:Q3032150 .\nFILTER ( ?x0 != wd:Q3032150 ) .\nwd:Q854990 wdt:P57 ?x0 .\nwd:Q854990 wdt:P1040 ?x0 .\nwd:Q854990 wdt:P162|wdt:P272 ?x0 .\nwd:Q854990 wdt:P58 ?x0\n}",
        "questionWithBrackets": "Was [Kagemusha] edited , directed , produced , and written by a spouse of [Y\u014dko Yaguchi]"
    },
    {
        "questionIdx": 83045,
        "questionPatternModEntities": "Was M1 written by M2 , M3 , M4 , and M5 , written by M6 , and edited by M0 's spouse",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] , [entity] , [entity] , and [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nM1 P1 M2 .\nM1 P1 M3 .\nM1 P1 M4 .\nM1 P1 M5 .\nM1 P1 M6 .\nM1 P2 ?x0\n}",
        "recursionDepth": 46,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P26 wd:Q3296384 .\nFILTER ( ?x0 != wd:Q3296384 ) .\nwd:Q603857 wdt:P1040 ?x0 .\nwd:Q603857 wdt:P58 wd:Q474262 .\nwd:Q603857 wdt:P58 wd:Q313497 .\nwd:Q603857 wdt:P58 wd:Q55238 .\nwd:Q603857 wdt:P58 wd:Q113628 .\nwd:Q603857 wdt:P58 wd:Q55215\n}",
        "questionWithBrackets": "Was [11'09\"01 September 11] written by [Amos Gitai] , [Alejandro Gonz\u00e1lez I\u00f1\u00e1rritu] , [Danis Tanovi\u0107] , and [Ken Loach] , written by [Idrissa Ou\u00e9draogo] , and edited by [Marzieh Meshkini] 's spouse"
    },
    {
        "questionIdx": 83138,
        "questionPatternModEntities": "Was M2 's prequel 's sequel executive produced by M0 and executive produced by a employee of M1",
        "questionTemplate": "Was [entity] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE] [VP_SIMPLE] by [entity] and [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x0 P0 M0 .\n?x0 P1 ?x2 .\n?x1 P2 M1 .\n?x2 P3 M2\n}",
        "recursionDepth": 39,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P1431 ?x1 .\n?x0 wdt:P1431 wd:Q319204 .\n?x0 wdt:P155 ?x2 .\n?x1 wdt:P108 wd:Q740308 .\n?x2 wdt:P156 wd:Q391143\n}",
        "questionWithBrackets": "Was [Chinese Zodiac] 's prequel 's sequel executive produced by [Brett Ratner] and executive produced by a employee of [UNICEF]"
    },
    {
        "questionIdx": 83171,
        "questionPatternModEntities": "Was M0 edited by M5 , M6 , and M7 , written by M1 , and written by M2 , M3 , and M4",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] , [entity] , and [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P0 M3 .\nM0 P0 M4 .\nM0 P1 M5 .\nM0 P1 M6 .\nM0 P1 M7\n}",
        "recursionDepth": 46,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q603857 wdt:P1040 wd:Q55211 .\nwd:Q603857 wdt:P1040 wd:Q18021284 .\nwd:Q603857 wdt:P1040 wd:Q22074634 .\nwd:Q603857 wdt:P58 wd:Q295093 .\nwd:Q603857 wdt:P58 wd:Q44221 .\nwd:Q603857 wdt:P58 wd:Q55238 .\nwd:Q603857 wdt:P58 wd:Q55215\n}",
        "questionWithBrackets": "Was [11'09\"01 September 11] edited by [Mohsen Makhmalbaf] , [Jonathan Morris] , and [Robert Duffy] , written by [Alejandro Gonz\u00e1lez I\u00f1\u00e1rritu] , and written by [Claude Lelouch] , [Sean Penn] , and [Ken Loach]"
    },
    {
        "questionIdx": 83211,
        "questionPatternModEntities": "Was M2 edited by , directed by , produced by , and executive produced by M0 's male employee",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nM2 P2 ?x0 .\nM2 P3 ?x0 .\nM2 P4 ?x0 .\nM2 P5 ?x0\n}",
        "recursionDepth": 42,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P108 wd:Q681250 .\n?x0 wdt:P21 wd:Q6581097 .\nwd:Q3505719 wdt:P57 ?x0 .\nwd:Q3505719 wdt:P1040 ?x0 .\nwd:Q3505719 wdt:P1431 ?x0 .\nwd:Q3505719 wdt:P162|wdt:P272 ?x0\n}",
        "questionWithBrackets": "Was [Suspension of Disbelief] edited by , directed by , produced by , and executive produced by [European Graduate School] 's male employee"
    },
    {
        "questionIdx": 83212,
        "questionPatternModEntities": "Was M2 produced and edited by M0 's Japanese employee",
        "questionTemplate": "Was [entity] [VP_SIMPLE] and [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nM2 P2 ?x0 .\nM2 P3 ?x0\n}",
        "recursionDepth": 28,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P108 wd:Q1142226 .\n?x0 wdt:P27 wd:Q17 .\nwd:Q1072777 wdt:P1040 ?x0 .\nwd:Q1072777 wdt:P162|wdt:P272 ?x0\n}",
        "questionWithBrackets": "Was [Children Who Chase Lost Voices] produced and edited by [Nihon Falcom] 's Japanese employee"
    },
    {
        "questionIdx": 83252,
        "questionPatternModEntities": "Was M1 's American spouse M2 's spouse",
        "questionTemplate": "Was [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\nFILTER ( ?x0 != M1 ) .\nFILTER ( ?x0 != M2 )\n}",
        "recursionDepth": 20,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P27 wd:Q30 .\n?x0 wdt:P26 wd:Q51535 .\n?x0 wdt:P26 wd:Q323781 .\nFILTER ( ?x0 != wd:Q51535 ) .\nFILTER ( ?x0 != wd:Q323781 )\n}",
        "questionWithBrackets": "Was [Sidney Luft] 's American spouse [Vincente Minnelli] 's spouse"
    },
    {
        "questionIdx": 83255,
        "questionPatternModEntities": "Was M1 's American sibling 's male sibling 's sibling M3",
        "questionTemplate": "Was [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] 's [ROLE_SIMPLE] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x0 P1 M0 .\n?x1 P0 M1 .\n?x1 P2 M2 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x1 != M1 ) .\nFILTER ( M3 != ?x0 ) .\nM3 P0 ?x0\n}",
        "recursionDepth": 29,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P21 wd:Q6581097 .\n?x0 wdt:P3373 ?x1 .\n?x1 wdt:P27 wd:Q30 .\n?x1 wdt:P3373 wd:Q850421 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x1 != wd:Q850421 ) .\nFILTER ( wd:Q23 != ?x0 ) .\nwd:Q23 wdt:P3373 ?x0\n}",
        "questionWithBrackets": "Was [Betty Washington Lewis] 's American sibling 's male sibling 's sibling [George Washington]"
    },
    {
        "questionIdx": 83265,
        "questionPatternModEntities": "Was M2 written by a Spanish spouse of M1 and directed by M3 , M4 , and M5",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] and [VP_SIMPLE] by [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M1 ) .\nM2 P2 ?x0 .\nM2 P3 M3 .\nM2 P3 M4 .\nM2 P3 M5\n}",
        "recursionDepth": 41,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P27 wd:Q29 .\n?x0 wdt:P26 wd:Q21001728 .\nFILTER ( ?x0 != wd:Q21001728 ) .\nwd:Q249274 wdt:P57 wd:Q3392104 .\nwd:Q249274 wdt:P57 wd:Q20492587 .\nwd:Q249274 wdt:P57 wd:Q527394 .\nwd:Q249274 wdt:P58 ?x0\n}",
        "questionWithBrackets": "Was [\u00a1Hay motivo!] written by a Spanish spouse of [Amparo Gast\u00f3n] and directed by [El Gran Wyoming] , [Mariano Barroso] , and [Jos\u00e9 \u00c1ngel Rebolledo]"
    },
    {
        "questionIdx": 83281,
        "questionPatternModEntities": "Was M0 written , directed , produced , and edited by M1 and M2",
        "questionTemplate": "Was [entity] [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P1 M1 .\nM0 P1 M2 .\nM0 P2 M1 .\nM0 P2 M2 .\nM0 P3 M1 .\nM0 P3 M2\n}",
        "recursionDepth": 33,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q20729551 wdt:P57 wd:Q562108 .\nwd:Q20729551 wdt:P57 wd:Q1687239 .\nwd:Q20729551 wdt:P1040 wd:Q562108 .\nwd:Q20729551 wdt:P1040 wd:Q1687239 .\nwd:Q20729551 wdt:P162|wdt:P272 wd:Q562108 .\nwd:Q20729551 wdt:P162|wdt:P272 wd:Q1687239 .\nwd:Q20729551 wdt:P58 wd:Q562108 .\nwd:Q20729551 wdt:P58 wd:Q1687239\n}",
        "questionWithBrackets": "Was [Stop for Bud] written , directed , produced , and edited by [J\u00f8rgen Leth] and [Jens J\u00f8rgen Thorsen]"
    },
    {
        "questionIdx": 83318,
        "questionPatternModEntities": "Was M0 a French employee of M1",
        "questionTemplate": "Was [entity] a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M2\n}",
        "recursionDepth": 18,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q7091 wdt:P108 wd:Q83259 .\nwd:Q7091 wdt:P27 wd:Q142\n}",
        "questionWithBrackets": "Was [\u00c9variste Galois] a French employee of [\u00c9cole normale sup\u00e9rieure]"
    },
    {
        "questionIdx": 83363,
        "questionPatternModEntities": "Was M0 written , produced , and directed by M1 and M2",
        "questionTemplate": "Was [entity] [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P1 M1 .\nM0 P1 M2 .\nM0 P2 M1 .\nM0 P2 M2\n}",
        "recursionDepth": 28,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q679023 wdt:P57 wd:Q3772 .\nwd:Q679023 wdt:P57 wd:Q358714 .\nwd:Q679023 wdt:P162|wdt:P272 wd:Q3772 .\nwd:Q679023 wdt:P162|wdt:P272 wd:Q358714 .\nwd:Q679023 wdt:P58 wd:Q3772 .\nwd:Q679023 wdt:P58 wd:Q358714\n}",
        "questionWithBrackets": "Was [Grindhouse] written , produced , and directed by [Quentin Tarantino] and [Eli Roth]"
    },
    {
        "questionIdx": 83388,
        "questionPatternModEntities": "Was M1 M0 's sibling 's sibling and spouse",
        "questionTemplate": "Was [entity] [entity] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE] and [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( M1 != ?x0 ) .\nFILTER ( M1 != ?x0 ) .\nM1 P0 ?x0 .\nM1 P1 ?x0\n}",
        "recursionDepth": 20,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P3373 wd:Q3345 .\nFILTER ( ?x0 != wd:Q3345 ) .\nFILTER ( wd:Q3340 != ?x0 ) .\nFILTER ( wd:Q3340 != ?x0 ) .\nwd:Q3340 wdt:P3373 ?x0 .\nwd:Q3340 wdt:P26 ?x0\n}",
        "questionWithBrackets": "Was [Ptolemy IX Lathyros] [Ptolemy X Alexander I] 's sibling 's sibling and spouse"
    },
    {
        "questionIdx": 83391,
        "questionPatternModEntities": "Was M1 a spouse and sibling of M0 's sibling and spouse",
        "questionTemplate": "Was [entity] a [ROLE_SIMPLE] and [ROLE_SIMPLE] of [entity] 's [ROLE_SIMPLE] and [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M0 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x0 != M0 ) .\nFILTER ( M1 != ?x0 ) .\nFILTER ( M1 != ?x0 ) .\nM1 P0 ?x0 .\nM1 P1 ?x0\n}",
        "recursionDepth": 27,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P3373 wd:Q3350 .\n?x0 wdt:P26 wd:Q3350 .\nFILTER ( ?x0 != wd:Q3350 ) .\nFILTER ( ?x0 != wd:Q3350 ) .\nFILTER ( wd:Q39952 != ?x0 ) .\nFILTER ( wd:Q39952 != ?x0 ) .\nwd:Q39952 wdt:P3373 ?x0 .\nwd:Q39952 wdt:P26 ?x0\n}",
        "questionWithBrackets": "Was [Ptolemy VI] a spouse and sibling of [Ptolemy VIII Physcon] 's sibling and spouse"
    },
    {
        "questionIdx": 83392,
        "questionPatternModEntities": "Was M0 's sibling 's spouse and sibling M1",
        "questionTemplate": "Was [entity] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE] and [ROLE_SIMPLE] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( M1 != ?x0 ) .\nFILTER ( M1 != ?x0 ) .\nM1 P0 ?x0 .\nM1 P1 ?x0\n}",
        "recursionDepth": 20,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P3373 wd:Q8045 .\nFILTER ( ?x0 != wd:Q8045 ) .\nFILTER ( wd:Q910463 != ?x0 ) .\nFILTER ( wd:Q910463 != ?x0 ) .\nwd:Q910463 wdt:P3373 ?x0 .\nwd:Q910463 wdt:P26 ?x0\n}",
        "questionWithBrackets": "Was [Ramesses VIII] 's sibling 's spouse and sibling [Duatentopet]"
    },
    {
        "questionIdx": 83415,
        "questionPatternModEntities": "Was M0 a French Dutch employee of M1",
        "questionTemplate": "Was [entity] a [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M2 .\nM0 P1 M3\n}",
        "recursionDepth": 23,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q510916 wdt:P108 wd:Q752663 .\nwd:Q510916 wdt:P27 wd:Q29999 .\nwd:Q510916 wdt:P27 wd:Q142\n}",
        "questionWithBrackets": "Was [Thomas Joannes Stieltjes] a French Dutch employee of [Delft University of Technology]"
    },
    {
        "questionIdx": 83425,
        "questionPatternModEntities": "Was M0 's German sibling M1 's sibling",
        "questionTemplate": "Was [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P1 M2 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x0 != M1 )\n}",
        "recursionDepth": 20,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P27 wd:Q183 .\n?x0 wdt:P3373 wd:Q6701 .\n?x0 wdt:P3373 wd:Q1067201 .\nFILTER ( ?x0 != wd:Q6701 ) .\nFILTER ( ?x0 != wd:Q1067201 )\n}",
        "questionWithBrackets": "Was [Jacob Grimm] 's German sibling [Charlotte Amalie Grimm] 's sibling"
    },
    {
        "questionIdx": 83513,
        "questionPatternModEntities": "Was M2 directed by , written by , and produced by a Japanese parent of M1",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nM2 P2 ?x0 .\nM2 P3 ?x0 .\nM2 P4 ?x0\n}",
        "recursionDepth": 37,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q1620638 .\n?x0 wdt:P27 wd:Q17 .\nwd:Q39946 wdt:P57 ?x0 .\nwd:Q39946 wdt:P162|wdt:P272 ?x0 .\nwd:Q39946 wdt:P58 ?x0\n}",
        "questionWithBrackets": "Was [The Hidden Fortress] directed by , written by , and produced by a Japanese parent of [Hisao Kurosawa]"
    },
    {
        "questionIdx": 83547,
        "questionPatternModEntities": "Was M2 written by and directed by a Chinese sibling of M0",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by and [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M0 ) .\nM2 P2 ?x0 .\nM2 P3 ?x0\n}",
        "recursionDepth": 31,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P27 wd:Q148 .\n?x0 wdt:P3373 wd:Q6191594 .\nFILTER ( ?x0 != wd:Q6191594 ) .\nwd:Q2633399 wdt:P57 ?x0 .\nwd:Q2633399 wdt:P58 ?x0\n}",
        "questionWithBrackets": "Was [Let the Bullets Fly] written by and directed by a Chinese sibling of [Jiang Wu]"
    },
    {
        "questionIdx": 83614,
        "questionPatternModEntities": "Was M0 German",
        "questionTemplate": "Was [entity] [ADJECTIVE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1\n}",
        "recursionDepth": 9,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q567 wdt:P27 wd:Q183\n}LIMIT 1",
        "questionWithBrackets": "Was [Angela Merkel] German"
    },
    {
        "questionIdx": 83616,
        "questionPatternModEntities": "Was M0 M1 's Canadian Japanese male sibling",
        "questionTemplate": "Was [entity] [entity] 's [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\nFILTER ( M0 != M1 ) .\nM0 P0 M1 .\nM0 P1 M2 .\nM0 P1 M3 .\nM0 P2 M4\n}",
        "recursionDepth": 26,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nFILTER ( wd:Q5733248 != wd:Q6810897 ) .\nwd:Q5733248 wdt:P21 wd:Q6581097 .\nwd:Q5733248 wdt:P27 wd:Q17 .\nwd:Q5733248 wdt:P27 wd:Q16 .\nwd:Q5733248 wdt:P3373 wd:Q6810897\n}",
        "questionWithBrackets": "Was [Herb Wakabayashi] [Mel Wakabayashi] 's Canadian Japanese male sibling"
    },
    {
        "questionIdx": 83672,
        "questionPatternModEntities": "Was M1 directed by M2 and directed by M0 's parent",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 ?x0 .\nM1 P1 M2\n}",
        "recursionDepth": 27,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q271569 .\nwd:Q34414 wdt:P57 ?x0 .\nwd:Q34414 wdt:P57 wd:Q7374\n}",
        "questionWithBrackets": "Was [Rear Window] directed by [Alfred Hitchcock] and directed by [Pat Hitchcock] 's parent"
    },
    {
        "questionIdx": 83680,
        "questionPatternModEntities": "Was M1 directed by M2 , M3 , and M4 and directed by M0 's spouse 's sibling",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] , [entity] , and [entity] and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x1 P1 M0 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x1 != M0 ) .\nM1 P2 ?x0 .\nM1 P2 M2 .\nM1 P2 M3 .\nM1 P2 M4\n}",
        "recursionDepth": 38,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P3373 ?x1 .\n?x1 wdt:P26 wd:Q64702064 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x1 != wd:Q64702064 ) .\nwd:Q208048 wdt:P57 ?x0 .\nwd:Q208048 wdt:P57 wd:Q1279660 .\nwd:Q208048 wdt:P57 wd:Q1372455 .\nwd:Q208048 wdt:P57 wd:Q1387617\n}",
        "questionWithBrackets": "Was [Band of Brothers] directed by [Phil Alden Robinson] , [Richard Loncraine] , and [David Nutter] and directed by [Karen Praxel] 's spouse 's sibling"
    },
    {
        "questionIdx": 83683,
        "questionPatternModEntities": "Was M2 directed by M3 , directed by M1 's employee , produced by M0 's sibling , and directed by M4",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] , [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x1 P1 M1 .\nFILTER ( ?x0 != M0 ) .\nM2 P2 ?x0 .\nM2 P3 ?x1 .\nM2 P3 M3 .\nM2 P3 M4\n}",
        "recursionDepth": 49,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P3373 wd:Q347432 .\n?x1 wdt:P108 wd:Q2216535 .\nFILTER ( ?x0 != wd:Q347432 ) .\nwd:Q754736 wdt:P57 ?x1 .\nwd:Q754736 wdt:P57 wd:Q3157236 .\nwd:Q754736 wdt:P57 wd:Q579241 .\nwd:Q754736 wdt:P162|wdt:P272 ?x0\n}",
        "questionWithBrackets": "Was [Make Mine Music] directed by [Clyde Geronimi] , directed by [Walt Disney Studios] 's employee , produced by [Roy O. Disney] 's sibling , and directed by [Jack Kinney]"
    },
    {
        "questionIdx": 83690,
        "questionPatternModEntities": "Was M2 directed by a German spouse of M1 and directed by M3 , M4 , and M5",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] and [VP_SIMPLE] by [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M1 ) .\nM2 P2 ?x0 .\nM2 P2 M3 .\nM2 P2 M4 .\nM2 P2 M5\n}",
        "recursionDepth": 41,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P27 wd:Q183 .\n?x0 wdt:P26 wd:Q58866 .\nFILTER ( ?x0 != wd:Q58866 ) .\nwd:Q331738 wdt:P57 ?x0 .\nwd:Q331738 wdt:P57 wd:Q377412 .\nwd:Q331738 wdt:P57 wd:Q364342 .\nwd:Q331738 wdt:P57 wd:Q19504\n}",
        "questionWithBrackets": "Was [Western Union] directed by a German spouse of [Thea von Harbou] and directed by [Fritz Lang] , [Darryl F. Zanuck] , and [Otto Brower]"
    },
    {
        "questionIdx": 83778,
        "questionPatternModEntities": "Was M0 a Japanese actor of M2",
        "questionTemplate": "Was [entity] a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M2\n}",
        "recursionDepth": 18,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q49547 wdt:P453 wd:Q1945499 .\nwd:Q49547 wdt:P27 wd:Q17\n}",
        "questionWithBrackets": "Was [Fumiko Orikasa] a Japanese actor of [Chun-Li]"
    },
    {
        "questionIdx": 83839,
        "questionPatternModEntities": "Was M1 's spouse M0 's actor",
        "questionTemplate": "Was [entity] 's [ROLE_SIMPLE] [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M1 )\n}",
        "recursionDepth": 15,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P453 wd:Q222573 .\n?x0 wdt:P26 wd:Q192482 .\nFILTER ( ?x0 != wd:Q192482 )\n}",
        "questionWithBrackets": "Was [Telemachus] 's spouse [femme fatale] 's actor"
    },
    {
        "questionIdx": 83934,
        "questionPatternModEntities": "Was M1 's Dutch sibling M0",
        "questionTemplate": "Was [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nFILTER ( M0 != M1 ) .\nM0 P0 M1 .\nM0 P1 M2\n}",
        "recursionDepth": 16,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nFILTER ( wd:Q62845 != wd:Q352975 ) .\nwd:Q62845 wdt:P27 wd:Q29999 .\nwd:Q62845 wdt:P3373 wd:Q352975\n}",
        "questionWithBrackets": "Was [Tim Krabb\u00e9] 's Dutch sibling [Jeroen Krabb\u00e9]"
    },
    {
        "questionIdx": 83940,
        "questionPatternModEntities": "Was M0 written by and executive produced by M1",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1\n}",
        "recursionDepth": 21,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q181086 wdt:P1431 wd:Q2001 .\nwd:Q181086 wdt:P58 wd:Q2001\n}",
        "questionWithBrackets": "Was [A Clockwork Orange] written by and executive produced by [Stanley Kubrick]"
    },
    {
        "questionIdx": 83946,
        "questionPatternModEntities": "Was M0 's spouse and sibling a sibling of M1",
        "questionTemplate": "Was [entity] 's [ROLE_SIMPLE] and [ROLE_SIMPLE] a [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P1 M0 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x0 != M1 )\n}",
        "recursionDepth": 22,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P3373 wd:Q3345 .\n?x0 wdt:P3373 wd:Q3340 .\n?x0 wdt:P26 wd:Q3340 .\nFILTER ( ?x0 != wd:Q3345 ) .\nFILTER ( ?x0 != wd:Q3340 ) .\nFILTER ( ?x0 != wd:Q3340 )\n}",
        "questionWithBrackets": "Was [Ptolemy IX Lathyros] 's spouse and sibling a sibling of [Ptolemy X Alexander I]"
    },
    {
        "questionIdx": 83979,
        "questionPatternModEntities": "Was M1 edited by and produced by M0 's parent",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 ?x0 .\nM1 P2 ?x0\n}",
        "recursionDepth": 24,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q1620638 .\nwd:Q39946 wdt:P1040 ?x0 .\nwd:Q39946 wdt:P162|wdt:P272 ?x0\n}",
        "questionWithBrackets": "Was [The Hidden Fortress] edited by and produced by [Hisao Kurosawa] 's parent"
    },
    {
        "questionIdx": 84025,
        "questionPatternModEntities": "Was M0 's sequel directed by a Japanese spouse of M2",
        "questionTemplate": "Was [entity] 's [ROLE_SIMPLE] [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 ?x1 .\n?x1 P2 M1 .\n?x1 P3 M2 .\nFILTER ( ?x1 != M2 )\n}",
        "recursionDepth": 27,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P57 ?x1 .\n?x0 wdt:P155 wd:Q1756220 .\n?x1 wdt:P27 wd:Q17 .\n?x1 wdt:P26 wd:Q2828975 .\nFILTER ( ?x1 != wd:Q2828975 )\n}",
        "questionWithBrackets": "Was [Mystery of Mamo] 's sequel directed by a Japanese spouse of [Akemi \u014cta]"
    },
    {
        "questionIdx": 84039,
        "questionPatternModEntities": "Was M0 edited by M3 , executive produced by M1 , and executive produced by M2",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P1 M3\n}",
        "recursionDepth": 34,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q102438 wdt:P1040 wd:Q1969707 .\nwd:Q102438 wdt:P1431 wd:Q75079 .\nwd:Q102438 wdt:P1431 wd:Q1900360\n}",
        "questionWithBrackets": "Was [Harry Potter and the Philosopher's Stone] edited by [Richard Francis-Bruce] , executive produced by [Mark Radcliffe] , and executive produced by [Chris Columbus]"
    },
    {
        "questionIdx": 84047,
        "questionPatternModEntities": "Was M2 edited by M1 's male spouse",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M1 ) .\nM2 P2 ?x0\n}",
        "recursionDepth": 21,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P21 wd:Q6581097 .\n?x0 wdt:P26 wd:Q40162 .\nFILTER ( ?x0 != wd:Q40162 ) .\nwd:Q457886 wdt:P1040 ?x0\n}",
        "questionWithBrackets": "Was [Amblin'] edited by [Kate Capshaw] 's male spouse"
    },
    {
        "questionIdx": 84069,
        "questionPatternModEntities": "Was M0 edited by M5 , executive produced by M1 and M2 , produced by M4 , and executive produced by M3",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] and [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P0 M3 .\nM0 P1 M4 .\nM0 P2 M5\n}",
        "recursionDepth": 47,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q223887 wdt:P1040 wd:Q1082213 .\nwd:Q223887 wdt:P1431 wd:Q119798 .\nwd:Q223887 wdt:P1431 wd:Q6272883 .\nwd:Q223887 wdt:P1431 wd:Q7615194 .\nwd:Q223887 wdt:P162|wdt:P272 wd:Q808917\n}",
        "questionWithBrackets": "Was [Face/Off] edited by [Christian Wagner] , executive produced by [Steven Reuther] and [Michael Douglas] , produced by [Barrie M. Osborne] , and executive produced by [Jonathan D. Krane]"
    },
    {
        "questionIdx": 84123,
        "questionPatternModEntities": "Was M2 edited by , written by , and directed by a female spouse of M1",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M1 ) .\nM2 P2 ?x0 .\nM2 P3 ?x0 .\nM2 P4 ?x0\n}",
        "recursionDepth": 37,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P21 wd:Q6581072 .\n?x0 wdt:P26 wd:Q312258 .\nFILTER ( ?x0 != wd:Q312258 ) .\nwd:Q2298257 wdt:P57 ?x0 .\nwd:Q2298257 wdt:P1040 ?x0 .\nwd:Q2298257 wdt:P58 ?x0\n}",
        "questionWithBrackets": "Was [Vagabond] edited by , written by , and directed by a female spouse of [Jacques Demy]"
    },
    {
        "questionIdx": 84149,
        "questionPatternModEntities": "Was M1 's sequel distributed by and produced by M0",
        "questionTemplate": "Was [entity] 's [ROLE_SIMPLE] [VP_SIMPLE] by and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M0 .\n?x0 P2 M1\n}",
        "recursionDepth": 24,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P750 wd:Q9531 .\n?x0 wdt:P155 wd:Q18328139 .\n?x0 wdt:P162|wdt:P272 wd:Q9531\n}",
        "questionWithBrackets": "Was [Death in Heaven] 's sequel distributed by and produced by [BBC]"
    },
    {
        "questionIdx": 84155,
        "questionPatternModEntities": "Was M0 's prequel written by M1 's sibling",
        "questionTemplate": "Was [entity] 's [ROLE_SIMPLE] [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 ?x1 .\n?x1 P2 M1 .\nFILTER ( ?x1 != M1 )\n}",
        "recursionDepth": 20,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P156 wd:Q378913 .\n?x0 wdt:P58 ?x1 .\n?x1 wdt:P3373 wd:Q10295543 .\nFILTER ( ?x1 != wd:Q10295543 )\n}",
        "questionWithBrackets": "Was [The Lord of the Rings] 's prequel written by [Hilary Arthur Reuel Tolkien] 's sibling"
    },
    {
        "questionIdx": 84169,
        "questionPatternModEntities": "Was M0 's prequel directed by , written by , executive produced by , and produced by M1 's employee",
        "questionTemplate": "Was [entity] 's [ROLE_SIMPLE] [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x0 P3 ?x1 .\n?x0 P4 ?x1 .\n?x1 P5 M1\n}",
        "recursionDepth": 41,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P57 ?x1 .\n?x0 wdt:P1431 ?x1 .\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x0 wdt:P156 wd:Q19961444 .\n?x0 wdt:P58 ?x1 .\n?x1 wdt:P108 wd:Q740308\n}",
        "questionWithBrackets": "Was [Kung Fu Yoga] 's prequel directed by , written by , executive produced by , and produced by [UNICEF] 's employee"
    },
    {
        "questionIdx": 84170,
        "questionPatternModEntities": "Was M2 produced by M1 's Mexican parent",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nM2 P2 ?x0\n}",
        "recursionDepth": 21,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q734431 .\n?x0 wdt:P27 wd:Q96 .\nwd:Q213053 wdt:P162|wdt:P272 ?x0\n}",
        "questionWithBrackets": "Was [Superman] produced by [Ilya Salkind] 's Mexican parent"
    },
    {
        "questionIdx": 84179,
        "questionPatternModEntities": "Was M0 executive produced and written by M1 and M2",
        "questionTemplate": "Was [entity] [VP_SIMPLE] and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P1 M1 .\nM0 P1 M2\n}",
        "recursionDepth": 24,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q7152308 wdt:P1431 wd:Q2599 .\nwd:Q7152308 wdt:P1431 wd:Q228899 .\nwd:Q7152308 wdt:P58 wd:Q2599 .\nwd:Q7152308 wdt:P58 wd:Q228899\n}",
        "questionWithBrackets": "Was [Paul McCartney: Music & Animation] executive produced and written by [Paul McCartney] and [Linda McCartney]"
    },
    {
        "questionIdx": 84180,
        "questionPatternModEntities": "Was M0 's prequel executive produced by and directed by M1",
        "questionTemplate": "Was [entity] 's [ROLE_SIMPLE] [VP_SIMPLE] by and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P2 M1\n}",
        "recursionDepth": 25,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P57 wd:Q2071 .\n?x0 wdt:P1431 wd:Q2071 .\n?x0 wdt:P156 wd:Q1140578\n}",
        "questionWithBrackets": "Was [Twin Peaks: Fire Walk with Me] 's prequel executive produced by and directed by [David Lynch]"
    },
    {
        "questionIdx": 84184,
        "questionPatternModEntities": "Was M0 's British sibling influenced by M1",
        "questionTemplate": "Was [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P2 M2 .\nFILTER ( ?x0 != M0 )\n}",
        "recursionDepth": 21,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P737 wd:Q859 .\n?x0 wdt:P27 wd:Q145 .\n?x0 wdt:P3373 wd:Q3038321 .\nFILTER ( ?x0 != wd:Q3038321 )\n}",
        "questionWithBrackets": "Was [Warren Lewis] 's British sibling influenced by [Plato]"
    },
    {
        "questionIdx": 84209,
        "questionPatternModEntities": "Was M0 's sibling 's spouse 's spouse M1",
        "questionTemplate": "Was [entity] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x1 P1 M0 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x1 != M0 ) .\nFILTER ( M1 != ?x0 ) .\nM1 P0 ?x0\n}",
        "recursionDepth": 19,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P26 ?x1 .\n?x1 wdt:P3373 wd:Q3954 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x1 != wd:Q3954 ) .\nFILTER ( wd:Q125046 != ?x0 ) .\nwd:Q125046 wdt:P26 ?x0\n}",
        "questionWithBrackets": "Was [Neptune] 's sibling 's spouse 's spouse [Juno]"
    },
    {
        "questionIdx": 84211,
        "questionPatternModEntities": "Was M1 's British Chinese employee M0",
        "questionTemplate": "Was [entity] 's [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M2 .\nM0 P1 M3\n}",
        "recursionDepth": 21,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q4572500 wdt:P108 wd:Q238101 .\nwd:Q4572500 wdt:P27 wd:Q145 .\nwd:Q4572500 wdt:P27 wd:Q148\n}",
        "questionWithBrackets": "Was [University of Minnesota] 's British Chinese employee [Diane Wei Liang]"
    },
    {
        "questionIdx": 84217,
        "questionPatternModEntities": "Was M1 founded by M0 's spouse 's sibling and founded by M2",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE] and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x1 P1 M0 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x1 != M0 ) .\nM1 P2 ?x0 .\nM1 P2 M2\n}",
        "recursionDepth": 31,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P3373 ?x1 .\n?x1 wdt:P26 wd:Q5447176 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x1 != wd:Q5447176 ) .\nwd:Q1143497 wdt:P112 ?x0 .\nwd:Q1143497 wdt:P112 wd:Q817708\n}",
        "questionWithBrackets": "Was [Culper Ring] founded by [Fielding Lewis] 's spouse 's sibling and founded by [Benjamin Tallmadge]"
    },
    {
        "questionIdx": 84224,
        "questionPatternModEntities": "Was M0 's British employee employed by M1 , employed by M2 , and employed by M3",
        "questionTemplate": "Was [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P0 M3 .\n?x0 P1 M4\n}",
        "recursionDepth": 41,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P108 wd:Q863940 .\n?x0 wdt:P108 wd:Q35794 .\n?x0 wdt:P108 wd:Q2004561 .\n?x0 wdt:P108 wd:Q5429016 .\n?x0 wdt:P27 wd:Q145\n}",
        "questionWithBrackets": "Was [Gonville and Caius College] 's British employee employed by [University of Cambridge] , employed by [Perimeter Institute for Theoretical Physics] , and employed by [Faculty of Mathematics, University of Cambridge]"
    },
    {
        "questionIdx": 84434,
        "questionPatternModEntities": "Was M2 produced by and executive produced by a Italian spouse of M1 's parent",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by and [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 ?x1 .\n?x1 P2 M1 .\nFILTER ( ?x0 != ?x1 ) .\nM2 P3 ?x0 .\nM2 P4 ?x0\n}",
        "recursionDepth": 36,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P27 wd:Q38 .\n?x0 wdt:P26 ?x1 .\n?x1 wdt:P40|wdt:P355 wd:Q66091313 .\nFILTER ( ?x0 != ?x1 ) .\nwd:Q3061609 wdt:P1431 ?x0 .\nwd:Q3061609 wdt:P162|wdt:P272 ?x0\n}",
        "questionWithBrackets": "Was [The Family] produced by and executive produced by a Italian spouse of [Francesca Scorsese] 's parent"
    },
    {
        "questionIdx": 84495,
        "questionPatternModEntities": "Was M0 founded by M1 , M2 , M3 , and M4",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] , [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P0 M3 .\nM0 P0 M4\n}",
        "recursionDepth": 22,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q1065 wdt:P112 wd:Q13426199 .\nwd:Q1065 wdt:P112 wd:Q96 .\nwd:Q1065 wdt:P112 wd:Q35 .\nwd:Q1065 wdt:P112 wd:Q16\n}",
        "questionWithBrackets": "Was [United Nations] founded by m.0b90_r , m.0d060g , [Republic of China (1912\u20131949)] , and [Denmark]"
    },
    {
        "questionIdx": 84547,
        "questionPatternModEntities": "Was M1 M0 's parent 's employee",
        "questionTemplate": "Was [entity] [entity] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 ?x0\n}",
        "recursionDepth": 15,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q15070044 .\nwd:Q103941992 wdt:P108 ?x0\n}",
        "questionWithBrackets": "Was [Ben LaBolt] [Malia Obama] 's parent 's employee"
    },
    {
        "questionIdx": 84585,
        "questionPatternModEntities": "Was M1 executive produced by M0 's parent and directed by M2",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 ?x0 .\nM1 P2 M2\n}",
        "recursionDepth": 28,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q3125895 .\nwd:Q11068602 wdt:P57 wd:Q69843 .\nwd:Q11068602 wdt:P1431 ?x0\n}",
        "questionWithBrackets": "Was [The McGuerins from Brooklyn] executive produced by [Hal Roach, Jr.] 's parent and directed by [Kurt Neumann]"
    },
    {
        "questionIdx": 84622,
        "questionPatternModEntities": "Was M2 executive produced by , directed by , and produced by a female sibling of M0",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M0 ) .\nM2 P2 ?x0 .\nM2 P3 ?x0 .\nM2 P4 ?x0\n}",
        "recursionDepth": 38,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P21 wd:Q6581072 .\n?x0 wdt:P3373 wd:Q9696 .\nFILTER ( ?x0 != wd:Q9696 ) .\nwd:Q1420921 wdt:P57 ?x0 .\nwd:Q1420921 wdt:P1431 ?x0 .\nwd:Q1420921 wdt:P162|wdt:P272 ?x0\n}",
        "questionWithBrackets": "Was [Mary, Mother of Jesus] executive produced by , directed by , and produced by a female sibling of [John F. Kennedy]"
    },
    {
        "questionIdx": 84623,
        "questionPatternModEntities": "Was M1 executive produced by , edited by , produced by , directed by , and written by M0 's sibling",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nM1 P1 ?x0 .\nM1 P2 ?x0 .\nM1 P3 ?x0 .\nM1 P4 ?x0 .\nM1 P5 ?x0\n}",
        "recursionDepth": 43,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P3373 wd:Q28370409 .\nFILTER ( ?x0 != wd:Q28370409 ) .\nwd:Q28146810 wdt:P57 ?x0 .\nwd:Q28146810 wdt:P1040 ?x0 .\nwd:Q28146810 wdt:P1431 ?x0 .\nwd:Q28146810 wdt:P162|wdt:P272 ?x0 .\nwd:Q28146810 wdt:P58 ?x0\n}",
        "questionWithBrackets": "Was [Bullets, Fangs and Dinner at 8] executive produced by , edited by , produced by , directed by , and written by [Everton Rocca] 's sibling"
    },
    {
        "questionIdx": 84629,
        "questionPatternModEntities": "Was M1 produced , written , executive produced , directed , and edited by a sibling of M0",
        "questionTemplate": "Was [entity] [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nM1 P1 ?x0 .\nM1 P2 ?x0 .\nM1 P3 ?x0 .\nM1 P4 ?x0 .\nM1 P5 ?x0\n}",
        "recursionDepth": 41,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P3373 wd:Q28370409 .\nFILTER ( ?x0 != wd:Q28370409 ) .\nwd:Q28146810 wdt:P57 ?x0 .\nwd:Q28146810 wdt:P1040 ?x0 .\nwd:Q28146810 wdt:P1431 ?x0 .\nwd:Q28146810 wdt:P162|wdt:P272 ?x0 .\nwd:Q28146810 wdt:P58 ?x0\n}",
        "questionWithBrackets": "Was [Bullets, Fangs and Dinner at 8] produced , written , executive produced , directed , and edited by a sibling of [Everton Rocca]"
    },
    {
        "questionIdx": 84855,
        "questionPatternModEntities": "Was M1 's Canadian British employee M0",
        "questionTemplate": "Was [entity] 's [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M2 .\nM0 P1 M3\n}",
        "recursionDepth": 21,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q48979 wdt:P108 wd:Q1045828 .\nwd:Q48979 wdt:P27 wd:Q145 .\nwd:Q48979 wdt:P27 wd:Q16\n}",
        "questionWithBrackets": "Was [University of East Anglia] 's Canadian British employee [Richard Laurence Millington Synge]"
    },
    {
        "questionIdx": 84888,
        "questionPatternModEntities": "Was M0 a Japanese actor of M2 , M3 , and M4",
        "questionTemplate": "Was [entity] a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M2 .\nM0 P1 M3 .\nM0 P1 M4\n}",
        "recursionDepth": 25,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q49547 wdt:P453 wd:Q1945499 .\nwd:Q49547 wdt:P453 wd:Q65115227 .\nwd:Q49547 wdt:P453 wd:Q65115309 .\nwd:Q49547 wdt:P27 wd:Q17\n}",
        "questionWithBrackets": "Was [Fumiko Orikasa] a Japanese actor of [Chun-Li] , [Meia Gisborn] , and [Lotte Jansson]"
    },
    {
        "questionIdx": 84998,
        "questionPatternModEntities": "Was M0 's prequel directed , written , and edited by M1 , M2 , and M3",
        "questionTemplate": "Was [entity] 's [ROLE_SIMPLE] [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\n?x0 P1 M3 .\n?x0 P2 M1 .\n?x0 P2 M2 .\n?x0 P2 M3 .\n?x0 P3 M1 .\n?x0 P3 M2 .\n?x0 P3 M3\n}",
        "recursionDepth": 35,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P57 wd:Q1291210 .\n?x0 wdt:P57 wd:Q16198328 .\n?x0 wdt:P57 wd:Q4207234 .\n?x0 wdt:P1040 wd:Q1291210 .\n?x0 wdt:P1040 wd:Q16198328 .\n?x0 wdt:P1040 wd:Q4207234 .\n?x0 wdt:P156 wd:Q17183987 .\n?x0 wdt:P58 wd:Q1291210 .\n?x0 wdt:P58 wd:Q16198328 .\n?x0 wdt:P58 wd:Q4207234\n}",
        "questionWithBrackets": "Was [V/H/S: Viral] 's prequel directed , written , and edited by [Eduardo S\u00e1nchez] , [Jason Eisener] , and [Gareth Evans]"
    },
    {
        "questionIdx": 85037,
        "questionPatternModEntities": "Was M0 a Spanish spouse of M2",
        "questionTemplate": "Was [entity] a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nFILTER ( M0 != M2 ) .\nM0 P0 M1 .\nM0 P1 M2\n}",
        "recursionDepth": 18,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nFILTER ( wd:Q30510 != wd:Q318736 ) .\nwd:Q30510 wdt:P27 wd:Q29 .\nwd:Q30510 wdt:P26 wd:Q318736\n}",
        "questionWithBrackets": "Was [Mar\u00eda Dolores Pradera] a Spanish spouse of [Fernando Fern\u00e1n G\u00f3mez]"
    },
    {
        "questionIdx": 85146,
        "questionPatternModEntities": "Was M2 's male spouse M0",
        "questionTemplate": "Was [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nFILTER ( M0 != M2 ) .\nM0 P0 M1 .\nM0 P1 M2\n}",
        "recursionDepth": 16,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nFILTER ( wd:Q461038 != wd:Q989 ) .\nwd:Q461038 wdt:P21 wd:Q6581097 .\nwd:Q461038 wdt:P26 wd:Q989\n}",
        "questionWithBrackets": "Was [John Paul II] 's male spouse [Igor Moiseyev]"
    },
    {
        "questionIdx": 85203,
        "questionPatternModEntities": "Was M0 's German employee employed by M1 and employed by M2 and M3",
        "questionTemplate": "Was [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] [VP_SIMPLE] by [entity] and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P0 M3 .\n?x0 P1 M4\n}",
        "recursionDepth": 36,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P108 wd:Q708038 .\n?x0 wdt:P108 wd:Q465922 .\n?x0 wdt:P108 wd:Q55044 .\n?x0 wdt:P108 wd:Q152087 .\n?x0 wdt:P27 wd:Q183\n}",
        "questionWithBrackets": "Was [Kaiser Wilhelm Society] 's German employee employed by [Humboldt University of Berlin] and employed by [Gda\u0144sk University of Technology] and [Ludwig Maximilian University of Munich]"
    },
    {
        "questionIdx": 85300,
        "questionPatternModEntities": "Was M0 's actor 's actor M1",
        "questionTemplate": "Was [entity] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P0 ?x0\n}",
        "recursionDepth": 15,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P453 wd:Q105565656 .\nwd:Q105565856 wdt:P453 ?x0\n}",
        "questionWithBrackets": "Was [No label defined] 's actor 's actor [No label defined]"
    },
    {
        "questionIdx": 85309,
        "questionPatternModEntities": "Was M1 's spouse 's spouse M0 's child",
        "questionTemplate": "Was [entity] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE] [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 ?x1 .\n?x1 P1 M1 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x1 != M1 )\n}",
        "recursionDepth": 19,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P749 wd:Q1089760 .\n?x0 wdt:P26 ?x1 .\n?x1 wdt:P26 wd:Q1702147 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x1 != wd:Q1702147 )\n}",
        "questionWithBrackets": "Was [Samuel Marsden] 's spouse 's spouse [Church Mission Society] 's child"
    },
    {
        "questionIdx": 85313,
        "questionPatternModEntities": "Was M1 a male spouse of M0 's spouse",
        "questionTemplate": "Was [entity] a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( M1 != ?x0 ) .\nM1 P0 ?x0 .\nM1 P1 M2\n}",
        "recursionDepth": 22,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P26 wd:Q2628 .\nFILTER ( ?x0 != wd:Q2628 ) .\nFILTER ( wd:Q110966 != ?x0 ) .\nwd:Q110966 wdt:P21 wd:Q6581097 .\nwd:Q110966 wdt:P26 ?x0\n}",
        "questionWithBrackets": "Was [Erich Wendt] a male spouse of [Walter Ulbricht] 's spouse"
    },
    {
        "questionIdx": 85321,
        "questionPatternModEntities": "Was M0 a spouse , sibling , and parent of M1",
        "questionTemplate": "Was [entity] a [ROLE_SIMPLE] , [ROLE_SIMPLE] , and [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nFILTER ( M0 != M1 ) .\nFILTER ( M0 != M1 ) .\nM0 P0 M1 .\nM0 P1 M1 .\nM0 P2 M1\n}",
        "recursionDepth": 22,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nFILTER ( wd:Q1523 != wd:Q443473 ) .\nFILTER ( wd:Q1523 != wd:Q443473 ) .\nwd:Q1523 wdt:P40|wdt:P355 wd:Q443473 .\nwd:Q1523 wdt:P3373 wd:Q443473 .\nwd:Q1523 wdt:P26 wd:Q443473\n}",
        "questionWithBrackets": "Was [Ramesses II] a spouse , sibling , and parent of [Henutmire]"
    },
    {
        "questionIdx": 85322,
        "questionPatternModEntities": "Was M0 's parent , sibling , and spouse M1 's sibling",
        "questionTemplate": "Was [entity] 's [ROLE_SIMPLE] , [ROLE_SIMPLE] , and [ROLE_SIMPLE] [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P1 M0 .\n?x0 P2 M0 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x0 != M1 )\n}",
        "recursionDepth": 24,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q443473 .\n?x0 wdt:P3373 wd:Q443473 .\n?x0 wdt:P3373 wd:Q273990 .\n?x0 wdt:P26 wd:Q443473 .\nFILTER ( ?x0 != wd:Q443473 ) .\nFILTER ( ?x0 != wd:Q443473 ) .\nFILTER ( ?x0 != wd:Q273990 )\n}",
        "questionWithBrackets": "Was [Henutmire] 's parent , sibling , and spouse [Princess Tia] 's sibling"
    },
    {
        "questionIdx": 85324,
        "questionPatternModEntities": "Was M1 M0 's spouse 's parent and sibling",
        "questionTemplate": "Was [entity] [entity] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE] and [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( M1 != ?x0 ) .\nM1 P1 ?x0 .\nM1 P2 ?x0\n}",
        "recursionDepth": 20,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P26 wd:Q632595 .\nFILTER ( ?x0 != wd:Q632595 ) .\nFILTER ( wd:Q40020 != ?x0 ) .\nwd:Q40020 wdt:P40|wdt:P355 ?x0 .\nwd:Q40020 wdt:P3373 ?x0\n}",
        "questionWithBrackets": "Was [Cleopatra VI of Egypt] [Archelaus] 's spouse 's parent and sibling"
    },
    {
        "questionIdx": 85326,
        "questionPatternModEntities": "Was M0 's sibling 's parent and sibling M1",
        "questionTemplate": "Was [entity] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE] and [ROLE_SIMPLE] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( M1 != ?x0 ) .\nM1 P0 ?x0 .\nM1 P1 ?x0\n}",
        "recursionDepth": 20,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P3373 wd:Q635 .\nFILTER ( ?x0 != wd:Q635 ) .\nFILTER ( wd:Q40020 != ?x0 ) .\nwd:Q40020 wdt:P40|wdt:P355 ?x0 .\nwd:Q40020 wdt:P3373 ?x0\n}",
        "questionWithBrackets": "Was [Cleopatra] 's sibling 's parent and sibling [Cleopatra VI of Egypt]"
    },
    {
        "questionIdx": 85327,
        "questionPatternModEntities": "Was M0 's sibling 's sibling and spouse M1",
        "questionTemplate": "Was [entity] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE] and [ROLE_SIMPLE] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( M1 != ?x0 ) .\nFILTER ( M1 != ?x0 ) .\nM1 P0 ?x0 .\nM1 P1 ?x0\n}",
        "recursionDepth": 20,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P3373 wd:Q3345 .\nFILTER ( ?x0 != wd:Q3345 ) .\nFILTER ( wd:Q3340 != ?x0 ) .\nFILTER ( wd:Q3340 != ?x0 ) .\nwd:Q3340 wdt:P3373 ?x0 .\nwd:Q3340 wdt:P26 ?x0\n}",
        "questionWithBrackets": "Was [Ptolemy X Alexander I] 's sibling 's sibling and spouse [Ptolemy IX Lathyros]"
    },
    {
        "questionIdx": 85332,
        "questionPatternModEntities": "Was M0 M4 's female German Swedish spouse",
        "questionTemplate": "Was [entity] [entity] 's [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\nFILTER ( M0 != M4 ) .\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P1 M3 .\nM0 P2 M4\n}",
        "recursionDepth": 26,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nFILTER ( wd:Q57626 != wd:Q347374 ) .\nwd:Q57626 wdt:P21 wd:Q6581072 .\nwd:Q57626 wdt:P27 wd:Q183 .\nwd:Q57626 wdt:P27 wd:Q34 .\nwd:Q57626 wdt:P26 wd:Q347374\n}",
        "questionWithBrackets": "Was [Princess Sibylla of Saxe-Coburg and Gotha] [Prince Gustaf Adolf, Duke of V\u00e4sterbotten] 's female German Swedish spouse"
    },
    {
        "questionIdx": 85335,
        "questionPatternModEntities": "Was M3 produced by a employee of M0 , M1 , and M2 and directed by M4 , M5 , and M6",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity] , [entity] , and [entity] and [VP_SIMPLE] by [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\nM3 P1 ?x0 .\nM3 P2 M4 .\nM3 P2 M5 .\nM3 P2 M6\n}",
        "recursionDepth": 43,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P108 wd:Q372989 .\n?x0 wdt:P108 wd:Q13371 .\n?x0 wdt:P108 wd:Q7079289 .\nwd:Q6545015 wdt:P57 wd:Q186042 .\nwd:Q6545015 wdt:P57 wd:Q6140091 .\nwd:Q6545015 wdt:P57 wd:Q317842 .\nwd:Q6545015 wdt:P162|wdt:P272 ?x0\n}",
        "questionWithBrackets": "Was [Life Under Mike] produced by a employee of [Fortune] , [Harvard University] , and [Office of Price Administration] and directed by [John Kenneth Galbraith] , [Jack Layton] , and [James Motluk]"
    },
    {
        "questionIdx": 85346,
        "questionPatternModEntities": "Was M2 edited by a employee of M0 and M1",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\nM2 P1 ?x0\n}",
        "recursionDepth": 22,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P108 wd:Q141336 .\n?x0 wdt:P108 wd:Q4129798 .\nwd:Q281988 wdt:P1040 ?x0\n}",
        "questionWithBrackets": "Was [The Sacrifice] edited by a employee of [Mosfilm] and [Top Courses for Scriptwriters and Film Directors]"
    },
    {
        "questionIdx": 85365,
        "questionPatternModEntities": "Was M3 written by M2 's British Canadian spouse",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P1 M2 .\nFILTER ( ?x0 != M2 ) .\nM3 P2 ?x0\n}",
        "recursionDepth": 26,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P27 wd:Q145 .\n?x0 wdt:P27 wd:Q16 .\n?x0 wdt:P26 wd:Q144904 .\nFILTER ( ?x0 != wd:Q144904 ) .\nwd:Q12133944 wdt:P58 ?x0\n}",
        "questionWithBrackets": "Was [A Winter Tan] written by [Zal Yanovsky] 's British Canadian spouse"
    },
    {
        "questionIdx": 85558,
        "questionPatternModEntities": "Was M2 produced by , directed by , and written by M1 's employee 's male sibling",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x0 P1 M0 .\n?x1 P2 M1 .\nFILTER ( ?x0 != ?x1 ) .\nM2 P3 ?x0 .\nM2 P4 ?x0 .\nM2 P5 ?x0\n}",
        "recursionDepth": 39,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P21 wd:Q6581097 .\n?x0 wdt:P3373 ?x1 .\n?x1 wdt:P108 wd:Q457281 .\nFILTER ( ?x0 != ?x1 ) .\nwd:Q208048 wdt:P57 ?x0 .\nwd:Q208048 wdt:P162|wdt:P272 ?x0 .\nwd:Q208048 wdt:P58 ?x0\n}",
        "questionWithBrackets": "Was [Band of Brothers] produced by , directed by , and written by [University of Illinois at Urbana\u2013Champaign] 's employee 's male sibling"
    },
    {
        "questionIdx": 85572,
        "questionPatternModEntities": "Was M0 's employee a British employee of M1 , M2 , M3 , M4 , and M5",
        "questionTemplate": "Was [entity] 's [ROLE_SIMPLE] a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] , [entity] , [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P0 M3 .\n?x0 P0 M4 .\n?x0 P0 M5 .\n?x0 P1 M6\n}",
        "recursionDepth": 35,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P108 wd:Q34433 .\n?x0 wdt:P108 wd:Q195668 .\n?x0 wdt:P108 wd:Q216273 .\n?x0 wdt:P108 wd:Q457281 .\n?x0 wdt:P108 wd:Q1202039 .\n?x0 wdt:P108 wd:Q230899 .\n?x0 wdt:P27 wd:Q145\n}",
        "questionWithBrackets": "Was [Royal Holloway, University of London] 's employee a British employee of [University of St Andrews] , [University of Manchester] , [Queen Mary University of London] , [University of Illinois at Urbana\u2013Champaign] , and [University of Oxford]"
    },
    {
        "questionIdx": 85639,
        "questionPatternModEntities": "Was M1 directed by M3 , directed by M4 , written by M2 , and written by a parent of M0",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 ?x0 .\nM1 P1 M2 .\nM1 P2 M3 .\nM1 P2 M4\n}",
        "recursionDepth": 47,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q287395 .\nwd:Q426432 wdt:P57 wd:Q2055198 .\nwd:Q426432 wdt:P57 wd:Q129046 .\nwd:Q426432 wdt:P58 ?x0 .\nwd:Q426432 wdt:P58 wd:Q126941\n}",
        "questionWithBrackets": "Was [Walker, Texas Ranger] directed by [Alexander Singer] , directed by [Mike Vejar] , written by [J. Michael Straczynski] , and written by a parent of [Mike Norris]"
    },
    {
        "questionIdx": 85674,
        "questionPatternModEntities": "Was M1 directed by M4 and M5 , edited by M0 's parent , and edited by M2 and M3",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] and [entity] , [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] , and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 ?x0 .\nM1 P1 M2 .\nM1 P1 M3 .\nM1 P2 M4 .\nM1 P2 M5\n}",
        "recursionDepth": 44,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q28124056 .\nwd:Q1137372 wdt:P57 wd:Q3772 .\nwd:Q1137372 wdt:P57 wd:Q549956 .\nwd:Q1137372 wdt:P1040 ?x0 .\nwd:Q1137372 wdt:P1040 wd:Q5359064 .\nwd:Q1137372 wdt:P1040 wd:Q273379\n}",
        "questionWithBrackets": "Was [Four Rooms] directed by [Alexandre Rockwell] and [Quentin Tarantino] , edited by [Rhiannon Rodriguez] 's parent , and edited by [Elena Maganini] and [Sally Menke]"
    },
    {
        "questionIdx": 85737,
        "questionPatternModEntities": "Was M2 edited by M3 , directed by M4 , M5 , and M6 , and directed by M1 's female spouse",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , [entity] , and [entity] , and [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M1 ) .\nM2 P2 M3 .\nM2 P3 ?x0 .\nM2 P3 M4 .\nM2 P3 M5 .\nM2 P3 M6\n}",
        "recursionDepth": 48,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P21 wd:Q6581072 .\n?x0 wdt:P26 wd:Q723502 .\nFILTER ( ?x0 != wd:Q723502 ) .\nwd:Q603857 wdt:P57 ?x0 .\nwd:Q603857 wdt:P57 wd:Q55238 .\nwd:Q603857 wdt:P57 wd:Q55215 .\nwd:Q603857 wdt:P57 wd:Q313497 .\nwd:Q603857 wdt:P1040 wd:Q55211\n}",
        "questionWithBrackets": "Was [11'09\"01 September 11] edited by [Mohsen Makhmalbaf] , directed by [Ken Loach] , [Alejandro Gonz\u00e1lez I\u00f1\u00e1rritu] , and [Danis Tanovi\u0107] , and directed by [Mahmood Mamdani] 's female spouse"
    },
    {
        "questionIdx": 85739,
        "questionPatternModEntities": "Was M0 edited by M3 , produced by M2 , directed by M4 and M5 , and written by M1",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] and [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M2 .\nM0 P2 M3 .\nM0 P3 M4 .\nM0 P3 M5\n}",
        "recursionDepth": 45,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q1137372 wdt:P57 wd:Q3772 .\nwd:Q1137372 wdt:P57 wd:Q549956 .\nwd:Q1137372 wdt:P1040 wd:Q47284 .\nwd:Q1137372 wdt:P162|wdt:P272 wd:Q514913 .\nwd:Q1137372 wdt:P58 wd:Q25161\n}",
        "questionWithBrackets": "Was [Four Rooms] edited by [Robert Rodriguez] , produced by [Lawrence Bender] , directed by [Alexandre Rockwell] and [Quentin Tarantino] , and written by [Roald Dahl]"
    },
    {
        "questionIdx": 85746,
        "questionPatternModEntities": "Was M0 edited by M4 , edited by M5 , written by M1 and M2 , and produced by M3",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] and [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P1 M3 .\nM0 P2 M4 .\nM0 P2 M5\n}",
        "recursionDepth": 45,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q152350 wdt:P1040 wd:Q8003 .\nwd:Q152350 wdt:P1040 wd:Q561459 .\nwd:Q152350 wdt:P162|wdt:P272 wd:Q4088236 .\nwd:Q152350 wdt:P58 wd:Q7495246 .\nwd:Q152350 wdt:P58 wd:Q722164\n}",
        "questionWithBrackets": "Was [Battleship Potemkin] edited by [Grigori Aleksandrov] , edited by [Sergei Eisenstein] , written by [Nina Agadzhanova-Shutko] and [Sergei Tretyakov] , and produced by [Yakov Bliokh]"
    },
    {
        "questionIdx": 85760,
        "questionPatternModEntities": "Was M0 edited by M2 , directed by M4 and M5 , produced by M1 , and edited by M3",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] and [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M2 .\nM0 P1 M3 .\nM0 P2 M4 .\nM0 P2 M5\n}",
        "recursionDepth": 45,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q1137372 wdt:P57 wd:Q549956 .\nwd:Q1137372 wdt:P57 wd:Q3772 .\nwd:Q1137372 wdt:P1040 wd:Q47284 .\nwd:Q1137372 wdt:P1040 wd:Q273379 .\nwd:Q1137372 wdt:P162|wdt:P272 wd:Q514913\n}",
        "questionWithBrackets": "Was [Four Rooms] edited by [Robert Rodriguez] , directed by [Alexandre Rockwell] and [Quentin Tarantino] , produced by [Lawrence Bender] , and edited by [Sally Menke]"
    },
    {
        "questionIdx": 85778,
        "questionPatternModEntities": "Was M2 edited by a male spouse of M1 and directed by M3 , M4 , and M5",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] and [VP_SIMPLE] by [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M1 ) .\nM2 P2 ?x0 .\nM2 P3 M3 .\nM2 P3 M4 .\nM2 P3 M5\n}",
        "recursionDepth": 41,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P21 wd:Q6581097 .\n?x0 wdt:P26 wd:Q3296384 .\nFILTER ( ?x0 != wd:Q3296384 ) .\nwd:Q603857 wdt:P57 wd:Q55215 .\nwd:Q603857 wdt:P57 wd:Q312611 .\nwd:Q603857 wdt:P57 wd:Q44221 .\nwd:Q603857 wdt:P1040 ?x0\n}",
        "questionWithBrackets": "Was [11'09\"01 September 11] edited by a male spouse of [Marzieh Meshkini] and directed by [Youssef Chahine] , [Sean Penn] , and [Alejandro Gonz\u00e1lez I\u00f1\u00e1rritu]"
    },
    {
        "questionIdx": 85810,
        "questionPatternModEntities": "Was M0 produced and written by M1 , M2 , M3 , and M4",
        "questionTemplate": "Was [entity] [VP_SIMPLE] and [VP_SIMPLE] by [entity] , [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P0 M3 .\nM0 P0 M4 .\nM0 P1 M1 .\nM0 P1 M2 .\nM0 P1 M3 .\nM0 P1 M4\n}",
        "recursionDepth": 29,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q643220 wdt:P162|wdt:P272 wd:Q16390 .\nwd:Q643220 wdt:P162|wdt:P272 wd:Q295984 .\nwd:Q643220 wdt:P162|wdt:P272 wd:Q4420093 .\nwd:Q643220 wdt:P162|wdt:P272 wd:Q93188 .\nwd:Q643220 wdt:P58 wd:Q16390 .\nwd:Q643220 wdt:P58 wd:Q295984 .\nwd:Q643220 wdt:P58 wd:Q4420093 .\nwd:Q643220 wdt:P58 wd:Q93188\n}",
        "questionWithBrackets": "Was [Virginia City] produced and written by [Randolph Scott] , [Humphrey Bogart] , [Errol Flynn] , and [Robert Buckner]"
    },
    {
        "questionIdx": 85811,
        "questionPatternModEntities": "Was M0 produced by M1 , directed by M4 and M5 , edited by M2 , and edited by M3",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] and [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M2 .\nM0 P1 M3 .\nM0 P2 M4 .\nM0 P2 M5\n}",
        "recursionDepth": 45,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q1137372 wdt:P57 wd:Q549956 .\nwd:Q1137372 wdt:P57 wd:Q3772 .\nwd:Q1137372 wdt:P1040 wd:Q47284 .\nwd:Q1137372 wdt:P1040 wd:Q273379 .\nwd:Q1137372 wdt:P162|wdt:P272 wd:Q514913\n}",
        "questionWithBrackets": "Was [Four Rooms] produced by [Lawrence Bender] , directed by [Quentin Tarantino] and [Alexandre Rockwell] , edited by [Sally Menke] , and edited by [Robert Rodriguez]"
    },
    {
        "questionIdx": 85812,
        "questionPatternModEntities": "Was M0 produced by M2 , edited by M3 , edited by M4 and M5 , and written by M1",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] and [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M2 .\nM0 P2 M3 .\nM0 P2 M4 .\nM0 P2 M5\n}",
        "recursionDepth": 45,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q14566553 wdt:P1040 wd:Q31294 .\nwd:Q14566553 wdt:P1040 wd:Q1181629 .\nwd:Q14566553 wdt:P1040 wd:Q18354431 .\nwd:Q14566553 wdt:P162|wdt:P272 wd:Q649649 .\nwd:Q14566553 wdt:P58 wd:Q6386180\n}",
        "questionWithBrackets": "Was [Fifty Shades of Grey] produced by [Focus Features] , edited by [Debra Neil-Fisher] , edited by [Anne V. Coates] and [Lisa Gunning] , and written by [Kelly Marcel]"
    },
    {
        "questionIdx": 85813,
        "questionPatternModEntities": "Was M0 produced by M2 , executive produced by M1 , directed by M5 , and edited by M3 and M4",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M2 .\nM0 P2 M3 .\nM0 P2 M4 .\nM0 P3 M5\n}",
        "recursionDepth": 46,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q2031960 wdt:P57 wd:Q56014 .\nwd:Q2031960 wdt:P1040 wd:Q656020 .\nwd:Q2031960 wdt:P1040 wd:Q16010394 .\nwd:Q2031960 wdt:P1431 wd:Q72291 .\nwd:Q2031960 wdt:P162|wdt:P272 wd:Q347473\n}",
        "questionWithBrackets": "Was [What Price Hollywood?] produced by [Pandro S. Berman] , executive produced by [David O. Selznick] , directed by [George Cukor] , and edited by [Del Andrews] and [Jack Kitchin]"
    },
    {
        "questionIdx": 85814,
        "questionPatternModEntities": "Was M0 produced by M2 , written by M1 , edited by M3 , and edited by M4 and M5",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M2 .\nM0 P2 M3 .\nM0 P2 M4 .\nM0 P2 M5\n}",
        "recursionDepth": 45,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q181795 wdt:P1040 wd:Q38222 .\nwd:Q181795 wdt:P1040 wd:Q429973 .\nwd:Q181795 wdt:P1040 wd:Q463119 .\nwd:Q181795 wdt:P162|wdt:P272 wd:Q1494912 .\nwd:Q181795 wdt:P58 wd:Q240872\n}",
        "questionWithBrackets": "Was [Star Wars: Episode V \u2013 The Empire Strikes Back] produced by [Gary Kurtz] , written by [Lawrence Kasdan] , edited by [Paul Hirsch] , and edited by [George Lucas] and [Marcia Lucas]"
    },
    {
        "questionIdx": 85815,
        "questionPatternModEntities": "Was M0 produced by M5 , written by M2 , executive produced by M1 , and written by M3 and M4",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M2 .\nM0 P1 M3 .\nM0 P1 M4 .\nM0 P2 M5\n}",
        "recursionDepth": 46,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q1779102 wdt:P1431 wd:Q72291 .\nwd:Q1779102 wdt:P162|wdt:P272 wd:Q53004 .\nwd:Q1779102 wdt:P58 wd:Q3765695 .\nwd:Q1779102 wdt:P58 wd:Q134180 .\nwd:Q1779102 wdt:P58 wd:Q469164\n}",
        "questionWithBrackets": "Was [Terminal Station] produced by [Vittorio De Sica] , written by [Truman Capote] , executive produced by [David O. Selznick] , and written by [Cesare Zavattini] and [Giorgio Prosperi]"
    },
    {
        "questionIdx": 85817,
        "questionPatternModEntities": "Was M0 produced by M1 , edited by M2 , and edited by M3",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M2 .\nM0 P1 M3\n}",
        "recursionDepth": 32,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q1166360 wdt:P1040 wd:Q3137 .\nwd:Q1166360 wdt:P1040 wd:Q360002 .\nwd:Q1166360 wdt:P162|wdt:P272 wd:Q1707323\n}",
        "questionWithBrackets": "Was [Darling] produced by [Joseph Janni] , edited by [Jim Clark] , and edited by [Jim Clark]"
    },
    {
        "questionIdx": 85820,
        "questionPatternModEntities": "Was M0 produced by M2 , directed by M3 , directed by M4 and M5 , and executive produced by M1",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] and [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M2 .\nM0 P2 M3 .\nM0 P2 M4 .\nM0 P2 M5\n}",
        "recursionDepth": 46,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q1315247 wdt:P57 wd:Q3195280 .\nwd:Q1315247 wdt:P57 wd:Q28861428 .\nwd:Q1315247 wdt:P57 wd:Q3430408 .\nwd:Q1315247 wdt:P1431 wd:Q8877 .\nwd:Q1315247 wdt:P162|wdt:P272 wd:Q13416804\n}",
        "questionWithBrackets": "Was [Tiny Toon Adventures: How I Spent My Vacation] produced by [Warner Bros. Animation] , directed by [Ken Boyer] , directed by [Kent Butterworth] and [Rich Arons] , and executive produced by [Steven Spielberg]"
    },
    {
        "questionIdx": 85821,
        "questionPatternModEntities": "Was M0 produced by M3 , executive produced by M1 and M2 , directed by M5 , and edited by M4",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] and [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P1 M3 .\nM0 P2 M4 .\nM0 P3 M5\n}",
        "recursionDepth": 46,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q56275326 wdt:P57 wd:Q459933 .\nwd:Q56275326 wdt:P1040 wd:Q11737407 .\nwd:Q56275326 wdt:P1431 wd:Q36159 .\nwd:Q56275326 wdt:P1431 wd:Q105298512 .\nwd:Q56275326 wdt:P162|wdt:P272 wd:Q1156642\n}",
        "questionWithBrackets": "Was [Self Made: Inspired by the Life of Madam C. J. Walker] produced by [Warner Bros. Television Studios] , executive produced by [Elle Johnson] and [LeBron James] , directed by [Kasi Lemmons] , and edited by [Kathryn Himoff]"
    },
    {
        "questionIdx": 85823,
        "questionPatternModEntities": "Was M0 produced by M2 , edited by M3 , written by M1 , and edited by M4",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M2 .\nM0 P2 M3 .\nM0 P2 M4\n}",
        "recursionDepth": 41,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q559907 wdt:P1040 wd:Q3137 .\nwd:Q559907 wdt:P1040 wd:Q360002 .\nwd:Q559907 wdt:P162|wdt:P272 wd:Q36949 .\nwd:Q559907 wdt:P58 wd:Q320556\n}",
        "questionWithBrackets": "Was [Marvin's Room] produced by [Robert De Niro] , edited by [Jim Clark] , written by [John Guare] , and edited by [Jim Clark]"
    },
    {
        "questionIdx": 85824,
        "questionPatternModEntities": "Was M0 produced by M4 , written by M1 , written by M2 and M3 , and edited by M5",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] and [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P0 M3 .\nM0 P1 M4 .\nM0 P2 M5\n}",
        "recursionDepth": 45,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q847709 wdt:P1040 wd:Q8006 .\nwd:Q847709 wdt:P162|wdt:P272 wd:Q875920 .\nwd:Q847709 wdt:P58 wd:Q3135269 .\nwd:Q847709 wdt:P58 wd:Q11619626 .\nwd:Q847709 wdt:P58 wd:Q26776561\n}",
        "questionWithBrackets": "Was [Red Beard] produced by [T\u014dh\u014d] , written by [Hideo Oguni] , written by [Ry\u016bz\u014d Kikushima] and [Masato Ide] , and edited by [Akira Kurosawa]"
    },
    {
        "questionIdx": 85828,
        "questionPatternModEntities": "Was M0 produced by M1 , edited by M2 , edited by M3 and M4 , and directed by M5",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] and [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M2 .\nM0 P1 M3 .\nM0 P1 M4 .\nM0 P2 M5\n}",
        "recursionDepth": 45,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q768966 wdt:P57 wd:Q55411 .\nwd:Q768966 wdt:P1040 wd:Q55433 .\nwd:Q768966 wdt:P1040 wd:Q91260 .\nwd:Q768966 wdt:P1040 wd:Q23728765 .\nwd:Q768966 wdt:P162|wdt:P272 wd:Q3502097\n}",
        "questionWithBrackets": "Was [Beyond the Clouds] produced by [St\u00e9phane Tchalgadjieff] , edited by [Michelangelo Antonioni] , edited by [Peter Przygodda] and [Claudio Di Mauro] , and directed by [Wim Wenders]"
    },
    {
        "questionIdx": 85850,
        "questionPatternModEntities": "Was M0 written and produced by M1 , M2 , M3 , and M4",
        "questionTemplate": "Was [entity] [VP_SIMPLE] and [VP_SIMPLE] by [entity] , [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P0 M3 .\nM0 P0 M4 .\nM0 P1 M1 .\nM0 P1 M2 .\nM0 P1 M3 .\nM0 P1 M4\n}",
        "recursionDepth": 29,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q24953 wdt:P162|wdt:P272 wd:Q25078 .\nwd:Q24953 wdt:P162|wdt:P272 wd:Q166159 .\nwd:Q24953 wdt:P162|wdt:P272 wd:Q24962 .\nwd:Q24953 wdt:P162|wdt:P272 wd:Q210741 .\nwd:Q24953 wdt:P58 wd:Q25078 .\nwd:Q24953 wdt:P58 wd:Q166159 .\nwd:Q24953 wdt:P58 wd:Q24962 .\nwd:Q24953 wdt:P58 wd:Q210741\n}",
        "questionWithBrackets": "Was [Monty Python\u2019s Life of Brian] written and produced by [Eric Idle] , [Graham Chapman] , [Terry Jones] , and [Terry Gilliam]"
    },
    {
        "questionIdx": 85852,
        "questionPatternModEntities": "Was M0 written by M1 and M2 , edited by M4 , directed by M5 , and produced by M3",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] and [entity] , [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P1 M3 .\nM0 P2 M4 .\nM0 P3 M5\n}",
        "recursionDepth": 45,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q48674494 wdt:P57 wd:Q167522 .\nwd:Q48674494 wdt:P1040 wd:Q8293 .\nwd:Q48674494 wdt:P162|wdt:P272 wd:Q8007810 .\nwd:Q48674494 wdt:P58 wd:Q27915692 .\nwd:Q48674494 wdt:P58 wd:Q27915686\n}",
        "questionWithBrackets": "Was [Adrift] written by [Jordan Kandell] and [Aaron Kandell] , edited by [John Gilbert] , directed by [Baltasar Korm\u00e1kur] , and produced by [Huayi Brothers]"
    },
    {
        "questionIdx": 85854,
        "questionPatternModEntities": "Was M1 written by M3 and M4 , edited by M5 , edited by M0 's parent , and executive produced by M2",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] and [entity] , [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 M2 .\nM1 P2 M3 .\nM1 P2 M4 .\nM1 P3 ?x0 .\nM1 P3 M5\n}",
        "recursionDepth": 50,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q573338 .\nwd:Q228186 wdt:P1040 ?x0 .\nwd:Q228186 wdt:P1040 wd:Q31294 .\nwd:Q228186 wdt:P1431 wd:Q55260 .\nwd:Q228186 wdt:P58 wd:Q26062 .\nwd:Q228186 wdt:P58 wd:Q25871\n}",
        "questionWithBrackets": "Was [Lawrence of Arabia] written by [Michael Wilson] and [Robert Bolt] , edited by [Anne V. Coates] , edited by [Anthony Hickox] 's parent , and executive produced by [David Lean]"
    },
    {
        "questionIdx": 85860,
        "questionPatternModEntities": "Was M1 written by M2 , edited by M4 and M5 , written by M3 , and edited by M0 's spouse",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] and [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nM1 P1 M2 .\nM1 P1 M3 .\nM1 P2 ?x0 .\nM1 P2 M4 .\nM1 P2 M5\n}",
        "recursionDepth": 49,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P26 wd:Q22247817 .\nFILTER ( ?x0 != wd:Q22247817 ) .\nwd:Q152350 wdt:P1040 ?x0 .\nwd:Q152350 wdt:P1040 wd:Q8003 .\nwd:Q152350 wdt:P1040 wd:Q561459 .\nwd:Q152350 wdt:P58 wd:Q722164 .\nwd:Q152350 wdt:P58 wd:Q460329\n}",
        "questionWithBrackets": "Was [Battleship Potemkin] written by [Nikolai Aseev] , edited by [Sergei Eisenstein] and [Grigori Aleksandrov] , written by [Sergei Tretyakov] , and edited by [Pera Atasheva] 's spouse"
    },
    {
        "questionIdx": 85866,
        "questionPatternModEntities": "Was M0 written by M1 , written by M2 , produced by M5 , and written by M3 and M4",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P0 M3 .\nM0 P0 M4 .\nM0 P1 M5\n}",
        "recursionDepth": 45,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q80379 wdt:P162|wdt:P272 wd:Q126399 .\nwd:Q80379 wdt:P58 wd:Q4465 .\nwd:Q80379 wdt:P58 wd:Q116854 .\nwd:Q80379 wdt:P58 wd:Q219124 .\nwd:Q80379 wdt:P58 wd:Q892\n}",
        "questionWithBrackets": "Was [The Hobbit: An Unexpected Journey] written by [Peter Jackson] , written by [Philippa Boyens] , produced by [Warner Bros.] , and written by [Guillermo del Toro] and [J.\u00a0R.\u00a0R. Tolkien]"
    },
    {
        "questionIdx": 85883,
        "questionPatternModEntities": "Was M1 written by M2 , written by M0 's parent , edited by M4 and M5 , and written by M3",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] , [VP_SIMPLE] by [entity] and [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 ?x0 .\nM1 P1 M2 .\nM1 P1 M3 .\nM1 P2 M4 .\nM1 P2 M5\n}",
        "recursionDepth": 49,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q28032516 .\nwd:Q1137372 wdt:P1040 wd:Q47284 .\nwd:Q1137372 wdt:P1040 wd:Q273379 .\nwd:Q1137372 wdt:P58 ?x0 .\nwd:Q1137372 wdt:P58 wd:Q2838329 .\nwd:Q1137372 wdt:P58 wd:Q549956\n}",
        "questionWithBrackets": "Was [Four Rooms] written by [Alexandre Rockwell] , written by [Racer Rodriguez] 's parent , edited by [Sally Menke] and [Robert Rodriguez] , and written by [Allison Anders]"
    },
    {
        "questionIdx": 85886,
        "questionPatternModEntities": "Was M0 written by M1 , edited by M3 , produced by M2 , and edited by M4 and M5",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M2 .\nM0 P2 M3 .\nM0 P2 M4 .\nM0 P2 M5\n}",
        "recursionDepth": 45,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q181795 wdt:P1040 wd:Q38222 .\nwd:Q181795 wdt:P1040 wd:Q429973 .\nwd:Q181795 wdt:P1040 wd:Q463119 .\nwd:Q181795 wdt:P162|wdt:P272 wd:Q242446 .\nwd:Q181795 wdt:P58 wd:Q240872\n}",
        "questionWithBrackets": "Was [Star Wars: Episode V \u2013 The Empire Strikes Back] written by [Lawrence Kasdan] , edited by [Marcia Lucas] , produced by [Lucasfilm] , and edited by [George Lucas] and [Paul Hirsch]"
    },
    {
        "questionIdx": 85957,
        "questionPatternModEntities": "Was M2 produced by a Mexican sibling of M0 and distributed by M3",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M0 ) .\nM2 P2 M3 .\nM2 P3 ?x0\n}",
        "recursionDepth": 34,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P27 wd:Q96 .\n?x0 wdt:P3373 wd:Q2840325 .\nFILTER ( ?x0 != wd:Q2840325 ) .\nwd:Q216006 wdt:P750 wd:Q126399 .\nwd:Q216006 wdt:P162|wdt:P272 ?x0\n}",
        "questionWithBrackets": "Was [Pan's Labyrinth] produced by a Mexican sibling of [Carlos Cuar\u00f3n] and distributed by [Warner Bros.]"
    },
    {
        "questionIdx": 85961,
        "questionPatternModEntities": "Was M0 directed by M5 , M6 , and M7 , edited by M1 and M2 , and edited by M3 and M4",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] , [entity] , and [entity] , [VP_SIMPLE] by [entity] and [entity] , and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P0 M3 .\nM0 P0 M4 .\nM0 P1 M5 .\nM0 P1 M6 .\nM0 P1 M7\n}",
        "recursionDepth": 47,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q1137372 wdt:P57 wd:Q2838329 .\nwd:Q1137372 wdt:P57 wd:Q549956 .\nwd:Q1137372 wdt:P57 wd:Q3772 .\nwd:Q1137372 wdt:P1040 wd:Q47284 .\nwd:Q1137372 wdt:P1040 wd:Q541143 .\nwd:Q1137372 wdt:P1040 wd:Q273379 .\nwd:Q1137372 wdt:P1040 wd:Q5359064\n}",
        "questionWithBrackets": "Was [Four Rooms] directed by [Alexandre Rockwell] , [Quentin Tarantino] , and [Allison Anders] , edited by [Sally Menke] and [Elena Maganini] , and edited by [Robert Rodriguez] and [Terry Rawlings]"
    },
    {
        "questionIdx": 86062,
        "questionPatternModEntities": "Was M0 executive produced by M1 , M2 , and M3 , edited by M5 , M6 , and M7 , and produced by M4",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] , [entity] , and [entity] , [VP_SIMPLE] by [entity] , [entity] , and [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P0 M3 .\nM0 P1 M4 .\nM0 P2 M5 .\nM0 P2 M6 .\nM0 P2 M7\n}",
        "recursionDepth": 47,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q20630763 wdt:P1040 wd:Q20722014 .\nwd:Q20630763 wdt:P1040 wd:Q20722013 .\nwd:Q20630763 wdt:P1040 wd:Q20722018 .\nwd:Q20630763 wdt:P1431 wd:Q350405 .\nwd:Q20630763 wdt:P1431 wd:Q20722010 .\nwd:Q20630763 wdt:P1431 wd:Q20722012 .\nwd:Q20630763 wdt:P162|wdt:P272 wd:Q20721915\n}",
        "questionWithBrackets": "Was [The Yes Men Are Revolting] executive produced by [Alex Cooke] , [Adam McKay] , and [Alan Hayling] , edited by [Geraud Brisson] , [Claire L. Chandler] , and [Todd Woody Richman] , and produced by [Laura Nix]"
    },
    {
        "questionIdx": 86100,
        "questionPatternModEntities": "Was M1 executive produced by a parent of M0 's employee",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x1 P1 M0 .\nM1 P2 ?x0\n}",
        "recursionDepth": 23,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 ?x1 .\n?x1 wdt:P108 wd:Q4614 .\nwd:Q1199203 wdt:P1431 ?x0\n}",
        "questionWithBrackets": "Was [When Worlds Collide] executive produced by a parent of [University of Southern California] 's employee"
    },
    {
        "questionIdx": 86197,
        "questionPatternModEntities": "Was M1 employed by M2 and M3 , employed by M4 , employed by M5 , and employed by M0 's parent",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] and [entity] , [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 ?x0 .\nM1 P1 M2 .\nM1 P1 M3 .\nM1 P1 M4 .\nM1 P1 M5\n}",
        "recursionDepth": 49,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q201815 .\nwd:Q1629999 wdt:P108 ?x0 .\nwd:Q1629999 wdt:P108 wd:Q66 .\nwd:Q1629999 wdt:P108 wd:Q896341 .\nwd:Q1629999 wdt:P108 wd:Q796745 .\nwd:Q1629999 wdt:P108 wd:Q157808\n}",
        "questionWithBrackets": "Was [Horst Teltschik] employed by [Otto-Suhr-Institut] and [Boeing] , employed by [BMW Foundation Herbert Quandt] , employed by [Technical University of Munich] , and employed by [McDonnell Douglas] 's parent"
    },
    {
        "questionIdx": 86199,
        "questionPatternModEntities": "Was M0 employed by M1 , M2 , and M3 , employed by M4 , M5 , and M6 , and employed by M7",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] , [entity] , and [entity] , [VP_SIMPLE] by [entity] , [entity] , and [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P0 M3 .\nM0 P0 M4 .\nM0 P0 M5 .\nM0 P0 M6 .\nM0 P0 M7\n}",
        "recursionDepth": 46,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q887045 wdt:P108 wd:Q60 .\nwd:Q887045 wdt:P108 wd:Q131252 .\nwd:Q887045 wdt:P108 wd:Q501542 .\nwd:Q887045 wdt:P108 wd:Q7315356 .\nwd:Q887045 wdt:P108 wd:Q8007 .\nwd:Q887045 wdt:P108 wd:Q49088 .\nwd:Q887045 wdt:P108 wd:Q2075365\n}",
        "questionWithBrackets": "Was [Rexford Tugwell] employed by [New York City] , [University of Chicago] , and [Columbia University] , employed by [Resettlement Administration] , [University of Puerto Rico] , and [Franklin Delano Roosevelt] , and employed by [United States Department of Agriculture]"
    },
    {
        "questionIdx": 86201,
        "questionPatternModEntities": "Was M1 employed by M0 's parent and employed by M2 , M3 , M4 , M5 , and M6",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] and [VP_SIMPLE] by [entity] , [entity] , [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 ?x0 .\nM1 P1 M2 .\nM1 P1 M3 .\nM1 P1 M4 .\nM1 P1 M5 .\nM1 P1 M6\n}",
        "recursionDepth": 40,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q836325 .\nwd:Q91984 wdt:P108 ?x0 .\nwd:Q91984 wdt:P108 wd:Q704874 .\nwd:Q91984 wdt:P108 wd:Q408506 .\nwd:Q91984 wdt:P108 wd:Q697106 .\nwd:Q91984 wdt:P108 wd:Q552581 .\nwd:Q91984 wdt:P108 wd:Q67\n}",
        "questionWithBrackets": "Was [Hartmut Mehdorn] employed by [Messerschmitt-B\u00f6lkow-Blohm] 's parent and employed by [DaimlerChrysler Aerospace] , [No label defined] , [Airbus] , [Heidelberger Druckmaschinen] , and [SAP SE]"
    },
    {
        "questionIdx": 86207,
        "questionPatternModEntities": "Was M1 employed by M2 and M3 , employed by a parent of M0 , and employed by M4 and M5",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] and [entity] , [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity] , and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 ?x0 .\nM1 P1 M2 .\nM1 P1 M3 .\nM1 P1 M4 .\nM1 P1 M5\n}",
        "recursionDepth": 46,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q866 .\nwd:Q1502402 wdt:P108 ?x0 .\nwd:Q1502402 wdt:P108 wd:Q2025791 .\nwd:Q1502402 wdt:P108 wd:Q3884 .\nwd:Q1502402 wdt:P108 wd:Q180506 .\nwd:Q1502402 wdt:P108 wd:Q1049470\n}",
        "questionWithBrackets": "Was [Tim Bray] employed by [Open Text Corporation] and [University of Waterloo] , employed by a parent of [YouTube] , and employed by [Waterloo Maple] and [Amazon]"
    },
    {
        "questionIdx": 86209,
        "questionPatternModEntities": "Was M0 employed by M1 , M2 , M3 , and M4 , employed by M5 and M6 , and employed by M7",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] , [entity] , [entity] , and [entity] , [VP_SIMPLE] by [entity] and [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P0 M3 .\nM0 P0 M4 .\nM0 P0 M5 .\nM0 P0 M6 .\nM0 P0 M7\n}",
        "recursionDepth": 46,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q1502402 wdt:P108 wd:Q95 .\nwd:Q1502402 wdt:P108 wd:Q1049470 .\nwd:Q1502402 wdt:P108 wd:Q3884 .\nwd:Q1502402 wdt:P108 wd:Q2025791 .\nwd:Q1502402 wdt:P108 wd:Q180506 .\nwd:Q1502402 wdt:P108 wd:Q14647 .\nwd:Q1502402 wdt:P108 wd:Q690079\n}",
        "questionWithBrackets": "Was [Tim Bray] employed by [Amazon] , [University of Waterloo] , [Google] , and [Sun Microsystems] , employed by [Waterloo Maple] and [Open Text Corporation] , and employed by [Digital Equipment Corporation]"
    },
    {
        "questionIdx": 86210,
        "questionPatternModEntities": "Was M1 employed by M2 and M3 , employed by M4 and M5 , and employed by a parent of M0",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] and [entity] , [VP_SIMPLE] by [entity] and [entity] , and [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 ?x0 .\nM1 P1 M2 .\nM1 P1 M3 .\nM1 P1 M4 .\nM1 P1 M5\n}",
        "recursionDepth": 46,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q15330 .\nwd:Q92743 wdt:P108 ?x0 .\nwd:Q92743 wdt:P108 wd:Q207361 .\nwd:Q92743 wdt:P108 wd:Q95 .\nwd:Q92743 wdt:P108 wd:Q41506 .\nwd:Q92743 wdt:P108 wd:Q37156\n}",
        "questionWithBrackets": "Was [Vint Cerf] employed by [Stanford University] and [DARPA] , employed by [IBM] and [Google] , and employed by a parent of [Waymo]"
    },
    {
        "questionIdx": 86214,
        "questionPatternModEntities": "Was M1 employed by M2 , employed by M3 and M4 , employed by M0 's parent , and employed by M5",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] and [entity] , [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 ?x0 .\nM1 P1 M2 .\nM1 P1 M3 .\nM1 P1 M4 .\nM1 P1 M5\n}",
        "recursionDepth": 49,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q15330 .\nwd:Q46995940 wdt:P108 ?x0 .\nwd:Q46995940 wdt:P108 wd:Q678965 .\nwd:Q46995940 wdt:P108 wd:Q750428 .\nwd:Q46995940 wdt:P108 wd:Q637413 .\nwd:Q46995940 wdt:P108 wd:Q95\n}",
        "questionWithBrackets": "Was [Thomas Breuel] employed by [United States Census Bureau] , employed by [Google] and [University of Kaiserslautern] , employed by [Waymo] 's parent , and employed by [PARC]"
    },
    {
        "questionIdx": 86216,
        "questionPatternModEntities": "Was M1 employed by M2 , M3 , M4 , M5 , and M6 and employed by M0 's parent",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] , [entity] , [entity] , [entity] , and [entity] and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 ?x0 .\nM1 P1 M2 .\nM1 P1 M3 .\nM1 P1 M4 .\nM1 P1 M5 .\nM1 P1 M6\n}",
        "recursionDepth": 40,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q866 .\nwd:Q92832 wdt:P108 ?x0 .\nwd:Q92832 wdt:P108 wd:Q95 .\nwd:Q92832 wdt:P108 wd:Q14647 .\nwd:Q92832 wdt:P108 wd:Q4614 .\nwd:Q92832 wdt:P108 wd:Q181052 .\nwd:Q92832 wdt:P108 wd:Q5658641\n}",
        "questionWithBrackets": "Was [Peter Norvig] employed by [Harlequin] , [Google] , [University of Southern California] , [Ames Research Center] , and [Sun Microsystems] and employed by [YouTube] 's parent"
    },
    {
        "questionIdx": 86230,
        "questionPatternModEntities": "Was M0 M1 's Dutch German employee",
        "questionTemplate": "Was [entity] [entity] 's [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M2 .\nM0 P1 M3\n}",
        "recursionDepth": 21,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q112883 wdt:P108 wd:Q34433 .\nwd:Q112883 wdt:P27 wd:Q183 .\nwd:Q112883 wdt:P27 wd:Q29999\n}",
        "questionWithBrackets": "Was [Edith B\u00fclbring] [University of Oxford] 's Dutch German employee"
    },
    {
        "questionIdx": 86290,
        "questionPatternModEntities": "Was M2 founded by M3 and founded by M0 's Canadian sibling",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] and [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M0 ) .\nM2 P2 ?x0 .\nM2 P2 M3\n}",
        "recursionDepth": 32,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P27 wd:Q16 .\n?x0 wdt:P3373 wd:Q4811453 .\nFILTER ( ?x0 != wd:Q4811453 ) .\nwd:Q10712777 wdt:P112 ?x0 .\nwd:Q10712777 wdt:P112 wd:Q633\n}",
        "questionWithBrackets": "Was [Vapor Records] founded by [Neil Young] and founded by [Astrid Young] 's Canadian sibling"
    },
    {
        "questionIdx": 86380,
        "questionPatternModEntities": "Was M2 executive produced by and directed by M0 's Mexican sibling",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by and [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M0 ) .\nM2 P2 ?x0 .\nM2 P3 ?x0\n}",
        "recursionDepth": 30,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P27 wd:Q96 .\n?x0 wdt:P3373 wd:Q2840325 .\nFILTER ( ?x0 != wd:Q2840325 ) .\nwd:Q13382543 wdt:P57 ?x0 .\nwd:Q13382543 wdt:P1431 ?x0\n}",
        "questionWithBrackets": "Was [Believe] executive produced by and directed by [Carlos Cuar\u00f3n] 's Mexican sibling"
    },
    {
        "questionIdx": 86410,
        "questionPatternModEntities": "Was M0 written by , edited by , and produced by M1 and M2",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P1 M1 .\nM0 P1 M2 .\nM0 P2 M1 .\nM0 P2 M2\n}",
        "recursionDepth": 30,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q20729551 wdt:P1040 wd:Q562108 .\nwd:Q20729551 wdt:P1040 wd:Q1687239 .\nwd:Q20729551 wdt:P162|wdt:P272 wd:Q562108 .\nwd:Q20729551 wdt:P162|wdt:P272 wd:Q1687239 .\nwd:Q20729551 wdt:P58 wd:Q562108 .\nwd:Q20729551 wdt:P58 wd:Q1687239\n}",
        "questionWithBrackets": "Was [Stop for Bud] written by , edited by , and produced by [Jens J\u00f8rgen Thorsen] and [J\u00f8rgen Leth]"
    },
    {
        "questionIdx": 86447,
        "questionPatternModEntities": "Was M1 influenced by M0 's sibling 's parent",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x1 P1 M0 .\nFILTER ( ?x1 != M0 ) .\nM1 P2 ?x0\n}",
        "recursionDepth": 20,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 ?x1 .\n?x1 wdt:P3373 wd:Q1332164 .\nFILTER ( ?x1 != wd:Q1332164 ) .\nwd:Q5879 wdt:P737 ?x0\n}",
        "questionWithBrackets": "Was [Johann Wolfgang von Goethe] influenced by [Jules Barth\u00e9lemy-Saint-Hilaire] 's sibling 's parent"
    },
    {
        "questionIdx": 86461,
        "questionPatternModEntities": "Was M1 M0 's sibling 's female German spouse",
        "questionTemplate": "Was [entity] [entity] 's [ROLE_SIMPLE] 's [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( M1 != ?x0 ) .\nM1 P1 M2 .\nM1 P2 M3 .\nM1 P3 ?x0\n}",
        "recursionDepth": 25,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P3373 wd:Q3484280 .\nFILTER ( ?x0 != wd:Q3484280 ) .\nFILTER ( wd:Q8219 != ?x0 ) .\nwd:Q8219 wdt:P21 wd:Q6581072 .\nwd:Q8219 wdt:P27 wd:Q183 .\nwd:Q8219 wdt:P26 ?x0\n}",
        "questionWithBrackets": "Was [Uta Frith] [Simon Frith] 's sibling 's female German spouse"
    },
    {
        "questionIdx": 86470,
        "questionPatternModEntities": "Was M0 a German Swedish parent of M3",
        "questionTemplate": "Was [entity] a [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P1 M3\n}",
        "recursionDepth": 23,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q95379 wdt:P40|wdt:P355 wd:Q62492 .\nwd:Q95379 wdt:P27 wd:Q183 .\nwd:Q95379 wdt:P27 wd:Q34\n}",
        "questionWithBrackets": "Was [Margareta Fouch\u00e9] a German Swedish parent of [Richard, 6th Prince of Sayn-Wittgenstein-Berleburg]"
    },
    {
        "questionIdx": 86589,
        "questionPatternModEntities": "Was M0 produced , directed , and written by M1",
        "questionTemplate": "Was [entity] [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1 .\nM0 P2 M1\n}",
        "recursionDepth": 24,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q973676 wdt:P57 wd:Q882 .\nwd:Q973676 wdt:P162|wdt:P272 wd:Q882 .\nwd:Q973676 wdt:P58 wd:Q882\n}",
        "questionWithBrackets": "Was [A Day's Pleasure] produced , directed , and written by [Charlie Chaplin]"
    },
    {
        "questionIdx": 86687,
        "questionPatternModEntities": "Was M2 edited by , executive produced by , and produced by a male parent of M1",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nM2 P2 ?x0 .\nM2 P3 ?x0 .\nM2 P4 ?x0\n}",
        "recursionDepth": 38,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q1620638 .\n?x0 wdt:P21 wd:Q6581097 .\nwd:Q854990 wdt:P1040 ?x0 .\nwd:Q854990 wdt:P1431 ?x0 .\nwd:Q854990 wdt:P162|wdt:P272 ?x0\n}",
        "questionWithBrackets": "Was [Kagemusha] edited by , executive produced by , and produced by a male parent of [Hisao Kurosawa]"
    },
    {
        "questionIdx": 86690,
        "questionPatternModEntities": "Was M1 edited by , produced by , executive produced by , and written by a parent of M0",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 ?x0 .\nM1 P2 ?x0 .\nM1 P3 ?x0 .\nM1 P4 ?x0\n}",
        "recursionDepth": 39,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q1620638 .\nwd:Q854990 wdt:P1040 ?x0 .\nwd:Q854990 wdt:P1431 ?x0 .\nwd:Q854990 wdt:P162|wdt:P272 ?x0 .\nwd:Q854990 wdt:P58 ?x0\n}",
        "questionWithBrackets": "Was [Kagemusha] edited by , produced by , executive produced by , and written by a parent of [Hisao Kurosawa]"
    },
    {
        "questionIdx": 86693,
        "questionPatternModEntities": "Was M1 executive produced by , edited by , produced by , and written by a spouse of M0",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nM1 P1 ?x0 .\nM1 P2 ?x0 .\nM1 P3 ?x0 .\nM1 P4 ?x0\n}",
        "recursionDepth": 39,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P26 wd:Q3032150 .\nFILTER ( ?x0 != wd:Q3032150 ) .\nwd:Q854990 wdt:P1040 ?x0 .\nwd:Q854990 wdt:P1431 ?x0 .\nwd:Q854990 wdt:P162|wdt:P272 ?x0 .\nwd:Q854990 wdt:P58 ?x0\n}",
        "questionWithBrackets": "Was [Kagemusha] executive produced by , edited by , produced by , and written by a spouse of [Y\u014dko Yaguchi]"
    },
    {
        "questionIdx": 86704,
        "questionPatternModEntities": "Was M1 produced by , written by , edited by , directed by , and executive produced by M0 's spouse",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nM1 P1 ?x0 .\nM1 P2 ?x0 .\nM1 P3 ?x0 .\nM1 P4 ?x0 .\nM1 P5 ?x0\n}",
        "recursionDepth": 43,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P26 wd:Q3032150 .\nFILTER ( ?x0 != wd:Q3032150 ) .\nwd:Q854990 wdt:P57 ?x0 .\nwd:Q854990 wdt:P1040 ?x0 .\nwd:Q854990 wdt:P1431 ?x0 .\nwd:Q854990 wdt:P162|wdt:P272 ?x0 .\nwd:Q854990 wdt:P58 ?x0\n}",
        "questionWithBrackets": "Was [Kagemusha] produced by , written by , edited by , directed by , and executive produced by [Y\u014dko Yaguchi] 's spouse"
    },
    {
        "questionIdx": 86706,
        "questionPatternModEntities": "Was M1 produced , directed , edited , written , and executive produced by M0 's spouse",
        "questionTemplate": "Was [entity] [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nM1 P1 ?x0 .\nM1 P2 ?x0 .\nM1 P3 ?x0 .\nM1 P4 ?x0 .\nM1 P5 ?x0\n}",
        "recursionDepth": 39,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P26 wd:Q3032150 .\nFILTER ( ?x0 != wd:Q3032150 ) .\nwd:Q854990 wdt:P57 ?x0 .\nwd:Q854990 wdt:P1040 ?x0 .\nwd:Q854990 wdt:P1431 ?x0 .\nwd:Q854990 wdt:P162|wdt:P272 ?x0 .\nwd:Q854990 wdt:P58 ?x0\n}",
        "questionWithBrackets": "Was [Kagemusha] produced , directed , edited , written , and executive produced by [Y\u014dko Yaguchi] 's spouse"
    },
    {
        "questionIdx": 86708,
        "questionPatternModEntities": "Was M1 written by , executive produced by , and produced by M0 's parent",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 ?x0 .\nM1 P2 ?x0 .\nM1 P3 ?x0\n}",
        "recursionDepth": 31,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q3592679 .\nwd:Q277281 wdt:P1431 ?x0 .\nwd:Q277281 wdt:P162|wdt:P272 ?x0 .\nwd:Q277281 wdt:P58 ?x0\n}",
        "questionWithBrackets": "Was [Love on the Run] written by , executive produced by , and produced by [\u00c9va Truffaut] 's parent"
    },
    {
        "questionIdx": 86709,
        "questionPatternModEntities": "Was M2 written by , executive produced by , edited by , and produced by M1 's male parent",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nM2 P2 ?x0 .\nM2 P3 ?x0 .\nM2 P4 ?x0 .\nM2 P5 ?x0\n}",
        "recursionDepth": 42,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q4739681 .\n?x0 wdt:P21 wd:Q6581097 .\nwd:Q17738 wdt:P1040 ?x0 .\nwd:Q17738 wdt:P1431 ?x0 .\nwd:Q17738 wdt:P162|wdt:P272 ?x0 .\nwd:Q17738 wdt:P58 ?x0\n}",
        "questionWithBrackets": "Was [Star Wars: Episode IV \u2013 A New Hope] written by , executive produced by , edited by , and produced by [Amanda Lucas] 's male parent"
    },
    {
        "questionIdx": 86710,
        "questionPatternModEntities": "Was M2 written by , executive produced by , produced by , and edited by a male parent of M1",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nM2 P2 ?x0 .\nM2 P3 ?x0 .\nM2 P4 ?x0 .\nM2 P5 ?x0\n}",
        "recursionDepth": 44,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q1620638 .\n?x0 wdt:P21 wd:Q6581097 .\nwd:Q854990 wdt:P1040 ?x0 .\nwd:Q854990 wdt:P1431 ?x0 .\nwd:Q854990 wdt:P162|wdt:P272 ?x0 .\nwd:Q854990 wdt:P58 ?x0\n}",
        "questionWithBrackets": "Was [Kagemusha] written by , executive produced by , produced by , and edited by a male parent of [Hisao Kurosawa]"
    },
    {
        "questionIdx": 86712,
        "questionPatternModEntities": "Was M2 written , executive produced , produced , and edited by M1 's male parent",
        "questionTemplate": "Was [entity] [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nM2 P2 ?x0 .\nM2 P3 ?x0 .\nM2 P4 ?x0 .\nM2 P5 ?x0\n}",
        "recursionDepth": 39,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q1620638 .\n?x0 wdt:P21 wd:Q6581097 .\nwd:Q854990 wdt:P1040 ?x0 .\nwd:Q854990 wdt:P1431 ?x0 .\nwd:Q854990 wdt:P162|wdt:P272 ?x0 .\nwd:Q854990 wdt:P58 ?x0\n}",
        "questionWithBrackets": "Was [Kagemusha] written , executive produced , produced , and edited by [Hisao Kurosawa] 's male parent"
    },
    {
        "questionIdx": 86719,
        "questionPatternModEntities": "Was M1 executive produced by M2 and written by M0 's parent",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 M2 .\nM1 P2 ?x0\n}",
        "recursionDepth": 28,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q276175 .\nwd:Q221113 wdt:P1431 wd:Q69234 .\nwd:Q221113 wdt:P58 ?x0\n}",
        "questionWithBrackets": "Was [A.I. Artificial Intelligence] executive produced by [Jan Harlan] and written by [Vivian Kubrick] 's parent"
    },
    {
        "questionIdx": 86731,
        "questionPatternModEntities": "Was M1 directed , written , edited , produced , and executive produced by a parent of M0",
        "questionTemplate": "Was [entity] [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 ?x0 .\nM1 P2 ?x0 .\nM1 P3 ?x0 .\nM1 P4 ?x0 .\nM1 P5 ?x0\n}",
        "recursionDepth": 41,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q1620638 .\nwd:Q854990 wdt:P57 ?x0 .\nwd:Q854990 wdt:P1040 ?x0 .\nwd:Q854990 wdt:P1431 ?x0 .\nwd:Q854990 wdt:P162|wdt:P272 ?x0 .\nwd:Q854990 wdt:P58 ?x0\n}",
        "questionWithBrackets": "Was [Kagemusha] directed , written , edited , produced , and executive produced by a parent of [Hisao Kurosawa]"
    },
    {
        "questionIdx": 86771,
        "questionPatternModEntities": "Was M1 written by , directed by , edited by , executive produced by , and produced by a parent of M0",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 ?x0 .\nM1 P2 ?x0 .\nM1 P3 ?x0 .\nM1 P4 ?x0 .\nM1 P5 ?x0\n}",
        "recursionDepth": 45,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q1620638 .\nwd:Q854990 wdt:P57 ?x0 .\nwd:Q854990 wdt:P1040 ?x0 .\nwd:Q854990 wdt:P1431 ?x0 .\nwd:Q854990 wdt:P162|wdt:P272 ?x0 .\nwd:Q854990 wdt:P58 ?x0\n}",
        "questionWithBrackets": "Was [Kagemusha] written by , directed by , edited by , executive produced by , and produced by a parent of [Hisao Kurosawa]"
    },
    {
        "questionIdx": 86782,
        "questionPatternModEntities": "Was M1 written , executive produced , edited , directed , and produced by M0 's parent",
        "questionTemplate": "Was [entity] [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 ?x0 .\nM1 P2 ?x0 .\nM1 P3 ?x0 .\nM1 P4 ?x0 .\nM1 P5 ?x0\n}",
        "recursionDepth": 39,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q4739681 .\nwd:Q17738 wdt:P57 ?x0 .\nwd:Q17738 wdt:P1040 ?x0 .\nwd:Q17738 wdt:P1431 ?x0 .\nwd:Q17738 wdt:P162|wdt:P272 ?x0 .\nwd:Q17738 wdt:P58 ?x0\n}",
        "questionWithBrackets": "Was [Star Wars: Episode IV \u2013 A New Hope] written , executive produced , edited , directed , and produced by [Amanda Lucas] 's parent"
    },
    {
        "questionIdx": 86845,
        "questionPatternModEntities": "Was M2 produced by M0 's Chinese sibling",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M0 ) .\nM2 P2 ?x0\n}",
        "recursionDepth": 21,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P27 wd:Q148 .\n?x0 wdt:P3373 wd:Q549233 .\nFILTER ( ?x0 != wd:Q549233 ) .\nwd:Q4388331 wdt:P162|wdt:P272 ?x0\n}",
        "questionWithBrackets": "Was [Chicken and Duck Talk] produced by [Sam Hui] 's Chinese sibling"
    },
    {
        "questionIdx": 86924,
        "questionPatternModEntities": "Was M1 employed by M2 and M3 , employed by M0 's child , employed by M4 , and employed by M5",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] and [entity] , [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 ?x0 .\nM1 P1 M2 .\nM1 P1 M3 .\nM1 P1 M4 .\nM1 P1 M5\n}",
        "recursionDepth": 49,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P749 wd:Q183 .\nwd:Q69646 wdt:P108 ?x0 .\nwd:Q69646 wdt:P108 wd:Q9322 .\nwd:Q69646 wdt:P108 wd:Q488589 .\nwd:Q69646 wdt:P108 wd:Q138133 .\nwd:Q69646 wdt:P108 wd:Q315502\n}",
        "questionWithBrackets": "Was [Werner M\u00fcller] employed by [VEBA] and [Deutsche Bahn] , employed by [Germany] 's child , employed by [RWE] , and employed by [Federal Ministry for Economic Affairs and Energy]"
    },
    {
        "questionIdx": 86947,
        "questionPatternModEntities": "Was M1 M0 's sibling 's Dutch German spouse",
        "questionTemplate": "Was [entity] [entity] 's [ROLE_SIMPLE] 's [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( M1 != ?x0 ) .\nM1 P1 M2 .\nM1 P1 M3 .\nM1 P2 ?x0\n}",
        "recursionDepth": 25,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P3373 wd:Q242862 .\nFILTER ( ?x0 != wd:Q242862 ) .\nFILTER ( wd:Q57664 != ?x0 ) .\nwd:Q57664 wdt:P27 wd:Q183 .\nwd:Q57664 wdt:P27 wd:Q29999 .\nwd:Q57664 wdt:P26 ?x0\n}",
        "questionWithBrackets": "Was [Emma of Waldeck and Pyrmont] [Princess Sophie of the Netherlands] 's sibling 's Dutch German spouse"
    },
    {
        "questionIdx": 87059,
        "questionPatternModEntities": "Was M2 directed by , written by , and executive produced by a female sibling of M0",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M0 ) .\nM2 P2 ?x0 .\nM2 P3 ?x0 .\nM2 P4 ?x0\n}",
        "recursionDepth": 38,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P21 wd:Q6581072 .\n?x0 wdt:P3373 wd:Q5112102 .\nFILTER ( ?x0 != wd:Q5112102 ) .\nwd:Q946478 wdt:P57 ?x0 .\nwd:Q946478 wdt:P1431 ?x0 .\nwd:Q946478 wdt:P58 ?x0\n}",
        "questionWithBrackets": "Was [Filth and Wisdom] directed by , written by , and executive produced by a female sibling of [Christopher Ciccone]"
    },
    {
        "questionIdx": 87065,
        "questionPatternModEntities": "Was M0 executive produced by M1 , executive produced by M2 , executive produced by M3 , and written by M4",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P0 M3 .\nM0 P1 M4\n}",
        "recursionDepth": 44,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q102244 wdt:P1431 wd:Q75079 .\nwd:Q102244 wdt:P1431 wd:Q975579 .\nwd:Q102244 wdt:P1431 wd:Q1900360 .\nwd:Q102244 wdt:P58 wd:Q362061\n}",
        "questionWithBrackets": "Was [Harry Potter and the Chamber of Secrets] executive produced by [Mark Radcliffe] , executive produced by [David Barron] , executive produced by [Chris Columbus] , and written by [Steve Kloves]"
    },
    {
        "questionIdx": 87074,
        "questionPatternModEntities": "Was M2 directed by a Japanese employee of M0 and executive produced by M3 , M4 , and M5",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] and [VP_SIMPLE] by [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nM2 P2 M3 .\nM2 P2 M4 .\nM2 P2 M5 .\nM2 P3 ?x0\n}",
        "recursionDepth": 42,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P108 wd:Q11371930 .\n?x0 wdt:P27 wd:Q17 .\nwd:Q236728 wdt:P57 ?x0 .\nwd:Q236728 wdt:P1431 wd:Q55400 .\nwd:Q236728 wdt:P1431 wd:Q8965479 .\nwd:Q236728 wdt:P1431 wd:Q269214\n}",
        "questionWithBrackets": "Was [Ponyo on the Cliff by the Sea] directed by a Japanese employee of [Nibariki] and executive produced by [Hayao Miyazaki] , [John Lasseter] , and [Koji Hoshino]"
    },
    {
        "questionIdx": 87110,
        "questionPatternModEntities": "Was M0 edited by M1 , M2 , M3 , M4 , and M5 , directed by M7 , and edited by M6",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] , [entity] , [entity] , [entity] , and [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P0 M3 .\nM0 P0 M4 .\nM0 P0 M5 .\nM0 P0 M6 .\nM0 P1 M7\n}",
        "recursionDepth": 45,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q603857 wdt:P57 wd:Q44221 .\nwd:Q603857 wdt:P1040 wd:Q55211 .\nwd:Q603857 wdt:P1040 wd:Q5639976 .\nwd:Q603857 wdt:P1040 wd:Q541826 .\nwd:Q603857 wdt:P1040 wd:Q22074634 .\nwd:Q603857 wdt:P1040 wd:Q55215 .\nwd:Q603857 wdt:P1040 wd:Q18021284\n}",
        "questionWithBrackets": "Was [11'09\"01 September 11] edited by [Robert Duffy] , [Jay Cassidy] , [Jonathan Morris] , [Mohsen Makhmalbaf] , and [Alejandro Gonz\u00e1lez I\u00f1\u00e1rritu] , directed by [Sean Penn] , and edited by [Hajime Okayasu]"
    },
    {
        "questionIdx": 87159,
        "questionPatternModEntities": "Was M0 directed by M3 , executive produced by M1 , edited by M2 , and directed by M4",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M2 .\nM0 P2 M3 .\nM0 P2 M4\n}",
        "recursionDepth": 42,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q60747802 wdt:P57 wd:Q6135721 .\nwd:Q60747802 wdt:P57 wd:Q2273145 .\nwd:Q60747802 wdt:P1040 wd:Q3856251 .\nwd:Q60747802 wdt:P1431 wd:Q56005\n}",
        "questionWithBrackets": "Was [Raised by Wolves] directed by [Sergio Mimica-Gezzan] , executive produced by [Ridley Scott] , edited by [Michael Ruscio] , and directed by [James Hawes]"
    },
    {
        "questionIdx": 87165,
        "questionPatternModEntities": "Was M0 executive produced by M1 , directed by M2 , and directed by M3",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M2 .\nM0 P1 M3\n}",
        "recursionDepth": 33,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q1079 wdt:P57 wd:Q724100 .\nwd:Q1079 wdt:P57 wd:Q23547 .\nwd:Q1079 wdt:P1431 wd:Q4500\n}",
        "questionWithBrackets": "Was [Breaking Bad] executive produced by [Vince Gilligan] , directed by [Peter Medak] , and directed by [Bryan Cranston]"
    },
    {
        "questionIdx": 87193,
        "questionPatternModEntities": "Was M1 's Canadian female Chinese employee M0",
        "questionTemplate": "Was [entity] 's [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M2 .\nM0 P1 M3 .\nM0 P2 M4\n}",
        "recursionDepth": 26,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q270650 wdt:P108 wd:Q1065 .\nwd:Q270650 wdt:P21 wd:Q6581072 .\nwd:Q270650 wdt:P27 wd:Q148 .\nwd:Q270650 wdt:P27 wd:Q16\n}",
        "questionWithBrackets": "Was [United Nations] 's Canadian female Chinese employee [Margaret Chan]"
    },
    {
        "questionIdx": 87197,
        "questionPatternModEntities": "Was M0 founded by M1 , M2 , and M3",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P0 M3\n}",
        "recursionDepth": 19,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q458 wdt:P112 wd:Q31 .\nwd:Q458 wdt:P112 wd:Q29999 .\nwd:Q458 wdt:P112 wd:Q32\n}",
        "questionWithBrackets": "Was [European Union] founded by [Kingdom of the Netherlands] , [Belgium] , and [Luxembourg]"
    },
    {
        "questionIdx": 87198,
        "questionPatternModEntities": "Was M0 founded by M1 and founded by M2 and M3",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P0 M3\n}",
        "recursionDepth": 27,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q1065 wdt:P112 wd:Q20 .\nwd:Q1065 wdt:P112 wd:Q258 .\nwd:Q1065 wdt:P112 wd:Q16\n}",
        "questionWithBrackets": "Was [United Nations] founded by [South Africa] and founded by [Norway] and [Canada]"
    },
    {
        "questionIdx": 87202,
        "questionPatternModEntities": "Was M2 founded by a Dutch sibling of M0",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M0 ) .\nM2 P2 ?x0\n}",
        "recursionDepth": 23,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P27 wd:Q29999 .\n?x0 wdt:P3373 wd:Q2336212 .\nFILTER ( ?x0 != wd:Q2336212 ) .\nwd:Q117892 wdt:P112 ?x0\n}",
        "questionWithBrackets": "Was [World Wide Fund for Nature] founded by a Dutch sibling of [Prince Aschwin of Lippe-Biesterfeld]"
    },
    {
        "questionIdx": 87234,
        "questionPatternModEntities": "Was M0 's prequel produced by M1",
        "questionTemplate": "Was [entity] 's [ROLE_SIMPLE] [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1\n}",
        "recursionDepth": 16,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P162|wdt:P272 wd:Q7414 .\n?x0 wdt:P156 wd:Q817003\n}",
        "questionWithBrackets": "Was [Aladdin and the King of Thieves] 's prequel produced by [The Walt Disney Company]"
    },
    {
        "questionIdx": 87235,
        "questionPatternModEntities": "Was M0 edited by M2 , directed by M3 , and executive produced by M1",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M2 .\nM0 P2 M3\n}",
        "recursionDepth": 33,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q725578 wdt:P57 wd:Q295964 .\nwd:Q725578 wdt:P1040 wd:Q3013121 .\nwd:Q725578 wdt:P1431 wd:Q8877\n}",
        "questionWithBrackets": "Was [Cowboys & Aliens] edited by [Dan Lebental] , directed by [Jon Favreau] , and executive produced by [Steven Spielberg]"
    },
    {
        "questionIdx": 87237,
        "questionPatternModEntities": "Was M0 a Chinese employee of M1 , M2 , M3 , M4 , and M5",
        "questionTemplate": "Was [entity] a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] , [entity] , [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P0 M3 .\nM0 P0 M4 .\nM0 P0 M5 .\nM0 P1 M6\n}",
        "recursionDepth": 31,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q62888 wdt:P108 wd:Q21578 .\nwd:Q62888 wdt:P108 wd:Q16955 .\nwd:Q62888 wdt:P108 wd:Q168756 .\nwd:Q62888 wdt:P108 wd:Q622664 .\nwd:Q62888 wdt:P108 wd:Q41506 .\nwd:Q62888 wdt:P27 wd:Q148\n}",
        "questionWithBrackets": "Was [Andrew Yao] a Chinese employee of [Stanford University] , [Tsinghua University] , [Princeton University] , [University of California, San Diego] , and [University of California, Berkeley]"
    },
    {
        "questionIdx": 87238,
        "questionPatternModEntities": "Was M0 a Chinese employee of M1 , M2 , M3 , and M4",
        "questionTemplate": "Was [entity] a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] , [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P0 M3 .\nM0 P0 M4 .\nM0 P1 M5\n}",
        "recursionDepth": 28,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q270650 wdt:P108 wd:Q7817 .\nwd:Q270650 wdt:P108 wd:Q2303626 .\nwd:Q270650 wdt:P108 wd:Q1065 .\nwd:Q270650 wdt:P108 wd:Q15164 .\nwd:Q270650 wdt:P27 wd:Q148\n}",
        "questionWithBrackets": "Was [Margaret Chan] a Chinese employee of [United Nations] , [Department of Health] , [World Health Organization] , and [Government of Hong Kong]"
    },
    {
        "questionIdx": 87243,
        "questionPatternModEntities": "Was M0 produced by , written by , and edited by M1",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1 .\nM0 P2 M1\n}",
        "recursionDepth": 26,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q854990 wdt:P1040 wd:Q8006 .\nwd:Q854990 wdt:P162|wdt:P272 wd:Q8006 .\nwd:Q854990 wdt:P58 wd:Q8006\n}",
        "questionWithBrackets": "Was [Kagemusha] produced by , written by , and edited by [Akira Kurosawa]"
    },
    {
        "questionIdx": 87339,
        "questionPatternModEntities": "Was M2 executive produced by M1 's female spouse",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M1 ) .\nM2 P2 ?x0\n}",
        "recursionDepth": 22,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P21 wd:Q6581072 .\n?x0 wdt:P26 wd:Q44221 .\nFILTER ( ?x0 != wd:Q44221 ) .\nwd:Q946478 wdt:P1431 ?x0\n}",
        "questionWithBrackets": "Was [Filth and Wisdom] executive produced by [Sean Penn] 's female spouse"
    },
    {
        "questionIdx": 87372,
        "questionPatternModEntities": "Was M0 M2 's Japanese spouse",
        "questionTemplate": "Was [entity] [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\nFILTER ( M0 != M2 ) .\nM0 P0 M1 .\nM0 P1 M2\n}",
        "recursionDepth": 16,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nFILTER ( wd:Q37979 != wd:Q87610 ) .\nwd:Q37979 wdt:P27 wd:Q17 .\nwd:Q37979 wdt:P26 wd:Q87610\n}",
        "questionWithBrackets": "Was [Akihito] [Michiko] 's Japanese spouse"
    },
    {
        "questionIdx": 87382,
        "questionPatternModEntities": "Was M2 founded by M3 , founded by a French sibling of M0 , and founded by M4 and M5",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] , [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] , and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M0 ) .\nM2 P2 ?x0 .\nM2 P2 M3 .\nM2 P2 M4 .\nM2 P2 M5\n}",
        "recursionDepth": 47,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P27 wd:Q142 .\n?x0 wdt:P3373 wd:Q1973016 .\nFILTER ( ?x0 != wd:Q1973016 ) .\nwd:Q2822402 wdt:P112 ?x0 .\nwd:Q2822402 wdt:P112 wd:Q3185453 .\nwd:Q2822402 wdt:P112 wd:Q2038 .\nwd:Q2822402 wdt:P112 wd:Q2666683\n}",
        "questionWithBrackets": "Was [Academy of Morvan] founded by [Fran\u00e7ois Mitterrand] , founded by a French sibling of [Robert Mitterrand] , and founded by [Joseph Pasquet] and [Henri Perruchot]"
    },
    {
        "questionIdx": 87425,
        "questionPatternModEntities": "Was M2 edited and directed by a female parent of M1",
        "questionTemplate": "Was [entity] [VP_SIMPLE] and [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nM2 P2 ?x0 .\nM2 P3 ?x0\n}",
        "recursionDepth": 30,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q949017 .\n?x0 wdt:P21 wd:Q6581072 .\nwd:Q2298257 wdt:P57 ?x0 .\nwd:Q2298257 wdt:P1040 ?x0\n}",
        "questionWithBrackets": "Was [Vagabond] edited and directed by a female parent of [Mathieu Demy]"
    },
    {
        "questionIdx": 87428,
        "questionPatternModEntities": "Was M1 edited , produced , and directed by M0 's sibling",
        "questionTemplate": "Was [entity] [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nM1 P1 ?x0 .\nM1 P2 ?x0 .\nM1 P3 ?x0\n}",
        "recursionDepth": 28,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P3373 wd:Q6228653 .\nFILTER ( ?x0 != wd:Q6228653 ) .\nwd:Q24871 wdt:P57 ?x0 .\nwd:Q24871 wdt:P1040 ?x0 .\nwd:Q24871 wdt:P162|wdt:P272 ?x0\n}",
        "questionWithBrackets": "Was [Avatar] edited , produced , and directed by [John David Cameron] 's sibling"
    },
    {
        "questionIdx": 87430,
        "questionPatternModEntities": "Was M2 produced by and edited by a female spouse of M1",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by and [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M1 ) .\nM2 P2 ?x0 .\nM2 P3 ?x0\n}",
        "recursionDepth": 31,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P21 wd:Q6581072 .\n?x0 wdt:P26 wd:Q1252342 .\nFILTER ( ?x0 != wd:Q1252342 ) .\nwd:Q938727 wdt:P1040 ?x0 .\nwd:Q938727 wdt:P162|wdt:P272 ?x0\n}",
        "questionWithBrackets": "Was [The Medusa Touch] produced by and edited by a female spouse of [Douglas Hickox]"
    },
    {
        "questionIdx": 87433,
        "questionPatternModEntities": "Was M1 directed by a spouse of M0",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nM1 P1 ?x0\n}",
        "recursionDepth": 18,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P26 wd:Q104373310 .\nFILTER ( ?x0 != wd:Q104373310 ) .\nwd:Q48631386 wdt:P57 ?x0\n}",
        "questionWithBrackets": "Was [Part 9] directed by a spouse of [Emily Stofle]"
    },
    {
        "questionIdx": 87461,
        "questionPatternModEntities": "Was M2 produced by M1 's Chinese spouse",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M1 ) .\nM2 P2 ?x0\n}",
        "recursionDepth": 21,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P27 wd:Q148 .\n?x0 wdt:P26 wd:Q717669 .\nFILTER ( ?x0 != wd:Q717669 ) .\nwd:Q60794 wdt:P162|wdt:P272 ?x0\n}",
        "questionWithBrackets": "Was [Gorgeous] produced by [Lin Feng-jiao] 's Chinese spouse"
    },
    {
        "questionIdx": 87494,
        "questionPatternModEntities": "Was M3 a spouse of a American employee of M0 and M1",
        "questionTemplate": "Was [entity] a [ROLE_SIMPLE] of a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P1 M2 .\nFILTER ( M3 != ?x0 ) .\nM3 P2 ?x0\n}",
        "recursionDepth": 28,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P108 wd:Q48525 .\n?x0 wdt:P108 wd:Q499451 .\n?x0 wdt:P27 wd:Q30 .\nFILTER ( wd:Q6775247 != ?x0 ) .\nwd:Q6775247 wdt:P26 ?x0\n}",
        "questionWithBrackets": "Was [Martin D. Ginsburg] a spouse of a American employee of [Rutgers University] and [Federal Government of the United States of America]"
    },
    {
        "questionIdx": 87527,
        "questionPatternModEntities": "Was M1 's sequel written by and executive produced by M0",
        "questionTemplate": "Was [entity] 's [ROLE_SIMPLE] [VP_SIMPLE] by and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M0 .\n?x0 P2 M1\n}",
        "recursionDepth": 25,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P1431 wd:Q2071 .\n?x0 wdt:P155 wd:Q2085 .\n?x0 wdt:P58 wd:Q2071\n}",
        "questionWithBrackets": "Was [Twin Peaks] 's sequel written by and executive produced by [David Lynch]"
    },
    {
        "questionIdx": 87537,
        "questionPatternModEntities": "Was M0 edited by , executive produced by , and produced by M1",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1 .\nM0 P2 M1\n}",
        "recursionDepth": 27,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q854990 wdt:P1040 wd:Q8006 .\nwd:Q854990 wdt:P1431 wd:Q8006 .\nwd:Q854990 wdt:P162|wdt:P272 wd:Q8006\n}",
        "questionWithBrackets": "Was [Kagemusha] edited by , executive produced by , and produced by [Akira Kurosawa]"
    },
    {
        "questionIdx": 87540,
        "questionPatternModEntities": "Was M1 edited by , written by , executive produced by , and produced by M0 's sibling",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nM1 P1 ?x0 .\nM1 P2 ?x0 .\nM1 P3 ?x0 .\nM1 P4 ?x0\n}",
        "recursionDepth": 37,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P3373 wd:Q28370409 .\nFILTER ( ?x0 != wd:Q28370409 ) .\nwd:Q28146810 wdt:P1040 ?x0 .\nwd:Q28146810 wdt:P1431 ?x0 .\nwd:Q28146810 wdt:P162|wdt:P272 ?x0 .\nwd:Q28146810 wdt:P58 ?x0\n}",
        "questionWithBrackets": "Was [Bullets, Fangs and Dinner at 8] edited by , written by , executive produced by , and produced by [Everton Rocca] 's sibling"
    },
    {
        "questionIdx": 87544,
        "questionPatternModEntities": "Was M1 edited , written , produced , directed , and executive produced by M0 's sibling",
        "questionTemplate": "Was [entity] [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nM1 P1 ?x0 .\nM1 P2 ?x0 .\nM1 P3 ?x0 .\nM1 P4 ?x0 .\nM1 P5 ?x0\n}",
        "recursionDepth": 39,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P3373 wd:Q28370409 .\nFILTER ( ?x0 != wd:Q28370409 ) .\nwd:Q28146810 wdt:P57 ?x0 .\nwd:Q28146810 wdt:P1040 ?x0 .\nwd:Q28146810 wdt:P1431 ?x0 .\nwd:Q28146810 wdt:P162|wdt:P272 ?x0 .\nwd:Q28146810 wdt:P58 ?x0\n}",
        "questionWithBrackets": "Was [Bullets, Fangs and Dinner at 8] edited , written , produced , directed , and executive produced by [Everton Rocca] 's sibling"
    },
    {
        "questionIdx": 87550,
        "questionPatternModEntities": "Was M1 executive produced , written , produced , and edited by M0 's sibling",
        "questionTemplate": "Was [entity] [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nM1 P1 ?x0 .\nM1 P2 ?x0 .\nM1 P3 ?x0 .\nM1 P4 ?x0\n}",
        "recursionDepth": 34,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P3373 wd:Q28370409 .\nFILTER ( ?x0 != wd:Q28370409 ) .\nwd:Q28146810 wdt:P1040 ?x0 .\nwd:Q28146810 wdt:P1431 ?x0 .\nwd:Q28146810 wdt:P162|wdt:P272 ?x0 .\nwd:Q28146810 wdt:P58 ?x0\n}",
        "questionWithBrackets": "Was [Bullets, Fangs and Dinner at 8] executive produced , written , produced , and edited by [Everton Rocca] 's sibling"
    },
    {
        "questionIdx": 87557,
        "questionPatternModEntities": "Was M1 written by , edited by , directed by , produced by , and executive produced by M0 's sibling",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nM1 P1 ?x0 .\nM1 P2 ?x0 .\nM1 P3 ?x0 .\nM1 P4 ?x0 .\nM1 P5 ?x0\n}",
        "recursionDepth": 43,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P3373 wd:Q28370409 .\nFILTER ( ?x0 != wd:Q28370409 ) .\nwd:Q28146810 wdt:P57 ?x0 .\nwd:Q28146810 wdt:P1040 ?x0 .\nwd:Q28146810 wdt:P1431 ?x0 .\nwd:Q28146810 wdt:P162|wdt:P272 ?x0 .\nwd:Q28146810 wdt:P58 ?x0\n}",
        "questionWithBrackets": "Was [Bullets, Fangs and Dinner at 8] written by , edited by , directed by , produced by , and executive produced by [Everton Rocca] 's sibling"
    },
    {
        "questionIdx": 87560,
        "questionPatternModEntities": "Was M1 written , edited , produced , and executive produced by M0 's sibling",
        "questionTemplate": "Was [entity] [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nM1 P1 ?x0 .\nM1 P2 ?x0 .\nM1 P3 ?x0 .\nM1 P4 ?x0\n}",
        "recursionDepth": 34,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P3373 wd:Q28370409 .\nFILTER ( ?x0 != wd:Q28370409 ) .\nwd:Q28146810 wdt:P1040 ?x0 .\nwd:Q28146810 wdt:P1431 ?x0 .\nwd:Q28146810 wdt:P162|wdt:P272 ?x0 .\nwd:Q28146810 wdt:P58 ?x0\n}",
        "questionWithBrackets": "Was [Bullets, Fangs and Dinner at 8] written , edited , produced , and executive produced by [Everton Rocca] 's sibling"
    },
    {
        "questionIdx": 87572,
        "questionPatternModEntities": "Was M2 edited by M4 , produced by M0 's Canadian sibling , and executive produced by M3",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M0 ) .\nM2 P2 M3 .\nM2 P3 ?x0 .\nM2 P4 M4\n}",
        "recursionDepth": 42,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P27 wd:Q16 .\n?x0 wdt:P3373 wd:Q104161 .\nFILTER ( ?x0 != wd:Q104161 ) .\nwd:Q3997048 wdt:P1040 wd:Q111743 .\nwd:Q3997048 wdt:P1431 wd:Q72614 .\nwd:Q3997048 wdt:P162|wdt:P272 ?x0\n}",
        "questionWithBrackets": "Was [Between Two Worlds] edited by [Rudi Fehr] , produced by [Harry Warner] 's Canadian sibling , and executive produced by [Jack Warner]"
    },
    {
        "questionIdx": 87590,
        "questionPatternModEntities": "Was M0 written by , executive produced by , and produced by M1",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1 .\nM0 P2 M1\n}",
        "recursionDepth": 27,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q208047 wdt:P1431 wd:Q61347 .\nwd:Q208047 wdt:P162|wdt:P272 wd:Q61347 .\nwd:Q208047 wdt:P58 wd:Q61347\n}",
        "questionWithBrackets": "Was [1968 Tunnel Rats] written by , executive produced by , and produced by [Uwe Boll]"
    },
    {
        "questionIdx": 87606,
        "questionPatternModEntities": "Was M0 a Chinese employee of M1",
        "questionTemplate": "Was [entity] a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M2\n}",
        "recursionDepth": 18,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q197448 wdt:P108 wd:Q16952 .\nwd:Q197448 wdt:P27 wd:Q148\n}",
        "questionWithBrackets": "Was [Zhao Lihai] a Chinese employee of [Peking University]"
    },
    {
        "questionIdx": 87642,
        "questionPatternModEntities": "Was M0 a Japanese employee of M1",
        "questionTemplate": "Was [entity] a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M2\n}",
        "recursionDepth": 18,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q22665 wdt:P108 wd:Q702605 .\nwd:Q22665 wdt:P27 wd:Q17\n}",
        "questionWithBrackets": "Was [Futabatei Shimei] a Japanese employee of [Army War College]"
    },
    {
        "questionIdx": 87647,
        "questionPatternModEntities": "Was M1 M0 's parent 's French British employee",
        "questionTemplate": "Was [entity] [entity] 's [ROLE_SIMPLE] 's [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 ?x0 .\nM1 P2 M2 .\nM1 P2 M3\n}",
        "recursionDepth": 25,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q79202 .\nwd:Q95068 wdt:P108 ?x0 .\nwd:Q95068 wdt:P27 wd:Q145 .\nwd:Q95068 wdt:P27 wd:Q142\n}",
        "questionWithBrackets": "Was [Olivia de Havilland] [New Line Cinema] 's parent 's French British employee"
    },
    {
        "questionIdx": 87669,
        "questionPatternModEntities": "Was M0 's sibling M1 's American sibling",
        "questionTemplate": "Was [entity] 's [ROLE_SIMPLE] [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P1 M2 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x0 != M1 )\n}",
        "recursionDepth": 20,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P27 wd:Q30 .\n?x0 wdt:P3373 wd:Q207 .\n?x0 wdt:P3373 wd:Q221997 .\nFILTER ( ?x0 != wd:Q207 ) .\nFILTER ( ?x0 != wd:Q221997 )\n}",
        "questionWithBrackets": "Was [Jeb Bush] 's sibling [George W. Bush] 's American sibling"
    },
    {
        "questionIdx": 87670,
        "questionPatternModEntities": "Was M0 a female employee of M1",
        "questionTemplate": "Was [entity] a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M2\n}",
        "recursionDepth": 18,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q92916 wdt:P108 wd:Q95 .\nwd:Q92916 wdt:P21 wd:Q6581072\n}",
        "questionWithBrackets": "Was [Corinna Cortes] a female employee of [Google]"
    },
    {
        "questionIdx": 87704,
        "questionPatternModEntities": "Was M0 directed by M7 , edited by M1 and M2 , and edited by M3 , M4 , M5 , and M6",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] and [entity] , and [VP_SIMPLE] by [entity] , [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P0 M3 .\nM0 P0 M4 .\nM0 P0 M5 .\nM0 P0 M6 .\nM0 P1 M7\n}",
        "recursionDepth": 46,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q603857 wdt:P57 wd:Q113628 .\nwd:Q603857 wdt:P1040 wd:Q55215 .\nwd:Q603857 wdt:P1040 wd:Q55211 .\nwd:Q603857 wdt:P1040 wd:Q541826 .\nwd:Q603857 wdt:P1040 wd:Q22074634 .\nwd:Q603857 wdt:P1040 wd:Q5639976 .\nwd:Q603857 wdt:P1040 wd:Q18021284\n}",
        "questionWithBrackets": "Was [11'09\"01 September 11] directed by [Idrissa Ou\u00e9draogo] , edited by [Alejandro Gonz\u00e1lez I\u00f1\u00e1rritu] and [Jay Cassidy] , and edited by [Hajime Okayasu] , [Robert Duffy] , [Jonathan Morris] , and [Mohsen Makhmalbaf]"
    },
    {
        "questionIdx": 87711,
        "questionPatternModEntities": "Was M0 's spouse M1 's sibling 's parent",
        "questionTemplate": "Was [entity] 's [ROLE_SIMPLE] [entity] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x0 P1 M0 .\n?x1 P2 M1 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x1 != M1 )\n}",
        "recursionDepth": 19,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 ?x1 .\n?x0 wdt:P26 wd:Q134388 .\n?x1 wdt:P3373 wd:Q3954 .\nFILTER ( ?x0 != wd:Q134388 ) .\nFILTER ( ?x1 != wd:Q3954 )\n}",
        "questionWithBrackets": "Was [Saturn] 's spouse [Neptune] 's sibling 's parent"
    },
    {
        "questionIdx": 87749,
        "questionPatternModEntities": "Was M0 distributed by M1 , distributed by M2 , distributed by M3 and M4 , and produced by M5",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] and [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P0 M3 .\nM0 P0 M4 .\nM0 P1 M5\n}",
        "recursionDepth": 45,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q692821 wdt:P750 wd:Q145 .\nwd:Q692821 wdt:P750 wd:Q5371838 .\nwd:Q692821 wdt:P750 wd:Q907311 .\nwd:Q692821 wdt:P750 wd:Q80948336 .\nwd:Q692821 wdt:P162|wdt:P272 wd:Q7684047\n}",
        "questionWithBrackets": "Was [My Summer of Love] distributed by [Vudu] , distributed by [Netflix] , distributed by [FandangoNow] and [United Kingdom] , and produced by [Tanya Seghatchian]"
    },
    {
        "questionIdx": 87755,
        "questionPatternModEntities": "Was M0 M1 's Japanese Chinese employee",
        "questionTemplate": "Was [entity] [entity] 's [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M2 .\nM0 P1 M3\n}",
        "recursionDepth": 21,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q4306909 wdt:P108 wd:Q534845 .\nwd:Q4306909 wdt:P27 wd:Q17 .\nwd:Q4306909 wdt:P27 wd:Q148\n}",
        "questionWithBrackets": "Was [Pema Gyalpo Gyari] [Takushoku University] 's Japanese Chinese employee"
    },
    {
        "questionIdx": 87756,
        "questionPatternModEntities": "Was M0 a Chinese Japanese employee of M1",
        "questionTemplate": "Was [entity] a [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M2 .\nM0 P1 M3\n}",
        "recursionDepth": 23,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q4306909 wdt:P108 wd:Q534845 .\nwd:Q4306909 wdt:P27 wd:Q17 .\nwd:Q4306909 wdt:P27 wd:Q148\n}",
        "questionWithBrackets": "Was [Pema Gyalpo Gyari] a Chinese Japanese employee of [Takushoku University]"
    },
    {
        "questionIdx": 87792,
        "questionPatternModEntities": "Was M1 executive produced by M0 's employee , edited by M3 , M4 , and M5 , and produced by M2",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] , [VP_SIMPLE] by [entity] , [entity] , and [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 ?x0 .\nM1 P2 M2 .\nM1 P3 M3 .\nM1 P3 M4 .\nM1 P3 M5\n}",
        "recursionDepth": 44,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P108 wd:Q211174 .\nwd:Q15068238 wdt:P1040 wd:Q1126713 .\nwd:Q15068238 wdt:P1040 wd:Q17167553 .\nwd:Q15068238 wdt:P1040 wd:Q974800 .\nwd:Q15068238 wdt:P1431 ?x0 .\nwd:Q15068238 wdt:P162|wdt:P272 wd:Q17167550\n}",
        "questionWithBrackets": "Was [Kingsman: The Secret Service] executive produced by [2000 AD] 's employee , edited by [Jon Harris] , [Eddie Hamilton] , and [Conrad Buff IV] , and produced by [David Reid]"
    },
    {
        "questionIdx": 87801,
        "questionPatternModEntities": "Was M0 edited by and produced by M1 and M2",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P1 M1 .\nM0 P1 M2\n}",
        "recursionDepth": 24,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q747877 wdt:P1040 wd:Q354010 .\nwd:Q747877 wdt:P1040 wd:Q489831 .\nwd:Q747877 wdt:P162|wdt:P272 wd:Q354010 .\nwd:Q747877 wdt:P162|wdt:P272 wd:Q489831\n}",
        "questionWithBrackets": "Was [Clerks] edited by and produced by [Scott Mosier] and [Kevin Smith]"
    },
    {
        "questionIdx": 87804,
        "questionPatternModEntities": "Was M0 directed , edited , and executive produced by M1",
        "questionTemplate": "Was [entity] [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1 .\nM0 P2 M1\n}",
        "recursionDepth": 25,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q236728 wdt:P57 wd:Q55400 .\nwd:Q236728 wdt:P1040 wd:Q55400 .\nwd:Q236728 wdt:P1431 wd:Q55400\n}",
        "questionWithBrackets": "Was [Ponyo on the Cliff by the Sea] directed , edited , and executive produced by [Hayao Miyazaki]"
    },
    {
        "questionIdx": 87806,
        "questionPatternModEntities": "Was M0 written and executive produced by M1 and M2",
        "questionTemplate": "Was [entity] [VP_SIMPLE] and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P1 M1 .\nM0 P1 M2\n}",
        "recursionDepth": 24,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q7152308 wdt:P1431 wd:Q2599 .\nwd:Q7152308 wdt:P1431 wd:Q228899 .\nwd:Q7152308 wdt:P58 wd:Q2599 .\nwd:Q7152308 wdt:P58 wd:Q228899\n}",
        "questionWithBrackets": "Was [Paul McCartney: Music & Animation] written and executive produced by [Linda McCartney] and [Paul McCartney]"
    },
    {
        "questionIdx": 87828,
        "questionPatternModEntities": "Was M0 written and directed by M1 and M2",
        "questionTemplate": "Was [entity] [VP_SIMPLE] and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P1 M1 .\nM0 P1 M2\n}",
        "recursionDepth": 23,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q1079 wdt:P57 wd:Q4500 .\nwd:Q1079 wdt:P57 wd:Q5542223 .\nwd:Q1079 wdt:P58 wd:Q4500 .\nwd:Q1079 wdt:P58 wd:Q5542223\n}",
        "questionWithBrackets": "Was [Breaking Bad] written and directed by [George Mastras] and [Vince Gilligan]"
    },
    {
        "questionIdx": 87834,
        "questionPatternModEntities": "Was M0 's parent 's spouse M1",
        "questionTemplate": "Was [entity] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( M1 != ?x0 ) .\nM1 P1 ?x0\n}",
        "recursionDepth": 15,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q155004 .\nFILTER ( wd:Q31129 != ?x0 ) .\nwd:Q31129 wdt:P26 ?x0\n}",
        "questionWithBrackets": "Was [Philippe I of Belgium] 's parent 's spouse [Queen Paola of Belgium]"
    },
    {
        "questionIdx": 87856,
        "questionPatternModEntities": "Was a British Dutch male sibling of M1 M0",
        "questionTemplate": "Was a [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nFILTER ( M0 != M1 ) .\nM0 P0 M1 .\nM0 P1 M2 .\nM0 P1 M3 .\nM0 P2 M4\n}",
        "recursionDepth": 28,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nFILTER ( wd:Q153890 != wd:Q183181 ) .\nwd:Q153890 wdt:P21 wd:Q6581097 .\nwd:Q153890 wdt:P27 wd:Q29999 .\nwd:Q153890 wdt:P27 wd:Q145 .\nwd:Q153890 wdt:P3373 wd:Q183181\n}",
        "questionWithBrackets": "Was a British Dutch male sibling of [Jan Tinbergen] [Niko Tinbergen]"
    },
    {
        "questionIdx": 87871,
        "questionPatternModEntities": "Was a British Italian parent of M2 M3 's spouse",
        "questionTemplate": "Was a [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P1 M2 .\n?x0 P2 M3 .\nFILTER ( ?x0 != M3 )\n}",
        "recursionDepth": 27,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q75383466 .\n?x0 wdt:P27 wd:Q38 .\n?x0 wdt:P27 wd:Q145 .\n?x0 wdt:P26 wd:Q5271337 .\nFILTER ( ?x0 != wd:Q5271337 )\n}",
        "questionWithBrackets": "Was a British Italian parent of [Lord Richard Wellesley] [Diana Wellesley, Duchess of Wellington] 's spouse"
    },
    {
        "questionIdx": 87876,
        "questionPatternModEntities": "Was a British Japanese parent of M3 M0",
        "questionTemplate": "Was a [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P1 M3\n}",
        "recursionDepth": 23,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q272855 wdt:P40|wdt:P355 wd:Q47493506 .\nwd:Q272855 wdt:P27 wd:Q17 .\nwd:Q272855 wdt:P27 wd:Q145\n}",
        "questionWithBrackets": "Was a British Japanese parent of [Naomi Ishiguro] [Kazuo Ishiguro]"
    },
    {
        "questionIdx": 87879,
        "questionPatternModEntities": "Was a British Mexican parent of M3 M0",
        "questionTemplate": "Was a [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P1 M3\n}",
        "recursionDepth": 23,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q442991 wdt:P40|wdt:P355 wd:Q611349 .\nwd:Q442991 wdt:P27 wd:Q145 .\nwd:Q442991 wdt:P27 wd:Q96\n}",
        "questionWithBrackets": "Was a British Mexican parent of [Dhani Harrison] [Olivia Harrison]"
    },
    {
        "questionIdx": 87893,
        "questionPatternModEntities": "Was a British actor of M2 M0",
        "questionTemplate": "Was a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M2\n}",
        "recursionDepth": 18,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q17517279 wdt:P453 wd:Q24909033 .\nwd:Q17517279 wdt:P27 wd:Q145\n}",
        "questionWithBrackets": "Was a British actor of [Peri Lomax] [Ruby O'Donnell]"
    },
    {
        "questionIdx": 88014,
        "questionPatternModEntities": "Was a British employee of M1 M0",
        "questionTemplate": "Was a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M2\n}",
        "recursionDepth": 18,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q15451 wdt:P108 wd:Q835960 .\nwd:Q15451 wdt:P27 wd:Q145\n}",
        "questionWithBrackets": "Was a British employee of [University of S\u00e3o Paulo] [W. D. Hamilton]"
    },
    {
        "questionIdx": 88098,
        "questionPatternModEntities": "Was a British male German parent of M4 M0",
        "questionTemplate": "Was a [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P1 M3 .\nM0 P2 M4\n}",
        "recursionDepth": 28,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q4517 wdt:P40|wdt:P355 wd:Q76348793 .\nwd:Q4517 wdt:P21 wd:Q6581097 .\nwd:Q4517 wdt:P27 wd:Q183 .\nwd:Q4517 wdt:P27 wd:Q145\n}",
        "questionWithBrackets": "Was a British male German parent of [David Katz] [Bernard Katz]"
    },
    {
        "questionIdx": 88186,
        "questionPatternModEntities": "Was a British sibling of M0 influenced by M1 and influenced by M2 and M3",
        "questionTemplate": "Was a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] [VP_SIMPLE] by [entity] and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\n?x0 P1 M3 .\n?x0 P2 M4 .\nFILTER ( ?x0 != M0 )\n}",
        "recursionDepth": 38,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P737 wd:Q868 .\n?x0 wdt:P737 wd:Q2044035 .\n?x0 wdt:P737 wd:Q79759 .\n?x0 wdt:P27 wd:Q145 .\n?x0 wdt:P3373 wd:Q3038321 .\nFILTER ( ?x0 != wd:Q3038321 )\n}",
        "questionWithBrackets": "Was a British sibling of [Warren Lewis] influenced by [Thomas Traherne] and influenced by [John Milton] and [Aristotle]"
    },
    {
        "questionIdx": 88188,
        "questionPatternModEntities": "Was a British sibling of M1 M0",
        "questionTemplate": "Was a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nFILTER ( M0 != M1 ) .\nM0 P0 M1 .\nM0 P1 M2\n}",
        "recursionDepth": 18,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nFILTER ( wd:Q12665 != wd:Q1360618 ) .\nwd:Q12665 wdt:P27 wd:Q145 .\nwd:Q12665 wdt:P3373 wd:Q1360618\n}",
        "questionWithBrackets": "Was a British sibling of [Warington Baden-Powell] [Robert Baden-Powell, 1st Baron Baden-Powell]"
    },
    {
        "questionIdx": 88198,
        "questionPatternModEntities": "Was a British spouse of M2 M0",
        "questionTemplate": "Was a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nFILTER ( M0 != M2 ) .\nM0 P0 M1 .\nM0 P1 M2\n}",
        "recursionDepth": 18,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nFILTER ( wd:Q28493 != wd:Q232187 ) .\nwd:Q28493 wdt:P27 wd:Q145 .\nwd:Q28493 wdt:P26 wd:Q232187\n}",
        "questionWithBrackets": "Was a British spouse of [Alex Kingston] [Ralph Fiennes]"
    },
    {
        "questionIdx": 88222,
        "questionPatternModEntities": "Was a Canadian American British spouse of M4 M0",
        "questionTemplate": "Was a [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nFILTER ( M0 != M4 ) .\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P0 M3 .\nM0 P1 M4\n}",
        "recursionDepth": 28,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nFILTER ( wd:Q185724 != wd:Q29052379 ) .\nwd:Q185724 wdt:P27 wd:Q145 .\nwd:Q185724 wdt:P27 wd:Q30 .\nwd:Q185724 wdt:P27 wd:Q16 .\nwd:Q185724 wdt:P26 wd:Q29052379\n}",
        "questionWithBrackets": "Was a Canadian American British spouse of [Kelly Tisdale] [Mike Myers]"
    },
    {
        "questionIdx": 88245,
        "questionPatternModEntities": "Was a Canadian Dutch male parent of M4 M0",
        "questionTemplate": "Was a [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P1 M3 .\nM0 P2 M4\n}",
        "recursionDepth": 28,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q57169979 wdt:P40|wdt:P355 wd:Q22910214 .\nwd:Q57169979 wdt:P21 wd:Q6581097 .\nwd:Q57169979 wdt:P27 wd:Q29999 .\nwd:Q57169979 wdt:P27 wd:Q16\n}",
        "questionWithBrackets": "Was a Canadian Dutch male parent of [Jeon So-mi] [Matthew Douma]"
    },
    {
        "questionIdx": 88247,
        "questionPatternModEntities": "Was a Canadian French employee of M1 M0",
        "questionTemplate": "Was a [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M2 .\nM0 P1 M3\n}",
        "recursionDepth": 23,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q128933 wdt:P108 wd:Q461761 .\nwd:Q128933 wdt:P27 wd:Q16 .\nwd:Q128933 wdt:P27 wd:Q142\n}",
        "questionWithBrackets": "Was a Canadian French employee of [Canadian Broadcasting Corporation] [Micha\u00eblle Jean]"
    },
    {
        "questionIdx": 88279,
        "questionPatternModEntities": "Was a Canadian Swedish female spouse of M4 M0",
        "questionTemplate": "Was a [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nFILTER ( M0 != M4 ) .\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P1 M3 .\nM0 P2 M4\n}",
        "recursionDepth": 28,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nFILTER ( wd:Q214289 != wd:Q171998 ) .\nwd:Q214289 wdt:P21 wd:Q6581072 .\nwd:Q214289 wdt:P27 wd:Q16 .\nwd:Q214289 wdt:P27 wd:Q34 .\nwd:Q214289 wdt:P26 wd:Q171998\n}",
        "questionWithBrackets": "Was a Canadian Swedish female spouse of [Jean Todt] [Michelle Yeoh]"
    },
    {
        "questionIdx": 88417,
        "questionPatternModEntities": "Was a Canadian employee of M1 M0",
        "questionTemplate": "Was a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M2\n}",
        "recursionDepth": 18,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q102266 wdt:P108 wd:Q13371 .\nwd:Q102266 wdt:P27 wd:Q16\n}",
        "questionWithBrackets": "Was a Canadian employee of [Harvard University] [Sidney Altman]"
    },
    {
        "questionIdx": 88637,
        "questionPatternModEntities": "Was a Canadian sibling of M0 a sibling of M1",
        "questionTemplate": "Was a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] a [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P1 M2 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x0 != M1 )\n}",
        "recursionDepth": 24,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P27 wd:Q16 .\n?x0 wdt:P3373 wd:Q8651 .\n?x0 wdt:P3373 wd:Q4815644 .\nFILTER ( ?x0 != wd:Q8651 ) .\nFILTER ( ?x0 != wd:Q4815644 )\n}",
        "questionWithBrackets": "Was a Canadian sibling of [Douglas Shearer] a sibling of [Athole Shearer]"
    },
    {
        "questionIdx": 88656,
        "questionPatternModEntities": "Was a Canadian spouse of M2 M0",
        "questionTemplate": "Was a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nFILTER ( M0 != M2 ) .\nM0 P0 M1 .\nM0 P1 M2\n}",
        "recursionDepth": 18,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nFILTER ( wd:Q77112 != wd:Q229282 ) .\nwd:Q77112 wdt:P27 wd:Q16 .\nwd:Q77112 wdt:P26 wd:Q229282\n}",
        "questionWithBrackets": "Was a Canadian spouse of [Katharine McPhee] [David Foster]"
    },
    {
        "questionIdx": 88793,
        "questionPatternModEntities": "Was a Chinese employee of M1 , M2 , and M3 M0",
        "questionTemplate": "Was a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] , [entity] , and [entity] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P0 M3 .\nM0 P1 M4\n}",
        "recursionDepth": 25,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q62888 wdt:P108 wd:Q16955 .\nwd:Q62888 wdt:P108 wd:Q622664 .\nwd:Q62888 wdt:P108 wd:Q21578 .\nwd:Q62888 wdt:P27 wd:Q148\n}",
        "questionWithBrackets": "Was a Chinese employee of [Tsinghua University] , [Princeton University] , and [University of California, San Diego] [Andrew Yao]"
    },
    {
        "questionIdx": 88997,
        "questionPatternModEntities": "Was a Chinese spouse of M2 M0",
        "questionTemplate": "Was a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nFILTER ( M0 != M2 ) .\nM0 P0 M1 .\nM0 P1 M2\n}",
        "recursionDepth": 18,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nFILTER ( wd:Q197261 != wd:Q270165 ) .\nwd:Q197261 wdt:P27 wd:Q148 .\nwd:Q197261 wdt:P26 wd:Q270165\n}",
        "questionWithBrackets": "Was a Chinese spouse of [Tian Qing] [Zhang Nan]"
    },
    {
        "questionIdx": 89021,
        "questionPatternModEntities": "Was a Dutch British sibling of M1 M0",
        "questionTemplate": "Was a [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nFILTER ( M0 != M1 ) .\nM0 P0 M1 .\nM0 P1 M2 .\nM0 P1 M3\n}",
        "recursionDepth": 23,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nFILTER ( wd:Q153890 != wd:Q183181 ) .\nwd:Q153890 wdt:P27 wd:Q29999 .\nwd:Q153890 wdt:P27 wd:Q145 .\nwd:Q153890 wdt:P3373 wd:Q183181\n}",
        "questionWithBrackets": "Was a Dutch British sibling of [Jan Tinbergen] [Niko Tinbergen]"
    },
    {
        "questionIdx": 89027,
        "questionPatternModEntities": "Was a Dutch French parent of M3 M0",
        "questionTemplate": "Was a [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P1 M3\n}",
        "recursionDepth": 23,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q532902 wdt:P40|wdt:P355 wd:Q154335 .\nwd:Q532902 wdt:P27 wd:Q29999 .\nwd:Q532902 wdt:P27 wd:Q142\n}",
        "questionWithBrackets": "Was a Dutch French parent of [Yves Klein] [Fred Klein]"
    },
    {
        "questionIdx": 89117,
        "questionPatternModEntities": "Was a Dutch employee of M1 and M2 M0",
        "questionTemplate": "Was a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] and [entity] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P1 M3\n}",
        "recursionDepth": 22,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q159840 wdt:P108 wd:Q1065 .\nwd:Q159840 wdt:P108 wd:Q13371 .\nwd:Q159840 wdt:P27 wd:Q29999\n}",
        "questionWithBrackets": "Was a Dutch employee of [United Nations] and [Harvard University] [Ruud Lubbers]"
    },
    {
        "questionIdx": 89284,
        "questionPatternModEntities": "Was a Dutch sibling of M0 's spouse M1",
        "questionTemplate": "Was a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] 's [ROLE_SIMPLE] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( M1 != ?x0 ) .\nM1 P1 ?x0 .\nM1 P2 M2\n}",
        "recursionDepth": 22,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P26 wd:Q57414 .\nFILTER ( ?x0 != wd:Q57414 ) .\nFILTER ( wd:Q158235 != ?x0 ) .\nwd:Q158235 wdt:P27 wd:Q29999 .\nwd:Q158235 wdt:P3373 ?x0\n}",
        "questionWithBrackets": "Was a Dutch sibling of [Frederick II, Grand Duke of Baden] 's spouse [William IV, Grand Duke of Luxembourg]"
    },
    {
        "questionIdx": 89291,
        "questionPatternModEntities": "Was a Dutch spouse of M2 M0 's employee",
        "questionTemplate": "Was a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P2 M2 .\nFILTER ( ?x0 != M2 )\n}",
        "recursionDepth": 22,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P108 wd:Q156598 .\n?x0 wdt:P27 wd:Q29999 .\n?x0 wdt:P26 wd:Q20017511 .\nFILTER ( ?x0 != wd:Q20017511 )\n}",
        "questionWithBrackets": "Was a Dutch spouse of [Adelheid Ernestine Caroline Henri\u00ebtte Solger] [Leiden University] 's employee"
    },
    {
        "questionIdx": 89340,
        "questionPatternModEntities": "Was a French Italian sibling of M1 M0",
        "questionTemplate": "Was a [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nFILTER ( M0 != M1 ) .\nM0 P0 M1 .\nM0 P1 M2 .\nM0 P1 M3\n}",
        "recursionDepth": 23,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nFILTER ( wd:Q106057 != wd:Q15042014 ) .\nwd:Q106057 wdt:P27 wd:Q38 .\nwd:Q106057 wdt:P27 wd:Q142 .\nwd:Q106057 wdt:P3373 wd:Q15042014\n}",
        "questionWithBrackets": "Was a French Italian sibling of [Julien Livi] [Yves Montand]"
    },
    {
        "questionIdx": 89342,
        "questionPatternModEntities": "Was a French Japanese spouse of M3 M0",
        "questionTemplate": "Was a [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nFILTER ( M0 != M3 ) .\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P1 M3\n}",
        "recursionDepth": 23,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nFILTER ( wd:Q214289 != wd:Q171998 ) .\nwd:Q214289 wdt:P27 wd:Q17 .\nwd:Q214289 wdt:P27 wd:Q142 .\nwd:Q214289 wdt:P26 wd:Q171998\n}",
        "questionWithBrackets": "Was a French Japanese spouse of [Jean Todt] [Michelle Yeoh]"
    },
    {
        "questionIdx": 89358,
        "questionPatternModEntities": "Was a French Spanish parent of M3 M0",
        "questionTemplate": "Was a [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P1 M3\n}",
        "recursionDepth": 23,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q122998 wdt:P40|wdt:P355 wd:Q432857 .\nwd:Q122998 wdt:P27 wd:Q29 .\nwd:Q122998 wdt:P27 wd:Q142\n}",
        "questionWithBrackets": "Was a French Spanish parent of [Louise H\u00e9ritte-Viardot] [Pauline Viardot]"
    },
    {
        "questionIdx": 89372,
        "questionPatternModEntities": "Was a French actor of M2 M0",
        "questionTemplate": "Was a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M2\n}",
        "recursionDepth": 18,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q2834673 wdt:P453 wd:Q24136041 .\nwd:Q2834673 wdt:P27 wd:Q142\n}",
        "questionWithBrackets": "Was a French actor of [Nick Wilde] [Alexis Victor]"
    },
    {
        "questionIdx": 89519,
        "questionPatternModEntities": "Was a French employee of M0 a spouse of M2",
        "questionTemplate": "Was a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] a [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P2 M2 .\nFILTER ( ?x0 != M2 )\n}",
        "recursionDepth": 24,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P108 wd:Q209842 .\n?x0 wdt:P27 wd:Q142 .\n?x0 wdt:P26 wd:Q37463 .\nFILTER ( ?x0 != wd:Q37463 )\n}",
        "questionWithBrackets": "Was a French employee of [University of Paris] a spouse of [Pierre Curie]"
    },
    {
        "questionIdx": 89644,
        "questionPatternModEntities": "Was a French male German sibling of M1 M0",
        "questionTemplate": "Was a [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nFILTER ( M0 != M1 ) .\nM0 P0 M1 .\nM0 P1 M2 .\nM0 P1 M3 .\nM0 P2 M4\n}",
        "recursionDepth": 28,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nFILTER ( wd:Q63488 != wd:Q87454 ) .\nwd:Q63488 wdt:P21 wd:Q6581097 .\nwd:Q63488 wdt:P27 wd:Q183 .\nwd:Q63488 wdt:P27 wd:Q142 .\nwd:Q63488 wdt:P3373 wd:Q87454\n}",
        "questionWithBrackets": "Was a French male German sibling of [Gustav Solomon Oppert] [Julius Oppert]"
    },
    {
        "questionIdx": 89647,
        "questionPatternModEntities": "Was a French male Spanish parent of M4 M0",
        "questionTemplate": "Was a [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P1 M3 .\nM0 P2 M4\n}",
        "recursionDepth": 28,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q7758 wdt:P40|wdt:P355 wd:Q1465751 .\nwd:Q7758 wdt:P21 wd:Q6581097 .\nwd:Q7758 wdt:P27 wd:Q29 .\nwd:Q7758 wdt:P27 wd:Q142\n}",
        "questionWithBrackets": "Was a French male Spanish parent of [Louis Antoine, Duke of Angoul\u00eame] [Charles X of France]"
    },
    {
        "questionIdx": 89737,
        "questionPatternModEntities": "Was a French sibling of M0 M1 's employee",
        "questionTemplate": "Was a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P2 M2 .\nFILTER ( ?x0 != M0 )\n}",
        "recursionDepth": 22,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P108 wd:Q202660 .\n?x0 wdt:P27 wd:Q142 .\n?x0 wdt:P3373 wd:Q83331 .\nFILTER ( ?x0 != wd:Q83331 )\n}",
        "questionWithBrackets": "Was a French sibling of [Louis de Broglie] [Coll\u00e8ge de France] 's employee"
    },
    {
        "questionIdx": 89738,
        "questionPatternModEntities": "Was a French sibling of M0 employed by M1",
        "questionTemplate": "Was a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P2 M2 .\nFILTER ( ?x0 != M0 )\n}",
        "recursionDepth": 23,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P108 wd:Q209842 .\n?x0 wdt:P27 wd:Q142 .\n?x0 wdt:P3373 wd:Q8861061 .\nFILTER ( ?x0 != wd:Q8861061 )\n}",
        "questionWithBrackets": "Was a French sibling of [Bronis\u0142awa D\u0142uska] employed by [University of Paris]"
    },
    {
        "questionIdx": 89743,
        "questionPatternModEntities": "Was a French sibling of M1 M0",
        "questionTemplate": "Was a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nFILTER ( M0 != M1 ) .\nM0 P0 M1 .\nM0 P1 M2\n}",
        "recursionDepth": 18,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nFILTER ( wd:Q2038 != wd:Q1973016 ) .\nwd:Q2038 wdt:P27 wd:Q142 .\nwd:Q2038 wdt:P3373 wd:Q1973016\n}",
        "questionWithBrackets": "Was a French sibling of [Robert Mitterrand] [Fran\u00e7ois Mitterrand]"
    },
    {
        "questionIdx": 89747,
        "questionPatternModEntities": "Was a French spouse of M0 's British sibling M2",
        "questionTemplate": "Was a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( M2 != ?x0 ) .\nM2 P1 M3 .\nM2 P2 ?x0\n}",
        "recursionDepth": 27,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P27 wd:Q145 .\n?x0 wdt:P3373 wd:Q503767 .\nFILTER ( ?x0 != wd:Q503767 ) .\nFILTER ( wd:Q1698 != ?x0 ) .\nwd:Q1698 wdt:P27 wd:Q142 .\nwd:Q1698 wdt:P26 ?x0\n}",
        "questionWithBrackets": "Was a French spouse of [Andrew Birkin] 's British sibling [Serge Gainsbourg]"
    },
    {
        "questionIdx": 89749,
        "questionPatternModEntities": "Was a French spouse of M2 M0",
        "questionTemplate": "Was a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nFILTER ( M0 != M2 ) .\nM0 P0 M1 .\nM0 P1 M2\n}",
        "recursionDepth": 18,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nFILTER ( wd:Q5819 != wd:Q2836615 ) .\nwd:Q5819 wdt:P27 wd:Q142 .\nwd:Q5819 wdt:P26 wd:Q2836615\n}",
        "questionWithBrackets": "Was a French spouse of [Alice Monier] [Jos\u00e9 Bov\u00e9]"
    },
    {
        "questionIdx": 89751,
        "questionPatternModEntities": "Was a French spouse of M4 influenced by M0 , M1 , and M2",
        "questionTemplate": "Was a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] [VP_SIMPLE] by [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P1 M3 .\n?x0 P2 M4 .\nFILTER ( ?x0 != M4 )\n}",
        "recursionDepth": 30,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P737 wd:Q868 .\n?x0 wdt:P737 wd:Q79759 .\n?x0 wdt:P737 wd:Q692 .\n?x0 wdt:P27 wd:Q142 .\n?x0 wdt:P26 wd:Q1047458 .\nFILTER ( ?x0 != wd:Q1047458 )\n}",
        "questionWithBrackets": "Was a French spouse of [Casimir Dudevant] influenced by [Aristotle] , [William Shakespeare] , and [John Milton]"
    },
    {
        "questionIdx": 89880,
        "questionPatternModEntities": "Was a German employee of M1 M0",
        "questionTemplate": "Was a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M2\n}",
        "recursionDepth": 18,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q36067 wdt:P108 wd:Q122453 .\nwd:Q36067 wdt:P27 wd:Q183\n}",
        "questionWithBrackets": "Was a German employee of [University of Stuttgart] [Hermann Haken]"
    },
    {
        "questionIdx": 90035,
        "questionPatternModEntities": "Was a German sibling of M0 employed by M1 and M2 and employed by M3 and M4",
        "questionTemplate": "Was a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] [VP_SIMPLE] by [entity] and [entity] and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\n?x0 P1 M3 .\n?x0 P1 M4 .\n?x0 P2 M5 .\nFILTER ( ?x0 != M0 )\n}",
        "recursionDepth": 42,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P108 wd:Q32120 .\n?x0 wdt:P108 wd:Q152838 .\n?x0 wdt:P108 wd:Q850730 .\n?x0 wdt:P108 wd:Q1137665 .\n?x0 wdt:P27 wd:Q183 .\n?x0 wdt:P3373 wd:Q74622028 .\nFILTER ( ?x0 != wd:Q74622028 )\n}",
        "questionWithBrackets": "Was a German sibling of [Cornelia Emilia Baehrens] employed by [University of Groningen] and [University of G\u00f6ttingen] and employed by [Ghent University] and [University of Halle-Wittenberg]"
    },
    {
        "questionIdx": 90070,
        "questionPatternModEntities": "Was a Japanese British female sibling of M1 M0",
        "questionTemplate": "Was a [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nFILTER ( M0 != M1 ) .\nM0 P0 M1 .\nM0 P1 M2 .\nM0 P1 M3 .\nM0 P2 M4\n}",
        "recursionDepth": 28,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nFILTER ( wd:Q11341695 != wd:Q11491020 ) .\nwd:Q11341695 wdt:P21 wd:Q6581072 .\nwd:Q11341695 wdt:P27 wd:Q17 .\nwd:Q11341695 wdt:P27 wd:Q145 .\nwd:Q11341695 wdt:P3373 wd:Q11491020\n}",
        "questionWithBrackets": "Was a Japanese British female sibling of [Masao Shimura] [Toshiko Marks]"
    },
    {
        "questionIdx": 90074,
        "questionPatternModEntities": "Was a Japanese British sibling of M1 M0",
        "questionTemplate": "Was a [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nFILTER ( M0 != M1 ) .\nM0 P0 M1 .\nM0 P1 M2 .\nM0 P1 M3\n}",
        "recursionDepth": 23,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nFILTER ( wd:Q313638 != wd:Q96087979 ) .\nwd:Q313638 wdt:P27 wd:Q17 .\nwd:Q313638 wdt:P27 wd:Q145 .\nwd:Q313638 wdt:P3373 wd:Q96087979\n}",
        "questionWithBrackets": "Was a Japanese British sibling of [James Daniel Hearn] [Lafcadio Hearn]"
    },
    {
        "questionIdx": 90076,
        "questionPatternModEntities": "Was a Japanese Canadian sibling of M1 M0",
        "questionTemplate": "Was a [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nFILTER ( M0 != M1 ) .\nM0 P0 M1 .\nM0 P1 M2 .\nM0 P1 M3\n}",
        "recursionDepth": 23,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nFILTER ( wd:Q5733248 != wd:Q6810897 ) .\nwd:Q5733248 wdt:P27 wd:Q17 .\nwd:Q5733248 wdt:P27 wd:Q16 .\nwd:Q5733248 wdt:P3373 wd:Q6810897\n}",
        "questionWithBrackets": "Was a Japanese Canadian sibling of [Mel Wakabayashi] [Herb Wakabayashi]"
    },
    {
        "questionIdx": 90089,
        "questionPatternModEntities": "Was a Japanese actor of M2 , M3 , and M4 M0",
        "questionTemplate": "Was a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] , [entity] , and [entity] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M2 .\nM0 P1 M3 .\nM0 P1 M4\n}",
        "recursionDepth": 25,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q49547 wdt:P453 wd:Q65115227 .\nwd:Q49547 wdt:P453 wd:Q65115309 .\nwd:Q49547 wdt:P453 wd:Q1945499 .\nwd:Q49547 wdt:P27 wd:Q17\n}",
        "questionWithBrackets": "Was a Japanese actor of [Meia Gisborn] , [Chun-Li] , and [Lotte Jansson] [Fumiko Orikasa]"
    },
    {
        "questionIdx": 90091,
        "questionPatternModEntities": "Was a Japanese actor of M2 M0",
        "questionTemplate": "Was a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M2\n}",
        "recursionDepth": 18,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q49547 wdt:P453 wd:Q1945499 .\nwd:Q49547 wdt:P27 wd:Q17\n}",
        "questionWithBrackets": "Was a Japanese actor of [Chun-Li] [Fumiko Orikasa]"
    },
    {
        "questionIdx": 90208,
        "questionPatternModEntities": "Was a Japanese employee of M1 M0",
        "questionTemplate": "Was a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M2\n}",
        "recursionDepth": 18,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q55400 wdt:P108 wd:Q182950 .\nwd:Q55400 wdt:P27 wd:Q17\n}",
        "questionWithBrackets": "Was a Japanese employee of [Studio Ghibli] [Hayao Miyazaki]"
    },
    {
        "questionIdx": 90393,
        "questionPatternModEntities": "Was a Japanese sibling of M1 M0",
        "questionTemplate": "Was a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nFILTER ( M0 != M1 ) .\nM0 P0 M1 .\nM0 P1 M2\n}",
        "recursionDepth": 18,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nFILTER ( wd:Q60949 != wd:Q7244858 ) .\nwd:Q60949 wdt:P27 wd:Q17 .\nwd:Q60949 wdt:P3373 wd:Q7244858\n}",
        "questionWithBrackets": "Was a Japanese sibling of [Tokushi-naishinn\u014d] [Emperor Shirakawa]"
    },
    {
        "questionIdx": 90405,
        "questionPatternModEntities": "Was a Japanese spouse of M2 M0",
        "questionTemplate": "Was a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nFILTER ( M0 != M2 ) .\nM0 P0 M1 .\nM0 P1 M2\n}",
        "recursionDepth": 18,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nFILTER ( wd:Q51029 != wd:Q484866 ) .\nwd:Q51029 wdt:P27 wd:Q17 .\nwd:Q51029 wdt:P26 wd:Q484866\n}",
        "questionWithBrackets": "Was a Japanese spouse of [Yi Un] [Yi Bangja]"
    },
    {
        "questionIdx": 90553,
        "questionPatternModEntities": "Was a Mexican employee of M1 , M2 , and M3 M0",
        "questionTemplate": "Was a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] , [entity] , and [entity] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P0 M3 .\nM0 P1 M4\n}",
        "recursionDepth": 25,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q429019 wdt:P108 wd:Q13371 .\nwd:Q429019 wdt:P108 wd:Q1343885 .\nwd:Q429019 wdt:P108 wd:Q168751 .\nwd:Q429019 wdt:P27 wd:Q96\n}",
        "questionWithBrackets": "Was a Mexican employee of [Harvard University] , [Monterrey Institute of Technology and Higher Education] , and [Duke University] [S\u00f3crates Rizzo]"
    },
    {
        "questionIdx": 90665,
        "questionPatternModEntities": "Was a Mexican parent of M2 M0",
        "questionTemplate": "Was a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M2\n}",
        "recursionDepth": 18,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q32210 wdt:P40|wdt:P355 wd:Q540953 .\nwd:Q32210 wdt:P27 wd:Q96\n}",
        "questionWithBrackets": "Was a Mexican parent of [Carmen Mondrag\u00f3n] [Manuel Mondrag\u00f3n]"
    },
    {
        "questionIdx": 90786,
        "questionPatternModEntities": "Was a Spanish Italian sibling of M1 M0",
        "questionTemplate": "Was a [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nFILTER ( M0 != M1 ) .\nM0 P0 M1 .\nM0 P1 M2 .\nM0 P1 M3\n}",
        "recursionDepth": 23,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nFILTER ( wd:Q356762 != wd:Q3893559 ) .\nwd:Q356762 wdt:P27 wd:Q38 .\nwd:Q356762 wdt:P27 wd:Q29 .\nwd:Q356762 wdt:P3373 wd:Q3893559\n}",
        "questionWithBrackets": "Was a Spanish Italian sibling of [Paola Domingu\u00edn] [Miguel Bos\u00e9]"
    },
    {
        "questionIdx": 91084,
        "questionPatternModEntities": "Was a Spanish sibling of M0 's sibling M1",
        "questionTemplate": "Was a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] 's [ROLE_SIMPLE] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( M1 != ?x0 ) .\nM1 P0 ?x0 .\nM1 P1 M2\n}",
        "recursionDepth": 22,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P3373 wd:Q78598 .\nFILTER ( ?x0 != wd:Q78598 ) .\nFILTER ( wd:Q150665 != ?x0 ) .\nwd:Q150665 wdt:P27 wd:Q29 .\nwd:Q150665 wdt:P3373 ?x0\n}",
        "questionWithBrackets": "Was a Spanish sibling of [Archduchess Maria Elisabeth of Austria] 's sibling [Charles VI, Holy Roman Emperor]"
    },
    {
        "questionIdx": 91090,
        "questionPatternModEntities": "Was a Spanish sibling of M1 M0",
        "questionTemplate": "Was a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nFILTER ( M0 != M1 ) .\nM0 P0 M1 .\nM0 P1 M2\n}",
        "recursionDepth": 18,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nFILTER ( wd:Q132738 != wd:Q106461014 ) .\nwd:Q132738 wdt:P27 wd:Q29 .\nwd:Q132738 wdt:P3373 wd:Q106461014\n}",
        "questionWithBrackets": "Was a Spanish sibling of [Francisco Javier Contador] [Alberto Contador]"
    },
    {
        "questionIdx": 91105,
        "questionPatternModEntities": "Was a Spanish spouse of M0 's spouse M1",
        "questionTemplate": "Was a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] 's [ROLE_SIMPLE] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( M1 != ?x0 ) .\nM1 P0 ?x0 .\nM1 P1 M2\n}",
        "recursionDepth": 22,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P26 wd:Q229076 .\nFILTER ( ?x0 != wd:Q229076 ) .\nFILTER ( wd:Q57651 != ?x0 ) .\nwd:Q57651 wdt:P27 wd:Q29 .\nwd:Q57651 wdt:P26 ?x0\n}",
        "questionWithBrackets": "Was a Spanish spouse of [Marie Louise d'Orl\u00e9ans] 's spouse [Maria Anna of Neuburg]"
    },
    {
        "questionIdx": 91148,
        "questionPatternModEntities": "Was a Swedish Italian sibling of M1 M0",
        "questionTemplate": "Was a [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nFILTER ( M0 != M1 ) .\nM0 P0 M1 .\nM0 P1 M2 .\nM0 P1 M3\n}",
        "recursionDepth": 23,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nFILTER ( wd:Q203840 != wd:Q508325 ) .\nwd:Q203840 wdt:P27 wd:Q38 .\nwd:Q203840 wdt:P27 wd:Q34 .\nwd:Q203840 wdt:P3373 wd:Q508325\n}",
        "questionWithBrackets": "Was a Swedish Italian sibling of [Pia Lindstr\u00f6m] [Isabella Rossellini]"
    },
    {
        "questionIdx": 91446,
        "questionPatternModEntities": "Was a Swedish sibling of M0 M2 's spouse",
        "questionTemplate": "Was a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P2 M2 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x0 != M2 )\n}",
        "recursionDepth": 22,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P27 wd:Q34 .\n?x0 wdt:P3373 wd:Q86959 .\n?x0 wdt:P26 wd:Q61873 .\nFILTER ( ?x0 != wd:Q61873 ) .\nFILTER ( ?x0 != wd:Q86959 )\n}",
        "questionWithBrackets": "Was a Swedish sibling of [Gerhard VI] [Dorothea of Brandenburg] 's spouse"
    },
    {
        "questionIdx": 91458,
        "questionPatternModEntities": "Was a Swedish spouse of M4 influenced by M0 , M1 , and M2",
        "questionTemplate": "Was a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] [VP_SIMPLE] by [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P1 M3 .\n?x0 P2 M4 .\nFILTER ( ?x0 != M4 )\n}",
        "recursionDepth": 30,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P737 wd:Q6527 .\n?x0 wdt:P737 wd:Q9358 .\n?x0 wdt:P737 wd:Q316045 .\n?x0 wdt:P27 wd:Q34 .\n?x0 wdt:P26 wd:Q435209 .\nFILTER ( ?x0 != wd:Q435209 )\n}",
        "questionWithBrackets": "Was a Swedish spouse of [Siri von Essen] influenced by [Georg Brandes] , [Jean-Jacques Rousseau] , and [Friedrich Nietzsche]"
    },
    {
        "questionIdx": 91466,
        "questionPatternModEntities": "Was a Swedish spouse of a employee of M0 , M1 , and M2 M3",
        "questionTemplate": "Was a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of a [ROLE_SIMPLE] of [entity] , [entity] , and [entity] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\nFILTER ( M3 != ?x0 ) .\nM3 P1 M4 .\nM3 P2 ?x0\n}",
        "recursionDepth": 31,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P108 wd:Q215363 .\n?x0 wdt:P108 wd:Q1466723 .\n?x0 wdt:P108 wd:Q1543058 .\nFILTER ( wd:Q299849 != ?x0 ) .\nwd:Q299849 wdt:P27 wd:Q34 .\nwd:Q299849 wdt:P26 ?x0\n}",
        "questionWithBrackets": "Was a Swedish spouse of a employee of [Sveriges Radio] , [TV4] , and [Sveriges Television] [Malin Birgerson]"
    },
    {
        "questionIdx": 91989,
        "questionPatternModEntities": "Was a child of M0 's employee M1",
        "questionTemplate": "Was a [ROLE_SIMPLE] of [entity] 's [ROLE_SIMPLE] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 ?x0\n}",
        "recursionDepth": 17,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P108 wd:Q15067369 .\nwd:Q2277744 wdt:P749 ?x0\n}",
        "questionWithBrackets": "Was a child of [Pierre Nanterme] 's employee [Avanade]"
    },
    {
        "questionIdx": 92002,
        "questionPatternModEntities": "Was a child of M0 's sibling M1",
        "questionTemplate": "Was a [ROLE_SIMPLE] of [entity] 's [ROLE_SIMPLE] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nM1 P1 ?x0\n}",
        "recursionDepth": 17,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P3373 wd:Q5082770 .\nFILTER ( ?x0 != wd:Q5082770 ) .\nwd:Q642212 wdt:P749 ?x0\n}",
        "questionWithBrackets": "Was a child of [Charles Sumner Woolworth] 's sibling [F. W. Woolworth Company]"
    },
    {
        "questionIdx": 92007,
        "questionPatternModEntities": "Was a child of M1 M0",
        "questionTemplate": "Was a [ROLE_SIMPLE] of [entity] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1\n}",
        "recursionDepth": 13,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q155573 wdt:P749 wd:Q67\n}",
        "questionWithBrackets": "Was a child of [Airbus] [Airbus Helicopters]"
    },
    {
        "questionIdx": 92030,
        "questionPatternModEntities": "Was a child of M0 a spouse of M1",
        "questionTemplate": "Was a [ROLE_SIMPLE] of [entity] a [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M1 )\n}",
        "recursionDepth": 19,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P749 wd:Q1089760 .\n?x0 wdt:P26 wd:Q76375112 .\nFILTER ( ?x0 != wd:Q76375112 )\n}",
        "questionWithBrackets": "Was a child of [Church Mission Society] a spouse of [Eliazbeth Fristan]"
    },
    {
        "questionIdx": 92031,
        "questionPatternModEntities": "Was a child of M1 influenced by M0",
        "questionTemplate": "Was a [ROLE_SIMPLE] of [entity] [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1\n}",
        "recursionDepth": 18,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P737 wd:Q149964 .\n?x0 wdt:P749 wd:Q8896\n}",
        "questionWithBrackets": "Was a child of [Council of the European Union] influenced by [Eurogroup]"
    },
    {
        "questionIdx": 92040,
        "questionPatternModEntities": "Was a child of M0 's spouse M1",
        "questionTemplate": "Was a [ROLE_SIMPLE] of [entity] 's [ROLE_SIMPLE] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nM1 P1 ?x0\n}",
        "recursionDepth": 17,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P26 wd:Q21157038 .\nFILTER ( ?x0 != wd:Q21157038 ) .\nwd:Q59918234 wdt:P749 ?x0\n}",
        "questionWithBrackets": "Was a child of [Clarisse Coudert] 's spouse [Conde Nast Johansens]"
    },
    {
        "questionIdx": 92041,
        "questionPatternModEntities": "Was a child of M0 founded by M1",
        "questionTemplate": "Was a [ROLE_SIMPLE] of [entity] [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1\n}",
        "recursionDepth": 18,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P112 wd:Q23 .\n?x0 wdt:P749 wd:Q308439\n}",
        "questionWithBrackets": "Was a child of [National Park Service] founded by [George Washington]"
    },
    {
        "questionIdx": 92100,
        "questionPatternModEntities": "Was a child of M0 M1 's spouse",
        "questionTemplate": "Was a [ROLE_SIMPLE] of [entity] [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M1 )\n}",
        "recursionDepth": 17,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P749 wd:Q1089760 .\n?x0 wdt:P26 wd:Q76375112 .\nFILTER ( ?x0 != wd:Q76375112 )\n}",
        "questionWithBrackets": "Was a child of [Church Mission Society] [Eliazbeth Fristan] 's spouse"
    },
    {
        "questionIdx": 95426,
        "questionPatternModEntities": "Was a female American employee of M1 M0",
        "questionTemplate": "Was a [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M2 .\nM0 P2 M3\n}",
        "recursionDepth": 23,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q11748 wdt:P108 wd:Q690079 .\nwd:Q11748 wdt:P21 wd:Q6581072 .\nwd:Q11748 wdt:P27 wd:Q30\n}",
        "questionWithBrackets": "Was a female American employee of [Digital Equipment Corporation] [Anna Karlin]"
    },
    {
        "questionIdx": 95439,
        "questionPatternModEntities": "Was a female American spouse of M3 M0",
        "questionTemplate": "Was a [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nFILTER ( M0 != M3 ) .\nM0 P0 M1 .\nM0 P1 M2 .\nM0 P2 M3\n}",
        "recursionDepth": 23,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nFILTER ( wd:Q11637 != wd:Q937852 ) .\nwd:Q11637 wdt:P21 wd:Q6581072 .\nwd:Q11637 wdt:P27 wd:Q30 .\nwd:Q11637 wdt:P26 wd:Q937852\n}",
        "questionWithBrackets": "Was a female American spouse of [David Rose] [Judy Garland]"
    },
    {
        "questionIdx": 95542,
        "questionPatternModEntities": "Was a female German employee of M1 , M2 , and M3 M0",
        "questionTemplate": "Was a [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] , [entity] , and [entity] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P0 M3 .\nM0 P1 M4 .\nM0 P2 M5\n}",
        "recursionDepth": 30,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q16477 wdt:P108 wd:Q51985 .\nwd:Q16477 wdt:P108 wd:Q32120 .\nwd:Q16477 wdt:P108 wd:Q273263 .\nwd:Q16477 wdt:P21 wd:Q6581072 .\nwd:Q16477 wdt:P27 wd:Q183\n}",
        "questionWithBrackets": "Was a female German employee of [Technical University of Berlin] , [RWTH Aachen University] , and [University of Halle-Wittenberg] [Dorothea Wagner]"
    },
    {
        "questionIdx": 95640,
        "questionPatternModEntities": "Was a female actor of M0 's actor M1",
        "questionTemplate": "Was a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] 's [ROLE_SIMPLE] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P0 ?x0 .\nM1 P1 M2\n}",
        "recursionDepth": 22,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P453 wd:Q105565656 .\nwd:Q105565856 wdt:P453 ?x0 .\nwd:Q105565856 wdt:P21 wd:Q6581072\n}",
        "questionWithBrackets": "Was a female actor of [No label defined] 's actor [No label defined]"
    },
    {
        "questionIdx": 95651,
        "questionPatternModEntities": "Was a female actor of M0 M1 's actor",
        "questionTemplate": "Was a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P1 M2\n}",
        "recursionDepth": 22,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P453 wd:Q207990 .\n?x0 wdt:P453 wd:Q50386864 .\n?x0 wdt:P21 wd:Q6581072\n}",
        "questionWithBrackets": "Was a female actor of [Cio-Cio-san (Madama Butterfly)] [Turandot] 's actor"
    },
    {
        "questionIdx": 95814,
        "questionPatternModEntities": "Was a female employee of M1 and M2 M0",
        "questionTemplate": "Was a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] and [entity] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P1 M3\n}",
        "recursionDepth": 22,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q4994613 wdt:P108 wd:Q95 .\nwd:Q4994613 wdt:P108 wd:Q2283 .\nwd:Q4994613 wdt:P21 wd:Q6581072\n}",
        "questionWithBrackets": "Was a female employee of [Microsoft] and [Google] [Malou Aamund]"
    },
    {
        "questionIdx": 95815,
        "questionPatternModEntities": "Was a female employee of M1 M0",
        "questionTemplate": "Was a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M2\n}",
        "recursionDepth": 18,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q4768852 wdt:P108 wd:Q95 .\nwd:Q4768852 wdt:P21 wd:Q6581072\n}",
        "questionWithBrackets": "Was a female employee of [Google] [Anne Toth]"
    },
    {
        "questionIdx": 95818,
        "questionPatternModEntities": "Was a female employee of M0 influenced by M1",
        "questionTemplate": "Was a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P2 M2\n}",
        "recursionDepth": 23,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P737 wd:Q636 .\n?x0 wdt:P108 wd:Q740308 .\n?x0 wdt:P21 wd:Q6581072\n}",
        "questionWithBrackets": "Was a female employee of [UNICEF] influenced by [Kate Bush]"
    },
    {
        "questionIdx": 96111,
        "questionPatternModEntities": "Was a female sibling of M0 influenced by M1",
        "questionTemplate": "Was a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P2 M2 .\nFILTER ( ?x0 != M0 )\n}",
        "recursionDepth": 23,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P737 wd:Q692 .\n?x0 wdt:P21 wd:Q6581072 .\n?x0 wdt:P3373 wd:Q6372006 .\nFILTER ( ?x0 != wd:Q6372006 )\n}",
        "questionWithBrackets": "Was a female sibling of [Karl Kroeber] influenced by [William Shakespeare]"
    },
    {
        "questionIdx": 96112,
        "questionPatternModEntities": "Was a female sibling of M0 influenced by M1 and influenced by M2 , M3 , and M4",
        "questionTemplate": "Was a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] [VP_SIMPLE] by [entity] and [VP_SIMPLE] by [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\n?x0 P1 M3 .\n?x0 P1 M4 .\n?x0 P2 M5 .\nFILTER ( ?x0 != M0 )\n}",
        "recursionDepth": 41,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P737 wd:Q692 .\n?x0 wdt:P737 wd:Q458658 .\n?x0 wdt:P737 wd:Q943567 .\n?x0 wdt:P737 wd:Q79969 .\n?x0 wdt:P21 wd:Q6581072 .\n?x0 wdt:P3373 wd:Q6372006 .\nFILTER ( ?x0 != wd:Q6372006 )\n}",
        "questionWithBrackets": "Was a female sibling of [Karl Kroeber] influenced by [Emma Goldman] and influenced by [Paul Goodman] , [William Shakespeare] , and [Edward Plunkett, 18th Baron of Dunsany]"
    },
    {
        "questionIdx": 96117,
        "questionPatternModEntities": "Was a female sibling of M1 M0",
        "questionTemplate": "Was a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nFILTER ( M0 != M1 ) .\nM0 P0 M1 .\nM0 P1 M2\n}",
        "recursionDepth": 18,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nFILTER ( wd:Q131324 != wd:Q2831 ) .\nwd:Q131324 wdt:P21 wd:Q6581072 .\nwd:Q131324 wdt:P3373 wd:Q2831\n}",
        "questionWithBrackets": "Was a female sibling of [Michael Jackson] [Janet Jackson]"
    },
    {
        "questionIdx": 96119,
        "questionPatternModEntities": "Was a female sibling of M2 's employee influenced by M0",
        "questionTemplate": "Was a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] 's [ROLE_SIMPLE] [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x0 P1 M0 .\n?x0 P2 M1 .\n?x1 P3 M2 .\nFILTER ( ?x0 != ?x1 )\n}",
        "recursionDepth": 27,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P737 wd:Q255 .\n?x0 wdt:P21 wd:Q6581072 .\n?x0 wdt:P3373 ?x1 .\n?x1 wdt:P108 wd:Q312578 .\nFILTER ( ?x0 != ?x1 )\n}",
        "questionWithBrackets": "Was a female sibling of [University of Music and Theatre Leipzig] 's employee influenced by [Ludwig van Beethoven]"
    },
    {
        "questionIdx": 96121,
        "questionPatternModEntities": "Was a female sibling of M0 M1 's actor",
        "questionTemplate": "Was a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P2 M2 .\nFILTER ( ?x0 != M0 )\n}",
        "recursionDepth": 22,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P453 wd:Q222573 .\n?x0 wdt:P21 wd:Q6581072 .\n?x0 wdt:P3373 wd:Q203236 .\nFILTER ( ?x0 != wd:Q203236 )\n}",
        "questionWithBrackets": "Was a female sibling of [Pasipha\u00eb] [femme fatale] 's actor"
    },
    {
        "questionIdx": 96124,
        "questionPatternModEntities": "Was a female sibling of M0 's employee M1",
        "questionTemplate": "Was a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] 's [ROLE_SIMPLE] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( M1 != ?x0 ) .\nM1 P1 ?x0 .\nM1 P2 M2\n}",
        "recursionDepth": 22,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P108 wd:Q35794 .\nFILTER ( wd:Q276241 != ?x0 ) .\nwd:Q276241 wdt:P21 wd:Q6581072 .\nwd:Q276241 wdt:P3373 ?x0\n}",
        "questionWithBrackets": "Was a female sibling of [University of Cambridge] 's employee [Elizabeth Medora Leigh]"
    },
    {
        "questionIdx": 96131,
        "questionPatternModEntities": "Was a female sibling of M0 's actor M1",
        "questionTemplate": "Was a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] 's [ROLE_SIMPLE] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( M1 != ?x0 ) .\nM1 P1 ?x0 .\nM1 P2 M2\n}",
        "recursionDepth": 22,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P453 wd:Q5815108 .\nFILTER ( wd:Q3756757 != ?x0 ) .\nwd:Q3756757 wdt:P21 wd:Q6581072 .\nwd:Q3756757 wdt:P3373 ?x0\n}",
        "questionWithBrackets": "Was a female sibling of [Duke of Mantua] 's actor [Gabriella Pavarotti]"
    },
    {
        "questionIdx": 96150,
        "questionPatternModEntities": "Was a female spouse and sibling of M1 M0",
        "questionTemplate": "Was a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] and [ROLE_SIMPLE] of [entity] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nFILTER ( M0 != M1 ) .\nFILTER ( M0 != M1 ) .\nM0 P0 M1 .\nM0 P1 M2 .\nM0 P2 M1\n}",
        "recursionDepth": 23,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nFILTER ( wd:Q40023 != wd:Q3340 ) .\nFILTER ( wd:Q40023 != wd:Q3340 ) .\nwd:Q40023 wdt:P21 wd:Q6581072 .\nwd:Q40023 wdt:P3373 wd:Q3340 .\nwd:Q40023 wdt:P26 wd:Q3340\n}",
        "questionWithBrackets": "Was a female spouse and sibling of [Ptolemy IX Lathyros] [Cleopatra IV of Egypt]"
    },
    {
        "questionIdx": 96156,
        "questionPatternModEntities": "Was a female spouse of M6 influenced by M0 , M1 , and M2 , influenced by M3 , and influenced by M4",
        "questionTemplate": "Was a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] [VP_SIMPLE] by [entity] , [entity] , and [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P0 M3 .\n?x0 P0 M4 .\n?x0 P1 M5 .\n?x0 P2 M6 .\nFILTER ( ?x0 != M6 )\n}",
        "recursionDepth": 50,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P737 wd:Q868 .\n?x0 wdt:P737 wd:Q79759 .\n?x0 wdt:P737 wd:Q692 .\n?x0 wdt:P737 wd:Q1067 .\n?x0 wdt:P737 wd:Q1290 .\n?x0 wdt:P21 wd:Q6581072 .\n?x0 wdt:P26 wd:Q1047458 .\nFILTER ( ?x0 != wd:Q1047458 )\n}",
        "questionWithBrackets": "Was a female spouse of [Casimir Dudevant] influenced by [Blaise Pascal] , [John Milton] , and [Dante Alighieri] , influenced by [William Shakespeare] , and influenced by [Aristotle]"
    },
    {
        "questionIdx": 96165,
        "questionPatternModEntities": "Was a female spouse of M2 's spouse M1 's spouse",
        "questionTemplate": "Was a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] 's [ROLE_SIMPLE] [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 ?x1 .\n?x0 P1 M1 .\n?x1 P1 M2 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x0 != M1 ) .\nFILTER ( ?x1 != M2 )\n}",
        "recursionDepth": 26,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P21 wd:Q6581072 .\n?x0 wdt:P26 ?x1 .\n?x0 wdt:P26 wd:Q1411 .\n?x1 wdt:P26 wd:Q154732 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x0 != wd:Q1411 ) .\nFILTER ( ?x1 != wd:Q154732 )\n}",
        "questionWithBrackets": "Was a female spouse of [Agrippina the Younger] 's spouse [Claudius] 's spouse"
    },
    {
        "questionIdx": 96166,
        "questionPatternModEntities": "Was a female spouse of M2 M0 's spouse and sibling",
        "questionTemplate": "Was a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] [entity] 's [ROLE_SIMPLE] and [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P2 M0 .\n?x0 P2 M2 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x0 != M2 )\n}",
        "recursionDepth": 27,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P21 wd:Q6581072 .\n?x0 wdt:P3373 wd:Q3340 .\n?x0 wdt:P26 wd:Q3340 .\n?x0 wdt:P26 wd:Q296446 .\nFILTER ( ?x0 != wd:Q3340 ) .\nFILTER ( ?x0 != wd:Q3340 ) .\nFILTER ( ?x0 != wd:Q296446 )\n}",
        "questionWithBrackets": "Was a female spouse of [Antiochus IX Cyzicenus] [Ptolemy IX Lathyros] 's spouse and sibling"
    },
    {
        "questionIdx": 96170,
        "questionPatternModEntities": "Was a female spouse of M2 M0",
        "questionTemplate": "Was a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nFILTER ( M0 != M2 ) .\nM0 P0 M1 .\nM0 P1 M2\n}",
        "recursionDepth": 18,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nFILTER ( wd:Q75789 != wd:Q1511 ) .\nwd:Q75789 wdt:P21 wd:Q6581072 .\nwd:Q75789 wdt:P26 wd:Q1511\n}",
        "questionWithBrackets": "Was a female spouse of [Richard Wagner] [Cosima Wagner]"
    },
    {
        "questionIdx": 96173,
        "questionPatternModEntities": "Was a female spouse of M3 influenced by M0 and M1",
        "questionTemplate": "Was a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P1 M2 .\n?x0 P2 M3 .\nFILTER ( ?x0 != M3 )\n}",
        "recursionDepth": 27,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P737 wd:Q255 .\n?x0 wdt:P737 wd:Q46096 .\n?x0 wdt:P21 wd:Q6581072 .\n?x0 wdt:P26 wd:Q560757 .\nFILTER ( ?x0 != wd:Q560757 )\n}",
        "questionWithBrackets": "Was a female spouse of [Wilhelm Hensel] influenced by [Ludwig van Beethoven] and [Felix Mendelssohn]"
    },
    {
        "questionIdx": 96177,
        "questionPatternModEntities": "Was a female spouse of M1 a spouse of M2",
        "questionTemplate": "Was a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] a [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\nFILTER ( ?x0 != M1 ) .\nFILTER ( ?x0 != M2 )\n}",
        "recursionDepth": 24,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P21 wd:Q6581072 .\n?x0 wdt:P26 wd:Q1423 .\n?x0 wdt:P26 wd:Q1159574 .\nFILTER ( ?x0 != wd:Q1423 ) .\nFILTER ( ?x0 != wd:Q1159574 )\n}",
        "questionWithBrackets": "Was a female spouse of [Domitian] a spouse of [Lucius Aelius Plautius Lamia Aelianus]"
    },
    {
        "questionIdx": 96178,
        "questionPatternModEntities": "Was a female spouse of M1 M2 's spouse",
        "questionTemplate": "Was a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\nFILTER ( ?x0 != M1 ) .\nFILTER ( ?x0 != M2 )\n}",
        "recursionDepth": 22,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P21 wd:Q6581072 .\n?x0 wdt:P26 wd:Q2186 .\n?x0 wdt:P26 wd:Q2739033 .\nFILTER ( ?x0 != wd:Q2186 ) .\nFILTER ( ?x0 != wd:Q2739033 )\n}",
        "questionWithBrackets": "Was a female spouse of [Hostus Hostilius] [Romulus] 's spouse"
    },
    {
        "questionIdx": 96180,
        "questionPatternModEntities": "Was a female spouse of M3 influenced by M0 and influenced by M1",
        "questionTemplate": "Was a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] [VP_SIMPLE] by [entity] and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P1 M2 .\n?x0 P2 M3 .\nFILTER ( ?x0 != M3 )\n}",
        "recursionDepth": 34,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P737 wd:Q868 .\n?x0 wdt:P737 wd:Q692 .\n?x0 wdt:P21 wd:Q6581072 .\n?x0 wdt:P26 wd:Q1047458 .\nFILTER ( ?x0 != wd:Q1047458 )\n}",
        "questionWithBrackets": "Was a female spouse of [Casimir Dudevant] influenced by [Aristotle] and influenced by [William Shakespeare]"
    },
    {
        "questionIdx": 101713,
        "questionPatternModEntities": "Was a male Chinese British spouse of M4 M0",
        "questionTemplate": "Was a [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nFILTER ( M0 != M4 ) .\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P1 M3 .\nM0 P2 M4\n}",
        "recursionDepth": 28,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nFILTER ( wd:Q1196262 != wd:Q3370137 ) .\nwd:Q1196262 wdt:P21 wd:Q6581097 .\nwd:Q1196262 wdt:P27 wd:Q145 .\nwd:Q1196262 wdt:P27 wd:Q148 .\nwd:Q1196262 wdt:P26 wd:Q3370137\n}",
        "questionWithBrackets": "Was a male Chinese British spouse of [Patsy Toh] [Fou Ts'ong]"
    },
    {
        "questionIdx": 101763,
        "questionPatternModEntities": "Was a male French Swedish parent of M4 M0",
        "questionTemplate": "Was a [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P1 M3 .\nM0 P2 M4\n}",
        "recursionDepth": 28,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q52926 wdt:P40|wdt:P355 wd:Q361286 .\nwd:Q52926 wdt:P21 wd:Q6581097 .\nwd:Q52926 wdt:P27 wd:Q34 .\nwd:Q52926 wdt:P27 wd:Q142\n}",
        "questionWithBrackets": "Was a male French Swedish parent of [Prince Gustaf, Duke of Uppland] [Oscar I of Sweden]"
    },
    {
        "questionIdx": 101912,
        "questionPatternModEntities": "Was a male actor of M1 a sibling of M0",
        "questionTemplate": "Was a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] a [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P2 M2 .\nFILTER ( ?x0 != M0 )\n}",
        "recursionDepth": 24,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P453 wd:Q5815108 .\n?x0 wdt:P21 wd:Q6581097 .\n?x0 wdt:P3373 wd:Q3756757 .\nFILTER ( ?x0 != wd:Q3756757 )\n}",
        "questionWithBrackets": "Was a male actor of [Duke of Mantua] a sibling of [Gabriella Pavarotti]"
    },
    {
        "questionIdx": 102414,
        "questionPatternModEntities": "Was a male sibling and spouse of M1 M0",
        "questionTemplate": "Was a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] and [ROLE_SIMPLE] of [entity] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nFILTER ( M0 != M1 ) .\nFILTER ( M0 != M1 ) .\nM0 P0 M1 .\nM0 P1 M2 .\nM0 P2 M1\n}",
        "recursionDepth": 23,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nFILTER ( wd:Q39938 != wd:Q635 ) .\nFILTER ( wd:Q39938 != wd:Q635 ) .\nwd:Q39938 wdt:P21 wd:Q6581097 .\nwd:Q39938 wdt:P3373 wd:Q635 .\nwd:Q39938 wdt:P26 wd:Q635\n}",
        "questionWithBrackets": "Was a male sibling and spouse of [Cleopatra] [Ptolemy XIII Theos Philopator]"
    },
    {
        "questionIdx": 102448,
        "questionPatternModEntities": "Was a male spouse of M2 M0",
        "questionTemplate": "Was a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nFILTER ( M0 != M2 ) .\nM0 P0 M1 .\nM0 P1 M2\n}",
        "recursionDepth": 18,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nFILTER ( wd:Q128267 != wd:Q345 ) .\nwd:Q128267 wdt:P21 wd:Q6581097 .\nwd:Q128267 wdt:P26 wd:Q345\n}",
        "questionWithBrackets": "Was a male spouse of [Virgin Mary] [Joseph]"
    },
    {
        "questionIdx": 102451,
        "questionPatternModEntities": "Was a male spouse of M0 's spouse M1",
        "questionTemplate": "Was a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] 's [ROLE_SIMPLE] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( M1 != ?x0 ) .\nM1 P0 ?x0 .\nM1 P1 M2\n}",
        "recursionDepth": 22,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P26 wd:Q2628 .\nFILTER ( ?x0 != wd:Q2628 ) .\nFILTER ( wd:Q110966 != ?x0 ) .\nwd:Q110966 wdt:P21 wd:Q6581097 .\nwd:Q110966 wdt:P26 ?x0\n}",
        "questionWithBrackets": "Was a male spouse of [Walter Ulbricht] 's spouse [Erich Wendt]"
    },
    {
        "questionIdx": 102452,
        "questionPatternModEntities": "Was a male spouse of M2 a sibling of M0",
        "questionTemplate": "Was a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] a [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P2 M2 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x0 != M2 )\n}",
        "recursionDepth": 24,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P21 wd:Q6581097 .\n?x0 wdt:P3373 wd:Q3301 .\n?x0 wdt:P26 wd:Q2823907 .\nFILTER ( ?x0 != wd:Q3301 ) .\nFILTER ( ?x0 != wd:Q2823907 )\n}",
        "questionWithBrackets": "Was a male spouse of [Adaltruda] a sibling of [Charles Martel]"
    },
    {
        "questionIdx": 102455,
        "questionPatternModEntities": "Was a male spouse of M0 's parent and spouse M1",
        "questionTemplate": "Was a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] 's [ROLE_SIMPLE] and [ROLE_SIMPLE] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M0 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( M1 != ?x0 ) .\nM1 P1 ?x0 .\nM1 P2 M2\n}",
        "recursionDepth": 27,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q9304 .\n?x0 wdt:P26 wd:Q9304 .\nFILTER ( ?x0 != wd:Q9304 ) .\nFILTER ( wd:Q9295 != ?x0 ) .\nwd:Q9295 wdt:P21 wd:Q6581097 .\nwd:Q9295 wdt:P26 ?x0\n}",
        "questionWithBrackets": "Was a male spouse of [Dayan Khan] 's parent and spouse [Manduul Khan]"
    },
    {
        "questionIdx": 102465,
        "questionPatternModEntities": "Was a male spouse of M0 's sibling and spouse M1",
        "questionTemplate": "Was a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] 's [ROLE_SIMPLE] and [ROLE_SIMPLE] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M0 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x0 != M0 ) .\nFILTER ( M1 != ?x0 ) .\nM1 P1 ?x0 .\nM1 P2 M2\n}",
        "recursionDepth": 27,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P3373 wd:Q3340 .\n?x0 wdt:P26 wd:Q3340 .\nFILTER ( ?x0 != wd:Q3340 ) .\nFILTER ( ?x0 != wd:Q3340 ) .\nFILTER ( wd:Q296446 != ?x0 ) .\nwd:Q296446 wdt:P21 wd:Q6581097 .\nwd:Q296446 wdt:P26 ?x0\n}",
        "questionWithBrackets": "Was a male spouse of [Ptolemy IX Lathyros] 's sibling and spouse [Antiochus IX Cyzicenus]"
    },
    {
        "questionIdx": 102542,
        "questionPatternModEntities": "Was a parent and sibling of M0 M1 's spouse",
        "questionTemplate": "Was a [ROLE_SIMPLE] and [ROLE_SIMPLE] of [entity] [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M0 .\n?x0 P2 M1 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x0 != M1 )\n}",
        "recursionDepth": 22,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q493 .\n?x0 wdt:P3373 wd:Q493 .\n?x0 wdt:P26 wd:Q17148576 .\nFILTER ( ?x0 != wd:Q17148576 ) .\nFILTER ( ?x0 != wd:Q493 )\n}",
        "questionWithBrackets": "Was a parent and sibling of [Arthur Rimbaud] [Vitalie Rimbaud] 's spouse"
    },
    {
        "questionIdx": 102584,
        "questionPatternModEntities": "Was a parent of M1 M0 's sibling",
        "questionTemplate": "Was a [ROLE_SIMPLE] of [entity] [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M0 )\n}",
        "recursionDepth": 17,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q17130893 .\n?x0 wdt:P3373 wd:Q498 .\nFILTER ( ?x0 != wd:Q498 )\n}",
        "questionWithBrackets": "Was a parent of [Waldemar Hermann Schmettau] [Ulrich Fr\u00e9d\u00e9ric Woldemar, Comte de Lowendal] 's sibling"
    },
    {
        "questionIdx": 102587,
        "questionPatternModEntities": "Was a parent of M0 M1 's spouse",
        "questionTemplate": "Was a [ROLE_SIMPLE] of [entity] [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M1 )\n}",
        "recursionDepth": 17,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q135687 .\n?x0 wdt:P26 wd:Q91 .\nFILTER ( ?x0 != wd:Q91 )\n}",
        "questionWithBrackets": "Was a parent of [Tad Lincoln] [Abraham Lincoln] 's spouse"
    },
    {
        "questionIdx": 102599,
        "questionPatternModEntities": "Was a parent of M1 's employee M0 's spouse",
        "questionTemplate": "Was a [ROLE_SIMPLE] of [entity] 's [ROLE_SIMPLE] [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x0 P1 M0 .\n?x1 P2 M1 .\nFILTER ( ?x0 != M0 )\n}",
        "recursionDepth": 21,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 ?x1 .\n?x0 wdt:P26 wd:Q937 .\n?x1 wdt:P108 wd:Q168756 .\nFILTER ( ?x0 != wd:Q937 )\n}",
        "questionWithBrackets": "Was a parent of [University of California, Berkeley] 's employee [Albert Einstein] 's spouse"
    },
    {
        "questionIdx": 102645,
        "questionPatternModEntities": "Was a parent of M1 a sibling and spouse of M0",
        "questionTemplate": "Was a [ROLE_SIMPLE] of [entity] a [ROLE_SIMPLE] and [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P2 M0 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x0 != M0 )\n}",
        "recursionDepth": 24,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q4064 .\n?x0 wdt:P3373 wd:Q1532 .\n?x0 wdt:P26 wd:Q1532 .\nFILTER ( ?x0 != wd:Q1532 ) .\nFILTER ( ?x0 != wd:Q1532 )\n}",
        "questionWithBrackets": "Was a parent of [Ramesses V] a sibling and spouse of [Ramesses IV]"
    },
    {
        "questionIdx": 102662,
        "questionPatternModEntities": "Was a parent of M1 a sibling of M0",
        "questionTemplate": "Was a [ROLE_SIMPLE] of [entity] a [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M0 )\n}",
        "recursionDepth": 19,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q1027587 .\n?x0 wdt:P3373 wd:Q5659 .\nFILTER ( ?x0 != wd:Q5659 )\n}",
        "questionWithBrackets": "Was a parent of [Robert VII, Lord of B\u00e9thune] a sibling of [Conon de B\u00e9thune]"
    },
    {
        "questionIdx": 102664,
        "questionPatternModEntities": "Was a parent of M0 's spouse M1",
        "questionTemplate": "Was a [ROLE_SIMPLE] of [entity] 's [ROLE_SIMPLE] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nM1 P1 ?x0\n}",
        "recursionDepth": 17,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P26 wd:Q1405 .\nFILTER ( ?x0 != wd:Q1405 ) .\nwd:Q1159617 wdt:P40|wdt:P355 ?x0\n}",
        "questionWithBrackets": "Was a parent of [Augustus] 's spouse [Lucius Scribonius Libo]"
    },
    {
        "questionIdx": 102688,
        "questionPatternModEntities": "Was a parent of M1 a actor of M0",
        "questionTemplate": "Was a [ROLE_SIMPLE] of [entity] a [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1\n}",
        "recursionDepth": 19,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P453 wd:Q2713628 .\n?x0 wdt:P40|wdt:P355 wd:Q3821810\n}",
        "questionWithBrackets": "Was a parent of [Mar\u00eda Abradelo] a actor of [Christine Daa\u00e9]"
    },
    {
        "questionIdx": 102692,
        "questionPatternModEntities": "Was a parent of M0 's Swedish employee M2",
        "questionTemplate": "Was a [ROLE_SIMPLE] of [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nM2 P2 ?x0\n}",
        "recursionDepth": 22,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P108 wd:Q34433 .\n?x0 wdt:P27 wd:Q34 .\nwd:Q24255440 wdt:P40|wdt:P355 ?x0\n}",
        "questionWithBrackets": "Was a parent of [University of Oxford] 's Swedish employee [Eduard Cassirer]"
    },
    {
        "questionIdx": 102717,
        "questionPatternModEntities": "Was a parent of M0 a spouse and sibling of a spouse and sibling of M1",
        "questionTemplate": "Was a [ROLE_SIMPLE] of [entity] a [ROLE_SIMPLE] and [ROLE_SIMPLE] of a [ROLE_SIMPLE] and [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x0 P1 M0 .\n?x0 P2 ?x1 .\n?x1 P0 M1 .\n?x1 P2 M1 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x1 != M1 ) .\nFILTER ( ?x1 != M1 )\n}",
        "recursionDepth": 35,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q231688 .\n?x0 wdt:P3373 ?x1 .\n?x0 wdt:P26 ?x1 .\n?x1 wdt:P3373 wd:Q40023 .\n?x1 wdt:P26 wd:Q40023 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x1 != wd:Q40023 ) .\nFILTER ( ?x1 != wd:Q40023 )\n}",
        "questionWithBrackets": "Was a parent of [Berenice III of Egypt] a spouse and sibling of a spouse and sibling of [Cleopatra IV of Egypt]"
    },
    {
        "questionIdx": 102746,
        "questionPatternModEntities": "Was a parent of M6 employed by M0 and M1 , employed by M2 and M3 , and employed by M4 and M5",
        "questionTemplate": "Was a [ROLE_SIMPLE] of [entity] [VP_SIMPLE] by [entity] and [entity] , [VP_SIMPLE] by [entity] and [entity] , and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P0 M3 .\n?x0 P0 M4 .\n?x0 P0 M5 .\n?x0 P1 M6\n}",
        "recursionDepth": 50,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q468357 .\n?x0 wdt:P108 wd:Q70 .\n?x0 wdt:P108 wd:Q708038 .\n?x0 wdt:P108 wd:Q685539 .\n?x0 wdt:P108 wd:Q152087 .\n?x0 wdt:P108 wd:Q11942 .\n?x0 wdt:P108 wd:Q168756\n}",
        "questionWithBrackets": "Was a parent of [Lieserl (Einstein)] employed by [Bern] and [Humboldt University of Berlin] , employed by [University of California, Berkeley] and [Swiss Federal Institute of Intellectual Property] , and employed by [Kaiser Wilhelm Society] and [ETH Z\u00fcrich]"
    },
    {
        "questionIdx": 102869,
        "questionPatternModEntities": "Was a parent of a sibling of M0 M1",
        "questionTemplate": "Was a [ROLE_SIMPLE] of a [ROLE_SIMPLE] of [entity] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nM1 P1 ?x0\n}",
        "recursionDepth": 19,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P3373 wd:Q3911 .\nFILTER ( ?x0 != wd:Q3911 ) .\nwd:Q81179 wdt:P40|wdt:P355 ?x0\n}",
        "questionWithBrackets": "Was a parent of a sibling of [Albert II of Belgium] [Lilian, Princess of R\u00e9thy]"
    },
    {
        "questionIdx": 102898,
        "questionPatternModEntities": "Was a parent , sibling , and spouse of M0 M1 's sibling",
        "questionTemplate": "Was a [ROLE_SIMPLE] , [ROLE_SIMPLE] , and [ROLE_SIMPLE] of [entity] [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P1 M0 .\n?x0 P2 M0 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x0 != M1 )\n}",
        "recursionDepth": 26,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q443473 .\n?x0 wdt:P3373 wd:Q273990 .\n?x0 wdt:P3373 wd:Q443473 .\n?x0 wdt:P26 wd:Q443473 .\nFILTER ( ?x0 != wd:Q273990 ) .\nFILTER ( ?x0 != wd:Q443473 ) .\nFILTER ( ?x0 != wd:Q443473 )\n}",
        "questionWithBrackets": "Was a parent , sibling , and spouse of [Henutmire] [Princess Tia] 's sibling"
    },
    {
        "questionIdx": 102899,
        "questionPatternModEntities": "Was a parent , sibling , and spouse of M1 M0",
        "questionTemplate": "Was a [ROLE_SIMPLE] , [ROLE_SIMPLE] , and [ROLE_SIMPLE] of [entity] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nFILTER ( M0 != M1 ) .\nFILTER ( M0 != M1 ) .\nM0 P0 M1 .\nM0 P1 M1 .\nM0 P2 M1\n}",
        "recursionDepth": 22,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nFILTER ( wd:Q1523 != wd:Q443473 ) .\nFILTER ( wd:Q1523 != wd:Q443473 ) .\nwd:Q1523 wdt:P40|wdt:P355 wd:Q443473 .\nwd:Q1523 wdt:P3373 wd:Q443473 .\nwd:Q1523 wdt:P26 wd:Q443473\n}",
        "questionWithBrackets": "Was a parent , sibling , and spouse of [Henutmire] [Ramesses II]"
    },
    {
        "questionIdx": 103804,
        "questionPatternModEntities": "Was a prequel of M0 written by , directed by , and edited by M1 's sibling",
        "questionTemplate": "Was a [ROLE_SIMPLE] of [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x0 P3 ?x1 .\n?x1 P4 M1 .\nFILTER ( ?x1 != M1 )\n}",
        "recursionDepth": 36,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P57 ?x1 .\n?x0 wdt:P1040 ?x1 .\n?x0 wdt:P156 wd:Q1052975 .\n?x0 wdt:P58 ?x1 .\n?x1 wdt:P3373 wd:Q5616143 .\nFILTER ( ?x1 != wd:Q5616143 )\n}",
        "questionWithBrackets": "Was a prequel of [Cell 211] written by , directed by , and edited by [Guillermo Fesser] 's sibling"
    },
    {
        "questionIdx": 103806,
        "questionPatternModEntities": "Was a prequel of M0 produced by M1",
        "questionTemplate": "Was a [ROLE_SIMPLE] of [entity] [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1\n}",
        "recursionDepth": 18,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P162|wdt:P272 wd:Q1203 .\n?x0 wdt:P156 wd:Q1088534\n}",
        "questionWithBrackets": "Was a prequel of [Shaved Fish] produced by [John Lennon]"
    },
    {
        "questionIdx": 103808,
        "questionPatternModEntities": "Was a prequel of M0 directed by M1 and M2",
        "questionTemplate": "Was a [ROLE_SIMPLE] of [entity] [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P1 M2\n}",
        "recursionDepth": 22,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P57 wd:Q2071 .\n?x0 wdt:P57 wd:Q778585 .\n?x0 wdt:P156 wd:Q1140578\n}",
        "questionWithBrackets": "Was a prequel of [Twin Peaks: Fire Walk with Me] directed by [David Lynch] and [Mark Frost]"
    },
    {
        "questionIdx": 103811,
        "questionPatternModEntities": "Was a prequel of M0 written by M3 , M4 , M5 , and M6 and executive produced by M1 and M2",
        "questionTemplate": "Was a [ROLE_SIMPLE] of [entity] [VP_SIMPLE] by [entity] , [entity] , [entity] , and [entity] and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\n?x0 P2 M3 .\n?x0 P2 M4 .\n?x0 P2 M5 .\n?x0 P2 M6\n}",
        "recursionDepth": 44,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P1431 wd:Q8877 .\n?x0 wdt:P1431 wd:Q1971768 .\n?x0 wdt:P156 wd:Q947737 .\n?x0 wdt:P58 wd:Q942914 .\n?x0 wdt:P58 wd:Q943506 .\n?x0 wdt:P58 wd:Q720293 .\n?x0 wdt:P58 wd:Q15433295\n}",
        "questionWithBrackets": "Was a prequel of [The Legend of Zorro] written by [David S. Ward] , [John Eskow] , [Terry Rossio] , and [Ted Elliott] and executive produced by [Walter F. Parkes] and [Steven Spielberg]"
    },
    {
        "questionIdx": 103812,
        "questionPatternModEntities": "Was a prequel of M0 written by , edited by , and directed by M1 , M2 , M3 , and M4",
        "questionTemplate": "Was a [ROLE_SIMPLE] of [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity] , [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\n?x0 P1 M3 .\n?x0 P1 M4 .\n?x0 P2 M1 .\n?x0 P2 M2 .\n?x0 P2 M3 .\n?x0 P2 M4 .\n?x0 P3 M1 .\n?x0 P3 M2 .\n?x0 P3 M3 .\n?x0 P3 M4\n}",
        "recursionDepth": 42,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P57 wd:Q5836844 .\n?x0 wdt:P57 wd:Q4022902 .\n?x0 wdt:P57 wd:Q4023328 .\n?x0 wdt:P57 wd:Q5658534 .\n?x0 wdt:P1040 wd:Q5836844 .\n?x0 wdt:P1040 wd:Q4022902 .\n?x0 wdt:P1040 wd:Q4023328 .\n?x0 wdt:P1040 wd:Q5658534 .\n?x0 wdt:P156 wd:Q18207699 .\n?x0 wdt:P58 wd:Q5836844 .\n?x0 wdt:P58 wd:Q4022902 .\n?x0 wdt:P58 wd:Q4023328 .\n?x0 wdt:P58 wd:Q5658534\n}",
        "questionWithBrackets": "Was a prequel of [ABCs of Death 2] written by , edited by , and directed by [Ernesto D\u00edaz Espinoza] , [Y\u016bdai Yamaguchi] , [Adri\u00e1n Garc\u00eda Bogliano] , and [Yoshihiro Nishimura]"
    },
    {
        "questionIdx": 103813,
        "questionPatternModEntities": "Was a prequel of M1 's prequel written by M0",
        "questionTemplate": "Was a [ROLE_SIMPLE] of [entity] 's [ROLE_SIMPLE] [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x0 P1 M0 .\n?x1 P0 M1\n}",
        "recursionDepth": 22,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P156 ?x1 .\n?x0 wdt:P58 wd:Q42 .\n?x1 wdt:P156 wd:Q5507195\n}",
        "questionWithBrackets": "Was a prequel of [The Androids of Tara] 's prequel written by [Douglas Adams]"
    },
    {
        "questionIdx": 103815,
        "questionPatternModEntities": "Was a prequel of M2 's prequel distributed by M0 and distributed by M1",
        "questionTemplate": "Was a [ROLE_SIMPLE] of [entity] 's [ROLE_SIMPLE] [VP_SIMPLE] by [entity] and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x0 P1 M0 .\n?x0 P1 M1 .\n?x1 P0 M2\n}",
        "recursionDepth": 33,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P750 wd:Q312 .\n?x0 wdt:P750 wd:Q95 .\n?x0 wdt:P156 ?x1 .\n?x1 wdt:P156 wd:Q15891648\n}",
        "questionWithBrackets": "Was a prequel of [Batman: Arkham Knight] 's prequel distributed by [Apple Inc.] and distributed by [Google]"
    },
    {
        "questionIdx": 103816,
        "questionPatternModEntities": "Was a prequel of M5 's prequel distributed by M0 , M1 , M2 , and M3 and distributed by M4",
        "questionTemplate": "Was a [ROLE_SIMPLE] of [entity] 's [ROLE_SIMPLE] [VP_SIMPLE] by [entity] , [entity] , [entity] , and [entity] and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x0 P1 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\n?x0 P1 M3 .\n?x0 P1 M4 .\n?x1 P0 M5\n}",
        "recursionDepth": 43,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P750 wd:Q866 .\n?x0 wdt:P750 wd:Q4740860 .\n?x0 wdt:P750 wd:Q19711013 .\n?x0 wdt:P750 wd:Q3884 .\n?x0 wdt:P750 wd:Q20056642 .\n?x0 wdt:P156 ?x1 .\n?x1 wdt:P156 wd:Q90560945\n}",
        "questionWithBrackets": "Was a prequel of [Supernova] 's prequel distributed by [Tidal] , [Apple Music] , [YouTube] , and [Amazon Music] and distributed by [Amazon]"
    },
    {
        "questionIdx": 103829,
        "questionPatternModEntities": "Was a prequel of M2 's sequel written by M0 and M1",
        "questionTemplate": "Was a [ROLE_SIMPLE] of [entity] 's [ROLE_SIMPLE] [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x0 P1 M0 .\n?x0 P1 M1 .\n?x1 P2 M2\n}",
        "recursionDepth": 26,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P156 ?x1 .\n?x0 wdt:P58 wd:Q4500 .\n?x0 wdt:P58 wd:Q223992 .\n?x1 wdt:P155 wd:Q744911\n}",
        "questionWithBrackets": "Was a prequel of [Pulse] 's sequel written by [Wes Craven] and [Vince Gilligan]"
    },
    {
        "questionIdx": 103830,
        "questionPatternModEntities": "Was a prequel of M1 's sequel directed by , edited by , and written by M0",
        "questionTemplate": "Was a [ROLE_SIMPLE] of [entity] 's [ROLE_SIMPLE] [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x0 P1 M0 .\n?x0 P2 M0 .\n?x0 P3 M0 .\n?x1 P4 M1\n}",
        "recursionDepth": 36,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P57 wd:Q24907 .\n?x0 wdt:P1040 wd:Q24907 .\n?x0 wdt:P156 ?x1 .\n?x0 wdt:P58 wd:Q24907 .\n?x1 wdt:P155 wd:Q12317972\n}",
        "questionWithBrackets": "Was a prequel of [In Daddy's Pocket] 's sequel directed by , edited by , and written by [Anker S\u00f8rensen]"
    },
    {
        "questionIdx": 103832,
        "questionPatternModEntities": "Was a prequel of M0 M1 's sequel",
        "questionTemplate": "Was a [ROLE_SIMPLE] of [entity] [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1\n}",
        "recursionDepth": 17,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P155 wd:Q131964 .\n?x0 wdt:P156 wd:Q38\n}",
        "questionWithBrackets": "Was a prequel of [Italy] [Austrian Empire] 's sequel"
    },
    {
        "questionIdx": 103842,
        "questionPatternModEntities": "Was a prequel of M0 written by and edited by M1 's employee",
        "questionTemplate": "Was a [ROLE_SIMPLE] of [entity] [VP_SIMPLE] by and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x1 P3 M1\n}",
        "recursionDepth": 30,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P1040 ?x1 .\n?x0 wdt:P156 wd:Q152350 .\n?x0 wdt:P58 ?x1 .\n?x1 wdt:P108 wd:Q1130457\n}",
        "questionWithBrackets": "Was a prequel of [Battleship Potemkin] written by and edited by [Gerasimov Institute of Cinematography] 's employee"
    },
    {
        "questionIdx": 103861,
        "questionPatternModEntities": "Was a prequel of M0 distributed by M1 's parent",
        "questionTemplate": "Was a [ROLE_SIMPLE] of [entity] [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 ?x1 .\n?x1 P2 M1\n}",
        "recursionDepth": 22,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P750 ?x1 .\n?x0 wdt:P156 wd:Q98969837 .\n?x1 wdt:P40|wdt:P355 wd:Q991149\n}",
        "questionWithBrackets": "Was a prequel of [Hyrule Warriors: Age of Calamity] distributed by [1-Up Studio] 's parent"
    },
    {
        "questionIdx": 103864,
        "questionPatternModEntities": "Was a prequel of M0 edited , directed , and written by M1 , M2 , and M3",
        "questionTemplate": "Was a [ROLE_SIMPLE] of [entity] [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\n?x0 P1 M3 .\n?x0 P2 M1 .\n?x0 P2 M2 .\n?x0 P2 M3 .\n?x0 P3 M1 .\n?x0 P3 M2 .\n?x0 P3 M3\n}",
        "recursionDepth": 37,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P57 wd:Q1291210 .\n?x0 wdt:P57 wd:Q4207234 .\n?x0 wdt:P57 wd:Q16198328 .\n?x0 wdt:P1040 wd:Q1291210 .\n?x0 wdt:P1040 wd:Q4207234 .\n?x0 wdt:P1040 wd:Q16198328 .\n?x0 wdt:P156 wd:Q17183987 .\n?x0 wdt:P58 wd:Q1291210 .\n?x0 wdt:P58 wd:Q4207234 .\n?x0 wdt:P58 wd:Q16198328\n}",
        "questionWithBrackets": "Was a prequel of [V/H/S: Viral] edited , directed , and written by [Jason Eisener] , [Gareth Evans] , and [Eduardo S\u00e1nchez]"
    },
    {
        "questionIdx": 103886,
        "questionPatternModEntities": "Was a prequel of M0 written by M1",
        "questionTemplate": "Was a [ROLE_SIMPLE] of [entity] [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1\n}",
        "recursionDepth": 18,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P156 wd:Q5507073 .\n?x0 wdt:P58 wd:Q42\n}",
        "questionWithBrackets": "Was a prequel of [The Stones of Blood] written by [Douglas Adams]"
    },
    {
        "questionIdx": 103898,
        "questionPatternModEntities": "Was a prequel of M1 's sequel produced by and executive produced by M0",
        "questionTemplate": "Was a [ROLE_SIMPLE] of [entity] 's [ROLE_SIMPLE] [VP_SIMPLE] by and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x0 P1 M0 .\n?x0 P2 M0 .\n?x1 P3 M1\n}",
        "recursionDepth": 31,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P1431 wd:Q60100 .\n?x0 wdt:P162|wdt:P272 wd:Q60100 .\n?x0 wdt:P156 ?x1 .\n?x1 wdt:P155 wd:Q105387\n}",
        "questionWithBrackets": "Was a prequel of [Independence Day] 's sequel produced by and executive produced by [Roland Emmerich]"
    },
    {
        "questionIdx": 103900,
        "questionPatternModEntities": "Was a prequel of M0 's sequel M1",
        "questionTemplate": "Was a [ROLE_SIMPLE] of [entity] 's [ROLE_SIMPLE] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 ?x0\n}",
        "recursionDepth": 17,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P155 wd:Q1311 .\nwd:Q2533907 wdt:P156 ?x0\n}",
        "questionWithBrackets": "Was a prequel of [winter] 's sequel [prespring]"
    },
    {
        "questionIdx": 103901,
        "questionPatternModEntities": "Was a prequel of M0 a prequel of M1",
        "questionTemplate": "Was a [ROLE_SIMPLE] of [entity] a [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P0 M1\n}",
        "recursionDepth": 19,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P156 wd:Q754 .\n?x0 wdt:P156 wd:Q1637975\n}",
        "questionWithBrackets": "Was a prequel of [Trinidad and Tobago] a prequel of [Saint Christopher-Nevis-Anguilla]"
    },
    {
        "questionIdx": 103905,
        "questionPatternModEntities": "Was a prequel of M0 written and edited by M1",
        "questionTemplate": "Was a [ROLE_SIMPLE] of [entity] [VP_SIMPLE] and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P2 M1\n}",
        "recursionDepth": 25,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P1040 wd:Q24907 .\n?x0 wdt:P156 wd:Q7710953 .\n?x0 wdt:P58 wd:Q24907\n}",
        "questionWithBrackets": "Was a prequel of [That's Me, Too] written and edited by [Anker S\u00f8rensen]"
    },
    {
        "questionIdx": 103906,
        "questionPatternModEntities": "Was a prequel of M0 edited and produced by M1",
        "questionTemplate": "Was a [ROLE_SIMPLE] of [entity] [VP_SIMPLE] and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P2 M1\n}",
        "recursionDepth": 25,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P1040 wd:Q47284 .\n?x0 wdt:P162|wdt:P272 wd:Q47284 .\n?x0 wdt:P156 wd:Q128187\n}",
        "questionWithBrackets": "Was a prequel of [Machete Kills] edited and produced by [Robert Rodriguez]"
    },
    {
        "questionIdx": 103912,
        "questionPatternModEntities": "Was a prequel of M0 directed by M1",
        "questionTemplate": "Was a [ROLE_SIMPLE] of [entity] [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1\n}",
        "recursionDepth": 18,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P57 wd:Q2599 .\n?x0 wdt:P156 wd:Q1658542\n}",
        "questionWithBrackets": "Was a prequel of [Back to the Egg] directed by [Paul McCartney]"
    },
    {
        "questionIdx": 103914,
        "questionPatternModEntities": "Was a prequel of M0 edited by M5 , executive produced by M1 , M2 , M3 , and M4 , and directed by M6",
        "questionTemplate": "Was a [ROLE_SIMPLE] of [entity] [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , [entity] , [entity] , and [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\n?x0 P1 M3 .\n?x0 P1 M4 .\n?x0 P2 M5 .\n?x0 P3 M6\n}",
        "recursionDepth": 49,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P57 wd:Q16775487 .\n?x0 wdt:P1040 wd:Q62015683 .\n?x0 wdt:P1431 wd:Q10738 .\n?x0 wdt:P1431 wd:Q22673514 .\n?x0 wdt:P1431 wd:Q6175902 .\n?x0 wdt:P1431 wd:Q27051216 .\n?x0 wdt:P156 wd:Q84712809\n}",
        "questionWithBrackets": "Was a prequel of [Shazam! 2] edited by [Michel Aller] , executive produced by [Dany Garcia] , [Jeffrey Chernov] , [Hiram Garcia] , and [Dwayne Johnson] , and directed by [David F. Sandberg]"
    },
    {
        "questionIdx": 103915,
        "questionPatternModEntities": "Was a prequel of M3 's prequel directed by M0 , M1 , and M2",
        "questionTemplate": "Was a [ROLE_SIMPLE] of [entity] 's [ROLE_SIMPLE] [VP_SIMPLE] by [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x0 P1 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\n?x1 P0 M3\n}",
        "recursionDepth": 29,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P57 wd:Q36153 .\n?x0 wdt:P57 wd:Q254971 .\n?x0 wdt:P57 wd:Q538145 .\n?x0 wdt:P156 ?x1 .\n?x1 wdt:P156 wd:Q63247674\n}",
        "questionWithBrackets": "Was a prequel of [Homecoming: The Live Album] 's prequel directed by [Beyonc\u00e9] , [Melina Matsoukas] , and [Mark Romanek]"
    },
    {
        "questionIdx": 103923,
        "questionPatternModEntities": "Was a prequel of M0 written by and edited by M1 's sibling",
        "questionTemplate": "Was a [ROLE_SIMPLE] of [entity] [VP_SIMPLE] by and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x1 P3 M1 .\nFILTER ( ?x1 != M1 )\n}",
        "recursionDepth": 30,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P1040 ?x1 .\n?x0 wdt:P156 wd:Q1052975 .\n?x0 wdt:P58 ?x1 .\n?x1 wdt:P3373 wd:Q5616143 .\nFILTER ( ?x1 != wd:Q5616143 )\n}",
        "questionWithBrackets": "Was a prequel of [Cell 211] written by and edited by [Guillermo Fesser] 's sibling"
    },
    {
        "questionIdx": 103931,
        "questionPatternModEntities": "Was a prequel of M0 produced and executive produced by M1",
        "questionTemplate": "Was a [ROLE_SIMPLE] of [entity] [VP_SIMPLE] and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P2 M1\n}",
        "recursionDepth": 26,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P1431 wd:Q3772 .\n?x0 wdt:P162|wdt:P272 wd:Q3772 .\n?x0 wdt:P156 wd:Q1048645\n}",
        "questionWithBrackets": "Was a prequel of [Hostel: Part II] produced and executive produced by [Quentin Tarantino]"
    },
    {
        "questionIdx": 103947,
        "questionPatternModEntities": "Was a prequel of M0 directed and written by M1",
        "questionTemplate": "Was a [ROLE_SIMPLE] of [entity] [VP_SIMPLE] and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P2 M1\n}",
        "recursionDepth": 25,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P57 wd:Q4500 .\n?x0 wdt:P156 wd:Q4951501 .\n?x0 wdt:P58 wd:Q4500\n}",
        "questionWithBrackets": "Was a prequel of [Box Cutter] directed and written by [Vince Gilligan]"
    },
    {
        "questionIdx": 103954,
        "questionPatternModEntities": "Was a prequel of M1 's prequel M0 's sequel",
        "questionTemplate": "Was a [ROLE_SIMPLE] of [entity] 's [ROLE_SIMPLE] [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x0 P1 M0 .\n?x1 P0 M1\n}",
        "recursionDepth": 21,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P155 wd:Q4797589 .\n?x0 wdt:P156 ?x1 .\n?x1 wdt:P156 wd:Q1311\n}",
        "questionWithBrackets": "Was a prequel of [winter] 's prequel [Artful] 's sequel"
    },
    {
        "questionIdx": 103978,
        "questionPatternModEntities": "Was a prequel of a sequel of M0 M1",
        "questionTemplate": "Was a [ROLE_SIMPLE] of a [ROLE_SIMPLE] of [entity] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 ?x0\n}",
        "recursionDepth": 19,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P155 wd:Q1311 .\nwd:Q2533907 wdt:P156 ?x0\n}",
        "questionWithBrackets": "Was a prequel of a sequel of [winter] [prespring]"
    },
    {
        "questionIdx": 105615,
        "questionPatternModEntities": "Was a sequel of M1 executive produced by M0",
        "questionTemplate": "Was a [ROLE_SIMPLE] of [entity] [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1\n}",
        "recursionDepth": 19,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P1431 wd:Q36804 .\n?x0 wdt:P155 wd:Q644326\n}",
        "questionWithBrackets": "Was a sequel of [Straight Outta Compton] executive produced by [Eazy-E]"
    },
    {
        "questionIdx": 105617,
        "questionPatternModEntities": "Was a sequel of M0 produced by , written by , executive produced by , and directed by M1 's parent",
        "questionTemplate": "Was a [ROLE_SIMPLE] of [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x0 P3 M0 .\n?x0 P4 ?x1 .\n?x1 P5 M1\n}",
        "recursionDepth": 43,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P57 ?x1 .\n?x0 wdt:P1431 ?x1 .\n?x0 wdt:P155 wd:Q1549966 .\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x0 wdt:P58 ?x1 .\n?x1 wdt:P40|wdt:P355 wd:Q561310\n}",
        "questionWithBrackets": "Was a sequel of [Armour of God II: Operation Condor] produced by , written by , executive produced by , and directed by [Jaycee Chan] 's parent"
    },
    {
        "questionIdx": 105636,
        "questionPatternModEntities": "Was a sequel of M3 directed by , written by , and edited by M0 , M1 , and M2",
        "questionTemplate": "Was a [ROLE_SIMPLE] of [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P1 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\n?x0 P2 M3 .\n?x0 P3 M0 .\n?x0 P3 M1 .\n?x0 P3 M2\n}",
        "recursionDepth": 39,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P57 wd:Q1291210 .\n?x0 wdt:P57 wd:Q4207234 .\n?x0 wdt:P57 wd:Q16198328 .\n?x0 wdt:P1040 wd:Q1291210 .\n?x0 wdt:P1040 wd:Q4207234 .\n?x0 wdt:P1040 wd:Q16198328 .\n?x0 wdt:P155 wd:Q1359366 .\n?x0 wdt:P58 wd:Q1291210 .\n?x0 wdt:P58 wd:Q4207234 .\n?x0 wdt:P58 wd:Q16198328\n}",
        "questionWithBrackets": "Was a sequel of [V/H/S] directed by , written by , and edited by [Eduardo S\u00e1nchez] , [Gareth Evans] , and [Jason Eisener]"
    },
    {
        "questionIdx": 105641,
        "questionPatternModEntities": "Was a sequel of M3 edited by , directed by , and written by M0 , M1 , and M2",
        "questionTemplate": "Was a [ROLE_SIMPLE] of [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P1 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\n?x0 P2 M3 .\n?x0 P3 M0 .\n?x0 P3 M1 .\n?x0 P3 M2\n}",
        "recursionDepth": 39,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P57 wd:Q1291210 .\n?x0 wdt:P57 wd:Q4207234 .\n?x0 wdt:P57 wd:Q16198328 .\n?x0 wdt:P1040 wd:Q1291210 .\n?x0 wdt:P1040 wd:Q4207234 .\n?x0 wdt:P1040 wd:Q16198328 .\n?x0 wdt:P155 wd:Q1359366 .\n?x0 wdt:P58 wd:Q1291210 .\n?x0 wdt:P58 wd:Q4207234 .\n?x0 wdt:P58 wd:Q16198328\n}",
        "questionWithBrackets": "Was a sequel of [V/H/S] edited by , directed by , and written by [Eduardo S\u00e1nchez] , [Gareth Evans] , and [Jason Eisener]"
    },
    {
        "questionIdx": 105647,
        "questionPatternModEntities": "Was a sequel of M2 distributed by M0 and M1",
        "questionTemplate": "Was a [ROLE_SIMPLE] of [entity] [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P1 M2\n}",
        "recursionDepth": 22,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P750 wd:Q8093 .\n?x0 wdt:P750 wd:Q3070866 .\n?x0 wdt:P155 wd:Q17185964\n}",
        "questionWithBrackets": "Was a sequel of [The Legend of Zelda: Breath of the Wild] distributed by [Nintendo eShop] and [Nintendo]"
    },
    {
        "questionIdx": 105652,
        "questionPatternModEntities": "Was a sequel of M1 's sequel written and executive produced by M0",
        "questionTemplate": "Was a [ROLE_SIMPLE] of [entity] 's [ROLE_SIMPLE] [VP_SIMPLE] and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M0 .\n?x0 P2 ?x1 .\n?x1 P2 M1\n}",
        "recursionDepth": 30,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P1431 wd:Q36970 .\n?x0 wdt:P155 ?x1 .\n?x0 wdt:P58 wd:Q36970 .\n?x1 wdt:P155 wd:Q1199513\n}",
        "questionWithBrackets": "Was a sequel of [Armour of God] 's sequel written and executive produced by [Jackie Chan]"
    },
    {
        "questionIdx": 105666,
        "questionPatternModEntities": "Was a sequel of M4 written by M0 , M1 , and M2 , edited by M3 , and directed by M5 and M6",
        "questionTemplate": "Was a [ROLE_SIMPLE] of [entity] [VP_SIMPLE] by [entity] , [entity] , and [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P1 M3 .\n?x0 P2 M4 .\n?x0 P3 M5 .\n?x0 P3 M6\n}",
        "recursionDepth": 49,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P57 wd:Q14073494 .\n?x0 wdt:P57 wd:Q14073503 .\n?x0 wdt:P1040 wd:Q1001309 .\n?x0 wdt:P155 wd:Q155163 .\n?x0 wdt:P58 wd:Q3056094 .\n?x0 wdt:P58 wd:Q3182596 .\n?x0 wdt:P58 wd:Q498430\n}",
        "questionWithBrackets": "Was a sequel of [Alien vs. Predator] written by [Dan O'Bannon] , [John Thomas] , and [Ronald Shusett] , edited by [Dan Zimmerman] , and directed by [Greg Strause] and [Colin Strause]"
    },
    {
        "questionIdx": 105670,
        "questionPatternModEntities": "Was a sequel of M2 edited by M0 and M1",
        "questionTemplate": "Was a [ROLE_SIMPLE] of [entity] [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P1 M2\n}",
        "recursionDepth": 22,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P1040 wd:Q214066 .\n?x0 wdt:P1040 wd:Q809066 .\n?x0 wdt:P155 wd:Q47703\n}",
        "questionWithBrackets": "Was a sequel of [The Godfather] edited by [Peter Zinner] and [Barry Malkin]"
    },
    {
        "questionIdx": 105671,
        "questionPatternModEntities": "Was a sequel of M6 executive produced by M0 , M1 , M2 , and M3 and written by M4 and M5",
        "questionTemplate": "Was a [ROLE_SIMPLE] of [entity] [VP_SIMPLE] by [entity] , [entity] , [entity] , and [entity] and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P0 M3 .\n?x0 P1 M4 .\n?x0 P1 M5 .\n?x0 P2 M6\n}",
        "recursionDepth": 44,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P1431 wd:Q103946 .\n?x0 wdt:P1431 wd:Q709076 .\n?x0 wdt:P1431 wd:Q320025 .\n?x0 wdt:P1431 wd:Q2410088 .\n?x0 wdt:P155 wd:Q15483532 .\n?x0 wdt:P58 wd:Q707120 .\n?x0 wdt:P58 wd:Q3182435\n}",
        "questionWithBrackets": "Was a sequel of [24: Live Another Day] executive produced by [Stephen Hopkins] , [Brian Grazer] , [Kiefer Sutherland] , and [Howard Gordon] and written by [Manny Coto] and [Joel Surnow]"
    },
    {
        "questionIdx": 105673,
        "questionPatternModEntities": "Was a sequel of M6 executive produced by M0 , M1 , M2 , and M3 and edited by M4 and M5",
        "questionTemplate": "Was a [ROLE_SIMPLE] of [entity] [VP_SIMPLE] by [entity] , [entity] , [entity] , and [entity] and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P0 M3 .\n?x0 P1 M4 .\n?x0 P1 M5 .\n?x0 P2 M6\n}",
        "recursionDepth": 44,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P1040 wd:Q436125 .\n?x0 wdt:P1040 wd:Q1970454 .\n?x0 wdt:P1431 wd:Q3378803 .\n?x0 wdt:P1431 wd:Q13638984 .\n?x0 wdt:P1431 wd:Q27237390 .\n?x0 wdt:P1431 wd:Q240872 .\n?x0 wdt:P155 wd:Q18486021\n}",
        "questionWithBrackets": "Was a sequel of [Star Wars: Episode VIII \u2013 The Last Jedi] executive produced by [Lawrence Kasdan] , [Phil Lord] , [Jason McGatlin] , and [Chris Miller] and edited by [Pietro Scalia] and [Chris Dickens]"
    },
    {
        "questionIdx": 105675,
        "questionPatternModEntities": "Was a sequel of M4 written by M0 , written by M1 , M2 , and M3 , and directed by M5",
        "questionTemplate": "Was a [ROLE_SIMPLE] of [entity] [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , [entity] , and [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P0 M3 .\n?x0 P1 M4 .\n?x0 P2 M5\n}",
        "recursionDepth": 45,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P57 wd:Q693016 .\n?x0 wdt:P155 wd:Q15704099 .\n?x0 wdt:P58 wd:Q4500 .\n?x0 wdt:P58 wd:Q10307893 .\n?x0 wdt:P58 wd:Q2558191 .\n?x0 wdt:P58 wd:Q437267\n}",
        "questionWithBrackets": "Was a sequel of [Never Again] written by [Vince Gilligan] , written by [Frank Spotnitz] , [Chris Carter] , and [John Shiban] , and directed by [Rob Bowman]"
    },
    {
        "questionIdx": 105680,
        "questionPatternModEntities": "Was a sequel of M1 's prequel directed by M0",
        "questionTemplate": "Was a [ROLE_SIMPLE] of [entity] 's [ROLE_SIMPLE] [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x0 P1 M0 .\n?x1 P2 M1\n}",
        "recursionDepth": 22,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P57 wd:Q2071 .\n?x0 wdt:P155 ?x1 .\n?x1 wdt:P156 wd:Q1140578\n}",
        "questionWithBrackets": "Was a sequel of [Twin Peaks: Fire Walk with Me] 's prequel directed by [David Lynch]"
    },
    {
        "questionIdx": 105681,
        "questionPatternModEntities": "Was a sequel of M0 's prequel M1",
        "questionTemplate": "Was a [ROLE_SIMPLE] of [entity] 's [ROLE_SIMPLE] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 ?x0\n}",
        "recursionDepth": 17,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P156 wd:Q212 .\nwd:Q133356 wdt:P155 ?x0\n}",
        "questionWithBrackets": "Was a sequel of [Ukraine] 's prequel [Ukrainian Soviet Socialist Republic]"
    },
    {
        "questionIdx": 105684,
        "questionPatternModEntities": "Was a sequel of M2 executive produced by M0 and M1",
        "questionTemplate": "Was a [ROLE_SIMPLE] of [entity] [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P1 M2\n}",
        "recursionDepth": 23,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P1431 wd:Q8296 .\n?x0 wdt:P1431 wd:Q1038416 .\n?x0 wdt:P155 wd:Q274167\n}",
        "questionWithBrackets": "Was a sequel of [The Exorcist] executive produced by [David Robinson] and [Rupert Wyatt]"
    },
    {
        "questionIdx": 105687,
        "questionPatternModEntities": "Was a sequel of M1 executive produced , written , and produced by M0",
        "questionTemplate": "Was a [ROLE_SIMPLE] of [entity] [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M0 .\n?x0 P2 M0 .\n?x0 P3 M1\n}",
        "recursionDepth": 31,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P1431 wd:Q36970 .\n?x0 wdt:P155 wd:Q1549966 .\n?x0 wdt:P162|wdt:P272 wd:Q36970 .\n?x0 wdt:P58 wd:Q36970\n}",
        "questionWithBrackets": "Was a sequel of [Armour of God II: Operation Condor] executive produced , written , and produced by [Jackie Chan]"
    },
    {
        "questionIdx": 105688,
        "questionPatternModEntities": "Was a sequel of M0 M1 's sequel",
        "questionTemplate": "Was a [ROLE_SIMPLE] of [entity] [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P0 M1\n}",
        "recursionDepth": 17,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P155 wd:Q5988 .\n?x0 wdt:P155 wd:Q1369780\n}",
        "questionWithBrackets": "Was a sequel of [Jalasj\u00e4rvi] [Jurva] 's sequel"
    },
    {
        "questionIdx": 105692,
        "questionPatternModEntities": "Was a sequel of M0 directed by M1",
        "questionTemplate": "Was a [ROLE_SIMPLE] of [entity] [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1\n}",
        "recursionDepth": 18,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P57 wd:Q2071 .\n?x0 wdt:P155 wd:Q1140578\n}",
        "questionWithBrackets": "Was a sequel of [Twin Peaks: Fire Walk with Me] directed by [David Lynch]"
    },
    {
        "questionIdx": 105718,
        "questionPatternModEntities": "Was a sequel of M0 executive produced by M1 's French employee",
        "questionTemplate": "Was a [ROLE_SIMPLE] of [entity] [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x0 P1 M0 .\n?x1 P2 M1 .\n?x1 P3 M2\n}",
        "recursionDepth": 28,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P1431 ?x1 .\n?x0 wdt:P155 wd:Q696870 .\n?x1 wdt:P108 wd:Q515708 .\n?x1 wdt:P27 wd:Q142\n}",
        "questionWithBrackets": "Was a sequel of [He-Man and the Masters of the Universe] executive produced by [DIC Entertainment] 's French employee"
    },
    {
        "questionIdx": 105756,
        "questionPatternModEntities": "Was a sequel of a sequel of M2 distributed by M0 and M1",
        "questionTemplate": "Was a [ROLE_SIMPLE] of a [ROLE_SIMPLE] of [entity] [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P1 ?x1 .\n?x1 P1 M2\n}",
        "recursionDepth": 28,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P750 wd:Q8093 .\n?x0 wdt:P750 wd:Q3070866 .\n?x0 wdt:P155 ?x1 .\n?x1 wdt:P155 wd:Q25376969\n}",
        "questionWithBrackets": "Was a sequel of a sequel of [Game & Watch Gallery] distributed by [Nintendo] and [Nintendo eShop]"
    },
    {
        "questionIdx": 105780,
        "questionPatternModEntities": "Was a sibling and parent of M1 M0",
        "questionTemplate": "Was a [ROLE_SIMPLE] and [ROLE_SIMPLE] of [entity] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nFILTER ( M0 != M1 ) .\nM0 P0 M1 .\nM0 P1 M1\n}",
        "recursionDepth": 18,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nFILTER ( wd:Q8308563 != wd:Q493 ) .\nwd:Q8308563 wdt:P40|wdt:P355 wd:Q493 .\nwd:Q8308563 wdt:P3373 wd:Q493\n}",
        "questionWithBrackets": "Was a sibling and parent of [Arthur Rimbaud] [Fr\u00e9d\u00e9ric Rimbaud]"
    },
    {
        "questionIdx": 105781,
        "questionPatternModEntities": "Was a sibling and parent of M0 M1 's spouse",
        "questionTemplate": "Was a [ROLE_SIMPLE] and [ROLE_SIMPLE] of [entity] [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M0 .\n?x0 P2 M1 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x0 != M1 )\n}",
        "recursionDepth": 22,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q493 .\n?x0 wdt:P3373 wd:Q493 .\n?x0 wdt:P26 wd:Q17148576 .\nFILTER ( ?x0 != wd:Q493 ) .\nFILTER ( ?x0 != wd:Q17148576 )\n}",
        "questionWithBrackets": "Was a sibling and parent of [Arthur Rimbaud] [Vitalie Rimbaud] 's spouse"
    },
    {
        "questionIdx": 105783,
        "questionPatternModEntities": "Was a sibling and parent of M0 influenced by M1",
        "questionTemplate": "Was a [ROLE_SIMPLE] and [ROLE_SIMPLE] of [entity] [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P2 M0 .\nFILTER ( ?x0 != M0 )\n}",
        "recursionDepth": 23,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P737 wd:Q6527 .\n?x0 wdt:P40|wdt:P355 wd:Q42175155 .\n?x0 wdt:P3373 wd:Q42175155 .\nFILTER ( ?x0 != wd:Q42175155 )\n}",
        "questionWithBrackets": "Was a sibling and parent of [Greta Strindberg] influenced by [Jean-Jacques Rousseau]"
    },
    {
        "questionIdx": 105795,
        "questionPatternModEntities": "Was a sibling and spouse of M0 M1 's parent",
        "questionTemplate": "Was a [ROLE_SIMPLE] and [ROLE_SIMPLE] of [entity] [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P2 M0 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x0 != M0 )\n}",
        "recursionDepth": 22,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q39991 .\n?x0 wdt:P3373 wd:Q3340 .\n?x0 wdt:P26 wd:Q3340 .\nFILTER ( ?x0 != wd:Q3340 ) .\nFILTER ( ?x0 != wd:Q3340 )\n}",
        "questionWithBrackets": "Was a sibling and spouse of [Ptolemy IX Lathyros] [Ptolemy XII Auletes] 's parent"
    },
    {
        "questionIdx": 105816,
        "questionPatternModEntities": "Was a sibling of M0 M1 's spouse and sibling",
        "questionTemplate": "Was a [ROLE_SIMPLE] of [entity] [entity] 's [ROLE_SIMPLE] and [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x0 != M1 ) .\nFILTER ( ?x0 != M1 )\n}",
        "recursionDepth": 22,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P3373 wd:Q3340 .\n?x0 wdt:P3373 wd:Q1670765 .\n?x0 wdt:P26 wd:Q3340 .\nFILTER ( ?x0 != wd:Q3340 ) .\nFILTER ( ?x0 != wd:Q3340 ) .\nFILTER ( ?x0 != wd:Q1670765 )\n}",
        "questionWithBrackets": "Was a sibling of [Ptolemy Memphites] [Ptolemy IX Lathyros] 's spouse and sibling"
    },
    {
        "questionIdx": 105817,
        "questionPatternModEntities": "Was a sibling of M0 M1 's parent , sibling , and spouse",
        "questionTemplate": "Was a [ROLE_SIMPLE] of [entity] [entity] 's [ROLE_SIMPLE] , [ROLE_SIMPLE] , and [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P1 M1 .\n?x0 P2 M1 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x0 != M1 ) .\nFILTER ( ?x0 != M1 )\n}",
        "recursionDepth": 26,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q443473 .\n?x0 wdt:P3373 wd:Q443473 .\n?x0 wdt:P3373 wd:Q273990 .\n?x0 wdt:P26 wd:Q443473 .\nFILTER ( ?x0 != wd:Q443473 ) .\nFILTER ( ?x0 != wd:Q443473 ) .\nFILTER ( ?x0 != wd:Q273990 )\n}",
        "questionWithBrackets": "Was a sibling of [Princess Tia] [Henutmire] 's parent , sibling , and spouse"
    },
    {
        "questionIdx": 105822,
        "questionPatternModEntities": "Was a sibling of M0 M1 's Chinese sibling",
        "questionTemplate": "Was a [ROLE_SIMPLE] of [entity] [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P1 M2 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x0 != M1 )\n}",
        "recursionDepth": 22,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P27 wd:Q148 .\n?x0 wdt:P3373 wd:Q23114 .\n?x0 wdt:P3373 wd:Q1706256 .\nFILTER ( ?x0 != wd:Q23114 ) .\nFILTER ( ?x0 != wd:Q1706256 )\n}",
        "questionWithBrackets": "Was a sibling of [Lu Xun] [Zhou Jianren] 's Chinese sibling"
    },
    {
        "questionIdx": 105832,
        "questionPatternModEntities": "Was a sibling of M0 M1 's actor",
        "questionTemplate": "Was a [ROLE_SIMPLE] of [entity] [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M0 )\n}",
        "recursionDepth": 17,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P453 wd:Q5815108 .\n?x0 wdt:P3373 wd:Q3756757 .\nFILTER ( ?x0 != wd:Q3756757 )\n}",
        "questionWithBrackets": "Was a sibling of [Gabriella Pavarotti] [Duke of Mantua] 's actor"
    },
    {
        "questionIdx": 105833,
        "questionPatternModEntities": "Was a sibling of M1 's actor M0 's spouse",
        "questionTemplate": "Was a [ROLE_SIMPLE] of [entity] 's [ROLE_SIMPLE] [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x0 P1 M0 .\n?x1 P2 M1 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x0 != M0 )\n}",
        "recursionDepth": 21,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P3373 ?x1 .\n?x0 wdt:P26 wd:Q23168 .\n?x1 wdt:P453 wd:Q222573 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x0 != wd:Q23168 )\n}",
        "questionWithBrackets": "Was a sibling of [femme fatale] 's actor [Minos] 's spouse"
    },
    {
        "questionIdx": 105841,
        "questionPatternModEntities": "Was a sibling of M0 employed by M1",
        "questionTemplate": "Was a [ROLE_SIMPLE] of [entity] [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M0 )\n}",
        "recursionDepth": 18,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P108 wd:Q152087 .\n?x0 wdt:P3373 wd:Q1585 .\nFILTER ( ?x0 != wd:Q1585 )\n}",
        "questionWithBrackets": "Was a sibling of [Georg Simon Ohm] employed by [Humboldt University of Berlin]"
    },
    {
        "questionIdx": 105852,
        "questionPatternModEntities": "Was a sibling of M0 's parent M1",
        "questionTemplate": "Was a [ROLE_SIMPLE] of [entity] 's [ROLE_SIMPLE] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( M1 != ?x0 ) .\nM1 P1 ?x0\n}",
        "recursionDepth": 17,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q350246 .\nFILTER ( wd:Q39938 != ?x0 ) .\nwd:Q39938 wdt:P3373 ?x0\n}",
        "questionWithBrackets": "Was a sibling of [Ptolemy Philadelphus] 's parent [Ptolemy XIII Theos Philopator]"
    },
    {
        "questionIdx": 105872,
        "questionPatternModEntities": "Was a sibling of M0 a Dutch sibling of M1",
        "questionTemplate": "Was a [ROLE_SIMPLE] of [entity] a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P1 M2 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x0 != M1 )\n}",
        "recursionDepth": 24,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P27 wd:Q29999 .\n?x0 wdt:P3373 wd:Q71738329 .\n?x0 wdt:P3373 wd:Q4218595 .\nFILTER ( ?x0 != wd:Q71738329 ) .\nFILTER ( ?x0 != wd:Q4218595 )\n}",
        "questionWithBrackets": "Was a sibling of [Barend Kwast] a Dutch sibling of [Jan Albert Kwast]"
    },
    {
        "questionIdx": 105878,
        "questionPatternModEntities": "Was a sibling of M0 M1 's sibling",
        "questionTemplate": "Was a [ROLE_SIMPLE] of [entity] [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x0 != M1 )\n}",
        "recursionDepth": 17,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P3373 wd:Q207 .\n?x0 wdt:P3373 wd:Q221997 .\nFILTER ( ?x0 != wd:Q207 ) .\nFILTER ( ?x0 != wd:Q221997 )\n}",
        "questionWithBrackets": "Was a sibling of [Jeb Bush] [George W. Bush] 's sibling"
    },
    {
        "questionIdx": 105887,
        "questionPatternModEntities": "Was a sibling of M0 's male actor M2",
        "questionTemplate": "Was a [ROLE_SIMPLE] of [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( M2 != ?x0 ) .\nM2 P2 ?x0\n}",
        "recursionDepth": 22,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P453 wd:Q5815108 .\n?x0 wdt:P21 wd:Q6581097 .\nFILTER ( wd:Q3756757 != ?x0 ) .\nwd:Q3756757 wdt:P3373 ?x0\n}",
        "questionWithBrackets": "Was a sibling of [Duke of Mantua] 's male actor [Gabriella Pavarotti]"
    },
    {
        "questionIdx": 105917,
        "questionPatternModEntities": "Was a sibling of M0 's spouse 's spouse M1",
        "questionTemplate": "Was a [ROLE_SIMPLE] of [entity] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x1 P0 M0 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x1 != M0 ) .\nFILTER ( M1 != ?x0 ) .\nM1 P1 ?x0\n}",
        "recursionDepth": 21,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P26 ?x1 .\n?x1 wdt:P26 wd:Q229483 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x1 != wd:Q229483 ) .\nFILTER ( wd:Q39938 != ?x0 ) .\nwd:Q39938 wdt:P3373 ?x0\n}",
        "questionWithBrackets": "Was a sibling of [Octavia the Younger] 's spouse 's spouse [Ptolemy XIII Theos Philopator]"
    },
    {
        "questionIdx": 105937,
        "questionPatternModEntities": "Was a sibling of M1 's spouse and parent M0 's spouse",
        "questionTemplate": "Was a [ROLE_SIMPLE] of [entity] 's [ROLE_SIMPLE] and [ROLE_SIMPLE] [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x0 P1 M0 .\n?x1 P1 M1 .\n?x1 P2 M1 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x1 != M1 )\n}",
        "recursionDepth": 26,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P3373 ?x1 .\n?x0 wdt:P26 wd:Q1523 .\n?x1 wdt:P40|wdt:P355 wd:Q261213 .\n?x1 wdt:P26 wd:Q261213 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x0 != wd:Q1523 ) .\nFILTER ( ?x1 != wd:Q261213 )\n}",
        "questionWithBrackets": "Was a sibling of [Bintanath] 's spouse and parent [Ramesses II] 's spouse"
    },
    {
        "questionIdx": 105967,
        "questionPatternModEntities": "Was a sibling of M0 's employee M1",
        "questionTemplate": "Was a [ROLE_SIMPLE] of [entity] 's [ROLE_SIMPLE] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( M1 != ?x0 ) .\nM1 P1 ?x0\n}",
        "recursionDepth": 17,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P108 wd:Q37230 .\nFILTER ( wd:Q10290844 != ?x0 ) .\nwd:Q10290844 wdt:P3373 ?x0\n}",
        "questionWithBrackets": "Was a sibling of [Central Intelligence Agency] 's employee [Graem Bauer]"
    },
    {
        "questionIdx": 106108,
        "questionPatternModEntities": "Was a sibling of a male Canadian British parent of M3 M4",
        "questionTemplate": "Was a [ROLE_SIMPLE] of a [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P1 M2 .\n?x0 P2 M3 .\nFILTER ( M4 != ?x0 ) .\nM4 P3 ?x0\n}",
        "recursionDepth": 34,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q2224507 .\n?x0 wdt:P21 wd:Q6581097 .\n?x0 wdt:P27 wd:Q145 .\n?x0 wdt:P27 wd:Q16 .\nFILTER ( wd:Q544593 != ?x0 ) .\nwd:Q544593 wdt:P3373 ?x0\n}",
        "questionWithBrackets": "Was a sibling of a male Canadian British parent of [Sarah Sutherland] [Angus Sutherland]"
    },
    {
        "questionIdx": 106132,
        "questionPatternModEntities": "Was a sibling of a spouse of M0 M1",
        "questionTemplate": "Was a [ROLE_SIMPLE] of a [ROLE_SIMPLE] of [entity] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( M1 != ?x0 ) .\nM1 P1 ?x0\n}",
        "recursionDepth": 19,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P26 wd:Q32337 .\nFILTER ( ?x0 != wd:Q32337 ) .\nFILTER ( wd:Q606780 != ?x0 ) .\nwd:Q606780 wdt:P3373 ?x0\n}",
        "questionWithBrackets": "Was a sibling of a spouse of [Lita Grey] [Sydney Chaplin]"
    },
    {
        "questionIdx": 106176,
        "questionPatternModEntities": "Was a sibling , spouse , and parent of M0 M1 's sibling",
        "questionTemplate": "Was a [ROLE_SIMPLE] , [ROLE_SIMPLE] , and [ROLE_SIMPLE] of [entity] [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P1 M0 .\n?x0 P2 M0 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x0 != M1 )\n}",
        "recursionDepth": 26,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q443473 .\n?x0 wdt:P3373 wd:Q273990 .\n?x0 wdt:P3373 wd:Q443473 .\n?x0 wdt:P26 wd:Q443473 .\nFILTER ( ?x0 != wd:Q273990 ) .\nFILTER ( ?x0 != wd:Q443473 ) .\nFILTER ( ?x0 != wd:Q443473 )\n}",
        "questionWithBrackets": "Was a sibling , spouse , and parent of [Henutmire] [Princess Tia] 's sibling"
    },
    {
        "questionIdx": 106177,
        "questionPatternModEntities": "Was a sibling , spouse , and parent of M1 M0",
        "questionTemplate": "Was a [ROLE_SIMPLE] , [ROLE_SIMPLE] , and [ROLE_SIMPLE] of [entity] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nFILTER ( M0 != M1 ) .\nFILTER ( M0 != M1 ) .\nM0 P0 M1 .\nM0 P1 M1 .\nM0 P2 M1\n}",
        "recursionDepth": 22,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nFILTER ( wd:Q1523 != wd:Q443473 ) .\nFILTER ( wd:Q1523 != wd:Q443473 ) .\nwd:Q1523 wdt:P40|wdt:P355 wd:Q443473 .\nwd:Q1523 wdt:P3373 wd:Q443473 .\nwd:Q1523 wdt:P26 wd:Q443473\n}",
        "questionWithBrackets": "Was a sibling , spouse , and parent of [Henutmire] [Ramesses II]"
    },
    {
        "questionIdx": 106178,
        "questionPatternModEntities": "Was a sibling , spouse , and parent of M0 a sibling of M1",
        "questionTemplate": "Was a [ROLE_SIMPLE] , [ROLE_SIMPLE] , and [ROLE_SIMPLE] of [entity] a [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P1 M0 .\n?x0 P2 M0 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x0 != M1 )\n}",
        "recursionDepth": 28,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q443473 .\n?x0 wdt:P3373 wd:Q443473 .\n?x0 wdt:P3373 wd:Q273990 .\n?x0 wdt:P26 wd:Q443473 .\nFILTER ( ?x0 != wd:Q443473 ) .\nFILTER ( ?x0 != wd:Q443473 ) .\nFILTER ( ?x0 != wd:Q273990 )\n}",
        "questionWithBrackets": "Was a sibling , spouse , and parent of [Henutmire] a sibling of [Princess Tia]"
    },
    {
        "questionIdx": 106198,
        "questionPatternModEntities": "Was a spouse and parent of M1 M0",
        "questionTemplate": "Was a [ROLE_SIMPLE] and [ROLE_SIMPLE] of [entity] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nFILTER ( M0 != M1 ) .\nM0 P0 M1 .\nM0 P1 M1\n}",
        "recursionDepth": 18,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nFILTER ( wd:Q39991 != wd:Q40020 ) .\nwd:Q39991 wdt:P40|wdt:P355 wd:Q40020 .\nwd:Q39991 wdt:P26 wd:Q40020\n}",
        "questionWithBrackets": "Was a spouse and parent of [Cleopatra VI of Egypt] [Ptolemy XII Auletes]"
    },
    {
        "questionIdx": 106205,
        "questionPatternModEntities": "Was a spouse and parent of a sibling of M0 M1",
        "questionTemplate": "Was a [ROLE_SIMPLE] and [ROLE_SIMPLE] of a [ROLE_SIMPLE] of [entity] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( M1 != ?x0 ) .\nM1 P1 ?x0 .\nM1 P2 ?x0\n}",
        "recursionDepth": 24,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P3373 wd:Q635 .\nFILTER ( ?x0 != wd:Q635 ) .\nFILTER ( wd:Q39991 != ?x0 ) .\nwd:Q39991 wdt:P40|wdt:P355 ?x0 .\nwd:Q39991 wdt:P26 ?x0\n}",
        "questionWithBrackets": "Was a spouse and parent of a sibling of [Cleopatra] [Ptolemy XII Auletes]"
    },
    {
        "questionIdx": 106206,
        "questionPatternModEntities": "Was a spouse and parent of a spouse of M0 M1",
        "questionTemplate": "Was a [ROLE_SIMPLE] and [ROLE_SIMPLE] of a [ROLE_SIMPLE] of [entity] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( M1 != ?x0 ) .\nM1 P0 ?x0 .\nM1 P1 ?x0\n}",
        "recursionDepth": 24,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P26 wd:Q79999 .\nFILTER ( ?x0 != wd:Q79999 ) .\nFILTER ( wd:Q12656482 != ?x0 ) .\nwd:Q12656482 wdt:P40|wdt:P355 ?x0 .\nwd:Q12656482 wdt:P26 ?x0\n}",
        "questionWithBrackets": "Was a spouse and parent of a spouse of [Uranus] [Hydros]"
    },
    {
        "questionIdx": 106208,
        "questionPatternModEntities": "Was a spouse and sibling of M0 's sibling M1",
        "questionTemplate": "Was a [ROLE_SIMPLE] and [ROLE_SIMPLE] of [entity] 's [ROLE_SIMPLE] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( M1 != ?x0 ) .\nFILTER ( M1 != ?x0 ) .\nM1 P0 ?x0 .\nM1 P1 ?x0\n}",
        "recursionDepth": 22,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P3373 wd:Q3954 .\nFILTER ( ?x0 != wd:Q3954 ) .\nFILTER ( wd:Q125046 != ?x0 ) .\nFILTER ( wd:Q125046 != ?x0 ) .\nwd:Q125046 wdt:P3373 ?x0 .\nwd:Q125046 wdt:P26 ?x0\n}",
        "questionWithBrackets": "Was a spouse and sibling of [Neptune] 's sibling [Juno]"
    },
    {
        "questionIdx": 106209,
        "questionPatternModEntities": "Was a spouse and sibling of M0 's spouse and sibling M1",
        "questionTemplate": "Was a [ROLE_SIMPLE] and [ROLE_SIMPLE] of [entity] 's [ROLE_SIMPLE] and [ROLE_SIMPLE] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M0 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x0 != M0 ) .\nFILTER ( M1 != ?x0 ) .\nFILTER ( M1 != ?x0 ) .\nM1 P0 ?x0 .\nM1 P1 ?x0\n}",
        "recursionDepth": 27,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P3373 wd:Q3350 .\n?x0 wdt:P26 wd:Q3350 .\nFILTER ( ?x0 != wd:Q3350 ) .\nFILTER ( ?x0 != wd:Q3350 ) .\nFILTER ( wd:Q39952 != ?x0 ) .\nFILTER ( wd:Q39952 != ?x0 ) .\nwd:Q39952 wdt:P3373 ?x0 .\nwd:Q39952 wdt:P26 ?x0\n}",
        "questionWithBrackets": "Was a spouse and sibling of [Ptolemy VIII Physcon] 's spouse and sibling [Ptolemy VI]"
    },
    {
        "questionIdx": 106210,
        "questionPatternModEntities": "Was a spouse and sibling of M0 's parent 's spouse M1",
        "questionTemplate": "Was a [ROLE_SIMPLE] and [ROLE_SIMPLE] of [entity] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x1 P1 M0 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( M1 != ?x0 ) .\nFILTER ( M1 != ?x0 ) .\nM1 P0 ?x0 .\nM1 P2 ?x0\n}",
        "recursionDepth": 26,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P26 ?x1 .\n?x1 wdt:P40|wdt:P355 wd:Q229836 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( wd:Q39938 != ?x0 ) .\nFILTER ( wd:Q39938 != ?x0 ) .\nwd:Q39938 wdt:P3373 ?x0 .\nwd:Q39938 wdt:P26 ?x0\n}",
        "questionWithBrackets": "Was a spouse and sibling of [Antonia Minor] 's parent 's spouse [Ptolemy XIII Theos Philopator]"
    },
    {
        "questionIdx": 106212,
        "questionPatternModEntities": "Was a spouse and sibling of M0 M1 's sibling 's parent",
        "questionTemplate": "Was a [ROLE_SIMPLE] and [ROLE_SIMPLE] of [entity] [entity] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 ?x1 .\n?x0 P2 M0 .\n?x1 P0 M1 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x1 != M1 )\n}",
        "recursionDepth": 26,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 ?x1 .\n?x0 wdt:P3373 wd:Q3356 .\n?x0 wdt:P26 wd:Q3356 .\n?x1 wdt:P3373 wd:Q1091124 .\nFILTER ( ?x0 != wd:Q3356 ) .\nFILTER ( ?x0 != wd:Q3356 ) .\nFILTER ( ?x1 != wd:Q1091124 )\n}",
        "questionWithBrackets": "Was a spouse and sibling of [Antiochus IV Epiphanes] [Nysa] 's sibling 's parent"
    },
    {
        "questionIdx": 106214,
        "questionPatternModEntities": "Was a spouse and sibling of M1 M0",
        "questionTemplate": "Was a [ROLE_SIMPLE] and [ROLE_SIMPLE] of [entity] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nFILTER ( M0 != M1 ) .\nFILTER ( M0 != M1 ) .\nM0 P0 M1 .\nM0 P1 M1\n}",
        "recursionDepth": 18,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nFILTER ( wd:Q39938 != wd:Q635 ) .\nFILTER ( wd:Q39938 != wd:Q635 ) .\nwd:Q39938 wdt:P3373 wd:Q635 .\nwd:Q39938 wdt:P26 wd:Q635\n}",
        "questionWithBrackets": "Was a spouse and sibling of [Cleopatra] [Ptolemy XIII Theos Philopator]"
    },
    {
        "questionIdx": 106217,
        "questionPatternModEntities": "Was a spouse and sibling of M0 M1 's spouse and sibling",
        "questionTemplate": "Was a [ROLE_SIMPLE] and [ROLE_SIMPLE] of [entity] [entity] 's [ROLE_SIMPLE] and [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P1 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x0 != M1 ) .\nFILTER ( ?x0 != M1 )\n}",
        "recursionDepth": 27,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P3373 wd:Q3350 .\n?x0 wdt:P3373 wd:Q39952 .\n?x0 wdt:P26 wd:Q3350 .\n?x0 wdt:P26 wd:Q39952 .\nFILTER ( ?x0 != wd:Q3350 ) .\nFILTER ( ?x0 != wd:Q3350 ) .\nFILTER ( ?x0 != wd:Q39952 ) .\nFILTER ( ?x0 != wd:Q39952 )\n}",
        "questionWithBrackets": "Was a spouse and sibling of [Ptolemy VIII Physcon] [Ptolemy VI] 's spouse and sibling"
    },
    {
        "questionIdx": 106219,
        "questionPatternModEntities": "Was a spouse and sibling of M0 a sibling of M1",
        "questionTemplate": "Was a [ROLE_SIMPLE] and [ROLE_SIMPLE] of [entity] a [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P1 M0 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x0 != M1 )\n}",
        "recursionDepth": 24,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P3373 wd:Q3340 .\n?x0 wdt:P3373 wd:Q1670765 .\n?x0 wdt:P26 wd:Q3340 .\nFILTER ( ?x0 != wd:Q3340 ) .\nFILTER ( ?x0 != wd:Q3340 ) .\nFILTER ( ?x0 != wd:Q1670765 )\n}",
        "questionWithBrackets": "Was a spouse and sibling of [Ptolemy IX Lathyros] a sibling of [Ptolemy Memphites]"
    },
    {
        "questionIdx": 106220,
        "questionPatternModEntities": "Was a spouse and sibling of M0 's parent M1",
        "questionTemplate": "Was a [ROLE_SIMPLE] and [ROLE_SIMPLE] of [entity] 's [ROLE_SIMPLE] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( M1 != ?x0 ) .\nFILTER ( M1 != ?x0 ) .\nM1 P1 ?x0 .\nM1 P2 ?x0\n}",
        "recursionDepth": 22,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q231688 .\nFILTER ( wd:Q40023 != ?x0 ) .\nFILTER ( wd:Q40023 != ?x0 ) .\nwd:Q40023 wdt:P3373 ?x0 .\nwd:Q40023 wdt:P26 ?x0\n}",
        "questionWithBrackets": "Was a spouse and sibling of [Berenice III of Egypt] 's parent [Cleopatra IV of Egypt]"
    },
    {
        "questionIdx": 106232,
        "questionPatternModEntities": "Was a spouse of M1 M0 's sibling",
        "questionTemplate": "Was a [ROLE_SIMPLE] of [entity] [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x0 != M1 )\n}",
        "recursionDepth": 17,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P3373 wd:Q346 .\n?x0 wdt:P26 wd:Q126531 .\nFILTER ( ?x0 != wd:Q126531 ) .\nFILTER ( ?x0 != wd:Q346 )\n}",
        "questionWithBrackets": "Was a spouse of [Beatrice of Provence] [Louis IX of France] 's sibling"
    },
    {
        "questionIdx": 106244,
        "questionPatternModEntities": "Was a spouse of M0 influenced by a sibling of M1",
        "questionTemplate": "Was a [ROLE_SIMPLE] of [entity] [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x0 P1 M0 .\n?x1 P2 M1 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x1 != M1 )\n}",
        "recursionDepth": 24,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P737 ?x1 .\n?x0 wdt:P26 wd:Q560757 .\n?x1 wdt:P3373 wd:Q6374627 .\nFILTER ( ?x0 != wd:Q560757 ) .\nFILTER ( ?x1 != wd:Q6374627 )\n}",
        "questionWithBrackets": "Was a spouse of [Wilhelm Hensel] influenced by a sibling of [Kaspar Anton Karl van Beethoven]"
    },
    {
        "questionIdx": 106245,
        "questionPatternModEntities": "Was a spouse of M0 M1 's spouse",
        "questionTemplate": "Was a [ROLE_SIMPLE] of [entity] [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x0 != M1 )\n}",
        "recursionDepth": 17,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P26 wd:Q1423 .\n?x0 wdt:P26 wd:Q1159574 .\nFILTER ( ?x0 != wd:Q1423 ) .\nFILTER ( ?x0 != wd:Q1159574 )\n}",
        "questionWithBrackets": "Was a spouse of [Domitian] [Lucius Aelius Plautius Lamia Aelianus] 's spouse"
    },
    {
        "questionIdx": 106247,
        "questionPatternModEntities": "Was a spouse of M0 's child M1",
        "questionTemplate": "Was a [ROLE_SIMPLE] of [entity] 's [ROLE_SIMPLE] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( M1 != ?x0 ) .\nM1 P1 ?x0\n}",
        "recursionDepth": 17,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P749 wd:Q1089760 .\nFILTER ( wd:Q76375112 != ?x0 ) .\nwd:Q76375112 wdt:P26 ?x0\n}",
        "questionWithBrackets": "Was a spouse of [Church Mission Society] 's child [Eliazbeth Fristan]"
    },
    {
        "questionIdx": 106256,
        "questionPatternModEntities": "Was a spouse of M1 a Mexican spouse of M2",
        "questionTemplate": "Was a [ROLE_SIMPLE] of [entity] a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\nFILTER ( ?x0 != M1 ) .\nFILTER ( ?x0 != M2 )\n}",
        "recursionDepth": 24,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P27 wd:Q96 .\n?x0 wdt:P26 wd:Q6003660 .\n?x0 wdt:P26 wd:Q6103600 .\nFILTER ( ?x0 != wd:Q6003660 ) .\nFILTER ( ?x0 != wd:Q6103600 )\n}",
        "questionWithBrackets": "Was a spouse of [Mar\u00eda Elena Borneque] a Mexican spouse of [Refugio Borneque]"
    },
    {
        "questionIdx": 106272,
        "questionPatternModEntities": "Was a spouse of M0 's actor M1",
        "questionTemplate": "Was a [ROLE_SIMPLE] of [entity] 's [ROLE_SIMPLE] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( M1 != ?x0 ) .\nM1 P1 ?x0\n}",
        "recursionDepth": 17,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P453 wd:Q222573 .\nFILTER ( wd:Q192482 != ?x0 ) .\nwd:Q192482 wdt:P26 ?x0\n}",
        "questionWithBrackets": "Was a spouse of [femme fatale] 's actor [Telemachus]"
    },
    {
        "questionIdx": 106274,
        "questionPatternModEntities": "Was a spouse of M0 's child 's spouse 's spouse M1",
        "questionTemplate": "Was a [ROLE_SIMPLE] of [entity] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x1 P0 ?x2 .\n?x2 P1 M0 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x1 != ?x2 ) .\nFILTER ( M1 != ?x0 ) .\nM1 P0 ?x0\n}",
        "recursionDepth": 25,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P26 ?x1 .\n?x1 wdt:P26 ?x2 .\n?x2 wdt:P749 wd:Q1089760 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x1 != ?x2 ) .\nFILTER ( wd:Q76375112 != ?x0 ) .\nwd:Q76375112 wdt:P26 ?x0\n}",
        "questionWithBrackets": "Was a spouse of [Church Mission Society] 's child 's spouse 's spouse [Eliazbeth Fristan]"
    },
    {
        "questionIdx": 106277,
        "questionPatternModEntities": "Was a spouse of M2 M0 's Canadian employee",
        "questionTemplate": "Was a [ROLE_SIMPLE] of [entity] [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P2 M2 .\nFILTER ( ?x0 != M2 )\n}",
        "recursionDepth": 22,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P108 wd:Q37156 .\n?x0 wdt:P27 wd:Q16 .\n?x0 wdt:P26 wd:Q92711 .\nFILTER ( ?x0 != wd:Q92711 )\n}",
        "questionWithBrackets": "Was a spouse of [Nick Pippenger] [IBM] 's Canadian employee"
    },
    {
        "questionIdx": 106280,
        "questionPatternModEntities": "Was a spouse of M1 a child of M0",
        "questionTemplate": "Was a [ROLE_SIMPLE] of [entity] a [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M1 )\n}",
        "recursionDepth": 19,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P749 wd:Q1089760 .\n?x0 wdt:P26 wd:Q76375112 .\nFILTER ( ?x0 != wd:Q76375112 )\n}",
        "questionWithBrackets": "Was a spouse of [Eliazbeth Fristan] a child of [Church Mission Society]"
    },
    {
        "questionIdx": 106290,
        "questionPatternModEntities": "Was a spouse of M0 's spouse M1",
        "questionTemplate": "Was a [ROLE_SIMPLE] of [entity] 's [ROLE_SIMPLE] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( M1 != ?x0 ) .\nM1 P0 ?x0\n}",
        "recursionDepth": 17,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P26 wd:Q407 .\nFILTER ( ?x0 != wd:Q407 ) .\nFILTER ( wd:Q220693 != ?x0 ) .\nwd:Q220693 wdt:P26 ?x0\n}",
        "questionWithBrackets": "Was a spouse of [Linda Lovelace] 's spouse [Marilyn Chambers]"
    },
    {
        "questionIdx": 106305,
        "questionPatternModEntities": "Was a spouse of M1 M2 's Japanese spouse",
        "questionTemplate": "Was a [ROLE_SIMPLE] of [entity] [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\nFILTER ( ?x0 != M1 ) .\nFILTER ( ?x0 != M2 )\n}",
        "recursionDepth": 22,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P27 wd:Q17 .\n?x0 wdt:P26 wd:Q1203 .\n?x0 wdt:P26 wd:Q1190476 .\nFILTER ( ?x0 != wd:Q1203 ) .\nFILTER ( ?x0 != wd:Q1190476 )\n}",
        "questionWithBrackets": "Was a spouse of [John Lennon] [Toshi Ichiyanagi] 's Japanese spouse"
    },
    {
        "questionIdx": 106343,
        "questionPatternModEntities": "Was a spouse of M1 M0 's employee",
        "questionTemplate": "Was a [ROLE_SIMPLE] of [entity] [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M1 )\n}",
        "recursionDepth": 17,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P108 wd:Q152087 .\n?x0 wdt:P26 wd:Q567 .\nFILTER ( ?x0 != wd:Q567 )\n}",
        "questionWithBrackets": "Was a spouse of [Angela Merkel] [Humboldt University of Berlin] 's employee"
    },
    {
        "questionIdx": 106359,
        "questionPatternModEntities": "Was a spouse of M0 M2 's Japanese spouse 's parent",
        "questionTemplate": "Was a [ROLE_SIMPLE] of [entity] [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x0 P1 M0 .\n?x1 P1 M2 .\n?x1 P2 M1 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x1 != M2 )\n}",
        "recursionDepth": 26,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 ?x1 .\n?x0 wdt:P26 wd:Q45844 .\n?x1 wdt:P27 wd:Q17 .\n?x1 wdt:P26 wd:Q900258 .\nFILTER ( ?x0 != wd:Q45844 ) .\nFILTER ( ?x1 != wd:Q900258 )\n}",
        "questionWithBrackets": "Was a spouse of [Go-Sanj\u014d] [Fujiwara no Tamako] 's Japanese spouse 's parent"
    },
    {
        "questionIdx": 106386,
        "questionPatternModEntities": "Was a spouse of M1 M0 's child",
        "questionTemplate": "Was a [ROLE_SIMPLE] of [entity] [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M1 )\n}",
        "recursionDepth": 17,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P749 wd:Q1089760 .\n?x0 wdt:P26 wd:Q76375112 .\nFILTER ( ?x0 != wd:Q76375112 )\n}",
        "questionWithBrackets": "Was a spouse of [Eliazbeth Fristan] [Church Mission Society] 's child"
    },
    {
        "questionIdx": 106390,
        "questionPatternModEntities": "Was a spouse of M0 's employee 's sibling M1",
        "questionTemplate": "Was a [ROLE_SIMPLE] of [entity] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x1 P1 M0 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( M1 != ?x0 ) .\nM1 P2 ?x0\n}",
        "recursionDepth": 21,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P3373 ?x1 .\n?x1 wdt:P108 wd:Q1661231 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( wd:Q61080192 != ?x0 ) .\nwd:Q61080192 wdt:P26 ?x0\n}",
        "questionWithBrackets": "Was a spouse of [Indian Civil Service] 's employee 's sibling [Bibhabati Bose]"
    },
    {
        "questionIdx": 106392,
        "questionPatternModEntities": "Was a spouse of M2 a actor that played M0 and M1",
        "questionTemplate": "Was a [ROLE_SIMPLE] of [entity] a [NP_SIMPLE] that [VP_SIMPLE] [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P1 M2 .\nFILTER ( ?x0 != M2 )\n}",
        "recursionDepth": 29,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P453 wd:Q9054901 .\n?x0 wdt:P453 wd:Q46996485 .\n?x0 wdt:P26 wd:Q18427960 .\nFILTER ( ?x0 != wd:Q18427960 )\n}",
        "questionWithBrackets": "Was a spouse of [Yusif Eyvazov] a actor that played [Elsa of Brabant] and [Pamina]"
    },
    {
        "questionIdx": 106464,
        "questionPatternModEntities": "Was a spouse of a child of M0 M1",
        "questionTemplate": "Was a [ROLE_SIMPLE] of a [ROLE_SIMPLE] of [entity] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( M1 != ?x0 ) .\nM1 P1 ?x0\n}",
        "recursionDepth": 19,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P749 wd:Q1089760 .\nFILTER ( wd:Q76375112 != ?x0 ) .\nwd:Q76375112 wdt:P26 ?x0\n}",
        "questionWithBrackets": "Was a spouse of a child of [Church Mission Society] [Eliazbeth Fristan]"
    },
    {
        "questionIdx": 106515,
        "questionPatternModEntities": "Was a spouse of a sibling and spouse of M0 M1",
        "questionTemplate": "Was a [ROLE_SIMPLE] of a [ROLE_SIMPLE] and [ROLE_SIMPLE] of [entity] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M0 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x0 != M0 ) .\nFILTER ( M1 != ?x0 ) .\nM1 P1 ?x0\n}",
        "recursionDepth": 24,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P3373 wd:Q3356 .\n?x0 wdt:P26 wd:Q3356 .\nFILTER ( ?x0 != wd:Q3356 ) .\nFILTER ( ?x0 != wd:Q3356 ) .\nFILTER ( wd:Q2045778 != ?x0 ) .\nwd:Q2045778 wdt:P26 ?x0\n}",
        "questionWithBrackets": "Was a spouse of a sibling and spouse of [Antiochus IV Epiphanes] [Antiochus]"
    },
    {
        "questionIdx": 106519,
        "questionPatternModEntities": "Was a spouse of a spouse and parent of M0 M1",
        "questionTemplate": "Was a [ROLE_SIMPLE] of a [ROLE_SIMPLE] and [ROLE_SIMPLE] of [entity] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M0 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( M1 != ?x0 ) .\nM1 P1 ?x0\n}",
        "recursionDepth": 24,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q9304 .\n?x0 wdt:P26 wd:Q9304 .\nFILTER ( ?x0 != wd:Q9304 ) .\nFILTER ( wd:Q9295 != ?x0 ) .\nwd:Q9295 wdt:P26 ?x0\n}",
        "questionWithBrackets": "Was a spouse of a spouse and parent of [Dayan Khan] [Manduul Khan]"
    },
    {
        "questionIdx": 106552,
        "questionPatternModEntities": "Was a spouse , parent , and sibling of M0 a sibling of M1",
        "questionTemplate": "Was a [ROLE_SIMPLE] , [ROLE_SIMPLE] , and [ROLE_SIMPLE] of [entity] a [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P1 M0 .\n?x0 P2 M0 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x0 != M1 )\n}",
        "recursionDepth": 28,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q443473 .\n?x0 wdt:P3373 wd:Q443473 .\n?x0 wdt:P3373 wd:Q273990 .\n?x0 wdt:P26 wd:Q443473 .\nFILTER ( ?x0 != wd:Q443473 ) .\nFILTER ( ?x0 != wd:Q443473 ) .\nFILTER ( ?x0 != wd:Q273990 )\n}",
        "questionWithBrackets": "Was a spouse , parent , and sibling of [Henutmire] a sibling of [Princess Tia]"
    },
    {
        "questionIdx": 106556,
        "questionPatternModEntities": "Was a spouse , sibling , and parent of M1 M0",
        "questionTemplate": "Was a [ROLE_SIMPLE] , [ROLE_SIMPLE] , and [ROLE_SIMPLE] of [entity] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nFILTER ( M0 != M1 ) .\nFILTER ( M0 != M1 ) .\nM0 P0 M1 .\nM0 P1 M1 .\nM0 P2 M1\n}",
        "recursionDepth": 22,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nFILTER ( wd:Q1523 != wd:Q443473 ) .\nFILTER ( wd:Q1523 != wd:Q443473 ) .\nwd:Q1523 wdt:P40|wdt:P355 wd:Q443473 .\nwd:Q1523 wdt:P3373 wd:Q443473 .\nwd:Q1523 wdt:P26 wd:Q443473\n}",
        "questionWithBrackets": "Was a spouse , sibling , and parent of [Henutmire] [Ramesses II]"
    },
    {
        "questionIdx": 107352,
        "questionPatternModEntities": "Was a American German sibling of M0 M1 's sibling",
        "questionTemplate": "Was a [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P1 M2 .\n?x0 P1 M3 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x0 != M1 )\n}",
        "recursionDepth": 27,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P27 wd:Q183 .\n?x0 wdt:P27 wd:Q30 .\n?x0 wdt:P3373 wd:Q17291004 .\n?x0 wdt:P3373 wd:Q17291009 .\nFILTER ( ?x0 != wd:Q17291004 ) .\nFILTER ( ?x0 != wd:Q17291009 )\n}",
        "questionWithBrackets": "Was a American German sibling of [Karin Haas] [Sabine Haas] 's sibling"
    },
    {
        "questionIdx": 107369,
        "questionPatternModEntities": "Was a American actor of M2 M0",
        "questionTemplate": "Was a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M2\n}",
        "recursionDepth": 18,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q4355802 wdt:P453 wd:Q682243 .\nwd:Q4355802 wdt:P27 wd:Q30\n}",
        "questionWithBrackets": "Was a American actor of [Mikoto Misaka] [Brittney Karbowski]"
    },
    {
        "questionIdx": 107428,
        "questionPatternModEntities": "Was a American employee of M1 M0",
        "questionTemplate": "Was a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M2\n}",
        "recursionDepth": 18,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q7346 wdt:P108 wd:Q885833 .\nwd:Q7346 wdt:P27 wd:Q30\n}",
        "questionWithBrackets": "Was a American employee of [Blue Note] [John Coltrane]"
    },
    {
        "questionIdx": 107431,
        "questionPatternModEntities": "Was a American employee of M1 and M2 M0",
        "questionTemplate": "Was a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] and [entity] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P1 M3\n}",
        "recursionDepth": 22,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q11740 wdt:P108 wd:Q23548 .\nwd:Q11740 wdt:P108 wd:Q618604 .\nwd:Q11740 wdt:P27 wd:Q30\n}",
        "questionWithBrackets": "Was a American employee of [National Advisory Committee for Aeronautics] and [NASA] [Katherine Johnson]"
    },
    {
        "questionIdx": 107432,
        "questionPatternModEntities": "Was a American employee of M1 , M2 , and M3 M0",
        "questionTemplate": "Was a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] , [entity] , and [entity] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P0 M3 .\nM0 P1 M4\n}",
        "recursionDepth": 25,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q7493 wdt:P108 wd:Q19605676 .\nwd:Q7493 wdt:P108 wd:Q4813475 .\nwd:Q7493 wdt:P108 wd:Q457281 .\nwd:Q7493 wdt:P27 wd:Q30\n}",
        "questionWithBrackets": "Was a American employee of [Northern Regional Research Lab] , [Athens College] , and [University of Illinois at Urbana\u2013Champaign] [Allene Jeanes]"
    },
    {
        "questionIdx": 107446,
        "questionPatternModEntities": "Was a American female actor of M2 M0",
        "questionTemplate": "Was a [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M2 .\nM0 P2 M3\n}",
        "recursionDepth": 23,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q978964 wdt:P453 wd:Q2744250 .\nwd:Q978964 wdt:P21 wd:Q6581072 .\nwd:Q978964 wdt:P27 wd:Q30\n}",
        "questionWithBrackets": "Was a American female actor of [Cortana] [Jen Taylor]"
    },
    {
        "questionIdx": 107543,
        "questionPatternModEntities": "Was a American spouse of M2 M0",
        "questionTemplate": "Was a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nFILTER ( M0 != M2 ) .\nM0 P0 M1 .\nM0 P1 M2\n}",
        "recursionDepth": 18,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nFILTER ( wd:Q11333 != wd:Q230789 ) .\nwd:Q11333 wdt:P27 wd:Q30 .\nwd:Q11333 wdt:P26 wd:Q230789\n}",
        "questionWithBrackets": "Was a American spouse of [Catherine Hicks] [Kevin Yagher]"
    },
    {
        "questionIdx": 107547,
        "questionPatternModEntities": "Was a American spouse of M4 influenced by M0 and influenced by M1 and M2",
        "questionTemplate": "Was a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] [VP_SIMPLE] by [entity] and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P1 M3 .\n?x0 P2 M4 .\nFILTER ( ?x0 != M4 )\n}",
        "recursionDepth": 38,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P737 wd:Q303 .\n?x0 wdt:P737 wd:Q1438730 .\n?x0 wdt:P737 wd:Q1744 .\n?x0 wdt:P27 wd:Q30 .\n?x0 wdt:P26 wd:Q32045 .\nFILTER ( ?x0 != wd:Q32045 )\n}",
        "questionWithBrackets": "Was a American spouse of [Liam Hemsworth] influenced by [Elvis Presley] and influenced by [Madonna] and [OneRepublic]"
    },
    {
        "questionIdx": 107620,
        "questionPatternModEntities": "Was a Italian Swedish sibling of M1 M0",
        "questionTemplate": "Was a [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nFILTER ( M0 != M1 ) .\nM0 P0 M1 .\nM0 P1 M2 .\nM0 P1 M3\n}",
        "recursionDepth": 23,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nFILTER ( wd:Q203840 != wd:Q508325 ) .\nwd:Q203840 wdt:P27 wd:Q38 .\nwd:Q203840 wdt:P27 wd:Q34 .\nwd:Q203840 wdt:P3373 wd:Q508325\n}",
        "questionWithBrackets": "Was a Italian Swedish sibling of [Pia Lindstr\u00f6m] [Isabella Rossellini]"
    },
    {
        "questionIdx": 107626,
        "questionPatternModEntities": "Was a Italian actor of M2 , M3 , M4 , and M5 M0",
        "questionTemplate": "Was a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] , [entity] , [entity] , and [entity] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M2 .\nM0 P1 M3 .\nM0 P1 M4 .\nM0 P1 M5\n}",
        "recursionDepth": 28,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q37615 wdt:P453 wd:Q64005951 .\nwd:Q37615 wdt:P453 wd:Q5815108 .\nwd:Q37615 wdt:P453 wd:Q48463568 .\nwd:Q37615 wdt:P453 wd:Q50386907 .\nwd:Q37615 wdt:P27 wd:Q38\n}",
        "questionWithBrackets": "Was a Italian actor of [Andrea Ch\u00e9nier] , [Duke of Mantua] , [Mario Cavaradossi] , and [Rodolfo] [Luciano Pavarotti]"
    },
    {
        "questionIdx": 107627,
        "questionPatternModEntities": "Was a Italian actor of M2 M0",
        "questionTemplate": "Was a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M2\n}",
        "recursionDepth": 18,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q37615 wdt:P453 wd:Q5815108 .\nwd:Q37615 wdt:P27 wd:Q38\n}",
        "questionWithBrackets": "Was a Italian actor of [Duke of Mantua] [Luciano Pavarotti]"
    },
    {
        "questionIdx": 107628,
        "questionPatternModEntities": "Was a Italian actor of M2 and M3 M0",
        "questionTemplate": "Was a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] and [entity] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M2 .\nM0 P1 M3\n}",
        "recursionDepth": 22,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q229179 wdt:P453 wd:Q207990 .\nwd:Q229179 wdt:P453 wd:Q50386864 .\nwd:Q229179 wdt:P27 wd:Q38\n}",
        "questionWithBrackets": "Was a Italian actor of [Cio-Cio-san (Madama Butterfly)] and [Turandot] [Renata Tebaldi]"
    },
    {
        "questionIdx": 107745,
        "questionPatternModEntities": "Was a Italian employee of M1 , M2 , M3 , M4 , and M5 M0",
        "questionTemplate": "Was a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] , [entity] , [entity] , [entity] , and [entity] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P0 M3 .\nM0 P0 M4 .\nM0 P0 M5 .\nM0 P1 M6\n}",
        "recursionDepth": 31,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q71607 wdt:P108 wd:Q153978 .\nwd:Q71607 wdt:P108 wd:Q178848 .\nwd:Q71607 wdt:P108 wd:Q696757 .\nwd:Q71607 wdt:P108 wd:Q835662 .\nwd:Q71607 wdt:P108 wd:Q11942 .\nwd:Q71607 wdt:P27 wd:Q38\n}",
        "questionWithBrackets": "Was a Italian employee of [University of Duisburg-Essen] , [University of T\u00fcbingen] , [Ulm University] , [University of Notre Dame] , and [ETH Z\u00fcrich] [Vittorio H\u00f6sle]"
    },
    {
        "questionIdx": 107746,
        "questionPatternModEntities": "Was a Italian employee of M1 M0",
        "questionTemplate": "Was a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M2\n}",
        "recursionDepth": 18,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q8753 wdt:P108 wd:Q820887 .\nwd:Q8753 wdt:P27 wd:Q38\n}",
        "questionWithBrackets": "Was a Italian employee of [University of Florence] [Enrico Fermi]"
    },
    {
        "questionIdx": 107747,
        "questionPatternModEntities": "Was a Italian employee of M1 , M2 , and M3 M0",
        "questionTemplate": "Was a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] , [entity] , and [entity] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P0 M3 .\nM0 P1 M4\n}",
        "recursionDepth": 25,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q8753 wdt:P108 wd:Q131252 .\nwd:Q8753 wdt:P108 wd:Q820887 .\nwd:Q8753 wdt:P108 wd:Q209344 .\nwd:Q8753 wdt:P27 wd:Q38\n}",
        "questionWithBrackets": "Was a Italian employee of [University of Chicago] , [Sapienza University of Rome] , and [University of Florence] [Enrico Fermi]"
    },
    {
        "questionIdx": 107855,
        "questionPatternModEntities": "Was a Italian male Spanish parent of M4 M0",
        "questionTemplate": "Was a [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P1 M3 .\nM0 P2 M4\n}",
        "recursionDepth": 28,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q518879 wdt:P40|wdt:P355 wd:Q235128 .\nwd:Q518879 wdt:P21 wd:Q6581097 .\nwd:Q518879 wdt:P27 wd:Q38 .\nwd:Q518879 wdt:P27 wd:Q29\n}",
        "questionWithBrackets": "Was a Italian male Spanish parent of [Princess Mar\u00eda de las Mercedes of Bourbon-Two Sicilies] [Prince Carlos of Bourbon-Two Sicilies]"
    },
    {
        "questionIdx": 107928,
        "questionPatternModEntities": "Was a Italian sibling of M0 influenced by M1",
        "questionTemplate": "Was a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P2 M2 .\nFILTER ( ?x0 != M0 )\n}",
        "recursionDepth": 23,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P737 wd:Q36591 .\n?x0 wdt:P27 wd:Q38 .\n?x0 wdt:P3373 wd:Q17141899 .\nFILTER ( ?x0 != wd:Q17141899 )\n}",
        "questionWithBrackets": "Was a Italian sibling of [Floriano Calvino] influenced by [Vladimir Nabokov]"
    },
    {
        "questionIdx": 108308,
        "questionPatternModEntities": "Was a actor of M0 's parent M1",
        "questionTemplate": "Was a [ROLE_SIMPLE] of [entity] 's [ROLE_SIMPLE] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 ?x0\n}",
        "recursionDepth": 17,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q130832 .\nwd:Q37739859 wdt:P453 ?x0\n}",
        "questionWithBrackets": "Was a actor of [Perseus] 's parent [shower of gold]"
    },
    {
        "questionIdx": 108342,
        "questionPatternModEntities": "Was a actor of M0 's employee M1",
        "questionTemplate": "Was a [ROLE_SIMPLE] of [entity] 's [ROLE_SIMPLE] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 ?x0\n}",
        "recursionDepth": 17,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P108 wd:Q86105647 .\nwd:Q37269398 wdt:P453 ?x0\n}",
        "questionWithBrackets": "Was a actor of [No label defined] 's employee [Jonathan Evans-Jones]"
    },
    {
        "questionIdx": 108345,
        "questionPatternModEntities": "Was a actor of M1 employed by M0",
        "questionTemplate": "Was a [ROLE_SIMPLE] of [entity] [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1\n}",
        "recursionDepth": 18,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P453 wd:Q9054901 .\n?x0 wdt:P108 wd:Q207028\n}",
        "questionWithBrackets": "Was a actor of [Pamina] employed by [Mariinsky Theatre]"
    },
    {
        "questionIdx": 108350,
        "questionPatternModEntities": "Was a actor of M0 M1 's male actor",
        "questionTemplate": "Was a [ROLE_SIMPLE] of [entity] [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P1 M2\n}",
        "recursionDepth": 22,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P453 wd:Q33999 .\n?x0 wdt:P453 wd:Q34350831 .\n?x0 wdt:P21 wd:Q6581097\n}",
        "questionWithBrackets": "Was a actor of [actor] [Super Boy] 's male actor"
    },
    {
        "questionIdx": 108354,
        "questionPatternModEntities": "Was a actor of M1 M0",
        "questionTemplate": "Was a [ROLE_SIMPLE] of [entity] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1\n}",
        "recursionDepth": 13,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q29772 wdt:P453 wd:Q905926\n}",
        "questionWithBrackets": "Was a actor of [Protoss] [Jang Min Chul]"
    },
    {
        "questionIdx": 108362,
        "questionPatternModEntities": "Was a actor of M0 a spouse of M1",
        "questionTemplate": "Was a [ROLE_SIMPLE] of [entity] a [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M1 )\n}",
        "recursionDepth": 19,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P453 wd:Q222573 .\n?x0 wdt:P26 wd:Q192482 .\nFILTER ( ?x0 != wd:Q192482 )\n}",
        "questionWithBrackets": "Was a actor of [femme fatale] a spouse of [Telemachus]"
    },
    {
        "questionIdx": 108377,
        "questionPatternModEntities": "Was a actor of M0 's actor M1",
        "questionTemplate": "Was a [ROLE_SIMPLE] of [entity] 's [ROLE_SIMPLE] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P0 ?x0\n}",
        "recursionDepth": 17,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P453 wd:Q105565656 .\nwd:Q105565856 wdt:P453 ?x0\n}",
        "questionWithBrackets": "Was a actor of [No label defined] 's actor [No label defined]"
    },
    {
        "questionIdx": 108516,
        "questionPatternModEntities": "Was a actor that M1 was played by M0",
        "questionTemplate": "Was a [NP_SIMPLE] that [entity] was [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1\n}",
        "recursionDepth": 21,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q29765 wdt:P453 wd:Q845913\n}",
        "questionWithBrackets": "Was a actor that [Zerg] was played by [Lim Jae-Duk]"
    },
    {
        "questionIdx": 110325,
        "questionPatternModEntities": "Was a employee of M1 a sibling of M0",
        "questionTemplate": "Was a [ROLE_SIMPLE] of [entity] a [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M0 )\n}",
        "recursionDepth": 19,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P108 wd:Q838946 .\n?x0 wdt:P3373 wd:Q1267 .\nFILTER ( ?x0 != wd:Q1267 )\n}",
        "questionWithBrackets": "Was a employee of [Permanent Court of International Justice] a sibling of [Dag Hammarskj\u00f6ld]"
    },
    {
        "questionIdx": 110407,
        "questionPatternModEntities": "Was a employee of M1 , M2 , and M3 M0",
        "questionTemplate": "Was a [ROLE_SIMPLE] of [entity] , [entity] , and [entity] [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P0 M3\n}",
        "recursionDepth": 20,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q937 wdt:P108 wd:Q70 .\nwd:Q937 wdt:P108 wd:Q11942 .\nwd:Q937 wdt:P108 wd:Q21578\n}",
        "questionWithBrackets": "Was a employee of [Princeton University] , [Bern] , and [ETH Z\u00fcrich] [Albert Einstein]"
    },
    {
        "questionIdx": 110423,
        "questionPatternModEntities": "Was a employee of M0 M1 's parent",
        "questionTemplate": "Was a [ROLE_SIMPLE] of [entity] [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1\n}",
        "recursionDepth": 17,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q102649059 .\n?x0 wdt:P108 wd:Q95\n}",
        "questionWithBrackets": "Was a employee of [Google] [Kavya Pichai] 's parent"
    },
    {
        "questionIdx": 110465,
        "questionPatternModEntities": "Was a employee of M0 , M1 , and M2 influenced by M3 , influenced by M4 , and influenced by M5",
        "questionTemplate": "Was a [ROLE_SIMPLE] of [entity] , [entity] , and [entity] [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P1 M3 .\n?x0 P1 M4 .\n?x0 P1 M5\n}",
        "recursionDepth": 45,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P737 wd:Q859 .\n?x0 wdt:P737 wd:Q42511 .\n?x0 wdt:P737 wd:Q82925 .\n?x0 wdt:P108 wd:Q194223 .\n?x0 wdt:P108 wd:Q784171 .\n?x0 wdt:P108 wd:Q1319177\n}",
        "questionWithBrackets": "Was a employee of [University of Buenos Aires] , [National Library of the Argentine Republic] , and [National University of La Plata] influenced by [H. G. Wells] , influenced by [Joseph Conrad] , and influenced by [Plato]"
    },
    {
        "questionIdx": 110484,
        "questionPatternModEntities": "Was a employee of M1 and M2 a Spanish sibling of M0",
        "questionTemplate": "Was a [ROLE_SIMPLE] of [entity] and [entity] a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\n?x0 P2 M3 .\nFILTER ( ?x0 != M0 )\n}",
        "recursionDepth": 28,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P108 wd:Q131252 .\n?x0 wdt:P108 wd:Q219615 .\n?x0 wdt:P27 wd:Q29 .\n?x0 wdt:P3373 wd:Q9016932 .\nFILTER ( ?x0 != wd:Q9016932 )\n}",
        "questionWithBrackets": "Was a employee of [University of Barcelona] and [University of Chicago] a Spanish sibling of [J\u00falia Coromines i Vigneaux]"
    },
    {
        "questionIdx": 111001,
        "questionPatternModEntities": "Was M3 produced by M2 's male parent 's German sibling",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x0 P1 M0 .\n?x1 P2 M1 .\n?x1 P3 M2 .\nFILTER ( ?x0 != ?x1 ) .\nM3 P4 ?x0\n}",
        "recursionDepth": 30,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P27 wd:Q183 .\n?x0 wdt:P3373 ?x1 .\n?x1 wdt:P40|wdt:P355 wd:Q94936058 .\n?x1 wdt:P21 wd:Q6581097 .\nFILTER ( ?x0 != ?x1 ) .\nwd:Q3822005 wdt:P162|wdt:P272 ?x0\n}",
        "questionWithBrackets": "Was [The Woman from Moscow] produced by [Francis Bamberger] 's male parent 's German sibling"
    },
    {
        "questionIdx": 111060,
        "questionPatternModEntities": "Was M0 M1 's Spanish Italian sibling",
        "questionTemplate": "Was [entity] [entity] 's [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\nFILTER ( M0 != M1 ) .\nM0 P0 M1 .\nM0 P1 M2 .\nM0 P1 M3\n}",
        "recursionDepth": 21,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nFILTER ( wd:Q518879 != wd:Q450684 ) .\nwd:Q518879 wdt:P27 wd:Q38 .\nwd:Q518879 wdt:P27 wd:Q29 .\nwd:Q518879 wdt:P3373 wd:Q450684\n}",
        "questionWithBrackets": "Was [Prince Carlos of Bourbon-Two Sicilies] [Princess Maria Cristina of Bourbon-Two Sicilies] 's Spanish Italian sibling"
    },
    {
        "questionIdx": 111108,
        "questionPatternModEntities": "Was M0 a Italian Canadian employee of M1 and M2",
        "questionTemplate": "Was [entity] a [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P1 M3 .\nM0 P1 M4\n}",
        "recursionDepth": 27,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q1229223 wdt:P108 wd:Q18046528 .\nwd:Q1229223 wdt:P108 wd:Q26921 .\nwd:Q1229223 wdt:P27 wd:Q38 .\nwd:Q1229223 wdt:P27 wd:Q16\n}",
        "questionWithBrackets": "Was [Sergio Marchionne] a Italian Canadian employee of [Alfa Romeo] and [Deloitte Netherlands]"
    },
    {
        "questionIdx": 111154,
        "questionPatternModEntities": "Were M2 and M3 directed by and produced by a Swedish sibling of M1 's spouse",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by and [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x0 P1 M0 .\n?x1 P2 M1 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x1 != M1 ) .\nM2 P3 ?x0 .\nM2 P4 ?x0 .\nM3 P3 ?x0 .\nM3 P4 ?x0\n}",
        "recursionDepth": 39,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P27 wd:Q34 .\n?x0 wdt:P3373 ?x1 .\n?x1 wdt:P26 wd:Q5586737 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x1 != wd:Q5586737 ) .\nwd:Q388846 wdt:P57 ?x0 .\nwd:Q388846 wdt:P162|wdt:P272 ?x0 .\nwd:Q695255 wdt:P57 ?x0 .\nwd:Q695255 wdt:P162|wdt:P272 ?x0\n}",
        "questionWithBrackets": "Were [Persona] and [Face to Face] directed by and produced by a Swedish sibling of [Paul Britten Austin] 's spouse"
    },
    {
        "questionIdx": 111178,
        "questionPatternModEntities": "Were M0 , M2 , and M3 executive produced by , written by , edited by , directed by , and produced by M1",
        "questionTemplate": "Were [entity] , [entity] , and [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1 .\nM0 P2 M1 .\nM0 P3 M1 .\nM0 P4 M1 .\nM2 P0 M1 .\nM2 P1 M1 .\nM2 P2 M1 .\nM2 P3 M1 .\nM2 P4 M1 .\nM3 P0 M1 .\nM3 P1 M1 .\nM3 P2 M1 .\nM3 P3 M1 .\nM3 P4 M1\n}",
        "recursionDepth": 46,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q5437360 wdt:P57 wd:Q187261 .\nwd:Q5437360 wdt:P1040 wd:Q187261 .\nwd:Q5437360 wdt:P1431 wd:Q187261 .\nwd:Q5437360 wdt:P162|wdt:P272 wd:Q187261 .\nwd:Q5437360 wdt:P58 wd:Q187261 .\nwd:Q6084069 wdt:P57 wd:Q187261 .\nwd:Q6084069 wdt:P1040 wd:Q187261 .\nwd:Q6084069 wdt:P1431 wd:Q187261 .\nwd:Q6084069 wdt:P162|wdt:P272 wd:Q187261 .\nwd:Q6084069 wdt:P58 wd:Q187261 .\nwd:Q12813010 wdt:P57 wd:Q187261 .\nwd:Q12813010 wdt:P1040 wd:Q187261 .\nwd:Q12813010 wdt:P1431 wd:Q187261 .\nwd:Q12813010 wdt:P162|wdt:P272 wd:Q187261 .\nwd:Q12813010 wdt:P58 wd:Q187261\n}",
        "questionWithBrackets": "Were [The Waiting Room] , [The Confession] , and [Fate] executive produced by , written by , edited by , directed by , and produced by [Zeki Demirkubuz]"
    },
    {
        "questionIdx": 111208,
        "questionPatternModEntities": "Were M1 and M2 edited by M0 's employee",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 ?x0 .\nM2 P1 ?x0\n}",
        "recursionDepth": 20,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P108 wd:Q49210 .\nwd:Q956288 wdt:P1040 ?x0 .\nwd:Q2005061 wdt:P1040 ?x0\n}",
        "questionWithBrackets": "Were [The Big Shave] and [Woodstock] edited by [New York University] 's employee"
    },
    {
        "questionIdx": 111223,
        "questionPatternModEntities": "Were M2 , M3 , M4 , and M5 produced by , written by , and directed by M1 's Chinese spouse",
        "questionTemplate": "Were [entity] , [entity] , [entity] , and [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M1 ) .\nM2 P2 ?x0 .\nM2 P3 ?x0 .\nM2 P4 ?x0 .\nM3 P2 ?x0 .\nM3 P3 ?x0 .\nM3 P4 ?x0 .\nM4 P2 ?x0 .\nM4 P3 ?x0 .\nM4 P4 ?x0 .\nM5 P2 ?x0 .\nM5 P3 ?x0 .\nM5 P4 ?x0\n}",
        "recursionDepth": 45,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P27 wd:Q148 .\n?x0 wdt:P26 wd:Q3335772 .\nFILTER ( ?x0 != wd:Q3335772 ) .\nwd:Q14326808 wdt:P57 ?x0 .\nwd:Q14326808 wdt:P162|wdt:P272 ?x0 .\nwd:Q14326808 wdt:P58 ?x0 .\nwd:Q1315888 wdt:P57 ?x0 .\nwd:Q1315888 wdt:P162|wdt:P272 ?x0 .\nwd:Q1315888 wdt:P58 ?x0 .\nwd:Q947446 wdt:P57 ?x0 .\nwd:Q947446 wdt:P162|wdt:P272 ?x0 .\nwd:Q947446 wdt:P58 ?x0 .\nwd:Q742541 wdt:P57 ?x0 .\nwd:Q742541 wdt:P162|wdt:P272 ?x0 .\nwd:Q742541 wdt:P58 ?x0\n}",
        "questionWithBrackets": "Were [New Dragon Gate Inn] , [Once Upon a Time in China] , [Young Detective Dee: Rise of the Sea Dragon] , and [The Legend of Zu] produced by , written by , and directed by [Nansun Shi] 's Chinese spouse"
    },
    {
        "questionIdx": 111230,
        "questionPatternModEntities": "Were M2 and M5 executive produced by M0 's Canadian sibling and executive produced by M3 and M4",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M0 ) .\nM2 P2 ?x0 .\nM2 P2 M3 .\nM2 P2 M4 .\nM5 P2 ?x0 .\nM5 P2 M3 .\nM5 P2 M4\n}",
        "recursionDepth": 42,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P27 wd:Q16 .\n?x0 wdt:P3373 wd:Q86157610 .\nFILTER ( ?x0 != wd:Q86157610 ) .\nwd:Q28443756 wdt:P1431 ?x0 .\nwd:Q28443756 wdt:P1431 wd:Q3061320 .\nwd:Q28443756 wdt:P1431 wd:Q220308 .\nwd:Q48796994 wdt:P1431 ?x0 .\nwd:Q48796994 wdt:P1431 wd:Q3061320 .\nwd:Q48796994 wdt:P1431 wd:Q220308\n}",
        "questionWithBrackets": "Were [The Boys] and [Future Man] executive produced by [Danya Rogen] 's Canadian sibling and executive produced by [Seth Rogen] and [Evan Goldberg]"
    },
    {
        "questionIdx": 111234,
        "questionPatternModEntities": "Were M1 and M2 executive produced by M0 's parent",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 ?x0 .\nM2 P1 ?x0\n}",
        "recursionDepth": 21,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q6377498 .\nwd:Q165713 wdt:P1431 ?x0 .\nwd:Q472096 wdt:P1431 ?x0\n}",
        "questionWithBrackets": "Were [Body Heat] and [Star Wars: Episode I \u2013 The Phantom Menace] executive produced by [Katie Lucas] 's parent"
    },
    {
        "questionIdx": 111254,
        "questionPatternModEntities": "Were M0 and M7 directed by M6 , written by M1 , M2 , M3 , and M4 , and written by M5",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , [entity] , [entity] , and [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P0 M3 .\nM0 P0 M4 .\nM0 P0 M5 .\nM0 P1 M6 .\nM7 P0 M1 .\nM7 P0 M2 .\nM7 P0 M3 .\nM7 P0 M4 .\nM7 P0 M5 .\nM7 P1 M6\n}",
        "recursionDepth": 46,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q2261883 wdt:P57 wd:Q1040240 .\nwd:Q2261883 wdt:P58 wd:Q25120 .\nwd:Q2261883 wdt:P58 wd:Q3938849 .\nwd:Q2261883 wdt:P58 wd:Q179982 .\nwd:Q2261883 wdt:P58 wd:Q392644 .\nwd:Q2261883 wdt:P58 wd:Q469164 .\nwd:Q2661437 wdt:P57 wd:Q1040240 .\nwd:Q2661437 wdt:P58 wd:Q25120 .\nwd:Q2661437 wdt:P58 wd:Q3938849 .\nwd:Q2661437 wdt:P58 wd:Q179982 .\nwd:Q2661437 wdt:P58 wd:Q392644 .\nwd:Q2661437 wdt:P58 wd:Q469164\n}",
        "questionWithBrackets": "Were [Caprice Italian Style] and [The Witches] directed by [Franco Rossi] , written by [Roberto Gianviti] , [Agenore Incrocci] , [Cesare Zavattini] , and [Furio Scarpelli] , and written by [Pier Paolo Pasolini]"
    },
    {
        "questionIdx": 111255,
        "questionPatternModEntities": "Were M0 and M7 directed by M5 , directed by M6 , and written by M1 , M2 , M3 , and M4",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity] , [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P0 M3 .\nM0 P0 M4 .\nM0 P1 M5 .\nM0 P1 M6 .\nM7 P0 M1 .\nM7 P0 M2 .\nM7 P0 M3 .\nM7 P0 M4 .\nM7 P1 M5 .\nM7 P1 M6\n}",
        "recursionDepth": 46,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q25043 wdt:P57 wd:Q166159 .\nwd:Q25043 wdt:P57 wd:Q25078 .\nwd:Q25043 wdt:P58 wd:Q25014 .\nwd:Q25043 wdt:P58 wd:Q223985 .\nwd:Q25043 wdt:P58 wd:Q210741 .\nwd:Q25043 wdt:P58 wd:Q24962 .\nwd:Q24980 wdt:P57 wd:Q166159 .\nwd:Q24980 wdt:P57 wd:Q25078 .\nwd:Q24980 wdt:P58 wd:Q25014 .\nwd:Q24980 wdt:P58 wd:Q223985 .\nwd:Q24980 wdt:P58 wd:Q210741 .\nwd:Q24980 wdt:P58 wd:Q24962\n}",
        "questionWithBrackets": "Were [Monty Python and the Holy Grail] and [Monty Python's The Meaning of Life] directed by [Terry Jones] , directed by [Terry Gilliam] , and written by [Eric Idle] , [Michael Palin] , [John Cleese] , and [Graham Chapman]"
    },
    {
        "questionIdx": 111259,
        "questionPatternModEntities": "Were M0 and M5 directed by M3 , executive produced by M1 , directed by M4 , and written by M2",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M2 .\nM0 P2 M3 .\nM0 P2 M4 .\nM5 P0 M1 .\nM5 P1 M2 .\nM5 P2 M3 .\nM5 P2 M4\n}",
        "recursionDepth": 46,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q23781155 wdt:P57 wd:Q20675767 .\nwd:Q23781155 wdt:P57 wd:Q18018415 .\nwd:Q23781155 wdt:P1431 wd:Q181900 .\nwd:Q23781155 wdt:P58 wd:Q5112818 .\nwd:Q18407657 wdt:P57 wd:Q20675767 .\nwd:Q18407657 wdt:P57 wd:Q18018415 .\nwd:Q18407657 wdt:P1431 wd:Q181900 .\nwd:Q18407657 wdt:P58 wd:Q5112818\n}",
        "questionWithBrackets": "Were [Avengers: Endgame] and [Captain America: Civil War] directed by [Joe Russo] , executive produced by [Stan Lee] , directed by [Anthony Russo] , and written by [Christopher Markus]"
    },
    {
        "questionIdx": 111262,
        "questionPatternModEntities": "Were M0 and M5 directed by M4 , written by M2 , executive produced by M1 , and written by M3",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M2 .\nM0 P1 M3 .\nM0 P2 M4 .\nM5 P0 M1 .\nM5 P1 M2 .\nM5 P1 M3 .\nM5 P2 M4\n}",
        "recursionDepth": 46,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q171453 wdt:P57 wd:Q59259 .\nwd:Q171453 wdt:P1431 wd:Q8877 .\nwd:Q171453 wdt:P58 wd:Q432598 .\nwd:Q171453 wdt:P58 wd:Q467500 .\nwd:Q191100 wdt:P57 wd:Q59259 .\nwd:Q191100 wdt:P1431 wd:Q8877 .\nwd:Q191100 wdt:P58 wd:Q432598 .\nwd:Q191100 wdt:P58 wd:Q467500\n}",
        "questionWithBrackets": "Were [Transformers] and [Transformers: Revenge of the Fallen] directed by [Michael Bay] , written by [Alex Kurtzman] , executive produced by [Steven Spielberg] , and written by [Roberto Orci]"
    },
    {
        "questionIdx": 111265,
        "questionPatternModEntities": "Were M0 and M7 edited by M5 , directed by M6 , and written by M1 , M2 , M3 , and M4",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity] , [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P0 M3 .\nM0 P0 M4 .\nM0 P1 M5 .\nM0 P2 M6 .\nM7 P0 M1 .\nM7 P0 M2 .\nM7 P0 M3 .\nM7 P0 M4 .\nM7 P1 M5 .\nM7 P2 M6\n}",
        "recursionDepth": 46,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q596623 wdt:P57 wd:Q13888 .\nwd:Q596623 wdt:P1040 wd:Q456251 .\nwd:Q596623 wdt:P58 wd:Q2055700 .\nwd:Q596623 wdt:P58 wd:Q268443 .\nwd:Q596623 wdt:P58 wd:Q3054638 .\nwd:Q596623 wdt:P58 wd:Q525427 .\nwd:Q427186 wdt:P57 wd:Q13888 .\nwd:Q427186 wdt:P1040 wd:Q456251 .\nwd:Q427186 wdt:P58 wd:Q2055700 .\nwd:Q427186 wdt:P58 wd:Q268443 .\nwd:Q427186 wdt:P58 wd:Q3054638 .\nwd:Q427186 wdt:P58 wd:Q525427\n}",
        "questionWithBrackets": "Were [The Leopard] and [Rocco and His Brothers] edited by [Mario Serandrei] , directed by [Luchino Visconti] , and written by [Enrico Medioli] , [Massimo Franciosa] , [Pasquale Festa Campanile] , and [Suso Cecchi d'Amico]"
    },
    {
        "questionIdx": 111271,
        "questionPatternModEntities": "Were M0 and M6 executive produced by M1 , directed by M4 and M5 , and executive produced by M2 and M3",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] and [entity] , and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P0 M3 .\nM0 P1 M4 .\nM0 P1 M5 .\nM6 P0 M1 .\nM6 P0 M2 .\nM6 P0 M3 .\nM6 P1 M4 .\nM6 P1 M5\n}",
        "recursionDepth": 46,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q18407657 wdt:P57 wd:Q18018415 .\nwd:Q18407657 wdt:P57 wd:Q20675767 .\nwd:Q18407657 wdt:P1431 wd:Q181900 .\nwd:Q18407657 wdt:P1431 wd:Q23409539 .\nwd:Q18407657 wdt:P1431 wd:Q24176186 .\nwd:Q23781155 wdt:P57 wd:Q18018415 .\nwd:Q23781155 wdt:P57 wd:Q20675767 .\nwd:Q23781155 wdt:P1431 wd:Q181900 .\nwd:Q23781155 wdt:P1431 wd:Q23409539 .\nwd:Q23781155 wdt:P1431 wd:Q24176186\n}",
        "questionWithBrackets": "Were [Captain America: Civil War] and [Avengers: Endgame] executive produced by [Victoria Alonso] , directed by [Joe Russo] and [Anthony Russo] , and executive produced by [Stan Lee] and [Louis D'Esposito]"
    },
    {
        "questionIdx": 111272,
        "questionPatternModEntities": "Were M2 and M6 executive produced by M1 's male parent , written by M3 , and directed by M4 and M5",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nM2 P2 ?x0 .\nM2 P3 M3 .\nM2 P4 M4 .\nM2 P4 M5 .\nM6 P2 ?x0 .\nM6 P3 M3 .\nM6 P4 M4 .\nM6 P4 M5\n}",
        "recursionDepth": 50,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q27161720 .\n?x0 wdt:P21 wd:Q6581097 .\nwd:Q329316 wdt:P57 wd:Q3517016 .\nwd:Q329316 wdt:P57 wd:Q1153718 .\nwd:Q329316 wdt:P1431 ?x0 .\nwd:Q329316 wdt:P58 wd:Q18818307 .\nwd:Q40302 wdt:P57 wd:Q3517016 .\nwd:Q40302 wdt:P57 wd:Q1153718 .\nwd:Q40302 wdt:P1431 ?x0 .\nwd:Q40302 wdt:P58 wd:Q18818307\n}",
        "questionWithBrackets": "Were [The Black Cauldron] and [The Fox and the Hound] executive produced by [Ronald Miller] 's male parent , written by [Peter Young] , and directed by [Richard Rich] and [Ted Berman]"
    },
    {
        "questionIdx": 111273,
        "questionPatternModEntities": "Were M0 and M6 executive produced by M1 and M2 , edited by M4 and M5 , and executive produced by M3",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by [entity] and [entity] , [VP_SIMPLE] by [entity] and [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P0 M3 .\nM0 P1 M4 .\nM0 P1 M5 .\nM6 P0 M1 .\nM6 P0 M2 .\nM6 P0 M3 .\nM6 P1 M4 .\nM6 P1 M5\n}",
        "recursionDepth": 46,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q23781155 wdt:P1040 wd:Q11309299 .\nwd:Q23781155 wdt:P1040 wd:Q24206656 .\nwd:Q23781155 wdt:P1431 wd:Q181900 .\nwd:Q23781155 wdt:P1431 wd:Q23409539 .\nwd:Q23781155 wdt:P1431 wd:Q24176186 .\nwd:Q18407657 wdt:P1040 wd:Q11309299 .\nwd:Q18407657 wdt:P1040 wd:Q24206656 .\nwd:Q18407657 wdt:P1431 wd:Q181900 .\nwd:Q18407657 wdt:P1431 wd:Q23409539 .\nwd:Q18407657 wdt:P1431 wd:Q24176186\n}",
        "questionWithBrackets": "Were [Avengers: Endgame] and [Captain America: Civil War] executive produced by [Victoria Alonso] and [Louis D'Esposito] , edited by [Jeffrey Ford] and [Matthew Schmidt] , and executive produced by [Stan Lee]"
    },
    {
        "questionIdx": 111275,
        "questionPatternModEntities": "Were M0 and M6 executive produced by M1 and M2 , executive produced by M3 , and directed by M4 and M5",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by [entity] and [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P0 M3 .\nM0 P1 M4 .\nM0 P1 M5 .\nM6 P0 M1 .\nM6 P0 M2 .\nM6 P0 M3 .\nM6 P1 M4 .\nM6 P1 M5\n}",
        "recursionDepth": 46,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q23781155 wdt:P57 wd:Q20675767 .\nwd:Q23781155 wdt:P57 wd:Q18018415 .\nwd:Q23781155 wdt:P1431 wd:Q181900 .\nwd:Q23781155 wdt:P1431 wd:Q23409539 .\nwd:Q23781155 wdt:P1431 wd:Q24176186 .\nwd:Q18407657 wdt:P57 wd:Q20675767 .\nwd:Q18407657 wdt:P57 wd:Q18018415 .\nwd:Q18407657 wdt:P1431 wd:Q181900 .\nwd:Q18407657 wdt:P1431 wd:Q23409539 .\nwd:Q18407657 wdt:P1431 wd:Q24176186\n}",
        "questionWithBrackets": "Were [Avengers: Endgame] and [Captain America: Civil War] executive produced by [Louis D'Esposito] and [Stan Lee] , executive produced by [Victoria Alonso] , and directed by [Anthony Russo] and [Joe Russo]"
    },
    {
        "questionIdx": 111283,
        "questionPatternModEntities": "Were M0 and M7 written by M1 , M2 , M3 , and M4 , edited by M5 , and directed by M6",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by [entity] , [entity] , [entity] , and [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P0 M3 .\nM0 P0 M4 .\nM0 P1 M5 .\nM0 P2 M6 .\nM7 P0 M1 .\nM7 P0 M2 .\nM7 P0 M3 .\nM7 P0 M4 .\nM7 P1 M5 .\nM7 P2 M6\n}",
        "recursionDepth": 46,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q2041365 wdt:P57 wd:Q114570 .\nwd:Q2041365 wdt:P1040 wd:Q98984 .\nwd:Q2041365 wdt:P58 wd:Q2076361 .\nwd:Q2041365 wdt:P58 wd:Q70300 .\nwd:Q2041365 wdt:P58 wd:Q59485 .\nwd:Q2041365 wdt:P58 wd:Q823409 .\nwd:Q2041369 wdt:P57 wd:Q114570 .\nwd:Q2041369 wdt:P1040 wd:Q98984 .\nwd:Q2041369 wdt:P58 wd:Q2076361 .\nwd:Q2041369 wdt:P58 wd:Q70300 .\nwd:Q2041369 wdt:P58 wd:Q59485 .\nwd:Q2041369 wdt:P58 wd:Q823409\n}",
        "questionWithBrackets": "Were [Otto \u2013 Der Film] and [No label defined] written by [Robert Gernhardt] , [Peter Knorr] , [Bernd Eilert] , and [Otto Waalkes] , edited by [Jutta Hering] , and directed by [Xaver Schwarzenberger]"
    },
    {
        "questionIdx": 111288,
        "questionPatternModEntities": "Were M0 and M6 written by M1 , M2 , M3 , M4 , and M5",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by [entity] , [entity] , [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P0 M3 .\nM0 P0 M4 .\nM0 P0 M5 .\nM6 P0 M1 .\nM6 P0 M2 .\nM6 P0 M3 .\nM6 P0 M4 .\nM6 P0 M5\n}",
        "recursionDepth": 29,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q427186 wdt:P58 wd:Q13888 .\nwd:Q427186 wdt:P58 wd:Q525427 .\nwd:Q427186 wdt:P58 wd:Q3054638 .\nwd:Q427186 wdt:P58 wd:Q268443 .\nwd:Q427186 wdt:P58 wd:Q2055700 .\nwd:Q596623 wdt:P58 wd:Q13888 .\nwd:Q596623 wdt:P58 wd:Q525427 .\nwd:Q596623 wdt:P58 wd:Q3054638 .\nwd:Q596623 wdt:P58 wd:Q268443 .\nwd:Q596623 wdt:P58 wd:Q2055700\n}",
        "questionWithBrackets": "Were [Rocco and His Brothers] and [The Leopard] written by [Pasquale Festa Campanile] , [Luchino Visconti] , [Enrico Medioli] , [Massimo Franciosa] , and [Suso Cecchi d'Amico]"
    },
    {
        "questionIdx": 111289,
        "questionPatternModEntities": "Were M0 and M7 written by M1 , M2 , M3 , and M4 , directed by M6 , and written by M5",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by [entity] , [entity] , [entity] , and [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P0 M3 .\nM0 P0 M4 .\nM0 P0 M5 .\nM0 P1 M6 .\nM7 P0 M1 .\nM7 P0 M2 .\nM7 P0 M3 .\nM7 P0 M4 .\nM7 P0 M5 .\nM7 P1 M6\n}",
        "recursionDepth": 46,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q24980 wdt:P57 wd:Q166159 .\nwd:Q24980 wdt:P58 wd:Q24962 .\nwd:Q24980 wdt:P58 wd:Q25014 .\nwd:Q24980 wdt:P58 wd:Q210741 .\nwd:Q24980 wdt:P58 wd:Q25078 .\nwd:Q24980 wdt:P58 wd:Q223985 .\nwd:Q25043 wdt:P57 wd:Q166159 .\nwd:Q25043 wdt:P58 wd:Q24962 .\nwd:Q25043 wdt:P58 wd:Q25014 .\nwd:Q25043 wdt:P58 wd:Q210741 .\nwd:Q25043 wdt:P58 wd:Q25078 .\nwd:Q25043 wdt:P58 wd:Q223985\n}",
        "questionWithBrackets": "Were [Monty Python's The Meaning of Life] and [Monty Python and the Holy Grail] written by [Michael Palin] , [Terry Gilliam] , [Graham Chapman] , and [Eric Idle] , directed by [Terry Jones] , and written by [John Cleese]"
    },
    {
        "questionIdx": 111290,
        "questionPatternModEntities": "Were M1 and M5 written by M2 , directed by M3 and M4 , and executive produced by M0 's parent 's spouse",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] and [entity] , and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x1 P1 M0 .\nFILTER ( ?x0 != ?x1 ) .\nM1 P2 ?x0 .\nM1 P3 M2 .\nM1 P4 M3 .\nM1 P4 M4 .\nM5 P2 ?x0 .\nM5 P3 M2 .\nM5 P4 M3 .\nM5 P4 M4\n}",
        "recursionDepth": 49,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P26 ?x1 .\n?x1 wdt:P40|wdt:P355 wd:Q27161720 .\nFILTER ( ?x0 != ?x1 ) .\nwd:Q40302 wdt:P57 wd:Q3517016 .\nwd:Q40302 wdt:P57 wd:Q1153718 .\nwd:Q40302 wdt:P1431 ?x0 .\nwd:Q40302 wdt:P58 wd:Q3554450 .\nwd:Q329316 wdt:P57 wd:Q3517016 .\nwd:Q329316 wdt:P57 wd:Q1153718 .\nwd:Q329316 wdt:P1431 ?x0 .\nwd:Q329316 wdt:P58 wd:Q3554450\n}",
        "questionWithBrackets": "Were [The Fox and the Hound] and [The Black Cauldron] written by [Vance Gerry] , directed by [Richard Rich] and [Ted Berman] , and executive produced by [Ronald Miller] 's parent 's spouse"
    },
    {
        "questionIdx": 111295,
        "questionPatternModEntities": "Were M0 and M7 directed by M4 , M5 , and M6 and written by M1 , M2 , and M3",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by [entity] , [entity] , and [entity] and [VP_SIMPLE] by [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P0 M3 .\nM0 P1 M4 .\nM0 P1 M5 .\nM0 P1 M6 .\nM7 P0 M1 .\nM7 P0 M2 .\nM7 P0 M3 .\nM7 P1 M4 .\nM7 P1 M5 .\nM7 P1 M6\n}",
        "recursionDepth": 41,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q18106614 wdt:P57 wd:Q7777909 .\nwd:Q18106614 wdt:P57 wd:Q352030 .\nwd:Q18106614 wdt:P57 wd:Q2602324 .\nwd:Q18106614 wdt:P58 wd:Q82022 .\nwd:Q18106614 wdt:P58 wd:Q95334296 .\nwd:Q18106614 wdt:P58 wd:Q235032 .\nwd:Q102390692 wdt:P57 wd:Q7777909 .\nwd:Q102390692 wdt:P57 wd:Q352030 .\nwd:Q102390692 wdt:P57 wd:Q2602324 .\nwd:Q102390692 wdt:P58 wd:Q82022 .\nwd:Q102390692 wdt:P58 wd:Q95334296 .\nwd:Q102390692 wdt:P58 wd:Q235032\n}",
        "questionWithBrackets": "Were [No label defined] and [GEN \u2013 Galerie elity n\u00e1roda] directed by [Ji\u0159\u00ed Menzel] , [Milan \u0160teindler] , and [Jaromil Jire\u0161] and written by [V\u011bra Chytilov\u00e1] , [Jan N\u011bmec] , and [Pavel Jandourek]"
    },
    {
        "questionIdx": 111313,
        "questionPatternModEntities": "Were M1 and M2 directed by M0 's parent",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 ?x0 .\nM2 P1 ?x0\n}",
        "recursionDepth": 20,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q555426 .\nwd:Q1278397 wdt:P57 ?x0 .\nwd:Q2392956 wdt:P57 ?x0\n}",
        "questionWithBrackets": "Were [Eat the Document] and [Renaldo and Clara] directed by [Jakob Dylan] 's parent"
    },
    {
        "questionIdx": 111325,
        "questionPatternModEntities": "Were M1 and M2 executive produced by a sibling of M0",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nM1 P1 ?x0 .\nM2 P1 ?x0\n}",
        "recursionDepth": 23,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P3373 wd:Q469204 .\nFILTER ( ?x0 != wd:Q469204 ) .\nwd:Q22350906 wdt:P1431 ?x0 .\nwd:Q91540 wdt:P1431 ?x0\n}",
        "questionWithBrackets": "Were [Tummy Trouble] and [Back to the Future] executive produced by a sibling of [Anne Spielberg]"
    },
    {
        "questionIdx": 111331,
        "questionPatternModEntities": "Were M2 , M4 , M5 , M6 , and M7 written by a male spouse of M1 and directed by M3",
        "questionTemplate": "Were [entity] , [entity] , [entity] , [entity] , and [entity] [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M1 ) .\nM2 P2 ?x0 .\nM2 P3 M3 .\nM4 P2 ?x0 .\nM4 P3 M3 .\nM5 P2 ?x0 .\nM5 P3 M3 .\nM6 P2 ?x0 .\nM6 P3 M3 .\nM7 P2 ?x0 .\nM7 P3 M3\n}",
        "recursionDepth": 47,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P21 wd:Q6581097 .\n?x0 wdt:P26 wd:Q508871 .\nFILTER ( ?x0 != wd:Q508871 ) .\nwd:Q6469989 wdt:P57 wd:Q2071 .\nwd:Q6469989 wdt:P58 ?x0 .\nwd:Q272860 wdt:P57 wd:Q2071 .\nwd:Q272860 wdt:P58 ?x0 .\nwd:Q272608 wdt:P57 wd:Q2071 .\nwd:Q272608 wdt:P58 ?x0 .\nwd:Q660950 wdt:P57 wd:Q2071 .\nwd:Q660950 wdt:P58 ?x0 .\nwd:Q2085 wdt:P57 wd:Q2071 .\nwd:Q2085 wdt:P58 ?x0\n}",
        "questionWithBrackets": "Were [Lady Blue Shanghai] , [Mulholland Drive] , [Blue Velvet] , [The Elephant Man] , and [Twin Peaks] written by a male spouse of [Mary Sweeney] and directed by [David Lynch]"
    },
    {
        "questionIdx": 111337,
        "questionPatternModEntities": "Were M1 , M4 , M5 , and M6 edited by M3 , executive produced by M0 's sibling , and executive produced by M2",
        "questionTemplate": "Were [entity] , [entity] , [entity] , and [entity] [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nM1 P1 ?x0 .\nM1 P1 M2 .\nM1 P2 M3 .\nM4 P1 ?x0 .\nM4 P1 M2 .\nM4 P2 M3 .\nM5 P1 ?x0 .\nM5 P1 M2 .\nM5 P2 M3 .\nM6 P1 ?x0 .\nM6 P1 M2 .\nM6 P2 M3\n}",
        "recursionDepth": 48,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P3373 wd:Q108622 .\nFILTER ( ?x0 != wd:Q108622 ) .\nwd:Q3077738 wdt:P1040 wd:Q3473349 .\nwd:Q3077738 wdt:P1431 ?x0 .\nwd:Q3077738 wdt:P1431 wd:Q56094 .\nwd:Q107270 wdt:P1040 wd:Q3473349 .\nwd:Q107270 wdt:P1431 ?x0 .\nwd:Q107270 wdt:P1431 wd:Q56094 .\nwd:Q1338368 wdt:P1040 wd:Q3473349 .\nwd:Q1338368 wdt:P1431 ?x0 .\nwd:Q1338368 wdt:P1431 wd:Q56094 .\nwd:Q829695 wdt:P1040 wd:Q3473349 .\nwd:Q829695 wdt:P1431 ?x0 .\nwd:Q829695 wdt:P1431 wd:Q56094\n}",
        "questionWithBrackets": "Were [Lost in Translation] , [Marie Antoinette] , [The Bling Ring] , and [Somewhere] edited by [Sarah Flack] , executive produced by [Talia Shire] 's sibling , and executive produced by [Francis Ford Coppola]"
    },
    {
        "questionIdx": 111367,
        "questionPatternModEntities": "Were M0 , M2 , and M3 written and produced by M1",
        "questionTemplate": "Were [entity] , [entity] , and [entity] [VP_SIMPLE] and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1 .\nM2 P0 M1 .\nM2 P1 M1 .\nM3 P0 M1 .\nM3 P1 M1\n}",
        "recursionDepth": 26,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q10331225 wdt:P162|wdt:P272 wd:Q882 .\nwd:Q10331225 wdt:P58 wd:Q882 .\nwd:Q45602 wdt:P162|wdt:P272 wd:Q882 .\nwd:Q45602 wdt:P58 wd:Q882 .\nwd:Q199039 wdt:P162|wdt:P272 wd:Q882 .\nwd:Q199039 wdt:P58 wd:Q882\n}",
        "questionWithBrackets": "Were [Mixed Up] , [Pay Day] , and [Modern Times] written and produced by [Charlie Chaplin]"
    },
    {
        "questionIdx": 111371,
        "questionPatternModEntities": "Were M3 and M5 written by M4 and written by M0 's French Italian sibling",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by [entity] and [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\nFILTER ( ?x0 != M0 ) .\nM3 P2 ?x0 .\nM3 P2 M4 .\nM5 P2 ?x0 .\nM5 P2 M4\n}",
        "recursionDepth": 41,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P27 wd:Q38 .\n?x0 wdt:P27 wd:Q142 .\n?x0 wdt:P3373 wd:Q143945 .\nFILTER ( ?x0 != wd:Q143945 ) .\nwd:Q11614318 wdt:P58 ?x0 .\nwd:Q11614318 wdt:P58 wd:Q440609 .\nwd:Q39049388 wdt:P58 ?x0 .\nwd:Q39049388 wdt:P58 wd:Q440609\n}",
        "questionWithBrackets": "Were [Les Estivants] and [A Castle in Italy] written by [No\u00e9mie Lvovsky] and written by [Carla Bruni] 's French Italian sibling"
    },
    {
        "questionIdx": 111372,
        "questionPatternModEntities": "Were M2 and M5 written by M3 , written by M4 , and directed by M1 's spouse 's female sibling",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x0 P1 M0 .\n?x1 P2 M1 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x1 != M1 ) .\nM2 P3 M3 .\nM2 P3 M4 .\nM2 P4 ?x0 .\nM5 P3 M3 .\nM5 P3 M4 .\nM5 P4 ?x0\n}",
        "recursionDepth": 49,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P21 wd:Q6581072 .\n?x0 wdt:P3373 ?x1 .\n?x1 wdt:P26 wd:Q329 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x1 != wd:Q329 ) .\nwd:Q11614318 wdt:P57 ?x0 .\nwd:Q11614318 wdt:P58 wd:Q232470 .\nwd:Q11614318 wdt:P58 wd:Q440609 .\nwd:Q39049388 wdt:P57 ?x0 .\nwd:Q39049388 wdt:P58 wd:Q232470 .\nwd:Q39049388 wdt:P58 wd:Q440609\n}",
        "questionWithBrackets": "Were [Les Estivants] and [A Castle in Italy] written by [No\u00e9mie Lvovsky] , written by [Valeria Bruni Tedeschi] , and directed by [Nicolas Sarkozy] 's spouse 's female sibling"
    },
    {
        "questionIdx": 111391,
        "questionPatternModEntities": "Were M2 and M3 written by , produced by , directed by , and edited by M0 's British employee",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nM2 P2 ?x0 .\nM2 P3 ?x0 .\nM2 P4 ?x0 .\nM2 P5 ?x0 .\nM3 P2 ?x0 .\nM3 P3 ?x0 .\nM3 P4 ?x0 .\nM3 P5 ?x0\n}",
        "recursionDepth": 45,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P108 wd:Q681250 .\n?x0 wdt:P27 wd:Q145 .\nwd:Q643771 wdt:P57 ?x0 .\nwd:Q643771 wdt:P1040 ?x0 .\nwd:Q643771 wdt:P162|wdt:P272 ?x0 .\nwd:Q643771 wdt:P58 ?x0 .\nwd:Q3505719 wdt:P57 ?x0 .\nwd:Q3505719 wdt:P1040 ?x0 .\nwd:Q3505719 wdt:P162|wdt:P272 ?x0 .\nwd:Q3505719 wdt:P58 ?x0\n}",
        "questionWithBrackets": "Were [Timecode] and [Suspension of Disbelief] written by , produced by , directed by , and edited by [European Graduate School] 's British employee"
    },
    {
        "questionIdx": 111398,
        "questionPatternModEntities": "Were M2 , M3 , M4 , and M5 produced by , written by , and edited by a British sibling of M0",
        "questionTemplate": "Were [entity] , [entity] , [entity] , and [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M0 ) .\nM2 P2 ?x0 .\nM2 P3 ?x0 .\nM2 P4 ?x0 .\nM3 P2 ?x0 .\nM3 P3 ?x0 .\nM3 P4 ?x0 .\nM4 P2 ?x0 .\nM4 P3 ?x0 .\nM4 P4 ?x0 .\nM5 P2 ?x0 .\nM5 P3 ?x0 .\nM5 P4 ?x0\n}",
        "recursionDepth": 47,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P27 wd:Q145 .\n?x0 wdt:P3373 wd:Q606780 .\nFILTER ( ?x0 != wd:Q606780 ) .\nwd:Q973676 wdt:P1040 ?x0 .\nwd:Q973676 wdt:P162|wdt:P272 ?x0 .\nwd:Q973676 wdt:P58 ?x0 .\nwd:Q45602 wdt:P1040 ?x0 .\nwd:Q45602 wdt:P162|wdt:P272 ?x0 .\nwd:Q45602 wdt:P58 ?x0 .\nwd:Q166739 wdt:P1040 ?x0 .\nwd:Q166739 wdt:P162|wdt:P272 ?x0 .\nwd:Q166739 wdt:P58 ?x0 .\nwd:Q199039 wdt:P1040 ?x0 .\nwd:Q199039 wdt:P162|wdt:P272 ?x0 .\nwd:Q199039 wdt:P58 ?x0\n}",
        "questionWithBrackets": "Were [Modern Times] , [Pay Day] , [A Day's Pleasure] , and [The Floorwalker] produced by , written by , and edited by a British sibling of [Sydney Chaplin]"
    },
    {
        "questionIdx": 111401,
        "questionPatternModEntities": "Were M0 , M2 , and M3 produced , edited , and written by M1",
        "questionTemplate": "Were [entity] , [entity] , and [entity] [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1 .\nM0 P2 M1 .\nM2 P0 M1 .\nM2 P1 M1 .\nM2 P2 M1 .\nM3 P0 M1 .\nM3 P1 M1 .\nM3 P2 M1\n}",
        "recursionDepth": 31,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q733819 wdt:P1040 wd:Q882 .\nwd:Q733819 wdt:P162|wdt:P272 wd:Q882 .\nwd:Q733819 wdt:P58 wd:Q882 .\nwd:Q374172 wdt:P1040 wd:Q882 .\nwd:Q374172 wdt:P162|wdt:P272 wd:Q882 .\nwd:Q374172 wdt:P58 wd:Q882 .\nwd:Q199039 wdt:P1040 wd:Q882 .\nwd:Q199039 wdt:P162|wdt:P272 wd:Q882 .\nwd:Q199039 wdt:P58 wd:Q882\n}",
        "questionWithBrackets": "Were [Pay Day] , [Easy Street] , and [The Kid] produced , edited , and written by [Charlie Chaplin]"
    },
    {
        "questionIdx": 111403,
        "questionPatternModEntities": "Were M2 , M3 , and M4 written , directed , produced , and edited by M0 's male employee",
        "questionTemplate": "Were [entity] , [entity] , and [entity] [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nM2 P2 ?x0 .\nM2 P3 ?x0 .\nM2 P4 ?x0 .\nM2 P5 ?x0 .\nM3 P2 ?x0 .\nM3 P3 ?x0 .\nM3 P4 ?x0 .\nM3 P5 ?x0 .\nM4 P2 ?x0 .\nM4 P3 ?x0 .\nM4 P4 ?x0 .\nM4 P5 ?x0\n}",
        "recursionDepth": 45,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P108 wd:Q13371 .\n?x0 wdt:P21 wd:Q6581097 .\nwd:Q1141467 wdt:P57 ?x0 .\nwd:Q1141467 wdt:P1040 ?x0 .\nwd:Q1141467 wdt:P162|wdt:P272 ?x0 .\nwd:Q1141467 wdt:P58 ?x0 .\nwd:Q2257944 wdt:P57 ?x0 .\nwd:Q2257944 wdt:P1040 ?x0 .\nwd:Q2257944 wdt:P162|wdt:P272 ?x0 .\nwd:Q2257944 wdt:P58 ?x0 .\nwd:Q2534007 wdt:P57 ?x0 .\nwd:Q2534007 wdt:P1040 ?x0 .\nwd:Q2534007 wdt:P162|wdt:P272 ?x0 .\nwd:Q2534007 wdt:P58 ?x0\n}",
        "questionWithBrackets": "Were [She's Gotta Have It] , [Joe's Bed-Stuy Barbershop: We Cut Heads] , and [Crooklyn] written , directed , produced , and edited by [Harvard University] 's male employee"
    },
    {
        "questionIdx": 111405,
        "questionPatternModEntities": "Were M1 , M2 , M3 , and M4 directed by and edited by M0 's spouse",
        "questionTemplate": "Were [entity] , [entity] , [entity] , and [entity] [VP_SIMPLE] by and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nM1 P1 ?x0 .\nM1 P2 ?x0 .\nM2 P1 ?x0 .\nM2 P2 ?x0 .\nM3 P1 ?x0 .\nM3 P2 ?x0 .\nM4 P1 ?x0 .\nM4 P2 ?x0\n}",
        "recursionDepth": 34,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P26 wd:Q241019 .\nFILTER ( ?x0 != wd:Q241019 ) .\nwd:Q2345559 wdt:P57 ?x0 .\nwd:Q2345559 wdt:P1040 ?x0 .\nwd:Q45602 wdt:P57 ?x0 .\nwd:Q45602 wdt:P1040 ?x0 .\nwd:Q238211 wdt:P57 ?x0 .\nwd:Q238211 wdt:P1040 ?x0 .\nwd:Q214723 wdt:P57 ?x0 .\nwd:Q214723 wdt:P1040 ?x0\n}",
        "questionWithBrackets": "Were [Modern Times] , [City Lights] , [The Masquerader] , and [The Gold Rush] directed by and edited by [Mildred Harris] 's spouse"
    },
    {
        "questionIdx": 111468,
        "questionPatternModEntities": "Were M0 , M2 , and M3 executive produced , produced , and edited by M1",
        "questionTemplate": "Were [entity] , [entity] , and [entity] [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1 .\nM0 P2 M1 .\nM2 P0 M1 .\nM2 P1 M1 .\nM2 P2 M1 .\nM3 P0 M1 .\nM3 P1 M1 .\nM3 P2 M1\n}",
        "recursionDepth": 32,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q5437360 wdt:P1040 wd:Q187261 .\nwd:Q5437360 wdt:P1431 wd:Q187261 .\nwd:Q5437360 wdt:P162|wdt:P272 wd:Q187261 .\nwd:Q6084069 wdt:P1040 wd:Q187261 .\nwd:Q6084069 wdt:P1431 wd:Q187261 .\nwd:Q6084069 wdt:P162|wdt:P272 wd:Q187261 .\nwd:Q12813010 wdt:P1040 wd:Q187261 .\nwd:Q12813010 wdt:P1431 wd:Q187261 .\nwd:Q12813010 wdt:P162|wdt:P272 wd:Q187261\n}",
        "questionWithBrackets": "Were [Fate] , [The Confession] , and [The Waiting Room] executive produced , produced , and edited by [Zeki Demirkubuz]"
    },
    {
        "questionIdx": 111485,
        "questionPatternModEntities": "Were M2 , M3 , M4 , M5 , and M6 directed by M0 's Swedish sibling 's spouse",
        "questionTemplate": "Were [entity] , [entity] , [entity] , [entity] , and [entity] [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x1 P1 M0 .\n?x1 P2 M1 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x1 != M0 ) .\nM2 P3 ?x0 .\nM3 P3 ?x0 .\nM4 P3 ?x0 .\nM5 P3 ?x0 .\nM6 P3 ?x0\n}",
        "recursionDepth": 38,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P26 ?x1 .\n?x1 wdt:P27 wd:Q34 .\n?x1 wdt:P3373 wd:Q94881390 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x1 != wd:Q94881390 ) .\nwd:Q15819857 wdt:P57 ?x0 .\nwd:Q1540342 wdt:P57 ?x0 .\nwd:Q117031 wdt:P57 ?x0 .\nwd:Q562046 wdt:P57 ?x0 .\nwd:Q124246 wdt:P57 ?x0\n}",
        "questionWithBrackets": "Were [The Immortal Heart] , [I'll Carry You in My Arms] , [Der Herrscher] , [No label defined] , and [Die goldene Stadt] directed by [Ulla S\u00f6derbaum] 's Swedish sibling 's spouse"
    },
    {
        "questionIdx": 111513,
        "questionPatternModEntities": "Were M0 and M3 written by and edited by M1 and M2",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P1 M1 .\nM0 P1 M2 .\nM3 P0 M1 .\nM3 P0 M2 .\nM3 P1 M1 .\nM3 P1 M2\n}",
        "recursionDepth": 28,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q20729238 wdt:P1040 wd:Q562108 .\nwd:Q20729238 wdt:P1040 wd:Q35979475 .\nwd:Q20729238 wdt:P58 wd:Q562108 .\nwd:Q20729238 wdt:P58 wd:Q35979475 .\nwd:Q20729551 wdt:P1040 wd:Q562108 .\nwd:Q20729551 wdt:P1040 wd:Q35979475 .\nwd:Q20729551 wdt:P58 wd:Q562108 .\nwd:Q20729551 wdt:P58 wd:Q35979475\n}",
        "questionWithBrackets": "Were [Stop for Bud] and [Motion picture] written by and edited by [J\u00f8rgen Leth] and [Ole John]"
    },
    {
        "questionIdx": 111526,
        "questionPatternModEntities": "Were M0 and M2 edited , written , and produced by M1",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1 .\nM0 P2 M1 .\nM2 P0 M1 .\nM2 P1 M1 .\nM2 P2 M1\n}",
        "recursionDepth": 28,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q45602 wdt:P1040 wd:Q882 .\nwd:Q45602 wdt:P162|wdt:P272 wd:Q882 .\nwd:Q45602 wdt:P58 wd:Q882 .\nwd:Q166739 wdt:P1040 wd:Q882 .\nwd:Q166739 wdt:P162|wdt:P272 wd:Q882 .\nwd:Q166739 wdt:P58 wd:Q882\n}",
        "questionWithBrackets": "Were [The Floorwalker] and [Modern Times] edited , written , and produced by [Charlie Chaplin]"
    },
    {
        "questionIdx": 111540,
        "questionPatternModEntities": "Were M0 and M3 directed by , written by , and produced by M1 and M2",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P1 M1 .\nM0 P1 M2 .\nM0 P2 M1 .\nM0 P2 M2 .\nM3 P0 M1 .\nM3 P0 M2 .\nM3 P1 M1 .\nM3 P1 M2 .\nM3 P2 M1 .\nM3 P2 M2\n}",
        "recursionDepth": 34,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q252529 wdt:P57 wd:Q55234 .\nwd:Q252529 wdt:P57 wd:Q55230 .\nwd:Q252529 wdt:P162|wdt:P272 wd:Q55234 .\nwd:Q252529 wdt:P162|wdt:P272 wd:Q55230 .\nwd:Q252529 wdt:P58 wd:Q55234 .\nwd:Q252529 wdt:P58 wd:Q55230 .\nwd:Q115537 wdt:P57 wd:Q55234 .\nwd:Q115537 wdt:P57 wd:Q55230 .\nwd:Q115537 wdt:P162|wdt:P272 wd:Q55234 .\nwd:Q115537 wdt:P162|wdt:P272 wd:Q55230 .\nwd:Q115537 wdt:P58 wd:Q55234 .\nwd:Q115537 wdt:P58 wd:Q55230\n}",
        "questionWithBrackets": "Were [Black Narcissus] and [I Know Where I'm Going!] directed by , written by , and produced by [Emeric Pressburger] and [Michael Powell]"
    },
    {
        "questionIdx": 111541,
        "questionPatternModEntities": "Were M0 , M3 , and M4 written and produced by M1 and M2",
        "questionTemplate": "Were [entity] , [entity] , and [entity] [VP_SIMPLE] and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P1 M1 .\nM0 P1 M2 .\nM3 P0 M1 .\nM3 P0 M2 .\nM3 P1 M1 .\nM3 P1 M2 .\nM4 P0 M1 .\nM4 P0 M2 .\nM4 P1 M1 .\nM4 P1 M2\n}",
        "recursionDepth": 30,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q164963 wdt:P162|wdt:P272 wd:Q4465 .\nwd:Q164963 wdt:P162|wdt:P272 wd:Q116861 .\nwd:Q164963 wdt:P58 wd:Q4465 .\nwd:Q164963 wdt:P58 wd:Q116861 .\nwd:Q1332274 wdt:P162|wdt:P272 wd:Q4465 .\nwd:Q1332274 wdt:P162|wdt:P272 wd:Q116861 .\nwd:Q1332274 wdt:P58 wd:Q4465 .\nwd:Q1332274 wdt:P58 wd:Q116861 .\nwd:Q30879053 wdt:P162|wdt:P272 wd:Q4465 .\nwd:Q30879053 wdt:P162|wdt:P272 wd:Q116861 .\nwd:Q30879053 wdt:P58 wd:Q4465 .\nwd:Q30879053 wdt:P58 wd:Q116861\n}",
        "questionWithBrackets": "Were [The Lord of the Rings: The Two Towers] , [No label defined] , and [The Frighteners] written and produced by [Peter Jackson] and [Fran Walsh]"
    },
    {
        "questionIdx": 111558,
        "questionPatternModEntities": "Were M2 , M3 , M4 , and M5 directed and edited by M0 's male employee",
        "questionTemplate": "Were [entity] , [entity] , [entity] , and [entity] [VP_SIMPLE] and [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nM2 P2 ?x0 .\nM2 P3 ?x0 .\nM3 P2 ?x0 .\nM3 P3 ?x0 .\nM4 P2 ?x0 .\nM4 P3 ?x0 .\nM5 P2 ?x0 .\nM5 P3 ?x0\n}",
        "recursionDepth": 38,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P108 wd:Q909176 .\n?x0 wdt:P21 wd:Q6581097 .\nwd:Q3354902 wdt:P57 ?x0 .\nwd:Q3354902 wdt:P1040 ?x0 .\nwd:Q3228039 wdt:P57 ?x0 .\nwd:Q3228039 wdt:P1040 ?x0 .\nwd:Q972787 wdt:P57 ?x0 .\nwd:Q972787 wdt:P1040 ?x0 .\nwd:Q672061 wdt:P57 ?x0 .\nwd:Q672061 wdt:P1040 ?x0\n}",
        "questionWithBrackets": "Were [Wind from the East] , [Operation Concrete] , [Every Man for Himself] , and [Passion] directed and edited by [Cahiers du cin\u00e9ma] 's male employee"
    },
    {
        "questionIdx": 111583,
        "questionPatternModEntities": "Were M0 and M5 directed by M4 , executive produced by M1 , edited by M3 , and written by M2",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M2 .\nM0 P2 M3 .\nM0 P3 M4 .\nM5 P0 M1 .\nM5 P1 M2 .\nM5 P2 M3 .\nM5 P3 M4\n}",
        "recursionDepth": 46,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q230552 wdt:P57 wd:Q187364 .\nwd:Q230552 wdt:P1040 wd:Q1586598 .\nwd:Q230552 wdt:P1431 wd:Q8877 .\nwd:Q230552 wdt:P58 wd:Q725773 .\nwd:Q91540 wdt:P57 wd:Q187364 .\nwd:Q91540 wdt:P1040 wd:Q1586598 .\nwd:Q91540 wdt:P1431 wd:Q8877 .\nwd:Q91540 wdt:P58 wd:Q725773\n}",
        "questionWithBrackets": "Were [Back to the Future] and [Back to the Future Part III] directed by [Robert Zemeckis] , executive produced by [Steven Spielberg] , edited by [Harry Keramidas] , and written by [Bob Gale]"
    },
    {
        "questionIdx": 111584,
        "questionPatternModEntities": "Were M0 and M3 executive produced by M1 and directed by M2",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by [entity] and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M2 .\nM3 P0 M1 .\nM3 P1 M2\n}",
        "recursionDepth": 28,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q2031960 wdt:P57 wd:Q56014 .\nwd:Q2031960 wdt:P1431 wd:Q72291 .\nwd:Q195274 wdt:P57 wd:Q56014 .\nwd:Q195274 wdt:P1431 wd:Q72291\n}",
        "questionWithBrackets": "Were [Little Women] and [What Price Hollywood?] executive produced by [David O. Selznick] and directed by [George Cukor]"
    },
    {
        "questionIdx": 111620,
        "questionPatternModEntities": "Were M0 and M3 directed by , produced by , and written by M1 and M2",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P1 M1 .\nM0 P1 M2 .\nM0 P2 M1 .\nM0 P2 M2 .\nM3 P0 M1 .\nM3 P0 M2 .\nM3 P1 M1 .\nM3 P1 M2 .\nM3 P2 M1 .\nM3 P2 M2\n}",
        "recursionDepth": 34,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q3422374 wdt:P57 wd:Q55230 .\nwd:Q3422374 wdt:P57 wd:Q55234 .\nwd:Q3422374 wdt:P162|wdt:P272 wd:Q55230 .\nwd:Q3422374 wdt:P162|wdt:P272 wd:Q55234 .\nwd:Q3422374 wdt:P58 wd:Q55230 .\nwd:Q3422374 wdt:P58 wd:Q55234 .\nwd:Q115537 wdt:P57 wd:Q55230 .\nwd:Q115537 wdt:P57 wd:Q55234 .\nwd:Q115537 wdt:P162|wdt:P272 wd:Q55230 .\nwd:Q115537 wdt:P162|wdt:P272 wd:Q55234 .\nwd:Q115537 wdt:P58 wd:Q55230 .\nwd:Q115537 wdt:P58 wd:Q55234\n}",
        "questionWithBrackets": "Were [Ill Met by Moonlight] and [I Know Where I'm Going!] directed by , produced by , and written by [Michael Powell] and [Emeric Pressburger]"
    },
    {
        "questionIdx": 111626,
        "questionPatternModEntities": "Were M0 and M3 written , edited , and produced by M1 and M2",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P1 M1 .\nM0 P1 M2 .\nM0 P2 M1 .\nM0 P2 M2 .\nM3 P0 M1 .\nM3 P0 M2 .\nM3 P1 M1 .\nM3 P1 M2 .\nM3 P2 M1 .\nM3 P2 M2\n}",
        "recursionDepth": 32,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q20729238 wdt:P1040 wd:Q562108 .\nwd:Q20729238 wdt:P1040 wd:Q35979475 .\nwd:Q20729238 wdt:P162|wdt:P272 wd:Q562108 .\nwd:Q20729238 wdt:P162|wdt:P272 wd:Q35979475 .\nwd:Q20729238 wdt:P58 wd:Q562108 .\nwd:Q20729238 wdt:P58 wd:Q35979475 .\nwd:Q20729551 wdt:P1040 wd:Q562108 .\nwd:Q20729551 wdt:P1040 wd:Q35979475 .\nwd:Q20729551 wdt:P162|wdt:P272 wd:Q562108 .\nwd:Q20729551 wdt:P162|wdt:P272 wd:Q35979475 .\nwd:Q20729551 wdt:P58 wd:Q562108 .\nwd:Q20729551 wdt:P58 wd:Q35979475\n}",
        "questionWithBrackets": "Were [Motion picture] and [Stop for Bud] written , edited , and produced by [Ole John] and [J\u00f8rgen Leth]"
    },
    {
        "questionIdx": 111627,
        "questionPatternModEntities": "Were M0 and M3 written by and produced by M1 and M2",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P1 M1 .\nM0 P1 M2 .\nM3 P0 M1 .\nM3 P0 M2 .\nM3 P1 M1 .\nM3 P1 M2\n}",
        "recursionDepth": 28,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q719915 wdt:P162|wdt:P272 wd:Q4465 .\nwd:Q719915 wdt:P162|wdt:P272 wd:Q116861 .\nwd:Q719915 wdt:P58 wd:Q4465 .\nwd:Q719915 wdt:P58 wd:Q116861 .\nwd:Q80379 wdt:P162|wdt:P272 wd:Q4465 .\nwd:Q80379 wdt:P162|wdt:P272 wd:Q116861 .\nwd:Q80379 wdt:P58 wd:Q4465 .\nwd:Q80379 wdt:P58 wd:Q116861\n}",
        "questionWithBrackets": "Were [The Hobbit: The Desolation of Smaug] and [The Hobbit: An Unexpected Journey] written by and produced by [Peter Jackson] and [Fran Walsh]"
    },
    {
        "questionIdx": 111630,
        "questionPatternModEntities": "Were M2 and M5 executive produced by M1 's male parent and directed by M3 and M4",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nM2 P2 ?x0 .\nM2 P3 M3 .\nM2 P3 M4 .\nM5 P2 ?x0 .\nM5 P3 M3 .\nM5 P3 M4\n}",
        "recursionDepth": 41,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q86007 .\n?x0 wdt:P21 wd:Q6581097 .\nwd:Q3707067 wdt:P57 wd:Q85134 .\nwd:Q3707067 wdt:P57 wd:Q19504 .\nwd:Q3707067 wdt:P1431 ?x0 .\nwd:Q3707065 wdt:P57 wd:Q85134 .\nwd:Q3707065 wdt:P57 wd:Q19504 .\nwd:Q3707065 wdt:P1431 ?x0\n}",
        "questionWithBrackets": "Were [No label defined] and [No label defined] executive produced by [Eva May] 's male parent and directed by [Fritz Lang] and [Joe May]"
    },
    {
        "questionIdx": 111639,
        "questionPatternModEntities": "Were M0 , M3 , and M4 produced by and edited by M1 and M2",
        "questionTemplate": "Were [entity] , [entity] , and [entity] [VP_SIMPLE] by and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P1 M1 .\nM0 P1 M2 .\nM3 P0 M1 .\nM3 P0 M2 .\nM3 P1 M1 .\nM3 P1 M2 .\nM4 P0 M1 .\nM4 P0 M2 .\nM4 P1 M1 .\nM4 P1 M2\n}",
        "recursionDepth": 31,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q501874 wdt:P1040 wd:Q13595531 .\nwd:Q501874 wdt:P1040 wd:Q13595311 .\nwd:Q501874 wdt:P162|wdt:P272 wd:Q13595531 .\nwd:Q501874 wdt:P162|wdt:P272 wd:Q13595311 .\nwd:Q300555 wdt:P1040 wd:Q13595531 .\nwd:Q300555 wdt:P1040 wd:Q13595311 .\nwd:Q300555 wdt:P162|wdt:P272 wd:Q13595531 .\nwd:Q300555 wdt:P162|wdt:P272 wd:Q13595311 .\nwd:Q237215 wdt:P1040 wd:Q13595531 .\nwd:Q237215 wdt:P1040 wd:Q13595311 .\nwd:Q237215 wdt:P162|wdt:P272 wd:Q13595531 .\nwd:Q237215 wdt:P162|wdt:P272 wd:Q13595311\n}",
        "questionWithBrackets": "Were [Barton Fink] , [A Serious Man] , and [O Brother, Where Art Thou?] produced by and edited by [Joel Coen] and [Ethan Coen]"
    },
    {
        "questionIdx": 111640,
        "questionPatternModEntities": "Were M0 , M3 , and M4 edited by , written by , and directed by M1 and M2",
        "questionTemplate": "Were [entity] , [entity] , and [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P1 M1 .\nM0 P1 M2 .\nM0 P2 M1 .\nM0 P2 M2 .\nM3 P0 M1 .\nM3 P0 M2 .\nM3 P1 M1 .\nM3 P1 M2 .\nM3 P2 M1 .\nM3 P2 M2 .\nM4 P0 M1 .\nM4 P0 M2 .\nM4 P1 M1 .\nM4 P1 M2 .\nM4 P2 M1 .\nM4 P2 M2\n}",
        "recursionDepth": 37,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q20729551 wdt:P57 wd:Q562108 .\nwd:Q20729551 wdt:P57 wd:Q35979475 .\nwd:Q20729551 wdt:P1040 wd:Q562108 .\nwd:Q20729551 wdt:P1040 wd:Q35979475 .\nwd:Q20729551 wdt:P58 wd:Q562108 .\nwd:Q20729551 wdt:P58 wd:Q35979475 .\nwd:Q20757119 wdt:P57 wd:Q562108 .\nwd:Q20757119 wdt:P57 wd:Q35979475 .\nwd:Q20757119 wdt:P1040 wd:Q562108 .\nwd:Q20757119 wdt:P1040 wd:Q35979475 .\nwd:Q20757119 wdt:P58 wd:Q562108 .\nwd:Q20757119 wdt:P58 wd:Q35979475 .\nwd:Q20729238 wdt:P57 wd:Q562108 .\nwd:Q20729238 wdt:P57 wd:Q35979475 .\nwd:Q20729238 wdt:P1040 wd:Q562108 .\nwd:Q20729238 wdt:P1040 wd:Q35979475 .\nwd:Q20729238 wdt:P58 wd:Q562108 .\nwd:Q20729238 wdt:P58 wd:Q35979475\n}",
        "questionWithBrackets": "Were [Stop for Bud] , [Motion picture] , and [No label defined] edited by , written by , and directed by [Ole John] and [J\u00f8rgen Leth]"
    },
    {
        "questionIdx": 111658,
        "questionPatternModEntities": "Were M2 and M3 edited by M1 's male spouse",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M1 ) .\nM2 P2 ?x0 .\nM3 P2 ?x0\n}",
        "recursionDepth": 25,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P21 wd:Q6581097 .\n?x0 wdt:P26 wd:Q95050 .\nFILTER ( ?x0 != wd:Q95050 ) .\nwd:Q2291409 wdt:P1040 ?x0 .\nwd:Q45602 wdt:P1040 ?x0\n}",
        "questionWithBrackets": "Were [Modern Times] and [The Bank] edited by [Paulette Goddard] 's male spouse"
    },
    {
        "questionIdx": 111835,
        "questionPatternModEntities": "Were M1 , M2 , and M3 edited by M0 's spouse",
        "questionTemplate": "Were [entity] , [entity] , and [entity] [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nM1 P1 ?x0 .\nM2 P1 ?x0 .\nM3 P1 ?x0\n}",
        "recursionDepth": 23,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P26 wd:Q32337 .\nFILTER ( ?x0 != wd:Q32337 ) .\nwd:Q166739 wdt:P1040 ?x0 .\nwd:Q238211 wdt:P1040 ?x0 .\nwd:Q199039 wdt:P1040 ?x0\n}",
        "questionWithBrackets": "Were [Pay Day] , [City Lights] , and [The Floorwalker] edited by [Lita Grey] 's spouse"
    },
    {
        "questionIdx": 111851,
        "questionPatternModEntities": "Were M0 , M2 , and M3 written by and directed by M1",
        "questionTemplate": "Were [entity] , [entity] , and [entity] [VP_SIMPLE] by and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1 .\nM2 P0 M1 .\nM2 P1 M1 .\nM3 P0 M1 .\nM3 P1 M1\n}",
        "recursionDepth": 27,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q947297 wdt:P57 wd:Q882 .\nwd:Q947297 wdt:P58 wd:Q882 .\nwd:Q45602 wdt:P57 wd:Q882 .\nwd:Q45602 wdt:P58 wd:Q882 .\nwd:Q109116 wdt:P57 wd:Q882 .\nwd:Q109116 wdt:P58 wd:Q882\n}",
        "questionWithBrackets": "Were [The Great Dictator] , [Modern Times] , and [By the Sea] written by and directed by [Charlie Chaplin]"
    },
    {
        "questionIdx": 111856,
        "questionPatternModEntities": "Were M2 and M4 executive produced by M3 and written by M0 's Italian sibling 's spouse 's sibling",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by [entity] and [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x1 P1 ?x2 .\n?x2 P0 M0 .\n?x2 P2 M1 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x1 != ?x2 ) .\nFILTER ( ?x2 != M0 ) .\nM2 P3 M3 .\nM2 P4 ?x0 .\nM4 P3 M3 .\nM4 P4 ?x0\n}",
        "recursionDepth": 45,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P3373 ?x1 .\n?x1 wdt:P26 ?x2 .\n?x2 wdt:P27 wd:Q38 .\n?x2 wdt:P3373 wd:Q1891483 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x1 != ?x2 ) .\nFILTER ( ?x2 != wd:Q1891483 ) .\nwd:Q22078161 wdt:P1431 wd:Q3852499 .\nwd:Q22078161 wdt:P58 ?x0 .\nwd:Q16607781 wdt:P1431 wd:Q3852499 .\nwd:Q16607781 wdt:P58 ?x0\n}",
        "questionWithBrackets": "Were [The Big Score] and [Sotto una buona stella] executive produced by [Maurizio Amati] and written by [Manuel De Sica] 's Italian sibling 's spouse 's sibling"
    },
    {
        "questionIdx": 111951,
        "questionPatternModEntities": "Were M0 , M2 , and M3 edited by , written by , directed by , executive produced by , and produced by M1",
        "questionTemplate": "Were [entity] , [entity] , and [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1 .\nM0 P2 M1 .\nM0 P3 M1 .\nM0 P4 M1 .\nM2 P0 M1 .\nM2 P1 M1 .\nM2 P2 M1 .\nM2 P3 M1 .\nM2 P4 M1 .\nM3 P0 M1 .\nM3 P1 M1 .\nM3 P2 M1 .\nM3 P3 M1 .\nM3 P4 M1\n}",
        "recursionDepth": 46,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q5437360 wdt:P57 wd:Q187261 .\nwd:Q5437360 wdt:P1040 wd:Q187261 .\nwd:Q5437360 wdt:P1431 wd:Q187261 .\nwd:Q5437360 wdt:P162|wdt:P272 wd:Q187261 .\nwd:Q5437360 wdt:P58 wd:Q187261 .\nwd:Q6084069 wdt:P57 wd:Q187261 .\nwd:Q6084069 wdt:P1040 wd:Q187261 .\nwd:Q6084069 wdt:P1431 wd:Q187261 .\nwd:Q6084069 wdt:P162|wdt:P272 wd:Q187261 .\nwd:Q6084069 wdt:P58 wd:Q187261 .\nwd:Q12813010 wdt:P57 wd:Q187261 .\nwd:Q12813010 wdt:P1040 wd:Q187261 .\nwd:Q12813010 wdt:P1431 wd:Q187261 .\nwd:Q12813010 wdt:P162|wdt:P272 wd:Q187261 .\nwd:Q12813010 wdt:P58 wd:Q187261\n}",
        "questionWithBrackets": "Were [The Waiting Room] , [Fate] , and [The Confession] edited by , written by , directed by , executive produced by , and produced by [Zeki Demirkubuz]"
    },
    {
        "questionIdx": 111954,
        "questionPatternModEntities": "Were M1 and M2 edited by a spouse of M0",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nM1 P1 ?x0 .\nM2 P1 ?x0\n}",
        "recursionDepth": 22,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P26 wd:Q95050 .\nFILTER ( ?x0 != wd:Q95050 ) .\nwd:Q166739 wdt:P1040 ?x0 .\nwd:Q214723 wdt:P1040 ?x0\n}",
        "questionWithBrackets": "Were [The Floorwalker] and [The Gold Rush] edited by a spouse of [Paulette Goddard]"
    },
    {
        "questionIdx": 112000,
        "questionPatternModEntities": "Were M1 , M2 , M3 , and M4 executive produced by M0 's sibling 's spouse",
        "questionTemplate": "Were [entity] , [entity] , [entity] , and [entity] [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x1 P1 M0 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x1 != M0 ) .\nM1 P2 ?x0 .\nM2 P2 ?x0 .\nM3 P2 ?x0 .\nM4 P2 ?x0\n}",
        "recursionDepth": 31,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P26 ?x1 .\n?x1 wdt:P3373 wd:Q6793503 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x1 != wd:Q6793503 ) .\nwd:Q1137372 wdt:P1431 ?x0 .\nwd:Q1048645 wdt:P1431 ?x0 .\nwd:Q842720 wdt:P1431 ?x0 .\nwd:Q1500287 wdt:P1431 ?x0\n}",
        "questionWithBrackets": "Were [Hostel: Part II] , [Four Rooms] , [Killing Zoe] , and [Hostel] executive produced by [Sharona Pick] 's sibling 's spouse"
    },
    {
        "questionIdx": 112004,
        "questionPatternModEntities": "Were M1 , M3 , M4 , M5 , and M6 written by M2 and executive produced by M0 's spouse",
        "questionTemplate": "Were [entity] , [entity] , [entity] , [entity] , and [entity] [VP_SIMPLE] by [entity] and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nM1 P1 ?x0 .\nM1 P2 M2 .\nM3 P1 ?x0 .\nM3 P2 M2 .\nM4 P1 ?x0 .\nM4 P2 M2 .\nM5 P1 ?x0 .\nM5 P2 M2 .\nM6 P1 ?x0 .\nM6 P2 M2\n}",
        "recursionDepth": 41,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P26 wd:Q6813152 .\nFILTER ( ?x0 != wd:Q6813152 ) .\nwd:Q3968346 wdt:P1431 ?x0 .\nwd:Q3968346 wdt:P58 wd:Q38222 .\nwd:Q181803 wdt:P1431 ?x0 .\nwd:Q181803 wdt:P58 wd:Q38222 .\nwd:Q165713 wdt:P1431 ?x0 .\nwd:Q165713 wdt:P58 wd:Q38222 .\nwd:Q17738 wdt:P1431 ?x0 .\nwd:Q17738 wdt:P58 wd:Q38222 .\nwd:Q515931 wdt:P1431 ?x0 .\nwd:Q515931 wdt:P58 wd:Q38222\n}",
        "questionWithBrackets": "Were [Star Whores] , [Star Wars: Episode IV \u2013 A New Hope] , [Willow] , [Star Wars: Episode VI \u2013 Return of the Jedi] , and [Star Wars: Episode I \u2013 The Phantom Menace] written by [George Lucas] and executive produced by [Mellody Hobson] 's spouse"
    },
    {
        "questionIdx": 112008,
        "questionPatternModEntities": "Were M0 , M2 , and M3 edited , executive produced , and produced by M1",
        "questionTemplate": "Were [entity] , [entity] , and [entity] [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1 .\nM0 P2 M1 .\nM2 P0 M1 .\nM2 P1 M1 .\nM2 P2 M1 .\nM3 P0 M1 .\nM3 P1 M1 .\nM3 P2 M1\n}",
        "recursionDepth": 32,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q5437360 wdt:P1040 wd:Q187261 .\nwd:Q5437360 wdt:P1431 wd:Q187261 .\nwd:Q5437360 wdt:P162|wdt:P272 wd:Q187261 .\nwd:Q12813010 wdt:P1040 wd:Q187261 .\nwd:Q12813010 wdt:P1431 wd:Q187261 .\nwd:Q12813010 wdt:P162|wdt:P272 wd:Q187261 .\nwd:Q6084069 wdt:P1040 wd:Q187261 .\nwd:Q6084069 wdt:P1431 wd:Q187261 .\nwd:Q6084069 wdt:P162|wdt:P272 wd:Q187261\n}",
        "questionWithBrackets": "Were [Fate] , [The Waiting Room] , and [The Confession] edited , executive produced , and produced by [Zeki Demirkubuz]"
    },
    {
        "questionIdx": 112009,
        "questionPatternModEntities": "Were M1 , M2 , M3 , M4 , and M5 founded by a child of M0",
        "questionTemplate": "Were [entity] , [entity] , [entity] , [entity] , and [entity] [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 ?x0 .\nM2 P1 ?x0 .\nM3 P1 ?x0 .\nM4 P1 ?x0 .\nM5 P1 ?x0\n}",
        "recursionDepth": 31,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P749 wd:Q20800404 .\nwd:Q953568 wdt:P112 ?x0 .\nwd:Q17512080 wdt:P112 ?x0 .\nwd:Q356 wdt:P112 ?x0 .\nwd:Q2668769 wdt:P112 ?x0 .\nwd:Q42274 wdt:P112 ?x0\n}",
        "questionWithBrackets": "Were [Google Earth] , [Android Runtime] , [Google Code Jam] , [DDEX] , and [Google+] founded by a child of [Alphabet Inc.]"
    },
    {
        "questionIdx": 112013,
        "questionPatternModEntities": "Were M0 , M2 , M3 , and M4 directed by , edited by , and written by M1",
        "questionTemplate": "Were [entity] , [entity] , [entity] , and [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1 .\nM0 P2 M1 .\nM2 P0 M1 .\nM2 P1 M1 .\nM2 P2 M1 .\nM3 P0 M1 .\nM3 P1 M1 .\nM3 P2 M1 .\nM4 P0 M1 .\nM4 P1 M1 .\nM4 P2 M1\n}",
        "recursionDepth": 36,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q327427 wdt:P57 wd:Q44426 .\nwd:Q327427 wdt:P1040 wd:Q44426 .\nwd:Q327427 wdt:P58 wd:Q44426 .\nwd:Q686125 wdt:P57 wd:Q44426 .\nwd:Q686125 wdt:P1040 wd:Q44426 .\nwd:Q686125 wdt:P58 wd:Q44426 .\nwd:Q543382 wdt:P57 wd:Q44426 .\nwd:Q543382 wdt:P1040 wd:Q44426 .\nwd:Q543382 wdt:P58 wd:Q44426 .\nwd:Q570483 wdt:P57 wd:Q44426 .\nwd:Q570483 wdt:P1040 wd:Q44426 .\nwd:Q570483 wdt:P58 wd:Q44426\n}",
        "questionWithBrackets": "Were [In a Year of 13 Moons] , [Lili Marleen] , [Whity] , and [Why Does Herr R. Run Amok?] directed by , edited by , and written by [Rainer Werner Fassbinder]"
    },
    {
        "questionIdx": 112021,
        "questionPatternModEntities": "Were M0 and M7 written by M1 , M2 , M3 , and M4 , edited by M5 , and edited by M6",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by [entity] , [entity] , [entity] , and [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P0 M3 .\nM0 P0 M4 .\nM0 P1 M5 .\nM0 P1 M6 .\nM7 P0 M1 .\nM7 P0 M2 .\nM7 P0 M3 .\nM7 P0 M4 .\nM7 P1 M5 .\nM7 P1 M6\n}",
        "recursionDepth": 46,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q40302 wdt:P1040 wd:Q19545136 .\nwd:Q40302 wdt:P1040 wd:Q28790143 .\nwd:Q40302 wdt:P58 wd:Q2928589 .\nwd:Q40302 wdt:P58 wd:Q3554450 .\nwd:Q40302 wdt:P58 wd:Q16546380 .\nwd:Q40302 wdt:P58 wd:Q3218036 .\nwd:Q39722 wdt:P1040 wd:Q19545136 .\nwd:Q39722 wdt:P1040 wd:Q28790143 .\nwd:Q39722 wdt:P58 wd:Q2928589 .\nwd:Q39722 wdt:P58 wd:Q3554450 .\nwd:Q39722 wdt:P58 wd:Q16546380 .\nwd:Q39722 wdt:P58 wd:Q3218036\n}",
        "questionWithBrackets": "Were [The Rescuers] and [The Fox and the Hound] written by [Burny Mattinson] , [Larry Clemmons] , [Vance Gerry] , and [David Michener] , edited by [James Koford] , and edited by [James Melton]"
    },
    {
        "questionIdx": 112040,
        "questionPatternModEntities": "Were M0 and M3 directed and executive produced by M1 and M2",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P1 M1 .\nM0 P1 M2 .\nM3 P0 M1 .\nM3 P0 M2 .\nM3 P1 M1 .\nM3 P1 M2\n}",
        "recursionDepth": 28,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q936279 wdt:P57 wd:Q190373 .\nwd:Q936279 wdt:P57 wd:Q263324 .\nwd:Q936279 wdt:P1431 wd:Q190373 .\nwd:Q936279 wdt:P1431 wd:Q263324 .\nwd:Q2396238 wdt:P57 wd:Q190373 .\nwd:Q2396238 wdt:P57 wd:Q263324 .\nwd:Q2396238 wdt:P1431 wd:Q190373 .\nwd:Q2396238 wdt:P1431 wd:Q263324\n}",
        "questionWithBrackets": "Were [Birdman and the Galaxy Trio] and [Scooby-Doo, Where Are You!] directed and executive produced by [William Hanna] and [Joseph Barbera]"
    },
    {
        "questionIdx": 112042,
        "questionPatternModEntities": "Were M2 and M5 directed by M3 and M4 and written by a male parent of M1",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by [entity] and [entity] and [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nM2 P2 ?x0 .\nM2 P3 M3 .\nM2 P3 M4 .\nM5 P2 ?x0 .\nM5 P3 M3 .\nM5 P3 M4\n}",
        "recursionDepth": 42,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q48102246 .\n?x0 wdt:P21 wd:Q6581097 .\nwd:Q971940 wdt:P57 wd:Q1383202 .\nwd:Q971940 wdt:P57 wd:Q882 .\nwd:Q971940 wdt:P58 ?x0 .\nwd:Q268879 wdt:P57 wd:Q1383202 .\nwd:Q268879 wdt:P57 wd:Q882 .\nwd:Q268879 wdt:P58 ?x0\n}",
        "questionWithBrackets": "Were [Burlesque on Carmen] and [Triple Trouble] directed by [Charlie Chaplin] and [Leo White] and written by a male parent of [Jane Chaplin]"
    },
    {
        "questionIdx": 112062,
        "questionPatternModEntities": "Were M1 , M2 , and M3 influenced by M0 's spouse",
        "questionTemplate": "Were [entity] , [entity] , and [entity] [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nM1 P1 ?x0 .\nM2 P1 ?x0 .\nM3 P1 ?x0\n}",
        "recursionDepth": 23,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P26 wd:Q2834263 .\nFILTER ( ?x0 != wd:Q2834263 ) .\nwd:Q999904 wdt:P737 ?x0 .\nwd:Q199644 wdt:P737 ?x0 .\nwd:Q5685 wdt:P737 ?x0\n}",
        "questionWithBrackets": "Were [Narc\u00eds Oller] , [Anton Chekhov] , and [Adolfo Caminha] influenced by [Alexandrine Zola] 's spouse"
    },
    {
        "questionIdx": 112074,
        "questionPatternModEntities": "Were M0 , M2 , M3 , M4 , and M5 Italian",
        "questionTemplate": "Were [entity] , [entity] , [entity] , [entity] , and [entity] [ADJECTIVE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM2 P0 M1 .\nM3 P0 M1 .\nM4 P0 M1 .\nM5 P0 M1\n}",
        "recursionDepth": 22,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q17575 wdt:P27 wd:Q38 .\nwd:Q765 wdt:P27 wd:Q38 .\nwd:Q1220 wdt:P27 wd:Q38 .\nwd:Q1230 wdt:P27 wd:Q38 .\nwd:Q1224 wdt:P27 wd:Q38\n}",
        "questionWithBrackets": "Were [Giorgio Napolitano] , [Carlo Azeglio Ciampi] , [Dario Fo] , [Francesco Cossiga] , and [Luigi Dallapiccola] Italian"
    },
    {
        "questionIdx": 112116,
        "questionPatternModEntities": "Were M0 , M2 , and M3 executive produced by , written by , produced by , edited by , and directed by M1",
        "questionTemplate": "Were [entity] , [entity] , and [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1 .\nM0 P2 M1 .\nM0 P3 M1 .\nM0 P4 M1 .\nM2 P0 M1 .\nM2 P1 M1 .\nM2 P2 M1 .\nM2 P3 M1 .\nM2 P4 M1 .\nM3 P0 M1 .\nM3 P1 M1 .\nM3 P2 M1 .\nM3 P3 M1 .\nM3 P4 M1\n}",
        "recursionDepth": 46,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q5437360 wdt:P57 wd:Q187261 .\nwd:Q5437360 wdt:P1040 wd:Q187261 .\nwd:Q5437360 wdt:P1431 wd:Q187261 .\nwd:Q5437360 wdt:P162|wdt:P272 wd:Q187261 .\nwd:Q5437360 wdt:P58 wd:Q187261 .\nwd:Q6084069 wdt:P57 wd:Q187261 .\nwd:Q6084069 wdt:P1040 wd:Q187261 .\nwd:Q6084069 wdt:P1431 wd:Q187261 .\nwd:Q6084069 wdt:P162|wdt:P272 wd:Q187261 .\nwd:Q6084069 wdt:P58 wd:Q187261 .\nwd:Q12813010 wdt:P57 wd:Q187261 .\nwd:Q12813010 wdt:P1040 wd:Q187261 .\nwd:Q12813010 wdt:P1431 wd:Q187261 .\nwd:Q12813010 wdt:P162|wdt:P272 wd:Q187261 .\nwd:Q12813010 wdt:P58 wd:Q187261\n}",
        "questionWithBrackets": "Were [Fate] , [The Confession] , and [The Waiting Room] executive produced by , written by , produced by , edited by , and directed by [Zeki Demirkubuz]"
    },
    {
        "questionIdx": 112177,
        "questionPatternModEntities": "Were M0 , M2 , and M3 directed by , edited by , written by , produced by , and executive produced by M1",
        "questionTemplate": "Were [entity] , [entity] , and [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1 .\nM0 P2 M1 .\nM0 P3 M1 .\nM0 P4 M1 .\nM2 P0 M1 .\nM2 P1 M1 .\nM2 P2 M1 .\nM2 P3 M1 .\nM2 P4 M1 .\nM3 P0 M1 .\nM3 P1 M1 .\nM3 P2 M1 .\nM3 P3 M1 .\nM3 P4 M1\n}",
        "recursionDepth": 46,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q484679 wdt:P57 wd:Q212990 .\nwd:Q484679 wdt:P1040 wd:Q212990 .\nwd:Q484679 wdt:P1431 wd:Q212990 .\nwd:Q484679 wdt:P162|wdt:P272 wd:Q212990 .\nwd:Q484679 wdt:P58 wd:Q212990 .\nwd:Q13471372 wdt:P57 wd:Q212990 .\nwd:Q13471372 wdt:P1040 wd:Q212990 .\nwd:Q13471372 wdt:P1431 wd:Q212990 .\nwd:Q13471372 wdt:P162|wdt:P272 wd:Q212990 .\nwd:Q13471372 wdt:P58 wd:Q212990 .\nwd:Q483197 wdt:P57 wd:Q212990 .\nwd:Q483197 wdt:P1040 wd:Q212990 .\nwd:Q483197 wdt:P1431 wd:Q212990 .\nwd:Q483197 wdt:P162|wdt:P272 wd:Q212990 .\nwd:Q483197 wdt:P58 wd:Q212990\n}",
        "questionWithBrackets": "Were [Moebius] , [Dream] , and [Piet\u00e0] directed by , edited by , written by , produced by , and executive produced by [Kim Ki-duk]"
    },
    {
        "questionIdx": 112183,
        "questionPatternModEntities": "Were M0 and M4 directed by M1 , M2 , and M3",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P0 M3 .\nM4 P0 M1 .\nM4 P0 M2 .\nM4 P0 M3\n}",
        "recursionDepth": 23,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q507285 wdt:P57 wd:Q2071 .\nwd:Q507285 wdt:P57 wd:Q295093 .\nwd:Q507285 wdt:P57 wd:Q312611 .\nwd:Q1144967 wdt:P57 wd:Q2071 .\nwd:Q1144967 wdt:P57 wd:Q295093 .\nwd:Q1144967 wdt:P57 wd:Q312611\n}",
        "questionWithBrackets": "Were [To Each His Own Cinema] and [Lumi\u00e8re and Company] directed by [David Lynch] , [Claude Lelouch] , and [Youssef Chahine]"
    },
    {
        "questionIdx": 112275,
        "questionPatternModEntities": "Were M2 , M4 , and M5 written by a Dutch spouse of M1 and produced by M3",
        "questionTemplate": "Were [entity] , [entity] , and [entity] [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M1 ) .\nM2 P2 ?x0 .\nM2 P3 M3 .\nM4 P2 ?x0 .\nM4 P3 M3 .\nM5 P2 ?x0 .\nM5 P3 M3\n}",
        "recursionDepth": 41,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P27 wd:Q29999 .\n?x0 wdt:P26 wd:Q56702049 .\nFILTER ( ?x0 != wd:Q56702049 ) .\nwd:Q2395814 wdt:P162|wdt:P272 wd:Q22284876 .\nwd:Q2395814 wdt:P58 ?x0 .\nwd:Q1255649 wdt:P162|wdt:P272 wd:Q22284876 .\nwd:Q1255649 wdt:P58 ?x0 .\nwd:Q1598104 wdt:P162|wdt:P272 wd:Q22284876 .\nwd:Q1598104 wdt:P58 ?x0\n}",
        "questionWithBrackets": "Were [No label defined] , [No label defined] , and [No label defined] written by a Dutch spouse of [Marina de Vos] and produced by [Hartmut Grund]"
    },
    {
        "questionIdx": 112278,
        "questionPatternModEntities": "Were M0 , M2 , and M3 executive produced by , produced by , written by , edited by , and directed by M1",
        "questionTemplate": "Were [entity] , [entity] , and [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1 .\nM0 P2 M1 .\nM0 P3 M1 .\nM0 P4 M1 .\nM2 P0 M1 .\nM2 P1 M1 .\nM2 P2 M1 .\nM2 P3 M1 .\nM2 P4 M1 .\nM3 P0 M1 .\nM3 P1 M1 .\nM3 P2 M1 .\nM3 P3 M1 .\nM3 P4 M1\n}",
        "recursionDepth": 46,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q484679 wdt:P57 wd:Q212990 .\nwd:Q484679 wdt:P1040 wd:Q212990 .\nwd:Q484679 wdt:P1431 wd:Q212990 .\nwd:Q484679 wdt:P162|wdt:P272 wd:Q212990 .\nwd:Q484679 wdt:P58 wd:Q212990 .\nwd:Q13471372 wdt:P57 wd:Q212990 .\nwd:Q13471372 wdt:P1040 wd:Q212990 .\nwd:Q13471372 wdt:P1431 wd:Q212990 .\nwd:Q13471372 wdt:P162|wdt:P272 wd:Q212990 .\nwd:Q13471372 wdt:P58 wd:Q212990 .\nwd:Q483197 wdt:P57 wd:Q212990 .\nwd:Q483197 wdt:P1040 wd:Q212990 .\nwd:Q483197 wdt:P1431 wd:Q212990 .\nwd:Q483197 wdt:P162|wdt:P272 wd:Q212990 .\nwd:Q483197 wdt:P58 wd:Q212990\n}",
        "questionWithBrackets": "Were [Moebius] , [Piet\u00e0] , and [Dream] executive produced by , produced by , written by , edited by , and directed by [Kim Ki-duk]"
    },
    {
        "questionIdx": 112279,
        "questionPatternModEntities": "Were M0 and M6 executive produced by M1 and M2 , directed by M4 and M5 , and executive produced by M3",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by [entity] and [entity] , [VP_SIMPLE] by [entity] and [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P0 M3 .\nM0 P1 M4 .\nM0 P1 M5 .\nM6 P0 M1 .\nM6 P0 M2 .\nM6 P0 M3 .\nM6 P1 M4 .\nM6 P1 M5\n}",
        "recursionDepth": 46,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q18407657 wdt:P57 wd:Q20675767 .\nwd:Q18407657 wdt:P57 wd:Q18018415 .\nwd:Q18407657 wdt:P1431 wd:Q181900 .\nwd:Q18407657 wdt:P1431 wd:Q23409539 .\nwd:Q18407657 wdt:P1431 wd:Q24176186 .\nwd:Q23781155 wdt:P57 wd:Q20675767 .\nwd:Q23781155 wdt:P57 wd:Q18018415 .\nwd:Q23781155 wdt:P1431 wd:Q181900 .\nwd:Q23781155 wdt:P1431 wd:Q23409539 .\nwd:Q23781155 wdt:P1431 wd:Q24176186\n}",
        "questionWithBrackets": "Were [Captain America: Civil War] and [Avengers: Endgame] executive produced by [Stan Lee] and [Louis D'Esposito] , directed by [Joe Russo] and [Anthony Russo] , and executive produced by [Victoria Alonso]"
    },
    {
        "questionIdx": 112281,
        "questionPatternModEntities": "Were M0 and M3 written , produced , and directed by M1 and M2",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P1 M1 .\nM0 P1 M2 .\nM0 P2 M1 .\nM0 P2 M2 .\nM3 P0 M1 .\nM3 P0 M2 .\nM3 P1 M1 .\nM3 P1 M2 .\nM3 P2 M1 .\nM3 P2 M2\n}",
        "recursionDepth": 32,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q625780 wdt:P57 wd:Q55230 .\nwd:Q625780 wdt:P57 wd:Q55234 .\nwd:Q625780 wdt:P162|wdt:P272 wd:Q55230 .\nwd:Q625780 wdt:P162|wdt:P272 wd:Q55234 .\nwd:Q625780 wdt:P58 wd:Q55230 .\nwd:Q625780 wdt:P58 wd:Q55234 .\nwd:Q115537 wdt:P57 wd:Q55230 .\nwd:Q115537 wdt:P57 wd:Q55234 .\nwd:Q115537 wdt:P162|wdt:P272 wd:Q55230 .\nwd:Q115537 wdt:P162|wdt:P272 wd:Q55234 .\nwd:Q115537 wdt:P58 wd:Q55230 .\nwd:Q115537 wdt:P58 wd:Q55234\n}",
        "questionWithBrackets": "Were [The Red Shoes] and [I Know Where I'm Going!] written , produced , and directed by [Emeric Pressburger] and [Michael Powell]"
    },
    {
        "questionIdx": 112285,
        "questionPatternModEntities": "Were M3 and M4 directed by and written by a female employee of M0 and M1",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by and [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P1 M2 .\nM3 P2 ?x0 .\nM3 P3 ?x0 .\nM4 P2 ?x0 .\nM4 P3 ?x0\n}",
        "recursionDepth": 39,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P108 wd:Q154020 .\n?x0 wdt:P108 wd:Q13717 .\n?x0 wdt:P21 wd:Q6581072 .\nwd:Q478423 wdt:P57 ?x0 .\nwd:Q478423 wdt:P58 ?x0 .\nwd:Q2892137 wdt:P57 ?x0 .\nwd:Q2892137 wdt:P58 ?x0\n}",
        "questionWithBrackets": "Were [Baxter, Vera Baxter] and [Nathalie Granger] directed by and written by a female employee of [Lib\u00e9ration] and [Elle]"
    },
    {
        "questionIdx": 112288,
        "questionPatternModEntities": "Were M1 , M2 , and M3 written by M0 's parent",
        "questionTemplate": "Were [entity] , [entity] , and [entity] [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 ?x0 .\nM2 P1 ?x0 .\nM3 P1 ?x0\n}",
        "recursionDepth": 23,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q663856 .\nwd:Q3795499 wdt:P58 ?x0 .\nwd:Q6370349 wdt:P58 ?x0 .\nwd:Q1550554 wdt:P58 ?x0\n}",
        "questionWithBrackets": "Were [Esmeralda] , [Ruy Blas] , and [The King's Jester] written by [Charles Hugo] 's parent"
    },
    {
        "questionIdx": 112294,
        "questionPatternModEntities": "Were M2 and M3 edited by and directed by a Mexican sibling of M0",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by and [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M0 ) .\nM2 P2 ?x0 .\nM2 P3 ?x0 .\nM3 P2 ?x0 .\nM3 P3 ?x0\n}",
        "recursionDepth": 35,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P27 wd:Q96 .\n?x0 wdt:P3373 wd:Q2840325 .\nFILTER ( ?x0 != wd:Q2840325 ) .\nwd:Q128848 wdt:P57 ?x0 .\nwd:Q128848 wdt:P1040 ?x0 .\nwd:Q2579784 wdt:P57 ?x0 .\nwd:Q2579784 wdt:P1040 ?x0\n}",
        "questionWithBrackets": "Were [Y tu mam\u00e1 tambi\u00e9n] and [Gravity] edited by and directed by a Mexican sibling of [Carlos Cuar\u00f3n]"
    },
    {
        "questionIdx": 112295,
        "questionPatternModEntities": "Were M2 and M3 produced by , written by , edited by , and directed by a Spanish parent of M1",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nM2 P2 ?x0 .\nM2 P3 ?x0 .\nM2 P4 ?x0 .\nM2 P5 ?x0 .\nM3 P2 ?x0 .\nM3 P3 ?x0 .\nM3 P4 ?x0 .\nM3 P5 ?x0\n}",
        "recursionDepth": 47,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q1710546 .\n?x0 wdt:P27 wd:Q29 .\nwd:Q2606896 wdt:P57 ?x0 .\nwd:Q2606896 wdt:P1040 ?x0 .\nwd:Q2606896 wdt:P162|wdt:P272 ?x0 .\nwd:Q2606896 wdt:P58 ?x0 .\nwd:Q190575 wdt:P57 ?x0 .\nwd:Q190575 wdt:P1040 ?x0 .\nwd:Q190575 wdt:P162|wdt:P272 ?x0 .\nwd:Q190575 wdt:P58 ?x0\n}",
        "questionWithBrackets": "Were [Land Without Bread] and [Un Chien Andalou] produced by , written by , edited by , and directed by a Spanish parent of [Juan Luis Bu\u00f1uel]"
    },
    {
        "questionIdx": 112297,
        "questionPatternModEntities": "Were M2 and M3 written by , edited by , and produced by a Spanish sibling of M0",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M0 ) .\nM2 P2 ?x0 .\nM2 P3 ?x0 .\nM2 P4 ?x0 .\nM3 P2 ?x0 .\nM3 P3 ?x0 .\nM3 P4 ?x0\n}",
        "recursionDepth": 41,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P27 wd:Q29 .\n?x0 wdt:P3373 wd:Q5833303 .\nFILTER ( ?x0 != wd:Q5833303 ) .\nwd:Q4025116 wdt:P1040 ?x0 .\nwd:Q4025116 wdt:P162|wdt:P272 ?x0 .\nwd:Q4025116 wdt:P58 ?x0 .\nwd:Q3633009 wdt:P1040 ?x0 .\nwd:Q3633009 wdt:P162|wdt:P272 ?x0 .\nwd:Q3633009 wdt:P58 ?x0\n}",
        "questionWithBrackets": "Were [No label defined] and [No label defined] written by , edited by , and produced by a Spanish sibling of [Enrique Franco]"
    },
    {
        "questionIdx": 112299,
        "questionPatternModEntities": "Were M2 , M3 , and M4 produced by and directed by a Mexican sibling of M0",
        "questionTemplate": "Were [entity] , [entity] , and [entity] [VP_SIMPLE] by and [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M0 ) .\nM2 P2 ?x0 .\nM2 P3 ?x0 .\nM3 P2 ?x0 .\nM3 P3 ?x0 .\nM4 P2 ?x0 .\nM4 P3 ?x0\n}",
        "recursionDepth": 38,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P27 wd:Q96 .\n?x0 wdt:P3373 wd:Q2840325 .\nFILTER ( ?x0 != wd:Q2840325 ) .\nwd:Q27959455 wdt:P57 ?x0 .\nwd:Q27959455 wdt:P162|wdt:P272 ?x0 .\nwd:Q2579784 wdt:P57 ?x0 .\nwd:Q2579784 wdt:P162|wdt:P272 ?x0 .\nwd:Q5965519 wdt:P57 ?x0 .\nwd:Q5965519 wdt:P162|wdt:P272 ?x0\n}",
        "questionWithBrackets": "Were [Roma] , [S\u00f3lo Con Tu Pareja] , and [Gravity] produced by and directed by a Mexican sibling of [Carlos Cuar\u00f3n]"
    },
    {
        "questionIdx": 112329,
        "questionPatternModEntities": "Were M2 and M4 influenced by a Italian sibling of M0 and influenced by M3",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M0 ) .\nM2 P2 ?x0 .\nM2 P2 M3 .\nM4 P2 ?x0 .\nM4 P2 M3\n}",
        "recursionDepth": 38,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P27 wd:Q38 .\n?x0 wdt:P3373 wd:Q17141899 .\nFILTER ( ?x0 != wd:Q17141899 ) .\nwd:Q2465776 wdt:P737 ?x0 .\nwd:Q2465776 wdt:P737 wd:Q154756 .\nwd:Q40479 wdt:P737 ?x0 .\nwd:Q40479 wdt:P737 wd:Q154756\n}",
        "questionWithBrackets": "Were [Daniel Wallace] and [David Mitchell] influenced by a Italian sibling of [Floriano Calvino] and influenced by [Italo Calvino]"
    },
    {
        "questionIdx": 112338,
        "questionPatternModEntities": "Were M1 and M2 executive produced by M0 's child",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 ?x0 .\nM2 P1 ?x0\n}",
        "recursionDepth": 21,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P749 wd:Q219635 .\nwd:Q5678600 wdt:P1431 ?x0 .\nwd:Q556507 wdt:P1431 ?x0\n}",
        "questionWithBrackets": "Were [No label defined] and [Informativos Telecinco] executive produced by [BlackRock] 's child"
    },
    {
        "questionIdx": 112339,
        "questionPatternModEntities": "Were M2 and M5 executive produced by a employee of M0 and M1 , edited by M3 , and directed by M4",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity] and [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\nM2 P1 ?x0 .\nM2 P2 M3 .\nM2 P3 M4 .\nM5 P1 ?x0 .\nM5 P2 M3 .\nM5 P3 M4\n}",
        "recursionDepth": 47,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P108 wd:Q1136386 .\n?x0 wdt:P108 wd:Q730179 .\nwd:Q167206 wdt:P57 wd:Q178713 .\nwd:Q167206 wdt:P1040 wd:Q1379022 .\nwd:Q167206 wdt:P1431 ?x0 .\nwd:Q1045889 wdt:P57 wd:Q178713 .\nwd:Q1045889 wdt:P1040 wd:Q1379022 .\nwd:Q1045889 wdt:P1431 ?x0\n}",
        "questionWithBrackets": "Were [Pom Poko] and [Only Yesterday] executive produced by a employee of [Shin-Ei Animation] and [Toei Animation] , edited by [Takeshi Seyama] , and directed by [Isao Takahata]"
    },
    {
        "questionIdx": 112340,
        "questionPatternModEntities": "Were M1 and M2 executive produced by M0 's sibling 's sibling",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x1 P0 M0 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x1 != M0 ) .\nM1 P1 ?x0 .\nM2 P1 ?x0\n}",
        "recursionDepth": 25,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P3373 ?x1 .\n?x1 wdt:P3373 wd:Q40715 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x1 != wd:Q40715 ) .\nwd:Q7734937 wdt:P1431 ?x0 .\nwd:Q1065013 wdt:P1431 ?x0\n}",
        "questionWithBrackets": "Were [The Fosters] and [Feelin' So Good] executive produced by [Jennifer Lopez] 's sibling 's sibling"
    },
    {
        "questionIdx": 112495,
        "questionPatternModEntities": "Were M0 and M2 French",
        "questionTemplate": "Were [entity] and [entity] [ADJECTIVE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM2 P0 M1\n}",
        "recursionDepth": 13,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q260 wdt:P27 wd:Q142 .\nwd:Q346 wdt:P27 wd:Q142\n}",
        "questionWithBrackets": "Were [Jean-Fran\u00e7ois Champollion] and [Louis IX of France] French"
    },
    {
        "questionIdx": 112497,
        "questionPatternModEntities": "Were M1 and M2 directed by a employee of M0",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 ?x0 .\nM2 P1 ?x0\n}",
        "recursionDepth": 22,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P108 wd:Q847743 .\nwd:Q946478 wdt:P57 ?x0 .\nwd:Q1235550 wdt:P57 ?x0\n}",
        "questionWithBrackets": "Were [W.E.] and [Filth and Wisdom] directed by a employee of [Dunkin']"
    },
    {
        "questionIdx": 112504,
        "questionPatternModEntities": "Were M1 , M3 , and M4 directed by a spouse of a sibling of M0 and executive produced by M2",
        "questionTemplate": "Were [entity] , [entity] , and [entity] [VP_SIMPLE] by a [ROLE_SIMPLE] of a [ROLE_SIMPLE] of [entity] and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x1 P1 M0 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x1 != M0 ) .\nM1 P2 M2 .\nM1 P3 ?x0 .\nM3 P2 M2 .\nM3 P3 ?x0 .\nM4 P2 M2 .\nM4 P3 ?x0\n}",
        "recursionDepth": 43,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P26 ?x1 .\n?x1 wdt:P3373 wd:Q434062 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x1 != wd:Q434062 ) .\nwd:Q634810 wdt:P57 ?x0 .\nwd:Q634810 wdt:P1431 wd:Q336099 .\nwd:Q19520525 wdt:P57 ?x0 .\nwd:Q19520525 wdt:P1431 wd:Q336099 .\nwd:Q59387732 wdt:P57 ?x0 .\nwd:Q59387732 wdt:P1431 wd:Q336099\n}",
        "questionWithBrackets": "Were [Lucifer] , [Total Recall] , and [Swamp Thing] directed by a spouse of a sibling of [Samantha Beckinsale] and executive produced by [Len Wiseman]"
    },
    {
        "questionIdx": 112517,
        "questionPatternModEntities": "Were M2 and M5 distributed by M3 and M4 and produced by M0 's Italian sibling",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by [entity] and [entity] and [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M0 ) .\nM2 P2 M3 .\nM2 P2 M4 .\nM2 P3 ?x0 .\nM5 P2 M3 .\nM5 P2 M4 .\nM5 P3 ?x0\n}",
        "recursionDepth": 40,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P27 wd:Q38 .\n?x0 wdt:P3373 wd:Q3679924 .\nFILTER ( ?x0 != wd:Q3679924 ) .\nwd:Q1269678 wdt:P750 wd:Q907311 .\nwd:Q1269678 wdt:P750 wd:Q1172062 .\nwd:Q1269678 wdt:P162|wdt:P272 ?x0 .\nwd:Q1269691 wdt:P750 wd:Q907311 .\nwd:Q1269691 wdt:P750 wd:Q1172062 .\nwd:Q1269691 wdt:P162|wdt:P272 ?x0\n}",
        "questionWithBrackets": "Were [Demons 2] and [Demons] distributed by [Titanus] and [Netflix] and produced by [Claudio Argento] 's Italian sibling"
    },
    {
        "questionIdx": 112518,
        "questionPatternModEntities": "Were M2 and M5 distributed by M3 , distributed by M4 , and produced by M0 's Italian employee",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nM2 P2 M3 .\nM2 P2 M4 .\nM2 P3 ?x0 .\nM5 P2 M3 .\nM5 P2 M4 .\nM5 P3 ?x0\n}",
        "recursionDepth": 45,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P108 wd:Q49210 .\n?x0 wdt:P27 wd:Q38 .\nwd:Q206576 wdt:P750 wd:Q159846 .\nwd:Q206576 wdt:P750 wd:Q80948336 .\nwd:Q206576 wdt:P162|wdt:P272 ?x0 .\nwd:Q1392744 wdt:P750 wd:Q159846 .\nwd:Q1392744 wdt:P750 wd:Q80948336 .\nwd:Q1392744 wdt:P162|wdt:P272 ?x0\n}",
        "questionWithBrackets": "Were [Hugo] and [The Wolf of Wall Street] distributed by [Paramount Pictures] , distributed by [FandangoNow] , and produced by [New York University] 's Italian employee"
    },
    {
        "questionIdx": 112522,
        "questionPatternModEntities": "Were M2 and M6 written by a male sibling of M0 and edited by M3 , M4 , and M5",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] and [VP_SIMPLE] by [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M0 ) .\nM2 P2 ?x0 .\nM2 P3 M3 .\nM2 P3 M4 .\nM2 P3 M5 .\nM6 P2 ?x0 .\nM6 P3 M3 .\nM6 P3 M4 .\nM6 P3 M5\n}",
        "recursionDepth": 45,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P21 wd:Q6581097 .\n?x0 wdt:P3373 wd:Q6228653 .\nFILTER ( ?x0 != wd:Q6228653 ) .\nwd:Q110397 wdt:P1040 wd:Q42574 .\nwd:Q110397 wdt:P1040 wd:Q513356 .\nwd:Q110397 wdt:P1040 wd:Q1126713 .\nwd:Q110397 wdt:P58 ?x0 .\nwd:Q44578 wdt:P1040 wd:Q42574 .\nwd:Q44578 wdt:P1040 wd:Q513356 .\nwd:Q44578 wdt:P1040 wd:Q1126713 .\nwd:Q44578 wdt:P58 ?x0\n}",
        "questionWithBrackets": "Were [True Lies] and [Titanic] written by a male sibling of [John David Cameron] and edited by [Conrad Buff IV] , [James Cameron] , and [Richard A. Harris]"
    },
    {
        "questionIdx": 112673,
        "questionPatternModEntities": "Were M3 and M5 founded by M2 's British parent , founded by M4 , and founded by M0 's parent",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x1 P0 M2 .\n?x1 P1 M1 .\nM3 P2 ?x0 .\nM3 P2 ?x1 .\nM3 P2 M4 .\nM5 P2 ?x0 .\nM5 P2 ?x1 .\nM5 P2 M4\n}",
        "recursionDepth": 49,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q120593 .\n?x1 wdt:P40|wdt:P355 wd:Q2966564 .\n?x1 wdt:P27 wd:Q145 .\nwd:Q219400 wdt:P112 ?x0 .\nwd:Q219400 wdt:P112 ?x1 .\nwd:Q219400 wdt:P112 wd:Q882 .\nwd:Q17335591 wdt:P112 ?x0 .\nwd:Q17335591 wdt:P112 ?x1 .\nwd:Q17335591 wdt:P112 wd:Q882\n}",
        "questionWithBrackets": "Were [United Artists Corporation] and [Charles Chaplin Film Corporation] founded by [Christopher Chaplin] 's British parent , founded by [Charlie Chaplin] , and founded by [Eugene Chaplin] 's parent"
    },
    {
        "questionIdx": 112703,
        "questionPatternModEntities": "Were M2 and M4 founded by M3 and founded by M0 's British sibling",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by [entity] and [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M0 ) .\nM2 P2 ?x0 .\nM2 P2 M3 .\nM4 P2 ?x0 .\nM4 P2 M3\n}",
        "recursionDepth": 36,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P27 wd:Q145 .\n?x0 wdt:P3373 wd:Q60677509 .\nFILTER ( ?x0 != wd:Q60677509 ) .\nwd:Q37033 wdt:P112 ?x0 .\nwd:Q37033 wdt:P112 wd:Q80 .\nwd:Q3742989 wdt:P112 ?x0 .\nwd:Q3742989 wdt:P112 wd:Q80\n}",
        "questionWithBrackets": "Were [World Wide Web Consortium] and [World Wide Web Foundation] founded by [Tim Berners-Lee] and founded by [Mike Berners-Lee] 's British sibling"
    },
    {
        "questionIdx": 112708,
        "questionPatternModEntities": "Were M0 and M3 founded by M1 and M2",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM3 P0 M1 .\nM3 P0 M2\n}",
        "recursionDepth": 20,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q38603 wdt:P112 wd:Q31 .\nwd:Q38603 wdt:P112 wd:Q142 .\nwd:Q141720 wdt:P112 wd:Q31 .\nwd:Q141720 wdt:P112 wd:Q142\n}",
        "questionWithBrackets": "Were [Federation Cynologique Internationale] and [European Air Transport Command] founded by [Belgium] and m.0f8l9c"
    },
    {
        "questionIdx": 112753,
        "questionPatternModEntities": "Were M0 and M7 written by M1 , edited by M2 , and directed by M3 , M4 , M5 , and M6",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity] , [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M2 .\nM0 P2 M3 .\nM0 P2 M4 .\nM0 P2 M5 .\nM0 P2 M6 .\nM7 P0 M1 .\nM7 P1 M2 .\nM7 P2 M3 .\nM7 P2 M4 .\nM7 P2 M5 .\nM7 P2 M6\n}",
        "recursionDepth": 46,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q2081050 wdt:P57 wd:Q457864 .\nwd:Q2081050 wdt:P57 wd:Q2084424 .\nwd:Q2081050 wdt:P57 wd:Q1063493 .\nwd:Q2081050 wdt:P57 wd:Q312657 .\nwd:Q2081050 wdt:P1040 wd:Q544350 .\nwd:Q2081050 wdt:P58 wd:Q3182669 .\nwd:Q4986245 wdt:P57 wd:Q457864 .\nwd:Q4986245 wdt:P57 wd:Q2084424 .\nwd:Q4986245 wdt:P57 wd:Q1063493 .\nwd:Q4986245 wdt:P57 wd:Q312657 .\nwd:Q4986245 wdt:P1040 wd:Q544350 .\nwd:Q4986245 wdt:P58 wd:Q3182669\n}",
        "questionWithBrackets": "Were [Daffy Duck's Quackbusters] and [Bugs Bunny's Howl-oween Special] written by [John W. Dunn] , edited by [Treg Brown] , and directed by [Maurice Noble] , [Friz Freleng] , [Robert McKimson] , and [Chuck Jones]"
    },
    {
        "questionIdx": 112838,
        "questionPatternModEntities": "Were M0 and M4 written and directed by M1 , M2 , and M3",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] and [VP_SIMPLE] by [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P0 M3 .\nM0 P1 M1 .\nM0 P1 M2 .\nM0 P1 M3 .\nM4 P0 M1 .\nM4 P0 M2 .\nM4 P0 M3 .\nM4 P1 M1 .\nM4 P1 M2 .\nM4 P1 M3\n}",
        "recursionDepth": 30,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q102390692 wdt:P57 wd:Q82022 .\nwd:Q102390692 wdt:P57 wd:Q235032 .\nwd:Q102390692 wdt:P57 wd:Q2602324 .\nwd:Q102390692 wdt:P58 wd:Q82022 .\nwd:Q102390692 wdt:P58 wd:Q235032 .\nwd:Q102390692 wdt:P58 wd:Q2602324 .\nwd:Q16028796 wdt:P57 wd:Q82022 .\nwd:Q16028796 wdt:P57 wd:Q235032 .\nwd:Q16028796 wdt:P57 wd:Q2602324 .\nwd:Q16028796 wdt:P58 wd:Q82022 .\nwd:Q16028796 wdt:P58 wd:Q235032 .\nwd:Q16028796 wdt:P58 wd:Q2602324\n}",
        "questionWithBrackets": "Were [Pearls of the Deep] and [No label defined] written and directed by [Jan N\u011bmec] , [V\u011bra Chytilov\u00e1] , and [Jaromil Jire\u0161]"
    },
    {
        "questionIdx": 112843,
        "questionPatternModEntities": "Were M0 , M2 , M3 , and M4 directed , edited , and written by M1",
        "questionTemplate": "Were [entity] , [entity] , [entity] , and [entity] [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1 .\nM0 P2 M1 .\nM2 P0 M1 .\nM2 P1 M1 .\nM2 P2 M1 .\nM3 P0 M1 .\nM3 P1 M1 .\nM3 P2 M1 .\nM4 P0 M1 .\nM4 P1 M1 .\nM4 P2 M1\n}",
        "recursionDepth": 34,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q550196 wdt:P57 wd:Q47284 .\nwd:Q550196 wdt:P1040 wd:Q47284 .\nwd:Q550196 wdt:P58 wd:Q47284 .\nwd:Q549908 wdt:P57 wd:Q47284 .\nwd:Q549908 wdt:P1040 wd:Q47284 .\nwd:Q549908 wdt:P58 wd:Q47284 .\nwd:Q128493 wdt:P57 wd:Q47284 .\nwd:Q128493 wdt:P1040 wd:Q47284 .\nwd:Q128493 wdt:P58 wd:Q47284 .\nwd:Q192115 wdt:P57 wd:Q47284 .\nwd:Q192115 wdt:P1040 wd:Q47284 .\nwd:Q192115 wdt:P58 wd:Q47284\n}",
        "questionWithBrackets": "Were [Spy Kids 3-D: Game Over] , [Spy Kids 2: The Island of Lost Dreams] , [Machete] , and [Sin City] directed , edited , and written by [Robert Rodriguez]"
    },
    {
        "questionIdx": 112860,
        "questionPatternModEntities": "Were M0 and M3 directed by , produced by , and edited by M1 and M2",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P1 M1 .\nM0 P1 M2 .\nM0 P2 M1 .\nM0 P2 M2 .\nM3 P0 M1 .\nM3 P0 M2 .\nM3 P1 M1 .\nM3 P1 M2 .\nM3 P2 M1 .\nM3 P2 M2\n}",
        "recursionDepth": 34,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q20729238 wdt:P57 wd:Q562108 .\nwd:Q20729238 wdt:P57 wd:Q35979475 .\nwd:Q20729238 wdt:P1040 wd:Q562108 .\nwd:Q20729238 wdt:P1040 wd:Q35979475 .\nwd:Q20729238 wdt:P162|wdt:P272 wd:Q562108 .\nwd:Q20729238 wdt:P162|wdt:P272 wd:Q35979475 .\nwd:Q20729551 wdt:P57 wd:Q562108 .\nwd:Q20729551 wdt:P57 wd:Q35979475 .\nwd:Q20729551 wdt:P1040 wd:Q562108 .\nwd:Q20729551 wdt:P1040 wd:Q35979475 .\nwd:Q20729551 wdt:P162|wdt:P272 wd:Q562108 .\nwd:Q20729551 wdt:P162|wdt:P272 wd:Q35979475\n}",
        "questionWithBrackets": "Were [Stop for Bud] and [Motion picture] directed by , produced by , and edited by [J\u00f8rgen Leth] and [Ole John]"
    },
    {
        "questionIdx": 112885,
        "questionPatternModEntities": "Were M3 , M4 , and M5 produced by M0 's British Canadian sibling",
        "questionTemplate": "Were [entity] , [entity] , and [entity] [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\nFILTER ( ?x0 != M0 ) .\nM3 P2 ?x0 .\nM4 P2 ?x0 .\nM5 P2 ?x0\n}",
        "recursionDepth": 33,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P27 wd:Q145 .\n?x0 wdt:P27 wd:Q16 .\n?x0 wdt:P3373 wd:Q15521684 .\nFILTER ( ?x0 != wd:Q15521684 ) .\nwd:Q487978 wdt:P162|wdt:P272 ?x0 .\nwd:Q498910 wdt:P162|wdt:P272 ?x0 .\nwd:Q501703 wdt:P162|wdt:P272 ?x0\n}",
        "questionWithBrackets": "Were [Austin Powers: The Spy Who Shagged Me] , [Austin Powers: International Man of Mystery] , and [Austin Powers in Goldmember] produced by [Paul Myers] 's British Canadian sibling"
    },
    {
        "questionIdx": 112898,
        "questionPatternModEntities": "Were M2 and M3 edited by , produced by , and written by a Canadian sibling of M0",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M0 ) .\nM2 P2 ?x0 .\nM2 P3 ?x0 .\nM2 P4 ?x0 .\nM3 P2 ?x0 .\nM3 P3 ?x0 .\nM3 P4 ?x0\n}",
        "recursionDepth": 41,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P27 wd:Q16 .\n?x0 wdt:P3373 wd:Q6228653 .\nFILTER ( ?x0 != wd:Q6228653 ) .\nwd:Q24871 wdt:P1040 ?x0 .\nwd:Q24871 wdt:P162|wdt:P272 ?x0 .\nwd:Q24871 wdt:P58 ?x0 .\nwd:Q44578 wdt:P1040 ?x0 .\nwd:Q44578 wdt:P162|wdt:P272 ?x0 .\nwd:Q44578 wdt:P58 ?x0\n}",
        "questionWithBrackets": "Were [Titanic] and [Avatar] edited by , produced by , and written by a Canadian sibling of [John David Cameron]"
    },
    {
        "questionIdx": 112903,
        "questionPatternModEntities": "Were M2 and M3 produced by , written by , and directed by a Canadian spouse of M1",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M1 ) .\nM2 P2 ?x0 .\nM2 P3 ?x0 .\nM2 P4 ?x0 .\nM3 P2 ?x0 .\nM3 P3 ?x0 .\nM3 P4 ?x0\n}",
        "recursionDepth": 41,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P27 wd:Q16 .\n?x0 wdt:P26 wd:Q235635 .\nFILTER ( ?x0 != wd:Q235635 ) .\nwd:Q24871 wdt:P57 ?x0 .\nwd:Q24871 wdt:P162|wdt:P272 ?x0 .\nwd:Q24871 wdt:P58 ?x0 .\nwd:Q44578 wdt:P57 ?x0 .\nwd:Q44578 wdt:P162|wdt:P272 ?x0 .\nwd:Q44578 wdt:P58 ?x0\n}",
        "questionWithBrackets": "Were [Avatar] and [Titanic] produced by , written by , and directed by a Canadian spouse of [Suzy Amis Cameron]"
    },
    {
        "questionIdx": 112906,
        "questionPatternModEntities": "Were M2 and M3 directed by , written by , edited by , and produced by M1 's Canadian spouse",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M1 ) .\nM2 P2 ?x0 .\nM2 P3 ?x0 .\nM2 P4 ?x0 .\nM2 P5 ?x0 .\nM3 P2 ?x0 .\nM3 P3 ?x0 .\nM3 P4 ?x0 .\nM3 P5 ?x0\n}",
        "recursionDepth": 45,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P27 wd:Q16 .\n?x0 wdt:P26 wd:Q235635 .\nFILTER ( ?x0 != wd:Q235635 ) .\nwd:Q24871 wdt:P57 ?x0 .\nwd:Q24871 wdt:P1040 ?x0 .\nwd:Q24871 wdt:P162|wdt:P272 ?x0 .\nwd:Q24871 wdt:P58 ?x0 .\nwd:Q44578 wdt:P57 ?x0 .\nwd:Q44578 wdt:P1040 ?x0 .\nwd:Q44578 wdt:P162|wdt:P272 ?x0 .\nwd:Q44578 wdt:P58 ?x0\n}",
        "questionWithBrackets": "Were [Avatar] and [Titanic] directed by , written by , edited by , and produced by [Suzy Amis Cameron] 's Canadian spouse"
    },
    {
        "questionIdx": 112910,
        "questionPatternModEntities": "Were M1 , M2 , M3 , and M4 edited by M0 's sibling 's sibling",
        "questionTemplate": "Were [entity] , [entity] , [entity] , and [entity] [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x1 P0 M0 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x1 != M0 ) .\nM1 P1 ?x0 .\nM2 P1 ?x0 .\nM3 P1 ?x0 .\nM4 P1 ?x0\n}",
        "recursionDepth": 30,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P3373 ?x1 .\n?x1 wdt:P3373 wd:Q882 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x1 != wd:Q882 ) .\nwd:Q2367759 wdt:P1040 ?x0 .\nwd:Q199039 wdt:P1040 ?x0 .\nwd:Q166739 wdt:P1040 ?x0 .\nwd:Q214723 wdt:P1040 ?x0\n}",
        "questionWithBrackets": "Were [The Gold Rush] , [Pay Day] , [His New Profession] , and [The Floorwalker] edited by [Charlie Chaplin] 's sibling 's sibling"
    },
    {
        "questionIdx": 112911,
        "questionPatternModEntities": "Were M2 , M3 , and M4 directed by , written by , edited by , and produced by a Canadian spouse of M1",
        "questionTemplate": "Were [entity] , [entity] , and [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M1 ) .\nM2 P2 ?x0 .\nM2 P3 ?x0 .\nM2 P4 ?x0 .\nM2 P5 ?x0 .\nM3 P2 ?x0 .\nM3 P3 ?x0 .\nM3 P4 ?x0 .\nM3 P5 ?x0 .\nM4 P2 ?x0 .\nM4 P3 ?x0 .\nM4 P4 ?x0 .\nM4 P5 ?x0\n}",
        "recursionDepth": 50,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P27 wd:Q16 .\n?x0 wdt:P26 wd:Q235635 .\nFILTER ( ?x0 != wd:Q235635 ) .\nwd:Q24871 wdt:P57 ?x0 .\nwd:Q24871 wdt:P1040 ?x0 .\nwd:Q24871 wdt:P162|wdt:P272 ?x0 .\nwd:Q24871 wdt:P58 ?x0 .\nwd:Q44578 wdt:P57 ?x0 .\nwd:Q44578 wdt:P1040 ?x0 .\nwd:Q44578 wdt:P162|wdt:P272 ?x0 .\nwd:Q44578 wdt:P58 ?x0 .\nwd:Q110397 wdt:P57 ?x0 .\nwd:Q110397 wdt:P1040 ?x0 .\nwd:Q110397 wdt:P162|wdt:P272 ?x0 .\nwd:Q110397 wdt:P58 ?x0\n}",
        "questionWithBrackets": "Were [Avatar] , [Titanic] , and [True Lies] directed by , written by , edited by , and produced by a Canadian spouse of [Suzy Amis Cameron]"
    },
    {
        "questionIdx": 112912,
        "questionPatternModEntities": "Were M2 , M3 , and M4 edited by , directed by , produced by , and written by a Canadian sibling of M0",
        "questionTemplate": "Were [entity] , [entity] , and [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M0 ) .\nM2 P2 ?x0 .\nM2 P3 ?x0 .\nM2 P4 ?x0 .\nM2 P5 ?x0 .\nM3 P2 ?x0 .\nM3 P3 ?x0 .\nM3 P4 ?x0 .\nM3 P5 ?x0 .\nM4 P2 ?x0 .\nM4 P3 ?x0 .\nM4 P4 ?x0 .\nM4 P5 ?x0\n}",
        "recursionDepth": 50,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P27 wd:Q16 .\n?x0 wdt:P3373 wd:Q6228653 .\nFILTER ( ?x0 != wd:Q6228653 ) .\nwd:Q24871 wdt:P57 ?x0 .\nwd:Q24871 wdt:P1040 ?x0 .\nwd:Q24871 wdt:P162|wdt:P272 ?x0 .\nwd:Q24871 wdt:P58 ?x0 .\nwd:Q110397 wdt:P57 ?x0 .\nwd:Q110397 wdt:P1040 ?x0 .\nwd:Q110397 wdt:P162|wdt:P272 ?x0 .\nwd:Q110397 wdt:P58 ?x0 .\nwd:Q519406 wdt:P57 ?x0 .\nwd:Q519406 wdt:P1040 ?x0 .\nwd:Q519406 wdt:P162|wdt:P272 ?x0 .\nwd:Q519406 wdt:P58 ?x0\n}",
        "questionWithBrackets": "Were [Avatar] , [True Lies] , and [Xenogenesis] edited by , directed by , produced by , and written by a Canadian sibling of [John David Cameron]"
    },
    {
        "questionIdx": 112916,
        "questionPatternModEntities": "Were M2 and M5 influenced by a French spouse of M1 , influenced by M3 , and influenced by M4",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M1 ) .\nM2 P2 ?x0 .\nM2 P2 M3 .\nM2 P2 M4 .\nM5 P2 ?x0 .\nM5 P2 M3 .\nM5 P2 M4\n}",
        "recursionDepth": 47,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P27 wd:Q142 .\n?x0 wdt:P26 wd:Q2834263 .\nFILTER ( ?x0 != wd:Q2834263 ) .\nwd:Q9327 wdt:P737 ?x0 .\nwd:Q9327 wdt:P737 wd:Q9711 .\nwd:Q9327 wdt:P737 wd:Q504 .\nwd:Q5685 wdt:P737 ?x0 .\nwd:Q5685 wdt:P737 wd:Q9711 .\nwd:Q5685 wdt:P737 wd:Q504\n}",
        "questionWithBrackets": "Were [Anton Chekhov] and [Guy de Maupassant] influenced by a French spouse of [Alexandrine Zola] , influenced by [Honor\u00e9 de Balzac] , and influenced by [\u00c9mile Zola]"
    },
    {
        "questionIdx": 112927,
        "questionPatternModEntities": "Were M0 , M2 , and M3 edited by , directed by , written by , produced by , and executive produced by M1",
        "questionTemplate": "Were [entity] , [entity] , and [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1 .\nM0 P2 M1 .\nM0 P3 M1 .\nM0 P4 M1 .\nM2 P0 M1 .\nM2 P1 M1 .\nM2 P2 M1 .\nM2 P3 M1 .\nM2 P4 M1 .\nM3 P0 M1 .\nM3 P1 M1 .\nM3 P2 M1 .\nM3 P3 M1 .\nM3 P4 M1\n}",
        "recursionDepth": 46,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q6084069 wdt:P57 wd:Q187261 .\nwd:Q6084069 wdt:P1040 wd:Q187261 .\nwd:Q6084069 wdt:P1431 wd:Q187261 .\nwd:Q6084069 wdt:P162|wdt:P272 wd:Q187261 .\nwd:Q6084069 wdt:P58 wd:Q187261 .\nwd:Q12813010 wdt:P57 wd:Q187261 .\nwd:Q12813010 wdt:P1040 wd:Q187261 .\nwd:Q12813010 wdt:P1431 wd:Q187261 .\nwd:Q12813010 wdt:P162|wdt:P272 wd:Q187261 .\nwd:Q12813010 wdt:P58 wd:Q187261 .\nwd:Q5437360 wdt:P57 wd:Q187261 .\nwd:Q5437360 wdt:P1040 wd:Q187261 .\nwd:Q5437360 wdt:P1431 wd:Q187261 .\nwd:Q5437360 wdt:P162|wdt:P272 wd:Q187261 .\nwd:Q5437360 wdt:P58 wd:Q187261\n}",
        "questionWithBrackets": "Were [The Waiting Room] , [The Confession] , and [Fate] edited by , directed by , written by , produced by , and executive produced by [Zeki Demirkubuz]"
    },
    {
        "questionIdx": 113024,
        "questionPatternModEntities": "Were M1 and M5 edited by M3 and M4 , executive produced by M0 's sibling , and executive produced by M2",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by [entity] and [entity] , [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nM1 P1 ?x0 .\nM1 P1 M2 .\nM1 P2 M3 .\nM1 P2 M4 .\nM5 P1 ?x0 .\nM5 P1 M2 .\nM5 P2 M3 .\nM5 P2 M4\n}",
        "recursionDepth": 46,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P3373 wd:Q2009797 .\nFILTER ( ?x0 != wd:Q2009797 ) .\nwd:Q23781155 wdt:P1040 wd:Q11309299 .\nwd:Q23781155 wdt:P1040 wd:Q24206656 .\nwd:Q23781155 wdt:P1431 ?x0 .\nwd:Q23781155 wdt:P1431 wd:Q24176186 .\nwd:Q18407657 wdt:P1040 wd:Q11309299 .\nwd:Q18407657 wdt:P1040 wd:Q24206656 .\nwd:Q18407657 wdt:P1431 ?x0 .\nwd:Q18407657 wdt:P1431 wd:Q24176186\n}",
        "questionWithBrackets": "Were [Avengers: Endgame] and [Captain America: Civil War] edited by [Jeffrey Ford] and [Matthew Schmidt] , executive produced by [Larry Lieber] 's sibling , and executive produced by [Victoria Alonso]"
    },
    {
        "questionIdx": 113031,
        "questionPatternModEntities": "Were M1 and M5 executive produced by M0 's sibling , directed by M4 , and edited by M2 and M3",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nM1 P1 ?x0 .\nM1 P2 M2 .\nM1 P2 M3 .\nM1 P3 M4 .\nM5 P1 ?x0 .\nM5 P2 M2 .\nM5 P2 M3 .\nM5 P3 M4\n}",
        "recursionDepth": 45,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P3373 wd:Q2009797 .\nFILTER ( ?x0 != wd:Q2009797 ) .\nwd:Q23781155 wdt:P57 wd:Q20675767 .\nwd:Q23781155 wdt:P1040 wd:Q24206656 .\nwd:Q23781155 wdt:P1040 wd:Q11309299 .\nwd:Q23781155 wdt:P1431 ?x0 .\nwd:Q18407657 wdt:P57 wd:Q20675767 .\nwd:Q18407657 wdt:P1040 wd:Q24206656 .\nwd:Q18407657 wdt:P1040 wd:Q11309299 .\nwd:Q18407657 wdt:P1431 ?x0\n}",
        "questionWithBrackets": "Were [Avengers: Endgame] and [Captain America: Civil War] executive produced by [Larry Lieber] 's sibling , directed by [Joe Russo] , and edited by [Jeffrey Ford] and [Matthew Schmidt]"
    },
    {
        "questionIdx": 113032,
        "questionPatternModEntities": "Were M0 and M6 executive produced by M1 , edited by M4 and M5 , and executive produced by M2 and M3",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] and [entity] , and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P0 M3 .\nM0 P1 M4 .\nM0 P1 M5 .\nM6 P0 M1 .\nM6 P0 M2 .\nM6 P0 M3 .\nM6 P1 M4 .\nM6 P1 M5\n}",
        "recursionDepth": 46,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q23781155 wdt:P1040 wd:Q24206656 .\nwd:Q23781155 wdt:P1040 wd:Q11309299 .\nwd:Q23781155 wdt:P1431 wd:Q181900 .\nwd:Q23781155 wdt:P1431 wd:Q23409539 .\nwd:Q23781155 wdt:P1431 wd:Q24176186 .\nwd:Q18407657 wdt:P1040 wd:Q24206656 .\nwd:Q18407657 wdt:P1040 wd:Q11309299 .\nwd:Q18407657 wdt:P1431 wd:Q181900 .\nwd:Q18407657 wdt:P1431 wd:Q23409539 .\nwd:Q18407657 wdt:P1431 wd:Q24176186\n}",
        "questionWithBrackets": "Were [Avengers: Endgame] and [Captain America: Civil War] executive produced by [Louis D'Esposito] , edited by [Matthew Schmidt] and [Jeffrey Ford] , and executive produced by [Victoria Alonso] and [Stan Lee]"
    },
    {
        "questionIdx": 113119,
        "questionPatternModEntities": "Were M0 and M2 produced by and written by M1",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1 .\nM2 P0 M1 .\nM2 P1 M1\n}",
        "recursionDepth": 24,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q2294948 wdt:P162|wdt:P272 wd:Q882 .\nwd:Q2294948 wdt:P58 wd:Q882 .\nwd:Q374172 wdt:P162|wdt:P272 wd:Q882 .\nwd:Q374172 wdt:P58 wd:Q882\n}",
        "questionWithBrackets": "Were [The Kid] and [The Fireman] produced by and written by [Charlie Chaplin]"
    },
    {
        "questionIdx": 113134,
        "questionPatternModEntities": "Were M0 , M2 , and M3 directed by , produced by , written by , executive produced by , and edited by M1",
        "questionTemplate": "Were [entity] , [entity] , and [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1 .\nM0 P2 M1 .\nM0 P3 M1 .\nM0 P4 M1 .\nM2 P0 M1 .\nM2 P1 M1 .\nM2 P2 M1 .\nM2 P3 M1 .\nM2 P4 M1 .\nM3 P0 M1 .\nM3 P1 M1 .\nM3 P2 M1 .\nM3 P3 M1 .\nM3 P4 M1\n}",
        "recursionDepth": 46,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q5437360 wdt:P57 wd:Q187261 .\nwd:Q5437360 wdt:P1040 wd:Q187261 .\nwd:Q5437360 wdt:P1431 wd:Q187261 .\nwd:Q5437360 wdt:P162|wdt:P272 wd:Q187261 .\nwd:Q5437360 wdt:P58 wd:Q187261 .\nwd:Q6084069 wdt:P57 wd:Q187261 .\nwd:Q6084069 wdt:P1040 wd:Q187261 .\nwd:Q6084069 wdt:P1431 wd:Q187261 .\nwd:Q6084069 wdt:P162|wdt:P272 wd:Q187261 .\nwd:Q6084069 wdt:P58 wd:Q187261 .\nwd:Q12813010 wdt:P57 wd:Q187261 .\nwd:Q12813010 wdt:P1040 wd:Q187261 .\nwd:Q12813010 wdt:P1431 wd:Q187261 .\nwd:Q12813010 wdt:P162|wdt:P272 wd:Q187261 .\nwd:Q12813010 wdt:P58 wd:Q187261\n}",
        "questionWithBrackets": "Were [Fate] , [The Waiting Room] , and [The Confession] directed by , produced by , written by , executive produced by , and edited by [Zeki Demirkubuz]"
    },
    {
        "questionIdx": 113143,
        "questionPatternModEntities": "Were M0 and M3 produced by and edited by M1 and M2",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P1 M1 .\nM0 P1 M2 .\nM3 P0 M1 .\nM3 P0 M2 .\nM3 P1 M1 .\nM3 P1 M2\n}",
        "recursionDepth": 28,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q20729238 wdt:P1040 wd:Q562108 .\nwd:Q20729238 wdt:P1040 wd:Q35979475 .\nwd:Q20729238 wdt:P162|wdt:P272 wd:Q562108 .\nwd:Q20729238 wdt:P162|wdt:P272 wd:Q35979475 .\nwd:Q20729551 wdt:P1040 wd:Q562108 .\nwd:Q20729551 wdt:P1040 wd:Q35979475 .\nwd:Q20729551 wdt:P162|wdt:P272 wd:Q562108 .\nwd:Q20729551 wdt:P162|wdt:P272 wd:Q35979475\n}",
        "questionWithBrackets": "Were [Motion picture] and [Stop for Bud] produced by and edited by [J\u00f8rgen Leth] and [Ole John]"
    },
    {
        "questionIdx": 113144,
        "questionPatternModEntities": "Were M0 and M3 directed , edited , and written by M1 and M2",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P1 M1 .\nM0 P1 M2 .\nM0 P2 M1 .\nM0 P2 M2 .\nM3 P0 M1 .\nM3 P0 M2 .\nM3 P1 M1 .\nM3 P1 M2 .\nM3 P2 M1 .\nM3 P2 M2\n}",
        "recursionDepth": 32,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q20729238 wdt:P57 wd:Q562108 .\nwd:Q20729238 wdt:P57 wd:Q35979475 .\nwd:Q20729238 wdt:P1040 wd:Q562108 .\nwd:Q20729238 wdt:P1040 wd:Q35979475 .\nwd:Q20729238 wdt:P58 wd:Q562108 .\nwd:Q20729238 wdt:P58 wd:Q35979475 .\nwd:Q20729551 wdt:P57 wd:Q562108 .\nwd:Q20729551 wdt:P57 wd:Q35979475 .\nwd:Q20729551 wdt:P1040 wd:Q562108 .\nwd:Q20729551 wdt:P1040 wd:Q35979475 .\nwd:Q20729551 wdt:P58 wd:Q562108 .\nwd:Q20729551 wdt:P58 wd:Q35979475\n}",
        "questionWithBrackets": "Were [Motion picture] and [Stop for Bud] directed , edited , and written by [Ole John] and [J\u00f8rgen Leth]"
    },
    {
        "questionIdx": 113146,
        "questionPatternModEntities": "Were M0 and M3 edited by and produced by M1 and M2",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P1 M1 .\nM0 P1 M2 .\nM3 P0 M1 .\nM3 P0 M2 .\nM3 P1 M1 .\nM3 P1 M2\n}",
        "recursionDepth": 28,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q20729238 wdt:P1040 wd:Q562108 .\nwd:Q20729238 wdt:P1040 wd:Q35979475 .\nwd:Q20729238 wdt:P162|wdt:P272 wd:Q562108 .\nwd:Q20729238 wdt:P162|wdt:P272 wd:Q35979475 .\nwd:Q20729551 wdt:P1040 wd:Q562108 .\nwd:Q20729551 wdt:P1040 wd:Q35979475 .\nwd:Q20729551 wdt:P162|wdt:P272 wd:Q562108 .\nwd:Q20729551 wdt:P162|wdt:P272 wd:Q35979475\n}",
        "questionWithBrackets": "Were [Stop for Bud] and [Motion picture] edited by and produced by [Ole John] and [J\u00f8rgen Leth]"
    },
    {
        "questionIdx": 113156,
        "questionPatternModEntities": "Were M0 , M2 , and M3 edited , produced , and written by M1",
        "questionTemplate": "Were [entity] , [entity] , and [entity] [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1 .\nM0 P2 M1 .\nM2 P0 M1 .\nM2 P1 M1 .\nM2 P2 M1 .\nM3 P0 M1 .\nM3 P1 M1 .\nM3 P2 M1\n}",
        "recursionDepth": 31,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q374172 wdt:P1040 wd:Q882 .\nwd:Q374172 wdt:P162|wdt:P272 wd:Q882 .\nwd:Q374172 wdt:P58 wd:Q882 .\nwd:Q214723 wdt:P1040 wd:Q882 .\nwd:Q214723 wdt:P162|wdt:P272 wd:Q882 .\nwd:Q214723 wdt:P58 wd:Q882 .\nwd:Q45602 wdt:P1040 wd:Q882 .\nwd:Q45602 wdt:P162|wdt:P272 wd:Q882 .\nwd:Q45602 wdt:P58 wd:Q882\n}",
        "questionWithBrackets": "Were [The Kid] , [The Gold Rush] , and [Modern Times] edited , produced , and written by [Charlie Chaplin]"
    },
    {
        "questionIdx": 113162,
        "questionPatternModEntities": "Were M0 , M3 , and M4 directed , edited , and written by M1 and M2",
        "questionTemplate": "Were [entity] , [entity] , and [entity] [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P1 M1 .\nM0 P1 M2 .\nM0 P2 M1 .\nM0 P2 M2 .\nM3 P0 M1 .\nM3 P0 M2 .\nM3 P1 M1 .\nM3 P1 M2 .\nM3 P2 M1 .\nM3 P2 M2 .\nM4 P0 M1 .\nM4 P0 M2 .\nM4 P1 M1 .\nM4 P1 M2 .\nM4 P2 M1 .\nM4 P2 M2\n}",
        "recursionDepth": 35,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q20757119 wdt:P57 wd:Q562108 .\nwd:Q20757119 wdt:P57 wd:Q35979475 .\nwd:Q20757119 wdt:P1040 wd:Q562108 .\nwd:Q20757119 wdt:P1040 wd:Q35979475 .\nwd:Q20757119 wdt:P58 wd:Q562108 .\nwd:Q20757119 wdt:P58 wd:Q35979475 .\nwd:Q20729238 wdt:P57 wd:Q562108 .\nwd:Q20729238 wdt:P57 wd:Q35979475 .\nwd:Q20729238 wdt:P1040 wd:Q562108 .\nwd:Q20729238 wdt:P1040 wd:Q35979475 .\nwd:Q20729238 wdt:P58 wd:Q562108 .\nwd:Q20729238 wdt:P58 wd:Q35979475 .\nwd:Q20729551 wdt:P57 wd:Q562108 .\nwd:Q20729551 wdt:P57 wd:Q35979475 .\nwd:Q20729551 wdt:P1040 wd:Q562108 .\nwd:Q20729551 wdt:P1040 wd:Q35979475 .\nwd:Q20729551 wdt:P58 wd:Q562108 .\nwd:Q20729551 wdt:P58 wd:Q35979475\n}",
        "questionWithBrackets": "Were [No label defined] , [Motion picture] , and [Stop for Bud] directed , edited , and written by [J\u00f8rgen Leth] and [Ole John]"
    },
    {
        "questionIdx": 113188,
        "questionPatternModEntities": "Were M0 and M2 produced by and edited by M1",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1 .\nM2 P0 M1 .\nM2 P1 M1\n}",
        "recursionDepth": 24,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q166739 wdt:P1040 wd:Q882 .\nwd:Q166739 wdt:P162|wdt:P272 wd:Q882 .\nwd:Q214723 wdt:P1040 wd:Q882 .\nwd:Q214723 wdt:P162|wdt:P272 wd:Q882\n}",
        "questionWithBrackets": "Were [The Gold Rush] and [The Floorwalker] produced by and edited by [Charlie Chaplin]"
    },
    {
        "questionIdx": 113196,
        "questionPatternModEntities": "Were M4 and M5 written by , directed by , and edited by a employee of M0 , M1 , M2 , and M3",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity] , [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P0 M3 .\nM4 P1 ?x0 .\nM4 P2 ?x0 .\nM4 P3 ?x0 .\nM5 P1 ?x0 .\nM5 P2 ?x0 .\nM5 P3 ?x0\n}",
        "recursionDepth": 46,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P108 wd:Q1051884 .\n?x0 wdt:P108 wd:Q730179 .\n?x0 wdt:P108 wd:Q1136386 .\n?x0 wdt:P108 wd:Q947907 .\nwd:Q236728 wdt:P57 ?x0 .\nwd:Q236728 wdt:P1040 ?x0 .\nwd:Q236728 wdt:P58 ?x0 .\nwd:Q186572 wdt:P57 ?x0 .\nwd:Q186572 wdt:P1040 ?x0 .\nwd:Q186572 wdt:P58 ?x0\n}",
        "questionWithBrackets": "Were [Ponyo on the Cliff by the Sea] and [Princess Mononoke] written by , directed by , and edited by a employee of [Nippon Animation] , [Toei Animation] , [Ghibli Museum] , and [Shin-Ei Animation]"
    },
    {
        "questionIdx": 113207,
        "questionPatternModEntities": "Were M0 , M2 , M3 , and M4 directed , edited , and produced by M1",
        "questionTemplate": "Were [entity] , [entity] , [entity] , and [entity] [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1 .\nM0 P2 M1 .\nM2 P0 M1 .\nM2 P1 M1 .\nM2 P2 M1 .\nM3 P0 M1 .\nM3 P1 M1 .\nM3 P2 M1 .\nM4 P0 M1 .\nM4 P1 M1 .\nM4 P2 M1\n}",
        "recursionDepth": 34,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q1475995 wdt:P57 wd:Q8006 .\nwd:Q1475995 wdt:P1040 wd:Q8006 .\nwd:Q1475995 wdt:P162|wdt:P272 wd:Q8006 .\nwd:Q1077915 wdt:P57 wd:Q8006 .\nwd:Q1077915 wdt:P1040 wd:Q8006 .\nwd:Q1077915 wdt:P162|wdt:P272 wd:Q8006 .\nwd:Q39946 wdt:P57 wd:Q8006 .\nwd:Q39946 wdt:P1040 wd:Q8006 .\nwd:Q39946 wdt:P162|wdt:P272 wd:Q8006 .\nwd:Q854990 wdt:P57 wd:Q8006 .\nwd:Q854990 wdt:P1040 wd:Q8006 .\nwd:Q854990 wdt:P162|wdt:P272 wd:Q8006\n}",
        "questionWithBrackets": "Were [Kagemusha] , [The Lower Depths] , [Sanshiro Sugata] , and [The Hidden Fortress] directed , edited , and produced by [Akira Kurosawa]"
    },
    {
        "questionIdx": 113221,
        "questionPatternModEntities": "Were M3 and M4 directed by M0 's female German sibling",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P2 M2 .\nFILTER ( ?x0 != M0 ) .\nM3 P3 ?x0 .\nM4 P3 ?x0\n}",
        "recursionDepth": 30,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P21 wd:Q6581072 .\n?x0 wdt:P27 wd:Q183 .\n?x0 wdt:P3373 wd:Q12018959 .\nFILTER ( ?x0 != wd:Q12018959 ) .\nwd:Q322872 wdt:P57 ?x0 .\nwd:Q28125531 wdt:P57 ?x0\n}",
        "questionWithBrackets": "Were [The Last Train] and [Hunger: Addicted to Love] directed by [Hana He\u0159m\u00e1nkov\u00e1] 's female German sibling"
    },
    {
        "questionIdx": 113227,
        "questionPatternModEntities": "Were M2 , M3 , M4 , and M5 written by M1 's Italian spouse 's parent",
        "questionTemplate": "Were [entity] , [entity] , [entity] , and [entity] [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x1 P1 M0 .\n?x1 P2 M1 .\nFILTER ( ?x1 != M1 ) .\nM2 P3 ?x0 .\nM3 P3 ?x0 .\nM4 P3 ?x0 .\nM5 P3 ?x0\n}",
        "recursionDepth": 35,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 ?x1 .\n?x1 wdt:P27 wd:Q38 .\n?x1 wdt:P26 wd:Q325453 .\nFILTER ( ?x1 != wd:Q325453 ) .\nwd:Q3821217 wdt:P58 ?x0 .\nwd:Q58553 wdt:P58 ?x0 .\nwd:Q388675 wdt:P58 ?x0 .\nwd:Q1055809 wdt:P58 ?x0\n}",
        "questionWithBrackets": "Were [Marcellino] , [La Tratta delle bianche] , [Le avventure di Pinocchio] , and [La Storia] written by [Daniel Toscan du Plantier] 's Italian spouse 's parent"
    },
    {
        "questionIdx": 113228,
        "questionPatternModEntities": "Were M1 and M2 executive produced by a spouse of M0",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nM1 P1 ?x0 .\nM2 P1 ?x0\n}",
        "recursionDepth": 23,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P26 wd:Q40162 .\nFILTER ( ?x0 != wd:Q40162 ) .\nwd:Q42708010 wdt:P1431 ?x0 .\nwd:Q91540 wdt:P1431 ?x0\n}",
        "questionWithBrackets": "Were [Back to the Future] and [First Man] executive produced by a spouse of [Kate Capshaw]"
    },
    {
        "questionIdx": 113232,
        "questionPatternModEntities": "Were M0 and M6 executive produced by M1 and M2 , executive produced by M3 , and written by M4 and M5",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by [entity] and [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P0 M3 .\nM0 P1 M4 .\nM0 P1 M5 .\nM6 P0 M1 .\nM6 P0 M2 .\nM6 P0 M3 .\nM6 P1 M4 .\nM6 P1 M5\n}",
        "recursionDepth": 46,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q102438 wdt:P1431 wd:Q75079 .\nwd:Q102438 wdt:P1431 wd:Q1900360 .\nwd:Q102438 wdt:P1431 wd:Q11778321 .\nwd:Q102438 wdt:P58 wd:Q362061 .\nwd:Q102438 wdt:P58 wd:Q34660 .\nwd:Q102244 wdt:P1431 wd:Q75079 .\nwd:Q102244 wdt:P1431 wd:Q1900360 .\nwd:Q102244 wdt:P1431 wd:Q11778321 .\nwd:Q102244 wdt:P58 wd:Q362061 .\nwd:Q102244 wdt:P58 wd:Q34660\n}",
        "questionWithBrackets": "Were [Harry Potter and the Chamber of Secrets] and [Harry Potter and the Philosopher's Stone] executive produced by [Chris Columbus] and [Michael Barnathan] , executive produced by [Mark Radcliffe] , and written by [Steve Kloves] and [J. K. Rowling]"
    },
    {
        "questionIdx": 113236,
        "questionPatternModEntities": "Were M1 and M5 executive produced by M2 , executive produced by M3 and M4 , and written by M0 's spouse",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] and [entity] , and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nM1 P1 M2 .\nM1 P1 M3 .\nM1 P1 M4 .\nM1 P2 ?x0 .\nM5 P1 M2 .\nM5 P1 M3 .\nM5 P1 M4 .\nM5 P2 ?x0\n}",
        "recursionDepth": 46,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P26 wd:Q56441854 .\nFILTER ( ?x0 != wd:Q56441854 ) .\nwd:Q22350906 wdt:P1431 wd:Q8877 .\nwd:Q22350906 wdt:P1431 wd:Q237207 .\nwd:Q22350906 wdt:P1431 wd:Q549570 .\nwd:Q22350906 wdt:P58 ?x0 .\nwd:Q3362144 wdt:P1431 wd:Q8877 .\nwd:Q3362144 wdt:P1431 wd:Q237207 .\nwd:Q3362144 wdt:P1431 wd:Q549570 .\nwd:Q3362144 wdt:P58 ?x0\n}",
        "questionWithBrackets": "Were [Trail Mix-Up] and [Tummy Trouble] executive produced by [Steven Spielberg] , executive produced by [Kathleen Kennedy] and [Frank Marshall] , and written by [Crystal Kung] 's spouse"
    },
    {
        "questionIdx": 113240,
        "questionPatternModEntities": "Were M0 and M6 executive produced by M1 and M2 , edited by M5 , and executive produced by M3 and M4",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by [entity] and [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P0 M3 .\nM0 P0 M4 .\nM0 P1 M5 .\nM6 P0 M1 .\nM6 P0 M2 .\nM6 P0 M3 .\nM6 P0 M4 .\nM6 P1 M5\n}",
        "recursionDepth": 46,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q192724 wdt:P1040 wd:Q3013121 .\nwd:Q192724 wdt:P1431 wd:Q295964 .\nwd:Q192724 wdt:P1431 wd:Q5237056 .\nwd:Q192724 wdt:P1431 wd:Q23409539 .\nwd:Q192724 wdt:P1431 wd:Q181900 .\nwd:Q205028 wdt:P1040 wd:Q3013121 .\nwd:Q205028 wdt:P1431 wd:Q295964 .\nwd:Q205028 wdt:P1431 wd:Q5237056 .\nwd:Q205028 wdt:P1431 wd:Q23409539 .\nwd:Q205028 wdt:P1431 wd:Q181900\n}",
        "questionWithBrackets": "Were [Iron Man] and [Iron Man 2] executive produced by [Stan Lee] and [Jon Favreau] , edited by [Dan Lebental] , and executive produced by [David Maisel] and [Louis D'Esposito]"
    },
    {
        "questionIdx": 113250,
        "questionPatternModEntities": "Were M0 and M6 executive produced by M1 , executive produced by M2 and M3 , and written by M4 and M5",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] and [entity] , and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P0 M3 .\nM0 P1 M4 .\nM0 P1 M5 .\nM6 P0 M1 .\nM6 P0 M2 .\nM6 P0 M3 .\nM6 P1 M4 .\nM6 P1 M5\n}",
        "recursionDepth": 46,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q102438 wdt:P1431 wd:Q75079 .\nwd:Q102438 wdt:P1431 wd:Q1900360 .\nwd:Q102438 wdt:P1431 wd:Q11778321 .\nwd:Q102438 wdt:P58 wd:Q362061 .\nwd:Q102438 wdt:P58 wd:Q34660 .\nwd:Q102244 wdt:P1431 wd:Q75079 .\nwd:Q102244 wdt:P1431 wd:Q1900360 .\nwd:Q102244 wdt:P1431 wd:Q11778321 .\nwd:Q102244 wdt:P58 wd:Q362061 .\nwd:Q102244 wdt:P58 wd:Q34660\n}",
        "questionWithBrackets": "Were [Harry Potter and the Philosopher's Stone] and [Harry Potter and the Chamber of Secrets] executive produced by [Chris Columbus] , executive produced by [Michael Barnathan] and [Mark Radcliffe] , and written by [J. K. Rowling] and [Steve Kloves]"
    },
    {
        "questionIdx": 113255,
        "questionPatternModEntities": "Were M0 and M6 executive produced by M1 and M2 , written by M5 , and executive produced by M3 and M4",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by [entity] and [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P0 M3 .\nM0 P0 M4 .\nM0 P1 M5 .\nM6 P0 M1 .\nM6 P0 M2 .\nM6 P0 M3 .\nM6 P0 M4 .\nM6 P1 M5\n}",
        "recursionDepth": 46,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q131074 wdt:P1431 wd:Q421488 .\nwd:Q131074 wdt:P1431 wd:Q888311 .\nwd:Q131074 wdt:P1431 wd:Q6832375 .\nwd:Q131074 wdt:P1431 wd:Q531599 .\nwd:Q131074 wdt:P58 wd:Q116854 .\nwd:Q127367 wdt:P1431 wd:Q421488 .\nwd:Q127367 wdt:P1431 wd:Q888311 .\nwd:Q127367 wdt:P1431 wd:Q6832375 .\nwd:Q127367 wdt:P1431 wd:Q531599 .\nwd:Q127367 wdt:P58 wd:Q116854\n}",
        "questionWithBrackets": "Were [The Lord of the Rings: The Return of the King] and [The Lord of the Rings: The Fellowship of the Ring] executive produced by [Harvey Weinstein] and [Bob Weinstein] , written by [Philippa Boyens] , and executive produced by [Michael Lynne] and [Mark Ordesky]"
    },
    {
        "questionIdx": 113270,
        "questionPatternModEntities": "Were M0 , M5 , M6 , and M7 written by M3 , directed by M4 , and executive produced by M1 and M2",
        "questionTemplate": "Were [entity] , [entity] , [entity] , and [entity] [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P1 M3 .\nM0 P2 M4 .\nM5 P0 M1 .\nM5 P0 M2 .\nM5 P1 M3 .\nM5 P2 M4 .\nM6 P0 M1 .\nM6 P0 M2 .\nM6 P1 M3 .\nM6 P2 M4 .\nM7 P0 M1 .\nM7 P0 M2 .\nM7 P1 M3 .\nM7 P2 M4\n}",
        "recursionDepth": 47,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q548919 wdt:P57 wd:Q295463 .\nwd:Q548919 wdt:P1431 wd:Q24809566 .\nwd:Q548919 wdt:P1431 wd:Q24809564 .\nwd:Q548919 wdt:P58 wd:Q942914 .\nwd:Q54274 wdt:P57 wd:Q295463 .\nwd:Q54274 wdt:P1431 wd:Q24809566 .\nwd:Q54274 wdt:P1431 wd:Q24809564 .\nwd:Q54274 wdt:P58 wd:Q942914 .\nwd:Q46717 wdt:P57 wd:Q295463 .\nwd:Q46717 wdt:P1431 wd:Q24809566 .\nwd:Q46717 wdt:P1431 wd:Q24809564 .\nwd:Q46717 wdt:P58 wd:Q942914 .\nwd:Q161087 wdt:P57 wd:Q295463 .\nwd:Q161087 wdt:P1431 wd:Q24809566 .\nwd:Q161087 wdt:P1431 wd:Q24809564 .\nwd:Q161087 wdt:P58 wd:Q942914\n}",
        "questionWithBrackets": "Were [Pirates of the Caribbean: The Curse of the Black Pearl] , [Pirates of the Caribbean: At World's End] , [Pirates of the Caribbean: Dead Man's Chest] , and [The Lone Ranger] written by [Terry Rossio] , directed by [Gore Verbinski] , and executive produced by [Mike Stenson] and [Chad Oman]"
    },
    {
        "questionIdx": 113279,
        "questionPatternModEntities": "Were M0 , M5 , M6 , and M7 directed by M4 , written by M3 , and executive produced by M1 and M2",
        "questionTemplate": "Were [entity] , [entity] , [entity] , and [entity] [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P1 M3 .\nM0 P2 M4 .\nM5 P0 M1 .\nM5 P0 M2 .\nM5 P1 M3 .\nM5 P2 M4 .\nM6 P0 M1 .\nM6 P0 M2 .\nM6 P1 M3 .\nM6 P2 M4 .\nM7 P0 M1 .\nM7 P0 M2 .\nM7 P1 M3 .\nM7 P2 M4\n}",
        "recursionDepth": 47,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q46717 wdt:P57 wd:Q295463 .\nwd:Q46717 wdt:P1431 wd:Q24809566 .\nwd:Q46717 wdt:P1431 wd:Q24809564 .\nwd:Q46717 wdt:P58 wd:Q942914 .\nwd:Q161087 wdt:P57 wd:Q295463 .\nwd:Q161087 wdt:P1431 wd:Q24809566 .\nwd:Q161087 wdt:P1431 wd:Q24809564 .\nwd:Q161087 wdt:P58 wd:Q942914 .\nwd:Q54274 wdt:P57 wd:Q295463 .\nwd:Q54274 wdt:P1431 wd:Q24809566 .\nwd:Q54274 wdt:P1431 wd:Q24809564 .\nwd:Q54274 wdt:P58 wd:Q942914 .\nwd:Q548919 wdt:P57 wd:Q295463 .\nwd:Q548919 wdt:P1431 wd:Q24809566 .\nwd:Q548919 wdt:P1431 wd:Q24809564 .\nwd:Q548919 wdt:P58 wd:Q942914\n}",
        "questionWithBrackets": "Were [The Lone Ranger] , [Pirates of the Caribbean: The Curse of the Black Pearl] , [Pirates of the Caribbean: Dead Man's Chest] , and [Pirates of the Caribbean: At World's End] directed by [Gore Verbinski] , written by [Terry Rossio] , and executive produced by [Chad Oman] and [Mike Stenson]"
    },
    {
        "questionIdx": 113305,
        "questionPatternModEntities": "Were M0 and M6 written by M4 and M5 , executive produced by M1 and M2 , and executive produced by M3",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by [entity] and [entity] , [VP_SIMPLE] by [entity] and [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P0 M3 .\nM0 P1 M4 .\nM0 P1 M5 .\nM6 P0 M1 .\nM6 P0 M2 .\nM6 P0 M3 .\nM6 P1 M4 .\nM6 P1 M5\n}",
        "recursionDepth": 46,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q127367 wdt:P1431 wd:Q421488 .\nwd:Q127367 wdt:P1431 wd:Q6832375 .\nwd:Q127367 wdt:P1431 wd:Q531599 .\nwd:Q127367 wdt:P58 wd:Q4465 .\nwd:Q127367 wdt:P58 wd:Q116854 .\nwd:Q131074 wdt:P1431 wd:Q421488 .\nwd:Q131074 wdt:P1431 wd:Q6832375 .\nwd:Q131074 wdt:P1431 wd:Q531599 .\nwd:Q131074 wdt:P58 wd:Q4465 .\nwd:Q131074 wdt:P58 wd:Q116854\n}",
        "questionWithBrackets": "Were [The Lord of the Rings: The Return of the King] and [The Lord of the Rings: The Fellowship of the Ring] written by [Peter Jackson] and [Philippa Boyens] , executive produced by [Mark Ordesky] and [Harvey Weinstein] , and executive produced by [Michael Lynne]"
    },
    {
        "questionIdx": 113306,
        "questionPatternModEntities": "Were M0 and M6 written by M5 , executive produced by M1 and M2 , and executive produced by M3 and M4",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] and [entity] , and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P0 M3 .\nM0 P0 M4 .\nM0 P1 M5 .\nM6 P0 M1 .\nM6 P0 M2 .\nM6 P0 M3 .\nM6 P0 M4 .\nM6 P1 M5\n}",
        "recursionDepth": 46,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q131074 wdt:P1431 wd:Q6832375 .\nwd:Q131074 wdt:P1431 wd:Q421488 .\nwd:Q131074 wdt:P1431 wd:Q531599 .\nwd:Q131074 wdt:P1431 wd:Q888311 .\nwd:Q131074 wdt:P58 wd:Q116854 .\nwd:Q127367 wdt:P1431 wd:Q6832375 .\nwd:Q127367 wdt:P1431 wd:Q421488 .\nwd:Q127367 wdt:P1431 wd:Q531599 .\nwd:Q127367 wdt:P1431 wd:Q888311 .\nwd:Q127367 wdt:P58 wd:Q116854\n}",
        "questionWithBrackets": "Were [The Lord of the Rings: The Fellowship of the Ring] and [The Lord of the Rings: The Return of the King] written by [Philippa Boyens] , executive produced by [Bob Weinstein] and [Mark Ordesky] , and executive produced by [Michael Lynne] and [Harvey Weinstein]"
    },
    {
        "questionIdx": 113312,
        "questionPatternModEntities": "Were M0 and M6 executive produced by M1 , executive produced by M2 and M3 , and edited by M4 and M5",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] and [entity] , and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P0 M3 .\nM0 P1 M4 .\nM0 P1 M5 .\nM6 P0 M1 .\nM6 P0 M2 .\nM6 P0 M3 .\nM6 P1 M4 .\nM6 P1 M5\n}",
        "recursionDepth": 46,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q18407657 wdt:P1040 wd:Q11309299 .\nwd:Q18407657 wdt:P1040 wd:Q24206656 .\nwd:Q18407657 wdt:P1431 wd:Q181900 .\nwd:Q18407657 wdt:P1431 wd:Q23409539 .\nwd:Q18407657 wdt:P1431 wd:Q24176186 .\nwd:Q23781155 wdt:P1040 wd:Q11309299 .\nwd:Q23781155 wdt:P1040 wd:Q24206656 .\nwd:Q23781155 wdt:P1431 wd:Q181900 .\nwd:Q23781155 wdt:P1431 wd:Q23409539 .\nwd:Q23781155 wdt:P1431 wd:Q24176186\n}",
        "questionWithBrackets": "Were [Captain America: Civil War] and [Avengers: Endgame] executive produced by [Victoria Alonso] , executive produced by [Stan Lee] and [Louis D'Esposito] , and edited by [Matthew Schmidt] and [Jeffrey Ford]"
    },
    {
        "questionIdx": 113313,
        "questionPatternModEntities": "Were M0 and M6 executive produced by M1 and M2 , executive produced by M3 , and edited by M4 and M5",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by [entity] and [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P0 M3 .\nM0 P1 M4 .\nM0 P1 M5 .\nM6 P0 M1 .\nM6 P0 M2 .\nM6 P0 M3 .\nM6 P1 M4 .\nM6 P1 M5\n}",
        "recursionDepth": 46,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q23781155 wdt:P1040 wd:Q11309299 .\nwd:Q23781155 wdt:P1040 wd:Q24206656 .\nwd:Q23781155 wdt:P1431 wd:Q181900 .\nwd:Q23781155 wdt:P1431 wd:Q23409539 .\nwd:Q23781155 wdt:P1431 wd:Q24176186 .\nwd:Q18407657 wdt:P1040 wd:Q11309299 .\nwd:Q18407657 wdt:P1040 wd:Q24206656 .\nwd:Q18407657 wdt:P1431 wd:Q181900 .\nwd:Q18407657 wdt:P1431 wd:Q23409539 .\nwd:Q18407657 wdt:P1431 wd:Q24176186\n}",
        "questionWithBrackets": "Were [Avengers: Endgame] and [Captain America: Civil War] executive produced by [Stan Lee] and [Victoria Alonso] , executive produced by [Louis D'Esposito] , and edited by [Jeffrey Ford] and [Matthew Schmidt]"
    },
    {
        "questionIdx": 113336,
        "questionPatternModEntities": "Were M0 , M5 , M6 , and M7 edited by M3 , executive produced by M1 and M2 , and directed by M4",
        "questionTemplate": "Were [entity] , [entity] , [entity] , and [entity] [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] and [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P1 M3 .\nM0 P2 M4 .\nM5 P0 M1 .\nM5 P0 M2 .\nM5 P1 M3 .\nM5 P2 M4 .\nM6 P0 M1 .\nM6 P0 M2 .\nM6 P1 M3 .\nM6 P2 M4 .\nM7 P0 M1 .\nM7 P0 M2 .\nM7 P1 M3 .\nM7 P2 M4\n}",
        "recursionDepth": 47,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q46717 wdt:P57 wd:Q295463 .\nwd:Q46717 wdt:P1040 wd:Q1138711 .\nwd:Q46717 wdt:P1431 wd:Q24809566 .\nwd:Q46717 wdt:P1431 wd:Q24809564 .\nwd:Q548919 wdt:P57 wd:Q295463 .\nwd:Q548919 wdt:P1040 wd:Q1138711 .\nwd:Q548919 wdt:P1431 wd:Q24809566 .\nwd:Q548919 wdt:P1431 wd:Q24809564 .\nwd:Q54274 wdt:P57 wd:Q295463 .\nwd:Q54274 wdt:P1040 wd:Q1138711 .\nwd:Q54274 wdt:P1431 wd:Q24809566 .\nwd:Q54274 wdt:P1431 wd:Q24809564 .\nwd:Q161087 wdt:P57 wd:Q295463 .\nwd:Q161087 wdt:P1040 wd:Q1138711 .\nwd:Q161087 wdt:P1431 wd:Q24809566 .\nwd:Q161087 wdt:P1431 wd:Q24809564\n}",
        "questionWithBrackets": "Were [The Lone Ranger] , [Pirates of the Caribbean: At World's End] , [Pirates of the Caribbean: Dead Man's Chest] , and [Pirates of the Caribbean: The Curse of the Black Pearl] edited by [Craig Wood] , executive produced by [Chad Oman] and [Mike Stenson] , and directed by [Gore Verbinski]"
    },
    {
        "questionIdx": 113342,
        "questionPatternModEntities": "Were M0 and M2 produced , written , and executive produced by M1",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1 .\nM0 P2 M1 .\nM2 P0 M1 .\nM2 P1 M1 .\nM2 P2 M1\n}",
        "recursionDepth": 29,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q181086 wdt:P1431 wd:Q2001 .\nwd:Q181086 wdt:P162|wdt:P272 wd:Q2001 .\nwd:Q181086 wdt:P58 wd:Q2001 .\nwd:Q209481 wdt:P1431 wd:Q2001 .\nwd:Q209481 wdt:P162|wdt:P272 wd:Q2001 .\nwd:Q209481 wdt:P58 wd:Q2001\n}",
        "questionWithBrackets": "Were [A Clockwork Orange] and [Eyes Wide Shut] produced , written , and executive produced by [Stanley Kubrick]"
    },
    {
        "questionIdx": 113354,
        "questionPatternModEntities": "Were M0 , M2 , M3 , and M4 edited by , directed by , and written by M1",
        "questionTemplate": "Were [entity] , [entity] , [entity] , and [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1 .\nM0 P2 M1 .\nM2 P0 M1 .\nM2 P1 M1 .\nM2 P2 M1 .\nM3 P0 M1 .\nM3 P1 M1 .\nM3 P2 M1 .\nM4 P0 M1 .\nM4 P1 M1 .\nM4 P2 M1\n}",
        "recursionDepth": 36,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q1114038 wdt:P57 wd:Q53001 .\nwd:Q1114038 wdt:P1040 wd:Q53001 .\nwd:Q1114038 wdt:P58 wd:Q53001 .\nwd:Q1992724 wdt:P57 wd:Q53001 .\nwd:Q1992724 wdt:P1040 wd:Q53001 .\nwd:Q1992724 wdt:P58 wd:Q53001 .\nwd:Q972787 wdt:P57 wd:Q53001 .\nwd:Q972787 wdt:P1040 wd:Q53001 .\nwd:Q972787 wdt:P58 wd:Q53001 .\nwd:Q672061 wdt:P57 wd:Q53001 .\nwd:Q672061 wdt:P1040 wd:Q53001 .\nwd:Q672061 wdt:P58 wd:Q53001\n}",
        "questionWithBrackets": "Were [Keep Your Right Up] , [Passion] , [Every Man for Himself] , and [Nouvelle Vague] edited by , directed by , and written by [Jean-Luc Godard]"
    },
    {
        "questionIdx": 113376,
        "questionPatternModEntities": "Were M0 , M2 , and M3 edited by , written by , executive produced by , directed by , and produced by M1",
        "questionTemplate": "Were [entity] , [entity] , and [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1 .\nM0 P2 M1 .\nM0 P3 M1 .\nM0 P4 M1 .\nM2 P0 M1 .\nM2 P1 M1 .\nM2 P2 M1 .\nM2 P3 M1 .\nM2 P4 M1 .\nM3 P0 M1 .\nM3 P1 M1 .\nM3 P2 M1 .\nM3 P3 M1 .\nM3 P4 M1\n}",
        "recursionDepth": 46,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q6084069 wdt:P57 wd:Q187261 .\nwd:Q6084069 wdt:P1040 wd:Q187261 .\nwd:Q6084069 wdt:P1431 wd:Q187261 .\nwd:Q6084069 wdt:P162|wdt:P272 wd:Q187261 .\nwd:Q6084069 wdt:P58 wd:Q187261 .\nwd:Q12813010 wdt:P57 wd:Q187261 .\nwd:Q12813010 wdt:P1040 wd:Q187261 .\nwd:Q12813010 wdt:P1431 wd:Q187261 .\nwd:Q12813010 wdt:P162|wdt:P272 wd:Q187261 .\nwd:Q12813010 wdt:P58 wd:Q187261 .\nwd:Q5437360 wdt:P57 wd:Q187261 .\nwd:Q5437360 wdt:P1040 wd:Q187261 .\nwd:Q5437360 wdt:P1431 wd:Q187261 .\nwd:Q5437360 wdt:P162|wdt:P272 wd:Q187261 .\nwd:Q5437360 wdt:P58 wd:Q187261\n}",
        "questionWithBrackets": "Were [The Waiting Room] , [Fate] , and [The Confession] edited by , written by , executive produced by , directed by , and produced by [Zeki Demirkubuz]"
    },
    {
        "questionIdx": 113377,
        "questionPatternModEntities": "Were M0 , M2 , and M3 executive produced by and produced by M1",
        "questionTemplate": "Were [entity] , [entity] , and [entity] [VP_SIMPLE] by and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1 .\nM2 P0 M1 .\nM2 P1 M1 .\nM3 P0 M1 .\nM3 P1 M1\n}",
        "recursionDepth": 28,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q44408 wdt:P1431 wd:Q38222 .\nwd:Q44408 wdt:P162|wdt:P272 wd:Q38222 .\nwd:Q182373 wdt:P1431 wd:Q38222 .\nwd:Q182373 wdt:P162|wdt:P272 wd:Q38222 .\nwd:Q17738 wdt:P1431 wd:Q38222 .\nwd:Q17738 wdt:P162|wdt:P272 wd:Q38222\n}",
        "questionWithBrackets": "Were [Captain EO] , [Star Wars: Episode IV \u2013 A New Hope] , and [Indiana Jones and the Kingdom of the Crystal Skull] executive produced by and produced by [George Lucas]"
    },
    {
        "questionIdx": 113378,
        "questionPatternModEntities": "Were M0 , M2 , and M3 produced and executive produced by M1",
        "questionTemplate": "Were [entity] , [entity] , and [entity] [VP_SIMPLE] and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1 .\nM2 P0 M1 .\nM2 P1 M1 .\nM3 P0 M1 .\nM3 P1 M1\n}",
        "recursionDepth": 27,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q515931 wdt:P1431 wd:Q38222 .\nwd:Q515931 wdt:P162|wdt:P272 wd:Q38222 .\nwd:Q17738 wdt:P1431 wd:Q38222 .\nwd:Q17738 wdt:P162|wdt:P272 wd:Q38222 .\nwd:Q382289 wdt:P1431 wd:Q38222 .\nwd:Q382289 wdt:P162|wdt:P272 wd:Q38222\n}",
        "questionWithBrackets": "Were [Star Wars: Episode IV \u2013 A New Hope] , [Willow] , and [Star Wars: The Clone Wars] produced and executive produced by [George Lucas]"
    },
    {
        "questionIdx": 113379,
        "questionPatternModEntities": "Were M0 , M2 , M3 , M4 , M5 , M6 , M7 , and M8 Italian",
        "questionTemplate": "Were [entity] , [entity] , [entity] , [entity] , [entity] , [entity] , [entity] , and [entity] [ADJECTIVE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM2 P0 M1 .\nM3 P0 M1 .\nM4 P0 M1 .\nM5 P0 M1 .\nM6 P0 M1 .\nM7 P0 M1 .\nM8 P0 M1\n}",
        "recursionDepth": 31,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q17575 wdt:P27 wd:Q38 .\nwd:Q624 wdt:P27 wd:Q38 .\nwd:Q765 wdt:P27 wd:Q38 .\nwd:Q615 wdt:P27 wd:Q38 .\nwd:Q1220 wdt:P27 wd:Q38 .\nwd:Q1228 wdt:P27 wd:Q38 .\nwd:Q1224 wdt:P27 wd:Q38 .\nwd:Q1233 wdt:P27 wd:Q38\n}",
        "questionWithBrackets": "Were [Sandro Pertini] , [Luigi Dallapiccola] , [Giorgio Napolitano] , [Alessandro Del Piero] , [Lionel Messi] , [Oscar Luigi Scalfaro] , [Carlo Azeglio Ciampi] , and [Dario Fo] Italian"
    },
    {
        "questionIdx": 113400,
        "questionPatternModEntities": "Were M1 and M2 directed by M0 's employee",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 ?x0 .\nM2 P1 ?x0\n}",
        "recursionDepth": 20,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P108 wd:Q646229 .\nwd:Q3232751 wdt:P57 ?x0 .\nwd:Q21468842 wdt:P57 ?x0\n}",
        "questionWithBrackets": "Were [No label defined] and [One More Winter] directed by [L'Express (Neuch\u00e2tel)] 's employee"
    },
    {
        "questionIdx": 113432,
        "questionPatternModEntities": "Were M2 and M3 directed and written by a male sibling of M0",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] and [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M0 ) .\nM2 P2 ?x0 .\nM2 P3 ?x0 .\nM3 P2 ?x0 .\nM3 P3 ?x0\n}",
        "recursionDepth": 34,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P21 wd:Q6581097 .\n?x0 wdt:P3373 wd:Q105946886 .\nFILTER ( ?x0 != wd:Q105946886 ) .\nwd:Q176147 wdt:P57 ?x0 .\nwd:Q176147 wdt:P58 ?x0 .\nwd:Q898864 wdt:P57 ?x0 .\nwd:Q898864 wdt:P58 ?x0\n}",
        "questionWithBrackets": "Were [Charlotte for Ever] and [Je t'aime moi non plus] directed and written by a male sibling of [Liliane Gainsbourg]"
    },
    {
        "questionIdx": 113434,
        "questionPatternModEntities": "Were M1 , M2 , M3 , M4 , and M5 written and directed by M0 's sibling",
        "questionTemplate": "Were [entity] , [entity] , [entity] , [entity] , and [entity] [VP_SIMPLE] and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nM1 P1 ?x0 .\nM1 P2 ?x0 .\nM2 P1 ?x0 .\nM2 P2 ?x0 .\nM3 P1 ?x0 .\nM3 P2 ?x0 .\nM4 P1 ?x0 .\nM4 P2 ?x0 .\nM5 P1 ?x0 .\nM5 P2 ?x0\n}",
        "recursionDepth": 36,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P3373 wd:Q606780 .\nFILTER ( ?x0 != wd:Q606780 ) .\nwd:Q9086821 wdt:P57 ?x0 .\nwd:Q9086821 wdt:P58 ?x0 .\nwd:Q109116 wdt:P57 ?x0 .\nwd:Q109116 wdt:P58 ?x0 .\nwd:Q199039 wdt:P57 ?x0 .\nwd:Q199039 wdt:P58 ?x0 .\nwd:Q214723 wdt:P57 ?x0 .\nwd:Q214723 wdt:P58 ?x0 .\nwd:Q238211 wdt:P57 ?x0 .\nwd:Q238211 wdt:P58 ?x0\n}",
        "questionWithBrackets": "Were [The Gold Rush] , [City Lights] , [The Great Dictator] , [Pay Day] , and [The Freak] written and directed by [Sydney Chaplin] 's sibling"
    },
    {
        "questionIdx": 113436,
        "questionPatternModEntities": "Were M0 , M3 , M4 , and M5 edited by and written by M1 and M2",
        "questionTemplate": "Were [entity] , [entity] , [entity] , and [entity] [VP_SIMPLE] by and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P1 M1 .\nM0 P1 M2 .\nM3 P0 M1 .\nM3 P0 M2 .\nM3 P1 M1 .\nM3 P1 M2 .\nM4 P0 M1 .\nM4 P0 M2 .\nM4 P1 M1 .\nM4 P1 M2 .\nM5 P0 M1 .\nM5 P0 M2 .\nM5 P1 M1 .\nM5 P1 M2\n}",
        "recursionDepth": 34,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q913440 wdt:P1040 wd:Q13595311 .\nwd:Q913440 wdt:P1040 wd:Q13595531 .\nwd:Q913440 wdt:P58 wd:Q13595311 .\nwd:Q913440 wdt:P58 wd:Q13595531 .\nwd:Q300555 wdt:P1040 wd:Q13595311 .\nwd:Q300555 wdt:P1040 wd:Q13595531 .\nwd:Q300555 wdt:P58 wd:Q13595311 .\nwd:Q300555 wdt:P58 wd:Q13595531 .\nwd:Q83739 wdt:P1040 wd:Q13595311 .\nwd:Q83739 wdt:P1040 wd:Q13595531 .\nwd:Q83739 wdt:P58 wd:Q13595311 .\nwd:Q83739 wdt:P58 wd:Q13595531 .\nwd:Q501874 wdt:P1040 wd:Q13595311 .\nwd:Q501874 wdt:P1040 wd:Q13595531 .\nwd:Q501874 wdt:P58 wd:Q13595311 .\nwd:Q501874 wdt:P58 wd:Q13595531\n}",
        "questionWithBrackets": "Were [The Man Who Wasn't There] , [A Serious Man] , [The Ladykillers] , and [O Brother, Where Art Thou?] edited by and written by [Joel Coen] and [Ethan Coen]"
    },
    {
        "questionIdx": 113445,
        "questionPatternModEntities": "Were M0 , M2 , and M3 produced by , directed by , edited by , written by , and executive produced by M1",
        "questionTemplate": "Were [entity] , [entity] , and [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1 .\nM0 P2 M1 .\nM0 P3 M1 .\nM0 P4 M1 .\nM2 P0 M1 .\nM2 P1 M1 .\nM2 P2 M1 .\nM2 P3 M1 .\nM2 P4 M1 .\nM3 P0 M1 .\nM3 P1 M1 .\nM3 P2 M1 .\nM3 P3 M1 .\nM3 P4 M1\n}",
        "recursionDepth": 46,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q5437360 wdt:P57 wd:Q187261 .\nwd:Q5437360 wdt:P1040 wd:Q187261 .\nwd:Q5437360 wdt:P1431 wd:Q187261 .\nwd:Q5437360 wdt:P162|wdt:P272 wd:Q187261 .\nwd:Q5437360 wdt:P58 wd:Q187261 .\nwd:Q6084069 wdt:P57 wd:Q187261 .\nwd:Q6084069 wdt:P1040 wd:Q187261 .\nwd:Q6084069 wdt:P1431 wd:Q187261 .\nwd:Q6084069 wdt:P162|wdt:P272 wd:Q187261 .\nwd:Q6084069 wdt:P58 wd:Q187261 .\nwd:Q12813010 wdt:P57 wd:Q187261 .\nwd:Q12813010 wdt:P1040 wd:Q187261 .\nwd:Q12813010 wdt:P1431 wd:Q187261 .\nwd:Q12813010 wdt:P162|wdt:P272 wd:Q187261 .\nwd:Q12813010 wdt:P58 wd:Q187261\n}",
        "questionWithBrackets": "Were [Fate] , [The Waiting Room] , and [The Confession] produced by , directed by , edited by , written by , and executive produced by [Zeki Demirkubuz]"
    },
    {
        "questionIdx": 113453,
        "questionPatternModEntities": "Were M0 and M2 directed by and executive produced by M1",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1 .\nM2 P0 M1 .\nM2 P1 M1\n}",
        "recursionDepth": 25,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q29011 wdt:P57 wd:Q55400 .\nwd:Q29011 wdt:P1431 wd:Q55400 .\nwd:Q29982423 wdt:P57 wd:Q55400 .\nwd:Q29982423 wdt:P1431 wd:Q55400\n}",
        "questionWithBrackets": "Were [Boro The Caterpillar] and [Howl's Moving Castle] directed by and executive produced by [Hayao Miyazaki]"
    },
    {
        "questionIdx": 113455,
        "questionPatternModEntities": "Were M0 and M2 executive produced by and directed by M1",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1 .\nM2 P0 M1 .\nM2 P1 M1\n}",
        "recursionDepth": 25,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q29011 wdt:P57 wd:Q55400 .\nwd:Q29011 wdt:P1431 wd:Q55400 .\nwd:Q236728 wdt:P57 wd:Q55400 .\nwd:Q236728 wdt:P1431 wd:Q55400\n}",
        "questionWithBrackets": "Were [Howl's Moving Castle] and [Ponyo on the Cliff by the Sea] executive produced by and directed by [Hayao Miyazaki]"
    },
    {
        "questionIdx": 113457,
        "questionPatternModEntities": "Were M0 , M2 , and M3 produced by , written by , directed by , edited by , and executive produced by M1",
        "questionTemplate": "Were [entity] , [entity] , and [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1 .\nM0 P2 M1 .\nM0 P3 M1 .\nM0 P4 M1 .\nM2 P0 M1 .\nM2 P1 M1 .\nM2 P2 M1 .\nM2 P3 M1 .\nM2 P4 M1 .\nM3 P0 M1 .\nM3 P1 M1 .\nM3 P2 M1 .\nM3 P3 M1 .\nM3 P4 M1\n}",
        "recursionDepth": 46,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q5437360 wdt:P57 wd:Q187261 .\nwd:Q5437360 wdt:P1040 wd:Q187261 .\nwd:Q5437360 wdt:P1431 wd:Q187261 .\nwd:Q5437360 wdt:P162|wdt:P272 wd:Q187261 .\nwd:Q5437360 wdt:P58 wd:Q187261 .\nwd:Q12813010 wdt:P57 wd:Q187261 .\nwd:Q12813010 wdt:P1040 wd:Q187261 .\nwd:Q12813010 wdt:P1431 wd:Q187261 .\nwd:Q12813010 wdt:P162|wdt:P272 wd:Q187261 .\nwd:Q12813010 wdt:P58 wd:Q187261 .\nwd:Q6084069 wdt:P57 wd:Q187261 .\nwd:Q6084069 wdt:P1040 wd:Q187261 .\nwd:Q6084069 wdt:P1431 wd:Q187261 .\nwd:Q6084069 wdt:P162|wdt:P272 wd:Q187261 .\nwd:Q6084069 wdt:P58 wd:Q187261\n}",
        "questionWithBrackets": "Were [Fate] , [The Waiting Room] , and [The Confession] produced by , written by , directed by , edited by , and executive produced by [Zeki Demirkubuz]"
    },
    {
        "questionIdx": 113484,
        "questionPatternModEntities": "Were M1 , M4 , M5 , and M6 influenced by M2 , influenced by M0 's spouse , and influenced by M3",
        "questionTemplate": "Were [entity] , [entity] , [entity] , and [entity] [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nM1 P1 ?x0 .\nM1 P1 M2 .\nM1 P1 M3 .\nM4 P1 ?x0 .\nM4 P1 M2 .\nM4 P1 M3 .\nM5 P1 ?x0 .\nM5 P1 M2 .\nM5 P1 M3 .\nM6 P1 ?x0 .\nM6 P1 M2 .\nM6 P1 M3\n}",
        "recursionDepth": 46,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P26 wd:Q2825429 .\nFILTER ( ?x0 != wd:Q2825429 ) .\nwd:Q991 wdt:P737 ?x0 .\nwd:Q991 wdt:P737 wd:Q16867 .\nwd:Q991 wdt:P737 wd:Q535 .\nwd:Q501 wdt:P737 ?x0 .\nwd:Q501 wdt:P737 wd:Q16867 .\nwd:Q501 wdt:P737 wd:Q535 .\nwd:Q33977 wdt:P737 ?x0 .\nwd:Q33977 wdt:P737 wd:Q16867 .\nwd:Q33977 wdt:P737 wd:Q535 .\nwd:Q311145 wdt:P737 ?x0 .\nwd:Q311145 wdt:P737 wd:Q16867 .\nwd:Q311145 wdt:P737 wd:Q535\n}",
        "questionWithBrackets": "Were [Joaquim Maria Machado de Assis] , [Jules Verne] , [Charles Baudelaire] , and [Fyodor Dostoyevsky] influenced by [Edgar Allan Poe] , influenced by [Ad\u00e8le Foucher] 's spouse , and influenced by [Victor Hugo]"
    },
    {
        "questionIdx": 113502,
        "questionPatternModEntities": "Were M1 , M2 , and M3 directed by M0 's parent",
        "questionTemplate": "Were [entity] , [entity] , and [entity] [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 ?x0 .\nM2 P1 ?x0 .\nM3 P1 ?x0\n}",
        "recursionDepth": 23,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q104373357 .\nwd:Q83365219 wdt:P57 ?x0 .\nwd:Q48631394 wdt:P57 ?x0 .\nwd:Q114819 wdt:P57 ?x0\n}",
        "questionWithBrackets": "Were [Part 10] , [Dune] , and [What Did Jack Do?] directed by [Lula Boginia Lynch] 's parent"
    },
    {
        "questionIdx": 113512,
        "questionPatternModEntities": "Were M0 , M2 , M3 , and M4 Dutch",
        "questionTemplate": "Were [entity] , [entity] , [entity] , and [entity] [ADJECTIVE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM2 P0 M1 .\nM3 P0 M1 .\nM4 P0 M1\n}",
        "recursionDepth": 19,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q927 wdt:P27 wd:Q29999 .\nwd:Q920 wdt:P27 wd:Q29999 .\nwd:Q354 wdt:P27 wd:Q29999 .\nwd:Q1470 wdt:P27 wd:Q29999\n}",
        "questionWithBrackets": "Were [M. C. Escher] , [Harry Mulisch] , [J. Bernlef] , and [Piet Kraak] Dutch"
    },
    {
        "questionIdx": 113574,
        "questionPatternModEntities": "Were M0 , M2 , M3 , and M4 directed and executive produced by M1",
        "questionTemplate": "Were [entity] , [entity] , [entity] , and [entity] [VP_SIMPLE] and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1 .\nM2 P0 M1 .\nM2 P1 M1 .\nM3 P0 M1 .\nM3 P1 M1 .\nM4 P0 M1 .\nM4 P1 M1\n}",
        "recursionDepth": 30,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q207698 wdt:P57 wd:Q56005 .\nwd:Q207698 wdt:P1431 wd:Q56005 .\nwd:Q1195568 wdt:P57 wd:Q56005 .\nwd:Q1195568 wdt:P1431 wd:Q56005 .\nwd:Q60747802 wdt:P57 wd:Q56005 .\nwd:Q60747802 wdt:P1431 wd:Q56005 .\nwd:Q128518 wdt:P57 wd:Q56005 .\nwd:Q128518 wdt:P1431 wd:Q56005\n}",
        "questionWithBrackets": "Were [Kingdom of Heaven] , [Someone to Watch Over Me] , [Gladiator] , and [Raised by Wolves] directed and executive produced by [Ridley Scott]"
    },
    {
        "questionIdx": 113606,
        "questionPatternModEntities": "Were M0 , M2 , and M3 directed by and produced by M1",
        "questionTemplate": "Were [entity] , [entity] , and [entity] [VP_SIMPLE] by and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1 .\nM2 P0 M1 .\nM2 P1 M1 .\nM3 P0 M1 .\nM3 P1 M1\n}",
        "recursionDepth": 27,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q61633664 wdt:P57 wd:Q2593 .\nwd:Q61633664 wdt:P162|wdt:P272 wd:Q2593 .\nwd:Q2201 wdt:P57 wd:Q2593 .\nwd:Q2201 wdt:P162|wdt:P272 wd:Q2593 .\nwd:Q244398 wdt:P57 wd:Q2593 .\nwd:Q244398 wdt:P162|wdt:P272 wd:Q2593\n}",
        "questionWithBrackets": "Were [Stardust] , [The King's Man] , and [Kick-Ass] directed by and produced by [Matthew Vaughn]"
    },
    {
        "questionIdx": 113625,
        "questionPatternModEntities": "Were M0 , M3 , and M4 produced and written by M1 and M2",
        "questionTemplate": "Were [entity] , [entity] , and [entity] [VP_SIMPLE] and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P1 M1 .\nM0 P1 M2 .\nM3 P0 M1 .\nM3 P0 M2 .\nM3 P1 M1 .\nM3 P1 M2 .\nM4 P0 M1 .\nM4 P0 M2 .\nM4 P1 M1 .\nM4 P1 M2\n}",
        "recursionDepth": 30,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q127367 wdt:P162|wdt:P272 wd:Q4465 .\nwd:Q127367 wdt:P162|wdt:P272 wd:Q116861 .\nwd:Q127367 wdt:P58 wd:Q4465 .\nwd:Q127367 wdt:P58 wd:Q116861 .\nwd:Q164963 wdt:P162|wdt:P272 wd:Q4465 .\nwd:Q164963 wdt:P162|wdt:P272 wd:Q116861 .\nwd:Q164963 wdt:P58 wd:Q4465 .\nwd:Q164963 wdt:P58 wd:Q116861 .\nwd:Q1332274 wdt:P162|wdt:P272 wd:Q4465 .\nwd:Q1332274 wdt:P162|wdt:P272 wd:Q116861 .\nwd:Q1332274 wdt:P58 wd:Q4465 .\nwd:Q1332274 wdt:P58 wd:Q116861\n}",
        "questionWithBrackets": "Were [The Lord of the Rings: The Two Towers] , [The Frighteners] , and [The Lord of the Rings: The Fellowship of the Ring] produced and written by [Fran Walsh] and [Peter Jackson]"
    },
    {
        "questionIdx": 113629,
        "questionPatternModEntities": "Were M0 , M2 , and M3 written , edited , and produced by M1",
        "questionTemplate": "Were [entity] , [entity] , and [entity] [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1 .\nM0 P2 M1 .\nM2 P0 M1 .\nM2 P1 M1 .\nM2 P2 M1 .\nM3 P0 M1 .\nM3 P1 M1 .\nM3 P2 M1\n}",
        "recursionDepth": 31,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q214723 wdt:P1040 wd:Q882 .\nwd:Q214723 wdt:P162|wdt:P272 wd:Q882 .\nwd:Q214723 wdt:P58 wd:Q882 .\nwd:Q238211 wdt:P1040 wd:Q882 .\nwd:Q238211 wdt:P162|wdt:P272 wd:Q882 .\nwd:Q238211 wdt:P58 wd:Q882 .\nwd:Q45602 wdt:P1040 wd:Q882 .\nwd:Q45602 wdt:P162|wdt:P272 wd:Q882 .\nwd:Q45602 wdt:P58 wd:Q882\n}",
        "questionWithBrackets": "Were [The Gold Rush] , [Modern Times] , and [City Lights] written , edited , and produced by [Charlie Chaplin]"
    },
    {
        "questionIdx": 113652,
        "questionPatternModEntities": "Were M0 and M2 edited by and executive produced by M1",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1 .\nM2 P0 M1 .\nM2 P1 M1\n}",
        "recursionDepth": 25,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q181803 wdt:P1040 wd:Q38222 .\nwd:Q181803 wdt:P1431 wd:Q38222 .\nwd:Q17738 wdt:P1040 wd:Q38222 .\nwd:Q17738 wdt:P1431 wd:Q38222\n}",
        "questionWithBrackets": "Were [Star Wars: Episode IV \u2013 A New Hope] and [Star Wars: Episode VI \u2013 Return of the Jedi] edited by and executive produced by [George Lucas]"
    },
    {
        "questionIdx": 113894,
        "questionPatternModEntities": "Were M0 , M2 , and M3 written by , directed by , produced by , executive produced by , and edited by M1",
        "questionTemplate": "Were [entity] , [entity] , and [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1 .\nM0 P2 M1 .\nM0 P3 M1 .\nM0 P4 M1 .\nM2 P0 M1 .\nM2 P1 M1 .\nM2 P2 M1 .\nM2 P3 M1 .\nM2 P4 M1 .\nM3 P0 M1 .\nM3 P1 M1 .\nM3 P2 M1 .\nM3 P3 M1 .\nM3 P4 M1\n}",
        "recursionDepth": 46,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q5437360 wdt:P57 wd:Q187261 .\nwd:Q5437360 wdt:P1040 wd:Q187261 .\nwd:Q5437360 wdt:P1431 wd:Q187261 .\nwd:Q5437360 wdt:P162|wdt:P272 wd:Q187261 .\nwd:Q5437360 wdt:P58 wd:Q187261 .\nwd:Q6084069 wdt:P57 wd:Q187261 .\nwd:Q6084069 wdt:P1040 wd:Q187261 .\nwd:Q6084069 wdt:P1431 wd:Q187261 .\nwd:Q6084069 wdt:P162|wdt:P272 wd:Q187261 .\nwd:Q6084069 wdt:P58 wd:Q187261 .\nwd:Q12813010 wdt:P57 wd:Q187261 .\nwd:Q12813010 wdt:P1040 wd:Q187261 .\nwd:Q12813010 wdt:P1431 wd:Q187261 .\nwd:Q12813010 wdt:P162|wdt:P272 wd:Q187261 .\nwd:Q12813010 wdt:P58 wd:Q187261\n}",
        "questionWithBrackets": "Were [Fate] , [The Confession] , and [The Waiting Room] written by , directed by , produced by , executive produced by , and edited by [Zeki Demirkubuz]"
    },
    {
        "questionIdx": 113899,
        "questionPatternModEntities": "Were M0 , M2 , and M3 executive produced , edited , and directed by M1",
        "questionTemplate": "Were [entity] , [entity] , and [entity] [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1 .\nM0 P2 M1 .\nM2 P0 M1 .\nM2 P1 M1 .\nM2 P2 M1 .\nM3 P0 M1 .\nM3 P1 M1 .\nM3 P2 M1\n}",
        "recursionDepth": 32,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q5437360 wdt:P57 wd:Q187261 .\nwd:Q5437360 wdt:P1040 wd:Q187261 .\nwd:Q5437360 wdt:P1431 wd:Q187261 .\nwd:Q6084069 wdt:P57 wd:Q187261 .\nwd:Q6084069 wdt:P1040 wd:Q187261 .\nwd:Q6084069 wdt:P1431 wd:Q187261 .\nwd:Q12813010 wdt:P57 wd:Q187261 .\nwd:Q12813010 wdt:P1040 wd:Q187261 .\nwd:Q12813010 wdt:P1431 wd:Q187261\n}",
        "questionWithBrackets": "Were [The Waiting Room] , [The Confession] , and [Fate] executive produced , edited , and directed by [Zeki Demirkubuz]"
    },
    {
        "questionIdx": 113901,
        "questionPatternModEntities": "Were M0 , M2 , and M3 produced by , edited by , executive produced by , written by , and directed by M1",
        "questionTemplate": "Were [entity] , [entity] , and [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1 .\nM0 P2 M1 .\nM0 P3 M1 .\nM0 P4 M1 .\nM2 P0 M1 .\nM2 P1 M1 .\nM2 P2 M1 .\nM2 P3 M1 .\nM2 P4 M1 .\nM3 P0 M1 .\nM3 P1 M1 .\nM3 P2 M1 .\nM3 P3 M1 .\nM3 P4 M1\n}",
        "recursionDepth": 46,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q5437360 wdt:P57 wd:Q187261 .\nwd:Q5437360 wdt:P1040 wd:Q187261 .\nwd:Q5437360 wdt:P1431 wd:Q187261 .\nwd:Q5437360 wdt:P162|wdt:P272 wd:Q187261 .\nwd:Q5437360 wdt:P58 wd:Q187261 .\nwd:Q6084069 wdt:P57 wd:Q187261 .\nwd:Q6084069 wdt:P1040 wd:Q187261 .\nwd:Q6084069 wdt:P1431 wd:Q187261 .\nwd:Q6084069 wdt:P162|wdt:P272 wd:Q187261 .\nwd:Q6084069 wdt:P58 wd:Q187261 .\nwd:Q12813010 wdt:P57 wd:Q187261 .\nwd:Q12813010 wdt:P1040 wd:Q187261 .\nwd:Q12813010 wdt:P1431 wd:Q187261 .\nwd:Q12813010 wdt:P162|wdt:P272 wd:Q187261 .\nwd:Q12813010 wdt:P58 wd:Q187261\n}",
        "questionWithBrackets": "Were [The Waiting Room] , [The Confession] , and [Fate] produced by , edited by , executive produced by , written by , and directed by [Zeki Demirkubuz]"
    },
    {
        "questionIdx": 113903,
        "questionPatternModEntities": "Were M0 , M2 , and M3 directed by , executive produced by , produced by , edited by , and written by M1",
        "questionTemplate": "Were [entity] , [entity] , and [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1 .\nM0 P2 M1 .\nM0 P3 M1 .\nM0 P4 M1 .\nM2 P0 M1 .\nM2 P1 M1 .\nM2 P2 M1 .\nM2 P3 M1 .\nM2 P4 M1 .\nM3 P0 M1 .\nM3 P1 M1 .\nM3 P2 M1 .\nM3 P3 M1 .\nM3 P4 M1\n}",
        "recursionDepth": 46,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q5437360 wdt:P57 wd:Q187261 .\nwd:Q5437360 wdt:P1040 wd:Q187261 .\nwd:Q5437360 wdt:P1431 wd:Q187261 .\nwd:Q5437360 wdt:P162|wdt:P272 wd:Q187261 .\nwd:Q5437360 wdt:P58 wd:Q187261 .\nwd:Q6084069 wdt:P57 wd:Q187261 .\nwd:Q6084069 wdt:P1040 wd:Q187261 .\nwd:Q6084069 wdt:P1431 wd:Q187261 .\nwd:Q6084069 wdt:P162|wdt:P272 wd:Q187261 .\nwd:Q6084069 wdt:P58 wd:Q187261 .\nwd:Q12813010 wdt:P57 wd:Q187261 .\nwd:Q12813010 wdt:P1040 wd:Q187261 .\nwd:Q12813010 wdt:P1431 wd:Q187261 .\nwd:Q12813010 wdt:P162|wdt:P272 wd:Q187261 .\nwd:Q12813010 wdt:P58 wd:Q187261\n}",
        "questionWithBrackets": "Were [Fate] , [The Confession] , and [The Waiting Room] directed by , executive produced by , produced by , edited by , and written by [Zeki Demirkubuz]"
    },
    {
        "questionIdx": 113905,
        "questionPatternModEntities": "Were M0 , M2 , and M3 executive produced by , directed by , edited by , written by , and produced by M1",
        "questionTemplate": "Were [entity] , [entity] , and [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1 .\nM0 P2 M1 .\nM0 P3 M1 .\nM0 P4 M1 .\nM2 P0 M1 .\nM2 P1 M1 .\nM2 P2 M1 .\nM2 P3 M1 .\nM2 P4 M1 .\nM3 P0 M1 .\nM3 P1 M1 .\nM3 P2 M1 .\nM3 P3 M1 .\nM3 P4 M1\n}",
        "recursionDepth": 46,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q5437360 wdt:P57 wd:Q187261 .\nwd:Q5437360 wdt:P1040 wd:Q187261 .\nwd:Q5437360 wdt:P1431 wd:Q187261 .\nwd:Q5437360 wdt:P162|wdt:P272 wd:Q187261 .\nwd:Q5437360 wdt:P58 wd:Q187261 .\nwd:Q6084069 wdt:P57 wd:Q187261 .\nwd:Q6084069 wdt:P1040 wd:Q187261 .\nwd:Q6084069 wdt:P1431 wd:Q187261 .\nwd:Q6084069 wdt:P162|wdt:P272 wd:Q187261 .\nwd:Q6084069 wdt:P58 wd:Q187261 .\nwd:Q12813010 wdt:P57 wd:Q187261 .\nwd:Q12813010 wdt:P1040 wd:Q187261 .\nwd:Q12813010 wdt:P1431 wd:Q187261 .\nwd:Q12813010 wdt:P162|wdt:P272 wd:Q187261 .\nwd:Q12813010 wdt:P58 wd:Q187261\n}",
        "questionWithBrackets": "Were [Fate] , [The Confession] , and [The Waiting Room] executive produced by , directed by , edited by , written by , and produced by [Zeki Demirkubuz]"
    },
    {
        "questionIdx": 113911,
        "questionPatternModEntities": "Were M0 , M2 , and M3 produced by , written by , edited by , directed by , and executive produced by M1",
        "questionTemplate": "Were [entity] , [entity] , and [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1 .\nM0 P2 M1 .\nM0 P3 M1 .\nM0 P4 M1 .\nM2 P0 M1 .\nM2 P1 M1 .\nM2 P2 M1 .\nM2 P3 M1 .\nM2 P4 M1 .\nM3 P0 M1 .\nM3 P1 M1 .\nM3 P2 M1 .\nM3 P3 M1 .\nM3 P4 M1\n}",
        "recursionDepth": 46,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q5437360 wdt:P57 wd:Q187261 .\nwd:Q5437360 wdt:P1040 wd:Q187261 .\nwd:Q5437360 wdt:P1431 wd:Q187261 .\nwd:Q5437360 wdt:P162|wdt:P272 wd:Q187261 .\nwd:Q5437360 wdt:P58 wd:Q187261 .\nwd:Q6084069 wdt:P57 wd:Q187261 .\nwd:Q6084069 wdt:P1040 wd:Q187261 .\nwd:Q6084069 wdt:P1431 wd:Q187261 .\nwd:Q6084069 wdt:P162|wdt:P272 wd:Q187261 .\nwd:Q6084069 wdt:P58 wd:Q187261 .\nwd:Q12813010 wdt:P57 wd:Q187261 .\nwd:Q12813010 wdt:P1040 wd:Q187261 .\nwd:Q12813010 wdt:P1431 wd:Q187261 .\nwd:Q12813010 wdt:P162|wdt:P272 wd:Q187261 .\nwd:Q12813010 wdt:P58 wd:Q187261\n}",
        "questionWithBrackets": "Were [Fate] , [The Confession] , and [The Waiting Room] produced by , written by , edited by , directed by , and executive produced by [Zeki Demirkubuz]"
    },
    {
        "questionIdx": 113975,
        "questionPatternModEntities": "Were M0 , M2 , and M3 edited and executive produced by M1",
        "questionTemplate": "Were [entity] , [entity] , and [entity] [VP_SIMPLE] and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1 .\nM2 P0 M1 .\nM2 P1 M1 .\nM3 P0 M1 .\nM3 P1 M1\n}",
        "recursionDepth": 27,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q483197 wdt:P1040 wd:Q212990 .\nwd:Q483197 wdt:P1431 wd:Q212990 .\nwd:Q13471372 wdt:P1040 wd:Q212990 .\nwd:Q13471372 wdt:P1431 wd:Q212990 .\nwd:Q16159554 wdt:P1040 wd:Q212990 .\nwd:Q16159554 wdt:P1431 wd:Q212990\n}",
        "questionWithBrackets": "Were [Moebius] , [Red Family] , and [Piet\u00e0] edited and executive produced by [Kim Ki-duk]"
    },
    {
        "questionIdx": 113981,
        "questionPatternModEntities": "Were M0 , M2 , and M3 executive produced by , directed by , produced by , edited by , and written by M1",
        "questionTemplate": "Were [entity] , [entity] , and [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1 .\nM0 P2 M1 .\nM0 P3 M1 .\nM0 P4 M1 .\nM2 P0 M1 .\nM2 P1 M1 .\nM2 P2 M1 .\nM2 P3 M1 .\nM2 P4 M1 .\nM3 P0 M1 .\nM3 P1 M1 .\nM3 P2 M1 .\nM3 P3 M1 .\nM3 P4 M1\n}",
        "recursionDepth": 46,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q484679 wdt:P57 wd:Q212990 .\nwd:Q484679 wdt:P1040 wd:Q212990 .\nwd:Q484679 wdt:P1431 wd:Q212990 .\nwd:Q484679 wdt:P162|wdt:P272 wd:Q212990 .\nwd:Q484679 wdt:P58 wd:Q212990 .\nwd:Q13471372 wdt:P57 wd:Q212990 .\nwd:Q13471372 wdt:P1040 wd:Q212990 .\nwd:Q13471372 wdt:P1431 wd:Q212990 .\nwd:Q13471372 wdt:P162|wdt:P272 wd:Q212990 .\nwd:Q13471372 wdt:P58 wd:Q212990 .\nwd:Q483197 wdt:P57 wd:Q212990 .\nwd:Q483197 wdt:P1040 wd:Q212990 .\nwd:Q483197 wdt:P1431 wd:Q212990 .\nwd:Q483197 wdt:P162|wdt:P272 wd:Q212990 .\nwd:Q483197 wdt:P58 wd:Q212990\n}",
        "questionWithBrackets": "Were [Moebius] , [Piet\u00e0] , and [Dream] executive produced by , directed by , produced by , edited by , and written by [Kim Ki-duk]"
    },
    {
        "questionIdx": 113990,
        "questionPatternModEntities": "Were M0 , M2 , and M3 edited by , executive produced by , directed by , produced by , and written by M1",
        "questionTemplate": "Were [entity] , [entity] , and [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1 .\nM0 P2 M1 .\nM0 P3 M1 .\nM0 P4 M1 .\nM2 P0 M1 .\nM2 P1 M1 .\nM2 P2 M1 .\nM2 P3 M1 .\nM2 P4 M1 .\nM3 P0 M1 .\nM3 P1 M1 .\nM3 P2 M1 .\nM3 P3 M1 .\nM3 P4 M1\n}",
        "recursionDepth": 46,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q5437360 wdt:P57 wd:Q187261 .\nwd:Q5437360 wdt:P1040 wd:Q187261 .\nwd:Q5437360 wdt:P1431 wd:Q187261 .\nwd:Q5437360 wdt:P162|wdt:P272 wd:Q187261 .\nwd:Q5437360 wdt:P58 wd:Q187261 .\nwd:Q6084069 wdt:P57 wd:Q187261 .\nwd:Q6084069 wdt:P1040 wd:Q187261 .\nwd:Q6084069 wdt:P1431 wd:Q187261 .\nwd:Q6084069 wdt:P162|wdt:P272 wd:Q187261 .\nwd:Q6084069 wdt:P58 wd:Q187261 .\nwd:Q12813010 wdt:P57 wd:Q187261 .\nwd:Q12813010 wdt:P1040 wd:Q187261 .\nwd:Q12813010 wdt:P1431 wd:Q187261 .\nwd:Q12813010 wdt:P162|wdt:P272 wd:Q187261 .\nwd:Q12813010 wdt:P58 wd:Q187261\n}",
        "questionWithBrackets": "Were [Fate] , [The Waiting Room] , and [The Confession] edited by , executive produced by , directed by , produced by , and written by [Zeki Demirkubuz]"
    },
    {
        "questionIdx": 113997,
        "questionPatternModEntities": "Were M0 , M2 , and M3 produced by , executive produced by , directed by , edited by , and written by M1",
        "questionTemplate": "Were [entity] , [entity] , and [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1 .\nM0 P2 M1 .\nM0 P3 M1 .\nM0 P4 M1 .\nM2 P0 M1 .\nM2 P1 M1 .\nM2 P2 M1 .\nM2 P3 M1 .\nM2 P4 M1 .\nM3 P0 M1 .\nM3 P1 M1 .\nM3 P2 M1 .\nM3 P3 M1 .\nM3 P4 M1\n}",
        "recursionDepth": 46,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q5437360 wdt:P57 wd:Q187261 .\nwd:Q5437360 wdt:P1040 wd:Q187261 .\nwd:Q5437360 wdt:P1431 wd:Q187261 .\nwd:Q5437360 wdt:P162|wdt:P272 wd:Q187261 .\nwd:Q5437360 wdt:P58 wd:Q187261 .\nwd:Q6084069 wdt:P57 wd:Q187261 .\nwd:Q6084069 wdt:P1040 wd:Q187261 .\nwd:Q6084069 wdt:P1431 wd:Q187261 .\nwd:Q6084069 wdt:P162|wdt:P272 wd:Q187261 .\nwd:Q6084069 wdt:P58 wd:Q187261 .\nwd:Q12813010 wdt:P57 wd:Q187261 .\nwd:Q12813010 wdt:P1040 wd:Q187261 .\nwd:Q12813010 wdt:P1431 wd:Q187261 .\nwd:Q12813010 wdt:P162|wdt:P272 wd:Q187261 .\nwd:Q12813010 wdt:P58 wd:Q187261\n}",
        "questionWithBrackets": "Were [Fate] , [The Waiting Room] , and [The Confession] produced by , executive produced by , directed by , edited by , and written by [Zeki Demirkubuz]"
    },
    {
        "questionIdx": 113998,
        "questionPatternModEntities": "Were M0 , M2 , and M3 written by , edited by , produced by , directed by , and executive produced by M1",
        "questionTemplate": "Were [entity] , [entity] , and [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1 .\nM0 P2 M1 .\nM0 P3 M1 .\nM0 P4 M1 .\nM2 P0 M1 .\nM2 P1 M1 .\nM2 P2 M1 .\nM2 P3 M1 .\nM2 P4 M1 .\nM3 P0 M1 .\nM3 P1 M1 .\nM3 P2 M1 .\nM3 P3 M1 .\nM3 P4 M1\n}",
        "recursionDepth": 46,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q483197 wdt:P57 wd:Q212990 .\nwd:Q483197 wdt:P1040 wd:Q212990 .\nwd:Q483197 wdt:P1431 wd:Q212990 .\nwd:Q483197 wdt:P162|wdt:P272 wd:Q212990 .\nwd:Q483197 wdt:P58 wd:Q212990 .\nwd:Q484679 wdt:P57 wd:Q212990 .\nwd:Q484679 wdt:P1040 wd:Q212990 .\nwd:Q484679 wdt:P1431 wd:Q212990 .\nwd:Q484679 wdt:P162|wdt:P272 wd:Q212990 .\nwd:Q484679 wdt:P58 wd:Q212990 .\nwd:Q13471372 wdt:P57 wd:Q212990 .\nwd:Q13471372 wdt:P1040 wd:Q212990 .\nwd:Q13471372 wdt:P1431 wd:Q212990 .\nwd:Q13471372 wdt:P162|wdt:P272 wd:Q212990 .\nwd:Q13471372 wdt:P58 wd:Q212990\n}",
        "questionWithBrackets": "Were [Piet\u00e0] , [Dream] , and [Moebius] written by , edited by , produced by , directed by , and executive produced by [Kim Ki-duk]"
    },
    {
        "questionIdx": 114030,
        "questionPatternModEntities": "Were M0 , M2 , and M3 edited by , produced by , written by , directed by , and executive produced by M1",
        "questionTemplate": "Were [entity] , [entity] , and [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1 .\nM0 P2 M1 .\nM0 P3 M1 .\nM0 P4 M1 .\nM2 P0 M1 .\nM2 P1 M1 .\nM2 P2 M1 .\nM2 P3 M1 .\nM2 P4 M1 .\nM3 P0 M1 .\nM3 P1 M1 .\nM3 P2 M1 .\nM3 P3 M1 .\nM3 P4 M1\n}",
        "recursionDepth": 46,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q5437360 wdt:P57 wd:Q187261 .\nwd:Q5437360 wdt:P1040 wd:Q187261 .\nwd:Q5437360 wdt:P1431 wd:Q187261 .\nwd:Q5437360 wdt:P162|wdt:P272 wd:Q187261 .\nwd:Q5437360 wdt:P58 wd:Q187261 .\nwd:Q6084069 wdt:P57 wd:Q187261 .\nwd:Q6084069 wdt:P1040 wd:Q187261 .\nwd:Q6084069 wdt:P1431 wd:Q187261 .\nwd:Q6084069 wdt:P162|wdt:P272 wd:Q187261 .\nwd:Q6084069 wdt:P58 wd:Q187261 .\nwd:Q12813010 wdt:P57 wd:Q187261 .\nwd:Q12813010 wdt:P1040 wd:Q187261 .\nwd:Q12813010 wdt:P1431 wd:Q187261 .\nwd:Q12813010 wdt:P162|wdt:P272 wd:Q187261 .\nwd:Q12813010 wdt:P58 wd:Q187261\n}",
        "questionWithBrackets": "Were [The Waiting Room] , [Fate] , and [The Confession] edited by , produced by , written by , directed by , and executive produced by [Zeki Demirkubuz]"
    },
    {
        "questionIdx": 114041,
        "questionPatternModEntities": "Were M0 , M2 , and M3 directed by , written by , executive produced by , produced by , and edited by M1",
        "questionTemplate": "Were [entity] , [entity] , and [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1 .\nM0 P2 M1 .\nM0 P3 M1 .\nM0 P4 M1 .\nM2 P0 M1 .\nM2 P1 M1 .\nM2 P2 M1 .\nM2 P3 M1 .\nM2 P4 M1 .\nM3 P0 M1 .\nM3 P1 M1 .\nM3 P2 M1 .\nM3 P3 M1 .\nM3 P4 M1\n}",
        "recursionDepth": 46,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q6084069 wdt:P57 wd:Q187261 .\nwd:Q6084069 wdt:P1040 wd:Q187261 .\nwd:Q6084069 wdt:P1431 wd:Q187261 .\nwd:Q6084069 wdt:P162|wdt:P272 wd:Q187261 .\nwd:Q6084069 wdt:P58 wd:Q187261 .\nwd:Q12813010 wdt:P57 wd:Q187261 .\nwd:Q12813010 wdt:P1040 wd:Q187261 .\nwd:Q12813010 wdt:P1431 wd:Q187261 .\nwd:Q12813010 wdt:P162|wdt:P272 wd:Q187261 .\nwd:Q12813010 wdt:P58 wd:Q187261 .\nwd:Q5437360 wdt:P57 wd:Q187261 .\nwd:Q5437360 wdt:P1040 wd:Q187261 .\nwd:Q5437360 wdt:P1431 wd:Q187261 .\nwd:Q5437360 wdt:P162|wdt:P272 wd:Q187261 .\nwd:Q5437360 wdt:P58 wd:Q187261\n}",
        "questionWithBrackets": "Were [The Confession] , [The Waiting Room] , and [Fate] directed by , written by , executive produced by , produced by , and edited by [Zeki Demirkubuz]"
    },
    {
        "questionIdx": 114045,
        "questionPatternModEntities": "Were M0 , M2 , and M3 written by , executive produced by , edited by , directed by , and produced by M1",
        "questionTemplate": "Were [entity] , [entity] , and [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1 .\nM0 P2 M1 .\nM0 P3 M1 .\nM0 P4 M1 .\nM2 P0 M1 .\nM2 P1 M1 .\nM2 P2 M1 .\nM2 P3 M1 .\nM2 P4 M1 .\nM3 P0 M1 .\nM3 P1 M1 .\nM3 P2 M1 .\nM3 P3 M1 .\nM3 P4 M1\n}",
        "recursionDepth": 46,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q5437360 wdt:P57 wd:Q187261 .\nwd:Q5437360 wdt:P1040 wd:Q187261 .\nwd:Q5437360 wdt:P1431 wd:Q187261 .\nwd:Q5437360 wdt:P162|wdt:P272 wd:Q187261 .\nwd:Q5437360 wdt:P58 wd:Q187261 .\nwd:Q6084069 wdt:P57 wd:Q187261 .\nwd:Q6084069 wdt:P1040 wd:Q187261 .\nwd:Q6084069 wdt:P1431 wd:Q187261 .\nwd:Q6084069 wdt:P162|wdt:P272 wd:Q187261 .\nwd:Q6084069 wdt:P58 wd:Q187261 .\nwd:Q12813010 wdt:P57 wd:Q187261 .\nwd:Q12813010 wdt:P1040 wd:Q187261 .\nwd:Q12813010 wdt:P1431 wd:Q187261 .\nwd:Q12813010 wdt:P162|wdt:P272 wd:Q187261 .\nwd:Q12813010 wdt:P58 wd:Q187261\n}",
        "questionWithBrackets": "Were [The Waiting Room] , [Fate] , and [The Confession] written by , executive produced by , edited by , directed by , and produced by [Zeki Demirkubuz]"
    },
    {
        "questionIdx": 114071,
        "questionPatternModEntities": "Were M0 , M2 , M3 , and M4 produced , written , and executive produced by M1",
        "questionTemplate": "Were [entity] , [entity] , [entity] , and [entity] [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1 .\nM0 P2 M1 .\nM2 P0 M1 .\nM2 P1 M1 .\nM2 P2 M1 .\nM3 P0 M1 .\nM3 P1 M1 .\nM3 P2 M1 .\nM4 P0 M1 .\nM4 P1 M1 .\nM4 P2 M1\n}",
        "recursionDepth": 35,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q6075416 wdt:P1431 wd:Q187261 .\nwd:Q6075416 wdt:P162|wdt:P272 wd:Q187261 .\nwd:Q6075416 wdt:P58 wd:Q187261 .\nwd:Q6785706 wdt:P1431 wd:Q187261 .\nwd:Q6785706 wdt:P162|wdt:P272 wd:Q187261 .\nwd:Q6785706 wdt:P58 wd:Q187261 .\nwd:Q12813010 wdt:P1431 wd:Q187261 .\nwd:Q12813010 wdt:P162|wdt:P272 wd:Q187261 .\nwd:Q12813010 wdt:P58 wd:Q187261 .\nwd:Q5437360 wdt:P1431 wd:Q187261 .\nwd:Q5437360 wdt:P162|wdt:P272 wd:Q187261 .\nwd:Q5437360 wdt:P58 wd:Q187261\n}",
        "questionWithBrackets": "Were [Innocence] , [Fate] , [The Confession] , and [C Blok] produced , written , and executive produced by [Zeki Demirkubuz]"
    },
    {
        "questionIdx": 114086,
        "questionPatternModEntities": "Were M0 , M2 , and M3 written by , directed by , produced by , edited by , and executive produced by M1",
        "questionTemplate": "Were [entity] , [entity] , and [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1 .\nM0 P2 M1 .\nM0 P3 M1 .\nM0 P4 M1 .\nM2 P0 M1 .\nM2 P1 M1 .\nM2 P2 M1 .\nM2 P3 M1 .\nM2 P4 M1 .\nM3 P0 M1 .\nM3 P1 M1 .\nM3 P2 M1 .\nM3 P3 M1 .\nM3 P4 M1\n}",
        "recursionDepth": 46,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q483197 wdt:P57 wd:Q212990 .\nwd:Q483197 wdt:P1040 wd:Q212990 .\nwd:Q483197 wdt:P1431 wd:Q212990 .\nwd:Q483197 wdt:P162|wdt:P272 wd:Q212990 .\nwd:Q483197 wdt:P58 wd:Q212990 .\nwd:Q484679 wdt:P57 wd:Q212990 .\nwd:Q484679 wdt:P1040 wd:Q212990 .\nwd:Q484679 wdt:P1431 wd:Q212990 .\nwd:Q484679 wdt:P162|wdt:P272 wd:Q212990 .\nwd:Q484679 wdt:P58 wd:Q212990 .\nwd:Q13471372 wdt:P57 wd:Q212990 .\nwd:Q13471372 wdt:P1040 wd:Q212990 .\nwd:Q13471372 wdt:P1431 wd:Q212990 .\nwd:Q13471372 wdt:P162|wdt:P272 wd:Q212990 .\nwd:Q13471372 wdt:P58 wd:Q212990\n}",
        "questionWithBrackets": "Were [Piet\u00e0] , [Dream] , and [Moebius] written by , directed by , produced by , edited by , and executive produced by [Kim Ki-duk]"
    },
    {
        "questionIdx": 114104,
        "questionPatternModEntities": "Were M0 , M2 , and M3 written by , executive produced by , edited by , produced by , and directed by M1",
        "questionTemplate": "Were [entity] , [entity] , and [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1 .\nM0 P2 M1 .\nM0 P3 M1 .\nM0 P4 M1 .\nM2 P0 M1 .\nM2 P1 M1 .\nM2 P2 M1 .\nM2 P3 M1 .\nM2 P4 M1 .\nM3 P0 M1 .\nM3 P1 M1 .\nM3 P2 M1 .\nM3 P3 M1 .\nM3 P4 M1\n}",
        "recursionDepth": 46,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q5437360 wdt:P57 wd:Q187261 .\nwd:Q5437360 wdt:P1040 wd:Q187261 .\nwd:Q5437360 wdt:P1431 wd:Q187261 .\nwd:Q5437360 wdt:P162|wdt:P272 wd:Q187261 .\nwd:Q5437360 wdt:P58 wd:Q187261 .\nwd:Q6084069 wdt:P57 wd:Q187261 .\nwd:Q6084069 wdt:P1040 wd:Q187261 .\nwd:Q6084069 wdt:P1431 wd:Q187261 .\nwd:Q6084069 wdt:P162|wdt:P272 wd:Q187261 .\nwd:Q6084069 wdt:P58 wd:Q187261 .\nwd:Q12813010 wdt:P57 wd:Q187261 .\nwd:Q12813010 wdt:P1040 wd:Q187261 .\nwd:Q12813010 wdt:P1431 wd:Q187261 .\nwd:Q12813010 wdt:P162|wdt:P272 wd:Q187261 .\nwd:Q12813010 wdt:P58 wd:Q187261\n}",
        "questionWithBrackets": "Were [Fate] , [The Confession] , and [The Waiting Room] written by , executive produced by , edited by , produced by , and directed by [Zeki Demirkubuz]"
    },
    {
        "questionIdx": 114137,
        "questionPatternModEntities": "Were M1 and M5 influenced by M2 , M3 , and M4 and influenced by M0 's parent 's parent",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by [entity] , [entity] , and [entity] and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x1 P0 M0 .\nM1 P1 ?x0 .\nM1 P1 M2 .\nM1 P1 M3 .\nM1 P1 M4 .\nM5 P1 ?x0 .\nM5 P1 M2 .\nM5 P1 M3 .\nM5 P1 M4\n}",
        "recursionDepth": 42,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 ?x1 .\n?x1 wdt:P40|wdt:P355 wd:Q15339037 .\nwd:Q7243 wdt:P737 ?x0 .\nwd:Q7243 wdt:P737 wd:Q43718 .\nwd:Q7243 wdt:P737 wd:Q5686 .\nwd:Q7243 wdt:P737 wd:Q535 .\nwd:Q991 wdt:P737 ?x0 .\nwd:Q991 wdt:P737 wd:Q43718 .\nwd:Q991 wdt:P737 wd:Q5686 .\nwd:Q991 wdt:P737 wd:Q535\n}",
        "questionWithBrackets": "Were [Leo Tolstoy] and [Fyodor Dostoyevsky] influenced by [Nikolai Gogol] , [Charles Dickens] , and [Victor Hugo] and influenced by [Georges-Victor Hugo] 's parent 's parent"
    },
    {
        "questionIdx": 114187,
        "questionPatternModEntities": "Were M2 and M3 written , executive produced , and directed by a female spouse of M1",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M1 ) .\nM2 P2 ?x0 .\nM2 P3 ?x0 .\nM2 P4 ?x0 .\nM3 P2 ?x0 .\nM3 P3 ?x0 .\nM3 P4 ?x0\n}",
        "recursionDepth": 40,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P21 wd:Q6581072 .\n?x0 wdt:P26 wd:Q57737617 .\nFILTER ( ?x0 != wd:Q57737617 ) .\nwd:Q60229340 wdt:P57 ?x0 .\nwd:Q60229340 wdt:P1431 ?x0 .\nwd:Q60229340 wdt:P58 ?x0 .\nwd:Q60489887 wdt:P57 ?x0 .\nwd:Q60489887 wdt:P1431 ?x0 .\nwd:Q60489887 wdt:P58 ?x0\n}",
        "questionWithBrackets": "Were [Cherry Malicious] and [Breathless Betrayal] written , executive produced , and directed by a female spouse of [Antonio Valentini]"
    },
    {
        "questionIdx": 114188,
        "questionPatternModEntities": "Were M2 and M5 written by M0 's female sibling , executive produced by M3 , and edited by M4",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M0 ) .\nM2 P2 M3 .\nM2 P3 ?x0 .\nM2 P4 M4 .\nM5 P2 M3 .\nM5 P3 ?x0 .\nM5 P4 M4\n}",
        "recursionDepth": 46,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P21 wd:Q6581072 .\n?x0 wdt:P3373 wd:Q155299 .\nFILTER ( ?x0 != wd:Q155299 ) .\nwd:Q829695 wdt:P1040 wd:Q3473349 .\nwd:Q829695 wdt:P1431 wd:Q56094 .\nwd:Q829695 wdt:P58 ?x0 .\nwd:Q1338368 wdt:P1040 wd:Q3473349 .\nwd:Q1338368 wdt:P1431 wd:Q56094 .\nwd:Q1338368 wdt:P58 ?x0\n}",
        "questionWithBrackets": "Were [Somewhere] and [Marie Antoinette] written by [Gian-Carlo Coppola] 's female sibling , executive produced by [Francis Ford Coppola] , and edited by [Sarah Flack]"
    },
    {
        "questionIdx": 114199,
        "questionPatternModEntities": "Were M1 , M2 , and M3 written and executive produced by M0 's sibling",
        "questionTemplate": "Were [entity] , [entity] , and [entity] [VP_SIMPLE] and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nM1 P1 ?x0 .\nM1 P2 ?x0 .\nM2 P1 ?x0 .\nM2 P2 ?x0 .\nM3 P1 ?x0 .\nM3 P2 ?x0\n}",
        "recursionDepth": 31,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P3373 wd:Q2390812 .\nFILTER ( ?x0 != wd:Q2390812 ) .\nwd:Q184605 wdt:P1431 ?x0 .\nwd:Q184605 wdt:P58 ?x0 .\nwd:Q24075 wdt:P1431 ?x0 .\nwd:Q24075 wdt:P58 ?x0 .\nwd:Q105387 wdt:P1431 ?x0 .\nwd:Q105387 wdt:P58 ?x0\n}",
        "questionWithBrackets": "Were [Godzilla] , [Independence Day] , and [2012] written and executive produced by [Ute Emmerich] 's sibling"
    },
    {
        "questionIdx": 114237,
        "questionPatternModEntities": "Were M0 and M3 influenced by M1 and influenced by M2",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by [entity] and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM3 P0 M1 .\nM3 P0 M2\n}",
        "recursionDepth": 27,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q9047 wdt:P737 wd:Q868 .\nwd:Q9047 wdt:P737 wd:Q35802 .\nwd:Q448 wdt:P737 wd:Q868 .\nwd:Q448 wdt:P737 wd:Q35802\n}",
        "questionWithBrackets": "Were [Denis Diderot] and [Gottfried Wilhelm Leibniz] influenced by [Aristotle] and influenced by [Benedictus de Spinoza]"
    },
    {
        "questionIdx": 114244,
        "questionPatternModEntities": "Were M4 and M6 founded by M5 and founded by a employee of M0 , M1 , M2 , and M3",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by [entity] and [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity] , [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P0 M3 .\nM4 P1 ?x0 .\nM4 P1 M5 .\nM6 P1 ?x0 .\nM6 P1 M5\n}",
        "recursionDepth": 43,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P108 wd:Q273461 .\n?x0 wdt:P108 wd:Q83259 .\n?x0 wdt:P108 wd:Q157575 .\n?x0 wdt:P108 wd:Q3551621 .\nwd:Q655810 wdt:P112 ?x0 .\nwd:Q655810 wdt:P112 wd:Q529 .\nwd:Q391083 wdt:P112 ?x0 .\nwd:Q391083 wdt:P112 wd:Q529\n}",
        "questionWithBrackets": "Were [Alliance fran\u00e7aise] and [Pasteur Institute] founded by [Louis Pasteur] and founded by a employee of [University of Lille] , [\u00c9cole normale sup\u00e9rieure] , [University of Strasbourg] , and [\u00c9cole Centrale de Lille]"
    },
    {
        "questionIdx": 114245,
        "questionPatternModEntities": "Were M2 and M4 founded by a female employee of M0 and founded by M3",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nM2 P2 ?x0 .\nM2 P2 M3 .\nM4 P2 ?x0 .\nM4 P2 M3\n}",
        "recursionDepth": 38,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P108 wd:Q847743 .\n?x0 wdt:P21 wd:Q6581072 .\nwd:Q7848344 wdt:P112 ?x0 .\nwd:Q7848344 wdt:P112 wd:Q1744 .\nwd:Q63546531 wdt:P112 ?x0 .\nwd:Q63546531 wdt:P112 wd:Q1744\n}",
        "questionWithBrackets": "Were [Truth or Dare by Madonna] and [Emmy & The Emmys] founded by a female employee of [Dunkin'] and founded by [Madonna]"
    },
    {
        "questionIdx": 114307,
        "questionPatternModEntities": "Were M0 , M3 , and M4 produced and edited by M1 and M2",
        "questionTemplate": "Were [entity] , [entity] , and [entity] [VP_SIMPLE] and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P1 M1 .\nM0 P1 M2 .\nM3 P0 M1 .\nM3 P0 M2 .\nM3 P1 M1 .\nM3 P1 M2 .\nM4 P0 M1 .\nM4 P0 M2 .\nM4 P1 M1 .\nM4 P1 M2\n}",
        "recursionDepth": 30,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q501874 wdt:P1040 wd:Q13595311 .\nwd:Q501874 wdt:P1040 wd:Q13595531 .\nwd:Q501874 wdt:P162|wdt:P272 wd:Q13595311 .\nwd:Q501874 wdt:P162|wdt:P272 wd:Q13595531 .\nwd:Q237215 wdt:P1040 wd:Q13595311 .\nwd:Q237215 wdt:P1040 wd:Q13595531 .\nwd:Q237215 wdt:P162|wdt:P272 wd:Q13595311 .\nwd:Q237215 wdt:P162|wdt:P272 wd:Q13595531 .\nwd:Q300555 wdt:P1040 wd:Q13595311 .\nwd:Q300555 wdt:P1040 wd:Q13595531 .\nwd:Q300555 wdt:P162|wdt:P272 wd:Q13595311 .\nwd:Q300555 wdt:P162|wdt:P272 wd:Q13595531\n}",
        "questionWithBrackets": "Were [A Serious Man] , [O Brother, Where Art Thou?] , and [Barton Fink] produced and edited by [Ethan Coen] and [Joel Coen]"
    },
    {
        "questionIdx": 114367,
        "questionPatternModEntities": "Were M0 and M5 edited by M2 , edited by M3 , executive produced by M1 , and edited by M4",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M2 .\nM0 P1 M3 .\nM0 P1 M4 .\nM5 P0 M1 .\nM5 P1 M2 .\nM5 P1 M3 .\nM5 P1 M4\n}",
        "recursionDepth": 46,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q110397 wdt:P1040 wd:Q513356 .\nwd:Q110397 wdt:P1040 wd:Q42574 .\nwd:Q110397 wdt:P1040 wd:Q1126713 .\nwd:Q110397 wdt:P1431 wd:Q17415497 .\nwd:Q44578 wdt:P1040 wd:Q513356 .\nwd:Q44578 wdt:P1040 wd:Q42574 .\nwd:Q44578 wdt:P1040 wd:Q1126713 .\nwd:Q44578 wdt:P1431 wd:Q17415497\n}",
        "questionWithBrackets": "Were [True Lies] and [Titanic] edited by [James Cameron] , edited by [Conrad Buff IV] , executive produced by [Rae Sanchini] , and edited by [Richard A. Harris]"
    },
    {
        "questionIdx": 114379,
        "questionPatternModEntities": "Were M1 and M5 produced by M2 , executive produced by M0 's spouse , and directed by M3 and M4",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] , and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nM1 P1 ?x0 .\nM1 P2 M2 .\nM1 P3 M3 .\nM1 P3 M4 .\nM5 P1 ?x0 .\nM5 P2 M2 .\nM5 P3 M3 .\nM5 P3 M4\n}",
        "recursionDepth": 45,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P26 wd:Q38842 .\nFILTER ( ?x0 != wd:Q38842 ) .\nwd:Q6434144 wdt:P57 wd:Q742757 .\nwd:Q6434144 wdt:P57 wd:Q23261 .\nwd:Q6434144 wdt:P1431 ?x0 .\nwd:Q6434144 wdt:P162|wdt:P272 wd:Q1203676 .\nwd:Q182206 wdt:P57 wd:Q742757 .\nwd:Q182206 wdt:P57 wd:Q23261 .\nwd:Q182206 wdt:P1431 ?x0 .\nwd:Q182206 wdt:P162|wdt:P272 wd:Q1203676\n}",
        "questionWithBrackets": "Were [Evangelion: 3.0+1.0 Thrice Upon a Time] and [Evangelion: 3.0 You Can (Not) Redo] produced by [Khara] , executive produced by [Moyoco Anno] 's spouse , and directed by [Hideaki Anno] and [Kazuya Tsurumaki]"
    },
    {
        "questionIdx": 114380,
        "questionPatternModEntities": "Were M1 and M2 edited and produced by M0 's spouse",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nM1 P1 ?x0 .\nM1 P2 ?x0 .\nM2 P1 ?x0 .\nM2 P2 ?x0\n}",
        "recursionDepth": 27,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P26 wd:Q3032150 .\nFILTER ( ?x0 != wd:Q3032150 ) .\nwd:Q854990 wdt:P1040 ?x0 .\nwd:Q854990 wdt:P162|wdt:P272 ?x0 .\nwd:Q39946 wdt:P1040 ?x0 .\nwd:Q39946 wdt:P162|wdt:P272 ?x0\n}",
        "questionWithBrackets": "Were [The Hidden Fortress] and [Kagemusha] edited and produced by [Y\u014dko Yaguchi] 's spouse"
    },
    {
        "questionIdx": 114381,
        "questionPatternModEntities": "Were M0 and M3 edited and produced by M1 and M2",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P1 M1 .\nM0 P1 M2 .\nM3 P0 M1 .\nM3 P0 M2 .\nM3 P1 M1 .\nM3 P1 M2\n}",
        "recursionDepth": 27,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q20729238 wdt:P1040 wd:Q562108 .\nwd:Q20729238 wdt:P1040 wd:Q35979475 .\nwd:Q20729238 wdt:P162|wdt:P272 wd:Q562108 .\nwd:Q20729238 wdt:P162|wdt:P272 wd:Q35979475 .\nwd:Q20729551 wdt:P1040 wd:Q562108 .\nwd:Q20729551 wdt:P1040 wd:Q35979475 .\nwd:Q20729551 wdt:P162|wdt:P272 wd:Q562108 .\nwd:Q20729551 wdt:P162|wdt:P272 wd:Q35979475\n}",
        "questionWithBrackets": "Were [Motion picture] and [Stop for Bud] edited and produced by [Ole John] and [J\u00f8rgen Leth]"
    },
    {
        "questionIdx": 114382,
        "questionPatternModEntities": "Were M1 and M2 edited and produced by a spouse of M0",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] and [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nM1 P1 ?x0 .\nM1 P2 ?x0 .\nM2 P1 ?x0 .\nM2 P2 ?x0\n}",
        "recursionDepth": 29,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P26 wd:Q3032150 .\nFILTER ( ?x0 != wd:Q3032150 ) .\nwd:Q854990 wdt:P1040 ?x0 .\nwd:Q854990 wdt:P162|wdt:P272 ?x0 .\nwd:Q39946 wdt:P1040 ?x0 .\nwd:Q39946 wdt:P162|wdt:P272 ?x0\n}",
        "questionWithBrackets": "Were [Kagemusha] and [The Hidden Fortress] edited and produced by a spouse of [Y\u014dko Yaguchi]"
    },
    {
        "questionIdx": 114395,
        "questionPatternModEntities": "Were M0 , M2 , M3 , and M4 edited , directed , and produced by M1",
        "questionTemplate": "Were [entity] , [entity] , [entity] , and [entity] [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1 .\nM0 P2 M1 .\nM2 P0 M1 .\nM2 P1 M1 .\nM2 P2 M1 .\nM3 P0 M1 .\nM3 P1 M1 .\nM3 P2 M1 .\nM4 P0 M1 .\nM4 P1 M1 .\nM4 P2 M1\n}",
        "recursionDepth": 34,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q1923676 wdt:P57 wd:Q882 .\nwd:Q1923676 wdt:P1040 wd:Q882 .\nwd:Q1923676 wdt:P162|wdt:P272 wd:Q882 .\nwd:Q199039 wdt:P57 wd:Q882 .\nwd:Q199039 wdt:P1040 wd:Q882 .\nwd:Q199039 wdt:P162|wdt:P272 wd:Q882 .\nwd:Q45602 wdt:P57 wd:Q882 .\nwd:Q45602 wdt:P1040 wd:Q882 .\nwd:Q45602 wdt:P162|wdt:P272 wd:Q882 .\nwd:Q166739 wdt:P57 wd:Q882 .\nwd:Q166739 wdt:P1040 wd:Q882 .\nwd:Q166739 wdt:P162|wdt:P272 wd:Q882\n}",
        "questionWithBrackets": "Were [Pay Day] , [The Cure] , [The Floorwalker] , and [Modern Times] edited , directed , and produced by [Charlie Chaplin]"
    },
    {
        "questionIdx": 114401,
        "questionPatternModEntities": "Were M0 , M2 , and M3 edited , directed , and produced by M1",
        "questionTemplate": "Were [entity] , [entity] , and [entity] [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1 .\nM0 P2 M1 .\nM2 P0 M1 .\nM2 P1 M1 .\nM2 P2 M1 .\nM3 P0 M1 .\nM3 P1 M1 .\nM3 P2 M1\n}",
        "recursionDepth": 31,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q733819 wdt:P57 wd:Q882 .\nwd:Q733819 wdt:P1040 wd:Q882 .\nwd:Q733819 wdt:P162|wdt:P272 wd:Q882 .\nwd:Q374172 wdt:P57 wd:Q882 .\nwd:Q374172 wdt:P1040 wd:Q882 .\nwd:Q374172 wdt:P162|wdt:P272 wd:Q882 .\nwd:Q669929 wdt:P57 wd:Q882 .\nwd:Q669929 wdt:P1040 wd:Q882 .\nwd:Q669929 wdt:P162|wdt:P272 wd:Q882\n}",
        "questionWithBrackets": "Were [Easy Street] , [The Circus] , and [The Kid] edited , directed , and produced by [Charlie Chaplin]"
    },
    {
        "questionIdx": 114413,
        "questionPatternModEntities": "Were M0 , M3 , and M4 written , edited , and directed by M1 and M2",
        "questionTemplate": "Were [entity] , [entity] , and [entity] [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P1 M1 .\nM0 P1 M2 .\nM0 P2 M1 .\nM0 P2 M2 .\nM3 P0 M1 .\nM3 P0 M2 .\nM3 P1 M1 .\nM3 P1 M2 .\nM3 P2 M1 .\nM3 P2 M2 .\nM4 P0 M1 .\nM4 P0 M2 .\nM4 P1 M1 .\nM4 P1 M2 .\nM4 P2 M1 .\nM4 P2 M2\n}",
        "recursionDepth": 35,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q20757119 wdt:P57 wd:Q562108 .\nwd:Q20757119 wdt:P57 wd:Q35979475 .\nwd:Q20757119 wdt:P1040 wd:Q562108 .\nwd:Q20757119 wdt:P1040 wd:Q35979475 .\nwd:Q20757119 wdt:P58 wd:Q562108 .\nwd:Q20757119 wdt:P58 wd:Q35979475 .\nwd:Q20729238 wdt:P57 wd:Q562108 .\nwd:Q20729238 wdt:P57 wd:Q35979475 .\nwd:Q20729238 wdt:P1040 wd:Q562108 .\nwd:Q20729238 wdt:P1040 wd:Q35979475 .\nwd:Q20729238 wdt:P58 wd:Q562108 .\nwd:Q20729238 wdt:P58 wd:Q35979475 .\nwd:Q20729551 wdt:P57 wd:Q562108 .\nwd:Q20729551 wdt:P57 wd:Q35979475 .\nwd:Q20729551 wdt:P1040 wd:Q562108 .\nwd:Q20729551 wdt:P1040 wd:Q35979475 .\nwd:Q20729551 wdt:P58 wd:Q562108 .\nwd:Q20729551 wdt:P58 wd:Q35979475\n}",
        "questionWithBrackets": "Were [No label defined] , [Motion picture] , and [Stop for Bud] written , edited , and directed by [Ole John] and [J\u00f8rgen Leth]"
    },
    {
        "questionIdx": 114416,
        "questionPatternModEntities": "Were M0 , M3 , and M4 produced by and written by M1 and M2",
        "questionTemplate": "Were [entity] , [entity] , and [entity] [VP_SIMPLE] by and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P1 M1 .\nM0 P1 M2 .\nM3 P0 M1 .\nM3 P0 M2 .\nM3 P1 M1 .\nM3 P1 M2 .\nM4 P0 M1 .\nM4 P0 M2 .\nM4 P1 M1 .\nM4 P1 M2\n}",
        "recursionDepth": 31,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q160215 wdt:P162|wdt:P272 wd:Q4465 .\nwd:Q160215 wdt:P162|wdt:P272 wd:Q116861 .\nwd:Q160215 wdt:P58 wd:Q4465 .\nwd:Q160215 wdt:P58 wd:Q116861 .\nwd:Q1332274 wdt:P162|wdt:P272 wd:Q4465 .\nwd:Q1332274 wdt:P162|wdt:P272 wd:Q116861 .\nwd:Q1332274 wdt:P58 wd:Q4465 .\nwd:Q1332274 wdt:P58 wd:Q116861 .\nwd:Q131074 wdt:P162|wdt:P272 wd:Q4465 .\nwd:Q131074 wdt:P162|wdt:P272 wd:Q116861 .\nwd:Q131074 wdt:P58 wd:Q4465 .\nwd:Q131074 wdt:P58 wd:Q116861\n}",
        "questionWithBrackets": "Were [King Kong] , [The Frighteners] , and [The Lord of the Rings: The Return of the King] produced by and written by [Fran Walsh] and [Peter Jackson]"
    },
    {
        "questionIdx": 114427,
        "questionPatternModEntities": "Were M1 , M4 , and M5 written by M2 and M3 and directed by a spouse of M0 's employee",
        "questionTemplate": "Were [entity] , [entity] , and [entity] [VP_SIMPLE] by [entity] and [entity] and [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x1 P1 M0 .\nFILTER ( ?x0 != ?x1 ) .\nM1 P2 M2 .\nM1 P2 M3 .\nM1 P3 ?x0 .\nM4 P2 M2 .\nM4 P2 M3 .\nM4 P3 ?x0 .\nM5 P2 M2 .\nM5 P2 M3 .\nM5 P3 ?x0\n}",
        "recursionDepth": 44,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P26 ?x1 .\n?x1 wdt:P108 wd:Q153006 .\nFILTER ( ?x0 != ?x1 ) .\nwd:Q571066 wdt:P57 ?x0 .\nwd:Q571066 wdt:P58 wd:Q19504 .\nwd:Q571066 wdt:P58 wd:Q58866 .\nwd:Q3010847 wdt:P57 ?x0 .\nwd:Q3010847 wdt:P58 wd:Q19504 .\nwd:Q3010847 wdt:P58 wd:Q58866 .\nwd:Q570143 wdt:P57 ?x0 .\nwd:Q570143 wdt:P58 wd:Q19504 .\nwd:Q570143 wdt:P58 wd:Q58866\n}",
        "questionWithBrackets": "Were [Vier um die Frau] , [The Tiger of Eschnapur] , and [Spies] written by [Fritz Lang] and [Thea von Harbou] and directed by a spouse of [Freie Universit\u00e4t Berlin] 's employee"
    },
    {
        "questionIdx": 114478,
        "questionPatternModEntities": "Were M1 , M2 , M3 , M4 , M5 , and M6 written by M0 's parent",
        "questionTemplate": "Were [entity] , [entity] , [entity] , [entity] , [entity] , and [entity] [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 ?x0 .\nM2 P1 ?x0 .\nM3 P1 ?x0 .\nM4 P1 ?x0 .\nM5 P1 ?x0 .\nM6 P1 ?x0\n}",
        "recursionDepth": 32,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q48102246 .\nwd:Q1070484 wdt:P58 ?x0 .\nwd:Q199039 wdt:P58 ?x0 .\nwd:Q238211 wdt:P58 ?x0 .\nwd:Q109116 wdt:P58 ?x0 .\nwd:Q214723 wdt:P58 ?x0 .\nwd:Q268879 wdt:P58 ?x0\n}",
        "questionWithBrackets": "Were [Burlesque on Carmen] , [City Lights] , [Pay Day] , [A Dog's Life] , [The Great Dictator] , and [The Gold Rush] written by [Jane Chaplin] 's parent"
    },
    {
        "questionIdx": 114498,
        "questionPatternModEntities": "Were M0 , M2 , M3 , M4 , and M5 Swedish",
        "questionTemplate": "Were [entity] , [entity] , [entity] , [entity] , and [entity] [ADJECTIVE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM2 P0 M1 .\nM3 P0 M1 .\nM4 P0 M1 .\nM5 P0 M1\n}",
        "recursionDepth": 22,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q112709 wdt:P27 wd:Q34 .\nwd:Q700 wdt:P27 wd:Q34 .\nwd:Q1625 wdt:P27 wd:Q34 .\nwd:Q530 wdt:P27 wd:Q34 .\nwd:Q1933 wdt:P27 wd:Q34\n}",
        "questionWithBrackets": "Were [Anja P\u00e4rson] , [Swedish Chef] , [Sigfrid Edstr\u00f6m] , [Ingemar Stenmark] , and [Harald Andersson] Swedish"
    },
    {
        "questionIdx": 114513,
        "questionPatternModEntities": "Were M0 , M2 , and M3 edited by and executive produced by M1",
        "questionTemplate": "Were [entity] , [entity] , and [entity] [VP_SIMPLE] by and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1 .\nM2 P0 M1 .\nM2 P1 M1 .\nM3 P0 M1 .\nM3 P1 M1\n}",
        "recursionDepth": 28,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q483197 wdt:P1040 wd:Q212990 .\nwd:Q483197 wdt:P1431 wd:Q212990 .\nwd:Q484679 wdt:P1040 wd:Q212990 .\nwd:Q484679 wdt:P1431 wd:Q212990 .\nwd:Q13471372 wdt:P1040 wd:Q212990 .\nwd:Q13471372 wdt:P1431 wd:Q212990\n}",
        "questionWithBrackets": "Were [Moebius] , [Piet\u00e0] , and [Dream] edited by and executive produced by [Kim Ki-duk]"
    },
    {
        "questionIdx": 114527,
        "questionPatternModEntities": "Were M0 , M5 , M6 , and M7 directed by M4 , executive produced by M1 and M2 , and edited by M3",
        "questionTemplate": "Were [entity] , [entity] , [entity] , and [entity] [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] and [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P1 M3 .\nM0 P2 M4 .\nM5 P0 M1 .\nM5 P0 M2 .\nM5 P1 M3 .\nM5 P2 M4 .\nM6 P0 M1 .\nM6 P0 M2 .\nM6 P1 M3 .\nM6 P2 M4 .\nM7 P0 M1 .\nM7 P0 M2 .\nM7 P1 M3 .\nM7 P2 M4\n}",
        "recursionDepth": 47,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q54274 wdt:P57 wd:Q295463 .\nwd:Q54274 wdt:P1040 wd:Q1138711 .\nwd:Q54274 wdt:P1431 wd:Q24809564 .\nwd:Q54274 wdt:P1431 wd:Q24809566 .\nwd:Q548919 wdt:P57 wd:Q295463 .\nwd:Q548919 wdt:P1040 wd:Q1138711 .\nwd:Q548919 wdt:P1431 wd:Q24809564 .\nwd:Q548919 wdt:P1431 wd:Q24809566 .\nwd:Q161087 wdt:P57 wd:Q295463 .\nwd:Q161087 wdt:P1040 wd:Q1138711 .\nwd:Q161087 wdt:P1431 wd:Q24809564 .\nwd:Q161087 wdt:P1431 wd:Q24809566 .\nwd:Q46717 wdt:P57 wd:Q295463 .\nwd:Q46717 wdt:P1040 wd:Q1138711 .\nwd:Q46717 wdt:P1431 wd:Q24809564 .\nwd:Q46717 wdt:P1431 wd:Q24809566\n}",
        "questionWithBrackets": "Were [The Lone Ranger] , [Pirates of the Caribbean: Dead Man's Chest] , [Pirates of the Caribbean: At World's End] , and [Pirates of the Caribbean: The Curse of the Black Pearl] directed by [Gore Verbinski] , executive produced by [Chad Oman] and [Mike Stenson] , and edited by [Craig Wood]"
    },
    {
        "questionIdx": 114548,
        "questionPatternModEntities": "Were M1 , M2 , and M3 executive produced by M0 's employee",
        "questionTemplate": "Were [entity] , [entity] , and [entity] [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 ?x0 .\nM2 P1 ?x0 .\nM3 P1 ?x0\n}",
        "recursionDepth": 24,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P108 wd:Q182950 .\nwd:Q1045889 wdt:P1431 ?x0 .\nwd:Q29011 wdt:P1431 ?x0 .\nwd:Q51543 wdt:P1431 ?x0\n}",
        "questionWithBrackets": "Were [Howl's Moving Castle] , [The Cat Returns] , and [Only Yesterday] executive produced by [Studio Ghibli] 's employee"
    },
    {
        "questionIdx": 114551,
        "questionPatternModEntities": "Were M2 , M4 , and M5 directed by M3 and executive produced by M1 's American spouse 's spouse",
        "questionTemplate": "Were [entity] , [entity] , and [entity] [VP_SIMPLE] by [entity] and [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x1 P0 M1 .\n?x1 P1 M0 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x1 != M1 ) .\nM2 P2 ?x0 .\nM2 P3 M3 .\nM4 P2 ?x0 .\nM4 P3 M3 .\nM5 P2 ?x0 .\nM5 P3 M3\n}",
        "recursionDepth": 44,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P26 ?x1 .\n?x1 wdt:P27 wd:Q30 .\n?x1 wdt:P26 wd:Q8877 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x1 != wd:Q8877 ) .\nwd:Q327713 wdt:P57 wd:Q317567 .\nwd:Q327713 wdt:P1431 ?x0 .\nwd:Q51416 wdt:P57 wd:Q317567 .\nwd:Q51416 wdt:P1431 ?x0 .\nwd:Q156597 wdt:P57 wd:Q317567 .\nwd:Q156597 wdt:P1431 ?x0\n}",
        "questionWithBrackets": "Were [Men in Black] , [Men in Black 3] , and [Men in Black II] directed by [Barry Sonnenfeld] and executive produced by [Steven Spielberg] 's American spouse 's spouse"
    },
    {
        "questionIdx": 114581,
        "questionPatternModEntities": "Were M1 and M2 edited by M0 's parent",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 ?x0 .\nM2 P1 ?x0\n}",
        "recursionDepth": 20,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q120593 .\nwd:Q2291409 wdt:P1040 ?x0 .\nwd:Q45602 wdt:P1040 ?x0\n}",
        "questionWithBrackets": "Were [The Bank] and [Modern Times] edited by [Eugene Chaplin] 's parent"
    },
    {
        "questionIdx": 114597,
        "questionPatternModEntities": "Were M2 and M6 edited by M0 's Italian sibling , written by M3 and M4 , and written by M5",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] , [VP_SIMPLE] by [entity] and [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M0 ) .\nM2 P2 M3 .\nM2 P2 M4 .\nM2 P2 M5 .\nM2 P3 ?x0 .\nM6 P2 M3 .\nM6 P2 M4 .\nM6 P2 M5 .\nM6 P3 ?x0\n}",
        "recursionDepth": 49,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P27 wd:Q38 .\n?x0 wdt:P3373 wd:Q55469 .\nFILTER ( ?x0 != wd:Q55469 ) .\nwd:Q655230 wdt:P1040 ?x0 .\nwd:Q655230 wdt:P58 wd:Q545378 .\nwd:Q655230 wdt:P58 wd:Q1134748 .\nwd:Q655230 wdt:P58 wd:Q1357559 .\nwd:Q80617 wdt:P1040 ?x0 .\nwd:Q80617 wdt:P58 wd:Q545378 .\nwd:Q80617 wdt:P58 wd:Q1134748 .\nwd:Q80617 wdt:P58 wd:Q1357559\n}",
        "questionWithBrackets": "Were [My Friends] and [All My Friends Part 2] edited by [Marcello Mastroianni] 's Italian sibling , written by [Piero De Bernardi] and [Tullio Pinelli] , and written by [Leonardo Benvenuti]"
    },
    {
        "questionIdx": 114601,
        "questionPatternModEntities": "Were M1 , M2 , and M3 founded by M0 's employee",
        "questionTemplate": "Were [entity] , [entity] , and [entity] [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 ?x0 .\nM2 P1 ?x0 .\nM3 P1 ?x0\n}",
        "recursionDepth": 23,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P108 wd:Q935818 .\nwd:Q624011 wdt:P112 ?x0 .\nwd:Q367 wdt:P112 ?x0 .\nwd:Q52 wdt:P112 ?x0\n}",
        "questionWithBrackets": "Were [Arbitration Committee in English Wikipedia] , [Wikibooks] , and [Wikipedia] founded by [Bomis] 's employee"
    },
    {
        "questionIdx": 114644,
        "questionPatternModEntities": "Were M2 and M3 edited by , executive produced by , and written by a male spouse of M1",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M1 ) .\nM2 P2 ?x0 .\nM2 P3 ?x0 .\nM2 P4 ?x0 .\nM3 P2 ?x0 .\nM3 P3 ?x0 .\nM3 P4 ?x0\n}",
        "recursionDepth": 42,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P21 wd:Q6581097 .\n?x0 wdt:P26 wd:Q6813152 .\nFILTER ( ?x0 != wd:Q6813152 ) .\nwd:Q17738 wdt:P1040 ?x0 .\nwd:Q17738 wdt:P1431 ?x0 .\nwd:Q17738 wdt:P58 ?x0 .\nwd:Q181803 wdt:P1040 ?x0 .\nwd:Q181803 wdt:P1431 ?x0 .\nwd:Q181803 wdt:P58 ?x0\n}",
        "questionWithBrackets": "Were [Star Wars: Episode IV \u2013 A New Hope] and [Star Wars: Episode VI \u2013 Return of the Jedi] edited by , executive produced by , and written by a male spouse of [Mellody Hobson]"
    },
    {
        "questionIdx": 114653,
        "questionPatternModEntities": "Were M2 and M3 executive produced by M0 's female sibling",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M0 ) .\nM2 P2 ?x0 .\nM3 P2 ?x0\n}",
        "recursionDepth": 26,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P21 wd:Q6581072 .\n?x0 wdt:P3373 wd:Q925586 .\nFILTER ( ?x0 != wd:Q925586 ) .\nwd:Q1065013 wdt:P1431 ?x0 .\nwd:Q7734937 wdt:P1431 ?x0\n}",
        "questionWithBrackets": "Were [The Fosters] and [Feelin' So Good] executive produced by [Lynda Lopez] 's female sibling"
    },
    {
        "questionIdx": 114674,
        "questionPatternModEntities": "Were M1 , M4 , and M5 edited by M2 , directed by M0 's sibling 's spouse , and edited by M3",
        "questionTemplate": "Were [entity] , [entity] , and [entity] [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x1 P1 M0 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x1 != M0 ) .\nM1 P2 M2 .\nM1 P2 M3 .\nM1 P3 ?x0 .\nM4 P2 M2 .\nM4 P2 M3 .\nM4 P3 ?x0 .\nM5 P2 M2 .\nM5 P2 M3 .\nM5 P3 ?x0\n}",
        "recursionDepth": 47,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P26 ?x1 .\n?x1 wdt:P3373 wd:Q8192180 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x1 != wd:Q8192180 ) .\nwd:Q1125897 wdt:P57 ?x0 .\nwd:Q1125897 wdt:P1040 wd:Q26372 .\nwd:Q1125897 wdt:P1040 wd:Q11444385 .\nwd:Q537026 wdt:P57 ?x0 .\nwd:Q537026 wdt:P1040 wd:Q26372 .\nwd:Q537026 wdt:P1040 wd:Q11444385 .\nwd:Q1059416 wdt:P57 ?x0 .\nwd:Q1059416 wdt:P1040 wd:Q26372 .\nwd:Q1059416 wdt:P1040 wd:Q11444385\n}",
        "questionWithBrackets": "Were [Hana-bi] , [Beyond Outrage] , and [Outrage] edited by [Yoshinori \u014cta] , directed by [Hideshi Matsuda] 's sibling 's spouse , and edited by [Takeshi Kitano]"
    },
    {
        "questionIdx": 114688,
        "questionPatternModEntities": "Were M0 , M2 , M3 , M4 , M5 , M6 , M7 , and M8 British",
        "questionTemplate": "Were [entity] , [entity] , [entity] , [entity] , [entity] , [entity] , [entity] , and [entity] [ADJECTIVE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM2 P0 M1 .\nM3 P0 M1 .\nM4 P0 M1 .\nM5 P0 M1 .\nM6 P0 M1 .\nM7 P0 M1 .\nM8 P0 M1\n}",
        "recursionDepth": 31,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q10611 wdt:P27 wd:Q145 .\nwd:Q42 wdt:P27 wd:Q145 .\nwd:Q80 wdt:P27 wd:Q145 .\nwd:Q636 wdt:P27 wd:Q145 .\nwd:Q181 wdt:P27 wd:Q145 .\nwd:Q192 wdt:P27 wd:Q145 .\nwd:Q839 wdt:P27 wd:Q145 .\nwd:Q1325 wdt:P27 wd:Q145\n}",
        "questionWithBrackets": "Were [Friedrich Hayek] , [Jimmy Wales] , [David Cameron] , [Aidy Boothroyd] , [Kate Bush] , [Georgina Cassar] , [Douglas Adams] , and [Tim Berners-Lee] British"
    },
    {
        "questionIdx": 114707,
        "questionPatternModEntities": "Were M0 , M2 , and M3 edited and produced by M1",
        "questionTemplate": "Were [entity] , [entity] , and [entity] [VP_SIMPLE] and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1 .\nM2 P0 M1 .\nM2 P1 M1 .\nM3 P0 M1 .\nM3 P1 M1\n}",
        "recursionDepth": 26,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q45602 wdt:P1040 wd:Q882 .\nwd:Q45602 wdt:P162|wdt:P272 wd:Q882 .\nwd:Q199039 wdt:P1040 wd:Q882 .\nwd:Q199039 wdt:P162|wdt:P272 wd:Q882 .\nwd:Q166739 wdt:P1040 wd:Q882 .\nwd:Q166739 wdt:P162|wdt:P272 wd:Q882\n}",
        "questionWithBrackets": "Were [Modern Times] , [The Floorwalker] , and [Pay Day] edited and produced by [Charlie Chaplin]"
    },
    {
        "questionIdx": 114710,
        "questionPatternModEntities": "Were M2 and M4 directed by M3 and produced by a Spanish sibling of M0",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by [entity] and [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M0 ) .\nM2 P2 ?x0 .\nM2 P3 M3 .\nM4 P2 ?x0 .\nM4 P3 M3\n}",
        "recursionDepth": 38,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P27 wd:Q29 .\n?x0 wdt:P3373 wd:Q330014 .\nFILTER ( ?x0 != wd:Q330014 ) .\nwd:Q948105 wdt:P57 wd:Q1398481 .\nwd:Q948105 wdt:P162|wdt:P272 ?x0 .\nwd:Q36951270 wdt:P57 wd:Q1398481 .\nwd:Q36951270 wdt:P162|wdt:P272 ?x0\n}",
        "questionWithBrackets": "Were [Loving Pablo] and [Invisibles] directed by [Fernando Le\u00f3n de Aranoa] and produced by a Spanish sibling of [Carlos Bardem]"
    },
    {
        "questionIdx": 114730,
        "questionPatternModEntities": "Were M0 and M6 executive produced by M1 and M2 , executive produced by M3 and M4 , and edited by M5",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by [entity] and [entity] , [VP_SIMPLE] by [entity] and [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P0 M3 .\nM0 P0 M4 .\nM0 P1 M5 .\nM6 P0 M1 .\nM6 P0 M2 .\nM6 P0 M3 .\nM6 P0 M4 .\nM6 P1 M5\n}",
        "recursionDepth": 46,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q192724 wdt:P1040 wd:Q3013121 .\nwd:Q192724 wdt:P1431 wd:Q181900 .\nwd:Q192724 wdt:P1431 wd:Q5237056 .\nwd:Q192724 wdt:P1431 wd:Q23409539 .\nwd:Q192724 wdt:P1431 wd:Q295964 .\nwd:Q205028 wdt:P1040 wd:Q3013121 .\nwd:Q205028 wdt:P1431 wd:Q181900 .\nwd:Q205028 wdt:P1431 wd:Q5237056 .\nwd:Q205028 wdt:P1431 wd:Q23409539 .\nwd:Q205028 wdt:P1431 wd:Q295964\n}",
        "questionWithBrackets": "Were [Iron Man] and [Iron Man 2] executive produced by [Stan Lee] and [Jon Favreau] , executive produced by [Louis D'Esposito] and [David Maisel] , and edited by [Dan Lebental]"
    },
    {
        "questionIdx": 114757,
        "questionPatternModEntities": "Were M1 , M3 , M4 , M5 , and M6 influenced by M2 and influenced by M0 's sibling",
        "questionTemplate": "Were [entity] , [entity] , [entity] , [entity] , and [entity] [VP_SIMPLE] by [entity] and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nM1 P1 ?x0 .\nM1 P1 M2 .\nM3 P1 ?x0 .\nM3 P1 M2 .\nM4 P1 ?x0 .\nM4 P1 M2 .\nM5 P1 ?x0 .\nM5 P1 M2 .\nM6 P1 ?x0 .\nM6 P1 M2\n}",
        "recursionDepth": 40,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P3373 wd:Q3059936 .\nFILTER ( ?x0 != wd:Q3059936 ) .\nwd:Q493 wdt:P737 ?x0 .\nwd:Q493 wdt:P737 wd:Q535 .\nwd:Q7243 wdt:P737 ?x0 .\nwd:Q7243 wdt:P737 wd:Q535 .\nwd:Q316806 wdt:P737 ?x0 .\nwd:Q316806 wdt:P737 wd:Q535 .\nwd:Q4455826 wdt:P737 ?x0 .\nwd:Q4455826 wdt:P737 wd:Q535 .\nwd:Q47484 wdt:P737 ?x0 .\nwd:Q47484 wdt:P737 wd:Q535\n}",
        "questionWithBrackets": "Were [Leo Tolstoy] , [Tovmas Terzian] , [Andr\u00e9 Gide] , [Almeida Garrett] , and [Arthur Rimbaud] influenced by [Victor Hugo] and influenced by [Eug\u00e8ne Hugo] 's sibling"
    },
    {
        "questionIdx": 114814,
        "questionPatternModEntities": "Were M0 and M2 directed , edited , and executive produced by M1",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1 .\nM0 P2 M1 .\nM2 P0 M1 .\nM2 P1 M1 .\nM2 P2 M1\n}",
        "recursionDepth": 29,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q5437360 wdt:P57 wd:Q187261 .\nwd:Q5437360 wdt:P1040 wd:Q187261 .\nwd:Q5437360 wdt:P1431 wd:Q187261 .\nwd:Q6084069 wdt:P57 wd:Q187261 .\nwd:Q6084069 wdt:P1040 wd:Q187261 .\nwd:Q6084069 wdt:P1431 wd:Q187261\n}",
        "questionWithBrackets": "Were [Fate] and [The Waiting Room] directed , edited , and executive produced by [Zeki Demirkubuz]"
    },
    {
        "questionIdx": 114823,
        "questionPatternModEntities": "Were M0 , M3 , and M4 executive produced by M1 and M2",
        "questionTemplate": "Were [entity] , [entity] , and [entity] [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM3 P0 M1 .\nM3 P0 M2 .\nM4 P0 M1 .\nM4 P0 M2\n}",
        "recursionDepth": 24,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q22350906 wdt:P1431 wd:Q8877 .\nwd:Q22350906 wdt:P1431 wd:Q237207 .\nwd:Q109331 wdt:P1431 wd:Q8877 .\nwd:Q109331 wdt:P1431 wd:Q237207 .\nwd:Q379873 wdt:P1431 wd:Q8877 .\nwd:Q379873 wdt:P1431 wd:Q237207\n}",
        "questionWithBrackets": "Were [Tummy Trouble] , [Back to the Future Part II] , and [Who Framed Roger Rabbit] executive produced by [Kathleen Kennedy] and [Steven Spielberg]"
    },
    {
        "questionIdx": 114852,
        "questionPatternModEntities": "Were M0 , M2 , and M3 produced by , edited by , executive produced by , directed by , and written by M1",
        "questionTemplate": "Were [entity] , [entity] , and [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1 .\nM0 P2 M1 .\nM0 P3 M1 .\nM0 P4 M1 .\nM2 P0 M1 .\nM2 P1 M1 .\nM2 P2 M1 .\nM2 P3 M1 .\nM2 P4 M1 .\nM3 P0 M1 .\nM3 P1 M1 .\nM3 P2 M1 .\nM3 P3 M1 .\nM3 P4 M1\n}",
        "recursionDepth": 46,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q6084069 wdt:P57 wd:Q187261 .\nwd:Q6084069 wdt:P1040 wd:Q187261 .\nwd:Q6084069 wdt:P1431 wd:Q187261 .\nwd:Q6084069 wdt:P162|wdt:P272 wd:Q187261 .\nwd:Q6084069 wdt:P58 wd:Q187261 .\nwd:Q12813010 wdt:P57 wd:Q187261 .\nwd:Q12813010 wdt:P1040 wd:Q187261 .\nwd:Q12813010 wdt:P1431 wd:Q187261 .\nwd:Q12813010 wdt:P162|wdt:P272 wd:Q187261 .\nwd:Q12813010 wdt:P58 wd:Q187261 .\nwd:Q5437360 wdt:P57 wd:Q187261 .\nwd:Q5437360 wdt:P1040 wd:Q187261 .\nwd:Q5437360 wdt:P1431 wd:Q187261 .\nwd:Q5437360 wdt:P162|wdt:P272 wd:Q187261 .\nwd:Q5437360 wdt:P58 wd:Q187261\n}",
        "questionWithBrackets": "Were [The Waiting Room] , [Fate] , and [The Confession] produced by , edited by , executive produced by , directed by , and written by [Zeki Demirkubuz]"
    },
    {
        "questionIdx": 114853,
        "questionPatternModEntities": "Were M0 and M2 produced , executive produced , and written by M1",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1 .\nM0 P2 M1 .\nM2 P0 M1 .\nM2 P1 M1 .\nM2 P2 M1\n}",
        "recursionDepth": 29,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q515931 wdt:P1431 wd:Q38222 .\nwd:Q515931 wdt:P162|wdt:P272 wd:Q38222 .\nwd:Q515931 wdt:P58 wd:Q38222 .\nwd:Q17738 wdt:P1431 wd:Q38222 .\nwd:Q17738 wdt:P162|wdt:P272 wd:Q38222 .\nwd:Q17738 wdt:P58 wd:Q38222\n}",
        "questionWithBrackets": "Were [Star Wars: Episode IV \u2013 A New Hope] and [Willow] produced , executive produced , and written by [George Lucas]"
    },
    {
        "questionIdx": 114854,
        "questionPatternModEntities": "Were M3 and M4 directed by M0 's German American sibling",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\nFILTER ( ?x0 != M0 ) .\nM3 P2 ?x0 .\nM4 P2 ?x0\n}",
        "recursionDepth": 30,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P27 wd:Q183 .\n?x0 wdt:P27 wd:Q30 .\n?x0 wdt:P3373 wd:Q77489 .\nFILTER ( ?x0 != wd:Q77489 ) .\nwd:Q205321 wdt:P57 ?x0 .\nwd:Q315896 wdt:P57 ?x0\n}",
        "questionWithBrackets": "Were [The Killers] and [People on Sunday] directed by [Curt Siodmak] 's German American sibling"
    },
    {
        "questionIdx": 114866,
        "questionPatternModEntities": "Were M0 and M5 executive produced by M1 , written by M2 , written by M3 , and written by M4",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M2 .\nM0 P1 M3 .\nM0 P1 M4 .\nM5 P0 M1 .\nM5 P1 M2 .\nM5 P1 M3 .\nM5 P1 M4\n}",
        "recursionDepth": 46,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q127367 wdt:P1431 wd:Q421488 .\nwd:Q127367 wdt:P58 wd:Q4465 .\nwd:Q127367 wdt:P58 wd:Q116854 .\nwd:Q127367 wdt:P58 wd:Q116861 .\nwd:Q131074 wdt:P1431 wd:Q421488 .\nwd:Q131074 wdt:P58 wd:Q4465 .\nwd:Q131074 wdt:P58 wd:Q116854 .\nwd:Q131074 wdt:P58 wd:Q116861\n}",
        "questionWithBrackets": "Were [The Lord of the Rings: The Fellowship of the Ring] and [The Lord of the Rings: The Return of the King] executive produced by [Mark Ordesky] , written by [Peter Jackson] , written by [Fran Walsh] , and written by [Philippa Boyens]"
    },
    {
        "questionIdx": 114868,
        "questionPatternModEntities": "Were M2 , M4 , and M5 produced by a Italian sibling of M0 and executive produced by M3",
        "questionTemplate": "Were [entity] , [entity] , and [entity] [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M0 ) .\nM2 P2 M3 .\nM2 P3 ?x0 .\nM4 P2 M3 .\nM4 P3 ?x0 .\nM5 P2 M3 .\nM5 P3 ?x0\n}",
        "recursionDepth": 42,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P27 wd:Q38 .\n?x0 wdt:P3373 wd:Q1308545 .\nFILTER ( ?x0 != wd:Q1308545 ) .\nwd:Q1604818 wdt:P1431 wd:Q296796 .\nwd:Q1604818 wdt:P162|wdt:P272 ?x0 .\nwd:Q46637 wdt:P1431 wd:Q296796 .\nwd:Q46637 wdt:P162|wdt:P272 ?x0 .\nwd:Q458033 wdt:P1431 wd:Q296796 .\nwd:Q458033 wdt:P162|wdt:P272 ?x0\n}",
        "questionWithBrackets": "Were [Three Days of the Condor] , [Maximum Overdrive] , and [Waterloo] produced by a Italian sibling of [Luigi De Laurentiis] and executive produced by [Dino De Laurentiis]"
    },
    {
        "questionIdx": 114936,
        "questionPatternModEntities": "Were M2 and M3 edited by , directed by , and written by a female spouse of M1",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M1 ) .\nM2 P2 ?x0 .\nM2 P3 ?x0 .\nM2 P4 ?x0 .\nM3 P2 ?x0 .\nM3 P3 ?x0 .\nM3 P4 ?x0\n}",
        "recursionDepth": 41,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P21 wd:Q6581072 .\n?x0 wdt:P26 wd:Q16266828 .\nFILTER ( ?x0 != wd:Q16266828 ) .\nwd:Q156497 wdt:P57 ?x0 .\nwd:Q156497 wdt:P1040 ?x0 .\nwd:Q156497 wdt:P58 ?x0 .\nwd:Q158069 wdt:P57 ?x0 .\nwd:Q158069 wdt:P1040 ?x0 .\nwd:Q158069 wdt:P58 ?x0\n}",
        "questionWithBrackets": "Were [Olympia] and [Triumph of the Will] edited by , directed by , and written by a female spouse of [Horst Kettner]"
    },
    {
        "questionIdx": 114945,
        "questionPatternModEntities": "Were M0 and M2 written by and edited by M1",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1 .\nM2 P0 M1 .\nM2 P1 M1\n}",
        "recursionDepth": 24,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q148330 wdt:P1040 wd:Q26372 .\nwd:Q148330 wdt:P58 wd:Q26372 .\nwd:Q260208 wdt:P1040 wd:Q26372 .\nwd:Q260208 wdt:P58 wd:Q26372\n}",
        "questionWithBrackets": "Were [Dolls] and [Zat\u014dichi] written by and edited by [Takeshi Kitano]"
    },
    {
        "questionIdx": 114948,
        "questionPatternModEntities": "Were M2 and M3 directed by a Dutch sibling of M0",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M0 ) .\nM2 P2 ?x0 .\nM3 P2 ?x0\n}",
        "recursionDepth": 27,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P27 wd:Q29999 .\n?x0 wdt:P3373 wd:Q2330817 .\nFILTER ( ?x0 != wd:Q2330817 ) .\nwd:Q4968377 wdt:P57 ?x0 .\nwd:Q2082065 wdt:P57 ?x0\n}",
        "questionWithBrackets": "Were [Bringing Up Bobby] and [Bringing Up Bobby] directed by a Dutch sibling of [Antoinette Beumer]"
    },
    {
        "questionIdx": 114968,
        "questionPatternModEntities": "Were M2 and M3 produced by , directed by , and edited by a British spouse of M1",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M1 ) .\nM2 P2 ?x0 .\nM2 P3 ?x0 .\nM2 P4 ?x0 .\nM3 P2 ?x0 .\nM3 P3 ?x0 .\nM3 P4 ?x0\n}",
        "recursionDepth": 41,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P27 wd:Q145 .\n?x0 wdt:P26 wd:Q137808 .\nFILTER ( ?x0 != wd:Q137808 ) .\nwd:Q166739 wdt:P57 ?x0 .\nwd:Q166739 wdt:P1040 ?x0 .\nwd:Q166739 wdt:P162|wdt:P272 ?x0 .\nwd:Q199039 wdt:P57 ?x0 .\nwd:Q199039 wdt:P1040 ?x0 .\nwd:Q199039 wdt:P162|wdt:P272 ?x0\n}",
        "questionWithBrackets": "Were [The Floorwalker] and [Pay Day] produced by , directed by , and edited by a British spouse of [Oona O'Neill]"
    },
    {
        "questionIdx": 114976,
        "questionPatternModEntities": "Were M2 , M3 , and M4 directed by , written by , edited by , and produced by M1 's British spouse",
        "questionTemplate": "Were [entity] , [entity] , and [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M1 ) .\nM2 P2 ?x0 .\nM2 P3 ?x0 .\nM2 P4 ?x0 .\nM2 P5 ?x0 .\nM3 P2 ?x0 .\nM3 P3 ?x0 .\nM3 P4 ?x0 .\nM3 P5 ?x0 .\nM4 P2 ?x0 .\nM4 P3 ?x0 .\nM4 P4 ?x0 .\nM4 P5 ?x0\n}",
        "recursionDepth": 48,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P27 wd:Q145 .\n?x0 wdt:P26 wd:Q137808 .\nFILTER ( ?x0 != wd:Q137808 ) .\nwd:Q2482645 wdt:P57 ?x0 .\nwd:Q2482645 wdt:P1040 ?x0 .\nwd:Q2482645 wdt:P162|wdt:P272 ?x0 .\nwd:Q2482645 wdt:P58 ?x0 .\nwd:Q733819 wdt:P57 ?x0 .\nwd:Q733819 wdt:P1040 ?x0 .\nwd:Q733819 wdt:P162|wdt:P272 ?x0 .\nwd:Q733819 wdt:P58 ?x0 .\nwd:Q214723 wdt:P57 ?x0 .\nwd:Q214723 wdt:P1040 ?x0 .\nwd:Q214723 wdt:P162|wdt:P272 ?x0 .\nwd:Q214723 wdt:P58 ?x0\n}",
        "questionWithBrackets": "Were [The Gold Rush] , [Easy Street] , and [The Count] directed by , written by , edited by , and produced by [Oona O'Neill] 's British spouse"
    },
    {
        "questionIdx": 114979,
        "questionPatternModEntities": "Were M2 , M3 , and M4 written , edited , produced , and directed by a British spouse of M1",
        "questionTemplate": "Were [entity] , [entity] , and [entity] [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M1 ) .\nM2 P2 ?x0 .\nM2 P3 ?x0 .\nM2 P4 ?x0 .\nM2 P5 ?x0 .\nM3 P2 ?x0 .\nM3 P3 ?x0 .\nM3 P4 ?x0 .\nM3 P5 ?x0 .\nM4 P2 ?x0 .\nM4 P3 ?x0 .\nM4 P4 ?x0 .\nM4 P5 ?x0\n}",
        "recursionDepth": 47,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P27 wd:Q145 .\n?x0 wdt:P26 wd:Q137808 .\nFILTER ( ?x0 != wd:Q137808 ) .\nwd:Q199039 wdt:P57 ?x0 .\nwd:Q199039 wdt:P1040 ?x0 .\nwd:Q199039 wdt:P162|wdt:P272 ?x0 .\nwd:Q199039 wdt:P58 ?x0 .\nwd:Q45602 wdt:P57 ?x0 .\nwd:Q45602 wdt:P1040 ?x0 .\nwd:Q45602 wdt:P162|wdt:P272 ?x0 .\nwd:Q45602 wdt:P58 ?x0 .\nwd:Q214723 wdt:P57 ?x0 .\nwd:Q214723 wdt:P1040 ?x0 .\nwd:Q214723 wdt:P162|wdt:P272 ?x0 .\nwd:Q214723 wdt:P58 ?x0\n}",
        "questionWithBrackets": "Were [Pay Day] , [Modern Times] , and [The Gold Rush] written , edited , produced , and directed by a British spouse of [Oona O'Neill]"
    },
    {
        "questionIdx": 115061,
        "questionPatternModEntities": "Were M0 , M2 , M3 , M4 , and M5 British",
        "questionTemplate": "Were [entity] , [entity] , [entity] , [entity] , and [entity] [ADJECTIVE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM2 P0 M1 .\nM3 P0 M1 .\nM4 P0 M1 .\nM5 P0 M1\n}",
        "recursionDepth": 22,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q11951 wdt:P27 wd:Q145 .\nwd:Q42 wdt:P27 wd:Q145 .\nwd:Q192 wdt:P27 wd:Q145 .\nwd:Q80 wdt:P27 wd:Q145 .\nwd:Q636 wdt:P27 wd:Q145\n}",
        "questionWithBrackets": "Were [Tim Berners-Lee] , [David Cameron] , [Kate Bush] , [Mark Rocco] , and [Douglas Adams] British"
    },
    {
        "questionIdx": 115070,
        "questionPatternModEntities": "Were M0 and M2 edited and directed by M1",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1 .\nM2 P0 M1 .\nM2 P1 M1\n}",
        "recursionDepth": 23,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q45602 wdt:P57 wd:Q882 .\nwd:Q45602 wdt:P1040 wd:Q882 .\nwd:Q166739 wdt:P57 wd:Q882 .\nwd:Q166739 wdt:P1040 wd:Q882\n}",
        "questionWithBrackets": "Were [The Floorwalker] and [Modern Times] edited and directed by [Charlie Chaplin]"
    },
    {
        "questionIdx": 115084,
        "questionPatternModEntities": "Were M0 , M2 , M3 , and M4 founded by M1",
        "questionTemplate": "Were [entity] , [entity] , [entity] , and [entity] [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM2 P0 M1 .\nM3 P0 M1 .\nM4 P0 M1\n}",
        "recursionDepth": 22,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q782942 wdt:P112 wd:Q16 .\nwd:Q673158 wdt:P112 wd:Q16 .\nwd:Q605177 wdt:P112 wd:Q16 .\nwd:Q146905 wdt:P112 wd:Q16\n}",
        "questionWithBrackets": "Were [Zangger Committee] , [Australia Group] , [Wassenaar Arrangement] , and [International Cospas-Sarsat Programme] founded by [Canada]"
    },
    {
        "questionIdx": 115099,
        "questionPatternModEntities": "Were M2 and M6 written by M3 , edited by M4 and M5 , and produced by M1 's Italian parent",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] and [entity] , and [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nM2 P2 M3 .\nM2 P3 ?x0 .\nM2 P4 M4 .\nM2 P4 M5 .\nM6 P2 M3 .\nM6 P3 ?x0 .\nM6 P4 M4 .\nM6 P4 M5\n}",
        "recursionDepth": 49,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q327436 .\n?x0 wdt:P27 wd:Q38 .\nwd:Q527958 wdt:P1040 wd:Q6172600 .\nwd:Q527958 wdt:P1040 wd:Q104290705 .\nwd:Q527958 wdt:P162|wdt:P272 ?x0 .\nwd:Q527958 wdt:P58 wd:Q383764 .\nwd:Q2609506 wdt:P1040 wd:Q6172600 .\nwd:Q2609506 wdt:P1040 wd:Q104290705 .\nwd:Q2609506 wdt:P162|wdt:P272 ?x0 .\nwd:Q2609506 wdt:P58 wd:Q383764\n}",
        "questionWithBrackets": "Were [Flesh for Frankenstein] and [Blood for Dracula] written by [Paul Morrissey] , edited by [Jed Johnson] and [Franca Silvi] , and produced by [Edoardo Ponti] 's Italian parent"
    },
    {
        "questionIdx": 115113,
        "questionPatternModEntities": "Were M1 , M2 , M3 , and M4 executive produced by M0 's parent",
        "questionTemplate": "Were [entity] , [entity] , [entity] , and [entity] [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 ?x0 .\nM2 P1 ?x0 .\nM3 P1 ?x0 .\nM4 P1 ?x0\n}",
        "recursionDepth": 27,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q40057 .\nwd:Q60770992 wdt:P1431 ?x0 .\nwd:Q327713 wdt:P1431 ?x0 .\nwd:Q91540 wdt:P1431 ?x0 .\nwd:Q109331 wdt:P1431 ?x0\n}",
        "questionWithBrackets": "Were [Men in Black 3] , [Back to the Future] , [Back to the Future Part II] , and [Why We Hate] executive produced by [Jessica Capshaw] 's parent"
    },
    {
        "questionIdx": 115202,
        "questionPatternModEntities": "Were M0 , M2 , and M3 directed by and executive produced by M1",
        "questionTemplate": "Were [entity] , [entity] , and [entity] [VP_SIMPLE] by and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1 .\nM2 P0 M1 .\nM2 P1 M1 .\nM3 P0 M1 .\nM3 P1 M1\n}",
        "recursionDepth": 28,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q3707067 wdt:P57 wd:Q85134 .\nwd:Q3707067 wdt:P1431 wd:Q85134 .\nwd:Q3707064 wdt:P57 wd:Q85134 .\nwd:Q3707064 wdt:P1431 wd:Q85134 .\nwd:Q1213389 wdt:P57 wd:Q85134 .\nwd:Q1213389 wdt:P1431 wd:Q85134\n}",
        "questionWithBrackets": "Were [No label defined] , [The Mistress of the World] , and [No label defined] directed by and executive produced by [Joe May]"
    },
    {
        "questionIdx": 115352,
        "questionPatternModEntities": "Were M0 and M2 written by and directed by M1",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1 .\nM2 P0 M1 .\nM2 P1 M1\n}",
        "recursionDepth": 24,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q11618 wdt:P57 wd:Q2071 .\nwd:Q11618 wdt:P58 wd:Q2071 .\nwd:Q660950 wdt:P57 wd:Q2071 .\nwd:Q660950 wdt:P58 wd:Q2071\n}",
        "questionWithBrackets": "Were [Blue Velvet] and [Eraserhead] written by and directed by [David Lynch]"
    },
    {
        "questionIdx": 115359,
        "questionPatternModEntities": "Were M2 and M4 executive produced by M3 and written by a German parent of M1",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by [entity] and [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nM2 P2 M3 .\nM2 P3 ?x0 .\nM4 P2 M3 .\nM4 P3 ?x0\n}",
        "recursionDepth": 39,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q94881401 .\n?x0 wdt:P27 wd:Q183 .\nwd:Q480696 wdt:P1431 wd:Q60525 .\nwd:Q480696 wdt:P58 ?x0 .\nwd:Q562046 wdt:P1431 wd:Q60525 .\nwd:Q562046 wdt:P58 ?x0\n}",
        "questionWithBrackets": "Were [The Great King] and [Die goldene Stadt] executive produced by [Veit Harlan] and written by a German parent of [Caspar Harlan]"
    },
    {
        "questionIdx": 115474,
        "questionPatternModEntities": "Were M3 , M4 , and M5 influenced by M2 's male spouse 's sibling 's British sibling",
        "questionTemplate": "Were [entity] , [entity] , and [entity] [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] 's [ROLE_SIMPLE] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x0 P1 M0 .\n?x1 P0 ?x2 .\n?x2 P2 M1 .\n?x2 P3 M2 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x1 != ?x2 ) .\nFILTER ( ?x2 != M2 ) .\nM3 P4 ?x0 .\nM4 P4 ?x0 .\nM5 P4 ?x0\n}",
        "recursionDepth": 41,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P27 wd:Q145 .\n?x0 wdt:P3373 ?x1 .\n?x1 wdt:P3373 ?x2 .\n?x2 wdt:P21 wd:Q6581097 .\n?x2 wdt:P26 wd:Q95050 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x1 != ?x2 ) .\nFILTER ( ?x2 != wd:Q95050 ) .\nwd:Q6075016 wdt:P737 ?x0 .\nwd:Q104340 wdt:P737 ?x0 .\nwd:Q2831 wdt:P737 ?x0\n}",
        "questionWithBrackets": "Were [Irwin Corey] , [Michael Jackson] , and [Harold Lloyd] influenced by [Paulette Goddard] 's male spouse 's sibling 's British sibling"
    },
    {
        "questionIdx": 115489,
        "questionPatternModEntities": "Were M2 , M4 , M5 , M6 , and M7 executive produced by M1 's male spouse and written by M3",
        "questionTemplate": "Were [entity] , [entity] , [entity] , [entity] , and [entity] [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M1 ) .\nM2 P2 ?x0 .\nM2 P3 M3 .\nM4 P2 ?x0 .\nM4 P3 M3 .\nM5 P2 ?x0 .\nM5 P3 M3 .\nM6 P2 ?x0 .\nM6 P3 M3 .\nM7 P2 ?x0 .\nM7 P3 M3\n}",
        "recursionDepth": 46,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P21 wd:Q6581097 .\n?x0 wdt:P26 wd:Q6813152 .\nFILTER ( ?x0 != wd:Q6813152 ) .\nwd:Q3968346 wdt:P1431 ?x0 .\nwd:Q3968346 wdt:P58 wd:Q38222 .\nwd:Q17738 wdt:P1431 ?x0 .\nwd:Q17738 wdt:P58 wd:Q38222 .\nwd:Q165713 wdt:P1431 ?x0 .\nwd:Q165713 wdt:P58 wd:Q38222 .\nwd:Q181803 wdt:P1431 ?x0 .\nwd:Q181803 wdt:P58 wd:Q38222 .\nwd:Q515931 wdt:P1431 ?x0 .\nwd:Q515931 wdt:P58 wd:Q38222\n}",
        "questionWithBrackets": "Were [Star Wars: Episode I \u2013 The Phantom Menace] , [Willow] , [Star Wars: Episode VI \u2013 Return of the Jedi] , [Star Whores] , and [Star Wars: Episode IV \u2013 A New Hope] executive produced by [Mellody Hobson] 's male spouse and written by [George Lucas]"
    },
    {
        "questionIdx": 115499,
        "questionPatternModEntities": "Were M1 , M3 , M4 , M5 , and M6 executive produced by M0 's spouse and directed by M2",
        "questionTemplate": "Were [entity] , [entity] , [entity] , [entity] , and [entity] [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nM1 P1 ?x0 .\nM1 P2 M2 .\nM3 P1 ?x0 .\nM3 P2 M2 .\nM4 P1 ?x0 .\nM4 P2 M2 .\nM5 P1 ?x0 .\nM5 P2 M2 .\nM6 P1 ?x0 .\nM6 P2 M2\n}",
        "recursionDepth": 41,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P26 wd:Q40162 .\nFILTER ( ?x0 != wd:Q40162 ) .\nwd:Q2661044 wdt:P57 wd:Q187364 .\nwd:Q2661044 wdt:P1431 ?x0 .\nwd:Q91540 wdt:P57 wd:Q187364 .\nwd:Q91540 wdt:P1431 ?x0 .\nwd:Q109331 wdt:P57 wd:Q187364 .\nwd:Q109331 wdt:P1431 ?x0 .\nwd:Q230552 wdt:P57 wd:Q187364 .\nwd:Q230552 wdt:P1431 ?x0 .\nwd:Q379873 wdt:P57 wd:Q187364 .\nwd:Q379873 wdt:P1431 ?x0\n}",
        "questionWithBrackets": "Were [Back to the Future Part II] , [Back to the Future Part III] , [Back to the Future] , [I Wanna Hold Your Hand] , and [Who Framed Roger Rabbit] executive produced by [Kate Capshaw] 's spouse and directed by [Robert Zemeckis]"
    },
    {
        "questionIdx": 115543,
        "questionPatternModEntities": "Were M0 , M2 , M3 , and M4 produced by , directed by , and edited by M1",
        "questionTemplate": "Were [entity] , [entity] , [entity] , and [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1 .\nM0 P2 M1 .\nM2 P0 M1 .\nM2 P1 M1 .\nM2 P2 M1 .\nM3 P0 M1 .\nM3 P1 M1 .\nM3 P2 M1 .\nM4 P0 M1 .\nM4 P1 M1 .\nM4 P2 M1\n}",
        "recursionDepth": 36,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q1151401 wdt:P57 wd:Q882 .\nwd:Q1151401 wdt:P1040 wd:Q882 .\nwd:Q1151401 wdt:P162|wdt:P272 wd:Q882 .\nwd:Q199039 wdt:P57 wd:Q882 .\nwd:Q199039 wdt:P1040 wd:Q882 .\nwd:Q199039 wdt:P162|wdt:P272 wd:Q882 .\nwd:Q214723 wdt:P57 wd:Q882 .\nwd:Q214723 wdt:P1040 wd:Q882 .\nwd:Q214723 wdt:P162|wdt:P272 wd:Q882 .\nwd:Q45602 wdt:P57 wd:Q882 .\nwd:Q45602 wdt:P1040 wd:Q882 .\nwd:Q45602 wdt:P162|wdt:P272 wd:Q882\n}",
        "questionWithBrackets": "Were [Modern Times] , [The Gold Rush] , [Pay Day] , and [The Pilgrim] produced by , directed by , and edited by [Charlie Chaplin]"
    },
    {
        "questionIdx": 115570,
        "questionPatternModEntities": "Were M0 and M2 edited by and directed by M1",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1 .\nM2 P0 M1 .\nM2 P1 M1\n}",
        "recursionDepth": 24,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q45602 wdt:P57 wd:Q882 .\nwd:Q45602 wdt:P1040 wd:Q882 .\nwd:Q166739 wdt:P57 wd:Q882 .\nwd:Q166739 wdt:P1040 wd:Q882\n}",
        "questionWithBrackets": "Were [Modern Times] and [The Floorwalker] edited by and directed by [Charlie Chaplin]"
    },
    {
        "questionIdx": 115583,
        "questionPatternModEntities": "Were M0 and M2 influenced by M1",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM2 P0 M1\n}",
        "recursionDepth": 16,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q1038450 wdt:P737 wd:Q296 .\nwd:Q45205 wdt:P737 wd:Q296\n}",
        "questionWithBrackets": "Were [J\u00f3zef Pankiewicz] and [Raoul Dufy] influenced by [Claude Monet]"
    },
    {
        "questionIdx": 115602,
        "questionPatternModEntities": "Were M0 , M2 , and M3 Spanish",
        "questionTemplate": "Were [entity] , [entity] , and [entity] [ADJECTIVE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM2 P0 M1 .\nM3 P0 M1\n}",
        "recursionDepth": 16,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q31873 wdt:P27 wd:Q29 .\nwd:Q4599 wdt:P27 wd:Q29 .\nwd:Q615 wdt:P27 wd:Q29\n}",
        "questionWithBrackets": "Were [Ra\u00fal Albiol] , [Lionel Messi] , and [Agust\u00edn Sauto Arana] Spanish"
    },
    {
        "questionIdx": 115622,
        "questionPatternModEntities": "Were M2 , M4 , and M5 edited by M3 and executive produced by a male sibling of M0",
        "questionTemplate": "Were [entity] , [entity] , and [entity] [VP_SIMPLE] by [entity] and [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M0 ) .\nM2 P2 ?x0 .\nM2 P3 M3 .\nM4 P2 ?x0 .\nM4 P3 M3 .\nM5 P2 ?x0 .\nM5 P3 M3\n}",
        "recursionDepth": 42,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P21 wd:Q6581097 .\n?x0 wdt:P3373 wd:Q4820677 .\nFILTER ( ?x0 != wd:Q4820677 ) .\nwd:Q3077738 wdt:P1040 wd:Q3473349 .\nwd:Q3077738 wdt:P1431 ?x0 .\nwd:Q1338368 wdt:P1040 wd:Q3473349 .\nwd:Q1338368 wdt:P1431 ?x0 .\nwd:Q829695 wdt:P1040 wd:Q3473349 .\nwd:Q829695 wdt:P1431 ?x0\n}",
        "questionWithBrackets": "Were [Somewhere] , [Marie Antoinette] , and [The Bling Ring] edited by [Sarah Flack] and executive produced by a male sibling of [August Coppola]"
    },
    {
        "questionIdx": 115634,
        "questionPatternModEntities": "Were M1 and M2 founded by a spouse of M0",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nM1 P1 ?x0 .\nM2 P1 ?x0\n}",
        "recursionDepth": 22,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P26 wd:Q13564310 .\nFILTER ( ?x0 != wd:Q13564310 ) .\nwd:Q20006792 wdt:P112 ?x0 .\nwd:Q52 wdt:P112 ?x0\n}",
        "questionWithBrackets": "Were [Wikipedia] and [Jimmy Wales Foundation] founded by a spouse of [Kate Garvey]"
    },
    {
        "questionIdx": 115637,
        "questionPatternModEntities": "Were M0 and M5 edited by M3 , written by M2 , executive produced by M1 , and directed by M4",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M2 .\nM0 P2 M3 .\nM0 P3 M4 .\nM5 P0 M1 .\nM5 P1 M2 .\nM5 P2 M3 .\nM5 P3 M4\n}",
        "recursionDepth": 46,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q230552 wdt:P57 wd:Q187364 .\nwd:Q230552 wdt:P1040 wd:Q1586598 .\nwd:Q230552 wdt:P1431 wd:Q8877 .\nwd:Q230552 wdt:P58 wd:Q725773 .\nwd:Q109331 wdt:P57 wd:Q187364 .\nwd:Q109331 wdt:P1040 wd:Q1586598 .\nwd:Q109331 wdt:P1431 wd:Q8877 .\nwd:Q109331 wdt:P58 wd:Q725773\n}",
        "questionWithBrackets": "Were [Back to the Future Part III] and [Back to the Future Part II] edited by [Harry Keramidas] , written by [Bob Gale] , executive produced by [Steven Spielberg] , and directed by [Robert Zemeckis]"
    },
    {
        "questionIdx": 115662,
        "questionPatternModEntities": "Were M4 and M5 directed , written , and produced by a employee of M0 , M1 , M2 , and M3",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity] , [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P0 M3 .\nM4 P1 ?x0 .\nM4 P2 ?x0 .\nM4 P3 ?x0 .\nM5 P1 ?x0 .\nM5 P2 ?x0 .\nM5 P3 ?x0\n}",
        "recursionDepth": 44,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P108 wd:Q947907 .\n?x0 wdt:P108 wd:Q1051884 .\n?x0 wdt:P108 wd:Q1136386 .\n?x0 wdt:P108 wd:Q182950 .\nwd:Q735713 wdt:P57 ?x0 .\nwd:Q735713 wdt:P162|wdt:P272 ?x0 .\nwd:Q735713 wdt:P58 ?x0 .\nwd:Q196602 wdt:P57 ?x0 .\nwd:Q196602 wdt:P162|wdt:P272 ?x0 .\nwd:Q196602 wdt:P58 ?x0\n}",
        "questionWithBrackets": "Were [Mizugumo Monmon] and [Kiki's Delivery Service] directed , written , and produced by a employee of [Studio Ghibli] , [Nippon Animation] , [Shin-Ei Animation] , and [Ghibli Museum]"
    },
    {
        "questionIdx": 115672,
        "questionPatternModEntities": "Were M0 and M2 edited , executive produced , and written by M1",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1 .\nM0 P2 M1 .\nM2 P0 M1 .\nM2 P1 M1 .\nM2 P2 M1\n}",
        "recursionDepth": 29,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q181803 wdt:P1040 wd:Q38222 .\nwd:Q181803 wdt:P1431 wd:Q38222 .\nwd:Q181803 wdt:P58 wd:Q38222 .\nwd:Q17738 wdt:P1040 wd:Q38222 .\nwd:Q17738 wdt:P1431 wd:Q38222 .\nwd:Q17738 wdt:P58 wd:Q38222\n}",
        "questionWithBrackets": "Were [Star Wars: Episode VI \u2013 Return of the Jedi] and [Star Wars: Episode IV \u2013 A New Hope] edited , executive produced , and written by [George Lucas]"
    },
    {
        "questionIdx": 115724,
        "questionPatternModEntities": "Were M0 and M7 written by M1 , M2 , M3 , and M4 , directed by M5 , and directed by M6",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by [entity] , [entity] , [entity] , and [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P0 M3 .\nM0 P0 M4 .\nM0 P1 M5 .\nM0 P1 M6 .\nM7 P0 M1 .\nM7 P0 M2 .\nM7 P0 M3 .\nM7 P0 M4 .\nM7 P1 M5 .\nM7 P1 M6\n}",
        "recursionDepth": 46,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q24980 wdt:P57 wd:Q166159 .\nwd:Q24980 wdt:P57 wd:Q25078 .\nwd:Q24980 wdt:P58 wd:Q24962 .\nwd:Q24980 wdt:P58 wd:Q25014 .\nwd:Q24980 wdt:P58 wd:Q210741 .\nwd:Q24980 wdt:P58 wd:Q223985 .\nwd:Q25043 wdt:P57 wd:Q166159 .\nwd:Q25043 wdt:P57 wd:Q25078 .\nwd:Q25043 wdt:P58 wd:Q24962 .\nwd:Q25043 wdt:P58 wd:Q25014 .\nwd:Q25043 wdt:P58 wd:Q210741 .\nwd:Q25043 wdt:P58 wd:Q223985\n}",
        "questionWithBrackets": "Were [Monty Python's The Meaning of Life] and [Monty Python and the Holy Grail] written by [Michael Palin] , [Graham Chapman] , [John Cleese] , and [Eric Idle] , directed by [Terry Gilliam] , and directed by [Terry Jones]"
    },
    {
        "questionIdx": 115741,
        "questionPatternModEntities": "Were M2 and M4 executive produced by a male sibling of M0 and directed by M3",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M0 ) .\nM2 P2 ?x0 .\nM2 P3 M3 .\nM4 P2 ?x0 .\nM4 P3 M3\n}",
        "recursionDepth": 39,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P21 wd:Q6581097 .\n?x0 wdt:P3373 wd:Q469204 .\nFILTER ( ?x0 != wd:Q469204 ) .\nwd:Q156597 wdt:P57 wd:Q317567 .\nwd:Q156597 wdt:P1431 ?x0 .\nwd:Q51416 wdt:P57 wd:Q317567 .\nwd:Q51416 wdt:P1431 ?x0\n}",
        "questionWithBrackets": "Were [Men in Black II] and [Men in Black] executive produced by a male sibling of [Anne Spielberg] and directed by [Barry Sonnenfeld]"
    },
    {
        "questionIdx": 115748,
        "questionPatternModEntities": "Were M1 , M2 , M3 , and M4 directed by M0 's employee",
        "questionTemplate": "Were [entity] , [entity] , [entity] , and [entity] [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 ?x0 .\nM2 P1 ?x0 .\nM3 P1 ?x0 .\nM4 P1 ?x0\n}",
        "recursionDepth": 26,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P108 wd:Q4129798 .\nwd:Q125772 wdt:P57 ?x0 .\nwd:Q1138968 wdt:P57 ?x0 .\nwd:Q200437 wdt:P57 ?x0 .\nwd:Q503046 wdt:P57 ?x0\n}",
        "questionWithBrackets": "Were [Andrei Rublev] , [Nostalghia] , [Stalker] , and [Solaris] directed by [Top Courses for Scriptwriters and Film Directors] 's employee"
    },
    {
        "questionIdx": 115787,
        "questionPatternModEntities": "Were M1 , M2 , M3 , and M4 founded by M0 's child",
        "questionTemplate": "Were [entity] , [entity] , [entity] , and [entity] [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 ?x0 .\nM2 P1 ?x0 .\nM3 P1 ?x0 .\nM4 P1 ?x0\n}",
        "recursionDepth": 26,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P749 wd:Q20800404 .\nwd:Q17512080 wdt:P112 ?x0 .\nwd:Q356 wdt:P112 ?x0 .\nwd:Q5570513 wdt:P112 ?x0 .\nwd:Q42274 wdt:P112 ?x0\n}",
        "questionWithBrackets": "Were [Global Network Initiative] , [Android Runtime] , [Google+] , and [Google Earth] founded by [Alphabet Inc.] 's child"
    },
    {
        "questionIdx": 115798,
        "questionPatternModEntities": "Were M1 and M2 executive produced by M0 's spouse 's sibling",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x1 P1 M0 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x1 != M0 ) .\nM1 P2 ?x0 .\nM2 P2 ?x0\n}",
        "recursionDepth": 25,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P3373 ?x1 .\n?x1 wdt:P26 wd:Q18113545 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x1 != wd:Q18113545 ) .\nwd:Q920733 wdt:P1431 ?x0 .\nwd:Q349118 wdt:P1431 ?x0\n}",
        "questionWithBrackets": "Were [Rob Roy, the Highland Rogue] and [Springtime] executive produced by [Edna Disney] 's spouse 's sibling"
    },
    {
        "questionIdx": 115801,
        "questionPatternModEntities": "Were M0 , M3 , M4 , and M5 directed by M2 and executive produced by M1",
        "questionTemplate": "Were [entity] , [entity] , [entity] , and [entity] [VP_SIMPLE] by [entity] and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M2 .\nM3 P0 M1 .\nM3 P1 M2 .\nM4 P0 M1 .\nM4 P1 M2 .\nM5 P0 M1 .\nM5 P1 M2\n}",
        "recursionDepth": 34,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q379873 wdt:P57 wd:Q187364 .\nwd:Q379873 wdt:P1431 wd:Q8877 .\nwd:Q109331 wdt:P57 wd:Q187364 .\nwd:Q109331 wdt:P1431 wd:Q8877 .\nwd:Q230552 wdt:P57 wd:Q187364 .\nwd:Q230552 wdt:P1431 wd:Q8877 .\nwd:Q91540 wdt:P57 wd:Q187364 .\nwd:Q91540 wdt:P1431 wd:Q8877\n}",
        "questionWithBrackets": "Were [Back to the Future Part III] , [Back to the Future] , [Who Framed Roger Rabbit] , and [Back to the Future Part II] directed by [Robert Zemeckis] and executive produced by [Steven Spielberg]"
    },
    {
        "questionIdx": 115860,
        "questionPatternModEntities": "Were M2 and M3 produced and written by a Mexican spouse of M1",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] and [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M1 ) .\nM2 P2 ?x0 .\nM2 P3 ?x0 .\nM3 P2 ?x0 .\nM3 P3 ?x0\n}",
        "recursionDepth": 34,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P27 wd:Q96 .\n?x0 wdt:P26 wd:Q28708093 .\nFILTER ( ?x0 != wd:Q28708093 ) .\nwd:Q190575 wdt:P162|wdt:P272 ?x0 .\nwd:Q190575 wdt:P58 ?x0 .\nwd:Q5398733 wdt:P162|wdt:P272 ?x0 .\nwd:Q5398733 wdt:P58 ?x0\n}",
        "questionWithBrackets": "Were [Un Chien Andalou] and [Espa\u00f1a 1936] produced and written by a Mexican spouse of [Jeanne Rucar]"
    },
    {
        "questionIdx": 115862,
        "questionPatternModEntities": "Were M1 , M2 , M3 , M4 , and M5 directed by and written by M0 's sibling",
        "questionTemplate": "Were [entity] , [entity] , [entity] , [entity] , and [entity] [VP_SIMPLE] by and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nM1 P1 ?x0 .\nM1 P2 ?x0 .\nM2 P1 ?x0 .\nM2 P2 ?x0 .\nM3 P1 ?x0 .\nM3 P2 ?x0 .\nM4 P1 ?x0 .\nM4 P2 ?x0 .\nM5 P1 ?x0 .\nM5 P2 ?x0\n}",
        "recursionDepth": 37,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P3373 wd:Q606780 .\nFILTER ( ?x0 != wd:Q606780 ) .\nwd:Q1191049 wdt:P57 ?x0 .\nwd:Q1191049 wdt:P58 ?x0 .\nwd:Q45602 wdt:P57 ?x0 .\nwd:Q45602 wdt:P58 ?x0 .\nwd:Q109116 wdt:P57 ?x0 .\nwd:Q109116 wdt:P58 ?x0 .\nwd:Q214723 wdt:P57 ?x0 .\nwd:Q214723 wdt:P58 ?x0 .\nwd:Q199039 wdt:P57 ?x0 .\nwd:Q199039 wdt:P58 ?x0\n}",
        "questionWithBrackets": "Were [The Gold Rush] , [Pay Day] , [The Great Dictator] , [Modern Times] , and [A Jitney Elopement] directed by and written by [Sydney Chaplin] 's sibling"
    },
    {
        "questionIdx": 115864,
        "questionPatternModEntities": "Were M2 and M5 executive produced by M1 's female spouse , directed by M4 , and executive produced by M3",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M1 ) .\nM2 P2 ?x0 .\nM2 P2 M3 .\nM2 P3 M4 .\nM5 P2 ?x0 .\nM5 P2 M3 .\nM5 P3 M4\n}",
        "recursionDepth": 47,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P21 wd:Q6581072 .\n?x0 wdt:P26 wd:Q549570 .\nFILTER ( ?x0 != wd:Q549570 ) .\nwd:Q19689203 wdt:P57 wd:Q8877 .\nwd:Q19689203 wdt:P1431 ?x0 .\nwd:Q19689203 wdt:P1431 wd:Q237207 .\nwd:Q483941 wdt:P57 wd:Q8877 .\nwd:Q483941 wdt:P1431 ?x0 .\nwd:Q483941 wdt:P1431 wd:Q237207\n}",
        "questionWithBrackets": "Were [The BFG] and [Schindler's List] executive produced by [Frank Marshall] 's female spouse , directed by [Steven Spielberg] , and executive produced by [Kathleen Kennedy]"
    },
    {
        "questionIdx": 115893,
        "questionPatternModEntities": "Were M2 and M4 written by M1 's Mexican spouse 's parent and directed by M3",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] 's [ROLE_SIMPLE] and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x1 P1 M0 .\n?x1 P2 M1 .\nFILTER ( ?x1 != M1 ) .\nM2 P3 ?x0 .\nM2 P4 M3 .\nM4 P3 ?x0 .\nM4 P4 M3\n}",
        "recursionDepth": 40,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 ?x1 .\n?x1 wdt:P27 wd:Q96 .\n?x1 wdt:P26 wd:Q9069884 .\nFILTER ( ?x1 != wd:Q9069884 ) .\nwd:Q12155657 wdt:P57 wd:Q1747606 .\nwd:Q12155657 wdt:P58 ?x0 .\nwd:Q12164415 wdt:P57 wd:Q1747606 .\nwd:Q12164415 wdt:P58 ?x0\n}",
        "questionWithBrackets": "Were [The Extra] and [H\u00e9roe a la fuerza] written by [Roberto G\u00f3mez Fern\u00e1ndez] 's Mexican spouse 's parent and directed by [Miguel M. Delgado]"
    },
    {
        "questionIdx": 115905,
        "questionPatternModEntities": "Were M1 , M2 , and M3 directed by M0 's spouse",
        "questionTemplate": "Were [entity] , [entity] , and [entity] [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nM1 P1 ?x0 .\nM2 P1 ?x0 .\nM3 P1 ?x0\n}",
        "recursionDepth": 23,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P26 wd:Q1981049 .\nFILTER ( ?x0 != wd:Q1981049 ) .\nwd:Q200437 wdt:P57 ?x0 .\nwd:Q503046 wdt:P57 ?x0 .\nwd:Q125772 wdt:P57 ?x0\n}",
        "questionWithBrackets": "Were [Andrei Rublev] , [Stalker] , and [Solaris] directed by [Irma Raush] 's spouse"
    },
    {
        "questionIdx": 115914,
        "questionPatternModEntities": "Were M1 , M2 , and M3 edited by M0 's employee",
        "questionTemplate": "Were [entity] , [entity] , and [entity] [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 ?x0 .\nM2 P1 ?x0 .\nM3 P1 ?x0\n}",
        "recursionDepth": 23,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P108 wd:Q58211956 .\nwd:Q580653 wdt:P1040 ?x0 .\nwd:Q1807224 wdt:P1040 ?x0 .\nwd:Q1862822 wdt:P1040 ?x0\n}",
        "questionWithBrackets": "Were [Roberta] , [No Other Woman] , and [In Name Only] edited by [Foreign Office] 's employee"
    },
    {
        "questionIdx": 115915,
        "questionPatternModEntities": "Were M3 and M4 influenced by a Canadian employee of M0 and M1",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P1 M2 .\nM3 P2 ?x0 .\nM4 P2 ?x0\n}",
        "recursionDepth": 31,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P108 wd:Q37156 .\n?x0 wdt:P108 wd:Q13371 .\n?x0 wdt:P27 wd:Q16 .\nwd:Q5407513 wdt:P737 ?x0 .\nwd:Q67593043 wdt:P737 ?x0\n}",
        "questionWithBrackets": "Were [John Scholes] and [Eugene McDonnell] influenced by a Canadian employee of [Harvard University] and [IBM]"
    },
    {
        "questionIdx": 115944,
        "questionPatternModEntities": "Were M1 and M4 executive produced by a employee of M0 , executive produced by M2 , and written by M3",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 ?x0 .\nM1 P1 M2 .\nM1 P2 M3 .\nM4 P1 ?x0 .\nM4 P1 M2 .\nM4 P2 M3\n}",
        "recursionDepth": 44,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P108 wd:Q11371930 .\nwd:Q1045889 wdt:P1431 ?x0 .\nwd:Q1045889 wdt:P1431 wd:Q55400 .\nwd:Q1045889 wdt:P58 wd:Q178713 .\nwd:Q167206 wdt:P1431 ?x0 .\nwd:Q167206 wdt:P1431 wd:Q55400 .\nwd:Q167206 wdt:P58 wd:Q178713\n}",
        "questionWithBrackets": "Were [Only Yesterday] and [Pom Poko] executive produced by a employee of [Nibariki] , executive produced by [Hayao Miyazaki] , and written by [Isao Takahata]"
    },
    {
        "questionIdx": 115964,
        "questionPatternModEntities": "Were M2 and M5 founded by M3 and M4 and founded by a employee of M0 and M1",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by [entity] and [entity] and [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\nM2 P1 ?x0 .\nM2 P1 M3 .\nM2 P1 M4 .\nM5 P1 ?x0 .\nM5 P1 M3 .\nM5 P1 M4\n}",
        "recursionDepth": 41,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P108 wd:Q187801 .\n?x0 wdt:P108 wd:Q309331 .\nwd:Q151 wdt:P112 ?x0 .\nwd:Q151 wdt:P112 wd:Q181 .\nwd:Q151 wdt:P112 wd:Q185 .\nwd:Q17458 wdt:P112 ?x0 .\nwd:Q17458 wdt:P112 wd:Q181 .\nwd:Q17458 wdt:P112 wd:Q185\n}",
        "questionWithBrackets": "Were [Nupedia] and [Wiktionary] founded by [Jimmy Wales] and [Larry Sanger] and founded by a employee of [Citizendium] and [Ohio State University]"
    },
    {
        "questionIdx": 115970,
        "questionPatternModEntities": "Were M2 and M5 founded by M3 and M4 and founded by M0 's American sibling",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by [entity] and [entity] and [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M0 ) .\nM2 P2 ?x0 .\nM2 P2 M3 .\nM2 P2 M4 .\nM5 P2 ?x0 .\nM5 P2 M3 .\nM5 P2 M4\n}",
        "recursionDepth": 40,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P27 wd:Q30 .\n?x0 wdt:P3373 wd:Q5112102 .\nFILTER ( ?x0 != wd:Q5112102 ) .\nwd:Q6794165 wdt:P112 ?x0 .\nwd:Q6794165 wdt:P112 wd:Q5496856 .\nwd:Q6794165 wdt:P112 wd:Q1744 .\nwd:Q2016567 wdt:P112 ?x0 .\nwd:Q2016567 wdt:P112 wd:Q5496856 .\nwd:Q2016567 wdt:P112 wd:Q1744\n}",
        "questionWithBrackets": "Were [Maverick] and [Maverick] founded by [Madonna] and [Freddy DeMann] and founded by [Christopher Ciccone] 's American sibling"
    },
    {
        "questionIdx": 116011,
        "questionPatternModEntities": "Were M2 , M5 , and M6 founded by M3 , founded by M4 , and founded by a employee of M0 and M1",
        "questionTemplate": "Were [entity] , [entity] , and [entity] [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\nM2 P1 ?x0 .\nM2 P1 M3 .\nM2 P1 M4 .\nM5 P1 ?x0 .\nM5 P1 M3 .\nM5 P1 M4 .\nM6 P1 ?x0 .\nM6 P1 M3 .\nM6 P1 M4\n}",
        "recursionDepth": 49,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P108 wd:Q2665980 .\n?x0 wdt:P108 wd:Q17459 .\nwd:Q565 wdt:P112 ?x0 .\nwd:Q565 wdt:P112 wd:Q180 .\nwd:Q565 wdt:P112 wd:Q181 .\nwd:Q13679 wdt:P112 ?x0 .\nwd:Q13679 wdt:P112 wd:Q180 .\nwd:Q13679 wdt:P112 wd:Q181 .\nwd:Q367 wdt:P112 ?x0 .\nwd:Q367 wdt:P112 wd:Q180 .\nwd:Q367 wdt:P112 wd:Q181\n}",
        "questionWithBrackets": "Were [Wikibooks] , [Wikimedia Commons] , and [Wikispecies] founded by [Wikimedia Foundation] , founded by [Jimmy Wales] , and founded by a employee of [Fandom] and [Guardian Media Group]"
    },
    {
        "questionIdx": 116053,
        "questionPatternModEntities": "Were M2 and M5 founded by M1 's American parent and founded by M3 and M4",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nM2 P2 ?x0 .\nM2 P2 M3 .\nM2 P2 M4 .\nM5 P2 ?x0 .\nM5 P2 M3 .\nM5 P2 M4\n}",
        "recursionDepth": 40,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q471851 .\n?x0 wdt:P27 wd:Q30 .\nwd:Q166419 wdt:P112 ?x0 .\nwd:Q166419 wdt:P112 wd:Q587455 .\nwd:Q166419 wdt:P112 wd:Q53944 .\nwd:Q5476982 wdt:P112 ?x0 .\nwd:Q5476982 wdt:P112 wd:Q587455 .\nwd:Q5476982 wdt:P112 wd:Q53944\n}",
        "questionWithBrackets": "Were [Fox Television Stations] and [Fox Broadcasting Company] founded by [James Murdoch] 's American parent and founded by [Rupert Murdoch] and [Barry Diller]"
    },
    {
        "questionIdx": 116102,
        "questionPatternModEntities": "Were M2 , M5 , and M6 founded by M3 and M4 and founded by M0 's American employee",
        "questionTemplate": "Were [entity] , [entity] , and [entity] [VP_SIMPLE] by [entity] and [entity] and [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nM2 P2 ?x0 .\nM2 P2 M3 .\nM2 P2 M4 .\nM5 P2 ?x0 .\nM5 P2 M3 .\nM5 P2 M4 .\nM6 P2 ?x0 .\nM6 P2 M3 .\nM6 P2 M4\n}",
        "recursionDepth": 43,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P108 wd:Q309331 .\n?x0 wdt:P27 wd:Q30 .\nwd:Q17458 wdt:P112 ?x0 .\nwd:Q17458 wdt:P112 wd:Q181 .\nwd:Q17458 wdt:P112 wd:Q185 .\nwd:Q52 wdt:P112 ?x0 .\nwd:Q52 wdt:P112 wd:Q181 .\nwd:Q52 wdt:P112 wd:Q185 .\nwd:Q151 wdt:P112 ?x0 .\nwd:Q151 wdt:P112 wd:Q181 .\nwd:Q151 wdt:P112 wd:Q185\n}",
        "questionWithBrackets": "Were [Nupedia] , [Wiktionary] , and [Wikipedia] founded by [Larry Sanger] and [Jimmy Wales] and founded by [Ohio State University] 's American employee"
    },
    {
        "questionIdx": 116121,
        "questionPatternModEntities": "Were M0 and M2 produced , directed , and edited by M1",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1 .\nM0 P2 M1 .\nM2 P0 M1 .\nM2 P1 M1 .\nM2 P2 M1\n}",
        "recursionDepth": 28,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q1070468 wdt:P57 wd:Q882 .\nwd:Q1070468 wdt:P1040 wd:Q882 .\nwd:Q1070468 wdt:P162|wdt:P272 wd:Q882 .\nwd:Q45602 wdt:P57 wd:Q882 .\nwd:Q45602 wdt:P1040 wd:Q882 .\nwd:Q45602 wdt:P162|wdt:P272 wd:Q882\n}",
        "questionWithBrackets": "Were [Modern Times] and [The Immigrant] produced , directed , and edited by [Charlie Chaplin]"
    },
    {
        "questionIdx": 116167,
        "questionPatternModEntities": "Were M0 and M3 influenced by M1 and M2",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM3 P0 M1 .\nM3 P0 M2\n}",
        "recursionDepth": 20,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q991 wdt:P737 wd:Q692 .\nwd:Q991 wdt:P737 wd:Q22670 .\nwd:Q7200 wdt:P737 wd:Q692 .\nwd:Q7200 wdt:P737 wd:Q22670\n}",
        "questionWithBrackets": "Were [Alexander Pushkin] and [Fyodor Dostoyevsky] influenced by [Friedrich Schiller] and [William Shakespeare]"
    },
    {
        "questionIdx": 116204,
        "questionPatternModEntities": "Were M1 , M2 , M3 , and M4 written and edited by a sibling of M0",
        "questionTemplate": "Were [entity] , [entity] , [entity] , and [entity] [VP_SIMPLE] and [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nM1 P1 ?x0 .\nM1 P2 ?x0 .\nM2 P1 ?x0 .\nM2 P2 ?x0 .\nM3 P1 ?x0 .\nM3 P2 ?x0 .\nM4 P1 ?x0 .\nM4 P2 ?x0\n}",
        "recursionDepth": 35,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P3373 wd:Q606780 .\nFILTER ( ?x0 != wd:Q606780 ) .\nwd:Q3986814 wdt:P1040 ?x0 .\nwd:Q3986814 wdt:P58 ?x0 .\nwd:Q199039 wdt:P1040 ?x0 .\nwd:Q199039 wdt:P58 ?x0 .\nwd:Q45602 wdt:P1040 ?x0 .\nwd:Q45602 wdt:P58 ?x0 .\nwd:Q238211 wdt:P1040 ?x0 .\nwd:Q238211 wdt:P58 ?x0\n}",
        "questionWithBrackets": "Were [City Lights] , [The Essanay-Chaplin Revue of 1916] , [Modern Times] , and [Pay Day] written and edited by a sibling of [Sydney Chaplin]"
    },
    {
        "questionIdx": 116222,
        "questionPatternModEntities": "Were M1 , M2 , and M3 influenced by M0 's sibling",
        "questionTemplate": "Were [entity] , [entity] , and [entity] [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nM1 P1 ?x0 .\nM2 P1 ?x0 .\nM3 P1 ?x0\n}",
        "recursionDepth": 23,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P3373 wd:Q96089295 .\nFILTER ( ?x0 != wd:Q96089295 ) .\nwd:Q31984 wdt:P737 ?x0 .\nwd:Q9068 wdt:P737 ?x0 .\nwd:Q37767 wdt:P737 ?x0\n}",
        "questionWithBrackets": "Were [T.\u00a0S. Eliot] , [William Kennedy] , and [Voltaire] influenced by [Margaret Shakespeare] 's sibling"
    },
    {
        "questionIdx": 116248,
        "questionPatternModEntities": "Were M0 and M2 founded by M1",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM2 P0 M1\n}",
        "recursionDepth": 16,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q1065 wdt:P112 wd:Q16 .\nwd:Q1072120 wdt:P112 wd:Q16\n}",
        "questionWithBrackets": "Were [United Nations] and [Missile Technology Control Regime] founded by [Canada]"
    },
    {
        "questionIdx": 116295,
        "questionPatternModEntities": "Were M3 and M4 written by a French employee of M0 and M1",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P1 M2 .\nM3 P2 ?x0 .\nM4 P2 ?x0\n}",
        "recursionDepth": 31,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P108 wd:Q909176 .\n?x0 wdt:P108 wd:Q434841 .\n?x0 wdt:P27 wd:Q142 .\nwd:Q858216 wdt:P58 ?x0 .\nwd:Q72330 wdt:P58 ?x0\n}",
        "questionWithBrackets": "Were [La C\u00e9r\u00e9monie] and [The Color of Lies] written by a French employee of [20th Century Studios] and [Cahiers du cin\u00e9ma]"
    },
    {
        "questionIdx": 116297,
        "questionPatternModEntities": "Were M1 and M2 produced by M0 's employee",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 ?x0 .\nM2 P1 ?x0\n}",
        "recursionDepth": 20,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P108 wd:Q1668871 .\nwd:Q88229004 wdt:P162|wdt:P272 ?x0 .\nwd:Q82214 wdt:P162|wdt:P272 ?x0\n}",
        "questionWithBrackets": "Were [Rushes] and [Those Were the Days] produced by [Liverpool Institute for Performing Arts] 's employee"
    },
    {
        "questionIdx": 116313,
        "questionPatternModEntities": "Were M0 and M2 American",
        "questionTemplate": "Were [entity] and [entity] [ADJECTIVE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM2 P0 M1\n}",
        "recursionDepth": 13,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q4109 wdt:P27 wd:Q30 .\nwd:Q23 wdt:P27 wd:Q30\n}",
        "questionWithBrackets": "Were [George Washington] and [Chris Rock] American"
    },
    {
        "questionIdx": 116323,
        "questionPatternModEntities": "Were M0 , M2 , and M3 directed and edited by M1",
        "questionTemplate": "Were [entity] , [entity] , and [entity] [VP_SIMPLE] and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1 .\nM2 P0 M1 .\nM2 P1 M1 .\nM3 P0 M1 .\nM3 P1 M1\n}",
        "recursionDepth": 26,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q854990 wdt:P57 wd:Q8006 .\nwd:Q854990 wdt:P1040 wd:Q8006 .\nwd:Q20475 wdt:P57 wd:Q8006 .\nwd:Q20475 wdt:P1040 wd:Q8006 .\nwd:Q39946 wdt:P57 wd:Q8006 .\nwd:Q39946 wdt:P1040 wd:Q8006\n}",
        "questionWithBrackets": "Were [Yojimbo] , [The Hidden Fortress] , and [Kagemusha] directed and edited by [Akira Kurosawa]"
    },
    {
        "questionIdx": 116343,
        "questionPatternModEntities": "Were M2 , M4 , and M5 influenced by a French sibling of M0 and influenced by M3",
        "questionTemplate": "Were [entity] , [entity] , and [entity] [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M0 ) .\nM2 P2 ?x0 .\nM2 P2 M3 .\nM4 P2 ?x0 .\nM4 P2 M3 .\nM5 P2 ?x0 .\nM5 P2 M3\n}",
        "recursionDepth": 41,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P27 wd:Q142 .\n?x0 wdt:P3373 wd:Q3059936 .\nFILTER ( ?x0 != wd:Q3059936 ) .\nwd:Q493 wdt:P737 ?x0 .\nwd:Q493 wdt:P737 wd:Q535 .\nwd:Q991 wdt:P737 ?x0 .\nwd:Q991 wdt:P737 wd:Q535 .\nwd:Q4455826 wdt:P737 ?x0 .\nwd:Q4455826 wdt:P737 wd:Q535\n}",
        "questionWithBrackets": "Were [Arthur Rimbaud] , [Fyodor Dostoyevsky] , and [Tovmas Terzian] influenced by a French sibling of [Eug\u00e8ne Hugo] and influenced by [Victor Hugo]"
    },
    {
        "questionIdx": 116379,
        "questionPatternModEntities": "Were M1 , M2 , M3 , M4 , and M5 executive produced by a spouse of M0",
        "questionTemplate": "Were [entity] , [entity] , [entity] , [entity] , and [entity] [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nM1 P1 ?x0 .\nM2 P1 ?x0 .\nM3 P1 ?x0 .\nM4 P1 ?x0 .\nM5 P1 ?x0\n}",
        "recursionDepth": 32,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P26 wd:Q40162 .\nFILTER ( ?x0 != wd:Q40162 ) .\nwd:Q42708010 wdt:P1431 ?x0 .\nwd:Q109331 wdt:P1431 ?x0 .\nwd:Q156597 wdt:P1431 ?x0 .\nwd:Q51416 wdt:P1431 ?x0 .\nwd:Q232250 wdt:P1431 ?x0\n}",
        "questionWithBrackets": "Were [Men in Black] , [Back to the Future Part II] , [Continental Divide] , [First Man] , and [Men in Black II] executive produced by a spouse of [Kate Capshaw]"
    },
    {
        "questionIdx": 116438,
        "questionPatternModEntities": "Were M1 , M4 , M5 , and M6 influenced by a parent of M0 , influenced by M2 , and influenced by M3",
        "questionTemplate": "Were [entity] , [entity] , [entity] , and [entity] [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 ?x0 .\nM1 P1 M2 .\nM1 P1 M3 .\nM4 P1 ?x0 .\nM4 P1 M2 .\nM4 P1 M3 .\nM5 P1 ?x0 .\nM5 P1 M2 .\nM5 P1 M3 .\nM6 P1 ?x0 .\nM6 P1 M2 .\nM6 P1 M3\n}",
        "recursionDepth": 48,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q2217419 .\nwd:Q448 wdt:P737 ?x0 .\nwd:Q448 wdt:P737 wd:Q35802 .\nwd:Q448 wdt:P737 wd:Q868 .\nwd:Q9235 wdt:P737 ?x0 .\nwd:Q9235 wdt:P737 wd:Q35802 .\nwd:Q9235 wdt:P737 wd:Q868 .\nwd:Q42156 wdt:P737 ?x0 .\nwd:Q42156 wdt:P737 wd:Q35802 .\nwd:Q42156 wdt:P737 wd:Q868 .\nwd:Q275003 wdt:P737 ?x0 .\nwd:Q275003 wdt:P737 wd:Q35802 .\nwd:Q275003 wdt:P737 wd:Q868\n}",
        "questionWithBrackets": "Were [Georg Wilhelm Friedrich Hegel] , [Denis Diderot] , [\u00c9mile Chartier] , and [Henri Bergson] influenced by a parent of [Nicomachus] , influenced by [Benedictus de Spinoza] , and influenced by [Aristotle]"
    },
    {
        "questionIdx": 116439,
        "questionPatternModEntities": "Were M1 , M4 , M5 , and M6 influenced by M0 's parent and influenced by M2 and M3",
        "questionTemplate": "Were [entity] , [entity] , [entity] , and [entity] [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 ?x0 .\nM1 P1 M2 .\nM1 P1 M3 .\nM4 P1 ?x0 .\nM4 P1 M2 .\nM4 P1 M3 .\nM5 P1 ?x0 .\nM5 P1 M2 .\nM5 P1 M3 .\nM6 P1 ?x0 .\nM6 P1 M2 .\nM6 P1 M3\n}",
        "recursionDepth": 41,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q21914340 .\nwd:Q5685 wdt:P737 ?x0 .\nwd:Q5685 wdt:P737 wd:Q9711 .\nwd:Q5685 wdt:P737 wd:Q504 .\nwd:Q9327 wdt:P737 ?x0 .\nwd:Q9327 wdt:P737 wd:Q9711 .\nwd:Q9327 wdt:P737 wd:Q504 .\nwd:Q464207 wdt:P737 ?x0 .\nwd:Q464207 wdt:P737 wd:Q9711 .\nwd:Q464207 wdt:P737 wd:Q504 .\nwd:Q526518 wdt:P737 ?x0 .\nwd:Q526518 wdt:P737 wd:Q9711 .\nwd:Q526518 wdt:P737 wd:Q504\n}",
        "questionWithBrackets": "Were [Guy de Maupassant] , [Mihail Sadoveanu] , [Anton Chekhov] , and [Eduard Vilde] influenced by [Denise Aubert] 's parent and influenced by [Honor\u00e9 de Balzac] and [\u00c9mile Zola]"
    },
    {
        "questionIdx": 116441,
        "questionPatternModEntities": "Were M2 and M4 influenced by M3 and influenced by a German sibling of M0",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by [entity] and [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M0 ) .\nM2 P2 ?x0 .\nM2 P2 M3 .\nM4 P2 ?x0 .\nM4 P2 M3\n}",
        "recursionDepth": 38,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P27 wd:Q183 .\n?x0 wdt:P3373 wd:Q95212168 .\nFILTER ( ?x0 != wd:Q95212168 ) .\nwd:Q4119221 wdt:P737 ?x0 .\nwd:Q4119221 wdt:P737 wd:Q991 .\nwd:Q187019 wdt:P737 ?x0 .\nwd:Q187019 wdt:P737 wd:Q991\n}",
        "questionWithBrackets": "Were [Jamal Naji] and [Philip Roth] influenced by [Fyodor Dostoyevsky] and influenced by a German sibling of [Waltraud Grass]"
    },
    {
        "questionIdx": 116446,
        "questionPatternModEntities": "Were M0 , M2 , M3 , M4 , M5 , and M6 Italian",
        "questionTemplate": "Were [entity] , [entity] , [entity] , [entity] , [entity] , and [entity] [ADJECTIVE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM2 P0 M1 .\nM3 P0 M1 .\nM4 P0 M1 .\nM5 P0 M1 .\nM6 P0 M1\n}",
        "recursionDepth": 25,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q5681 wdt:P27 wd:Q38 .\nwd:Q615 wdt:P27 wd:Q38 .\nwd:Q624 wdt:P27 wd:Q38 .\nwd:Q1220 wdt:P27 wd:Q38 .\nwd:Q1228 wdt:P27 wd:Q38 .\nwd:Q1235 wdt:P27 wd:Q38\n}",
        "questionWithBrackets": "Were [Giovanni Leone] , [Lionel Messi] , [Alessandro Del Piero] , [Giorgio Napolitano] , [Oscar Luigi Scalfaro] , and [Andrea Mantegna] Italian"
    },
    {
        "questionIdx": 116447,
        "questionPatternModEntities": "Were M2 and M3 written and directed by a male spouse of M1",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] and [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M1 ) .\nM2 P2 ?x0 .\nM2 P3 ?x0 .\nM3 P2 ?x0 .\nM3 P3 ?x0\n}",
        "recursionDepth": 34,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P21 wd:Q6581097 .\n?x0 wdt:P26 wd:Q450030 .\nFILTER ( ?x0 != wd:Q450030 ) .\nwd:Q103474 wdt:P57 ?x0 .\nwd:Q103474 wdt:P58 ?x0 .\nwd:Q105702 wdt:P57 ?x0 .\nwd:Q105702 wdt:P58 ?x0\n}",
        "questionWithBrackets": "Were [2001: A Space Odyssey] and [Dr. Strangelove] written and directed by a male spouse of [Christiane Kubrick]"
    },
    {
        "questionIdx": 116448,
        "questionPatternModEntities": "Were M2 , M3 , M4 , M5 , and M6 written by M1 's male spouse",
        "questionTemplate": "Were [entity] , [entity] , [entity] , [entity] , and [entity] [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M1 ) .\nM2 P2 ?x0 .\nM3 P2 ?x0 .\nM4 P2 ?x0 .\nM5 P2 ?x0 .\nM6 P2 ?x0\n}",
        "recursionDepth": 34,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P21 wd:Q6581097 .\n?x0 wdt:P26 wd:Q450030 .\nFILTER ( ?x0 != wd:Q450030 ) .\nwd:Q181086 wdt:P58 ?x0 .\nwd:Q105702 wdt:P58 ?x0 .\nwd:Q103474 wdt:P58 ?x0 .\nwd:Q186341 wdt:P58 ?x0 .\nwd:Q221113 wdt:P58 ?x0\n}",
        "questionWithBrackets": "Were [Dr. Strangelove] , [A.I. Artificial Intelligence] , [The Shining] , [A Clockwork Orange] , and [2001: A Space Odyssey] written by [Christiane Kubrick] 's male spouse"
    },
    {
        "questionIdx": 116449,
        "questionPatternModEntities": "Were M1 , M2 , M3 , M4 , and M5 written by M0 's spouse",
        "questionTemplate": "Were [entity] , [entity] , [entity] , [entity] , and [entity] [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nM1 P1 ?x0 .\nM2 P1 ?x0 .\nM3 P1 ?x0 .\nM4 P1 ?x0 .\nM5 P1 ?x0\n}",
        "recursionDepth": 29,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P26 wd:Q32337 .\nFILTER ( ?x0 != wd:Q32337 ) .\nwd:Q2482645 wdt:P58 ?x0 .\nwd:Q166739 wdt:P58 ?x0 .\nwd:Q109116 wdt:P58 ?x0 .\nwd:Q45602 wdt:P58 ?x0 .\nwd:Q214723 wdt:P58 ?x0\n}",
        "questionWithBrackets": "Were [The Floorwalker] , [The Gold Rush] , [The Great Dictator] , [The Count] , and [Modern Times] written by [Lita Grey] 's spouse"
    },
    {
        "questionIdx": 116469,
        "questionPatternModEntities": "Were M1 , M2 , and M3 employed by M0 's child",
        "questionTemplate": "Were [entity] , [entity] , and [entity] [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 ?x0 .\nM2 P1 ?x0 .\nM3 P1 ?x0\n}",
        "recursionDepth": 23,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P749 wd:Q95 .\nwd:Q19866080 wdt:P108 ?x0 .\nwd:Q23418679 wdt:P108 ?x0 .\nwd:Q16731138 wdt:P108 ?x0\n}",
        "questionWithBrackets": "Were [Robert Kyncl] , [\u00c1ngel David Revilla Lenoci] , and [Yu Pan] employed by [Google] 's child"
    },
    {
        "questionIdx": 116471,
        "questionPatternModEntities": "Were M1 , M2 , and M3 edited by M0 's sibling",
        "questionTemplate": "Were [entity] , [entity] , and [entity] [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nM1 P1 ?x0 .\nM2 P1 ?x0 .\nM3 P1 ?x0\n}",
        "recursionDepth": 23,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P3373 wd:Q3567655 .\nFILTER ( ?x0 != wd:Q3567655 ) .\nwd:Q1152833 wdt:P1040 ?x0 .\nwd:Q45602 wdt:P1040 ?x0 .\nwd:Q214723 wdt:P1040 ?x0\n}",
        "questionWithBrackets": "Were [Modern Times] , [One A.M.] , and [The Gold Rush] edited by [Wheeler Dryden] 's sibling"
    },
    {
        "questionIdx": 116575,
        "questionPatternModEntities": "Were M2 , M3 , and M4 founded by M1 's employee 's female spouse",
        "questionTemplate": "Were [entity] , [entity] , and [entity] [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 ?x1 .\n?x1 P2 M1 .\nFILTER ( ?x0 != ?x1 ) .\nM2 P3 ?x0 .\nM3 P3 ?x0 .\nM4 P3 ?x0\n}",
        "recursionDepth": 32,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P21 wd:Q6581072 .\n?x0 wdt:P26 ?x1 .\n?x1 wdt:P108 wd:Q3483312 .\nFILTER ( ?x0 != ?x1 ) .\nwd:Q7102081 wdt:P112 ?x0 .\nwd:Q81950264 wdt:P112 ?x0 .\nwd:Q6532507 wdt:P112 ?x0\n}",
        "questionWithBrackets": "Were [Organizing for Action] , [Higher Ground Productions] , and [Let's Move!] founded by [Sidley Austin] 's employee 's female spouse"
    },
    {
        "questionIdx": 116594,
        "questionPatternModEntities": "Were M0 , M6 , and M7 written by M1 , directed by M5 , and written by M2 , M3 , and M4",
        "questionTemplate": "Were [entity] , [entity] , and [entity] [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P0 M3 .\nM0 P0 M4 .\nM0 P1 M5 .\nM6 P0 M1 .\nM6 P0 M2 .\nM6 P0 M3 .\nM6 P0 M4 .\nM6 P1 M5 .\nM7 P0 M1 .\nM7 P0 M2 .\nM7 P0 M3 .\nM7 P0 M4 .\nM7 P1 M5\n}",
        "recursionDepth": 46,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q24980 wdt:P57 wd:Q166159 .\nwd:Q24980 wdt:P58 wd:Q25014 .\nwd:Q24980 wdt:P58 wd:Q210741 .\nwd:Q24980 wdt:P58 wd:Q24962 .\nwd:Q24980 wdt:P58 wd:Q25078 .\nwd:Q24953 wdt:P57 wd:Q166159 .\nwd:Q24953 wdt:P58 wd:Q25014 .\nwd:Q24953 wdt:P58 wd:Q210741 .\nwd:Q24953 wdt:P58 wd:Q24962 .\nwd:Q24953 wdt:P58 wd:Q25078 .\nwd:Q25043 wdt:P57 wd:Q166159 .\nwd:Q25043 wdt:P58 wd:Q25014 .\nwd:Q25043 wdt:P58 wd:Q210741 .\nwd:Q25043 wdt:P58 wd:Q24962 .\nwd:Q25043 wdt:P58 wd:Q25078\n}",
        "questionWithBrackets": "Were [Monty Python's The Meaning of Life] , [Monty Python and the Holy Grail] , and [Monty Python\u2019s Life of Brian] written by [Graham Chapman] , directed by [Terry Jones] , and written by [John Cleese] , [Terry Gilliam] , and [Eric Idle]"
    },
    {
        "questionIdx": 116609,
        "questionPatternModEntities": "Were M0 and M5 executive produced by M1 , edited by M3 , written by M2 , and edited by M4",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M2 .\nM0 P2 M3 .\nM0 P2 M4 .\nM5 P0 M1 .\nM5 P1 M2 .\nM5 P2 M3 .\nM5 P2 M4\n}",
        "recursionDepth": 46,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q23781155 wdt:P1040 wd:Q11309299 .\nwd:Q23781155 wdt:P1040 wd:Q24206656 .\nwd:Q23781155 wdt:P1431 wd:Q181900 .\nwd:Q23781155 wdt:P58 wd:Q5112818 .\nwd:Q18407657 wdt:P1040 wd:Q11309299 .\nwd:Q18407657 wdt:P1040 wd:Q24206656 .\nwd:Q18407657 wdt:P1431 wd:Q181900 .\nwd:Q18407657 wdt:P58 wd:Q5112818\n}",
        "questionWithBrackets": "Were [Captain America: Civil War] and [Avengers: Endgame] executive produced by [Stan Lee] , edited by [Jeffrey Ford] , written by [Christopher Markus] , and edited by [Matthew Schmidt]"
    },
    {
        "questionIdx": 116640,
        "questionPatternModEntities": "Were M1 , M2 , M3 , M4 , M5 , and M6 founded by a parent of M0",
        "questionTemplate": "Were [entity] , [entity] , [entity] , [entity] , [entity] , and [entity] [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 ?x0 .\nM2 P1 ?x0 .\nM3 P1 ?x0 .\nM4 P1 ?x0 .\nM5 P1 ?x0 .\nM6 P1 ?x0\n}",
        "recursionDepth": 34,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q106204654 .\nwd:Q2013 wdt:P112 ?x0 .\nwd:Q565 wdt:P112 ?x0 .\nwd:Q29188397 wdt:P112 ?x0 .\nwd:Q367 wdt:P112 ?x0 .\nwd:Q151 wdt:P112 ?x0 .\nwd:Q21281283 wdt:P112 ?x0\n}",
        "questionWithBrackets": "Were [Initiative for Open Citations] , [Wiktionary] , [Wikimedia Commons] , [Wikibooks] , [Wikidata] , and [Russian Wikinews] founded by a parent of [Wikimedia, LLC]"
    },
    {
        "questionIdx": 116652,
        "questionPatternModEntities": "Were M0 , M2 , M3 , M4 , M5 , M6 , M7 , and M8 Chinese",
        "questionTemplate": "Were [entity] , [entity] , [entity] , [entity] , [entity] , [entity] , [entity] , and [entity] [ADJECTIVE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM2 P0 M1 .\nM3 P0 M1 .\nM4 P0 M1 .\nM5 P0 M1 .\nM6 P0 M1 .\nM7 P0 M1 .\nM8 P0 M1\n}",
        "recursionDepth": 31,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q26668 wdt:P27 wd:Q148 .\nwd:Q1708 wdt:P27 wd:Q148 .\nwd:Q5208 wdt:P27 wd:Q148 .\nwd:Q4931 wdt:P27 wd:Q148 .\nwd:Q6370 wdt:P27 wd:Q148 .\nwd:Q5816 wdt:P27 wd:Q148 .\nwd:Q6391 wdt:P27 wd:Q148 .\nwd:Q13005 wdt:P27 wd:Q148\n}",
        "questionWithBrackets": "Were [Chen Ding] , [Huang Xianfan] , [Ba Jin] , [Li Yanfeng] , [Wang Tao] , [Gong Lijiao] , [Raymond Chan] , and [Mao Zedong] Chinese"
    },
    {
        "questionIdx": 116669,
        "questionPatternModEntities": "Were M1 , M2 , M3 , M4 , M5 , and M6 edited by a parent of M0",
        "questionTemplate": "Were [entity] , [entity] , [entity] , [entity] , [entity] , and [entity] [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 ?x0 .\nM2 P1 ?x0 .\nM3 P1 ?x0 .\nM4 P1 ?x0 .\nM5 P1 ?x0 .\nM6 P1 ?x0\n}",
        "recursionDepth": 34,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q1620638 .\nwd:Q2296238 wdt:P1040 ?x0 .\nwd:Q1543027 wdt:P1040 ?x0 .\nwd:Q20475 wdt:P1040 ?x0 .\nwd:Q39946 wdt:P1040 ?x0 .\nwd:Q189540 wdt:P1040 ?x0 .\nwd:Q244878 wdt:P1040 ?x0\n}",
        "questionWithBrackets": "Were [Seven Samurai] , [The Hidden Fortress] , [One Wonderful Sunday] , [Madadayo] , [Yojimbo] , and [High and Low] edited by a parent of [Hisao Kurosawa]"
    },
    {
        "questionIdx": 116676,
        "questionPatternModEntities": "Were M1 , M2 , and M3 executive produced by M0 's child",
        "questionTemplate": "Were [entity] , [entity] , and [entity] [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 ?x0 .\nM2 P1 ?x0 .\nM3 P1 ?x0\n}",
        "recursionDepth": 24,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P749 wd:Q156913 .\nwd:Q18822418 wdt:P1431 ?x0 .\nwd:Q4422959 wdt:P1431 ?x0 .\nwd:Q5961863 wdt:P1431 ?x0\n}",
        "questionWithBrackets": "Were [La Voz] , [En tierra hostil] , and [La Sexta Noticias] executive produced by [Bertelsmann] 's child"
    },
    {
        "questionIdx": 116680,
        "questionPatternModEntities": "Were M1 and M5 written by M2 and M3 , directed by a sibling of M0 , and edited by M4",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by [entity] and [entity] , [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nM1 P1 M2 .\nM1 P1 M3 .\nM1 P2 M4 .\nM1 P3 ?x0 .\nM5 P1 M2 .\nM5 P1 M3 .\nM5 P2 M4 .\nM5 P3 ?x0\n}",
        "recursionDepth": 46,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P3373 wd:Q3056245 .\nFILTER ( ?x0 != wd:Q3056245 ) .\nwd:Q658944 wdt:P57 ?x0 .\nwd:Q658944 wdt:P1040 wd:Q123124 .\nwd:Q658944 wdt:P58 wd:Q223687 .\nwd:Q658944 wdt:P58 wd:Q245808 .\nwd:Q217112 wdt:P57 ?x0 .\nwd:Q217112 wdt:P1040 wd:Q123124 .\nwd:Q217112 wdt:P58 wd:Q223687 .\nwd:Q217112 wdt:P58 wd:Q245808\n}",
        "questionWithBrackets": "Were [Moonrise Kingdom] and [The Darjeeling Limited] written by [Roman Coppola] and [Wes Anderson] , directed by a sibling of [Eric Chase Anderson] , and edited by [Andrew Weisblum]"
    },
    {
        "questionIdx": 116685,
        "questionPatternModEntities": "Were M0 and M3 edited by and written by M1 and M2",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P1 M1 .\nM0 P1 M2 .\nM3 P0 M1 .\nM3 P0 M2 .\nM3 P1 M1 .\nM3 P1 M2\n}",
        "recursionDepth": 28,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q20729238 wdt:P1040 wd:Q562108 .\nwd:Q20729238 wdt:P1040 wd:Q35979475 .\nwd:Q20729238 wdt:P58 wd:Q562108 .\nwd:Q20729238 wdt:P58 wd:Q35979475 .\nwd:Q20729551 wdt:P1040 wd:Q562108 .\nwd:Q20729551 wdt:P1040 wd:Q35979475 .\nwd:Q20729551 wdt:P58 wd:Q562108 .\nwd:Q20729551 wdt:P58 wd:Q35979475\n}",
        "questionWithBrackets": "Were [Stop for Bud] and [Motion picture] edited by and written by [Ole John] and [J\u00f8rgen Leth]"
    },
    {
        "questionIdx": 116697,
        "questionPatternModEntities": "Were M1 and M2 executive produced by a child of M0",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 ?x0 .\nM2 P1 ?x0\n}",
        "recursionDepth": 23,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P749 wd:Q219635 .\nwd:Q5678600 wdt:P1431 ?x0 .\nwd:Q556507 wdt:P1431 ?x0\n}",
        "questionWithBrackets": "Were [Informativos Telecinco] and [No label defined] executive produced by a child of [BlackRock]"
    },
    {
        "questionIdx": 116709,
        "questionPatternModEntities": "Were M0 and M6 executive produced by M1 , M2 , and M3 , executive produced by M4 , and executive produced by M5",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by [entity] , [entity] , and [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P0 M3 .\nM0 P0 M4 .\nM0 P0 M5 .\nM6 P0 M1 .\nM6 P0 M2 .\nM6 P0 M3 .\nM6 P0 M4 .\nM6 P0 M5\n}",
        "recursionDepth": 46,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q7711132 wdt:P1431 wd:Q6758569 .\nwd:Q7711132 wdt:P1431 wd:Q2016115 .\nwd:Q7711132 wdt:P1431 wd:Q2910308 .\nwd:Q7711132 wdt:P1431 wd:Q5047701 .\nwd:Q7711132 wdt:P1431 wd:Q2484170 .\nwd:Q57651904 wdt:P1431 wd:Q6758569 .\nwd:Q57651904 wdt:P1431 wd:Q2016115 .\nwd:Q57651904 wdt:P1431 wd:Q2910308 .\nwd:Q57651904 wdt:P1431 wd:Q5047701 .\nwd:Q57651904 wdt:P1431 wd:Q2484170\n}",
        "questionWithBrackets": "Were [Red's Last Day] and [That '70s Pilot] executive produced by [Marcy Carsey] , [Bonnie Turner] , and [Caryn Mandabach] , executive produced by [Tom Werner] , and executive produced by [Mark Brazill]"
    },
    {
        "questionIdx": 116747,
        "questionPatternModEntities": "Were M2 and M3 written by and executive produced by a male spouse of M1",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by and [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M1 ) .\nM2 P2 ?x0 .\nM2 P3 ?x0 .\nM3 P2 ?x0 .\nM3 P3 ?x0\n}",
        "recursionDepth": 36,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P21 wd:Q6581097 .\n?x0 wdt:P26 wd:Q450030 .\nFILTER ( ?x0 != wd:Q450030 ) .\nwd:Q181086 wdt:P1431 ?x0 .\nwd:Q181086 wdt:P58 ?x0 .\nwd:Q209481 wdt:P1431 ?x0 .\nwd:Q209481 wdt:P58 ?x0\n}",
        "questionWithBrackets": "Were [A Clockwork Orange] and [Eyes Wide Shut] written by and executive produced by a male spouse of [Christiane Kubrick]"
    },
    {
        "questionIdx": 116756,
        "questionPatternModEntities": "Were M0 , M2 , and M3 produced by , edited by , written by , directed by , and executive produced by M1",
        "questionTemplate": "Were [entity] , [entity] , and [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1 .\nM0 P2 M1 .\nM0 P3 M1 .\nM0 P4 M1 .\nM2 P0 M1 .\nM2 P1 M1 .\nM2 P2 M1 .\nM2 P3 M1 .\nM2 P4 M1 .\nM3 P0 M1 .\nM3 P1 M1 .\nM3 P2 M1 .\nM3 P3 M1 .\nM3 P4 M1\n}",
        "recursionDepth": 46,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q5437360 wdt:P57 wd:Q187261 .\nwd:Q5437360 wdt:P1040 wd:Q187261 .\nwd:Q5437360 wdt:P1431 wd:Q187261 .\nwd:Q5437360 wdt:P162|wdt:P272 wd:Q187261 .\nwd:Q5437360 wdt:P58 wd:Q187261 .\nwd:Q12813010 wdt:P57 wd:Q187261 .\nwd:Q12813010 wdt:P1040 wd:Q187261 .\nwd:Q12813010 wdt:P1431 wd:Q187261 .\nwd:Q12813010 wdt:P162|wdt:P272 wd:Q187261 .\nwd:Q12813010 wdt:P58 wd:Q187261 .\nwd:Q6084069 wdt:P57 wd:Q187261 .\nwd:Q6084069 wdt:P1040 wd:Q187261 .\nwd:Q6084069 wdt:P1431 wd:Q187261 .\nwd:Q6084069 wdt:P162|wdt:P272 wd:Q187261 .\nwd:Q6084069 wdt:P58 wd:Q187261\n}",
        "questionWithBrackets": "Were [Fate] , [The Waiting Room] , and [The Confession] produced by , edited by , written by , directed by , and executive produced by [Zeki Demirkubuz]"
    },
    {
        "questionIdx": 116794,
        "questionPatternModEntities": "Were M0 and M2 executive produced by and produced by M1",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1 .\nM2 P0 M1 .\nM2 P1 M1\n}",
        "recursionDepth": 25,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q44408 wdt:P1431 wd:Q38222 .\nwd:Q44408 wdt:P162|wdt:P272 wd:Q38222 .\nwd:Q472096 wdt:P1431 wd:Q38222 .\nwd:Q472096 wdt:P162|wdt:P272 wd:Q38222\n}",
        "questionWithBrackets": "Were [Body Heat] and [Captain EO] executive produced by and produced by [George Lucas]"
    },
    {
        "questionIdx": 116802,
        "questionPatternModEntities": "Were M0 , M5 , M6 , and M7 executive produced by M1 and M2 , edited by M3 , and directed by M4",
        "questionTemplate": "Were [entity] , [entity] , [entity] , and [entity] [VP_SIMPLE] by [entity] and [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P1 M3 .\nM0 P2 M4 .\nM5 P0 M1 .\nM5 P0 M2 .\nM5 P1 M3 .\nM5 P2 M4 .\nM6 P0 M1 .\nM6 P0 M2 .\nM6 P1 M3 .\nM6 P2 M4 .\nM7 P0 M1 .\nM7 P0 M2 .\nM7 P1 M3 .\nM7 P2 M4\n}",
        "recursionDepth": 47,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q54274 wdt:P57 wd:Q295463 .\nwd:Q54274 wdt:P1040 wd:Q1138711 .\nwd:Q54274 wdt:P1431 wd:Q24809564 .\nwd:Q54274 wdt:P1431 wd:Q24809566 .\nwd:Q548919 wdt:P57 wd:Q295463 .\nwd:Q548919 wdt:P1040 wd:Q1138711 .\nwd:Q548919 wdt:P1431 wd:Q24809564 .\nwd:Q548919 wdt:P1431 wd:Q24809566 .\nwd:Q46717 wdt:P57 wd:Q295463 .\nwd:Q46717 wdt:P1040 wd:Q1138711 .\nwd:Q46717 wdt:P1431 wd:Q24809564 .\nwd:Q46717 wdt:P1431 wd:Q24809566 .\nwd:Q161087 wdt:P57 wd:Q295463 .\nwd:Q161087 wdt:P1040 wd:Q1138711 .\nwd:Q161087 wdt:P1431 wd:Q24809564 .\nwd:Q161087 wdt:P1431 wd:Q24809566\n}",
        "questionWithBrackets": "Were [Pirates of the Caribbean: Dead Man's Chest] , [Pirates of the Caribbean: At World's End] , [The Lone Ranger] , and [Pirates of the Caribbean: The Curse of the Black Pearl] executive produced by [Mike Stenson] and [Chad Oman] , edited by [Craig Wood] , and directed by [Gore Verbinski]"
    },
    {
        "questionIdx": 116807,
        "questionPatternModEntities": "Were M2 and M5 founded by M3 and M4 and founded by a German sibling of M0",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by [entity] and [entity] and [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M0 ) .\nM2 P2 ?x0 .\nM2 P2 M3 .\nM2 P2 M4 .\nM5 P2 ?x0 .\nM5 P2 M3 .\nM5 P2 M4\n}",
        "recursionDepth": 42,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P27 wd:Q183 .\n?x0 wdt:P3373 wd:Q70895 .\nFILTER ( ?x0 != wd:Q70895 ) .\nwd:Q156607 wdt:P112 ?x0 .\nwd:Q156607 wdt:P112 wd:Q7231 .\nwd:Q156607 wdt:P112 wd:Q75886 .\nwd:Q153401 wdt:P112 ?x0 .\nwd:Q153401 wdt:P112 wd:Q7231 .\nwd:Q153401 wdt:P112 wd:Q75886\n}",
        "questionWithBrackets": "Were [Communist Party of Germany] and [Spartacus League] founded by [Rosa Luxemburg] and [Karl Liebknecht] and founded by a German sibling of [Theodor Liebknecht]"
    },
    {
        "questionIdx": 116847,
        "questionPatternModEntities": "Were M0 and M4 written by M1 , M2 , and M3",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P0 M3 .\nM4 P0 M1 .\nM4 P0 M2 .\nM4 P0 M3\n}",
        "recursionDepth": 23,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q28865118 wdt:P58 wd:Q2593 .\nwd:Q28865118 wdt:P58 wd:Q7475875 .\nwd:Q28865118 wdt:P58 wd:Q32661 .\nwd:Q223596 wdt:P58 wd:Q2593 .\nwd:Q223596 wdt:P58 wd:Q7475875 .\nwd:Q223596 wdt:P58 wd:Q32661\n}",
        "questionWithBrackets": "Were [X-Men: First Class] and [X-Men Beginnings] written by [Matthew Vaughn] , [Zack Stentz] , and [Jane Goldman]"
    },
    {
        "questionIdx": 116857,
        "questionPatternModEntities": "Were M1 and M2 influenced by a spouse of M0",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nM1 P1 ?x0 .\nM2 P1 ?x0\n}",
        "recursionDepth": 22,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P26 wd:Q237251 .\nFILTER ( ?x0 != wd:Q237251 ) .\nwd:Q37767 wdt:P737 ?x0 .\nwd:Q991 wdt:P737 ?x0\n}",
        "questionWithBrackets": "Were [T.\u00a0S. Eliot] and [Fyodor Dostoyevsky] influenced by a spouse of [Anne Hathaway]"
    },
    {
        "questionIdx": 116880,
        "questionPatternModEntities": "Were M0 and M2 edited and executive produced by M1",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1 .\nM2 P0 M1 .\nM2 P1 M1\n}",
        "recursionDepth": 24,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q181803 wdt:P1040 wd:Q38222 .\nwd:Q181803 wdt:P1431 wd:Q38222 .\nwd:Q17738 wdt:P1040 wd:Q38222 .\nwd:Q17738 wdt:P1431 wd:Q38222\n}",
        "questionWithBrackets": "Were [Star Wars: Episode IV \u2013 A New Hope] and [Star Wars: Episode VI \u2013 Return of the Jedi] edited and executive produced by [George Lucas]"
    },
    {
        "questionIdx": 116883,
        "questionPatternModEntities": "Were M1 , M3 , M4 , M5 , and M6 influenced by M2 and influenced by M0 's spouse",
        "questionTemplate": "Were [entity] , [entity] , [entity] , [entity] , and [entity] [VP_SIMPLE] by [entity] and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nM1 P1 ?x0 .\nM1 P1 M2 .\nM3 P1 ?x0 .\nM3 P1 M2 .\nM4 P1 ?x0 .\nM4 P1 M2 .\nM5 P1 ?x0 .\nM5 P1 M2 .\nM6 P1 ?x0 .\nM6 P1 M2\n}",
        "recursionDepth": 40,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P26 wd:Q2825429 .\nFILTER ( ?x0 != wd:Q2825429 ) .\nwd:Q501 wdt:P737 ?x0 .\nwd:Q501 wdt:P737 wd:Q535 .\nwd:Q7243 wdt:P737 ?x0 .\nwd:Q7243 wdt:P737 wd:Q535 .\nwd:Q47484 wdt:P737 ?x0 .\nwd:Q47484 wdt:P737 wd:Q535 .\nwd:Q33977 wdt:P737 ?x0 .\nwd:Q33977 wdt:P737 wd:Q535 .\nwd:Q449538 wdt:P737 ?x0 .\nwd:Q449538 wdt:P737 wd:Q535\n}",
        "questionWithBrackets": "Were [Charles Baudelaire] , [Leo Tolstoy] , [Alexander Zinoviev] , [Andr\u00e9 Gide] , and [Jules Verne] influenced by [Victor Hugo] and influenced by [Ad\u00e8le Foucher] 's spouse"
    },
    {
        "questionIdx": 116898,
        "questionPatternModEntities": "Were M0 , M3 , and M4 edited and directed by M1 and M2",
        "questionTemplate": "Were [entity] , [entity] , and [entity] [VP_SIMPLE] and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P1 M1 .\nM0 P1 M2 .\nM3 P0 M1 .\nM3 P0 M2 .\nM3 P1 M1 .\nM3 P1 M2 .\nM4 P0 M1 .\nM4 P0 M2 .\nM4 P1 M1 .\nM4 P1 M2\n}",
        "recursionDepth": 30,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q20757119 wdt:P57 wd:Q562108 .\nwd:Q20757119 wdt:P57 wd:Q35979475 .\nwd:Q20757119 wdt:P1040 wd:Q562108 .\nwd:Q20757119 wdt:P1040 wd:Q35979475 .\nwd:Q19827613 wdt:P57 wd:Q562108 .\nwd:Q19827613 wdt:P57 wd:Q35979475 .\nwd:Q19827613 wdt:P1040 wd:Q562108 .\nwd:Q19827613 wdt:P1040 wd:Q35979475 .\nwd:Q20729238 wdt:P57 wd:Q562108 .\nwd:Q20729238 wdt:P57 wd:Q35979475 .\nwd:Q20729238 wdt:P1040 wd:Q562108 .\nwd:Q20729238 wdt:P1040 wd:Q35979475\n}",
        "questionWithBrackets": "Were [Motion picture] , [No label defined] , and [Near Heaven, Near Earth] edited and directed by [J\u00f8rgen Leth] and [Ole John]"
    },
    {
        "questionIdx": 116902,
        "questionPatternModEntities": "Were M0 and M2 written , executive produced , and produced by M1",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1 .\nM0 P2 M1 .\nM2 P0 M1 .\nM2 P1 M1 .\nM2 P2 M1\n}",
        "recursionDepth": 29,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q17738 wdt:P1431 wd:Q38222 .\nwd:Q17738 wdt:P162|wdt:P272 wd:Q38222 .\nwd:Q17738 wdt:P58 wd:Q38222 .\nwd:Q515931 wdt:P1431 wd:Q38222 .\nwd:Q515931 wdt:P162|wdt:P272 wd:Q38222 .\nwd:Q515931 wdt:P58 wd:Q38222\n}",
        "questionWithBrackets": "Were [Willow] and [Star Wars: Episode IV \u2013 A New Hope] written , executive produced , and produced by [George Lucas]"
    },
    {
        "questionIdx": 116907,
        "questionPatternModEntities": "Were M0 and M2 executive produced , written , and directed by M1",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1 .\nM0 P2 M1 .\nM2 P0 M1 .\nM2 P1 M1 .\nM2 P2 M1\n}",
        "recursionDepth": 29,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q165713 wdt:P57 wd:Q38222 .\nwd:Q165713 wdt:P1431 wd:Q38222 .\nwd:Q165713 wdt:P58 wd:Q38222 .\nwd:Q17738 wdt:P57 wd:Q38222 .\nwd:Q17738 wdt:P1431 wd:Q38222 .\nwd:Q17738 wdt:P58 wd:Q38222\n}",
        "questionWithBrackets": "Were [Star Wars: Episode IV \u2013 A New Hope] and [Star Wars: Episode I \u2013 The Phantom Menace] executive produced , written , and directed by [George Lucas]"
    },
    {
        "questionIdx": 116921,
        "questionPatternModEntities": "Were M0 , M2 , M3 , and M4 written , directed , and executive produced by M1",
        "questionTemplate": "Were [entity] , [entity] , [entity] , and [entity] [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1 .\nM0 P2 M1 .\nM2 P0 M1 .\nM2 P1 M1 .\nM2 P2 M1 .\nM3 P0 M1 .\nM3 P1 M1 .\nM3 P2 M1 .\nM4 P0 M1 .\nM4 P1 M1 .\nM4 P2 M1\n}",
        "recursionDepth": 35,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q3707071 wdt:P57 wd:Q85134 .\nwd:Q3707071 wdt:P1431 wd:Q85134 .\nwd:Q3707071 wdt:P58 wd:Q85134 .\nwd:Q3707067 wdt:P57 wd:Q85134 .\nwd:Q3707067 wdt:P1431 wd:Q85134 .\nwd:Q3707067 wdt:P58 wd:Q85134 .\nwd:Q3707065 wdt:P57 wd:Q85134 .\nwd:Q3707065 wdt:P1431 wd:Q85134 .\nwd:Q3707065 wdt:P58 wd:Q85134 .\nwd:Q3707064 wdt:P57 wd:Q85134 .\nwd:Q3707064 wdt:P1431 wd:Q85134 .\nwd:Q3707064 wdt:P58 wd:Q85134\n}",
        "questionWithBrackets": "Were [No label defined] , [No label defined] , [No label defined] , and [No label defined] written , directed , and executive produced by [Joe May]"
    },
    {
        "questionIdx": 117054,
        "questionPatternModEntities": "Were M1 and M5 influenced by M2 and M3 , influenced by a spouse of M0 , and influenced by M4",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by [entity] and [entity] , [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nM1 P1 ?x0 .\nM1 P1 M2 .\nM1 P1 M3 .\nM1 P1 M4 .\nM5 P1 ?x0 .\nM5 P1 M2 .\nM5 P1 M3 .\nM5 P1 M4\n}",
        "recursionDepth": 46,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P26 wd:Q5045345 .\nFILTER ( ?x0 != wd:Q5045345 ) .\nwd:Q5928 wdt:P737 ?x0 .\nwd:Q5928 wdt:P737 wd:Q203736 .\nwd:Q5928 wdt:P737 wd:Q392 .\nwd:Q5928 wdt:P737 wd:Q93346 .\nwd:Q1407424 wdt:P737 ?x0 .\nwd:Q1407424 wdt:P737 wd:Q203736 .\nwd:Q1407424 wdt:P737 wd:Q392 .\nwd:Q1407424 wdt:P737 wd:Q93346\n}",
        "questionWithBrackets": "Were [The Jimi Hendrix Experience] and [Jimi Hendrix] influenced by [Cream] and [The Who] , influenced by a spouse of [Carolyn Dennis] , and influenced by [Bob Dylan]"
    },
    {
        "questionIdx": 117070,
        "questionPatternModEntities": "Were M2 and M4 influenced by M3 and influenced by M0 's Dutch sibling",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by [entity] and [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M0 ) .\nM2 P2 ?x0 .\nM2 P2 M3 .\nM4 P2 ?x0 .\nM4 P2 M3\n}",
        "recursionDepth": 36,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P27 wd:Q29999 .\n?x0 wdt:P3373 wd:Q317188 .\nFILTER ( ?x0 != wd:Q317188 ) .\nwd:Q5859455 wdt:P737 ?x0 .\nwd:Q5859455 wdt:P737 wd:Q5582 .\nwd:Q44054 wdt:P737 ?x0 .\nwd:Q44054 wdt:P737 wd:Q5582\n}",
        "questionWithBrackets": "Were [Franz Marc] and [Fernando Delapuente] influenced by [Vincent van Gogh] and influenced by [Theo van Gogh] 's Dutch sibling"
    },
    {
        "questionIdx": 117161,
        "questionPatternModEntities": "Were M0 and M2 produced , executive produced , and edited by M1",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1 .\nM0 P2 M1 .\nM2 P0 M1 .\nM2 P1 M1 .\nM2 P2 M1\n}",
        "recursionDepth": 29,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q13471372 wdt:P1040 wd:Q212990 .\nwd:Q13471372 wdt:P1431 wd:Q212990 .\nwd:Q13471372 wdt:P162|wdt:P272 wd:Q212990 .\nwd:Q483197 wdt:P1040 wd:Q212990 .\nwd:Q483197 wdt:P1431 wd:Q212990 .\nwd:Q483197 wdt:P162|wdt:P272 wd:Q212990\n}",
        "questionWithBrackets": "Were [Moebius] and [Piet\u00e0] produced , executive produced , and edited by [Kim Ki-duk]"
    },
    {
        "questionIdx": 117182,
        "questionPatternModEntities": "Were M0 , M3 , M4 , and M5 founded by M1 and M2",
        "questionTemplate": "Were [entity] , [entity] , [entity] , and [entity] [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM3 P0 M1 .\nM3 P0 M2 .\nM4 P0 M1 .\nM4 P0 M2 .\nM5 P0 M1 .\nM5 P0 M2\n}",
        "recursionDepth": 26,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q146905 wdt:P112 wd:Q30 .\nwd:Q146905 wdt:P112 wd:Q145 .\nwd:Q1065 wdt:P112 wd:Q30 .\nwd:Q1065 wdt:P112 wd:Q145 .\nwd:Q673158 wdt:P112 wd:Q30 .\nwd:Q673158 wdt:P112 wd:Q145 .\nwd:Q782942 wdt:P112 wd:Q30 .\nwd:Q782942 wdt:P112 wd:Q145\n}",
        "questionWithBrackets": "Were [Zangger Committee] , [Australia Group] , [Wassenaar Arrangement] , and [United Nations] founded by m.07ssc and [United States of America]"
    },
    {
        "questionIdx": 117270,
        "questionPatternModEntities": "Were M0 and M2 Mexican",
        "questionTemplate": "Were [entity] and [entity] [ADJECTIVE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM2 P0 M1\n}",
        "recursionDepth": 13,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q250040 wdt:P27 wd:Q96 .\nwd:Q1940 wdt:P27 wd:Q96\n}",
        "questionWithBrackets": "Were [Andr\u00e9-Pierre Gignac] and [Stephen F. Austin] Mexican"
    },
    {
        "questionIdx": 117361,
        "questionPatternModEntities": "Were M2 and M3 edited by , produced by , and directed by a Italian spouse of M1",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M1 ) .\nM2 P2 ?x0 .\nM2 P3 ?x0 .\nM2 P4 ?x0 .\nM3 P2 ?x0 .\nM3 P3 ?x0 .\nM3 P4 ?x0\n}",
        "recursionDepth": 41,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P27 wd:Q38 .\n?x0 wdt:P26 wd:Q287976 .\nFILTER ( ?x0 != wd:Q287976 ) .\nwd:Q1106556 wdt:P57 ?x0 .\nwd:Q1106556 wdt:P1040 ?x0 .\nwd:Q1106556 wdt:P162|wdt:P272 ?x0 .\nwd:Q3760843 wdt:P57 ?x0 .\nwd:Q3760843 wdt:P1040 ?x0 .\nwd:Q3760843 wdt:P162|wdt:P272 ?x0\n}",
        "questionWithBrackets": "Were [Geppo il folle] and [Yuppi du] edited by , produced by , and directed by a Italian spouse of [Claudia Mori]"
    },
    {
        "questionIdx": 117383,
        "questionPatternModEntities": "Were M0 , M4 , M5 , and M6 edited by M3 , executive produced by M1 , and executive produced by M2",
        "questionTemplate": "Were [entity] , [entity] , [entity] , and [entity] [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P1 M3 .\nM4 P0 M1 .\nM4 P0 M2 .\nM4 P1 M3 .\nM5 P0 M1 .\nM5 P0 M2 .\nM5 P1 M3 .\nM6 P0 M1 .\nM6 P0 M2 .\nM6 P1 M3\n}",
        "recursionDepth": 44,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q23010088 wdt:P1040 wd:Q3013121 .\nwd:Q23010088 wdt:P1431 wd:Q181900 .\nwd:Q23010088 wdt:P1431 wd:Q23409539 .\nwd:Q192724 wdt:P1040 wd:Q3013121 .\nwd:Q192724 wdt:P1431 wd:Q181900 .\nwd:Q192724 wdt:P1431 wd:Q23409539 .\nwd:Q205028 wdt:P1040 wd:Q3013121 .\nwd:Q205028 wdt:P1431 wd:Q181900 .\nwd:Q205028 wdt:P1431 wd:Q23409539 .\nwd:Q5901134 wdt:P1040 wd:Q3013121 .\nwd:Q5901134 wdt:P1431 wd:Q181900 .\nwd:Q5901134 wdt:P1431 wd:Q23409539\n}",
        "questionWithBrackets": "Were [Iron Man] , [Ant-Man] , [Iron Man 2] , and [Spider-Man: Homecoming] edited by [Dan Lebental] , executive produced by [Louis D'Esposito] , and executive produced by [Stan Lee]"
    },
    {
        "questionIdx": 117405,
        "questionPatternModEntities": "Were M4 and M5 written by and directed by a Japanese employee of M0 , M1 , and M2",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by and [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P1 M3 .\nM4 P2 ?x0 .\nM4 P3 ?x0 .\nM5 P2 ?x0 .\nM5 P3 ?x0\n}",
        "recursionDepth": 42,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P108 wd:Q1136386 .\n?x0 wdt:P108 wd:Q1054807 .\n?x0 wdt:P108 wd:Q730179 .\n?x0 wdt:P27 wd:Q17 .\nwd:Q196602 wdt:P57 ?x0 .\nwd:Q196602 wdt:P58 ?x0 .\nwd:Q29011 wdt:P57 ?x0 .\nwd:Q29011 wdt:P58 ?x0\n}",
        "questionWithBrackets": "Were [Kiki's Delivery Service] and [Howl's Moving Castle] written by and directed by a Japanese employee of [Toei Animation] , [TMS Entertainment] , and [Shin-Ei Animation]"
    },
    {
        "questionIdx": 117423,
        "questionPatternModEntities": "Were M2 , M5 , and M6 executive produced by M3 and M4 and executive produced by M0 's female employee",
        "questionTemplate": "Were [entity] , [entity] , and [entity] [VP_SIMPLE] by [entity] and [entity] and [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nM2 P2 ?x0 .\nM2 P2 M3 .\nM2 P2 M4 .\nM5 P2 ?x0 .\nM5 P2 M3 .\nM5 P2 M4 .\nM6 P2 ?x0 .\nM6 P2 M3 .\nM6 P2 M4\n}",
        "recursionDepth": 45,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P108 wd:Q9531 .\n?x0 wdt:P21 wd:Q6581072 .\nwd:Q2075057 wdt:P1431 ?x0 .\nwd:Q2075057 wdt:P1431 wd:Q361981 .\nwd:Q2075057 wdt:P1431 wd:Q1800397 .\nwd:Q3528925 wdt:P1431 ?x0 .\nwd:Q3528925 wdt:P1431 wd:Q361981 .\nwd:Q3528925 wdt:P1431 wd:Q1800397 .\nwd:Q3024843 wdt:P1431 ?x0 .\nwd:Q3024843 wdt:P1431 wd:Q361981 .\nwd:Q3024843 wdt:P1431 wd:Q1800397\n}",
        "questionWithBrackets": "Were [Time Crash] , [Utopia] , and [Planet of the Dead] executive produced by [Julie Gardner] and [Russell T Davies] and executive produced by [BBC] 's female employee"
    },
    {
        "questionIdx": 117460,
        "questionPatternModEntities": "Were M1 and M4 executive produced by M2 , directed by a sibling of M0 , and executive produced by M3",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by [entity] , [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nM1 P1 M2 .\nM1 P1 M3 .\nM1 P2 ?x0 .\nM4 P1 M2 .\nM4 P1 M3 .\nM4 P2 ?x0\n}",
        "recursionDepth": 44,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P3373 wd:Q104373781 .\nFILTER ( ?x0 != wd:Q104373781 ) .\nwd:Q1140578 wdt:P57 ?x0 .\nwd:Q1140578 wdt:P1431 wd:Q2071 .\nwd:Q1140578 wdt:P1431 wd:Q778585 .\nwd:Q2085 wdt:P57 ?x0 .\nwd:Q2085 wdt:P1431 wd:Q2071 .\nwd:Q2085 wdt:P1431 wd:Q778585\n}",
        "questionWithBrackets": "Were [Twin Peaks] and [Twin Peaks: Fire Walk with Me] executive produced by [Mark Frost] , directed by a sibling of [John Lynch] , and executive produced by [David Lynch]"
    },
    {
        "questionIdx": 117504,
        "questionPatternModEntities": "Were M2 , M3 , M4 , and M5 produced by and edited by a Japanese spouse of M1",
        "questionTemplate": "Were [entity] , [entity] , [entity] , and [entity] [VP_SIMPLE] by and [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M1 ) .\nM2 P2 ?x0 .\nM2 P3 ?x0 .\nM3 P2 ?x0 .\nM3 P3 ?x0 .\nM4 P2 ?x0 .\nM4 P3 ?x0 .\nM5 P2 ?x0 .\nM5 P3 ?x0\n}",
        "recursionDepth": 41,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P27 wd:Q17 .\n?x0 wdt:P26 wd:Q3032150 .\nFILTER ( ?x0 != wd:Q3032150 ) .\nwd:Q1077915 wdt:P1040 ?x0 .\nwd:Q1077915 wdt:P162|wdt:P272 ?x0 .\nwd:Q1475995 wdt:P1040 ?x0 .\nwd:Q1475995 wdt:P162|wdt:P272 ?x0 .\nwd:Q39946 wdt:P1040 ?x0 .\nwd:Q39946 wdt:P162|wdt:P272 ?x0 .\nwd:Q854990 wdt:P1040 ?x0 .\nwd:Q854990 wdt:P162|wdt:P272 ?x0\n}",
        "questionWithBrackets": "Were [The Hidden Fortress] , [The Lower Depths] , [Kagemusha] , and [Sanshiro Sugata] produced by and edited by a Japanese spouse of [Y\u014dko Yaguchi]"
    },
    {
        "questionIdx": 117513,
        "questionPatternModEntities": "Were M1 , M2 , M3 , and M4 influenced by M0 's parent",
        "questionTemplate": "Were [entity] , [entity] , [entity] , and [entity] [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 ?x0 .\nM2 P1 ?x0 .\nM3 P1 ?x0 .\nM4 P1 ?x0\n}",
        "recursionDepth": 26,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q10862805 .\nwd:Q13677316 wdt:P737 ?x0 .\nwd:Q3130641 wdt:P737 ?x0 .\nwd:Q45205 wdt:P737 ?x0 .\nwd:Q61064 wdt:P737 ?x0\n}",
        "questionWithBrackets": "Were [Raoul Dufy] , [Henri Beau] , [Paolo Salvati] , and [Wassily Kandinsky] influenced by [Jean Monet] 's parent"
    },
    {
        "questionIdx": 117566,
        "questionPatternModEntities": "Were M2 and M3 executive produced and directed by M1 's spouse 's male sibling",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x0 P1 M0 .\n?x1 P2 M1 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x1 != M1 ) .\nM2 P3 ?x0 .\nM2 P4 ?x0 .\nM3 P3 ?x0 .\nM3 P4 ?x0\n}",
        "recursionDepth": 37,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P21 wd:Q6581097 .\n?x0 wdt:P3373 ?x1 .\n?x1 wdt:P26 wd:Q15429067 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x1 != wd:Q15429067 ) .\nwd:Q128518 wdt:P57 ?x0 .\nwd:Q128518 wdt:P1431 ?x0 .\nwd:Q207698 wdt:P57 ?x0 .\nwd:Q207698 wdt:P1431 ?x0\n}",
        "questionWithBrackets": "Were [Gladiator] and [Kingdom of Heaven] executive produced and directed by [Gerry Scott] 's spouse 's male sibling"
    },
    {
        "questionIdx": 117579,
        "questionPatternModEntities": "Were M3 and M5 written by M0 's female American employee 's sibling 's sibling and directed by M4",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE] and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x1 P0 ?x2 .\n?x2 P1 M0 .\n?x2 P2 M1 .\n?x2 P3 M2 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x1 != ?x2 ) .\nM3 P4 ?x0 .\nM3 P5 M4 .\nM5 P4 ?x0 .\nM5 P5 M4\n}",
        "recursionDepth": 49,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P3373 ?x1 .\n?x1 wdt:P3373 ?x2 .\n?x2 wdt:P108 wd:Q847743 .\n?x2 wdt:P21 wd:Q6581072 .\n?x2 wdt:P27 wd:Q30 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x1 != ?x2 ) .\nwd:Q946478 wdt:P57 wd:Q1744 .\nwd:Q946478 wdt:P58 ?x0 .\nwd:Q1235550 wdt:P57 wd:Q1744 .\nwd:Q1235550 wdt:P58 ?x0\n}",
        "questionWithBrackets": "Were [Filth and Wisdom] and [W.E.] written by [Dunkin'] 's female American employee 's sibling 's sibling and directed by [Madonna]"
    },
    {
        "questionIdx": 117586,
        "questionPatternModEntities": "Were M0 and M3 edited by , written by , and produced by M1 and M2",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P1 M1 .\nM0 P1 M2 .\nM0 P2 M1 .\nM0 P2 M2 .\nM3 P0 M1 .\nM3 P0 M2 .\nM3 P1 M1 .\nM3 P1 M2 .\nM3 P2 M1 .\nM3 P2 M2\n}",
        "recursionDepth": 34,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q20729238 wdt:P1040 wd:Q562108 .\nwd:Q20729238 wdt:P1040 wd:Q35979475 .\nwd:Q20729238 wdt:P162|wdt:P272 wd:Q562108 .\nwd:Q20729238 wdt:P162|wdt:P272 wd:Q35979475 .\nwd:Q20729238 wdt:P58 wd:Q562108 .\nwd:Q20729238 wdt:P58 wd:Q35979475 .\nwd:Q20729551 wdt:P1040 wd:Q562108 .\nwd:Q20729551 wdt:P1040 wd:Q35979475 .\nwd:Q20729551 wdt:P162|wdt:P272 wd:Q562108 .\nwd:Q20729551 wdt:P162|wdt:P272 wd:Q35979475 .\nwd:Q20729551 wdt:P58 wd:Q562108 .\nwd:Q20729551 wdt:P58 wd:Q35979475\n}",
        "questionWithBrackets": "Were [Stop for Bud] and [Motion picture] edited by , written by , and produced by [Ole John] and [J\u00f8rgen Leth]"
    },
    {
        "questionIdx": 117595,
        "questionPatternModEntities": "Were M1 , M3 , M4 , M5 , and M6 edited by a spouse of M0 and edited by M2",
        "questionTemplate": "Were [entity] , [entity] , [entity] , [entity] , and [entity] [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity] and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nM1 P1 ?x0 .\nM1 P1 M2 .\nM3 P1 ?x0 .\nM3 P1 M2 .\nM4 P1 ?x0 .\nM4 P1 M2 .\nM5 P1 ?x0 .\nM5 P1 M2 .\nM6 P1 ?x0 .\nM6 P1 M2\n}",
        "recursionDepth": 42,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P26 wd:Q1252342 .\nFILTER ( ?x0 != wd:Q1252342 ) .\nwd:Q228186 wdt:P1040 ?x0 .\nwd:Q228186 wdt:P1040 wd:Q31294 .\nwd:Q325575 wdt:P1040 ?x0 .\nwd:Q325575 wdt:P1040 wd:Q31294 .\nwd:Q58972 wdt:P1040 ?x0 .\nwd:Q58972 wdt:P1040 wd:Q31294 .\nwd:Q261601 wdt:P1040 ?x0 .\nwd:Q261601 wdt:P1040 wd:Q31294 .\nwd:Q220955 wdt:P1040 ?x0 .\nwd:Q220955 wdt:P1040 wd:Q31294\n}",
        "questionWithBrackets": "Were [Erin Brockovich] , [Lawrence of Arabia] , [Masters of the Universe] , [Raw Deal] , and [Sweet November] edited by a spouse of [Douglas Hickox] and edited by [Anne V. Coates]"
    },
    {
        "questionIdx": 117608,
        "questionPatternModEntities": "Were M2 , M4 , M5 , and M6 edited by M3 and executive produced by M0 's American sibling",
        "questionTemplate": "Were [entity] , [entity] , [entity] , and [entity] [VP_SIMPLE] by [entity] and [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M0 ) .\nM2 P2 ?x0 .\nM2 P3 M3 .\nM4 P2 ?x0 .\nM4 P3 M3 .\nM5 P2 ?x0 .\nM5 P3 M3 .\nM6 P2 ?x0 .\nM6 P3 M3\n}",
        "recursionDepth": 43,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P27 wd:Q30 .\n?x0 wdt:P3373 wd:Q108622 .\nFILTER ( ?x0 != wd:Q108622 ) .\nwd:Q829695 wdt:P1040 wd:Q3473349 .\nwd:Q829695 wdt:P1431 ?x0 .\nwd:Q1338368 wdt:P1040 wd:Q3473349 .\nwd:Q1338368 wdt:P1431 ?x0 .\nwd:Q3077738 wdt:P1040 wd:Q3473349 .\nwd:Q3077738 wdt:P1431 ?x0 .\nwd:Q107270 wdt:P1040 wd:Q3473349 .\nwd:Q107270 wdt:P1431 ?x0\n}",
        "questionWithBrackets": "Were [The Bling Ring] , [Marie Antoinette] , [Somewhere] , and [Lost in Translation] edited by [Sarah Flack] and executive produced by [Talia Shire] 's American sibling"
    },
    {
        "questionIdx": 117615,
        "questionPatternModEntities": "Were M0 and M3 edited and written by M1 and M2",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P1 M1 .\nM0 P1 M2 .\nM3 P0 M1 .\nM3 P0 M2 .\nM3 P1 M1 .\nM3 P1 M2\n}",
        "recursionDepth": 27,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q20757119 wdt:P1040 wd:Q562108 .\nwd:Q20757119 wdt:P1040 wd:Q35979475 .\nwd:Q20757119 wdt:P58 wd:Q562108 .\nwd:Q20757119 wdt:P58 wd:Q35979475 .\nwd:Q20729238 wdt:P1040 wd:Q562108 .\nwd:Q20729238 wdt:P1040 wd:Q35979475 .\nwd:Q20729238 wdt:P58 wd:Q562108 .\nwd:Q20729238 wdt:P58 wd:Q35979475\n}",
        "questionWithBrackets": "Were [Motion picture] and [No label defined] edited and written by [J\u00f8rgen Leth] and [Ole John]"
    },
    {
        "questionIdx": 117616,
        "questionPatternModEntities": "Were M0 and M3 written by , produced by , and edited by M1 and M2",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P1 M1 .\nM0 P1 M2 .\nM0 P2 M1 .\nM0 P2 M2 .\nM3 P0 M1 .\nM3 P0 M2 .\nM3 P1 M1 .\nM3 P1 M2 .\nM3 P2 M1 .\nM3 P2 M2\n}",
        "recursionDepth": 34,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q20729238 wdt:P1040 wd:Q562108 .\nwd:Q20729238 wdt:P1040 wd:Q35979475 .\nwd:Q20729238 wdt:P162|wdt:P272 wd:Q562108 .\nwd:Q20729238 wdt:P162|wdt:P272 wd:Q35979475 .\nwd:Q20729238 wdt:P58 wd:Q562108 .\nwd:Q20729238 wdt:P58 wd:Q35979475 .\nwd:Q20729551 wdt:P1040 wd:Q562108 .\nwd:Q20729551 wdt:P1040 wd:Q35979475 .\nwd:Q20729551 wdt:P162|wdt:P272 wd:Q562108 .\nwd:Q20729551 wdt:P162|wdt:P272 wd:Q35979475 .\nwd:Q20729551 wdt:P58 wd:Q562108 .\nwd:Q20729551 wdt:P58 wd:Q35979475\n}",
        "questionWithBrackets": "Were [Stop for Bud] and [Motion picture] written by , produced by , and edited by [J\u00f8rgen Leth] and [Ole John]"
    },
    {
        "questionIdx": 117664,
        "questionPatternModEntities": "Were M0 , M2 , and M3 directed and produced by M1",
        "questionTemplate": "Were [entity] , [entity] , and [entity] [VP_SIMPLE] and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1 .\nM2 P0 M1 .\nM2 P1 M1 .\nM3 P0 M1 .\nM3 P1 M1\n}",
        "recursionDepth": 26,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q1068968 wdt:P57 wd:Q882 .\nwd:Q1068968 wdt:P162|wdt:P272 wd:Q882 .\nwd:Q109116 wdt:P57 wd:Q882 .\nwd:Q109116 wdt:P162|wdt:P272 wd:Q882 .\nwd:Q199039 wdt:P57 wd:Q882 .\nwd:Q199039 wdt:P162|wdt:P272 wd:Q882\n}",
        "questionWithBrackets": "Were [The Great Dictator] , [Pay Day] , and [A King in New York] directed and produced by [Charlie Chaplin]"
    },
    {
        "questionIdx": 117689,
        "questionPatternModEntities": "Were M2 and M5 influenced by M3 , influenced by M4 , and influenced by M1 's American spouse",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M1 ) .\nM2 P2 ?x0 .\nM2 P2 M3 .\nM2 P2 M4 .\nM5 P2 ?x0 .\nM5 P2 M3 .\nM5 P2 M4\n}",
        "recursionDepth": 45,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P27 wd:Q30 .\n?x0 wdt:P26 wd:Q456598 .\nFILTER ( ?x0 != wd:Q456598 ) .\nwd:Q7542 wdt:P737 ?x0 .\nwd:Q7542 wdt:P737 wd:Q714 .\nwd:Q7542 wdt:P737 wd:Q1299 .\nwd:Q34086 wdt:P737 ?x0 .\nwd:Q34086 wdt:P737 wd:Q714 .\nwd:Q34086 wdt:P737 wd:Q1299\n}",
        "questionWithBrackets": "Were [Prince] and [Justin Bieber] influenced by [Stevie Wonder] , influenced by [The Beatles] , and influenced by [Syreeta Wright] 's American spouse"
    },
    {
        "questionIdx": 117735,
        "questionPatternModEntities": "Were M0 , M3 , and M4 written by M1 and M2",
        "questionTemplate": "Were [entity] , [entity] , and [entity] [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM3 P0 M1 .\nM3 P0 M2 .\nM4 P0 M1 .\nM4 P0 M2\n}",
        "recursionDepth": 23,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q568048 wdt:P58 wd:Q2737 .\nwd:Q568048 wdt:P58 wd:Q3172471 .\nwd:Q1575832 wdt:P58 wd:Q2737 .\nwd:Q1575832 wdt:P58 wd:Q3172471 .\nwd:Q1849955 wdt:P58 wd:Q2737 .\nwd:Q1849955 wdt:P58 wd:Q3172471\n}",
        "questionWithBrackets": "Were [Hibernatus] , [The Cabbage Soup] , and [The Big Restaurant] written by [Jean Halain] and [Louis de Fun\u00e8s]"
    },
    {
        "questionIdx": 117765,
        "questionPatternModEntities": "Were M0 , M2 , and M3 Chinese",
        "questionTemplate": "Were [entity] , [entity] , and [entity] [ADJECTIVE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM2 P0 M1 .\nM3 P0 M1\n}",
        "recursionDepth": 16,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q197180 wdt:P27 wd:Q148 .\nwd:Q1708 wdt:P27 wd:Q148 .\nwd:Q4931 wdt:P27 wd:Q148\n}",
        "questionWithBrackets": "Were [Wang Tao] , [Chen Ding] , and [Zhang Gaoli] Chinese"
    },
    {
        "questionIdx": 117788,
        "questionPatternModEntities": "Were M0 , M4 , M5 , and M6 executive produced by M1 , directed by M3 , and executive produced by M2",
        "questionTemplate": "Were [entity] , [entity] , [entity] , and [entity] [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P1 M3 .\nM4 P0 M1 .\nM4 P0 M2 .\nM4 P1 M3 .\nM5 P0 M1 .\nM5 P0 M2 .\nM5 P1 M3 .\nM6 P0 M1 .\nM6 P0 M2 .\nM6 P1 M3\n}",
        "recursionDepth": 44,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q8054395 wdt:P57 wd:Q3930636 .\nwd:Q8054395 wdt:P1431 wd:Q263324 .\nwd:Q8054395 wdt:P1431 wd:Q190373 .\nwd:Q592768 wdt:P57 wd:Q3930636 .\nwd:Q592768 wdt:P1431 wd:Q263324 .\nwd:Q592768 wdt:P1431 wd:Q190373 .\nwd:Q2756904 wdt:P57 wd:Q3930636 .\nwd:Q2756904 wdt:P1431 wd:Q263324 .\nwd:Q2756904 wdt:P1431 wd:Q190373 .\nwd:Q1770445 wdt:P57 wd:Q3930636 .\nwd:Q1770445 wdt:P1431 wd:Q263324 .\nwd:Q1770445 wdt:P1431 wd:Q190373\n}",
        "questionWithBrackets": "Were [Scooby-Doo and the Reluctant Werewolf] , [Scooby-Doo and the Ghoul School] , [Yogi Bear and the Magical Flight of the Spruce Goose] , and [Yogi's Great Escape] executive produced by [Joseph Barbera] , directed by [Ray Patterson] , and executive produced by [William Hanna]"
    },
    {
        "questionIdx": 117806,
        "questionPatternModEntities": "Were M1 , M2 , and M3 founded by M0 's sibling",
        "questionTemplate": "Were [entity] , [entity] , and [entity] [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nM1 P1 ?x0 .\nM2 P1 ?x0 .\nM3 P1 ?x0\n}",
        "recursionDepth": 23,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P3373 wd:Q75764198 .\nFILTER ( ?x0 != wd:Q75764198 ) .\nwd:Q1342 wdt:P112 ?x0 .\nwd:Q1143497 wdt:P112 ?x0 .\nwd:Q54122 wdt:P112 ?x0\n}",
        "questionWithBrackets": "Were [Culper Ring] , [Pittsburgh] , and [Continental Army] founded by [Jane Washington] 's sibling"
    },
    {
        "questionIdx": 117900,
        "questionPatternModEntities": "Were M0 , M2 , and M3 edited by , written by , produced by , executive produced by , and directed by M1",
        "questionTemplate": "Were [entity] , [entity] , and [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1 .\nM0 P2 M1 .\nM0 P3 M1 .\nM0 P4 M1 .\nM2 P0 M1 .\nM2 P1 M1 .\nM2 P2 M1 .\nM2 P3 M1 .\nM2 P4 M1 .\nM3 P0 M1 .\nM3 P1 M1 .\nM3 P2 M1 .\nM3 P3 M1 .\nM3 P4 M1\n}",
        "recursionDepth": 46,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q484679 wdt:P57 wd:Q212990 .\nwd:Q484679 wdt:P1040 wd:Q212990 .\nwd:Q484679 wdt:P1431 wd:Q212990 .\nwd:Q484679 wdt:P162|wdt:P272 wd:Q212990 .\nwd:Q484679 wdt:P58 wd:Q212990 .\nwd:Q13471372 wdt:P57 wd:Q212990 .\nwd:Q13471372 wdt:P1040 wd:Q212990 .\nwd:Q13471372 wdt:P1431 wd:Q212990 .\nwd:Q13471372 wdt:P162|wdt:P272 wd:Q212990 .\nwd:Q13471372 wdt:P58 wd:Q212990 .\nwd:Q483197 wdt:P57 wd:Q212990 .\nwd:Q483197 wdt:P1040 wd:Q212990 .\nwd:Q483197 wdt:P1431 wd:Q212990 .\nwd:Q483197 wdt:P162|wdt:P272 wd:Q212990 .\nwd:Q483197 wdt:P58 wd:Q212990\n}",
        "questionWithBrackets": "Were [Dream] , [Piet\u00e0] , and [Moebius] edited by , written by , produced by , executive produced by , and directed by [Kim Ki-duk]"
    },
    {
        "questionIdx": 117925,
        "questionPatternModEntities": "Were M0 , M2 , M3 , and M4 edited by and written by M1",
        "questionTemplate": "Were [entity] , [entity] , [entity] , and [entity] [VP_SIMPLE] by and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1 .\nM2 P0 M1 .\nM2 P1 M1 .\nM3 P0 M1 .\nM3 P1 M1 .\nM4 P0 M1 .\nM4 P1 M1\n}",
        "recursionDepth": 30,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q1194546 wdt:P1040 wd:Q8006 .\nwd:Q1194546 wdt:P58 wd:Q8006 .\nwd:Q152105 wdt:P1040 wd:Q8006 .\nwd:Q152105 wdt:P58 wd:Q8006 .\nwd:Q20475 wdt:P1040 wd:Q8006 .\nwd:Q20475 wdt:P58 wd:Q8006 .\nwd:Q189540 wdt:P1040 wd:Q8006 .\nwd:Q189540 wdt:P58 wd:Q8006\n}",
        "questionWithBrackets": "Were [The Idiot] , [Ikiru] , [Yojimbo] , and [Seven Samurai] edited by and written by [Akira Kurosawa]"
    },
    {
        "questionIdx": 117926,
        "questionPatternModEntities": "Were M0 , M2 , M3 , and M4 written by and edited by M1",
        "questionTemplate": "Were [entity] , [entity] , [entity] , and [entity] [VP_SIMPLE] by and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1 .\nM2 P0 M1 .\nM2 P1 M1 .\nM3 P0 M1 .\nM3 P1 M1 .\nM4 P0 M1 .\nM4 P1 M1\n}",
        "recursionDepth": 30,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q537026 wdt:P1040 wd:Q26372 .\nwd:Q537026 wdt:P58 wd:Q26372 .\nwd:Q340300 wdt:P1040 wd:Q26372 .\nwd:Q340300 wdt:P58 wd:Q26372 .\nwd:Q148330 wdt:P1040 wd:Q26372 .\nwd:Q148330 wdt:P58 wd:Q26372 .\nwd:Q260208 wdt:P1040 wd:Q26372 .\nwd:Q260208 wdt:P58 wd:Q26372\n}",
        "questionWithBrackets": "Were [Outrage] , [Zat\u014dichi] , [Achilles and the Tortoise] , and [Dolls] written by and edited by [Takeshi Kitano]"
    },
    {
        "questionIdx": 117927,
        "questionPatternModEntities": "Were M1 , M2 , M3 , and M4 directed by and edited by M0 's employee",
        "questionTemplate": "Were [entity] , [entity] , [entity] , and [entity] [VP_SIMPLE] by and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 ?x0 .\nM1 P2 ?x0 .\nM2 P1 ?x0 .\nM2 P2 ?x0 .\nM3 P1 ?x0 .\nM3 P2 ?x0 .\nM4 P1 ?x0 .\nM4 P2 ?x0\n}",
        "recursionDepth": 34,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P108 wd:Q909176 .\nwd:Q2533567 wdt:P57 ?x0 .\nwd:Q2533567 wdt:P1040 ?x0 .\nwd:Q4682732 wdt:P57 ?x0 .\nwd:Q4682732 wdt:P1040 ?x0 .\nwd:Q27591008 wdt:P57 ?x0 .\nwd:Q27591008 wdt:P1040 ?x0 .\nwd:Q672061 wdt:P57 ?x0 .\nwd:Q672061 wdt:P1040 ?x0\n}",
        "questionWithBrackets": "Were [Histoire(s) du cin\u00e9ma] , [The Image Book] , [Goodbye to Language] , and [Passion] directed by and edited by [Cahiers du cin\u00e9ma] 's employee"
    },
    {
        "questionIdx": 117933,
        "questionPatternModEntities": "Were M2 , M3 , M4 , M5 , and M6 edited by , directed by , and written by a British sibling of M0",
        "questionTemplate": "Were [entity] , [entity] , [entity] , [entity] , and [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M0 ) .\nM2 P2 ?x0 .\nM2 P3 ?x0 .\nM2 P4 ?x0 .\nM3 P2 ?x0 .\nM3 P3 ?x0 .\nM3 P4 ?x0 .\nM4 P2 ?x0 .\nM4 P3 ?x0 .\nM4 P4 ?x0 .\nM5 P2 ?x0 .\nM5 P3 ?x0 .\nM5 P4 ?x0 .\nM6 P2 ?x0 .\nM6 P3 ?x0 .\nM6 P4 ?x0\n}",
        "recursionDepth": 50,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P27 wd:Q145 .\n?x0 wdt:P3373 wd:Q606780 .\nFILTER ( ?x0 != wd:Q606780 ) .\nwd:Q743340 wdt:P57 ?x0 .\nwd:Q743340 wdt:P1040 ?x0 .\nwd:Q743340 wdt:P58 ?x0 .\nwd:Q199039 wdt:P57 ?x0 .\nwd:Q199039 wdt:P1040 ?x0 .\nwd:Q199039 wdt:P58 ?x0 .\nwd:Q214723 wdt:P57 ?x0 .\nwd:Q214723 wdt:P1040 ?x0 .\nwd:Q214723 wdt:P58 ?x0 .\nwd:Q374172 wdt:P57 ?x0 .\nwd:Q374172 wdt:P1040 ?x0 .\nwd:Q374172 wdt:P58 ?x0 .\nwd:Q166739 wdt:P57 ?x0 .\nwd:Q166739 wdt:P1040 ?x0 .\nwd:Q166739 wdt:P58 ?x0\n}",
        "questionWithBrackets": "Were [The New Janitor] , [The Gold Rush] , [The Kid] , [The Floorwalker] , and [Pay Day] edited by , directed by , and written by a British sibling of [Sydney Chaplin]"
    },
    {
        "questionIdx": 117934,
        "questionPatternModEntities": "Were M0 , M2 , and M3 written by and edited by M1",
        "questionTemplate": "Were [entity] , [entity] , and [entity] [VP_SIMPLE] by and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1 .\nM2 P0 M1 .\nM2 P1 M1 .\nM3 P0 M1 .\nM3 P1 M1\n}",
        "recursionDepth": 27,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q2457915 wdt:P1040 wd:Q882 .\nwd:Q2457915 wdt:P58 wd:Q882 .\nwd:Q199039 wdt:P1040 wd:Q882 .\nwd:Q199039 wdt:P58 wd:Q882 .\nwd:Q166739 wdt:P1040 wd:Q882 .\nwd:Q166739 wdt:P58 wd:Q882\n}",
        "questionWithBrackets": "Were [Pay Day] , [His Prehistoric Past] , and [The Floorwalker] written by and edited by [Charlie Chaplin]"
    },
    {
        "questionIdx": 117953,
        "questionPatternModEntities": "Were M0 , M3 , and M4 written , directed , and edited by M1 and M2",
        "questionTemplate": "Were [entity] , [entity] , and [entity] [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P1 M1 .\nM0 P1 M2 .\nM0 P2 M1 .\nM0 P2 M2 .\nM3 P0 M1 .\nM3 P0 M2 .\nM3 P1 M1 .\nM3 P1 M2 .\nM3 P2 M1 .\nM3 P2 M2 .\nM4 P0 M1 .\nM4 P0 M2 .\nM4 P1 M1 .\nM4 P1 M2 .\nM4 P2 M1 .\nM4 P2 M2\n}",
        "recursionDepth": 35,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q20757119 wdt:P57 wd:Q562108 .\nwd:Q20757119 wdt:P57 wd:Q35979475 .\nwd:Q20757119 wdt:P1040 wd:Q562108 .\nwd:Q20757119 wdt:P1040 wd:Q35979475 .\nwd:Q20757119 wdt:P58 wd:Q562108 .\nwd:Q20757119 wdt:P58 wd:Q35979475 .\nwd:Q20729238 wdt:P57 wd:Q562108 .\nwd:Q20729238 wdt:P57 wd:Q35979475 .\nwd:Q20729238 wdt:P1040 wd:Q562108 .\nwd:Q20729238 wdt:P1040 wd:Q35979475 .\nwd:Q20729238 wdt:P58 wd:Q562108 .\nwd:Q20729238 wdt:P58 wd:Q35979475 .\nwd:Q20729551 wdt:P57 wd:Q562108 .\nwd:Q20729551 wdt:P57 wd:Q35979475 .\nwd:Q20729551 wdt:P1040 wd:Q562108 .\nwd:Q20729551 wdt:P1040 wd:Q35979475 .\nwd:Q20729551 wdt:P58 wd:Q562108 .\nwd:Q20729551 wdt:P58 wd:Q35979475\n}",
        "questionWithBrackets": "Were [Motion picture] , [No label defined] , and [Stop for Bud] written , directed , and edited by [J\u00f8rgen Leth] and [Ole John]"
    },
    {
        "questionIdx": 117959,
        "questionPatternModEntities": "Were M0 , M3 , and M4 edited and written by M1 and M2",
        "questionTemplate": "Were [entity] , [entity] , and [entity] [VP_SIMPLE] and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P1 M1 .\nM0 P1 M2 .\nM3 P0 M1 .\nM3 P0 M2 .\nM3 P1 M1 .\nM3 P1 M2 .\nM4 P0 M1 .\nM4 P0 M2 .\nM4 P1 M1 .\nM4 P1 M2\n}",
        "recursionDepth": 30,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q20729238 wdt:P1040 wd:Q562108 .\nwd:Q20729238 wdt:P1040 wd:Q35979475 .\nwd:Q20729238 wdt:P58 wd:Q562108 .\nwd:Q20729238 wdt:P58 wd:Q35979475 .\nwd:Q20729551 wdt:P1040 wd:Q562108 .\nwd:Q20729551 wdt:P1040 wd:Q35979475 .\nwd:Q20729551 wdt:P58 wd:Q562108 .\nwd:Q20729551 wdt:P58 wd:Q35979475 .\nwd:Q20757119 wdt:P1040 wd:Q562108 .\nwd:Q20757119 wdt:P1040 wd:Q35979475 .\nwd:Q20757119 wdt:P58 wd:Q562108 .\nwd:Q20757119 wdt:P58 wd:Q35979475\n}",
        "questionWithBrackets": "Were [Motion picture] , [No label defined] , and [Stop for Bud] edited and written by [J\u00f8rgen Leth] and [Ole John]"
    },
    {
        "questionIdx": 118009,
        "questionPatternModEntities": "Were M0 and M2 produced and executive produced by M1",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1 .\nM2 P0 M1 .\nM2 P1 M1\n}",
        "recursionDepth": 24,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q2947967 wdt:P1431 wd:Q8877 .\nwd:Q2947967 wdt:P162|wdt:P272 wd:Q8877 .\nwd:Q208048 wdt:P1431 wd:Q8877 .\nwd:Q208048 wdt:P162|wdt:P272 wd:Q8877\n}",
        "questionWithBrackets": "Were [Band of Brothers] and [Under the Dome] produced and executive produced by [Steven Spielberg]"
    },
    {
        "questionIdx": 118031,
        "questionPatternModEntities": "Were M0 , M2 , M3 , and M4 directed by and executive produced by M1",
        "questionTemplate": "Were [entity] , [entity] , [entity] , and [entity] [VP_SIMPLE] by and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1 .\nM2 P0 M1 .\nM2 P1 M1 .\nM3 P0 M1 .\nM3 P1 M1 .\nM4 P0 M1 .\nM4 P1 M1\n}",
        "recursionDepth": 31,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q7745725 wdt:P57 wd:Q51123 .\nwd:Q7745725 wdt:P1431 wd:Q51123 .\nwd:Q3744724 wdt:P57 wd:Q51123 .\nwd:Q3744724 wdt:P1431 wd:Q51123 .\nwd:Q3987295 wdt:P57 wd:Q51123 .\nwd:Q3987295 wdt:P1431 wd:Q51123 .\nwd:Q3988072 wdt:P57 wd:Q51123 .\nwd:Q3988072 wdt:P1431 wd:Q51123\n}",
        "questionWithBrackets": "Were [The Goddess of Sagebrush Gulch] , [The Lonedale Operator] , [Fighting Blood] , and [The Last Drop of Water] directed by and executive produced by [D. W. Griffith]"
    },
    {
        "questionIdx": 118045,
        "questionPatternModEntities": "Were M1 and M2 founded by M0 's sibling 's spouse 's sibling",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x1 P1 ?x2 .\n?x2 P0 M0 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x1 != ?x2 ) .\nFILTER ( ?x2 != M0 ) .\nM1 P2 ?x0 .\nM2 P2 ?x0\n}",
        "recursionDepth": 28,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P3373 ?x1 .\n?x1 wdt:P26 ?x2 .\n?x2 wdt:P3373 wd:Q75386695 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x1 != ?x2 ) .\nFILTER ( ?x2 != wd:Q75386695 ) .\nwd:Q112581 wdt:P112 ?x0 .\nwd:Q163700 wdt:P112 ?x0\n}",
        "questionWithBrackets": "Were [House of Bonaparte] and [Legion of Honour] founded by [Robert Patterson] 's sibling 's spouse 's sibling"
    },
    {
        "questionIdx": 118049,
        "questionPatternModEntities": "Were M0 and M3 edited , written , and produced by M1 and M2",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P1 M1 .\nM0 P1 M2 .\nM0 P2 M1 .\nM0 P2 M2 .\nM3 P0 M1 .\nM3 P0 M2 .\nM3 P1 M1 .\nM3 P1 M2 .\nM3 P2 M1 .\nM3 P2 M2\n}",
        "recursionDepth": 32,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q20729238 wdt:P1040 wd:Q562108 .\nwd:Q20729238 wdt:P1040 wd:Q35979475 .\nwd:Q20729238 wdt:P162|wdt:P272 wd:Q562108 .\nwd:Q20729238 wdt:P162|wdt:P272 wd:Q35979475 .\nwd:Q20729238 wdt:P58 wd:Q562108 .\nwd:Q20729238 wdt:P58 wd:Q35979475 .\nwd:Q20729551 wdt:P1040 wd:Q562108 .\nwd:Q20729551 wdt:P1040 wd:Q35979475 .\nwd:Q20729551 wdt:P162|wdt:P272 wd:Q562108 .\nwd:Q20729551 wdt:P162|wdt:P272 wd:Q35979475 .\nwd:Q20729551 wdt:P58 wd:Q562108 .\nwd:Q20729551 wdt:P58 wd:Q35979475\n}",
        "questionWithBrackets": "Were [Stop for Bud] and [Motion picture] edited , written , and produced by [J\u00f8rgen Leth] and [Ole John]"
    },
    {
        "questionIdx": 118079,
        "questionPatternModEntities": "Were M0 , M3 , and M4 edited and produced by M1 and M2",
        "questionTemplate": "Were [entity] , [entity] , and [entity] [VP_SIMPLE] and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P1 M1 .\nM0 P1 M2 .\nM3 P0 M1 .\nM3 P0 M2 .\nM3 P1 M1 .\nM3 P1 M2 .\nM4 P0 M1 .\nM4 P0 M2 .\nM4 P1 M1 .\nM4 P1 M2\n}",
        "recursionDepth": 30,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q237215 wdt:P1040 wd:Q13595531 .\nwd:Q237215 wdt:P1040 wd:Q13595311 .\nwd:Q237215 wdt:P162|wdt:P272 wd:Q13595531 .\nwd:Q237215 wdt:P162|wdt:P272 wd:Q13595311 .\nwd:Q300555 wdt:P1040 wd:Q13595531 .\nwd:Q300555 wdt:P1040 wd:Q13595311 .\nwd:Q300555 wdt:P162|wdt:P272 wd:Q13595531 .\nwd:Q300555 wdt:P162|wdt:P272 wd:Q13595311 .\nwd:Q501874 wdt:P1040 wd:Q13595531 .\nwd:Q501874 wdt:P1040 wd:Q13595311 .\nwd:Q501874 wdt:P162|wdt:P272 wd:Q13595531 .\nwd:Q501874 wdt:P162|wdt:P272 wd:Q13595311\n}",
        "questionWithBrackets": "Were [A Serious Man] , [O Brother, Where Art Thou?] , and [Barton Fink] edited and produced by [Ethan Coen] and [Joel Coen]"
    },
    {
        "questionIdx": 118098,
        "questionPatternModEntities": "Were M2 , M4 , and M5 written by M3 and written by a male spouse of M1",
        "questionTemplate": "Were [entity] , [entity] , and [entity] [VP_SIMPLE] by [entity] and [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M1 ) .\nM2 P2 ?x0 .\nM2 P2 M3 .\nM4 P2 ?x0 .\nM4 P2 M3 .\nM5 P2 ?x0 .\nM5 P2 M3\n}",
        "recursionDepth": 41,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P21 wd:Q6581097 .\n?x0 wdt:P26 wd:Q32947601 .\nFILTER ( ?x0 != wd:Q32947601 ) .\nwd:Q223132 wdt:P58 ?x0 .\nwd:Q223132 wdt:P58 wd:Q3772 .\nwd:Q165325 wdt:P58 ?x0 .\nwd:Q165325 wdt:P58 wd:Q3772 .\nwd:Q1127709 wdt:P58 ?x0 .\nwd:Q1127709 wdt:P58 wd:Q3772\n}",
        "questionWithBrackets": "Were [Kill Bill] , [True Romance] , and [Kill Bill Volume 1] written by [Quentin Tarantino] and written by a male spouse of [Daniella Pick]"
    },
    {
        "questionIdx": 118102,
        "questionPatternModEntities": "Were M1 , M2 , and M3 produced by M0 's employee",
        "questionTemplate": "Were [entity] , [entity] , and [entity] [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 ?x0 .\nM2 P1 ?x0 .\nM3 P1 ?x0\n}",
        "recursionDepth": 23,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P108 wd:Q1668871 .\nwd:Q4578765 wdt:P162|wdt:P272 ?x0 .\nwd:Q276749 wdt:P162|wdt:P272 ?x0 .\nwd:Q163127 wdt:P162|wdt:P272 ?x0\n}",
        "questionWithBrackets": "Were [Wingspan: Hits and History] , [Back to the Egg] , and [Every Night] produced by [Liverpool Institute for Performing Arts] 's employee"
    },
    {
        "questionIdx": 118216,
        "questionPatternModEntities": "Were M1 , M4 , M5 , and M6 executive produced by M2 , edited by M3 , and executive produced by M0 's spouse",
        "questionTemplate": "Were [entity] , [entity] , [entity] , and [entity] [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nM1 P1 ?x0 .\nM1 P1 M2 .\nM1 P2 M3 .\nM4 P1 ?x0 .\nM4 P1 M2 .\nM4 P2 M3 .\nM5 P1 ?x0 .\nM5 P1 M2 .\nM5 P2 M3 .\nM6 P1 ?x0 .\nM6 P1 M2 .\nM6 P2 M3\n}",
        "recursionDepth": 48,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P26 wd:Q4943414 .\nFILTER ( ?x0 != wd:Q4943414 ) .\nwd:Q3077738 wdt:P1040 wd:Q3473349 .\nwd:Q3077738 wdt:P1431 ?x0 .\nwd:Q3077738 wdt:P1431 wd:Q56094 .\nwd:Q1338368 wdt:P1040 wd:Q3473349 .\nwd:Q1338368 wdt:P1431 ?x0 .\nwd:Q1338368 wdt:P1431 wd:Q56094 .\nwd:Q107270 wdt:P1040 wd:Q3473349 .\nwd:Q107270 wdt:P1431 ?x0 .\nwd:Q107270 wdt:P1431 wd:Q56094 .\nwd:Q829695 wdt:P1040 wd:Q3473349 .\nwd:Q829695 wdt:P1431 ?x0 .\nwd:Q829695 wdt:P1431 wd:Q56094\n}",
        "questionWithBrackets": "Were [Lost in Translation] , [The Bling Ring] , [Somewhere] , and [Marie Antoinette] executive produced by [Francis Ford Coppola] , edited by [Sarah Flack] , and executive produced by [Eleanor Coppola] 's spouse"
    },
    {
        "questionIdx": 118224,
        "questionPatternModEntities": "Were M1 , M4 , M5 , and M6 influenced by M2 , influenced by M3 , and influenced by M0 's spouse",
        "questionTemplate": "Were [entity] , [entity] , [entity] , and [entity] [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nM1 P1 ?x0 .\nM1 P1 M2 .\nM1 P1 M3 .\nM4 P1 ?x0 .\nM4 P1 M2 .\nM4 P1 M3 .\nM5 P1 ?x0 .\nM5 P1 M2 .\nM5 P1 M3 .\nM6 P1 ?x0 .\nM6 P1 M2 .\nM6 P1 M3\n}",
        "recursionDepth": 46,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P26 wd:Q2834263 .\nFILTER ( ?x0 != wd:Q2834263 ) .\nwd:Q5685 wdt:P737 ?x0 .\nwd:Q5685 wdt:P737 wd:Q504 .\nwd:Q5685 wdt:P737 wd:Q9711 .\nwd:Q9327 wdt:P737 ?x0 .\nwd:Q9327 wdt:P737 wd:Q504 .\nwd:Q9327 wdt:P737 wd:Q9711 .\nwd:Q526518 wdt:P737 ?x0 .\nwd:Q526518 wdt:P737 wd:Q504 .\nwd:Q526518 wdt:P737 wd:Q9711 .\nwd:Q464207 wdt:P737 ?x0 .\nwd:Q464207 wdt:P737 wd:Q504 .\nwd:Q464207 wdt:P737 wd:Q9711\n}",
        "questionWithBrackets": "Were [Mihail Sadoveanu] , [Guy de Maupassant] , [Eduard Vilde] , and [Anton Chekhov] influenced by [\u00c9mile Zola] , influenced by [Honor\u00e9 de Balzac] , and influenced by [Alexandrine Zola] 's spouse"
    },
    {
        "questionIdx": 118314,
        "questionPatternModEntities": "Were M2 and M3 executive produced by , written by , and directed by a male spouse of M1",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M1 ) .\nM2 P2 ?x0 .\nM2 P3 ?x0 .\nM2 P4 ?x0 .\nM3 P2 ?x0 .\nM3 P3 ?x0 .\nM3 P4 ?x0\n}",
        "recursionDepth": 42,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P21 wd:Q6581097 .\n?x0 wdt:P26 wd:Q6813152 .\nFILTER ( ?x0 != wd:Q6813152 ) .\nwd:Q17738 wdt:P57 ?x0 .\nwd:Q17738 wdt:P1431 ?x0 .\nwd:Q17738 wdt:P58 ?x0 .\nwd:Q165713 wdt:P57 ?x0 .\nwd:Q165713 wdt:P1431 ?x0 .\nwd:Q165713 wdt:P58 ?x0\n}",
        "questionWithBrackets": "Were [Star Wars: Episode I \u2013 The Phantom Menace] and [Star Wars: Episode IV \u2013 A New Hope] executive produced by , written by , and directed by a male spouse of [Mellody Hobson]"
    },
    {
        "questionIdx": 118333,
        "questionPatternModEntities": "Were M1 and M2 written and produced by M0 's sibling",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nM1 P1 ?x0 .\nM1 P2 ?x0 .\nM2 P1 ?x0 .\nM2 P2 ?x0\n}",
        "recursionDepth": 27,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P3373 wd:Q606780 .\nFILTER ( ?x0 != wd:Q606780 ) .\nwd:Q973676 wdt:P162|wdt:P272 ?x0 .\nwd:Q973676 wdt:P58 ?x0 .\nwd:Q238211 wdt:P162|wdt:P272 ?x0 .\nwd:Q238211 wdt:P58 ?x0\n}",
        "questionWithBrackets": "Were [A Day's Pleasure] and [City Lights] written and produced by [Sydney Chaplin] 's sibling"
    },
    {
        "questionIdx": 118359,
        "questionPatternModEntities": "Were M1 and M5 edited by M2 , edited by a sibling of M0 , and directed by M3 and M4",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by [entity] , [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity] , and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nM1 P1 ?x0 .\nM1 P1 M2 .\nM1 P2 M3 .\nM1 P2 M4 .\nM5 P1 ?x0 .\nM5 P1 M2 .\nM5 P2 M3 .\nM5 P2 M4\n}",
        "recursionDepth": 46,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P3373 wd:Q55469 .\nFILTER ( ?x0 != wd:Q55469 ) .\nwd:Q4004088 wdt:P57 wd:Q525427 .\nwd:Q4004088 wdt:P57 wd:Q2055700 .\nwd:Q4004088 wdt:P1040 ?x0 .\nwd:Q4004088 wdt:P1040 wd:Q166318 .\nwd:Q3227148 wdt:P57 wd:Q525427 .\nwd:Q3227148 wdt:P57 wd:Q2055700 .\nwd:Q3227148 wdt:P1040 ?x0 .\nwd:Q3227148 wdt:P1040 wd:Q166318\n}",
        "questionWithBrackets": "Were [White Voices] and [Un tentativo sentimentale] edited by [Ruggero Mastroianni] , edited by a sibling of [Marcello Mastroianni] , and directed by [Massimo Franciosa] and [Pasquale Festa Campanile]"
    },
    {
        "questionIdx": 118381,
        "questionPatternModEntities": "Were M0 , M5 , and M6 edited by M1 and M2 and directed by M3 and M4",
        "questionTemplate": "Were [entity] , [entity] , and [entity] [VP_SIMPLE] by [entity] and [entity] and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P1 M3 .\nM0 P1 M4 .\nM5 P0 M1 .\nM5 P0 M2 .\nM5 P1 M3 .\nM5 P1 M4 .\nM6 P0 M1 .\nM6 P0 M2 .\nM6 P1 M3 .\nM6 P1 M4\n}",
        "recursionDepth": 38,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q20494994 wdt:P57 wd:Q35979516 .\nwd:Q20494994 wdt:P57 wd:Q75507074 .\nwd:Q20494994 wdt:P1040 wd:Q38402854 .\nwd:Q20494994 wdt:P1040 wd:Q38402907 .\nwd:Q20494987 wdt:P57 wd:Q35979516 .\nwd:Q20494987 wdt:P57 wd:Q75507074 .\nwd:Q20494987 wdt:P1040 wd:Q38402854 .\nwd:Q20494987 wdt:P1040 wd:Q38402907 .\nwd:Q20494978 wdt:P57 wd:Q35979516 .\nwd:Q20494978 wdt:P57 wd:Q75507074 .\nwd:Q20494978 wdt:P1040 wd:Q38402854 .\nwd:Q20494978 wdt:P1040 wd:Q38402907\n}",
        "questionWithBrackets": "Were [No label defined] , [No label defined] , and [No label defined] edited by [Camilla Schyberg] and [Irene G. Scholten] and directed by [Jakob Gottschau] and [\u00d8jvind Hesselager]"
    },
    {
        "questionIdx": 118390,
        "questionPatternModEntities": "Were M2 and M4 directed by M3 , edited by a parent of M1 , and executive produced by M0 's spouse",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by [entity] , [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity] , and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x1 P1 M1 .\nFILTER ( ?x0 != M0 ) .\nM2 P2 ?x0 .\nM2 P3 ?x1 .\nM2 P4 M3 .\nM4 P2 ?x0 .\nM4 P3 ?x1 .\nM4 P4 M3\n}",
        "recursionDepth": 47,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P26 wd:Q32947601 .\n?x1 wdt:P40|wdt:P355 wd:Q24578312 .\nFILTER ( ?x0 != wd:Q32947601 ) .\nwd:Q1048645 wdt:P57 wd:Q358714 .\nwd:Q1048645 wdt:P1040 ?x1 .\nwd:Q1048645 wdt:P1431 ?x0 .\nwd:Q842720 wdt:P57 wd:Q358714 .\nwd:Q842720 wdt:P1040 ?x1 .\nwd:Q842720 wdt:P1431 ?x0\n}",
        "questionWithBrackets": "Were [Hostel] and [Hostel: Part II] directed by [Eli Roth] , edited by a parent of [Ryan Folsey] , and executive produced by [Daniella Pick] 's spouse"
    },
    {
        "questionIdx": 118406,
        "questionPatternModEntities": "Were M0 , M2 , and M3 written and directed by M1",
        "questionTemplate": "Were [entity] , [entity] , and [entity] [VP_SIMPLE] and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1 .\nM2 P0 M1 .\nM2 P1 M1 .\nM3 P0 M1 .\nM3 P1 M1\n}",
        "recursionDepth": 26,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q1068968 wdt:P57 wd:Q882 .\nwd:Q1068968 wdt:P58 wd:Q882 .\nwd:Q109116 wdt:P57 wd:Q882 .\nwd:Q109116 wdt:P58 wd:Q882 .\nwd:Q199039 wdt:P57 wd:Q882 .\nwd:Q199039 wdt:P58 wd:Q882\n}",
        "questionWithBrackets": "Were [Pay Day] , [The Great Dictator] , and [A King in New York] written and directed by [Charlie Chaplin]"
    },
    {
        "questionIdx": 118470,
        "questionPatternModEntities": "Were M0 and M3 directed by , edited by , and produced by M1 and M2",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P1 M1 .\nM0 P1 M2 .\nM0 P2 M1 .\nM0 P2 M2 .\nM3 P0 M1 .\nM3 P0 M2 .\nM3 P1 M1 .\nM3 P1 M2 .\nM3 P2 M1 .\nM3 P2 M2\n}",
        "recursionDepth": 34,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q20729238 wdt:P57 wd:Q562108 .\nwd:Q20729238 wdt:P57 wd:Q35979475 .\nwd:Q20729238 wdt:P1040 wd:Q562108 .\nwd:Q20729238 wdt:P1040 wd:Q35979475 .\nwd:Q20729238 wdt:P162|wdt:P272 wd:Q562108 .\nwd:Q20729238 wdt:P162|wdt:P272 wd:Q35979475 .\nwd:Q20729551 wdt:P57 wd:Q562108 .\nwd:Q20729551 wdt:P57 wd:Q35979475 .\nwd:Q20729551 wdt:P1040 wd:Q562108 .\nwd:Q20729551 wdt:P1040 wd:Q35979475 .\nwd:Q20729551 wdt:P162|wdt:P272 wd:Q562108 .\nwd:Q20729551 wdt:P162|wdt:P272 wd:Q35979475\n}",
        "questionWithBrackets": "Were [Stop for Bud] and [Motion picture] directed by , edited by , and produced by [Ole John] and [J\u00f8rgen Leth]"
    },
    {
        "questionIdx": 118471,
        "questionPatternModEntities": "Were M0 and M3 edited by , produced by , and directed by M1 and M2",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P1 M1 .\nM0 P1 M2 .\nM0 P2 M1 .\nM0 P2 M2 .\nM3 P0 M1 .\nM3 P0 M2 .\nM3 P1 M1 .\nM3 P1 M2 .\nM3 P2 M1 .\nM3 P2 M2\n}",
        "recursionDepth": 34,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q20729238 wdt:P57 wd:Q562108 .\nwd:Q20729238 wdt:P57 wd:Q35979475 .\nwd:Q20729238 wdt:P1040 wd:Q562108 .\nwd:Q20729238 wdt:P1040 wd:Q35979475 .\nwd:Q20729238 wdt:P162|wdt:P272 wd:Q562108 .\nwd:Q20729238 wdt:P162|wdt:P272 wd:Q35979475 .\nwd:Q20729551 wdt:P57 wd:Q562108 .\nwd:Q20729551 wdt:P57 wd:Q35979475 .\nwd:Q20729551 wdt:P1040 wd:Q562108 .\nwd:Q20729551 wdt:P1040 wd:Q35979475 .\nwd:Q20729551 wdt:P162|wdt:P272 wd:Q562108 .\nwd:Q20729551 wdt:P162|wdt:P272 wd:Q35979475\n}",
        "questionWithBrackets": "Were [Stop for Bud] and [Motion picture] edited by , produced by , and directed by [Ole John] and [J\u00f8rgen Leth]"
    },
    {
        "questionIdx": 118472,
        "questionPatternModEntities": "Were M0 and M3 written by , produced by , and directed by M1 and M2",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P1 M1 .\nM0 P1 M2 .\nM0 P2 M1 .\nM0 P2 M2 .\nM3 P0 M1 .\nM3 P0 M2 .\nM3 P1 M1 .\nM3 P1 M2 .\nM3 P2 M1 .\nM3 P2 M2\n}",
        "recursionDepth": 34,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q2249349 wdt:P57 wd:Q55230 .\nwd:Q2249349 wdt:P57 wd:Q55234 .\nwd:Q2249349 wdt:P162|wdt:P272 wd:Q55230 .\nwd:Q2249349 wdt:P162|wdt:P272 wd:Q55234 .\nwd:Q2249349 wdt:P58 wd:Q55230 .\nwd:Q2249349 wdt:P58 wd:Q55234 .\nwd:Q625780 wdt:P57 wd:Q55230 .\nwd:Q625780 wdt:P57 wd:Q55234 .\nwd:Q625780 wdt:P162|wdt:P272 wd:Q55230 .\nwd:Q625780 wdt:P162|wdt:P272 wd:Q55234 .\nwd:Q625780 wdt:P58 wd:Q55230 .\nwd:Q625780 wdt:P58 wd:Q55234\n}",
        "questionWithBrackets": "Were [The Red Shoes] and [The Tales of Hoffmann] written by , produced by , and directed by [Michael Powell] and [Emeric Pressburger]"
    },
    {
        "questionIdx": 118473,
        "questionPatternModEntities": "Were M0 and M3 produced by , directed by , and edited by M1 and M2",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P1 M1 .\nM0 P1 M2 .\nM0 P2 M1 .\nM0 P2 M2 .\nM3 P0 M1 .\nM3 P0 M2 .\nM3 P1 M1 .\nM3 P1 M2 .\nM3 P2 M1 .\nM3 P2 M2\n}",
        "recursionDepth": 34,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q20729238 wdt:P57 wd:Q562108 .\nwd:Q20729238 wdt:P57 wd:Q35979475 .\nwd:Q20729238 wdt:P1040 wd:Q562108 .\nwd:Q20729238 wdt:P1040 wd:Q35979475 .\nwd:Q20729238 wdt:P162|wdt:P272 wd:Q562108 .\nwd:Q20729238 wdt:P162|wdt:P272 wd:Q35979475 .\nwd:Q20729551 wdt:P57 wd:Q562108 .\nwd:Q20729551 wdt:P57 wd:Q35979475 .\nwd:Q20729551 wdt:P1040 wd:Q562108 .\nwd:Q20729551 wdt:P1040 wd:Q35979475 .\nwd:Q20729551 wdt:P162|wdt:P272 wd:Q562108 .\nwd:Q20729551 wdt:P162|wdt:P272 wd:Q35979475\n}",
        "questionWithBrackets": "Were [Stop for Bud] and [Motion picture] produced by , directed by , and edited by [Ole John] and [J\u00f8rgen Leth]"
    },
    {
        "questionIdx": 118474,
        "questionPatternModEntities": "Were M0 , M3 , and M4 written and edited by M1 and M2",
        "questionTemplate": "Were [entity] , [entity] , and [entity] [VP_SIMPLE] and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P1 M1 .\nM0 P1 M2 .\nM3 P0 M1 .\nM3 P0 M2 .\nM3 P1 M1 .\nM3 P1 M2 .\nM4 P0 M1 .\nM4 P0 M2 .\nM4 P1 M1 .\nM4 P1 M2\n}",
        "recursionDepth": 30,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q20729238 wdt:P1040 wd:Q562108 .\nwd:Q20729238 wdt:P1040 wd:Q35979475 .\nwd:Q20729238 wdt:P58 wd:Q562108 .\nwd:Q20729238 wdt:P58 wd:Q35979475 .\nwd:Q20729551 wdt:P1040 wd:Q562108 .\nwd:Q20729551 wdt:P1040 wd:Q35979475 .\nwd:Q20729551 wdt:P58 wd:Q562108 .\nwd:Q20729551 wdt:P58 wd:Q35979475 .\nwd:Q20757119 wdt:P1040 wd:Q562108 .\nwd:Q20757119 wdt:P1040 wd:Q35979475 .\nwd:Q20757119 wdt:P58 wd:Q562108 .\nwd:Q20757119 wdt:P58 wd:Q35979475\n}",
        "questionWithBrackets": "Were [No label defined] , [Motion picture] , and [Stop for Bud] written and edited by [J\u00f8rgen Leth] and [Ole John]"
    },
    {
        "questionIdx": 118475,
        "questionPatternModEntities": "Were M0 , M3 , and M4 written by and edited by M1 and M2",
        "questionTemplate": "Were [entity] , [entity] , and [entity] [VP_SIMPLE] by and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P1 M1 .\nM0 P1 M2 .\nM3 P0 M1 .\nM3 P0 M2 .\nM3 P1 M1 .\nM3 P1 M2 .\nM4 P0 M1 .\nM4 P0 M2 .\nM4 P1 M1 .\nM4 P1 M2\n}",
        "recursionDepth": 31,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q20729238 wdt:P1040 wd:Q562108 .\nwd:Q20729238 wdt:P1040 wd:Q35979475 .\nwd:Q20729238 wdt:P58 wd:Q562108 .\nwd:Q20729238 wdt:P58 wd:Q35979475 .\nwd:Q20729551 wdt:P1040 wd:Q562108 .\nwd:Q20729551 wdt:P1040 wd:Q35979475 .\nwd:Q20729551 wdt:P58 wd:Q562108 .\nwd:Q20729551 wdt:P58 wd:Q35979475 .\nwd:Q20757119 wdt:P1040 wd:Q562108 .\nwd:Q20757119 wdt:P1040 wd:Q35979475 .\nwd:Q20757119 wdt:P58 wd:Q562108 .\nwd:Q20757119 wdt:P58 wd:Q35979475\n}",
        "questionWithBrackets": "Were [No label defined] , [Motion picture] , and [Stop for Bud] written by and edited by [J\u00f8rgen Leth] and [Ole John]"
    },
    {
        "questionIdx": 118477,
        "questionPatternModEntities": "Were M0 , M3 , and M4 directed , written , and edited by M1 and M2",
        "questionTemplate": "Were [entity] , [entity] , and [entity] [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P1 M1 .\nM0 P1 M2 .\nM0 P2 M1 .\nM0 P2 M2 .\nM3 P0 M1 .\nM3 P0 M2 .\nM3 P1 M1 .\nM3 P1 M2 .\nM3 P2 M1 .\nM3 P2 M2 .\nM4 P0 M1 .\nM4 P0 M2 .\nM4 P1 M1 .\nM4 P1 M2 .\nM4 P2 M1 .\nM4 P2 M2\n}",
        "recursionDepth": 35,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q20757119 wdt:P57 wd:Q562108 .\nwd:Q20757119 wdt:P57 wd:Q35979475 .\nwd:Q20757119 wdt:P1040 wd:Q562108 .\nwd:Q20757119 wdt:P1040 wd:Q35979475 .\nwd:Q20757119 wdt:P58 wd:Q562108 .\nwd:Q20757119 wdt:P58 wd:Q35979475 .\nwd:Q20729238 wdt:P57 wd:Q562108 .\nwd:Q20729238 wdt:P57 wd:Q35979475 .\nwd:Q20729238 wdt:P1040 wd:Q562108 .\nwd:Q20729238 wdt:P1040 wd:Q35979475 .\nwd:Q20729238 wdt:P58 wd:Q562108 .\nwd:Q20729238 wdt:P58 wd:Q35979475 .\nwd:Q20729551 wdt:P57 wd:Q562108 .\nwd:Q20729551 wdt:P57 wd:Q35979475 .\nwd:Q20729551 wdt:P1040 wd:Q562108 .\nwd:Q20729551 wdt:P1040 wd:Q35979475 .\nwd:Q20729551 wdt:P58 wd:Q562108 .\nwd:Q20729551 wdt:P58 wd:Q35979475\n}",
        "questionWithBrackets": "Were [Stop for Bud] , [Motion picture] , and [No label defined] directed , written , and edited by [J\u00f8rgen Leth] and [Ole John]"
    },
    {
        "questionIdx": 118486,
        "questionPatternModEntities": "Were M1 , M4 , M5 , and M6 executive produced by M2 , directed by a spouse of M0 , and directed by M3",
        "questionTemplate": "Were [entity] , [entity] , [entity] , and [entity] [VP_SIMPLE] by [entity] , [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nM1 P1 M2 .\nM1 P2 ?x0 .\nM1 P2 M3 .\nM4 P1 M2 .\nM4 P2 ?x0 .\nM4 P2 M3 .\nM5 P1 M2 .\nM5 P2 ?x0 .\nM5 P2 M3 .\nM6 P1 M2 .\nM6 P2 ?x0 .\nM6 P2 M3\n}",
        "recursionDepth": 49,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P26 wd:Q458801 .\nFILTER ( ?x0 != wd:Q458801 ) .\nwd:Q1392437 wdt:P57 ?x0 .\nwd:Q1392437 wdt:P57 wd:Q51491 .\nwd:Q1392437 wdt:P1431 wd:Q72614 .\nwd:Q979726 wdt:P57 ?x0 .\nwd:Q979726 wdt:P57 wd:Q51491 .\nwd:Q979726 wdt:P1431 wd:Q72614 .\nwd:Q894846 wdt:P57 ?x0 .\nwd:Q894846 wdt:P57 wd:Q51491 .\nwd:Q894846 wdt:P1431 wd:Q72614 .\nwd:Q584824 wdt:P57 ?x0 .\nwd:Q584824 wdt:P57 wd:Q51491 .\nwd:Q584824 wdt:P1431 wd:Q72614\n}",
        "questionWithBrackets": "Were [Night and Day] , [Mission to Moscow] , [Mildred Pierce] , and [Passage to Marseille] executive produced by [Jack Warner] , directed by a spouse of [Bess Meredyth] , and directed by [Michael Curtiz]"
    },
    {
        "questionIdx": 118491,
        "questionPatternModEntities": "Were M0 , M2 , and M3 executive produced by , produced by , written by , directed by , and edited by M1",
        "questionTemplate": "Were [entity] , [entity] , and [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1 .\nM0 P2 M1 .\nM0 P3 M1 .\nM0 P4 M1 .\nM2 P0 M1 .\nM2 P1 M1 .\nM2 P2 M1 .\nM2 P3 M1 .\nM2 P4 M1 .\nM3 P0 M1 .\nM3 P1 M1 .\nM3 P2 M1 .\nM3 P3 M1 .\nM3 P4 M1\n}",
        "recursionDepth": 46,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q6084069 wdt:P57 wd:Q187261 .\nwd:Q6084069 wdt:P1040 wd:Q187261 .\nwd:Q6084069 wdt:P1431 wd:Q187261 .\nwd:Q6084069 wdt:P162|wdt:P272 wd:Q187261 .\nwd:Q6084069 wdt:P58 wd:Q187261 .\nwd:Q12813010 wdt:P57 wd:Q187261 .\nwd:Q12813010 wdt:P1040 wd:Q187261 .\nwd:Q12813010 wdt:P1431 wd:Q187261 .\nwd:Q12813010 wdt:P162|wdt:P272 wd:Q187261 .\nwd:Q12813010 wdt:P58 wd:Q187261 .\nwd:Q5437360 wdt:P57 wd:Q187261 .\nwd:Q5437360 wdt:P1040 wd:Q187261 .\nwd:Q5437360 wdt:P1431 wd:Q187261 .\nwd:Q5437360 wdt:P162|wdt:P272 wd:Q187261 .\nwd:Q5437360 wdt:P58 wd:Q187261\n}",
        "questionWithBrackets": "Were [The Confession] , [Fate] , and [The Waiting Room] executive produced by , produced by , written by , directed by , and edited by [Zeki Demirkubuz]"
    },
    {
        "questionIdx": 118501,
        "questionPatternModEntities": "Were M0 and M2 written and produced by M1",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1 .\nM2 P0 M1 .\nM2 P1 M1\n}",
        "recursionDepth": 23,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q2294948 wdt:P162|wdt:P272 wd:Q882 .\nwd:Q2294948 wdt:P58 wd:Q882 .\nwd:Q166739 wdt:P162|wdt:P272 wd:Q882 .\nwd:Q166739 wdt:P58 wd:Q882\n}",
        "questionWithBrackets": "Were [The Fireman] and [The Floorwalker] written and produced by [Charlie Chaplin]"
    },
    {
        "questionIdx": 118502,
        "questionPatternModEntities": "Were M0 , M2 , and M3 written , produced , and edited by M1",
        "questionTemplate": "Were [entity] , [entity] , and [entity] [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1 .\nM0 P2 M1 .\nM2 P0 M1 .\nM2 P1 M1 .\nM2 P2 M1 .\nM3 P0 M1 .\nM3 P1 M1 .\nM3 P2 M1\n}",
        "recursionDepth": 31,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q854990 wdt:P1040 wd:Q8006 .\nwd:Q854990 wdt:P162|wdt:P272 wd:Q8006 .\nwd:Q854990 wdt:P58 wd:Q8006 .\nwd:Q1077915 wdt:P1040 wd:Q8006 .\nwd:Q1077915 wdt:P162|wdt:P272 wd:Q8006 .\nwd:Q1077915 wdt:P58 wd:Q8006 .\nwd:Q39946 wdt:P1040 wd:Q8006 .\nwd:Q39946 wdt:P162|wdt:P272 wd:Q8006 .\nwd:Q39946 wdt:P58 wd:Q8006\n}",
        "questionWithBrackets": "Were [Kagemusha] , [The Hidden Fortress] , and [Sanshiro Sugata] written , produced , and edited by [Akira Kurosawa]"
    },
    {
        "questionIdx": 118511,
        "questionPatternModEntities": "Were M2 and M5 written by M3 , produced by M0 's British employee , and directed by M4",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nM2 P2 M3 .\nM2 P3 ?x0 .\nM2 P4 M4 .\nM5 P2 M3 .\nM5 P3 ?x0 .\nM5 P4 M4\n}",
        "recursionDepth": 45,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P108 wd:Q3789934 .\n?x0 wdt:P27 wd:Q145 .\nwd:Q202211 wdt:P57 wd:Q51506 .\nwd:Q202211 wdt:P162|wdt:P272 ?x0 .\nwd:Q202211 wdt:P58 wd:Q1699413 .\nwd:Q962363 wdt:P57 wd:Q51506 .\nwd:Q962363 wdt:P162|wdt:P272 ?x0 .\nwd:Q962363 wdt:P58 wd:Q1699413\n}",
        "questionWithBrackets": "Were [Cry Freedom] and [Gandhi] written by [John Briley] , produced by [IVO] 's British employee , and directed by [Richard Attenborough]"
    },
    {
        "questionIdx": 118527,
        "questionPatternModEntities": "Were M0 and M3 produced , written , and edited by M1 and M2",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P1 M1 .\nM0 P1 M2 .\nM0 P2 M1 .\nM0 P2 M2 .\nM3 P0 M1 .\nM3 P0 M2 .\nM3 P1 M1 .\nM3 P1 M2 .\nM3 P2 M1 .\nM3 P2 M2\n}",
        "recursionDepth": 32,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q20729238 wdt:P1040 wd:Q562108 .\nwd:Q20729238 wdt:P1040 wd:Q35979475 .\nwd:Q20729238 wdt:P162|wdt:P272 wd:Q562108 .\nwd:Q20729238 wdt:P162|wdt:P272 wd:Q35979475 .\nwd:Q20729238 wdt:P58 wd:Q562108 .\nwd:Q20729238 wdt:P58 wd:Q35979475 .\nwd:Q20729551 wdt:P1040 wd:Q562108 .\nwd:Q20729551 wdt:P1040 wd:Q35979475 .\nwd:Q20729551 wdt:P162|wdt:P272 wd:Q562108 .\nwd:Q20729551 wdt:P162|wdt:P272 wd:Q35979475 .\nwd:Q20729551 wdt:P58 wd:Q562108 .\nwd:Q20729551 wdt:P58 wd:Q35979475\n}",
        "questionWithBrackets": "Were [Motion picture] and [Stop for Bud] produced , written , and edited by [Ole John] and [J\u00f8rgen Leth]"
    },
    {
        "questionIdx": 118529,
        "questionPatternModEntities": "Were M0 and M3 produced by and written by M1 and M2",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P1 M1 .\nM0 P1 M2 .\nM3 P0 M1 .\nM3 P0 M2 .\nM3 P1 M1 .\nM3 P1 M2\n}",
        "recursionDepth": 28,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q164963 wdt:P162|wdt:P272 wd:Q4465 .\nwd:Q164963 wdt:P162|wdt:P272 wd:Q116861 .\nwd:Q164963 wdt:P58 wd:Q4465 .\nwd:Q164963 wdt:P58 wd:Q116861 .\nwd:Q1332274 wdt:P162|wdt:P272 wd:Q4465 .\nwd:Q1332274 wdt:P162|wdt:P272 wd:Q116861 .\nwd:Q1332274 wdt:P58 wd:Q4465 .\nwd:Q1332274 wdt:P58 wd:Q116861\n}",
        "questionWithBrackets": "Were [The Lord of the Rings: The Two Towers] and [The Frighteners] produced by and written by [Peter Jackson] and [Fran Walsh]"
    },
    {
        "questionIdx": 118530,
        "questionPatternModEntities": "Were M0 , M3 , and M4 edited by and produced by M1 and M2",
        "questionTemplate": "Were [entity] , [entity] , and [entity] [VP_SIMPLE] by and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P1 M1 .\nM0 P1 M2 .\nM3 P0 M1 .\nM3 P0 M2 .\nM3 P1 M1 .\nM3 P1 M2 .\nM4 P0 M1 .\nM4 P0 M2 .\nM4 P1 M1 .\nM4 P1 M2\n}",
        "recursionDepth": 31,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q237215 wdt:P1040 wd:Q13595311 .\nwd:Q237215 wdt:P1040 wd:Q13595531 .\nwd:Q237215 wdt:P162|wdt:P272 wd:Q13595311 .\nwd:Q237215 wdt:P162|wdt:P272 wd:Q13595531 .\nwd:Q300555 wdt:P1040 wd:Q13595311 .\nwd:Q300555 wdt:P1040 wd:Q13595531 .\nwd:Q300555 wdt:P162|wdt:P272 wd:Q13595311 .\nwd:Q300555 wdt:P162|wdt:P272 wd:Q13595531 .\nwd:Q501874 wdt:P1040 wd:Q13595311 .\nwd:Q501874 wdt:P1040 wd:Q13595531 .\nwd:Q501874 wdt:P162|wdt:P272 wd:Q13595311 .\nwd:Q501874 wdt:P162|wdt:P272 wd:Q13595531\n}",
        "questionWithBrackets": "Were [A Serious Man] , [Barton Fink] , and [O Brother, Where Art Thou?] edited by and produced by [Ethan Coen] and [Joel Coen]"
    },
    {
        "questionIdx": 118533,
        "questionPatternModEntities": "Were M1 , M3 , M4 , M5 , and M6 written by M0 's sibling and directed by M2",
        "questionTemplate": "Were [entity] , [entity] , [entity] , [entity] , and [entity] [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nM1 P1 ?x0 .\nM1 P2 M2 .\nM3 P1 ?x0 .\nM3 P2 M2 .\nM4 P1 ?x0 .\nM4 P2 M2 .\nM5 P1 ?x0 .\nM5 P2 M2 .\nM6 P1 ?x0 .\nM6 P2 M2\n}",
        "recursionDepth": 40,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P3373 wd:Q3567655 .\nFILTER ( ?x0 != wd:Q3567655 ) .\nwd:Q1923676 wdt:P57 wd:Q882 .\nwd:Q1923676 wdt:P58 ?x0 .\nwd:Q214723 wdt:P57 wd:Q882 .\nwd:Q214723 wdt:P58 ?x0 .\nwd:Q45602 wdt:P57 wd:Q882 .\nwd:Q45602 wdt:P58 ?x0 .\nwd:Q109116 wdt:P57 wd:Q882 .\nwd:Q109116 wdt:P58 ?x0 .\nwd:Q400101 wdt:P57 wd:Q882 .\nwd:Q400101 wdt:P58 ?x0\n}",
        "questionWithBrackets": "Were [Modern Times] , [A Countess from Hong Kong] , [The Great Dictator] , [The Gold Rush] , and [The Cure] written by [Wheeler Dryden] 's sibling and directed by [Charlie Chaplin]"
    },
    {
        "questionIdx": 118536,
        "questionPatternModEntities": "Were M0 , M3 , and M4 edited by , directed by , and written by M1 and M2",
        "questionTemplate": "Were [entity] , [entity] , and [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P1 M1 .\nM0 P1 M2 .\nM0 P2 M1 .\nM0 P2 M2 .\nM3 P0 M1 .\nM3 P0 M2 .\nM3 P1 M1 .\nM3 P1 M2 .\nM3 P2 M1 .\nM3 P2 M2 .\nM4 P0 M1 .\nM4 P0 M2 .\nM4 P1 M1 .\nM4 P1 M2 .\nM4 P2 M1 .\nM4 P2 M2\n}",
        "recursionDepth": 37,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q20757119 wdt:P57 wd:Q562108 .\nwd:Q20757119 wdt:P57 wd:Q35979475 .\nwd:Q20757119 wdt:P1040 wd:Q562108 .\nwd:Q20757119 wdt:P1040 wd:Q35979475 .\nwd:Q20757119 wdt:P58 wd:Q562108 .\nwd:Q20757119 wdt:P58 wd:Q35979475 .\nwd:Q20729238 wdt:P57 wd:Q562108 .\nwd:Q20729238 wdt:P57 wd:Q35979475 .\nwd:Q20729238 wdt:P1040 wd:Q562108 .\nwd:Q20729238 wdt:P1040 wd:Q35979475 .\nwd:Q20729238 wdt:P58 wd:Q562108 .\nwd:Q20729238 wdt:P58 wd:Q35979475 .\nwd:Q20729551 wdt:P57 wd:Q562108 .\nwd:Q20729551 wdt:P57 wd:Q35979475 .\nwd:Q20729551 wdt:P1040 wd:Q562108 .\nwd:Q20729551 wdt:P1040 wd:Q35979475 .\nwd:Q20729551 wdt:P58 wd:Q562108 .\nwd:Q20729551 wdt:P58 wd:Q35979475\n}",
        "questionWithBrackets": "Were [Motion picture] , [Stop for Bud] , and [No label defined] edited by , directed by , and written by [Ole John] and [J\u00f8rgen Leth]"
    },
    {
        "questionIdx": 118546,
        "questionPatternModEntities": "Were M2 and M4 produced by a Dutch employee of M0 and produced by M3",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nM2 P2 ?x0 .\nM2 P2 M3 .\nM4 P2 ?x0 .\nM4 P2 M3\n}",
        "recursionDepth": 38,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P108 wd:Q883799 .\n?x0 wdt:P27 wd:Q29999 .\nwd:Q925587 wdt:P162|wdt:P272 ?x0 .\nwd:Q925587 wdt:P162|wdt:P272 wd:Q92642 .\nwd:Q282456 wdt:P162|wdt:P272 ?x0 .\nwd:Q282456 wdt:P162|wdt:P272 wd:Q92642\n}",
        "questionWithBrackets": "Were [Big Buck Bunny] and [Sintel] produced by a Dutch employee of [Blender Foundation] and produced by [Ton Roosendaal]"
    },
    {
        "questionIdx": 118583,
        "questionPatternModEntities": "Were M2 and M5 written by M3 and M4 and directed by a female sibling of a spouse of M1",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by [entity] and [entity] and [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of a [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x0 P1 M0 .\n?x1 P2 M1 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x1 != M1 ) .\nM2 P3 M3 .\nM2 P3 M4 .\nM2 P4 ?x0 .\nM5 P3 M3 .\nM5 P3 M4 .\nM5 P4 ?x0\n}",
        "recursionDepth": 48,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P21 wd:Q6581072 .\n?x0 wdt:P3373 ?x1 .\n?x1 wdt:P26 wd:Q329 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x1 != wd:Q329 ) .\nwd:Q39049388 wdt:P57 ?x0 .\nwd:Q39049388 wdt:P58 wd:Q232470 .\nwd:Q39049388 wdt:P58 wd:Q440609 .\nwd:Q11614318 wdt:P57 ?x0 .\nwd:Q11614318 wdt:P58 wd:Q232470 .\nwd:Q11614318 wdt:P58 wd:Q440609\n}",
        "questionWithBrackets": "Were [Les Estivants] and [A Castle in Italy] written by [No\u00e9mie Lvovsky] and [Valeria Bruni Tedeschi] and directed by a female sibling of a spouse of [Nicolas Sarkozy]"
    },
    {
        "questionIdx": 118844,
        "questionPatternModEntities": "Were M0 , M2 , and M3 directed by , produced by , executive produced by , edited by , and written by M1",
        "questionTemplate": "Were [entity] , [entity] , and [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1 .\nM0 P2 M1 .\nM0 P3 M1 .\nM0 P4 M1 .\nM2 P0 M1 .\nM2 P1 M1 .\nM2 P2 M1 .\nM2 P3 M1 .\nM2 P4 M1 .\nM3 P0 M1 .\nM3 P1 M1 .\nM3 P2 M1 .\nM3 P3 M1 .\nM3 P4 M1\n}",
        "recursionDepth": 46,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q5437360 wdt:P57 wd:Q187261 .\nwd:Q5437360 wdt:P1040 wd:Q187261 .\nwd:Q5437360 wdt:P1431 wd:Q187261 .\nwd:Q5437360 wdt:P162|wdt:P272 wd:Q187261 .\nwd:Q5437360 wdt:P58 wd:Q187261 .\nwd:Q12813010 wdt:P57 wd:Q187261 .\nwd:Q12813010 wdt:P1040 wd:Q187261 .\nwd:Q12813010 wdt:P1431 wd:Q187261 .\nwd:Q12813010 wdt:P162|wdt:P272 wd:Q187261 .\nwd:Q12813010 wdt:P58 wd:Q187261 .\nwd:Q6084069 wdt:P57 wd:Q187261 .\nwd:Q6084069 wdt:P1040 wd:Q187261 .\nwd:Q6084069 wdt:P1431 wd:Q187261 .\nwd:Q6084069 wdt:P162|wdt:P272 wd:Q187261 .\nwd:Q6084069 wdt:P58 wd:Q187261\n}",
        "questionWithBrackets": "Were [The Waiting Room] , [Fate] , and [The Confession] directed by , produced by , executive produced by , edited by , and written by [Zeki Demirkubuz]"
    },
    {
        "questionIdx": 118884,
        "questionPatternModEntities": "Were M0 , M2 , M3 , and M4 directed by , executive produced by , and written by M1",
        "questionTemplate": "Were [entity] , [entity] , [entity] , and [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1 .\nM0 P2 M1 .\nM2 P0 M1 .\nM2 P1 M1 .\nM2 P2 M1 .\nM3 P0 M1 .\nM3 P1 M1 .\nM3 P2 M1 .\nM4 P0 M1 .\nM4 P1 M1 .\nM4 P2 M1\n}",
        "recursionDepth": 37,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q6075416 wdt:P57 wd:Q187261 .\nwd:Q6075416 wdt:P1431 wd:Q187261 .\nwd:Q6075416 wdt:P58 wd:Q187261 .\nwd:Q6785706 wdt:P57 wd:Q187261 .\nwd:Q6785706 wdt:P1431 wd:Q187261 .\nwd:Q6785706 wdt:P58 wd:Q187261 .\nwd:Q12813010 wdt:P57 wd:Q187261 .\nwd:Q12813010 wdt:P1431 wd:Q187261 .\nwd:Q12813010 wdt:P58 wd:Q187261 .\nwd:Q5437360 wdt:P57 wd:Q187261 .\nwd:Q5437360 wdt:P1431 wd:Q187261 .\nwd:Q5437360 wdt:P58 wd:Q187261\n}",
        "questionWithBrackets": "Were [Fate] , [Innocence] , [The Confession] , and [C Blok] directed by , executive produced by , and written by [Zeki Demirkubuz]"
    },
    {
        "questionIdx": 118905,
        "questionPatternModEntities": "Were M0 , M2 , and M3 executive produced , directed , and edited by M1",
        "questionTemplate": "Were [entity] , [entity] , and [entity] [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1 .\nM0 P2 M1 .\nM2 P0 M1 .\nM2 P1 M1 .\nM2 P2 M1 .\nM3 P0 M1 .\nM3 P1 M1 .\nM3 P2 M1\n}",
        "recursionDepth": 32,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q5437360 wdt:P57 wd:Q187261 .\nwd:Q5437360 wdt:P1040 wd:Q187261 .\nwd:Q5437360 wdt:P1431 wd:Q187261 .\nwd:Q6084069 wdt:P57 wd:Q187261 .\nwd:Q6084069 wdt:P1040 wd:Q187261 .\nwd:Q6084069 wdt:P1431 wd:Q187261 .\nwd:Q12813010 wdt:P57 wd:Q187261 .\nwd:Q12813010 wdt:P1040 wd:Q187261 .\nwd:Q12813010 wdt:P1431 wd:Q187261\n}",
        "questionWithBrackets": "Were [The Confession] , [Fate] , and [The Waiting Room] executive produced , directed , and edited by [Zeki Demirkubuz]"
    },
    {
        "questionIdx": 118936,
        "questionPatternModEntities": "Were M0 , M2 , and M3 directed by , executive produced by , written by , edited by , and produced by M1",
        "questionTemplate": "Were [entity] , [entity] , and [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1 .\nM0 P2 M1 .\nM0 P3 M1 .\nM0 P4 M1 .\nM2 P0 M1 .\nM2 P1 M1 .\nM2 P2 M1 .\nM2 P3 M1 .\nM2 P4 M1 .\nM3 P0 M1 .\nM3 P1 M1 .\nM3 P2 M1 .\nM3 P3 M1 .\nM3 P4 M1\n}",
        "recursionDepth": 46,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q5437360 wdt:P57 wd:Q187261 .\nwd:Q5437360 wdt:P1040 wd:Q187261 .\nwd:Q5437360 wdt:P1431 wd:Q187261 .\nwd:Q5437360 wdt:P162|wdt:P272 wd:Q187261 .\nwd:Q5437360 wdt:P58 wd:Q187261 .\nwd:Q6084069 wdt:P57 wd:Q187261 .\nwd:Q6084069 wdt:P1040 wd:Q187261 .\nwd:Q6084069 wdt:P1431 wd:Q187261 .\nwd:Q6084069 wdt:P162|wdt:P272 wd:Q187261 .\nwd:Q6084069 wdt:P58 wd:Q187261 .\nwd:Q12813010 wdt:P57 wd:Q187261 .\nwd:Q12813010 wdt:P1040 wd:Q187261 .\nwd:Q12813010 wdt:P1431 wd:Q187261 .\nwd:Q12813010 wdt:P162|wdt:P272 wd:Q187261 .\nwd:Q12813010 wdt:P58 wd:Q187261\n}",
        "questionWithBrackets": "Were [The Confession] , [Fate] , and [The Waiting Room] directed by , executive produced by , written by , edited by , and produced by [Zeki Demirkubuz]"
    },
    {
        "questionIdx": 118937,
        "questionPatternModEntities": "Were M0 , M2 , and M3 directed by , produced by , edited by , executive produced by , and written by M1",
        "questionTemplate": "Were [entity] , [entity] , and [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1 .\nM0 P2 M1 .\nM0 P3 M1 .\nM0 P4 M1 .\nM2 P0 M1 .\nM2 P1 M1 .\nM2 P2 M1 .\nM2 P3 M1 .\nM2 P4 M1 .\nM3 P0 M1 .\nM3 P1 M1 .\nM3 P2 M1 .\nM3 P3 M1 .\nM3 P4 M1\n}",
        "recursionDepth": 46,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q5437360 wdt:P57 wd:Q187261 .\nwd:Q5437360 wdt:P1040 wd:Q187261 .\nwd:Q5437360 wdt:P1431 wd:Q187261 .\nwd:Q5437360 wdt:P162|wdt:P272 wd:Q187261 .\nwd:Q5437360 wdt:P58 wd:Q187261 .\nwd:Q6084069 wdt:P57 wd:Q187261 .\nwd:Q6084069 wdt:P1040 wd:Q187261 .\nwd:Q6084069 wdt:P1431 wd:Q187261 .\nwd:Q6084069 wdt:P162|wdt:P272 wd:Q187261 .\nwd:Q6084069 wdt:P58 wd:Q187261 .\nwd:Q12813010 wdt:P57 wd:Q187261 .\nwd:Q12813010 wdt:P1040 wd:Q187261 .\nwd:Q12813010 wdt:P1431 wd:Q187261 .\nwd:Q12813010 wdt:P162|wdt:P272 wd:Q187261 .\nwd:Q12813010 wdt:P58 wd:Q187261\n}",
        "questionWithBrackets": "Were [The Confession] , [Fate] , and [The Waiting Room] directed by , produced by , edited by , executive produced by , and written by [Zeki Demirkubuz]"
    },
    {
        "questionIdx": 118946,
        "questionPatternModEntities": "Were M0 , M2 , and M3 produced by , directed by , written by , edited by , and executive produced by M1",
        "questionTemplate": "Were [entity] , [entity] , and [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1 .\nM0 P2 M1 .\nM0 P3 M1 .\nM0 P4 M1 .\nM2 P0 M1 .\nM2 P1 M1 .\nM2 P2 M1 .\nM2 P3 M1 .\nM2 P4 M1 .\nM3 P0 M1 .\nM3 P1 M1 .\nM3 P2 M1 .\nM3 P3 M1 .\nM3 P4 M1\n}",
        "recursionDepth": 46,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q5437360 wdt:P57 wd:Q187261 .\nwd:Q5437360 wdt:P1040 wd:Q187261 .\nwd:Q5437360 wdt:P1431 wd:Q187261 .\nwd:Q5437360 wdt:P162|wdt:P272 wd:Q187261 .\nwd:Q5437360 wdt:P58 wd:Q187261 .\nwd:Q6084069 wdt:P57 wd:Q187261 .\nwd:Q6084069 wdt:P1040 wd:Q187261 .\nwd:Q6084069 wdt:P1431 wd:Q187261 .\nwd:Q6084069 wdt:P162|wdt:P272 wd:Q187261 .\nwd:Q6084069 wdt:P58 wd:Q187261 .\nwd:Q12813010 wdt:P57 wd:Q187261 .\nwd:Q12813010 wdt:P1040 wd:Q187261 .\nwd:Q12813010 wdt:P1431 wd:Q187261 .\nwd:Q12813010 wdt:P162|wdt:P272 wd:Q187261 .\nwd:Q12813010 wdt:P58 wd:Q187261\n}",
        "questionWithBrackets": "Were [The Confession] , [Fate] , and [The Waiting Room] produced by , directed by , written by , edited by , and executive produced by [Zeki Demirkubuz]"
    },
    {
        "questionIdx": 118959,
        "questionPatternModEntities": "Were M0 , M2 , and M3 directed by , executive produced by , written by , produced by , and edited by M1",
        "questionTemplate": "Were [entity] , [entity] , and [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1 .\nM0 P2 M1 .\nM0 P3 M1 .\nM0 P4 M1 .\nM2 P0 M1 .\nM2 P1 M1 .\nM2 P2 M1 .\nM2 P3 M1 .\nM2 P4 M1 .\nM3 P0 M1 .\nM3 P1 M1 .\nM3 P2 M1 .\nM3 P3 M1 .\nM3 P4 M1\n}",
        "recursionDepth": 46,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q5437360 wdt:P57 wd:Q187261 .\nwd:Q5437360 wdt:P1040 wd:Q187261 .\nwd:Q5437360 wdt:P1431 wd:Q187261 .\nwd:Q5437360 wdt:P162|wdt:P272 wd:Q187261 .\nwd:Q5437360 wdt:P58 wd:Q187261 .\nwd:Q6084069 wdt:P57 wd:Q187261 .\nwd:Q6084069 wdt:P1040 wd:Q187261 .\nwd:Q6084069 wdt:P1431 wd:Q187261 .\nwd:Q6084069 wdt:P162|wdt:P272 wd:Q187261 .\nwd:Q6084069 wdt:P58 wd:Q187261 .\nwd:Q12813010 wdt:P57 wd:Q187261 .\nwd:Q12813010 wdt:P1040 wd:Q187261 .\nwd:Q12813010 wdt:P1431 wd:Q187261 .\nwd:Q12813010 wdt:P162|wdt:P272 wd:Q187261 .\nwd:Q12813010 wdt:P58 wd:Q187261\n}",
        "questionWithBrackets": "Were [The Confession] , [Fate] , and [The Waiting Room] directed by , executive produced by , written by , produced by , and edited by [Zeki Demirkubuz]"
    },
    {
        "questionIdx": 118960,
        "questionPatternModEntities": "Were M0 , M2 , and M3 directed by , written by , executive produced by , edited by , and produced by M1",
        "questionTemplate": "Were [entity] , [entity] , and [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1 .\nM0 P2 M1 .\nM0 P3 M1 .\nM0 P4 M1 .\nM2 P0 M1 .\nM2 P1 M1 .\nM2 P2 M1 .\nM2 P3 M1 .\nM2 P4 M1 .\nM3 P0 M1 .\nM3 P1 M1 .\nM3 P2 M1 .\nM3 P3 M1 .\nM3 P4 M1\n}",
        "recursionDepth": 46,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q5437360 wdt:P57 wd:Q187261 .\nwd:Q5437360 wdt:P1040 wd:Q187261 .\nwd:Q5437360 wdt:P1431 wd:Q187261 .\nwd:Q5437360 wdt:P162|wdt:P272 wd:Q187261 .\nwd:Q5437360 wdt:P58 wd:Q187261 .\nwd:Q6084069 wdt:P57 wd:Q187261 .\nwd:Q6084069 wdt:P1040 wd:Q187261 .\nwd:Q6084069 wdt:P1431 wd:Q187261 .\nwd:Q6084069 wdt:P162|wdt:P272 wd:Q187261 .\nwd:Q6084069 wdt:P58 wd:Q187261 .\nwd:Q12813010 wdt:P57 wd:Q187261 .\nwd:Q12813010 wdt:P1040 wd:Q187261 .\nwd:Q12813010 wdt:P1431 wd:Q187261 .\nwd:Q12813010 wdt:P162|wdt:P272 wd:Q187261 .\nwd:Q12813010 wdt:P58 wd:Q187261\n}",
        "questionWithBrackets": "Were [The Confession] , [Fate] , and [The Waiting Room] directed by , written by , executive produced by , edited by , and produced by [Zeki Demirkubuz]"
    },
    {
        "questionIdx": 119032,
        "questionPatternModEntities": "Were M1 , M2 , M3 , and M4 influenced by M0 's spouse",
        "questionTemplate": "Were [entity] , [entity] , [entity] , and [entity] [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nM1 P1 ?x0 .\nM2 P1 ?x0 .\nM3 P1 ?x0 .\nM4 P1 ?x0\n}",
        "recursionDepth": 26,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P26 wd:Q2641426 .\nFILTER ( ?x0 != wd:Q2641426 ) .\nwd:Q4822200 wdt:P737 ?x0 .\nwd:Q20987231 wdt:P737 ?x0 .\nwd:Q2292672 wdt:P737 ?x0 .\nwd:Q3052902 wdt:P737 ?x0\n}",
        "questionWithBrackets": "Were [Emmanuel de La Vill\u00e9on] , [Dimitrie \u0218tiubei] , [Aurel Ciupe] , and [Jean Dufy] influenced by [Camille Doncieux] 's spouse"
    },
    {
        "questionIdx": 119051,
        "questionPatternModEntities": "Were M1 and M5 directed by M4 , executive produced by M2 and M3 , and written by M0 's employee",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] and [entity] , and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 M2 .\nM1 P1 M3 .\nM1 P2 ?x0 .\nM1 P3 M4 .\nM5 P1 M2 .\nM5 P1 M3 .\nM5 P2 ?x0 .\nM5 P3 M4\n}",
        "recursionDepth": 45,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P108 wd:Q1026827 .\nwd:Q40302 wdt:P57 wd:Q2864567 .\nwd:Q40302 wdt:P1431 wd:Q3035770 .\nwd:Q40302 wdt:P1431 wd:Q2165499 .\nwd:Q40302 wdt:P58 ?x0 .\nwd:Q39722 wdt:P57 wd:Q2864567 .\nwd:Q39722 wdt:P1431 wd:Q3035770 .\nwd:Q39722 wdt:P1431 wd:Q2165499 .\nwd:Q39722 wdt:P58 ?x0\n}",
        "questionWithBrackets": "Were [The Rescuers] and [The Fox and the Hound] directed by [Art Stevens] , executive produced by [Ron W. Miller] and [Don Duckwall] , and written by [California Institute of the Arts] 's employee"
    },
    {
        "questionIdx": 119054,
        "questionPatternModEntities": "Were M1 and M5 written by M3 and M4 , written by M0 's employee , and executive produced by M2",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by [entity] and [entity] , [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 M2 .\nM1 P2 ?x0 .\nM1 P2 M3 .\nM1 P2 M4 .\nM5 P1 M2 .\nM5 P2 ?x0 .\nM5 P2 M3 .\nM5 P2 M4\n}",
        "recursionDepth": 45,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P108 wd:Q106255029 .\nwd:Q725578 wdt:P1431 wd:Q8877 .\nwd:Q725578 wdt:P58 ?x0 .\nwd:Q725578 wdt:P58 wd:Q467500 .\nwd:Q725578 wdt:P58 wd:Q432598 .\nwd:Q171453 wdt:P1431 wd:Q8877 .\nwd:Q171453 wdt:P58 ?x0 .\nwd:Q171453 wdt:P58 wd:Q467500 .\nwd:Q171453 wdt:P58 wd:Q432598\n}",
        "questionWithBrackets": "Were [Transformers] and [Cowboys & Aliens] written by [Alex Kurtzman] and [Roberto Orci] , written by [Sneaky Shark] 's employee , and executive produced by [Steven Spielberg]"
    },
    {
        "questionIdx": 119084,
        "questionPatternModEntities": "Were M1 and M2 influenced by M0 's parent",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 ?x0 .\nM2 P1 ?x0\n}",
        "recursionDepth": 20,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q2794279 .\nwd:Q991 wdt:P737 ?x0 .\nwd:Q3816 wdt:P737 ?x0\n}",
        "questionWithBrackets": "Were [George Sand] and [Fyodor Dostoyevsky] influenced by [Susanna Hall] 's parent"
    },
    {
        "questionIdx": 119090,
        "questionPatternModEntities": "Were M1 , M2 , M3 , M4 , M5 , and M6 directed by M0 's sibling",
        "questionTemplate": "Were [entity] , [entity] , [entity] , [entity] , [entity] , and [entity] [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nM1 P1 ?x0 .\nM2 P1 ?x0 .\nM3 P1 ?x0 .\nM4 P1 ?x0 .\nM5 P1 ?x0 .\nM6 P1 ?x0\n}",
        "recursionDepth": 32,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P3373 wd:Q104373781 .\nFILTER ( ?x0 != wd:Q104373781 ) .\nwd:Q83365219 wdt:P57 ?x0 .\nwd:Q48631343 wdt:P57 ?x0 .\nwd:Q2085 wdt:P57 ?x0 .\nwd:Q11618 wdt:P57 ?x0 .\nwd:Q507285 wdt:P57 ?x0 .\nwd:Q272860 wdt:P57 ?x0\n}",
        "questionWithBrackets": "Were [The Elephant Man] , [Twin Peaks] , [Part 3] , [Eraserhead] , [What Did Jack Do?] , and [Lumi\u00e8re and Company] directed by [John Lynch] 's sibling"
    },
    {
        "questionIdx": 119106,
        "questionPatternModEntities": "Were M2 , M4 , and M5 influenced by M0 's parent , influenced by M3 , and influenced by M1 's parent",
        "questionTemplate": "Were [entity] , [entity] , and [entity] [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x1 P0 M1 .\nM2 P1 ?x0 .\nM2 P1 ?x1 .\nM2 P1 M3 .\nM4 P1 ?x0 .\nM4 P1 ?x1 .\nM4 P1 M3 .\nM5 P1 ?x0 .\nM5 P1 ?x1 .\nM5 P1 M3\n}",
        "recursionDepth": 47,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q555426 .\n?x1 wdt:P40|wdt:P355 wd:Q766818 .\nwd:Q1299 wdt:P737 ?x0 .\nwd:Q1299 wdt:P737 ?x1 .\nwd:Q1299 wdt:P737 wd:Q392 .\nwd:Q440100 wdt:P737 ?x0 .\nwd:Q440100 wdt:P737 ?x1 .\nwd:Q440100 wdt:P737 wd:Q392 .\nwd:Q713270 wdt:P737 ?x0 .\nwd:Q713270 wdt:P737 ?x1 .\nwd:Q713270 wdt:P737 wd:Q392\n}",
        "questionWithBrackets": "Were [Ulf Lundell] , [The Beatles] , and [Jonathan Lethem] influenced by [Jakob Dylan] 's parent , influenced by [Bob Dylan] , and influenced by [Jesse Dylan] 's parent"
    },
    {
        "questionIdx": 119116,
        "questionPatternModEntities": "Were M1 , M2 , and M3 influenced by M0 's parent",
        "questionTemplate": "Were [entity] , [entity] , and [entity] [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 ?x0 .\nM2 P1 ?x0 .\nM3 P1 ?x0\n}",
        "recursionDepth": 23,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q3310371 .\nwd:Q3052902 wdt:P737 ?x0 .\nwd:Q13677316 wdt:P737 ?x0 .\nwd:Q45205 wdt:P737 ?x0\n}",
        "questionWithBrackets": "Were [Paolo Salvati] , [Raoul Dufy] , and [Emmanuel de La Vill\u00e9on] influenced by [Michel Monet] 's parent"
    },
    {
        "questionIdx": 119117,
        "questionPatternModEntities": "Were M0 , M2 , and M3 Swedish",
        "questionTemplate": "Were [entity] , [entity] , and [entity] [ADJECTIVE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM2 P0 M1 .\nM3 P0 M1\n}",
        "recursionDepth": 16,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q67177 wdt:P27 wd:Q34 .\nwd:Q530 wdt:P27 wd:Q34 .\nwd:Q1267 wdt:P27 wd:Q34\n}",
        "questionWithBrackets": "Were [Dag Hammarskj\u00f6ld] , [Jakob von Uexkull] , and [Ingemar Stenmark] Swedish"
    },
    {
        "questionIdx": 119150,
        "questionPatternModEntities": "Were M4 and M5 influenced by a spouse of M3 and influenced by a female German employee of M0",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity] and [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P2 M2 .\n?x1 P3 M3 .\nFILTER ( ?x1 != M3 ) .\nM4 P4 ?x0 .\nM4 P4 ?x1 .\nM5 P4 ?x0 .\nM5 P4 ?x1\n}",
        "recursionDepth": 49,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P108 wd:Q131252 .\n?x0 wdt:P21 wd:Q6581072 .\n?x0 wdt:P27 wd:Q183 .\n?x1 wdt:P26 wd:Q71696 .\nFILTER ( ?x1 != wd:Q71696 ) .\nwd:Q340234 wdt:P737 ?x0 .\nwd:Q340234 wdt:P737 ?x1 .\nwd:Q311687 wdt:P737 ?x0 .\nwd:Q311687 wdt:P737 ?x1\n}",
        "questionWithBrackets": "Were [Giorgio Agamben] and [Achille Mbembe] influenced by a spouse of [Heinrich Bl\u00fccher] and influenced by a female German employee of [University of Chicago]"
    },
    {
        "questionIdx": 119156,
        "questionPatternModEntities": "Were M2 , M4 , and M5 influenced by M3 and influenced by a Chinese spouse of M1",
        "questionTemplate": "Were [entity] , [entity] , and [entity] [VP_SIMPLE] by [entity] and [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M1 ) .\nM2 P2 ?x0 .\nM2 P2 M3 .\nM4 P2 ?x0 .\nM4 P2 M3 .\nM5 P2 ?x0 .\nM5 P2 M3\n}",
        "recursionDepth": 41,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P27 wd:Q148 .\n?x0 wdt:P26 wd:Q236017 .\nFILTER ( ?x0 != wd:Q236017 ) .\nwd:Q311005 wdt:P737 ?x0 .\nwd:Q311005 wdt:P737 wd:Q5816 .\nwd:Q1083986 wdt:P737 ?x0 .\nwd:Q1083986 wdt:P737 wd:Q5816 .\nwd:Q98959043 wdt:P737 ?x0 .\nwd:Q98959043 wdt:P737 wd:Q5816\n}",
        "questionWithBrackets": "Were [Kent Ford] , [Alain Badiou] , and [Maria Antonietta Macciocchi] influenced by [Mao Zedong] and influenced by a Chinese spouse of [Jiang Qing]"
    },
    {
        "questionIdx": 119225,
        "questionPatternModEntities": "Were M0 , M2 , M3 , M4 , M5 , M6 , and M7 Chinese",
        "questionTemplate": "Were [entity] , [entity] , [entity] , [entity] , [entity] , [entity] , and [entity] [ADJECTIVE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM2 P0 M1 .\nM3 P0 M1 .\nM4 P0 M1 .\nM5 P0 M1 .\nM6 P0 M1 .\nM7 P0 M1\n}",
        "recursionDepth": 28,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q74138 wdt:P27 wd:Q148 .\nwd:Q4931 wdt:P27 wd:Q148 .\nwd:Q5208 wdt:P27 wd:Q148 .\nwd:Q1708 wdt:P27 wd:Q148 .\nwd:Q6391 wdt:P27 wd:Q148 .\nwd:Q13005 wdt:P27 wd:Q148 .\nwd:Q6370 wdt:P27 wd:Q148\n}",
        "questionWithBrackets": "Were [Chen Ding] , [Huang Xianfan] , [Gong Lijiao] , [Wang Tao] , [Li Yanfeng] , [Cheang Pou-soi] , and [Ba Jin] Chinese"
    },
    {
        "questionIdx": 119252,
        "questionPatternModEntities": "Were M3 and M5 influenced by M4 and influenced by M2 's French German spouse",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by [entity] and [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P1 M2 .\nFILTER ( ?x0 != M2 ) .\nM3 P2 ?x0 .\nM3 P2 M4 .\nM5 P2 ?x0 .\nM5 P2 M4\n}",
        "recursionDepth": 41,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P27 wd:Q183 .\n?x0 wdt:P27 wd:Q142 .\n?x0 wdt:P26 wd:Q254395 .\nFILTER ( ?x0 != wd:Q254395 ) .\nwd:Q151580 wdt:P737 ?x0 .\nwd:Q151580 wdt:P737 wd:Q152384 .\nwd:Q5308687 wdt:P737 ?x0 .\nwd:Q5308687 wdt:P737 wd:Q152384\n}",
        "questionWithBrackets": "Were [Drowning Girl] and [Alexander Calder] influenced by [Joan Mir\u00f3] and influenced by [Sophie Taeuber-Arp] 's French German spouse"
    },
    {
        "questionIdx": 119256,
        "questionPatternModEntities": "Were M0 , M2 , and M3 Italian",
        "questionTemplate": "Were [entity] , [entity] , and [entity] [ADJECTIVE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM2 P0 M1 .\nM3 P0 M1\n}",
        "recursionDepth": 16,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q67964 wdt:P27 wd:Q38 .\nwd:Q615 wdt:P27 wd:Q38 .\nwd:Q1220 wdt:P27 wd:Q38\n}",
        "questionWithBrackets": "Were [Lionel Messi] , [Giorgio Napolitano] , and [Roberto Baggio] Italian"
    },
    {
        "questionIdx": 119296,
        "questionPatternModEntities": "Were M0 and M7 edited by M6 and executive produced by M1 , M2 , M3 , M4 , and M5",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by [entity] and [VP_SIMPLE] by [entity] , [entity] , [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P0 M3 .\nM0 P0 M4 .\nM0 P0 M5 .\nM0 P1 M6 .\nM7 P0 M1 .\nM7 P0 M2 .\nM7 P0 M3 .\nM7 P0 M4 .\nM7 P0 M5 .\nM7 P1 M6\n}",
        "recursionDepth": 41,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q309366 wdt:P1040 wd:Q2576962 .\nwd:Q309366 wdt:P1431 wd:Q24809564 .\nwd:Q309366 wdt:P1431 wd:Q24809566 .\nwd:Q309366 wdt:P1431 wd:Q18153889 .\nwd:Q309366 wdt:P1431 wd:Q24817449 .\nwd:Q309366 wdt:P1431 wd:Q24991787 .\nwd:Q388360 wdt:P1040 wd:Q2576962 .\nwd:Q388360 wdt:P1431 wd:Q24809564 .\nwd:Q388360 wdt:P1431 wd:Q24809566 .\nwd:Q388360 wdt:P1431 wd:Q18153889 .\nwd:Q388360 wdt:P1431 wd:Q24817449 .\nwd:Q388360 wdt:P1431 wd:Q24991787\n}",
        "questionWithBrackets": "Were [National Treasure] and [National Treasure: Book of Secrets] edited by [William Goldenberg] and executive produced by [Barry H. Waldman] , [Mike Stenson] , [Charles Segars] , [Oren Aviv] , and [Chad Oman]"
    },
    {
        "questionIdx": 119298,
        "questionPatternModEntities": "Were M0 and M6 executive produced by M1 and M2 , executive produced by M3 and M4 , and directed by M5",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by [entity] and [entity] , [VP_SIMPLE] by [entity] and [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P0 M3 .\nM0 P0 M4 .\nM0 P1 M5 .\nM6 P0 M1 .\nM6 P0 M2 .\nM6 P0 M3 .\nM6 P0 M4 .\nM6 P1 M5\n}",
        "recursionDepth": 46,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q56747765 wdt:P57 wd:Q2510311 .\nwd:Q56747765 wdt:P1431 wd:Q862389 .\nwd:Q56747765 wdt:P1431 wd:Q7612870 .\nwd:Q56747765 wdt:P1431 wd:Q3056308 .\nwd:Q56747765 wdt:P1431 wd:Q7615062 .\nwd:Q54555937 wdt:P57 wd:Q2510311 .\nwd:Q54555937 wdt:P1431 wd:Q862389 .\nwd:Q54555937 wdt:P1431 wd:Q7612870 .\nwd:Q54555937 wdt:P1431 wd:Q3056308 .\nwd:Q54555937 wdt:P1431 wd:Q7615062\n}",
        "questionWithBrackets": "Were [The Conjugal Configuration] and [The Bow Tie Asymmetry] executive produced by [Bill Prady] and [Steven Molaro] , executive produced by [Eric Kaplan] and [Steve Holland] , and directed by [Mark Cendrowski]"
    },
    {
        "questionIdx": 119299,
        "questionPatternModEntities": "Were M0 and M6 executive produced by M1 , executive produced by M2 , M3 , and M4 , and executive produced by M5",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , [entity] , and [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P0 M3 .\nM0 P0 M4 .\nM0 P0 M5 .\nM6 P0 M1 .\nM6 P0 M2 .\nM6 P0 M3 .\nM6 P0 M4 .\nM6 P0 M5\n}",
        "recursionDepth": 46,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q7711132 wdt:P1431 wd:Q2016115 .\nwd:Q7711132 wdt:P1431 wd:Q2910308 .\nwd:Q7711132 wdt:P1431 wd:Q16874411 .\nwd:Q7711132 wdt:P1431 wd:Q2484170 .\nwd:Q7711132 wdt:P1431 wd:Q5047701 .\nwd:Q57651904 wdt:P1431 wd:Q2016115 .\nwd:Q57651904 wdt:P1431 wd:Q2910308 .\nwd:Q57651904 wdt:P1431 wd:Q16874411 .\nwd:Q57651904 wdt:P1431 wd:Q2484170 .\nwd:Q57651904 wdt:P1431 wd:Q5047701\n}",
        "questionWithBrackets": "Were [That '70s Pilot] and [Red's Last Day] executive produced by [Tom Werner] , executive produced by [Bonnie Turner] , [Terry Turner] , and [Caryn Mandabach] , and executive produced by [Mark Brazill]"
    },
    {
        "questionIdx": 119300,
        "questionPatternModEntities": "Were M0 and M6 executive produced by M1 and M2 , directed by M5 , and executive produced by M3 and M4",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by [entity] and [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P0 M3 .\nM0 P0 M4 .\nM0 P1 M5 .\nM6 P0 M1 .\nM6 P0 M2 .\nM6 P0 M3 .\nM6 P0 M4 .\nM6 P1 M5\n}",
        "recursionDepth": 46,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q127367 wdt:P57 wd:Q4465 .\nwd:Q127367 wdt:P1431 wd:Q421488 .\nwd:Q127367 wdt:P1431 wd:Q6832375 .\nwd:Q127367 wdt:P1431 wd:Q531599 .\nwd:Q127367 wdt:P1431 wd:Q888311 .\nwd:Q131074 wdt:P57 wd:Q4465 .\nwd:Q131074 wdt:P1431 wd:Q421488 .\nwd:Q131074 wdt:P1431 wd:Q6832375 .\nwd:Q131074 wdt:P1431 wd:Q531599 .\nwd:Q131074 wdt:P1431 wd:Q888311\n}",
        "questionWithBrackets": "Were [The Lord of the Rings: The Return of the King] and [The Lord of the Rings: The Fellowship of the Ring] executive produced by [Mark Ordesky] and [Michael Lynne] , directed by [Peter Jackson] , and executive produced by [Harvey Weinstein] and [Bob Weinstein]"
    },
    {
        "questionIdx": 119316,
        "questionPatternModEntities": "Were M1 , M2 , M3 , and M4 written by a spouse of M0",
        "questionTemplate": "Were [entity] , [entity] , [entity] , and [entity] [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nM1 P1 ?x0 .\nM2 P1 ?x0 .\nM3 P1 ?x0 .\nM4 P1 ?x0\n}",
        "recursionDepth": 28,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P26 wd:Q234773 .\nFILTER ( ?x0 != wd:Q234773 ) .\nwd:Q498800 wdt:P58 ?x0 .\nwd:Q429520 wdt:P58 ?x0 .\nwd:Q2075102 wdt:P58 ?x0 .\nwd:Q603440 wdt:P58 ?x0\n}",
        "questionWithBrackets": "Were [Blue Hawaii] , [Double Trouble] , [Frankie and Johnny] , and [Charro!] written by a spouse of [Priscilla Presley]"
    },
    {
        "questionIdx": 119335,
        "questionPatternModEntities": "Were M1 and M2 influenced by M0 's sibling",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nM1 P1 ?x0 .\nM2 P1 ?x0\n}",
        "recursionDepth": 20,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P3373 wd:Q5339820 .\nFILTER ( ?x0 != wd:Q5339820 ) .\nwd:Q991 wdt:P737 ?x0 .\nwd:Q9068 wdt:P737 ?x0\n}",
        "questionWithBrackets": "Were [Voltaire] and [Fyodor Dostoyevsky] influenced by [Edmund Shakespeare] 's sibling"
    },
    {
        "questionIdx": 119346,
        "questionPatternModEntities": "Were M2 and M4 influenced by M3 and influenced by a British sibling of M0",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by [entity] and [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M0 ) .\nM2 P2 ?x0 .\nM2 P2 M3 .\nM4 P2 ?x0 .\nM4 P2 M3\n}",
        "recursionDepth": 38,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P27 wd:Q145 .\n?x0 wdt:P3373 wd:Q3360333 .\nFILTER ( ?x0 != wd:Q3360333 ) .\nwd:Q42455 wdt:P737 ?x0 .\nwd:Q42455 wdt:P737 wd:Q636 .\nwd:Q31164 wdt:P737 ?x0 .\nwd:Q31164 wdt:P737 wd:Q636\n}",
        "questionWithBrackets": "Were [Bj\u00f6rk] and [Ellie Goulding] influenced by [Kate Bush] and influenced by a British sibling of [Paddy Bush]"
    },
    {
        "questionIdx": 119353,
        "questionPatternModEntities": "Were M1 and M4 influenced by M2 , influenced by M0 's employee 's sibling , and influenced by M3",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x1 P1 M0 .\nFILTER ( ?x0 != ?x1 ) .\nM1 P2 ?x0 .\nM1 P2 M2 .\nM1 P2 M3 .\nM4 P2 ?x0 .\nM4 P2 M2 .\nM4 P2 M3\n}",
        "recursionDepth": 44,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P3373 ?x1 .\n?x1 wdt:P108 wd:Q1206616 .\nFILTER ( ?x0 != ?x1 ) .\nwd:Q2607 wdt:P737 ?x0 .\nwd:Q2607 wdt:P737 wd:Q855 .\nwd:Q2607 wdt:P737 wd:Q1394 .\nwd:Q1678730 wdt:P737 ?x0 .\nwd:Q1678730 wdt:P737 wd:Q855 .\nwd:Q1678730 wdt:P737 wd:Q1394\n}",
        "questionWithBrackets": "Were [Erich Honecker] and [Jaime Hurtado] influenced by [Joseph Stalin] , influenced by [Deuxi\u00e8me Bureau] 's employee 's sibling , and influenced by [Vladimir Lenin]"
    },
    {
        "questionIdx": 119358,
        "questionPatternModEntities": "Were M0 , M2 , M3 , and M4 Swedish",
        "questionTemplate": "Were [entity] , [entity] , [entity] , and [entity] [ADJECTIVE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM2 P0 M1 .\nM3 P0 M1 .\nM4 P0 M1\n}",
        "recursionDepth": 19,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q67177 wdt:P27 wd:Q34 .\nwd:Q530 wdt:P27 wd:Q34 .\nwd:Q700 wdt:P27 wd:Q34 .\nwd:Q1043 wdt:P27 wd:Q34\n}",
        "questionWithBrackets": "Were [Carl Linnaeus] , [Jakob von Uexkull] , [Swedish Chef] , and [Ingemar Stenmark] Swedish"
    },
    {
        "questionIdx": 119451,
        "questionPatternModEntities": "Were M1 and M5 directed by M0 's spouse , executive produced by M2 , and executive produced by M3 and M4",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nM1 P1 M2 .\nM1 P1 M3 .\nM1 P1 M4 .\nM1 P2 ?x0 .\nM5 P1 M2 .\nM5 P1 M3 .\nM5 P1 M4 .\nM5 P2 ?x0\n}",
        "recursionDepth": 46,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P26 wd:Q26761639 .\nFILTER ( ?x0 != wd:Q26761639 ) .\nwd:Q18407657 wdt:P57 ?x0 .\nwd:Q18407657 wdt:P1431 wd:Q181900 .\nwd:Q18407657 wdt:P1431 wd:Q24176186 .\nwd:Q18407657 wdt:P1431 wd:Q23409539 .\nwd:Q23781155 wdt:P57 ?x0 .\nwd:Q23781155 wdt:P1431 wd:Q181900 .\nwd:Q23781155 wdt:P1431 wd:Q24176186 .\nwd:Q23781155 wdt:P1431 wd:Q23409539\n}",
        "questionWithBrackets": "Were [Captain America: Civil War] and [Avengers: Endgame] directed by [Ann Russo] 's spouse , executive produced by [Stan Lee] , and executive produced by [Victoria Alonso] and [Louis D'Esposito]"
    },
    {
        "questionIdx": 119485,
        "questionPatternModEntities": "Were M1 , M2 , M3 , and M4 directed by M0 's parent",
        "questionTemplate": "Were [entity] , [entity] , [entity] , and [entity] [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 ?x0 .\nM2 P1 ?x0 .\nM3 P1 ?x0 .\nM4 P1 ?x0\n}",
        "recursionDepth": 26,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q120593 .\nwd:Q1923676 wdt:P57 ?x0 .\nwd:Q109116 wdt:P57 ?x0 .\nwd:Q45602 wdt:P57 ?x0 .\nwd:Q199039 wdt:P57 ?x0\n}",
        "questionWithBrackets": "Were [Pay Day] , [Modern Times] , [The Great Dictator] , and [The Cure] directed by [Eugene Chaplin] 's parent"
    },
    {
        "questionIdx": 119505,
        "questionPatternModEntities": "Were M2 , M3 , and M4 produced by , directed by , and written by a Japanese parent of M1",
        "questionTemplate": "Were [entity] , [entity] , and [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nM2 P2 ?x0 .\nM2 P3 ?x0 .\nM2 P4 ?x0 .\nM3 P2 ?x0 .\nM3 P3 ?x0 .\nM3 P4 ?x0 .\nM4 P2 ?x0 .\nM4 P3 ?x0 .\nM4 P4 ?x0\n}",
        "recursionDepth": 44,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q1620638 .\n?x0 wdt:P27 wd:Q17 .\nwd:Q1475995 wdt:P57 ?x0 .\nwd:Q1475995 wdt:P162|wdt:P272 ?x0 .\nwd:Q1475995 wdt:P58 ?x0 .\nwd:Q39946 wdt:P57 ?x0 .\nwd:Q39946 wdt:P162|wdt:P272 ?x0 .\nwd:Q39946 wdt:P58 ?x0 .\nwd:Q854990 wdt:P57 ?x0 .\nwd:Q854990 wdt:P162|wdt:P272 ?x0 .\nwd:Q854990 wdt:P58 ?x0\n}",
        "questionWithBrackets": "Were [Kagemusha] , [The Lower Depths] , and [The Hidden Fortress] produced by , directed by , and written by a Japanese parent of [Hisao Kurosawa]"
    },
    {
        "questionIdx": 119527,
        "questionPatternModEntities": "Were M0 and M5 influenced by M1 , M2 , M3 , and M4",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by [entity] , [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P0 M3 .\nM0 P0 M4 .\nM5 P0 M1 .\nM5 P0 M2 .\nM5 P0 M3 .\nM5 P0 M4\n}",
        "recursionDepth": 26,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q9047 wdt:P737 wd:Q859 .\nwd:Q9047 wdt:P737 wd:Q251259 .\nwd:Q9047 wdt:P737 wd:Q1290 .\nwd:Q9047 wdt:P737 wd:Q4604 .\nwd:Q9068 wdt:P737 wd:Q859 .\nwd:Q9068 wdt:P737 wd:Q251259 .\nwd:Q9068 wdt:P737 wd:Q1290 .\nwd:Q9068 wdt:P737 wd:Q4604\n}",
        "questionWithBrackets": "Were [Voltaire] and [Gottfried Wilhelm Leibniz] influenced by [Confucius] , [Ibn Tufayl] , [Plato] , and [Blaise Pascal]"
    },
    {
        "questionIdx": 119528,
        "questionPatternModEntities": "Were M1 and M4 influenced by a spouse of a spouse of M0 and influenced by M2 and M3",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by a [ROLE_SIMPLE] of a [ROLE_SIMPLE] of [entity] and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x1 P0 M0 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x1 != M0 ) .\nM1 P1 ?x0 .\nM1 P1 M2 .\nM1 P1 M3 .\nM4 P1 ?x0 .\nM4 P1 M2 .\nM4 P1 M3\n}",
        "recursionDepth": 43,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P26 ?x1 .\n?x1 wdt:P26 wd:Q868 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x1 != wd:Q868 ) .\nwd:Q3816 wdt:P737 ?x0 .\nwd:Q3816 wdt:P737 wd:Q79822 .\nwd:Q3816 wdt:P737 wd:Q41568 .\nwd:Q9358 wdt:P737 ?x0 .\nwd:Q9358 wdt:P737 wd:Q79822 .\nwd:Q9358 wdt:P737 wd:Q41568\n}",
        "questionWithBrackets": "Were [George Sand] and [Friedrich Nietzsche] influenced by a spouse of a spouse of [Aristotle] and influenced by [Adam Mickiewicz] and [Michel de Montaigne]"
    },
    {
        "questionIdx": 119530,
        "questionPatternModEntities": "Were M1 and M2 employed by a child of M0",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 ?x0 .\nM2 P1 ?x0\n}",
        "recursionDepth": 22,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P749 wd:Q1065 .\nwd:Q49283272 wdt:P108 ?x0 .\nwd:Q57741 wdt:P108 ?x0\n}",
        "questionWithBrackets": "Were [Salam Fayyad] and [Thierry Kalfon] employed by a child of [United Nations]"
    },
    {
        "questionIdx": 119587,
        "questionPatternModEntities": "Were M3 and M4 edited by M1 's female sibling and written by M0 's spouse",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x1 P1 M1 .\n?x1 P2 M2 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x1 != M1 ) .\nM3 P3 ?x0 .\nM3 P4 ?x1 .\nM4 P3 ?x0 .\nM4 P4 ?x1\n}",
        "recursionDepth": 40,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P26 wd:Q526008 .\n?x1 wdt:P21 wd:Q6581072 .\n?x1 wdt:P3373 wd:Q7280192 .\nFILTER ( ?x0 != wd:Q526008 ) .\nFILTER ( ?x1 != wd:Q7280192 ) .\nwd:Q1241447 wdt:P1040 ?x1 .\nwd:Q1241447 wdt:P58 ?x0 .\nwd:Q207494 wdt:P1040 ?x1 .\nwd:Q207494 wdt:P58 ?x0\n}",
        "questionWithBrackets": "Were [Parinda] and [1942: A Love Story] edited by [Radha Saluja] 's female sibling and written by [Anupama Chopra] 's spouse"
    },
    {
        "questionIdx": 119588,
        "questionPatternModEntities": "Were M0 , M2 , and M3 written by M1",
        "questionTemplate": "Were [entity] , [entity] , and [entity] [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM2 P0 M1 .\nM3 P0 M1\n}",
        "recursionDepth": 19,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q1068968 wdt:P58 wd:Q882 .\nwd:Q109116 wdt:P58 wd:Q882 .\nwd:Q166739 wdt:P58 wd:Q882\n}",
        "questionWithBrackets": "Were [The Great Dictator] , [A King in New York] , and [The Floorwalker] written by [Charlie Chaplin]"
    },
    {
        "questionIdx": 119593,
        "questionPatternModEntities": "Were M0 and M5 executive produced by M1 , written by M2 , written by M3 , and directed by M4",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M2 .\nM0 P1 M3 .\nM0 P2 M4 .\nM5 P0 M1 .\nM5 P1 M2 .\nM5 P1 M3 .\nM5 P2 M4\n}",
        "recursionDepth": 46,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q191100 wdt:P57 wd:Q59259 .\nwd:Q191100 wdt:P1431 wd:Q8877 .\nwd:Q191100 wdt:P58 wd:Q467500 .\nwd:Q191100 wdt:P58 wd:Q432598 .\nwd:Q171453 wdt:P57 wd:Q59259 .\nwd:Q171453 wdt:P1431 wd:Q8877 .\nwd:Q171453 wdt:P58 wd:Q467500 .\nwd:Q171453 wdt:P58 wd:Q432598\n}",
        "questionWithBrackets": "Were [Transformers: Revenge of the Fallen] and [Transformers] executive produced by [Steven Spielberg] , written by [Alex Kurtzman] , written by [Roberto Orci] , and directed by [Michael Bay]"
    },
    {
        "questionIdx": 119597,
        "questionPatternModEntities": "Were M2 and M3 executive produced by M1 's Japanese spouse",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M1 ) .\nM2 P2 ?x0 .\nM3 P2 ?x0\n}",
        "recursionDepth": 26,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P27 wd:Q17 .\n?x0 wdt:P26 wd:Q2828975 .\nFILTER ( ?x0 != wd:Q2828975 ) .\nwd:Q29011 wdt:P1431 ?x0 .\nwd:Q167206 wdt:P1431 ?x0\n}",
        "questionWithBrackets": "Were [Pom Poko] and [Howl's Moving Castle] executive produced by [Akemi \u014cta] 's Japanese spouse"
    },
    {
        "questionIdx": 119638,
        "questionPatternModEntities": "Were M3 , M4 , and M5 executive produced by M0 's American employee and written by a sibling of M2",
        "questionTemplate": "Were [entity] , [entity] , and [entity] [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] and [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x1 P2 M2 .\nFILTER ( ?x1 != M2 ) .\nM3 P3 ?x0 .\nM3 P4 ?x1 .\nM4 P3 ?x0 .\nM4 P4 ?x1 .\nM5 P3 ?x0 .\nM5 P4 ?x1\n}",
        "recursionDepth": 46,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P108 wd:Q3194369 .\n?x0 wdt:P27 wd:Q30 .\n?x1 wdt:P3373 wd:Q513098 .\nFILTER ( ?x1 != wd:Q513098 ) .\nwd:Q3985807 wdt:P1431 ?x0 .\nwd:Q3985807 wdt:P58 ?x1 .\nwd:Q3851974 wdt:P1431 ?x0 .\nwd:Q3851974 wdt:P58 ?x1 .\nwd:Q3987856 wdt:P1431 ?x0 .\nwd:Q3987856 wdt:P58 ?x1\n}",
        "questionWithBrackets": "Were [The Lady of Red Butte] , [Matrimony] , and [The Battle of Gettysburg] executive produced by [Kay-Bee Pictures] 's American employee and written by a sibling of [Frank Sullivan]"
    },
    {
        "questionIdx": 119677,
        "questionPatternModEntities": "Were M0 , M2 , and M3 produced by , written by , directed by , executive produced by , and edited by M1",
        "questionTemplate": "Were [entity] , [entity] , and [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1 .\nM0 P2 M1 .\nM0 P3 M1 .\nM0 P4 M1 .\nM2 P0 M1 .\nM2 P1 M1 .\nM2 P2 M1 .\nM2 P3 M1 .\nM2 P4 M1 .\nM3 P0 M1 .\nM3 P1 M1 .\nM3 P2 M1 .\nM3 P3 M1 .\nM3 P4 M1\n}",
        "recursionDepth": 46,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q6084069 wdt:P57 wd:Q187261 .\nwd:Q6084069 wdt:P1040 wd:Q187261 .\nwd:Q6084069 wdt:P1431 wd:Q187261 .\nwd:Q6084069 wdt:P162|wdt:P272 wd:Q187261 .\nwd:Q6084069 wdt:P58 wd:Q187261 .\nwd:Q12813010 wdt:P57 wd:Q187261 .\nwd:Q12813010 wdt:P1040 wd:Q187261 .\nwd:Q12813010 wdt:P1431 wd:Q187261 .\nwd:Q12813010 wdt:P162|wdt:P272 wd:Q187261 .\nwd:Q12813010 wdt:P58 wd:Q187261 .\nwd:Q5437360 wdt:P57 wd:Q187261 .\nwd:Q5437360 wdt:P1040 wd:Q187261 .\nwd:Q5437360 wdt:P1431 wd:Q187261 .\nwd:Q5437360 wdt:P162|wdt:P272 wd:Q187261 .\nwd:Q5437360 wdt:P58 wd:Q187261\n}",
        "questionWithBrackets": "Were [The Waiting Room] , [The Confession] , and [Fate] produced by , written by , directed by , executive produced by , and edited by [Zeki Demirkubuz]"
    },
    {
        "questionIdx": 119683,
        "questionPatternModEntities": "Were M1 , M2 , M3 , M4 , and M5 influenced by a parent of M0",
        "questionTemplate": "Were [entity] , [entity] , [entity] , [entity] , and [entity] [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 ?x0 .\nM2 P1 ?x0 .\nM3 P1 ?x0 .\nM4 P1 ?x0 .\nM5 P1 ?x0\n}",
        "recursionDepth": 31,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q10862805 .\nwd:Q3261116 wdt:P737 ?x0 .\nwd:Q3130641 wdt:P737 ?x0 .\nwd:Q61064 wdt:P737 ?x0 .\nwd:Q45205 wdt:P737 ?x0 .\nwd:Q3052902 wdt:P737 ?x0\n}",
        "questionWithBrackets": "Were [Wassily Kandinsky] , [Louis Aston Knight] , [Emmanuel de La Vill\u00e9on] , [Raoul Dufy] , and [Henri Beau] influenced by a parent of [Jean Monet]"
    },
    {
        "questionIdx": 119693,
        "questionPatternModEntities": "Were M0 , M2 , and M3 edited by , directed by , executive produced by , written by , and produced by M1",
        "questionTemplate": "Were [entity] , [entity] , and [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1 .\nM0 P2 M1 .\nM0 P3 M1 .\nM0 P4 M1 .\nM2 P0 M1 .\nM2 P1 M1 .\nM2 P2 M1 .\nM2 P3 M1 .\nM2 P4 M1 .\nM3 P0 M1 .\nM3 P1 M1 .\nM3 P2 M1 .\nM3 P3 M1 .\nM3 P4 M1\n}",
        "recursionDepth": 46,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q5437360 wdt:P57 wd:Q187261 .\nwd:Q5437360 wdt:P1040 wd:Q187261 .\nwd:Q5437360 wdt:P1431 wd:Q187261 .\nwd:Q5437360 wdt:P162|wdt:P272 wd:Q187261 .\nwd:Q5437360 wdt:P58 wd:Q187261 .\nwd:Q6084069 wdt:P57 wd:Q187261 .\nwd:Q6084069 wdt:P1040 wd:Q187261 .\nwd:Q6084069 wdt:P1431 wd:Q187261 .\nwd:Q6084069 wdt:P162|wdt:P272 wd:Q187261 .\nwd:Q6084069 wdt:P58 wd:Q187261 .\nwd:Q12813010 wdt:P57 wd:Q187261 .\nwd:Q12813010 wdt:P1040 wd:Q187261 .\nwd:Q12813010 wdt:P1431 wd:Q187261 .\nwd:Q12813010 wdt:P162|wdt:P272 wd:Q187261 .\nwd:Q12813010 wdt:P58 wd:Q187261\n}",
        "questionWithBrackets": "Were [Fate] , [The Confession] , and [The Waiting Room] edited by , directed by , executive produced by , written by , and produced by [Zeki Demirkubuz]"
    },
    {
        "questionIdx": 119831,
        "questionPatternModEntities": "Were M1 , M2 , M3 , M4 , M5 , and M6 directed by M0 's parent",
        "questionTemplate": "Were [entity] , [entity] , [entity] , [entity] , [entity] , and [entity] [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 ?x0 .\nM2 P1 ?x0 .\nM3 P1 ?x0 .\nM4 P1 ?x0 .\nM5 P1 ?x0 .\nM6 P1 ?x0\n}",
        "recursionDepth": 32,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q382389 .\nwd:Q3228432 wdt:P57 ?x0 .\nwd:Q3221949 wdt:P57 ?x0 .\nwd:Q3561463 wdt:P57 ?x0 .\nwd:Q2910339 wdt:P57 ?x0 .\nwd:Q3051354 wdt:P57 ?x0 .\nwd:Q2986181 wdt:P57 ?x0\n}",
        "questionWithBrackets": "Were [Comment r\u00e9ussir quand on est con et pleurnichard] , [Elle boit pas, elle fume pas, elle drague pas, mais... elle cause !] , [Vive la France] , [Cry of the Cormoran] , [Kisses Till Monday] , and [The Black Flag Waves Over the Scow] directed by [Jacques Audiard] 's parent"
    },
    {
        "questionIdx": 119853,
        "questionPatternModEntities": "Were M2 and M5 written by M3 , written by M1 's female spouse , and written by M4",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M1 ) .\nM2 P2 ?x0 .\nM2 P2 M3 .\nM2 P2 M4 .\nM5 P2 ?x0 .\nM5 P2 M3 .\nM5 P2 M4\n}",
        "recursionDepth": 45,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P21 wd:Q6581072 .\n?x0 wdt:P26 wd:Q40054 .\nFILTER ( ?x0 != wd:Q40054 ) .\nwd:Q1306837 wdt:P58 ?x0 .\nwd:Q1306837 wdt:P58 wd:Q32661 .\nwd:Q1306837 wdt:P58 wd:Q2593 .\nwd:Q2201 wdt:P58 ?x0 .\nwd:Q2201 wdt:P58 wd:Q32661 .\nwd:Q2201 wdt:P58 wd:Q2593\n}",
        "questionWithBrackets": "Were [Kick-Ass] and [The Debt] written by [Jane Goldman] , written by [Jonathan Ross] 's female spouse , and written by [Matthew Vaughn]"
    },
    {
        "questionIdx": 119854,
        "questionPatternModEntities": "Were M2 , M4 , and M5 directed by M3 and written by a male sibling of M0",
        "questionTemplate": "Were [entity] , [entity] , and [entity] [VP_SIMPLE] by [entity] and [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M0 ) .\nM2 P2 ?x0 .\nM2 P3 M3 .\nM4 P2 ?x0 .\nM4 P3 M3 .\nM5 P2 ?x0 .\nM5 P3 M3\n}",
        "recursionDepth": 41,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P21 wd:Q6581097 .\n?x0 wdt:P3373 wd:Q606780 .\nFILTER ( ?x0 != wd:Q606780 ) .\nwd:Q3986814 wdt:P57 wd:Q882 .\nwd:Q3986814 wdt:P58 ?x0 .\nwd:Q45602 wdt:P57 wd:Q882 .\nwd:Q45602 wdt:P58 ?x0 .\nwd:Q199039 wdt:P57 wd:Q882 .\nwd:Q199039 wdt:P58 ?x0\n}",
        "questionWithBrackets": "Were [Pay Day] , [The Essanay-Chaplin Revue of 1916] , and [Modern Times] directed by [Charlie Chaplin] and written by a male sibling of [Sydney Chaplin]"
    },
    {
        "questionIdx": 119855,
        "questionPatternModEntities": "Were M0 , M2 , and M3 executive produced by , edited by , written by , directed by , and produced by M1",
        "questionTemplate": "Were [entity] , [entity] , and [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1 .\nM0 P2 M1 .\nM0 P3 M1 .\nM0 P4 M1 .\nM2 P0 M1 .\nM2 P1 M1 .\nM2 P2 M1 .\nM2 P3 M1 .\nM2 P4 M1 .\nM3 P0 M1 .\nM3 P1 M1 .\nM3 P2 M1 .\nM3 P3 M1 .\nM3 P4 M1\n}",
        "recursionDepth": 46,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q5437360 wdt:P57 wd:Q187261 .\nwd:Q5437360 wdt:P1040 wd:Q187261 .\nwd:Q5437360 wdt:P1431 wd:Q187261 .\nwd:Q5437360 wdt:P162|wdt:P272 wd:Q187261 .\nwd:Q5437360 wdt:P58 wd:Q187261 .\nwd:Q6084069 wdt:P57 wd:Q187261 .\nwd:Q6084069 wdt:P1040 wd:Q187261 .\nwd:Q6084069 wdt:P1431 wd:Q187261 .\nwd:Q6084069 wdt:P162|wdt:P272 wd:Q187261 .\nwd:Q6084069 wdt:P58 wd:Q187261 .\nwd:Q12813010 wdt:P57 wd:Q187261 .\nwd:Q12813010 wdt:P1040 wd:Q187261 .\nwd:Q12813010 wdt:P1431 wd:Q187261 .\nwd:Q12813010 wdt:P162|wdt:P272 wd:Q187261 .\nwd:Q12813010 wdt:P58 wd:Q187261\n}",
        "questionWithBrackets": "Were [The Waiting Room] , [The Confession] , and [Fate] executive produced by , edited by , written by , directed by , and produced by [Zeki Demirkubuz]"
    },
    {
        "questionIdx": 119858,
        "questionPatternModEntities": "Were M2 and M3 directed and executive produced by a female spouse of M1",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] and [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M1 ) .\nM2 P2 ?x0 .\nM2 P3 ?x0 .\nM3 P2 ?x0 .\nM3 P3 ?x0\n}",
        "recursionDepth": 35,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P21 wd:Q6581072 .\n?x0 wdt:P26 wd:Q57737617 .\nFILTER ( ?x0 != wd:Q57737617 ) .\nwd:Q60229340 wdt:P57 ?x0 .\nwd:Q60229340 wdt:P1431 ?x0 .\nwd:Q60325239 wdt:P57 ?x0 .\nwd:Q60325239 wdt:P1431 ?x0\n}",
        "questionWithBrackets": "Were [Cherry Malicious] and [Stuck in the 80's] directed and executive produced by a female spouse of [Antonio Valentini]"
    },
    {
        "questionIdx": 119879,
        "questionPatternModEntities": "Were M0 , M2 , M3 , and M4 executive produced by and written by M1",
        "questionTemplate": "Were [entity] , [entity] , [entity] , and [entity] [VP_SIMPLE] by and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1 .\nM2 P0 M1 .\nM2 P1 M1 .\nM3 P0 M1 .\nM3 P1 M1 .\nM4 P0 M1 .\nM4 P1 M1\n}",
        "recursionDepth": 31,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q181803 wdt:P1431 wd:Q38222 .\nwd:Q181803 wdt:P58 wd:Q38222 .\nwd:Q3968346 wdt:P1431 wd:Q38222 .\nwd:Q3968346 wdt:P58 wd:Q38222 .\nwd:Q515931 wdt:P1431 wd:Q38222 .\nwd:Q515931 wdt:P58 wd:Q38222 .\nwd:Q165713 wdt:P1431 wd:Q38222 .\nwd:Q165713 wdt:P58 wd:Q38222\n}",
        "questionWithBrackets": "Were [Star Whores] , [Star Wars: Episode VI \u2013 Return of the Jedi] , [Star Wars: Episode I \u2013 The Phantom Menace] , and [Willow] executive produced by and written by [George Lucas]"
    },
    {
        "questionIdx": 119911,
        "questionPatternModEntities": "Were M1 , M2 , and M3 founded by M0 's spouse",
        "questionTemplate": "Were [entity] , [entity] , and [entity] [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nM1 P1 ?x0 .\nM2 P1 ?x0 .\nM3 P1 ?x0\n}",
        "recursionDepth": 23,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P26 wd:Q13564310 .\nFILTER ( ?x0 != wd:Q13564310 ) .\nwd:Q935818 wdt:P112 ?x0 .\nwd:Q367 wdt:P112 ?x0 .\nwd:Q13679 wdt:P112 ?x0\n}",
        "questionWithBrackets": "Were [Wikispecies] , [Wikibooks] , and [Bomis] founded by [Kate Garvey] 's spouse"
    },
    {
        "questionIdx": 119933,
        "questionPatternModEntities": "Were M0 and M3 directed , produced , and written by M1 and M2",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P1 M1 .\nM0 P1 M2 .\nM0 P2 M1 .\nM0 P2 M2 .\nM3 P0 M1 .\nM3 P0 M2 .\nM3 P1 M1 .\nM3 P1 M2 .\nM3 P2 M1 .\nM3 P2 M2\n}",
        "recursionDepth": 32,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q115537 wdt:P57 wd:Q55230 .\nwd:Q115537 wdt:P57 wd:Q55234 .\nwd:Q115537 wdt:P162|wdt:P272 wd:Q55230 .\nwd:Q115537 wdt:P162|wdt:P272 wd:Q55234 .\nwd:Q115537 wdt:P58 wd:Q55230 .\nwd:Q115537 wdt:P58 wd:Q55234 .\nwd:Q252529 wdt:P57 wd:Q55230 .\nwd:Q252529 wdt:P57 wd:Q55234 .\nwd:Q252529 wdt:P162|wdt:P272 wd:Q55230 .\nwd:Q252529 wdt:P162|wdt:P272 wd:Q55234 .\nwd:Q252529 wdt:P58 wd:Q55230 .\nwd:Q252529 wdt:P58 wd:Q55234\n}",
        "questionWithBrackets": "Were [I Know Where I'm Going!] and [Black Narcissus] directed , produced , and written by [Emeric Pressburger] and [Michael Powell]"
    },
    {
        "questionIdx": 119938,
        "questionPatternModEntities": "Were M2 , M4 , and M5 written by M3 and produced by a Italian employee of M0",
        "questionTemplate": "Were [entity] , [entity] , and [entity] [VP_SIMPLE] by [entity] and [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nM2 P2 M3 .\nM2 P3 ?x0 .\nM4 P2 M3 .\nM4 P3 ?x0 .\nM5 P2 M3 .\nM5 P3 ?x0\n}",
        "recursionDepth": 41,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P108 wd:Q49210 .\n?x0 wdt:P27 wd:Q38 .\nwd:Q841335 wdt:P162|wdt:P272 ?x0 .\nwd:Q841335 wdt:P58 wd:Q41148 .\nwd:Q17155624 wdt:P162|wdt:P272 ?x0 .\nwd:Q17155624 wdt:P58 wd:Q41148 .\nwd:Q2354637 wdt:P162|wdt:P272 ?x0 .\nwd:Q2354637 wdt:P58 wd:Q41148\n}",
        "questionWithBrackets": "Were [The 50 Year Argument] , [Mean Streets] , and [A Personal Journey with Martin Scorsese Through American Movies] written by [Martin Scorsese] and produced by a Italian employee of [New York University]"
    },
    {
        "questionIdx": 120005,
        "questionPatternModEntities": "Were M0 , M2 , and M3 directed by , produced by , executive produced by , written by , and edited by M1",
        "questionTemplate": "Were [entity] , [entity] , and [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1 .\nM0 P2 M1 .\nM0 P3 M1 .\nM0 P4 M1 .\nM2 P0 M1 .\nM2 P1 M1 .\nM2 P2 M1 .\nM2 P3 M1 .\nM2 P4 M1 .\nM3 P0 M1 .\nM3 P1 M1 .\nM3 P2 M1 .\nM3 P3 M1 .\nM3 P4 M1\n}",
        "recursionDepth": 46,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q484679 wdt:P57 wd:Q212990 .\nwd:Q484679 wdt:P1040 wd:Q212990 .\nwd:Q484679 wdt:P1431 wd:Q212990 .\nwd:Q484679 wdt:P162|wdt:P272 wd:Q212990 .\nwd:Q484679 wdt:P58 wd:Q212990 .\nwd:Q13471372 wdt:P57 wd:Q212990 .\nwd:Q13471372 wdt:P1040 wd:Q212990 .\nwd:Q13471372 wdt:P1431 wd:Q212990 .\nwd:Q13471372 wdt:P162|wdt:P272 wd:Q212990 .\nwd:Q13471372 wdt:P58 wd:Q212990 .\nwd:Q483197 wdt:P57 wd:Q212990 .\nwd:Q483197 wdt:P1040 wd:Q212990 .\nwd:Q483197 wdt:P1431 wd:Q212990 .\nwd:Q483197 wdt:P162|wdt:P272 wd:Q212990 .\nwd:Q483197 wdt:P58 wd:Q212990\n}",
        "questionWithBrackets": "Were [Moebius] , [Piet\u00e0] , and [Dream] directed by , produced by , executive produced by , written by , and edited by [Kim Ki-duk]"
    },
    {
        "questionIdx": 120006,
        "questionPatternModEntities": "Were M3 and M4 edited by , produced by , written by , and directed by M2 's Spanish Mexican parent",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P1 M2 .\nM3 P2 ?x0 .\nM3 P3 ?x0 .\nM3 P4 ?x0 .\nM3 P5 ?x0 .\nM4 P2 ?x0 .\nM4 P3 ?x0 .\nM4 P4 ?x0 .\nM4 P5 ?x0\n}",
        "recursionDepth": 50,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q1710546 .\n?x0 wdt:P27 wd:Q29 .\n?x0 wdt:P27 wd:Q96 .\nwd:Q190575 wdt:P57 ?x0 .\nwd:Q190575 wdt:P1040 ?x0 .\nwd:Q190575 wdt:P162|wdt:P272 ?x0 .\nwd:Q190575 wdt:P58 ?x0 .\nwd:Q2606896 wdt:P57 ?x0 .\nwd:Q2606896 wdt:P1040 ?x0 .\nwd:Q2606896 wdt:P162|wdt:P272 ?x0 .\nwd:Q2606896 wdt:P58 ?x0\n}",
        "questionWithBrackets": "Were [Land Without Bread] and [Un Chien Andalou] edited by , produced by , written by , and directed by [Juan Luis Bu\u00f1uel] 's Spanish Mexican parent"
    },
    {
        "questionIdx": 120008,
        "questionPatternModEntities": "Were M2 and M3 written , produced , and edited by a Mexican spouse of M1",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M1 ) .\nM2 P2 ?x0 .\nM2 P3 ?x0 .\nM2 P4 ?x0 .\nM3 P2 ?x0 .\nM3 P3 ?x0 .\nM3 P4 ?x0\n}",
        "recursionDepth": 39,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P27 wd:Q96 .\n?x0 wdt:P26 wd:Q28708093 .\nFILTER ( ?x0 != wd:Q28708093 ) .\nwd:Q190575 wdt:P1040 ?x0 .\nwd:Q190575 wdt:P162|wdt:P272 ?x0 .\nwd:Q190575 wdt:P58 ?x0 .\nwd:Q2606896 wdt:P1040 ?x0 .\nwd:Q2606896 wdt:P162|wdt:P272 ?x0 .\nwd:Q2606896 wdt:P58 ?x0\n}",
        "questionWithBrackets": "Were [Land Without Bread] and [Un Chien Andalou] written , produced , and edited by a Mexican spouse of [Jeanne Rucar]"
    },
    {
        "questionIdx": 120016,
        "questionPatternModEntities": "Were M2 , M3 , and M4 written by and directed by a male sibling of M0",
        "questionTemplate": "Were [entity] , [entity] , and [entity] [VP_SIMPLE] by and [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M0 ) .\nM2 P2 ?x0 .\nM2 P3 ?x0 .\nM3 P2 ?x0 .\nM3 P3 ?x0 .\nM4 P2 ?x0 .\nM4 P3 ?x0\n}",
        "recursionDepth": 38,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P21 wd:Q6581097 .\n?x0 wdt:P3373 wd:Q105946886 .\nFILTER ( ?x0 != wd:Q105946886 ) .\nwd:Q3589392 wdt:P57 ?x0 .\nwd:Q3589392 wdt:P58 ?x0 .\nwd:Q176147 wdt:P57 ?x0 .\nwd:Q176147 wdt:P58 ?x0 .\nwd:Q898864 wdt:P57 ?x0 .\nwd:Q898864 wdt:P58 ?x0\n}",
        "questionWithBrackets": "Were [Je t'aime moi non plus] , [\u00c9quateur] , and [Charlotte for Ever] written by and directed by a male sibling of [Liliane Gainsbourg]"
    },
    {
        "questionIdx": 120062,
        "questionPatternModEntities": "Were M2 and M3 written , produced , directed , and edited by M1 's sibling 's French spouse 's parent",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x1 P1 M0 .\n?x1 P2 ?x2 .\n?x2 P3 M1 .\nFILTER ( ?x1 != ?x2 ) .\nFILTER ( ?x2 != M1 ) .\nM2 P4 ?x0 .\nM2 P5 ?x0 .\nM2 P6 ?x0 .\nM2 P7 ?x0 .\nM3 P4 ?x0 .\nM3 P5 ?x0 .\nM3 P6 ?x0 .\nM3 P7 ?x0\n}",
        "recursionDepth": 50,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 ?x1 .\n?x1 wdt:P27 wd:Q142 .\n?x1 wdt:P26 ?x2 .\n?x2 wdt:P3373 wd:Q3291472 .\nFILTER ( ?x1 != ?x2 ) .\nFILTER ( ?x2 != wd:Q3291472 ) .\nwd:Q12141583 wdt:P57 ?x0 .\nwd:Q12141583 wdt:P1040 ?x0 .\nwd:Q12141583 wdt:P162|wdt:P272 ?x0 .\nwd:Q12141583 wdt:P58 ?x0 .\nwd:Q3233157 wdt:P57 ?x0 .\nwd:Q3233157 wdt:P1040 ?x0 .\nwd:Q3233157 wdt:P162|wdt:P272 ?x0 .\nwd:Q3233157 wdt:P58 ?x0\n}",
        "questionWithBrackets": "Were [No label defined] and [Les hautes solitudes] written , produced , directed , and edited by [Marie-Ange Casta] 's sibling 's French spouse 's parent"
    },
    {
        "questionIdx": 120122,
        "questionPatternModEntities": "Were M0 and M7 directed by M6 , written by M1 , M2 , M3 , and M4 , and edited by M5",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , [entity] , [entity] , and [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P0 M3 .\nM0 P0 M4 .\nM0 P1 M5 .\nM0 P2 M6 .\nM7 P0 M1 .\nM7 P0 M2 .\nM7 P0 M3 .\nM7 P0 M4 .\nM7 P1 M5 .\nM7 P2 M6\n}",
        "recursionDepth": 46,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q596623 wdt:P57 wd:Q13888 .\nwd:Q596623 wdt:P1040 wd:Q456251 .\nwd:Q596623 wdt:P58 wd:Q2055700 .\nwd:Q596623 wdt:P58 wd:Q3054638 .\nwd:Q596623 wdt:P58 wd:Q525427 .\nwd:Q596623 wdt:P58 wd:Q268443 .\nwd:Q427186 wdt:P57 wd:Q13888 .\nwd:Q427186 wdt:P1040 wd:Q456251 .\nwd:Q427186 wdt:P58 wd:Q2055700 .\nwd:Q427186 wdt:P58 wd:Q3054638 .\nwd:Q427186 wdt:P58 wd:Q525427 .\nwd:Q427186 wdt:P58 wd:Q268443\n}",
        "questionWithBrackets": "Were [The Leopard] and [Rocco and His Brothers] directed by [Luchino Visconti] , written by [Massimo Franciosa] , [Suso Cecchi d'Amico] , [Enrico Medioli] , and [Pasquale Festa Campanile] , and edited by [Mario Serandrei]"
    },
    {
        "questionIdx": 120133,
        "questionPatternModEntities": "Were M0 , M6 , and M7 written by M1 , written by M2 , M3 , and M4 , and directed by M5",
        "questionTemplate": "Were [entity] , [entity] , and [entity] [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , [entity] , and [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P0 M3 .\nM0 P0 M4 .\nM0 P1 M5 .\nM6 P0 M1 .\nM6 P0 M2 .\nM6 P0 M3 .\nM6 P0 M4 .\nM6 P1 M5 .\nM7 P0 M1 .\nM7 P0 M2 .\nM7 P0 M3 .\nM7 P0 M4 .\nM7 P1 M5\n}",
        "recursionDepth": 46,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q24980 wdt:P57 wd:Q166159 .\nwd:Q24980 wdt:P58 wd:Q24962 .\nwd:Q24980 wdt:P58 wd:Q25014 .\nwd:Q24980 wdt:P58 wd:Q25078 .\nwd:Q24980 wdt:P58 wd:Q210741 .\nwd:Q24953 wdt:P57 wd:Q166159 .\nwd:Q24953 wdt:P58 wd:Q24962 .\nwd:Q24953 wdt:P58 wd:Q25014 .\nwd:Q24953 wdt:P58 wd:Q25078 .\nwd:Q24953 wdt:P58 wd:Q210741 .\nwd:Q25043 wdt:P57 wd:Q166159 .\nwd:Q25043 wdt:P58 wd:Q24962 .\nwd:Q25043 wdt:P58 wd:Q25014 .\nwd:Q25043 wdt:P58 wd:Q25078 .\nwd:Q25043 wdt:P58 wd:Q210741\n}",
        "questionWithBrackets": "Were [Monty Python and the Holy Grail] , [Monty Python's The Meaning of Life] , and [Monty Python\u2019s Life of Brian] written by [Graham Chapman] , written by [Terry Gilliam] , [John Cleese] , and [Eric Idle] , and directed by [Terry Jones]"
    },
    {
        "questionIdx": 120179,
        "questionPatternModEntities": "Were M1 and M2 influenced by M0 's spouse",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nM1 P1 ?x0 .\nM2 P1 ?x0\n}",
        "recursionDepth": 20,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P26 wd:Q237251 .\nFILTER ( ?x0 != wd:Q237251 ) .\nwd:Q80596 wdt:P737 ?x0 .\nwd:Q105167 wdt:P737 ?x0\n}",
        "questionWithBrackets": "Were [Tom Clancy] and [Arthur Miller] influenced by [Anne Hathaway] 's spouse"
    },
    {
        "questionIdx": 120191,
        "questionPatternModEntities": "Were M1 and M2 written by a parent of M0",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 ?x0 .\nM2 P1 ?x0\n}",
        "recursionDepth": 22,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q555426 .\nwd:Q9077312 wdt:P58 ?x0 .\nwd:Q969428 wdt:P58 ?x0\n}",
        "questionWithBrackets": "Were [Masked and Anonymous] and [Silent Madness] written by a parent of [Jakob Dylan]"
    },
    {
        "questionIdx": 120212,
        "questionPatternModEntities": "Were M1 , M2 , M3 , and M4 directed by and executive produced by M0 's spouse",
        "questionTemplate": "Were [entity] , [entity] , [entity] , and [entity] [VP_SIMPLE] by and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nM1 P1 ?x0 .\nM1 P2 ?x0 .\nM2 P1 ?x0 .\nM2 P2 ?x0 .\nM3 P1 ?x0 .\nM3 P2 ?x0 .\nM4 P1 ?x0 .\nM4 P2 ?x0\n}",
        "recursionDepth": 35,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P26 wd:Q90147 .\nFILTER ( ?x0 != wd:Q90147 ) .\nwd:Q3707067 wdt:P57 ?x0 .\nwd:Q3707067 wdt:P1431 ?x0 .\nwd:Q3707065 wdt:P57 ?x0 .\nwd:Q3707065 wdt:P1431 ?x0 .\nwd:Q3707064 wdt:P57 ?x0 .\nwd:Q3707064 wdt:P1431 ?x0 .\nwd:Q1213389 wdt:P57 ?x0 .\nwd:Q1213389 wdt:P1431 ?x0\n}",
        "questionWithBrackets": "Were [The Mistress of the World] , [No label defined] , [No label defined] , and [No label defined] directed by and executive produced by [Mia May] 's spouse"
    },
    {
        "questionIdx": 120258,
        "questionPatternModEntities": "Were M0 , M2 , M3 , M4 , M5 , and M6 British",
        "questionTemplate": "Were [entity] , [entity] , [entity] , [entity] , [entity] , and [entity] [ADJECTIVE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM2 P0 M1 .\nM3 P0 M1 .\nM4 P0 M1 .\nM5 P0 M1 .\nM6 P0 M1\n}",
        "recursionDepth": 25,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q3260 wdt:P27 wd:Q145 .\nwd:Q42 wdt:P27 wd:Q145 .\nwd:Q80 wdt:P27 wd:Q145 .\nwd:Q181 wdt:P27 wd:Q145 .\nwd:Q882 wdt:P27 wd:Q145 .\nwd:Q1325 wdt:P27 wd:Q145\n}",
        "questionWithBrackets": "Were [Friedrich Hayek] , [Douglas Adams] , [Jimmy Wales] , [Charlie Chaplin] , [Hubert Clifford] , and [Tim Berners-Lee] British"
    },
    {
        "questionIdx": 120264,
        "questionPatternModEntities": "Were M1 , M2 , and M3 directed by M0 's sibling",
        "questionTemplate": "Were [entity] , [entity] , and [entity] [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nM1 P1 ?x0 .\nM2 P1 ?x0 .\nM3 P1 ?x0\n}",
        "recursionDepth": 23,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P3373 wd:Q606780 .\nFILTER ( ?x0 != wd:Q606780 ) .\nwd:Q1152833 wdt:P57 ?x0 .\nwd:Q45602 wdt:P57 ?x0 .\nwd:Q166739 wdt:P57 ?x0\n}",
        "questionWithBrackets": "Were [Modern Times] , [The Floorwalker] , and [One A.M.] directed by [Sydney Chaplin] 's sibling"
    },
    {
        "questionIdx": 120290,
        "questionPatternModEntities": "Were M0 , M3 , and M4 directed by M1 and M2",
        "questionTemplate": "Were [entity] , [entity] , and [entity] [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM3 P0 M1 .\nM3 P0 M2 .\nM4 P0 M1 .\nM4 P0 M2\n}",
        "recursionDepth": 23,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q192115 wdt:P57 wd:Q3772 .\nwd:Q192115 wdt:P57 wd:Q47284 .\nwd:Q679023 wdt:P57 wd:Q3772 .\nwd:Q679023 wdt:P57 wd:Q47284 .\nwd:Q1137372 wdt:P57 wd:Q3772 .\nwd:Q1137372 wdt:P57 wd:Q47284\n}",
        "questionWithBrackets": "Were [Sin City] , [Grindhouse] , and [Four Rooms] directed by [Quentin Tarantino] and [Robert Rodriguez]"
    },
    {
        "questionIdx": 120294,
        "questionPatternModEntities": "Were M0 , M2 , and M3 executive produced by , directed by , edited by , produced by , and written by M1",
        "questionTemplate": "Were [entity] , [entity] , and [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1 .\nM0 P2 M1 .\nM0 P3 M1 .\nM0 P4 M1 .\nM2 P0 M1 .\nM2 P1 M1 .\nM2 P2 M1 .\nM2 P3 M1 .\nM2 P4 M1 .\nM3 P0 M1 .\nM3 P1 M1 .\nM3 P2 M1 .\nM3 P3 M1 .\nM3 P4 M1\n}",
        "recursionDepth": 46,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q484679 wdt:P57 wd:Q212990 .\nwd:Q484679 wdt:P1040 wd:Q212990 .\nwd:Q484679 wdt:P1431 wd:Q212990 .\nwd:Q484679 wdt:P162|wdt:P272 wd:Q212990 .\nwd:Q484679 wdt:P58 wd:Q212990 .\nwd:Q13471372 wdt:P57 wd:Q212990 .\nwd:Q13471372 wdt:P1040 wd:Q212990 .\nwd:Q13471372 wdt:P1431 wd:Q212990 .\nwd:Q13471372 wdt:P162|wdt:P272 wd:Q212990 .\nwd:Q13471372 wdt:P58 wd:Q212990 .\nwd:Q483197 wdt:P57 wd:Q212990 .\nwd:Q483197 wdt:P1040 wd:Q212990 .\nwd:Q483197 wdt:P1431 wd:Q212990 .\nwd:Q483197 wdt:P162|wdt:P272 wd:Q212990 .\nwd:Q483197 wdt:P58 wd:Q212990\n}",
        "questionWithBrackets": "Were [Moebius] , [Piet\u00e0] , and [Dream] executive produced by , directed by , edited by , produced by , and written by [Kim Ki-duk]"
    },
    {
        "questionIdx": 120341,
        "questionPatternModEntities": "Were M0 and M2 executive produced , produced , and directed by M1",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1 .\nM0 P2 M1 .\nM2 P0 M1 .\nM2 P1 M1 .\nM2 P2 M1\n}",
        "recursionDepth": 29,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q181086 wdt:P57 wd:Q2001 .\nwd:Q181086 wdt:P1431 wd:Q2001 .\nwd:Q181086 wdt:P162|wdt:P272 wd:Q2001 .\nwd:Q209481 wdt:P57 wd:Q2001 .\nwd:Q209481 wdt:P1431 wd:Q2001 .\nwd:Q209481 wdt:P162|wdt:P272 wd:Q2001\n}",
        "questionWithBrackets": "Were [Eyes Wide Shut] and [A Clockwork Orange] executive produced , produced , and directed by [Stanley Kubrick]"
    },
    {
        "questionIdx": 120356,
        "questionPatternModEntities": "Were M0 , M2 , M3 , and M4 directed , written , and executive produced by M1",
        "questionTemplate": "Were [entity] , [entity] , [entity] , and [entity] [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1 .\nM0 P2 M1 .\nM2 P0 M1 .\nM2 P1 M1 .\nM2 P2 M1 .\nM3 P0 M1 .\nM3 P1 M1 .\nM3 P2 M1 .\nM4 P0 M1 .\nM4 P1 M1 .\nM4 P2 M1\n}",
        "recursionDepth": 35,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q3707067 wdt:P57 wd:Q85134 .\nwd:Q3707067 wdt:P1431 wd:Q85134 .\nwd:Q3707067 wdt:P58 wd:Q85134 .\nwd:Q3707065 wdt:P57 wd:Q85134 .\nwd:Q3707065 wdt:P1431 wd:Q85134 .\nwd:Q3707065 wdt:P58 wd:Q85134 .\nwd:Q3707071 wdt:P57 wd:Q85134 .\nwd:Q3707071 wdt:P1431 wd:Q85134 .\nwd:Q3707071 wdt:P58 wd:Q85134 .\nwd:Q3707064 wdt:P57 wd:Q85134 .\nwd:Q3707064 wdt:P1431 wd:Q85134 .\nwd:Q3707064 wdt:P58 wd:Q85134\n}",
        "questionWithBrackets": "Were [No label defined] , [No label defined] , [No label defined] , and [No label defined] directed , written , and executive produced by [Joe May]"
    },
    {
        "questionIdx": 120379,
        "questionPatternModEntities": "Were M0 , M2 , and M3 written and executive produced by M1",
        "questionTemplate": "Were [entity] , [entity] , and [entity] [VP_SIMPLE] and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1 .\nM2 P0 M1 .\nM2 P1 M1 .\nM3 P0 M1 .\nM3 P1 M1\n}",
        "recursionDepth": 27,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q3968346 wdt:P1431 wd:Q38222 .\nwd:Q3968346 wdt:P58 wd:Q38222 .\nwd:Q515931 wdt:P1431 wd:Q38222 .\nwd:Q515931 wdt:P58 wd:Q38222 .\nwd:Q17738 wdt:P1431 wd:Q38222 .\nwd:Q17738 wdt:P58 wd:Q38222\n}",
        "questionWithBrackets": "Were [Star Whores] , [Willow] , and [Star Wars: Episode IV \u2013 A New Hope] written and executive produced by [George Lucas]"
    },
    {
        "questionIdx": 120395,
        "questionPatternModEntities": "Were M0 , M2 , M3 , M4 , M5 , M6 , and M7 British",
        "questionTemplate": "Were [entity] , [entity] , [entity] , [entity] , [entity] , [entity] , and [entity] [ADJECTIVE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM2 P0 M1 .\nM3 P0 M1 .\nM4 P0 M1 .\nM5 P0 M1 .\nM6 P0 M1 .\nM7 P0 M1\n}",
        "recursionDepth": 28,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q9675 wdt:P27 wd:Q145 .\nwd:Q42 wdt:P27 wd:Q145 .\nwd:Q80 wdt:P27 wd:Q145 .\nwd:Q181 wdt:P27 wd:Q145 .\nwd:Q192 wdt:P27 wd:Q145 .\nwd:Q839 wdt:P27 wd:Q145 .\nwd:Q636 wdt:P27 wd:Q145\n}",
        "questionWithBrackets": "Were [Georgina Cassar] , [David Cameron] , [Kelly Smith] , [Jimmy Wales] , [Kate Bush] , [Douglas Adams] , and [Tim Berners-Lee] British"
    },
    {
        "questionIdx": 120399,
        "questionPatternModEntities": "Were M0 and M3 produced and written by M1 and M2",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P1 M1 .\nM0 P1 M2 .\nM3 P0 M1 .\nM3 P0 M2 .\nM3 P1 M1 .\nM3 P1 M2\n}",
        "recursionDepth": 27,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q160215 wdt:P162|wdt:P272 wd:Q4465 .\nwd:Q160215 wdt:P162|wdt:P272 wd:Q116861 .\nwd:Q160215 wdt:P58 wd:Q4465 .\nwd:Q160215 wdt:P58 wd:Q116861 .\nwd:Q30879053 wdt:P162|wdt:P272 wd:Q4465 .\nwd:Q30879053 wdt:P162|wdt:P272 wd:Q116861 .\nwd:Q30879053 wdt:P58 wd:Q4465 .\nwd:Q30879053 wdt:P58 wd:Q116861\n}",
        "questionWithBrackets": "Were [King Kong] and [No label defined] produced and written by [Fran Walsh] and [Peter Jackson]"
    },
    {
        "questionIdx": 120460,
        "questionPatternModEntities": "Were M0 , M5 , M6 , and M7 directed by M4 , edited by M3 , and executive produced by M1 and M2",
        "questionTemplate": "Were [entity] , [entity] , [entity] , and [entity] [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P1 M3 .\nM0 P2 M4 .\nM5 P0 M1 .\nM5 P0 M2 .\nM5 P1 M3 .\nM5 P2 M4 .\nM6 P0 M1 .\nM6 P0 M2 .\nM6 P1 M3 .\nM6 P2 M4 .\nM7 P0 M1 .\nM7 P0 M2 .\nM7 P1 M3 .\nM7 P2 M4\n}",
        "recursionDepth": 47,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q548919 wdt:P57 wd:Q295463 .\nwd:Q548919 wdt:P1040 wd:Q1138711 .\nwd:Q548919 wdt:P1431 wd:Q24809564 .\nwd:Q548919 wdt:P1431 wd:Q24809566 .\nwd:Q54274 wdt:P57 wd:Q295463 .\nwd:Q54274 wdt:P1040 wd:Q1138711 .\nwd:Q54274 wdt:P1431 wd:Q24809564 .\nwd:Q54274 wdt:P1431 wd:Q24809566 .\nwd:Q46717 wdt:P57 wd:Q295463 .\nwd:Q46717 wdt:P1040 wd:Q1138711 .\nwd:Q46717 wdt:P1431 wd:Q24809564 .\nwd:Q46717 wdt:P1431 wd:Q24809566 .\nwd:Q161087 wdt:P57 wd:Q295463 .\nwd:Q161087 wdt:P1040 wd:Q1138711 .\nwd:Q161087 wdt:P1431 wd:Q24809564 .\nwd:Q161087 wdt:P1431 wd:Q24809566\n}",
        "questionWithBrackets": "Were [Pirates of the Caribbean: The Curse of the Black Pearl] , [The Lone Ranger] , [Pirates of the Caribbean: At World's End] , and [Pirates of the Caribbean: Dead Man's Chest] directed by [Gore Verbinski] , edited by [Craig Wood] , and executive produced by [Chad Oman] and [Mike Stenson]"
    },
    {
        "questionIdx": 120464,
        "questionPatternModEntities": "Were M1 , M2 , and M3 written by M0 's employee",
        "questionTemplate": "Were [entity] , [entity] , and [entity] [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 ?x0 .\nM2 P1 ?x0 .\nM3 P1 ?x0\n}",
        "recursionDepth": 23,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P108 wd:Q9531 .\nwd:Q3470527 wdt:P58 ?x0 .\nwd:Q513589 wdt:P58 ?x0 .\nwd:Q836821 wdt:P58 ?x0\n}",
        "questionWithBrackets": "Were [The Pirate Planet] , [The Hitchhiker's Guide to the Galaxy] , and [Shada] written by [BBC] 's employee"
    },
    {
        "questionIdx": 120465,
        "questionPatternModEntities": "Were M2 and M3 produced by and written by a Mexican sibling of M0",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by and [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M0 ) .\nM2 P2 ?x0 .\nM2 P3 ?x0 .\nM3 P2 ?x0 .\nM3 P3 ?x0\n}",
        "recursionDepth": 35,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P27 wd:Q96 .\n?x0 wdt:P3373 wd:Q2840325 .\nFILTER ( ?x0 != wd:Q2840325 ) .\nwd:Q27959455 wdt:P162|wdt:P272 ?x0 .\nwd:Q27959455 wdt:P58 ?x0 .\nwd:Q2579784 wdt:P162|wdt:P272 ?x0 .\nwd:Q2579784 wdt:P58 ?x0\n}",
        "questionWithBrackets": "Were [Gravity] and [Roma] produced by and written by a Mexican sibling of [Carlos Cuar\u00f3n]"
    },
    {
        "questionIdx": 120470,
        "questionPatternModEntities": "Were M2 and M4 edited by a Italian sibling of M0 and edited by M3",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M0 ) .\nM2 P2 ?x0 .\nM2 P2 M3 .\nM4 P2 ?x0 .\nM4 P2 M3\n}",
        "recursionDepth": 38,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P27 wd:Q38 .\n?x0 wdt:P3373 wd:Q971600 .\nFILTER ( ?x0 != wd:Q971600 ) .\nwd:Q521792 wdt:P1040 ?x0 .\nwd:Q521792 wdt:P1040 wd:Q25100 .\nwd:Q3821925 wdt:P1040 ?x0 .\nwd:Q3821925 wdt:P1040 wd:Q25100\n}",
        "questionWithBrackets": "Were [I Am Self Sufficient] and [The Thing] edited by a Italian sibling of [Franco Moretti] and edited by [Nanni Moretti]"
    },
    {
        "questionIdx": 120493,
        "questionPatternModEntities": "Were M2 and M3 edited , written , directed , and produced by M1 's Mexican spouse",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M1 ) .\nM2 P2 ?x0 .\nM2 P3 ?x0 .\nM2 P4 ?x0 .\nM2 P5 ?x0 .\nM3 P2 ?x0 .\nM3 P3 ?x0 .\nM3 P4 ?x0 .\nM3 P5 ?x0\n}",
        "recursionDepth": 42,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P27 wd:Q96 .\n?x0 wdt:P26 wd:Q28708093 .\nFILTER ( ?x0 != wd:Q28708093 ) .\nwd:Q190575 wdt:P57 ?x0 .\nwd:Q190575 wdt:P1040 ?x0 .\nwd:Q190575 wdt:P162|wdt:P272 ?x0 .\nwd:Q190575 wdt:P58 ?x0 .\nwd:Q2606896 wdt:P57 ?x0 .\nwd:Q2606896 wdt:P1040 ?x0 .\nwd:Q2606896 wdt:P162|wdt:P272 ?x0 .\nwd:Q2606896 wdt:P58 ?x0\n}",
        "questionWithBrackets": "Were [Land Without Bread] and [Un Chien Andalou] edited , written , directed , and produced by [Jeanne Rucar] 's Mexican spouse"
    },
    {
        "questionIdx": 120546,
        "questionPatternModEntities": "Were M2 and M5 influenced by M3 , influenced by M0 's male sibling 's sibling , and influenced by M4",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] 's [ROLE_SIMPLE] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x1 P0 M0 .\n?x1 P1 M1 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x1 != M0 ) .\nM2 P2 ?x0 .\nM2 P2 M3 .\nM2 P2 M4 .\nM5 P2 ?x0 .\nM5 P2 M3 .\nM5 P2 M4\n}",
        "recursionDepth": 49,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P3373 ?x1 .\n?x1 wdt:P21 wd:Q6581097 .\n?x1 wdt:P3373 wd:Q6374627 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x1 != wd:Q6374627 ) .\nwd:Q1299 wdt:P737 ?x0 .\nwd:Q1299 wdt:P737 wd:Q255 .\nwd:Q1299 wdt:P737 wd:Q1339 .\nwd:Q57286 wdt:P737 ?x0 .\nwd:Q57286 wdt:P737 wd:Q255 .\nwd:Q57286 wdt:P737 wd:Q1339\n}",
        "questionWithBrackets": "Were [The Beatles] and [Fanny Mendelssohn] influenced by [Ludwig van Beethoven] , influenced by [Kaspar Anton Karl van Beethoven] 's male sibling 's sibling , and influenced by [Johann Sebastian Bach]"
    },
    {
        "questionIdx": 120548,
        "questionPatternModEntities": "Were M0 and M2 Dutch",
        "questionTemplate": "Were [entity] and [entity] [ADJECTIVE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM2 P0 M1\n}",
        "recursionDepth": 13,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q354 wdt:P27 wd:Q29999 .\nwd:Q920 wdt:P27 wd:Q29999\n}",
        "questionWithBrackets": "Were [J. Bernlef] and [Piet Kraak] Dutch"
    },
    {
        "questionIdx": 120559,
        "questionPatternModEntities": "Were M2 and M5 directed by M3 , directed by M4 , and directed by M0 's German sibling",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M0 ) .\nM2 P2 ?x0 .\nM2 P2 M3 .\nM2 P2 M4 .\nM5 P2 ?x0 .\nM5 P2 M3 .\nM5 P2 M4\n}",
        "recursionDepth": 45,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P27 wd:Q183 .\n?x0 wdt:P3373 wd:Q94753484 .\nFILTER ( ?x0 != wd:Q94753484 ) .\nwd:Q19877387 wdt:P57 ?x0 .\nwd:Q19877387 wdt:P57 wd:Q28998 .\nwd:Q19877387 wdt:P57 wd:Q3439179 .\nwd:Q19892925 wdt:P57 ?x0 .\nwd:Q19892925 wdt:P57 wd:Q28998 .\nwd:Q19892925 wdt:P57 wd:Q3439179\n}",
        "questionWithBrackets": "Were [George and Georgette] and [The Beautiful Adventure] directed by [Roger Le Bon] , directed by [Reinhold Sch\u00fcnzel] , and directed by [Else Sch\u00fcnzel] 's German sibling"
    },
    {
        "questionIdx": 120560,
        "questionPatternModEntities": "Were M2 and M6 directed by M0 's French sibling and directed by M3 , M4 , and M5",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] and [VP_SIMPLE] by [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M0 ) .\nM2 P2 ?x0 .\nM2 P2 M3 .\nM2 P2 M4 .\nM2 P2 M5 .\nM6 P2 ?x0 .\nM6 P2 M3 .\nM6 P2 M4 .\nM6 P2 M5\n}",
        "recursionDepth": 43,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P27 wd:Q142 .\n?x0 wdt:P3373 wd:Q55207 .\nFILTER ( ?x0 != wd:Q55207 ) .\nwd:Q507285 wdt:P57 ?x0 .\nwd:Q507285 wdt:P57 wd:Q2033788 .\nwd:Q507285 wdt:P57 wd:Q295093 .\nwd:Q507285 wdt:P57 wd:Q55430 .\nwd:Q1144967 wdt:P57 ?x0 .\nwd:Q1144967 wdt:P57 wd:Q2033788 .\nwd:Q1144967 wdt:P57 wd:Q295093 .\nwd:Q1144967 wdt:P57 wd:Q55430\n}",
        "questionWithBrackets": "Were [To Each His Own Cinema] and [Lumi\u00e8re and Company] directed by [Nikita Mikhalkov] 's French sibling and directed by [Raymond Depardon] , [Claude Lelouch] , and [Zhang Yimou]"
    },
    {
        "questionIdx": 120561,
        "questionPatternModEntities": "Were M2 and M5 directed by M3 and M4 and directed by a male sibling of M0",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by [entity] and [entity] and [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M0 ) .\nM2 P2 ?x0 .\nM2 P2 M3 .\nM2 P2 M4 .\nM5 P2 ?x0 .\nM5 P2 M3 .\nM5 P2 M4\n}",
        "recursionDepth": 42,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P21 wd:Q6581097 .\n?x0 wdt:P3373 wd:Q104373781 .\nFILTER ( ?x0 != wd:Q104373781 ) .\nwd:Q507285 wdt:P57 ?x0 .\nwd:Q507285 wdt:P57 wd:Q312611 .\nwd:Q507285 wdt:P57 wd:Q55210 .\nwd:Q1144967 wdt:P57 ?x0 .\nwd:Q1144967 wdt:P57 wd:Q312611 .\nwd:Q1144967 wdt:P57 wd:Q55210\n}",
        "questionWithBrackets": "Were [To Each His Own Cinema] and [Lumi\u00e8re and Company] directed by [Youssef Chahine] and [Abbas Kiarostami] and directed by a male sibling of [John Lynch]"
    },
    {
        "questionIdx": 120569,
        "questionPatternModEntities": "Were M2 and M5 directed by a male parent of M1 and directed by M3 and M4",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nM2 P2 ?x0 .\nM2 P2 M3 .\nM2 P2 M4 .\nM5 P2 ?x0 .\nM5 P2 M3 .\nM5 P2 M4\n}",
        "recursionDepth": 42,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q271162 .\n?x0 wdt:P21 wd:Q6581097 .\nwd:Q507285 wdt:P57 ?x0 .\nwd:Q507285 wdt:P57 wd:Q312611 .\nwd:Q507285 wdt:P57 wd:Q55430 .\nwd:Q1144967 wdt:P57 ?x0 .\nwd:Q1144967 wdt:P57 wd:Q312611 .\nwd:Q1144967 wdt:P57 wd:Q55430\n}",
        "questionWithBrackets": "Were [To Each His Own Cinema] and [Lumi\u00e8re and Company] directed by a male parent of [Jennifer Lynch] and directed by [Youssef Chahine] and [Zhang Yimou]"
    },
    {
        "questionIdx": 120574,
        "questionPatternModEntities": "Were M1 , M2 , M3 , and M4 directed by M0 's sibling",
        "questionTemplate": "Were [entity] , [entity] , [entity] , and [entity] [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nM1 P1 ?x0 .\nM2 P1 ?x0 .\nM3 P1 ?x0 .\nM4 P1 ?x0\n}",
        "recursionDepth": 26,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P3373 wd:Q104373781 .\nFILTER ( ?x0 != wd:Q104373781 ) .\nwd:Q97501746 wdt:P57 ?x0 .\nwd:Q32067391 wdt:P57 ?x0 .\nwd:Q114819 wdt:P57 ?x0 .\nwd:Q289204 wdt:P57 ?x0\n}",
        "questionWithBrackets": "Were [Twin Peaks: The Missing Pieces] , [Lost Highway] , [Dune] , and [The Adventures of Alan R.] directed by [John Lynch] 's sibling"
    },
    {
        "questionIdx": 120604,
        "questionPatternModEntities": "Were M1 , M2 , M3 , M4 , and M5 edited and written by a sibling of M0",
        "questionTemplate": "Were [entity] , [entity] , [entity] , [entity] , and [entity] [VP_SIMPLE] and [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nM1 P1 ?x0 .\nM1 P2 ?x0 .\nM2 P1 ?x0 .\nM2 P2 ?x0 .\nM3 P1 ?x0 .\nM3 P2 ?x0 .\nM4 P1 ?x0 .\nM4 P2 ?x0 .\nM5 P1 ?x0 .\nM5 P2 ?x0\n}",
        "recursionDepth": 38,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P3373 wd:Q3567655 .\nFILTER ( ?x0 != wd:Q3567655 ) .\nwd:Q1197772 wdt:P1040 ?x0 .\nwd:Q1197772 wdt:P58 ?x0 .\nwd:Q166739 wdt:P1040 ?x0 .\nwd:Q166739 wdt:P58 ?x0 .\nwd:Q45602 wdt:P1040 ?x0 .\nwd:Q45602 wdt:P58 ?x0 .\nwd:Q214723 wdt:P1040 ?x0 .\nwd:Q214723 wdt:P58 ?x0 .\nwd:Q238211 wdt:P1040 ?x0 .\nwd:Q238211 wdt:P58 ?x0\n}",
        "questionWithBrackets": "Were [The Vagabond] , [The Floorwalker] , [The Gold Rush] , [City Lights] , and [Modern Times] edited and written by a sibling of [Wheeler Dryden]"
    },
    {
        "questionIdx": 120614,
        "questionPatternModEntities": "Were M0 and M3 directed and written by M1 and M2",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P1 M1 .\nM0 P1 M2 .\nM3 P0 M1 .\nM3 P0 M2 .\nM3 P1 M1 .\nM3 P1 M2\n}",
        "recursionDepth": 27,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q679023 wdt:P57 wd:Q3772 .\nwd:Q679023 wdt:P57 wd:Q47284 .\nwd:Q679023 wdt:P58 wd:Q3772 .\nwd:Q679023 wdt:P58 wd:Q47284 .\nwd:Q1137372 wdt:P57 wd:Q3772 .\nwd:Q1137372 wdt:P57 wd:Q47284 .\nwd:Q1137372 wdt:P58 wd:Q3772 .\nwd:Q1137372 wdt:P58 wd:Q47284\n}",
        "questionWithBrackets": "Were [Four Rooms] and [Grindhouse] directed and written by [Robert Rodriguez] and [Quentin Tarantino]"
    },
    {
        "questionIdx": 120617,
        "questionPatternModEntities": "Were M0 , M3 , and M4 written by , directed by , and edited by M1 and M2",
        "questionTemplate": "Were [entity] , [entity] , and [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P1 M1 .\nM0 P1 M2 .\nM0 P2 M1 .\nM0 P2 M2 .\nM3 P0 M1 .\nM3 P0 M2 .\nM3 P1 M1 .\nM3 P1 M2 .\nM3 P2 M1 .\nM3 P2 M2 .\nM4 P0 M1 .\nM4 P0 M2 .\nM4 P1 M1 .\nM4 P1 M2 .\nM4 P2 M1 .\nM4 P2 M2\n}",
        "recursionDepth": 37,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q20757119 wdt:P57 wd:Q562108 .\nwd:Q20757119 wdt:P57 wd:Q35979475 .\nwd:Q20757119 wdt:P1040 wd:Q562108 .\nwd:Q20757119 wdt:P1040 wd:Q35979475 .\nwd:Q20757119 wdt:P58 wd:Q562108 .\nwd:Q20757119 wdt:P58 wd:Q35979475 .\nwd:Q20729238 wdt:P57 wd:Q562108 .\nwd:Q20729238 wdt:P57 wd:Q35979475 .\nwd:Q20729238 wdt:P1040 wd:Q562108 .\nwd:Q20729238 wdt:P1040 wd:Q35979475 .\nwd:Q20729238 wdt:P58 wd:Q562108 .\nwd:Q20729238 wdt:P58 wd:Q35979475 .\nwd:Q20729551 wdt:P57 wd:Q562108 .\nwd:Q20729551 wdt:P57 wd:Q35979475 .\nwd:Q20729551 wdt:P1040 wd:Q562108 .\nwd:Q20729551 wdt:P1040 wd:Q35979475 .\nwd:Q20729551 wdt:P58 wd:Q562108 .\nwd:Q20729551 wdt:P58 wd:Q35979475\n}",
        "questionWithBrackets": "Were [Stop for Bud] , [Motion picture] , and [No label defined] written by , directed by , and edited by [Ole John] and [J\u00f8rgen Leth]"
    },
    {
        "questionIdx": 120619,
        "questionPatternModEntities": "Were M0 , M3 , and M4 edited by and written by M1 and M2",
        "questionTemplate": "Were [entity] , [entity] , and [entity] [VP_SIMPLE] by and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P1 M1 .\nM0 P1 M2 .\nM3 P0 M1 .\nM3 P0 M2 .\nM3 P1 M1 .\nM3 P1 M2 .\nM4 P0 M1 .\nM4 P0 M2 .\nM4 P1 M1 .\nM4 P1 M2\n}",
        "recursionDepth": 31,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q20757119 wdt:P1040 wd:Q562108 .\nwd:Q20757119 wdt:P1040 wd:Q35979475 .\nwd:Q20757119 wdt:P58 wd:Q562108 .\nwd:Q20757119 wdt:P58 wd:Q35979475 .\nwd:Q20729238 wdt:P1040 wd:Q562108 .\nwd:Q20729238 wdt:P1040 wd:Q35979475 .\nwd:Q20729238 wdt:P58 wd:Q562108 .\nwd:Q20729238 wdt:P58 wd:Q35979475 .\nwd:Q20729551 wdt:P1040 wd:Q562108 .\nwd:Q20729551 wdt:P1040 wd:Q35979475 .\nwd:Q20729551 wdt:P58 wd:Q562108 .\nwd:Q20729551 wdt:P58 wd:Q35979475\n}",
        "questionWithBrackets": "Were [Stop for Bud] , [Motion picture] , and [No label defined] edited by and written by [Ole John] and [J\u00f8rgen Leth]"
    },
    {
        "questionIdx": 120644,
        "questionPatternModEntities": "Were M1 , M2 , M3 , and M4 executive produced by M0 's sibling",
        "questionTemplate": "Were [entity] , [entity] , [entity] , and [entity] [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nM1 P1 ?x0 .\nM2 P1 ?x0 .\nM3 P1 ?x0 .\nM4 P1 ?x0\n}",
        "recursionDepth": 27,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P3373 wd:Q725250 .\nFILTER ( ?x0 != wd:Q725250 ) .\nwd:Q195949 wdt:P1431 ?x0 .\nwd:Q655980 wdt:P1431 ?x0 .\nwd:Q1467607 wdt:P1431 ?x0 .\nwd:Q188850 wdt:P1431 ?x0\n}",
        "questionWithBrackets": "Were [From the Earth to the Moon] , [Evan Almighty] , [Mamma Mia!] , and [Game Change] executive produced by [Jim Hanks] 's sibling"
    },
    {
        "questionIdx": 120673,
        "questionPatternModEntities": "Were M0 and M5 directed by M2 , directed by M3 , executive produced by M1 , and directed by M4",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M2 .\nM0 P1 M3 .\nM0 P1 M4 .\nM5 P0 M1 .\nM5 P1 M2 .\nM5 P1 M3 .\nM5 P1 M4\n}",
        "recursionDepth": 46,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q7760664 wdt:P57 wd:Q5539806 .\nwd:Q7760664 wdt:P57 wd:Q3446814 .\nwd:Q7760664 wdt:P57 wd:Q3930636 .\nwd:Q7760664 wdt:P1431 wd:Q263324 .\nwd:Q7734449 wdt:P57 wd:Q5539806 .\nwd:Q7734449 wdt:P57 wd:Q3446814 .\nwd:Q7734449 wdt:P57 wd:Q3930636 .\nwd:Q7734449 wdt:P1431 wd:Q263324\n}",
        "questionWithBrackets": "Were [The Flintstone Funnies] and [The Richie Rich/Scooby-Doo Show] directed by [George Gordon] , directed by [Rudy Zamora] , executive produced by [William Hanna] , and directed by [Ray Patterson]"
    },
    {
        "questionIdx": 120737,
        "questionPatternModEntities": "Were M0 and M7 directed by M5 , written by M1 , M2 , M3 , and M4 , and directed by M6",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , [entity] , [entity] , and [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P0 M3 .\nM0 P0 M4 .\nM0 P1 M5 .\nM0 P1 M6 .\nM7 P0 M1 .\nM7 P0 M2 .\nM7 P0 M3 .\nM7 P0 M4 .\nM7 P1 M5 .\nM7 P1 M6\n}",
        "recursionDepth": 46,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q24980 wdt:P57 wd:Q25078 .\nwd:Q24980 wdt:P57 wd:Q166159 .\nwd:Q24980 wdt:P58 wd:Q25014 .\nwd:Q24980 wdt:P58 wd:Q210741 .\nwd:Q24980 wdt:P58 wd:Q223985 .\nwd:Q24980 wdt:P58 wd:Q24962 .\nwd:Q25043 wdt:P57 wd:Q25078 .\nwd:Q25043 wdt:P57 wd:Q166159 .\nwd:Q25043 wdt:P58 wd:Q25014 .\nwd:Q25043 wdt:P58 wd:Q210741 .\nwd:Q25043 wdt:P58 wd:Q223985 .\nwd:Q25043 wdt:P58 wd:Q24962\n}",
        "questionWithBrackets": "Were [Monty Python's The Meaning of Life] and [Monty Python and the Holy Grail] directed by [Terry Gilliam] , written by [John Cleese] , [Michael Palin] , [Eric Idle] , and [Graham Chapman] , and directed by [Terry Jones]"
    },
    {
        "questionIdx": 120757,
        "questionPatternModEntities": "Were M0 , M3 , M4 , and M5 executive produced by M1 and directed by M2",
        "questionTemplate": "Were [entity] , [entity] , [entity] , and [entity] [VP_SIMPLE] by [entity] and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M2 .\nM3 P0 M1 .\nM3 P1 M2 .\nM4 P0 M1 .\nM4 P1 M2 .\nM5 P0 M1 .\nM5 P1 M2\n}",
        "recursionDepth": 34,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q379873 wdt:P57 wd:Q187364 .\nwd:Q379873 wdt:P1431 wd:Q8877 .\nwd:Q109331 wdt:P57 wd:Q187364 .\nwd:Q109331 wdt:P1431 wd:Q8877 .\nwd:Q91540 wdt:P57 wd:Q187364 .\nwd:Q91540 wdt:P1431 wd:Q8877 .\nwd:Q230552 wdt:P57 wd:Q187364 .\nwd:Q230552 wdt:P1431 wd:Q8877\n}",
        "questionWithBrackets": "Were [Back to the Future Part III] , [Back to the Future Part II] , [Who Framed Roger Rabbit] , and [Back to the Future] executive produced by [Steven Spielberg] and directed by [Robert Zemeckis]"
    },
    {
        "questionIdx": 120766,
        "questionPatternModEntities": "Were M0 and M2 Swedish",
        "questionTemplate": "Were [entity] and [entity] [ADJECTIVE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM2 P0 M1\n}",
        "recursionDepth": 13,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q530 wdt:P27 wd:Q34 .\nwd:Q700 wdt:P27 wd:Q34\n}",
        "questionWithBrackets": "Were [Swedish Chef] and [Ingemar Stenmark] Swedish"
    },
    {
        "questionIdx": 120769,
        "questionPatternModEntities": "Were M0 , M2 , and M3 directed by , produced by , edited by , written by , and executive produced by M1",
        "questionTemplate": "Were [entity] , [entity] , and [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1 .\nM0 P2 M1 .\nM0 P3 M1 .\nM0 P4 M1 .\nM2 P0 M1 .\nM2 P1 M1 .\nM2 P2 M1 .\nM2 P3 M1 .\nM2 P4 M1 .\nM3 P0 M1 .\nM3 P1 M1 .\nM3 P2 M1 .\nM3 P3 M1 .\nM3 P4 M1\n}",
        "recursionDepth": 46,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q5437360 wdt:P57 wd:Q187261 .\nwd:Q5437360 wdt:P1040 wd:Q187261 .\nwd:Q5437360 wdt:P1431 wd:Q187261 .\nwd:Q5437360 wdt:P162|wdt:P272 wd:Q187261 .\nwd:Q5437360 wdt:P58 wd:Q187261 .\nwd:Q12813010 wdt:P57 wd:Q187261 .\nwd:Q12813010 wdt:P1040 wd:Q187261 .\nwd:Q12813010 wdt:P1431 wd:Q187261 .\nwd:Q12813010 wdt:P162|wdt:P272 wd:Q187261 .\nwd:Q12813010 wdt:P58 wd:Q187261 .\nwd:Q6084069 wdt:P57 wd:Q187261 .\nwd:Q6084069 wdt:P1040 wd:Q187261 .\nwd:Q6084069 wdt:P1431 wd:Q187261 .\nwd:Q6084069 wdt:P162|wdt:P272 wd:Q187261 .\nwd:Q6084069 wdt:P58 wd:Q187261\n}",
        "questionWithBrackets": "Were [Fate] , [The Waiting Room] , and [The Confession] directed by , produced by , edited by , written by , and executive produced by [Zeki Demirkubuz]"
    },
    {
        "questionIdx": 120835,
        "questionPatternModEntities": "Were M2 and M4 influenced by a Spanish employee of M0 and influenced by M3",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nM2 P2 ?x0 .\nM2 P2 M3 .\nM4 P2 ?x0 .\nM4 P2 M3\n}",
        "recursionDepth": 38,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P108 wd:Q21705070 .\n?x0 wdt:P27 wd:Q29 .\nwd:Q517390 wdt:P737 ?x0 .\nwd:Q517390 wdt:P737 wd:Q153020 .\nwd:Q19962938 wdt:P737 ?x0 .\nwd:Q19962938 wdt:P737 wd:Q153020\n}",
        "questionWithBrackets": "Were [Francisco Soler Grima] and [Chantal Delsol] influenced by a Spanish employee of [Universidad Central] and influenced by [Jos\u00e9 Ortega y Gasset]"
    },
    {
        "questionIdx": 120839,
        "questionPatternModEntities": "Were M1 and M2 founded by a child of M0",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 ?x0 .\nM2 P1 ?x0\n}",
        "recursionDepth": 22,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P749 wd:Q2311 .\nwd:Q499207 wdt:P112 ?x0 .\nwd:Q2384656 wdt:P112 ?x0\n}",
        "questionWithBrackets": "Were [Astrium] and [TOPCASED] founded by a child of [Airbus Group]"
    },
    {
        "questionIdx": 120866,
        "questionPatternModEntities": "Were M0 , M2 , M3 , and M4 edited and directed by M1",
        "questionTemplate": "Were [entity] , [entity] , [entity] , and [entity] [VP_SIMPLE] and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1 .\nM2 P0 M1 .\nM2 P1 M1 .\nM3 P0 M1 .\nM3 P1 M1 .\nM4 P0 M1 .\nM4 P1 M1\n}",
        "recursionDepth": 29,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q1348974 wdt:P57 wd:Q8006 .\nwd:Q1348974 wdt:P1040 wd:Q8006 .\nwd:Q135465 wdt:P57 wd:Q8006 .\nwd:Q135465 wdt:P1040 wd:Q8006 .\nwd:Q20475 wdt:P57 wd:Q8006 .\nwd:Q20475 wdt:P1040 wd:Q8006 .\nwd:Q152105 wdt:P57 wd:Q8006 .\nwd:Q152105 wdt:P1040 wd:Q8006\n}",
        "questionWithBrackets": "Were [Rashomon] , [No Regrets for Our Youth] , [Ikiru] , and [Yojimbo] edited and directed by [Akira Kurosawa]"
    },
    {
        "questionIdx": 120871,
        "questionPatternModEntities": "Were M0 , M2 , and M3 directed by , edited by , written by , executive produced by , and produced by M1",
        "questionTemplate": "Were [entity] , [entity] , and [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1 .\nM0 P2 M1 .\nM0 P3 M1 .\nM0 P4 M1 .\nM2 P0 M1 .\nM2 P1 M1 .\nM2 P2 M1 .\nM2 P3 M1 .\nM2 P4 M1 .\nM3 P0 M1 .\nM3 P1 M1 .\nM3 P2 M1 .\nM3 P3 M1 .\nM3 P4 M1\n}",
        "recursionDepth": 46,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q5437360 wdt:P57 wd:Q187261 .\nwd:Q5437360 wdt:P1040 wd:Q187261 .\nwd:Q5437360 wdt:P1431 wd:Q187261 .\nwd:Q5437360 wdt:P162|wdt:P272 wd:Q187261 .\nwd:Q5437360 wdt:P58 wd:Q187261 .\nwd:Q12813010 wdt:P57 wd:Q187261 .\nwd:Q12813010 wdt:P1040 wd:Q187261 .\nwd:Q12813010 wdt:P1431 wd:Q187261 .\nwd:Q12813010 wdt:P162|wdt:P272 wd:Q187261 .\nwd:Q12813010 wdt:P58 wd:Q187261 .\nwd:Q6084069 wdt:P57 wd:Q187261 .\nwd:Q6084069 wdt:P1040 wd:Q187261 .\nwd:Q6084069 wdt:P1431 wd:Q187261 .\nwd:Q6084069 wdt:P162|wdt:P272 wd:Q187261 .\nwd:Q6084069 wdt:P58 wd:Q187261\n}",
        "questionWithBrackets": "Were [The Confession] , [The Waiting Room] , and [Fate] directed by , edited by , written by , executive produced by , and produced by [Zeki Demirkubuz]"
    },
    {
        "questionIdx": 120886,
        "questionPatternModEntities": "Were M2 and M6 written by M3 and M4 , edited by M5 , and edited by M1 's female spouse",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by [entity] and [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M1 ) .\nM2 P2 M3 .\nM2 P2 M4 .\nM2 P3 ?x0 .\nM2 P3 M5 .\nM6 P2 M3 .\nM6 P2 M4 .\nM6 P3 ?x0 .\nM6 P3 M5\n}",
        "recursionDepth": 49,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P21 wd:Q6581072 .\n?x0 wdt:P26 wd:Q44426 .\nFILTER ( ?x0 != wd:Q44426 ) .\nwd:Q698237 wdt:P1040 ?x0 .\nwd:Q698237 wdt:P1040 wd:Q98665 .\nwd:Q698237 wdt:P58 wd:Q109206 .\nwd:Q698237 wdt:P58 wd:Q7157170 .\nwd:Q699490 wdt:P1040 ?x0 .\nwd:Q699490 wdt:P1040 wd:Q98665 .\nwd:Q699490 wdt:P58 wd:Q109206 .\nwd:Q699490 wdt:P58 wd:Q7157170\n}",
        "questionWithBrackets": "Were [Lola] and [The Marriage of Maria Braun] written by [Pea Fr\u00f6hlich] and [Peter M\u00e4rthesheimer] , edited by [Juliane Lorenz] , and edited by [Rainer Werner Fassbinder] 's female spouse"
    },
    {
        "questionIdx": 120887,
        "questionPatternModEntities": "Were M0 and M3 produced , edited , and written by M1 and M2",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P1 M1 .\nM0 P1 M2 .\nM0 P2 M1 .\nM0 P2 M2 .\nM3 P0 M1 .\nM3 P0 M2 .\nM3 P1 M1 .\nM3 P1 M2 .\nM3 P2 M1 .\nM3 P2 M2\n}",
        "recursionDepth": 32,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q20729238 wdt:P1040 wd:Q562108 .\nwd:Q20729238 wdt:P1040 wd:Q35979475 .\nwd:Q20729238 wdt:P162|wdt:P272 wd:Q562108 .\nwd:Q20729238 wdt:P162|wdt:P272 wd:Q35979475 .\nwd:Q20729238 wdt:P58 wd:Q562108 .\nwd:Q20729238 wdt:P58 wd:Q35979475 .\nwd:Q20729551 wdt:P1040 wd:Q562108 .\nwd:Q20729551 wdt:P1040 wd:Q35979475 .\nwd:Q20729551 wdt:P162|wdt:P272 wd:Q562108 .\nwd:Q20729551 wdt:P162|wdt:P272 wd:Q35979475 .\nwd:Q20729551 wdt:P58 wd:Q562108 .\nwd:Q20729551 wdt:P58 wd:Q35979475\n}",
        "questionWithBrackets": "Were [Stop for Bud] and [Motion picture] produced , edited , and written by [J\u00f8rgen Leth] and [Ole John]"
    },
    {
        "questionIdx": 120895,
        "questionPatternModEntities": "Were M0 and M2 British",
        "questionTemplate": "Were [entity] and [entity] [ADJECTIVE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM2 P0 M1\n}",
        "recursionDepth": 13,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q10531 wdt:P27 wd:Q145 .\nwd:Q42 wdt:P27 wd:Q145\n}",
        "questionWithBrackets": "Were [Douglas Adams] and [Luther Blissett] British"
    },
    {
        "questionIdx": 120907,
        "questionPatternModEntities": "Were M2 and M4 founded by M3 and founded by M0 's female sibling",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by [entity] and [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M0 ) .\nM2 P2 ?x0 .\nM2 P2 M3 .\nM4 P2 ?x0 .\nM4 P2 M3\n}",
        "recursionDepth": 36,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P21 wd:Q6581072 .\n?x0 wdt:P3373 wd:Q5112102 .\nFILTER ( ?x0 != wd:Q5112102 ) .\nwd:Q7848344 wdt:P112 ?x0 .\nwd:Q7848344 wdt:P112 wd:Q1744 .\nwd:Q63546531 wdt:P112 ?x0 .\nwd:Q63546531 wdt:P112 wd:Q1744\n}",
        "questionWithBrackets": "Were [Emmy & The Emmys] and [Truth or Dare by Madonna] founded by [Madonna] and founded by [Christopher Ciccone] 's female sibling"
    },
    {
        "questionIdx": 120909,
        "questionPatternModEntities": "Were M2 and M5 founded by M3 , founded by a female spouse of M1 , and founded by M4",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by [entity] , [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M1 ) .\nM2 P2 ?x0 .\nM2 P2 M3 .\nM2 P2 M4 .\nM5 P2 ?x0 .\nM5 P2 M3 .\nM5 P2 M4\n}",
        "recursionDepth": 47,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P21 wd:Q6581072 .\n?x0 wdt:P26 wd:Q192990 .\nFILTER ( ?x0 != wd:Q192990 ) .\nwd:Q2016567 wdt:P112 ?x0 .\nwd:Q2016567 wdt:P112 wd:Q1744 .\nwd:Q2016567 wdt:P112 wd:Q5496856 .\nwd:Q6794165 wdt:P112 ?x0 .\nwd:Q6794165 wdt:P112 wd:Q1744 .\nwd:Q6794165 wdt:P112 wd:Q5496856\n}",
        "questionWithBrackets": "Were [Maverick] and [Maverick] founded by [Freddy DeMann] , founded by a female spouse of [Guy Ritchie] , and founded by [Madonna]"
    },
    {
        "questionIdx": 120912,
        "questionPatternModEntities": "Were M2 and M5 founded by M3 , founded by M1 's female spouse , and founded by M4",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M1 ) .\nM2 P2 ?x0 .\nM2 P2 M3 .\nM2 P2 M4 .\nM5 P2 ?x0 .\nM5 P2 M3 .\nM5 P2 M4\n}",
        "recursionDepth": 45,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P21 wd:Q6581072 .\n?x0 wdt:P26 wd:Q192990 .\nFILTER ( ?x0 != wd:Q192990 ) .\nwd:Q5655160 wdt:P112 ?x0 .\nwd:Q5655160 wdt:P112 wd:Q5622519 .\nwd:Q5655160 wdt:P112 wd:Q1744 .\nwd:Q7848344 wdt:P112 ?x0 .\nwd:Q7848344 wdt:P112 wd:Q5622519 .\nwd:Q7848344 wdt:P112 wd:Q1744\n}",
        "questionWithBrackets": "Were [Truth or Dare by Madonna] and [Hard Candy Fitness] founded by [Guy Oseary] , founded by [Guy Ritchie] 's female spouse , and founded by [Madonna]"
    },
    {
        "questionIdx": 120923,
        "questionPatternModEntities": "Were M2 , M4 , and M5 founded by a female parent of M1 and founded by M3",
        "questionTemplate": "Were [entity] , [entity] , and [entity] [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nM2 P2 ?x0 .\nM2 P2 M3 .\nM4 P2 ?x0 .\nM4 P2 M3 .\nM5 P2 ?x0 .\nM5 P2 M3\n}",
        "recursionDepth": 41,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q18913048 .\n?x0 wdt:P21 wd:Q6581072 .\nwd:Q3494779 wdt:P112 ?x0 .\nwd:Q3494779 wdt:P112 wd:Q36153 .\nwd:Q7138835 wdt:P112 ?x0 .\nwd:Q7138835 wdt:P112 wd:Q36153 .\nwd:Q18238624 wdt:P112 ?x0 .\nwd:Q18238624 wdt:P112 wd:Q36153\n}",
        "questionWithBrackets": "Were [House of Der\u00e9on] , [Beyonc\u00e9 Parfums] , and [Parkwood Entertainment] founded by a female parent of [Blue Ivy Carter] and founded by [Beyonc\u00e9]"
    },
    {
        "questionIdx": 120942,
        "questionPatternModEntities": "Were M2 and M5 founded by M0 's female employee , founded by M3 , and founded by M4",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nM2 P2 ?x0 .\nM2 P2 M3 .\nM2 P2 M4 .\nM5 P2 ?x0 .\nM5 P2 M3 .\nM5 P2 M4\n}",
        "recursionDepth": 45,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P108 wd:Q847743 .\n?x0 wdt:P21 wd:Q6581072 .\nwd:Q5655160 wdt:P112 ?x0 .\nwd:Q5655160 wdt:P112 wd:Q1744 .\nwd:Q5655160 wdt:P112 wd:Q5622519 .\nwd:Q7848344 wdt:P112 ?x0 .\nwd:Q7848344 wdt:P112 wd:Q1744 .\nwd:Q7848344 wdt:P112 wd:Q5622519\n}",
        "questionWithBrackets": "Were [Hard Candy Fitness] and [Truth or Dare by Madonna] founded by [Dunkin'] 's female employee , founded by [Guy Oseary] , and founded by [Madonna]"
    },
    {
        "questionIdx": 120943,
        "questionPatternModEntities": "Were M3 and M6 founded by M4 and M5 and founded by M2 's American female spouse",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by [entity] and [entity] and [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P2 M2 .\nFILTER ( ?x0 != M2 ) .\nM3 P3 ?x0 .\nM3 P3 M4 .\nM3 P3 M5 .\nM6 P3 ?x0 .\nM6 P3 M4 .\nM6 P3 M5\n}",
        "recursionDepth": 45,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P21 wd:Q6581072 .\n?x0 wdt:P27 wd:Q30 .\n?x0 wdt:P26 wd:Q192990 .\nFILTER ( ?x0 != wd:Q192990 ) .\nwd:Q2016567 wdt:P112 ?x0 .\nwd:Q2016567 wdt:P112 wd:Q1744 .\nwd:Q2016567 wdt:P112 wd:Q5496856 .\nwd:Q6794165 wdt:P112 ?x0 .\nwd:Q6794165 wdt:P112 wd:Q1744 .\nwd:Q6794165 wdt:P112 wd:Q5496856\n}",
        "questionWithBrackets": "Were [Maverick] and [Maverick] founded by [Freddy DeMann] and [Madonna] and founded by [Guy Ritchie] 's American female spouse"
    },
    {
        "questionIdx": 120946,
        "questionPatternModEntities": "Were M2 and M5 founded by M3 and M4 and founded by a female spouse of M1",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by [entity] and [entity] and [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M1 ) .\nM2 P2 ?x0 .\nM2 P2 M3 .\nM2 P2 M4 .\nM5 P2 ?x0 .\nM5 P2 M3 .\nM5 P2 M4\n}",
        "recursionDepth": 42,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P21 wd:Q6581072 .\n?x0 wdt:P26 wd:Q192990 .\nFILTER ( ?x0 != wd:Q192990 ) .\nwd:Q5655160 wdt:P112 ?x0 .\nwd:Q5655160 wdt:P112 wd:Q5622519 .\nwd:Q5655160 wdt:P112 wd:Q1744 .\nwd:Q7848344 wdt:P112 ?x0 .\nwd:Q7848344 wdt:P112 wd:Q5622519 .\nwd:Q7848344 wdt:P112 wd:Q1744\n}",
        "questionWithBrackets": "Were [Hard Candy Fitness] and [Truth or Dare by Madonna] founded by [Madonna] and [Guy Oseary] and founded by a female spouse of [Guy Ritchie]"
    },
    {
        "questionIdx": 120947,
        "questionPatternModEntities": "Were M2 and M4 founded by M3 and founded by a female sibling of M0",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by [entity] and [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M0 ) .\nM2 P2 ?x0 .\nM2 P2 M3 .\nM4 P2 ?x0 .\nM4 P2 M3\n}",
        "recursionDepth": 38,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P21 wd:Q6581072 .\n?x0 wdt:P3373 wd:Q5112102 .\nFILTER ( ?x0 != wd:Q5112102 ) .\nwd:Q7848344 wdt:P112 ?x0 .\nwd:Q7848344 wdt:P112 wd:Q1744 .\nwd:Q7285152 wdt:P112 ?x0 .\nwd:Q7285152 wdt:P112 wd:Q1744\n}",
        "questionWithBrackets": "Were [Truth or Dare by Madonna] and [Raising Malawi] founded by [Madonna] and founded by a female sibling of [Christopher Ciccone]"
    },
    {
        "questionIdx": 120948,
        "questionPatternModEntities": "Were M2 and M5 founded by M3 , founded by M0 's female employee , and founded by M4",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nM2 P2 ?x0 .\nM2 P2 M3 .\nM2 P2 M4 .\nM5 P2 ?x0 .\nM5 P2 M3 .\nM5 P2 M4\n}",
        "recursionDepth": 45,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P108 wd:Q847743 .\n?x0 wdt:P21 wd:Q6581072 .\nwd:Q7848344 wdt:P112 ?x0 .\nwd:Q7848344 wdt:P112 wd:Q1744 .\nwd:Q7848344 wdt:P112 wd:Q5622519 .\nwd:Q5655160 wdt:P112 ?x0 .\nwd:Q5655160 wdt:P112 wd:Q1744 .\nwd:Q5655160 wdt:P112 wd:Q5622519\n}",
        "questionWithBrackets": "Were [Truth or Dare by Madonna] and [Hard Candy Fitness] founded by [Guy Oseary] , founded by [Dunkin'] 's female employee , and founded by [Madonna]"
    },
    {
        "questionIdx": 120950,
        "questionPatternModEntities": "Were M3 and M5 founded by M4 , founded by M0 's spouse , and founded by M2 's female parent",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] , and [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x1 P1 M1 .\n?x1 P2 M2 .\nFILTER ( ?x0 != M0 ) .\nM3 P3 ?x0 .\nM3 P3 ?x1 .\nM3 P3 M4 .\nM5 P3 ?x0 .\nM5 P3 ?x1 .\nM5 P3 M4\n}",
        "recursionDepth": 49,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P26 wd:Q17277971 .\n?x1 wdt:P40|wdt:P355 wd:Q17277976 .\n?x1 wdt:P21 wd:Q6581072 .\nFILTER ( ?x0 != wd:Q17277971 ) .\nwd:Q899263 wdt:P112 ?x0 .\nwd:Q899263 wdt:P112 ?x1 .\nwd:Q899263 wdt:P112 wd:Q40722 .\nwd:Q74571662 wdt:P112 ?x0 .\nwd:Q74571662 wdt:P112 ?x1 .\nwd:Q74571662 wdt:P112 wd:Q40722\n}",
        "questionWithBrackets": "Were [National Truth Commission] and [Grupo de Puebla] founded by [Dilma Rousseff] , founded by [Cl\u00e1udio Linhares] 's spouse , and founded by [Paula Rousseff] 's female parent"
    },
    {
        "questionIdx": 120953,
        "questionPatternModEntities": "Were M2 and M5 founded by M1 's female spouse , founded by M3 , and founded by M4",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M1 ) .\nM2 P2 ?x0 .\nM2 P2 M3 .\nM2 P2 M4 .\nM5 P2 ?x0 .\nM5 P2 M3 .\nM5 P2 M4\n}",
        "recursionDepth": 45,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P21 wd:Q6581072 .\n?x0 wdt:P26 wd:Q695722 .\nFILTER ( ?x0 != wd:Q695722 ) .\nwd:Q156607 wdt:P112 ?x0 .\nwd:Q156607 wdt:P112 wd:Q7231 .\nwd:Q156607 wdt:P112 wd:Q75886 .\nwd:Q153401 wdt:P112 ?x0 .\nwd:Q153401 wdt:P112 wd:Q7231 .\nwd:Q153401 wdt:P112 wd:Q75886\n}",
        "questionWithBrackets": "Were [Spartacus League] and [Communist Party of Germany] founded by [Julian Marchlewski] 's female spouse , founded by [Karl Liebknecht] , and founded by [Rosa Luxemburg]"
    },
    {
        "questionIdx": 120954,
        "questionPatternModEntities": "Were M3 and M6 founded by M0 's female American sibling and founded by M4 and M5",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P2 M2 .\nFILTER ( ?x0 != M0 ) .\nM3 P3 ?x0 .\nM3 P3 M4 .\nM3 P3 M5 .\nM6 P3 ?x0 .\nM6 P3 M4 .\nM6 P3 M5\n}",
        "recursionDepth": 45,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P21 wd:Q6581072 .\n?x0 wdt:P27 wd:Q30 .\n?x0 wdt:P3373 wd:Q5112102 .\nFILTER ( ?x0 != wd:Q5112102 ) .\nwd:Q2016567 wdt:P112 ?x0 .\nwd:Q2016567 wdt:P112 wd:Q1744 .\nwd:Q2016567 wdt:P112 wd:Q5496856 .\nwd:Q6794165 wdt:P112 ?x0 .\nwd:Q6794165 wdt:P112 wd:Q1744 .\nwd:Q6794165 wdt:P112 wd:Q5496856\n}",
        "questionWithBrackets": "Were [Maverick] and [Maverick] founded by [Christopher Ciccone] 's female American sibling and founded by [Freddy DeMann] and [Madonna]"
    },
    {
        "questionIdx": 120963,
        "questionPatternModEntities": "Were M2 , M4 , M5 , and M6 founded by M3 and founded by a American sibling of M0",
        "questionTemplate": "Were [entity] , [entity] , [entity] , and [entity] [VP_SIMPLE] by [entity] and [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M0 ) .\nM2 P2 ?x0 .\nM2 P2 M3 .\nM4 P2 ?x0 .\nM4 P2 M3 .\nM5 P2 ?x0 .\nM5 P2 M3 .\nM6 P2 ?x0 .\nM6 P2 M3\n}",
        "recursionDepth": 44,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P27 wd:Q30 .\n?x0 wdt:P3373 wd:Q4821226 .\nFILTER ( ?x0 != wd:Q4821226 ) .\nwd:Q54122 wdt:P112 ?x0 .\nwd:Q54122 wdt:P112 wd:Q23 .\nwd:Q2005254 wdt:P112 ?x0 .\nwd:Q2005254 wdt:P112 wd:Q23 .\nwd:Q1143497 wdt:P112 ?x0 .\nwd:Q1143497 wdt:P112 wd:Q23 .\nwd:Q1342 wdt:P112 ?x0 .\nwd:Q1342 wdt:P112 wd:Q23\n}",
        "questionWithBrackets": "Were [Continental Army] , [United States Park Police] , [Pittsburgh] , and [Culper Ring] founded by [George Washington] and founded by a American sibling of [Augustine Washington Jr.]"
    },
    {
        "questionIdx": 120968,
        "questionPatternModEntities": "Were M2 , M4 , M5 , and M6 founded by M3 and founded by M1 's female spouse",
        "questionTemplate": "Were [entity] , [entity] , [entity] , and [entity] [VP_SIMPLE] by [entity] and [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M1 ) .\nM2 P2 ?x0 .\nM2 P2 M3 .\nM4 P2 ?x0 .\nM4 P2 M3 .\nM5 P2 ?x0 .\nM5 P2 M3 .\nM6 P2 ?x0 .\nM6 P2 M3\n}",
        "recursionDepth": 42,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P21 wd:Q6581072 .\n?x0 wdt:P26 wd:Q1124 .\nFILTER ( ?x0 != wd:Q1124 ) .\nwd:Q7079431 wdt:P112 ?x0 .\nwd:Q7079431 wdt:P112 wd:Q6294 .\nwd:Q4791728 wdt:P112 ?x0 .\nwd:Q4791728 wdt:P112 wd:Q6294 .\nwd:Q29974167 wdt:P112 ?x0 .\nwd:Q29974167 wdt:P112 wd:Q6294 .\nwd:Q7427983 wdt:P112 ?x0 .\nwd:Q7427983 wdt:P112 wd:Q6294\n}",
        "questionWithBrackets": "Were [Office on Violence Against Women] , [Onward Together] , [Save America's Treasures] , and [Arkansas Advocates for Children and Families] founded by [Hillary Clinton] and founded by [Bill Clinton] 's female spouse"
    },
    {
        "questionIdx": 120970,
        "questionPatternModEntities": "Were M2 , M4 , and M5 founded by a female sibling of M0 and founded by M3",
        "questionTemplate": "Were [entity] , [entity] , and [entity] [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M0 ) .\nM2 P2 ?x0 .\nM2 P2 M3 .\nM4 P2 ?x0 .\nM4 P2 M3 .\nM5 P2 ?x0 .\nM5 P2 M3\n}",
        "recursionDepth": 41,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P21 wd:Q6581072 .\n?x0 wdt:P3373 wd:Q2073960 .\nFILTER ( ?x0 != wd:Q2073960 ) .\nwd:Q6532507 wdt:P112 ?x0 .\nwd:Q6532507 wdt:P112 wd:Q13133 .\nwd:Q7102081 wdt:P112 ?x0 .\nwd:Q7102081 wdt:P112 wd:Q13133 .\nwd:Q81950264 wdt:P112 ?x0 .\nwd:Q81950264 wdt:P112 wd:Q13133\n}",
        "questionWithBrackets": "Were [Let's Move!] , [Higher Ground Productions] , and [Organizing for Action] founded by a female sibling of [Craig Robinson] and founded by [Michelle Obama]"
    },
    {
        "questionIdx": 120972,
        "questionPatternModEntities": "Were M1 , M2 , M3 , and M4 written by M0 's sibling",
        "questionTemplate": "Were [entity] , [entity] , [entity] , and [entity] [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nM1 P1 ?x0 .\nM2 P1 ?x0 .\nM3 P1 ?x0 .\nM4 P1 ?x0\n}",
        "recursionDepth": 26,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P3373 wd:Q3059936 .\nFILTER ( ?x0 != wd:Q3059936 ) .\nwd:Q3795499 wdt:P58 ?x0 .\nwd:Q3233880 wdt:P58 ?x0 .\nwd:Q1550554 wdt:P58 ?x0 .\nwd:Q6370349 wdt:P58 ?x0\n}",
        "questionWithBrackets": "Were [Esmeralda] , [No label defined] , [The King's Jester] , and [Ruy Blas] written by [Eug\u00e8ne Hugo] 's sibling"
    },
    {
        "questionIdx": 120990,
        "questionPatternModEntities": "Were M2 , M3 , M4 , M5 , and M6 founded by M1 's Italian spouse",
        "questionTemplate": "Were [entity] , [entity] , [entity] , [entity] , and [entity] [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M1 ) .\nM2 P2 ?x0 .\nM3 P2 ?x0 .\nM4 P2 ?x0 .\nM5 P2 ?x0 .\nM6 P2 ?x0\n}",
        "recursionDepth": 34,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P27 wd:Q38 .\n?x0 wdt:P26 wd:Q268099 .\nFILTER ( ?x0 != wd:Q268099 ) .\nwd:Q2638120 wdt:P112 ?x0 .\nwd:Q1417245 wdt:P112 ?x0 .\nwd:Q47720 wdt:P112 ?x0 .\nwd:Q3925346 wdt:P112 ?x0 .\nwd:Q3746266 wdt:P112 ?x0\n}",
        "questionWithBrackets": "Were [The People of Freedom] , [Mediaset Espa\u00f1a] , [Publitalia '80] , [Five] , and [Fininvest] founded by [Veronica Lario] 's Italian spouse"
    },
    {
        "questionIdx": 121021,
        "questionPatternModEntities": "Were M0 , M2 , and M3 directed by , executive produced by , edited by , written by , and produced by M1",
        "questionTemplate": "Were [entity] , [entity] , and [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1 .\nM0 P2 M1 .\nM0 P3 M1 .\nM0 P4 M1 .\nM2 P0 M1 .\nM2 P1 M1 .\nM2 P2 M1 .\nM2 P3 M1 .\nM2 P4 M1 .\nM3 P0 M1 .\nM3 P1 M1 .\nM3 P2 M1 .\nM3 P3 M1 .\nM3 P4 M1\n}",
        "recursionDepth": 46,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q6084069 wdt:P57 wd:Q187261 .\nwd:Q6084069 wdt:P1040 wd:Q187261 .\nwd:Q6084069 wdt:P1431 wd:Q187261 .\nwd:Q6084069 wdt:P162|wdt:P272 wd:Q187261 .\nwd:Q6084069 wdt:P58 wd:Q187261 .\nwd:Q12813010 wdt:P57 wd:Q187261 .\nwd:Q12813010 wdt:P1040 wd:Q187261 .\nwd:Q12813010 wdt:P1431 wd:Q187261 .\nwd:Q12813010 wdt:P162|wdt:P272 wd:Q187261 .\nwd:Q12813010 wdt:P58 wd:Q187261 .\nwd:Q5437360 wdt:P57 wd:Q187261 .\nwd:Q5437360 wdt:P1040 wd:Q187261 .\nwd:Q5437360 wdt:P1431 wd:Q187261 .\nwd:Q5437360 wdt:P162|wdt:P272 wd:Q187261 .\nwd:Q5437360 wdt:P58 wd:Q187261\n}",
        "questionWithBrackets": "Were [The Confession] , [Fate] , and [The Waiting Room] directed by , executive produced by , edited by , written by , and produced by [Zeki Demirkubuz]"
    },
    {
        "questionIdx": 121051,
        "questionPatternModEntities": "Were M0 , M6 , and M7 directed by M4 , written by M1 , M2 , and M3 , and directed by M5",
        "questionTemplate": "Were [entity] , [entity] , and [entity] [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , [entity] , and [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P0 M3 .\nM0 P1 M4 .\nM0 P1 M5 .\nM6 P0 M1 .\nM6 P0 M2 .\nM6 P0 M3 .\nM6 P1 M4 .\nM6 P1 M5 .\nM7 P0 M1 .\nM7 P0 M2 .\nM7 P0 M3 .\nM7 P1 M4 .\nM7 P1 M5\n}",
        "recursionDepth": 46,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q50279846 wdt:P57 wd:Q463617 .\nwd:Q50279846 wdt:P57 wd:Q6835163 .\nwd:Q50279846 wdt:P58 wd:Q4500 .\nwd:Q50279846 wdt:P58 wd:Q2558191 .\nwd:Q50279846 wdt:P58 wd:Q10307893 .\nwd:Q15704257 wdt:P57 wd:Q463617 .\nwd:Q15704257 wdt:P57 wd:Q6835163 .\nwd:Q15704257 wdt:P58 wd:Q4500 .\nwd:Q15704257 wdt:P58 wd:Q2558191 .\nwd:Q15704257 wdt:P58 wd:Q10307893 .\nwd:Q50279840 wdt:P57 wd:Q463617 .\nwd:Q50279840 wdt:P57 wd:Q6835163 .\nwd:Q50279840 wdt:P58 wd:Q4500 .\nwd:Q50279840 wdt:P58 wd:Q2558191 .\nwd:Q50279840 wdt:P58 wd:Q10307893\n}",
        "questionWithBrackets": "Were [Dreamland] , [Dreamland II] , and [Dreamland] directed by [Kim Manners] , written by [Frank Spotnitz] , [John Shiban] , and [Vince Gilligan] , and directed by [Michael W. Watkins]"
    },
    {
        "questionIdx": 121053,
        "questionPatternModEntities": "Were M0 , M2 , and M3 edited by , executive produced by , written by , produced by , and directed by M1",
        "questionTemplate": "Were [entity] , [entity] , and [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1 .\nM0 P2 M1 .\nM0 P3 M1 .\nM0 P4 M1 .\nM2 P0 M1 .\nM2 P1 M1 .\nM2 P2 M1 .\nM2 P3 M1 .\nM2 P4 M1 .\nM3 P0 M1 .\nM3 P1 M1 .\nM3 P2 M1 .\nM3 P3 M1 .\nM3 P4 M1\n}",
        "recursionDepth": 46,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q5437360 wdt:P57 wd:Q187261 .\nwd:Q5437360 wdt:P1040 wd:Q187261 .\nwd:Q5437360 wdt:P1431 wd:Q187261 .\nwd:Q5437360 wdt:P162|wdt:P272 wd:Q187261 .\nwd:Q5437360 wdt:P58 wd:Q187261 .\nwd:Q6084069 wdt:P57 wd:Q187261 .\nwd:Q6084069 wdt:P1040 wd:Q187261 .\nwd:Q6084069 wdt:P1431 wd:Q187261 .\nwd:Q6084069 wdt:P162|wdt:P272 wd:Q187261 .\nwd:Q6084069 wdt:P58 wd:Q187261 .\nwd:Q12813010 wdt:P57 wd:Q187261 .\nwd:Q12813010 wdt:P1040 wd:Q187261 .\nwd:Q12813010 wdt:P1431 wd:Q187261 .\nwd:Q12813010 wdt:P162|wdt:P272 wd:Q187261 .\nwd:Q12813010 wdt:P58 wd:Q187261\n}",
        "questionWithBrackets": "Were [Fate] , [The Waiting Room] , and [The Confession] edited by , executive produced by , written by , produced by , and directed by [Zeki Demirkubuz]"
    },
    {
        "questionIdx": 121072,
        "questionPatternModEntities": "Were M0 , M2 , and M3 written by , edited by , executive produced by , produced by , and directed by M1",
        "questionTemplate": "Were [entity] , [entity] , and [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1 .\nM0 P2 M1 .\nM0 P3 M1 .\nM0 P4 M1 .\nM2 P0 M1 .\nM2 P1 M1 .\nM2 P2 M1 .\nM2 P3 M1 .\nM2 P4 M1 .\nM3 P0 M1 .\nM3 P1 M1 .\nM3 P2 M1 .\nM3 P3 M1 .\nM3 P4 M1\n}",
        "recursionDepth": 46,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q5437360 wdt:P57 wd:Q187261 .\nwd:Q5437360 wdt:P1040 wd:Q187261 .\nwd:Q5437360 wdt:P1431 wd:Q187261 .\nwd:Q5437360 wdt:P162|wdt:P272 wd:Q187261 .\nwd:Q5437360 wdt:P58 wd:Q187261 .\nwd:Q6084069 wdt:P57 wd:Q187261 .\nwd:Q6084069 wdt:P1040 wd:Q187261 .\nwd:Q6084069 wdt:P1431 wd:Q187261 .\nwd:Q6084069 wdt:P162|wdt:P272 wd:Q187261 .\nwd:Q6084069 wdt:P58 wd:Q187261 .\nwd:Q12813010 wdt:P57 wd:Q187261 .\nwd:Q12813010 wdt:P1040 wd:Q187261 .\nwd:Q12813010 wdt:P1431 wd:Q187261 .\nwd:Q12813010 wdt:P162|wdt:P272 wd:Q187261 .\nwd:Q12813010 wdt:P58 wd:Q187261\n}",
        "questionWithBrackets": "Were [Fate] , [The Confession] , and [The Waiting Room] written by , edited by , executive produced by , produced by , and directed by [Zeki Demirkubuz]"
    },
    {
        "questionIdx": 121129,
        "questionPatternModEntities": "Were M0 and M2 employed by M1",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM2 P0 M1\n}",
        "recursionDepth": 16,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q3081538 wdt:P108 wd:Q29 .\nwd:Q347688 wdt:P108 wd:Q29\n}",
        "questionWithBrackets": "Were [Gonzalo Jim\u00e9nez de Quesada] and [Marquis of Verboom] employed by [Spain]"
    },
    {
        "questionIdx": 121147,
        "questionPatternModEntities": "Were M0 and M5 directed by M1 , M2 , M3 , and M4",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by [entity] , [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P0 M3 .\nM0 P0 M4 .\nM5 P0 M1 .\nM5 P0 M2 .\nM5 P0 M3 .\nM5 P0 M4\n}",
        "recursionDepth": 26,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q507285 wdt:P57 wd:Q2071 .\nwd:Q507285 wdt:P57 wd:Q55210 .\nwd:Q507285 wdt:P57 wd:Q55208 .\nwd:Q507285 wdt:P57 wd:Q55168 .\nwd:Q1144967 wdt:P57 wd:Q2071 .\nwd:Q1144967 wdt:P57 wd:Q55210 .\nwd:Q1144967 wdt:P57 wd:Q55208 .\nwd:Q1144967 wdt:P57 wd:Q55168\n}",
        "questionWithBrackets": "Were [To Each His Own Cinema] and [Lumi\u00e8re and Company] directed by [David Lynch] , [Abbas Kiarostami] , [Andrei Konchalovsky] , and [Thodoros Angelopoulos]"
    },
    {
        "questionIdx": 121156,
        "questionPatternModEntities": "Were M1 and M5 directed by M2 and M3 , executive produced by M0 's spouse , and directed by M4",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by [entity] and [entity] , [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nM1 P1 ?x0 .\nM1 P2 M2 .\nM1 P2 M3 .\nM1 P2 M4 .\nM5 P1 ?x0 .\nM5 P2 M2 .\nM5 P2 M3 .\nM5 P2 M4\n}",
        "recursionDepth": 45,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P26 wd:Q38842 .\nFILTER ( ?x0 != wd:Q38842 ) .\nwd:Q6434144 wdt:P57 wd:Q81078 .\nwd:Q6434144 wdt:P57 wd:Q742757 .\nwd:Q6434144 wdt:P57 wd:Q23261 .\nwd:Q6434144 wdt:P1431 ?x0 .\nwd:Q182206 wdt:P57 wd:Q81078 .\nwd:Q182206 wdt:P57 wd:Q742757 .\nwd:Q182206 wdt:P57 wd:Q23261 .\nwd:Q182206 wdt:P1431 ?x0\n}",
        "questionWithBrackets": "Were [Evangelion: 3.0 You Can (Not) Redo] and [Evangelion: 3.0+1.0 Thrice Upon a Time] directed by [Mahiro Maeda] and [Hideaki Anno] , executive produced by [Moyoco Anno] 's spouse , and directed by [Kazuya Tsurumaki]"
    },
    {
        "questionIdx": 121160,
        "questionPatternModEntities": "Were M2 and M3 directed by and executive produced by M0 's American sibling 's sibling",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by and [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x1 P0 M0 .\n?x1 P1 M1 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x1 != M0 ) .\nM2 P2 ?x0 .\nM2 P3 ?x0 .\nM3 P2 ?x0 .\nM3 P3 ?x0\n}",
        "recursionDepth": 38,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P3373 ?x1 .\n?x1 wdt:P27 wd:Q30 .\n?x1 wdt:P3373 wd:Q56005 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x1 != wd:Q56005 ) .\nwd:Q60747802 wdt:P57 ?x0 .\nwd:Q60747802 wdt:P1431 ?x0 .\nwd:Q1195568 wdt:P57 ?x0 .\nwd:Q1195568 wdt:P1431 ?x0\n}",
        "questionWithBrackets": "Were [Someone to Watch Over Me] and [Raised by Wolves] directed by and executive produced by [Ridley Scott] 's American sibling 's sibling"
    },
    {
        "questionIdx": 121163,
        "questionPatternModEntities": "Were M2 and M5 executive produced by M0 's male sibling 's sibling and directed by M3 and M4",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] 's [ROLE_SIMPLE] and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x1 P0 M0 .\n?x1 P1 M1 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x1 != M0 ) .\nM2 P2 ?x0 .\nM2 P3 M3 .\nM2 P3 M4 .\nM5 P2 ?x0 .\nM5 P3 M3 .\nM5 P3 M4\n}",
        "recursionDepth": 45,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P3373 ?x1 .\n?x1 wdt:P21 wd:Q6581097 .\n?x1 wdt:P3373 wd:Q181900 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x1 != wd:Q181900 ) .\nwd:Q23781155 wdt:P57 wd:Q18018415 .\nwd:Q23781155 wdt:P57 wd:Q20675767 .\nwd:Q23781155 wdt:P1431 ?x0 .\nwd:Q18407657 wdt:P57 wd:Q18018415 .\nwd:Q18407657 wdt:P57 wd:Q20675767 .\nwd:Q18407657 wdt:P1431 ?x0\n}",
        "questionWithBrackets": "Were [Captain America: Civil War] and [Avengers: Endgame] executive produced by [Stan Lee] 's male sibling 's sibling and directed by [Anthony Russo] and [Joe Russo]"
    },
    {
        "questionIdx": 121165,
        "questionPatternModEntities": "Were M1 and M5 executive produced by M0 's employee , directed by M2 and M3 , and directed by M4",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] , [VP_SIMPLE] by [entity] and [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 ?x0 .\nM1 P2 M2 .\nM1 P2 M3 .\nM1 P2 M4 .\nM5 P1 ?x0 .\nM5 P2 M2 .\nM5 P2 M3 .\nM5 P2 M4\n}",
        "recursionDepth": 45,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P108 wd:Q834328 .\nwd:Q182206 wdt:P57 wd:Q23261 .\nwd:Q182206 wdt:P57 wd:Q742757 .\nwd:Q182206 wdt:P57 wd:Q81078 .\nwd:Q182206 wdt:P1431 ?x0 .\nwd:Q6434144 wdt:P57 wd:Q23261 .\nwd:Q6434144 wdt:P57 wd:Q742757 .\nwd:Q6434144 wdt:P57 wd:Q81078 .\nwd:Q6434144 wdt:P1431 ?x0\n}",
        "questionWithBrackets": "Were [Evangelion: 3.0+1.0 Thrice Upon a Time] and [Evangelion: 3.0 You Can (Not) Redo] executive produced by [Gainax] 's employee , directed by [Mahiro Maeda] and [Kazuya Tsurumaki] , and directed by [Hideaki Anno]"
    },
    {
        "questionIdx": 121191,
        "questionPatternModEntities": "Were M2 and M5 directed by M1 's female spouse , written by M3 , and written by M4",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M1 ) .\nM2 P2 M3 .\nM2 P2 M4 .\nM2 P3 ?x0 .\nM5 P2 M3 .\nM5 P2 M4 .\nM5 P3 ?x0\n}",
        "recursionDepth": 45,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P21 wd:Q6581072 .\n?x0 wdt:P26 wd:Q1753383 .\nFILTER ( ?x0 != wd:Q1753383 ) .\nwd:Q2576383 wdt:P57 ?x0 .\nwd:Q2576383 wdt:P58 wd:Q882 .\nwd:Q2576383 wdt:P58 wd:Q235918 .\nwd:Q2299920 wdt:P57 ?x0 .\nwd:Q2299920 wdt:P58 wd:Q882 .\nwd:Q2299920 wdt:P58 wd:Q235918\n}",
        "questionWithBrackets": "Were [Caught in a Cabaret] and [Mabel at the Wheel] directed by [Lew Cody] 's female spouse , written by [Charlie Chaplin] , and written by [Mabel Normand]"
    },
    {
        "questionIdx": 121215,
        "questionPatternModEntities": "Were M0 , M2 , and M3 edited by , directed by , executive produced by , produced by , and written by M1",
        "questionTemplate": "Were [entity] , [entity] , and [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1 .\nM0 P2 M1 .\nM0 P3 M1 .\nM0 P4 M1 .\nM2 P0 M1 .\nM2 P1 M1 .\nM2 P2 M1 .\nM2 P3 M1 .\nM2 P4 M1 .\nM3 P0 M1 .\nM3 P1 M1 .\nM3 P2 M1 .\nM3 P3 M1 .\nM3 P4 M1\n}",
        "recursionDepth": 46,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q6084069 wdt:P57 wd:Q187261 .\nwd:Q6084069 wdt:P1040 wd:Q187261 .\nwd:Q6084069 wdt:P1431 wd:Q187261 .\nwd:Q6084069 wdt:P162|wdt:P272 wd:Q187261 .\nwd:Q6084069 wdt:P58 wd:Q187261 .\nwd:Q12813010 wdt:P57 wd:Q187261 .\nwd:Q12813010 wdt:P1040 wd:Q187261 .\nwd:Q12813010 wdt:P1431 wd:Q187261 .\nwd:Q12813010 wdt:P162|wdt:P272 wd:Q187261 .\nwd:Q12813010 wdt:P58 wd:Q187261 .\nwd:Q5437360 wdt:P57 wd:Q187261 .\nwd:Q5437360 wdt:P1040 wd:Q187261 .\nwd:Q5437360 wdt:P1431 wd:Q187261 .\nwd:Q5437360 wdt:P162|wdt:P272 wd:Q187261 .\nwd:Q5437360 wdt:P58 wd:Q187261\n}",
        "questionWithBrackets": "Were [The Waiting Room] , [Fate] , and [The Confession] edited by , directed by , executive produced by , produced by , and written by [Zeki Demirkubuz]"
    },
    {
        "questionIdx": 121223,
        "questionPatternModEntities": "Were M2 , M4 , M5 , and M6 executive produced by a employee of M0 and M1 and written by M3",
        "questionTemplate": "Were [entity] , [entity] , [entity] , and [entity] [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity] and [entity] and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\nM2 P1 ?x0 .\nM2 P2 M3 .\nM4 P1 ?x0 .\nM4 P2 M3 .\nM5 P1 ?x0 .\nM5 P2 M3 .\nM6 P1 ?x0 .\nM6 P2 M3\n}",
        "recursionDepth": 44,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P108 wd:Q11371930 .\n?x0 wdt:P108 wd:Q730179 .\nwd:Q236728 wdt:P1431 ?x0 .\nwd:Q236728 wdt:P58 wd:Q55400 .\nwd:Q29011 wdt:P1431 ?x0 .\nwd:Q29011 wdt:P58 wd:Q55400 .\nwd:Q699835 wdt:P1431 ?x0 .\nwd:Q699835 wdt:P58 wd:Q55400 .\nwd:Q29982423 wdt:P1431 ?x0 .\nwd:Q29982423 wdt:P58 wd:Q55400\n}",
        "questionWithBrackets": "Were [Howl's Moving Castle] , [Boro The Caterpillar] , [Ponyo on the Cliff by the Sea] , and [Arrietty] executive produced by a employee of [Nibariki] and [Toei Animation] and written by [Hayao Miyazaki]"
    },
    {
        "questionIdx": 121229,
        "questionPatternModEntities": "Were M2 and M3 directed by and written by M0 's Chinese sibling 's sibling",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by and [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x1 P0 M0 .\n?x1 P1 M1 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x1 != M0 ) .\nM2 P2 ?x0 .\nM2 P3 ?x0 .\nM3 P2 ?x0 .\nM3 P3 ?x0\n}",
        "recursionDepth": 37,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P3373 ?x1 .\n?x1 wdt:P27 wd:Q148 .\n?x1 wdt:P3373 wd:Q549233 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x1 != wd:Q549233 ) .\nwd:Q1028669 wdt:P57 ?x0 .\nwd:Q1028669 wdt:P58 ?x0 .\nwd:Q1028693 wdt:P57 ?x0 .\nwd:Q1028693 wdt:P58 ?x0\n}",
        "questionWithBrackets": "Were [The Last Message] and [The Contract] directed by and written by [Sam Hui] 's Chinese sibling 's sibling"
    },
    {
        "questionIdx": 121272,
        "questionPatternModEntities": "Were M0 , M2 , and M3 edited by , written by , and directed by M1",
        "questionTemplate": "Were [entity] , [entity] , and [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1 .\nM0 P2 M1 .\nM2 P0 M1 .\nM2 P1 M1 .\nM2 P2 M1 .\nM3 P0 M1 .\nM3 P1 M1 .\nM3 P2 M1\n}",
        "recursionDepth": 33,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q4305151 wdt:P57 wd:Q53001 .\nwd:Q4305151 wdt:P1040 wd:Q53001 .\nwd:Q4305151 wdt:P58 wd:Q53001 .\nwd:Q2533567 wdt:P57 wd:Q53001 .\nwd:Q2533567 wdt:P1040 wd:Q53001 .\nwd:Q2533567 wdt:P58 wd:Q53001 .\nwd:Q1148491 wdt:P57 wd:Q53001 .\nwd:Q1148491 wdt:P1040 wd:Q53001 .\nwd:Q1148491 wdt:P58 wd:Q53001\n}",
        "questionWithBrackets": "Were [For Ever Mozart] , [My Life to Live] , and [Histoire(s) du cin\u00e9ma] edited by , written by , and directed by [Jean-Luc Godard]"
    },
    {
        "questionIdx": 121319,
        "questionPatternModEntities": "Were M0 , M2 , and M3 Dutch",
        "questionTemplate": "Were [entity] , [entity] , and [entity] [ADJECTIVE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM2 P0 M1 .\nM3 P0 M1\n}",
        "recursionDepth": 16,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q920 wdt:P27 wd:Q29999 .\nwd:Q354 wdt:P27 wd:Q29999 .\nwd:Q927 wdt:P27 wd:Q29999\n}",
        "questionWithBrackets": "Were [Piet Kraak] , [Harry Mulisch] , and [J. Bernlef] Dutch"
    },
    {
        "questionIdx": 121331,
        "questionPatternModEntities": "Were M0 and M3 edited and directed by M1 and M2",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P1 M1 .\nM0 P1 M2 .\nM3 P0 M1 .\nM3 P0 M2 .\nM3 P1 M1 .\nM3 P1 M2\n}",
        "recursionDepth": 27,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q20729551 wdt:P57 wd:Q562108 .\nwd:Q20729551 wdt:P57 wd:Q35979475 .\nwd:Q20729551 wdt:P1040 wd:Q562108 .\nwd:Q20729551 wdt:P1040 wd:Q35979475 .\nwd:Q19827613 wdt:P57 wd:Q562108 .\nwd:Q19827613 wdt:P57 wd:Q35979475 .\nwd:Q19827613 wdt:P1040 wd:Q562108 .\nwd:Q19827613 wdt:P1040 wd:Q35979475\n}",
        "questionWithBrackets": "Were [Near Heaven, Near Earth] and [Stop for Bud] edited and directed by [J\u00f8rgen Leth] and [Ole John]"
    },
    {
        "questionIdx": 121332,
        "questionPatternModEntities": "Were M0 and M3 edited , directed , and produced by M1 and M2",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P1 M1 .\nM0 P1 M2 .\nM0 P2 M1 .\nM0 P2 M2 .\nM3 P0 M1 .\nM3 P0 M2 .\nM3 P1 M1 .\nM3 P1 M2 .\nM3 P2 M1 .\nM3 P2 M2\n}",
        "recursionDepth": 32,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q20729238 wdt:P57 wd:Q562108 .\nwd:Q20729238 wdt:P57 wd:Q35979475 .\nwd:Q20729238 wdt:P1040 wd:Q562108 .\nwd:Q20729238 wdt:P1040 wd:Q35979475 .\nwd:Q20729238 wdt:P162|wdt:P272 wd:Q562108 .\nwd:Q20729238 wdt:P162|wdt:P272 wd:Q35979475 .\nwd:Q20729551 wdt:P57 wd:Q562108 .\nwd:Q20729551 wdt:P57 wd:Q35979475 .\nwd:Q20729551 wdt:P1040 wd:Q562108 .\nwd:Q20729551 wdt:P1040 wd:Q35979475 .\nwd:Q20729551 wdt:P162|wdt:P272 wd:Q562108 .\nwd:Q20729551 wdt:P162|wdt:P272 wd:Q35979475\n}",
        "questionWithBrackets": "Were [Stop for Bud] and [Motion picture] edited , directed , and produced by [Ole John] and [J\u00f8rgen Leth]"
    },
    {
        "questionIdx": 121367,
        "questionPatternModEntities": "Were M1 and M2 distributed by M0 's child",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 ?x0 .\nM2 P1 ?x0\n}",
        "recursionDepth": 20,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P749 wd:Q2283 .\nwd:Q2067196 wdt:P750 ?x0 .\nwd:Q16888147 wdt:P750 ?x0\n}",
        "questionWithBrackets": "Were [Kinect Star Wars] and [Halo 5: Guardians] distributed by [Microsoft] 's child"
    },
    {
        "questionIdx": 121376,
        "questionPatternModEntities": "Were M0 , M3 , and M4 directed and edited by M1 and M2",
        "questionTemplate": "Were [entity] , [entity] , and [entity] [VP_SIMPLE] and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P1 M1 .\nM0 P1 M2 .\nM3 P0 M1 .\nM3 P0 M2 .\nM3 P1 M1 .\nM3 P1 M2 .\nM4 P0 M1 .\nM4 P0 M2 .\nM4 P1 M1 .\nM4 P1 M2\n}",
        "recursionDepth": 30,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q20757119 wdt:P57 wd:Q562108 .\nwd:Q20757119 wdt:P57 wd:Q35979475 .\nwd:Q20757119 wdt:P1040 wd:Q562108 .\nwd:Q20757119 wdt:P1040 wd:Q35979475 .\nwd:Q19827613 wdt:P57 wd:Q562108 .\nwd:Q19827613 wdt:P57 wd:Q35979475 .\nwd:Q19827613 wdt:P1040 wd:Q562108 .\nwd:Q19827613 wdt:P1040 wd:Q35979475 .\nwd:Q20729238 wdt:P57 wd:Q562108 .\nwd:Q20729238 wdt:P57 wd:Q35979475 .\nwd:Q20729238 wdt:P1040 wd:Q562108 .\nwd:Q20729238 wdt:P1040 wd:Q35979475\n}",
        "questionWithBrackets": "Were [Near Heaven, Near Earth] , [No label defined] , and [Motion picture] directed and edited by [J\u00f8rgen Leth] and [Ole John]"
    },
    {
        "questionIdx": 121406,
        "questionPatternModEntities": "Were M0 , M2 , and M3 founded by M1",
        "questionTemplate": "Were [entity] , [entity] , and [entity] [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM2 P0 M1 .\nM3 P0 M1\n}",
        "recursionDepth": 19,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q3153043 wdt:P112 wd:Q17 .\nwd:Q98080799 wdt:P112 wd:Q17 .\nwd:Q27133033 wdt:P112 wd:Q17\n}",
        "questionWithBrackets": "Were [Inter-Agency Space Debris Coordination Committee] , [Fujinkai] , and [Coalition for Epidemic Preparedness Innovations] founded by [Japan]"
    },
    {
        "questionIdx": 121464,
        "questionPatternModEntities": "Were M0 and M2 produced and directed by M1",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1 .\nM2 P0 M1 .\nM2 P1 M1\n}",
        "recursionDepth": 23,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q208048 wdt:P57 wd:Q2263 .\nwd:Q208048 wdt:P162|wdt:P272 wd:Q2263 .\nwd:Q382864 wdt:P57 wd:Q2263 .\nwd:Q382864 wdt:P162|wdt:P272 wd:Q2263\n}",
        "questionWithBrackets": "Were [Band of Brothers] and [Larry Crowne] produced and directed by [Tom Hanks]"
    },
    {
        "questionIdx": 121509,
        "questionPatternModEntities": "Were M2 and M5 executive produced by M1 's male parent , produced by M3 , and edited by M4",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nM2 P2 ?x0 .\nM2 P3 M3 .\nM2 P4 M4 .\nM5 P2 ?x0 .\nM5 P3 M3 .\nM5 P4 M4\n}",
        "recursionDepth": 46,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q6377498 .\n?x0 wdt:P21 wd:Q6581097 .\nwd:Q181803 wdt:P1040 wd:Q38222 .\nwd:Q181803 wdt:P1431 ?x0 .\nwd:Q181803 wdt:P162|wdt:P272 wd:Q683785 .\nwd:Q17738 wdt:P1040 wd:Q38222 .\nwd:Q17738 wdt:P1431 ?x0 .\nwd:Q17738 wdt:P162|wdt:P272 wd:Q683785\n}",
        "questionWithBrackets": "Were [Star Wars: Episode VI \u2013 Return of the Jedi] and [Star Wars: Episode IV \u2013 A New Hope] executive produced by [Katie Lucas] 's male parent , produced by [Rick McCallum] , and edited by [George Lucas]"
    },
    {
        "questionIdx": 121520,
        "questionPatternModEntities": "Were M1 , M2 , and M3 executive produced by M0 's parent",
        "questionTemplate": "Were [entity] , [entity] , and [entity] [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 ?x0 .\nM2 P1 ?x0 .\nM3 P1 ?x0\n}",
        "recursionDepth": 24,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q29260589 .\nwd:Q42708010 wdt:P1431 ?x0 .\nwd:Q1247235 wdt:P1431 ?x0 .\nwd:Q171453 wdt:P1431 ?x0\n}",
        "questionWithBrackets": "Were [United States of Tara] , [Transformers] , and [First Man] executive produced by [Max Spielberg] 's parent"
    },
    {
        "questionIdx": 121532,
        "questionPatternModEntities": "Were M2 and M6 executive produced by M3 , M4 , and M5 and directed by M1 's spouse 's male sibling",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by [entity] , [entity] , and [entity] and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x0 P1 M0 .\n?x1 P2 M1 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x1 != M1 ) .\nM2 P3 M3 .\nM2 P3 M4 .\nM2 P3 M5 .\nM2 P4 ?x0 .\nM6 P3 M3 .\nM6 P3 M4 .\nM6 P3 M5 .\nM6 P4 ?x0\n}",
        "recursionDepth": 48,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P21 wd:Q6581097 .\n?x0 wdt:P3373 ?x1 .\n?x1 wdt:P26 wd:Q26761639 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x1 != wd:Q26761639 ) .\nwd:Q23781155 wdt:P57 ?x0 .\nwd:Q23781155 wdt:P1431 wd:Q181900 .\nwd:Q23781155 wdt:P1431 wd:Q23409539 .\nwd:Q23781155 wdt:P1431 wd:Q24176186 .\nwd:Q18407657 wdt:P57 ?x0 .\nwd:Q18407657 wdt:P1431 wd:Q181900 .\nwd:Q18407657 wdt:P1431 wd:Q23409539 .\nwd:Q18407657 wdt:P1431 wd:Q24176186\n}",
        "questionWithBrackets": "Were [Captain America: Civil War] and [Avengers: Endgame] executive produced by [Louis D'Esposito] , [Victoria Alonso] , and [Stan Lee] and directed by [Ann Russo] 's spouse 's male sibling"
    },
    {
        "questionIdx": 121560,
        "questionPatternModEntities": "Were M2 and M6 executive produced by M1 's female spouse and written by M3 , M4 , and M5",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] and [VP_SIMPLE] by [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M1 ) .\nM2 P2 ?x0 .\nM2 P3 M3 .\nM2 P3 M4 .\nM2 P3 M5 .\nM6 P2 ?x0 .\nM6 P3 M3 .\nM6 P3 M4 .\nM6 P3 M5\n}",
        "recursionDepth": 44,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P21 wd:Q6581072 .\n?x0 wdt:P26 wd:Q549570 .\nFILTER ( ?x0 != wd:Q549570 ) .\nwd:Q22350906 wdt:P1431 ?x0 .\nwd:Q22350906 wdt:P58 wd:Q1151111 .\nwd:Q22350906 wdt:P58 wd:Q28846433 .\nwd:Q22350906 wdt:P58 wd:Q28855446 .\nwd:Q3362144 wdt:P1431 ?x0 .\nwd:Q3362144 wdt:P58 wd:Q1151111 .\nwd:Q3362144 wdt:P58 wd:Q28846433 .\nwd:Q3362144 wdt:P58 wd:Q28855446\n}",
        "questionWithBrackets": "Were [Tummy Trouble] and [Trail Mix-Up] executive produced by [Frank Marshall] 's female spouse and written by [Patrick A. Ventura] , [Rob Minkoff] , and [Mark Kausler]"
    },
    {
        "questionIdx": 121575,
        "questionPatternModEntities": "Were M2 and M4 directed by M3 and edited by a Chinese spouse of M1",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by [entity] and [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M1 ) .\nM2 P2 ?x0 .\nM2 P3 M3 .\nM4 P2 ?x0 .\nM4 P3 M3\n}",
        "recursionDepth": 38,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P27 wd:Q148 .\n?x0 wdt:P26 wd:Q700315 .\nFILTER ( ?x0 != wd:Q700315 ) .\nwd:Q430987 wdt:P57 wd:Q705226 .\nwd:Q430987 wdt:P1040 ?x0 .\nwd:Q803694 wdt:P57 wd:Q705226 .\nwd:Q803694 wdt:P1040 ?x0\n}",
        "questionWithBrackets": "Were [Tuya's Marriage] and [White Deer Plain] directed by [Wang Quan'an] and edited by a Chinese spouse of [Zhang Yuqi]"
    },
    {
        "questionIdx": 121576,
        "questionPatternModEntities": "Were M0 and M3 executive produced by M1 and executive produced by M2",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by [entity] and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM3 P0 M1 .\nM3 P0 M2\n}",
        "recursionDepth": 29,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q2708250 wdt:P1431 wd:Q56005 .\nwd:Q2708250 wdt:P1431 wd:Q193648 .\nwd:Q1093425 wdt:P1431 wd:Q56005 .\nwd:Q1093425 wdt:P1431 wd:Q193648\n}",
        "questionWithBrackets": "Were [Cracks] and [RKO 281] executive produced by [Ridley Scott] and executive produced by [Tony Scott]"
    },
    {
        "questionIdx": 121603,
        "questionPatternModEntities": "Were M0 , M2 , and M3 executive produced by , directed by , written by , edited by , and produced by M1",
        "questionTemplate": "Were [entity] , [entity] , and [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1 .\nM0 P2 M1 .\nM0 P3 M1 .\nM0 P4 M1 .\nM2 P0 M1 .\nM2 P1 M1 .\nM2 P2 M1 .\nM2 P3 M1 .\nM2 P4 M1 .\nM3 P0 M1 .\nM3 P1 M1 .\nM3 P2 M1 .\nM3 P3 M1 .\nM3 P4 M1\n}",
        "recursionDepth": 46,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q5437360 wdt:P57 wd:Q187261 .\nwd:Q5437360 wdt:P1040 wd:Q187261 .\nwd:Q5437360 wdt:P1431 wd:Q187261 .\nwd:Q5437360 wdt:P162|wdt:P272 wd:Q187261 .\nwd:Q5437360 wdt:P58 wd:Q187261 .\nwd:Q6084069 wdt:P57 wd:Q187261 .\nwd:Q6084069 wdt:P1040 wd:Q187261 .\nwd:Q6084069 wdt:P1431 wd:Q187261 .\nwd:Q6084069 wdt:P162|wdt:P272 wd:Q187261 .\nwd:Q6084069 wdt:P58 wd:Q187261 .\nwd:Q12813010 wdt:P57 wd:Q187261 .\nwd:Q12813010 wdt:P1040 wd:Q187261 .\nwd:Q12813010 wdt:P1431 wd:Q187261 .\nwd:Q12813010 wdt:P162|wdt:P272 wd:Q187261 .\nwd:Q12813010 wdt:P58 wd:Q187261\n}",
        "questionWithBrackets": "Were [Fate] , [The Waiting Room] , and [The Confession] executive produced by , directed by , written by , edited by , and produced by [Zeki Demirkubuz]"
    },
    {
        "questionIdx": 121622,
        "questionPatternModEntities": "Were M0 and M7 edited by M2 , written by M1 , and directed by M3 , M4 , M5 , and M6",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity] , [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M2 .\nM0 P2 M3 .\nM0 P2 M4 .\nM0 P2 M5 .\nM0 P2 M6 .\nM7 P0 M1 .\nM7 P1 M2 .\nM7 P2 M3 .\nM7 P2 M4 .\nM7 P2 M5 .\nM7 P2 M6\n}",
        "recursionDepth": 46,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q4986245 wdt:P57 wd:Q457864 .\nwd:Q4986245 wdt:P57 wd:Q1063493 .\nwd:Q4986245 wdt:P57 wd:Q312657 .\nwd:Q4986245 wdt:P57 wd:Q2084424 .\nwd:Q4986245 wdt:P1040 wd:Q544350 .\nwd:Q4986245 wdt:P58 wd:Q3517069 .\nwd:Q2081050 wdt:P57 wd:Q457864 .\nwd:Q2081050 wdt:P57 wd:Q1063493 .\nwd:Q2081050 wdt:P57 wd:Q312657 .\nwd:Q2081050 wdt:P57 wd:Q2084424 .\nwd:Q2081050 wdt:P1040 wd:Q544350 .\nwd:Q2081050 wdt:P58 wd:Q3517069\n}",
        "questionWithBrackets": "Were [Bugs Bunny's Howl-oween Special] and [Daffy Duck's Quackbusters] edited by [Treg Brown] , written by [Tedd Pierce] , and directed by [Friz Freleng] , [Maurice Noble] , [Chuck Jones] , and [Robert McKimson]"
    },
    {
        "questionIdx": 121629,
        "questionPatternModEntities": "Were M0 , M2 , and M3 written by and produced by M1",
        "questionTemplate": "Were [entity] , [entity] , and [entity] [VP_SIMPLE] by and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1 .\nM2 P0 M1 .\nM2 P1 M1 .\nM3 P0 M1 .\nM3 P1 M1\n}",
        "recursionDepth": 27,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q1068968 wdt:P162|wdt:P272 wd:Q882 .\nwd:Q1068968 wdt:P58 wd:Q882 .\nwd:Q166739 wdt:P162|wdt:P272 wd:Q882 .\nwd:Q166739 wdt:P58 wd:Q882 .\nwd:Q214723 wdt:P162|wdt:P272 wd:Q882 .\nwd:Q214723 wdt:P58 wd:Q882\n}",
        "questionWithBrackets": "Were [The Gold Rush] , [The Floorwalker] , and [A King in New York] written by and produced by [Charlie Chaplin]"
    },
    {
        "questionIdx": 121646,
        "questionPatternModEntities": "Were M2 and M3 produced by , written by , edited by , and directed by a French spouse of M1",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M1 ) .\nM2 P2 ?x0 .\nM2 P3 ?x0 .\nM2 P4 ?x0 .\nM2 P5 ?x0 .\nM3 P2 ?x0 .\nM3 P3 ?x0 .\nM3 P4 ?x0 .\nM3 P5 ?x0\n}",
        "recursionDepth": 47,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P27 wd:Q142 .\n?x0 wdt:P26 wd:Q15407996 .\nFILTER ( ?x0 != wd:Q15407996 ) .\nwd:Q3233157 wdt:P57 ?x0 .\nwd:Q3233157 wdt:P1040 ?x0 .\nwd:Q3233157 wdt:P162|wdt:P272 ?x0 .\nwd:Q3233157 wdt:P58 ?x0 .\nwd:Q12141583 wdt:P57 ?x0 .\nwd:Q12141583 wdt:P1040 ?x0 .\nwd:Q12141583 wdt:P162|wdt:P272 ?x0 .\nwd:Q12141583 wdt:P58 ?x0\n}",
        "questionWithBrackets": "Were [Les hautes solitudes] and [No label defined] produced by , written by , edited by , and directed by a French spouse of [Caroline Deruas]"
    },
    {
        "questionIdx": 121649,
        "questionPatternModEntities": "Were M0 and M2 written by and produced by M1",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1 .\nM2 P0 M1 .\nM2 P1 M1\n}",
        "recursionDepth": 24,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q2294948 wdt:P162|wdt:P272 wd:Q882 .\nwd:Q2294948 wdt:P58 wd:Q882 .\nwd:Q109116 wdt:P162|wdt:P272 wd:Q882 .\nwd:Q109116 wdt:P58 wd:Q882\n}",
        "questionWithBrackets": "Were [The Fireman] and [The Great Dictator] written by and produced by [Charlie Chaplin]"
    },
    {
        "questionIdx": 121650,
        "questionPatternModEntities": "Were M2 and M4 executive produced by M1 's parent 's female spouse and directed by M3",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 ?x1 .\n?x1 P2 M1 .\nFILTER ( ?x0 != ?x1 ) .\nM2 P3 ?x0 .\nM2 P4 M3 .\nM4 P3 ?x0 .\nM4 P4 M3\n}",
        "recursionDepth": 41,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P21 wd:Q6581072 .\n?x0 wdt:P26 ?x1 .\n?x1 wdt:P40|wdt:P355 wd:Q3592080 .\nFILTER ( ?x0 != ?x1 ) .\nwd:Q2315036 wdt:P57 wd:Q528949 .\nwd:Q2315036 wdt:P1431 ?x0 .\nwd:Q4515040 wdt:P57 wd:Q528949 .\nwd:Q4515040 wdt:P1431 ?x0\n}",
        "questionWithBrackets": "Were [The Fourth Dimension] and [Mister Lonely] executive produced by [\u00c9tienne Bourgois] 's parent 's female spouse and directed by [Harmony Korine]"
    },
    {
        "questionIdx": 121651,
        "questionPatternModEntities": "Were M0 , M5 , M6 , and M7 executive produced by M1 and M2 , directed by M4 , and edited by M3",
        "questionTemplate": "Were [entity] , [entity] , [entity] , and [entity] [VP_SIMPLE] by [entity] and [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P1 M3 .\nM0 P2 M4 .\nM5 P0 M1 .\nM5 P0 M2 .\nM5 P1 M3 .\nM5 P2 M4 .\nM6 P0 M1 .\nM6 P0 M2 .\nM6 P1 M3 .\nM6 P2 M4 .\nM7 P0 M1 .\nM7 P0 M2 .\nM7 P1 M3 .\nM7 P2 M4\n}",
        "recursionDepth": 47,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q54274 wdt:P57 wd:Q295463 .\nwd:Q54274 wdt:P1040 wd:Q1138711 .\nwd:Q54274 wdt:P1431 wd:Q24809564 .\nwd:Q54274 wdt:P1431 wd:Q24809566 .\nwd:Q46717 wdt:P57 wd:Q295463 .\nwd:Q46717 wdt:P1040 wd:Q1138711 .\nwd:Q46717 wdt:P1431 wd:Q24809564 .\nwd:Q46717 wdt:P1431 wd:Q24809566 .\nwd:Q548919 wdt:P57 wd:Q295463 .\nwd:Q548919 wdt:P1040 wd:Q1138711 .\nwd:Q548919 wdt:P1431 wd:Q24809564 .\nwd:Q548919 wdt:P1431 wd:Q24809566 .\nwd:Q161087 wdt:P57 wd:Q295463 .\nwd:Q161087 wdt:P1040 wd:Q1138711 .\nwd:Q161087 wdt:P1431 wd:Q24809564 .\nwd:Q161087 wdt:P1431 wd:Q24809566\n}",
        "questionWithBrackets": "Were [Pirates of the Caribbean: Dead Man's Chest] , [The Lone Ranger] , [Pirates of the Caribbean: At World's End] , and [Pirates of the Caribbean: The Curse of the Black Pearl] executive produced by [Mike Stenson] and [Chad Oman] , directed by [Gore Verbinski] , and edited by [Craig Wood]"
    },
    {
        "questionIdx": 121666,
        "questionPatternModEntities": "Were M1 , M2 , M3 , and M4 founded by M0 's parent",
        "questionTemplate": "Were [entity] , [entity] , [entity] , and [entity] [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 ?x0 .\nM2 P1 ?x0 .\nM3 P1 ?x0 .\nM4 P1 ?x0\n}",
        "recursionDepth": 26,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q106204654 .\nwd:Q2013 wdt:P112 ?x0 .\nwd:Q13679 wdt:P112 ?x0 .\nwd:Q367 wdt:P112 ?x0 .\nwd:Q565 wdt:P112 ?x0\n}",
        "questionWithBrackets": "Were [Wikibooks] , [Wikimedia Commons] , [Wikispecies] , and [Wikidata] founded by [Wikimedia, LLC] 's parent"
    },
    {
        "questionIdx": 121668,
        "questionPatternModEntities": "Were M2 and M4 founded by M3 and founded by M1 's Dutch spouse",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by [entity] and [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M1 ) .\nM2 P2 ?x0 .\nM2 P2 M3 .\nM4 P2 ?x0 .\nM4 P2 M3\n}",
        "recursionDepth": 36,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P27 wd:Q29999 .\n?x0 wdt:P26 wd:Q66424591 .\nFILTER ( ?x0 != wd:Q66424591 ) .\nwd:Q160732 wdt:P112 ?x0 .\nwd:Q160732 wdt:P112 wd:Q62617 .\nwd:Q4033154 wdt:P112 ?x0 .\nwd:Q4033154 wdt:P112 wd:Q62617\n}",
        "questionWithBrackets": "Were [Armada Music] and [A State of Trance] founded by [Armin van Buuren] and founded by [Erika van Thiel] 's Dutch spouse"
    },
    {
        "questionIdx": 121671,
        "questionPatternModEntities": "Were M0 and M3 founded by M1 and founded by M2",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by [entity] and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM3 P0 M1 .\nM3 P0 M2\n}",
        "recursionDepth": 27,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q1065 wdt:P112 wd:Q16 .\nwd:Q1065 wdt:P112 wd:Q20 .\nwd:Q146905 wdt:P112 wd:Q16 .\nwd:Q146905 wdt:P112 wd:Q20\n}",
        "questionWithBrackets": "Were [Zangger Committee] and [United Nations] founded by [Norway] and founded by [Canada]"
    },
    {
        "questionIdx": 121679,
        "questionPatternModEntities": "Were M2 and M4 founded by M3 and founded by M1 's spouse 's German spouse",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by [entity] and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 ?x1 .\n?x1 P1 M1 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x1 != M1 ) .\nM2 P2 ?x0 .\nM2 P2 M3 .\nM4 P2 ?x0 .\nM4 P2 M3\n}",
        "recursionDepth": 40,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P27 wd:Q183 .\n?x0 wdt:P26 ?x1 .\n?x1 wdt:P26 wd:Q63043 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x1 != wd:Q63043 ) .\nwd:Q1204511 wdt:P112 ?x0 .\nwd:Q1204511 wdt:P112 wd:Q41749 .\nwd:Q2995650 wdt:P112 ?x0 .\nwd:Q2995650 wdt:P112 wd:Q41749\n}",
        "questionWithBrackets": "Were [Continental Films] and [Deutsche Zeichentrickfilme G.m.b.H] founded by [Joseph Goebbels] and founded by [G\u00fcnther Quandt] 's spouse 's German spouse"
    },
    {
        "questionIdx": 121695,
        "questionPatternModEntities": "Were M3 and M4 directed , produced , written , and edited by a employee of M0 , M1 , and M2",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\nM3 P1 ?x0 .\nM3 P2 ?x0 .\nM3 P3 ?x0 .\nM3 P4 ?x0 .\nM4 P1 ?x0 .\nM4 P2 ?x0 .\nM4 P3 ?x0 .\nM4 P4 ?x0\n}",
        "recursionDepth": 46,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P108 wd:Q13371 .\n?x0 wdt:P108 wd:Q49088 .\n?x0 wdt:P108 wd:Q49210 .\nwd:Q2534007 wdt:P57 ?x0 .\nwd:Q2534007 wdt:P1040 ?x0 .\nwd:Q2534007 wdt:P162|wdt:P272 ?x0 .\nwd:Q2534007 wdt:P58 ?x0 .\nwd:Q1141467 wdt:P57 ?x0 .\nwd:Q1141467 wdt:P1040 ?x0 .\nwd:Q1141467 wdt:P162|wdt:P272 ?x0 .\nwd:Q1141467 wdt:P58 ?x0\n}",
        "questionWithBrackets": "Were [Crooklyn] and [Joe's Bed-Stuy Barbershop: We Cut Heads] directed , produced , written , and edited by a employee of [Columbia University] , [Harvard University] , and [New York University]"
    },
    {
        "questionIdx": 121696,
        "questionPatternModEntities": "Were M3 and M4 edited , directed , written , and produced by a employee of M0 , M1 , and M2",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\nM3 P1 ?x0 .\nM3 P2 ?x0 .\nM3 P3 ?x0 .\nM3 P4 ?x0 .\nM4 P1 ?x0 .\nM4 P2 ?x0 .\nM4 P3 ?x0 .\nM4 P4 ?x0\n}",
        "recursionDepth": 46,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P108 wd:Q13371 .\n?x0 wdt:P108 wd:Q49088 .\n?x0 wdt:P108 wd:Q49210 .\nwd:Q2534007 wdt:P57 ?x0 .\nwd:Q2534007 wdt:P1040 ?x0 .\nwd:Q2534007 wdt:P162|wdt:P272 ?x0 .\nwd:Q2534007 wdt:P58 ?x0 .\nwd:Q1141467 wdt:P57 ?x0 .\nwd:Q1141467 wdt:P1040 ?x0 .\nwd:Q1141467 wdt:P162|wdt:P272 ?x0 .\nwd:Q1141467 wdt:P58 ?x0\n}",
        "questionWithBrackets": "Were [Crooklyn] and [Joe's Bed-Stuy Barbershop: We Cut Heads] edited , directed , written , and produced by a employee of [Harvard University] , [New York University] , and [Columbia University]"
    },
    {
        "questionIdx": 121697,
        "questionPatternModEntities": "Were M2 and M3 produced by , edited by , written by , and directed by a employee of M0 and M1",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\nM2 P1 ?x0 .\nM2 P2 ?x0 .\nM2 P3 ?x0 .\nM2 P4 ?x0 .\nM3 P1 ?x0 .\nM3 P2 ?x0 .\nM3 P3 ?x0 .\nM3 P4 ?x0\n}",
        "recursionDepth": 46,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P108 wd:Q49088 .\n?x0 wdt:P108 wd:Q13371 .\nwd:Q2257944 wdt:P57 ?x0 .\nwd:Q2257944 wdt:P1040 ?x0 .\nwd:Q2257944 wdt:P162|wdt:P272 ?x0 .\nwd:Q2257944 wdt:P58 ?x0 .\nwd:Q1141467 wdt:P57 ?x0 .\nwd:Q1141467 wdt:P1040 ?x0 .\nwd:Q1141467 wdt:P162|wdt:P272 ?x0 .\nwd:Q1141467 wdt:P58 ?x0\n}",
        "questionWithBrackets": "Were [She's Gotta Have It] and [Joe's Bed-Stuy Barbershop: We Cut Heads] produced by , edited by , written by , and directed by a employee of [Harvard University] and [Columbia University]"
    },
    {
        "questionIdx": 121704,
        "questionPatternModEntities": "Were M5 and M6 produced by a employee of M0 , M1 , M2 , M3 , and M4",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity] , [entity] , [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P0 M3 .\n?x0 P0 M4 .\nM5 P1 ?x0 .\nM6 P1 ?x0\n}",
        "recursionDepth": 35,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P108 wd:Q38903 .\n?x0 wdt:P108 wd:Q216364 .\n?x0 wdt:P108 wd:Q1427663 .\n?x0 wdt:P108 wd:Q334800 .\n?x0 wdt:P108 wd:Q1194456 .\nwd:Q158329 wdt:P162|wdt:P272 ?x0 .\nwd:Q2075899 wdt:P162|wdt:P272 ?x0\n}",
        "questionWithBrackets": "Were [Laundry Service] and [Did It Again] produced by a employee of [Freixenet] , [Epic Records] , [Roc Nation] , [PepsiCo] , and [Universal Music Group]"
    },
    {
        "questionIdx": 121709,
        "questionPatternModEntities": "Were M1 , M2 , and M3 produced by , written by , directed by , and edited by a employee of M0",
        "questionTemplate": "Were [entity] , [entity] , and [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 ?x0 .\nM1 P2 ?x0 .\nM1 P3 ?x0 .\nM1 P4 ?x0 .\nM2 P1 ?x0 .\nM2 P2 ?x0 .\nM2 P3 ?x0 .\nM2 P4 ?x0 .\nM3 P1 ?x0 .\nM3 P2 ?x0 .\nM3 P3 ?x0 .\nM3 P4 ?x0\n}",
        "recursionDepth": 45,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P108 wd:Q13371 .\nwd:Q1141467 wdt:P57 ?x0 .\nwd:Q1141467 wdt:P1040 ?x0 .\nwd:Q1141467 wdt:P162|wdt:P272 ?x0 .\nwd:Q1141467 wdt:P58 ?x0 .\nwd:Q2257944 wdt:P57 ?x0 .\nwd:Q2257944 wdt:P1040 ?x0 .\nwd:Q2257944 wdt:P162|wdt:P272 ?x0 .\nwd:Q2257944 wdt:P58 ?x0 .\nwd:Q2534007 wdt:P57 ?x0 .\nwd:Q2534007 wdt:P1040 ?x0 .\nwd:Q2534007 wdt:P162|wdt:P272 ?x0 .\nwd:Q2534007 wdt:P58 ?x0\n}",
        "questionWithBrackets": "Were [She's Gotta Have It] , [Joe's Bed-Stuy Barbershop: We Cut Heads] , and [Crooklyn] produced by , written by , directed by , and edited by a employee of [Harvard University]"
    },
    {
        "questionIdx": 121710,
        "questionPatternModEntities": "Were M2 , M3 , and M4 edited , directed , produced , and written by M0 's American employee",
        "questionTemplate": "Were [entity] , [entity] , and [entity] [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nM2 P2 ?x0 .\nM2 P3 ?x0 .\nM2 P4 ?x0 .\nM2 P5 ?x0 .\nM3 P2 ?x0 .\nM3 P3 ?x0 .\nM3 P4 ?x0 .\nM3 P5 ?x0 .\nM4 P2 ?x0 .\nM4 P3 ?x0 .\nM4 P4 ?x0 .\nM4 P5 ?x0\n}",
        "recursionDepth": 45,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P108 wd:Q13371 .\n?x0 wdt:P27 wd:Q30 .\nwd:Q2534007 wdt:P57 ?x0 .\nwd:Q2534007 wdt:P1040 ?x0 .\nwd:Q2534007 wdt:P162|wdt:P272 ?x0 .\nwd:Q2534007 wdt:P58 ?x0 .\nwd:Q2257944 wdt:P57 ?x0 .\nwd:Q2257944 wdt:P1040 ?x0 .\nwd:Q2257944 wdt:P162|wdt:P272 ?x0 .\nwd:Q2257944 wdt:P58 ?x0 .\nwd:Q1141467 wdt:P57 ?x0 .\nwd:Q1141467 wdt:P1040 ?x0 .\nwd:Q1141467 wdt:P162|wdt:P272 ?x0 .\nwd:Q1141467 wdt:P58 ?x0\n}",
        "questionWithBrackets": "Were [She's Gotta Have It] , [Crooklyn] , and [Joe's Bed-Stuy Barbershop: We Cut Heads] edited , directed , produced , and written by [Harvard University] 's American employee"
    },
    {
        "questionIdx": 121749,
        "questionPatternModEntities": "Were M1 , M4 , M5 , and M6 edited by M2 , edited by M3 , and edited by M0 's spouse",
        "questionTemplate": "Were [entity] , [entity] , [entity] , and [entity] [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nM1 P1 ?x0 .\nM1 P1 M2 .\nM1 P1 M3 .\nM4 P1 ?x0 .\nM4 P1 M2 .\nM4 P1 M3 .\nM5 P1 ?x0 .\nM5 P1 M2 .\nM5 P1 M3 .\nM6 P1 ?x0 .\nM6 P1 M2 .\nM6 P1 M3\n}",
        "recursionDepth": 46,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P26 wd:Q11404285 .\nFILTER ( ?x0 != wd:Q11404285 ) .\nwd:Q1059416 wdt:P1040 ?x0 .\nwd:Q1059416 wdt:P1040 wd:Q11444385 .\nwd:Q1059416 wdt:P1040 wd:Q26372 .\nwd:Q537026 wdt:P1040 ?x0 .\nwd:Q537026 wdt:P1040 wd:Q11444385 .\nwd:Q537026 wdt:P1040 wd:Q26372 .\nwd:Q1091097 wdt:P1040 ?x0 .\nwd:Q1091097 wdt:P1040 wd:Q11444385 .\nwd:Q1091097 wdt:P1040 wd:Q26372 .\nwd:Q1125897 wdt:P1040 ?x0 .\nwd:Q1125897 wdt:P1040 wd:Q11444385 .\nwd:Q1125897 wdt:P1040 wd:Q26372\n}",
        "questionWithBrackets": "Were [Kikujiro] , [Beyond Outrage] , [Outrage] , and [Hana-bi] edited by [Yoshinori \u014cta] , edited by [Takeshi Kitano] , and edited by [Mikiko Kitano] 's spouse"
    },
    {
        "questionIdx": 121764,
        "questionPatternModEntities": "Were M0 and M5 edited by M1 , M2 , M3 , and M4",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by [entity] , [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P0 M3 .\nM0 P0 M4 .\nM5 P0 M1 .\nM5 P0 M2 .\nM5 P0 M3 .\nM5 P0 M4\n}",
        "recursionDepth": 26,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q20729725 wdt:P1040 wd:Q29169934 .\nwd:Q20729725 wdt:P1040 wd:Q35979788 .\nwd:Q20729725 wdt:P1040 wd:Q35979547 .\nwd:Q20729725 wdt:P1040 wd:Q26956051 .\nwd:Q20729726 wdt:P1040 wd:Q29169934 .\nwd:Q20729726 wdt:P1040 wd:Q35979788 .\nwd:Q20729726 wdt:P1040 wd:Q35979547 .\nwd:Q20729726 wdt:P1040 wd:Q26956051\n}",
        "questionWithBrackets": "Were [No label defined] and [No label defined] edited by [Anders S\u00f8rensen] , [Molly Malene Stensgaard] , [Maria Mac Dalland] , and [Hans Perk]"
    },
    {
        "questionIdx": 121765,
        "questionPatternModEntities": "Were M1 , M4 , M5 , and M6 edited by M2 and M3 and edited by M0 's spouse",
        "questionTemplate": "Were [entity] , [entity] , [entity] , and [entity] [VP_SIMPLE] by [entity] and [entity] and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nM1 P1 ?x0 .\nM1 P1 M2 .\nM1 P1 M3 .\nM4 P1 ?x0 .\nM4 P1 M2 .\nM4 P1 M3 .\nM5 P1 ?x0 .\nM5 P1 M2 .\nM5 P1 M3 .\nM6 P1 ?x0 .\nM6 P1 M2 .\nM6 P1 M3\n}",
        "recursionDepth": 41,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P26 wd:Q70294 .\nFILTER ( ?x0 != wd:Q70294 ) .\nwd:Q695982 wdt:P1040 ?x0 .\nwd:Q695982 wdt:P1040 wd:Q98665 .\nwd:Q695982 wdt:P1040 wd:Q44426 .\nwd:Q570483 wdt:P1040 ?x0 .\nwd:Q570483 wdt:P1040 wd:Q98665 .\nwd:Q570483 wdt:P1040 wd:Q44426 .\nwd:Q686125 wdt:P1040 ?x0 .\nwd:Q686125 wdt:P1040 wd:Q98665 .\nwd:Q686125 wdt:P1040 wd:Q44426 .\nwd:Q3208713 wdt:P1040 ?x0 .\nwd:Q3208713 wdt:P1040 wd:Q98665 .\nwd:Q3208713 wdt:P1040 wd:Q44426\n}",
        "questionWithBrackets": "Were [Lili Marleen] , [In a Year of 13 Moons] , [Querelle] , and [The Stationmaster's Wife] edited by [Juliane Lorenz] and [Rainer Werner Fassbinder] and edited by [Ingrid Caven] 's spouse"
    },
    {
        "questionIdx": 121772,
        "questionPatternModEntities": "Were M1 , M2 , M3 , M4 , and M5 founded by M0 's sibling",
        "questionTemplate": "Were [entity] , [entity] , [entity] , [entity] , and [entity] [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nM1 P1 ?x0 .\nM2 P1 ?x0 .\nM3 P1 ?x0 .\nM4 P1 ?x0 .\nM5 P1 ?x0\n}",
        "recursionDepth": 29,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P3373 wd:Q7729 .\nFILTER ( ?x0 != wd:Q7729 ) .\nwd:Q1127441 wdt:P112 ?x0 .\nwd:Q3551587 wdt:P112 ?x0 .\nwd:Q1132066 wdt:P112 ?x0 .\nwd:Q112581 wdt:P112 ?x0 .\nwd:Q163700 wdt:P112 ?x0\n}",
        "questionWithBrackets": "Were [\u00c9cole Sp\u00e9ciale Militaire de Saint-Cyr] , [Israelite Central Consistory of France] , [House of Bonaparte] , [Legion of Honour] , and [University of France] founded by [Louis Bonaparte] 's sibling"
    },
    {
        "questionIdx": 121775,
        "questionPatternModEntities": "Were M1 , M2 , M3 , and M4 edited by a spouse of M0",
        "questionTemplate": "Were [entity] , [entity] , [entity] , and [entity] [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nM1 P1 ?x0 .\nM2 P1 ?x0 .\nM3 P1 ?x0 .\nM4 P1 ?x0\n}",
        "recursionDepth": 28,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P26 wd:Q32337 .\nFILTER ( ?x0 != wd:Q32337 ) .\nwd:Q2446049 wdt:P1040 ?x0 .\nwd:Q199039 wdt:P1040 ?x0 .\nwd:Q45602 wdt:P1040 ?x0 .\nwd:Q238211 wdt:P1040 ?x0\n}",
        "questionWithBrackets": "Were [Gentlemen of Nerve] , [Modern Times] , [City Lights] , and [Pay Day] edited by a spouse of [Lita Grey]"
    },
    {
        "questionIdx": 121972,
        "questionPatternModEntities": "Were M0 and M3 produced by , written by , and edited by M1 and M2",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P1 M1 .\nM0 P1 M2 .\nM0 P2 M1 .\nM0 P2 M2 .\nM3 P0 M1 .\nM3 P0 M2 .\nM3 P1 M1 .\nM3 P1 M2 .\nM3 P2 M1 .\nM3 P2 M2\n}",
        "recursionDepth": 34,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q20729238 wdt:P1040 wd:Q562108 .\nwd:Q20729238 wdt:P1040 wd:Q35979475 .\nwd:Q20729238 wdt:P162|wdt:P272 wd:Q562108 .\nwd:Q20729238 wdt:P162|wdt:P272 wd:Q35979475 .\nwd:Q20729238 wdt:P58 wd:Q562108 .\nwd:Q20729238 wdt:P58 wd:Q35979475 .\nwd:Q20729551 wdt:P1040 wd:Q562108 .\nwd:Q20729551 wdt:P1040 wd:Q35979475 .\nwd:Q20729551 wdt:P162|wdt:P272 wd:Q562108 .\nwd:Q20729551 wdt:P162|wdt:P272 wd:Q35979475 .\nwd:Q20729551 wdt:P58 wd:Q562108 .\nwd:Q20729551 wdt:P58 wd:Q35979475\n}",
        "questionWithBrackets": "Were [Motion picture] and [Stop for Bud] produced by , written by , and edited by [J\u00f8rgen Leth] and [Ole John]"
    },
    {
        "questionIdx": 121974,
        "questionPatternModEntities": "Were M0 and M3 produced by , edited by , and directed by M1 and M2",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P1 M1 .\nM0 P1 M2 .\nM0 P2 M1 .\nM0 P2 M2 .\nM3 P0 M1 .\nM3 P0 M2 .\nM3 P1 M1 .\nM3 P1 M2 .\nM3 P2 M1 .\nM3 P2 M2\n}",
        "recursionDepth": 34,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q20729238 wdt:P57 wd:Q562108 .\nwd:Q20729238 wdt:P57 wd:Q35979475 .\nwd:Q20729238 wdt:P1040 wd:Q562108 .\nwd:Q20729238 wdt:P1040 wd:Q35979475 .\nwd:Q20729238 wdt:P162|wdt:P272 wd:Q562108 .\nwd:Q20729238 wdt:P162|wdt:P272 wd:Q35979475 .\nwd:Q20729551 wdt:P57 wd:Q562108 .\nwd:Q20729551 wdt:P57 wd:Q35979475 .\nwd:Q20729551 wdt:P1040 wd:Q562108 .\nwd:Q20729551 wdt:P1040 wd:Q35979475 .\nwd:Q20729551 wdt:P162|wdt:P272 wd:Q562108 .\nwd:Q20729551 wdt:P162|wdt:P272 wd:Q35979475\n}",
        "questionWithBrackets": "Were [Motion picture] and [Stop for Bud] produced by , edited by , and directed by [Ole John] and [J\u00f8rgen Leth]"
    },
    {
        "questionIdx": 122007,
        "questionPatternModEntities": "Were M0 and M2 written and directed by M1",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1 .\nM2 P0 M1 .\nM2 P1 M1\n}",
        "recursionDepth": 23,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q1024400 wdt:P57 wd:Q633 .\nwd:Q1024400 wdt:P58 wd:Q633 .\nwd:Q5937209 wdt:P57 wd:Q633 .\nwd:Q5937209 wdt:P58 wd:Q633\n}",
        "questionWithBrackets": "Were [CSNY/D\u00e9j\u00e0 Vu] and [Human Highway] written and directed by [Neil Young]"
    },
    {
        "questionIdx": 122022,
        "questionPatternModEntities": "Were M2 and M5 founded by M3 and M4 and founded by a British spouse of M1",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by [entity] and [entity] and [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M1 ) .\nM2 P2 ?x0 .\nM2 P2 M3 .\nM2 P2 M4 .\nM5 P2 ?x0 .\nM5 P2 M3 .\nM5 P2 M4\n}",
        "recursionDepth": 42,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P27 wd:Q145 .\n?x0 wdt:P26 wd:Q13564310 .\nFILTER ( ?x0 != wd:Q13564310 ) .\nwd:Q53576555 wdt:P112 ?x0 .\nwd:Q53576555 wdt:P112 wd:Q181 .\nwd:Q53576555 wdt:P112 wd:Q219533 .\nwd:Q17459 wdt:P112 ?x0 .\nwd:Q17459 wdt:P112 wd:Q181 .\nwd:Q17459 wdt:P112 wd:Q219533\n}",
        "questionWithBrackets": "Were [Fandom] and [Community Central] founded by [Jimmy Wales] and [Angela Beesley Starling] and founded by a British spouse of [Kate Garvey]"
    },
    {
        "questionIdx": 122034,
        "questionPatternModEntities": "Were M0 , M3 , and M4 directed by , written by , and edited by M1 and M2",
        "questionTemplate": "Were [entity] , [entity] , and [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P1 M1 .\nM0 P1 M2 .\nM0 P2 M1 .\nM0 P2 M2 .\nM3 P0 M1 .\nM3 P0 M2 .\nM3 P1 M1 .\nM3 P1 M2 .\nM3 P2 M1 .\nM3 P2 M2 .\nM4 P0 M1 .\nM4 P0 M2 .\nM4 P1 M1 .\nM4 P1 M2 .\nM4 P2 M1 .\nM4 P2 M2\n}",
        "recursionDepth": 37,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q20729238 wdt:P57 wd:Q562108 .\nwd:Q20729238 wdt:P57 wd:Q35979475 .\nwd:Q20729238 wdt:P1040 wd:Q562108 .\nwd:Q20729238 wdt:P1040 wd:Q35979475 .\nwd:Q20729238 wdt:P58 wd:Q562108 .\nwd:Q20729238 wdt:P58 wd:Q35979475 .\nwd:Q20729551 wdt:P57 wd:Q562108 .\nwd:Q20729551 wdt:P57 wd:Q35979475 .\nwd:Q20729551 wdt:P1040 wd:Q562108 .\nwd:Q20729551 wdt:P1040 wd:Q35979475 .\nwd:Q20729551 wdt:P58 wd:Q562108 .\nwd:Q20729551 wdt:P58 wd:Q35979475 .\nwd:Q20757119 wdt:P57 wd:Q562108 .\nwd:Q20757119 wdt:P57 wd:Q35979475 .\nwd:Q20757119 wdt:P1040 wd:Q562108 .\nwd:Q20757119 wdt:P1040 wd:Q35979475 .\nwd:Q20757119 wdt:P58 wd:Q562108 .\nwd:Q20757119 wdt:P58 wd:Q35979475\n}",
        "questionWithBrackets": "Were [Stop for Bud] , [No label defined] , and [Motion picture] directed by , written by , and edited by [J\u00f8rgen Leth] and [Ole John]"
    },
    {
        "questionIdx": 122041,
        "questionPatternModEntities": "Were M0 , M2 , and M3 written by , produced by , directed by , executive produced by , and edited by M1",
        "questionTemplate": "Were [entity] , [entity] , and [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1 .\nM0 P2 M1 .\nM0 P3 M1 .\nM0 P4 M1 .\nM2 P0 M1 .\nM2 P1 M1 .\nM2 P2 M1 .\nM2 P3 M1 .\nM2 P4 M1 .\nM3 P0 M1 .\nM3 P1 M1 .\nM3 P2 M1 .\nM3 P3 M1 .\nM3 P4 M1\n}",
        "recursionDepth": 46,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q5437360 wdt:P57 wd:Q187261 .\nwd:Q5437360 wdt:P1040 wd:Q187261 .\nwd:Q5437360 wdt:P1431 wd:Q187261 .\nwd:Q5437360 wdt:P162|wdt:P272 wd:Q187261 .\nwd:Q5437360 wdt:P58 wd:Q187261 .\nwd:Q6084069 wdt:P57 wd:Q187261 .\nwd:Q6084069 wdt:P1040 wd:Q187261 .\nwd:Q6084069 wdt:P1431 wd:Q187261 .\nwd:Q6084069 wdt:P162|wdt:P272 wd:Q187261 .\nwd:Q6084069 wdt:P58 wd:Q187261 .\nwd:Q12813010 wdt:P57 wd:Q187261 .\nwd:Q12813010 wdt:P1040 wd:Q187261 .\nwd:Q12813010 wdt:P1431 wd:Q187261 .\nwd:Q12813010 wdt:P162|wdt:P272 wd:Q187261 .\nwd:Q12813010 wdt:P58 wd:Q187261\n}",
        "questionWithBrackets": "Were [The Waiting Room] , [The Confession] , and [Fate] written by , produced by , directed by , executive produced by , and edited by [Zeki Demirkubuz]"
    },
    {
        "questionIdx": 122094,
        "questionPatternModEntities": "Were M2 and M3 edited by and directed by M1 's American spouse 's sibling",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by and [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x1 P1 M0 .\n?x1 P2 M1 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x1 != M1 ) .\nM2 P3 ?x0 .\nM2 P4 ?x0 .\nM3 P3 ?x0 .\nM3 P4 ?x0\n}",
        "recursionDepth": 37,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P3373 ?x1 .\n?x1 wdt:P27 wd:Q30 .\n?x1 wdt:P26 wd:Q2975468 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x1 != wd:Q2975468 ) .\nwd:Q403176 wdt:P57 ?x0 .\nwd:Q403176 wdt:P1040 ?x0 .\nwd:Q508813 wdt:P57 ?x0 .\nwd:Q508813 wdt:P1040 ?x0\n}",
        "questionWithBrackets": "Were [A Romance of the Redwoods] and [Chimmie Fadden Out West] edited by and directed by [Clara Beranger] 's American spouse 's sibling"
    },
    {
        "questionIdx": 122095,
        "questionPatternModEntities": "Were M0 and M3 written and edited by M1 and M2",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P1 M1 .\nM0 P1 M2 .\nM3 P0 M1 .\nM3 P0 M2 .\nM3 P1 M1 .\nM3 P1 M2\n}",
        "recursionDepth": 27,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q20729238 wdt:P1040 wd:Q562108 .\nwd:Q20729238 wdt:P1040 wd:Q35979475 .\nwd:Q20729238 wdt:P58 wd:Q562108 .\nwd:Q20729238 wdt:P58 wd:Q35979475 .\nwd:Q20729551 wdt:P1040 wd:Q562108 .\nwd:Q20729551 wdt:P1040 wd:Q35979475 .\nwd:Q20729551 wdt:P58 wd:Q562108 .\nwd:Q20729551 wdt:P58 wd:Q35979475\n}",
        "questionWithBrackets": "Were [Stop for Bud] and [Motion picture] written and edited by [Ole John] and [J\u00f8rgen Leth]"
    },
    {
        "questionIdx": 122109,
        "questionPatternModEntities": "Were M0 and M3 edited , produced , and written by M1 and M2",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P1 M1 .\nM0 P1 M2 .\nM0 P2 M1 .\nM0 P2 M2 .\nM3 P0 M1 .\nM3 P0 M2 .\nM3 P1 M1 .\nM3 P1 M2 .\nM3 P2 M1 .\nM3 P2 M2\n}",
        "recursionDepth": 32,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q20729238 wdt:P1040 wd:Q562108 .\nwd:Q20729238 wdt:P1040 wd:Q35979475 .\nwd:Q20729238 wdt:P162|wdt:P272 wd:Q562108 .\nwd:Q20729238 wdt:P162|wdt:P272 wd:Q35979475 .\nwd:Q20729238 wdt:P58 wd:Q562108 .\nwd:Q20729238 wdt:P58 wd:Q35979475 .\nwd:Q20729551 wdt:P1040 wd:Q562108 .\nwd:Q20729551 wdt:P1040 wd:Q35979475 .\nwd:Q20729551 wdt:P162|wdt:P272 wd:Q562108 .\nwd:Q20729551 wdt:P162|wdt:P272 wd:Q35979475 .\nwd:Q20729551 wdt:P58 wd:Q562108 .\nwd:Q20729551 wdt:P58 wd:Q35979475\n}",
        "questionWithBrackets": "Were [Stop for Bud] and [Motion picture] edited , produced , and written by [J\u00f8rgen Leth] and [Ole John]"
    },
    {
        "questionIdx": 122111,
        "questionPatternModEntities": "Were M0 and M3 directed , edited , and produced by M1 and M2",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P1 M1 .\nM0 P1 M2 .\nM0 P2 M1 .\nM0 P2 M2 .\nM3 P0 M1 .\nM3 P0 M2 .\nM3 P1 M1 .\nM3 P1 M2 .\nM3 P2 M1 .\nM3 P2 M2\n}",
        "recursionDepth": 32,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q20729238 wdt:P57 wd:Q562108 .\nwd:Q20729238 wdt:P57 wd:Q35979475 .\nwd:Q20729238 wdt:P1040 wd:Q562108 .\nwd:Q20729238 wdt:P1040 wd:Q35979475 .\nwd:Q20729238 wdt:P162|wdt:P272 wd:Q562108 .\nwd:Q20729238 wdt:P162|wdt:P272 wd:Q35979475 .\nwd:Q20729551 wdt:P57 wd:Q562108 .\nwd:Q20729551 wdt:P57 wd:Q35979475 .\nwd:Q20729551 wdt:P1040 wd:Q562108 .\nwd:Q20729551 wdt:P1040 wd:Q35979475 .\nwd:Q20729551 wdt:P162|wdt:P272 wd:Q562108 .\nwd:Q20729551 wdt:P162|wdt:P272 wd:Q35979475\n}",
        "questionWithBrackets": "Were [Motion picture] and [Stop for Bud] directed , edited , and produced by [Ole John] and [J\u00f8rgen Leth]"
    },
    {
        "questionIdx": 122116,
        "questionPatternModEntities": "Were M0 , M5 , M6 , and M7 executive produced by M1 and M2 , directed by M4 , and written by M3",
        "questionTemplate": "Were [entity] , [entity] , [entity] , and [entity] [VP_SIMPLE] by [entity] and [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P1 M3 .\nM0 P2 M4 .\nM5 P0 M1 .\nM5 P0 M2 .\nM5 P1 M3 .\nM5 P2 M4 .\nM6 P0 M1 .\nM6 P0 M2 .\nM6 P1 M3 .\nM6 P2 M4 .\nM7 P0 M1 .\nM7 P0 M2 .\nM7 P1 M3 .\nM7 P2 M4\n}",
        "recursionDepth": 47,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q46717 wdt:P57 wd:Q295463 .\nwd:Q46717 wdt:P1431 wd:Q24809564 .\nwd:Q46717 wdt:P1431 wd:Q24809566 .\nwd:Q46717 wdt:P58 wd:Q942914 .\nwd:Q548919 wdt:P57 wd:Q295463 .\nwd:Q548919 wdt:P1431 wd:Q24809564 .\nwd:Q548919 wdt:P1431 wd:Q24809566 .\nwd:Q548919 wdt:P58 wd:Q942914 .\nwd:Q161087 wdt:P57 wd:Q295463 .\nwd:Q161087 wdt:P1431 wd:Q24809564 .\nwd:Q161087 wdt:P1431 wd:Q24809566 .\nwd:Q161087 wdt:P58 wd:Q942914 .\nwd:Q54274 wdt:P57 wd:Q295463 .\nwd:Q54274 wdt:P1431 wd:Q24809564 .\nwd:Q54274 wdt:P1431 wd:Q24809566 .\nwd:Q54274 wdt:P58 wd:Q942914\n}",
        "questionWithBrackets": "Were [Pirates of the Caribbean: Dead Man's Chest] , [Pirates of the Caribbean: The Curse of the Black Pearl] , [Pirates of the Caribbean: At World's End] , and [The Lone Ranger] executive produced by [Mike Stenson] and [Chad Oman] , directed by [Gore Verbinski] , and written by [Terry Rossio]"
    },
    {
        "questionIdx": 122151,
        "questionPatternModEntities": "Were M2 and M3 founded by a Chinese sibling of M1 's employee",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x0 P1 M0 .\n?x1 P2 M1 .\nFILTER ( ?x0 != ?x1 ) .\nM2 P3 ?x0 .\nM3 P3 ?x0\n}",
        "recursionDepth": 31,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P27 wd:Q148 .\n?x0 wdt:P3373 ?x1 .\n?x1 wdt:P108 wd:Q6608367 .\nFILTER ( ?x0 != ?x1 ) .\nwd:Q2199642 wdt:P112 ?x0 .\nwd:Q3075714 wdt:P112 ?x0\n}",
        "questionWithBrackets": "Were [Foundation for Universal Responsibility of His Holiness the Dalai Lama] and [Norbulingka Institute] founded by a Chinese sibling of [Indiana University] 's employee"
    },
    {
        "questionIdx": 122164,
        "questionPatternModEntities": "Were M1 , M2 , M3 , and M4 founded by M0 's spouse",
        "questionTemplate": "Were [entity] , [entity] , [entity] , and [entity] [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nM1 P1 ?x0 .\nM2 P1 ?x0 .\nM3 P1 ?x0 .\nM4 P1 ?x0\n}",
        "recursionDepth": 26,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P26 wd:Q13564310 .\nFILTER ( ?x0 != wd:Q13564310 ) .\nwd:Q52 wdt:P112 ?x0 .\nwd:Q180 wdt:P112 ?x0 .\nwd:Q15735628 wdt:P112 ?x0 .\nwd:Q151 wdt:P112 ?x0\n}",
        "questionWithBrackets": "Were [Wikimedia Foundation Board of Trustees] , [Wikipedia] , [Wiktionary] , and [Wikimedia Foundation] founded by [Kate Garvey] 's spouse"
    },
    {
        "questionIdx": 122165,
        "questionPatternModEntities": "Were M1 , M2 , M3 , M4 , M5 , and M6 founded by M0 's parent",
        "questionTemplate": "Were [entity] , [entity] , [entity] , [entity] , [entity] , and [entity] [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 ?x0 .\nM2 P1 ?x0 .\nM3 P1 ?x0 .\nM4 P1 ?x0 .\nM5 P1 ?x0 .\nM6 P1 ?x0\n}",
        "recursionDepth": 32,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q106204654 .\nwd:Q846672 wdt:P112 ?x0 .\nwd:Q565 wdt:P112 ?x0 .\nwd:Q151 wdt:P112 ?x0 .\nwd:Q21281283 wdt:P112 ?x0 .\nwd:Q29188397 wdt:P112 ?x0 .\nwd:Q367 wdt:P112 ?x0\n}",
        "questionWithBrackets": "Were [Russian Wikinews] , [Wiktionary] , [Wikimedia Commons] , [Initiative for Open Citations] , [Wikibooks] , and [Wikimedia Incubator] founded by [Wikimedia, LLC] 's parent"
    },
    {
        "questionIdx": 122166,
        "questionPatternModEntities": "Were M1 , M2 , M3 , M4 , and M5 founded by a parent of M0",
        "questionTemplate": "Were [entity] , [entity] , [entity] , [entity] , and [entity] [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 ?x0 .\nM2 P1 ?x0 .\nM3 P1 ?x0 .\nM4 P1 ?x0 .\nM5 P1 ?x0\n}",
        "recursionDepth": 31,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q106204654 .\nwd:Q29188397 wdt:P112 ?x0 .\nwd:Q846672 wdt:P112 ?x0 .\nwd:Q367 wdt:P112 ?x0 .\nwd:Q151 wdt:P112 ?x0 .\nwd:Q565 wdt:P112 ?x0\n}",
        "questionWithBrackets": "Were [Wiktionary] , [Initiative for Open Citations] , [Wikibooks] , [Wikimedia Commons] , and [Wikimedia Incubator] founded by a parent of [Wikimedia, LLC]"
    },
    {
        "questionIdx": 122167,
        "questionPatternModEntities": "Were M1 , M2 , M3 , M4 , and M5 founded by a sibling of M0",
        "questionTemplate": "Were [entity] , [entity] , [entity] , [entity] , and [entity] [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nM1 P1 ?x0 .\nM2 P1 ?x0 .\nM3 P1 ?x0 .\nM4 P1 ?x0 .\nM5 P1 ?x0\n}",
        "recursionDepth": 31,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P3373 wd:Q151098 .\nFILTER ( ?x0 != wd:Q151098 ) .\nwd:Q3551587 wdt:P112 ?x0 .\nwd:Q672416 wdt:P112 ?x0 .\nwd:Q769657 wdt:P112 ?x0 .\nwd:Q3086934 wdt:P112 ?x0 .\nwd:Q163700 wdt:P112 ?x0\n}",
        "questionWithBrackets": "Were [Conseil d'Etat] , [Mus\u00e9e des Beaux-Arts de Rouen] , [Scuola Normale Superiore] , [Legion of Honour] , and [University of France] founded by a sibling of [Lucien Bonaparte]"
    },
    {
        "questionIdx": 122170,
        "questionPatternModEntities": "Were M0 and M3 directed by M1 and directed by M2",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by [entity] and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM3 P0 M1 .\nM3 P0 M2\n}",
        "recursionDepth": 27,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q16243658 wdt:P57 wd:Q1203 .\nwd:Q16243658 wdt:P57 wd:Q117012 .\nwd:Q3421626 wdt:P57 wd:Q1203 .\nwd:Q3421626 wdt:P57 wd:Q117012\n}",
        "questionWithBrackets": "Were [Imagine] and [Bed Peace] directed by [Yoko Ono] and directed by [John Lennon]"
    },
    {
        "questionIdx": 122176,
        "questionPatternModEntities": "Were M0 and M3 written by and directed by M1 and M2",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P1 M1 .\nM0 P1 M2 .\nM3 P0 M1 .\nM3 P0 M2 .\nM3 P1 M1 .\nM3 P1 M2\n}",
        "recursionDepth": 28,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q1137372 wdt:P57 wd:Q3772 .\nwd:Q1137372 wdt:P57 wd:Q47284 .\nwd:Q1137372 wdt:P58 wd:Q3772 .\nwd:Q1137372 wdt:P58 wd:Q47284 .\nwd:Q679023 wdt:P57 wd:Q3772 .\nwd:Q679023 wdt:P57 wd:Q47284 .\nwd:Q679023 wdt:P58 wd:Q3772 .\nwd:Q679023 wdt:P58 wd:Q47284\n}",
        "questionWithBrackets": "Were [Four Rooms] and [Grindhouse] written by and directed by [Robert Rodriguez] and [Quentin Tarantino]"
    },
    {
        "questionIdx": 122177,
        "questionPatternModEntities": "Were M2 and M5 written by M1 's British spouse 's spouse , written by M3 , and produced by M4",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] 's [ROLE_SIMPLE] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x1 P0 M1 .\n?x1 P1 M0 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x1 != M1 ) .\nM2 P2 ?x0 .\nM2 P2 M3 .\nM2 P3 M4 .\nM5 P2 ?x0 .\nM5 P2 M3 .\nM5 P3 M4\n}",
        "recursionDepth": 49,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P26 ?x1 .\n?x1 wdt:P27 wd:Q145 .\n?x1 wdt:P26 wd:Q32661 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x1 != wd:Q32661 ) .\nwd:Q61633664 wdt:P162|wdt:P272 wd:Q434841 .\nwd:Q61633664 wdt:P58 ?x0 .\nwd:Q61633664 wdt:P58 wd:Q2593 .\nwd:Q15068238 wdt:P162|wdt:P272 wd:Q434841 .\nwd:Q15068238 wdt:P58 ?x0 .\nwd:Q15068238 wdt:P58 wd:Q2593\n}",
        "questionWithBrackets": "Were [Kingsman: The Secret Service] and [The King's Man] written by [Jane Goldman] 's British spouse 's spouse , written by [Matthew Vaughn] , and produced by [20th Century Studios]"
    },
    {
        "questionIdx": 122196,
        "questionPatternModEntities": "Were M0 , M2 , M3 , and M4 written by , executive produced by , and produced by M1",
        "questionTemplate": "Were [entity] , [entity] , [entity] , and [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1 .\nM0 P2 M1 .\nM2 P0 M1 .\nM2 P1 M1 .\nM2 P2 M1 .\nM3 P0 M1 .\nM3 P1 M1 .\nM3 P2 M1 .\nM4 P0 M1 .\nM4 P1 M1 .\nM4 P2 M1\n}",
        "recursionDepth": 37,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q483197 wdt:P1431 wd:Q212990 .\nwd:Q483197 wdt:P162|wdt:P272 wd:Q212990 .\nwd:Q483197 wdt:P58 wd:Q212990 .\nwd:Q16159554 wdt:P1431 wd:Q212990 .\nwd:Q16159554 wdt:P162|wdt:P272 wd:Q212990 .\nwd:Q16159554 wdt:P58 wd:Q212990 .\nwd:Q484679 wdt:P1431 wd:Q212990 .\nwd:Q484679 wdt:P162|wdt:P272 wd:Q212990 .\nwd:Q484679 wdt:P58 wd:Q212990 .\nwd:Q13471372 wdt:P1431 wd:Q212990 .\nwd:Q13471372 wdt:P162|wdt:P272 wd:Q212990 .\nwd:Q13471372 wdt:P58 wd:Q212990\n}",
        "questionWithBrackets": "Were [Piet\u00e0] , [Dream] , [Red Family] , and [Moebius] written by , executive produced by , and produced by [Kim Ki-duk]"
    },
    {
        "questionIdx": 122202,
        "questionPatternModEntities": "Were M0 , M2 , and M3 executive produced by , produced by , edited by , written by , and directed by M1",
        "questionTemplate": "Were [entity] , [entity] , and [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1 .\nM0 P2 M1 .\nM0 P3 M1 .\nM0 P4 M1 .\nM2 P0 M1 .\nM2 P1 M1 .\nM2 P2 M1 .\nM2 P3 M1 .\nM2 P4 M1 .\nM3 P0 M1 .\nM3 P1 M1 .\nM3 P2 M1 .\nM3 P3 M1 .\nM3 P4 M1\n}",
        "recursionDepth": 46,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q6084069 wdt:P57 wd:Q187261 .\nwd:Q6084069 wdt:P1040 wd:Q187261 .\nwd:Q6084069 wdt:P1431 wd:Q187261 .\nwd:Q6084069 wdt:P162|wdt:P272 wd:Q187261 .\nwd:Q6084069 wdt:P58 wd:Q187261 .\nwd:Q12813010 wdt:P57 wd:Q187261 .\nwd:Q12813010 wdt:P1040 wd:Q187261 .\nwd:Q12813010 wdt:P1431 wd:Q187261 .\nwd:Q12813010 wdt:P162|wdt:P272 wd:Q187261 .\nwd:Q12813010 wdt:P58 wd:Q187261 .\nwd:Q5437360 wdt:P57 wd:Q187261 .\nwd:Q5437360 wdt:P1040 wd:Q187261 .\nwd:Q5437360 wdt:P1431 wd:Q187261 .\nwd:Q5437360 wdt:P162|wdt:P272 wd:Q187261 .\nwd:Q5437360 wdt:P58 wd:Q187261\n}",
        "questionWithBrackets": "Were [The Confession] , [Fate] , and [The Waiting Room] executive produced by , produced by , edited by , written by , and directed by [Zeki Demirkubuz]"
    },
    {
        "questionIdx": 122233,
        "questionPatternModEntities": "Were M1 , M4 , M5 , and M6 written by M2 , written by M3 , and written by a employee of M0",
        "questionTemplate": "Were [entity] , [entity] , [entity] , and [entity] [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 ?x0 .\nM1 P1 M2 .\nM1 P1 M3 .\nM4 P1 ?x0 .\nM4 P1 M2 .\nM4 P1 M3 .\nM5 P1 ?x0 .\nM5 P1 M2 .\nM5 P1 M3 .\nM6 P1 ?x0 .\nM6 P1 M2 .\nM6 P1 M3\n}",
        "recursionDepth": 48,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P108 wd:Q141336 .\nwd:Q925852 wdt:P58 ?x0 .\nwd:Q925852 wdt:P58 wd:Q853 .\nwd:Q925852 wdt:P58 wd:Q55208 .\nwd:Q503046 wdt:P58 ?x0 .\nwd:Q503046 wdt:P58 wd:Q853 .\nwd:Q503046 wdt:P58 wd:Q55208 .\nwd:Q4230746 wdt:P58 ?x0 .\nwd:Q4230746 wdt:P58 wd:Q853 .\nwd:Q4230746 wdt:P58 wd:Q55208 .\nwd:Q147878 wdt:P58 ?x0 .\nwd:Q147878 wdt:P58 wd:Q853 .\nwd:Q147878 wdt:P58 wd:Q55208\n}",
        "questionWithBrackets": "Were [Andrei Rublev] , [Ivan's Childhood] , [The Steamroller and the Violin] , and [No label defined] written by [Andrei Konchalovsky] , written by [Andrei Tarkovsky] , and written by a employee of [Mosfilm]"
    },
    {
        "questionIdx": 122249,
        "questionPatternModEntities": "Were M0 and M2 written , edited , and produced by M1",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1 .\nM0 P2 M1 .\nM2 P0 M1 .\nM2 P1 M1 .\nM2 P2 M1\n}",
        "recursionDepth": 28,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q1070468 wdt:P1040 wd:Q882 .\nwd:Q1070468 wdt:P162|wdt:P272 wd:Q882 .\nwd:Q1070468 wdt:P58 wd:Q882 .\nwd:Q45602 wdt:P1040 wd:Q882 .\nwd:Q45602 wdt:P162|wdt:P272 wd:Q882 .\nwd:Q45602 wdt:P58 wd:Q882\n}",
        "questionWithBrackets": "Were [Modern Times] and [The Immigrant] written , edited , and produced by [Charlie Chaplin]"
    },
    {
        "questionIdx": 122283,
        "questionPatternModEntities": "Were M3 and M4 founded by a female employee of M0 and M1",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P1 M2 .\nM3 P2 ?x0 .\nM4 P2 ?x0\n}",
        "recursionDepth": 31,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P108 wd:Q380 .\n?x0 wdt:P108 wd:Q95 .\n?x0 wdt:P21 wd:Q6581072 .\nwd:Q39089659 wdt:P112 ?x0 .\nwd:Q1134375 wdt:P112 ?x0\n}",
        "questionWithBrackets": "Were [Pixel Qi] and [Openwater] founded by a female employee of [Facebook, Inc.] and [Google]"
    },
    {
        "questionIdx": 122319,
        "questionPatternModEntities": "Were M1 and M2 written by M0 's sibling",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nM1 P1 ?x0 .\nM2 P1 ?x0\n}",
        "recursionDepth": 20,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P3373 wd:Q606780 .\nFILTER ( ?x0 != wd:Q606780 ) .\nwd:Q2291409 wdt:P58 ?x0 .\nwd:Q45602 wdt:P58 ?x0\n}",
        "questionWithBrackets": "Were [The Bank] and [Modern Times] written by [Sydney Chaplin] 's sibling"
    },
    {
        "questionIdx": 122326,
        "questionPatternModEntities": "Were M3 and M4 directed by M2 's American female spouse",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P2 M2 .\nFILTER ( ?x0 != M2 ) .\nM3 P3 ?x0 .\nM4 P3 ?x0\n}",
        "recursionDepth": 30,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P21 wd:Q6581072 .\n?x0 wdt:P27 wd:Q30 .\n?x0 wdt:P26 wd:Q192990 .\nFILTER ( ?x0 != wd:Q192990 ) .\nwd:Q946478 wdt:P57 ?x0 .\nwd:Q1235550 wdt:P57 ?x0\n}",
        "questionWithBrackets": "Were [Filth and Wisdom] and [W.E.] directed by [Guy Ritchie] 's American female spouse"
    },
    {
        "questionIdx": 122330,
        "questionPatternModEntities": "Were M1 , M2 , M3 , and M4 written by M0 's sibling 's sibling",
        "questionTemplate": "Were [entity] , [entity] , [entity] , and [entity] [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x1 P0 M0 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x1 != M0 ) .\nM1 P1 ?x0 .\nM2 P1 ?x0 .\nM3 P1 ?x0 .\nM4 P1 ?x0\n}",
        "recursionDepth": 30,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P3373 ?x1 .\n?x1 wdt:P3373 wd:Q535 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x1 != wd:Q535 ) .\nwd:Q19800856 wdt:P58 ?x0 .\nwd:Q17030062 wdt:P58 ?x0 .\nwd:Q3233880 wdt:P58 ?x0 .\nwd:Q3431961 wdt:P58 ?x0\n}",
        "questionWithBrackets": "Were [The Tyrant of Padua] , [Rigoletto] , [No label defined] , and [Rigoletto] written by [Victor Hugo] 's sibling 's sibling"
    },
    {
        "questionIdx": 122334,
        "questionPatternModEntities": "Were M2 , M4 , M5 , M6 , and M7 executive produced by a Chinese employee of M0 and executive produced by M3",
        "questionTemplate": "Were [entity] , [entity] , [entity] , [entity] , and [entity] [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nM2 P2 ?x0 .\nM2 P2 M3 .\nM4 P2 ?x0 .\nM4 P2 M3 .\nM5 P2 ?x0 .\nM5 P2 M3 .\nM6 P2 ?x0 .\nM6 P2 M3 .\nM7 P2 ?x0 .\nM7 P2 M3\n}",
        "recursionDepth": 49,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P108 wd:Q740308 .\n?x0 wdt:P27 wd:Q148 .\nwd:Q1152485 wdt:P1431 ?x0 .\nwd:Q1152485 wdt:P1431 wd:Q36970 .\nwd:Q1198110 wdt:P1431 ?x0 .\nwd:Q1198110 wdt:P1431 wd:Q36970 .\nwd:Q156519 wdt:P1431 ?x0 .\nwd:Q156519 wdt:P1431 wd:Q36970 .\nwd:Q206182 wdt:P1431 ?x0 .\nwd:Q206182 wdt:P1431 wd:Q36970 .\nwd:Q863762 wdt:P1431 ?x0 .\nwd:Q863762 wdt:P1431 wd:Q36970\n}",
        "questionWithBrackets": "Were [1911] , [New Police Story] , [Around the World in 80 Days] , [Shinjuku Incident] , and [Thunderbolt] executive produced by a Chinese employee of [UNICEF] and executive produced by [Jackie Chan]"
    },
    {
        "questionIdx": 122336,
        "questionPatternModEntities": "Were M2 and M5 produced by a Chinese sibling of M0 and directed by M3 and M4",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M0 ) .\nM2 P2 ?x0 .\nM2 P3 M3 .\nM2 P3 M4 .\nM5 P2 ?x0 .\nM5 P3 M3 .\nM5 P3 M4\n}",
        "recursionDepth": 42,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P27 wd:Q148 .\n?x0 wdt:P3373 wd:Q699415 .\nFILTER ( ?x0 != wd:Q699415 ) .\nwd:Q1055695 wdt:P57 wd:Q5442170 .\nwd:Q1055695 wdt:P57 wd:Q4707232 .\nwd:Q1055695 wdt:P162|wdt:P272 ?x0 .\nwd:Q15903116 wdt:P57 wd:Q5442170 .\nwd:Q15903116 wdt:P57 wd:Q4707232 .\nwd:Q15903116 wdt:P162|wdt:P272 ?x0\n}",
        "questionWithBrackets": "Were [Overheard] and [Overheard 3] produced by a Chinese sibling of [Paul Chun] and directed by [Alan Mak] and [Felix Chong]"
    },
    {
        "questionIdx": 122339,
        "questionPatternModEntities": "Were M0 , M2 , and M3 edited by , executive produced by , written by , directed by , and produced by M1",
        "questionTemplate": "Were [entity] , [entity] , and [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1 .\nM0 P2 M1 .\nM0 P3 M1 .\nM0 P4 M1 .\nM2 P0 M1 .\nM2 P1 M1 .\nM2 P2 M1 .\nM2 P3 M1 .\nM2 P4 M1 .\nM3 P0 M1 .\nM3 P1 M1 .\nM3 P2 M1 .\nM3 P3 M1 .\nM3 P4 M1\n}",
        "recursionDepth": 46,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q6084069 wdt:P57 wd:Q187261 .\nwd:Q6084069 wdt:P1040 wd:Q187261 .\nwd:Q6084069 wdt:P1431 wd:Q187261 .\nwd:Q6084069 wdt:P162|wdt:P272 wd:Q187261 .\nwd:Q6084069 wdt:P58 wd:Q187261 .\nwd:Q12813010 wdt:P57 wd:Q187261 .\nwd:Q12813010 wdt:P1040 wd:Q187261 .\nwd:Q12813010 wdt:P1431 wd:Q187261 .\nwd:Q12813010 wdt:P162|wdt:P272 wd:Q187261 .\nwd:Q12813010 wdt:P58 wd:Q187261 .\nwd:Q5437360 wdt:P57 wd:Q187261 .\nwd:Q5437360 wdt:P1040 wd:Q187261 .\nwd:Q5437360 wdt:P1431 wd:Q187261 .\nwd:Q5437360 wdt:P162|wdt:P272 wd:Q187261 .\nwd:Q5437360 wdt:P58 wd:Q187261\n}",
        "questionWithBrackets": "Were [The Confession] , [The Waiting Room] , and [Fate] edited by , executive produced by , written by , directed by , and produced by [Zeki Demirkubuz]"
    },
    {
        "questionIdx": 122372,
        "questionPatternModEntities": "Were M1 , M2 , M3 , M4 , M5 , and M6 directed by and written by M0 's spouse",
        "questionTemplate": "Were [entity] , [entity] , [entity] , [entity] , [entity] , and [entity] [VP_SIMPLE] by and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nM1 P1 ?x0 .\nM1 P2 ?x0 .\nM2 P1 ?x0 .\nM2 P2 ?x0 .\nM3 P1 ?x0 .\nM3 P2 ?x0 .\nM4 P1 ?x0 .\nM4 P2 ?x0 .\nM5 P1 ?x0 .\nM5 P2 ?x0 .\nM6 P1 ?x0 .\nM6 P2 ?x0\n}",
        "recursionDepth": 40,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P26 wd:Q137808 .\nFILTER ( ?x0 != wd:Q137808 ) .\nwd:Q1140317 wdt:P57 ?x0 .\nwd:Q1140317 wdt:P58 ?x0 .\nwd:Q166739 wdt:P57 ?x0 .\nwd:Q166739 wdt:P58 ?x0 .\nwd:Q199039 wdt:P57 ?x0 .\nwd:Q199039 wdt:P58 ?x0 .\nwd:Q45602 wdt:P57 ?x0 .\nwd:Q45602 wdt:P58 ?x0 .\nwd:Q109116 wdt:P57 ?x0 .\nwd:Q109116 wdt:P58 ?x0 .\nwd:Q238211 wdt:P57 ?x0 .\nwd:Q238211 wdt:P58 ?x0\n}",
        "questionWithBrackets": "Were [Pay Day] , [The Floorwalker] , [Shoulder Arms] , [City Lights] , [The Great Dictator] , and [Modern Times] directed by and written by [Oona O'Neill] 's spouse"
    },
    {
        "questionIdx": 122375,
        "questionPatternModEntities": "Were M2 , M5 , M6 , and M7 edited by M3 and M4 and written by M1 's male spouse",
        "questionTemplate": "Were [entity] , [entity] , [entity] , and [entity] [VP_SIMPLE] by [entity] and [entity] and [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M1 ) .\nM2 P2 ?x0 .\nM2 P3 M3 .\nM2 P3 M4 .\nM5 P2 ?x0 .\nM5 P3 M3 .\nM5 P3 M4 .\nM6 P2 ?x0 .\nM6 P3 M3 .\nM6 P3 M4 .\nM7 P2 ?x0 .\nM7 P3 M3 .\nM7 P3 M4\n}",
        "recursionDepth": 46,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P21 wd:Q6581097 .\n?x0 wdt:P26 wd:Q70294 .\nFILTER ( ?x0 != wd:Q70294 ) .\nwd:Q699490 wdt:P1040 wd:Q44426 .\nwd:Q699490 wdt:P1040 wd:Q98665 .\nwd:Q699490 wdt:P58 ?x0 .\nwd:Q570483 wdt:P1040 wd:Q44426 .\nwd:Q570483 wdt:P1040 wd:Q98665 .\nwd:Q570483 wdt:P58 ?x0 .\nwd:Q686125 wdt:P1040 wd:Q44426 .\nwd:Q686125 wdt:P1040 wd:Q98665 .\nwd:Q686125 wdt:P58 ?x0 .\nwd:Q3208713 wdt:P1040 wd:Q44426 .\nwd:Q3208713 wdt:P1040 wd:Q98665 .\nwd:Q3208713 wdt:P58 ?x0\n}",
        "questionWithBrackets": "Were [In a Year of 13 Moons] , [The Marriage of Maria Braun] , [The Stationmaster's Wife] , and [Lili Marleen] edited by [Juliane Lorenz] and [Rainer Werner Fassbinder] and written by [Ingrid Caven] 's male spouse"
    },
    {
        "questionIdx": 122379,
        "questionPatternModEntities": "Were M0 , M2 , and M3 produced by , directed by , executive produced by , written by , and edited by M1",
        "questionTemplate": "Were [entity] , [entity] , and [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1 .\nM0 P2 M1 .\nM0 P3 M1 .\nM0 P4 M1 .\nM2 P0 M1 .\nM2 P1 M1 .\nM2 P2 M1 .\nM2 P3 M1 .\nM2 P4 M1 .\nM3 P0 M1 .\nM3 P1 M1 .\nM3 P2 M1 .\nM3 P3 M1 .\nM3 P4 M1\n}",
        "recursionDepth": 46,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q5437360 wdt:P57 wd:Q187261 .\nwd:Q5437360 wdt:P1040 wd:Q187261 .\nwd:Q5437360 wdt:P1431 wd:Q187261 .\nwd:Q5437360 wdt:P162|wdt:P272 wd:Q187261 .\nwd:Q5437360 wdt:P58 wd:Q187261 .\nwd:Q12813010 wdt:P57 wd:Q187261 .\nwd:Q12813010 wdt:P1040 wd:Q187261 .\nwd:Q12813010 wdt:P1431 wd:Q187261 .\nwd:Q12813010 wdt:P162|wdt:P272 wd:Q187261 .\nwd:Q12813010 wdt:P58 wd:Q187261 .\nwd:Q6084069 wdt:P57 wd:Q187261 .\nwd:Q6084069 wdt:P1040 wd:Q187261 .\nwd:Q6084069 wdt:P1431 wd:Q187261 .\nwd:Q6084069 wdt:P162|wdt:P272 wd:Q187261 .\nwd:Q6084069 wdt:P58 wd:Q187261\n}",
        "questionWithBrackets": "Were [The Confession] , [The Waiting Room] , and [Fate] produced by , directed by , executive produced by , written by , and edited by [Zeki Demirkubuz]"
    },
    {
        "questionIdx": 122389,
        "questionPatternModEntities": "Were M0 , M2 , and M3 written , executive produced , and produced by M1",
        "questionTemplate": "Were [entity] , [entity] , and [entity] [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1 .\nM0 P2 M1 .\nM2 P0 M1 .\nM2 P1 M1 .\nM2 P2 M1 .\nM3 P0 M1 .\nM3 P1 M1 .\nM3 P2 M1\n}",
        "recursionDepth": 32,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q17450 wdt:P1431 wd:Q444366 .\nwd:Q17450 wdt:P162|wdt:P272 wd:Q444366 .\nwd:Q17450 wdt:P58 wd:Q444366 .\nwd:Q623222 wdt:P1431 wd:Q444366 .\nwd:Q623222 wdt:P162|wdt:P272 wd:Q444366 .\nwd:Q623222 wdt:P58 wd:Q444366 .\nwd:Q20897314 wdt:P1431 wd:Q444366 .\nwd:Q20897314 wdt:P162|wdt:P272 wd:Q444366 .\nwd:Q20897314 wdt:P58 wd:Q444366\n}",
        "questionWithBrackets": "Were [iGo to Japan] , [Sam & Cat] , and [Game Shakers] written , executive produced , and produced by [Dan Schneider]"
    },
    {
        "questionIdx": 122402,
        "questionPatternModEntities": "Were M1 , M2 , M3 , M4 , and M5 directed by a sibling of M0",
        "questionTemplate": "Were [entity] , [entity] , [entity] , [entity] , and [entity] [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nM1 P1 ?x0 .\nM2 P1 ?x0 .\nM3 P1 ?x0 .\nM4 P1 ?x0 .\nM5 P1 ?x0\n}",
        "recursionDepth": 31,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P3373 wd:Q104373794 .\nFILTER ( ?x0 != wd:Q104373794 ) .\nwd:Q97501746 wdt:P57 ?x0 .\nwd:Q1144967 wdt:P57 ?x0 .\nwd:Q272608 wdt:P57 ?x0 .\nwd:Q289204 wdt:P57 ?x0 .\nwd:Q2085 wdt:P57 ?x0\n}",
        "questionWithBrackets": "Were [To Each His Own Cinema] , [Lost Highway] , [Mulholland Drive] , [Twin Peaks] , and [The Adventures of Alan R.] directed by a sibling of [Martha Lynch Levacy]"
    },
    {
        "questionIdx": 122404,
        "questionPatternModEntities": "Were M1 and M2 directed by M0 's spouse",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nM1 P1 ?x0 .\nM2 P1 ?x0\n}",
        "recursionDepth": 20,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P26 wd:Q241019 .\nFILTER ( ?x0 != wd:Q241019 ) .\nwd:Q2291409 wdt:P57 ?x0 .\nwd:Q45602 wdt:P57 ?x0\n}",
        "questionWithBrackets": "Were [The Bank] and [Modern Times] directed by [Mildred Harris] 's spouse"
    },
    {
        "questionIdx": 122414,
        "questionPatternModEntities": "Were M2 , M3 , M4 , M5 , M6 , and M7 founded by a French parent of M1",
        "questionTemplate": "Were [entity] , [entity] , [entity] , [entity] , [entity] , and [entity] [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nM2 P2 ?x0 .\nM3 P2 ?x0 .\nM4 P2 ?x0 .\nM5 P2 ?x0 .\nM6 P2 ?x0 .\nM7 P2 ?x0\n}",
        "recursionDepth": 39,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q7723 .\n?x0 wdt:P27 wd:Q142 .\nwd:Q1232190 wdt:P112 ?x0 .\nwd:Q112581 wdt:P112 ?x0 .\nwd:Q672416 wdt:P112 ?x0 .\nwd:Q163700 wdt:P112 ?x0 .\nwd:Q1132066 wdt:P112 ?x0 .\nwd:Q3086934 wdt:P112 ?x0\n}",
        "questionWithBrackets": "Were [Mus\u00e9e des Beaux-Arts de Rouen] , [Institut d'\u00c9gypte] , [Scuola Normale Superiore] , [\u00c9cole Sp\u00e9ciale Militaire de Saint-Cyr] , [Legion of Honour] , and [House of Bonaparte] founded by a French parent of [Napoleon II]"
    },
    {
        "questionIdx": 122429,
        "questionPatternModEntities": "Were M0 , M2 , and M3 executive produced by , produced by , directed by , written by , and edited by M1",
        "questionTemplate": "Were [entity] , [entity] , and [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1 .\nM0 P2 M1 .\nM0 P3 M1 .\nM0 P4 M1 .\nM2 P0 M1 .\nM2 P1 M1 .\nM2 P2 M1 .\nM2 P3 M1 .\nM2 P4 M1 .\nM3 P0 M1 .\nM3 P1 M1 .\nM3 P2 M1 .\nM3 P3 M1 .\nM3 P4 M1\n}",
        "recursionDepth": 46,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q5437360 wdt:P57 wd:Q187261 .\nwd:Q5437360 wdt:P1040 wd:Q187261 .\nwd:Q5437360 wdt:P1431 wd:Q187261 .\nwd:Q5437360 wdt:P162|wdt:P272 wd:Q187261 .\nwd:Q5437360 wdt:P58 wd:Q187261 .\nwd:Q6084069 wdt:P57 wd:Q187261 .\nwd:Q6084069 wdt:P1040 wd:Q187261 .\nwd:Q6084069 wdt:P1431 wd:Q187261 .\nwd:Q6084069 wdt:P162|wdt:P272 wd:Q187261 .\nwd:Q6084069 wdt:P58 wd:Q187261 .\nwd:Q12813010 wdt:P57 wd:Q187261 .\nwd:Q12813010 wdt:P1040 wd:Q187261 .\nwd:Q12813010 wdt:P1431 wd:Q187261 .\nwd:Q12813010 wdt:P162|wdt:P272 wd:Q187261 .\nwd:Q12813010 wdt:P58 wd:Q187261\n}",
        "questionWithBrackets": "Were [The Waiting Room] , [The Confession] , and [Fate] executive produced by , produced by , directed by , written by , and edited by [Zeki Demirkubuz]"
    },
    {
        "questionIdx": 122497,
        "questionPatternModEntities": "Were M0 and M6 edited by M5 , executive produced by M1 and M2 , and executive produced by M3 and M4",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] and [entity] , and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P0 M3 .\nM0 P0 M4 .\nM0 P1 M5 .\nM6 P0 M1 .\nM6 P0 M2 .\nM6 P0 M3 .\nM6 P0 M4 .\nM6 P1 M5\n}",
        "recursionDepth": 46,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q192724 wdt:P1040 wd:Q3013121 .\nwd:Q192724 wdt:P1431 wd:Q181900 .\nwd:Q192724 wdt:P1431 wd:Q23409539 .\nwd:Q192724 wdt:P1431 wd:Q5237056 .\nwd:Q192724 wdt:P1431 wd:Q295964 .\nwd:Q205028 wdt:P1040 wd:Q3013121 .\nwd:Q205028 wdt:P1431 wd:Q181900 .\nwd:Q205028 wdt:P1431 wd:Q23409539 .\nwd:Q205028 wdt:P1431 wd:Q5237056 .\nwd:Q205028 wdt:P1431 wd:Q295964\n}",
        "questionWithBrackets": "Were [Iron Man 2] and [Iron Man] edited by [Dan Lebental] , executive produced by [Stan Lee] and [David Maisel] , and executive produced by [Jon Favreau] and [Louis D'Esposito]"
    },
    {
        "questionIdx": 122504,
        "questionPatternModEntities": "Were M0 , M2 , and M3 produced by , executive produced by , written by , directed by , and edited by M1",
        "questionTemplate": "Were [entity] , [entity] , and [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1 .\nM0 P2 M1 .\nM0 P3 M1 .\nM0 P4 M1 .\nM2 P0 M1 .\nM2 P1 M1 .\nM2 P2 M1 .\nM2 P3 M1 .\nM2 P4 M1 .\nM3 P0 M1 .\nM3 P1 M1 .\nM3 P2 M1 .\nM3 P3 M1 .\nM3 P4 M1\n}",
        "recursionDepth": 46,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q5437360 wdt:P57 wd:Q187261 .\nwd:Q5437360 wdt:P1040 wd:Q187261 .\nwd:Q5437360 wdt:P1431 wd:Q187261 .\nwd:Q5437360 wdt:P162|wdt:P272 wd:Q187261 .\nwd:Q5437360 wdt:P58 wd:Q187261 .\nwd:Q6084069 wdt:P57 wd:Q187261 .\nwd:Q6084069 wdt:P1040 wd:Q187261 .\nwd:Q6084069 wdt:P1431 wd:Q187261 .\nwd:Q6084069 wdt:P162|wdt:P272 wd:Q187261 .\nwd:Q6084069 wdt:P58 wd:Q187261 .\nwd:Q12813010 wdt:P57 wd:Q187261 .\nwd:Q12813010 wdt:P1040 wd:Q187261 .\nwd:Q12813010 wdt:P1431 wd:Q187261 .\nwd:Q12813010 wdt:P162|wdt:P272 wd:Q187261 .\nwd:Q12813010 wdt:P58 wd:Q187261\n}",
        "questionWithBrackets": "Were [The Waiting Room] , [The Confession] , and [Fate] produced by , executive produced by , written by , directed by , and edited by [Zeki Demirkubuz]"
    },
    {
        "questionIdx": 122532,
        "questionPatternModEntities": "Were M0 , M3 , M4 , and M5 executive produced by M1 and written by M2",
        "questionTemplate": "Were [entity] , [entity] , [entity] , and [entity] [VP_SIMPLE] by [entity] and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M2 .\nM3 P0 M1 .\nM3 P1 M2 .\nM4 P0 M1 .\nM4 P1 M2 .\nM5 P0 M1 .\nM5 P1 M2\n}",
        "recursionDepth": 34,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q2661044 wdt:P1431 wd:Q8877 .\nwd:Q2661044 wdt:P58 wd:Q725773 .\nwd:Q109331 wdt:P1431 wd:Q8877 .\nwd:Q109331 wdt:P58 wd:Q725773 .\nwd:Q91540 wdt:P1431 wd:Q8877 .\nwd:Q91540 wdt:P58 wd:Q725773 .\nwd:Q230552 wdt:P1431 wd:Q8877 .\nwd:Q230552 wdt:P58 wd:Q725773\n}",
        "questionWithBrackets": "Were [Back to the Future Part III] , [I Wanna Hold Your Hand] , [Back to the Future Part II] , and [Back to the Future] executive produced by [Steven Spielberg] and written by [Bob Gale]"
    },
    {
        "questionIdx": 122559,
        "questionPatternModEntities": "Were M0 and M6 directed by M4 and M5 , executive produced by M1 , and executive produced by M2 and M3",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by [entity] and [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P0 M3 .\nM0 P1 M4 .\nM0 P1 M5 .\nM6 P0 M1 .\nM6 P0 M2 .\nM6 P0 M3 .\nM6 P1 M4 .\nM6 P1 M5\n}",
        "recursionDepth": 46,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q23781155 wdt:P57 wd:Q20675767 .\nwd:Q23781155 wdt:P57 wd:Q18018415 .\nwd:Q23781155 wdt:P1431 wd:Q181900 .\nwd:Q23781155 wdt:P1431 wd:Q23409539 .\nwd:Q23781155 wdt:P1431 wd:Q24176186 .\nwd:Q18407657 wdt:P57 wd:Q20675767 .\nwd:Q18407657 wdt:P57 wd:Q18018415 .\nwd:Q18407657 wdt:P1431 wd:Q181900 .\nwd:Q18407657 wdt:P1431 wd:Q23409539 .\nwd:Q18407657 wdt:P1431 wd:Q24176186\n}",
        "questionWithBrackets": "Were [Captain America: Civil War] and [Avengers: Endgame] directed by [Joe Russo] and [Anthony Russo] , executive produced by [Louis D'Esposito] , and executive produced by [Victoria Alonso] and [Stan Lee]"
    },
    {
        "questionIdx": 122561,
        "questionPatternModEntities": "Were M0 and M6 directed by M4 and M5 , executive produced by M1 and M2 , and executive produced by M3",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by [entity] and [entity] , [VP_SIMPLE] by [entity] and [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P0 M3 .\nM0 P1 M4 .\nM0 P1 M5 .\nM6 P0 M1 .\nM6 P0 M2 .\nM6 P0 M3 .\nM6 P1 M4 .\nM6 P1 M5\n}",
        "recursionDepth": 46,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q23781155 wdt:P57 wd:Q20675767 .\nwd:Q23781155 wdt:P57 wd:Q18018415 .\nwd:Q23781155 wdt:P1431 wd:Q181900 .\nwd:Q23781155 wdt:P1431 wd:Q23409539 .\nwd:Q23781155 wdt:P1431 wd:Q24176186 .\nwd:Q18407657 wdt:P57 wd:Q20675767 .\nwd:Q18407657 wdt:P57 wd:Q18018415 .\nwd:Q18407657 wdt:P1431 wd:Q181900 .\nwd:Q18407657 wdt:P1431 wd:Q23409539 .\nwd:Q18407657 wdt:P1431 wd:Q24176186\n}",
        "questionWithBrackets": "Were [Captain America: Civil War] and [Avengers: Endgame] directed by [Anthony Russo] and [Joe Russo] , executive produced by [Louis D'Esposito] and [Victoria Alonso] , and executive produced by [Stan Lee]"
    },
    {
        "questionIdx": 122563,
        "questionPatternModEntities": "Were M0 and M5 directed by M3 , written by M2 , executive produced by M1 , and directed by M4",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M2 .\nM0 P2 M3 .\nM0 P2 M4 .\nM5 P0 M1 .\nM5 P1 M2 .\nM5 P2 M3 .\nM5 P2 M4\n}",
        "recursionDepth": 46,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q18407657 wdt:P57 wd:Q20675767 .\nwd:Q18407657 wdt:P57 wd:Q18018415 .\nwd:Q18407657 wdt:P1431 wd:Q181900 .\nwd:Q18407657 wdt:P58 wd:Q5112818 .\nwd:Q23781155 wdt:P57 wd:Q20675767 .\nwd:Q23781155 wdt:P57 wd:Q18018415 .\nwd:Q23781155 wdt:P1431 wd:Q181900 .\nwd:Q23781155 wdt:P58 wd:Q5112818\n}",
        "questionWithBrackets": "Were [Avengers: Endgame] and [Captain America: Civil War] directed by [Anthony Russo] , written by [Christopher Markus] , executive produced by [Stan Lee] , and directed by [Joe Russo]"
    },
    {
        "questionIdx": 122569,
        "questionPatternModEntities": "Were M2 and M6 executive produced by M1 's female parent and written by M3 , M4 , and M5",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] and [VP_SIMPLE] by [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nM2 P2 ?x0 .\nM2 P3 M3 .\nM2 P3 M4 .\nM2 P3 M5 .\nM6 P2 ?x0 .\nM6 P3 M3 .\nM6 P3 M4 .\nM6 P3 M5\n}",
        "recursionDepth": 44,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q47468213 .\n?x0 wdt:P21 wd:Q6581072 .\nwd:Q22350906 wdt:P1431 ?x0 .\nwd:Q22350906 wdt:P58 wd:Q28846433 .\nwd:Q22350906 wdt:P58 wd:Q1151111 .\nwd:Q22350906 wdt:P58 wd:Q28855446 .\nwd:Q3362144 wdt:P1431 ?x0 .\nwd:Q3362144 wdt:P58 wd:Q28846433 .\nwd:Q3362144 wdt:P58 wd:Q1151111 .\nwd:Q3362144 wdt:P58 wd:Q28855446\n}",
        "questionWithBrackets": "Were [Trail Mix-Up] and [Tummy Trouble] executive produced by [Meghan Marshall] 's female parent and written by [Mark Kausler] , [Patrick A. Ventura] , and [Rob Minkoff]"
    },
    {
        "questionIdx": 122573,
        "questionPatternModEntities": "Were M0 and M6 written by M4 and M5 , executive produced by M1 , and executive produced by M2 and M3",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by [entity] and [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P0 M3 .\nM0 P1 M4 .\nM0 P1 M5 .\nM6 P0 M1 .\nM6 P0 M2 .\nM6 P0 M3 .\nM6 P1 M4 .\nM6 P1 M5\n}",
        "recursionDepth": 46,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q102244 wdt:P1431 wd:Q75079 .\nwd:Q102244 wdt:P1431 wd:Q1900360 .\nwd:Q102244 wdt:P1431 wd:Q11778321 .\nwd:Q102244 wdt:P58 wd:Q34660 .\nwd:Q102244 wdt:P58 wd:Q362061 .\nwd:Q102438 wdt:P1431 wd:Q75079 .\nwd:Q102438 wdt:P1431 wd:Q1900360 .\nwd:Q102438 wdt:P1431 wd:Q11778321 .\nwd:Q102438 wdt:P58 wd:Q34660 .\nwd:Q102438 wdt:P58 wd:Q362061\n}",
        "questionWithBrackets": "Were [Harry Potter and the Philosopher's Stone] and [Harry Potter and the Chamber of Secrets] written by [J. K. Rowling] and [Steve Kloves] , executive produced by [Mark Radcliffe] , and executive produced by [Chris Columbus] and [Michael Barnathan]"
    },
    {
        "questionIdx": 122576,
        "questionPatternModEntities": "Were M0 and M5 written by M2 , directed by M4 , written by M3 , and executive produced by M1",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M2 .\nM0 P1 M3 .\nM0 P2 M4 .\nM5 P0 M1 .\nM5 P1 M2 .\nM5 P1 M3 .\nM5 P2 M4\n}",
        "recursionDepth": 46,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q191100 wdt:P57 wd:Q59259 .\nwd:Q191100 wdt:P1431 wd:Q8877 .\nwd:Q191100 wdt:P58 wd:Q432598 .\nwd:Q191100 wdt:P58 wd:Q467500 .\nwd:Q171453 wdt:P57 wd:Q59259 .\nwd:Q171453 wdt:P1431 wd:Q8877 .\nwd:Q171453 wdt:P58 wd:Q432598 .\nwd:Q171453 wdt:P58 wd:Q467500\n}",
        "questionWithBrackets": "Were [Transformers] and [Transformers: Revenge of the Fallen] written by [Roberto Orci] , directed by [Michael Bay] , written by [Alex Kurtzman] , and executive produced by [Steven Spielberg]"
    },
    {
        "questionIdx": 122577,
        "questionPatternModEntities": "Were M0 and M5 written by M2 , directed by M3 , executive produced by M1 , and directed by M4",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M2 .\nM0 P2 M3 .\nM0 P2 M4 .\nM5 P0 M1 .\nM5 P1 M2 .\nM5 P2 M3 .\nM5 P2 M4\n}",
        "recursionDepth": 46,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q18407657 wdt:P57 wd:Q20675767 .\nwd:Q18407657 wdt:P57 wd:Q18018415 .\nwd:Q18407657 wdt:P1431 wd:Q181900 .\nwd:Q18407657 wdt:P58 wd:Q5112818 .\nwd:Q23781155 wdt:P57 wd:Q20675767 .\nwd:Q23781155 wdt:P57 wd:Q18018415 .\nwd:Q23781155 wdt:P1431 wd:Q181900 .\nwd:Q23781155 wdt:P58 wd:Q5112818\n}",
        "questionWithBrackets": "Were [Avengers: Endgame] and [Captain America: Civil War] written by [Christopher Markus] , directed by [Joe Russo] , executive produced by [Stan Lee] , and directed by [Anthony Russo]"
    },
    {
        "questionIdx": 122578,
        "questionPatternModEntities": "Were M0 and M7 written by M1 , written by M2 , M3 , M4 , and M5 , and directed by M6",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , [entity] , [entity] , and [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P0 M3 .\nM0 P0 M4 .\nM0 P0 M5 .\nM0 P1 M6 .\nM7 P0 M1 .\nM7 P0 M2 .\nM7 P0 M3 .\nM7 P0 M4 .\nM7 P0 M5 .\nM7 P1 M6\n}",
        "recursionDepth": 46,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q2261883 wdt:P57 wd:Q1040240 .\nwd:Q2261883 wdt:P58 wd:Q25120 .\nwd:Q2261883 wdt:P58 wd:Q469164 .\nwd:Q2261883 wdt:P58 wd:Q3938849 .\nwd:Q2261883 wdt:P58 wd:Q179982 .\nwd:Q2261883 wdt:P58 wd:Q392644 .\nwd:Q2661437 wdt:P57 wd:Q1040240 .\nwd:Q2661437 wdt:P58 wd:Q25120 .\nwd:Q2661437 wdt:P58 wd:Q469164 .\nwd:Q2661437 wdt:P58 wd:Q3938849 .\nwd:Q2661437 wdt:P58 wd:Q179982 .\nwd:Q2661437 wdt:P58 wd:Q392644\n}",
        "questionWithBrackets": "Were [The Witches] and [Caprice Italian Style] written by [Roberto Gianviti] , written by [Pier Paolo Pasolini] , [Agenore Incrocci] , [Cesare Zavattini] , and [Furio Scarpelli] , and directed by [Franco Rossi]"
    },
    {
        "questionIdx": 122579,
        "questionPatternModEntities": "Were M0 and M5 written by M2 , edited by M3 , edited by M4 , and executive produced by M1",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M2 .\nM0 P2 M3 .\nM0 P2 M4 .\nM5 P0 M1 .\nM5 P1 M2 .\nM5 P2 M3 .\nM5 P2 M4\n}",
        "recursionDepth": 46,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q23781155 wdt:P1040 wd:Q24206656 .\nwd:Q23781155 wdt:P1040 wd:Q11309299 .\nwd:Q23781155 wdt:P1431 wd:Q181900 .\nwd:Q23781155 wdt:P58 wd:Q5112818 .\nwd:Q18407657 wdt:P1040 wd:Q24206656 .\nwd:Q18407657 wdt:P1040 wd:Q11309299 .\nwd:Q18407657 wdt:P1431 wd:Q181900 .\nwd:Q18407657 wdt:P58 wd:Q5112818\n}",
        "questionWithBrackets": "Were [Captain America: Civil War] and [Avengers: Endgame] written by [Christopher Markus] , edited by [Matthew Schmidt] , edited by [Jeffrey Ford] , and executive produced by [Stan Lee]"
    },
    {
        "questionIdx": 122581,
        "questionPatternModEntities": "Were M0 and M7 written by M1 , written by M2 , and written by M3 , M4 , M5 , and M6",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity] , [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P0 M3 .\nM0 P0 M4 .\nM0 P0 M5 .\nM0 P0 M6 .\nM7 P0 M1 .\nM7 P0 M2 .\nM7 P0 M3 .\nM7 P0 M4 .\nM7 P0 M5 .\nM7 P0 M6\n}",
        "recursionDepth": 46,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q24953 wdt:P58 wd:Q24962 .\nwd:Q24953 wdt:P58 wd:Q223985 .\nwd:Q24953 wdt:P58 wd:Q166159 .\nwd:Q24953 wdt:P58 wd:Q210741 .\nwd:Q24953 wdt:P58 wd:Q25014 .\nwd:Q24953 wdt:P58 wd:Q25078 .\nwd:Q16403 wdt:P58 wd:Q24962 .\nwd:Q16403 wdt:P58 wd:Q223985 .\nwd:Q16403 wdt:P58 wd:Q166159 .\nwd:Q16403 wdt:P58 wd:Q210741 .\nwd:Q16403 wdt:P58 wd:Q25014 .\nwd:Q16403 wdt:P58 wd:Q25078\n}",
        "questionWithBrackets": "Were [And Now for Something Completely Different] and [Monty Python\u2019s Life of Brian] written by [Terry Gilliam] , written by [Eric Idle] , and written by [John Cleese] , [Graham Chapman] , [Terry Jones] , and [Michael Palin]"
    },
    {
        "questionIdx": 122585,
        "questionPatternModEntities": "Were M0 and M5 executive produced by M1 , written by M2 , written by M3 , and edited by M4",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M2 .\nM0 P1 M3 .\nM0 P2 M4 .\nM5 P0 M1 .\nM5 P1 M2 .\nM5 P1 M3 .\nM5 P2 M4\n}",
        "recursionDepth": 46,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q26154237 wdt:P1040 wd:Q1238970 .\nwd:Q26154237 wdt:P1431 wd:Q380852 .\nwd:Q26154237 wdt:P58 wd:Q6279173 .\nwd:Q26154237 wdt:P58 wd:Q22087832 .\nwd:Q48967619 wdt:P1040 wd:Q1238970 .\nwd:Q48967619 wdt:P1431 wd:Q380852 .\nwd:Q48967619 wdt:P58 wd:Q6279173 .\nwd:Q48967619 wdt:P58 wd:Q22087832\n}",
        "questionWithBrackets": "Were [Descendants 2] and [Descendants 3] executive produced by [Kenny Ortega] , written by [Sara Parriott] , written by [Josann McGibbon] , and edited by [Don Brochu]"
    },
    {
        "questionIdx": 122586,
        "questionPatternModEntities": "Were M0 and M5 directed by M4 , written by M2 , edited by M3 , and executive produced by M1",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M2 .\nM0 P2 M3 .\nM0 P3 M4 .\nM5 P0 M1 .\nM5 P1 M2 .\nM5 P2 M3 .\nM5 P3 M4\n}",
        "recursionDepth": 46,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q91540 wdt:P57 wd:Q187364 .\nwd:Q91540 wdt:P1040 wd:Q1586598 .\nwd:Q91540 wdt:P1431 wd:Q8877 .\nwd:Q91540 wdt:P58 wd:Q725773 .\nwd:Q109331 wdt:P57 wd:Q187364 .\nwd:Q109331 wdt:P1040 wd:Q1586598 .\nwd:Q109331 wdt:P1431 wd:Q8877 .\nwd:Q109331 wdt:P58 wd:Q725773\n}",
        "questionWithBrackets": "Were [Back to the Future Part II] and [Back to the Future] directed by [Robert Zemeckis] , written by [Bob Gale] , edited by [Harry Keramidas] , and executive produced by [Steven Spielberg]"
    },
    {
        "questionIdx": 122587,
        "questionPatternModEntities": "Were M0 and M5 edited by M2 , directed by M3 , executive produced by M1 , and directed by M4",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M2 .\nM0 P2 M3 .\nM0 P2 M4 .\nM5 P0 M1 .\nM5 P1 M2 .\nM5 P2 M3 .\nM5 P2 M4\n}",
        "recursionDepth": 46,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q329316 wdt:P57 wd:Q1153718 .\nwd:Q329316 wdt:P57 wd:Q3517016 .\nwd:Q329316 wdt:P1040 wd:Q19545136 .\nwd:Q329316 wdt:P1431 wd:Q2165499 .\nwd:Q40302 wdt:P57 wd:Q1153718 .\nwd:Q40302 wdt:P57 wd:Q3517016 .\nwd:Q40302 wdt:P1040 wd:Q19545136 .\nwd:Q40302 wdt:P1431 wd:Q2165499\n}",
        "questionWithBrackets": "Were [The Fox and the Hound] and [The Black Cauldron] edited by [James Melton] , directed by [Ted Berman] , executive produced by [Ron W. Miller] , and directed by [Richard Rich]"
    },
    {
        "questionIdx": 122593,
        "questionPatternModEntities": "Were M0 , M2 , and M3 written by , executive produced by , directed by , produced by , and edited by M1",
        "questionTemplate": "Were [entity] , [entity] , and [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1 .\nM0 P2 M1 .\nM0 P3 M1 .\nM0 P4 M1 .\nM2 P0 M1 .\nM2 P1 M1 .\nM2 P2 M1 .\nM2 P3 M1 .\nM2 P4 M1 .\nM3 P0 M1 .\nM3 P1 M1 .\nM3 P2 M1 .\nM3 P3 M1 .\nM3 P4 M1\n}",
        "recursionDepth": 46,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q12813010 wdt:P57 wd:Q187261 .\nwd:Q12813010 wdt:P1040 wd:Q187261 .\nwd:Q12813010 wdt:P1431 wd:Q187261 .\nwd:Q12813010 wdt:P162|wdt:P272 wd:Q187261 .\nwd:Q12813010 wdt:P58 wd:Q187261 .\nwd:Q5437360 wdt:P57 wd:Q187261 .\nwd:Q5437360 wdt:P1040 wd:Q187261 .\nwd:Q5437360 wdt:P1431 wd:Q187261 .\nwd:Q5437360 wdt:P162|wdt:P272 wd:Q187261 .\nwd:Q5437360 wdt:P58 wd:Q187261 .\nwd:Q6084069 wdt:P57 wd:Q187261 .\nwd:Q6084069 wdt:P1040 wd:Q187261 .\nwd:Q6084069 wdt:P1431 wd:Q187261 .\nwd:Q6084069 wdt:P162|wdt:P272 wd:Q187261 .\nwd:Q6084069 wdt:P58 wd:Q187261\n}",
        "questionWithBrackets": "Were [The Confession] , [The Waiting Room] , and [Fate] written by , executive produced by , directed by , produced by , and edited by [Zeki Demirkubuz]"
    },
    {
        "questionIdx": 122602,
        "questionPatternModEntities": "Were M0 and M3 produced by and directed by M1 and M2",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P1 M1 .\nM0 P1 M2 .\nM3 P0 M1 .\nM3 P0 M2 .\nM3 P1 M1 .\nM3 P1 M2\n}",
        "recursionDepth": 28,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q3897674 wdt:P57 wd:Q24532 .\nwd:Q3897674 wdt:P57 wd:Q3830671 .\nwd:Q3897674 wdt:P162|wdt:P272 wd:Q24532 .\nwd:Q3897674 wdt:P162|wdt:P272 wd:Q3830671 .\nwd:Q1749295 wdt:P57 wd:Q24532 .\nwd:Q1749295 wdt:P57 wd:Q3830671 .\nwd:Q1749295 wdt:P162|wdt:P272 wd:Q24532 .\nwd:Q1749295 wdt:P162|wdt:P272 wd:Q3830671\n}",
        "questionWithBrackets": "Were [The New Exploits of Elaine] and [Patria] produced by and directed by [Theodore Wharton] and [Leopold Wharton]"
    },
    {
        "questionIdx": 122608,
        "questionPatternModEntities": "Were M1 , M4 , and M5 edited by M3 , executive produced by a sibling of M0 , and written by M2",
        "questionTemplate": "Were [entity] , [entity] , and [entity] [VP_SIMPLE] by [entity] , [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nM1 P1 ?x0 .\nM1 P2 M2 .\nM1 P3 M3 .\nM4 P1 ?x0 .\nM4 P2 M2 .\nM4 P3 M3 .\nM5 P1 ?x0 .\nM5 P2 M2 .\nM5 P3 M3\n}",
        "recursionDepth": 46,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P3373 wd:Q469204 .\nFILTER ( ?x0 != wd:Q469204 ) .\nwd:Q230552 wdt:P1040 wd:Q1586598 .\nwd:Q230552 wdt:P1431 ?x0 .\nwd:Q230552 wdt:P58 wd:Q725773 .\nwd:Q109331 wdt:P1040 wd:Q1586598 .\nwd:Q109331 wdt:P1431 ?x0 .\nwd:Q109331 wdt:P58 wd:Q725773 .\nwd:Q91540 wdt:P1040 wd:Q1586598 .\nwd:Q91540 wdt:P1431 ?x0 .\nwd:Q91540 wdt:P58 wd:Q725773\n}",
        "questionWithBrackets": "Were [Back to the Future] , [Back to the Future Part II] , and [Back to the Future Part III] edited by [Harry Keramidas] , executive produced by a sibling of [Anne Spielberg] , and written by [Bob Gale]"
    },
    {
        "questionIdx": 122626,
        "questionPatternModEntities": "Were M1 and M5 directed by a spouse of M0 , written by M2 and M3 , and written by M4",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity] , [VP_SIMPLE] by [entity] and [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nM1 P1 M2 .\nM1 P1 M3 .\nM1 P1 M4 .\nM1 P2 ?x0 .\nM5 P1 M2 .\nM5 P1 M3 .\nM5 P1 M4 .\nM5 P2 ?x0\n}",
        "recursionDepth": 46,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P26 wd:Q76717 .\nFILTER ( ?x0 != wd:Q76717 ) .\nwd:Q28865118 wdt:P57 ?x0 .\nwd:Q28865118 wdt:P58 wd:Q2593 .\nwd:Q28865118 wdt:P58 wd:Q7475875 .\nwd:Q28865118 wdt:P58 wd:Q4805527 .\nwd:Q223596 wdt:P57 ?x0 .\nwd:Q223596 wdt:P58 wd:Q2593 .\nwd:Q223596 wdt:P58 wd:Q7475875 .\nwd:Q223596 wdt:P58 wd:Q4805527\n}",
        "questionWithBrackets": "Were [X-Men: First Class] and [X-Men Beginnings] directed by a spouse of [Claudia Schiffer] , written by [Zack Stentz] and [Ashley Miller] , and written by [Matthew Vaughn]"
    },
    {
        "questionIdx": 122734,
        "questionPatternModEntities": "Were M1 and M2 written by a spouse of M0",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nM1 P1 ?x0 .\nM2 P1 ?x0\n}",
        "recursionDepth": 22,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P26 wd:Q1981049 .\nFILTER ( ?x0 != wd:Q1981049 ) .\nwd:Q125772 wdt:P58 ?x0 .\nwd:Q281988 wdt:P58 ?x0\n}",
        "questionWithBrackets": "Were [The Sacrifice] and [Solaris] written by a spouse of [Irma Raush]"
    },
    {
        "questionIdx": 122743,
        "questionPatternModEntities": "Were M0 , M2 , and M3 edited by , produced by , and directed by M1",
        "questionTemplate": "Were [entity] , [entity] , and [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1 .\nM0 P2 M1 .\nM2 P0 M1 .\nM2 P1 M1 .\nM2 P2 M1 .\nM3 P0 M1 .\nM3 P1 M1 .\nM3 P2 M1\n}",
        "recursionDepth": 33,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q1070468 wdt:P57 wd:Q882 .\nwd:Q1070468 wdt:P1040 wd:Q882 .\nwd:Q1070468 wdt:P162|wdt:P272 wd:Q882 .\nwd:Q199039 wdt:P57 wd:Q882 .\nwd:Q199039 wdt:P1040 wd:Q882 .\nwd:Q199039 wdt:P162|wdt:P272 wd:Q882 .\nwd:Q374172 wdt:P57 wd:Q882 .\nwd:Q374172 wdt:P1040 wd:Q882 .\nwd:Q374172 wdt:P162|wdt:P272 wd:Q882\n}",
        "questionWithBrackets": "Were [Pay Day] , [The Kid] , and [The Immigrant] edited by , produced by , and directed by [Charlie Chaplin]"
    },
    {
        "questionIdx": 122745,
        "questionPatternModEntities": "Were M0 and M5 written by M2 , written by M3 , edited by M4 , and executive produced by M1",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M2 .\nM0 P1 M3 .\nM0 P2 M4 .\nM5 P0 M1 .\nM5 P1 M2 .\nM5 P1 M3 .\nM5 P2 M4\n}",
        "recursionDepth": 46,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q109331 wdt:P1040 wd:Q1586598 .\nwd:Q109331 wdt:P1431 wd:Q8877 .\nwd:Q109331 wdt:P58 wd:Q725773 .\nwd:Q109331 wdt:P58 wd:Q187364 .\nwd:Q91540 wdt:P1040 wd:Q1586598 .\nwd:Q91540 wdt:P1431 wd:Q8877 .\nwd:Q91540 wdt:P58 wd:Q725773 .\nwd:Q91540 wdt:P58 wd:Q187364\n}",
        "questionWithBrackets": "Were [Back to the Future] and [Back to the Future Part II] written by [Bob Gale] , written by [Robert Zemeckis] , edited by [Harry Keramidas] , and executive produced by [Steven Spielberg]"
    },
    {
        "questionIdx": 122746,
        "questionPatternModEntities": "Were M0 and M5 directed by M4 , edited by M3 , executive produced by M1 , and written by M2",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M2 .\nM0 P2 M3 .\nM0 P3 M4 .\nM5 P0 M1 .\nM5 P1 M2 .\nM5 P2 M3 .\nM5 P3 M4\n}",
        "recursionDepth": 46,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q191100 wdt:P57 wd:Q59259 .\nwd:Q191100 wdt:P1040 wd:Q725026 .\nwd:Q191100 wdt:P1431 wd:Q8877 .\nwd:Q191100 wdt:P58 wd:Q534224 .\nwd:Q232774 wdt:P57 wd:Q59259 .\nwd:Q232774 wdt:P1040 wd:Q725026 .\nwd:Q232774 wdt:P1431 wd:Q8877 .\nwd:Q232774 wdt:P58 wd:Q534224\n}",
        "questionWithBrackets": "Were [Transformers: Revenge of the Fallen] and [Transformers: Dark of the Moon] directed by [Michael Bay] , edited by [Roger Barton] , executive produced by [Steven Spielberg] , and written by [Ehren Kruger]"
    },
    {
        "questionIdx": 122753,
        "questionPatternModEntities": "Were M1 and M5 directed by M3 and M4 , written by a employee of M0 , and written by M2",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by [entity] and [entity] , [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 ?x0 .\nM1 P1 M2 .\nM1 P2 M3 .\nM1 P2 M4 .\nM5 P1 ?x0 .\nM5 P1 M2 .\nM5 P2 M3 .\nM5 P2 M4\n}",
        "recursionDepth": 46,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P108 wd:Q834328 .\nwd:Q182206 wdt:P57 wd:Q742757 .\nwd:Q182206 wdt:P57 wd:Q81078 .\nwd:Q182206 wdt:P58 ?x0 .\nwd:Q182206 wdt:P58 wd:Q23261 .\nwd:Q6434144 wdt:P57 wd:Q742757 .\nwd:Q6434144 wdt:P57 wd:Q81078 .\nwd:Q6434144 wdt:P58 ?x0 .\nwd:Q6434144 wdt:P58 wd:Q23261\n}",
        "questionWithBrackets": "Were [Evangelion: 3.0+1.0 Thrice Upon a Time] and [Evangelion: 3.0 You Can (Not) Redo] directed by [Kazuya Tsurumaki] and [Mahiro Maeda] , written by a employee of [Gainax] , and written by [Hideaki Anno]"
    },
    {
        "questionIdx": 122758,
        "questionPatternModEntities": "Were M0 and M5 edited by M3 , edited by M4 , executive produced by M1 , and written by M2",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M2 .\nM0 P2 M3 .\nM0 P2 M4 .\nM5 P0 M1 .\nM5 P1 M2 .\nM5 P2 M3 .\nM5 P2 M4\n}",
        "recursionDepth": 46,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q23781155 wdt:P1040 wd:Q11309299 .\nwd:Q23781155 wdt:P1040 wd:Q24206656 .\nwd:Q23781155 wdt:P1431 wd:Q181900 .\nwd:Q23781155 wdt:P58 wd:Q5112818 .\nwd:Q18407657 wdt:P1040 wd:Q11309299 .\nwd:Q18407657 wdt:P1040 wd:Q24206656 .\nwd:Q18407657 wdt:P1431 wd:Q181900 .\nwd:Q18407657 wdt:P58 wd:Q5112818\n}",
        "questionWithBrackets": "Were [Avengers: Endgame] and [Captain America: Civil War] edited by [Matthew Schmidt] , edited by [Jeffrey Ford] , executive produced by [Stan Lee] , and written by [Christopher Markus]"
    },
    {
        "questionIdx": 122804,
        "questionPatternModEntities": "Were M2 and M5 executive produced by M3 , produced by M1 's Japanese parent , and edited by M4",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nM2 P2 M3 .\nM2 P3 ?x0 .\nM2 P4 M4 .\nM5 P2 M3 .\nM5 P3 ?x0 .\nM5 P4 M4\n}",
        "recursionDepth": 46,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q459078 .\n?x0 wdt:P27 wd:Q17 .\nwd:Q842292 wdt:P1040 wd:Q1379022 .\nwd:Q842292 wdt:P1431 wd:Q11071898 .\nwd:Q842292 wdt:P162|wdt:P272 ?x0 .\nwd:Q196602 wdt:P1040 wd:Q1379022 .\nwd:Q196602 wdt:P1431 wd:Q11071898 .\nwd:Q196602 wdt:P162|wdt:P272 ?x0\n}",
        "questionWithBrackets": "Were [Whisper of the Heart] and [Kiki's Delivery Service] executive produced by [Yasuyoshi Tokuma] , produced by [Gor\u014d Miyazaki] 's Japanese parent , and edited by [Takeshi Seyama]"
    },
    {
        "questionIdx": 122811,
        "questionPatternModEntities": "Were M0 , M2 , and M3 British",
        "questionTemplate": "Were [entity] , [entity] , and [entity] [ADJECTIVE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM2 P0 M1 .\nM3 P0 M1\n}",
        "recursionDepth": 16,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q636 wdt:P27 wd:Q145 .\nwd:Q80 wdt:P27 wd:Q145 .\nwd:Q42 wdt:P27 wd:Q145\n}",
        "questionWithBrackets": "Were [Douglas Adams] , [Tim Berners-Lee] , and [Kate Bush] British"
    },
    {
        "questionIdx": 122837,
        "questionPatternModEntities": "Were M0 and M2 written by M1",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM2 P0 M1\n}",
        "recursionDepth": 16,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q2291409 wdt:P58 wd:Q882 .\nwd:Q109116 wdt:P58 wd:Q882\n}",
        "questionWithBrackets": "Were [The Great Dictator] and [The Bank] written by [Charlie Chaplin]"
    },
    {
        "questionIdx": 122987,
        "questionPatternModEntities": "Were M0 , M6 , and M7 written by M1 , M2 , and M3 , written by M4 , and written by M5",
        "questionTemplate": "Were [entity] , [entity] , and [entity] [VP_SIMPLE] by [entity] , [entity] , and [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P0 M3 .\nM0 P0 M4 .\nM0 P0 M5 .\nM6 P0 M1 .\nM6 P0 M2 .\nM6 P0 M3 .\nM6 P0 M4 .\nM6 P0 M5 .\nM7 P0 M1 .\nM7 P0 M2 .\nM7 P0 M3 .\nM7 P0 M4 .\nM7 P0 M5\n}",
        "recursionDepth": 46,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q24980 wdt:P58 wd:Q24962 .\nwd:Q24980 wdt:P58 wd:Q166159 .\nwd:Q24980 wdt:P58 wd:Q25014 .\nwd:Q24980 wdt:P58 wd:Q223985 .\nwd:Q24980 wdt:P58 wd:Q25078 .\nwd:Q25043 wdt:P58 wd:Q24962 .\nwd:Q25043 wdt:P58 wd:Q166159 .\nwd:Q25043 wdt:P58 wd:Q25014 .\nwd:Q25043 wdt:P58 wd:Q223985 .\nwd:Q25043 wdt:P58 wd:Q25078 .\nwd:Q1273232 wdt:P58 wd:Q24962 .\nwd:Q1273232 wdt:P58 wd:Q166159 .\nwd:Q1273232 wdt:P58 wd:Q25014 .\nwd:Q1273232 wdt:P58 wd:Q223985 .\nwd:Q1273232 wdt:P58 wd:Q25078\n}",
        "questionWithBrackets": "Were [Monty Python's The Meaning of Life] , [Monty Python and the Holy Grail] , and [Monty Python Live at the Hollywood Bowl] written by [Michael Palin] , [John Cleese] , and [Terry Gilliam] , written by [Graham Chapman] , and written by [Terry Jones]"
    },
    {
        "questionIdx": 123025,
        "questionPatternModEntities": "Were M0 , M2 , and M3 edited by and directed by M1",
        "questionTemplate": "Were [entity] , [entity] , and [entity] [VP_SIMPLE] by and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1 .\nM2 P0 M1 .\nM2 P1 M1 .\nM3 P0 M1 .\nM3 P1 M1\n}",
        "recursionDepth": 27,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q1070468 wdt:P57 wd:Q882 .\nwd:Q1070468 wdt:P1040 wd:Q882 .\nwd:Q166739 wdt:P57 wd:Q882 .\nwd:Q166739 wdt:P1040 wd:Q882 .\nwd:Q199039 wdt:P57 wd:Q882 .\nwd:Q199039 wdt:P1040 wd:Q882\n}",
        "questionWithBrackets": "Were [The Floorwalker] , [The Immigrant] , and [Pay Day] edited by and directed by [Charlie Chaplin]"
    },
    {
        "questionIdx": 123039,
        "questionPatternModEntities": "Were M0 , M2 , and M3 written by , edited by , directed by , executive produced by , and produced by M1",
        "questionTemplate": "Were [entity] , [entity] , and [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1 .\nM0 P2 M1 .\nM0 P3 M1 .\nM0 P4 M1 .\nM2 P0 M1 .\nM2 P1 M1 .\nM2 P2 M1 .\nM2 P3 M1 .\nM2 P4 M1 .\nM3 P0 M1 .\nM3 P1 M1 .\nM3 P2 M1 .\nM3 P3 M1 .\nM3 P4 M1\n}",
        "recursionDepth": 46,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q5437360 wdt:P57 wd:Q187261 .\nwd:Q5437360 wdt:P1040 wd:Q187261 .\nwd:Q5437360 wdt:P1431 wd:Q187261 .\nwd:Q5437360 wdt:P162|wdt:P272 wd:Q187261 .\nwd:Q5437360 wdt:P58 wd:Q187261 .\nwd:Q12813010 wdt:P57 wd:Q187261 .\nwd:Q12813010 wdt:P1040 wd:Q187261 .\nwd:Q12813010 wdt:P1431 wd:Q187261 .\nwd:Q12813010 wdt:P162|wdt:P272 wd:Q187261 .\nwd:Q12813010 wdt:P58 wd:Q187261 .\nwd:Q6084069 wdt:P57 wd:Q187261 .\nwd:Q6084069 wdt:P1040 wd:Q187261 .\nwd:Q6084069 wdt:P1431 wd:Q187261 .\nwd:Q6084069 wdt:P162|wdt:P272 wd:Q187261 .\nwd:Q6084069 wdt:P58 wd:Q187261\n}",
        "questionWithBrackets": "Were [Fate] , [The Waiting Room] , and [The Confession] written by , edited by , directed by , executive produced by , and produced by [Zeki Demirkubuz]"
    },
    {
        "questionIdx": 123042,
        "questionPatternModEntities": "Were M1 and M2 executive produced by M0 's sibling",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nM1 P1 ?x0 .\nM2 P1 ?x0\n}",
        "recursionDepth": 21,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P3373 wd:Q430849 .\nFILTER ( ?x0 != wd:Q430849 ) .\nwd:Q17479047 wdt:P1431 ?x0 .\nwd:Q15039858 wdt:P1431 ?x0\n}",
        "questionWithBrackets": "Were [Touched with Fire] and [Mike Tyson: Undisputed Truth] executive produced by [Joie Lee] 's sibling"
    },
    {
        "questionIdx": 123059,
        "questionPatternModEntities": "Were M0 and M2 edited by and produced by M1",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1 .\nM2 P0 M1 .\nM2 P1 M1\n}",
        "recursionDepth": 24,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q2257944 wdt:P1040 wd:Q51566 .\nwd:Q2257944 wdt:P162|wdt:P272 wd:Q51566 .\nwd:Q1141467 wdt:P1040 wd:Q51566 .\nwd:Q1141467 wdt:P162|wdt:P272 wd:Q51566\n}",
        "questionWithBrackets": "Were [Joe's Bed-Stuy Barbershop: We Cut Heads] and [She's Gotta Have It] edited by and produced by [Spike Lee]"
    },
    {
        "questionIdx": 123073,
        "questionPatternModEntities": "Were M0 , M2 , and M3 produced by , executive produced by , directed by , written by , and edited by M1",
        "questionTemplate": "Were [entity] , [entity] , and [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1 .\nM0 P2 M1 .\nM0 P3 M1 .\nM0 P4 M1 .\nM2 P0 M1 .\nM2 P1 M1 .\nM2 P2 M1 .\nM2 P3 M1 .\nM2 P4 M1 .\nM3 P0 M1 .\nM3 P1 M1 .\nM3 P2 M1 .\nM3 P3 M1 .\nM3 P4 M1\n}",
        "recursionDepth": 46,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q5437360 wdt:P57 wd:Q187261 .\nwd:Q5437360 wdt:P1040 wd:Q187261 .\nwd:Q5437360 wdt:P1431 wd:Q187261 .\nwd:Q5437360 wdt:P162|wdt:P272 wd:Q187261 .\nwd:Q5437360 wdt:P58 wd:Q187261 .\nwd:Q6084069 wdt:P57 wd:Q187261 .\nwd:Q6084069 wdt:P1040 wd:Q187261 .\nwd:Q6084069 wdt:P1431 wd:Q187261 .\nwd:Q6084069 wdt:P162|wdt:P272 wd:Q187261 .\nwd:Q6084069 wdt:P58 wd:Q187261 .\nwd:Q12813010 wdt:P57 wd:Q187261 .\nwd:Q12813010 wdt:P1040 wd:Q187261 .\nwd:Q12813010 wdt:P1431 wd:Q187261 .\nwd:Q12813010 wdt:P162|wdt:P272 wd:Q187261 .\nwd:Q12813010 wdt:P58 wd:Q187261\n}",
        "questionWithBrackets": "Were [The Waiting Room] , [The Confession] , and [Fate] produced by , executive produced by , directed by , written by , and edited by [Zeki Demirkubuz]"
    },
    {
        "questionIdx": 123082,
        "questionPatternModEntities": "Were M1 , M2 , M3 , M4 , and M5 founded by M0 's spouse",
        "questionTemplate": "Were [entity] , [entity] , [entity] , [entity] , and [entity] [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nM1 P1 ?x0 .\nM2 P1 ?x0 .\nM3 P1 ?x0 .\nM4 P1 ?x0 .\nM5 P1 ?x0\n}",
        "recursionDepth": 29,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P26 wd:Q171480 .\nFILTER ( ?x0 != wd:Q171480 ) .\nwd:Q3551587 wdt:P112 ?x0 .\nwd:Q847027 wdt:P112 ?x0 .\nwd:Q112581 wdt:P112 ?x0 .\nwd:Q163700 wdt:P112 ?x0 .\nwd:Q3086934 wdt:P112 ?x0\n}",
        "questionWithBrackets": "Were [grande \u00e9cole] , [House of Bonaparte] , [Mus\u00e9e des Beaux-Arts de Rouen] , [Legion of Honour] , and [University of France] founded by [Jos\u00e9phine de Beauharnais] 's spouse"
    },
    {
        "questionIdx": 123093,
        "questionPatternModEntities": "Were M1 , M2 , M3 , and M4 directed and edited by M0 's spouse",
        "questionTemplate": "Were [entity] , [entity] , [entity] , and [entity] [VP_SIMPLE] and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nM1 P1 ?x0 .\nM1 P2 ?x0 .\nM2 P1 ?x0 .\nM2 P2 ?x0 .\nM3 P1 ?x0 .\nM3 P2 ?x0 .\nM4 P1 ?x0 .\nM4 P2 ?x0\n}",
        "recursionDepth": 33,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P26 wd:Q95050 .\nFILTER ( ?x0 != wd:Q95050 ) .\nwd:Q1148649 wdt:P57 ?x0 .\nwd:Q1148649 wdt:P1040 ?x0 .\nwd:Q214723 wdt:P57 ?x0 .\nwd:Q214723 wdt:P1040 ?x0 .\nwd:Q45602 wdt:P57 ?x0 .\nwd:Q45602 wdt:P1040 ?x0 .\nwd:Q669929 wdt:P57 ?x0 .\nwd:Q669929 wdt:P1040 ?x0\n}",
        "questionWithBrackets": "Were [Modern Times] , [The Idle Class] , [The Circus] , and [The Gold Rush] directed and edited by [Paulette Goddard] 's spouse"
    },
    {
        "questionIdx": 123096,
        "questionPatternModEntities": "Were M0 , M2 , and M3 executive produced by M1",
        "questionTemplate": "Were [entity] , [entity] , and [entity] [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM2 P0 M1 .\nM3 P0 M1\n}",
        "recursionDepth": 20,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q42708010 wdt:P1431 wd:Q8877 .\nwd:Q1247235 wdt:P1431 wd:Q8877 .\nwd:Q51416 wdt:P1431 wd:Q8877\n}",
        "questionWithBrackets": "Were [First Man] , [United States of Tara] , and [Men in Black] executive produced by [Steven Spielberg]"
    },
    {
        "questionIdx": 123115,
        "questionPatternModEntities": "Were M0 , M2 , and M3 edited by M1",
        "questionTemplate": "Were [entity] , [entity] , and [entity] [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM2 P0 M1 .\nM3 P0 M1\n}",
        "recursionDepth": 19,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q1077915 wdt:P1040 wd:Q8006 .\nwd:Q135465 wdt:P1040 wd:Q8006 .\nwd:Q39946 wdt:P1040 wd:Q8006\n}",
        "questionWithBrackets": "Were [Sanshiro Sugata] , [Rashomon] , and [The Hidden Fortress] edited by [Akira Kurosawa]"
    },
    {
        "questionIdx": 123276,
        "questionPatternModEntities": "Were M0 , M2 , and M3 written by and executive produced by M1",
        "questionTemplate": "Were [entity] , [entity] , and [entity] [VP_SIMPLE] by and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1 .\nM2 P0 M1 .\nM2 P1 M1 .\nM3 P0 M1 .\nM3 P1 M1\n}",
        "recursionDepth": 28,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q3968346 wdt:P1431 wd:Q38222 .\nwd:Q3968346 wdt:P58 wd:Q38222 .\nwd:Q165713 wdt:P1431 wd:Q38222 .\nwd:Q165713 wdt:P58 wd:Q38222 .\nwd:Q17738 wdt:P1431 wd:Q38222 .\nwd:Q17738 wdt:P58 wd:Q38222\n}",
        "questionWithBrackets": "Were [Star Whores] , [Star Wars: Episode IV \u2013 A New Hope] , and [Star Wars: Episode I \u2013 The Phantom Menace] written by and executive produced by [George Lucas]"
    },
    {
        "questionIdx": 123585,
        "questionPatternModEntities": "Were M0 , M2 , and M3 written by , produced by , executive produced by , directed by , and edited by M1",
        "questionTemplate": "Were [entity] , [entity] , and [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1 .\nM0 P2 M1 .\nM0 P3 M1 .\nM0 P4 M1 .\nM2 P0 M1 .\nM2 P1 M1 .\nM2 P2 M1 .\nM2 P3 M1 .\nM2 P4 M1 .\nM3 P0 M1 .\nM3 P1 M1 .\nM3 P2 M1 .\nM3 P3 M1 .\nM3 P4 M1\n}",
        "recursionDepth": 46,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q483197 wdt:P57 wd:Q212990 .\nwd:Q483197 wdt:P1040 wd:Q212990 .\nwd:Q483197 wdt:P1431 wd:Q212990 .\nwd:Q483197 wdt:P162|wdt:P272 wd:Q212990 .\nwd:Q483197 wdt:P58 wd:Q212990 .\nwd:Q484679 wdt:P57 wd:Q212990 .\nwd:Q484679 wdt:P1040 wd:Q212990 .\nwd:Q484679 wdt:P1431 wd:Q212990 .\nwd:Q484679 wdt:P162|wdt:P272 wd:Q212990 .\nwd:Q484679 wdt:P58 wd:Q212990 .\nwd:Q13471372 wdt:P57 wd:Q212990 .\nwd:Q13471372 wdt:P1040 wd:Q212990 .\nwd:Q13471372 wdt:P1431 wd:Q212990 .\nwd:Q13471372 wdt:P162|wdt:P272 wd:Q212990 .\nwd:Q13471372 wdt:P58 wd:Q212990\n}",
        "questionWithBrackets": "Were [Dream] , [Moebius] , and [Piet\u00e0] written by , produced by , executive produced by , directed by , and edited by [Kim Ki-duk]"
    },
    {
        "questionIdx": 123606,
        "questionPatternModEntities": "Were M0 , M2 , and M3 executive produced by , edited by , directed by , produced by , and written by M1",
        "questionTemplate": "Were [entity] , [entity] , and [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1 .\nM0 P2 M1 .\nM0 P3 M1 .\nM0 P4 M1 .\nM2 P0 M1 .\nM2 P1 M1 .\nM2 P2 M1 .\nM2 P3 M1 .\nM2 P4 M1 .\nM3 P0 M1 .\nM3 P1 M1 .\nM3 P2 M1 .\nM3 P3 M1 .\nM3 P4 M1\n}",
        "recursionDepth": 46,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q5437360 wdt:P57 wd:Q187261 .\nwd:Q5437360 wdt:P1040 wd:Q187261 .\nwd:Q5437360 wdt:P1431 wd:Q187261 .\nwd:Q5437360 wdt:P162|wdt:P272 wd:Q187261 .\nwd:Q5437360 wdt:P58 wd:Q187261 .\nwd:Q6084069 wdt:P57 wd:Q187261 .\nwd:Q6084069 wdt:P1040 wd:Q187261 .\nwd:Q6084069 wdt:P1431 wd:Q187261 .\nwd:Q6084069 wdt:P162|wdt:P272 wd:Q187261 .\nwd:Q6084069 wdt:P58 wd:Q187261 .\nwd:Q12813010 wdt:P57 wd:Q187261 .\nwd:Q12813010 wdt:P1040 wd:Q187261 .\nwd:Q12813010 wdt:P1431 wd:Q187261 .\nwd:Q12813010 wdt:P162|wdt:P272 wd:Q187261 .\nwd:Q12813010 wdt:P58 wd:Q187261\n}",
        "questionWithBrackets": "Were [Fate] , [The Confession] , and [The Waiting Room] executive produced by , edited by , directed by , produced by , and written by [Zeki Demirkubuz]"
    },
    {
        "questionIdx": 123607,
        "questionPatternModEntities": "Were M0 , M2 , and M3 executive produced by , edited by , produced by , directed by , and written by M1",
        "questionTemplate": "Were [entity] , [entity] , and [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1 .\nM0 P2 M1 .\nM0 P3 M1 .\nM0 P4 M1 .\nM2 P0 M1 .\nM2 P1 M1 .\nM2 P2 M1 .\nM2 P3 M1 .\nM2 P4 M1 .\nM3 P0 M1 .\nM3 P1 M1 .\nM3 P2 M1 .\nM3 P3 M1 .\nM3 P4 M1\n}",
        "recursionDepth": 46,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q483197 wdt:P57 wd:Q212990 .\nwd:Q483197 wdt:P1040 wd:Q212990 .\nwd:Q483197 wdt:P1431 wd:Q212990 .\nwd:Q483197 wdt:P162|wdt:P272 wd:Q212990 .\nwd:Q483197 wdt:P58 wd:Q212990 .\nwd:Q484679 wdt:P57 wd:Q212990 .\nwd:Q484679 wdt:P1040 wd:Q212990 .\nwd:Q484679 wdt:P1431 wd:Q212990 .\nwd:Q484679 wdt:P162|wdt:P272 wd:Q212990 .\nwd:Q484679 wdt:P58 wd:Q212990 .\nwd:Q13471372 wdt:P57 wd:Q212990 .\nwd:Q13471372 wdt:P1040 wd:Q212990 .\nwd:Q13471372 wdt:P1431 wd:Q212990 .\nwd:Q13471372 wdt:P162|wdt:P272 wd:Q212990 .\nwd:Q13471372 wdt:P58 wd:Q212990\n}",
        "questionWithBrackets": "Were [Piet\u00e0] , [Moebius] , and [Dream] executive produced by , edited by , produced by , directed by , and written by [Kim Ki-duk]"
    },
    {
        "questionIdx": 123624,
        "questionPatternModEntities": "Were M0 , M2 , and M3 written by , produced by , and edited by M1",
        "questionTemplate": "Were [entity] , [entity] , and [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1 .\nM0 P2 M1 .\nM2 P0 M1 .\nM2 P1 M1 .\nM2 P2 M1 .\nM3 P0 M1 .\nM3 P1 M1 .\nM3 P2 M1\n}",
        "recursionDepth": 33,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q1070468 wdt:P1040 wd:Q882 .\nwd:Q1070468 wdt:P162|wdt:P272 wd:Q882 .\nwd:Q1070468 wdt:P58 wd:Q882 .\nwd:Q374172 wdt:P1040 wd:Q882 .\nwd:Q374172 wdt:P162|wdt:P272 wd:Q882 .\nwd:Q374172 wdt:P58 wd:Q882 .\nwd:Q45602 wdt:P1040 wd:Q882 .\nwd:Q45602 wdt:P162|wdt:P272 wd:Q882 .\nwd:Q45602 wdt:P58 wd:Q882\n}",
        "questionWithBrackets": "Were [Modern Times] , [The Kid] , and [The Immigrant] written by , produced by , and edited by [Charlie Chaplin]"
    },
    {
        "questionIdx": 123665,
        "questionPatternModEntities": "Were M0 , M2 , and M3 executive produced , produced , and directed by M1",
        "questionTemplate": "Were [entity] , [entity] , and [entity] [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1 .\nM0 P2 M1 .\nM2 P0 M1 .\nM2 P1 M1 .\nM2 P2 M1 .\nM3 P0 M1 .\nM3 P1 M1 .\nM3 P2 M1\n}",
        "recursionDepth": 32,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q3744724 wdt:P57 wd:Q51123 .\nwd:Q3744724 wdt:P1431 wd:Q51123 .\nwd:Q3744724 wdt:P162|wdt:P272 wd:Q51123 .\nwd:Q3988072 wdt:P57 wd:Q51123 .\nwd:Q3988072 wdt:P1431 wd:Q51123 .\nwd:Q3988072 wdt:P162|wdt:P272 wd:Q51123 .\nwd:Q7745725 wdt:P57 wd:Q51123 .\nwd:Q7745725 wdt:P1431 wd:Q51123 .\nwd:Q7745725 wdt:P162|wdt:P272 wd:Q51123\n}",
        "questionWithBrackets": "Were [The Last Drop of Water] , [Fighting Blood] , and [The Lonedale Operator] executive produced , produced , and directed by [D. W. Griffith]"
    },
    {
        "questionIdx": 123670,
        "questionPatternModEntities": "Were M0 , M2 , and M3 produced by , edited by , directed by , written by , and executive produced by M1",
        "questionTemplate": "Were [entity] , [entity] , and [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1 .\nM0 P2 M1 .\nM0 P3 M1 .\nM0 P4 M1 .\nM2 P0 M1 .\nM2 P1 M1 .\nM2 P2 M1 .\nM2 P3 M1 .\nM2 P4 M1 .\nM3 P0 M1 .\nM3 P1 M1 .\nM3 P2 M1 .\nM3 P3 M1 .\nM3 P4 M1\n}",
        "recursionDepth": 46,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q484679 wdt:P57 wd:Q212990 .\nwd:Q484679 wdt:P1040 wd:Q212990 .\nwd:Q484679 wdt:P1431 wd:Q212990 .\nwd:Q484679 wdt:P162|wdt:P272 wd:Q212990 .\nwd:Q484679 wdt:P58 wd:Q212990 .\nwd:Q13471372 wdt:P57 wd:Q212990 .\nwd:Q13471372 wdt:P1040 wd:Q212990 .\nwd:Q13471372 wdt:P1431 wd:Q212990 .\nwd:Q13471372 wdt:P162|wdt:P272 wd:Q212990 .\nwd:Q13471372 wdt:P58 wd:Q212990 .\nwd:Q483197 wdt:P57 wd:Q212990 .\nwd:Q483197 wdt:P1040 wd:Q212990 .\nwd:Q483197 wdt:P1431 wd:Q212990 .\nwd:Q483197 wdt:P162|wdt:P272 wd:Q212990 .\nwd:Q483197 wdt:P58 wd:Q212990\n}",
        "questionWithBrackets": "Were [Moebius] , [Dream] , and [Piet\u00e0] produced by , edited by , directed by , written by , and executive produced by [Kim Ki-duk]"
    },
    {
        "questionIdx": 123673,
        "questionPatternModEntities": "Were M0 , M2 , and M3 written by , directed by , edited by , executive produced by , and produced by M1",
        "questionTemplate": "Were [entity] , [entity] , and [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1 .\nM0 P2 M1 .\nM0 P3 M1 .\nM0 P4 M1 .\nM2 P0 M1 .\nM2 P1 M1 .\nM2 P2 M1 .\nM2 P3 M1 .\nM2 P4 M1 .\nM3 P0 M1 .\nM3 P1 M1 .\nM3 P2 M1 .\nM3 P3 M1 .\nM3 P4 M1\n}",
        "recursionDepth": 46,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q6084069 wdt:P57 wd:Q187261 .\nwd:Q6084069 wdt:P1040 wd:Q187261 .\nwd:Q6084069 wdt:P1431 wd:Q187261 .\nwd:Q6084069 wdt:P162|wdt:P272 wd:Q187261 .\nwd:Q6084069 wdt:P58 wd:Q187261 .\nwd:Q12813010 wdt:P57 wd:Q187261 .\nwd:Q12813010 wdt:P1040 wd:Q187261 .\nwd:Q12813010 wdt:P1431 wd:Q187261 .\nwd:Q12813010 wdt:P162|wdt:P272 wd:Q187261 .\nwd:Q12813010 wdt:P58 wd:Q187261 .\nwd:Q5437360 wdt:P57 wd:Q187261 .\nwd:Q5437360 wdt:P1040 wd:Q187261 .\nwd:Q5437360 wdt:P1431 wd:Q187261 .\nwd:Q5437360 wdt:P162|wdt:P272 wd:Q187261 .\nwd:Q5437360 wdt:P58 wd:Q187261\n}",
        "questionWithBrackets": "Were [The Confession] , [The Waiting Room] , and [Fate] written by , directed by , edited by , executive produced by , and produced by [Zeki Demirkubuz]"
    },
    {
        "questionIdx": 123755,
        "questionPatternModEntities": "Were M0 , M2 , and M3 directed , executive produced , and edited by M1",
        "questionTemplate": "Were [entity] , [entity] , and [entity] [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1 .\nM0 P2 M1 .\nM2 P0 M1 .\nM2 P1 M1 .\nM2 P2 M1 .\nM3 P0 M1 .\nM3 P1 M1 .\nM3 P2 M1\n}",
        "recursionDepth": 32,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q484679 wdt:P57 wd:Q212990 .\nwd:Q484679 wdt:P1040 wd:Q212990 .\nwd:Q484679 wdt:P1431 wd:Q212990 .\nwd:Q13471372 wdt:P57 wd:Q212990 .\nwd:Q13471372 wdt:P1040 wd:Q212990 .\nwd:Q13471372 wdt:P1431 wd:Q212990 .\nwd:Q483197 wdt:P57 wd:Q212990 .\nwd:Q483197 wdt:P1040 wd:Q212990 .\nwd:Q483197 wdt:P1431 wd:Q212990\n}",
        "questionWithBrackets": "Were [Dream] , [Piet\u00e0] , and [Moebius] directed , executive produced , and edited by [Kim Ki-duk]"
    },
    {
        "questionIdx": 123760,
        "questionPatternModEntities": "Were M1 and M2 edited by M0 's spouse",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nM1 P1 ?x0 .\nM2 P1 ?x0\n}",
        "recursionDepth": 20,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P26 wd:Q95050 .\nFILTER ( ?x0 != wd:Q95050 ) .\nwd:Q166739 wdt:P1040 ?x0 .\nwd:Q374172 wdt:P1040 ?x0\n}",
        "questionWithBrackets": "Were [The Kid] and [The Floorwalker] edited by [Paulette Goddard] 's spouse"
    },
    {
        "questionIdx": 123763,
        "questionPatternModEntities": "Were M0 and M2 edited by M1",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM2 P0 M1\n}",
        "recursionDepth": 16,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q45602 wdt:P1040 wd:Q882 .\nwd:Q166739 wdt:P1040 wd:Q882\n}",
        "questionWithBrackets": "Were [The Floorwalker] and [Modern Times] edited by [Charlie Chaplin]"
    },
    {
        "questionIdx": 123768,
        "questionPatternModEntities": "Were M0 and M3 directed by and edited by M1 and M2",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P1 M1 .\nM0 P1 M2 .\nM3 P0 M1 .\nM3 P0 M2 .\nM3 P1 M1 .\nM3 P1 M2\n}",
        "recursionDepth": 28,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q19827613 wdt:P57 wd:Q562108 .\nwd:Q19827613 wdt:P57 wd:Q35979475 .\nwd:Q19827613 wdt:P1040 wd:Q562108 .\nwd:Q19827613 wdt:P1040 wd:Q35979475 .\nwd:Q20729238 wdt:P57 wd:Q562108 .\nwd:Q20729238 wdt:P57 wd:Q35979475 .\nwd:Q20729238 wdt:P1040 wd:Q562108 .\nwd:Q20729238 wdt:P1040 wd:Q35979475\n}",
        "questionWithBrackets": "Were [Motion picture] and [Near Heaven, Near Earth] directed by and edited by [J\u00f8rgen Leth] and [Ole John]"
    },
    {
        "questionIdx": 123811,
        "questionPatternModEntities": "Were M2 and M4 influenced by M0 's Mexican sibling 's spouse and influenced by M3",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] 's [ROLE_SIMPLE] and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x1 P1 M0 .\n?x1 P2 M1 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x1 != M0 ) .\nM2 P3 ?x0 .\nM2 P3 M3 .\nM4 P3 ?x0 .\nM4 P3 M3\n}",
        "recursionDepth": 40,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P26 ?x1 .\n?x1 wdt:P27 wd:Q96 .\n?x1 wdt:P3373 wd:Q47541637 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x1 != wd:Q47541637 ) .\nwd:Q1442122 wdt:P737 ?x0 .\nwd:Q1442122 wdt:P737 wd:Q171128 .\nwd:Q5515626 wdt:P737 ?x0 .\nwd:Q5515626 wdt:P737 wd:Q171128\n}",
        "questionWithBrackets": "Were [Gabriel Flores] and [Francisco Mora] influenced by [Cristina Kahlo] 's Mexican sibling 's spouse and influenced by [Diego Rivera]"
    },
    {
        "questionIdx": 123825,
        "questionPatternModEntities": "Were M0 and M2 German",
        "questionTemplate": "Were [entity] and [entity] [ADJECTIVE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM2 P0 M1\n}",
        "recursionDepth": 13,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q24617 wdt:P27 wd:Q183 .\nwd:Q567 wdt:P27 wd:Q183\n}",
        "questionWithBrackets": "Were [Angela Merkel] and [Jakob Steigmiller] German"
    },
    {
        "questionIdx": 123840,
        "questionPatternModEntities": "Were M1 , M2 , M3 , and M4 founded by M0 's sibling",
        "questionTemplate": "Were [entity] , [entity] , [entity] , and [entity] [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nM1 P1 ?x0 .\nM2 P1 ?x0 .\nM3 P1 ?x0 .\nM4 P1 ?x0\n}",
        "recursionDepth": 26,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P3373 wd:Q4778506 .\nFILTER ( ?x0 != wd:Q4778506 ) .\nwd:Q7907085 wdt:P112 ?x0 .\nwd:Q1236302 wdt:P112 ?x0 .\nwd:Q197864 wdt:P112 ?x0 .\nwd:Q22334086 wdt:P112 ?x0\n}",
        "questionWithBrackets": "Were [Revolutionary Bolivarian Movement-200] , [United Socialist Party of Venezuela] , [VIT, C.A.] , and [Military Academy of Venezuela] founded by [An\u00edbal Jos\u00e9 Ch\u00e1vez Fr\u00edas] 's sibling"
    },
    {
        "questionIdx": 123843,
        "questionPatternModEntities": "Were M1 , M2 , M3 , M4 , M5 , and M6 founded by M0 's spouse",
        "questionTemplate": "Were [entity] , [entity] , [entity] , [entity] , [entity] , and [entity] [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nM1 P1 ?x0 .\nM2 P1 ?x0 .\nM3 P1 ?x0 .\nM4 P1 ?x0 .\nM5 P1 ?x0 .\nM6 P1 ?x0\n}",
        "recursionDepth": 32,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P26 wd:Q13564310 .\nFILTER ( ?x0 != wd:Q13564310 ) .\nwd:Q935818 wdt:P112 ?x0 .\nwd:Q367 wdt:P112 ?x0 .\nwd:Q180 wdt:P112 ?x0 .\nwd:Q565 wdt:P112 ?x0 .\nwd:Q151 wdt:P112 ?x0 .\nwd:Q52 wdt:P112 ?x0\n}",
        "questionWithBrackets": "Were [Bomis] , [Wikimedia Foundation] , [Wikibooks] , [Wikimedia Commons] , [Wikipedia] , and [Wiktionary] founded by [Kate Garvey] 's spouse"
    },
    {
        "questionIdx": 123845,
        "questionPatternModEntities": "Were M1 , M2 , M3 , M4 , M5 , and M6 founded by M0 's sibling",
        "questionTemplate": "Were [entity] , [entity] , [entity] , [entity] , [entity] , and [entity] [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nM1 P1 ?x0 .\nM2 P1 ?x0 .\nM3 P1 ?x0 .\nM4 P1 ?x0 .\nM5 P1 ?x0 .\nM6 P1 ?x0\n}",
        "recursionDepth": 32,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P3373 wd:Q7726 .\nFILTER ( ?x0 != wd:Q7726 ) .\nwd:Q163700 wdt:P112 ?x0 .\nwd:Q3086934 wdt:P112 ?x0 .\nwd:Q1132066 wdt:P112 ?x0 .\nwd:Q112581 wdt:P112 ?x0 .\nwd:Q769657 wdt:P112 ?x0 .\nwd:Q1643220 wdt:P112 ?x0\n}",
        "questionWithBrackets": "Were [Conseil d'Etat] , [\u00c9cole Sp\u00e9ciale Militaire de Saint-Cyr] , [House of Bonaparte] , [Legion of Honour] , [Paris Chamber of Commerce] , and [Mus\u00e9e des Beaux-Arts de Rouen] founded by [Joseph Bonaparte] 's sibling"
    },
    {
        "questionIdx": 123852,
        "questionPatternModEntities": "Were M2 , M3 , and M4 written by a male spouse of M1 's spouse",
        "questionTemplate": "Were [entity] , [entity] , and [entity] [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 ?x1 .\n?x1 P1 M1 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x1 != M1 ) .\nM2 P2 ?x0 .\nM3 P2 ?x0 .\nM4 P2 ?x0\n}",
        "recursionDepth": 34,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P21 wd:Q6581097 .\n?x0 wdt:P26 ?x1 .\n?x1 wdt:P26 wd:Q882 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x1 != wd:Q882 ) .\nwd:Q9086821 wdt:P58 ?x0 .\nwd:Q109116 wdt:P58 ?x0 .\nwd:Q214723 wdt:P58 ?x0\n}",
        "questionWithBrackets": "Were [The Freak] , [The Great Dictator] , and [The Gold Rush] written by a male spouse of [Charlie Chaplin] 's spouse"
    },
    {
        "questionIdx": 123862,
        "questionPatternModEntities": "Were M1 , M2 , M3 , M4 , and M5 directed by a parent of M0",
        "questionTemplate": "Were [entity] , [entity] , [entity] , [entity] , and [entity] [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 ?x0 .\nM2 P1 ?x0 .\nM3 P1 ?x0 .\nM4 P1 ?x0 .\nM5 P1 ?x0\n}",
        "recursionDepth": 31,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q104373360 .\nwd:Q83365219 wdt:P57 ?x0 .\nwd:Q1110652 wdt:P57 ?x0 .\nwd:Q2085 wdt:P57 ?x0 .\nwd:Q11618 wdt:P57 ?x0 .\nwd:Q507285 wdt:P57 ?x0\n}",
        "questionWithBrackets": "Were [Twin Peaks] , [Pilot] , [Eraserhead] , [What Did Jack Do?] , and [Lumi\u00e8re and Company] directed by a parent of [Riley Sweeney Lynch]"
    },
    {
        "questionIdx": 123866,
        "questionPatternModEntities": "Were M0 , M2 , and M3 written by , executive produced by , produced by , edited by , and directed by M1",
        "questionTemplate": "Were [entity] , [entity] , and [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1 .\nM0 P2 M1 .\nM0 P3 M1 .\nM0 P4 M1 .\nM2 P0 M1 .\nM2 P1 M1 .\nM2 P2 M1 .\nM2 P3 M1 .\nM2 P4 M1 .\nM3 P0 M1 .\nM3 P1 M1 .\nM3 P2 M1 .\nM3 P3 M1 .\nM3 P4 M1\n}",
        "recursionDepth": 46,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q6084069 wdt:P57 wd:Q187261 .\nwd:Q6084069 wdt:P1040 wd:Q187261 .\nwd:Q6084069 wdt:P1431 wd:Q187261 .\nwd:Q6084069 wdt:P162|wdt:P272 wd:Q187261 .\nwd:Q6084069 wdt:P58 wd:Q187261 .\nwd:Q12813010 wdt:P57 wd:Q187261 .\nwd:Q12813010 wdt:P1040 wd:Q187261 .\nwd:Q12813010 wdt:P1431 wd:Q187261 .\nwd:Q12813010 wdt:P162|wdt:P272 wd:Q187261 .\nwd:Q12813010 wdt:P58 wd:Q187261 .\nwd:Q5437360 wdt:P57 wd:Q187261 .\nwd:Q5437360 wdt:P1040 wd:Q187261 .\nwd:Q5437360 wdt:P1431 wd:Q187261 .\nwd:Q5437360 wdt:P162|wdt:P272 wd:Q187261 .\nwd:Q5437360 wdt:P58 wd:Q187261\n}",
        "questionWithBrackets": "Were [The Waiting Room] , [The Confession] , and [Fate] written by , executive produced by , produced by , edited by , and directed by [Zeki Demirkubuz]"
    },
    {
        "questionIdx": 123887,
        "questionPatternModEntities": "Were M1 and M2 influenced by M0 's employee",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 ?x0 .\nM2 P1 ?x0\n}",
        "recursionDepth": 20,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P108 wd:Q2648854 .\nwd:Q44107 wdt:P737 ?x0 .\nwd:Q60025 wdt:P737 ?x0\n}",
        "questionWithBrackets": "Were [Peter Handke] and [Hannah Arendt] influenced by [Allgemeine Unfallversicherungsanstalt] 's employee"
    },
    {
        "questionIdx": 123890,
        "questionPatternModEntities": "Were M0 , M2 , and M3 produced by , written by , executive produced by , directed by , and edited by M1",
        "questionTemplate": "Were [entity] , [entity] , and [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1 .\nM0 P2 M1 .\nM0 P3 M1 .\nM0 P4 M1 .\nM2 P0 M1 .\nM2 P1 M1 .\nM2 P2 M1 .\nM2 P3 M1 .\nM2 P4 M1 .\nM3 P0 M1 .\nM3 P1 M1 .\nM3 P2 M1 .\nM3 P3 M1 .\nM3 P4 M1\n}",
        "recursionDepth": 46,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q5437360 wdt:P57 wd:Q187261 .\nwd:Q5437360 wdt:P1040 wd:Q187261 .\nwd:Q5437360 wdt:P1431 wd:Q187261 .\nwd:Q5437360 wdt:P162|wdt:P272 wd:Q187261 .\nwd:Q5437360 wdt:P58 wd:Q187261 .\nwd:Q6084069 wdt:P57 wd:Q187261 .\nwd:Q6084069 wdt:P1040 wd:Q187261 .\nwd:Q6084069 wdt:P1431 wd:Q187261 .\nwd:Q6084069 wdt:P162|wdt:P272 wd:Q187261 .\nwd:Q6084069 wdt:P58 wd:Q187261 .\nwd:Q12813010 wdt:P57 wd:Q187261 .\nwd:Q12813010 wdt:P1040 wd:Q187261 .\nwd:Q12813010 wdt:P1431 wd:Q187261 .\nwd:Q12813010 wdt:P162|wdt:P272 wd:Q187261 .\nwd:Q12813010 wdt:P58 wd:Q187261\n}",
        "questionWithBrackets": "Were [Fate] , [The Waiting Room] , and [The Confession] produced by , written by , executive produced by , directed by , and edited by [Zeki Demirkubuz]"
    },
    {
        "questionIdx": 123897,
        "questionPatternModEntities": "Were M2 and M3 executive produced , written , and edited by a male spouse of M1",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M1 ) .\nM2 P2 ?x0 .\nM2 P3 ?x0 .\nM2 P4 ?x0 .\nM3 P2 ?x0 .\nM3 P3 ?x0 .\nM3 P4 ?x0\n}",
        "recursionDepth": 40,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P21 wd:Q6581097 .\n?x0 wdt:P26 wd:Q6813152 .\nFILTER ( ?x0 != wd:Q6813152 ) .\nwd:Q17738 wdt:P1040 ?x0 .\nwd:Q17738 wdt:P1431 ?x0 .\nwd:Q17738 wdt:P58 ?x0 .\nwd:Q181803 wdt:P1040 ?x0 .\nwd:Q181803 wdt:P1431 ?x0 .\nwd:Q181803 wdt:P58 ?x0\n}",
        "questionWithBrackets": "Were [Star Wars: Episode VI \u2013 Return of the Jedi] and [Star Wars: Episode IV \u2013 A New Hope] executive produced , written , and edited by a male spouse of [Mellody Hobson]"
    },
    {
        "questionIdx": 123909,
        "questionPatternModEntities": "Were M0 , M2 , and M3 produced , edited , and directed by M1",
        "questionTemplate": "Were [entity] , [entity] , and [entity] [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1 .\nM0 P2 M1 .\nM2 P0 M1 .\nM2 P1 M1 .\nM2 P2 M1 .\nM3 P0 M1 .\nM3 P1 M1 .\nM3 P2 M1\n}",
        "recursionDepth": 31,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q1148649 wdt:P57 wd:Q882 .\nwd:Q1148649 wdt:P1040 wd:Q882 .\nwd:Q1148649 wdt:P162|wdt:P272 wd:Q882 .\nwd:Q166739 wdt:P57 wd:Q882 .\nwd:Q166739 wdt:P1040 wd:Q882 .\nwd:Q166739 wdt:P162|wdt:P272 wd:Q882 .\nwd:Q199039 wdt:P57 wd:Q882 .\nwd:Q199039 wdt:P1040 wd:Q882 .\nwd:Q199039 wdt:P162|wdt:P272 wd:Q882\n}",
        "questionWithBrackets": "Were [The Idle Class] , [The Floorwalker] , and [Pay Day] produced , edited , and directed by [Charlie Chaplin]"
    },
    {
        "questionIdx": 123922,
        "questionPatternModEntities": "Were M0 and M2 executive produced and written by M1",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1 .\nM2 P0 M1 .\nM2 P1 M1\n}",
        "recursionDepth": 24,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q17738 wdt:P1431 wd:Q38222 .\nwd:Q17738 wdt:P58 wd:Q38222 .\nwd:Q515931 wdt:P1431 wd:Q38222 .\nwd:Q515931 wdt:P58 wd:Q38222\n}",
        "questionWithBrackets": "Were [Star Wars: Episode IV \u2013 A New Hope] and [Willow] executive produced and written by [George Lucas]"
    },
    {
        "questionIdx": 123927,
        "questionPatternModEntities": "Were M0 , M2 , and M3 executive produced by and written by M1",
        "questionTemplate": "Were [entity] , [entity] , and [entity] [VP_SIMPLE] by and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1 .\nM2 P0 M1 .\nM2 P1 M1 .\nM3 P0 M1 .\nM3 P1 M1\n}",
        "recursionDepth": 28,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q3968346 wdt:P1431 wd:Q38222 .\nwd:Q3968346 wdt:P58 wd:Q38222 .\nwd:Q515931 wdt:P1431 wd:Q38222 .\nwd:Q515931 wdt:P58 wd:Q38222 .\nwd:Q17738 wdt:P1431 wd:Q38222 .\nwd:Q17738 wdt:P58 wd:Q38222\n}",
        "questionWithBrackets": "Were [Willow] , [Star Whores] , and [Star Wars: Episode IV \u2013 A New Hope] executive produced by and written by [George Lucas]"
    },
    {
        "questionIdx": 123964,
        "questionPatternModEntities": "Were M1 and M5 produced by M2 , written by a employee of M0 , and directed by M3 and M4",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by [entity] , [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity] , and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 ?x0 .\nM1 P2 M2 .\nM1 P3 M3 .\nM1 P3 M4 .\nM5 P1 ?x0 .\nM5 P2 M2 .\nM5 P3 M3 .\nM5 P3 M4\n}",
        "recursionDepth": 46,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P108 wd:Q834328 .\nwd:Q614200 wdt:P57 wd:Q742757 .\nwd:Q614200 wdt:P57 wd:Q23261 .\nwd:Q614200 wdt:P162|wdt:P272 wd:Q1203676 .\nwd:Q614200 wdt:P58 ?x0 .\nwd:Q6434144 wdt:P57 wd:Q742757 .\nwd:Q6434144 wdt:P57 wd:Q23261 .\nwd:Q6434144 wdt:P162|wdt:P272 wd:Q1203676 .\nwd:Q6434144 wdt:P58 ?x0\n}",
        "questionWithBrackets": "Were [Evangelion: 3.0+1.0 Thrice Upon a Time] and [Evangelion: 2.0 You Can (Not) Advance] produced by [Khara] , written by a employee of [Gainax] , and directed by [Kazuya Tsurumaki] and [Hideaki Anno]"
    },
    {
        "questionIdx": 123973,
        "questionPatternModEntities": "Were M2 and M4 influenced by M0 's American employee 's spouse and influenced by M3",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] 's [ROLE_SIMPLE] and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x1 P1 M0 .\n?x1 P2 M1 .\nFILTER ( ?x0 != ?x1 ) .\nM2 P3 ?x0 .\nM2 P3 M3 .\nM4 P3 ?x0 .\nM4 P3 M3\n}",
        "recursionDepth": 40,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P26 ?x1 .\n?x1 wdt:P108 wd:Q15142 .\n?x1 wdt:P27 wd:Q30 .\nFILTER ( ?x0 != ?x1 ) .\nwd:Q3370330 wdt:P737 ?x0 .\nwd:Q3370330 wdt:P737 wd:Q410 .\nwd:Q310903 wdt:P737 ?x0 .\nwd:Q310903 wdt:P737 wd:Q410\n}",
        "questionWithBrackets": "Were [Neil deGrasse Tyson] and [Steven Soter] influenced by [University of Massachusetts Amherst] 's American employee 's spouse and influenced by [Carl Sagan]"
    },
    {
        "questionIdx": 123981,
        "questionPatternModEntities": "Were M1 , M2 , M3 , M4 , and M5 founded by a spouse of M0",
        "questionTemplate": "Were [entity] , [entity] , [entity] , [entity] , and [entity] [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nM1 P1 ?x0 .\nM2 P1 ?x0 .\nM3 P1 ?x0 .\nM4 P1 ?x0 .\nM5 P1 ?x0\n}",
        "recursionDepth": 31,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P26 wd:Q13564310 .\nFILTER ( ?x0 != wd:Q13564310 ) .\nwd:Q53576555 wdt:P112 ?x0 .\nwd:Q13679 wdt:P112 ?x0 .\nwd:Q151 wdt:P112 ?x0 .\nwd:Q17458 wdt:P112 ?x0 .\nwd:Q180 wdt:P112 ?x0\n}",
        "questionWithBrackets": "Were [Nupedia] , [Wikimedia Foundation] , [Community Central] , [Wikispecies] , and [Wiktionary] founded by a spouse of [Kate Garvey]"
    },
    {
        "questionIdx": 124008,
        "questionPatternModEntities": "Were M0 , M2 , M3 , and M4 directed , written , and edited by M1",
        "questionTemplate": "Were [entity] , [entity] , [entity] , and [entity] [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1 .\nM0 P2 M1 .\nM2 P0 M1 .\nM2 P1 M1 .\nM2 P2 M1 .\nM3 P0 M1 .\nM3 P1 M1 .\nM3 P2 M1 .\nM4 P0 M1 .\nM4 P1 M1 .\nM4 P2 M1\n}",
        "recursionDepth": 34,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q1194546 wdt:P57 wd:Q8006 .\nwd:Q1194546 wdt:P1040 wd:Q8006 .\nwd:Q1194546 wdt:P58 wd:Q8006 .\nwd:Q152105 wdt:P57 wd:Q8006 .\nwd:Q152105 wdt:P1040 wd:Q8006 .\nwd:Q152105 wdt:P58 wd:Q8006 .\nwd:Q39946 wdt:P57 wd:Q8006 .\nwd:Q39946 wdt:P1040 wd:Q8006 .\nwd:Q39946 wdt:P58 wd:Q8006 .\nwd:Q189540 wdt:P57 wd:Q8006 .\nwd:Q189540 wdt:P1040 wd:Q8006 .\nwd:Q189540 wdt:P58 wd:Q8006\n}",
        "questionWithBrackets": "Were [Seven Samurai] , [Ikiru] , [The Idiot] , and [The Hidden Fortress] directed , written , and edited by [Akira Kurosawa]"
    },
    {
        "questionIdx": 124009,
        "questionPatternModEntities": "Were M0 , M2 , M3 , and M4 edited and written by M1",
        "questionTemplate": "Were [entity] , [entity] , [entity] , and [entity] [VP_SIMPLE] and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1 .\nM2 P0 M1 .\nM2 P1 M1 .\nM3 P0 M1 .\nM3 P1 M1 .\nM4 P0 M1 .\nM4 P1 M1\n}",
        "recursionDepth": 29,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q2718259 wdt:P1040 wd:Q882 .\nwd:Q2718259 wdt:P58 wd:Q882 .\nwd:Q45602 wdt:P1040 wd:Q882 .\nwd:Q45602 wdt:P58 wd:Q882 .\nwd:Q166739 wdt:P1040 wd:Q882 .\nwd:Q166739 wdt:P58 wd:Q882 .\nwd:Q199039 wdt:P1040 wd:Q882 .\nwd:Q199039 wdt:P58 wd:Q882\n}",
        "questionWithBrackets": "Were [Modern Times] , [Pay Day] , [The Floorwalker] , and [The Professor] edited and written by [Charlie Chaplin]"
    },
    {
        "questionIdx": 124035,
        "questionPatternModEntities": "Were M2 and M3 directed and edited by a female spouse of M1",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] and [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M1 ) .\nM2 P2 ?x0 .\nM2 P3 ?x0 .\nM3 P2 ?x0 .\nM3 P3 ?x0\n}",
        "recursionDepth": 34,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P21 wd:Q6581072 .\n?x0 wdt:P26 wd:Q16266828 .\nFILTER ( ?x0 != wd:Q16266828 ) .\nwd:Q156497 wdt:P57 ?x0 .\nwd:Q156497 wdt:P1040 ?x0 .\nwd:Q158069 wdt:P57 ?x0 .\nwd:Q158069 wdt:P1040 ?x0\n}",
        "questionWithBrackets": "Were [Olympia] and [Triumph of the Will] directed and edited by a female spouse of [Horst Kettner]"
    },
    {
        "questionIdx": 124129,
        "questionPatternModEntities": "Were M0 , M3 , and M4 written and directed by M1 and M2",
        "questionTemplate": "Were [entity] , [entity] , and [entity] [VP_SIMPLE] and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P1 M1 .\nM0 P1 M2 .\nM3 P0 M1 .\nM3 P0 M2 .\nM3 P1 M1 .\nM3 P1 M2 .\nM4 P0 M1 .\nM4 P0 M2 .\nM4 P1 M1 .\nM4 P1 M2\n}",
        "recursionDepth": 30,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q2529345 wdt:P57 wd:Q8003 .\nwd:Q2529345 wdt:P57 wd:Q561459 .\nwd:Q2529345 wdt:P58 wd:Q8003 .\nwd:Q2529345 wdt:P58 wd:Q561459 .\nwd:Q1156836 wdt:P57 wd:Q8003 .\nwd:Q1156836 wdt:P57 wd:Q561459 .\nwd:Q1156836 wdt:P58 wd:Q8003 .\nwd:Q1156836 wdt:P58 wd:Q561459 .\nwd:Q2581338 wdt:P57 wd:Q8003 .\nwd:Q2581338 wdt:P57 wd:Q561459 .\nwd:Q2581338 wdt:P58 wd:Q8003 .\nwd:Q2581338 wdt:P58 wd:Q561459\n}",
        "questionWithBrackets": "Were [October: Ten Days That Shook the World] , [\u00a1Que viva M\u00e9xico!] , and [The General Line] written and directed by [Grigori Aleksandrov] and [Sergei Eisenstein]"
    },
    {
        "questionIdx": 124131,
        "questionPatternModEntities": "Were M0 , M2 , M3 , and M4 Italian",
        "questionTemplate": "Were [entity] , [entity] , [entity] , and [entity] [ADJECTIVE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM2 P0 M1 .\nM3 P0 M1 .\nM4 P0 M1\n}",
        "recursionDepth": 19,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q765 wdt:P27 wd:Q38 .\nwd:Q615 wdt:P27 wd:Q38 .\nwd:Q624 wdt:P27 wd:Q38 .\nwd:Q1220 wdt:P27 wd:Q38\n}",
        "questionWithBrackets": "Were [Lionel Messi] , [Giorgio Napolitano] , [Alessandro Del Piero] , and [Dario Fo] Italian"
    },
    {
        "questionIdx": 124145,
        "questionPatternModEntities": "Were M0 , M2 , M3 , M4 , and M5 influenced by M1",
        "questionTemplate": "Were [entity] , [entity] , [entity] , [entity] , and [entity] [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM2 P0 M1 .\nM3 P0 M1 .\nM4 P0 M1 .\nM5 P0 M1\n}",
        "recursionDepth": 25,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q13005 wdt:P737 wd:Q504 .\nwd:Q228546 wdt:P737 wd:Q504 .\nwd:Q9327 wdt:P737 wd:Q504 .\nwd:Q165756 wdt:P737 wd:Q504 .\nwd:Q5685 wdt:P737 wd:Q504\n}",
        "questionWithBrackets": "Were [Simon Holl\u00f3sy] , [Anton Chekhov] , [Guy de Maupassant] , [Ba Jin] , and [Alphonse Daudet] influenced by [\u00c9mile Zola]"
    },
    {
        "questionIdx": 124159,
        "questionPatternModEntities": "Were M0 and M6 directed by M5 , executive produced by M1 and M2 , and executive produced by M3 and M4",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] and [entity] , and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P0 M3 .\nM0 P0 M4 .\nM0 P1 M5 .\nM6 P0 M1 .\nM6 P0 M2 .\nM6 P0 M3 .\nM6 P0 M4 .\nM6 P1 M5\n}",
        "recursionDepth": 46,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q127367 wdt:P57 wd:Q4465 .\nwd:Q127367 wdt:P1431 wd:Q888311 .\nwd:Q127367 wdt:P1431 wd:Q531599 .\nwd:Q127367 wdt:P1431 wd:Q6832375 .\nwd:Q127367 wdt:P1431 wd:Q421488 .\nwd:Q131074 wdt:P57 wd:Q4465 .\nwd:Q131074 wdt:P1431 wd:Q888311 .\nwd:Q131074 wdt:P1431 wd:Q531599 .\nwd:Q131074 wdt:P1431 wd:Q6832375 .\nwd:Q131074 wdt:P1431 wd:Q421488\n}",
        "questionWithBrackets": "Were [The Lord of the Rings: The Return of the King] and [The Lord of the Rings: The Fellowship of the Ring] directed by [Peter Jackson] , executive produced by [Bob Weinstein] and [Michael Lynne] , and executive produced by [Harvey Weinstein] and [Mark Ordesky]"
    },
    {
        "questionIdx": 124183,
        "questionPatternModEntities": "Were M0 and M6 executive produced by M1 and M2 , written by M4 and M5 , and executive produced by M3",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by [entity] and [entity] , [VP_SIMPLE] by [entity] and [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P0 M3 .\nM0 P1 M4 .\nM0 P1 M5 .\nM6 P0 M1 .\nM6 P0 M2 .\nM6 P0 M3 .\nM6 P1 M4 .\nM6 P1 M5\n}",
        "recursionDepth": 46,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q22350906 wdt:P1431 wd:Q8877 .\nwd:Q22350906 wdt:P1431 wd:Q237207 .\nwd:Q22350906 wdt:P1431 wd:Q549570 .\nwd:Q22350906 wdt:P58 wd:Q28855446 .\nwd:Q22350906 wdt:P58 wd:Q1151111 .\nwd:Q3362144 wdt:P1431 wd:Q8877 .\nwd:Q3362144 wdt:P1431 wd:Q237207 .\nwd:Q3362144 wdt:P1431 wd:Q549570 .\nwd:Q3362144 wdt:P58 wd:Q28855446 .\nwd:Q3362144 wdt:P58 wd:Q1151111\n}",
        "questionWithBrackets": "Were [Trail Mix-Up] and [Tummy Trouble] executive produced by [Kathleen Kennedy] and [Frank Marshall] , written by [Patrick A. Ventura] and [Rob Minkoff] , and executive produced by [Steven Spielberg]"
    },
    {
        "questionIdx": 124200,
        "questionPatternModEntities": "Were M0 and M5 edited by M3 , executive produced by M1 , directed by M4 , and written by M2",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M2 .\nM0 P2 M3 .\nM0 P3 M4 .\nM5 P0 M1 .\nM5 P1 M2 .\nM5 P2 M3 .\nM5 P3 M4\n}",
        "recursionDepth": 46,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q91540 wdt:P57 wd:Q187364 .\nwd:Q91540 wdt:P1040 wd:Q1586598 .\nwd:Q91540 wdt:P1431 wd:Q8877 .\nwd:Q91540 wdt:P58 wd:Q725773 .\nwd:Q230552 wdt:P57 wd:Q187364 .\nwd:Q230552 wdt:P1040 wd:Q1586598 .\nwd:Q230552 wdt:P1431 wd:Q8877 .\nwd:Q230552 wdt:P58 wd:Q725773\n}",
        "questionWithBrackets": "Were [Back to the Future] and [Back to the Future Part III] edited by [Harry Keramidas] , executive produced by [Steven Spielberg] , directed by [Robert Zemeckis] , and written by [Bob Gale]"
    },
    {
        "questionIdx": 124275,
        "questionPatternModEntities": "Were M1 , M4 , M5 , and M6 edited by M3 , directed by a spouse of M0 , and executive produced by M2",
        "questionTemplate": "Were [entity] , [entity] , [entity] , and [entity] [VP_SIMPLE] by [entity] , [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nM1 P1 M2 .\nM1 P2 M3 .\nM1 P3 ?x0 .\nM4 P1 M2 .\nM4 P2 M3 .\nM4 P3 ?x0 .\nM5 P1 M2 .\nM5 P2 M3 .\nM5 P3 ?x0 .\nM6 P1 M2 .\nM6 P2 M3 .\nM6 P3 ?x0\n}",
        "recursionDepth": 49,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P26 wd:Q40162 .\nFILTER ( ?x0 != wd:Q40162 ) .\nwd:Q202028 wdt:P57 ?x0 .\nwd:Q202028 wdt:P1040 wd:Q692550 .\nwd:Q202028 wdt:P1431 wd:Q237207 .\nwd:Q19689203 wdt:P57 ?x0 .\nwd:Q19689203 wdt:P1040 wd:Q692550 .\nwd:Q19689203 wdt:P1431 wd:Q237207 .\nwd:Q483941 wdt:P57 ?x0 .\nwd:Q483941 wdt:P1040 wd:Q692550 .\nwd:Q483941 wdt:P1431 wd:Q237207 .\nwd:Q200873 wdt:P57 ?x0 .\nwd:Q200873 wdt:P1040 wd:Q692550 .\nwd:Q200873 wdt:P1431 wd:Q237207\n}",
        "questionWithBrackets": "Were [The BFG] , [Schindler's List] , [The Lost World: Jurassic Park] , and [War of the Worlds] edited by [Michael Kahn] , directed by a spouse of [Kate Capshaw] , and executive produced by [Kathleen Kennedy]"
    },
    {
        "questionIdx": 124280,
        "questionPatternModEntities": "Were M2 , M4 , M5 , M6 , and M7 executive produced by M3 and directed by a male parent of M1",
        "questionTemplate": "Were [entity] , [entity] , [entity] , [entity] , and [entity] [VP_SIMPLE] by [entity] and [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nM2 P2 M3 .\nM2 P3 ?x0 .\nM4 P2 M3 .\nM4 P3 ?x0 .\nM5 P2 M3 .\nM5 P3 ?x0 .\nM6 P2 M3 .\nM6 P3 ?x0 .\nM7 P2 M3 .\nM7 P3 ?x0\n}",
        "recursionDepth": 48,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q26857995 .\n?x0 wdt:P21 wd:Q6581097 .\nwd:Q2661044 wdt:P57 ?x0 .\nwd:Q2661044 wdt:P1431 wd:Q8877 .\nwd:Q91540 wdt:P57 ?x0 .\nwd:Q91540 wdt:P1431 wd:Q8877 .\nwd:Q109331 wdt:P57 ?x0 .\nwd:Q109331 wdt:P1431 wd:Q8877 .\nwd:Q379873 wdt:P57 ?x0 .\nwd:Q379873 wdt:P1431 wd:Q8877 .\nwd:Q230552 wdt:P57 ?x0 .\nwd:Q230552 wdt:P1431 wd:Q8877\n}",
        "questionWithBrackets": "Were [Back to the Future] , [I Wanna Hold Your Hand] , [Back to the Future Part II] , [Who Framed Roger Rabbit] , and [Back to the Future Part III] executive produced by [Steven Spielberg] and directed by a male parent of [Alexander Zemeckis]"
    },
    {
        "questionIdx": 124296,
        "questionPatternModEntities": "Were M1 , M4 , and M5 executive produced by M0 's parent , executive produced by M2 , and edited by M3",
        "questionTemplate": "Were [entity] , [entity] , and [entity] [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 ?x0 .\nM1 P1 M2 .\nM1 P2 M3 .\nM4 P1 ?x0 .\nM4 P1 M2 .\nM4 P2 M3 .\nM5 P1 ?x0 .\nM5 P1 M2 .\nM5 P2 M3\n}",
        "recursionDepth": 45,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q40057 .\nwd:Q230552 wdt:P1040 wd:Q1586598 .\nwd:Q230552 wdt:P1431 ?x0 .\nwd:Q230552 wdt:P1431 wd:Q8877 .\nwd:Q91540 wdt:P1040 wd:Q1586598 .\nwd:Q91540 wdt:P1431 ?x0 .\nwd:Q91540 wdt:P1431 wd:Q8877 .\nwd:Q109331 wdt:P1040 wd:Q1586598 .\nwd:Q109331 wdt:P1431 ?x0 .\nwd:Q109331 wdt:P1431 wd:Q8877\n}",
        "questionWithBrackets": "Were [Back to the Future Part II] , [Back to the Future Part III] , and [Back to the Future] executive produced by [Jessica Capshaw] 's parent , executive produced by [Steven Spielberg] , and edited by [Harry Keramidas]"
    },
    {
        "questionIdx": 124309,
        "questionPatternModEntities": "Were M0 and M5 written by M1 , M2 , M3 , and M4",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by [entity] , [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P0 M3 .\nM0 P0 M4 .\nM5 P0 M1 .\nM5 P0 M2 .\nM5 P0 M3 .\nM5 P0 M4\n}",
        "recursionDepth": 26,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q28865118 wdt:P58 wd:Q2593 .\nwd:Q28865118 wdt:P58 wd:Q7475875 .\nwd:Q28865118 wdt:P58 wd:Q32661 .\nwd:Q28865118 wdt:P58 wd:Q4805527 .\nwd:Q223596 wdt:P58 wd:Q2593 .\nwd:Q223596 wdt:P58 wd:Q7475875 .\nwd:Q223596 wdt:P58 wd:Q32661 .\nwd:Q223596 wdt:P58 wd:Q4805527\n}",
        "questionWithBrackets": "Were [X-Men: First Class] and [X-Men Beginnings] written by [Jane Goldman] , [Ashley Miller] , [Matthew Vaughn] , and [Zack Stentz]"
    },
    {
        "questionIdx": 124312,
        "questionPatternModEntities": "Were M2 , M4 , and M5 directed by a female sibling of M0 and directed by M3",
        "questionTemplate": "Were [entity] , [entity] , and [entity] [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M0 ) .\nM2 P2 ?x0 .\nM2 P2 M3 .\nM4 P2 ?x0 .\nM4 P2 M3 .\nM5 P2 ?x0 .\nM5 P2 M3\n}",
        "recursionDepth": 41,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P21 wd:Q6581072 .\n?x0 wdt:P3373 wd:Q5112102 .\nFILTER ( ?x0 != wd:Q5112102 ) .\nwd:Q946478 wdt:P57 ?x0 .\nwd:Q946478 wdt:P57 wd:Q1744 .\nwd:Q1235550 wdt:P57 ?x0 .\nwd:Q1235550 wdt:P57 wd:Q1744 .\nwd:Q6317291 wdt:P57 ?x0 .\nwd:Q6317291 wdt:P57 wd:Q1744\n}",
        "questionWithBrackets": "Were [Justify My Love] , [Filth and Wisdom] , and [W.E.] directed by a female sibling of [Christopher Ciccone] and directed by [Madonna]"
    },
    {
        "questionIdx": 124341,
        "questionPatternModEntities": "Were M2 , M4 , and M5 produced by M3 and written by a Swedish sibling of M0",
        "questionTemplate": "Were [entity] , [entity] , and [entity] [VP_SIMPLE] by [entity] and [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M0 ) .\nM2 P2 ?x0 .\nM2 P3 M3 .\nM4 P2 ?x0 .\nM4 P3 M3 .\nM5 P2 ?x0 .\nM5 P3 M3\n}",
        "recursionDepth": 41,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P27 wd:Q34 .\n?x0 wdt:P3373 wd:Q4938582 .\nFILTER ( ?x0 != wd:Q4938582 ) .\nwd:Q592902 wdt:P162|wdt:P272 wd:Q2837702 .\nwd:Q592902 wdt:P58 ?x0 .\nwd:Q425669 wdt:P162|wdt:P272 wd:Q2837702 .\nwd:Q425669 wdt:P58 ?x0 .\nwd:Q239756 wdt:P162|wdt:P272 wd:Q2837702 .\nwd:Q239756 wdt:P58 ?x0\n}",
        "questionWithBrackets": "Were [All These Women] , [Summer Interlude] , and [Wild Strawberries] produced by [Allan Ekelund] and written by a Swedish sibling of [Margareta Bergman]"
    },
    {
        "questionIdx": 124371,
        "questionPatternModEntities": "Were M0 and M6 executive produced by M1 , executive produced by M2 , and executive produced by M3 , M4 , and M5",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P0 M3 .\nM0 P0 M4 .\nM0 P0 M5 .\nM6 P0 M1 .\nM6 P0 M2 .\nM6 P0 M3 .\nM6 P0 M4 .\nM6 P0 M5\n}",
        "recursionDepth": 46,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q57651904 wdt:P1431 wd:Q2484170 .\nwd:Q57651904 wdt:P1431 wd:Q6758569 .\nwd:Q57651904 wdt:P1431 wd:Q2910308 .\nwd:Q57651904 wdt:P1431 wd:Q16874411 .\nwd:Q57651904 wdt:P1431 wd:Q2016115 .\nwd:Q7711132 wdt:P1431 wd:Q2484170 .\nwd:Q7711132 wdt:P1431 wd:Q6758569 .\nwd:Q7711132 wdt:P1431 wd:Q2910308 .\nwd:Q7711132 wdt:P1431 wd:Q16874411 .\nwd:Q7711132 wdt:P1431 wd:Q2016115\n}",
        "questionWithBrackets": "Were [Red's Last Day] and [That '70s Pilot] executive produced by [Terry Turner] , executive produced by [Marcy Carsey] , and executive produced by [Bonnie Turner] , [Tom Werner] , and [Mark Brazill]"
    },
    {
        "questionIdx": 124382,
        "questionPatternModEntities": "Were M2 and M3 edited by and written by a Japanese sibling of M0",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by and [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M0 ) .\nM2 P2 ?x0 .\nM2 P3 ?x0 .\nM3 P2 ?x0 .\nM3 P3 ?x0\n}",
        "recursionDepth": 35,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P27 wd:Q17 .\n?x0 wdt:P3373 wd:Q11404271 .\nFILTER ( ?x0 != wd:Q11404271 ) .\nwd:Q148330 wdt:P1040 ?x0 .\nwd:Q148330 wdt:P58 ?x0 .\nwd:Q260208 wdt:P1040 ?x0 .\nwd:Q260208 wdt:P58 ?x0\n}",
        "questionWithBrackets": "Were [Dolls] and [Zat\u014dichi] edited by and written by a Japanese sibling of [Masaru Kitano]"
    },
    {
        "questionIdx": 124390,
        "questionPatternModEntities": "Were M0 , M2 , and M3 edited and written by M1",
        "questionTemplate": "Were [entity] , [entity] , and [entity] [VP_SIMPLE] and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1 .\nM2 P0 M1 .\nM2 P1 M1 .\nM3 P0 M1 .\nM3 P1 M1\n}",
        "recursionDepth": 26,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q2005041 wdt:P1040 wd:Q8006 .\nwd:Q2005041 wdt:P58 wd:Q8006 .\nwd:Q418809 wdt:P1040 wd:Q8006 .\nwd:Q418809 wdt:P58 wd:Q8006 .\nwd:Q135465 wdt:P1040 wd:Q8006 .\nwd:Q135465 wdt:P58 wd:Q8006\n}",
        "questionWithBrackets": "Were [Rashomon] , [The Bad Sleep Well] , and [Dreams] edited and written by [Akira Kurosawa]"
    },
    {
        "questionIdx": 124471,
        "questionPatternModEntities": "Were M0 , M2 , and M3 directed by , edited by , executive produced by , written by , and produced by M1",
        "questionTemplate": "Were [entity] , [entity] , and [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1 .\nM0 P2 M1 .\nM0 P3 M1 .\nM0 P4 M1 .\nM2 P0 M1 .\nM2 P1 M1 .\nM2 P2 M1 .\nM2 P3 M1 .\nM2 P4 M1 .\nM3 P0 M1 .\nM3 P1 M1 .\nM3 P2 M1 .\nM3 P3 M1 .\nM3 P4 M1\n}",
        "recursionDepth": 46,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q484679 wdt:P57 wd:Q212990 .\nwd:Q484679 wdt:P1040 wd:Q212990 .\nwd:Q484679 wdt:P1431 wd:Q212990 .\nwd:Q484679 wdt:P162|wdt:P272 wd:Q212990 .\nwd:Q484679 wdt:P58 wd:Q212990 .\nwd:Q13471372 wdt:P57 wd:Q212990 .\nwd:Q13471372 wdt:P1040 wd:Q212990 .\nwd:Q13471372 wdt:P1431 wd:Q212990 .\nwd:Q13471372 wdt:P162|wdt:P272 wd:Q212990 .\nwd:Q13471372 wdt:P58 wd:Q212990 .\nwd:Q483197 wdt:P57 wd:Q212990 .\nwd:Q483197 wdt:P1040 wd:Q212990 .\nwd:Q483197 wdt:P1431 wd:Q212990 .\nwd:Q483197 wdt:P162|wdt:P272 wd:Q212990 .\nwd:Q483197 wdt:P58 wd:Q212990\n}",
        "questionWithBrackets": "Were [Dream] , [Piet\u00e0] , and [Moebius] directed by , edited by , executive produced by , written by , and produced by [Kim Ki-duk]"
    },
    {
        "questionIdx": 124497,
        "questionPatternModEntities": "Were M0 and M2 Chinese",
        "questionTemplate": "Were [entity] and [entity] [ADJECTIVE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM2 P0 M1\n}",
        "recursionDepth": 13,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q71874 wdt:P27 wd:Q148 .\nwd:Q1708 wdt:P27 wd:Q148\n}",
        "questionWithBrackets": "Were [Liang Sicheng] and [Chen Ding] Chinese"
    },
    {
        "questionIdx": 124511,
        "questionPatternModEntities": "Were M0 , M6 , and M7 directed by M5 , written by M1 , and written by M2 , M3 , and M4",
        "questionTemplate": "Were [entity] , [entity] , and [entity] [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P0 M3 .\nM0 P0 M4 .\nM0 P1 M5 .\nM6 P0 M1 .\nM6 P0 M2 .\nM6 P0 M3 .\nM6 P0 M4 .\nM6 P1 M5 .\nM7 P0 M1 .\nM7 P0 M2 .\nM7 P0 M3 .\nM7 P0 M4 .\nM7 P1 M5\n}",
        "recursionDepth": 46,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q24980 wdt:P57 wd:Q166159 .\nwd:Q24980 wdt:P58 wd:Q24962 .\nwd:Q24980 wdt:P58 wd:Q25078 .\nwd:Q24980 wdt:P58 wd:Q210741 .\nwd:Q24980 wdt:P58 wd:Q25014 .\nwd:Q25043 wdt:P57 wd:Q166159 .\nwd:Q25043 wdt:P58 wd:Q24962 .\nwd:Q25043 wdt:P58 wd:Q25078 .\nwd:Q25043 wdt:P58 wd:Q210741 .\nwd:Q25043 wdt:P58 wd:Q25014 .\nwd:Q24953 wdt:P57 wd:Q166159 .\nwd:Q24953 wdt:P58 wd:Q24962 .\nwd:Q24953 wdt:P58 wd:Q25078 .\nwd:Q24953 wdt:P58 wd:Q210741 .\nwd:Q24953 wdt:P58 wd:Q25014\n}",
        "questionWithBrackets": "Were [Monty Python\u2019s Life of Brian] , [Monty Python's The Meaning of Life] , and [Monty Python and the Holy Grail] directed by [Terry Jones] , written by [Eric Idle] , and written by [Terry Gilliam] , [Graham Chapman] , and [John Cleese]"
    },
    {
        "questionIdx": 124541,
        "questionPatternModEntities": "Were M0 , M2 , and M3 written by , directed by , and edited by M1",
        "questionTemplate": "Were [entity] , [entity] , and [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1 .\nM0 P2 M1 .\nM2 P0 M1 .\nM2 P1 M1 .\nM2 P2 M1 .\nM3 P0 M1 .\nM3 P1 M1 .\nM3 P2 M1\n}",
        "recursionDepth": 33,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q1543027 wdt:P57 wd:Q8006 .\nwd:Q1543027 wdt:P1040 wd:Q8006 .\nwd:Q1543027 wdt:P58 wd:Q8006 .\nwd:Q20475 wdt:P57 wd:Q8006 .\nwd:Q20475 wdt:P1040 wd:Q8006 .\nwd:Q20475 wdt:P58 wd:Q8006 .\nwd:Q257818 wdt:P57 wd:Q8006 .\nwd:Q257818 wdt:P1040 wd:Q8006 .\nwd:Q257818 wdt:P58 wd:Q8006\n}",
        "questionWithBrackets": "Were [Throne of Blood] , [Madadayo] , and [Yojimbo] written by , directed by , and edited by [Akira Kurosawa]"
    },
    {
        "questionIdx": 124566,
        "questionPatternModEntities": "Were M0 , M3 , and M4 edited , written , and directed by M1 and M2",
        "questionTemplate": "Were [entity] , [entity] , and [entity] [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P1 M1 .\nM0 P1 M2 .\nM0 P2 M1 .\nM0 P2 M2 .\nM3 P0 M1 .\nM3 P0 M2 .\nM3 P1 M1 .\nM3 P1 M2 .\nM3 P2 M1 .\nM3 P2 M2 .\nM4 P0 M1 .\nM4 P0 M2 .\nM4 P1 M1 .\nM4 P1 M2 .\nM4 P2 M1 .\nM4 P2 M2\n}",
        "recursionDepth": 35,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q20757119 wdt:P57 wd:Q562108 .\nwd:Q20757119 wdt:P57 wd:Q35979475 .\nwd:Q20757119 wdt:P1040 wd:Q562108 .\nwd:Q20757119 wdt:P1040 wd:Q35979475 .\nwd:Q20757119 wdt:P58 wd:Q562108 .\nwd:Q20757119 wdt:P58 wd:Q35979475 .\nwd:Q20729238 wdt:P57 wd:Q562108 .\nwd:Q20729238 wdt:P57 wd:Q35979475 .\nwd:Q20729238 wdt:P1040 wd:Q562108 .\nwd:Q20729238 wdt:P1040 wd:Q35979475 .\nwd:Q20729238 wdt:P58 wd:Q562108 .\nwd:Q20729238 wdt:P58 wd:Q35979475 .\nwd:Q20729551 wdt:P57 wd:Q562108 .\nwd:Q20729551 wdt:P57 wd:Q35979475 .\nwd:Q20729551 wdt:P1040 wd:Q562108 .\nwd:Q20729551 wdt:P1040 wd:Q35979475 .\nwd:Q20729551 wdt:P58 wd:Q562108 .\nwd:Q20729551 wdt:P58 wd:Q35979475\n}",
        "questionWithBrackets": "Were [Stop for Bud] , [No label defined] , and [Motion picture] edited , written , and directed by [J\u00f8rgen Leth] and [Ole John]"
    },
    {
        "questionIdx": 124569,
        "questionPatternModEntities": "Were M0 , M3 , and M4 written by , edited by , and directed by M1 and M2",
        "questionTemplate": "Were [entity] , [entity] , and [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P1 M1 .\nM0 P1 M2 .\nM0 P2 M1 .\nM0 P2 M2 .\nM3 P0 M1 .\nM3 P0 M2 .\nM3 P1 M1 .\nM3 P1 M2 .\nM3 P2 M1 .\nM3 P2 M2 .\nM4 P0 M1 .\nM4 P0 M2 .\nM4 P1 M1 .\nM4 P1 M2 .\nM4 P2 M1 .\nM4 P2 M2\n}",
        "recursionDepth": 37,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q20729238 wdt:P57 wd:Q562108 .\nwd:Q20729238 wdt:P57 wd:Q35979475 .\nwd:Q20729238 wdt:P1040 wd:Q562108 .\nwd:Q20729238 wdt:P1040 wd:Q35979475 .\nwd:Q20729238 wdt:P58 wd:Q562108 .\nwd:Q20729238 wdt:P58 wd:Q35979475 .\nwd:Q20729551 wdt:P57 wd:Q562108 .\nwd:Q20729551 wdt:P57 wd:Q35979475 .\nwd:Q20729551 wdt:P1040 wd:Q562108 .\nwd:Q20729551 wdt:P1040 wd:Q35979475 .\nwd:Q20729551 wdt:P58 wd:Q562108 .\nwd:Q20729551 wdt:P58 wd:Q35979475 .\nwd:Q20757119 wdt:P57 wd:Q562108 .\nwd:Q20757119 wdt:P57 wd:Q35979475 .\nwd:Q20757119 wdt:P1040 wd:Q562108 .\nwd:Q20757119 wdt:P1040 wd:Q35979475 .\nwd:Q20757119 wdt:P58 wd:Q562108 .\nwd:Q20757119 wdt:P58 wd:Q35979475\n}",
        "questionWithBrackets": "Were [Motion picture] , [No label defined] , and [Stop for Bud] written by , edited by , and directed by [Ole John] and [J\u00f8rgen Leth]"
    },
    {
        "questionIdx": 124591,
        "questionPatternModEntities": "Were M0 , M2 , and M3 directed by , edited by , and produced by M1",
        "questionTemplate": "Were [entity] , [entity] , and [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1 .\nM0 P2 M1 .\nM2 P0 M1 .\nM2 P1 M1 .\nM2 P2 M1 .\nM3 P0 M1 .\nM3 P1 M1 .\nM3 P2 M1\n}",
        "recursionDepth": 33,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q1070468 wdt:P57 wd:Q882 .\nwd:Q1070468 wdt:P1040 wd:Q882 .\nwd:Q1070468 wdt:P162|wdt:P272 wd:Q882 .\nwd:Q199039 wdt:P57 wd:Q882 .\nwd:Q199039 wdt:P1040 wd:Q882 .\nwd:Q199039 wdt:P162|wdt:P272 wd:Q882 .\nwd:Q166739 wdt:P57 wd:Q882 .\nwd:Q166739 wdt:P1040 wd:Q882 .\nwd:Q166739 wdt:P162|wdt:P272 wd:Q882\n}",
        "questionWithBrackets": "Were [The Immigrant] , [The Floorwalker] , and [Pay Day] directed by , edited by , and produced by [Charlie Chaplin]"
    },
    {
        "questionIdx": 124595,
        "questionPatternModEntities": "Were M2 and M3 written and directed by a Mexican sibling of M0",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] and [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M0 ) .\nM2 P2 ?x0 .\nM2 P3 ?x0 .\nM3 P2 ?x0 .\nM3 P3 ?x0\n}",
        "recursionDepth": 34,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P27 wd:Q96 .\n?x0 wdt:P3373 wd:Q2840325 .\nFILTER ( ?x0 != wd:Q2840325 ) .\nwd:Q128848 wdt:P57 ?x0 .\nwd:Q128848 wdt:P58 ?x0 .\nwd:Q221090 wdt:P57 ?x0 .\nwd:Q221090 wdt:P58 ?x0\n}",
        "questionWithBrackets": "Were [Children of Men] and [Y tu mam\u00e1 tambi\u00e9n] written and directed by a Mexican sibling of [Carlos Cuar\u00f3n]"
    },
    {
        "questionIdx": 124610,
        "questionPatternModEntities": "Were M3 and M5 directed by M4 and executive produced by a American employee of M0 and M1",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by [entity] and [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P1 M2 .\nM3 P2 ?x0 .\nM3 P3 M4 .\nM5 P2 ?x0 .\nM5 P3 M4\n}",
        "recursionDepth": 43,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P108 wd:Q179200 .\n?x0 wdt:P108 wd:Q4614 .\n?x0 wdt:P27 wd:Q30 .\nwd:Q1714201 wdt:P57 wd:Q435029 .\nwd:Q1714201 wdt:P1431 ?x0 .\nwd:Q860764 wdt:P57 wd:Q435029 .\nwd:Q860764 wdt:P1431 ?x0\n}",
        "questionWithBrackets": "Were [Letty Lynton] and [A Free Soul] directed by [Clarence Brown] and executive produced by a American employee of [Metro-Goldwyn-Mayer] and [University of Southern California]"
    },
    {
        "questionIdx": 124629,
        "questionPatternModEntities": "Were M1 , M4 , and M5 executive produced by M2 , edited by M3 , and executive produced by M0 's parent",
        "questionTemplate": "Were [entity] , [entity] , and [entity] [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 ?x0 .\nM1 P1 M2 .\nM1 P2 M3 .\nM4 P1 ?x0 .\nM4 P1 M2 .\nM4 P2 M3 .\nM5 P1 ?x0 .\nM5 P1 M2 .\nM5 P2 M3\n}",
        "recursionDepth": 45,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q7425114 .\nwd:Q230552 wdt:P1040 wd:Q1586598 .\nwd:Q230552 wdt:P1431 ?x0 .\nwd:Q230552 wdt:P1431 wd:Q8877 .\nwd:Q109331 wdt:P1040 wd:Q1586598 .\nwd:Q109331 wdt:P1431 ?x0 .\nwd:Q109331 wdt:P1431 wd:Q8877 .\nwd:Q91540 wdt:P1040 wd:Q1586598 .\nwd:Q91540 wdt:P1431 ?x0 .\nwd:Q91540 wdt:P1431 wd:Q8877\n}",
        "questionWithBrackets": "Were [Back to the Future Part II] , [Back to the Future Part III] , and [Back to the Future] executive produced by [Steven Spielberg] , edited by [Harry Keramidas] , and executive produced by [Sasha Spielberg] 's parent"
    },
    {
        "questionIdx": 124654,
        "questionPatternModEntities": "Were M2 , M3 , and M4 edited by , written by , produced by , and directed by a American spouse of M1",
        "questionTemplate": "Were [entity] , [entity] , and [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M1 ) .\nM2 P2 ?x0 .\nM2 P3 ?x0 .\nM2 P4 ?x0 .\nM2 P5 ?x0 .\nM3 P2 ?x0 .\nM3 P3 ?x0 .\nM3 P4 ?x0 .\nM3 P5 ?x0 .\nM4 P2 ?x0 .\nM4 P3 ?x0 .\nM4 P4 ?x0 .\nM4 P5 ?x0\n}",
        "recursionDepth": 50,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P27 wd:Q30 .\n?x0 wdt:P26 wd:Q465517 .\nFILTER ( ?x0 != wd:Q465517 ) .\nwd:Q549908 wdt:P57 ?x0 .\nwd:Q549908 wdt:P1040 ?x0 .\nwd:Q549908 wdt:P162|wdt:P272 ?x0 .\nwd:Q549908 wdt:P58 ?x0 .\nwd:Q93853 wdt:P57 ?x0 .\nwd:Q93853 wdt:P1040 ?x0 .\nwd:Q93853 wdt:P162|wdt:P272 ?x0 .\nwd:Q93853 wdt:P58 ?x0 .\nwd:Q550196 wdt:P57 ?x0 .\nwd:Q550196 wdt:P1040 ?x0 .\nwd:Q550196 wdt:P162|wdt:P272 ?x0 .\nwd:Q550196 wdt:P58 ?x0\n}",
        "questionWithBrackets": "Were [Spy Kids 3-D: Game Over] , [Once Upon a Time in Mexico] , and [Spy Kids 2: The Island of Lost Dreams] edited by , written by , produced by , and directed by a American spouse of [Elizabeth Avell\u00e1n Ochoa]"
    },
    {
        "questionIdx": 124657,
        "questionPatternModEntities": "Were M2 , M3 , and M4 edited by M0 's Mexican sibling 's sibling",
        "questionTemplate": "Were [entity] , [entity] , and [entity] [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x1 P0 M0 .\n?x1 P1 M1 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x1 != M0 ) .\nM2 P2 ?x0 .\nM3 P2 ?x0 .\nM4 P2 ?x0\n}",
        "recursionDepth": 32,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P3373 ?x1 .\n?x1 wdt:P27 wd:Q96 .\n?x1 wdt:P3373 wd:Q28028 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x1 != wd:Q28028 ) .\nwd:Q2579784 wdt:P1040 ?x0 .\nwd:Q128848 wdt:P1040 ?x0 .\nwd:Q27959455 wdt:P1040 ?x0\n}",
        "questionWithBrackets": "Were [Roma] , [Gravity] , and [Y tu mam\u00e1 tambi\u00e9n] edited by [Alfonso Cuar\u00f3n] 's Mexican sibling 's sibling"
    },
    {
        "questionIdx": 124666,
        "questionPatternModEntities": "Were M1 , M2 , M3 , and M4 edited by and produced by M0 's sibling",
        "questionTemplate": "Were [entity] , [entity] , [entity] , and [entity] [VP_SIMPLE] by and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nM1 P1 ?x0 .\nM1 P2 ?x0 .\nM2 P1 ?x0 .\nM2 P2 ?x0 .\nM3 P1 ?x0 .\nM3 P2 ?x0 .\nM4 P1 ?x0 .\nM4 P2 ?x0\n}",
        "recursionDepth": 34,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P3373 wd:Q3567655 .\nFILTER ( ?x0 != wd:Q3567655 ) .\nwd:Q669929 wdt:P1040 ?x0 .\nwd:Q669929 wdt:P162|wdt:P272 ?x0 .\nwd:Q166739 wdt:P1040 ?x0 .\nwd:Q166739 wdt:P162|wdt:P272 ?x0 .\nwd:Q199039 wdt:P1040 ?x0 .\nwd:Q199039 wdt:P162|wdt:P272 ?x0 .\nwd:Q374172 wdt:P1040 ?x0 .\nwd:Q374172 wdt:P162|wdt:P272 ?x0\n}",
        "questionWithBrackets": "Were [The Kid] , [The Circus] , [The Floorwalker] , and [Pay Day] edited by and produced by [Wheeler Dryden] 's sibling"
    },
    {
        "questionIdx": 124668,
        "questionPatternModEntities": "Were M1 , M3 , M4 , M5 , and M6 executive produced by M0 's spouse and executive produced by M2",
        "questionTemplate": "Were [entity] , [entity] , [entity] , [entity] , and [entity] [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nM1 P1 ?x0 .\nM1 P1 M2 .\nM3 P1 ?x0 .\nM3 P1 M2 .\nM4 P1 ?x0 .\nM4 P1 M2 .\nM5 P1 ?x0 .\nM5 P1 M2 .\nM6 P1 ?x0 .\nM6 P1 M2\n}",
        "recursionDepth": 42,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P26 wd:Q6813152 .\nFILTER ( ?x0 != wd:Q6813152 ) .\nwd:Q1506057 wdt:P1431 ?x0 .\nwd:Q1506057 wdt:P1431 wd:Q38222 .\nwd:Q192403 wdt:P1431 ?x0 .\nwd:Q192403 wdt:P1431 wd:Q38222 .\nwd:Q17738 wdt:P1431 ?x0 .\nwd:Q17738 wdt:P1431 wd:Q38222 .\nwd:Q165713 wdt:P1431 ?x0 .\nwd:Q165713 wdt:P1431 wd:Q38222 .\nwd:Q515931 wdt:P1431 ?x0 .\nwd:Q515931 wdt:P1431 wd:Q38222\n}",
        "questionWithBrackets": "Were [Star Wars: Episode IV \u2013 A New Hope] , [The Land Before Time] , [Red Tails] , [Willow] , and [Star Wars: Episode I \u2013 The Phantom Menace] executive produced by [Mellody Hobson] 's spouse and executive produced by [George Lucas]"
    },
    {
        "questionIdx": 124672,
        "questionPatternModEntities": "Were M1 and M3 written by M0 's sibling 's parent 's spouse and written by M2",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE] and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x1 P1 ?x2 .\n?x2 P2 M0 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x2 != M0 ) .\nM1 P3 ?x0 .\nM1 P3 M2 .\nM3 P3 ?x0 .\nM3 P3 M2\n}",
        "recursionDepth": 39,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P26 ?x1 .\n?x1 wdt:P40|wdt:P355 ?x2 .\n?x2 wdt:P3373 wd:Q453804 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x2 != wd:Q453804 ) .\nwd:Q1068968 wdt:P58 ?x0 .\nwd:Q1068968 wdt:P58 wd:Q882 .\nwd:Q199039 wdt:P58 ?x0 .\nwd:Q199039 wdt:P58 wd:Q882\n}",
        "questionWithBrackets": "Were [A King in New York] and [Pay Day] written by [Michael Chaplin] 's sibling 's parent 's spouse and written by [Charlie Chaplin]"
    },
    {
        "questionIdx": 124685,
        "questionPatternModEntities": "Were M0 , M2 , and M3 directed by and written by M1",
        "questionTemplate": "Were [entity] , [entity] , and [entity] [VP_SIMPLE] by and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1 .\nM2 P0 M1 .\nM2 P1 M1 .\nM3 P0 M1 .\nM3 P1 M1\n}",
        "recursionDepth": 27,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q1068968 wdt:P57 wd:Q882 .\nwd:Q1068968 wdt:P58 wd:Q882 .\nwd:Q109116 wdt:P57 wd:Q882 .\nwd:Q109116 wdt:P58 wd:Q882 .\nwd:Q166739 wdt:P57 wd:Q882 .\nwd:Q166739 wdt:P58 wd:Q882\n}",
        "questionWithBrackets": "Were [A King in New York] , [The Great Dictator] , and [The Floorwalker] directed by and written by [Charlie Chaplin]"
    },
    {
        "questionIdx": 124693,
        "questionPatternModEntities": "Were M0 and M3 edited by M1 and M2",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM3 P0 M1 .\nM3 P0 M2\n}",
        "recursionDepth": 20,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q171861 wdt:P1040 wd:Q28556 .\nwd:Q171861 wdt:P1040 wd:Q511727 .\nwd:Q16320113 wdt:P1040 wd:Q28556 .\nwd:Q16320113 wdt:P1040 wd:Q511727\n}",
        "questionWithBrackets": "Were [The Search] and [The Artist] edited by [Anne-Sophie Bion] and [Michel Hazanavicius]"
    },
    {
        "questionIdx": 124724,
        "questionPatternModEntities": "Were M0 , M2 , and M3 edited , written , produced , executive produced , and directed by M1",
        "questionTemplate": "Were [entity] , [entity] , and [entity] [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1 .\nM0 P2 M1 .\nM0 P3 M1 .\nM0 P4 M1 .\nM2 P0 M1 .\nM2 P1 M1 .\nM2 P2 M1 .\nM2 P3 M1 .\nM2 P4 M1 .\nM3 P0 M1 .\nM3 P1 M1 .\nM3 P2 M1 .\nM3 P3 M1 .\nM3 P4 M1\n}",
        "recursionDepth": 42,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q6084069 wdt:P57 wd:Q187261 .\nwd:Q6084069 wdt:P1040 wd:Q187261 .\nwd:Q6084069 wdt:P1431 wd:Q187261 .\nwd:Q6084069 wdt:P162|wdt:P272 wd:Q187261 .\nwd:Q6084069 wdt:P58 wd:Q187261 .\nwd:Q12813010 wdt:P57 wd:Q187261 .\nwd:Q12813010 wdt:P1040 wd:Q187261 .\nwd:Q12813010 wdt:P1431 wd:Q187261 .\nwd:Q12813010 wdt:P162|wdt:P272 wd:Q187261 .\nwd:Q12813010 wdt:P58 wd:Q187261 .\nwd:Q5437360 wdt:P57 wd:Q187261 .\nwd:Q5437360 wdt:P1040 wd:Q187261 .\nwd:Q5437360 wdt:P1431 wd:Q187261 .\nwd:Q5437360 wdt:P162|wdt:P272 wd:Q187261 .\nwd:Q5437360 wdt:P58 wd:Q187261\n}",
        "questionWithBrackets": "Were [The Confession] , [Fate] , and [The Waiting Room] edited , written , produced , executive produced , and directed by [Zeki Demirkubuz]"
    },
    {
        "questionIdx": 124731,
        "questionPatternModEntities": "Were M0 and M2 directed by and written by M1",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1 .\nM2 P0 M1 .\nM2 P1 M1\n}",
        "recursionDepth": 24,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q3222687 wdt:P57 wd:Q1666 .\nwd:Q3222687 wdt:P58 wd:Q1666 .\nwd:Q752434 wdt:P57 wd:Q1666 .\nwd:Q752434 wdt:P58 wd:Q1666\n}",
        "questionWithBrackets": "Were [Franz] and [Far West] directed by and written by [Jacques Brel]"
    },
    {
        "questionIdx": 124735,
        "questionPatternModEntities": "Were M2 and M5 executive produced by M3 , written by M4 , and executive produced by a Canadian spouse of M1",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M1 ) .\nM2 P2 ?x0 .\nM2 P2 M3 .\nM2 P3 M4 .\nM5 P2 ?x0 .\nM5 P2 M3 .\nM5 P3 M4\n}",
        "recursionDepth": 49,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P27 wd:Q16 .\n?x0 wdt:P26 wd:Q2704464 .\nFILTER ( ?x0 != wd:Q2704464 ) .\nwd:Q3808913 wdt:P1431 ?x0 .\nwd:Q3808913 wdt:P1431 wd:Q104109 .\nwd:Q3808913 wdt:P58 wd:Q463883 .\nwd:Q2704217 wdt:P1431 ?x0 .\nwd:Q2704217 wdt:P1431 wd:Q104109 .\nwd:Q2704217 wdt:P58 wd:Q463883\n}",
        "questionWithBrackets": "Were [Johanna Enlists] and [Secrets] executive produced by [Mary Pickford] , written by [Frances Marion] , and executive produced by a Canadian spouse of [Charles Rogers]"
    },
    {
        "questionIdx": 124739,
        "questionPatternModEntities": "Were M0 , M2 , and M3 executive produced by , written by , directed by , produced by , and edited by M1",
        "questionTemplate": "Were [entity] , [entity] , and [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1 .\nM0 P2 M1 .\nM0 P3 M1 .\nM0 P4 M1 .\nM2 P0 M1 .\nM2 P1 M1 .\nM2 P2 M1 .\nM2 P3 M1 .\nM2 P4 M1 .\nM3 P0 M1 .\nM3 P1 M1 .\nM3 P2 M1 .\nM3 P3 M1 .\nM3 P4 M1\n}",
        "recursionDepth": 46,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q6084069 wdt:P57 wd:Q187261 .\nwd:Q6084069 wdt:P1040 wd:Q187261 .\nwd:Q6084069 wdt:P1431 wd:Q187261 .\nwd:Q6084069 wdt:P162|wdt:P272 wd:Q187261 .\nwd:Q6084069 wdt:P58 wd:Q187261 .\nwd:Q12813010 wdt:P57 wd:Q187261 .\nwd:Q12813010 wdt:P1040 wd:Q187261 .\nwd:Q12813010 wdt:P1431 wd:Q187261 .\nwd:Q12813010 wdt:P162|wdt:P272 wd:Q187261 .\nwd:Q12813010 wdt:P58 wd:Q187261 .\nwd:Q5437360 wdt:P57 wd:Q187261 .\nwd:Q5437360 wdt:P1040 wd:Q187261 .\nwd:Q5437360 wdt:P1431 wd:Q187261 .\nwd:Q5437360 wdt:P162|wdt:P272 wd:Q187261 .\nwd:Q5437360 wdt:P58 wd:Q187261\n}",
        "questionWithBrackets": "Were [The Waiting Room] , [Fate] , and [The Confession] executive produced by , written by , directed by , produced by , and edited by [Zeki Demirkubuz]"
    },
    {
        "questionIdx": 124744,
        "questionPatternModEntities": "Were M0 and M2 directed by and produced by M1",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1 .\nM2 P0 M1 .\nM2 P1 M1\n}",
        "recursionDepth": 24,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q88532913 wdt:P57 wd:Q4465 .\nwd:Q88532913 wdt:P162|wdt:P272 wd:Q4465 .\nwd:Q74331 wdt:P57 wd:Q4465 .\nwd:Q74331 wdt:P162|wdt:P272 wd:Q4465\n}",
        "questionWithBrackets": "Were [The Beatles: Get Back] and [The Hobbit trilogy] directed by and produced by [Peter Jackson]"
    },
    {
        "questionIdx": 124762,
        "questionPatternModEntities": "Were M0 and M2 edited , produced , and directed by M1",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1 .\nM0 P2 M1 .\nM2 P0 M1 .\nM2 P1 M1 .\nM2 P2 M1\n}",
        "recursionDepth": 28,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q45602 wdt:P57 wd:Q882 .\nwd:Q45602 wdt:P1040 wd:Q882 .\nwd:Q45602 wdt:P162|wdt:P272 wd:Q882 .\nwd:Q973676 wdt:P57 wd:Q882 .\nwd:Q973676 wdt:P1040 wd:Q882 .\nwd:Q973676 wdt:P162|wdt:P272 wd:Q882\n}",
        "questionWithBrackets": "Were [Modern Times] and [A Day's Pleasure] edited , produced , and directed by [Charlie Chaplin]"
    },
    {
        "questionIdx": 124765,
        "questionPatternModEntities": "Were M0 , M2 , and M3 edited by and produced by M1",
        "questionTemplate": "Were [entity] , [entity] , and [entity] [VP_SIMPLE] by and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1 .\nM2 P0 M1 .\nM2 P1 M1 .\nM3 P0 M1 .\nM3 P1 M1\n}",
        "recursionDepth": 27,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q24871 wdt:P1040 wd:Q42574 .\nwd:Q24871 wdt:P162|wdt:P272 wd:Q42574 .\nwd:Q44578 wdt:P1040 wd:Q42574 .\nwd:Q44578 wdt:P162|wdt:P272 wd:Q42574 .\nwd:Q110397 wdt:P1040 wd:Q42574 .\nwd:Q110397 wdt:P162|wdt:P272 wd:Q42574\n}",
        "questionWithBrackets": "Were [True Lies] , [Titanic] , and [Avatar] edited by and produced by [James Cameron]"
    },
    {
        "questionIdx": 124767,
        "questionPatternModEntities": "Were M1 and M2 directed by a sibling of M0",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nM1 P1 ?x0 .\nM2 P1 ?x0\n}",
        "recursionDepth": 22,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P3373 wd:Q606780 .\nFILTER ( ?x0 != wd:Q606780 ) .\nwd:Q2291409 wdt:P57 ?x0 .\nwd:Q45602 wdt:P57 ?x0\n}",
        "questionWithBrackets": "Were [Modern Times] and [The Bank] directed by a sibling of [Sydney Chaplin]"
    },
    {
        "questionIdx": 124768,
        "questionPatternModEntities": "Were M0 and M4 executive produced by M1 , M2 , and M3",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P0 M3 .\nM4 P0 M1 .\nM4 P0 M2 .\nM4 P0 M3\n}",
        "recursionDepth": 24,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q102244 wdt:P1431 wd:Q75079 .\nwd:Q102244 wdt:P1431 wd:Q1900360 .\nwd:Q102244 wdt:P1431 wd:Q11778321 .\nwd:Q102438 wdt:P1431 wd:Q75079 .\nwd:Q102438 wdt:P1431 wd:Q1900360 .\nwd:Q102438 wdt:P1431 wd:Q11778321\n}",
        "questionWithBrackets": "Were [Harry Potter and the Philosopher's Stone] and [Harry Potter and the Chamber of Secrets] executive produced by [Chris Columbus] , [Michael Barnathan] , and [Mark Radcliffe]"
    },
    {
        "questionIdx": 124773,
        "questionPatternModEntities": "Were M2 , M3 , M4 , and M5 edited by and written by a Canadian spouse of M1",
        "questionTemplate": "Were [entity] , [entity] , [entity] , and [entity] [VP_SIMPLE] by and [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M1 ) .\nM2 P2 ?x0 .\nM2 P3 ?x0 .\nM3 P2 ?x0 .\nM3 P3 ?x0 .\nM4 P2 ?x0 .\nM4 P3 ?x0 .\nM5 P2 ?x0 .\nM5 P3 ?x0\n}",
        "recursionDepth": 41,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P27 wd:Q16 .\n?x0 wdt:P26 wd:Q235635 .\nFILTER ( ?x0 != wd:Q235635 ) .\nwd:Q24871 wdt:P1040 ?x0 .\nwd:Q24871 wdt:P58 ?x0 .\nwd:Q110397 wdt:P1040 ?x0 .\nwd:Q110397 wdt:P58 ?x0 .\nwd:Q44578 wdt:P1040 ?x0 .\nwd:Q44578 wdt:P58 ?x0 .\nwd:Q550529 wdt:P1040 ?x0 .\nwd:Q550529 wdt:P58 ?x0\n}",
        "questionWithBrackets": "Were [Strange Days] , [Titanic] , [True Lies] , and [Avatar] edited by and written by a Canadian spouse of [Suzy Amis Cameron]"
    },
    {
        "questionIdx": 124828,
        "questionPatternModEntities": "Were M0 , M2 , M3 , M4 , M5 , and M6 Swedish",
        "questionTemplate": "Were [entity] , [entity] , [entity] , [entity] , [entity] , and [entity] [ADJECTIVE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM2 P0 M1 .\nM3 P0 M1 .\nM4 P0 M1 .\nM5 P0 M1 .\nM6 P0 M1\n}",
        "recursionDepth": 25,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q72155 wdt:P27 wd:Q34 .\nwd:Q530 wdt:P27 wd:Q34 .\nwd:Q1043 wdt:P27 wd:Q34 .\nwd:Q1267 wdt:P27 wd:Q34 .\nwd:Q700 wdt:P27 wd:Q34 .\nwd:Q1933 wdt:P27 wd:Q34\n}",
        "questionWithBrackets": "Were [Gustaf Dalman] , [Carl Linnaeus] , [Swedish Chef] , [Dag Hammarskj\u00f6ld] , [Anja P\u00e4rson] , and [Ingemar Stenmark] Swedish"
    },
    {
        "questionIdx": 124833,
        "questionPatternModEntities": "Were M0 and M2 directed and written by M1",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1 .\nM2 P0 M1 .\nM2 P1 M1\n}",
        "recursionDepth": 23,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q103474 wdt:P57 wd:Q2001 .\nwd:Q103474 wdt:P58 wd:Q2001 .\nwd:Q186341 wdt:P57 wd:Q2001 .\nwd:Q186341 wdt:P58 wd:Q2001\n}",
        "questionWithBrackets": "Were [The Shining] and [2001: A Space Odyssey] directed and written by [Stanley Kubrick]"
    },
    {
        "questionIdx": 124841,
        "questionPatternModEntities": "Were M0 , M2 , M3 , M4 , M5 , M6 , and M7 influenced by M1",
        "questionTemplate": "Were [entity] , [entity] , [entity] , [entity] , [entity] , [entity] , and [entity] [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM2 P0 M1 .\nM3 P0 M1 .\nM4 P0 M1 .\nM5 P0 M1 .\nM6 P0 M1 .\nM7 P0 M1\n}",
        "recursionDepth": 31,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q454870 wdt:P737 wd:Q504 .\nwd:Q697786 wdt:P737 wd:Q504 .\nwd:Q5685 wdt:P737 wd:Q504 .\nwd:Q9327 wdt:P737 wd:Q504 .\nwd:Q228546 wdt:P737 wd:Q504 .\nwd:Q13005 wdt:P737 wd:Q504 .\nwd:Q529001 wdt:P737 wd:Q504\n}",
        "questionWithBrackets": "Were [Alphonse Daudet] , [Ba Jin] , [Anton Chekhov] , [Eugen Kumi\u010di\u0107] , [Guy de Maupassant] , [Gabriela Zapolska] , and [Andr\u00e9 Antoine] influenced by [\u00c9mile Zola]"
    },
    {
        "questionIdx": 124859,
        "questionPatternModEntities": "Were M0 and M5 produced by M2 , directed by M3 , directed by M4 , and executive produced by M1",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M2 .\nM0 P2 M3 .\nM0 P2 M4 .\nM5 P0 M1 .\nM5 P1 M2 .\nM5 P2 M3 .\nM5 P2 M4\n}",
        "recursionDepth": 46,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q1770445 wdt:P57 wd:Q3930636 .\nwd:Q1770445 wdt:P57 wd:Q2397223 .\nwd:Q1770445 wdt:P1431 wd:Q190373 .\nwd:Q1770445 wdt:P162|wdt:P272 wd:Q2898751 .\nwd:Q2916883 wdt:P57 wd:Q3930636 .\nwd:Q2916883 wdt:P57 wd:Q2397223 .\nwd:Q2916883 wdt:P1431 wd:Q190373 .\nwd:Q2916883 wdt:P162|wdt:P272 wd:Q2898751\n}",
        "questionWithBrackets": "Were [Top Cat and the Beverly Hills Cats] and [Scooby-Doo and the Ghoul School] produced by [Bernard Wolf] , directed by [Ray Patterson] , directed by [Charles August Nichols] , and executive produced by [Joseph Barbera]"
    },
    {
        "questionIdx": 124863,
        "questionPatternModEntities": "Were M3 , M5 , and M6 directed by M2 's American female spouse and executive produced by M4",
        "questionTemplate": "Were [entity] , [entity] , and [entity] [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P2 M2 .\nFILTER ( ?x0 != M2 ) .\nM3 P3 M4 .\nM3 P4 ?x0 .\nM5 P3 M4 .\nM5 P4 ?x0 .\nM6 P3 M4 .\nM6 P4 ?x0\n}",
        "recursionDepth": 45,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P21 wd:Q6581072 .\n?x0 wdt:P27 wd:Q30 .\n?x0 wdt:P26 wd:Q3525391 .\nFILTER ( ?x0 != wd:Q3525391 ) .\nwd:Q1338368 wdt:P57 ?x0 .\nwd:Q1338368 wdt:P1431 wd:Q56094 .\nwd:Q829695 wdt:P57 ?x0 .\nwd:Q829695 wdt:P1431 wd:Q56094 .\nwd:Q107270 wdt:P57 ?x0 .\nwd:Q107270 wdt:P1431 wd:Q56094\n}",
        "questionWithBrackets": "Were [Marie Antoinette] , [Somewhere] , and [Lost in Translation] directed by [Thomas Mars] 's American female spouse and executive produced by [Francis Ford Coppola]"
    },
    {
        "questionIdx": 124870,
        "questionPatternModEntities": "Were M2 and M3 edited by a male spouse of M1 's sibling",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 ?x1 .\n?x1 P2 M1 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x1 != M1 ) .\nM2 P3 ?x0 .\nM3 P3 ?x0\n}",
        "recursionDepth": 31,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P21 wd:Q6581097 .\n?x0 wdt:P26 ?x1 .\n?x1 wdt:P3373 wd:Q8192180 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x1 != wd:Q8192180 ) .\nwd:Q148330 wdt:P1040 ?x0 .\nwd:Q260208 wdt:P1040 ?x0\n}",
        "questionWithBrackets": "Were [Zat\u014dichi] and [Dolls] edited by a male spouse of [Hideshi Matsuda] 's sibling"
    },
    {
        "questionIdx": 124900,
        "questionPatternModEntities": "Were M2 and M3 executive produced by M1 's male spouse",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M1 ) .\nM2 P2 ?x0 .\nM3 P2 ?x0\n}",
        "recursionDepth": 26,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P21 wd:Q6581097 .\n?x0 wdt:P26 wd:Q6813152 .\nFILTER ( ?x0 != wd:Q6813152 ) .\nwd:Q44408 wdt:P1431 ?x0 .\nwd:Q17738 wdt:P1431 ?x0\n}",
        "questionWithBrackets": "Were [Star Wars: Episode IV \u2013 A New Hope] and [Captain EO] executive produced by [Mellody Hobson] 's male spouse"
    },
    {
        "questionIdx": 124914,
        "questionPatternModEntities": "Were M0 , M2 , M3 , and M4 edited by and produced by M1",
        "questionTemplate": "Were [entity] , [entity] , [entity] , and [entity] [VP_SIMPLE] by and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1 .\nM2 P0 M1 .\nM2 P1 M1 .\nM3 P0 M1 .\nM3 P1 M1 .\nM4 P0 M1 .\nM4 P1 M1\n}",
        "recursionDepth": 30,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q1923676 wdt:P1040 wd:Q882 .\nwd:Q1923676 wdt:P162|wdt:P272 wd:Q882 .\nwd:Q199039 wdt:P1040 wd:Q882 .\nwd:Q199039 wdt:P162|wdt:P272 wd:Q882 .\nwd:Q45602 wdt:P1040 wd:Q882 .\nwd:Q45602 wdt:P162|wdt:P272 wd:Q882 .\nwd:Q238211 wdt:P1040 wd:Q882 .\nwd:Q238211 wdt:P162|wdt:P272 wd:Q882\n}",
        "questionWithBrackets": "Were [The Cure] , [City Lights] , [Modern Times] , and [Pay Day] edited by and produced by [Charlie Chaplin]"
    },
    {
        "questionIdx": 124929,
        "questionPatternModEntities": "Were M1 and M2 edited by and produced by M0 's sibling",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nM1 P1 ?x0 .\nM1 P2 ?x0 .\nM2 P1 ?x0 .\nM2 P2 ?x0\n}",
        "recursionDepth": 28,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P3373 wd:Q606780 .\nFILTER ( ?x0 != wd:Q606780 ) .\nwd:Q166739 wdt:P1040 ?x0 .\nwd:Q166739 wdt:P162|wdt:P272 ?x0 .\nwd:Q1140172 wdt:P1040 ?x0 .\nwd:Q1140172 wdt:P162|wdt:P272 ?x0\n}",
        "questionWithBrackets": "Were [The Pawnshop] and [The Floorwalker] edited by and produced by [Sydney Chaplin] 's sibling"
    },
    {
        "questionIdx": 124935,
        "questionPatternModEntities": "Were M0 , M2 , and M3 written and edited by M1",
        "questionTemplate": "Were [entity] , [entity] , and [entity] [VP_SIMPLE] and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1 .\nM2 P0 M1 .\nM2 P1 M1 .\nM3 P0 M1 .\nM3 P1 M1\n}",
        "recursionDepth": 26,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q214723 wdt:P1040 wd:Q882 .\nwd:Q214723 wdt:P58 wd:Q882 .\nwd:Q166739 wdt:P1040 wd:Q882 .\nwd:Q166739 wdt:P58 wd:Q882 .\nwd:Q45602 wdt:P1040 wd:Q882 .\nwd:Q45602 wdt:P58 wd:Q882\n}",
        "questionWithBrackets": "Were [The Gold Rush] , [The Floorwalker] , and [Modern Times] written and edited by [Charlie Chaplin]"
    },
    {
        "questionIdx": 124943,
        "questionPatternModEntities": "Were M0 , M6 , and M7 directed by M5 , written by M1 , M2 , and M3 , and written by M4",
        "questionTemplate": "Were [entity] , [entity] , and [entity] [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , [entity] , and [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P0 M3 .\nM0 P0 M4 .\nM0 P1 M5 .\nM6 P0 M1 .\nM6 P0 M2 .\nM6 P0 M3 .\nM6 P0 M4 .\nM6 P1 M5 .\nM7 P0 M1 .\nM7 P0 M2 .\nM7 P0 M3 .\nM7 P0 M4 .\nM7 P1 M5\n}",
        "recursionDepth": 46,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q24980 wdt:P57 wd:Q166159 .\nwd:Q24980 wdt:P58 wd:Q25014 .\nwd:Q24980 wdt:P58 wd:Q24962 .\nwd:Q24980 wdt:P58 wd:Q223985 .\nwd:Q24980 wdt:P58 wd:Q210741 .\nwd:Q25043 wdt:P57 wd:Q166159 .\nwd:Q25043 wdt:P58 wd:Q25014 .\nwd:Q25043 wdt:P58 wd:Q24962 .\nwd:Q25043 wdt:P58 wd:Q223985 .\nwd:Q25043 wdt:P58 wd:Q210741 .\nwd:Q24953 wdt:P57 wd:Q166159 .\nwd:Q24953 wdt:P58 wd:Q25014 .\nwd:Q24953 wdt:P58 wd:Q24962 .\nwd:Q24953 wdt:P58 wd:Q223985 .\nwd:Q24953 wdt:P58 wd:Q210741\n}",
        "questionWithBrackets": "Were [Monty Python's The Meaning of Life] , [Monty Python\u2019s Life of Brian] , and [Monty Python and the Holy Grail] directed by [Terry Jones] , written by [Eric Idle] , [John Cleese] , and [Graham Chapman] , and written by [Michael Palin]"
    },
    {
        "questionIdx": 124976,
        "questionPatternModEntities": "Were M0 and M4 edited by M1 , M2 , and M3",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P0 M3 .\nM4 P0 M1 .\nM4 P0 M2 .\nM4 P0 M3\n}",
        "recursionDepth": 23,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q110397 wdt:P1040 wd:Q42574 .\nwd:Q110397 wdt:P1040 wd:Q513356 .\nwd:Q110397 wdt:P1040 wd:Q1126713 .\nwd:Q44578 wdt:P1040 wd:Q42574 .\nwd:Q44578 wdt:P1040 wd:Q513356 .\nwd:Q44578 wdt:P1040 wd:Q1126713\n}",
        "questionWithBrackets": "Were [True Lies] and [Titanic] edited by [Conrad Buff IV] , [Richard A. Harris] , and [James Cameron]"
    },
    {
        "questionIdx": 124986,
        "questionPatternModEntities": "Were M0 and M5 edited by M2 , executive produced by M1 , edited by M3 , and edited by M4",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M2 .\nM0 P1 M3 .\nM0 P1 M4 .\nM5 P0 M1 .\nM5 P1 M2 .\nM5 P1 M3 .\nM5 P1 M4\n}",
        "recursionDepth": 46,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q44578 wdt:P1040 wd:Q42574 .\nwd:Q44578 wdt:P1040 wd:Q513356 .\nwd:Q44578 wdt:P1040 wd:Q1126713 .\nwd:Q44578 wdt:P1431 wd:Q17415497 .\nwd:Q110397 wdt:P1040 wd:Q42574 .\nwd:Q110397 wdt:P1040 wd:Q513356 .\nwd:Q110397 wdt:P1040 wd:Q1126713 .\nwd:Q110397 wdt:P1431 wd:Q17415497\n}",
        "questionWithBrackets": "Were [True Lies] and [Titanic] edited by [Richard A. Harris] , executive produced by [Rae Sanchini] , edited by [James Cameron] , and edited by [Conrad Buff IV]"
    },
    {
        "questionIdx": 125048,
        "questionPatternModEntities": "Were M0 , M2 , and M3 written by , directed by , executive produced by , edited by , and produced by M1",
        "questionTemplate": "Were [entity] , [entity] , and [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1 .\nM0 P2 M1 .\nM0 P3 M1 .\nM0 P4 M1 .\nM2 P0 M1 .\nM2 P1 M1 .\nM2 P2 M1 .\nM2 P3 M1 .\nM2 P4 M1 .\nM3 P0 M1 .\nM3 P1 M1 .\nM3 P2 M1 .\nM3 P3 M1 .\nM3 P4 M1\n}",
        "recursionDepth": 46,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q5437360 wdt:P57 wd:Q187261 .\nwd:Q5437360 wdt:P1040 wd:Q187261 .\nwd:Q5437360 wdt:P1431 wd:Q187261 .\nwd:Q5437360 wdt:P162|wdt:P272 wd:Q187261 .\nwd:Q5437360 wdt:P58 wd:Q187261 .\nwd:Q6084069 wdt:P57 wd:Q187261 .\nwd:Q6084069 wdt:P1040 wd:Q187261 .\nwd:Q6084069 wdt:P1431 wd:Q187261 .\nwd:Q6084069 wdt:P162|wdt:P272 wd:Q187261 .\nwd:Q6084069 wdt:P58 wd:Q187261 .\nwd:Q12813010 wdt:P57 wd:Q187261 .\nwd:Q12813010 wdt:P1040 wd:Q187261 .\nwd:Q12813010 wdt:P1431 wd:Q187261 .\nwd:Q12813010 wdt:P162|wdt:P272 wd:Q187261 .\nwd:Q12813010 wdt:P58 wd:Q187261\n}",
        "questionWithBrackets": "Were [Fate] , [The Waiting Room] , and [The Confession] written by , directed by , executive produced by , edited by , and produced by [Zeki Demirkubuz]"
    },
    {
        "questionIdx": 125068,
        "questionPatternModEntities": "Were M2 and M3 produced by and edited by a Canadian parent of M1",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by and [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nM2 P2 ?x0 .\nM2 P3 ?x0 .\nM3 P2 ?x0 .\nM3 P3 ?x0\n}",
        "recursionDepth": 35,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q2923748 .\n?x0 wdt:P27 wd:Q16 .\nwd:Q587669 wdt:P1040 ?x0 .\nwd:Q587669 wdt:P162|wdt:P272 ?x0 .\nwd:Q1140028 wdt:P1040 ?x0 .\nwd:Q1140028 wdt:P162|wdt:P272 ?x0\n}",
        "questionWithBrackets": "Were [Stereo] and [Crimes of the Future] produced by and edited by a Canadian parent of [Brandon Cronenberg]"
    },
    {
        "questionIdx": 125072,
        "questionPatternModEntities": "Were M2 , M3 , M4 , and M5 produced and edited by M1 's Canadian spouse",
        "questionTemplate": "Were [entity] , [entity] , [entity] , and [entity] [VP_SIMPLE] and [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M1 ) .\nM2 P2 ?x0 .\nM2 P3 ?x0 .\nM3 P2 ?x0 .\nM3 P3 ?x0 .\nM4 P2 ?x0 .\nM4 P3 ?x0 .\nM5 P2 ?x0 .\nM5 P3 ?x0\n}",
        "recursionDepth": 38,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P27 wd:Q16 .\n?x0 wdt:P26 wd:Q235635 .\nFILTER ( ?x0 != wd:Q235635 ) .\nwd:Q24871 wdt:P1040 ?x0 .\nwd:Q24871 wdt:P162|wdt:P272 ?x0 .\nwd:Q110397 wdt:P1040 ?x0 .\nwd:Q110397 wdt:P162|wdt:P272 ?x0 .\nwd:Q44578 wdt:P1040 ?x0 .\nwd:Q44578 wdt:P162|wdt:P272 ?x0 .\nwd:Q550529 wdt:P1040 ?x0 .\nwd:Q550529 wdt:P162|wdt:P272 ?x0\n}",
        "questionWithBrackets": "Were [Avatar] , [Strange Days] , [Titanic] , and [True Lies] produced and edited by [Suzy Amis Cameron] 's Canadian spouse"
    },
    {
        "questionIdx": 125074,
        "questionPatternModEntities": "Were M1 and M5 written by a parent of M0 , edited by M2 , and edited by M3 and M4",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 ?x0 .\nM1 P2 M2 .\nM1 P2 M3 .\nM1 P2 M4 .\nM5 P1 ?x0 .\nM5 P2 M2 .\nM5 P2 M3 .\nM5 P2 M4\n}",
        "recursionDepth": 46,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q4739681 .\nwd:Q17738 wdt:P1040 wd:Q38222 .\nwd:Q17738 wdt:P1040 wd:Q429973 .\nwd:Q17738 wdt:P1040 wd:Q463119 .\nwd:Q17738 wdt:P58 ?x0 .\nwd:Q181795 wdt:P1040 wd:Q38222 .\nwd:Q181795 wdt:P1040 wd:Q429973 .\nwd:Q181795 wdt:P1040 wd:Q463119 .\nwd:Q181795 wdt:P58 ?x0\n}",
        "questionWithBrackets": "Were [Star Wars: Episode V \u2013 The Empire Strikes Back] and [Star Wars: Episode IV \u2013 A New Hope] written by a parent of [Amanda Lucas] , edited by [George Lucas] , and edited by [Marcia Lucas] and [Paul Hirsch]"
    },
    {
        "questionIdx": 125113,
        "questionPatternModEntities": "Were M0 and M3 directed by M2 and executive produced by M1",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by [entity] and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M2 .\nM3 P0 M1 .\nM3 P1 M2\n}",
        "recursionDepth": 28,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q1421355 wdt:P57 wd:Q56094 .\nwd:Q1421355 wdt:P1431 wd:Q38222 .\nwd:Q44408 wdt:P57 wd:Q56094 .\nwd:Q44408 wdt:P1431 wd:Q38222\n}",
        "questionWithBrackets": "Were [Captain EO] and [Tucker: The Man and His Dream] directed by [Francis Ford Coppola] and executive produced by [George Lucas]"
    },
    {
        "questionIdx": 125114,
        "questionPatternModEntities": "Were M1 and M2 edited by M0 's sibling",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nM1 P1 ?x0 .\nM2 P1 ?x0\n}",
        "recursionDepth": 20,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P3373 wd:Q606780 .\nFILTER ( ?x0 != wd:Q606780 ) .\nwd:Q166739 wdt:P1040 ?x0 .\nwd:Q374172 wdt:P1040 ?x0\n}",
        "questionWithBrackets": "Were [The Kid] and [The Floorwalker] edited by [Sydney Chaplin] 's sibling"
    },
    {
        "questionIdx": 125115,
        "questionPatternModEntities": "Were M1 and M2 directed by a spouse of M0",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nM1 P1 ?x0 .\nM2 P1 ?x0\n}",
        "recursionDepth": 22,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P26 wd:Q1981049 .\nFILTER ( ?x0 != wd:Q1981049 ) .\nwd:Q125772 wdt:P57 ?x0 .\nwd:Q147878 wdt:P57 ?x0\n}",
        "questionWithBrackets": "Were [Solaris] and [Ivan's Childhood] directed by a spouse of [Irma Raush]"
    },
    {
        "questionIdx": 125138,
        "questionPatternModEntities": "Were M2 and M4 written by M3 and written by M0 's Italian sibling 's sibling 's sibling",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by [entity] and [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x1 P0 ?x2 .\n?x2 P0 M0 .\n?x2 P1 M1 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x1 != ?x2 ) .\nFILTER ( ?x2 != M0 ) .\nM2 P2 ?x0 .\nM2 P2 M3 .\nM4 P2 ?x0 .\nM4 P2 M3\n}",
        "recursionDepth": 44,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P3373 ?x1 .\n?x1 wdt:P3373 ?x2 .\n?x2 wdt:P27 wd:Q38 .\n?x2 wdt:P3373 wd:Q3754801 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x1 != ?x2 ) .\nFILTER ( ?x2 != wd:Q3754801 ) .\nwd:Q150867 wdt:P58 ?x0 .\nwd:Q150867 wdt:P58 wd:Q53026 .\nwd:Q655230 wdt:P58 ?x0 .\nwd:Q655230 wdt:P58 wd:Q53026\n}",
        "questionWithBrackets": "Were [The Great War] and [All My Friends Part 2] written by [Mario Monicelli] and written by [Furio Monicelli] 's Italian sibling 's sibling 's sibling"
    },
    {
        "questionIdx": 125139,
        "questionPatternModEntities": "Were M2 and M4 directed by a Swedish employee of M0 and produced by M3",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nM2 P2 M3 .\nM2 P3 ?x0 .\nM4 P2 M3 .\nM4 P3 ?x0\n}",
        "recursionDepth": 38,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P108 wd:Q1144565 .\n?x0 wdt:P27 wd:Q34 .\nwd:Q10572675 wdt:P57 ?x0 .\nwd:Q10572675 wdt:P162|wdt:P272 wd:Q982339 .\nwd:Q7773358 wdt:P57 ?x0 .\nwd:Q7773358 wdt:P162|wdt:P272 wd:Q982339\n}",
        "questionWithBrackets": "Were [The Walls of Freedom] and [Near and Far Away] directed by a Swedish employee of [Ume\u00e5 University] and produced by [J\u00f6rn Donner]"
    },
    {
        "questionIdx": 125173,
        "questionPatternModEntities": "Were M2 and M3 produced by , edited by , written by , and directed by M1 's Japanese spouse",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M1 ) .\nM2 P2 ?x0 .\nM2 P3 ?x0 .\nM2 P4 ?x0 .\nM2 P5 ?x0 .\nM3 P2 ?x0 .\nM3 P3 ?x0 .\nM3 P4 ?x0 .\nM3 P5 ?x0\n}",
        "recursionDepth": 45,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P27 wd:Q17 .\n?x0 wdt:P26 wd:Q3032150 .\nFILTER ( ?x0 != wd:Q3032150 ) .\nwd:Q854990 wdt:P57 ?x0 .\nwd:Q854990 wdt:P1040 ?x0 .\nwd:Q854990 wdt:P162|wdt:P272 ?x0 .\nwd:Q854990 wdt:P58 ?x0 .\nwd:Q1077915 wdt:P57 ?x0 .\nwd:Q1077915 wdt:P1040 ?x0 .\nwd:Q1077915 wdt:P162|wdt:P272 ?x0 .\nwd:Q1077915 wdt:P58 ?x0\n}",
        "questionWithBrackets": "Were [Sanshiro Sugata] and [Kagemusha] produced by , edited by , written by , and directed by [Y\u014dko Yaguchi] 's Japanese spouse"
    },
    {
        "questionIdx": 125182,
        "questionPatternModEntities": "Were M0 , M6 , and M7 written by M1 , M2 , and M3 , directed by M5 , and written by M4",
        "questionTemplate": "Were [entity] , [entity] , and [entity] [VP_SIMPLE] by [entity] , [entity] , and [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P0 M3 .\nM0 P0 M4 .\nM0 P1 M5 .\nM6 P0 M1 .\nM6 P0 M2 .\nM6 P0 M3 .\nM6 P0 M4 .\nM6 P1 M5 .\nM7 P0 M1 .\nM7 P0 M2 .\nM7 P0 M3 .\nM7 P0 M4 .\nM7 P1 M5\n}",
        "recursionDepth": 46,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q25043 wdt:P57 wd:Q166159 .\nwd:Q25043 wdt:P58 wd:Q24962 .\nwd:Q25043 wdt:P58 wd:Q25014 .\nwd:Q25043 wdt:P58 wd:Q210741 .\nwd:Q25043 wdt:P58 wd:Q25078 .\nwd:Q24953 wdt:P57 wd:Q166159 .\nwd:Q24953 wdt:P58 wd:Q24962 .\nwd:Q24953 wdt:P58 wd:Q25014 .\nwd:Q24953 wdt:P58 wd:Q210741 .\nwd:Q24953 wdt:P58 wd:Q25078 .\nwd:Q24980 wdt:P57 wd:Q166159 .\nwd:Q24980 wdt:P58 wd:Q24962 .\nwd:Q24980 wdt:P58 wd:Q25014 .\nwd:Q24980 wdt:P58 wd:Q210741 .\nwd:Q24980 wdt:P58 wd:Q25078\n}",
        "questionWithBrackets": "Were [Monty Python and the Holy Grail] , [Monty Python\u2019s Life of Brian] , and [Monty Python's The Meaning of Life] written by [Eric Idle] , [Graham Chapman] , and [Terry Gilliam] , directed by [Terry Jones] , and written by [John Cleese]"
    },
    {
        "questionIdx": 125189,
        "questionPatternModEntities": "Were M0 and M3 written by and executive produced by M1 and M2",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P1 M1 .\nM0 P1 M2 .\nM3 P0 M1 .\nM3 P0 M2 .\nM3 P1 M1 .\nM3 P1 M2\n}",
        "recursionDepth": 29,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q2294224 wdt:P1431 wd:Q4355997 .\nwd:Q2294224 wdt:P1431 wd:Q4358044 .\nwd:Q2294224 wdt:P58 wd:Q4355997 .\nwd:Q2294224 wdt:P58 wd:Q4358044 .\nwd:Q54801207 wdt:P1431 wd:Q4355997 .\nwd:Q54801207 wdt:P1431 wd:Q4358044 .\nwd:Q54801207 wdt:P58 wd:Q4355997 .\nwd:Q54801207 wdt:P58 wd:Q4358044\n}",
        "questionWithBrackets": "Were [Kim Possible] and [Kim Possible Movie: So the Drama] written by and executive produced by [Mark McCorkle] and [Bob Schooley]"
    },
    {
        "questionIdx": 125192,
        "questionPatternModEntities": "Were M0 and M7 written by M1 , M2 , M3 , and M4 , written by M5 , and directed by M6",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by [entity] , [entity] , [entity] , and [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P0 M3 .\nM0 P0 M4 .\nM0 P0 M5 .\nM0 P1 M6 .\nM7 P0 M1 .\nM7 P0 M2 .\nM7 P0 M3 .\nM7 P0 M4 .\nM7 P0 M5 .\nM7 P1 M6\n}",
        "recursionDepth": 46,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q2261883 wdt:P57 wd:Q1040240 .\nwd:Q2261883 wdt:P58 wd:Q25120 .\nwd:Q2261883 wdt:P58 wd:Q469164 .\nwd:Q2261883 wdt:P58 wd:Q3938849 .\nwd:Q2261883 wdt:P58 wd:Q179982 .\nwd:Q2261883 wdt:P58 wd:Q392644 .\nwd:Q2661437 wdt:P57 wd:Q1040240 .\nwd:Q2661437 wdt:P58 wd:Q25120 .\nwd:Q2661437 wdt:P58 wd:Q469164 .\nwd:Q2661437 wdt:P58 wd:Q3938849 .\nwd:Q2661437 wdt:P58 wd:Q179982 .\nwd:Q2661437 wdt:P58 wd:Q392644\n}",
        "questionWithBrackets": "Were [Caprice Italian Style] and [The Witches] written by [Roberto Gianviti] , [Agenore Incrocci] , [Furio Scarpelli] , and [Cesare Zavattini] , written by [Pier Paolo Pasolini] , and directed by [Franco Rossi]"
    },
    {
        "questionIdx": 125215,
        "questionPatternModEntities": "Were M0 and M5 edited by M2 , edited by M3 , edited by M4 , and executive produced by M1",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M2 .\nM0 P1 M3 .\nM0 P1 M4 .\nM5 P0 M1 .\nM5 P1 M2 .\nM5 P1 M3 .\nM5 P1 M4\n}",
        "recursionDepth": 46,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q110397 wdt:P1040 wd:Q513356 .\nwd:Q110397 wdt:P1040 wd:Q42574 .\nwd:Q110397 wdt:P1040 wd:Q1126713 .\nwd:Q110397 wdt:P1431 wd:Q17415497 .\nwd:Q44578 wdt:P1040 wd:Q513356 .\nwd:Q44578 wdt:P1040 wd:Q42574 .\nwd:Q44578 wdt:P1040 wd:Q1126713 .\nwd:Q44578 wdt:P1431 wd:Q17415497\n}",
        "questionWithBrackets": "Were [True Lies] and [Titanic] edited by [Richard A. Harris] , edited by [Conrad Buff IV] , edited by [James Cameron] , and executive produced by [Rae Sanchini]"
    },
    {
        "questionIdx": 125229,
        "questionPatternModEntities": "Were M0 and M2 directed by M1",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM2 P0 M1\n}",
        "recursionDepth": 16,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q105702 wdt:P57 wd:Q2001 .\nwd:Q103474 wdt:P57 wd:Q2001\n}",
        "questionWithBrackets": "Were [2001: A Space Odyssey] and [Dr. Strangelove] directed by [Stanley Kubrick]"
    },
    {
        "questionIdx": 125243,
        "questionPatternModEntities": "Were M0 , M2 , and M3 directed by , produced by , and edited by M1",
        "questionTemplate": "Were [entity] , [entity] , and [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1 .\nM0 P2 M1 .\nM2 P0 M1 .\nM2 P1 M1 .\nM2 P2 M1 .\nM3 P0 M1 .\nM3 P1 M1 .\nM3 P2 M1\n}",
        "recursionDepth": 33,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q1148649 wdt:P57 wd:Q882 .\nwd:Q1148649 wdt:P1040 wd:Q882 .\nwd:Q1148649 wdt:P162|wdt:P272 wd:Q882 .\nwd:Q238211 wdt:P57 wd:Q882 .\nwd:Q238211 wdt:P1040 wd:Q882 .\nwd:Q238211 wdt:P162|wdt:P272 wd:Q882 .\nwd:Q166739 wdt:P57 wd:Q882 .\nwd:Q166739 wdt:P1040 wd:Q882 .\nwd:Q166739 wdt:P162|wdt:P272 wd:Q882\n}",
        "questionWithBrackets": "Were [The Idle Class] , [City Lights] , and [The Floorwalker] directed by , produced by , and edited by [Charlie Chaplin]"
    },
    {
        "questionIdx": 125302,
        "questionPatternModEntities": "Were M2 and M5 produced by a Canadian employee of M0 , written by M3 , and edited by M4",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nM2 P2 M3 .\nM2 P3 ?x0 .\nM2 P4 M4 .\nM5 P2 M3 .\nM5 P3 ?x0 .\nM5 P4 M4\n}",
        "recursionDepth": 47,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P108 wd:Q681250 .\n?x0 wdt:P27 wd:Q16 .\nwd:Q1384202 wdt:P1040 wd:Q302788 .\nwd:Q1384202 wdt:P162|wdt:P272 ?x0 .\nwd:Q1384202 wdt:P58 wd:Q212167 .\nwd:Q626304 wdt:P1040 wd:Q302788 .\nwd:Q626304 wdt:P162|wdt:P272 ?x0 .\nwd:Q626304 wdt:P58 wd:Q212167\n}",
        "questionWithBrackets": "Were [Ararat] and [Exotica] produced by a Canadian employee of [European Graduate School] , written by [Atom Egoyan] , and edited by [Susan Shipton]"
    },
    {
        "questionIdx": 125343,
        "questionPatternModEntities": "Were M0 , M5 , M6 , and M7 directed by M4 , executive produced by M1 and M2 , and written by M3",
        "questionTemplate": "Were [entity] , [entity] , [entity] , and [entity] [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] and [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P1 M3 .\nM0 P2 M4 .\nM5 P0 M1 .\nM5 P0 M2 .\nM5 P1 M3 .\nM5 P2 M4 .\nM6 P0 M1 .\nM6 P0 M2 .\nM6 P1 M3 .\nM6 P2 M4 .\nM7 P0 M1 .\nM7 P0 M2 .\nM7 P1 M3 .\nM7 P2 M4\n}",
        "recursionDepth": 47,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q548919 wdt:P57 wd:Q295463 .\nwd:Q548919 wdt:P1431 wd:Q24809564 .\nwd:Q548919 wdt:P1431 wd:Q24809566 .\nwd:Q548919 wdt:P58 wd:Q942914 .\nwd:Q54274 wdt:P57 wd:Q295463 .\nwd:Q54274 wdt:P1431 wd:Q24809564 .\nwd:Q54274 wdt:P1431 wd:Q24809566 .\nwd:Q54274 wdt:P58 wd:Q942914 .\nwd:Q161087 wdt:P57 wd:Q295463 .\nwd:Q161087 wdt:P1431 wd:Q24809564 .\nwd:Q161087 wdt:P1431 wd:Q24809566 .\nwd:Q161087 wdt:P58 wd:Q942914 .\nwd:Q46717 wdt:P57 wd:Q295463 .\nwd:Q46717 wdt:P1431 wd:Q24809564 .\nwd:Q46717 wdt:P1431 wd:Q24809566 .\nwd:Q46717 wdt:P58 wd:Q942914\n}",
        "questionWithBrackets": "Were [Pirates of the Caribbean: The Curse of the Black Pearl] , [The Lone Ranger] , [Pirates of the Caribbean: At World's End] , and [Pirates of the Caribbean: Dead Man's Chest] directed by [Gore Verbinski] , executive produced by [Chad Oman] and [Mike Stenson] , and written by [Terry Rossio]"
    },
    {
        "questionIdx": 125452,
        "questionPatternModEntities": "Were M1 , M2 , M3 , and M4 founded by a parent of M0",
        "questionTemplate": "Were [entity] , [entity] , [entity] , and [entity] [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 ?x0 .\nM2 P1 ?x0 .\nM3 P1 ?x0 .\nM4 P1 ?x0\n}",
        "recursionDepth": 28,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q15330 .\nwd:Q20947086 wdt:P112 ?x0 .\nwd:Q135622 wdt:P112 ?x0 .\nwd:Q356 wdt:P112 ?x0 .\nwd:Q953568 wdt:P112 ?x0\n}",
        "questionWithBrackets": "Were [No label defined] , [DDEX] , [Google+] , and [Alliance for Open Media] founded by a parent of [Waymo]"
    },
    {
        "questionIdx": 125646,
        "questionPatternModEntities": "Were M1 , M2 , M3 , M4 , and M5 directed by M0 's sibling",
        "questionTemplate": "Were [entity] , [entity] , [entity] , [entity] , and [entity] [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nM1 P1 ?x0 .\nM2 P1 ?x0 .\nM3 P1 ?x0 .\nM4 P1 ?x0 .\nM5 P1 ?x0\n}",
        "recursionDepth": 29,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P3373 wd:Q104373781 .\nFILTER ( ?x0 != wd:Q104373781 ) .\nwd:Q83365219 wdt:P57 ?x0 .\nwd:Q2410560 wdt:P57 ?x0 .\nwd:Q2085 wdt:P57 ?x0 .\nwd:Q11618 wdt:P57 ?x0 .\nwd:Q272860 wdt:P57 ?x0\n}",
        "questionWithBrackets": "Were [The Elephant Man] , [The Cowboy and the Frenchman] , [Twin Peaks] , [Eraserhead] , and [What Did Jack Do?] directed by [John Lynch] 's sibling"
    },
    {
        "questionIdx": 125649,
        "questionPatternModEntities": "Were M0 , M2 , M3 , and M4 directed by and edited by M1",
        "questionTemplate": "Were [entity] , [entity] , [entity] , and [entity] [VP_SIMPLE] by and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1 .\nM2 P0 M1 .\nM2 P1 M1 .\nM3 P0 M1 .\nM3 P1 M1 .\nM4 P0 M1 .\nM4 P1 M1\n}",
        "recursionDepth": 30,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q1070468 wdt:P57 wd:Q882 .\nwd:Q1070468 wdt:P1040 wd:Q882 .\nwd:Q166739 wdt:P57 wd:Q882 .\nwd:Q166739 wdt:P1040 wd:Q882 .\nwd:Q214723 wdt:P57 wd:Q882 .\nwd:Q214723 wdt:P1040 wd:Q882 .\nwd:Q45602 wdt:P57 wd:Q882 .\nwd:Q45602 wdt:P1040 wd:Q882\n}",
        "questionWithBrackets": "Were [Modern Times] , [The Immigrant] , [The Floorwalker] , and [The Gold Rush] directed by and edited by [Charlie Chaplin]"
    },
    {
        "questionIdx": 125677,
        "questionPatternModEntities": "Were M0 , M2 , and M3 directed by and edited by M1",
        "questionTemplate": "Were [entity] , [entity] , and [entity] [VP_SIMPLE] by and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1 .\nM2 P0 M1 .\nM2 P1 M1 .\nM3 P0 M1 .\nM3 P1 M1\n}",
        "recursionDepth": 27,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q854990 wdt:P57 wd:Q8006 .\nwd:Q854990 wdt:P1040 wd:Q8006 .\nwd:Q135465 wdt:P57 wd:Q8006 .\nwd:Q135465 wdt:P1040 wd:Q8006 .\nwd:Q152105 wdt:P57 wd:Q8006 .\nwd:Q152105 wdt:P1040 wd:Q8006\n}",
        "questionWithBrackets": "Were [Ikiru] , [Rashomon] , and [Kagemusha] directed by and edited by [Akira Kurosawa]"
    },
    {
        "questionIdx": 125701,
        "questionPatternModEntities": "Were M2 and M3 edited and directed by M0 's male sibling",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] and [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M0 ) .\nM2 P2 ?x0 .\nM2 P3 ?x0 .\nM3 P2 ?x0 .\nM3 P3 ?x0\n}",
        "recursionDepth": 32,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P21 wd:Q6581097 .\n?x0 wdt:P3373 wd:Q3567655 .\nFILTER ( ?x0 != wd:Q3567655 ) .\nwd:Q166739 wdt:P57 ?x0 .\nwd:Q166739 wdt:P1040 ?x0 .\nwd:Q374172 wdt:P57 ?x0 .\nwd:Q374172 wdt:P1040 ?x0\n}",
        "questionWithBrackets": "Were [The Kid] and [The Floorwalker] edited and directed by [Wheeler Dryden] 's male sibling"
    },
    {
        "questionIdx": 125703,
        "questionPatternModEntities": "Were M2 , M3 , and M4 directed , edited , and produced by a British sibling of M0",
        "questionTemplate": "Were [entity] , [entity] , and [entity] [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M0 ) .\nM2 P2 ?x0 .\nM2 P3 ?x0 .\nM2 P4 ?x0 .\nM3 P2 ?x0 .\nM3 P3 ?x0 .\nM3 P4 ?x0 .\nM4 P2 ?x0 .\nM4 P3 ?x0 .\nM4 P4 ?x0\n}",
        "recursionDepth": 42,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P27 wd:Q145 .\n?x0 wdt:P3373 wd:Q3567655 .\nFILTER ( ?x0 != wd:Q3567655 ) .\nwd:Q1140172 wdt:P57 ?x0 .\nwd:Q1140172 wdt:P1040 ?x0 .\nwd:Q1140172 wdt:P162|wdt:P272 ?x0 .\nwd:Q45602 wdt:P57 ?x0 .\nwd:Q45602 wdt:P1040 ?x0 .\nwd:Q45602 wdt:P162|wdt:P272 ?x0 .\nwd:Q374172 wdt:P57 ?x0 .\nwd:Q374172 wdt:P1040 ?x0 .\nwd:Q374172 wdt:P162|wdt:P272 ?x0\n}",
        "questionWithBrackets": "Were [The Kid] , [Modern Times] , and [The Pawnshop] directed , edited , and produced by a British sibling of [Wheeler Dryden]"
    },
    {
        "questionIdx": 125787,
        "questionPatternModEntities": "Were M0 , M2 , and M3 produced by , edited by , and written by M1",
        "questionTemplate": "Were [entity] , [entity] , and [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1 .\nM0 P2 M1 .\nM2 P0 M1 .\nM2 P1 M1 .\nM2 P2 M1 .\nM3 P0 M1 .\nM3 P1 M1 .\nM3 P2 M1\n}",
        "recursionDepth": 33,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q1070468 wdt:P1040 wd:Q882 .\nwd:Q1070468 wdt:P162|wdt:P272 wd:Q882 .\nwd:Q1070468 wdt:P58 wd:Q882 .\nwd:Q166739 wdt:P1040 wd:Q882 .\nwd:Q166739 wdt:P162|wdt:P272 wd:Q882 .\nwd:Q166739 wdt:P58 wd:Q882 .\nwd:Q214723 wdt:P1040 wd:Q882 .\nwd:Q214723 wdt:P162|wdt:P272 wd:Q882 .\nwd:Q214723 wdt:P58 wd:Q882\n}",
        "questionWithBrackets": "Were [The Gold Rush] , [The Immigrant] , and [The Floorwalker] produced by , edited by , and written by [Charlie Chaplin]"
    },
    {
        "questionIdx": 125839,
        "questionPatternModEntities": "Were M0 and M3 edited , produced , and directed by M1 and M2",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P1 M1 .\nM0 P1 M2 .\nM0 P2 M1 .\nM0 P2 M2 .\nM3 P0 M1 .\nM3 P0 M2 .\nM3 P1 M1 .\nM3 P1 M2 .\nM3 P2 M1 .\nM3 P2 M2\n}",
        "recursionDepth": 32,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q20729238 wdt:P57 wd:Q562108 .\nwd:Q20729238 wdt:P57 wd:Q35979475 .\nwd:Q20729238 wdt:P1040 wd:Q562108 .\nwd:Q20729238 wdt:P1040 wd:Q35979475 .\nwd:Q20729238 wdt:P162|wdt:P272 wd:Q562108 .\nwd:Q20729238 wdt:P162|wdt:P272 wd:Q35979475 .\nwd:Q20729551 wdt:P57 wd:Q562108 .\nwd:Q20729551 wdt:P57 wd:Q35979475 .\nwd:Q20729551 wdt:P1040 wd:Q562108 .\nwd:Q20729551 wdt:P1040 wd:Q35979475 .\nwd:Q20729551 wdt:P162|wdt:P272 wd:Q562108 .\nwd:Q20729551 wdt:P162|wdt:P272 wd:Q35979475\n}",
        "questionWithBrackets": "Were [Motion picture] and [Stop for Bud] edited , produced , and directed by [J\u00f8rgen Leth] and [Ole John]"
    },
    {
        "questionIdx": 125846,
        "questionPatternModEntities": "Were M1 and M5 executive produced by M0 's parent , directed by M3 and M4 , and edited by M2",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] , [VP_SIMPLE] by [entity] and [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 ?x0 .\nM1 P2 M2 .\nM1 P3 M3 .\nM1 P3 M4 .\nM5 P1 ?x0 .\nM5 P2 M2 .\nM5 P3 M3 .\nM5 P3 M4\n}",
        "recursionDepth": 45,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q27161720 .\nwd:Q329316 wdt:P57 wd:Q3517016 .\nwd:Q329316 wdt:P57 wd:Q1153718 .\nwd:Q329316 wdt:P1040 wd:Q19545136 .\nwd:Q329316 wdt:P1431 ?x0 .\nwd:Q40302 wdt:P57 wd:Q3517016 .\nwd:Q40302 wdt:P57 wd:Q1153718 .\nwd:Q40302 wdt:P1040 wd:Q19545136 .\nwd:Q40302 wdt:P1431 ?x0\n}",
        "questionWithBrackets": "Were [The Fox and the Hound] and [The Black Cauldron] executive produced by [Ronald Miller] 's parent , directed by [Richard Rich] and [Ted Berman] , and edited by [James Melton]"
    },
    {
        "questionIdx": 125857,
        "questionPatternModEntities": "Were M2 and M4 directed by M3 , edited by M0 's parent , and edited by M1 's parent",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] , and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x1 P0 M1 .\nM2 P1 ?x0 .\nM2 P1 ?x1 .\nM2 P2 M3 .\nM4 P1 ?x0 .\nM4 P1 ?x1 .\nM4 P2 M3\n}",
        "recursionDepth": 44,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q433683 .\n?x1 wdt:P40|wdt:P355 wd:Q230636 .\nwd:Q214723 wdt:P57 wd:Q882 .\nwd:Q214723 wdt:P1040 ?x0 .\nwd:Q214723 wdt:P1040 ?x1 .\nwd:Q45602 wdt:P57 wd:Q882 .\nwd:Q45602 wdt:P1040 ?x0 .\nwd:Q45602 wdt:P1040 ?x1\n}",
        "questionWithBrackets": "Were [Modern Times] and [The Gold Rush] directed by [Charlie Chaplin] , edited by [Victoria Chaplin] 's parent , and edited by [Geraldine Chaplin] 's parent"
    },
    {
        "questionIdx": 125868,
        "questionPatternModEntities": "Were M1 , M2 , M3 , and M4 edited and produced by M0 's spouse",
        "questionTemplate": "Were [entity] , [entity] , [entity] , and [entity] [VP_SIMPLE] and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nM1 P1 ?x0 .\nM1 P2 ?x0 .\nM2 P1 ?x0 .\nM2 P2 ?x0 .\nM3 P1 ?x0 .\nM3 P2 ?x0 .\nM4 P1 ?x0 .\nM4 P2 ?x0\n}",
        "recursionDepth": 33,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P26 wd:Q95050 .\nFILTER ( ?x0 != wd:Q95050 ) .\nwd:Q166739 wdt:P1040 ?x0 .\nwd:Q166739 wdt:P162|wdt:P272 ?x0 .\nwd:Q238211 wdt:P1040 ?x0 .\nwd:Q238211 wdt:P162|wdt:P272 ?x0 .\nwd:Q45602 wdt:P1040 ?x0 .\nwd:Q45602 wdt:P162|wdt:P272 ?x0 .\nwd:Q199039 wdt:P1040 ?x0 .\nwd:Q199039 wdt:P162|wdt:P272 ?x0\n}",
        "questionWithBrackets": "Were [Pay Day] , [Modern Times] , [The Floorwalker] , and [City Lights] edited and produced by [Paulette Goddard] 's spouse"
    },
    {
        "questionIdx": 125876,
        "questionPatternModEntities": "Were M0 , M5 , M6 , and M7 written by M3 , executive produced by M1 and M2 , and directed by M4",
        "questionTemplate": "Were [entity] , [entity] , [entity] , and [entity] [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] and [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P1 M3 .\nM0 P2 M4 .\nM5 P0 M1 .\nM5 P0 M2 .\nM5 P1 M3 .\nM5 P2 M4 .\nM6 P0 M1 .\nM6 P0 M2 .\nM6 P1 M3 .\nM6 P2 M4 .\nM7 P0 M1 .\nM7 P0 M2 .\nM7 P1 M3 .\nM7 P2 M4\n}",
        "recursionDepth": 47,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q54274 wdt:P57 wd:Q295463 .\nwd:Q54274 wdt:P1431 wd:Q24809564 .\nwd:Q54274 wdt:P1431 wd:Q24809566 .\nwd:Q54274 wdt:P58 wd:Q943506 .\nwd:Q161087 wdt:P57 wd:Q295463 .\nwd:Q161087 wdt:P1431 wd:Q24809564 .\nwd:Q161087 wdt:P1431 wd:Q24809566 .\nwd:Q161087 wdt:P58 wd:Q943506 .\nwd:Q46717 wdt:P57 wd:Q295463 .\nwd:Q46717 wdt:P1431 wd:Q24809564 .\nwd:Q46717 wdt:P1431 wd:Q24809566 .\nwd:Q46717 wdt:P58 wd:Q943506 .\nwd:Q548919 wdt:P57 wd:Q295463 .\nwd:Q548919 wdt:P1431 wd:Q24809564 .\nwd:Q548919 wdt:P1431 wd:Q24809566 .\nwd:Q548919 wdt:P58 wd:Q943506\n}",
        "questionWithBrackets": "Were [The Lone Ranger] , [Pirates of the Caribbean: The Curse of the Black Pearl] , [Pirates of the Caribbean: At World's End] , and [Pirates of the Caribbean: Dead Man's Chest] written by [Ted Elliott] , executive produced by [Chad Oman] and [Mike Stenson] , and directed by [Gore Verbinski]"
    },
    {
        "questionIdx": 125909,
        "questionPatternModEntities": "Were M0 and M2 directed , produced , and edited by M1",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1 .\nM0 P2 M1 .\nM2 P0 M1 .\nM2 P1 M1 .\nM2 P2 M1\n}",
        "recursionDepth": 28,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q126135 wdt:P57 wd:Q51562 .\nwd:Q126135 wdt:P1040 wd:Q51562 .\nwd:Q126135 wdt:P162|wdt:P272 wd:Q51562 .\nwd:Q1109750 wdt:P57 wd:Q51562 .\nwd:Q1109750 wdt:P1040 wd:Q51562 .\nwd:Q1109750 wdt:P162|wdt:P272 wd:Q51562\n}",
        "questionWithBrackets": "Were [The Patriot] and [Lady Windermere's Fan] directed , produced , and edited by [Ernst Lubitsch]"
    },
    {
        "questionIdx": 125926,
        "questionPatternModEntities": "Were M3 , M4 , and M5 executive produced by M0 's Italian sibling and produced by M2 's sibling",
        "questionTemplate": "Were [entity] , [entity] , and [entity] [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x1 P0 M2 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x1 != M2 ) .\nM3 P2 ?x0 .\nM3 P3 ?x1 .\nM4 P2 ?x0 .\nM4 P3 ?x1 .\nM5 P2 ?x0 .\nM5 P3 ?x1\n}",
        "recursionDepth": 44,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P27 wd:Q38 .\n?x0 wdt:P3373 wd:Q53011 .\n?x1 wdt:P3373 wd:Q3679924 .\nFILTER ( ?x0 != wd:Q53011 ) .\nFILTER ( ?x1 != wd:Q3679924 ) .\nwd:Q1788187 wdt:P1431 ?x0 .\nwd:Q1788187 wdt:P162|wdt:P272 ?x1 .\nwd:Q1661014 wdt:P1431 ?x0 .\nwd:Q1661014 wdt:P162|wdt:P272 ?x1 .\nwd:Q966494 wdt:P1431 ?x0 .\nwd:Q966494 wdt:P162|wdt:P272 ?x1\n}",
        "questionWithBrackets": "Were [Sleepless] , [The Mother of Tears] , and [The Card Player] executive produced by [Dario Argento] 's Italian sibling and produced by [Claudio Argento] 's sibling"
    },
    {
        "questionIdx": 125942,
        "questionPatternModEntities": "Were M0 , M2 , and M3 executive produced by , edited by , produced by , written by , and directed by M1",
        "questionTemplate": "Were [entity] , [entity] , and [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1 .\nM0 P2 M1 .\nM0 P3 M1 .\nM0 P4 M1 .\nM2 P0 M1 .\nM2 P1 M1 .\nM2 P2 M1 .\nM2 P3 M1 .\nM2 P4 M1 .\nM3 P0 M1 .\nM3 P1 M1 .\nM3 P2 M1 .\nM3 P3 M1 .\nM3 P4 M1\n}",
        "recursionDepth": 46,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q12813010 wdt:P57 wd:Q187261 .\nwd:Q12813010 wdt:P1040 wd:Q187261 .\nwd:Q12813010 wdt:P1431 wd:Q187261 .\nwd:Q12813010 wdt:P162|wdt:P272 wd:Q187261 .\nwd:Q12813010 wdt:P58 wd:Q187261 .\nwd:Q5437360 wdt:P57 wd:Q187261 .\nwd:Q5437360 wdt:P1040 wd:Q187261 .\nwd:Q5437360 wdt:P1431 wd:Q187261 .\nwd:Q5437360 wdt:P162|wdt:P272 wd:Q187261 .\nwd:Q5437360 wdt:P58 wd:Q187261 .\nwd:Q6084069 wdt:P57 wd:Q187261 .\nwd:Q6084069 wdt:P1040 wd:Q187261 .\nwd:Q6084069 wdt:P1431 wd:Q187261 .\nwd:Q6084069 wdt:P162|wdt:P272 wd:Q187261 .\nwd:Q6084069 wdt:P58 wd:Q187261\n}",
        "questionWithBrackets": "Were [Fate] , [The Confession] , and [The Waiting Room] executive produced by , edited by , produced by , written by , and directed by [Zeki Demirkubuz]"
    },
    {
        "questionIdx": 125944,
        "questionPatternModEntities": "Were M2 and M4 edited by a male sibling of M0 and directed by M3",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M0 ) .\nM2 P2 ?x0 .\nM2 P3 M3 .\nM4 P2 ?x0 .\nM4 P3 M3\n}",
        "recursionDepth": 38,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P21 wd:Q6581097 .\n?x0 wdt:P3373 wd:Q11404271 .\nFILTER ( ?x0 != wd:Q11404271 ) .\nwd:Q1724012 wdt:P57 wd:Q26372 .\nwd:Q1724012 wdt:P1040 ?x0 .\nwd:Q260208 wdt:P57 wd:Q26372 .\nwd:Q260208 wdt:P1040 ?x0\n}",
        "questionWithBrackets": "Were [Dolls] and [Glory to the Filmmaker!] edited by a male sibling of [Masaru Kitano] and directed by [Takeshi Kitano]"
    },
    {
        "questionIdx": 125954,
        "questionPatternModEntities": "Were M0 , M2 , and M3 written by , edited by , produced by , executive produced by , and directed by M1",
        "questionTemplate": "Were [entity] , [entity] , and [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1 .\nM0 P2 M1 .\nM0 P3 M1 .\nM0 P4 M1 .\nM2 P0 M1 .\nM2 P1 M1 .\nM2 P2 M1 .\nM2 P3 M1 .\nM2 P4 M1 .\nM3 P0 M1 .\nM3 P1 M1 .\nM3 P2 M1 .\nM3 P3 M1 .\nM3 P4 M1\n}",
        "recursionDepth": 46,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q5437360 wdt:P57 wd:Q187261 .\nwd:Q5437360 wdt:P1040 wd:Q187261 .\nwd:Q5437360 wdt:P1431 wd:Q187261 .\nwd:Q5437360 wdt:P162|wdt:P272 wd:Q187261 .\nwd:Q5437360 wdt:P58 wd:Q187261 .\nwd:Q6084069 wdt:P57 wd:Q187261 .\nwd:Q6084069 wdt:P1040 wd:Q187261 .\nwd:Q6084069 wdt:P1431 wd:Q187261 .\nwd:Q6084069 wdt:P162|wdt:P272 wd:Q187261 .\nwd:Q6084069 wdt:P58 wd:Q187261 .\nwd:Q12813010 wdt:P57 wd:Q187261 .\nwd:Q12813010 wdt:P1040 wd:Q187261 .\nwd:Q12813010 wdt:P1431 wd:Q187261 .\nwd:Q12813010 wdt:P162|wdt:P272 wd:Q187261 .\nwd:Q12813010 wdt:P58 wd:Q187261\n}",
        "questionWithBrackets": "Were [Fate] , [The Waiting Room] , and [The Confession] written by , edited by , produced by , executive produced by , and directed by [Zeki Demirkubuz]"
    },
    {
        "questionIdx": 125960,
        "questionPatternModEntities": "Were M0 , M2 , M3 , and M4 executive produced by , written by , and directed by M1",
        "questionTemplate": "Were [entity] , [entity] , [entity] , and [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1 .\nM0 P2 M1 .\nM2 P0 M1 .\nM2 P1 M1 .\nM2 P2 M1 .\nM3 P0 M1 .\nM3 P1 M1 .\nM3 P2 M1 .\nM4 P0 M1 .\nM4 P1 M1 .\nM4 P2 M1\n}",
        "recursionDepth": 37,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q3707067 wdt:P57 wd:Q85134 .\nwd:Q3707067 wdt:P1431 wd:Q85134 .\nwd:Q3707067 wdt:P58 wd:Q85134 .\nwd:Q3707071 wdt:P57 wd:Q85134 .\nwd:Q3707071 wdt:P1431 wd:Q85134 .\nwd:Q3707071 wdt:P58 wd:Q85134 .\nwd:Q3707064 wdt:P57 wd:Q85134 .\nwd:Q3707064 wdt:P1431 wd:Q85134 .\nwd:Q3707064 wdt:P58 wd:Q85134 .\nwd:Q3707065 wdt:P57 wd:Q85134 .\nwd:Q3707065 wdt:P1431 wd:Q85134 .\nwd:Q3707065 wdt:P58 wd:Q85134\n}",
        "questionWithBrackets": "Were [No label defined] , [No label defined] , [No label defined] , and [No label defined] executive produced by , written by , and directed by [Joe May]"
    },
    {
        "questionIdx": 126003,
        "questionPatternModEntities": "Were M0 and M2 directed and edited by M1",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1 .\nM2 P0 M1 .\nM2 P1 M1\n}",
        "recursionDepth": 23,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q854990 wdt:P57 wd:Q8006 .\nwd:Q854990 wdt:P1040 wd:Q8006 .\nwd:Q847709 wdt:P57 wd:Q8006 .\nwd:Q847709 wdt:P1040 wd:Q8006\n}",
        "questionWithBrackets": "Were [Red Beard] and [Kagemusha] directed and edited by [Akira Kurosawa]"
    },
    {
        "questionIdx": 126006,
        "questionPatternModEntities": "Were M2 and M4 distributed by M3 and produced by a British spouse of M1",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by [entity] and [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M1 ) .\nM2 P2 M3 .\nM2 P3 ?x0 .\nM4 P2 M3 .\nM4 P3 ?x0\n}",
        "recursionDepth": 38,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P27 wd:Q145 .\n?x0 wdt:P26 wd:Q657354 .\nFILTER ( ?x0 != wd:Q657354 ) .\nwd:Q855673 wdt:P750 wd:Q9531 .\nwd:Q855673 wdt:P162|wdt:P272 ?x0 .\nwd:Q5912197 wdt:P750 wd:Q9531 .\nwd:Q5912197 wdt:P162|wdt:P272 ?x0\n}",
        "questionWithBrackets": "Were [Hotel du Lac] and [Pride and Prejudice] distributed by [BBC] and produced by a British spouse of [Richard Eyre]"
    },
    {
        "questionIdx": 126031,
        "questionPatternModEntities": "Were M1 , M2 , and M3 edited by M0 's parent",
        "questionTemplate": "Were [entity] , [entity] , and [entity] [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 ?x0 .\nM2 P1 ?x0 .\nM3 P1 ?x0\n}",
        "recursionDepth": 23,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q230636 .\nwd:Q641474 wdt:P1040 ?x0 .\nwd:Q238211 wdt:P1040 ?x0 .\nwd:Q166739 wdt:P1040 ?x0\n}",
        "questionWithBrackets": "Were [The Tramp] , [The Floorwalker] , and [City Lights] edited by [Geraldine Chaplin] 's parent"
    },
    {
        "questionIdx": 126036,
        "questionPatternModEntities": "Were M2 , M3 , M4 , and M5 edited by , produced by , and directed by a British spouse of M1",
        "questionTemplate": "Were [entity] , [entity] , [entity] , and [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M1 ) .\nM2 P2 ?x0 .\nM2 P3 ?x0 .\nM2 P4 ?x0 .\nM3 P2 ?x0 .\nM3 P3 ?x0 .\nM3 P4 ?x0 .\nM4 P2 ?x0 .\nM4 P3 ?x0 .\nM4 P4 ?x0 .\nM5 P2 ?x0 .\nM5 P3 ?x0 .\nM5 P4 ?x0\n}",
        "recursionDepth": 47,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P27 wd:Q145 .\n?x0 wdt:P26 wd:Q95050 .\nFILTER ( ?x0 != wd:Q95050 ) .\nwd:Q759443 wdt:P57 ?x0 .\nwd:Q759443 wdt:P1040 ?x0 .\nwd:Q759443 wdt:P162|wdt:P272 ?x0 .\nwd:Q166739 wdt:P57 ?x0 .\nwd:Q166739 wdt:P1040 ?x0 .\nwd:Q166739 wdt:P162|wdt:P272 ?x0 .\nwd:Q238211 wdt:P57 ?x0 .\nwd:Q238211 wdt:P1040 ?x0 .\nwd:Q238211 wdt:P162|wdt:P272 ?x0 .\nwd:Q669929 wdt:P57 ?x0 .\nwd:Q669929 wdt:P1040 ?x0 .\nwd:Q669929 wdt:P162|wdt:P272 ?x0\n}",
        "questionWithBrackets": "Were [Sunnyside] , [City Lights] , [The Floorwalker] , and [The Circus] edited by , produced by , and directed by a British spouse of [Paulette Goddard]"
    },
    {
        "questionIdx": 126037,
        "questionPatternModEntities": "Were M1 , M2 , M3 , and M4 written and edited by M0 's spouse 's spouse",
        "questionTemplate": "Were [entity] , [entity] , [entity] , and [entity] [VP_SIMPLE] and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x1 P0 M0 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x1 != M0 ) .\nM1 P1 ?x0 .\nM1 P2 ?x0 .\nM2 P1 ?x0 .\nM2 P2 ?x0 .\nM3 P1 ?x0 .\nM3 P2 ?x0 .\nM4 P1 ?x0 .\nM4 P2 ?x0\n}",
        "recursionDepth": 37,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P26 ?x1 .\n?x1 wdt:P26 wd:Q882 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x1 != wd:Q882 ) .\nwd:Q1197772 wdt:P1040 ?x0 .\nwd:Q1197772 wdt:P58 ?x0 .\nwd:Q199039 wdt:P1040 ?x0 .\nwd:Q199039 wdt:P58 ?x0 .\nwd:Q374172 wdt:P1040 ?x0 .\nwd:Q374172 wdt:P58 ?x0 .\nwd:Q45602 wdt:P1040 ?x0 .\nwd:Q45602 wdt:P58 ?x0\n}",
        "questionWithBrackets": "Were [The Vagabond] , [Modern Times] , [The Kid] , and [Pay Day] written and edited by [Charlie Chaplin] 's spouse 's spouse"
    },
    {
        "questionIdx": 126040,
        "questionPatternModEntities": "Were M0 , M2 , and M3 produced by and edited by M1",
        "questionTemplate": "Were [entity] , [entity] , and [entity] [VP_SIMPLE] by and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1 .\nM2 P0 M1 .\nM2 P1 M1 .\nM3 P0 M1 .\nM3 P1 M1\n}",
        "recursionDepth": 27,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q374172 wdt:P1040 wd:Q882 .\nwd:Q374172 wdt:P162|wdt:P272 wd:Q882 .\nwd:Q45602 wdt:P1040 wd:Q882 .\nwd:Q45602 wdt:P162|wdt:P272 wd:Q882 .\nwd:Q166739 wdt:P1040 wd:Q882 .\nwd:Q166739 wdt:P162|wdt:P272 wd:Q882\n}",
        "questionWithBrackets": "Were [The Kid] , [Modern Times] , and [The Floorwalker] produced by and edited by [Charlie Chaplin]"
    },
    {
        "questionIdx": 126047,
        "questionPatternModEntities": "Were M2 and M4 written by M3 and written by a French sibling of M0",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by [entity] and [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M0 ) .\nM2 P2 ?x0 .\nM2 P2 M3 .\nM4 P2 ?x0 .\nM4 P2 M3\n}",
        "recursionDepth": 38,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P27 wd:Q142 .\n?x0 wdt:P3373 wd:Q318448 .\nFILTER ( ?x0 != wd:Q318448 ) .\nwd:Q1550554 wdt:P58 ?x0 .\nwd:Q1550554 wdt:P58 wd:Q535 .\nwd:Q3233880 wdt:P58 ?x0 .\nwd:Q3233880 wdt:P58 wd:Q535\n}",
        "questionWithBrackets": "Were [Esmeralda] and [No label defined] written by [Victor Hugo] and written by a French sibling of [Abel Hugo]"
    },
    {
        "questionIdx": 126067,
        "questionPatternModEntities": "Were M1 and M2 edited by a parent of M0",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 ?x0 .\nM2 P1 ?x0\n}",
        "recursionDepth": 22,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q1710546 .\nwd:Q946849 wdt:P1040 ?x0 .\nwd:Q190575 wdt:P1040 ?x0\n}",
        "questionWithBrackets": "Were [Un Chien Andalou] and [L'Age d'Or] edited by a parent of [Juan Luis Bu\u00f1uel]"
    },
    {
        "questionIdx": 126068,
        "questionPatternModEntities": "Were M2 and M4 executive produced by M3 and directed by a British sibling of M0",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by [entity] and [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M0 ) .\nM2 P2 M3 .\nM2 P3 ?x0 .\nM4 P2 M3 .\nM4 P3 ?x0\n}",
        "recursionDepth": 39,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P27 wd:Q145 .\n?x0 wdt:P3373 wd:Q193648 .\nFILTER ( ?x0 != wd:Q193648 ) .\nwd:Q128518 wdt:P57 ?x0 .\nwd:Q128518 wdt:P1431 wd:Q56005 .\nwd:Q1195568 wdt:P57 ?x0 .\nwd:Q1195568 wdt:P1431 wd:Q56005\n}",
        "questionWithBrackets": "Were [Someone to Watch Over Me] and [Gladiator] executive produced by [Ridley Scott] and directed by a British sibling of [Tony Scott]"
    },
    {
        "questionIdx": 126110,
        "questionPatternModEntities": "Were M1 and M5 written by M0 's employee , executive produced by M2 and M3 , and executive produced by M4",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] , [VP_SIMPLE] by [entity] and [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 M2 .\nM1 P1 M3 .\nM1 P1 M4 .\nM1 P2 ?x0 .\nM5 P1 M2 .\nM5 P1 M3 .\nM5 P1 M4 .\nM5 P2 ?x0\n}",
        "recursionDepth": 46,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P108 wd:Q2216535 .\nwd:Q22350906 wdt:P1431 wd:Q549570 .\nwd:Q22350906 wdt:P1431 wd:Q8877 .\nwd:Q22350906 wdt:P1431 wd:Q237207 .\nwd:Q22350906 wdt:P58 ?x0 .\nwd:Q3362144 wdt:P1431 wd:Q549570 .\nwd:Q3362144 wdt:P1431 wd:Q8877 .\nwd:Q3362144 wdt:P1431 wd:Q237207 .\nwd:Q3362144 wdt:P58 ?x0\n}",
        "questionWithBrackets": "Were [Trail Mix-Up] and [Tummy Trouble] written by [Walt Disney Studios] 's employee , executive produced by [Steven Spielberg] and [Kathleen Kennedy] , and executive produced by [Frank Marshall]"
    },
    {
        "questionIdx": 126126,
        "questionPatternModEntities": "Were M0 and M3 produced , edited , and directed by M1 and M2",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P1 M1 .\nM0 P1 M2 .\nM0 P2 M1 .\nM0 P2 M2 .\nM3 P0 M1 .\nM3 P0 M2 .\nM3 P1 M1 .\nM3 P1 M2 .\nM3 P2 M1 .\nM3 P2 M2\n}",
        "recursionDepth": 32,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q20729238 wdt:P57 wd:Q562108 .\nwd:Q20729238 wdt:P57 wd:Q35979475 .\nwd:Q20729238 wdt:P1040 wd:Q562108 .\nwd:Q20729238 wdt:P1040 wd:Q35979475 .\nwd:Q20729238 wdt:P162|wdt:P272 wd:Q562108 .\nwd:Q20729238 wdt:P162|wdt:P272 wd:Q35979475 .\nwd:Q20729551 wdt:P57 wd:Q562108 .\nwd:Q20729551 wdt:P57 wd:Q35979475 .\nwd:Q20729551 wdt:P1040 wd:Q562108 .\nwd:Q20729551 wdt:P1040 wd:Q35979475 .\nwd:Q20729551 wdt:P162|wdt:P272 wd:Q562108 .\nwd:Q20729551 wdt:P162|wdt:P272 wd:Q35979475\n}",
        "questionWithBrackets": "Were [Stop for Bud] and [Motion picture] produced , edited , and directed by [Ole John] and [J\u00f8rgen Leth]"
    },
    {
        "questionIdx": 126141,
        "questionPatternModEntities": "Were M1 , M2 , M3 , and M4 edited and produced by a sibling of M0",
        "questionTemplate": "Were [entity] , [entity] , [entity] , and [entity] [VP_SIMPLE] and [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nM1 P1 ?x0 .\nM1 P2 ?x0 .\nM2 P1 ?x0 .\nM2 P2 ?x0 .\nM3 P1 ?x0 .\nM3 P2 ?x0 .\nM4 P1 ?x0 .\nM4 P2 ?x0\n}",
        "recursionDepth": 35,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P3373 wd:Q606780 .\nFILTER ( ?x0 != wd:Q606780 ) .\nwd:Q1152833 wdt:P1040 ?x0 .\nwd:Q1152833 wdt:P162|wdt:P272 ?x0 .\nwd:Q238211 wdt:P1040 ?x0 .\nwd:Q238211 wdt:P162|wdt:P272 ?x0 .\nwd:Q45602 wdt:P1040 ?x0 .\nwd:Q45602 wdt:P162|wdt:P272 ?x0 .\nwd:Q166739 wdt:P1040 ?x0 .\nwd:Q166739 wdt:P162|wdt:P272 ?x0\n}",
        "questionWithBrackets": "Were [Modern Times] , [City Lights] , [One A.M.] , and [The Floorwalker] edited and produced by a sibling of [Sydney Chaplin]"
    },
    {
        "questionIdx": 126157,
        "questionPatternModEntities": "Were M0 and M3 written by M1 and M2",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM3 P0 M1 .\nM3 P0 M2\n}",
        "recursionDepth": 20,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q752434 wdt:P58 wd:Q1666 .\nwd:Q752434 wdt:P58 wd:Q3370481 .\nwd:Q3222687 wdt:P58 wd:Q1666 .\nwd:Q3222687 wdt:P58 wd:Q3370481\n}",
        "questionWithBrackets": "Were [Far West] and [Franz] written by [Paul Andr\u00e9ota] and [Jacques Brel]"
    },
    {
        "questionIdx": 126210,
        "questionPatternModEntities": "Were M2 , M3 , M4 , M5 , and M6 directed by M1 's Chinese spouse",
        "questionTemplate": "Were [entity] , [entity] , [entity] , [entity] , and [entity] [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M1 ) .\nM2 P2 ?x0 .\nM3 P2 ?x0 .\nM4 P2 ?x0 .\nM5 P2 ?x0 .\nM6 P2 ?x0\n}",
        "recursionDepth": 34,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P27 wd:Q148 .\n?x0 wdt:P26 wd:Q545651 .\nFILTER ( ?x0 != wd:Q545651 ) .\nwd:Q734186 wdt:P57 ?x0 .\nwd:Q975564 wdt:P57 ?x0 .\nwd:Q71978 wdt:P57 ?x0 .\nwd:Q696413 wdt:P57 ?x0 .\nwd:Q611370 wdt:P57 ?x0\n}",
        "questionWithBrackets": "Were [Yellow Earth] , [Together] , [Temptress Moon] , [Farewell My Concubine] , and [The Promise] directed by [Chen Hong] 's Chinese spouse"
    },
    {
        "questionIdx": 126261,
        "questionPatternModEntities": "Were M1 and M2 directed by a parent of M0",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 ?x0 .\nM2 P1 ?x0\n}",
        "recursionDepth": 22,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q120593 .\nwd:Q109116 wdt:P57 ?x0 .\nwd:Q45602 wdt:P57 ?x0\n}",
        "questionWithBrackets": "Were [Modern Times] and [The Great Dictator] directed by a parent of [Eugene Chaplin]"
    },
    {
        "questionIdx": 126549,
        "questionPatternModEntities": "Were M0 , M2 , and M3 directed by , written by , edited by , executive produced by , and produced by M1",
        "questionTemplate": "Were [entity] , [entity] , and [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1 .\nM0 P2 M1 .\nM0 P3 M1 .\nM0 P4 M1 .\nM2 P0 M1 .\nM2 P1 M1 .\nM2 P2 M1 .\nM2 P3 M1 .\nM2 P4 M1 .\nM3 P0 M1 .\nM3 P1 M1 .\nM3 P2 M1 .\nM3 P3 M1 .\nM3 P4 M1\n}",
        "recursionDepth": 46,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q12813010 wdt:P57 wd:Q187261 .\nwd:Q12813010 wdt:P1040 wd:Q187261 .\nwd:Q12813010 wdt:P1431 wd:Q187261 .\nwd:Q12813010 wdt:P162|wdt:P272 wd:Q187261 .\nwd:Q12813010 wdt:P58 wd:Q187261 .\nwd:Q6084069 wdt:P57 wd:Q187261 .\nwd:Q6084069 wdt:P1040 wd:Q187261 .\nwd:Q6084069 wdt:P1431 wd:Q187261 .\nwd:Q6084069 wdt:P162|wdt:P272 wd:Q187261 .\nwd:Q6084069 wdt:P58 wd:Q187261 .\nwd:Q5437360 wdt:P57 wd:Q187261 .\nwd:Q5437360 wdt:P1040 wd:Q187261 .\nwd:Q5437360 wdt:P1431 wd:Q187261 .\nwd:Q5437360 wdt:P162|wdt:P272 wd:Q187261 .\nwd:Q5437360 wdt:P58 wd:Q187261\n}",
        "questionWithBrackets": "Were [The Confession] , [The Waiting Room] , and [Fate] directed by , written by , edited by , executive produced by , and produced by [Zeki Demirkubuz]"
    },
    {
        "questionIdx": 126605,
        "questionPatternModEntities": "Were M0 , M2 , and M3 executive produced by , written by , directed by , edited by , and produced by M1",
        "questionTemplate": "Were [entity] , [entity] , and [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1 .\nM0 P2 M1 .\nM0 P3 M1 .\nM0 P4 M1 .\nM2 P0 M1 .\nM2 P1 M1 .\nM2 P2 M1 .\nM2 P3 M1 .\nM2 P4 M1 .\nM3 P0 M1 .\nM3 P1 M1 .\nM3 P2 M1 .\nM3 P3 M1 .\nM3 P4 M1\n}",
        "recursionDepth": 46,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q484679 wdt:P57 wd:Q212990 .\nwd:Q484679 wdt:P1040 wd:Q212990 .\nwd:Q484679 wdt:P1431 wd:Q212990 .\nwd:Q484679 wdt:P162|wdt:P272 wd:Q212990 .\nwd:Q484679 wdt:P58 wd:Q212990 .\nwd:Q13471372 wdt:P57 wd:Q212990 .\nwd:Q13471372 wdt:P1040 wd:Q212990 .\nwd:Q13471372 wdt:P1431 wd:Q212990 .\nwd:Q13471372 wdt:P162|wdt:P272 wd:Q212990 .\nwd:Q13471372 wdt:P58 wd:Q212990 .\nwd:Q483197 wdt:P57 wd:Q212990 .\nwd:Q483197 wdt:P1040 wd:Q212990 .\nwd:Q483197 wdt:P1431 wd:Q212990 .\nwd:Q483197 wdt:P162|wdt:P272 wd:Q212990 .\nwd:Q483197 wdt:P58 wd:Q212990\n}",
        "questionWithBrackets": "Were [Dream] , [Piet\u00e0] , and [Moebius] executive produced by , written by , directed by , edited by , and produced by [Kim Ki-duk]"
    },
    {
        "questionIdx": 126607,
        "questionPatternModEntities": "Were M0 , M2 , and M3 produced by , executive produced by , edited by , written by , and directed by M1",
        "questionTemplate": "Were [entity] , [entity] , and [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1 .\nM0 P2 M1 .\nM0 P3 M1 .\nM0 P4 M1 .\nM2 P0 M1 .\nM2 P1 M1 .\nM2 P2 M1 .\nM2 P3 M1 .\nM2 P4 M1 .\nM3 P0 M1 .\nM3 P1 M1 .\nM3 P2 M1 .\nM3 P3 M1 .\nM3 P4 M1\n}",
        "recursionDepth": 46,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q5437360 wdt:P57 wd:Q187261 .\nwd:Q5437360 wdt:P1040 wd:Q187261 .\nwd:Q5437360 wdt:P1431 wd:Q187261 .\nwd:Q5437360 wdt:P162|wdt:P272 wd:Q187261 .\nwd:Q5437360 wdt:P58 wd:Q187261 .\nwd:Q6084069 wdt:P57 wd:Q187261 .\nwd:Q6084069 wdt:P1040 wd:Q187261 .\nwd:Q6084069 wdt:P1431 wd:Q187261 .\nwd:Q6084069 wdt:P162|wdt:P272 wd:Q187261 .\nwd:Q6084069 wdt:P58 wd:Q187261 .\nwd:Q12813010 wdt:P57 wd:Q187261 .\nwd:Q12813010 wdt:P1040 wd:Q187261 .\nwd:Q12813010 wdt:P1431 wd:Q187261 .\nwd:Q12813010 wdt:P162|wdt:P272 wd:Q187261 .\nwd:Q12813010 wdt:P58 wd:Q187261\n}",
        "questionWithBrackets": "Were [Fate] , [The Confession] , and [The Waiting Room] produced by , executive produced by , edited by , written by , and directed by [Zeki Demirkubuz]"
    },
    {
        "questionIdx": 126616,
        "questionPatternModEntities": "Were M0 , M2 , and M3 edited by , produced by , directed by , written by , and executive produced by M1",
        "questionTemplate": "Were [entity] , [entity] , and [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1 .\nM0 P2 M1 .\nM0 P3 M1 .\nM0 P4 M1 .\nM2 P0 M1 .\nM2 P1 M1 .\nM2 P2 M1 .\nM2 P3 M1 .\nM2 P4 M1 .\nM3 P0 M1 .\nM3 P1 M1 .\nM3 P2 M1 .\nM3 P3 M1 .\nM3 P4 M1\n}",
        "recursionDepth": 46,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q484679 wdt:P57 wd:Q212990 .\nwd:Q484679 wdt:P1040 wd:Q212990 .\nwd:Q484679 wdt:P1431 wd:Q212990 .\nwd:Q484679 wdt:P162|wdt:P272 wd:Q212990 .\nwd:Q484679 wdt:P58 wd:Q212990 .\nwd:Q13471372 wdt:P57 wd:Q212990 .\nwd:Q13471372 wdt:P1040 wd:Q212990 .\nwd:Q13471372 wdt:P1431 wd:Q212990 .\nwd:Q13471372 wdt:P162|wdt:P272 wd:Q212990 .\nwd:Q13471372 wdt:P58 wd:Q212990 .\nwd:Q483197 wdt:P57 wd:Q212990 .\nwd:Q483197 wdt:P1040 wd:Q212990 .\nwd:Q483197 wdt:P1431 wd:Q212990 .\nwd:Q483197 wdt:P162|wdt:P272 wd:Q212990 .\nwd:Q483197 wdt:P58 wd:Q212990\n}",
        "questionWithBrackets": "Were [Dream] , [Piet\u00e0] , and [Moebius] edited by , produced by , directed by , written by , and executive produced by [Kim Ki-duk]"
    },
    {
        "questionIdx": 126621,
        "questionPatternModEntities": "Were M0 , M2 , and M3 executive produced by , produced by , edited by , directed by , and written by M1",
        "questionTemplate": "Were [entity] , [entity] , and [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1 .\nM0 P2 M1 .\nM0 P3 M1 .\nM0 P4 M1 .\nM2 P0 M1 .\nM2 P1 M1 .\nM2 P2 M1 .\nM2 P3 M1 .\nM2 P4 M1 .\nM3 P0 M1 .\nM3 P1 M1 .\nM3 P2 M1 .\nM3 P3 M1 .\nM3 P4 M1\n}",
        "recursionDepth": 46,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q5437360 wdt:P57 wd:Q187261 .\nwd:Q5437360 wdt:P1040 wd:Q187261 .\nwd:Q5437360 wdt:P1431 wd:Q187261 .\nwd:Q5437360 wdt:P162|wdt:P272 wd:Q187261 .\nwd:Q5437360 wdt:P58 wd:Q187261 .\nwd:Q6084069 wdt:P57 wd:Q187261 .\nwd:Q6084069 wdt:P1040 wd:Q187261 .\nwd:Q6084069 wdt:P1431 wd:Q187261 .\nwd:Q6084069 wdt:P162|wdt:P272 wd:Q187261 .\nwd:Q6084069 wdt:P58 wd:Q187261 .\nwd:Q12813010 wdt:P57 wd:Q187261 .\nwd:Q12813010 wdt:P1040 wd:Q187261 .\nwd:Q12813010 wdt:P1431 wd:Q187261 .\nwd:Q12813010 wdt:P162|wdt:P272 wd:Q187261 .\nwd:Q12813010 wdt:P58 wd:Q187261\n}",
        "questionWithBrackets": "Were [Fate] , [The Confession] , and [The Waiting Room] executive produced by , produced by , edited by , directed by , and written by [Zeki Demirkubuz]"
    },
    {
        "questionIdx": 126629,
        "questionPatternModEntities": "Were M0 , M2 , M3 , and M4 directed , executive produced , and written by M1",
        "questionTemplate": "Were [entity] , [entity] , [entity] , and [entity] [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1 .\nM0 P2 M1 .\nM2 P0 M1 .\nM2 P1 M1 .\nM2 P2 M1 .\nM3 P0 M1 .\nM3 P1 M1 .\nM3 P2 M1 .\nM4 P0 M1 .\nM4 P1 M1 .\nM4 P2 M1\n}",
        "recursionDepth": 35,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q3707067 wdt:P57 wd:Q85134 .\nwd:Q3707067 wdt:P1431 wd:Q85134 .\nwd:Q3707067 wdt:P58 wd:Q85134 .\nwd:Q3707064 wdt:P57 wd:Q85134 .\nwd:Q3707064 wdt:P1431 wd:Q85134 .\nwd:Q3707064 wdt:P58 wd:Q85134 .\nwd:Q3707065 wdt:P57 wd:Q85134 .\nwd:Q3707065 wdt:P1431 wd:Q85134 .\nwd:Q3707065 wdt:P58 wd:Q85134 .\nwd:Q3707071 wdt:P57 wd:Q85134 .\nwd:Q3707071 wdt:P1431 wd:Q85134 .\nwd:Q3707071 wdt:P58 wd:Q85134\n}",
        "questionWithBrackets": "Were [No label defined] , [No label defined] , [No label defined] , and [No label defined] directed , executive produced , and written by [Joe May]"
    },
    {
        "questionIdx": 126633,
        "questionPatternModEntities": "Were M0 , M2 , M3 , and M4 executive produced by and directed by M1",
        "questionTemplate": "Were [entity] , [entity] , [entity] , and [entity] [VP_SIMPLE] by and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1 .\nM2 P0 M1 .\nM2 P1 M1 .\nM3 P0 M1 .\nM3 P1 M1 .\nM4 P0 M1 .\nM4 P1 M1\n}",
        "recursionDepth": 31,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q207698 wdt:P57 wd:Q56005 .\nwd:Q207698 wdt:P1431 wd:Q56005 .\nwd:Q1195568 wdt:P57 wd:Q56005 .\nwd:Q1195568 wdt:P1431 wd:Q56005 .\nwd:Q128518 wdt:P57 wd:Q56005 .\nwd:Q128518 wdt:P1431 wd:Q56005 .\nwd:Q60747802 wdt:P57 wd:Q56005 .\nwd:Q60747802 wdt:P1431 wd:Q56005\n}",
        "questionWithBrackets": "Were [Gladiator] , [Someone to Watch Over Me] , [Kingdom of Heaven] , and [Raised by Wolves] executive produced by and directed by [Ridley Scott]"
    },
    {
        "questionIdx": 126663,
        "questionPatternModEntities": "Were M0 , M2 , and M3 directed by , edited by , produced by , written by , and executive produced by M1",
        "questionTemplate": "Were [entity] , [entity] , and [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1 .\nM0 P2 M1 .\nM0 P3 M1 .\nM0 P4 M1 .\nM2 P0 M1 .\nM2 P1 M1 .\nM2 P2 M1 .\nM2 P3 M1 .\nM2 P4 M1 .\nM3 P0 M1 .\nM3 P1 M1 .\nM3 P2 M1 .\nM3 P3 M1 .\nM3 P4 M1\n}",
        "recursionDepth": 46,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q5437360 wdt:P57 wd:Q187261 .\nwd:Q5437360 wdt:P1040 wd:Q187261 .\nwd:Q5437360 wdt:P1431 wd:Q187261 .\nwd:Q5437360 wdt:P162|wdt:P272 wd:Q187261 .\nwd:Q5437360 wdt:P58 wd:Q187261 .\nwd:Q6084069 wdt:P57 wd:Q187261 .\nwd:Q6084069 wdt:P1040 wd:Q187261 .\nwd:Q6084069 wdt:P1431 wd:Q187261 .\nwd:Q6084069 wdt:P162|wdt:P272 wd:Q187261 .\nwd:Q6084069 wdt:P58 wd:Q187261 .\nwd:Q12813010 wdt:P57 wd:Q187261 .\nwd:Q12813010 wdt:P1040 wd:Q187261 .\nwd:Q12813010 wdt:P1431 wd:Q187261 .\nwd:Q12813010 wdt:P162|wdt:P272 wd:Q187261 .\nwd:Q12813010 wdt:P58 wd:Q187261\n}",
        "questionWithBrackets": "Were [Fate] , [The Waiting Room] , and [The Confession] directed by , edited by , produced by , written by , and executive produced by [Zeki Demirkubuz]"
    },
    {
        "questionIdx": 126664,
        "questionPatternModEntities": "Were M0 , M2 , and M3 edited by , produced by , executive produced by , directed by , and written by M1",
        "questionTemplate": "Were [entity] , [entity] , and [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1 .\nM0 P2 M1 .\nM0 P3 M1 .\nM0 P4 M1 .\nM2 P0 M1 .\nM2 P1 M1 .\nM2 P2 M1 .\nM2 P3 M1 .\nM2 P4 M1 .\nM3 P0 M1 .\nM3 P1 M1 .\nM3 P2 M1 .\nM3 P3 M1 .\nM3 P4 M1\n}",
        "recursionDepth": 46,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q484679 wdt:P57 wd:Q212990 .\nwd:Q484679 wdt:P1040 wd:Q212990 .\nwd:Q484679 wdt:P1431 wd:Q212990 .\nwd:Q484679 wdt:P162|wdt:P272 wd:Q212990 .\nwd:Q484679 wdt:P58 wd:Q212990 .\nwd:Q13471372 wdt:P57 wd:Q212990 .\nwd:Q13471372 wdt:P1040 wd:Q212990 .\nwd:Q13471372 wdt:P1431 wd:Q212990 .\nwd:Q13471372 wdt:P162|wdt:P272 wd:Q212990 .\nwd:Q13471372 wdt:P58 wd:Q212990 .\nwd:Q483197 wdt:P57 wd:Q212990 .\nwd:Q483197 wdt:P1040 wd:Q212990 .\nwd:Q483197 wdt:P1431 wd:Q212990 .\nwd:Q483197 wdt:P162|wdt:P272 wd:Q212990 .\nwd:Q483197 wdt:P58 wd:Q212990\n}",
        "questionWithBrackets": "Were [Dream] , [Moebius] , and [Piet\u00e0] edited by , produced by , executive produced by , directed by , and written by [Kim Ki-duk]"
    },
    {
        "questionIdx": 126708,
        "questionPatternModEntities": "Were M0 , M2 , and M3 directed by , executive produced by , produced by , written by , and edited by M1",
        "questionTemplate": "Were [entity] , [entity] , and [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1 .\nM0 P2 M1 .\nM0 P3 M1 .\nM0 P4 M1 .\nM2 P0 M1 .\nM2 P1 M1 .\nM2 P2 M1 .\nM2 P3 M1 .\nM2 P4 M1 .\nM3 P0 M1 .\nM3 P1 M1 .\nM3 P2 M1 .\nM3 P3 M1 .\nM3 P4 M1\n}",
        "recursionDepth": 46,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q5437360 wdt:P57 wd:Q187261 .\nwd:Q5437360 wdt:P1040 wd:Q187261 .\nwd:Q5437360 wdt:P1431 wd:Q187261 .\nwd:Q5437360 wdt:P162|wdt:P272 wd:Q187261 .\nwd:Q5437360 wdt:P58 wd:Q187261 .\nwd:Q6084069 wdt:P57 wd:Q187261 .\nwd:Q6084069 wdt:P1040 wd:Q187261 .\nwd:Q6084069 wdt:P1431 wd:Q187261 .\nwd:Q6084069 wdt:P162|wdt:P272 wd:Q187261 .\nwd:Q6084069 wdt:P58 wd:Q187261 .\nwd:Q12813010 wdt:P57 wd:Q187261 .\nwd:Q12813010 wdt:P1040 wd:Q187261 .\nwd:Q12813010 wdt:P1431 wd:Q187261 .\nwd:Q12813010 wdt:P162|wdt:P272 wd:Q187261 .\nwd:Q12813010 wdt:P58 wd:Q187261\n}",
        "questionWithBrackets": "Were [Fate] , [The Confession] , and [The Waiting Room] directed by , executive produced by , produced by , written by , and edited by [Zeki Demirkubuz]"
    },
    {
        "questionIdx": 126716,
        "questionPatternModEntities": "Were M0 , M2 , and M3 produced , executive produced , and edited by M1",
        "questionTemplate": "Were [entity] , [entity] , and [entity] [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1 .\nM0 P2 M1 .\nM2 P0 M1 .\nM2 P1 M1 .\nM2 P2 M1 .\nM3 P0 M1 .\nM3 P1 M1 .\nM3 P2 M1\n}",
        "recursionDepth": 32,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q5437360 wdt:P1040 wd:Q187261 .\nwd:Q5437360 wdt:P1431 wd:Q187261 .\nwd:Q5437360 wdt:P162|wdt:P272 wd:Q187261 .\nwd:Q6084069 wdt:P1040 wd:Q187261 .\nwd:Q6084069 wdt:P1431 wd:Q187261 .\nwd:Q6084069 wdt:P162|wdt:P272 wd:Q187261 .\nwd:Q12813010 wdt:P1040 wd:Q187261 .\nwd:Q12813010 wdt:P1431 wd:Q187261 .\nwd:Q12813010 wdt:P162|wdt:P272 wd:Q187261\n}",
        "questionWithBrackets": "Were [Fate] , [The Confession] , and [The Waiting Room] produced , executive produced , and edited by [Zeki Demirkubuz]"
    },
    {
        "questionIdx": 126744,
        "questionPatternModEntities": "Were M2 and M3 edited and written by M1 's Dutch spouse",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] and [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M1 ) .\nM2 P2 ?x0 .\nM2 P3 ?x0 .\nM3 P2 ?x0 .\nM3 P3 ?x0\n}",
        "recursionDepth": 32,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P27 wd:Q29999 .\n?x0 wdt:P26 wd:Q69776 .\nFILTER ( ?x0 != wd:Q69776 ) .\nwd:Q1057777 wdt:P1040 ?x0 .\nwd:Q1057777 wdt:P58 ?x0 .\nwd:Q3204364 wdt:P1040 ?x0 .\nwd:Q3204364 wdt:P58 ?x0\n}",
        "questionWithBrackets": "Were [No label defined] and [Rain] edited and written by [Germaine Krull] 's Dutch spouse"
    },
    {
        "questionIdx": 126763,
        "questionPatternModEntities": "Were M2 and M5 written by M3 and M4 and produced by a British parent of M1",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by [entity] and [entity] and [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nM2 P2 M3 .\nM2 P2 M4 .\nM2 P3 ?x0 .\nM5 P2 M3 .\nM5 P2 M4 .\nM5 P3 ?x0\n}",
        "recursionDepth": 42,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q22680558 .\n?x0 wdt:P27 wd:Q145 .\nwd:Q23780457 wdt:P162|wdt:P272 ?x0 .\nwd:Q23780457 wdt:P58 wd:Q32661 .\nwd:Q23780457 wdt:P58 wd:Q2593 .\nwd:Q4985891 wdt:P162|wdt:P272 ?x0 .\nwd:Q4985891 wdt:P58 wd:Q32661 .\nwd:Q4985891 wdt:P58 wd:Q2593\n}",
        "questionWithBrackets": "Were [X-Men: Days of Future Past] and [Kingsman: The Golden Circle] written by [Matthew Vaughn] and [Jane Goldman] and produced by a British parent of [Clementine Poppy]"
    },
    {
        "questionIdx": 126768,
        "questionPatternModEntities": "Were M2 , M3 , and M4 directed by , written by , produced by , and edited by M1 's male spouse",
        "questionTemplate": "Were [entity] , [entity] , and [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M1 ) .\nM2 P2 ?x0 .\nM2 P3 ?x0 .\nM2 P4 ?x0 .\nM2 P5 ?x0 .\nM3 P2 ?x0 .\nM3 P3 ?x0 .\nM3 P4 ?x0 .\nM3 P5 ?x0 .\nM4 P2 ?x0 .\nM4 P3 ?x0 .\nM4 P4 ?x0 .\nM4 P5 ?x0\n}",
        "recursionDepth": 48,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P21 wd:Q6581097 .\n?x0 wdt:P26 wd:Q3032150 .\nFILTER ( ?x0 != wd:Q3032150 ) .\nwd:Q854990 wdt:P57 ?x0 .\nwd:Q854990 wdt:P1040 ?x0 .\nwd:Q854990 wdt:P162|wdt:P272 ?x0 .\nwd:Q854990 wdt:P58 ?x0 .\nwd:Q1077915 wdt:P57 ?x0 .\nwd:Q1077915 wdt:P1040 ?x0 .\nwd:Q1077915 wdt:P162|wdt:P272 ?x0 .\nwd:Q1077915 wdt:P58 ?x0 .\nwd:Q39946 wdt:P57 ?x0 .\nwd:Q39946 wdt:P1040 ?x0 .\nwd:Q39946 wdt:P162|wdt:P272 ?x0 .\nwd:Q39946 wdt:P58 ?x0\n}",
        "questionWithBrackets": "Were [Kagemusha] , [The Hidden Fortress] , and [Sanshiro Sugata] directed by , written by , produced by , and edited by [Y\u014dko Yaguchi] 's male spouse"
    },
    {
        "questionIdx": 126771,
        "questionPatternModEntities": "Were M0 and M5 edited by M4 , executive produced by M1 , written by M2 , and written by M3",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M2 .\nM0 P1 M3 .\nM0 P2 M4 .\nM5 P0 M1 .\nM5 P1 M2 .\nM5 P1 M3 .\nM5 P2 M4\n}",
        "recursionDepth": 46,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q91540 wdt:P1040 wd:Q1586598 .\nwd:Q91540 wdt:P1431 wd:Q8877 .\nwd:Q91540 wdt:P58 wd:Q187364 .\nwd:Q91540 wdt:P58 wd:Q725773 .\nwd:Q109331 wdt:P1040 wd:Q1586598 .\nwd:Q109331 wdt:P1431 wd:Q8877 .\nwd:Q109331 wdt:P58 wd:Q187364 .\nwd:Q109331 wdt:P58 wd:Q725773\n}",
        "questionWithBrackets": "Were [Back to the Future] and [Back to the Future Part II] edited by [Harry Keramidas] , executive produced by [Steven Spielberg] , written by [Bob Gale] , and written by [Robert Zemeckis]"
    },
    {
        "questionIdx": 126822,
        "questionPatternModEntities": "Were M0 and M5 executive produced by M1 , M2 , M3 , and M4",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by [entity] , [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P0 M3 .\nM0 P0 M4 .\nM5 P0 M1 .\nM5 P0 M2 .\nM5 P0 M3 .\nM5 P0 M4\n}",
        "recursionDepth": 27,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q131074 wdt:P1431 wd:Q531599 .\nwd:Q131074 wdt:P1431 wd:Q888311 .\nwd:Q131074 wdt:P1431 wd:Q6832375 .\nwd:Q131074 wdt:P1431 wd:Q421488 .\nwd:Q127367 wdt:P1431 wd:Q531599 .\nwd:Q127367 wdt:P1431 wd:Q888311 .\nwd:Q127367 wdt:P1431 wd:Q6832375 .\nwd:Q127367 wdt:P1431 wd:Q421488\n}",
        "questionWithBrackets": "Were [The Lord of the Rings: The Fellowship of the Ring] and [The Lord of the Rings: The Return of the King] executive produced by [Michael Lynne] , [Mark Ordesky] , [Bob Weinstein] , and [Harvey Weinstein]"
    },
    {
        "questionIdx": 126827,
        "questionPatternModEntities": "Were M2 and M4 written by a female sibling of M0 and executive produced by M3",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M0 ) .\nM2 P2 M3 .\nM2 P3 ?x0 .\nM4 P2 M3 .\nM4 P3 ?x0\n}",
        "recursionDepth": 39,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P21 wd:Q6581072 .\n?x0 wdt:P3373 wd:Q155299 .\nFILTER ( ?x0 != wd:Q155299 ) .\nwd:Q3077738 wdt:P1431 wd:Q56094 .\nwd:Q3077738 wdt:P58 ?x0 .\nwd:Q1338368 wdt:P1431 wd:Q56094 .\nwd:Q1338368 wdt:P58 ?x0\n}",
        "questionWithBrackets": "Were [Somewhere] and [The Bling Ring] written by a female sibling of [Gian-Carlo Coppola] and executive produced by [Francis Ford Coppola]"
    },
    {
        "questionIdx": 126841,
        "questionPatternModEntities": "Were M2 and M5 directed by M4 , directed by a employee of M0 and M1 , and executive produced by M3",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by [entity] , [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity] and [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\nM2 P1 M3 .\nM2 P2 ?x0 .\nM2 P2 M4 .\nM5 P1 M3 .\nM5 P2 ?x0 .\nM5 P2 M4\n}",
        "recursionDepth": 47,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P108 wd:Q182950 .\n?x0 wdt:P108 wd:Q730179 .\nwd:Q167206 wdt:P57 ?x0 .\nwd:Q167206 wdt:P57 wd:Q178713 .\nwd:Q167206 wdt:P1431 wd:Q55400 .\nwd:Q1045889 wdt:P57 ?x0 .\nwd:Q1045889 wdt:P57 wd:Q178713 .\nwd:Q1045889 wdt:P1431 wd:Q55400\n}",
        "questionWithBrackets": "Were [Only Yesterday] and [Pom Poko] directed by [Isao Takahata] , directed by a employee of [Studio Ghibli] and [Toei Animation] , and executive produced by [Hayao Miyazaki]"
    },
    {
        "questionIdx": 126854,
        "questionPatternModEntities": "Were M0 and M2 distributed by M1",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM2 P0 M1\n}",
        "recursionDepth": 16,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q85782068 wdt:P750 wd:Q312 .\nwd:Q203383 wdt:P750 wd:Q312\n}",
        "questionWithBrackets": "Were [1984] and [Long Way Up] distributed by [Apple Inc.]"
    },
    {
        "questionIdx": 126861,
        "questionPatternModEntities": "Were M0 and M3 written , produced , and edited by M1 and M2",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P1 M1 .\nM0 P1 M2 .\nM0 P2 M1 .\nM0 P2 M2 .\nM3 P0 M1 .\nM3 P0 M2 .\nM3 P1 M1 .\nM3 P1 M2 .\nM3 P2 M1 .\nM3 P2 M2\n}",
        "recursionDepth": 32,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q20729238 wdt:P1040 wd:Q562108 .\nwd:Q20729238 wdt:P1040 wd:Q35979475 .\nwd:Q20729238 wdt:P162|wdt:P272 wd:Q562108 .\nwd:Q20729238 wdt:P162|wdt:P272 wd:Q35979475 .\nwd:Q20729238 wdt:P58 wd:Q562108 .\nwd:Q20729238 wdt:P58 wd:Q35979475 .\nwd:Q20729551 wdt:P1040 wd:Q562108 .\nwd:Q20729551 wdt:P1040 wd:Q35979475 .\nwd:Q20729551 wdt:P162|wdt:P272 wd:Q562108 .\nwd:Q20729551 wdt:P162|wdt:P272 wd:Q35979475 .\nwd:Q20729551 wdt:P58 wd:Q562108 .\nwd:Q20729551 wdt:P58 wd:Q35979475\n}",
        "questionWithBrackets": "Were [Motion picture] and [Stop for Bud] written , produced , and edited by [J\u00f8rgen Leth] and [Ole John]"
    },
    {
        "questionIdx": 126874,
        "questionPatternModEntities": "Were M2 , M3 , and M4 directed , edited , and written by a female spouse of M1",
        "questionTemplate": "Were [entity] , [entity] , and [entity] [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M1 ) .\nM2 P2 ?x0 .\nM2 P3 ?x0 .\nM2 P4 ?x0 .\nM3 P2 ?x0 .\nM3 P3 ?x0 .\nM3 P4 ?x0 .\nM4 P2 ?x0 .\nM4 P3 ?x0 .\nM4 P4 ?x0\n}",
        "recursionDepth": 42,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P21 wd:Q6581072 .\n?x0 wdt:P26 wd:Q16266828 .\nFILTER ( ?x0 != wd:Q16266828 ) .\nwd:Q156497 wdt:P57 ?x0 .\nwd:Q156497 wdt:P1040 ?x0 .\nwd:Q156497 wdt:P58 ?x0 .\nwd:Q158069 wdt:P57 ?x0 .\nwd:Q158069 wdt:P1040 ?x0 .\nwd:Q158069 wdt:P58 ?x0 .\nwd:Q497617 wdt:P57 ?x0 .\nwd:Q497617 wdt:P1040 ?x0 .\nwd:Q497617 wdt:P58 ?x0\n}",
        "questionWithBrackets": "Were [Triumph of the Will] , [Olympia] , and [Tag der Freiheit: Unsere Wehrmacht] directed , edited , and written by a female spouse of [Horst Kettner]"
    },
    {
        "questionIdx": 126876,
        "questionPatternModEntities": "Were M2 , M3 , and M4 edited by , written by , and directed by a female spouse of M1",
        "questionTemplate": "Were [entity] , [entity] , and [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M1 ) .\nM2 P2 ?x0 .\nM2 P3 ?x0 .\nM2 P4 ?x0 .\nM3 P2 ?x0 .\nM3 P3 ?x0 .\nM3 P4 ?x0 .\nM4 P2 ?x0 .\nM4 P3 ?x0 .\nM4 P4 ?x0\n}",
        "recursionDepth": 44,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P21 wd:Q6581072 .\n?x0 wdt:P26 wd:Q16266828 .\nFILTER ( ?x0 != wd:Q16266828 ) .\nwd:Q700206 wdt:P57 ?x0 .\nwd:Q700206 wdt:P1040 ?x0 .\nwd:Q700206 wdt:P58 ?x0 .\nwd:Q2714744 wdt:P57 ?x0 .\nwd:Q2714744 wdt:P1040 ?x0 .\nwd:Q2714744 wdt:P58 ?x0 .\nwd:Q156497 wdt:P57 ?x0 .\nwd:Q156497 wdt:P1040 ?x0 .\nwd:Q156497 wdt:P58 ?x0\n}",
        "questionWithBrackets": "Were [Der Sieg des Glaubens] , [Impressionen unter Wasser] , and [Triumph of the Will] edited by , written by , and directed by a female spouse of [Horst Kettner]"
    },
    {
        "questionIdx": 126877,
        "questionPatternModEntities": "Were M2 , M3 , and M4 edited , written , and directed by a female spouse of M1",
        "questionTemplate": "Were [entity] , [entity] , and [entity] [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M1 ) .\nM2 P2 ?x0 .\nM2 P3 ?x0 .\nM2 P4 ?x0 .\nM3 P2 ?x0 .\nM3 P3 ?x0 .\nM3 P4 ?x0 .\nM4 P2 ?x0 .\nM4 P3 ?x0 .\nM4 P4 ?x0\n}",
        "recursionDepth": 42,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P21 wd:Q6581072 .\n?x0 wdt:P26 wd:Q16266828 .\nFILTER ( ?x0 != wd:Q16266828 ) .\nwd:Q158069 wdt:P57 ?x0 .\nwd:Q158069 wdt:P1040 ?x0 .\nwd:Q158069 wdt:P58 ?x0 .\nwd:Q497617 wdt:P57 ?x0 .\nwd:Q497617 wdt:P1040 ?x0 .\nwd:Q497617 wdt:P58 ?x0 .\nwd:Q156497 wdt:P57 ?x0 .\nwd:Q156497 wdt:P1040 ?x0 .\nwd:Q156497 wdt:P58 ?x0\n}",
        "questionWithBrackets": "Were [Olympia] , [Tag der Freiheit: Unsere Wehrmacht] , and [Triumph of the Will] edited , written , and directed by a female spouse of [Horst Kettner]"
    },
    {
        "questionIdx": 126894,
        "questionPatternModEntities": "Were M2 and M3 executive produced by a spouse of a Swedish spouse of M1",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by a [ROLE_SIMPLE] of a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x1 P0 M1 .\n?x1 P1 M0 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x1 != M1 ) .\nM2 P2 ?x0 .\nM3 P2 ?x0\n}",
        "recursionDepth": 34,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P26 ?x1 .\n?x1 wdt:P27 wd:Q34 .\n?x1 wdt:P26 wd:Q60525 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x1 != wd:Q60525 ) .\nwd:Q480696 wdt:P1431 ?x0 .\nwd:Q562046 wdt:P1431 ?x0\n}",
        "questionWithBrackets": "Were [Die goldene Stadt] and [The Great King] executive produced by a spouse of a Swedish spouse of [Veit Harlan]"
    },
    {
        "questionIdx": 126926,
        "questionPatternModEntities": "Were M2 , M5 , and M6 executive produced by M0 's female employee and executive produced by M3 and M4",
        "questionTemplate": "Were [entity] , [entity] , and [entity] [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nM2 P2 ?x0 .\nM2 P2 M3 .\nM2 P2 M4 .\nM5 P2 ?x0 .\nM5 P2 M3 .\nM5 P2 M4 .\nM6 P2 ?x0 .\nM6 P2 M3 .\nM6 P2 M4\n}",
        "recursionDepth": 45,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P108 wd:Q9531 .\n?x0 wdt:P21 wd:Q6581072 .\nwd:Q2074999 wdt:P1431 ?x0 .\nwd:Q2074999 wdt:P1431 wd:Q361981 .\nwd:Q2074999 wdt:P1431 wd:Q1800397 .\nwd:Q3211735 wdt:P1431 ?x0 .\nwd:Q3211735 wdt:P1431 wd:Q361981 .\nwd:Q3211735 wdt:P1431 wd:Q1800397 .\nwd:Q2075057 wdt:P1431 ?x0 .\nwd:Q2075057 wdt:P1431 wd:Q361981 .\nwd:Q2075057 wdt:P1431 wd:Q1800397\n}",
        "questionWithBrackets": "Were [Utopia] , [The Satan Pit] , and [The Sound of Drums] executive produced by [BBC] 's female employee and executive produced by [Russell T Davies] and [Julie Gardner]"
    },
    {
        "questionIdx": 126962,
        "questionPatternModEntities": "Were M0 and M2 produced by and executive produced by M1",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1 .\nM2 P0 M1 .\nM2 P1 M1\n}",
        "recursionDepth": 25,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q524849 wdt:P1431 wd:Q72579 .\nwd:Q524849 wdt:P162|wdt:P272 wd:Q72579 .\nwd:Q3335452 wdt:P1431 wd:Q72579 .\nwd:Q3335452 wdt:P162|wdt:P272 wd:Q72579\n}",
        "questionWithBrackets": "Were [Name the Man] and [Barbary Coast] produced by and executive produced by [Samuel Goldwyn]"
    },
    {
        "questionIdx": 127001,
        "questionPatternModEntities": "Were M0 , M2 , and M3 produced and edited by M1",
        "questionTemplate": "Were [entity] , [entity] , and [entity] [VP_SIMPLE] and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1 .\nM2 P0 M1 .\nM2 P1 M1 .\nM3 P0 M1 .\nM3 P1 M1\n}",
        "recursionDepth": 26,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q1070468 wdt:P1040 wd:Q882 .\nwd:Q1070468 wdt:P162|wdt:P272 wd:Q882 .\nwd:Q238211 wdt:P1040 wd:Q882 .\nwd:Q238211 wdt:P162|wdt:P272 wd:Q882 .\nwd:Q199039 wdt:P1040 wd:Q882 .\nwd:Q199039 wdt:P162|wdt:P272 wd:Q882\n}",
        "questionWithBrackets": "Were [City Lights] , [The Immigrant] , and [Pay Day] produced and edited by [Charlie Chaplin]"
    },
    {
        "questionIdx": 127008,
        "questionPatternModEntities": "Were M2 , M4 , M5 , M6 , and M7 written by M0 's male sibling and directed by M3",
        "questionTemplate": "Were [entity] , [entity] , [entity] , [entity] , and [entity] [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M0 ) .\nM2 P2 ?x0 .\nM2 P3 M3 .\nM4 P2 ?x0 .\nM4 P3 M3 .\nM5 P2 ?x0 .\nM5 P3 M3 .\nM6 P2 ?x0 .\nM6 P3 M3 .\nM7 P2 ?x0 .\nM7 P3 M3\n}",
        "recursionDepth": 45,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P21 wd:Q6581097 .\n?x0 wdt:P3373 wd:Q3567655 .\nFILTER ( ?x0 != wd:Q3567655 ) .\nwd:Q2345349 wdt:P57 wd:Q882 .\nwd:Q2345349 wdt:P58 ?x0 .\nwd:Q45602 wdt:P57 wd:Q882 .\nwd:Q45602 wdt:P58 ?x0 .\nwd:Q109116 wdt:P57 wd:Q882 .\nwd:Q109116 wdt:P58 ?x0 .\nwd:Q166739 wdt:P57 wd:Q882 .\nwd:Q166739 wdt:P58 ?x0 .\nwd:Q199039 wdt:P57 wd:Q882 .\nwd:Q199039 wdt:P58 ?x0\n}",
        "questionWithBrackets": "Were [Pay Day] , [The Great Dictator] , [Modern Times] , [His Musical Career] , and [The Floorwalker] written by [Wheeler Dryden] 's male sibling and directed by [Charlie Chaplin]"
    },
    {
        "questionIdx": 127017,
        "questionPatternModEntities": "Were M2 and M3 produced by and edited by a Japanese parent of M1",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by and [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nM2 P2 ?x0 .\nM2 P3 ?x0 .\nM3 P2 ?x0 .\nM3 P3 ?x0\n}",
        "recursionDepth": 35,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q1620638 .\n?x0 wdt:P27 wd:Q17 .\nwd:Q854990 wdt:P1040 ?x0 .\nwd:Q854990 wdt:P162|wdt:P272 ?x0 .\nwd:Q39946 wdt:P1040 ?x0 .\nwd:Q39946 wdt:P162|wdt:P272 ?x0\n}",
        "questionWithBrackets": "Were [Kagemusha] and [The Hidden Fortress] produced by and edited by a Japanese parent of [Hisao Kurosawa]"
    },
    {
        "questionIdx": 127029,
        "questionPatternModEntities": "Were M2 , M3 , M4 , and M5 produced by , edited by , and directed by a Japanese spouse of M1",
        "questionTemplate": "Were [entity] , [entity] , [entity] , and [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M1 ) .\nM2 P2 ?x0 .\nM2 P3 ?x0 .\nM2 P4 ?x0 .\nM3 P2 ?x0 .\nM3 P3 ?x0 .\nM3 P4 ?x0 .\nM4 P2 ?x0 .\nM4 P3 ?x0 .\nM4 P4 ?x0 .\nM5 P2 ?x0 .\nM5 P3 ?x0 .\nM5 P4 ?x0\n}",
        "recursionDepth": 47,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P27 wd:Q17 .\n?x0 wdt:P26 wd:Q3032150 .\nFILTER ( ?x0 != wd:Q3032150 ) .\nwd:Q1077915 wdt:P57 ?x0 .\nwd:Q1077915 wdt:P1040 ?x0 .\nwd:Q1077915 wdt:P162|wdt:P272 ?x0 .\nwd:Q854990 wdt:P57 ?x0 .\nwd:Q854990 wdt:P1040 ?x0 .\nwd:Q854990 wdt:P162|wdt:P272 ?x0 .\nwd:Q39946 wdt:P57 ?x0 .\nwd:Q39946 wdt:P1040 ?x0 .\nwd:Q39946 wdt:P162|wdt:P272 ?x0 .\nwd:Q1475995 wdt:P57 ?x0 .\nwd:Q1475995 wdt:P1040 ?x0 .\nwd:Q1475995 wdt:P162|wdt:P272 ?x0\n}",
        "questionWithBrackets": "Were [Sanshiro Sugata] , [The Lower Depths] , [The Hidden Fortress] , and [Kagemusha] produced by , edited by , and directed by a Japanese spouse of [Y\u014dko Yaguchi]"
    },
    {
        "questionIdx": 127071,
        "questionPatternModEntities": "Were M2 , M4 , M5 , and M6 edited by M3 and produced by M0 's British sibling",
        "questionTemplate": "Were [entity] , [entity] , [entity] , and [entity] [VP_SIMPLE] by [entity] and [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M0 ) .\nM2 P2 ?x0 .\nM2 P3 M3 .\nM4 P2 ?x0 .\nM4 P3 M3 .\nM5 P2 ?x0 .\nM5 P3 M3 .\nM6 P2 ?x0 .\nM6 P3 M3\n}",
        "recursionDepth": 42,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P27 wd:Q145 .\n?x0 wdt:P3373 wd:Q606780 .\nFILTER ( ?x0 != wd:Q606780 ) .\nwd:Q1151401 wdt:P1040 wd:Q882 .\nwd:Q1151401 wdt:P162|wdt:P272 ?x0 .\nwd:Q1070468 wdt:P1040 wd:Q882 .\nwd:Q1070468 wdt:P162|wdt:P272 ?x0 .\nwd:Q669929 wdt:P1040 wd:Q882 .\nwd:Q669929 wdt:P162|wdt:P272 ?x0 .\nwd:Q166739 wdt:P1040 wd:Q882 .\nwd:Q166739 wdt:P162|wdt:P272 ?x0\n}",
        "questionWithBrackets": "Were [The Circus] , [The Pilgrim] , [The Floorwalker] , and [The Immigrant] edited by [Charlie Chaplin] and produced by [Sydney Chaplin] 's British sibling"
    },
    {
        "questionIdx": 127111,
        "questionPatternModEntities": "Were M0 , M2 , and M3 written by , produced by , edited by , directed by , and executive produced by M1",
        "questionTemplate": "Were [entity] , [entity] , and [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1 .\nM0 P2 M1 .\nM0 P3 M1 .\nM0 P4 M1 .\nM2 P0 M1 .\nM2 P1 M1 .\nM2 P2 M1 .\nM2 P3 M1 .\nM2 P4 M1 .\nM3 P0 M1 .\nM3 P1 M1 .\nM3 P2 M1 .\nM3 P3 M1 .\nM3 P4 M1\n}",
        "recursionDepth": 46,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q5437360 wdt:P57 wd:Q187261 .\nwd:Q5437360 wdt:P1040 wd:Q187261 .\nwd:Q5437360 wdt:P1431 wd:Q187261 .\nwd:Q5437360 wdt:P162|wdt:P272 wd:Q187261 .\nwd:Q5437360 wdt:P58 wd:Q187261 .\nwd:Q6084069 wdt:P57 wd:Q187261 .\nwd:Q6084069 wdt:P1040 wd:Q187261 .\nwd:Q6084069 wdt:P1431 wd:Q187261 .\nwd:Q6084069 wdt:P162|wdt:P272 wd:Q187261 .\nwd:Q6084069 wdt:P58 wd:Q187261 .\nwd:Q12813010 wdt:P57 wd:Q187261 .\nwd:Q12813010 wdt:P1040 wd:Q187261 .\nwd:Q12813010 wdt:P1431 wd:Q187261 .\nwd:Q12813010 wdt:P162|wdt:P272 wd:Q187261 .\nwd:Q12813010 wdt:P58 wd:Q187261\n}",
        "questionWithBrackets": "Were [Fate] , [The Confession] , and [The Waiting Room] written by , produced by , edited by , directed by , and executive produced by [Zeki Demirkubuz]"
    },
    {
        "questionIdx": 127130,
        "questionPatternModEntities": "Were M2 , M3 , and M4 edited by , written by , directed by , and produced by a male employee of M0",
        "questionTemplate": "Were [entity] , [entity] , and [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nM2 P2 ?x0 .\nM2 P3 ?x0 .\nM2 P4 ?x0 .\nM2 P5 ?x0 .\nM3 P2 ?x0 .\nM3 P3 ?x0 .\nM3 P4 ?x0 .\nM3 P5 ?x0 .\nM4 P2 ?x0 .\nM4 P3 ?x0 .\nM4 P4 ?x0 .\nM4 P5 ?x0\n}",
        "recursionDepth": 50,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P108 wd:Q13371 .\n?x0 wdt:P21 wd:Q6581097 .\nwd:Q2534007 wdt:P57 ?x0 .\nwd:Q2534007 wdt:P1040 ?x0 .\nwd:Q2534007 wdt:P162|wdt:P272 ?x0 .\nwd:Q2534007 wdt:P58 ?x0 .\nwd:Q1141467 wdt:P57 ?x0 .\nwd:Q1141467 wdt:P1040 ?x0 .\nwd:Q1141467 wdt:P162|wdt:P272 ?x0 .\nwd:Q1141467 wdt:P58 ?x0 .\nwd:Q2257944 wdt:P57 ?x0 .\nwd:Q2257944 wdt:P1040 ?x0 .\nwd:Q2257944 wdt:P162|wdt:P272 ?x0 .\nwd:Q2257944 wdt:P58 ?x0\n}",
        "questionWithBrackets": "Were [Joe's Bed-Stuy Barbershop: We Cut Heads] , [Crooklyn] , and [She's Gotta Have It] edited by , written by , directed by , and produced by a male employee of [Harvard University]"
    },
    {
        "questionIdx": 127148,
        "questionPatternModEntities": "Were M2 and M5 produced by M0 's British sibling , written by M3 , and written by M4",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M0 ) .\nM2 P2 M3 .\nM2 P2 M4 .\nM2 P3 ?x0 .\nM5 P2 M3 .\nM5 P2 M4 .\nM5 P3 ?x0\n}",
        "recursionDepth": 45,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P27 wd:Q145 .\n?x0 wdt:P3373 wd:Q372788 .\nFILTER ( ?x0 != wd:Q372788 ) .\nwd:Q163872 wdt:P162|wdt:P272 ?x0 .\nwd:Q163872 wdt:P58 wd:Q352010 .\nwd:Q163872 wdt:P58 wd:Q313048 .\nwd:Q189330 wdt:P162|wdt:P272 ?x0 .\nwd:Q189330 wdt:P58 wd:Q352010 .\nwd:Q189330 wdt:P58 wd:Q313048\n}",
        "questionWithBrackets": "Were [The Dark Knight Rises] and [The Dark Knight] produced by [Jonathan Nolan] 's British sibling , written by [David S. Goyer] , and written by [Bob Kane]"
    },
    {
        "questionIdx": 127164,
        "questionPatternModEntities": "Were M2 , M3 , and M4 edited by , written by , directed by , and produced by M0 's British sibling",
        "questionTemplate": "Were [entity] , [entity] , and [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M0 ) .\nM2 P2 ?x0 .\nM2 P3 ?x0 .\nM2 P4 ?x0 .\nM2 P5 ?x0 .\nM3 P2 ?x0 .\nM3 P3 ?x0 .\nM3 P4 ?x0 .\nM3 P5 ?x0 .\nM4 P2 ?x0 .\nM4 P3 ?x0 .\nM4 P4 ?x0 .\nM4 P5 ?x0\n}",
        "recursionDepth": 48,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P27 wd:Q145 .\n?x0 wdt:P3373 wd:Q3567655 .\nFILTER ( ?x0 != wd:Q3567655 ) .\nwd:Q2482645 wdt:P57 ?x0 .\nwd:Q2482645 wdt:P1040 ?x0 .\nwd:Q2482645 wdt:P162|wdt:P272 ?x0 .\nwd:Q2482645 wdt:P58 ?x0 .\nwd:Q45602 wdt:P57 ?x0 .\nwd:Q45602 wdt:P1040 ?x0 .\nwd:Q45602 wdt:P162|wdt:P272 ?x0 .\nwd:Q45602 wdt:P58 ?x0 .\nwd:Q166739 wdt:P57 ?x0 .\nwd:Q166739 wdt:P1040 ?x0 .\nwd:Q166739 wdt:P162|wdt:P272 ?x0 .\nwd:Q166739 wdt:P58 ?x0\n}",
        "questionWithBrackets": "Were [The Floorwalker] , [The Count] , and [Modern Times] edited by , written by , directed by , and produced by [Wheeler Dryden] 's British sibling"
    },
    {
        "questionIdx": 127186,
        "questionPatternModEntities": "Were M2 , M4 , and M5 edited by M3 and written by a female sibling of M0",
        "questionTemplate": "Were [entity] , [entity] , and [entity] [VP_SIMPLE] by [entity] and [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M0 ) .\nM2 P2 ?x0 .\nM2 P3 M3 .\nM4 P2 ?x0 .\nM4 P3 M3 .\nM5 P2 ?x0 .\nM5 P3 M3\n}",
        "recursionDepth": 41,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P21 wd:Q6581072 .\n?x0 wdt:P3373 wd:Q2657179 .\nFILTER ( ?x0 != wd:Q2657179 ) .\nwd:Q603857 wdt:P1040 wd:Q55211 .\nwd:Q603857 wdt:P58 ?x0 .\nwd:Q547387 wdt:P1040 wd:Q55211 .\nwd:Q547387 wdt:P58 ?x0 .\nwd:Q2399461 wdt:P1040 wd:Q55211 .\nwd:Q2399461 wdt:P58 ?x0\n}",
        "questionWithBrackets": "Were [11'09\"01 September 11] , [At Five in the Afternoon] , and [Blackboards] edited by [Mohsen Makhmalbaf] and written by a female sibling of [Hana Makhmalbaf]"
    },
    {
        "questionIdx": 127216,
        "questionPatternModEntities": "Were M0 and M2 executive produced by M1",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM2 P0 M1\n}",
        "recursionDepth": 17,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q44408 wdt:P1431 wd:Q38222 .\nwd:Q165713 wdt:P1431 wd:Q38222\n}",
        "questionWithBrackets": "Were [Star Wars: Episode I \u2013 The Phantom Menace] and [Captain EO] executive produced by [George Lucas]"
    },
    {
        "questionIdx": 127234,
        "questionPatternModEntities": "Were M1 , M2 , and M3 written by M0 's spouse",
        "questionTemplate": "Were [entity] , [entity] , and [entity] [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nM1 P1 ?x0 .\nM2 P1 ?x0 .\nM3 P1 ?x0\n}",
        "recursionDepth": 23,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P26 wd:Q137808 .\nFILTER ( ?x0 != wd:Q137808 ) .\nwd:Q2445490 wdt:P58 ?x0 .\nwd:Q199039 wdt:P58 ?x0 .\nwd:Q109116 wdt:P58 ?x0\n}",
        "questionWithBrackets": "Were [Pay Day] , [Tango Tangles] , and [The Great Dictator] written by [Oona O'Neill] 's spouse"
    },
    {
        "questionIdx": 127236,
        "questionPatternModEntities": "Were M2 and M3 written by , directed by , produced by , and edited by M0 's British sibling",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M0 ) .\nM2 P2 ?x0 .\nM2 P3 ?x0 .\nM2 P4 ?x0 .\nM2 P5 ?x0 .\nM3 P2 ?x0 .\nM3 P3 ?x0 .\nM3 P4 ?x0 .\nM3 P5 ?x0\n}",
        "recursionDepth": 45,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P27 wd:Q145 .\n?x0 wdt:P3373 wd:Q606780 .\nFILTER ( ?x0 != wd:Q606780 ) .\nwd:Q2482645 wdt:P57 ?x0 .\nwd:Q2482645 wdt:P1040 ?x0 .\nwd:Q2482645 wdt:P162|wdt:P272 ?x0 .\nwd:Q2482645 wdt:P58 ?x0 .\nwd:Q1070468 wdt:P57 ?x0 .\nwd:Q1070468 wdt:P1040 ?x0 .\nwd:Q1070468 wdt:P162|wdt:P272 ?x0 .\nwd:Q1070468 wdt:P58 ?x0\n}",
        "questionWithBrackets": "Were [The Count] and [The Immigrant] written by , directed by , produced by , and edited by [Sydney Chaplin] 's British sibling"
    },
    {
        "questionIdx": 127247,
        "questionPatternModEntities": "Were M2 , M3 , and M4 directed by , edited by , produced by , and written by a male spouse of M1",
        "questionTemplate": "Were [entity] , [entity] , and [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M1 ) .\nM2 P2 ?x0 .\nM2 P3 ?x0 .\nM2 P4 ?x0 .\nM2 P5 ?x0 .\nM3 P2 ?x0 .\nM3 P3 ?x0 .\nM3 P4 ?x0 .\nM3 P5 ?x0 .\nM4 P2 ?x0 .\nM4 P3 ?x0 .\nM4 P4 ?x0 .\nM4 P5 ?x0\n}",
        "recursionDepth": 50,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P21 wd:Q6581097 .\n?x0 wdt:P26 wd:Q95050 .\nFILTER ( ?x0 != wd:Q95050 ) .\nwd:Q1151401 wdt:P57 ?x0 .\nwd:Q1151401 wdt:P1040 ?x0 .\nwd:Q1151401 wdt:P162|wdt:P272 ?x0 .\nwd:Q1151401 wdt:P58 ?x0 .\nwd:Q45602 wdt:P57 ?x0 .\nwd:Q45602 wdt:P1040 ?x0 .\nwd:Q45602 wdt:P162|wdt:P272 ?x0 .\nwd:Q45602 wdt:P58 ?x0 .\nwd:Q1140317 wdt:P57 ?x0 .\nwd:Q1140317 wdt:P1040 ?x0 .\nwd:Q1140317 wdt:P162|wdt:P272 ?x0 .\nwd:Q1140317 wdt:P58 ?x0\n}",
        "questionWithBrackets": "Were [The Pilgrim] , [Shoulder Arms] , and [Modern Times] directed by , edited by , produced by , and written by a male spouse of [Paulette Goddard]"
    },
    {
        "questionIdx": 127250,
        "questionPatternModEntities": "Were M2 , M3 , M4 , and M5 directed by , produced by , and edited by M1 's British spouse",
        "questionTemplate": "Were [entity] , [entity] , [entity] , and [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M1 ) .\nM2 P2 ?x0 .\nM2 P3 ?x0 .\nM2 P4 ?x0 .\nM3 P2 ?x0 .\nM3 P3 ?x0 .\nM3 P4 ?x0 .\nM4 P2 ?x0 .\nM4 P3 ?x0 .\nM4 P4 ?x0 .\nM5 P2 ?x0 .\nM5 P3 ?x0 .\nM5 P4 ?x0\n}",
        "recursionDepth": 45,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P27 wd:Q145 .\n?x0 wdt:P26 wd:Q137808 .\nFILTER ( ?x0 != wd:Q137808 ) .\nwd:Q166739 wdt:P57 ?x0 .\nwd:Q166739 wdt:P1040 ?x0 .\nwd:Q166739 wdt:P162|wdt:P272 ?x0 .\nwd:Q238211 wdt:P57 ?x0 .\nwd:Q238211 wdt:P1040 ?x0 .\nwd:Q238211 wdt:P162|wdt:P272 ?x0 .\nwd:Q45602 wdt:P57 ?x0 .\nwd:Q45602 wdt:P1040 ?x0 .\nwd:Q45602 wdt:P162|wdt:P272 ?x0 .\nwd:Q199039 wdt:P57 ?x0 .\nwd:Q199039 wdt:P1040 ?x0 .\nwd:Q199039 wdt:P162|wdt:P272 ?x0\n}",
        "questionWithBrackets": "Were [The Floorwalker] , [Modern Times] , [City Lights] , and [Pay Day] directed by , produced by , and edited by [Oona O'Neill] 's British spouse"
    },
    {
        "questionIdx": 127283,
        "questionPatternModEntities": "Were M2 , M3 , M4 , and M5 written by and directed by a American spouse of M1",
        "questionTemplate": "Were [entity] , [entity] , [entity] , and [entity] [VP_SIMPLE] by and [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M1 ) .\nM2 P2 ?x0 .\nM2 P3 ?x0 .\nM3 P2 ?x0 .\nM3 P3 ?x0 .\nM4 P2 ?x0 .\nM4 P3 ?x0 .\nM5 P2 ?x0 .\nM5 P3 ?x0\n}",
        "recursionDepth": 41,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P27 wd:Q30 .\n?x0 wdt:P26 wd:Q3453645 .\nFILTER ( ?x0 != wd:Q3453645 ) .\nwd:Q929157 wdt:P57 ?x0 .\nwd:Q929157 wdt:P58 ?x0 .\nwd:Q103474 wdt:P57 ?x0 .\nwd:Q103474 wdt:P58 ?x0 .\nwd:Q105702 wdt:P57 ?x0 .\nwd:Q105702 wdt:P58 ?x0 .\nwd:Q471716 wdt:P57 ?x0 .\nwd:Q471716 wdt:P58 ?x0\n}",
        "questionWithBrackets": "Were [2001: A Space Odyssey] , [Barry Lyndon] , [Dr. Strangelove] , and [Fear and Desire] written by and directed by a American spouse of [Ruth Sobotka]"
    },
    {
        "questionIdx": 127321,
        "questionPatternModEntities": "Were M0 , M2 , and M3 produced and written by M1",
        "questionTemplate": "Were [entity] , [entity] , and [entity] [VP_SIMPLE] and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1 .\nM2 P0 M1 .\nM2 P1 M1 .\nM3 P0 M1 .\nM3 P1 M1\n}",
        "recursionDepth": 26,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q1151401 wdt:P162|wdt:P272 wd:Q882 .\nwd:Q1151401 wdt:P58 wd:Q882 .\nwd:Q109116 wdt:P162|wdt:P272 wd:Q882 .\nwd:Q109116 wdt:P58 wd:Q882 .\nwd:Q166739 wdt:P162|wdt:P272 wd:Q882 .\nwd:Q166739 wdt:P58 wd:Q882\n}",
        "questionWithBrackets": "Were [The Floorwalker] , [The Great Dictator] , and [The Pilgrim] produced and written by [Charlie Chaplin]"
    },
    {
        "questionIdx": 127381,
        "questionPatternModEntities": "Were M2 , M3 , M4 , M5 , and M6 directed by and written by a spouse of M1 's Mexican spouse",
        "questionTemplate": "Were [entity] , [entity] , [entity] , [entity] , and [entity] [VP_SIMPLE] by and [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x1 P0 M1 .\n?x1 P1 M0 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x1 != M1 ) .\nM2 P2 ?x0 .\nM2 P3 ?x0 .\nM3 P2 ?x0 .\nM3 P3 ?x0 .\nM4 P2 ?x0 .\nM4 P3 ?x0 .\nM5 P2 ?x0 .\nM5 P3 ?x0 .\nM6 P2 ?x0 .\nM6 P3 ?x0\n}",
        "recursionDepth": 48,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P26 ?x1 .\n?x1 wdt:P27 wd:Q96 .\n?x1 wdt:P26 wd:Q458612 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x1 != wd:Q458612 ) .\nwd:Q3129341 wdt:P57 ?x0 .\nwd:Q3129341 wdt:P58 ?x0 .\nwd:Q81213021 wdt:P57 ?x0 .\nwd:Q81213021 wdt:P58 ?x0 .\nwd:Q947076 wdt:P57 ?x0 .\nwd:Q947076 wdt:P58 ?x0 .\nwd:Q2578176 wdt:P57 ?x0 .\nwd:Q2578176 wdt:P58 ?x0 .\nwd:Q1429244 wdt:P57 ?x0 .\nwd:Q1429244 wdt:P58 ?x0\n}",
        "questionWithBrackets": "Were [Pueblito] , [R\u00edo Escondido] , [Mar\u00eda Candelaria] , [Wild Flower] , and [Las Abandonadas] directed by and written by a spouse of [Emilio Fern\u00e1ndez] 's Mexican spouse"
    },
    {
        "questionIdx": 127382,
        "questionPatternModEntities": "Were M0 and M3 written , directed , and produced by M1 and M2",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P1 M1 .\nM0 P1 M2 .\nM0 P2 M1 .\nM0 P2 M2 .\nM3 P0 M1 .\nM3 P0 M2 .\nM3 P1 M1 .\nM3 P1 M2 .\nM3 P2 M1 .\nM3 P2 M2\n}",
        "recursionDepth": 32,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q115537 wdt:P57 wd:Q55230 .\nwd:Q115537 wdt:P57 wd:Q55234 .\nwd:Q115537 wdt:P162|wdt:P272 wd:Q55230 .\nwd:Q115537 wdt:P162|wdt:P272 wd:Q55234 .\nwd:Q115537 wdt:P58 wd:Q55230 .\nwd:Q115537 wdt:P58 wd:Q55234 .\nwd:Q252529 wdt:P57 wd:Q55230 .\nwd:Q252529 wdt:P57 wd:Q55234 .\nwd:Q252529 wdt:P162|wdt:P272 wd:Q55230 .\nwd:Q252529 wdt:P162|wdt:P272 wd:Q55234 .\nwd:Q252529 wdt:P58 wd:Q55230 .\nwd:Q252529 wdt:P58 wd:Q55234\n}",
        "questionWithBrackets": "Were [I Know Where I'm Going!] and [Black Narcissus] written , directed , and produced by [Emeric Pressburger] and [Michael Powell]"
    },
    {
        "questionIdx": 127394,
        "questionPatternModEntities": "Were M2 and M4 edited by M3 , edited by M1 's spouse , and written by M0 's parent",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] , and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x1 P1 M1 .\nFILTER ( ?x1 != M1 ) .\nM2 P2 ?x0 .\nM2 P3 ?x1 .\nM2 P3 M3 .\nM4 P2 ?x0 .\nM4 P3 ?x1 .\nM4 P3 M3\n}",
        "recursionDepth": 44,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q230636 .\n?x1 wdt:P26 wd:Q95050 .\nFILTER ( ?x1 != wd:Q95050 ) .\nwd:Q3986814 wdt:P1040 ?x1 .\nwd:Q3986814 wdt:P1040 wd:Q882 .\nwd:Q3986814 wdt:P58 ?x0 .\nwd:Q2718259 wdt:P1040 ?x1 .\nwd:Q2718259 wdt:P1040 wd:Q882 .\nwd:Q2718259 wdt:P58 ?x0\n}",
        "questionWithBrackets": "Were [The Essanay-Chaplin Revue of 1916] and [The Professor] edited by [Charlie Chaplin] , edited by [Paulette Goddard] 's spouse , and written by [Geraldine Chaplin] 's parent"
    },
    {
        "questionIdx": 127399,
        "questionPatternModEntities": "Were M1 , M3 , M4 , M5 , and M6 directed by M2 and written by M0 's sibling",
        "questionTemplate": "Were [entity] , [entity] , [entity] , [entity] , and [entity] [VP_SIMPLE] by [entity] and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nM1 P1 ?x0 .\nM1 P2 M2 .\nM3 P1 ?x0 .\nM3 P2 M2 .\nM4 P1 ?x0 .\nM4 P2 M2 .\nM5 P1 ?x0 .\nM5 P2 M2 .\nM6 P1 ?x0 .\nM6 P2 M2\n}",
        "recursionDepth": 40,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P3373 wd:Q3567655 .\nFILTER ( ?x0 != wd:Q3567655 ) .\nwd:Q930154 wdt:P57 wd:Q882 .\nwd:Q930154 wdt:P58 ?x0 .\nwd:Q45602 wdt:P57 wd:Q882 .\nwd:Q45602 wdt:P58 ?x0 .\nwd:Q109116 wdt:P57 wd:Q882 .\nwd:Q109116 wdt:P58 ?x0 .\nwd:Q166739 wdt:P57 wd:Q882 .\nwd:Q166739 wdt:P58 ?x0 .\nwd:Q199039 wdt:P57 wd:Q882 .\nwd:Q199039 wdt:P58 ?x0\n}",
        "questionWithBrackets": "Were [Police] , [Pay Day] , [The Great Dictator] , [The Floorwalker] , and [Modern Times] directed by [Charlie Chaplin] and written by [Wheeler Dryden] 's sibling"
    },
    {
        "questionIdx": 127405,
        "questionPatternModEntities": "Were M0 , M3 , and M4 directed by and edited by M1 and M2",
        "questionTemplate": "Were [entity] , [entity] , and [entity] [VP_SIMPLE] by and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P1 M1 .\nM0 P1 M2 .\nM3 P0 M1 .\nM3 P0 M2 .\nM3 P1 M1 .\nM3 P1 M2 .\nM4 P0 M1 .\nM4 P0 M2 .\nM4 P1 M1 .\nM4 P1 M2\n}",
        "recursionDepth": 31,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q20757119 wdt:P57 wd:Q562108 .\nwd:Q20757119 wdt:P57 wd:Q35979475 .\nwd:Q20757119 wdt:P1040 wd:Q562108 .\nwd:Q20757119 wdt:P1040 wd:Q35979475 .\nwd:Q19827613 wdt:P57 wd:Q562108 .\nwd:Q19827613 wdt:P57 wd:Q35979475 .\nwd:Q19827613 wdt:P1040 wd:Q562108 .\nwd:Q19827613 wdt:P1040 wd:Q35979475 .\nwd:Q20729238 wdt:P57 wd:Q562108 .\nwd:Q20729238 wdt:P57 wd:Q35979475 .\nwd:Q20729238 wdt:P1040 wd:Q562108 .\nwd:Q20729238 wdt:P1040 wd:Q35979475\n}",
        "questionWithBrackets": "Were [No label defined] , [Motion picture] , and [Near Heaven, Near Earth] directed by and edited by [Ole John] and [J\u00f8rgen Leth]"
    },
    {
        "questionIdx": 127412,
        "questionPatternModEntities": "Were M1 and M2 directed by M0 's child 's employee",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x1 P1 M0 .\nM1 P2 ?x0 .\nM2 P2 ?x0\n}",
        "recursionDepth": 24,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P108 ?x1 .\n?x1 wdt:P749 wd:Q1065 .\nwd:Q364115 wdt:P57 ?x0 .\nwd:Q5553764 wdt:P57 ?x0\n}",
        "questionWithBrackets": "Were [Social Genocide] and [Argentina latente] directed by [United Nations] 's child 's employee"
    },
    {
        "questionIdx": 127426,
        "questionPatternModEntities": "Were M2 , M3 , M4 , and M5 edited by and written by a male employee of M0",
        "questionTemplate": "Were [entity] , [entity] , [entity] , and [entity] [VP_SIMPLE] by and [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nM2 P2 ?x0 .\nM2 P3 ?x0 .\nM3 P2 ?x0 .\nM3 P3 ?x0 .\nM4 P2 ?x0 .\nM4 P3 ?x0 .\nM5 P2 ?x0 .\nM5 P3 ?x0\n}",
        "recursionDepth": 41,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P108 wd:Q909176 .\n?x0 wdt:P21 wd:Q6581097 .\nwd:Q1992724 wdt:P1040 ?x0 .\nwd:Q1992724 wdt:P58 ?x0 .\nwd:Q3228039 wdt:P1040 ?x0 .\nwd:Q3228039 wdt:P58 ?x0 .\nwd:Q672061 wdt:P1040 ?x0 .\nwd:Q672061 wdt:P58 ?x0 .\nwd:Q972787 wdt:P1040 ?x0 .\nwd:Q972787 wdt:P58 ?x0\n}",
        "questionWithBrackets": "Were [Passion] , [Wind from the East] , [Every Man for Himself] , and [Keep Your Right Up] edited by and written by a male employee of [Cahiers du cin\u00e9ma]"
    },
    {
        "questionIdx": 127434,
        "questionPatternModEntities": "Were M2 and M3 directed by , executive produced by , and written by a female spouse of M1",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M1 ) .\nM2 P2 ?x0 .\nM2 P3 ?x0 .\nM2 P4 ?x0 .\nM3 P2 ?x0 .\nM3 P3 ?x0 .\nM3 P4 ?x0\n}",
        "recursionDepth": 42,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P21 wd:Q6581072 .\n?x0 wdt:P26 wd:Q57737617 .\nFILTER ( ?x0 != wd:Q57737617 ) .\nwd:Q60229340 wdt:P57 ?x0 .\nwd:Q60229340 wdt:P1431 ?x0 .\nwd:Q60229340 wdt:P58 ?x0 .\nwd:Q60325239 wdt:P57 ?x0 .\nwd:Q60325239 wdt:P1431 ?x0 .\nwd:Q60325239 wdt:P58 ?x0\n}",
        "questionWithBrackets": "Were [Cherry Malicious] and [Stuck in the 80's] directed by , executive produced by , and written by a female spouse of [Antonio Valentini]"
    },
    {
        "questionIdx": 127436,
        "questionPatternModEntities": "Were M2 and M3 directed , executive produced , and written by a male sibling of M0",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M0 ) .\nM2 P2 ?x0 .\nM2 P3 ?x0 .\nM2 P4 ?x0 .\nM3 P2 ?x0 .\nM3 P3 ?x0 .\nM3 P4 ?x0\n}",
        "recursionDepth": 40,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P21 wd:Q6581097 .\n?x0 wdt:P3373 wd:Q2390812 .\nFILTER ( ?x0 != wd:Q2390812 ) .\nwd:Q105387 wdt:P57 ?x0 .\nwd:Q105387 wdt:P1431 ?x0 .\nwd:Q105387 wdt:P58 ?x0 .\nwd:Q184605 wdt:P57 ?x0 .\nwd:Q184605 wdt:P1431 ?x0 .\nwd:Q184605 wdt:P58 ?x0\n}",
        "questionWithBrackets": "Were [Independence Day] and [2012] directed , executive produced , and written by a male sibling of [Ute Emmerich]"
    },
    {
        "questionIdx": 127445,
        "questionPatternModEntities": "Were M0 and M3 directed by and executive produced by M1 and M2",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P1 M1 .\nM0 P1 M2 .\nM3 P0 M1 .\nM3 P0 M2 .\nM3 P1 M1 .\nM3 P1 M2\n}",
        "recursionDepth": 29,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q2396238 wdt:P57 wd:Q190373 .\nwd:Q2396238 wdt:P57 wd:Q263324 .\nwd:Q2396238 wdt:P1431 wd:Q190373 .\nwd:Q2396238 wdt:P1431 wd:Q263324 .\nwd:Q936279 wdt:P57 wd:Q190373 .\nwd:Q936279 wdt:P57 wd:Q263324 .\nwd:Q936279 wdt:P1431 wd:Q190373 .\nwd:Q936279 wdt:P1431 wd:Q263324\n}",
        "questionWithBrackets": "Were [Birdman and the Galaxy Trio] and [Scooby-Doo, Where Are You!] directed by and executive produced by [Joseph Barbera] and [William Hanna]"
    },
    {
        "questionIdx": 127446,
        "questionPatternModEntities": "Were M0 and M3 executive produced and directed by M1 and M2",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P1 M1 .\nM0 P1 M2 .\nM3 P0 M1 .\nM3 P0 M2 .\nM3 P1 M1 .\nM3 P1 M2\n}",
        "recursionDepth": 28,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q2396238 wdt:P57 wd:Q263324 .\nwd:Q2396238 wdt:P57 wd:Q190373 .\nwd:Q2396238 wdt:P1431 wd:Q263324 .\nwd:Q2396238 wdt:P1431 wd:Q190373 .\nwd:Q936279 wdt:P57 wd:Q263324 .\nwd:Q936279 wdt:P57 wd:Q190373 .\nwd:Q936279 wdt:P1431 wd:Q263324 .\nwd:Q936279 wdt:P1431 wd:Q190373\n}",
        "questionWithBrackets": "Were [Birdman and the Galaxy Trio] and [Scooby-Doo, Where Are You!] executive produced and directed by [Joseph Barbera] and [William Hanna]"
    },
    {
        "questionIdx": 127457,
        "questionPatternModEntities": "Were M0 and M5 directed by M3 , directed by M4 , executive produced by M1 , and edited by M2",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M2 .\nM0 P2 M3 .\nM0 P2 M4 .\nM5 P0 M1 .\nM5 P1 M2 .\nM5 P2 M3 .\nM5 P2 M4\n}",
        "recursionDepth": 46,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q23781155 wdt:P57 wd:Q20675767 .\nwd:Q23781155 wdt:P57 wd:Q18018415 .\nwd:Q23781155 wdt:P1040 wd:Q11309299 .\nwd:Q23781155 wdt:P1431 wd:Q181900 .\nwd:Q18407657 wdt:P57 wd:Q20675767 .\nwd:Q18407657 wdt:P57 wd:Q18018415 .\nwd:Q18407657 wdt:P1040 wd:Q11309299 .\nwd:Q18407657 wdt:P1431 wd:Q181900\n}",
        "questionWithBrackets": "Were [Captain America: Civil War] and [Avengers: Endgame] directed by [Joe Russo] , directed by [Anthony Russo] , executive produced by [Stan Lee] , and edited by [Jeffrey Ford]"
    },
    {
        "questionIdx": 127462,
        "questionPatternModEntities": "Were M0 and M3 written and executive produced by M1 and M2",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P1 M1 .\nM0 P1 M2 .\nM3 P0 M1 .\nM3 P0 M2 .\nM3 P1 M1 .\nM3 P1 M2\n}",
        "recursionDepth": 28,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q548919 wdt:P1431 wd:Q943506 .\nwd:Q548919 wdt:P1431 wd:Q942914 .\nwd:Q548919 wdt:P58 wd:Q943506 .\nwd:Q548919 wdt:P58 wd:Q942914 .\nwd:Q183555 wdt:P1431 wd:Q943506 .\nwd:Q183555 wdt:P1431 wd:Q942914 .\nwd:Q183555 wdt:P58 wd:Q943506 .\nwd:Q183555 wdt:P58 wd:Q942914\n}",
        "questionWithBrackets": "Were [Pirates of the Caribbean: On Stranger Tides] and [The Lone Ranger] written and executive produced by [Ted Elliott] and [Terry Rossio]"
    },
    {
        "questionIdx": 127467,
        "questionPatternModEntities": "Were M3 , M4 , and M5 directed by and executive produced by a female American spouse of M2",
        "questionTemplate": "Were [entity] , [entity] , and [entity] [VP_SIMPLE] by and [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P2 M2 .\nFILTER ( ?x0 != M2 ) .\nM3 P3 ?x0 .\nM3 P4 ?x0 .\nM4 P3 ?x0 .\nM4 P4 ?x0 .\nM5 P3 ?x0 .\nM5 P4 ?x0\n}",
        "recursionDepth": 44,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P21 wd:Q6581072 .\n?x0 wdt:P27 wd:Q30 .\n?x0 wdt:P26 wd:Q57737617 .\nFILTER ( ?x0 != wd:Q57737617 ) .\nwd:Q60229340 wdt:P57 ?x0 .\nwd:Q60229340 wdt:P1431 ?x0 .\nwd:Q60325239 wdt:P57 ?x0 .\nwd:Q60325239 wdt:P1431 ?x0 .\nwd:Q60489887 wdt:P57 ?x0 .\nwd:Q60489887 wdt:P1431 ?x0\n}",
        "questionWithBrackets": "Were [Breathless Betrayal] , [Cherry Malicious] , and [Stuck in the 80's] directed by and executive produced by a female American spouse of [Antonio Valentini]"
    },
    {
        "questionIdx": 127479,
        "questionPatternModEntities": "Were M1 and M2 executive produced by M0 's spouse",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nM1 P1 ?x0 .\nM2 P1 ?x0\n}",
        "recursionDepth": 21,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P26 wd:Q22075592 .\nFILTER ( ?x0 != wd:Q22075592 ) .\nwd:Q128518 wdt:P1431 ?x0 .\nwd:Q207698 wdt:P1431 ?x0\n}",
        "questionWithBrackets": "Were [Kingdom of Heaven] and [Gladiator] executive produced by [Felicity Heywood] 's spouse"
    },
    {
        "questionIdx": 127481,
        "questionPatternModEntities": "Were M0 and M2 directed and produced by M1",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1 .\nM2 P0 M1 .\nM2 P1 M1\n}",
        "recursionDepth": 23,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q45602 wdt:P57 wd:Q882 .\nwd:Q45602 wdt:P162|wdt:P272 wd:Q882 .\nwd:Q109116 wdt:P57 wd:Q882 .\nwd:Q109116 wdt:P162|wdt:P272 wd:Q882\n}",
        "questionWithBrackets": "Were [Modern Times] and [The Great Dictator] directed and produced by [Charlie Chaplin]"
    },
    {
        "questionIdx": 127500,
        "questionPatternModEntities": "Were M0 and M2 edited and produced by M1",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1 .\nM2 P0 M1 .\nM2 P1 M1\n}",
        "recursionDepth": 23,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q567519 wdt:P1040 wd:Q44426 .\nwd:Q567519 wdt:P162|wdt:P272 wd:Q44426 .\nwd:Q570483 wdt:P1040 wd:Q44426 .\nwd:Q570483 wdt:P162|wdt:P272 wd:Q44426\n}",
        "questionWithBrackets": "Were [In a Year of 13 Moons] and [Katzelmacher] edited and produced by [Rainer Werner Fassbinder]"
    },
    {
        "questionIdx": 127508,
        "questionPatternModEntities": "Were M2 and M3 executive produced by M1 's female spouse",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M1 ) .\nM2 P2 ?x0 .\nM3 P2 ?x0\n}",
        "recursionDepth": 26,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P21 wd:Q6581072 .\n?x0 wdt:P26 wd:Q24488369 .\nFILTER ( ?x0 != wd:Q24488369 ) .\nwd:Q30608536 wdt:P1431 ?x0 .\nwd:Q1065013 wdt:P1431 ?x0\n}",
        "questionWithBrackets": "Were [Feelin' So Good] and [World of Dance] executive produced by [Ojani Noa] 's female spouse"
    },
    {
        "questionIdx": 127560,
        "questionPatternModEntities": "Were M0 and M3 written and directed by M1 and M2",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P1 M1 .\nM0 P1 M2 .\nM3 P0 M1 .\nM3 P0 M2 .\nM3 P1 M1 .\nM3 P1 M2\n}",
        "recursionDepth": 27,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q679023 wdt:P57 wd:Q3772 .\nwd:Q679023 wdt:P57 wd:Q47284 .\nwd:Q679023 wdt:P58 wd:Q3772 .\nwd:Q679023 wdt:P58 wd:Q47284 .\nwd:Q1137372 wdt:P57 wd:Q3772 .\nwd:Q1137372 wdt:P57 wd:Q47284 .\nwd:Q1137372 wdt:P58 wd:Q3772 .\nwd:Q1137372 wdt:P58 wd:Q47284\n}",
        "questionWithBrackets": "Were [Grindhouse] and [Four Rooms] written and directed by [Robert Rodriguez] and [Quentin Tarantino]"
    },
    {
        "questionIdx": 127565,
        "questionPatternModEntities": "Were M0 , M2 , and M3 edited by and written by M1",
        "questionTemplate": "Were [entity] , [entity] , and [entity] [VP_SIMPLE] by and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1 .\nM2 P0 M1 .\nM2 P1 M1 .\nM3 P0 M1 .\nM3 P1 M1\n}",
        "recursionDepth": 27,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q947297 wdt:P1040 wd:Q882 .\nwd:Q947297 wdt:P58 wd:Q882 .\nwd:Q238211 wdt:P1040 wd:Q882 .\nwd:Q238211 wdt:P58 wd:Q882 .\nwd:Q45602 wdt:P1040 wd:Q882 .\nwd:Q45602 wdt:P58 wd:Q882\n}",
        "questionWithBrackets": "Were [City Lights] , [By the Sea] , and [Modern Times] edited by and written by [Charlie Chaplin]"
    },
    {
        "questionIdx": 127572,
        "questionPatternModEntities": "Were M2 , M3 , and M4 directed and produced by a Canadian sibling of M0",
        "questionTemplate": "Were [entity] , [entity] , and [entity] [VP_SIMPLE] and [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M0 ) .\nM2 P2 ?x0 .\nM2 P3 ?x0 .\nM3 P2 ?x0 .\nM3 P3 ?x0 .\nM4 P2 ?x0 .\nM4 P3 ?x0\n}",
        "recursionDepth": 37,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P27 wd:Q16 .\n?x0 wdt:P3373 wd:Q6228653 .\nFILTER ( ?x0 != wd:Q6228653 ) .\nwd:Q110397 wdt:P57 ?x0 .\nwd:Q110397 wdt:P162|wdt:P272 ?x0 .\nwd:Q983912 wdt:P57 ?x0 .\nwd:Q983912 wdt:P162|wdt:P272 ?x0 .\nwd:Q44578 wdt:P57 ?x0 .\nwd:Q44578 wdt:P162|wdt:P272 ?x0\n}",
        "questionWithBrackets": "Were [Titanic] , [Ghosts of the Abyss] , and [True Lies] directed and produced by a Canadian sibling of [John David Cameron]"
    },
    {
        "questionIdx": 127580,
        "questionPatternModEntities": "Were M1 and M2 executive produced by M0 's employee",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 ?x0 .\nM2 P1 ?x0\n}",
        "recursionDepth": 21,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P108 wd:Q49210 .\nwd:Q79212167 wdt:P1431 ?x0 .\nwd:Q585758 wdt:P1431 ?x0\n}",
        "questionWithBrackets": "Were [Boardwalk Empire] and [Pieces of a Woman] executive produced by [New York University] 's employee"
    },
    {
        "questionIdx": 127581,
        "questionPatternModEntities": "Were M2 and M4 written by M3 and edited by a male sibling of M0",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by [entity] and [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M0 ) .\nM2 P2 M3 .\nM2 P3 ?x0 .\nM4 P2 M3 .\nM4 P3 ?x0\n}",
        "recursionDepth": 38,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P21 wd:Q6581097 .\n?x0 wdt:P3373 wd:Q3567655 .\nFILTER ( ?x0 != wd:Q3567655 ) .\nwd:Q3986814 wdt:P1040 ?x0 .\nwd:Q3986814 wdt:P58 wd:Q882 .\nwd:Q687780 wdt:P1040 ?x0 .\nwd:Q687780 wdt:P58 wd:Q882\n}",
        "questionWithBrackets": "Were [The Essanay-Chaplin Revue of 1916] and [The Rounders] written by [Charlie Chaplin] and edited by a male sibling of [Wheeler Dryden]"
    },
    {
        "questionIdx": 127582,
        "questionPatternModEntities": "Were M1 , M2 , M3 , and M4 edited by M0 's spouse 's sibling",
        "questionTemplate": "Were [entity] , [entity] , [entity] , and [entity] [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x1 P1 M0 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x1 != M0 ) .\nM1 P2 ?x0 .\nM2 P2 ?x0 .\nM3 P2 ?x0 .\nM4 P2 ?x0\n}",
        "recursionDepth": 30,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P3373 ?x1 .\n?x1 wdt:P26 wd:Q2975468 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x1 != wd:Q2975468 ) .\nwd:Q3208893 wdt:P1040 ?x0 .\nwd:Q403176 wdt:P1040 ?x0 .\nwd:Q508813 wdt:P1040 ?x0 .\nwd:Q2963684 wdt:P1040 ?x0\n}",
        "questionWithBrackets": "Were [A Romance of the Redwoods] , [Chimmie Fadden Out West] , [Chimmie Fadden] , and [The Girl of the Golden West] edited by [Clara Beranger] 's spouse 's sibling"
    },
    {
        "questionIdx": 127604,
        "questionPatternModEntities": "Were M2 and M6 written by M3 and M4 , produced by M1 's British spouse , and edited by M5",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by [entity] and [entity] , [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M1 ) .\nM2 P2 M3 .\nM2 P2 M4 .\nM2 P3 ?x0 .\nM2 P4 M5 .\nM6 P2 M3 .\nM6 P2 M4 .\nM6 P3 ?x0 .\nM6 P4 M5\n}",
        "recursionDepth": 49,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P27 wd:Q145 .\n?x0 wdt:P26 wd:Q76320769 .\nFILTER ( ?x0 != wd:Q76320769 ) .\nwd:Q510595 wdt:P1040 wd:Q460299 .\nwd:Q510595 wdt:P162|wdt:P272 ?x0 .\nwd:Q510595 wdt:P58 wd:Q329009 .\nwd:Q510595 wdt:P58 wd:Q203165 .\nwd:Q500488 wdt:P1040 wd:Q460299 .\nwd:Q500488 wdt:P162|wdt:P272 ?x0 .\nwd:Q500488 wdt:P58 wd:Q329009 .\nwd:Q500488 wdt:P58 wd:Q203165\n}",
        "questionWithBrackets": "Were [Sabotage] and [Secret Agent] written by [Alma Reville] and [Charles Bennett] , produced by [Aileen Freda Leatherman] 's British spouse , and edited by [Charles Frend]"
    },
    {
        "questionIdx": 127632,
        "questionPatternModEntities": "Were M0 and M2 edited by and written by M1",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1 .\nM2 P0 M1 .\nM2 P1 M1\n}",
        "recursionDepth": 24,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q854990 wdt:P1040 wd:Q8006 .\nwd:Q854990 wdt:P58 wd:Q8006 .\nwd:Q20475 wdt:P1040 wd:Q8006 .\nwd:Q20475 wdt:P58 wd:Q8006\n}",
        "questionWithBrackets": "Were [Kagemusha] and [Yojimbo] edited by and written by [Akira Kurosawa]"
    },
    {
        "questionIdx": 127634,
        "questionPatternModEntities": "Were M1 , M2 , M3 , and M4 edited by and directed by M0 's spouse",
        "questionTemplate": "Were [entity] , [entity] , [entity] , and [entity] [VP_SIMPLE] by and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nM1 P1 ?x0 .\nM1 P2 ?x0 .\nM2 P1 ?x0 .\nM2 P2 ?x0 .\nM3 P1 ?x0 .\nM3 P2 ?x0 .\nM4 P1 ?x0 .\nM4 P2 ?x0\n}",
        "recursionDepth": 34,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P26 wd:Q32337 .\nFILTER ( ?x0 != wd:Q32337 ) .\nwd:Q2457915 wdt:P57 ?x0 .\nwd:Q2457915 wdt:P1040 ?x0 .\nwd:Q199039 wdt:P57 ?x0 .\nwd:Q199039 wdt:P1040 ?x0 .\nwd:Q45602 wdt:P57 ?x0 .\nwd:Q45602 wdt:P1040 ?x0 .\nwd:Q214723 wdt:P57 ?x0 .\nwd:Q214723 wdt:P1040 ?x0\n}",
        "questionWithBrackets": "Were [His Prehistoric Past] , [Pay Day] , [Modern Times] , and [The Gold Rush] edited by and directed by [Lita Grey] 's spouse"
    },
    {
        "questionIdx": 127670,
        "questionPatternModEntities": "Were M2 and M5 written by M3 and M4 and executive produced by a Italian spouse of M1",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by [entity] and [entity] and [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M1 ) .\nM2 P2 ?x0 .\nM2 P3 M3 .\nM2 P3 M4 .\nM5 P2 ?x0 .\nM5 P3 M3 .\nM5 P3 M4\n}",
        "recursionDepth": 43,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P27 wd:Q38 .\n?x0 wdt:P26 wd:Q11285373 .\nFILTER ( ?x0 != wd:Q11285373 ) .\nwd:Q3742607 wdt:P1431 ?x0 .\nwd:Q3742607 wdt:P58 wd:Q2055700 .\nwd:Q3742607 wdt:P58 wd:Q525427 .\nwd:Q3794517 wdt:P1431 ?x0 .\nwd:Q3794517 wdt:P58 wd:Q2055700 .\nwd:Q3794517 wdt:P58 wd:Q525427\n}",
        "questionWithBrackets": "Were [The Magistrate] and [Ferdinando I, re di Napoli] written by [Pasquale Festa Campanile] and [Massimo Franciosa] and executive produced by a Italian spouse of [Anna Maria Clementelli]"
    },
    {
        "questionIdx": 127689,
        "questionPatternModEntities": "Were M0 , M3 , and M4 directed by and written by M1 and M2",
        "questionTemplate": "Were [entity] , [entity] , and [entity] [VP_SIMPLE] by and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P1 M1 .\nM0 P1 M2 .\nM3 P0 M1 .\nM3 P0 M2 .\nM3 P1 M1 .\nM3 P1 M2 .\nM4 P0 M1 .\nM4 P0 M2 .\nM4 P1 M1 .\nM4 P1 M2\n}",
        "recursionDepth": 31,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q3996035 wdt:P57 wd:Q53052 .\nwd:Q3996035 wdt:P57 wd:Q53026 .\nwd:Q3996035 wdt:P58 wd:Q53052 .\nwd:Q3996035 wdt:P58 wd:Q53026 .\nwd:Q2257063 wdt:P57 wd:Q53052 .\nwd:Q2257063 wdt:P57 wd:Q53026 .\nwd:Q2257063 wdt:P58 wd:Q53052 .\nwd:Q2257063 wdt:P58 wd:Q53026 .\nwd:Q1058517 wdt:P57 wd:Q53052 .\nwd:Q1058517 wdt:P57 wd:Q53026 .\nwd:Q1058517 wdt:P58 wd:Q53052 .\nwd:Q1058517 wdt:P58 wd:Q53026\n}",
        "questionWithBrackets": "Were [A Dog's Life] , [Toto and the King of Rome] , and [Cops and Robbers] directed by and written by [Mario Monicelli] and [Stefano Vanzina]"
    },
    {
        "questionIdx": 127703,
        "questionPatternModEntities": "Were M2 and M5 written by a female sibling of M0 , executive produced by M3 , and edited by M4",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M0 ) .\nM2 P2 M3 .\nM2 P3 ?x0 .\nM2 P4 M4 .\nM5 P2 M3 .\nM5 P3 ?x0 .\nM5 P4 M4\n}",
        "recursionDepth": 48,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P21 wd:Q6581072 .\n?x0 wdt:P3373 wd:Q155299 .\nFILTER ( ?x0 != wd:Q155299 ) .\nwd:Q107270 wdt:P1040 wd:Q3473349 .\nwd:Q107270 wdt:P1431 wd:Q56094 .\nwd:Q107270 wdt:P58 ?x0 .\nwd:Q829695 wdt:P1040 wd:Q3473349 .\nwd:Q829695 wdt:P1431 wd:Q56094 .\nwd:Q829695 wdt:P58 ?x0\n}",
        "questionWithBrackets": "Were [Lost in Translation] and [Marie Antoinette] written by a female sibling of [Gian-Carlo Coppola] , executive produced by [Francis Ford Coppola] , and edited by [Sarah Flack]"
    },
    {
        "questionIdx": 127712,
        "questionPatternModEntities": "Were M0 , M2 , M3 , and M4 executive produced , edited , and written by M1",
        "questionTemplate": "Were [entity] , [entity] , [entity] , and [entity] [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1 .\nM0 P2 M1 .\nM2 P0 M1 .\nM2 P1 M1 .\nM2 P2 M1 .\nM3 P0 M1 .\nM3 P1 M1 .\nM3 P2 M1 .\nM4 P0 M1 .\nM4 P1 M1 .\nM4 P2 M1\n}",
        "recursionDepth": 35,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q483197 wdt:P1040 wd:Q212990 .\nwd:Q483197 wdt:P1431 wd:Q212990 .\nwd:Q483197 wdt:P58 wd:Q212990 .\nwd:Q16159554 wdt:P1040 wd:Q212990 .\nwd:Q16159554 wdt:P1431 wd:Q212990 .\nwd:Q16159554 wdt:P58 wd:Q212990 .\nwd:Q484679 wdt:P1040 wd:Q212990 .\nwd:Q484679 wdt:P1431 wd:Q212990 .\nwd:Q484679 wdt:P58 wd:Q212990 .\nwd:Q13471372 wdt:P1040 wd:Q212990 .\nwd:Q13471372 wdt:P1431 wd:Q212990 .\nwd:Q13471372 wdt:P58 wd:Q212990\n}",
        "questionWithBrackets": "Were [Piet\u00e0] , [Moebius] , [Red Family] , and [Dream] executive produced , edited , and written by [Kim Ki-duk]"
    },
    {
        "questionIdx": 127714,
        "questionPatternModEntities": "Were M2 , M3 , and M4 directed by a Mexican sibling of M1 's spouse",
        "questionTemplate": "Were [entity] , [entity] , and [entity] [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x0 P1 M0 .\n?x1 P2 M1 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x1 != M1 ) .\nM2 P3 ?x0 .\nM3 P3 ?x0 .\nM4 P3 ?x0\n}",
        "recursionDepth": 34,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P27 wd:Q96 .\n?x0 wdt:P3373 ?x1 .\n?x1 wdt:P26 wd:Q9006180 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x1 != wd:Q9006180 ) .\nwd:Q64877521 wdt:P57 ?x0 .\nwd:Q6522496 wdt:P57 ?x0 .\nwd:Q3050345 wdt:P57 ?x0\n}",
        "questionWithBrackets": "Were [El padre Gallo] , [Length of War] , and [Del otro lado del puente] directed by a Mexican sibling of [H\u00e9ctor Bonilla] 's spouse"
    },
    {
        "questionIdx": 127730,
        "questionPatternModEntities": "Were M3 and M4 written by M2 's female German spouse",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P2 M2 .\nFILTER ( ?x0 != M2 ) .\nM3 P3 ?x0 .\nM4 P3 ?x0\n}",
        "recursionDepth": 30,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P21 wd:Q6581072 .\n?x0 wdt:P27 wd:Q183 .\n?x0 wdt:P26 wd:Q530550 .\nFILTER ( ?x0 != wd:Q530550 ) .\nwd:Q533673 wdt:P58 ?x0 .\nwd:Q3998435 wdt:P58 ?x0\n}",
        "questionWithBrackets": "Were [Trespasses] and [Making Sandwiches] written by [Jesse James] 's female German spouse"
    },
    {
        "questionIdx": 127759,
        "questionPatternModEntities": "Were M1 and M2 edited by and directed by M0 's spouse",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nM1 P1 ?x0 .\nM1 P2 ?x0 .\nM2 P1 ?x0 .\nM2 P2 ?x0\n}",
        "recursionDepth": 28,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P26 wd:Q235635 .\nFILTER ( ?x0 != wd:Q235635 ) .\nwd:Q44578 wdt:P57 ?x0 .\nwd:Q44578 wdt:P1040 ?x0 .\nwd:Q24871 wdt:P57 ?x0 .\nwd:Q24871 wdt:P1040 ?x0\n}",
        "questionWithBrackets": "Were [Titanic] and [Avatar] edited by and directed by [Suzy Amis Cameron] 's spouse"
    },
    {
        "questionIdx": 127763,
        "questionPatternModEntities": "Were M1 , M2 , M3 , and M4 edited by and written by M0 's sibling",
        "questionTemplate": "Were [entity] , [entity] , [entity] , and [entity] [VP_SIMPLE] by and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nM1 P1 ?x0 .\nM1 P2 ?x0 .\nM2 P1 ?x0 .\nM2 P2 ?x0 .\nM3 P1 ?x0 .\nM3 P2 ?x0 .\nM4 P1 ?x0 .\nM4 P2 ?x0\n}",
        "recursionDepth": 34,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P3373 wd:Q11404271 .\nFILTER ( ?x0 != wd:Q11404271 ) .\nwd:Q1157019 wdt:P1040 ?x0 .\nwd:Q1157019 wdt:P58 ?x0 .\nwd:Q742882 wdt:P1040 ?x0 .\nwd:Q742882 wdt:P58 ?x0 .\nwd:Q260208 wdt:P1040 ?x0 .\nwd:Q260208 wdt:P58 ?x0 .\nwd:Q340300 wdt:P1040 ?x0 .\nwd:Q340300 wdt:P58 ?x0\n}",
        "questionWithBrackets": "Were [A Scene at the Sea] , [Achilles and the Tortoise] , [Getting Any?] , and [Dolls] edited by and written by [Masaru Kitano] 's sibling"
    },
    {
        "questionIdx": 127830,
        "questionPatternModEntities": "Were M0 , M2 , and M3 executive produced and produced by M1",
        "questionTemplate": "Were [entity] , [entity] , and [entity] [VP_SIMPLE] and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1 .\nM2 P0 M1 .\nM2 P1 M1 .\nM3 P0 M1 .\nM3 P1 M1\n}",
        "recursionDepth": 27,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q182373 wdt:P1431 wd:Q38222 .\nwd:Q182373 wdt:P162|wdt:P272 wd:Q38222 .\nwd:Q1741078 wdt:P1431 wd:Q38222 .\nwd:Q1741078 wdt:P162|wdt:P272 wd:Q38222 .\nwd:Q17738 wdt:P1431 wd:Q38222 .\nwd:Q17738 wdt:P162|wdt:P272 wd:Q38222\n}",
        "questionWithBrackets": "Were [Star Wars: Episode IV \u2013 A New Hope] , [Indiana Jones and the Kingdom of the Crystal Skull] , and [Radioland Murders] executive produced and produced by [George Lucas]"
    },
    {
        "questionIdx": 127836,
        "questionPatternModEntities": "Were M0 , M2 , M3 , M4 , M5 , and M6 influenced by M1",
        "questionTemplate": "Were [entity] , [entity] , [entity] , [entity] , [entity] , and [entity] [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM2 P0 M1 .\nM3 P0 M1 .\nM4 P0 M1 .\nM5 P0 M1 .\nM6 P0 M1\n}",
        "recursionDepth": 28,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q104534556 wdt:P737 wd:Q392 .\nwd:Q440100 wdt:P737 wd:Q392 .\nwd:Q45404 wdt:P737 wd:Q392 .\nwd:Q14159626 wdt:P737 wd:Q392 .\nwd:Q5928 wdt:P737 wd:Q392 .\nwd:Q193982 wdt:P737 wd:Q392\n}",
        "questionWithBrackets": "Were [Wolfgang Ambros] , [Sin\u00e9ad O'Connor] , [Jimi Hendrix] , [Ismael Clark] , [The War on Drugs] , and [Jonathan Lethem] influenced by [Bob Dylan]"
    },
    {
        "questionIdx": 127846,
        "questionPatternModEntities": "Were M1 and M5 executive produced by M2 and M3 , written by M0 's sibling , and directed by M4",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by [entity] and [entity] , [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nM1 P1 M2 .\nM1 P1 M3 .\nM1 P2 ?x0 .\nM1 P3 M4 .\nM5 P1 M2 .\nM5 P1 M3 .\nM5 P2 ?x0 .\nM5 P3 M4\n}",
        "recursionDepth": 45,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P3373 wd:Q155299 .\nFILTER ( ?x0 != wd:Q155299 ) .\nwd:Q3077738 wdt:P57 wd:Q193628 .\nwd:Q3077738 wdt:P1431 wd:Q56094 .\nwd:Q3077738 wdt:P1431 wd:Q2675693 .\nwd:Q3077738 wdt:P58 ?x0 .\nwd:Q107270 wdt:P57 wd:Q193628 .\nwd:Q107270 wdt:P1431 wd:Q56094 .\nwd:Q107270 wdt:P1431 wd:Q2675693 .\nwd:Q107270 wdt:P58 ?x0\n}",
        "questionWithBrackets": "Were [The Bling Ring] and [Lost in Translation] executive produced by [Fred Roos] and [Francis Ford Coppola] , written by [Gian-Carlo Coppola] 's sibling , and directed by [Sofia Coppola]"
    },
    {
        "questionIdx": 127855,
        "questionPatternModEntities": "Were M3 and M4 produced by a British employee of M0 and M1",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P1 M2 .\nM3 P2 ?x0 .\nM4 P2 ?x0\n}",
        "recursionDepth": 31,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P108 wd:Q3789934 .\n?x0 wdt:P108 wd:Q34433 .\n?x0 wdt:P27 wd:Q145 .\nwd:Q202211 wdt:P162|wdt:P272 ?x0 .\nwd:Q482632 wdt:P162|wdt:P272 ?x0\n}",
        "questionWithBrackets": "Were [Gandhi] and [S\u00e9ance on a Wet Afternoon] produced by a British employee of [University of Oxford] and [IVO]"
    },
    {
        "questionIdx": 127857,
        "questionPatternModEntities": "Were M1 and M2 founded by a employee of M0",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 ?x0 .\nM2 P1 ?x0\n}",
        "recursionDepth": 22,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P108 wd:Q4537328 .\nwd:Q17501863 wdt:P112 ?x0 .\nwd:Q54874476 wdt:P112 ?x0\n}",
        "questionWithBrackets": "Were [Obama Foundation] and [Young African Leaders Initiative] founded by a employee of [Business International Corporation]"
    },
    {
        "questionIdx": 127900,
        "questionPatternModEntities": "Were M1 , M2 , M3 , and M4 written by M0 's parent",
        "questionTemplate": "Were [entity] , [entity] , [entity] , and [entity] [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 ?x0 .\nM2 P1 ?x0 .\nM3 P1 ?x0 .\nM4 P1 ?x0\n}",
        "recursionDepth": 26,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q2082427 .\nwd:Q3233880 wdt:P58 ?x0 .\nwd:Q17030062 wdt:P58 ?x0 .\nwd:Q6370349 wdt:P58 ?x0 .\nwd:Q3431961 wdt:P58 ?x0\n}",
        "questionWithBrackets": "Were [Rigoletto] , [No label defined] , [Ruy Blas] , and [The Tyrant of Padua] written by [Ad\u00e8le Hugo] 's parent"
    },
    {
        "questionIdx": 127903,
        "questionPatternModEntities": "Were M0 and M2 written by and executive produced by M1",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1 .\nM2 P0 M1 .\nM2 P1 M1\n}",
        "recursionDepth": 25,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q165713 wdt:P1431 wd:Q38222 .\nwd:Q165713 wdt:P58 wd:Q38222 .\nwd:Q17738 wdt:P1431 wd:Q38222 .\nwd:Q17738 wdt:P58 wd:Q38222\n}",
        "questionWithBrackets": "Were [Star Wars: Episode IV \u2013 A New Hope] and [Star Wars: Episode I \u2013 The Phantom Menace] written by and executive produced by [George Lucas]"
    },
    {
        "questionIdx": 127936,
        "questionPatternModEntities": "Were M0 , M2 , M3 , and M4 written and edited by M1",
        "questionTemplate": "Were [entity] , [entity] , [entity] , and [entity] [VP_SIMPLE] and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1 .\nM2 P0 M1 .\nM2 P1 M1 .\nM3 P0 M1 .\nM3 P1 M1 .\nM4 P0 M1 .\nM4 P1 M1\n}",
        "recursionDepth": 29,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q2718259 wdt:P1040 wd:Q882 .\nwd:Q2718259 wdt:P58 wd:Q882 .\nwd:Q45602 wdt:P1040 wd:Q882 .\nwd:Q45602 wdt:P58 wd:Q882 .\nwd:Q374172 wdt:P1040 wd:Q882 .\nwd:Q374172 wdt:P58 wd:Q882 .\nwd:Q658822 wdt:P1040 wd:Q882 .\nwd:Q658822 wdt:P58 wd:Q882\n}",
        "questionWithBrackets": "Were [In the Park] , [The Kid] , [Modern Times] , and [The Professor] written and edited by [Charlie Chaplin]"
    },
    {
        "questionIdx": 127958,
        "questionPatternModEntities": "Were M2 and M4 produced by a Canadian sibling of M0 and distributed by M3",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M0 ) .\nM2 P2 M3 .\nM2 P3 ?x0 .\nM4 P2 M3 .\nM4 P3 ?x0\n}",
        "recursionDepth": 38,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P27 wd:Q16 .\n?x0 wdt:P3373 wd:Q430929 .\nFILTER ( ?x0 != wd:Q430929 ) .\nwd:Q3808913 wdt:P750 wd:Q159846 .\nwd:Q3808913 wdt:P162|wdt:P272 ?x0 .\nwd:Q251963 wdt:P750 wd:Q159846 .\nwd:Q251963 wdt:P162|wdt:P272 ?x0\n}",
        "questionWithBrackets": "Were [Captain Kidd] and [Johanna Enlists] produced by a Canadian sibling of [Olive Thomas] and distributed by [Paramount Pictures]"
    },
    {
        "questionIdx": 127965,
        "questionPatternModEntities": "Were M3 and M4 written by M1 's female spouse and edited by M2 's spouse",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x1 P1 M2 .\nFILTER ( ?x0 != M1 ) .\nFILTER ( ?x1 != M2 ) .\nM3 P2 ?x0 .\nM3 P3 ?x1 .\nM4 P2 ?x0 .\nM4 P3 ?x1\n}",
        "recursionDepth": 40,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P21 wd:Q6581072 .\n?x0 wdt:P26 wd:Q19504 .\n?x1 wdt:P26 wd:Q58866 .\nFILTER ( ?x0 != wd:Q19504 ) .\nFILTER ( ?x1 != wd:Q58866 ) .\nwd:Q151599 wdt:P1040 ?x1 .\nwd:Q151599 wdt:P58 ?x0 .\nwd:Q1199484 wdt:P1040 ?x1 .\nwd:Q1199484 wdt:P58 ?x0\n}",
        "questionWithBrackets": "Were [Destiny] and [Metropolis] written by [Fritz Lang] 's female spouse and edited by [Thea von Harbou] 's spouse"
    },
    {
        "questionIdx": 128006,
        "questionPatternModEntities": "Were M1 , M3 , M4 , M5 , and M6 founded by M2 and founded by M0 's employee",
        "questionTemplate": "Were [entity] , [entity] , [entity] , [entity] , and [entity] [VP_SIMPLE] by [entity] and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 ?x0 .\nM1 P1 M2 .\nM3 P1 ?x0 .\nM3 P1 M2 .\nM4 P1 ?x0 .\nM4 P1 M2 .\nM5 P1 ?x0 .\nM5 P1 M2 .\nM6 P1 ?x0 .\nM6 P1 M2\n}",
        "recursionDepth": 40,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P108 wd:Q2665980 .\nwd:Q369 wdt:P112 ?x0 .\nwd:Q369 wdt:P112 wd:Q181 .\nwd:Q17458 wdt:P112 ?x0 .\nwd:Q17458 wdt:P112 wd:Q181 .\nwd:Q151 wdt:P112 ?x0 .\nwd:Q151 wdt:P112 wd:Q181 .\nwd:Q17459 wdt:P112 ?x0 .\nwd:Q17459 wdt:P112 wd:Q181 .\nwd:Q1075624 wdt:P112 ?x0 .\nwd:Q1075624 wdt:P112 wd:Q181\n}",
        "questionWithBrackets": "Were [Wikia Search] , [Wiktionary] , [Nupedia] , [Fandom] , and [Wikiquote] founded by [Jimmy Wales] and founded by [Guardian Media Group] 's employee"
    },
    {
        "questionIdx": 128010,
        "questionPatternModEntities": "Were M1 , M3 , M4 , M5 , and M6 founded by M2 and founded by a employee of M0",
        "questionTemplate": "Were [entity] , [entity] , [entity] , [entity] , and [entity] [VP_SIMPLE] by [entity] and [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 ?x0 .\nM1 P1 M2 .\nM3 P1 ?x0 .\nM3 P1 M2 .\nM4 P1 ?x0 .\nM4 P1 M2 .\nM5 P1 ?x0 .\nM5 P1 M2 .\nM6 P1 ?x0 .\nM6 P1 M2\n}",
        "recursionDepth": 42,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P108 wd:Q17459 .\nwd:Q52 wdt:P112 ?x0 .\nwd:Q52 wdt:P112 wd:Q181 .\nwd:Q180 wdt:P112 ?x0 .\nwd:Q180 wdt:P112 wd:Q181 .\nwd:Q29568422 wdt:P112 ?x0 .\nwd:Q29568422 wdt:P112 wd:Q181 .\nwd:Q964 wdt:P112 ?x0 .\nwd:Q964 wdt:P112 wd:Q181 .\nwd:Q565 wdt:P112 ?x0 .\nwd:Q565 wdt:P112 wd:Q181\n}",
        "questionWithBrackets": "Were [Wikimedia Commons] , [WikiTribune] , [Wikinews] , [Wikimedia Foundation] , and [Wikipedia] founded by [Jimmy Wales] and founded by a employee of [Fandom]"
    },
    {
        "questionIdx": 128013,
        "questionPatternModEntities": "Were M1 , M3 , M4 , and M5 founded by M0 's sibling and founded by M2",
        "questionTemplate": "Were [entity] , [entity] , [entity] , and [entity] [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nM1 P1 ?x0 .\nM1 P1 M2 .\nM3 P1 ?x0 .\nM3 P1 M2 .\nM4 P1 ?x0 .\nM4 P1 M2 .\nM5 P1 ?x0 .\nM5 P1 M2\n}",
        "recursionDepth": 37,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P3373 wd:Q850421 .\nFILTER ( ?x0 != wd:Q850421 ) .\nwd:Q1342 wdt:P112 ?x0 .\nwd:Q1342 wdt:P112 wd:Q23 .\nwd:Q1143497 wdt:P112 ?x0 .\nwd:Q1143497 wdt:P112 wd:Q23 .\nwd:Q2005254 wdt:P112 ?x0 .\nwd:Q2005254 wdt:P112 wd:Q23 .\nwd:Q54122 wdt:P112 ?x0 .\nwd:Q54122 wdt:P112 wd:Q23\n}",
        "questionWithBrackets": "Were [Continental Army] , [Pittsburgh] , [Culper Ring] , and [United States Park Police] founded by [Betty Washington Lewis] 's sibling and founded by [George Washington]"
    },
    {
        "questionIdx": 128020,
        "questionPatternModEntities": "Were M1 , M3 , M4 , and M5 founded by M2 and founded by M0 's spouse",
        "questionTemplate": "Were [entity] , [entity] , [entity] , and [entity] [VP_SIMPLE] by [entity] and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nM1 P1 ?x0 .\nM1 P1 M2 .\nM3 P1 ?x0 .\nM3 P1 M2 .\nM4 P1 ?x0 .\nM4 P1 M2 .\nM5 P1 ?x0 .\nM5 P1 M2\n}",
        "recursionDepth": 37,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P26 wd:Q13564310 .\nFILTER ( ?x0 != wd:Q13564310 ) .\nwd:Q367 wdt:P112 ?x0 .\nwd:Q367 wdt:P112 wd:Q181 .\nwd:Q52 wdt:P112 ?x0 .\nwd:Q52 wdt:P112 wd:Q181 .\nwd:Q369 wdt:P112 ?x0 .\nwd:Q369 wdt:P112 wd:Q181 .\nwd:Q565 wdt:P112 ?x0 .\nwd:Q565 wdt:P112 wd:Q181\n}",
        "questionWithBrackets": "Were [Wikimedia Commons] , [Wikibooks] , [Wikiquote] , and [Wikipedia] founded by [Jimmy Wales] and founded by [Kate Garvey] 's spouse"
    },
    {
        "questionIdx": 128026,
        "questionPatternModEntities": "Were M0 , M2 , and M3 produced , directed , and edited by M1",
        "questionTemplate": "Were [entity] , [entity] , and [entity] [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1 .\nM0 P2 M1 .\nM2 P0 M1 .\nM2 P1 M1 .\nM2 P2 M1 .\nM3 P0 M1 .\nM3 P1 M1 .\nM3 P2 M1\n}",
        "recursionDepth": 31,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q1148649 wdt:P57 wd:Q882 .\nwd:Q1148649 wdt:P1040 wd:Q882 .\nwd:Q1148649 wdt:P162|wdt:P272 wd:Q882 .\nwd:Q238211 wdt:P57 wd:Q882 .\nwd:Q238211 wdt:P1040 wd:Q882 .\nwd:Q238211 wdt:P162|wdt:P272 wd:Q882 .\nwd:Q199039 wdt:P57 wd:Q882 .\nwd:Q199039 wdt:P1040 wd:Q882 .\nwd:Q199039 wdt:P162|wdt:P272 wd:Q882\n}",
        "questionWithBrackets": "Were [The Idle Class] , [Pay Day] , and [City Lights] produced , directed , and edited by [Charlie Chaplin]"
    },
    {
        "questionIdx": 128031,
        "questionPatternModEntities": "Were M0 and M2 executive produced and produced by M1",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1 .\nM2 P0 M1 .\nM2 P1 M1\n}",
        "recursionDepth": 24,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q17738 wdt:P1431 wd:Q38222 .\nwd:Q17738 wdt:P162|wdt:P272 wd:Q38222 .\nwd:Q472096 wdt:P1431 wd:Q38222 .\nwd:Q472096 wdt:P162|wdt:P272 wd:Q38222\n}",
        "questionWithBrackets": "Were [Star Wars: Episode IV \u2013 A New Hope] and [Body Heat] executive produced and produced by [George Lucas]"
    },
    {
        "questionIdx": 128069,
        "questionPatternModEntities": "Were M1 , M2 , M3 , and M4 produced by and edited by M0 's spouse",
        "questionTemplate": "Were [entity] , [entity] , [entity] , and [entity] [VP_SIMPLE] by and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nM1 P1 ?x0 .\nM1 P2 ?x0 .\nM2 P1 ?x0 .\nM2 P2 ?x0 .\nM3 P1 ?x0 .\nM3 P2 ?x0 .\nM4 P1 ?x0 .\nM4 P2 ?x0\n}",
        "recursionDepth": 34,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P26 wd:Q241019 .\nFILTER ( ?x0 != wd:Q241019 ) .\nwd:Q669929 wdt:P1040 ?x0 .\nwd:Q669929 wdt:P162|wdt:P272 ?x0 .\nwd:Q199039 wdt:P1040 ?x0 .\nwd:Q199039 wdt:P162|wdt:P272 ?x0 .\nwd:Q45602 wdt:P1040 ?x0 .\nwd:Q45602 wdt:P162|wdt:P272 ?x0 .\nwd:Q166739 wdt:P1040 ?x0 .\nwd:Q166739 wdt:P162|wdt:P272 ?x0\n}",
        "questionWithBrackets": "Were [Modern Times] , [The Floorwalker] , [The Circus] , and [Pay Day] produced by and edited by [Mildred Harris] 's spouse"
    },
    {
        "questionIdx": 128070,
        "questionPatternModEntities": "Were M0 , M2 , M3 , and M4 produced , directed , and edited by M1",
        "questionTemplate": "Were [entity] , [entity] , [entity] , and [entity] [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1 .\nM0 P2 M1 .\nM2 P0 M1 .\nM2 P1 M1 .\nM2 P2 M1 .\nM3 P0 M1 .\nM3 P1 M1 .\nM3 P2 M1 .\nM4 P0 M1 .\nM4 P1 M1 .\nM4 P2 M1\n}",
        "recursionDepth": 34,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q2718259 wdt:P57 wd:Q882 .\nwd:Q2718259 wdt:P1040 wd:Q882 .\nwd:Q2718259 wdt:P162|wdt:P272 wd:Q882 .\nwd:Q45602 wdt:P57 wd:Q882 .\nwd:Q45602 wdt:P1040 wd:Q882 .\nwd:Q45602 wdt:P162|wdt:P272 wd:Q882 .\nwd:Q166739 wdt:P57 wd:Q882 .\nwd:Q166739 wdt:P1040 wd:Q882 .\nwd:Q166739 wdt:P162|wdt:P272 wd:Q882 .\nwd:Q214723 wdt:P57 wd:Q882 .\nwd:Q214723 wdt:P1040 wd:Q882 .\nwd:Q214723 wdt:P162|wdt:P272 wd:Q882\n}",
        "questionWithBrackets": "Were [The Gold Rush] , [The Professor] , [Modern Times] , and [The Floorwalker] produced , directed , and edited by [Charlie Chaplin]"
    },
    {
        "questionIdx": 128075,
        "questionPatternModEntities": "Were M1 and M2 written by M0 's spouse",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nM1 P1 ?x0 .\nM2 P1 ?x0\n}",
        "recursionDepth": 20,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P26 wd:Q234583 .\nFILTER ( ?x0 != wd:Q234583 ) .\nwd:Q270215 wdt:P58 ?x0 .\nwd:Q16740232 wdt:P58 ?x0\n}",
        "questionWithBrackets": "Were [The Backbone of Night] and [Contact] written by [Lynn Margulis] 's spouse"
    },
    {
        "questionIdx": 128122,
        "questionPatternModEntities": "Were M0 , M2 , and M3 written by , produced by , directed by , edited by , and executive produced by M1",
        "questionTemplate": "Were [entity] , [entity] , and [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1 .\nM0 P2 M1 .\nM0 P3 M1 .\nM0 P4 M1 .\nM2 P0 M1 .\nM2 P1 M1 .\nM2 P2 M1 .\nM2 P3 M1 .\nM2 P4 M1 .\nM3 P0 M1 .\nM3 P1 M1 .\nM3 P2 M1 .\nM3 P3 M1 .\nM3 P4 M1\n}",
        "recursionDepth": 46,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q5437360 wdt:P57 wd:Q187261 .\nwd:Q5437360 wdt:P1040 wd:Q187261 .\nwd:Q5437360 wdt:P1431 wd:Q187261 .\nwd:Q5437360 wdt:P162|wdt:P272 wd:Q187261 .\nwd:Q5437360 wdt:P58 wd:Q187261 .\nwd:Q6084069 wdt:P57 wd:Q187261 .\nwd:Q6084069 wdt:P1040 wd:Q187261 .\nwd:Q6084069 wdt:P1431 wd:Q187261 .\nwd:Q6084069 wdt:P162|wdt:P272 wd:Q187261 .\nwd:Q6084069 wdt:P58 wd:Q187261 .\nwd:Q12813010 wdt:P57 wd:Q187261 .\nwd:Q12813010 wdt:P1040 wd:Q187261 .\nwd:Q12813010 wdt:P1431 wd:Q187261 .\nwd:Q12813010 wdt:P162|wdt:P272 wd:Q187261 .\nwd:Q12813010 wdt:P58 wd:Q187261\n}",
        "questionWithBrackets": "Were [Fate] , [The Waiting Room] , and [The Confession] written by , produced by , directed by , edited by , and executive produced by [Zeki Demirkubuz]"
    },
    {
        "questionIdx": 128148,
        "questionPatternModEntities": "Were M0 and M2 executive produced by and edited by M1",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1 .\nM2 P0 M1 .\nM2 P1 M1\n}",
        "recursionDepth": 25,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q17738 wdt:P1040 wd:Q38222 .\nwd:Q17738 wdt:P1431 wd:Q38222 .\nwd:Q181803 wdt:P1040 wd:Q38222 .\nwd:Q181803 wdt:P1431 wd:Q38222\n}",
        "questionWithBrackets": "Were [Star Wars: Episode IV \u2013 A New Hope] and [Star Wars: Episode VI \u2013 Return of the Jedi] executive produced by and edited by [George Lucas]"
    },
    {
        "questionIdx": 128156,
        "questionPatternModEntities": "Were M2 and M3 produced and edited by a Japanese spouse of M1",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] and [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M1 ) .\nM2 P2 ?x0 .\nM2 P3 ?x0 .\nM3 P2 ?x0 .\nM3 P3 ?x0\n}",
        "recursionDepth": 34,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P27 wd:Q17 .\n?x0 wdt:P26 wd:Q3032150 .\nFILTER ( ?x0 != wd:Q3032150 ) .\nwd:Q854990 wdt:P1040 ?x0 .\nwd:Q854990 wdt:P162|wdt:P272 ?x0 .\nwd:Q39946 wdt:P1040 ?x0 .\nwd:Q39946 wdt:P162|wdt:P272 ?x0\n}",
        "questionWithBrackets": "Were [The Hidden Fortress] and [Kagemusha] produced and edited by a Japanese spouse of [Y\u014dko Yaguchi]"
    },
    {
        "questionIdx": 128177,
        "questionPatternModEntities": "Were M2 and M5 influenced by M3 , influenced by M4 , and influenced by M1 's German spouse",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M1 ) .\nM2 P2 ?x0 .\nM2 P2 M3 .\nM2 P2 M4 .\nM5 P2 ?x0 .\nM5 P2 M3 .\nM5 P2 M4\n}",
        "recursionDepth": 45,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P27 wd:Q183 .\n?x0 wdt:P26 wd:Q61408442 .\nFILTER ( ?x0 != wd:Q61408442 ) .\nwd:Q187019 wdt:P737 ?x0 .\nwd:Q187019 wdt:P737 wd:Q991 .\nwd:Q187019 wdt:P737 wd:Q6538 .\nwd:Q4119221 wdt:P737 ?x0 .\nwd:Q4119221 wdt:P737 wd:Q991 .\nwd:Q4119221 wdt:P737 wd:Q6538\n}",
        "questionWithBrackets": "Were [Philip Roth] and [Jamal Naji] influenced by [Fyodor Dostoyevsky] , influenced by [G\u00fcnter Grass] , and influenced by [Anna Schwarz] 's German spouse"
    },
    {
        "questionIdx": 128204,
        "questionPatternModEntities": "Were M0 and M3 produced , written , and directed by M1 and M2",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P1 M1 .\nM0 P1 M2 .\nM0 P2 M1 .\nM0 P2 M2 .\nM3 P0 M1 .\nM3 P0 M2 .\nM3 P1 M1 .\nM3 P1 M2 .\nM3 P2 M1 .\nM3 P2 M2\n}",
        "recursionDepth": 32,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q2249349 wdt:P57 wd:Q55234 .\nwd:Q2249349 wdt:P57 wd:Q55230 .\nwd:Q2249349 wdt:P162|wdt:P272 wd:Q55234 .\nwd:Q2249349 wdt:P162|wdt:P272 wd:Q55230 .\nwd:Q2249349 wdt:P58 wd:Q55234 .\nwd:Q2249349 wdt:P58 wd:Q55230 .\nwd:Q625780 wdt:P57 wd:Q55234 .\nwd:Q625780 wdt:P57 wd:Q55230 .\nwd:Q625780 wdt:P162|wdt:P272 wd:Q55234 .\nwd:Q625780 wdt:P162|wdt:P272 wd:Q55230 .\nwd:Q625780 wdt:P58 wd:Q55234 .\nwd:Q625780 wdt:P58 wd:Q55230\n}",
        "questionWithBrackets": "Were [The Red Shoes] and [The Tales of Hoffmann] produced , written , and directed by [Michael Powell] and [Emeric Pressburger]"
    },
    {
        "questionIdx": 128208,
        "questionPatternModEntities": "Were M0 , M2 , and M3 executive produced by , produced by , directed by , edited by , and written by M1",
        "questionTemplate": "Were [entity] , [entity] , and [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1 .\nM0 P2 M1 .\nM0 P3 M1 .\nM0 P4 M1 .\nM2 P0 M1 .\nM2 P1 M1 .\nM2 P2 M1 .\nM2 P3 M1 .\nM2 P4 M1 .\nM3 P0 M1 .\nM3 P1 M1 .\nM3 P2 M1 .\nM3 P3 M1 .\nM3 P4 M1\n}",
        "recursionDepth": 46,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q484679 wdt:P57 wd:Q212990 .\nwd:Q484679 wdt:P1040 wd:Q212990 .\nwd:Q484679 wdt:P1431 wd:Q212990 .\nwd:Q484679 wdt:P162|wdt:P272 wd:Q212990 .\nwd:Q484679 wdt:P58 wd:Q212990 .\nwd:Q13471372 wdt:P57 wd:Q212990 .\nwd:Q13471372 wdt:P1040 wd:Q212990 .\nwd:Q13471372 wdt:P1431 wd:Q212990 .\nwd:Q13471372 wdt:P162|wdt:P272 wd:Q212990 .\nwd:Q13471372 wdt:P58 wd:Q212990 .\nwd:Q483197 wdt:P57 wd:Q212990 .\nwd:Q483197 wdt:P1040 wd:Q212990 .\nwd:Q483197 wdt:P1431 wd:Q212990 .\nwd:Q483197 wdt:P162|wdt:P272 wd:Q212990 .\nwd:Q483197 wdt:P58 wd:Q212990\n}",
        "questionWithBrackets": "Were [Dream] , [Moebius] , and [Piet\u00e0] executive produced by , produced by , directed by , edited by , and written by [Kim Ki-duk]"
    },
    {
        "questionIdx": 128212,
        "questionPatternModEntities": "Were M0 and M4 influenced by M1 , M2 , and M3",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P0 M3 .\nM4 P0 M1 .\nM4 P0 M2 .\nM4 P0 M3\n}",
        "recursionDepth": 23,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q143 wdt:P737 wd:Q150 .\nwd:Q143 wdt:P737 wd:Q1321 .\nwd:Q143 wdt:P737 wd:Q9129 .\nwd:Q13468745 wdt:P737 wd:Q150 .\nwd:Q13468745 wdt:P737 wd:Q1321 .\nwd:Q13468745 wdt:P737 wd:Q9129\n}",
        "questionWithBrackets": "Were [Esperanto] and [Cit\u00e9s] influenced by [Greek] , [French] , and [Spanish]"
    },
    {
        "questionIdx": 128234,
        "questionPatternModEntities": "Were M2 and M6 written by M3 , M4 , and M5 and directed by a American spouse of M1",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by [entity] , [entity] , and [entity] and [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M1 ) .\nM2 P2 M3 .\nM2 P2 M4 .\nM2 P2 M5 .\nM2 P3 ?x0 .\nM6 P2 M3 .\nM6 P2 M4 .\nM6 P2 M5 .\nM6 P3 ?x0\n}",
        "recursionDepth": 45,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P27 wd:Q30 .\n?x0 wdt:P26 wd:Q32947601 .\nFILTER ( ?x0 != wd:Q32947601 ) .\nwd:Q50380543 wdt:P57 ?x0 .\nwd:Q50380543 wdt:P58 wd:Q3772 .\nwd:Q50380543 wdt:P58 wd:Q440900 .\nwd:Q50380543 wdt:P58 wd:Q470834 .\nwd:Q3955664 wdt:P57 ?x0 .\nwd:Q3955664 wdt:P58 wd:Q3772 .\nwd:Q3955664 wdt:P58 wd:Q440900 .\nwd:Q3955664 wdt:P58 wd:Q470834\n}",
        "questionWithBrackets": "Were [Grave Danger] and [Grave Danger: Part 2] written by [Anthony E. Zuiker] , [Carol Mendelsohn] , and [Quentin Tarantino] and directed by a American spouse of [Daniella Pick]"
    },
    {
        "questionIdx": 128255,
        "questionPatternModEntities": "Were M0 and M2 produced by and directed by M1",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1 .\nM2 P0 M1 .\nM2 P1 M1\n}",
        "recursionDepth": 24,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q208048 wdt:P57 wd:Q2263 .\nwd:Q208048 wdt:P162|wdt:P272 wd:Q2263 .\nwd:Q382864 wdt:P57 wd:Q2263 .\nwd:Q382864 wdt:P162|wdt:P272 wd:Q2263\n}",
        "questionWithBrackets": "Were [Band of Brothers] and [Larry Crowne] produced by and directed by [Tom Hanks]"
    },
    {
        "questionIdx": 128269,
        "questionPatternModEntities": "Were M3 and M5 directed by M1 's British employee , produced by M0 's employee , and written by M4",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] , [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x1 P0 M1 .\n?x1 P1 M2 .\nM3 P2 M4 .\nM3 P3 ?x0 .\nM3 P4 ?x1 .\nM5 P2 M4 .\nM5 P3 ?x0 .\nM5 P4 ?x1\n}",
        "recursionDepth": 49,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P108 wd:Q34433 .\n?x1 wdt:P108 wd:Q3789934 .\n?x1 wdt:P27 wd:Q145 .\nwd:Q1240641 wdt:P57 ?x1 .\nwd:Q1240641 wdt:P162|wdt:P272 ?x0 .\nwd:Q1240641 wdt:P58 wd:Q706935 .\nwd:Q1403132 wdt:P57 ?x1 .\nwd:Q1403132 wdt:P162|wdt:P272 ?x0 .\nwd:Q1403132 wdt:P58 wd:Q706935\n}",
        "questionWithBrackets": "Were [Grey Owl] and [Shadowlands] directed by [IVO] 's British employee , produced by [University of Oxford] 's employee , and written by [William Nicholson]"
    },
    {
        "questionIdx": 128270,
        "questionPatternModEntities": "Were M0 and M2 Canadian",
        "questionTemplate": "Were [entity] and [entity] [ADJECTIVE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM2 P0 M1\n}",
        "recursionDepth": 13,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q633 wdt:P27 wd:Q16 .\nwd:Q206 wdt:P27 wd:Q16\n}",
        "questionWithBrackets": "Were [Stephen Harper] and [Neil Young] Canadian"
    },
    {
        "questionIdx": 128281,
        "questionPatternModEntities": "Were M2 , M3 , and M4 directed by M0 's Chinese sibling 's sibling",
        "questionTemplate": "Were [entity] , [entity] , and [entity] [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x1 P0 M0 .\n?x1 P1 M1 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x1 != M0 ) .\nM2 P2 ?x0 .\nM3 P2 ?x0 .\nM4 P2 ?x0\n}",
        "recursionDepth": 32,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P3373 ?x1 .\n?x1 wdt:P27 wd:Q148 .\n?x1 wdt:P3373 wd:Q13164506 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x1 != wd:Q13164506 ) .\nwd:Q1028669 wdt:P57 ?x0 .\nwd:Q20688677 wdt:P57 ?x0 .\nwd:Q17232493 wdt:P57 ?x0\n}",
        "questionWithBrackets": "Were [Teppanyaki] , [The Contract] , and [No label defined] directed by [Stanley Hui] 's Chinese sibling 's sibling"
    },
    {
        "questionIdx": 128333,
        "questionPatternModEntities": "Were M2 and M4 produced by a French parent of M1 and edited by M3",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nM2 P2 ?x0 .\nM2 P3 M3 .\nM4 P2 ?x0 .\nM4 P3 M3\n}",
        "recursionDepth": 38,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q3368732 .\n?x0 wdt:P27 wd:Q142 .\nwd:Q2822909 wdt:P1040 wd:Q55393 .\nwd:Q2822909 wdt:P162|wdt:P272 ?x0 .\nwd:Q3232881 wdt:P1040 wd:Q55393 .\nwd:Q3232881 wdt:P162|wdt:P272 ?x0\n}",
        "questionWithBrackets": "Were [Accused] and [Fun in the Barracks] produced by a French parent of [Path\u00e9 Distribution] and edited by [Jacques Tourneur]"
    },
    {
        "questionIdx": 128349,
        "questionPatternModEntities": "Were M2 and M5 directed by M1 's German spouse , directed by M3 , and directed by M4",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M1 ) .\nM2 P2 ?x0 .\nM2 P2 M3 .\nM2 P2 M4 .\nM5 P2 ?x0 .\nM5 P2 M3 .\nM5 P2 M4\n}",
        "recursionDepth": 45,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P27 wd:Q183 .\n?x0 wdt:P26 wd:Q58866 .\nFILTER ( ?x0 != wd:Q58866 ) .\nwd:Q3707067 wdt:P57 ?x0 .\nwd:Q3707067 wdt:P57 wd:Q85134 .\nwd:Q3707067 wdt:P57 wd:Q19504 .\nwd:Q3707065 wdt:P57 ?x0 .\nwd:Q3707065 wdt:P57 wd:Q85134 .\nwd:Q3707065 wdt:P57 wd:Q19504\n}",
        "questionWithBrackets": "Were [No label defined] and [No label defined] directed by [Thea von Harbou] 's German spouse , directed by [Joe May] , and directed by [Fritz Lang]"
    },
    {
        "questionIdx": 128351,
        "questionPatternModEntities": "Were M2 and M5 directed by M3 and M4 and directed by a French sibling of M0",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by [entity] and [entity] and [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M0 ) .\nM2 P2 ?x0 .\nM2 P2 M3 .\nM2 P2 M4 .\nM5 P2 ?x0 .\nM5 P2 M3 .\nM5 P2 M4\n}",
        "recursionDepth": 42,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P27 wd:Q142 .\n?x0 wdt:P3373 wd:Q2272454 .\nFILTER ( ?x0 != wd:Q2272454 ) .\nwd:Q21707028 wdt:P57 ?x0 .\nwd:Q21707028 wdt:P57 wd:Q28556 .\nwd:Q21707028 wdt:P57 wd:Q3035354 .\nwd:Q3207502 wdt:P57 ?x0 .\nwd:Q3207502 wdt:P57 wd:Q28556 .\nwd:Q3207502 wdt:P57 wd:Q3035354\n}",
        "questionWithBrackets": "Were [No label defined] and [La Classe am\u00e9ricaine] directed by [Michel Hazanavicius] and [Dominique M\u00e9zerette] and directed by a French sibling of [Serge Hazanavicius]"
    },
    {
        "questionIdx": 128371,
        "questionPatternModEntities": "Were M0 and M3 produced and edited by M1 and M2",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P1 M1 .\nM0 P1 M2 .\nM3 P0 M1 .\nM3 P0 M2 .\nM3 P1 M1 .\nM3 P1 M2\n}",
        "recursionDepth": 27,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q20729238 wdt:P1040 wd:Q562108 .\nwd:Q20729238 wdt:P1040 wd:Q35979475 .\nwd:Q20729238 wdt:P162|wdt:P272 wd:Q562108 .\nwd:Q20729238 wdt:P162|wdt:P272 wd:Q35979475 .\nwd:Q20729551 wdt:P1040 wd:Q562108 .\nwd:Q20729551 wdt:P1040 wd:Q35979475 .\nwd:Q20729551 wdt:P162|wdt:P272 wd:Q562108 .\nwd:Q20729551 wdt:P162|wdt:P272 wd:Q35979475\n}",
        "questionWithBrackets": "Were [Motion picture] and [Stop for Bud] produced and edited by [J\u00f8rgen Leth] and [Ole John]"
    },
    {
        "questionIdx": 128470,
        "questionPatternModEntities": "Were M0 and M3 written by , edited by , and produced by M1 and M2",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P1 M1 .\nM0 P1 M2 .\nM0 P2 M1 .\nM0 P2 M2 .\nM3 P0 M1 .\nM3 P0 M2 .\nM3 P1 M1 .\nM3 P1 M2 .\nM3 P2 M1 .\nM3 P2 M2\n}",
        "recursionDepth": 34,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q20729238 wdt:P1040 wd:Q562108 .\nwd:Q20729238 wdt:P1040 wd:Q35979475 .\nwd:Q20729238 wdt:P162|wdt:P272 wd:Q562108 .\nwd:Q20729238 wdt:P162|wdt:P272 wd:Q35979475 .\nwd:Q20729238 wdt:P58 wd:Q562108 .\nwd:Q20729238 wdt:P58 wd:Q35979475 .\nwd:Q20729551 wdt:P1040 wd:Q562108 .\nwd:Q20729551 wdt:P1040 wd:Q35979475 .\nwd:Q20729551 wdt:P162|wdt:P272 wd:Q562108 .\nwd:Q20729551 wdt:P162|wdt:P272 wd:Q35979475 .\nwd:Q20729551 wdt:P58 wd:Q562108 .\nwd:Q20729551 wdt:P58 wd:Q35979475\n}",
        "questionWithBrackets": "Were [Stop for Bud] and [Motion picture] written by , edited by , and produced by [J\u00f8rgen Leth] and [Ole John]"
    },
    {
        "questionIdx": 128471,
        "questionPatternModEntities": "Were M0 and M3 produced by , edited by , and written by M1 and M2",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P1 M1 .\nM0 P1 M2 .\nM0 P2 M1 .\nM0 P2 M2 .\nM3 P0 M1 .\nM3 P0 M2 .\nM3 P1 M1 .\nM3 P1 M2 .\nM3 P2 M1 .\nM3 P2 M2\n}",
        "recursionDepth": 34,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q20729238 wdt:P1040 wd:Q562108 .\nwd:Q20729238 wdt:P1040 wd:Q35979475 .\nwd:Q20729238 wdt:P162|wdt:P272 wd:Q562108 .\nwd:Q20729238 wdt:P162|wdt:P272 wd:Q35979475 .\nwd:Q20729238 wdt:P58 wd:Q562108 .\nwd:Q20729238 wdt:P58 wd:Q35979475 .\nwd:Q20729551 wdt:P1040 wd:Q562108 .\nwd:Q20729551 wdt:P1040 wd:Q35979475 .\nwd:Q20729551 wdt:P162|wdt:P272 wd:Q562108 .\nwd:Q20729551 wdt:P162|wdt:P272 wd:Q35979475 .\nwd:Q20729551 wdt:P58 wd:Q562108 .\nwd:Q20729551 wdt:P58 wd:Q35979475\n}",
        "questionWithBrackets": "Were [Motion picture] and [Stop for Bud] produced by , edited by , and written by [Ole John] and [J\u00f8rgen Leth]"
    },
    {
        "questionIdx": 128474,
        "questionPatternModEntities": "Were M0 and M3 edited by , produced by , and written by M1 and M2",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P1 M1 .\nM0 P1 M2 .\nM0 P2 M1 .\nM0 P2 M2 .\nM3 P0 M1 .\nM3 P0 M2 .\nM3 P1 M1 .\nM3 P1 M2 .\nM3 P2 M1 .\nM3 P2 M2\n}",
        "recursionDepth": 34,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q20729238 wdt:P1040 wd:Q562108 .\nwd:Q20729238 wdt:P1040 wd:Q35979475 .\nwd:Q20729238 wdt:P162|wdt:P272 wd:Q562108 .\nwd:Q20729238 wdt:P162|wdt:P272 wd:Q35979475 .\nwd:Q20729238 wdt:P58 wd:Q562108 .\nwd:Q20729238 wdt:P58 wd:Q35979475 .\nwd:Q20729551 wdt:P1040 wd:Q562108 .\nwd:Q20729551 wdt:P1040 wd:Q35979475 .\nwd:Q20729551 wdt:P162|wdt:P272 wd:Q562108 .\nwd:Q20729551 wdt:P162|wdt:P272 wd:Q35979475 .\nwd:Q20729551 wdt:P58 wd:Q562108 .\nwd:Q20729551 wdt:P58 wd:Q35979475\n}",
        "questionWithBrackets": "Were [Motion picture] and [Stop for Bud] edited by , produced by , and written by [Ole John] and [J\u00f8rgen Leth]"
    },
    {
        "questionIdx": 128476,
        "questionPatternModEntities": "Were M0 and M3 directed and edited by M1 and M2",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P1 M1 .\nM0 P1 M2 .\nM3 P0 M1 .\nM3 P0 M2 .\nM3 P1 M1 .\nM3 P1 M2\n}",
        "recursionDepth": 27,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q19827613 wdt:P57 wd:Q562108 .\nwd:Q19827613 wdt:P57 wd:Q35979475 .\nwd:Q19827613 wdt:P1040 wd:Q562108 .\nwd:Q19827613 wdt:P1040 wd:Q35979475 .\nwd:Q20729238 wdt:P57 wd:Q562108 .\nwd:Q20729238 wdt:P57 wd:Q35979475 .\nwd:Q20729238 wdt:P1040 wd:Q562108 .\nwd:Q20729238 wdt:P1040 wd:Q35979475\n}",
        "questionWithBrackets": "Were [Motion picture] and [Near Heaven, Near Earth] directed and edited by [Ole John] and [J\u00f8rgen Leth]"
    },
    {
        "questionIdx": 128484,
        "questionPatternModEntities": "Were M2 , M3 , and M4 directed by , edited by , written by , and produced by a female spouse of M1",
        "questionTemplate": "Were [entity] , [entity] , and [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M1 ) .\nM2 P2 ?x0 .\nM2 P3 ?x0 .\nM2 P4 ?x0 .\nM2 P5 ?x0 .\nM3 P2 ?x0 .\nM3 P3 ?x0 .\nM3 P4 ?x0 .\nM3 P5 ?x0 .\nM4 P2 ?x0 .\nM4 P3 ?x0 .\nM4 P4 ?x0 .\nM4 P5 ?x0\n}",
        "recursionDepth": 50,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P21 wd:Q6581072 .\n?x0 wdt:P26 wd:Q16266828 .\nFILTER ( ?x0 != wd:Q16266828 ) .\nwd:Q156497 wdt:P57 ?x0 .\nwd:Q156497 wdt:P1040 ?x0 .\nwd:Q156497 wdt:P162|wdt:P272 ?x0 .\nwd:Q156497 wdt:P58 ?x0 .\nwd:Q158069 wdt:P57 ?x0 .\nwd:Q158069 wdt:P1040 ?x0 .\nwd:Q158069 wdt:P162|wdt:P272 ?x0 .\nwd:Q158069 wdt:P58 ?x0 .\nwd:Q497617 wdt:P57 ?x0 .\nwd:Q497617 wdt:P1040 ?x0 .\nwd:Q497617 wdt:P162|wdt:P272 ?x0 .\nwd:Q497617 wdt:P58 ?x0\n}",
        "questionWithBrackets": "Were [Tag der Freiheit: Unsere Wehrmacht] , [Olympia] , and [Triumph of the Will] directed by , edited by , written by , and produced by a female spouse of [Horst Kettner]"
    },
    {
        "questionIdx": 128524,
        "questionPatternModEntities": "Were M0 and M3 executive produced and written by M1 and M2",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P1 M1 .\nM0 P1 M2 .\nM3 P0 M1 .\nM3 P0 M2 .\nM3 P1 M1 .\nM3 P1 M2\n}",
        "recursionDepth": 28,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q183555 wdt:P1431 wd:Q942914 .\nwd:Q183555 wdt:P1431 wd:Q943506 .\nwd:Q183555 wdt:P58 wd:Q942914 .\nwd:Q183555 wdt:P58 wd:Q943506 .\nwd:Q548919 wdt:P1431 wd:Q942914 .\nwd:Q548919 wdt:P1431 wd:Q943506 .\nwd:Q548919 wdt:P58 wd:Q942914 .\nwd:Q548919 wdt:P58 wd:Q943506\n}",
        "questionWithBrackets": "Were [Pirates of the Caribbean: On Stranger Tides] and [The Lone Ranger] executive produced and written by [Terry Rossio] and [Ted Elliott]"
    },
    {
        "questionIdx": 128525,
        "questionPatternModEntities": "Were M0 and M3 executive produced by and directed by M1 and M2",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P1 M1 .\nM0 P1 M2 .\nM3 P0 M1 .\nM3 P0 M2 .\nM3 P1 M1 .\nM3 P1 M2\n}",
        "recursionDepth": 29,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q2396238 wdt:P57 wd:Q263324 .\nwd:Q2396238 wdt:P57 wd:Q190373 .\nwd:Q2396238 wdt:P1431 wd:Q263324 .\nwd:Q2396238 wdt:P1431 wd:Q190373 .\nwd:Q936279 wdt:P57 wd:Q263324 .\nwd:Q936279 wdt:P57 wd:Q190373 .\nwd:Q936279 wdt:P1431 wd:Q263324 .\nwd:Q936279 wdt:P1431 wd:Q190373\n}",
        "questionWithBrackets": "Were [Birdman and the Galaxy Trio] and [Scooby-Doo, Where Are You!] executive produced by and directed by [William Hanna] and [Joseph Barbera]"
    },
    {
        "questionIdx": 128529,
        "questionPatternModEntities": "Were M0 and M4 written by and directed by M1 , M2 , and M3",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by and [VP_SIMPLE] by [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P0 M3 .\nM0 P1 M1 .\nM0 P1 M2 .\nM0 P1 M3 .\nM4 P0 M1 .\nM4 P0 M2 .\nM4 P0 M3 .\nM4 P1 M1 .\nM4 P1 M2 .\nM4 P1 M3\n}",
        "recursionDepth": 31,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q102390692 wdt:P57 wd:Q82022 .\nwd:Q102390692 wdt:P57 wd:Q352030 .\nwd:Q102390692 wdt:P57 wd:Q2602324 .\nwd:Q102390692 wdt:P58 wd:Q82022 .\nwd:Q102390692 wdt:P58 wd:Q352030 .\nwd:Q102390692 wdt:P58 wd:Q2602324 .\nwd:Q16028796 wdt:P57 wd:Q82022 .\nwd:Q16028796 wdt:P57 wd:Q352030 .\nwd:Q16028796 wdt:P57 wd:Q2602324 .\nwd:Q16028796 wdt:P58 wd:Q82022 .\nwd:Q16028796 wdt:P58 wd:Q352030 .\nwd:Q16028796 wdt:P58 wd:Q2602324\n}",
        "questionWithBrackets": "Were [No label defined] and [Pearls of the Deep] written by and directed by [Jaromil Jire\u0161] , [Ji\u0159\u00ed Menzel] , and [Jan N\u011bmec]"
    },
    {
        "questionIdx": 128554,
        "questionPatternModEntities": "Were M0 and M3 produced and directed by M1 and M2",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P1 M1 .\nM0 P1 M2 .\nM3 P0 M1 .\nM3 P0 M2 .\nM3 P1 M1 .\nM3 P1 M2\n}",
        "recursionDepth": 27,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q3988458 wdt:P57 wd:Q24532 .\nwd:Q3988458 wdt:P57 wd:Q3830671 .\nwd:Q3988458 wdt:P162|wdt:P272 wd:Q24532 .\nwd:Q3988458 wdt:P162|wdt:P272 wd:Q3830671 .\nwd:Q3280641 wdt:P57 wd:Q24532 .\nwd:Q3280641 wdt:P57 wd:Q3830671 .\nwd:Q3280641 wdt:P162|wdt:P272 wd:Q24532 .\nwd:Q3280641 wdt:P162|wdt:P272 wd:Q3830671\n}",
        "questionWithBrackets": "Were [The New Adventures of J. Rufus Wallingford] and [Beatrice Fairfax] produced and directed by [Leopold Wharton] and [Theodore Wharton]"
    },
    {
        "questionIdx": 128566,
        "questionPatternModEntities": "Were M0 , M6 , and M7 written by M1 , M2 , and M3 , written by M4 , and directed by M5",
        "questionTemplate": "Were [entity] , [entity] , and [entity] [VP_SIMPLE] by [entity] , [entity] , and [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P0 M3 .\nM0 P0 M4 .\nM0 P1 M5 .\nM6 P0 M1 .\nM6 P0 M2 .\nM6 P0 M3 .\nM6 P0 M4 .\nM6 P1 M5 .\nM7 P0 M1 .\nM7 P0 M2 .\nM7 P0 M3 .\nM7 P0 M4 .\nM7 P1 M5\n}",
        "recursionDepth": 46,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q24953 wdt:P57 wd:Q166159 .\nwd:Q24953 wdt:P58 wd:Q25014 .\nwd:Q24953 wdt:P58 wd:Q24962 .\nwd:Q24953 wdt:P58 wd:Q223985 .\nwd:Q24953 wdt:P58 wd:Q25078 .\nwd:Q24980 wdt:P57 wd:Q166159 .\nwd:Q24980 wdt:P58 wd:Q25014 .\nwd:Q24980 wdt:P58 wd:Q24962 .\nwd:Q24980 wdt:P58 wd:Q223985 .\nwd:Q24980 wdt:P58 wd:Q25078 .\nwd:Q25043 wdt:P57 wd:Q166159 .\nwd:Q25043 wdt:P58 wd:Q25014 .\nwd:Q25043 wdt:P58 wd:Q24962 .\nwd:Q25043 wdt:P58 wd:Q223985 .\nwd:Q25043 wdt:P58 wd:Q25078\n}",
        "questionWithBrackets": "Were [Monty Python's The Meaning of Life] , [Monty Python\u2019s Life of Brian] , and [Monty Python and the Holy Grail] written by [Graham Chapman] , [Terry Gilliam] , and [Michael Palin] , written by [John Cleese] , and directed by [Terry Jones]"
    },
    {
        "questionIdx": 128570,
        "questionPatternModEntities": "Were M3 and M4 directed and written by M0 's American female employee 's spouse",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] and [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x1 P1 M0 .\n?x1 P2 M1 .\n?x1 P3 M2 .\nFILTER ( ?x0 != ?x1 ) .\nM3 P4 ?x0 .\nM3 P5 ?x0 .\nM4 P4 ?x0 .\nM4 P5 ?x0\n}",
        "recursionDepth": 41,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P26 ?x1 .\n?x1 wdt:P108 wd:Q847743 .\n?x1 wdt:P21 wd:Q6581072 .\n?x1 wdt:P27 wd:Q30 .\nFILTER ( ?x0 != ?x1 ) .\nwd:Q269912 wdt:P57 ?x0 .\nwd:Q269912 wdt:P58 ?x0 .\nwd:Q603857 wdt:P57 ?x0 .\nwd:Q603857 wdt:P58 ?x0\n}",
        "questionWithBrackets": "Were [Into the Wild] and [11'09\"01 September 11] directed and written by [Dunkin'] 's American female employee 's spouse"
    },
    {
        "questionIdx": 128573,
        "questionPatternModEntities": "Were M1 and M2 written by M0 's employee",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 ?x0 .\nM2 P1 ?x0\n}",
        "recursionDepth": 20,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P108 wd:Q844822 .\nwd:Q1048722 wdt:P58 ?x0 .\nwd:Q1048739 wdt:P58 ?x0\n}",
        "questionWithBrackets": "Were [One Piece: The Giant Mechanical Soldier of Karakuri Castle] and [One Piece Movie 9: Episode of Chopper Plus - Fuyu ni Saku, Kiseki no Sakura] written by [Shueisha] 's employee"
    },
    {
        "questionIdx": 128585,
        "questionPatternModEntities": "Were M1 , M2 , M3 , and M4 executive produced and produced by a spouse of M0",
        "questionTemplate": "Were [entity] , [entity] , [entity] , and [entity] [VP_SIMPLE] and [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nM1 P1 ?x0 .\nM1 P2 ?x0 .\nM2 P1 ?x0 .\nM2 P2 ?x0 .\nM3 P1 ?x0 .\nM3 P2 ?x0 .\nM4 P1 ?x0 .\nM4 P2 ?x0\n}",
        "recursionDepth": 36,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P26 wd:Q6813152 .\nFILTER ( ?x0 != wd:Q6813152 ) .\nwd:Q1741078 wdt:P1431 ?x0 .\nwd:Q1741078 wdt:P162|wdt:P272 ?x0 .\nwd:Q182373 wdt:P1431 ?x0 .\nwd:Q182373 wdt:P162|wdt:P272 ?x0 .\nwd:Q17738 wdt:P1431 ?x0 .\nwd:Q17738 wdt:P162|wdt:P272 ?x0 .\nwd:Q382289 wdt:P1431 ?x0 .\nwd:Q382289 wdt:P162|wdt:P272 ?x0\n}",
        "questionWithBrackets": "Were [Indiana Jones and the Kingdom of the Crystal Skull] , [Star Wars: Episode IV \u2013 A New Hope] , [Star Wars: The Clone Wars] , and [Radioland Murders] executive produced and produced by a spouse of [Mellody Hobson]"
    },
    {
        "questionIdx": 128587,
        "questionPatternModEntities": "Were M1 , M2 , M3 , and M4 produced and executive produced by a spouse of M0",
        "questionTemplate": "Were [entity] , [entity] , [entity] , and [entity] [VP_SIMPLE] and [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nM1 P1 ?x0 .\nM1 P2 ?x0 .\nM2 P1 ?x0 .\nM2 P2 ?x0 .\nM3 P1 ?x0 .\nM3 P2 ?x0 .\nM4 P1 ?x0 .\nM4 P2 ?x0\n}",
        "recursionDepth": 36,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P26 wd:Q189895 .\nFILTER ( ?x0 != wd:Q189895 ) .\nwd:Q3790641 wdt:P1431 ?x0 .\nwd:Q3790641 wdt:P162|wdt:P272 ?x0 .\nwd:Q580653 wdt:P1431 ?x0 .\nwd:Q580653 wdt:P162|wdt:P272 ?x0 .\nwd:Q2875 wdt:P1431 ?x0 .\nwd:Q2875 wdt:P162|wdt:P272 ?x0 .\nwd:Q309048 wdt:P1431 ?x0 .\nwd:Q309048 wdt:P162|wdt:P272 ?x0\n}",
        "questionWithBrackets": "Were [Gone with the Wind] , [The Conquerors] , [King Kong] , and [No Other Woman] produced and executive produced by a spouse of [Jennifer Jones]"
    },
    {
        "questionIdx": 128591,
        "questionPatternModEntities": "Were M1 , M3 , M4 , M5 , and M6 executive produced by M0 's sibling and executive produced by M2",
        "questionTemplate": "Were [entity] , [entity] , [entity] , [entity] , and [entity] [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nM1 P1 ?x0 .\nM1 P1 M2 .\nM3 P1 ?x0 .\nM3 P1 M2 .\nM4 P1 ?x0 .\nM4 P1 M2 .\nM5 P1 ?x0 .\nM5 P1 M2 .\nM6 P1 ?x0 .\nM6 P1 M2\n}",
        "recursionDepth": 42,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P3373 wd:Q469204 .\nFILTER ( ?x0 != wd:Q469204 ) .\nwd:Q1102220 wdt:P1431 ?x0 .\nwd:Q1102220 wdt:P1431 wd:Q8877 .\nwd:Q109331 wdt:P1431 ?x0 .\nwd:Q109331 wdt:P1431 wd:Q8877 .\nwd:Q158474 wdt:P1431 ?x0 .\nwd:Q158474 wdt:P1431 wd:Q8877 .\nwd:Q51416 wdt:P1431 ?x0 .\nwd:Q51416 wdt:P1431 wd:Q8877 .\nwd:Q91540 wdt:P1431 ?x0 .\nwd:Q91540 wdt:P1431 wd:Q8877\n}",
        "questionWithBrackets": "Were [Eagle Eye] , [Men in Black] , [Jurassic Park III] , [Back to the Future Part II] , and [Back to the Future] executive produced by [Anne Spielberg] 's sibling and executive produced by [Steven Spielberg]"
    },
    {
        "questionIdx": 128631,
        "questionPatternModEntities": "Were M0 and M3 executive produced by M1 and M2",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM3 P0 M1 .\nM3 P0 M2\n}",
        "recursionDepth": 21,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q379873 wdt:P1431 wd:Q8877 .\nwd:Q379873 wdt:P1431 wd:Q237207 .\nwd:Q109331 wdt:P1431 wd:Q8877 .\nwd:Q109331 wdt:P1431 wd:Q237207\n}",
        "questionWithBrackets": "Were [Who Framed Roger Rabbit] and [Back to the Future Part II] executive produced by [Kathleen Kennedy] and [Steven Spielberg]"
    },
    {
        "questionIdx": 128660,
        "questionPatternModEntities": "Were M2 and M3 written by , edited by , and produced by a German spouse of M1",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M1 ) .\nM2 P2 ?x0 .\nM2 P3 ?x0 .\nM2 P4 ?x0 .\nM3 P2 ?x0 .\nM3 P3 ?x0 .\nM3 P4 ?x0\n}",
        "recursionDepth": 41,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P27 wd:Q183 .\n?x0 wdt:P26 wd:Q16266828 .\nFILTER ( ?x0 != wd:Q16266828 ) .\nwd:Q156497 wdt:P1040 ?x0 .\nwd:Q156497 wdt:P162|wdt:P272 ?x0 .\nwd:Q156497 wdt:P58 ?x0 .\nwd:Q158069 wdt:P1040 ?x0 .\nwd:Q158069 wdt:P162|wdt:P272 ?x0 .\nwd:Q158069 wdt:P58 ?x0\n}",
        "questionWithBrackets": "Were [Triumph of the Will] and [Olympia] written by , edited by , and produced by a German spouse of [Horst Kettner]"
    },
    {
        "questionIdx": 128666,
        "questionPatternModEntities": "Were M1 , M2 , M3 , and M4 edited by M0 's parent",
        "questionTemplate": "Were [entity] , [entity] , [entity] , and [entity] [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 ?x0 .\nM2 P1 ?x0 .\nM3 P1 ?x0 .\nM4 P1 ?x0\n}",
        "recursionDepth": 26,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q120593 .\nwd:Q687780 wdt:P1040 ?x0 .\nwd:Q519668 wdt:P1040 ?x0 .\nwd:Q45602 wdt:P1040 ?x0 .\nwd:Q166739 wdt:P1040 ?x0\n}",
        "questionWithBrackets": "Were [Getting Acquainted] , [The Rounders] , [The Floorwalker] , and [Modern Times] edited by [Eugene Chaplin] 's parent"
    },
    {
        "questionIdx": 128678,
        "questionPatternModEntities": "Were M0 and M3 produced , directed , and edited by M1 and M2",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P1 M1 .\nM0 P1 M2 .\nM0 P2 M1 .\nM0 P2 M2 .\nM3 P0 M1 .\nM3 P0 M2 .\nM3 P1 M1 .\nM3 P1 M2 .\nM3 P2 M1 .\nM3 P2 M2\n}",
        "recursionDepth": 32,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q20729238 wdt:P57 wd:Q562108 .\nwd:Q20729238 wdt:P57 wd:Q35979475 .\nwd:Q20729238 wdt:P1040 wd:Q562108 .\nwd:Q20729238 wdt:P1040 wd:Q35979475 .\nwd:Q20729238 wdt:P162|wdt:P272 wd:Q562108 .\nwd:Q20729238 wdt:P162|wdt:P272 wd:Q35979475 .\nwd:Q20729551 wdt:P57 wd:Q562108 .\nwd:Q20729551 wdt:P57 wd:Q35979475 .\nwd:Q20729551 wdt:P1040 wd:Q562108 .\nwd:Q20729551 wdt:P1040 wd:Q35979475 .\nwd:Q20729551 wdt:P162|wdt:P272 wd:Q562108 .\nwd:Q20729551 wdt:P162|wdt:P272 wd:Q35979475\n}",
        "questionWithBrackets": "Were [Motion picture] and [Stop for Bud] produced , directed , and edited by [J\u00f8rgen Leth] and [Ole John]"
    },
    {
        "questionIdx": 128688,
        "questionPatternModEntities": "Were M0 , M3 , and M4 edited by and directed by M1 and M2",
        "questionTemplate": "Were [entity] , [entity] , and [entity] [VP_SIMPLE] by and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P1 M1 .\nM0 P1 M2 .\nM3 P0 M1 .\nM3 P0 M2 .\nM3 P1 M1 .\nM3 P1 M2 .\nM4 P0 M1 .\nM4 P0 M2 .\nM4 P1 M1 .\nM4 P1 M2\n}",
        "recursionDepth": 31,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q20757119 wdt:P57 wd:Q562108 .\nwd:Q20757119 wdt:P57 wd:Q35979475 .\nwd:Q20757119 wdt:P1040 wd:Q562108 .\nwd:Q20757119 wdt:P1040 wd:Q35979475 .\nwd:Q19827613 wdt:P57 wd:Q562108 .\nwd:Q19827613 wdt:P57 wd:Q35979475 .\nwd:Q19827613 wdt:P1040 wd:Q562108 .\nwd:Q19827613 wdt:P1040 wd:Q35979475 .\nwd:Q20729238 wdt:P57 wd:Q562108 .\nwd:Q20729238 wdt:P57 wd:Q35979475 .\nwd:Q20729238 wdt:P1040 wd:Q562108 .\nwd:Q20729238 wdt:P1040 wd:Q35979475\n}",
        "questionWithBrackets": "Were [Motion picture] , [Near Heaven, Near Earth] , and [No label defined] edited by and directed by [Ole John] and [J\u00f8rgen Leth]"
    },
    {
        "questionIdx": 128691,
        "questionPatternModEntities": "Were M2 , M3 , and M4 produced by , edited by , directed by , and written by a male spouse of M1",
        "questionTemplate": "Were [entity] , [entity] , and [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M1 ) .\nM2 P2 ?x0 .\nM2 P3 ?x0 .\nM2 P4 ?x0 .\nM2 P5 ?x0 .\nM3 P2 ?x0 .\nM3 P3 ?x0 .\nM3 P4 ?x0 .\nM3 P5 ?x0 .\nM4 P2 ?x0 .\nM4 P3 ?x0 .\nM4 P4 ?x0 .\nM4 P5 ?x0\n}",
        "recursionDepth": 50,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P21 wd:Q6581097 .\n?x0 wdt:P26 wd:Q95050 .\nFILTER ( ?x0 != wd:Q95050 ) .\nwd:Q1152833 wdt:P57 ?x0 .\nwd:Q1152833 wdt:P1040 ?x0 .\nwd:Q1152833 wdt:P162|wdt:P272 ?x0 .\nwd:Q1152833 wdt:P58 ?x0 .\nwd:Q45602 wdt:P57 ?x0 .\nwd:Q45602 wdt:P1040 ?x0 .\nwd:Q45602 wdt:P162|wdt:P272 ?x0 .\nwd:Q45602 wdt:P58 ?x0 .\nwd:Q199039 wdt:P57 ?x0 .\nwd:Q199039 wdt:P1040 ?x0 .\nwd:Q199039 wdt:P162|wdt:P272 ?x0 .\nwd:Q199039 wdt:P58 ?x0\n}",
        "questionWithBrackets": "Were [Pay Day] , [Modern Times] , and [One A.M.] produced by , edited by , directed by , and written by a male spouse of [Paulette Goddard]"
    },
    {
        "questionIdx": 128693,
        "questionPatternModEntities": "Were M0 , M3 , and M4 edited , directed , and written by M1 and M2",
        "questionTemplate": "Were [entity] , [entity] , and [entity] [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P1 M1 .\nM0 P1 M2 .\nM0 P2 M1 .\nM0 P2 M2 .\nM3 P0 M1 .\nM3 P0 M2 .\nM3 P1 M1 .\nM3 P1 M2 .\nM3 P2 M1 .\nM3 P2 M2 .\nM4 P0 M1 .\nM4 P0 M2 .\nM4 P1 M1 .\nM4 P1 M2 .\nM4 P2 M1 .\nM4 P2 M2\n}",
        "recursionDepth": 35,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q20757119 wdt:P57 wd:Q562108 .\nwd:Q20757119 wdt:P57 wd:Q35979475 .\nwd:Q20757119 wdt:P1040 wd:Q562108 .\nwd:Q20757119 wdt:P1040 wd:Q35979475 .\nwd:Q20757119 wdt:P58 wd:Q562108 .\nwd:Q20757119 wdt:P58 wd:Q35979475 .\nwd:Q20729238 wdt:P57 wd:Q562108 .\nwd:Q20729238 wdt:P57 wd:Q35979475 .\nwd:Q20729238 wdt:P1040 wd:Q562108 .\nwd:Q20729238 wdt:P1040 wd:Q35979475 .\nwd:Q20729238 wdt:P58 wd:Q562108 .\nwd:Q20729238 wdt:P58 wd:Q35979475 .\nwd:Q20729551 wdt:P57 wd:Q562108 .\nwd:Q20729551 wdt:P57 wd:Q35979475 .\nwd:Q20729551 wdt:P1040 wd:Q562108 .\nwd:Q20729551 wdt:P1040 wd:Q35979475 .\nwd:Q20729551 wdt:P58 wd:Q562108 .\nwd:Q20729551 wdt:P58 wd:Q35979475\n}",
        "questionWithBrackets": "Were [Motion picture] , [Stop for Bud] , and [No label defined] edited , directed , and written by [Ole John] and [J\u00f8rgen Leth]"
    },
    {
        "questionIdx": 128699,
        "questionPatternModEntities": "Were M0 , M3 , and M4 directed by , edited by , and written by M1 and M2",
        "questionTemplate": "Were [entity] , [entity] , and [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P1 M1 .\nM0 P1 M2 .\nM0 P2 M1 .\nM0 P2 M2 .\nM3 P0 M1 .\nM3 P0 M2 .\nM3 P1 M1 .\nM3 P1 M2 .\nM3 P2 M1 .\nM3 P2 M2 .\nM4 P0 M1 .\nM4 P0 M2 .\nM4 P1 M1 .\nM4 P1 M2 .\nM4 P2 M1 .\nM4 P2 M2\n}",
        "recursionDepth": 37,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q20757119 wdt:P57 wd:Q562108 .\nwd:Q20757119 wdt:P57 wd:Q35979475 .\nwd:Q20757119 wdt:P1040 wd:Q562108 .\nwd:Q20757119 wdt:P1040 wd:Q35979475 .\nwd:Q20757119 wdt:P58 wd:Q562108 .\nwd:Q20757119 wdt:P58 wd:Q35979475 .\nwd:Q20729238 wdt:P57 wd:Q562108 .\nwd:Q20729238 wdt:P57 wd:Q35979475 .\nwd:Q20729238 wdt:P1040 wd:Q562108 .\nwd:Q20729238 wdt:P1040 wd:Q35979475 .\nwd:Q20729238 wdt:P58 wd:Q562108 .\nwd:Q20729238 wdt:P58 wd:Q35979475 .\nwd:Q20729551 wdt:P57 wd:Q562108 .\nwd:Q20729551 wdt:P57 wd:Q35979475 .\nwd:Q20729551 wdt:P1040 wd:Q562108 .\nwd:Q20729551 wdt:P1040 wd:Q35979475 .\nwd:Q20729551 wdt:P58 wd:Q562108 .\nwd:Q20729551 wdt:P58 wd:Q35979475\n}",
        "questionWithBrackets": "Were [Stop for Bud] , [Motion picture] , and [No label defined] directed by , edited by , and written by [J\u00f8rgen Leth] and [Ole John]"
    },
    {
        "questionIdx": 128703,
        "questionPatternModEntities": "Were M2 and M5 edited by M3 and M4 and directed by a Canadian sibling of M0",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by [entity] and [entity] and [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M0 ) .\nM2 P2 M3 .\nM2 P2 M4 .\nM2 P3 ?x0 .\nM5 P2 M3 .\nM5 P2 M4 .\nM5 P3 ?x0\n}",
        "recursionDepth": 42,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P27 wd:Q16 .\n?x0 wdt:P3373 wd:Q6228653 .\nFILTER ( ?x0 != wd:Q6228653 ) .\nwd:Q44578 wdt:P57 ?x0 .\nwd:Q44578 wdt:P1040 wd:Q42574 .\nwd:Q44578 wdt:P1040 wd:Q513356 .\nwd:Q110397 wdt:P57 ?x0 .\nwd:Q110397 wdt:P1040 wd:Q42574 .\nwd:Q110397 wdt:P1040 wd:Q513356\n}",
        "questionWithBrackets": "Were [True Lies] and [Titanic] edited by [James Cameron] and [Richard A. Harris] and directed by a Canadian sibling of [John David Cameron]"
    },
    {
        "questionIdx": 128724,
        "questionPatternModEntities": "Were M2 and M3 founded by a female sibling of M0",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M0 ) .\nM2 P2 ?x0 .\nM3 P2 ?x0\n}",
        "recursionDepth": 27,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P21 wd:Q6581072 .\n?x0 wdt:P3373 wd:Q153815 .\nFILTER ( ?x0 != wd:Q153815 ) .\nwd:Q17093035 wdt:P112 ?x0 .\nwd:Q29014695 wdt:P112 ?x0\n}",
        "questionWithBrackets": "Were [Regius Professor of Manufacturing] and [Malawi Independence Medal] founded by a female sibling of [Princess Margaret, Countess of Snowdon]"
    },
    {
        "questionIdx": 128726,
        "questionPatternModEntities": "Were M2 and M4 founded by M3 and founded by a female spouse of M1",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by [entity] and [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M1 ) .\nM2 P2 ?x0 .\nM2 P2 M3 .\nM4 P2 ?x0 .\nM4 P2 M3\n}",
        "recursionDepth": 38,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P21 wd:Q6581072 .\n?x0 wdt:P26 wd:Q76 .\nFILTER ( ?x0 != wd:Q76 ) .\nwd:Q7102081 wdt:P112 ?x0 .\nwd:Q7102081 wdt:P112 wd:Q13133 .\nwd:Q6532507 wdt:P112 ?x0 .\nwd:Q6532507 wdt:P112 wd:Q13133\n}",
        "questionWithBrackets": "Were [Let's Move!] and [Organizing for Action] founded by [Michelle Obama] and founded by a female spouse of [Barack Obama]"
    },
    {
        "questionIdx": 128730,
        "questionPatternModEntities": "Were M1 , M2 , M3 , and M4 founded by M0 's employee",
        "questionTemplate": "Were [entity] , [entity] , [entity] , and [entity] [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 ?x0 .\nM2 P1 ?x0 .\nM3 P1 ?x0 .\nM4 P1 ?x0\n}",
        "recursionDepth": 26,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P108 wd:Q2665980 .\nwd:Q20006792 wdt:P112 ?x0 .\nwd:Q53576555 wdt:P112 ?x0 .\nwd:Q52 wdt:P112 ?x0 .\nwd:Q369 wdt:P112 ?x0\n}",
        "questionWithBrackets": "Were [Wikipedia] , [Wikiquote] , [Community Central] , and [Jimmy Wales Foundation] founded by [Guardian Media Group] 's employee"
    },
    {
        "questionIdx": 128734,
        "questionPatternModEntities": "Were M3 , M4 , and M5 founded by M0 's female sibling and founded by a employee of M2",
        "questionTemplate": "Were [entity] , [entity] , and [entity] [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] and [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x1 P2 M2 .\nFILTER ( ?x0 != M0 ) .\nM3 P3 ?x0 .\nM3 P3 ?x1 .\nM4 P3 ?x0 .\nM4 P3 ?x1 .\nM5 P3 ?x0 .\nM5 P3 ?x1\n}",
        "recursionDepth": 45,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P21 wd:Q6581072 .\n?x0 wdt:P3373 wd:Q2073960 .\n?x1 wdt:P108 wd:Q21578 .\nFILTER ( ?x0 != wd:Q2073960 ) .\nwd:Q7102081 wdt:P112 ?x0 .\nwd:Q7102081 wdt:P112 ?x1 .\nwd:Q6532507 wdt:P112 ?x0 .\nwd:Q6532507 wdt:P112 ?x1 .\nwd:Q81950264 wdt:P112 ?x0 .\nwd:Q81950264 wdt:P112 ?x1\n}",
        "questionWithBrackets": "Were [Let's Move!] , [Organizing for Action] , and [Higher Ground Productions] founded by [Craig Robinson] 's female sibling and founded by a employee of [Princeton University]"
    },
    {
        "questionIdx": 128736,
        "questionPatternModEntities": "Were M2 , M4 , and M5 founded by M3 and founded by a female employee of M0",
        "questionTemplate": "Were [entity] , [entity] , and [entity] [VP_SIMPLE] by [entity] and [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nM2 P2 ?x0 .\nM2 P2 M3 .\nM4 P2 ?x0 .\nM4 P2 M3 .\nM5 P2 ?x0 .\nM5 P2 M3\n}",
        "recursionDepth": 41,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P108 wd:Q21578 .\n?x0 wdt:P21 wd:Q6581072 .\nwd:Q7102081 wdt:P112 ?x0 .\nwd:Q7102081 wdt:P112 wd:Q13133 .\nwd:Q6532507 wdt:P112 ?x0 .\nwd:Q6532507 wdt:P112 wd:Q13133 .\nwd:Q81950264 wdt:P112 ?x0 .\nwd:Q81950264 wdt:P112 wd:Q13133\n}",
        "questionWithBrackets": "Were [Let's Move!] , [Organizing for Action] , and [Higher Ground Productions] founded by [Michelle Obama] and founded by a female employee of [Princeton University]"
    },
    {
        "questionIdx": 128752,
        "questionPatternModEntities": "Were M1 and M5 directed by M4 , executive produced by M0 's employee , and executive produced by M2 and M3",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] , and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 ?x0 .\nM1 P1 M2 .\nM1 P1 M3 .\nM1 P2 M4 .\nM5 P1 ?x0 .\nM5 P1 M2 .\nM5 P1 M3 .\nM5 P2 M4\n}",
        "recursionDepth": 46,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P108 wd:Q9531 .\nwd:Q3328518 wdt:P57 wd:Q3181726 .\nwd:Q3328518 wdt:P1431 ?x0 .\nwd:Q3328518 wdt:P1431 wd:Q361981 .\nwd:Q3328518 wdt:P1431 wd:Q1800397 .\nwd:Q2087589 wdt:P57 wd:Q3181726 .\nwd:Q2087589 wdt:P1431 ?x0 .\nwd:Q2087589 wdt:P1431 wd:Q361981 .\nwd:Q2087589 wdt:P1431 wd:Q1800397\n}",
        "questionWithBrackets": "Were [Music of the Spheres] and [Voyage of the Damned] directed by [John Henderson] , executive produced by [BBC] 's employee , and executive produced by [Russell T Davies] and [Julie Gardner]"
    },
    {
        "questionIdx": 128761,
        "questionPatternModEntities": "Were M2 and M6 written by M0 's male employee , written by M3 and M4 , and directed by M5",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] , [VP_SIMPLE] by [entity] and [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nM2 P2 ?x0 .\nM2 P2 M3 .\nM2 P2 M4 .\nM2 P3 M5 .\nM6 P2 ?x0 .\nM6 P2 M3 .\nM6 P2 M4 .\nM6 P3 M5\n}",
        "recursionDepth": 49,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P108 wd:Q194223 .\n?x0 wdt:P21 wd:Q6581097 .\nwd:Q2341802 wdt:P57 wd:Q2073110 .\nwd:Q2341802 wdt:P58 ?x0 .\nwd:Q2341802 wdt:P58 wd:Q298035 .\nwd:Q2341802 wdt:P58 wd:Q909 .\nwd:Q3282940 wdt:P57 wd:Q2073110 .\nwd:Q3282940 wdt:P58 ?x0 .\nwd:Q3282940 wdt:P58 wd:Q298035 .\nwd:Q3282940 wdt:P58 wd:Q909\n}",
        "questionWithBrackets": "Were [Invasi\u00f3n] and [The Others] written by [University of Buenos Aires] 's male employee , written by [Adolfo Bioy Casares] and [Jorge Luis Borges] , and directed by [Hugo Santiago]"
    },
    {
        "questionIdx": 128785,
        "questionPatternModEntities": "Were M0 , M2 , and M3 produced by , written by , edited by , executive produced by , and directed by M1",
        "questionTemplate": "Were [entity] , [entity] , and [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1 .\nM0 P2 M1 .\nM0 P3 M1 .\nM0 P4 M1 .\nM2 P0 M1 .\nM2 P1 M1 .\nM2 P2 M1 .\nM2 P3 M1 .\nM2 P4 M1 .\nM3 P0 M1 .\nM3 P1 M1 .\nM3 P2 M1 .\nM3 P3 M1 .\nM3 P4 M1\n}",
        "recursionDepth": 46,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q5437360 wdt:P57 wd:Q187261 .\nwd:Q5437360 wdt:P1040 wd:Q187261 .\nwd:Q5437360 wdt:P1431 wd:Q187261 .\nwd:Q5437360 wdt:P162|wdt:P272 wd:Q187261 .\nwd:Q5437360 wdt:P58 wd:Q187261 .\nwd:Q6084069 wdt:P57 wd:Q187261 .\nwd:Q6084069 wdt:P1040 wd:Q187261 .\nwd:Q6084069 wdt:P1431 wd:Q187261 .\nwd:Q6084069 wdt:P162|wdt:P272 wd:Q187261 .\nwd:Q6084069 wdt:P58 wd:Q187261 .\nwd:Q12813010 wdt:P57 wd:Q187261 .\nwd:Q12813010 wdt:P1040 wd:Q187261 .\nwd:Q12813010 wdt:P1431 wd:Q187261 .\nwd:Q12813010 wdt:P162|wdt:P272 wd:Q187261 .\nwd:Q12813010 wdt:P58 wd:Q187261\n}",
        "questionWithBrackets": "Were [Fate] , [The Confession] , and [The Waiting Room] produced by , written by , edited by , executive produced by , and directed by [Zeki Demirkubuz]"
    },
    {
        "questionIdx": 128786,
        "questionPatternModEntities": "Were M0 and M2 produced and written by M1",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1 .\nM2 P0 M1 .\nM2 P1 M1\n}",
        "recursionDepth": 23,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q166739 wdt:P162|wdt:P272 wd:Q882 .\nwd:Q166739 wdt:P58 wd:Q882 .\nwd:Q109116 wdt:P162|wdt:P272 wd:Q882 .\nwd:Q109116 wdt:P58 wd:Q882\n}",
        "questionWithBrackets": "Were [The Great Dictator] and [The Floorwalker] produced and written by [Charlie Chaplin]"
    },
    {
        "questionIdx": 128806,
        "questionPatternModEntities": "Were M0 and M3 written and produced by M1 and M2",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P1 M1 .\nM0 P1 M2 .\nM3 P0 M1 .\nM3 P0 M2 .\nM3 P1 M1 .\nM3 P1 M2\n}",
        "recursionDepth": 27,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q127367 wdt:P162|wdt:P272 wd:Q4465 .\nwd:Q127367 wdt:P162|wdt:P272 wd:Q116861 .\nwd:Q127367 wdt:P58 wd:Q4465 .\nwd:Q127367 wdt:P58 wd:Q116861 .\nwd:Q719915 wdt:P162|wdt:P272 wd:Q4465 .\nwd:Q719915 wdt:P162|wdt:P272 wd:Q116861 .\nwd:Q719915 wdt:P58 wd:Q4465 .\nwd:Q719915 wdt:P58 wd:Q116861\n}",
        "questionWithBrackets": "Were [The Hobbit: The Desolation of Smaug] and [The Lord of the Rings: The Fellowship of the Ring] written and produced by [Fran Walsh] and [Peter Jackson]"
    },
    {
        "questionIdx": 128819,
        "questionPatternModEntities": "Were M0 , M5 , M6 , and M7 founded by M1 and founded by M2 , M3 , and M4",
        "questionTemplate": "Were [entity] , [entity] , [entity] , and [entity] [VP_SIMPLE] by [entity] and [VP_SIMPLE] by [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P0 M3 .\nM0 P0 M4 .\nM5 P0 M1 .\nM5 P0 M2 .\nM5 P0 M3 .\nM5 P0 M4 .\nM6 P0 M1 .\nM6 P0 M2 .\nM6 P0 M3 .\nM6 P0 M4 .\nM7 P0 M1 .\nM7 P0 M2 .\nM7 P0 M3 .\nM7 P0 M4\n}",
        "recursionDepth": 40,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q1072120 wdt:P112 wd:Q17 .\nwd:Q1072120 wdt:P112 wd:Q183 .\nwd:Q1072120 wdt:P112 wd:Q145 .\nwd:Q1072120 wdt:P112 wd:Q142 .\nwd:Q673158 wdt:P112 wd:Q17 .\nwd:Q673158 wdt:P112 wd:Q183 .\nwd:Q673158 wdt:P112 wd:Q145 .\nwd:Q673158 wdt:P112 wd:Q142 .\nwd:Q1480793 wdt:P112 wd:Q17 .\nwd:Q1480793 wdt:P112 wd:Q183 .\nwd:Q1480793 wdt:P112 wd:Q145 .\nwd:Q1480793 wdt:P112 wd:Q142 .\nwd:Q782942 wdt:P112 wd:Q17 .\nwd:Q782942 wdt:P112 wd:Q183 .\nwd:Q782942 wdt:P112 wd:Q145 .\nwd:Q782942 wdt:P112 wd:Q142\n}",
        "questionWithBrackets": "Were [Wassenaar Arrangement] , [Missile Technology Control Regime] , [Australia Group] , and [Nuclear Suppliers Group] founded by [Germany] and founded by [Japan] , m.0f8l9c , and m.07ssc"
    },
    {
        "questionIdx": 128832,
        "questionPatternModEntities": "Were M0 and M7 directed by M6 , written by M1 , and written by M2 , M3 , M4 , and M5",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity] , [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P0 M3 .\nM0 P0 M4 .\nM0 P0 M5 .\nM0 P1 M6 .\nM7 P0 M1 .\nM7 P0 M2 .\nM7 P0 M3 .\nM7 P0 M4 .\nM7 P0 M5 .\nM7 P1 M6\n}",
        "recursionDepth": 46,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q2661437 wdt:P57 wd:Q1040240 .\nwd:Q2661437 wdt:P58 wd:Q25120 .\nwd:Q2661437 wdt:P58 wd:Q179982 .\nwd:Q2661437 wdt:P58 wd:Q3938849 .\nwd:Q2661437 wdt:P58 wd:Q392644 .\nwd:Q2661437 wdt:P58 wd:Q469164 .\nwd:Q2261883 wdt:P57 wd:Q1040240 .\nwd:Q2261883 wdt:P58 wd:Q25120 .\nwd:Q2261883 wdt:P58 wd:Q179982 .\nwd:Q2261883 wdt:P58 wd:Q3938849 .\nwd:Q2261883 wdt:P58 wd:Q392644 .\nwd:Q2261883 wdt:P58 wd:Q469164\n}",
        "questionWithBrackets": "Were [Caprice Italian Style] and [The Witches] directed by [Franco Rossi] , written by [Pier Paolo Pasolini] , and written by [Agenore Incrocci] , [Furio Scarpelli] , [Roberto Gianviti] , and [Cesare Zavattini]"
    },
    {
        "questionIdx": 128857,
        "questionPatternModEntities": "Were M0 , M5 , and M6 executive produced by M1 , M2 , and M3 and directed by M4",
        "questionTemplate": "Were [entity] , [entity] , and [entity] [VP_SIMPLE] by [entity] , [entity] , and [entity] and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P0 M3 .\nM0 P1 M4 .\nM5 P0 M1 .\nM5 P0 M2 .\nM5 P0 M3 .\nM5 P1 M4 .\nM6 P0 M1 .\nM6 P0 M2 .\nM6 P0 M3 .\nM6 P1 M4\n}",
        "recursionDepth": 38,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q309366 wdt:P57 wd:Q470251 .\nwd:Q309366 wdt:P1431 wd:Q24809566 .\nwd:Q309366 wdt:P1431 wd:Q24809564 .\nwd:Q309366 wdt:P1431 wd:Q24817449 .\nwd:Q477865 wdt:P57 wd:Q470251 .\nwd:Q477865 wdt:P1431 wd:Q24809566 .\nwd:Q477865 wdt:P1431 wd:Q24809564 .\nwd:Q477865 wdt:P1431 wd:Q24817449 .\nwd:Q388360 wdt:P57 wd:Q470251 .\nwd:Q388360 wdt:P1431 wd:Q24809566 .\nwd:Q388360 wdt:P1431 wd:Q24809564 .\nwd:Q388360 wdt:P1431 wd:Q24817449\n}",
        "questionWithBrackets": "Were [National Treasure: Book of Secrets] , [The Sorcerer's Apprentice] , and [National Treasure] executive produced by [Mike Stenson] , [Barry H. Waldman] , and [Chad Oman] and directed by [Jon Turteltaub]"
    },
    {
        "questionIdx": 128874,
        "questionPatternModEntities": "Were M0 , M2 , and M3 executive produced by , written by , produced by , directed by , and edited by M1",
        "questionTemplate": "Were [entity] , [entity] , and [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1 .\nM0 P2 M1 .\nM0 P3 M1 .\nM0 P4 M1 .\nM2 P0 M1 .\nM2 P1 M1 .\nM2 P2 M1 .\nM2 P3 M1 .\nM2 P4 M1 .\nM3 P0 M1 .\nM3 P1 M1 .\nM3 P2 M1 .\nM3 P3 M1 .\nM3 P4 M1\n}",
        "recursionDepth": 46,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q6084069 wdt:P57 wd:Q187261 .\nwd:Q6084069 wdt:P1040 wd:Q187261 .\nwd:Q6084069 wdt:P1431 wd:Q187261 .\nwd:Q6084069 wdt:P162|wdt:P272 wd:Q187261 .\nwd:Q6084069 wdt:P58 wd:Q187261 .\nwd:Q12813010 wdt:P57 wd:Q187261 .\nwd:Q12813010 wdt:P1040 wd:Q187261 .\nwd:Q12813010 wdt:P1431 wd:Q187261 .\nwd:Q12813010 wdt:P162|wdt:P272 wd:Q187261 .\nwd:Q12813010 wdt:P58 wd:Q187261 .\nwd:Q5437360 wdt:P57 wd:Q187261 .\nwd:Q5437360 wdt:P1040 wd:Q187261 .\nwd:Q5437360 wdt:P1431 wd:Q187261 .\nwd:Q5437360 wdt:P162|wdt:P272 wd:Q187261 .\nwd:Q5437360 wdt:P58 wd:Q187261\n}",
        "questionWithBrackets": "Were [The Waiting Room] , [Fate] , and [The Confession] executive produced by , written by , produced by , directed by , and edited by [Zeki Demirkubuz]"
    },
    {
        "questionIdx": 128878,
        "questionPatternModEntities": "Were M2 , M3 , M4 , and M5 produced by , written by , and edited by a Japanese spouse of M1",
        "questionTemplate": "Were [entity] , [entity] , [entity] , and [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M1 ) .\nM2 P2 ?x0 .\nM2 P3 ?x0 .\nM2 P4 ?x0 .\nM3 P2 ?x0 .\nM3 P3 ?x0 .\nM3 P4 ?x0 .\nM4 P2 ?x0 .\nM4 P3 ?x0 .\nM4 P4 ?x0 .\nM5 P2 ?x0 .\nM5 P3 ?x0 .\nM5 P4 ?x0\n}",
        "recursionDepth": 47,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P27 wd:Q17 .\n?x0 wdt:P26 wd:Q3032150 .\nFILTER ( ?x0 != wd:Q3032150 ) .\nwd:Q1077915 wdt:P1040 ?x0 .\nwd:Q1077915 wdt:P162|wdt:P272 ?x0 .\nwd:Q1077915 wdt:P58 ?x0 .\nwd:Q1475995 wdt:P1040 ?x0 .\nwd:Q1475995 wdt:P162|wdt:P272 ?x0 .\nwd:Q1475995 wdt:P58 ?x0 .\nwd:Q39946 wdt:P1040 ?x0 .\nwd:Q39946 wdt:P162|wdt:P272 ?x0 .\nwd:Q39946 wdt:P58 ?x0 .\nwd:Q854990 wdt:P1040 ?x0 .\nwd:Q854990 wdt:P162|wdt:P272 ?x0 .\nwd:Q854990 wdt:P58 ?x0\n}",
        "questionWithBrackets": "Were [The Hidden Fortress] , [Sanshiro Sugata] , [Kagemusha] , and [The Lower Depths] produced by , written by , and edited by a Japanese spouse of [Y\u014dko Yaguchi]"
    },
    {
        "questionIdx": 128909,
        "questionPatternModEntities": "Were M1 , M2 , M3 , M4 , M5 , and M6 edited by M0 's parent",
        "questionTemplate": "Were [entity] , [entity] , [entity] , [entity] , [entity] , and [entity] [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 ?x0 .\nM2 P1 ?x0 .\nM3 P1 ?x0 .\nM4 P1 ?x0 .\nM5 P1 ?x0 .\nM6 P1 ?x0\n}",
        "recursionDepth": 32,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q230636 .\nwd:Q1191049 wdt:P1040 ?x0 .\nwd:Q199039 wdt:P1040 ?x0 .\nwd:Q214723 wdt:P1040 ?x0 .\nwd:Q45602 wdt:P1040 ?x0 .\nwd:Q166739 wdt:P1040 ?x0 .\nwd:Q641474 wdt:P1040 ?x0\n}",
        "questionWithBrackets": "Were [The Floorwalker] , [Modern Times] , [The Tramp] , [Pay Day] , [The Gold Rush] , and [A Jitney Elopement] edited by [Geraldine Chaplin] 's parent"
    },
    {
        "questionIdx": 128919,
        "questionPatternModEntities": "Were M0 , M5 , M6 , and M7 founded by M1 , M2 , and M3 and founded by M4",
        "questionTemplate": "Were [entity] , [entity] , [entity] , and [entity] [VP_SIMPLE] by [entity] , [entity] , and [entity] and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P0 M3 .\nM0 P0 M4 .\nM5 P0 M1 .\nM5 P0 M2 .\nM5 P0 M3 .\nM5 P0 M4 .\nM6 P0 M1 .\nM6 P0 M2 .\nM6 P0 M3 .\nM6 P0 M4 .\nM7 P0 M1 .\nM7 P0 M2 .\nM7 P0 M3 .\nM7 P0 M4\n}",
        "recursionDepth": 40,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q1480793 wdt:P112 wd:Q183 .\nwd:Q1480793 wdt:P112 wd:Q145 .\nwd:Q1480793 wdt:P112 wd:Q30 .\nwd:Q1480793 wdt:P112 wd:Q142 .\nwd:Q673158 wdt:P112 wd:Q183 .\nwd:Q673158 wdt:P112 wd:Q145 .\nwd:Q673158 wdt:P112 wd:Q30 .\nwd:Q673158 wdt:P112 wd:Q142 .\nwd:Q782942 wdt:P112 wd:Q183 .\nwd:Q782942 wdt:P112 wd:Q145 .\nwd:Q782942 wdt:P112 wd:Q30 .\nwd:Q782942 wdt:P112 wd:Q142 .\nwd:Q1072120 wdt:P112 wd:Q183 .\nwd:Q1072120 wdt:P112 wd:Q145 .\nwd:Q1072120 wdt:P112 wd:Q30 .\nwd:Q1072120 wdt:P112 wd:Q142\n}",
        "questionWithBrackets": "Were [Nuclear Suppliers Group] , [Missile Technology Control Regime] , [Wassenaar Arrangement] , and [Australia Group] founded by m.07ssc , m.0f8l9c , and [Germany] and founded by m.09c7w0"
    },
    {
        "questionIdx": 128928,
        "questionPatternModEntities": "Were M0 and M4 founded by M1 , M2 , and M3",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P0 M3 .\nM4 P0 M1 .\nM4 P0 M2 .\nM4 P0 M3\n}",
        "recursionDepth": 23,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q1065 wdt:P112 wd:Q43 .\nwd:Q1065 wdt:P112 wd:Q408 .\nwd:Q1065 wdt:P112 wd:Q16 .\nwd:Q673158 wdt:P112 wd:Q43 .\nwd:Q673158 wdt:P112 wd:Q408 .\nwd:Q673158 wdt:P112 wd:Q16\n}",
        "questionWithBrackets": "Were [Wassenaar Arrangement] and [United Nations] founded by [Turkey] , [Australia] , and [Canada]"
    },
    {
        "questionIdx": 128930,
        "questionPatternModEntities": "Were M0 and M5 founded by M1 , founded by M2 , founded by M3 , and founded by M4",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P0 M3 .\nM0 P0 M4 .\nM5 P0 M1 .\nM5 P0 M2 .\nM5 P0 M3 .\nM5 P0 M4\n}",
        "recursionDepth": 45,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q1065 wdt:P112 wd:Q16 .\nwd:Q1065 wdt:P112 wd:Q43 .\nwd:Q1065 wdt:P112 wd:Q30 .\nwd:Q1065 wdt:P112 wd:Q20 .\nwd:Q673158 wdt:P112 wd:Q16 .\nwd:Q673158 wdt:P112 wd:Q43 .\nwd:Q673158 wdt:P112 wd:Q30 .\nwd:Q673158 wdt:P112 wd:Q20\n}",
        "questionWithBrackets": "Were [Wassenaar Arrangement] and [United Nations] founded by m.09c7w0 , founded by [Canada] , founded by [Norway] , and founded by [Turkey]"
    },
    {
        "questionIdx": 128933,
        "questionPatternModEntities": "Were M0 and M5 founded by M1 , M2 , M3 , and M4",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by [entity] , [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P0 M3 .\nM0 P0 M4 .\nM5 P0 M1 .\nM5 P0 M2 .\nM5 P0 M3 .\nM5 P0 M4\n}",
        "recursionDepth": 26,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q1480793 wdt:P112 wd:Q159 .\nwd:Q1480793 wdt:P112 wd:Q30 .\nwd:Q1480793 wdt:P112 wd:Q16 .\nwd:Q1480793 wdt:P112 wd:Q142 .\nwd:Q673158 wdt:P112 wd:Q159 .\nwd:Q673158 wdt:P112 wd:Q30 .\nwd:Q673158 wdt:P112 wd:Q16 .\nwd:Q673158 wdt:P112 wd:Q142\n}",
        "questionWithBrackets": "Were [Nuclear Suppliers Group] and [Wassenaar Arrangement] founded by [United States of America] , m.0f8l9c , [Russia] , and m.0d060g"
    },
    {
        "questionIdx": 128937,
        "questionPatternModEntities": "Were M0 , M4 , M5 , and M6 founded by M1 , M2 , and M3",
        "questionTemplate": "Were [entity] , [entity] , [entity] , and [entity] [VP_SIMPLE] by [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P0 M3 .\nM4 P0 M1 .\nM4 P0 M2 .\nM4 P0 M3 .\nM5 P0 M1 .\nM5 P0 M2 .\nM5 P0 M3 .\nM6 P0 M1 .\nM6 P0 M2 .\nM6 P0 M3\n}",
        "recursionDepth": 29,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q458 wdt:P112 wd:Q31 .\nwd:Q458 wdt:P112 wd:Q142 .\nwd:Q458 wdt:P112 wd:Q142 .\nwd:Q1065 wdt:P112 wd:Q31 .\nwd:Q1065 wdt:P112 wd:Q142 .\nwd:Q1065 wdt:P112 wd:Q142 .\nwd:Q141720 wdt:P112 wd:Q31 .\nwd:Q141720 wdt:P112 wd:Q142 .\nwd:Q141720 wdt:P112 wd:Q142 .\nwd:Q673158 wdt:P112 wd:Q31 .\nwd:Q673158 wdt:P112 wd:Q142 .\nwd:Q673158 wdt:P112 wd:Q142\n}",
        "questionWithBrackets": "Were [European Air Transport Command] , [European Union] , [United Nations] , and [Wassenaar Arrangement] founded by [Belgium] , [France] , and m.0f8l9c"
    },
    {
        "questionIdx": 128972,
        "questionPatternModEntities": "Were M1 , M2 , and M3 founded by M0 's child",
        "questionTemplate": "Were [entity] , [entity] , and [entity] [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 ?x0 .\nM2 P1 ?x0 .\nM3 P1 ?x0\n}",
        "recursionDepth": 23,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P749 wd:Q20800404 .\nwd:Q39072787 wdt:P112 ?x0 .\nwd:Q356 wdt:P112 ?x0 .\nwd:Q135622 wdt:P112 ?x0\n}",
        "questionWithBrackets": "Were [Flutter] , [No label defined] , and [Google+] founded by [Alphabet Inc.] 's child"
    },
    {
        "questionIdx": 128989,
        "questionPatternModEntities": "Were M2 and M4 written by M3 and written by a male spouse of M1",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by [entity] and [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M1 ) .\nM2 P2 ?x0 .\nM2 P2 M3 .\nM4 P2 ?x0 .\nM4 P2 M3\n}",
        "recursionDepth": 38,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P21 wd:Q6581097 .\n?x0 wdt:P26 wd:Q32947601 .\nFILTER ( ?x0 != wd:Q32947601 ) .\nwd:Q571032 wdt:P58 ?x0 .\nwd:Q571032 wdt:P58 wd:Q3772 .\nwd:Q153723 wdt:P58 ?x0 .\nwd:Q153723 wdt:P58 wd:Q3772\n}",
        "questionWithBrackets": "Were [Django Unchained] and [Inglourious Basterds] written by [Quentin Tarantino] and written by a male spouse of [Daniella Pick]"
    },
    {
        "questionIdx": 129031,
        "questionPatternModEntities": "Were M1 , M2 , M3 , M4 , and M5 directed by M0 's parent",
        "questionTemplate": "Were [entity] , [entity] , [entity] , [entity] , and [entity] [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 ?x0 .\nM2 P1 ?x0 .\nM3 P1 ?x0 .\nM4 P1 ?x0 .\nM5 P1 ?x0\n}",
        "recursionDepth": 29,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q104373357 .\nwd:Q83365219 wdt:P57 ?x0 .\nwd:Q5988150 wdt:P57 ?x0 .\nwd:Q2085 wdt:P57 ?x0 .\nwd:Q11618 wdt:P57 ?x0 .\nwd:Q272608 wdt:P57 ?x0\n}",
        "questionWithBrackets": "Were [Mulholland Drive] , [Idem Paris] , [Eraserhead] , [Twin Peaks] , and [What Did Jack Do?] directed by [Lula Boginia Lynch] 's parent"
    },
    {
        "questionIdx": 129034,
        "questionPatternModEntities": "Were M1 , M2 , M3 , M4 , M5 , and M6 directed by M0 's spouse",
        "questionTemplate": "Were [entity] , [entity] , [entity] , [entity] , [entity] , and [entity] [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nM1 P1 ?x0 .\nM2 P1 ?x0 .\nM3 P1 ?x0 .\nM4 P1 ?x0 .\nM5 P1 ?x0 .\nM6 P1 ?x0\n}",
        "recursionDepth": 32,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P26 wd:Q104373220 .\nFILTER ( ?x0 != wd:Q104373220 ) .\nwd:Q48631448 wdt:P57 ?x0 .\nwd:Q751382 wdt:P57 ?x0 .\nwd:Q11618 wdt:P57 ?x0 .\nwd:Q2085 wdt:P57 ?x0 .\nwd:Q114819 wdt:P57 ?x0 .\nwd:Q660950 wdt:P57 ?x0\n}",
        "questionWithBrackets": "Were [Part 18] , [Twin Peaks] , [Eraserhead] , [Wild at Heart] , [Dune] , and [Blue Velvet] directed by [Mary Fisk] 's spouse"
    },
    {
        "questionIdx": 129038,
        "questionPatternModEntities": "Were M1 and M2 executive produced by a parent of M0",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 ?x0 .\nM2 P1 ?x0\n}",
        "recursionDepth": 23,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q21066699 .\nwd:Q128518 wdt:P1431 ?x0 .\nwd:Q1195568 wdt:P1431 ?x0\n}",
        "questionWithBrackets": "Were [Gladiator] and [Someone to Watch Over Me] executive produced by a parent of [Luke Scott]"
    },
    {
        "questionIdx": 129086,
        "questionPatternModEntities": "Were M0 , M2 , and M3 French",
        "questionTemplate": "Were [entity] , [entity] , and [entity] [ADJECTIVE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM2 P0 M1 .\nM3 P0 M1\n}",
        "recursionDepth": 16,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q260 wdt:P27 wd:Q142 .\nwd:Q157 wdt:P27 wd:Q142 .\nwd:Q296 wdt:P27 wd:Q142\n}",
        "questionWithBrackets": "Were [Claude Monet] , [Jean-Fran\u00e7ois Champollion] , and [Fran\u00e7ois Hollande] French"
    },
    {
        "questionIdx": 129100,
        "questionPatternModEntities": "Were M0 and M2 edited , directed , and produced by M1",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1 .\nM0 P2 M1 .\nM2 P0 M1 .\nM2 P1 M1 .\nM2 P2 M1\n}",
        "recursionDepth": 28,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q854990 wdt:P57 wd:Q8006 .\nwd:Q854990 wdt:P1040 wd:Q8006 .\nwd:Q854990 wdt:P162|wdt:P272 wd:Q8006 .\nwd:Q1077915 wdt:P57 wd:Q8006 .\nwd:Q1077915 wdt:P1040 wd:Q8006 .\nwd:Q1077915 wdt:P162|wdt:P272 wd:Q8006\n}",
        "questionWithBrackets": "Were [Kagemusha] and [Sanshiro Sugata] edited , directed , and produced by [Akira Kurosawa]"
    },
    {
        "questionIdx": 129102,
        "questionPatternModEntities": "Were M2 and M3 founded by a male spouse of M1",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M1 ) .\nM2 P2 ?x0 .\nM3 P2 ?x0\n}",
        "recursionDepth": 27,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P21 wd:Q6581097 .\n?x0 wdt:P26 wd:Q13564310 .\nFILTER ( ?x0 != wd:Q13564310 ) .\nwd:Q20006792 wdt:P112 ?x0 .\nwd:Q367 wdt:P112 ?x0\n}",
        "questionWithBrackets": "Were [Wikibooks] and [Jimmy Wales Foundation] founded by a male spouse of [Kate Garvey]"
    },
    {
        "questionIdx": 129105,
        "questionPatternModEntities": "Were M1 and M2 founded by M0 's spouse",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nM1 P1 ?x0 .\nM2 P1 ?x0\n}",
        "recursionDepth": 20,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P26 wd:Q191789 .\nFILTER ( ?x0 != wd:Q191789 ) .\nwd:Q54122 wdt:P112 ?x0 .\nwd:Q1342 wdt:P112 ?x0\n}",
        "questionWithBrackets": "Were [Pittsburgh] and [Continental Army] founded by [Martha Washington] 's spouse"
    },
    {
        "questionIdx": 129107,
        "questionPatternModEntities": "Were M1 and M2 founded by M0 's parent",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 ?x0 .\nM2 P1 ?x0\n}",
        "recursionDepth": 20,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q14623683 .\nwd:Q285194 wdt:P112 ?x0 .\nwd:Q3520623 wdt:P112 ?x0\n}",
        "questionWithBrackets": "Were [The Digital Village] and [h2g2] founded by [Polly Adams] 's parent"
    },
    {
        "questionIdx": 129115,
        "questionPatternModEntities": "Were M2 , M3 , M4 , M5 , and M6 founded by M1 's British spouse",
        "questionTemplate": "Were [entity] , [entity] , [entity] , [entity] , and [entity] [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M1 ) .\nM2 P2 ?x0 .\nM3 P2 ?x0 .\nM4 P2 ?x0 .\nM5 P2 ?x0 .\nM6 P2 ?x0\n}",
        "recursionDepth": 34,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P27 wd:Q145 .\n?x0 wdt:P26 wd:Q13564310 .\nFILTER ( ?x0 != wd:Q13564310 ) .\nwd:Q17458 wdt:P112 ?x0 .\nwd:Q151 wdt:P112 ?x0 .\nwd:Q964 wdt:P112 ?x0 .\nwd:Q369 wdt:P112 ?x0 .\nwd:Q367 wdt:P112 ?x0\n}",
        "questionWithBrackets": "Were [Wiktionary] , [Wikiquote] , [Wikibooks] , [Wikinews] , and [Nupedia] founded by [Kate Garvey] 's British spouse"
    },
    {
        "questionIdx": 129132,
        "questionPatternModEntities": "Were M3 and M4 written by M0 's female American employee",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P2 M2 .\nM3 P3 ?x0 .\nM4 P3 ?x0\n}",
        "recursionDepth": 30,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P108 wd:Q847743 .\n?x0 wdt:P21 wd:Q6581072 .\n?x0 wdt:P27 wd:Q30 .\nwd:Q946478 wdt:P58 ?x0 .\nwd:Q1235550 wdt:P58 ?x0\n}",
        "questionWithBrackets": "Were [Filth and Wisdom] and [W.E.] written by [Dunkin'] 's female American employee"
    },
    {
        "questionIdx": 129176,
        "questionPatternModEntities": "Were M3 and M4 produced by a Italian employee of M0 and M1",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P1 M2 .\nM3 P2 ?x0 .\nM4 P2 ?x0\n}",
        "recursionDepth": 31,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P108 wd:Q1641504 .\n?x0 wdt:P108 wd:Q13371 .\n?x0 wdt:P27 wd:Q38 .\nwd:Q4010144 wdt:P162|wdt:P272 ?x0 .\nwd:Q3778288 wdt:P162|wdt:P272 ?x0\n}",
        "questionWithBrackets": "Were [Verofalso] and [No label defined] produced by a Italian employee of [University of Palermo] and [Harvard University]"
    },
    {
        "questionIdx": 129205,
        "questionPatternModEntities": "Were M2 and M4 founded by M3 and founded by M0 's German sibling",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by [entity] and [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M0 ) .\nM2 P2 ?x0 .\nM2 P2 M3 .\nM4 P2 ?x0 .\nM4 P2 M3\n}",
        "recursionDepth": 36,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P27 wd:Q183 .\n?x0 wdt:P3373 wd:Q77067 .\nFILTER ( ?x0 != wd:Q77067 ) .\nwd:Q631056 wdt:P112 ?x0 .\nwd:Q631056 wdt:P112 wd:Q44530 .\nwd:Q1259702 wdt:P112 ?x0 .\nwd:Q1259702 wdt:P112 wd:Q44530\n}",
        "questionWithBrackets": "Were [No label defined] and [Bavarian National Museum] founded by [Maximilian II of Bavaria] and founded by [Otto of Greece] 's German sibling"
    },
    {
        "questionIdx": 129206,
        "questionPatternModEntities": "Were M2 and M4 founded by a German spouse of M1 and founded by M3",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M1 ) .\nM2 P2 ?x0 .\nM2 P2 M3 .\nM4 P2 ?x0 .\nM4 P2 M3\n}",
        "recursionDepth": 38,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P27 wd:Q183 .\n?x0 wdt:P26 wd:Q7944991 .\nFILTER ( ?x0 != wd:Q7944991 ) .\nwd:Q15615108 wdt:P112 ?x0 .\nwd:Q15615108 wdt:P112 wd:Q12906 .\nwd:Q129516 wdt:P112 ?x0 .\nwd:Q129516 wdt:P112 wd:Q12906\n}",
        "questionWithBrackets": "Were [International Academy of Sciences San Marino] and [European Club] founded by a German spouse of [V\u011bra Barandovsk\u00e1-Frank] and founded by [Helmar Frank]"
    },
    {
        "questionIdx": 129222,
        "questionPatternModEntities": "Were M0 , M3 , M4 , M5 , and M6 founded by M1 and M2",
        "questionTemplate": "Were [entity] , [entity] , [entity] , [entity] , and [entity] [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM3 P0 M1 .\nM3 P0 M2 .\nM4 P0 M1 .\nM4 P0 M2 .\nM5 P0 M1 .\nM5 P0 M2 .\nM6 P0 M1 .\nM6 P0 M2\n}",
        "recursionDepth": 29,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q1065 wdt:P112 wd:Q16 .\nwd:Q1065 wdt:P112 wd:Q30 .\nwd:Q1072120 wdt:P112 wd:Q16 .\nwd:Q1072120 wdt:P112 wd:Q30 .\nwd:Q1480793 wdt:P112 wd:Q16 .\nwd:Q1480793 wdt:P112 wd:Q30 .\nwd:Q146905 wdt:P112 wd:Q16 .\nwd:Q146905 wdt:P112 wd:Q30 .\nwd:Q605177 wdt:P112 wd:Q16 .\nwd:Q605177 wdt:P112 wd:Q30\n}",
        "questionWithBrackets": "Were [Nuclear Suppliers Group] , [International Cospas-Sarsat Programme] , [Missile Technology Control Regime] , [United Nations] , and [Zangger Committee] founded by [United States of America] and [Canada]"
    },
    {
        "questionIdx": 129259,
        "questionPatternModEntities": "Were M2 and M3 founded by a spouse of M1 and founded by M0 's sibling",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity] and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x1 P1 M1 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x1 != M1 ) .\nM2 P2 ?x0 .\nM2 P2 ?x1 .\nM3 P2 ?x0 .\nM3 P2 ?x1\n}",
        "recursionDepth": 37,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P3373 wd:Q6219733 .\n?x1 wdt:P26 wd:Q191789 .\nFILTER ( ?x0 != wd:Q6219733 ) .\nFILTER ( ?x1 != wd:Q191789 ) .\nwd:Q54122 wdt:P112 ?x0 .\nwd:Q54122 wdt:P112 ?x1 .\nwd:Q1342 wdt:P112 ?x0 .\nwd:Q1342 wdt:P112 ?x1\n}",
        "questionWithBrackets": "Were [Continental Army] and [Pittsburgh] founded by a spouse of [Martha Washington] and founded by [John Augustine Washington] 's sibling"
    },
    {
        "questionIdx": 129274,
        "questionPatternModEntities": "Were M2 , M4 , M5 , and M6 founded by M3 and founded by M1 's American spouse",
        "questionTemplate": "Were [entity] , [entity] , [entity] , and [entity] [VP_SIMPLE] by [entity] and [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M1 ) .\nM2 P2 ?x0 .\nM2 P2 M3 .\nM4 P2 ?x0 .\nM4 P2 M3 .\nM5 P2 ?x0 .\nM5 P2 M3 .\nM6 P2 ?x0 .\nM6 P2 M3\n}",
        "recursionDepth": 42,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P27 wd:Q30 .\n?x0 wdt:P26 wd:Q13564310 .\nFILTER ( ?x0 != wd:Q13564310 ) .\nwd:Q964 wdt:P112 ?x0 .\nwd:Q964 wdt:P112 wd:Q181 .\nwd:Q52 wdt:P112 ?x0 .\nwd:Q52 wdt:P112 wd:Q181 .\nwd:Q367 wdt:P112 ?x0 .\nwd:Q367 wdt:P112 wd:Q181 .\nwd:Q369 wdt:P112 ?x0 .\nwd:Q369 wdt:P112 wd:Q181\n}",
        "questionWithBrackets": "Were [Wikinews] , [Wikiquote] , [Wikibooks] , and [Wikipedia] founded by [Jimmy Wales] and founded by [Kate Garvey] 's American spouse"
    },
    {
        "questionIdx": 129284,
        "questionPatternModEntities": "Were M0 , M3 , M4 , M5 , and M6 founded by M1 and founded by M2",
        "questionTemplate": "Were [entity] , [entity] , [entity] , [entity] , and [entity] [VP_SIMPLE] by [entity] and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM3 P0 M1 .\nM3 P0 M2 .\nM4 P0 M1 .\nM4 P0 M2 .\nM5 P0 M1 .\nM5 P0 M2 .\nM6 P0 M1 .\nM6 P0 M2\n}",
        "recursionDepth": 36,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q1065 wdt:P112 wd:Q16 .\nwd:Q1065 wdt:P112 wd:Q142 .\nwd:Q782942 wdt:P112 wd:Q16 .\nwd:Q782942 wdt:P112 wd:Q142 .\nwd:Q605177 wdt:P112 wd:Q16 .\nwd:Q605177 wdt:P112 wd:Q142 .\nwd:Q673158 wdt:P112 wd:Q16 .\nwd:Q673158 wdt:P112 wd:Q142 .\nwd:Q1072120 wdt:P112 wd:Q16 .\nwd:Q1072120 wdt:P112 wd:Q142\n}",
        "questionWithBrackets": "Were [United Nations] , [Australia Group] , [International Cospas-Sarsat Programme] , [Missile Technology Control Regime] , and [Wassenaar Arrangement] founded by [France] and founded by [Canada]"
    },
    {
        "questionIdx": 129286,
        "questionPatternModEntities": "Were M1 , M2 , M3 , M4 , and M5 founded by M0 's child 's employee",
        "questionTemplate": "Were [entity] , [entity] , [entity] , [entity] , and [entity] [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x1 P1 M0 .\nM1 P2 ?x0 .\nM2 P2 ?x0 .\nM3 P2 ?x0 .\nM4 P2 ?x0 .\nM5 P2 ?x0\n}",
        "recursionDepth": 33,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P108 ?x1 .\n?x1 wdt:P749 wd:Q2670967 .\nwd:Q5338415 wdt:P112 ?x0 .\nwd:Q5338393 wdt:P112 ?x0 .\nwd:Q606359 wdt:P112 ?x0 .\nwd:Q21022090 wdt:P112 ?x0 .\nwd:Q20894748 wdt:P112 ?x0\n}",
        "questionWithBrackets": "Were [Edison Portland Cement Company] , [Edison Studios] , [Edison Manufacturing Company] , [Edison Illuminating Company] , and [Thomas A. Edison, Inc.] founded by [Casino Group] 's child 's employee"
    },
    {
        "questionIdx": 129329,
        "questionPatternModEntities": "Were M1 and M2 founded by M0 's sibling",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nM1 P1 ?x0 .\nM2 P1 ?x0\n}",
        "recursionDepth": 20,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P3373 wd:Q75764198 .\nFILTER ( ?x0 != wd:Q75764198 ) .\nwd:Q1342 wdt:P112 ?x0 .\nwd:Q1143497 wdt:P112 ?x0\n}",
        "questionWithBrackets": "Were [Culper Ring] and [Pittsburgh] founded by [Jane Washington] 's sibling"
    },
    {
        "questionIdx": 129382,
        "questionPatternModEntities": "Were M3 and M4 founded by a employee of M0 and M1 and founded by M2 's parent",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity] and [entity] and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x1 P1 M2 .\nM3 P2 ?x0 .\nM3 P2 ?x1 .\nM4 P2 ?x0 .\nM4 P2 ?x1\n}",
        "recursionDepth": 41,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P108 wd:Q935818 .\n?x0 wdt:P108 wd:Q17459 .\n?x1 wdt:P40|wdt:P355 wd:Q106204654 .\nwd:Q367 wdt:P112 ?x0 .\nwd:Q367 wdt:P112 ?x1 .\nwd:Q565 wdt:P112 ?x0 .\nwd:Q565 wdt:P112 ?x1\n}",
        "questionWithBrackets": "Were [Wikimedia Commons] and [Wikibooks] founded by a employee of [Fandom] and [Bomis] and founded by [Wikimedia, LLC] 's parent"
    },
    {
        "questionIdx": 129414,
        "questionPatternModEntities": "Were M0 , M2 , and M3 executive produced by and directed by M1",
        "questionTemplate": "Were [entity] , [entity] , and [entity] [VP_SIMPLE] by and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1 .\nM2 P0 M1 .\nM2 P1 M1 .\nM3 P0 M1 .\nM3 P1 M1\n}",
        "recursionDepth": 28,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q128518 wdt:P57 wd:Q56005 .\nwd:Q128518 wdt:P1431 wd:Q56005 .\nwd:Q60747802 wdt:P57 wd:Q56005 .\nwd:Q60747802 wdt:P1431 wd:Q56005 .\nwd:Q207698 wdt:P57 wd:Q56005 .\nwd:Q207698 wdt:P1431 wd:Q56005\n}",
        "questionWithBrackets": "Were [Raised by Wolves] , [Kingdom of Heaven] , and [Gladiator] executive produced by and directed by [Ridley Scott]"
    },
    {
        "questionIdx": 129580,
        "questionPatternModEntities": "Were M1 , M2 , M3 , and M4 executive produced and written by M0 's spouse",
        "questionTemplate": "Were [entity] , [entity] , [entity] , and [entity] [VP_SIMPLE] and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nM1 P1 ?x0 .\nM1 P2 ?x0 .\nM2 P1 ?x0 .\nM2 P2 ?x0 .\nM3 P1 ?x0 .\nM3 P2 ?x0 .\nM4 P1 ?x0 .\nM4 P2 ?x0\n}",
        "recursionDepth": 34,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P26 wd:Q6813152 .\nFILTER ( ?x0 != wd:Q6813152 ) .\nwd:Q181803 wdt:P1431 ?x0 .\nwd:Q181803 wdt:P58 ?x0 .\nwd:Q515931 wdt:P1431 ?x0 .\nwd:Q515931 wdt:P58 ?x0 .\nwd:Q165713 wdt:P1431 ?x0 .\nwd:Q165713 wdt:P58 ?x0 .\nwd:Q17738 wdt:P1431 ?x0 .\nwd:Q17738 wdt:P58 ?x0\n}",
        "questionWithBrackets": "Were [Willow] , [Star Wars: Episode I \u2013 The Phantom Menace] , [Star Wars: Episode IV \u2013 A New Hope] , and [Star Wars: Episode VI \u2013 Return of the Jedi] executive produced and written by [Mellody Hobson] 's spouse"
    },
    {
        "questionIdx": 129869,
        "questionPatternModEntities": "Were M0 , M2 , and M3 edited by , written by , executive produced by , produced by , and directed by M1",
        "questionTemplate": "Were [entity] , [entity] , and [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1 .\nM0 P2 M1 .\nM0 P3 M1 .\nM0 P4 M1 .\nM2 P0 M1 .\nM2 P1 M1 .\nM2 P2 M1 .\nM2 P3 M1 .\nM2 P4 M1 .\nM3 P0 M1 .\nM3 P1 M1 .\nM3 P2 M1 .\nM3 P3 M1 .\nM3 P4 M1\n}",
        "recursionDepth": 46,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q483197 wdt:P57 wd:Q212990 .\nwd:Q483197 wdt:P1040 wd:Q212990 .\nwd:Q483197 wdt:P1431 wd:Q212990 .\nwd:Q483197 wdt:P162|wdt:P272 wd:Q212990 .\nwd:Q483197 wdt:P58 wd:Q212990 .\nwd:Q484679 wdt:P57 wd:Q212990 .\nwd:Q484679 wdt:P1040 wd:Q212990 .\nwd:Q484679 wdt:P1431 wd:Q212990 .\nwd:Q484679 wdt:P162|wdt:P272 wd:Q212990 .\nwd:Q484679 wdt:P58 wd:Q212990 .\nwd:Q13471372 wdt:P57 wd:Q212990 .\nwd:Q13471372 wdt:P1040 wd:Q212990 .\nwd:Q13471372 wdt:P1431 wd:Q212990 .\nwd:Q13471372 wdt:P162|wdt:P272 wd:Q212990 .\nwd:Q13471372 wdt:P58 wd:Q212990\n}",
        "questionWithBrackets": "Were [Dream] , [Piet\u00e0] , and [Moebius] edited by , written by , executive produced by , produced by , and directed by [Kim Ki-duk]"
    },
    {
        "questionIdx": 129892,
        "questionPatternModEntities": "Were M0 , M2 , and M3 edited by , executive produced by , produced by , written by , and directed by M1",
        "questionTemplate": "Were [entity] , [entity] , and [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1 .\nM0 P2 M1 .\nM0 P3 M1 .\nM0 P4 M1 .\nM2 P0 M1 .\nM2 P1 M1 .\nM2 P2 M1 .\nM2 P3 M1 .\nM2 P4 M1 .\nM3 P0 M1 .\nM3 P1 M1 .\nM3 P2 M1 .\nM3 P3 M1 .\nM3 P4 M1\n}",
        "recursionDepth": 46,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q6084069 wdt:P57 wd:Q187261 .\nwd:Q6084069 wdt:P1040 wd:Q187261 .\nwd:Q6084069 wdt:P1431 wd:Q187261 .\nwd:Q6084069 wdt:P162|wdt:P272 wd:Q187261 .\nwd:Q6084069 wdt:P58 wd:Q187261 .\nwd:Q12813010 wdt:P57 wd:Q187261 .\nwd:Q12813010 wdt:P1040 wd:Q187261 .\nwd:Q12813010 wdt:P1431 wd:Q187261 .\nwd:Q12813010 wdt:P162|wdt:P272 wd:Q187261 .\nwd:Q12813010 wdt:P58 wd:Q187261 .\nwd:Q5437360 wdt:P57 wd:Q187261 .\nwd:Q5437360 wdt:P1040 wd:Q187261 .\nwd:Q5437360 wdt:P1431 wd:Q187261 .\nwd:Q5437360 wdt:P162|wdt:P272 wd:Q187261 .\nwd:Q5437360 wdt:P58 wd:Q187261\n}",
        "questionWithBrackets": "Were [Fate] , [The Confession] , and [The Waiting Room] edited by , executive produced by , produced by , written by , and directed by [Zeki Demirkubuz]"
    },
    {
        "questionIdx": 129896,
        "questionPatternModEntities": "Were M0 , M2 , and M3 written by , executive produced by , produced by , directed by , and edited by M1",
        "questionTemplate": "Were [entity] , [entity] , and [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1 .\nM0 P2 M1 .\nM0 P3 M1 .\nM0 P4 M1 .\nM2 P0 M1 .\nM2 P1 M1 .\nM2 P2 M1 .\nM2 P3 M1 .\nM2 P4 M1 .\nM3 P0 M1 .\nM3 P1 M1 .\nM3 P2 M1 .\nM3 P3 M1 .\nM3 P4 M1\n}",
        "recursionDepth": 46,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q5437360 wdt:P57 wd:Q187261 .\nwd:Q5437360 wdt:P1040 wd:Q187261 .\nwd:Q5437360 wdt:P1431 wd:Q187261 .\nwd:Q5437360 wdt:P162|wdt:P272 wd:Q187261 .\nwd:Q5437360 wdt:P58 wd:Q187261 .\nwd:Q6084069 wdt:P57 wd:Q187261 .\nwd:Q6084069 wdt:P1040 wd:Q187261 .\nwd:Q6084069 wdt:P1431 wd:Q187261 .\nwd:Q6084069 wdt:P162|wdt:P272 wd:Q187261 .\nwd:Q6084069 wdt:P58 wd:Q187261 .\nwd:Q12813010 wdt:P57 wd:Q187261 .\nwd:Q12813010 wdt:P1040 wd:Q187261 .\nwd:Q12813010 wdt:P1431 wd:Q187261 .\nwd:Q12813010 wdt:P162|wdt:P272 wd:Q187261 .\nwd:Q12813010 wdt:P58 wd:Q187261\n}",
        "questionWithBrackets": "Were [The Confession] , [The Waiting Room] , and [Fate] written by , executive produced by , produced by , directed by , and edited by [Zeki Demirkubuz]"
    },
    {
        "questionIdx": 129900,
        "questionPatternModEntities": "Were M0 , M2 , and M3 executive produced and directed by M1",
        "questionTemplate": "Were [entity] , [entity] , and [entity] [VP_SIMPLE] and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1 .\nM2 P0 M1 .\nM2 P1 M1 .\nM3 P0 M1 .\nM3 P1 M1\n}",
        "recursionDepth": 27,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q236728 wdt:P57 wd:Q55400 .\nwd:Q236728 wdt:P1431 wd:Q55400 .\nwd:Q29982423 wdt:P57 wd:Q55400 .\nwd:Q29982423 wdt:P1431 wd:Q55400 .\nwd:Q29011 wdt:P57 wd:Q55400 .\nwd:Q29011 wdt:P1431 wd:Q55400\n}",
        "questionWithBrackets": "Were [Howl's Moving Castle] , [Ponyo on the Cliff by the Sea] , and [Boro The Caterpillar] executive produced and directed by [Hayao Miyazaki]"
    },
    {
        "questionIdx": 129933,
        "questionPatternModEntities": "Were M0 , M2 , and M3 executive produced by , edited by , written by , produced by , and directed by M1",
        "questionTemplate": "Were [entity] , [entity] , and [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1 .\nM0 P2 M1 .\nM0 P3 M1 .\nM0 P4 M1 .\nM2 P0 M1 .\nM2 P1 M1 .\nM2 P2 M1 .\nM2 P3 M1 .\nM2 P4 M1 .\nM3 P0 M1 .\nM3 P1 M1 .\nM3 P2 M1 .\nM3 P3 M1 .\nM3 P4 M1\n}",
        "recursionDepth": 46,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q483197 wdt:P57 wd:Q212990 .\nwd:Q483197 wdt:P1040 wd:Q212990 .\nwd:Q483197 wdt:P1431 wd:Q212990 .\nwd:Q483197 wdt:P162|wdt:P272 wd:Q212990 .\nwd:Q483197 wdt:P58 wd:Q212990 .\nwd:Q484679 wdt:P57 wd:Q212990 .\nwd:Q484679 wdt:P1040 wd:Q212990 .\nwd:Q484679 wdt:P1431 wd:Q212990 .\nwd:Q484679 wdt:P162|wdt:P272 wd:Q212990 .\nwd:Q484679 wdt:P58 wd:Q212990 .\nwd:Q13471372 wdt:P57 wd:Q212990 .\nwd:Q13471372 wdt:P1040 wd:Q212990 .\nwd:Q13471372 wdt:P1431 wd:Q212990 .\nwd:Q13471372 wdt:P162|wdt:P272 wd:Q212990 .\nwd:Q13471372 wdt:P58 wd:Q212990\n}",
        "questionWithBrackets": "Were [Dream] , [Moebius] , and [Piet\u00e0] executive produced by , edited by , written by , produced by , and directed by [Kim Ki-duk]"
    },
    {
        "questionIdx": 129938,
        "questionPatternModEntities": "Were M0 , M2 , and M3 written by , produced by , executive produced by , edited by , and directed by M1",
        "questionTemplate": "Were [entity] , [entity] , and [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1 .\nM0 P2 M1 .\nM0 P3 M1 .\nM0 P4 M1 .\nM2 P0 M1 .\nM2 P1 M1 .\nM2 P2 M1 .\nM2 P3 M1 .\nM2 P4 M1 .\nM3 P0 M1 .\nM3 P1 M1 .\nM3 P2 M1 .\nM3 P3 M1 .\nM3 P4 M1\n}",
        "recursionDepth": 46,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q483197 wdt:P57 wd:Q212990 .\nwd:Q483197 wdt:P1040 wd:Q212990 .\nwd:Q483197 wdt:P1431 wd:Q212990 .\nwd:Q483197 wdt:P162|wdt:P272 wd:Q212990 .\nwd:Q483197 wdt:P58 wd:Q212990 .\nwd:Q484679 wdt:P57 wd:Q212990 .\nwd:Q484679 wdt:P1040 wd:Q212990 .\nwd:Q484679 wdt:P1431 wd:Q212990 .\nwd:Q484679 wdt:P162|wdt:P272 wd:Q212990 .\nwd:Q484679 wdt:P58 wd:Q212990 .\nwd:Q13471372 wdt:P57 wd:Q212990 .\nwd:Q13471372 wdt:P1040 wd:Q212990 .\nwd:Q13471372 wdt:P1431 wd:Q212990 .\nwd:Q13471372 wdt:P162|wdt:P272 wd:Q212990 .\nwd:Q13471372 wdt:P58 wd:Q212990\n}",
        "questionWithBrackets": "Were [Dream] , [Moebius] , and [Piet\u00e0] written by , produced by , executive produced by , edited by , and directed by [Kim Ki-duk]"
    },
    {
        "questionIdx": 129980,
        "questionPatternModEntities": "Were M0 , M2 , and M3 edited by , produced by , directed by , executive produced by , and written by M1",
        "questionTemplate": "Were [entity] , [entity] , and [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1 .\nM0 P2 M1 .\nM0 P3 M1 .\nM0 P4 M1 .\nM2 P0 M1 .\nM2 P1 M1 .\nM2 P2 M1 .\nM2 P3 M1 .\nM2 P4 M1 .\nM3 P0 M1 .\nM3 P1 M1 .\nM3 P2 M1 .\nM3 P3 M1 .\nM3 P4 M1\n}",
        "recursionDepth": 46,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q483197 wdt:P57 wd:Q212990 .\nwd:Q483197 wdt:P1040 wd:Q212990 .\nwd:Q483197 wdt:P1431 wd:Q212990 .\nwd:Q483197 wdt:P162|wdt:P272 wd:Q212990 .\nwd:Q483197 wdt:P58 wd:Q212990 .\nwd:Q484679 wdt:P57 wd:Q212990 .\nwd:Q484679 wdt:P1040 wd:Q212990 .\nwd:Q484679 wdt:P1431 wd:Q212990 .\nwd:Q484679 wdt:P162|wdt:P272 wd:Q212990 .\nwd:Q484679 wdt:P58 wd:Q212990 .\nwd:Q13471372 wdt:P57 wd:Q212990 .\nwd:Q13471372 wdt:P1040 wd:Q212990 .\nwd:Q13471372 wdt:P1431 wd:Q212990 .\nwd:Q13471372 wdt:P162|wdt:P272 wd:Q212990 .\nwd:Q13471372 wdt:P58 wd:Q212990\n}",
        "questionWithBrackets": "Were [Moebius] , [Dream] , and [Piet\u00e0] edited by , produced by , directed by , executive produced by , and written by [Kim Ki-duk]"
    },
    {
        "questionIdx": 129985,
        "questionPatternModEntities": "Were M0 , M2 , and M3 produced by , directed by , executive produced by , edited by , and written by M1",
        "questionTemplate": "Were [entity] , [entity] , and [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1 .\nM0 P2 M1 .\nM0 P3 M1 .\nM0 P4 M1 .\nM2 P0 M1 .\nM2 P1 M1 .\nM2 P2 M1 .\nM2 P3 M1 .\nM2 P4 M1 .\nM3 P0 M1 .\nM3 P1 M1 .\nM3 P2 M1 .\nM3 P3 M1 .\nM3 P4 M1\n}",
        "recursionDepth": 46,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q6084069 wdt:P57 wd:Q187261 .\nwd:Q6084069 wdt:P1040 wd:Q187261 .\nwd:Q6084069 wdt:P1431 wd:Q187261 .\nwd:Q6084069 wdt:P162|wdt:P272 wd:Q187261 .\nwd:Q6084069 wdt:P58 wd:Q187261 .\nwd:Q12813010 wdt:P57 wd:Q187261 .\nwd:Q12813010 wdt:P1040 wd:Q187261 .\nwd:Q12813010 wdt:P1431 wd:Q187261 .\nwd:Q12813010 wdt:P162|wdt:P272 wd:Q187261 .\nwd:Q12813010 wdt:P58 wd:Q187261 .\nwd:Q5437360 wdt:P57 wd:Q187261 .\nwd:Q5437360 wdt:P1040 wd:Q187261 .\nwd:Q5437360 wdt:P1431 wd:Q187261 .\nwd:Q5437360 wdt:P162|wdt:P272 wd:Q187261 .\nwd:Q5437360 wdt:P58 wd:Q187261\n}",
        "questionWithBrackets": "Were [Fate] , [The Confession] , and [The Waiting Room] produced by , directed by , executive produced by , edited by , and written by [Zeki Demirkubuz]"
    },
    {
        "questionIdx": 130000,
        "questionPatternModEntities": "Were M0 , M2 , and M3 executive produced , produced , directed , written , and edited by M1",
        "questionTemplate": "Were [entity] , [entity] , and [entity] [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1 .\nM0 P2 M1 .\nM0 P3 M1 .\nM0 P4 M1 .\nM2 P0 M1 .\nM2 P1 M1 .\nM2 P2 M1 .\nM2 P3 M1 .\nM2 P4 M1 .\nM3 P0 M1 .\nM3 P1 M1 .\nM3 P2 M1 .\nM3 P3 M1 .\nM3 P4 M1\n}",
        "recursionDepth": 42,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q5437360 wdt:P57 wd:Q187261 .\nwd:Q5437360 wdt:P1040 wd:Q187261 .\nwd:Q5437360 wdt:P1431 wd:Q187261 .\nwd:Q5437360 wdt:P162|wdt:P272 wd:Q187261 .\nwd:Q5437360 wdt:P58 wd:Q187261 .\nwd:Q6084069 wdt:P57 wd:Q187261 .\nwd:Q6084069 wdt:P1040 wd:Q187261 .\nwd:Q6084069 wdt:P1431 wd:Q187261 .\nwd:Q6084069 wdt:P162|wdt:P272 wd:Q187261 .\nwd:Q6084069 wdt:P58 wd:Q187261 .\nwd:Q12813010 wdt:P57 wd:Q187261 .\nwd:Q12813010 wdt:P1040 wd:Q187261 .\nwd:Q12813010 wdt:P1431 wd:Q187261 .\nwd:Q12813010 wdt:P162|wdt:P272 wd:Q187261 .\nwd:Q12813010 wdt:P58 wd:Q187261\n}",
        "questionWithBrackets": "Were [The Waiting Room] , [Fate] , and [The Confession] executive produced , produced , directed , written , and edited by [Zeki Demirkubuz]"
    },
    {
        "questionIdx": 130006,
        "questionPatternModEntities": "Were M0 , M2 , and M3 written by , edited by , directed by , produced by , and executive produced by M1",
        "questionTemplate": "Were [entity] , [entity] , and [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1 .\nM0 P2 M1 .\nM0 P3 M1 .\nM0 P4 M1 .\nM2 P0 M1 .\nM2 P1 M1 .\nM2 P2 M1 .\nM2 P3 M1 .\nM2 P4 M1 .\nM3 P0 M1 .\nM3 P1 M1 .\nM3 P2 M1 .\nM3 P3 M1 .\nM3 P4 M1\n}",
        "recursionDepth": 46,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q483197 wdt:P57 wd:Q212990 .\nwd:Q483197 wdt:P1040 wd:Q212990 .\nwd:Q483197 wdt:P1431 wd:Q212990 .\nwd:Q483197 wdt:P162|wdt:P272 wd:Q212990 .\nwd:Q483197 wdt:P58 wd:Q212990 .\nwd:Q484679 wdt:P57 wd:Q212990 .\nwd:Q484679 wdt:P1040 wd:Q212990 .\nwd:Q484679 wdt:P1431 wd:Q212990 .\nwd:Q484679 wdt:P162|wdt:P272 wd:Q212990 .\nwd:Q484679 wdt:P58 wd:Q212990 .\nwd:Q13471372 wdt:P57 wd:Q212990 .\nwd:Q13471372 wdt:P1040 wd:Q212990 .\nwd:Q13471372 wdt:P1431 wd:Q212990 .\nwd:Q13471372 wdt:P162|wdt:P272 wd:Q212990 .\nwd:Q13471372 wdt:P58 wd:Q212990\n}",
        "questionWithBrackets": "Were [Dream] , [Piet\u00e0] , and [Moebius] written by , edited by , directed by , produced by , and executive produced by [Kim Ki-duk]"
    },
    {
        "questionIdx": 130034,
        "questionPatternModEntities": "Were M0 , M2 , and M3 edited by , written by , directed by , produced by , and executive produced by M1",
        "questionTemplate": "Were [entity] , [entity] , and [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1 .\nM0 P2 M1 .\nM0 P3 M1 .\nM0 P4 M1 .\nM2 P0 M1 .\nM2 P1 M1 .\nM2 P2 M1 .\nM2 P3 M1 .\nM2 P4 M1 .\nM3 P0 M1 .\nM3 P1 M1 .\nM3 P2 M1 .\nM3 P3 M1 .\nM3 P4 M1\n}",
        "recursionDepth": 46,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q5437360 wdt:P57 wd:Q187261 .\nwd:Q5437360 wdt:P1040 wd:Q187261 .\nwd:Q5437360 wdt:P1431 wd:Q187261 .\nwd:Q5437360 wdt:P162|wdt:P272 wd:Q187261 .\nwd:Q5437360 wdt:P58 wd:Q187261 .\nwd:Q6084069 wdt:P57 wd:Q187261 .\nwd:Q6084069 wdt:P1040 wd:Q187261 .\nwd:Q6084069 wdt:P1431 wd:Q187261 .\nwd:Q6084069 wdt:P162|wdt:P272 wd:Q187261 .\nwd:Q6084069 wdt:P58 wd:Q187261 .\nwd:Q12813010 wdt:P57 wd:Q187261 .\nwd:Q12813010 wdt:P1040 wd:Q187261 .\nwd:Q12813010 wdt:P1431 wd:Q187261 .\nwd:Q12813010 wdt:P162|wdt:P272 wd:Q187261 .\nwd:Q12813010 wdt:P58 wd:Q187261\n}",
        "questionWithBrackets": "Were [The Confession] , [Fate] , and [The Waiting Room] edited by , written by , directed by , produced by , and executive produced by [Zeki Demirkubuz]"
    },
    {
        "questionIdx": 130038,
        "questionPatternModEntities": "Were M0 , M2 , and M3 written by , executive produced by , directed by , edited by , and produced by M1",
        "questionTemplate": "Were [entity] , [entity] , and [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1 .\nM0 P2 M1 .\nM0 P3 M1 .\nM0 P4 M1 .\nM2 P0 M1 .\nM2 P1 M1 .\nM2 P2 M1 .\nM2 P3 M1 .\nM2 P4 M1 .\nM3 P0 M1 .\nM3 P1 M1 .\nM3 P2 M1 .\nM3 P3 M1 .\nM3 P4 M1\n}",
        "recursionDepth": 46,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q5437360 wdt:P57 wd:Q187261 .\nwd:Q5437360 wdt:P1040 wd:Q187261 .\nwd:Q5437360 wdt:P1431 wd:Q187261 .\nwd:Q5437360 wdt:P162|wdt:P272 wd:Q187261 .\nwd:Q5437360 wdt:P58 wd:Q187261 .\nwd:Q6084069 wdt:P57 wd:Q187261 .\nwd:Q6084069 wdt:P1040 wd:Q187261 .\nwd:Q6084069 wdt:P1431 wd:Q187261 .\nwd:Q6084069 wdt:P162|wdt:P272 wd:Q187261 .\nwd:Q6084069 wdt:P58 wd:Q187261 .\nwd:Q12813010 wdt:P57 wd:Q187261 .\nwd:Q12813010 wdt:P1040 wd:Q187261 .\nwd:Q12813010 wdt:P1431 wd:Q187261 .\nwd:Q12813010 wdt:P162|wdt:P272 wd:Q187261 .\nwd:Q12813010 wdt:P58 wd:Q187261\n}",
        "questionWithBrackets": "Were [The Confession] , [Fate] , and [The Waiting Room] written by , executive produced by , directed by , edited by , and produced by [Zeki Demirkubuz]"
    },
    {
        "questionIdx": 130040,
        "questionPatternModEntities": "Were M0 , M2 , and M3 edited by , directed by , produced by , executive produced by , and written by M1",
        "questionTemplate": "Were [entity] , [entity] , and [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1 .\nM0 P2 M1 .\nM0 P3 M1 .\nM0 P4 M1 .\nM2 P0 M1 .\nM2 P1 M1 .\nM2 P2 M1 .\nM2 P3 M1 .\nM2 P4 M1 .\nM3 P0 M1 .\nM3 P1 M1 .\nM3 P2 M1 .\nM3 P3 M1 .\nM3 P4 M1\n}",
        "recursionDepth": 46,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q5437360 wdt:P57 wd:Q187261 .\nwd:Q5437360 wdt:P1040 wd:Q187261 .\nwd:Q5437360 wdt:P1431 wd:Q187261 .\nwd:Q5437360 wdt:P162|wdt:P272 wd:Q187261 .\nwd:Q5437360 wdt:P58 wd:Q187261 .\nwd:Q6084069 wdt:P57 wd:Q187261 .\nwd:Q6084069 wdt:P1040 wd:Q187261 .\nwd:Q6084069 wdt:P1431 wd:Q187261 .\nwd:Q6084069 wdt:P162|wdt:P272 wd:Q187261 .\nwd:Q6084069 wdt:P58 wd:Q187261 .\nwd:Q12813010 wdt:P57 wd:Q187261 .\nwd:Q12813010 wdt:P1040 wd:Q187261 .\nwd:Q12813010 wdt:P1431 wd:Q187261 .\nwd:Q12813010 wdt:P162|wdt:P272 wd:Q187261 .\nwd:Q12813010 wdt:P58 wd:Q187261\n}",
        "questionWithBrackets": "Were [The Waiting Room] , [Fate] , and [The Confession] edited by , directed by , produced by , executive produced by , and written by [Zeki Demirkubuz]"
    },
    {
        "questionIdx": 130045,
        "questionPatternModEntities": "Were M0 , M2 , and M3 produced by , edited by , written by , executive produced by , and directed by M1",
        "questionTemplate": "Were [entity] , [entity] , and [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1 .\nM0 P2 M1 .\nM0 P3 M1 .\nM0 P4 M1 .\nM2 P0 M1 .\nM2 P1 M1 .\nM2 P2 M1 .\nM2 P3 M1 .\nM2 P4 M1 .\nM3 P0 M1 .\nM3 P1 M1 .\nM3 P2 M1 .\nM3 P3 M1 .\nM3 P4 M1\n}",
        "recursionDepth": 46,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q5437360 wdt:P57 wd:Q187261 .\nwd:Q5437360 wdt:P1040 wd:Q187261 .\nwd:Q5437360 wdt:P1431 wd:Q187261 .\nwd:Q5437360 wdt:P162|wdt:P272 wd:Q187261 .\nwd:Q5437360 wdt:P58 wd:Q187261 .\nwd:Q6084069 wdt:P57 wd:Q187261 .\nwd:Q6084069 wdt:P1040 wd:Q187261 .\nwd:Q6084069 wdt:P1431 wd:Q187261 .\nwd:Q6084069 wdt:P162|wdt:P272 wd:Q187261 .\nwd:Q6084069 wdt:P58 wd:Q187261 .\nwd:Q12813010 wdt:P57 wd:Q187261 .\nwd:Q12813010 wdt:P1040 wd:Q187261 .\nwd:Q12813010 wdt:P1431 wd:Q187261 .\nwd:Q12813010 wdt:P162|wdt:P272 wd:Q187261 .\nwd:Q12813010 wdt:P58 wd:Q187261\n}",
        "questionWithBrackets": "Were [The Waiting Room] , [Fate] , and [The Confession] produced by , edited by , written by , executive produced by , and directed by [Zeki Demirkubuz]"
    },
    {
        "questionIdx": 130047,
        "questionPatternModEntities": "Were M0 , M2 , and M3 written by , produced by , edited by , executive produced by , and directed by M1",
        "questionTemplate": "Were [entity] , [entity] , and [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1 .\nM0 P2 M1 .\nM0 P3 M1 .\nM0 P4 M1 .\nM2 P0 M1 .\nM2 P1 M1 .\nM2 P2 M1 .\nM2 P3 M1 .\nM2 P4 M1 .\nM3 P0 M1 .\nM3 P1 M1 .\nM3 P2 M1 .\nM3 P3 M1 .\nM3 P4 M1\n}",
        "recursionDepth": 46,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q5437360 wdt:P57 wd:Q187261 .\nwd:Q5437360 wdt:P1040 wd:Q187261 .\nwd:Q5437360 wdt:P1431 wd:Q187261 .\nwd:Q5437360 wdt:P162|wdt:P272 wd:Q187261 .\nwd:Q5437360 wdt:P58 wd:Q187261 .\nwd:Q6084069 wdt:P57 wd:Q187261 .\nwd:Q6084069 wdt:P1040 wd:Q187261 .\nwd:Q6084069 wdt:P1431 wd:Q187261 .\nwd:Q6084069 wdt:P162|wdt:P272 wd:Q187261 .\nwd:Q6084069 wdt:P58 wd:Q187261 .\nwd:Q12813010 wdt:P57 wd:Q187261 .\nwd:Q12813010 wdt:P1040 wd:Q187261 .\nwd:Q12813010 wdt:P1431 wd:Q187261 .\nwd:Q12813010 wdt:P162|wdt:P272 wd:Q187261 .\nwd:Q12813010 wdt:P58 wd:Q187261\n}",
        "questionWithBrackets": "Were [The Waiting Room] , [Fate] , and [The Confession] written by , produced by , edited by , executive produced by , and directed by [Zeki Demirkubuz]"
    },
    {
        "questionIdx": 130057,
        "questionPatternModEntities": "Were M0 , M2 , and M3 produced by , executive produced by , edited by , directed by , and written by M1",
        "questionTemplate": "Were [entity] , [entity] , and [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1 .\nM0 P2 M1 .\nM0 P3 M1 .\nM0 P4 M1 .\nM2 P0 M1 .\nM2 P1 M1 .\nM2 P2 M1 .\nM2 P3 M1 .\nM2 P4 M1 .\nM3 P0 M1 .\nM3 P1 M1 .\nM3 P2 M1 .\nM3 P3 M1 .\nM3 P4 M1\n}",
        "recursionDepth": 46,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q5437360 wdt:P57 wd:Q187261 .\nwd:Q5437360 wdt:P1040 wd:Q187261 .\nwd:Q5437360 wdt:P1431 wd:Q187261 .\nwd:Q5437360 wdt:P162|wdt:P272 wd:Q187261 .\nwd:Q5437360 wdt:P58 wd:Q187261 .\nwd:Q6084069 wdt:P57 wd:Q187261 .\nwd:Q6084069 wdt:P1040 wd:Q187261 .\nwd:Q6084069 wdt:P1431 wd:Q187261 .\nwd:Q6084069 wdt:P162|wdt:P272 wd:Q187261 .\nwd:Q6084069 wdt:P58 wd:Q187261 .\nwd:Q12813010 wdt:P57 wd:Q187261 .\nwd:Q12813010 wdt:P1040 wd:Q187261 .\nwd:Q12813010 wdt:P1431 wd:Q187261 .\nwd:Q12813010 wdt:P162|wdt:P272 wd:Q187261 .\nwd:Q12813010 wdt:P58 wd:Q187261\n}",
        "questionWithBrackets": "Were [The Confession] , [Fate] , and [The Waiting Room] produced by , executive produced by , edited by , directed by , and written by [Zeki Demirkubuz]"
    },
    {
        "questionIdx": 130061,
        "questionPatternModEntities": "Were M0 , M2 , and M3 produced by and executive produced by M1",
        "questionTemplate": "Were [entity] , [entity] , and [entity] [VP_SIMPLE] by and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1 .\nM2 P0 M1 .\nM2 P1 M1 .\nM3 P0 M1 .\nM3 P1 M1\n}",
        "recursionDepth": 28,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q1360398 wdt:P1431 wd:Q2673 .\nwd:Q1360398 wdt:P162|wdt:P272 wd:Q2673 .\nwd:Q2528596 wdt:P1431 wd:Q2673 .\nwd:Q2528596 wdt:P162|wdt:P272 wd:Q2673 .\nwd:Q647814 wdt:P1431 wd:Q2673 .\nwd:Q647814 wdt:P162|wdt:P272 wd:Q2673\n}",
        "questionWithBrackets": "Were [Good Guys Wear Black] , [Sidekicks] , and [Forced Vengeance] produced by and executive produced by [Chuck Norris]"
    },
    {
        "questionIdx": 130088,
        "questionPatternModEntities": "Were M0 and M3 directed and produced by M1 and M2",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P1 M1 .\nM0 P1 M2 .\nM3 P0 M1 .\nM3 P0 M2 .\nM3 P1 M1 .\nM3 P1 M2\n}",
        "recursionDepth": 27,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q3897674 wdt:P57 wd:Q24532 .\nwd:Q3897674 wdt:P57 wd:Q3830671 .\nwd:Q3897674 wdt:P162|wdt:P272 wd:Q24532 .\nwd:Q3897674 wdt:P162|wdt:P272 wd:Q3830671 .\nwd:Q1754159 wdt:P57 wd:Q24532 .\nwd:Q1754159 wdt:P57 wd:Q3830671 .\nwd:Q1754159 wdt:P162|wdt:P272 wd:Q24532 .\nwd:Q1754159 wdt:P162|wdt:P272 wd:Q3830671\n}",
        "questionWithBrackets": "Were [Patria] and [The Romance of Elaine] directed and produced by [Leopold Wharton] and [Theodore Wharton]"
    },
    {
        "questionIdx": 130092,
        "questionPatternModEntities": "Were M2 and M3 directed and edited by M0 's Mexican sibling",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] and [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M0 ) .\nM2 P2 ?x0 .\nM2 P3 ?x0 .\nM3 P2 ?x0 .\nM3 P3 ?x0\n}",
        "recursionDepth": 32,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P27 wd:Q96 .\n?x0 wdt:P3373 wd:Q2840325 .\nFILTER ( ?x0 != wd:Q2840325 ) .\nwd:Q128848 wdt:P57 ?x0 .\nwd:Q128848 wdt:P1040 ?x0 .\nwd:Q2579784 wdt:P57 ?x0 .\nwd:Q2579784 wdt:P1040 ?x0\n}",
        "questionWithBrackets": "Were [Gravity] and [Y tu mam\u00e1 tambi\u00e9n] directed and edited by [Carlos Cuar\u00f3n] 's Mexican sibling"
    },
    {
        "questionIdx": 130098,
        "questionPatternModEntities": "Were M2 and M4 written by M3 and edited by a female sibling of M0",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by [entity] and [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M0 ) .\nM2 P2 M3 .\nM2 P3 ?x0 .\nM4 P2 M3 .\nM4 P3 ?x0\n}",
        "recursionDepth": 38,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P21 wd:Q6581072 .\n?x0 wdt:P3373 wd:Q19826416 .\nFILTER ( ?x0 != wd:Q19826416 ) .\nwd:Q2824971 wdt:P1040 ?x0 .\nwd:Q2824971 wdt:P58 wd:Q457123 .\nwd:Q817761 wdt:P1040 ?x0 .\nwd:Q817761 wdt:P58 wd:Q457123\n}",
        "questionWithBrackets": "Were [Benjamin] and [Adorable Liar] written by [Nina Compan\u00e9ez] and edited by a female sibling of [Ir\u00e8ne Companeez]"
    },
    {
        "questionIdx": 130103,
        "questionPatternModEntities": "Were M2 and M5 produced by M3 , directed by M4 , and written by M0 's female employee",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nM2 P2 ?x0 .\nM2 P3 M3 .\nM2 P4 M4 .\nM5 P2 ?x0 .\nM5 P3 M3 .\nM5 P4 M4\n}",
        "recursionDepth": 45,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P108 wd:Q847743 .\n?x0 wdt:P21 wd:Q6581072 .\nwd:Q1235550 wdt:P57 wd:Q1744 .\nwd:Q1235550 wdt:P162|wdt:P272 wd:Q3478483 .\nwd:Q1235550 wdt:P58 ?x0 .\nwd:Q946478 wdt:P57 wd:Q1744 .\nwd:Q946478 wdt:P162|wdt:P272 wd:Q3478483 .\nwd:Q946478 wdt:P58 ?x0\n}",
        "questionWithBrackets": "Were [W.E.] and [Filth and Wisdom] produced by [Semtex Girls] , directed by [Madonna] , and written by [Dunkin'] 's female employee"
    },
    {
        "questionIdx": 130106,
        "questionPatternModEntities": "Were M3 and M4 founded by M2 's German parent 's female spouse",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 ?x1 .\n?x1 P2 M1 .\n?x1 P3 M2 .\nFILTER ( ?x0 != ?x1 ) .\nM3 P4 ?x0 .\nM4 P4 ?x0\n}",
        "recursionDepth": 34,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P21 wd:Q6581072 .\n?x0 wdt:P26 ?x1 .\n?x1 wdt:P40|wdt:P355 wd:Q526876 .\n?x1 wdt:P27 wd:Q183 .\nFILTER ( ?x0 != ?x1 ) .\nwd:Q1751117 wdt:P112 ?x0 .\nwd:Q7713009 wdt:P112 ?x0\n}",
        "questionWithBrackets": "Were [Albert Schweitzer Hospital] and [The Albert Schweitzer Fellowship] founded by [Rhena Schweitzer Miller] 's German parent 's female spouse"
    },
    {
        "questionIdx": 130107,
        "questionPatternModEntities": "Were M0 and M2 directed by and edited by M1",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1 .\nM2 P0 M1 .\nM2 P1 M1\n}",
        "recursionDepth": 24,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q854990 wdt:P57 wd:Q8006 .\nwd:Q854990 wdt:P1040 wd:Q8006 .\nwd:Q20475 wdt:P57 wd:Q8006 .\nwd:Q20475 wdt:P1040 wd:Q8006\n}",
        "questionWithBrackets": "Were [Kagemusha] and [Yojimbo] directed by and edited by [Akira Kurosawa]"
    },
    {
        "questionIdx": 130121,
        "questionPatternModEntities": "Were M1 , M2 , M3 , and M4 influenced by M0 's child 's employee",
        "questionTemplate": "Were [entity] , [entity] , [entity] , and [entity] [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x1 P1 M0 .\nM1 P2 ?x0 .\nM2 P2 ?x0 .\nM3 P2 ?x0 .\nM4 P2 ?x0\n}",
        "recursionDepth": 30,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P108 ?x1 .\n?x1 wdt:P749 wd:Q1163431 .\nwd:Q1063929 wdt:P737 ?x0 .\nwd:Q286440 wdt:P737 ?x0 .\nwd:Q123920 wdt:P737 ?x0 .\nwd:Q2825217 wdt:P737 ?x0\n}",
        "questionWithBrackets": "Were [Charles Chamberland] , [Adrien Loir] , [Alexandre Yersin] , and [Pierre-Paul \u00c9mile Roux] influenced by [PSL University] 's child 's employee"
    },
    {
        "questionIdx": 130163,
        "questionPatternModEntities": "Were M0 and M3 edited by M2 and executive produced by M1",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by [entity] and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M2 .\nM3 P0 M1 .\nM3 P1 M2\n}",
        "recursionDepth": 28,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q17738 wdt:P1040 wd:Q463119 .\nwd:Q17738 wdt:P1431 wd:Q38222 .\nwd:Q181803 wdt:P1040 wd:Q463119 .\nwd:Q181803 wdt:P1431 wd:Q38222\n}",
        "questionWithBrackets": "Were [Star Wars: Episode IV \u2013 A New Hope] and [Star Wars: Episode VI \u2013 Return of the Jedi] edited by [Marcia Lucas] and executive produced by [George Lucas]"
    },
    {
        "questionIdx": 130168,
        "questionPatternModEntities": "Were M1 , M2 , M3 , M4 , M5 , and M6 influenced by a parent of M0",
        "questionTemplate": "Were [entity] , [entity] , [entity] , [entity] , [entity] , and [entity] [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 ?x0 .\nM2 P1 ?x0 .\nM3 P1 ?x0 .\nM4 P1 ?x0 .\nM5 P1 ?x0 .\nM6 P1 ?x0\n}",
        "recursionDepth": 34,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q10862805 .\nwd:Q20987231 wdt:P737 ?x0 .\nwd:Q3052902 wdt:P737 ?x0 .\nwd:Q45205 wdt:P737 ?x0 .\nwd:Q1038450 wdt:P737 ?x0 .\nwd:Q61064 wdt:P737 ?x0 .\nwd:Q3130641 wdt:P737 ?x0\n}",
        "questionWithBrackets": "Were [Wassily Kandinsky] , [Dimitrie \u0218tiubei] , [J\u00f3zef Pankiewicz] , [Emmanuel de La Vill\u00e9on] , [Raoul Dufy] , and [Henri Beau] influenced by a parent of [Jean Monet]"
    },
    {
        "questionIdx": 130169,
        "questionPatternModEntities": "Were M1 , M2 , M3 , M4 , M5 , and M6 influenced by M0 's parent",
        "questionTemplate": "Were [entity] , [entity] , [entity] , [entity] , [entity] , and [entity] [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 ?x0 .\nM2 P1 ?x0 .\nM3 P1 ?x0 .\nM4 P1 ?x0 .\nM5 P1 ?x0 .\nM6 P1 ?x0\n}",
        "recursionDepth": 32,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q21914340 .\nwd:Q370246 wdt:P737 ?x0 .\nwd:Q5685 wdt:P737 ?x0 .\nwd:Q9327 wdt:P737 ?x0 .\nwd:Q165756 wdt:P737 ?x0 .\nwd:Q13005 wdt:P737 ?x0 .\nwd:Q315132 wdt:P737 ?x0\n}",
        "questionWithBrackets": "Were [Ba Jin] , [Jens Peter Jacobsen] , [Ion Luca Caragiale] , [Simon Holl\u00f3sy] , [Anton Chekhov] , and [Guy de Maupassant] influenced by [Denise Aubert] 's parent"
    },
    {
        "questionIdx": 130174,
        "questionPatternModEntities": "Were M0 and M3 edited by and directed by M1 and M2",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P1 M1 .\nM0 P1 M2 .\nM3 P0 M1 .\nM3 P0 M2 .\nM3 P1 M1 .\nM3 P1 M2\n}",
        "recursionDepth": 28,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q19827613 wdt:P57 wd:Q562108 .\nwd:Q19827613 wdt:P57 wd:Q35979475 .\nwd:Q19827613 wdt:P1040 wd:Q562108 .\nwd:Q19827613 wdt:P1040 wd:Q35979475 .\nwd:Q20729238 wdt:P57 wd:Q562108 .\nwd:Q20729238 wdt:P57 wd:Q35979475 .\nwd:Q20729238 wdt:P1040 wd:Q562108 .\nwd:Q20729238 wdt:P1040 wd:Q35979475\n}",
        "questionWithBrackets": "Were [Motion picture] and [Near Heaven, Near Earth] edited by and directed by [Ole John] and [J\u00f8rgen Leth]"
    },
    {
        "questionIdx": 130181,
        "questionPatternModEntities": "Were M2 , M3 , and M4 directed by M1 's spouse 's Canadian spouse",
        "questionTemplate": "Were [entity] , [entity] , and [entity] [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 ?x1 .\n?x1 P1 M1 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x1 != M1 ) .\nM2 P2 ?x0 .\nM3 P2 ?x0 .\nM4 P2 ?x0\n}",
        "recursionDepth": 32,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P27 wd:Q16 .\n?x0 wdt:P26 ?x1 .\n?x1 wdt:P26 wd:Q633 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x1 != wd:Q633 ) .\nwd:Q6296361 wdt:P57 ?x0 .\nwd:Q59587231 wdt:P57 ?x0 .\nwd:Q61450844 wdt:P57 ?x0\n}",
        "questionWithBrackets": "Were [Rust Never Sleeps] , [Muddy Track] , and [Journey Through the Past] directed by [Neil Young] 's spouse 's Canadian spouse"
    },
    {
        "questionIdx": 130202,
        "questionPatternModEntities": "Were M2 and M3 produced by , edited by , written by , and directed by a French spouse of M1",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M1 ) .\nM2 P2 ?x0 .\nM2 P3 ?x0 .\nM2 P4 ?x0 .\nM2 P5 ?x0 .\nM3 P2 ?x0 .\nM3 P3 ?x0 .\nM3 P4 ?x0 .\nM3 P5 ?x0\n}",
        "recursionDepth": 47,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P27 wd:Q142 .\n?x0 wdt:P26 wd:Q553963 .\nFILTER ( ?x0 != wd:Q553963 ) .\nwd:Q128646 wdt:P57 ?x0 .\nwd:Q128646 wdt:P1040 ?x0 .\nwd:Q128646 wdt:P162|wdt:P272 ?x0 .\nwd:Q128646 wdt:P58 ?x0 .\nwd:Q2778386 wdt:P57 ?x0 .\nwd:Q2778386 wdt:P1040 ?x0 .\nwd:Q2778386 wdt:P162|wdt:P272 ?x0 .\nwd:Q2778386 wdt:P58 ?x0\n}",
        "questionWithBrackets": "Were [2 Days in New York] and [2 Days in Paris] produced by , edited by , written by , and directed by a French spouse of [Marc Streitenfeld]"
    },
    {
        "questionIdx": 130213,
        "questionPatternModEntities": "Were M0 and M6 founded by M1 , M2 , M3 , M4 , and M5",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by [entity] , [entity] , [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P0 M3 .\nM0 P0 M4 .\nM0 P0 M5 .\nM6 P0 M1 .\nM6 P0 M2 .\nM6 P0 M3 .\nM6 P0 M4 .\nM6 P0 M5\n}",
        "recursionDepth": 29,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q782942 wdt:P112 wd:Q55 .\nwd:Q782942 wdt:P112 wd:Q16 .\nwd:Q782942 wdt:P112 wd:Q17 .\nwd:Q782942 wdt:P112 wd:Q30 .\nwd:Q782942 wdt:P112 wd:Q30 .\nwd:Q673158 wdt:P112 wd:Q55 .\nwd:Q673158 wdt:P112 wd:Q16 .\nwd:Q673158 wdt:P112 wd:Q17 .\nwd:Q673158 wdt:P112 wd:Q30 .\nwd:Q673158 wdt:P112 wd:Q30\n}",
        "questionWithBrackets": "Were [Wassenaar Arrangement] and [Australia Group] founded by m.09c7w0 , [Canada] , [United States of America] , [Japan] , and [Netherlands]"
    },
    {
        "questionIdx": 130218,
        "questionPatternModEntities": "Were M0 , M3 , and M4 founded by M1 and M2",
        "questionTemplate": "Were [entity] , [entity] , and [entity] [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM3 P0 M1 .\nM3 P0 M2 .\nM4 P0 M1 .\nM4 P0 M2\n}",
        "recursionDepth": 23,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q146905 wdt:P112 wd:Q145 .\nwd:Q146905 wdt:P112 wd:Q35 .\nwd:Q1065 wdt:P112 wd:Q145 .\nwd:Q1065 wdt:P112 wd:Q35 .\nwd:Q42262 wdt:P112 wd:Q145 .\nwd:Q42262 wdt:P112 wd:Q35\n}",
        "questionWithBrackets": "Were [European Space Agency] , [Zangger Committee] , and [United Nations] founded by [Denmark] and m.07ssc"
    },
    {
        "questionIdx": 130223,
        "questionPatternModEntities": "Were M0 , M5 , M6 , and M7 founded by M1 , founded by M2 , and founded by M3 and M4",
        "questionTemplate": "Were [entity] , [entity] , [entity] , and [entity] [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P0 M3 .\nM0 P0 M4 .\nM5 P0 M1 .\nM5 P0 M2 .\nM5 P0 M3 .\nM5 P0 M4 .\nM6 P0 M1 .\nM6 P0 M2 .\nM6 P0 M3 .\nM6 P0 M4 .\nM7 P0 M1 .\nM7 P0 M2 .\nM7 P0 M3 .\nM7 P0 M4\n}",
        "recursionDepth": 46,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q1065 wdt:P112 wd:Q30 .\nwd:Q1065 wdt:P112 wd:Q145 .\nwd:Q1065 wdt:P112 wd:Q30 .\nwd:Q1065 wdt:P112 wd:Q142 .\nwd:Q1072120 wdt:P112 wd:Q30 .\nwd:Q1072120 wdt:P112 wd:Q145 .\nwd:Q1072120 wdt:P112 wd:Q30 .\nwd:Q1072120 wdt:P112 wd:Q142 .\nwd:Q673158 wdt:P112 wd:Q30 .\nwd:Q673158 wdt:P112 wd:Q145 .\nwd:Q673158 wdt:P112 wd:Q30 .\nwd:Q673158 wdt:P112 wd:Q142 .\nwd:Q1480793 wdt:P112 wd:Q30 .\nwd:Q1480793 wdt:P112 wd:Q145 .\nwd:Q1480793 wdt:P112 wd:Q30 .\nwd:Q1480793 wdt:P112 wd:Q142\n}",
        "questionWithBrackets": "Were [Nuclear Suppliers Group] , [United Nations] , [Missile Technology Control Regime] , and [Wassenaar Arrangement] founded by [United States of America] , founded by m.0f8l9c , and founded by m.09c7w0 and m.07ssc"
    },
    {
        "questionIdx": 130308,
        "questionPatternModEntities": "Were M2 and M3 produced by , edited by , written by , and directed by M1 's Mexican spouse",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M1 ) .\nM2 P2 ?x0 .\nM2 P3 ?x0 .\nM2 P4 ?x0 .\nM2 P5 ?x0 .\nM3 P2 ?x0 .\nM3 P3 ?x0 .\nM3 P4 ?x0 .\nM3 P5 ?x0\n}",
        "recursionDepth": 45,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P27 wd:Q96 .\n?x0 wdt:P26 wd:Q105315526 .\nFILTER ( ?x0 != wd:Q105315526 ) .\nwd:Q27959455 wdt:P57 ?x0 .\nwd:Q27959455 wdt:P1040 ?x0 .\nwd:Q27959455 wdt:P162|wdt:P272 ?x0 .\nwd:Q27959455 wdt:P58 ?x0 .\nwd:Q2579784 wdt:P57 ?x0 .\nwd:Q2579784 wdt:P1040 ?x0 .\nwd:Q2579784 wdt:P162|wdt:P272 ?x0 .\nwd:Q2579784 wdt:P58 ?x0\n}",
        "questionWithBrackets": "Were [Roma] and [Gravity] produced by , edited by , written by , and directed by [Annalisa Bugliani] 's Mexican spouse"
    },
    {
        "questionIdx": 130314,
        "questionPatternModEntities": "Were M1 and M2 edited by a sibling of M0",
        "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nM1 P1 ?x0 .\nM2 P1 ?x0\n}",
        "recursionDepth": 22,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\n?x0 wdt:P3373 wd:Q606780 .\nFILTER ( ?x0 != wd:Q606780 ) .\nwd:Q166739 wdt:P1040 ?x0 .\nwd:Q374172 wdt:P1040 ?x0\n}",
        "questionWithBrackets": "Were [The Floorwalker] and [The Kid] edited by a sibling of [Sydney Chaplin]"
    },
    {
        "questionIdx": 130475,
        "questionPatternModEntities": "Were M0 , M2 , and M3 directed , produced , and edited by M1",
        "questionTemplate": "Were [entity] , [entity] , and [entity] [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1 .\nM0 P2 M1 .\nM2 P0 M1 .\nM2 P1 M1 .\nM2 P2 M1 .\nM3 P0 M1 .\nM3 P1 M1 .\nM3 P2 M1\n}",
        "recursionDepth": 31,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q214723 wdt:P57 wd:Q882 .\nwd:Q214723 wdt:P1040 wd:Q882 .\nwd:Q214723 wdt:P162|wdt:P272 wd:Q882 .\nwd:Q166739 wdt:P57 wd:Q882 .\nwd:Q166739 wdt:P1040 wd:Q882 .\nwd:Q166739 wdt:P162|wdt:P272 wd:Q882 .\nwd:Q45602 wdt:P57 wd:Q882 .\nwd:Q45602 wdt:P1040 wd:Q882 .\nwd:Q45602 wdt:P162|wdt:P272 wd:Q882\n}",
        "questionWithBrackets": "Were [The Gold Rush] , [Modern Times] , and [The Floorwalker] directed , produced , and edited by [Charlie Chaplin]"
    },
    {
        "questionIdx": 130487,
        "questionPatternModEntities": "Were M0 , M2 , M3 , and M4 directed by , produced by , and edited by M1",
        "questionTemplate": "Were [entity] , [entity] , [entity] , and [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1 .\nM0 P2 M1 .\nM2 P0 M1 .\nM2 P1 M1 .\nM2 P2 M1 .\nM3 P0 M1 .\nM3 P1 M1 .\nM3 P2 M1 .\nM4 P0 M1 .\nM4 P1 M1 .\nM4 P2 M1\n}",
        "recursionDepth": 36,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q1152833 wdt:P57 wd:Q882 .\nwd:Q1152833 wdt:P1040 wd:Q882 .\nwd:Q1152833 wdt:P162|wdt:P272 wd:Q882 .\nwd:Q45602 wdt:P57 wd:Q882 .\nwd:Q45602 wdt:P1040 wd:Q882 .\nwd:Q45602 wdt:P162|wdt:P272 wd:Q882 .\nwd:Q199039 wdt:P57 wd:Q882 .\nwd:Q199039 wdt:P1040 wd:Q882 .\nwd:Q199039 wdt:P162|wdt:P272 wd:Q882 .\nwd:Q166739 wdt:P57 wd:Q882 .\nwd:Q166739 wdt:P1040 wd:Q882 .\nwd:Q166739 wdt:P162|wdt:P272 wd:Q882\n}",
        "questionWithBrackets": "Were [Pay Day] , [Modern Times] , [One A.M.] , and [The Floorwalker] directed by , produced by , and edited by [Charlie Chaplin]"
    },
    {
        "questionIdx": 130490,
        "questionPatternModEntities": "Were M0 , M2 , and M3 edited and directed by M1",
        "questionTemplate": "Were [entity] , [entity] , and [entity] [VP_SIMPLE] and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1 .\nM2 P0 M1 .\nM2 P1 M1 .\nM3 P0 M1 .\nM3 P1 M1\n}",
        "recursionDepth": 26,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q854990 wdt:P57 wd:Q8006 .\nwd:Q854990 wdt:P1040 wd:Q8006 .\nwd:Q847709 wdt:P57 wd:Q8006 .\nwd:Q847709 wdt:P1040 wd:Q8006 .\nwd:Q20475 wdt:P57 wd:Q8006 .\nwd:Q20475 wdt:P1040 wd:Q8006\n}",
        "questionWithBrackets": "Were [Yojimbo] , [Red Beard] , and [Kagemusha] edited and directed by [Akira Kurosawa]"
    },
    {
        "questionIdx": 130497,
        "questionPatternModEntities": "Were M0 , M2 , and M3 produced by , edited by , and directed by M1",
        "questionTemplate": "Were [entity] , [entity] , and [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1 .\nM0 P2 M1 .\nM2 P0 M1 .\nM2 P1 M1 .\nM2 P2 M1 .\nM3 P0 M1 .\nM3 P1 M1 .\nM3 P2 M1\n}",
        "recursionDepth": 33,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q567519 wdt:P57 wd:Q44426 .\nwd:Q567519 wdt:P1040 wd:Q44426 .\nwd:Q567519 wdt:P162|wdt:P272 wd:Q44426 .\nwd:Q830191 wdt:P57 wd:Q44426 .\nwd:Q830191 wdt:P1040 wd:Q44426 .\nwd:Q830191 wdt:P162|wdt:P272 wd:Q44426 .\nwd:Q599423 wdt:P57 wd:Q44426 .\nwd:Q599423 wdt:P1040 wd:Q44426 .\nwd:Q599423 wdt:P162|wdt:P272 wd:Q44426\n}",
        "questionWithBrackets": "Were [Love Is Colder Than Death] , [Katzelmacher] , and [Gods of the Plague] produced by , edited by , and directed by [Rainer Werner Fassbinder]"
    },
    {
        "questionIdx": 130498,
        "questionPatternModEntities": "Were M0 , M2 , and M3 produced by , written by , and edited by M1",
        "questionTemplate": "Were [entity] , [entity] , and [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1 .\nM0 P2 M1 .\nM2 P0 M1 .\nM2 P1 M1 .\nM2 P2 M1 .\nM3 P0 M1 .\nM3 P1 M1 .\nM3 P2 M1\n}",
        "recursionDepth": 33,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q1070468 wdt:P1040 wd:Q882 .\nwd:Q1070468 wdt:P162|wdt:P272 wd:Q882 .\nwd:Q1070468 wdt:P58 wd:Q882 .\nwd:Q166739 wdt:P1040 wd:Q882 .\nwd:Q166739 wdt:P162|wdt:P272 wd:Q882 .\nwd:Q166739 wdt:P58 wd:Q882 .\nwd:Q214723 wdt:P1040 wd:Q882 .\nwd:Q214723 wdt:P162|wdt:P272 wd:Q882 .\nwd:Q214723 wdt:P58 wd:Q882\n}",
        "questionWithBrackets": "Were [The Immigrant] , [The Floorwalker] , and [The Gold Rush] produced by , written by , and edited by [Charlie Chaplin]"
    },
    {
        "questionIdx": 130517,
        "questionPatternModEntities": "Were M0 , M2 , and M3 produced by and written by M1",
        "questionTemplate": "Were [entity] , [entity] , and [entity] [VP_SIMPLE] by and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1 .\nM2 P0 M1 .\nM2 P1 M1 .\nM3 P0 M1 .\nM3 P1 M1\n}",
        "recursionDepth": 27,
        "sparql": "SELECT (COUNT(*) AS ?count) WHERE {\nwd:Q10331225 wdt:P162|wdt:P272 wd:Q882 .\nwd:Q10331225 wdt:P58 wd:Q882 .\nwd:Q45602 wdt:P162|wdt:P272 wd:Q882 .\nwd:Q45602 wdt:P58 wd:Q882 .\nwd:Q109116 wdt:P162|wdt:P272 wd:Q882 .\nwd:Q109116 wdt:P58 wd:Q882\n}",
        "questionWithBrackets": "Were [Mixed Up] , [Modern Times] , and [The Great Dictator] produced by and written by [Charlie Chaplin]"
    },
    {
        "questionIdx": 130681,
        "questionPatternModEntities": "What American employee of M0 was employed by M1 and M2",
        "questionTemplate": "What [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] was [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P1 M3\n}",
        "recursionDepth": 26,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P108 wd:Q1372129 .\n?x0 wdt:P108 wd:Q1281617 .\n?x0 wdt:P108 wd:Q2093794 .\n?x0 wdt:P27 wd:Q30\n}",
        "questionWithBrackets": "What American employee of [Eckert\u2013Mauchly Computer Corporation] was employed by [Vassar College] and [Remington Rand]"
    },
    {
        "questionIdx": 130688,
        "questionPatternModEntities": "What American employee of M0 was influenced by M1 , M2 , and M3",
        "questionTemplate": "What [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] was [VP_SIMPLE] by [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\n?x0 P1 M3 .\n?x0 P2 M4\n}",
        "recursionDepth": 30,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P737 wd:Q859 .\n?x0 wdt:P737 wd:Q76509 .\n?x0 wdt:P737 wd:Q77148 .\n?x0 wdt:P108 wd:Q49112 .\n?x0 wdt:P27 wd:Q30\n}",
        "questionWithBrackets": "What American employee of [Yale University] was influenced by [Carl Schmitt] , [Plato] , and [Karl Jaspers]"
    },
    {
        "questionIdx": 130718,
        "questionPatternModEntities": "What American female spouse of M6 did M0 , M1 , M2 , and M3 influence",
        "questionTemplate": "What [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] did [entity] , [entity] , [entity] , and [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P0 M3 .\n?x0 P1 M4 .\n?x0 P2 M5 .\n?x0 P3 M6 .\nFILTER ( ?x0 != M6 )\n}",
        "recursionDepth": 36,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P737 wd:Q905 .\n?x0 wdt:P737 wd:Q15975 .\n?x0 wdt:P737 wd:Q859 .\n?x0 wdt:P737 wd:Q302 .\n?x0 wdt:P21 wd:Q6581072 .\n?x0 wdt:P27 wd:Q30 .\n?x0 wdt:P26 wd:Q71696 .\nFILTER ( ?x0 != wd:Q71696 )\n}",
        "questionWithBrackets": "What American female spouse of [Heinrich Bl\u00fccher] did [Montesquieu] , [Franz Kafka] , [Jesus] , and [Plato] influence"
    },
    {
        "questionIdx": 130838,
        "questionPatternModEntities": "What American sibling of M0 was influenced by M1 , was influenced by M2 , and married M4 and M5",
        "questionTemplate": "What [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] was [VP_SIMPLE] by [entity] , was [VP_SIMPLE] by [entity] , and [VP_SIMPLE] [entity] and [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\n?x0 P2 M3 .\n?x0 P3 M4 .\n?x0 P3 M5 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x0 != M4 ) .\nFILTER ( ?x0 != M5 )\n}",
        "recursionDepth": 49,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P737 wd:Q692 .\n?x0 wdt:P737 wd:Q93354 .\n?x0 wdt:P27 wd:Q30 .\n?x0 wdt:P3373 wd:Q52226365 .\n?x0 wdt:P26 wd:Q7911263 .\n?x0 wdt:P26 wd:Q7937883 .\nFILTER ( ?x0 != wd:Q52226365 ) .\nFILTER ( ?x0 != wd:Q7911263 ) .\nFILTER ( ?x0 != wd:Q7937883 )\n}",
        "questionWithBrackets": "What American sibling of [Henry Ware Eliot] was influenced by [F. Scott Fitzgerald] , was influenced by [William Shakespeare] , and married [Vivienne Haigh-Wood Eliot] and [Valerie Eliot]"
    },
    {
        "questionIdx": 130842,
        "questionPatternModEntities": "What American sibling of M0 did M1 , M2 , and M3 influence",
        "questionTemplate": "What [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] did [entity] , [entity] , and [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\n?x0 P1 M3 .\n?x0 P2 M4 .\nFILTER ( ?x0 != M0 )\n}",
        "recursionDepth": 28,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P737 wd:Q714 .\n?x0 wdt:P737 wd:Q248207 .\n?x0 wdt:P737 wd:Q1299 .\n?x0 wdt:P27 wd:Q30 .\n?x0 wdt:P3373 wd:Q3545998 .\nFILTER ( ?x0 != wd:Q3545998 )\n}",
        "questionWithBrackets": "What American sibling of [Tyka Nelson] did [Stevie Wonder] , [Rick James] , and [The Beatles] influence"
    },
    {
        "questionIdx": 130845,
        "questionPatternModEntities": "What American sibling of M0 did M2 , M3 , M4 , and M5 marry",
        "questionTemplate": "What [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] did [entity] , [entity] , [entity] , and [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P2 M2 .\n?x0 P2 M3 .\n?x0 P2 M4 .\n?x0 P2 M5 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x0 != M2 ) .\nFILTER ( ?x0 != M3 ) .\nFILTER ( ?x0 != M4 ) .\nFILTER ( ?x0 != M5 )\n}",
        "recursionDepth": 31,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P27 wd:Q30 .\n?x0 wdt:P3373 wd:Q23 .\n?x0 wdt:P26 wd:Q105961124 .\n?x0 wdt:P26 wd:Q75764491 .\n?x0 wdt:P26 wd:Q105961136 .\n?x0 wdt:P26 wd:Q105961247 .\nFILTER ( ?x0 != wd:Q23 ) .\nFILTER ( ?x0 != wd:Q105961124 ) .\nFILTER ( ?x0 != wd:Q75764491 ) .\nFILTER ( ?x0 != wd:Q105961136 ) .\nFILTER ( ?x0 != wd:Q105961247 )\n}",
        "questionWithBrackets": "What American sibling of [George Washington] did [Mildred Thornton] , [Lucy Chapman] , [Susannah Perrin] , and [Jane Champe] marry"
    },
    {
        "questionIdx": 130865,
        "questionPatternModEntities": "What American spouse of M2 married M1",
        "questionTemplate": "What [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] [VP_SIMPLE] [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\nFILTER ( ?x0 != M1 ) .\nFILTER ( ?x0 != M2 )\n}",
        "recursionDepth": 21,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P27 wd:Q30 .\n?x0 wdt:P26 wd:Q99029959 .\n?x0 wdt:P26 wd:Q4445403 .\nFILTER ( ?x0 != wd:Q99029959 ) .\nFILTER ( ?x0 != wd:Q4445403 )\n}",
        "questionWithBrackets": "What American spouse of [Vera de Bosset] married [Yekaterina Nosenko]"
    },
    {
        "questionIdx": 130867,
        "questionPatternModEntities": "What American spouse of M5 did M0 , M1 , M2 , and M3 employ",
        "questionTemplate": "What [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] did [entity] , [entity] , [entity] , and [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P0 M3 .\n?x0 P1 M4 .\n?x0 P2 M5 .\nFILTER ( ?x0 != M5 )\n}",
        "recursionDepth": 31,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P108 wd:Q49088 .\n?x0 wdt:P108 wd:Q131252 .\n?x0 wdt:P108 wd:Q209344 .\n?x0 wdt:P108 wd:Q820887 .\n?x0 wdt:P27 wd:Q30 .\n?x0 wdt:P26 wd:Q6498895 .\nFILTER ( ?x0 != wd:Q6498895 )\n}",
        "questionWithBrackets": "What American spouse of [Laura Fermi] did [University of Chicago] , [Sapienza University of Rome] , [Columbia University] , and [University of Florence] employ"
    },
    {
        "questionIdx": 130870,
        "questionPatternModEntities": "What American spouse of M2 was employed by M0",
        "questionTemplate": "What [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] was [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P2 M2 .\nFILTER ( ?x0 != M2 )\n}",
        "recursionDepth": 22,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P108 wd:Q1070333 .\n?x0 wdt:P27 wd:Q30 .\n?x0 wdt:P26 wd:Q1124 .\nFILTER ( ?x0 != wd:Q1124 )\n}",
        "questionWithBrackets": "What American spouse of [Bill Clinton] was employed by [University of Arkansas]"
    },
    {
        "questionIdx": 130873,
        "questionPatternModEntities": "What American spouse of M3 did M0 and M1 employ",
        "questionTemplate": "What [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] did [entity] and [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P1 M2 .\n?x0 P2 M3 .\nFILTER ( ?x0 != M3 )\n}",
        "recursionDepth": 25,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P108 wd:Q48525 .\n?x0 wdt:P108 wd:Q49088 .\n?x0 wdt:P27 wd:Q30 .\n?x0 wdt:P26 wd:Q6775247 .\nFILTER ( ?x0 != wd:Q6775247 )\n}",
        "questionWithBrackets": "What American spouse of [Martin D. Ginsburg] did [Columbia University] and [Federal Government of the United States of America] employ"
    },
    {
        "questionIdx": 131089,
        "questionPatternModEntities": "What British employee of M0 did M1 employ",
        "questionTemplate": "What [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] did [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P1 M2\n}",
        "recursionDepth": 21,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P108 wd:Q35794 .\n?x0 wdt:P108 wd:Q270532 .\n?x0 wdt:P27 wd:Q145\n}",
        "questionWithBrackets": "What British employee of [University of Aberdeen] did [University of Cambridge] employ"
    },
    {
        "questionIdx": 131092,
        "questionPatternModEntities": "What British employee of M0 was influenced by M1",
        "questionTemplate": "What [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] was [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P2 M2\n}",
        "recursionDepth": 23,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P737 wd:Q501 .\n?x0 wdt:P108 wd:Q131252 .\n?x0 wdt:P27 wd:Q145\n}",
        "questionWithBrackets": "What British employee of [University of Chicago] was influenced by [Charles Baudelaire]"
    },
    {
        "questionIdx": 131093,
        "questionPatternModEntities": "What British employee of M0 married M2 , M3 , and M4",
        "questionTemplate": "What [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] [VP_SIMPLE] [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P2 M2 .\n?x0 P2 M3 .\n?x0 P2 M4 .\nFILTER ( ?x0 != M2 ) .\nFILTER ( ?x0 != M3 ) .\nFILTER ( ?x0 != M4 )\n}",
        "recursionDepth": 28,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P108 wd:Q193196 .\n?x0 wdt:P27 wd:Q145 .\n?x0 wdt:P26 wd:Q15062110 .\n?x0 wdt:P26 wd:Q15062111 .\n?x0 wdt:P26 wd:Q15062108 .\nFILTER ( ?x0 != wd:Q15062110 ) .\nFILTER ( ?x0 != wd:Q15062111 ) .\nFILTER ( ?x0 != wd:Q15062108 )\n}",
        "questionWithBrackets": "What British employee of [University College London] married [Emilija Lapenna] , [Birthe Lapenna] , and [Ljuba Lapenna]"
    },
    {
        "questionIdx": 131097,
        "questionPatternModEntities": "What British employee of M0 was employed by M1 and was employed by M2 , M3 , and M4",
        "questionTemplate": "What [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] was [VP_SIMPLE] by [entity] and was [VP_SIMPLE] by [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P0 M3 .\n?x0 P0 M4 .\n?x0 P1 M5\n}",
        "recursionDepth": 43,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P108 wd:Q34433 .\n?x0 wdt:P108 wd:Q457281 .\n?x0 wdt:P108 wd:Q230899 .\n?x0 wdt:P108 wd:Q1202039 .\n?x0 wdt:P108 wd:Q195668 .\n?x0 wdt:P27 wd:Q145\n}",
        "questionWithBrackets": "What British employee of [University of Illinois at Urbana\u2013Champaign] was employed by [University of Oxford] and was employed by [Queen Mary University of London] , [Royal Holloway, University of London] , and [University of Manchester]"
    },
    {
        "questionIdx": 131307,
        "questionPatternModEntities": "What British sibling of M0 was influenced by M1 and was influenced by M2 , M3 , M4 , and M5",
        "questionTemplate": "What [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] was [VP_SIMPLE] by [entity] and was [VP_SIMPLE] by [entity] , [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\n?x0 P1 M3 .\n?x0 P1 M4 .\n?x0 P1 M5 .\n?x0 P2 M6 .\nFILTER ( ?x0 != M0 )\n}",
        "recursionDepth": 46,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P737 wd:Q868 .\n?x0 wdt:P737 wd:Q41513 .\n?x0 wdt:P737 wd:Q79759 .\n?x0 wdt:P737 wd:Q5683 .\n?x0 wdt:P737 wd:Q182589 .\n?x0 wdt:P27 wd:Q145 .\n?x0 wdt:P3373 wd:Q3038321 .\nFILTER ( ?x0 != wd:Q3038321 )\n}",
        "questionWithBrackets": "What British sibling of [Warren Lewis] was influenced by [Aristotle] and was influenced by [William Morris] , [William Blake] , [Geoffrey Chaucer] , and [John Milton]"
    },
    {
        "questionIdx": 131310,
        "questionPatternModEntities": "What British sibling of M0 did M2 , M3 , and M4 marry",
        "questionTemplate": "What [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] did [entity] , [entity] , and [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P2 M2 .\n?x0 P2 M3 .\n?x0 P2 M4 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x0 != M2 ) .\nFILTER ( ?x0 != M3 ) .\nFILTER ( ?x0 != M4 )\n}",
        "recursionDepth": 28,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P27 wd:Q145 .\n?x0 wdt:P3373 wd:Q21557476 .\n?x0 wdt:P26 wd:Q17917681 .\n?x0 wdt:P26 wd:Q4769390 .\n?x0 wdt:P26 wd:Q75982464 .\nFILTER ( ?x0 != wd:Q17917681 ) .\nFILTER ( ?x0 != wd:Q4769390 ) .\nFILTER ( ?x0 != wd:Q21557476 ) .\nFILTER ( ?x0 != wd:Q75982464 )\n}",
        "questionWithBrackets": "What British sibling of [Margaret Booth (n\u00e9e Meinertzhagen)] did [Armorel Le Roy-Lewis] , [Theresa Clay] , and [Annie Meinertzhagen] marry"
    },
    {
        "questionIdx": 131315,
        "questionPatternModEntities": "What British spouse of M3 was influenced by M0 and influenced by M1",
        "questionTemplate": "What [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] was [VP_SIMPLE] by [entity] and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P1 M2 .\n?x0 P2 M3 .\nFILTER ( ?x0 != M3 )\n}",
        "recursionDepth": 33,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P737 wd:Q42 .\n?x0 wdt:P737 wd:Q1035 .\n?x0 wdt:P27 wd:Q145 .\n?x0 wdt:P26 wd:Q439404 .\nFILTER ( ?x0 != wd:Q439404 )\n}",
        "questionWithBrackets": "What British spouse of [Lalla Ward] was influenced by [Douglas Adams] and influenced by [Charles Darwin]"
    },
    {
        "questionIdx": 131320,
        "questionPatternModEntities": "What British spouse of M4 was influenced by M0 , M1 , and M2",
        "questionTemplate": "What [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] was [VP_SIMPLE] by [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P1 M3 .\n?x0 P2 M4 .\nFILTER ( ?x0 != M4 )\n}",
        "recursionDepth": 29,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P737 wd:Q42 .\n?x0 wdt:P737 wd:Q153890 .\n?x0 wdt:P737 wd:Q216723 .\n?x0 wdt:P27 wd:Q145 .\n?x0 wdt:P26 wd:Q439404 .\nFILTER ( ?x0 != wd:Q439404 )\n}",
        "questionWithBrackets": "What British spouse of [Lalla Ward] was influenced by [Douglas Adams] , [Ronald Fisher] , and [Niko Tinbergen]"
    },
    {
        "questionIdx": 131554,
        "questionPatternModEntities": "What Canadian employee of M0 , M1 , and M2 did M3 , M4 , and M5 influence",
        "questionTemplate": "What [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] , [entity] , and [entity] did [entity] , [entity] , and [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P1 M3 .\n?x0 P1 M4 .\n?x0 P1 M5 .\n?x0 P2 M6\n}",
        "recursionDepth": 35,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P737 wd:Q410 .\n?x0 wdt:P737 wd:Q13520818 .\n?x0 wdt:P737 wd:Q298341 .\n?x0 wdt:P108 wd:Q2562289 .\n?x0 wdt:P108 wd:Q2983614 .\n?x0 wdt:P108 wd:Q2819477 .\n?x0 wdt:P27 wd:Q16\n}",
        "questionWithBrackets": "What Canadian employee of [ASTROLab] , [Universit\u00e9 du Qu\u00e9bec \u00e0 Chicoutimi] , and [Coll\u00e8ge Lionel-Groulx] did [Magnus Manske] , [Carl Sagan] , and [Raymond Kurzweil] influence"
    },
    {
        "questionIdx": 131720,
        "questionPatternModEntities": "What Canadian parent of M3 was a British sibling of M0",
        "questionTemplate": "What [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] was a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\n?x0 P2 M3 .\nFILTER ( ?x0 != M0 )\n}",
        "recursionDepth": 29,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q2224507 .\n?x0 wdt:P27 wd:Q145 .\n?x0 wdt:P27 wd:Q16 .\n?x0 wdt:P3373 wd:Q544593 .\nFILTER ( ?x0 != wd:Q544593 )\n}",
        "questionWithBrackets": "What Canadian parent of [Sarah Sutherland] was a British sibling of [Angus Sutherland]"
    },
    {
        "questionIdx": 131802,
        "questionPatternModEntities": "What Canadian sibling of M0 married M2 and M3",
        "questionTemplate": "What [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] [VP_SIMPLE] [entity] and [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P2 M2 .\n?x0 P2 M3 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x0 != M2 ) .\nFILTER ( ?x0 != M3 )\n}",
        "recursionDepth": 25,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P27 wd:Q16 .\n?x0 wdt:P3373 wd:Q236613 .\n?x0 wdt:P26 wd:Q17309225 .\n?x0 wdt:P26 wd:Q26945290 .\nFILTER ( ?x0 != wd:Q17309225 ) .\nFILTER ( ?x0 != wd:Q26945290 ) .\nFILTER ( ?x0 != wd:Q236613 )\n}",
        "questionWithBrackets": "What Canadian sibling of [Martha Wainwright] married [J\u00f6rn Weisbrodt] and [Lorca Cohen]"
    },
    {
        "questionIdx": 131804,
        "questionPatternModEntities": "What Canadian sibling of M0 was influenced by M1 and influenced by M2 and M3",
        "questionTemplate": "What [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] was [VP_SIMPLE] by [entity] and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\n?x0 P1 M3 .\n?x0 P2 M4 .\nFILTER ( ?x0 != M0 )\n}",
        "recursionDepth": 37,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P737 wd:Q409 .\n?x0 wdt:P737 wd:Q6420069 .\n?x0 wdt:P737 wd:Q189758 .\n?x0 wdt:P27 wd:Q16 .\n?x0 wdt:P3373 wd:Q105338590 .\nFILTER ( ?x0 != wd:Q105338590 )\n}",
        "questionWithBrackets": "What Canadian sibling of [Ocean Summer-Pullen] was influenced by [Marvin Gaye] and influenced by [Bob Marley] and [Klee Benally]"
    },
    {
        "questionIdx": 131822,
        "questionPatternModEntities": "What Canadian spouse of M6 did M0 , M1 , M2 , M3 , and M4 employ",
        "questionTemplate": "What [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] did [entity] , [entity] , [entity] , [entity] , and [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P0 M3 .\n?x0 P0 M4 .\n?x0 P1 M5 .\n?x0 P2 M6 .\nFILTER ( ?x0 != M6 )\n}",
        "recursionDepth": 34,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P108 wd:Q15277924 .\n?x0 wdt:P108 wd:Q391028 .\n?x0 wdt:P108 wd:Q640694 .\n?x0 wdt:P108 wd:Q849751 .\n?x0 wdt:P108 wd:Q326342 .\n?x0 wdt:P27 wd:Q16 .\n?x0 wdt:P26 wd:Q9275354 .\nFILTER ( ?x0 != wd:Q9275354 )\n}",
        "questionWithBrackets": "What Canadian spouse of [Graeme Gibson] did [Concordia University] , [University of British Columbia] , [University of Alberta] , [Sir George Williams University] , and [York University] employ"
    },
    {
        "questionIdx": 131823,
        "questionPatternModEntities": "What Canadian spouse of M7 was employed by M0 , M1 , M2 , M3 , M4 , and M5",
        "questionTemplate": "What [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] was [VP_SIMPLE] by [entity] , [entity] , [entity] , [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P0 M3 .\n?x0 P0 M4 .\n?x0 P0 M5 .\n?x0 P1 M6 .\n?x0 P2 M7 .\nFILTER ( ?x0 != M7 )\n}",
        "recursionDepth": 38,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P108 wd:Q12236173 .\n?x0 wdt:P108 wd:Q21578 .\n?x0 wdt:P108 wd:Q37156 .\n?x0 wdt:P108 wd:Q180865 .\n?x0 wdt:P108 wd:Q391028 .\n?x0 wdt:P108 wd:Q640694 .\n?x0 wdt:P27 wd:Q16 .\n?x0 wdt:P26 wd:Q92711 .\nFILTER ( ?x0 != wd:Q92711 )\n}",
        "questionWithBrackets": "What Canadian spouse of [Nick Pippenger] was employed by [Harvey Mudd College] , [University of British Columbia] , [University of Alberta] , [IBM] , [University of Toronto] , and [Princeton University]"
    },
    {
        "questionIdx": 131824,
        "questionPatternModEntities": "What Canadian spouse of M6 was employed by M0 , M1 , M2 , M3 , and M4",
        "questionTemplate": "What [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] was [VP_SIMPLE] by [entity] , [entity] , [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P0 M3 .\n?x0 P0 M4 .\n?x0 P1 M5 .\n?x0 P2 M6 .\nFILTER ( ?x0 != M6 )\n}",
        "recursionDepth": 35,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P108 wd:Q391028 .\n?x0 wdt:P108 wd:Q37156 .\n?x0 wdt:P108 wd:Q12236173 .\n?x0 wdt:P108 wd:Q180865 .\n?x0 wdt:P108 wd:Q640694 .\n?x0 wdt:P27 wd:Q16 .\n?x0 wdt:P26 wd:Q92711 .\nFILTER ( ?x0 != wd:Q92711 )\n}",
        "questionWithBrackets": "What Canadian spouse of [Nick Pippenger] was employed by [University of British Columbia] , [University of Alberta] , [University of Toronto] , [IBM] , and [Harvey Mudd College]"
    },
    {
        "questionIdx": 131828,
        "questionPatternModEntities": "What Canadian spouse of M2 married M1",
        "questionTemplate": "What [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] [VP_SIMPLE] [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\nFILTER ( ?x0 != M1 ) .\nFILTER ( ?x0 != M2 )\n}",
        "recursionDepth": 21,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P27 wd:Q16 .\n?x0 wdt:P26 wd:Q75619463 .\n?x0 wdt:P26 wd:Q438472 .\nFILTER ( ?x0 != wd:Q75619463 ) .\nFILTER ( ?x0 != wd:Q438472 )\n}",
        "questionWithBrackets": "What Canadian spouse of [Irving Thalberg] married [Martin Arroug\u00e9]"
    },
    {
        "questionIdx": 131830,
        "questionPatternModEntities": "What Canadian spouse of M1 did M2 marry",
        "questionTemplate": "What [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] did [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\nFILTER ( ?x0 != M1 ) .\nFILTER ( ?x0 != M2 )\n}",
        "recursionDepth": 21,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P27 wd:Q16 .\n?x0 wdt:P26 wd:Q158175 .\n?x0 wdt:P26 wd:Q331748 .\nFILTER ( ?x0 != wd:Q158175 ) .\nFILTER ( ?x0 != wd:Q331748 )\n}",
        "questionWithBrackets": "What Canadian spouse of [Kid Rock] did [Tommy Lee] marry"
    },
    {
        "questionIdx": 131831,
        "questionPatternModEntities": "What Canadian spouse of M3 was employed by M0 and M1",
        "questionTemplate": "What [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] was [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P1 M2 .\n?x0 P2 M3 .\nFILTER ( ?x0 != M3 )\n}",
        "recursionDepth": 26,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P108 wd:Q37156 .\n?x0 wdt:P108 wd:Q21578 .\n?x0 wdt:P27 wd:Q16 .\n?x0 wdt:P26 wd:Q92711 .\nFILTER ( ?x0 != wd:Q92711 )\n}",
        "questionWithBrackets": "What Canadian spouse of [Nick Pippenger] was employed by [Princeton University] and [IBM]"
    },
    {
        "questionIdx": 132027,
        "questionPatternModEntities": "What Chinese employee of M0 married M2 , M3 , and M4",
        "questionTemplate": "What [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] [VP_SIMPLE] [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P2 M2 .\n?x0 P2 M3 .\n?x0 P2 M4 .\nFILTER ( ?x0 != M2 ) .\nFILTER ( ?x0 != M3 ) .\nFILTER ( ?x0 != M4 )\n}",
        "recursionDepth": 28,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P108 wd:Q10902170 .\n?x0 wdt:P27 wd:Q148 .\n?x0 wdt:P26 wd:Q236017 .\n?x0 wdt:P26 wd:Q272321 .\n?x0 wdt:P26 wd:Q284278 .\nFILTER ( ?x0 != wd:Q236017 ) .\nFILTER ( ?x0 != wd:Q272321 ) .\nFILTER ( ?x0 != wd:Q284278 )\n}",
        "questionWithBrackets": "What Chinese employee of [Peking University Library] married [Yang Kaihui] , [He Zizhen] , and [Jiang Qing]"
    },
    {
        "questionIdx": 132206,
        "questionPatternModEntities": "What Chinese parent of M2 was influenced by M0",
        "questionTemplate": "What [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] was [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P2 M2\n}",
        "recursionDepth": 23,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P737 wd:Q504 .\n?x0 wdt:P40|wdt:P355 wd:Q11096217 .\n?x0 wdt:P27 wd:Q148\n}",
        "questionWithBrackets": "What Chinese parent of [Li Xiaotang] was influenced by [\u00c9mile Zola]"
    },
    {
        "questionIdx": 132290,
        "questionPatternModEntities": "What Chinese sibling of M0 married M2",
        "questionTemplate": "What [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] [VP_SIMPLE] [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P2 M2 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x0 != M2 )\n}",
        "recursionDepth": 21,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P27 wd:Q148 .\n?x0 wdt:P3373 wd:Q77895 .\n?x0 wdt:P26 wd:Q434584 .\nFILTER ( ?x0 != wd:Q77895 ) .\nFILTER ( ?x0 != wd:Q434584 )\n}",
        "questionWithBrackets": "What Chinese sibling of [Pujie] married [Wenxiu]"
    },
    {
        "questionIdx": 132292,
        "questionPatternModEntities": "What Chinese sibling of M0 was M2 's spouse",
        "questionTemplate": "What [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] was [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P2 M2 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x0 != M2 )\n}",
        "recursionDepth": 22,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P27 wd:Q148 .\n?x0 wdt:P3373 wd:Q9064696 .\n?x0 wdt:P26 wd:Q16988 .\nFILTER ( ?x0 != wd:Q16988 ) .\nFILTER ( ?x0 != wd:Q9064696 )\n}",
        "questionWithBrackets": "What Chinese sibling of [Wang Guangying] was [Liu Shaoqi] 's spouse"
    },
    {
        "questionIdx": 132304,
        "questionPatternModEntities": "What Chinese spouse of M1 did M2 and M3 marry",
        "questionTemplate": "What [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] did [entity] and [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\n?x0 P1 M3 .\nFILTER ( ?x0 != M1 ) .\nFILTER ( ?x0 != M2 ) .\nFILTER ( ?x0 != M3 )\n}",
        "recursionDepth": 25,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P27 wd:Q148 .\n?x0 wdt:P26 wd:Q236017 .\n?x0 wdt:P26 wd:Q272321 .\n?x0 wdt:P26 wd:Q284278 .\nFILTER ( ?x0 != wd:Q236017 ) .\nFILTER ( ?x0 != wd:Q272321 ) .\nFILTER ( ?x0 != wd:Q284278 )\n}",
        "questionWithBrackets": "What Chinese spouse of [He Zizhen] did [Jiang Qing] and [Yang Kaihui] marry"
    },
    {
        "questionIdx": 132315,
        "questionPatternModEntities": "What Chinese spouse of M1 did M2 marry",
        "questionTemplate": "What [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] did [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\nFILTER ( ?x0 != M1 ) .\nFILTER ( ?x0 != M2 )\n}",
        "recursionDepth": 21,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P27 wd:Q148 .\n?x0 wdt:P26 wd:Q434584 .\n?x0 wdt:P26 wd:Q464563 .\nFILTER ( ?x0 != wd:Q434584 ) .\nFILTER ( ?x0 != wd:Q464563 )\n}",
        "questionWithBrackets": "What Chinese spouse of [Wenxiu] did [Empress Wanrong] marry"
    },
    {
        "questionIdx": 132426,
        "questionPatternModEntities": "What Dutch employee of M0 and M1 was influenced by M2",
        "questionTemplate": "What [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] and [entity] was [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P1 M2 .\n?x0 P2 M3\n}",
        "recursionDepth": 26,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P737 wd:Q5598 .\n?x0 wdt:P108 wd:Q586735 .\n?x0 wdt:P108 wd:Q662355 .\n?x0 wdt:P27 wd:Q29999\n}",
        "questionWithBrackets": "What Dutch employee of [San Francisco Art Institute] and [Kunstakademie D\u00fcsseldorf] was influenced by [Rembrandt]"
    },
    {
        "questionIdx": 132580,
        "questionPatternModEntities": "What Dutch sibling of M0 was employed by M1 and employed by M2",
        "questionTemplate": "What [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] was [VP_SIMPLE] by [entity] and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\n?x0 P2 M3 .\nFILTER ( ?x0 != M0 )\n}",
        "recursionDepth": 33,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P108 wd:Q156598 .\n?x0 wdt:P108 wd:Q633529 .\n?x0 wdt:P27 wd:Q29999 .\n?x0 wdt:P3373 wd:Q153890 .\nFILTER ( ?x0 != wd:Q153890 )\n}",
        "questionWithBrackets": "What Dutch sibling of [Niko Tinbergen] was employed by [Erasmus University Rotterdam] and employed by [Leiden University]"
    },
    {
        "questionIdx": 132582,
        "questionPatternModEntities": "What Dutch sibling of M0 was influenced by M1 , M2 , and M3",
        "questionTemplate": "What [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] was [VP_SIMPLE] by [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\n?x0 P1 M3 .\n?x0 P2 M4 .\nFILTER ( ?x0 != M0 )\n}",
        "recursionDepth": 29,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P737 wd:Q35548 .\n?x0 wdt:P737 wd:Q148458 .\n?x0 wdt:P737 wd:Q591907 .\n?x0 wdt:P27 wd:Q29999 .\n?x0 wdt:P3373 wd:Q317188 .\nFILTER ( ?x0 != wd:Q317188 )\n}",
        "questionWithBrackets": "What Dutch sibling of [Theo van Gogh] was influenced by [Anton Mauve] , [Jean-Fran\u00e7ois Millet] , and [Paul C\u00e9zanne]"
    },
    {
        "questionIdx": 132590,
        "questionPatternModEntities": "What Dutch spouse of M2 was M0 's sibling",
        "questionTemplate": "What [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] was [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P2 M2 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x0 != M2 )\n}",
        "recursionDepth": 22,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P27 wd:Q29999 .\n?x0 wdt:P3373 wd:Q57440 .\n?x0 wdt:P26 wd:Q125649 .\nFILTER ( ?x0 != wd:Q125649 ) .\nFILTER ( ?x0 != wd:Q57440 )\n}",
        "questionWithBrackets": "What Dutch spouse of [William III of the Netherlands] was [Charles I of W\u00fcrttemberg] 's sibling"
    },
    {
        "questionIdx": 132597,
        "questionPatternModEntities": "What Dutch spouse of M3 was employed by M0 and employed by M1",
        "questionTemplate": "What [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] was [VP_SIMPLE] by [entity] and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P1 M2 .\n?x0 P2 M3 .\nFILTER ( ?x0 != M3 )\n}",
        "recursionDepth": 33,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P108 wd:Q156598 .\n?x0 wdt:P108 wd:Q1137665 .\n?x0 wdt:P27 wd:Q29999 .\n?x0 wdt:P26 wd:Q20017511 .\nFILTER ( ?x0 != wd:Q20017511 )\n}",
        "questionWithBrackets": "What Dutch spouse of [Adelheid Ernestine Caroline Henri\u00ebtte Solger] was employed by [Ghent University] and employed by [Leiden University]"
    },
    {
        "questionIdx": 132638,
        "questionPatternModEntities": "What French Spanish sibling of M0 was M3 's parent",
        "questionTemplate": "What [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] was [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\n?x0 P2 M3 .\nFILTER ( ?x0 != M0 )\n}",
        "recursionDepth": 27,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q1465751 .\n?x0 wdt:P27 wd:Q29 .\n?x0 wdt:P27 wd:Q142 .\n?x0 wdt:P3373 wd:Q7732 .\nFILTER ( ?x0 != wd:Q7732 )\n}",
        "questionWithBrackets": "What French Spanish sibling of [Louis XVI of France] was [Louis Antoine, Duke of Angoul\u00eame] 's parent"
    },
    {
        "questionIdx": 132869,
        "questionPatternModEntities": "What French employee of M0 , M1 , M2 , and M3 was influenced by M4",
        "questionTemplate": "What [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] , [entity] , [entity] , and [entity] was [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P0 M3 .\n?x0 P1 M4 .\n?x0 P2 M5\n}",
        "recursionDepth": 33,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P737 wd:Q767 .\n?x0 wdt:P108 wd:Q2496149 .\n?x0 wdt:P108 wd:Q83259 .\n?x0 wdt:P108 wd:Q1194988 .\n?x0 wdt:P108 wd:Q681250 .\n?x0 wdt:P27 wd:Q142\n}",
        "questionWithBrackets": "What French employee of [European Graduate School] , [Paris 8 University] , [\u00c9cole normale sup\u00e9rieure] , and [University of Reims] was influenced by [St\u00e9phane Mallarm\u00e9]"
    },
    {
        "questionIdx": 133149,
        "questionPatternModEntities": "What French sibling of M0 was influenced by M1 and influenced by M2",
        "questionTemplate": "What [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] was [VP_SIMPLE] by [entity] and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\n?x0 P2 M3 .\nFILTER ( ?x0 != M0 )\n}",
        "recursionDepth": 33,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P737 wd:Q868 .\n?x0 wdt:P737 wd:Q188663 .\n?x0 wdt:P27 wd:Q142 .\n?x0 wdt:P3373 wd:Q3384718 .\nFILTER ( ?x0 != wd:Q3384718 )\n}",
        "questionWithBrackets": "What French sibling of [Pierre Descartes] was influenced by [Marin Mersenne] and influenced by [Aristotle]"
    },
    {
        "questionIdx": 133172,
        "questionPatternModEntities": "What French spouse of M2 was employed by M0",
        "questionTemplate": "What [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] was [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P2 M2 .\nFILTER ( ?x0 != M2 )\n}",
        "recursionDepth": 22,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P108 wd:Q209842 .\n?x0 wdt:P27 wd:Q142 .\n?x0 wdt:P26 wd:Q37463 .\nFILTER ( ?x0 != wd:Q37463 )\n}",
        "questionWithBrackets": "What French spouse of [Pierre Curie] was employed by [University of Paris]"
    },
    {
        "questionIdx": 133178,
        "questionPatternModEntities": "What French spouse of M3 was influenced by M0 and was influenced by M1",
        "questionTemplate": "What [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] was [VP_SIMPLE] by [entity] and was [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P1 M2 .\n?x0 P2 M3 .\nFILTER ( ?x0 != M3 )\n}",
        "recursionDepth": 36,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P737 wd:Q692 .\n?x0 wdt:P737 wd:Q868 .\n?x0 wdt:P27 wd:Q142 .\n?x0 wdt:P26 wd:Q1047458 .\nFILTER ( ?x0 != wd:Q1047458 )\n}",
        "questionWithBrackets": "What French spouse of [Casimir Dudevant] was influenced by [Aristotle] and was influenced by [William Shakespeare]"
    },
    {
        "questionIdx": 133400,
        "questionPatternModEntities": "What German female employee of M0 was employed by M1 and M2",
        "questionTemplate": "What [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] was [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P1 M3 .\n?x0 P2 M4\n}",
        "recursionDepth": 31,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P108 wd:Q32120 .\n?x0 wdt:P108 wd:Q51985 .\n?x0 wdt:P108 wd:Q273263 .\n?x0 wdt:P21 wd:Q6581072 .\n?x0 wdt:P27 wd:Q183\n}",
        "questionWithBrackets": "What German female employee of [University of Halle-Wittenberg] was employed by [RWTH Aachen University] and [Technical University of Berlin]"
    },
    {
        "questionIdx": 133408,
        "questionPatternModEntities": "What German female sibling of M0 did M1 influence",
        "questionTemplate": "What [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] did [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P2 M2 .\n?x0 P3 M3 .\nFILTER ( ?x0 != M0 )\n}",
        "recursionDepth": 26,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P737 wd:Q44252 .\n?x0 wdt:P21 wd:Q6581072 .\n?x0 wdt:P27 wd:Q183 .\n?x0 wdt:P3373 wd:Q1126986 .\nFILTER ( ?x0 != wd:Q1126986 )\n}",
        "questionWithBrackets": "What German female sibling of [Conrad Schmidt] did [Max Klinger] influence"
    },
    {
        "questionIdx": 133409,
        "questionPatternModEntities": "What German female sibling of M0 did M1 , M2 , and M3 employ",
        "questionTemplate": "What [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] did [entity] , [entity] , and [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\n?x0 P1 M3 .\n?x0 P2 M4 .\n?x0 P3 M5 .\nFILTER ( ?x0 != M0 )\n}",
        "recursionDepth": 33,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P108 wd:Q40025 .\n?x0 wdt:P108 wd:Q152838 .\n?x0 wdt:P108 wd:Q995265 .\n?x0 wdt:P21 wd:Q6581072 .\n?x0 wdt:P27 wd:Q183 .\n?x0 wdt:P3373 wd:Q68527 .\nFILTER ( ?x0 != wd:Q68527 )\n}",
        "questionWithBrackets": "What German female sibling of [Fritz Noether] did [University of G\u00f6ttingen] , [University of Erlangen-Nuremberg] , and [Bryn Mawr College] employ"
    },
    {
        "questionIdx": 133413,
        "questionPatternModEntities": "What German female spouse of M3 was a sibling of M0",
        "questionTemplate": "What [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] was a [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P2 M2 .\n?x0 P3 M3 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x0 != M3 )\n}",
        "recursionDepth": 29,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P21 wd:Q6581072 .\n?x0 wdt:P27 wd:Q183 .\n?x0 wdt:P3373 wd:Q20534415 .\n?x0 wdt:P26 wd:Q57066 .\nFILTER ( ?x0 != wd:Q20534415 ) .\nFILTER ( ?x0 != wd:Q57066 )\n}",
        "questionWithBrackets": "What German female spouse of [James Franck] was a sibling of [Margot Sponer]"
    },
    {
        "questionIdx": 133555,
        "questionPatternModEntities": "What German sibling of M0 married M2",
        "questionTemplate": "What [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] [VP_SIMPLE] [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P2 M2 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x0 != M2 )\n}",
        "recursionDepth": 21,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P27 wd:Q183 .\n?x0 wdt:P3373 wd:Q98500 .\n?x0 wdt:P26 wd:Q1662928 .\nFILTER ( ?x0 != wd:Q98500 ) .\nFILTER ( ?x0 != wd:Q1662928 )\n}",
        "questionWithBrackets": "What German sibling of [Thomas Sch\u00e4uble] married [Ingeborg Sch\u00e4uble]"
    },
    {
        "questionIdx": 133557,
        "questionPatternModEntities": "What German sibling of M0 married M2 , M3 , and M4 and married M5",
        "questionTemplate": "What [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] [VP_SIMPLE] [entity] , [entity] , and [entity] and [VP_SIMPLE] [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P2 M2 .\n?x0 P2 M3 .\n?x0 P2 M4 .\n?x0 P2 M5 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x0 != M2 ) .\nFILTER ( ?x0 != M3 ) .\nFILTER ( ?x0 != M4 ) .\nFILTER ( ?x0 != M5 )\n}",
        "recursionDepth": 39,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P27 wd:Q183 .\n?x0 wdt:P3373 wd:Q64495 .\n?x0 wdt:P26 wd:Q91737 .\n?x0 wdt:P26 wd:Q528613 .\n?x0 wdt:P26 wd:Q18211123 .\n?x0 wdt:P26 wd:Q6334303 .\nFILTER ( ?x0 != wd:Q91737 ) .\nFILTER ( ?x0 != wd:Q528613 ) .\nFILTER ( ?x0 != wd:Q18211123 ) .\nFILTER ( ?x0 != wd:Q6334303 ) .\nFILTER ( ?x0 != wd:Q64495 )\n}",
        "questionWithBrackets": "What German sibling of [John George II, Duke of Saxe-Eisenach] married [Amalie of Nassau-Dietz] , [Marie Christine Felizitas of Leiningen-Dagsburg-Falkenburg-Heidesheim] , and [Christine Juliane of Baden-Durlach] and married [Magdalene Sibylle of Saxe-Weissenfels]"
    },
    {
        "questionIdx": 133558,
        "questionPatternModEntities": "What German sibling of M0 was employed by M1 , M2 , and M3 and employed by M4 and M5",
        "questionTemplate": "What [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] was [VP_SIMPLE] by [entity] , [entity] , and [entity] and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\n?x0 P1 M3 .\n?x0 P1 M4 .\n?x0 P1 M5 .\n?x0 P2 M6 .\nFILTER ( ?x0 != M0 )\n}",
        "recursionDepth": 44,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P108 wd:Q152171 .\n?x0 wdt:P108 wd:Q55044 .\n?x0 wdt:P108 wd:Q153978 .\n?x0 wdt:P108 wd:Q574571 .\n?x0 wdt:P108 wd:Q168426 .\n?x0 wdt:P27 wd:Q183 .\n?x0 wdt:P3373 wd:Q61907 .\nFILTER ( ?x0 != wd:Q61907 )\n}",
        "questionWithBrackets": "What German sibling of [Georg Ratzinger] was employed by [University of T\u00fcbingen] , [University of M\u00fcnster] , and [University of Bonn] and employed by [University of Regensburg] and [Ludwig Maximilian University of Munich]"
    },
    {
        "questionIdx": 133568,
        "questionPatternModEntities": "What German spouse of M1 did M2 marry",
        "questionTemplate": "What [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] did [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\nFILTER ( ?x0 != M1 ) .\nFILTER ( ?x0 != M2 )\n}",
        "recursionDepth": 21,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P27 wd:Q183 .\n?x0 wdt:P26 wd:Q61450 .\n?x0 wdt:P26 wd:Q266142 .\nFILTER ( ?x0 != wd:Q61450 ) .\nFILTER ( ?x0 != wd:Q266142 )\n}",
        "questionWithBrackets": "What German spouse of [Princess Antonia of Luxembourg] did [Duchess Marie Gabrielle in Bavaria] marry"
    },
    {
        "questionIdx": 133571,
        "questionPatternModEntities": "What German spouse of M5 was influenced by M0 and influenced by M1 , M2 , and M3",
        "questionTemplate": "What [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] was [VP_SIMPLE] by [entity] and [VP_SIMPLE] by [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P0 M3 .\n?x0 P1 M4 .\n?x0 P2 M5 .\nFILTER ( ?x0 != M5 )\n}",
        "recursionDepth": 40,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P737 wd:Q859 .\n?x0 wdt:P737 wd:Q6527 .\n?x0 wdt:P737 wd:Q9191 .\n?x0 wdt:P737 wd:Q868 .\n?x0 wdt:P27 wd:Q183 .\n?x0 wdt:P26 wd:Q22340304 .\nFILTER ( ?x0 != wd:Q22340304 )\n}",
        "questionWithBrackets": "What German spouse of [Marie von Tucher] was influenced by [Aristotle] and influenced by [Jean-Jacques Rousseau] , [Ren\u00e9 Descartes] , and [Plato]"
    },
    {
        "questionIdx": 133573,
        "questionPatternModEntities": "What German spouse of M1 did M2 and M3 marry",
        "questionTemplate": "What [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] did [entity] and [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\n?x0 P1 M3 .\nFILTER ( ?x0 != M1 ) .\nFILTER ( ?x0 != M2 ) .\nFILTER ( ?x0 != M3 )\n}",
        "recursionDepth": 25,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P27 wd:Q183 .\n?x0 wdt:P26 wd:Q69178 .\n?x0 wdt:P26 wd:Q1827951 .\n?x0 wdt:P26 wd:Q15192629 .\nFILTER ( ?x0 != wd:Q69178 ) .\nFILTER ( ?x0 != wd:Q1827951 ) .\nFILTER ( ?x0 != wd:Q15192629 )\n}",
        "questionWithBrackets": "What German spouse of [Liselotte Orff] did [Luise Rinser] and [Gertrud Orff] marry"
    },
    {
        "questionIdx": 133575,
        "questionPatternModEntities": "What German spouse of M4 did M0 , M1 , and M2 influence",
        "questionTemplate": "What [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] did [entity] , [entity] , and [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P1 M3 .\n?x0 P2 M4 .\nFILTER ( ?x0 != M4 )\n}",
        "recursionDepth": 28,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P737 wd:Q859 .\n?x0 wdt:P737 wd:Q271809 .\n?x0 wdt:P737 wd:Q76576 .\n?x0 wdt:P27 wd:Q183 .\n?x0 wdt:P26 wd:Q22340304 .\nFILTER ( ?x0 != wd:Q22340304 )\n}",
        "questionWithBrackets": "What German spouse of [Marie von Tucher] did [Plato] , [Friedrich Schleiermacher] , and [Proclus] influence"
    },
    {
        "questionIdx": 133576,
        "questionPatternModEntities": "What German spouse of M2 was influenced by M0",
        "questionTemplate": "What [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] was [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P2 M2 .\nFILTER ( ?x0 != M2 )\n}",
        "recursionDepth": 23,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P737 wd:Q859 .\n?x0 wdt:P27 wd:Q183 .\n?x0 wdt:P26 wd:Q22340304 .\nFILTER ( ?x0 != wd:Q22340304 )\n}",
        "questionWithBrackets": "What German spouse of [Marie von Tucher] was influenced by [Plato]"
    },
    {
        "questionIdx": 133581,
        "questionPatternModEntities": "What German spouse of M4 did M0 , M1 , and M2 employ",
        "questionTemplate": "What [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] did [entity] , [entity] , and [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P1 M3 .\n?x0 P2 M4 .\nFILTER ( ?x0 != M4 )\n}",
        "recursionDepth": 28,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P108 wd:Q152087 .\n?x0 wdt:P108 wd:Q152838 .\n?x0 wdt:P108 wd:Q315658 .\n?x0 wdt:P27 wd:Q183 .\n?x0 wdt:P26 wd:Q95404 .\nFILTER ( ?x0 != wd:Q95404 )\n}",
        "questionWithBrackets": "What German spouse of [Rebecka Mendelssohn] did [University of G\u00f6ttingen] , [Humboldt University of Berlin] , and [University of Wroc\u0142aw] employ"
    },
    {
        "questionIdx": 134048,
        "questionPatternModEntities": "What Italian sibling of M0 was influenced by M1 and influenced by M2",
        "questionTemplate": "What [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] was [VP_SIMPLE] by [entity] and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\n?x0 P2 M3 .\nFILTER ( ?x0 != M0 )\n}",
        "recursionDepth": 33,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P737 wd:Q36591 .\n?x0 wdt:P737 wd:Q1512 .\n?x0 wdt:P27 wd:Q38 .\n?x0 wdt:P3373 wd:Q17141899 .\nFILTER ( ?x0 != wd:Q17141899 )\n}",
        "questionWithBrackets": "What Italian sibling of [Floriano Calvino] was influenced by [Vladimir Nabokov] and influenced by [Robert Louis Stevenson]"
    },
    {
        "questionIdx": 134061,
        "questionPatternModEntities": "What Italian sibling of M0 played M2",
        "questionTemplate": "What [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] [VP_SIMPLE] [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P2 M2 .\nFILTER ( ?x0 != M0 )\n}",
        "recursionDepth": 21,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P453 wd:Q5815108 .\n?x0 wdt:P27 wd:Q38 .\n?x0 wdt:P3373 wd:Q3756757 .\nFILTER ( ?x0 != wd:Q3756757 )\n}",
        "questionWithBrackets": "What Italian sibling of [Gabriella Pavarotti] played [Duke of Mantua]"
    },
    {
        "questionIdx": 134127,
        "questionPatternModEntities": "What Japanese actor of M1 was M2 's actor",
        "questionTemplate": "What [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] was [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P1 M2\n}",
        "recursionDepth": 22,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P453 wd:Q1945499 .\n?x0 wdt:P453 wd:Q65115227 .\n?x0 wdt:P27 wd:Q17\n}",
        "questionWithBrackets": "What Japanese actor of [Meia Gisborn] was [Chun-Li] 's actor"
    },
    {
        "questionIdx": 134291,
        "questionPatternModEntities": "What Japanese employee of M0 and M1 married M4 and was influenced by M2",
        "questionTemplate": "What [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] and [entity] [VP_SIMPLE] [entity] and was [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P1 M2 .\n?x0 P2 M3 .\n?x0 P3 M4 .\nFILTER ( ?x0 != M4 )\n}",
        "recursionDepth": 38,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P737 wd:Q8753 .\n?x0 wdt:P108 wd:Q651233 .\n?x0 wdt:P108 wd:Q7842 .\n?x0 wdt:P27 wd:Q17 .\n?x0 wdt:P26 wd:Q11563533 .\nFILTER ( ?x0 != wd:Q11563533 )\n}",
        "questionWithBrackets": "What Japanese employee of [Osaka University] and [University of Tokyo] married [Sumi Yukawa] and was influenced by [Enrico Fermi]"
    },
    {
        "questionIdx": 134475,
        "questionPatternModEntities": "What Japanese parent of M3 did M0 and M1 influence",
        "questionTemplate": "What [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] did [entity] and [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P1 M2 .\n?x0 P2 M3\n}",
        "recursionDepth": 25,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P737 wd:Q7724 .\n?x0 wdt:P737 wd:Q81731 .\n?x0 wdt:P40|wdt:P355 wd:Q11482621 .\n?x0 wdt:P27 wd:Q17\n}",
        "questionWithBrackets": "What Japanese parent of [Noriko Hiraoka] did [Murasaki Shikibu] and [August Strindberg] influence"
    },
    {
        "questionIdx": 134564,
        "questionPatternModEntities": "What Japanese sibling of M0 was employed by M1 , M2 , and M3",
        "questionTemplate": "What [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] was [VP_SIMPLE] by [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\n?x0 P1 M3 .\n?x0 P2 M4 .\nFILTER ( ?x0 != M0 )\n}",
        "recursionDepth": 29,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P108 wd:Q276599 .\n?x0 wdt:P108 wd:Q11424955 .\n?x0 wdt:P108 wd:Q3789149 .\n?x0 wdt:P27 wd:Q17 .\n?x0 wdt:P3373 wd:Q11534178 .\nFILTER ( ?x0 != wd:Q11534178 )\n}",
        "questionWithBrackets": "What Japanese sibling of [Munetami Yanagi] was employed by [Japanese Folk Crafts Museum] , [Sakakura Associates Architects and Engineers] , and [Kanazawa College of Art]"
    },
    {
        "questionIdx": 134565,
        "questionPatternModEntities": "What Japanese sibling of M0 was employed by M1 and employed by M2",
        "questionTemplate": "What [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] was [VP_SIMPLE] by [entity] and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\n?x0 P2 M3 .\nFILTER ( ?x0 != M0 )\n}",
        "recursionDepth": 33,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P108 wd:Q7842 .\n?x0 wdt:P108 wd:Q336264 .\n?x0 wdt:P27 wd:Q17 .\n?x0 wdt:P3373 wd:Q11460540 .\nFILTER ( ?x0 != wd:Q11460540 )\n}",
        "questionWithBrackets": "What Japanese sibling of [Tamaki Ogawa] was employed by [Kyoto University] and employed by [University of Tokyo]"
    },
    {
        "questionIdx": 134571,
        "questionPatternModEntities": "What Japanese sibling of M0 was influenced by M1",
        "questionTemplate": "What [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] was [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P2 M2 .\nFILTER ( ?x0 != M0 )\n}",
        "recursionDepth": 23,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P737 wd:Q11036 .\n?x0 wdt:P27 wd:Q17 .\n?x0 wdt:P3373 wd:Q11518689 .\nFILTER ( ?x0 != wd:Q11518689 )\n}",
        "questionWithBrackets": "What Japanese sibling of [Shunsaku Kimura] was influenced by [The Rolling Stones]"
    },
    {
        "questionIdx": 134577,
        "questionPatternModEntities": "What Japanese spouse of M2 married M1",
        "questionTemplate": "What [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] [VP_SIMPLE] [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\nFILTER ( ?x0 != M1 ) .\nFILTER ( ?x0 != M2 )\n}",
        "recursionDepth": 21,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P27 wd:Q17 .\n?x0 wdt:P26 wd:Q838180 .\n?x0 wdt:P26 wd:Q1045995 .\nFILTER ( ?x0 != wd:Q838180 ) .\nFILTER ( ?x0 != wd:Q1045995 )\n}",
        "questionWithBrackets": "What Japanese spouse of [Asahihime] married [Saig\u014d]"
    },
    {
        "questionIdx": 134581,
        "questionPatternModEntities": "What Japanese spouse of M1 was M2 's spouse",
        "questionTemplate": "What [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] was [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\nFILTER ( ?x0 != M1 ) .\nFILTER ( ?x0 != M2 )\n}",
        "recursionDepth": 22,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P27 wd:Q17 .\n?x0 wdt:P26 wd:Q3546783 .\n?x0 wdt:P26 wd:Q11548763 .\nFILTER ( ?x0 != wd:Q3546783 ) .\nFILTER ( ?x0 != wd:Q11548763 )\n}",
        "questionWithBrackets": "What Japanese spouse of [Y\u014dko Mizuki] was [Kaoru Yachigusa] 's spouse"
    },
    {
        "questionIdx": 134582,
        "questionPatternModEntities": "What Japanese spouse of M2 was employed by M0",
        "questionTemplate": "What [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] was [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P2 M2 .\nFILTER ( ?x0 != M2 )\n}",
        "recursionDepth": 23,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P108 wd:Q8093 .\n?x0 wdt:P27 wd:Q17 .\n?x0 wdt:P26 wd:Q12959049 .\nFILTER ( ?x0 != wd:Q12959049 )\n}",
        "questionWithBrackets": "What Japanese spouse of [Yasuko Miyamoto] was employed by [Nintendo]"
    },
    {
        "questionIdx": 134583,
        "questionPatternModEntities": "What Japanese spouse of M5 was employed by M0 , M1 , M2 , and M3",
        "questionTemplate": "What [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] was [VP_SIMPLE] by [entity] , [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P0 M3 .\n?x0 P1 M4 .\n?x0 P2 M5 .\nFILTER ( ?x0 != M5 )\n}",
        "recursionDepth": 32,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P108 wd:Q651233 .\n?x0 wdt:P108 wd:Q7842 .\n?x0 wdt:P108 wd:Q336264 .\n?x0 wdt:P108 wd:Q49088 .\n?x0 wdt:P27 wd:Q17 .\n?x0 wdt:P26 wd:Q11563533 .\nFILTER ( ?x0 != wd:Q11563533 )\n}",
        "questionWithBrackets": "What Japanese spouse of [Sumi Yukawa] was employed by [University of Tokyo] , [Osaka University] , [Kyoto University] , and [Columbia University]"
    },
    {
        "questionIdx": 134585,
        "questionPatternModEntities": "What Japanese spouse of M1 did M2 marry and M3 marry",
        "questionTemplate": "What [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] did [entity] [VP_SIMPLE] and [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\n?x0 P1 M3 .\nFILTER ( ?x0 != M1 ) .\nFILTER ( ?x0 != M2 ) .\nFILTER ( ?x0 != M3 )\n}",
        "recursionDepth": 32,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P27 wd:Q17 .\n?x0 wdt:P26 wd:Q5507520 .\n?x0 wdt:P26 wd:Q106399074 .\n?x0 wdt:P26 wd:Q900258 .\nFILTER ( ?x0 != wd:Q5507520 ) .\nFILTER ( ?x0 != wd:Q106399074 ) .\nFILTER ( ?x0 != wd:Q900258 )\n}",
        "questionWithBrackets": "What Japanese spouse of [No label defined] did [Fujiwara no Tamako] marry and [Fujiwara no Kenshi] marry"
    },
    {
        "questionIdx": 134586,
        "questionPatternModEntities": "What Japanese spouse of M4 did M0 , M1 , and M2 influence",
        "questionTemplate": "What [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] did [entity] , [entity] , and [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P1 M3 .\n?x0 P2 M4 .\nFILTER ( ?x0 != M4 )\n}",
        "recursionDepth": 28,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P737 wd:Q7199 .\n?x0 wdt:P737 wd:Q991 .\n?x0 wdt:P737 wd:Q183492 .\n?x0 wdt:P27 wd:Q17 .\n?x0 wdt:P26 wd:Q41621995 .\nFILTER ( ?x0 != wd:Q41621995 )\n}",
        "questionWithBrackets": "What Japanese spouse of [Lorna MacDougall] did [Fyodor Dostoyevsky] , [Marcel Proust] , and [Margaret Atwood] influence"
    },
    {
        "questionIdx": 135034,
        "questionPatternModEntities": "What Mexican spouse of M2 was employed by M0",
        "questionTemplate": "What [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] was [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P2 M2 .\nFILTER ( ?x0 != M2 )\n}",
        "recursionDepth": 22,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P108 wd:Q222738 .\n?x0 wdt:P27 wd:Q96 .\n?x0 wdt:P26 wd:Q1287576 .\nFILTER ( ?x0 != wd:Q1287576 )\n}",
        "questionWithBrackets": "What Mexican spouse of [Ricardo Guerra Tejada] was employed by [National Autonomous University of Mexico]"
    },
    {
        "questionIdx": 135045,
        "questionPatternModEntities": "What Mexican spouse of M5 did M0 employ and M1 , M2 , and M3 employ",
        "questionTemplate": "What [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] did [entity] [VP_SIMPLE] and [entity] , [entity] , and [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P0 M3 .\n?x0 P1 M4 .\n?x0 P2 M5 .\nFILTER ( ?x0 != M5 )\n}",
        "recursionDepth": 39,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P108 wd:Q49114 .\n?x0 wdt:P108 wd:Q49088 .\n?x0 wdt:P108 wd:Q49117 .\n?x0 wdt:P108 wd:Q13371 .\n?x0 wdt:P27 wd:Q96 .\n?x0 wdt:P26 wd:Q6109133 .\nFILTER ( ?x0 != wd:Q6109133 )\n}",
        "questionWithBrackets": "What Mexican spouse of [Rita Macedo] did [Columbia University] employ and [Brown University] , [Harvard University] , and [University of Pennsylvania] employ"
    },
    {
        "questionIdx": 135271,
        "questionPatternModEntities": "What Spanish employee of M0 was influenced by M1 , M2 , and M3",
        "questionTemplate": "What [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] was [VP_SIMPLE] by [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\n?x0 P1 M3 .\n?x0 P2 M4\n}",
        "recursionDepth": 29,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P737 wd:Q448 .\n?x0 wdt:P737 wd:Q184226 .\n?x0 wdt:P737 wd:Q212639 .\n?x0 wdt:P108 wd:Q3042433 .\n?x0 wdt:P27 wd:Q29\n}",
        "questionWithBrackets": "What Spanish employee of [Open University of Catalonia] was influenced by [Maurice Merleau-Ponty] , [Gilles Deleuze] , and [Denis Diderot]"
    },
    {
        "questionIdx": 135495,
        "questionPatternModEntities": "What Spanish sibling of M0 was a employee of M1 and M2",
        "questionTemplate": "What [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] was a [ROLE_SIMPLE] of [entity] and [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\n?x0 P2 M3 .\nFILTER ( ?x0 != M0 )\n}",
        "recursionDepth": 28,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P108 wd:Q131252 .\n?x0 wdt:P108 wd:Q219615 .\n?x0 wdt:P27 wd:Q29 .\n?x0 wdt:P3373 wd:Q9016932 .\nFILTER ( ?x0 != wd:Q9016932 )\n}",
        "questionWithBrackets": "What Spanish sibling of [J\u00falia Coromines i Vigneaux] was a employee of [University of Barcelona] and [University of Chicago]"
    },
    {
        "questionIdx": 135527,
        "questionPatternModEntities": "What Spanish spouse of M4 was influenced by M0 , influenced by M1 , and influenced by M2",
        "questionTemplate": "What [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] was [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P1 M3 .\n?x0 P2 M4 .\nFILTER ( ?x0 != M4 )\n}",
        "recursionDepth": 42,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P737 wd:Q449 .\n?x0 wdt:P737 wd:Q320146 .\n?x0 wdt:P737 wd:Q981236 .\n?x0 wdt:P27 wd:Q29 .\n?x0 wdt:P26 wd:Q28530644 .\nFILTER ( ?x0 != wd:Q28530644 )\n}",
        "questionWithBrackets": "What Spanish spouse of [Juana de Grandes] was influenced by [Georges Brassens] , influenced by [L\u00e9o Ferr\u00e9] , and influenced by [Paco Ib\u00e1\u00f1ez]"
    },
    {
        "questionIdx": 135571,
        "questionPatternModEntities": "What Swedish actor played M1",
        "questionTemplate": "What [ADJECTIVE_SIMPLE] [NP_SIMPLE] [VP_SIMPLE] [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1\n}",
        "recursionDepth": 18,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P453 wd:Q10518313 .\n?x0 wdt:P27 wd:Q34\n}LIMIT 1",
        "questionWithBrackets": "What Swedish actor played [No label defined]"
    },
    {
        "questionIdx": 135970,
        "questionPatternModEntities": "What Swedish sibling of M0 married M2 , M3 , and M4",
        "questionTemplate": "What [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] [VP_SIMPLE] [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P2 M2 .\n?x0 P2 M3 .\n?x0 P2 M4 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x0 != M2 ) .\nFILTER ( ?x0 != M3 ) .\nFILTER ( ?x0 != M4 )\n}",
        "recursionDepth": 28,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P27 wd:Q34 .\n?x0 wdt:P3373 wd:Q18918008 .\n?x0 wdt:P26 wd:Q4938547 .\n?x0 wdt:P26 wd:Q4975453 .\n?x0 wdt:P26 wd:Q15695053 .\nFILTER ( ?x0 != wd:Q4938547 ) .\nFILTER ( ?x0 != wd:Q4975453 ) .\nFILTER ( ?x0 != wd:Q18918008 ) .\nFILTER ( ?x0 != wd:Q15695053 )\n}",
        "questionWithBrackets": "What Swedish sibling of [Dag Bergman] married [Ingrid von Rosen] , [Gun Bergman] , and [Ellen Bergman]"
    },
    {
        "questionIdx": 135971,
        "questionPatternModEntities": "What Swedish sibling of M0 married M2 and M3 and was influenced by M5 's male parent",
        "questionTemplate": "What [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] [VP_SIMPLE] [entity] and [entity] and was [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 ?x1 .\n?x0 P2 M1 .\n?x0 P3 M2 .\n?x0 P3 M3 .\n?x1 P4 M4 .\n?x1 P5 M5 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x0 != M2 ) .\nFILTER ( ?x0 != M3 )\n}",
        "recursionDepth": 47,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P737 ?x1 .\n?x0 wdt:P27 wd:Q34 .\n?x0 wdt:P3373 wd:Q6192533 .\n?x0 wdt:P26 wd:Q1807081 .\n?x0 wdt:P26 wd:Q79179 .\n?x1 wdt:P40|wdt:P355 wd:Q2621911 .\n?x1 wdt:P21 wd:Q6581097 .\nFILTER ( ?x0 != wd:Q1807081 ) .\nFILTER ( ?x0 != wd:Q79179 ) .\nFILTER ( ?x0 != wd:Q6192533 )\n}",
        "questionWithBrackets": "What Swedish sibling of [Carl Axel Strindberg] married [Frida Uhl] and [Harriet Bosse] and was influenced by [Sigurd Ibsen] 's male parent"
    },
    {
        "questionIdx": 135986,
        "questionPatternModEntities": "What Swedish spouse of M2 was employed by M0",
        "questionTemplate": "What [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] was [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P2 M2 .\nFILTER ( ?x0 != M2 )\n}",
        "recursionDepth": 22,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P108 wd:Q221645 .\n?x0 wdt:P27 wd:Q34 .\n?x0 wdt:P26 wd:Q181624 .\nFILTER ( ?x0 != wd:Q181624 )\n}",
        "questionWithBrackets": "What Swedish spouse of [Vladimir Kovalevsky] was employed by [Stockholm University]"
    },
    {
        "questionIdx": 136322,
        "questionPatternModEntities": "What actor of M1 did M0 employ",
        "questionTemplate": "What [ROLE_SIMPLE] of [entity] did [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1\n}",
        "recursionDepth": 16,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P453 wd:Q9054901 .\n?x0 wdt:P108 wd:Q207028\n}",
        "questionWithBrackets": "What actor of [Pamina] did [Mariinsky Theatre] employ"
    },
    {
        "questionIdx": 136397,
        "questionPatternModEntities": "What actor of M0 was M1 's spouse",
        "questionTemplate": "What [ROLE_SIMPLE] of [entity] was [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M1 )\n}",
        "recursionDepth": 17,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P453 wd:Q12742668 .\n?x0 wdt:P26 wd:Q50896 .\nFILTER ( ?x0 != wd:Q50896 )\n}",
        "questionWithBrackets": "What actor of [Princess Turandot] was [Pippo Baudo] 's spouse"
    },
    {
        "questionIdx": 136405,
        "questionPatternModEntities": "What actor of M0 was a male spouse of M2",
        "questionTemplate": "What [ROLE_SIMPLE] of [entity] was a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P2 M2 .\nFILTER ( ?x0 != M2 )\n}",
        "recursionDepth": 24,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P453 wd:Q50807639 .\n?x0 wdt:P21 wd:Q6581097 .\n?x0 wdt:P26 wd:Q1560129 .\nFILTER ( ?x0 != wd:Q1560129 )\n}",
        "questionWithBrackets": "What actor of [Lohengrin] was a male spouse of [Margarete Joswig]"
    },
    {
        "questionIdx": 136411,
        "questionPatternModEntities": "What actor of M0 was a female spouse of M2",
        "questionTemplate": "What [ROLE_SIMPLE] of [entity] was a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P2 M2 .\nFILTER ( ?x0 != M2 )\n}",
        "recursionDepth": 24,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P453 wd:Q222573 .\n?x0 wdt:P21 wd:Q6581072 .\n?x0 wdt:P26 wd:Q192482 .\nFILTER ( ?x0 != wd:Q192482 )\n}",
        "questionWithBrackets": "What actor of [femme fatale] was a female spouse of [Telemachus]"
    },
    {
        "questionIdx": 136438,
        "questionPatternModEntities": "What actor of M1 was M0 's employee",
        "questionTemplate": "What [ROLE_SIMPLE] of [entity] was [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1\n}",
        "recursionDepth": 17,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P453 wd:Q9054901 .\n?x0 wdt:P108 wd:Q207028\n}",
        "questionWithBrackets": "What actor of [Pamina] was [Mariinsky Theatre] 's employee"
    },
    {
        "questionIdx": 136465,
        "questionPatternModEntities": "What actor of M0 did M1 marry",
        "questionTemplate": "What [ROLE_SIMPLE] of [entity] did [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M1 )\n}",
        "recursionDepth": 16,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P453 wd:Q222573 .\n?x0 wdt:P26 wd:Q192482 .\nFILTER ( ?x0 != wd:Q192482 )\n}",
        "questionWithBrackets": "What actor of [femme fatale] did [Telemachus] marry"
    },
    {
        "questionIdx": 136471,
        "questionPatternModEntities": "What actor of M0 was M1 's sibling 's actor",
        "questionTemplate": "What [ROLE_SIMPLE] of [entity] was [entity] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P0 M0 .\n?x1 P1 M1 .\nFILTER ( ?x1 != M1 )\n}",
        "recursionDepth": 21,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P453 ?x1 .\n?x0 wdt:P453 wd:Q290045 .\n?x1 wdt:P3373 wd:Q2254599 .\nFILTER ( ?x1 != wd:Q2254599 )\n}",
        "questionWithBrackets": "What actor of [Jean Jacques R\u00e9gis de Cambac\u00e9r\u00e8s] was [\u00c9tienne Hubert de Cambac\u00e9r\u00e8s] 's sibling 's actor"
    },
    {
        "questionIdx": 136489,
        "questionPatternModEntities": "What actor of M0 was M1 's parent",
        "questionTemplate": "What [ROLE_SIMPLE] of [entity] was [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1\n}",
        "recursionDepth": 17,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P453 wd:Q222573 .\n?x0 wdt:P40|wdt:P355 wd:Q779406\n}",
        "questionWithBrackets": "What actor of [femme fatale] was [Latinus] 's parent"
    },
    {
        "questionIdx": 138581,
        "questionPatternModEntities": "What child of M0 did M1 marry",
        "questionTemplate": "What [ROLE_SIMPLE] of [entity] did [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M1 )\n}",
        "recursionDepth": 16,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P749 wd:Q1089760 .\n?x0 wdt:P26 wd:Q76375112 .\nFILTER ( ?x0 != wd:Q76375112 )\n}",
        "questionWithBrackets": "What child of [Church Mission Society] did [Eliazbeth Fristan] marry"
    },
    {
        "questionIdx": 138586,
        "questionPatternModEntities": "What child of M0 was founded by M1 , founded by M2 , and founded by M3",
        "questionTemplate": "What [ROLE_SIMPLE] of [entity] was [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\n?x0 P1 M3\n}",
        "recursionDepth": 37,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P112 wd:Q410 .\n?x0 wdt:P112 wd:Q125128 .\n?x0 wdt:P112 wd:Q294918 .\n?x0 wdt:P749 wd:Q648015\n}",
        "questionWithBrackets": "What child of [Center for Inquiry] was founded by [Carl Sagan] , founded by [Marcello Truzzi] , and founded by [James Randi]"
    },
    {
        "questionIdx": 138621,
        "questionPatternModEntities": "What child of M0 did M1 , M2 , and M3 found",
        "questionTemplate": "What [ROLE_SIMPLE] of [entity] did [entity] , [entity] , and [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\n?x0 P1 M3\n}",
        "recursionDepth": 23,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P112 wd:Q6078 .\n?x0 wdt:P112 wd:Q455880 .\n?x0 wdt:P112 wd:Q502998 .\n?x0 wdt:P749 wd:Q1344736\n}",
        "questionWithBrackets": "What child of [Entertainment One] did [The D.O.C.] , [Suge Knight] , and [Dr. Dre] found"
    },
    {
        "questionIdx": 138640,
        "questionPatternModEntities": "What child of M2 was influenced by M0 and M1",
        "questionTemplate": "What [ROLE_SIMPLE] of [entity] was [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P1 M2\n}",
        "recursionDepth": 21,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P737 wd:Q149964 .\n?x0 wdt:P737 wd:Q25352258 .\n?x0 wdt:P749 wd:Q8896\n}",
        "questionWithBrackets": "What child of [Council of the European Union] was influenced by [Economic and Financial Committee] and [Eurogroup]"
    },
    {
        "questionIdx": 138653,
        "questionPatternModEntities": "What child of M1 did M0 influence",
        "questionTemplate": "What [ROLE_SIMPLE] of [entity] did [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1\n}",
        "recursionDepth": 16,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P737 wd:Q149964 .\n?x0 wdt:P749 wd:Q8896\n}",
        "questionWithBrackets": "What child of [Council of the European Union] did [Eurogroup] influence"
    },
    {
        "questionIdx": 138672,
        "questionPatternModEntities": "What child of M0 was founded by M1",
        "questionTemplate": "What [ROLE_SIMPLE] of [entity] was [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1\n}",
        "recursionDepth": 18,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P112 wd:Q23 .\n?x0 wdt:P749 wd:Q308439\n}",
        "questionWithBrackets": "What child of [National Park Service] was founded by [George Washington]"
    },
    {
        "questionIdx": 138683,
        "questionPatternModEntities": "What child of M0 did M1 , M2 , M3 , and M4 found",
        "questionTemplate": "What [ROLE_SIMPLE] of [entity] did [entity] , [entity] , [entity] , and [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\n?x0 P1 M3 .\n?x0 P1 M4\n}",
        "recursionDepth": 26,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P112 wd:Q70745 .\n?x0 wdt:P112 wd:Q3438767 .\n?x0 wdt:P112 wd:Q44620 .\n?x0 wdt:P112 wd:Q3132187 .\n?x0 wdt:P749 wd:Q2311\n}",
        "questionWithBrackets": "What child of [Airbus Group] did [Henri Ziegler] , [Roger B\u00e9teille] , [Franz Josef Strau\u00df] , and [Felix Kracht] found"
    },
    {
        "questionIdx": 138765,
        "questionPatternModEntities": "What child of M0 married M1",
        "questionTemplate": "What [ROLE_SIMPLE] of [entity] [VP_SIMPLE] [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M1 )\n}",
        "recursionDepth": 16,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P749 wd:Q1089760 .\n?x0 wdt:P26 wd:Q76375112 .\nFILTER ( ?x0 != wd:Q76375112 )\n}",
        "questionWithBrackets": "What child of [Church Mission Society] married [Eliazbeth Fristan]"
    },
    {
        "questionIdx": 138766,
        "questionPatternModEntities": "What child of M0 was a spouse of M1",
        "questionTemplate": "What [ROLE_SIMPLE] of [entity] was a [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M1 )\n}",
        "recursionDepth": 19,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P749 wd:Q1089760 .\n?x0 wdt:P26 wd:Q76375112 .\nFILTER ( ?x0 != wd:Q76375112 )\n}",
        "questionWithBrackets": "What child of [Church Mission Society] was a spouse of [Eliazbeth Fristan]"
    },
    {
        "questionIdx": 138771,
        "questionPatternModEntities": "What child of M0 was founded by M1 , M2 , and M3",
        "questionTemplate": "What [ROLE_SIMPLE] of [entity] was [VP_SIMPLE] by [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\n?x0 P1 M3\n}",
        "recursionDepth": 24,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P112 wd:Q410 .\n?x0 wdt:P112 wd:Q125128 .\n?x0 wdt:P112 wd:Q294918 .\n?x0 wdt:P749 wd:Q648015\n}",
        "questionWithBrackets": "What child of [Center for Inquiry] was founded by [Marcello Truzzi] , [Carl Sagan] , and [James Randi]"
    },
    {
        "questionIdx": 138804,
        "questionPatternModEntities": "What child of M1 was influenced by M0",
        "questionTemplate": "What [ROLE_SIMPLE] of [entity] was [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1\n}",
        "recursionDepth": 17,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P737 wd:Q149964 .\n?x0 wdt:P749 wd:Q8896\n}",
        "questionWithBrackets": "What child of [Council of the European Union] was influenced by [Eurogroup]"
    },
    {
        "questionIdx": 138805,
        "questionPatternModEntities": "What child of M0 was founded by M1 and M2",
        "questionTemplate": "What [ROLE_SIMPLE] of [entity] was [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P1 M2\n}",
        "recursionDepth": 21,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P112 wd:Q882 .\n?x0 wdt:P112 wd:Q104109 .\n?x0 wdt:P749 wd:Q179200\n}",
        "questionWithBrackets": "What child of [Metro-Goldwyn-Mayer] was founded by [Mary Pickford] and [Charlie Chaplin]"
    },
    {
        "questionIdx": 138815,
        "questionPatternModEntities": "What child of M0 was M1 's spouse",
        "questionTemplate": "What [ROLE_SIMPLE] of [entity] was [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M1 )\n}",
        "recursionDepth": 17,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P749 wd:Q1089760 .\n?x0 wdt:P26 wd:Q76375112 .\nFILTER ( ?x0 != wd:Q76375112 )\n}",
        "questionWithBrackets": "What child of [Church Mission Society] was [Eliazbeth Fristan] 's spouse"
    },
    {
        "questionIdx": 138835,
        "questionPatternModEntities": "What child of M0 was founded by M1 , founded by M2 , and founded by M3 and M4",
        "questionTemplate": "What [ROLE_SIMPLE] of [entity] was [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\n?x0 P1 M3 .\n?x0 P1 M4\n}",
        "recursionDepth": 41,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P112 wd:Q44281 .\n?x0 wdt:P112 wd:Q163900 .\n?x0 wdt:P112 wd:Q454814 .\n?x0 wdt:P112 wd:Q86039436 .\n?x0 wdt:P749 wd:Q597526\n}",
        "questionWithBrackets": "What child of [Latin Church] was founded by [Peter Faber] , founded by [Francis Xavier] , and founded by [Ignatius of Loyola] and [Holy Companions]"
    },
    {
        "questionIdx": 138848,
        "questionPatternModEntities": "What child of M0 did M1 and M2 found",
        "questionTemplate": "What [ROLE_SIMPLE] of [entity] did [entity] and [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P1 M2\n}",
        "recursionDepth": 20,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P112 wd:Q91 .\n?x0 wdt:P112 wd:Q738941 .\n?x0 wdt:P749 wd:Q48525\n}",
        "questionWithBrackets": "What child of [Federal Government of the United States of America] did [Abraham Lincoln] and [Henry Leavitt Ellsworth] found"
    },
    {
        "questionIdx": 141654,
        "questionPatternModEntities": "What did M0 's employee 's spouse write",
        "questionTemplate": "What did [entity] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x1 P1 ?x2 .\n?x2 P2 M0 .\nFILTER ( ?x1 != ?x2 )\n}",
        "recursionDepth": 18,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P58 ?x1 .\n?x1 wdt:P26 ?x2 .\n?x2 wdt:P108 wd:Q840812 .\nFILTER ( ?x1 != ?x2 )\n}LIMIT 1",
        "questionWithBrackets": "What did [Moscow Art Theatre] 's employee 's spouse write"
    },
    {
        "questionIdx": 141657,
        "questionPatternModEntities": "What did M4 produce , M0 and M1 executive produce , M2 and M3 executive produce , and M5 edit",
        "questionTemplate": "What did [entity] [VP_SIMPLE] , [entity] and [entity] [VP_SIMPLE] , [entity] and [entity] [VP_SIMPLE] , and [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P0 M3 .\n?x0 P1 M4 .\n?x0 P2 M5\n}",
        "recursionDepth": 49,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1040 wd:Q977704 .\n?x0 wdt:P1431 wd:Q75079 .\n?x0 wdt:P1431 wd:Q975579 .\n?x0 wdt:P1431 wd:Q1900360 .\n?x0 wdt:P1431 wd:Q11778321 .\n?x0 wdt:P162|wdt:P272 wd:Q319986\n}",
        "questionWithBrackets": "What did [David Heyman] produce , [Chris Columbus] and [David Barron] executive produce , [Michael Barnathan] and [Mark Radcliffe] executive produce , and [Peter Honess] edit"
    },
    {
        "questionIdx": 141712,
        "questionPatternModEntities": "What did M2 's employee direct , M0 executive produce , and M1 direct",
        "questionTemplate": "What did [entity] 's [ROLE_SIMPLE] [VP_SIMPLE] , [entity] [VP_SIMPLE] , and [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 ?x1 .\n?x0 P1 M1 .\n?x1 P2 M2\n}",
        "recursionDepth": 35,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 ?x1 .\n?x0 wdt:P57 wd:Q310960 .\n?x0 wdt:P1431 wd:Q8877 .\n?x1 wdt:P108 wd:Q127552\n}",
        "questionWithBrackets": "What did [Pixar] 's employee direct , [Steven Spielberg] executive produce , and [Brad Bird] direct"
    },
    {
        "questionIdx": 141714,
        "questionPatternModEntities": "What did M1 's female spouse edit and direct",
        "questionTemplate": "What did [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] [VP_SIMPLE] and [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x1 P2 M0 .\n?x1 P3 M1 .\nFILTER ( ?x1 != M1 )\n}",
        "recursionDepth": 27,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 ?x1 .\n?x0 wdt:P1040 ?x1 .\n?x1 wdt:P21 wd:Q6581072 .\n?x1 wdt:P26 wd:Q347950 .\nFILTER ( ?x1 != wd:Q347950 )\n}LIMIT 1",
        "questionWithBrackets": "What did [Gaspar No\u00e9] 's female spouse edit and direct"
    },
    {
        "questionIdx": 141722,
        "questionPatternModEntities": "What did M0 's employee 's spouse direct",
        "questionTemplate": "What did [entity] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x1 P1 ?x2 .\n?x2 P2 M0 .\nFILTER ( ?x1 != ?x2 )\n}",
        "recursionDepth": 18,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 ?x1 .\n?x1 wdt:P26 ?x2 .\n?x2 wdt:P108 wd:Q705320 .\nFILTER ( ?x1 != ?x2 )\n}LIMIT 1",
        "questionWithBrackets": "What did [Mansudae Art Troupe] 's employee 's spouse direct"
    },
    {
        "questionIdx": 141725,
        "questionPatternModEntities": "What did M2 direct , M1 produce , and M0 executive produce",
        "questionTemplate": "What did [entity] [VP_SIMPLE] , [entity] [VP_SIMPLE] , and [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P2 M2\n}",
        "recursionDepth": 31,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 wd:Q47284 .\n?x0 wdt:P1431 wd:Q3772 .\n?x0 wdt:P162|wdt:P272 wd:Q300323\n}",
        "questionWithBrackets": "What did [Robert Rodriguez] direct , [A Band Apart] produce , and [Quentin Tarantino] executive produce"
    },
    {
        "questionIdx": 141729,
        "questionPatternModEntities": "What did M0 and M1 direct",
        "questionTemplate": "What did [entity] and [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1\n}",
        "recursionDepth": 14,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 wd:Q2071 .\n?x0 wdt:P57 wd:Q951570\n}",
        "questionWithBrackets": "What did [David Lynch] and [R\u00e9gis Wargnier] direct"
    },
    {
        "questionIdx": 141741,
        "questionPatternModEntities": "What did M0 and M1 found and M2 's child found",
        "questionTemplate": "What did [entity] and [entity] [VP_SIMPLE] and [entity] 's [ROLE_SIMPLE] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x1 P1 M2\n}",
        "recursionDepth": 29,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P112 ?x1 .\n?x0 wdt:P112 wd:Q2283 .\n?x0 wdt:P112 wd:Q95 .\n?x1 wdt:P749 wd:Q20800404\n}",
        "questionWithBrackets": "What did [Microsoft] and [Google] found and [Alphabet Inc.] 's child found"
    },
    {
        "questionIdx": 141742,
        "questionPatternModEntities": "What did M0 edit , direct , and write",
        "questionTemplate": "What did [entity] [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M0 .\n?x0 P2 M0\n}",
        "recursionDepth": 24,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 wd:Q8006 .\n?x0 wdt:P1040 wd:Q8006 .\n?x0 wdt:P58 wd:Q8006\n}LIMIT 1",
        "questionWithBrackets": "What did [Akira Kurosawa] edit , direct , and write"
    },
    {
        "questionIdx": 141765,
        "questionPatternModEntities": "What did M0 and M1 edit , M2 , M3 , and M4 direct , and M5 and M6 direct",
        "questionTemplate": "What did [entity] and [entity] [VP_SIMPLE] , [entity] , [entity] , and [entity] [VP_SIMPLE] , and [entity] and [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P1 M2 .\n?x0 P1 M3 .\n?x0 P1 M4 .\n?x0 P1 M5 .\n?x0 P1 M6\n}",
        "recursionDepth": 45,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 wd:Q474262 .\n?x0 wdt:P57 wd:Q312611 .\n?x0 wdt:P57 wd:Q295093 .\n?x0 wdt:P57 wd:Q44221 .\n?x0 wdt:P57 wd:Q313497 .\n?x0 wdt:P1040 wd:Q55211 .\n?x0 wdt:P1040 wd:Q18021284\n}",
        "questionWithBrackets": "What did [Jonathan Morris] and [Mohsen Makhmalbaf] edit , [Claude Lelouch] , [Amos Gitai] , and [Danis Tanovi\u0107] direct , and [Youssef Chahine] and [Sean Penn] direct"
    },
    {
        "questionIdx": 141766,
        "questionPatternModEntities": "What did M0 and M1 edit , M2 edit , M3 and M4 edit , and M5 edit",
        "questionTemplate": "What did [entity] and [entity] [VP_SIMPLE] , [entity] [VP_SIMPLE] , [entity] and [entity] [VP_SIMPLE] , and [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P0 M3 .\n?x0 P0 M4 .\n?x0 P0 M5\n}",
        "recursionDepth": 47,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1040 wd:Q55211 .\n?x0 wdt:P1040 wd:Q18021284 .\n?x0 wdt:P1040 wd:Q541826 .\n?x0 wdt:P1040 wd:Q22074634 .\n?x0 wdt:P1040 wd:Q55215 .\n?x0 wdt:P1040 wd:Q5639976\n}",
        "questionWithBrackets": "What did [Robert Duffy] and [Jonathan Morris] edit , [Hajime Okayasu] edit , [Mohsen Makhmalbaf] and [Alejandro Gonz\u00e1lez I\u00f1\u00e1rritu] edit , and [Jay Cassidy] edit"
    },
    {
        "questionIdx": 141774,
        "questionPatternModEntities": "What did M0 edit , M1 , M2 , M3 , and M4 edit , M5 edit , and M6 direct",
        "questionTemplate": "What did [entity] [VP_SIMPLE] , [entity] , [entity] , [entity] , and [entity] [VP_SIMPLE] , [entity] [VP_SIMPLE] , and [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P0 M3 .\n?x0 P0 M4 .\n?x0 P0 M5 .\n?x0 P1 M6\n}",
        "recursionDepth": 49,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 wd:Q719434 .\n?x0 wdt:P1040 wd:Q154690 .\n?x0 wdt:P1040 wd:Q3831487 .\n?x0 wdt:P1040 wd:Q293078 .\n?x0 wdt:P1040 wd:Q3179985 .\n?x0 wdt:P1040 wd:Q4863958 .\n?x0 wdt:P1040 wd:Q276186\n}",
        "questionWithBrackets": "What did [Aki Kaurism\u00e4ki] edit , [Fang Li] , [Jay Rabinowitz] , [Mathilde Bonnefoy] , and [Barry Alexander Brown] edit , [Joe Bini] edit , and [V\u00edctor Erice] direct"
    },
    {
        "questionIdx": 141779,
        "questionPatternModEntities": "What did M0 , M1 , and M2 edit , M3 and M4 edit , and M5 and M6 direct",
        "questionTemplate": "What did [entity] , [entity] , and [entity] [VP_SIMPLE] , [entity] and [entity] [VP_SIMPLE] , and [entity] and [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P0 M3 .\n?x0 P0 M4 .\n?x0 P1 M5 .\n?x0 P1 M6\n}",
        "recursionDepth": 45,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 wd:Q474262 .\n?x0 wdt:P57 wd:Q44221 .\n?x0 wdt:P1040 wd:Q55215 .\n?x0 wdt:P1040 wd:Q55211 .\n?x0 wdt:P1040 wd:Q5639976 .\n?x0 wdt:P1040 wd:Q22074634 .\n?x0 wdt:P1040 wd:Q18021284\n}",
        "questionWithBrackets": "What did [Jonathan Morris] , [Robert Duffy] , and [Hajime Okayasu] edit , [Mohsen Makhmalbaf] and [Alejandro Gonz\u00e1lez I\u00f1\u00e1rritu] edit , and [Amos Gitai] and [Sean Penn] direct"
    },
    {
        "questionIdx": 141788,
        "questionPatternModEntities": "What did M2 's British employee found and M0 and M1 found",
        "questionTemplate": "What did [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] [VP_SIMPLE] and [entity] and [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x1 P1 M2 .\n?x1 P2 M3\n}",
        "recursionDepth": 34,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P112 ?x1 .\n?x0 wdt:P112 wd:Q180 .\n?x0 wdt:P112 wd:Q15176445 .\n?x1 wdt:P108 wd:Q2665980 .\n?x1 wdt:P27 wd:Q145\n}",
        "questionWithBrackets": "What did [Guardian Media Group] 's British employee found and [Wikimedia Foundation] and [Daniel Alston] found"
    },
    {
        "questionIdx": 141810,
        "questionPatternModEntities": "What did M1 edit and M0 produce",
        "questionTemplate": "What did [entity] [VP_SIMPLE] and [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1\n}",
        "recursionDepth": 21,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1040 wd:Q44426 .\n?x0 wdt:P162|wdt:P272 wd:Q66774\n}",
        "questionWithBrackets": "What did [Rainer Werner Fassbinder] edit and [Ulli Lommel] produce"
    },
    {
        "questionIdx": 141822,
        "questionPatternModEntities": "What did M0 and M1 found , M2 , M3 , and M4 found , and M5 and M6 found",
        "questionTemplate": "What did [entity] and [entity] [VP_SIMPLE] , [entity] , [entity] , and [entity] [VP_SIMPLE] , and [entity] and [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P0 M3 .\n?x0 P0 M4 .\n?x0 P0 M5 .\n?x0 P0 M6\n}",
        "recursionDepth": 45,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P112 wd:Q30 .\n?x0 wdt:P112 wd:Q783 .\n?x0 wdt:P112 wd:Q16 .\n?x0 wdt:P112 wd:Q41 .\n?x0 wdt:P112 wd:Q20 .\n?x0 wdt:P112 wd:Q32 .\n?x0 wdt:P112 wd:Q31\n}",
        "questionWithBrackets": "What did [Norway] and [Greece] found , [Honduras] , [United States of America] , and [Canada] found , and [Luxembourg] and [Belgium] found"
    },
    {
        "questionIdx": 141824,
        "questionPatternModEntities": "What did M0 and M1 found , M2 , M3 , and M4 found , M5 found , and M6 found",
        "questionTemplate": "What did [entity] and [entity] [VP_SIMPLE] , [entity] , [entity] , and [entity] [VP_SIMPLE] , [entity] [VP_SIMPLE] , and [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P0 M3 .\n?x0 P0 M4 .\n?x0 P0 M5 .\n?x0 P0 M6\n}",
        "recursionDepth": 50,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P112 wd:Q35 .\n?x0 wdt:P112 wd:Q96 .\n?x0 wdt:P112 wd:Q16 .\n?x0 wdt:P112 wd:Q20 .\n?x0 wdt:P112 wd:Q30 .\n?x0 wdt:P112 wd:Q32 .\n?x0 wdt:P112 wd:Q115\n}",
        "questionWithBrackets": "What did [Luxembourg] and [Mexico] found , [United States of America] , [Denmark] , and [Ethiopia] found , [Canada] found , and [Norway] found"
    },
    {
        "questionIdx": 141827,
        "questionPatternModEntities": "What did M0 found , M1 , M2 , and M3 found , M4 and M5 found , and M6 found",
        "questionTemplate": "What did [entity] [VP_SIMPLE] , [entity] , [entity] , and [entity] [VP_SIMPLE] , [entity] and [entity] [VP_SIMPLE] , and [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P0 M3 .\n?x0 P0 M4 .\n?x0 P0 M5 .\n?x0 P0 M6\n}",
        "recursionDepth": 50,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P112 wd:Q30 .\n?x0 wdt:P112 wd:Q31 .\n?x0 wdt:P112 wd:Q16 .\n?x0 wdt:P112 wd:Q20 .\n?x0 wdt:P112 wd:Q35 .\n?x0 wdt:P112 wd:Q43 .\n?x0 wdt:P112 wd:Q32\n}",
        "questionWithBrackets": "What did [Turkey] found , [Luxembourg] , [United States of America] , and [Canada] found , [Norway] and [Denmark] found , and [Belgium] found"
    },
    {
        "questionIdx": 141829,
        "questionPatternModEntities": "What did M0 found , M1 , M2 , and M3 found , and M4 , M5 , and M6 found",
        "questionTemplate": "What did [entity] [VP_SIMPLE] , [entity] , [entity] , and [entity] [VP_SIMPLE] , and [entity] , [entity] , and [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P0 M3 .\n?x0 P0 M4 .\n?x0 P0 M5 .\n?x0 P0 M6\n}",
        "recursionDepth": 44,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P112 wd:Q79 .\n?x0 wdt:P112 wd:Q77 .\n?x0 wdt:P112 wd:Q30 .\n?x0 wdt:P112 wd:Q31 .\n?x0 wdt:P112 wd:Q20 .\n?x0 wdt:P112 wd:Q16 .\n?x0 wdt:P112 wd:Q36\n}",
        "questionWithBrackets": "What did [Canada] found , [Uruguay] , [Egypt] , and [United States of America] found , and [Norway] , [Poland] , and [Belgium] found"
    },
    {
        "questionIdx": 141830,
        "questionPatternModEntities": "What did M0 found , M1 , M2 , M3 , and M4 found , M5 found , and M6 found",
        "questionTemplate": "What did [entity] [VP_SIMPLE] , [entity] , [entity] , [entity] , and [entity] [VP_SIMPLE] , [entity] [VP_SIMPLE] , and [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P0 M3 .\n?x0 P0 M4 .\n?x0 P0 M5 .\n?x0 P0 M6\n}",
        "recursionDepth": 49,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P112 wd:Q35 .\n?x0 wdt:P112 wd:Q241 .\n?x0 wdt:P112 wd:Q32 .\n?x0 wdt:P112 wd:Q16 .\n?x0 wdt:P112 wd:Q30 .\n?x0 wdt:P112 wd:Q36 .\n?x0 wdt:P112 wd:Q41\n}",
        "questionWithBrackets": "What did [Greece] found , [Cuba] , [Denmark] , [United States of America] , and [Canada] found , [Poland] found , and [Luxembourg] found"
    },
    {
        "questionIdx": 141832,
        "questionPatternModEntities": "What did M0 found , M1 , M2 , and M3 found , M4 found , and M5 and M6 found",
        "questionTemplate": "What did [entity] [VP_SIMPLE] , [entity] , [entity] , and [entity] [VP_SIMPLE] , [entity] [VP_SIMPLE] , and [entity] and [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P0 M3 .\n?x0 P0 M4 .\n?x0 P0 M5 .\n?x0 P0 M6\n}",
        "recursionDepth": 50,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P112 wd:Q35 .\n?x0 wdt:P112 wd:Q241 .\n?x0 wdt:P112 wd:Q16 .\n?x0 wdt:P112 wd:Q32 .\n?x0 wdt:P112 wd:Q30 .\n?x0 wdt:P112 wd:Q43 .\n?x0 wdt:P112 wd:Q20\n}",
        "questionWithBrackets": "What did [Norway] found , [Canada] , [Cuba] , and [Luxembourg] found , [United States of America] found , and [Denmark] and [Turkey] found"
    },
    {
        "questionIdx": 141834,
        "questionPatternModEntities": "What did M0 , M1 , M2 , M3 , M4 , M5 , and M6 found",
        "questionTemplate": "What did [entity] , [entity] , [entity] , [entity] , [entity] , [entity] , and [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P0 M3 .\n?x0 P0 M4 .\n?x0 P0 M5 .\n?x0 P0 M6\n}",
        "recursionDepth": 29,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P112 wd:Q36 .\n?x0 wdt:P112 wd:Q96 .\n?x0 wdt:P112 wd:Q30 .\n?x0 wdt:P112 wd:Q35 .\n?x0 wdt:P112 wd:Q16 .\n?x0 wdt:P112 wd:Q77 .\n?x0 wdt:P112 wd:Q20\n}",
        "questionWithBrackets": "What did [Uruguay] , [United States of America] , [Mexico] , [Poland] , [Denmark] , [Canada] , and [Norway] found"
    },
    {
        "questionIdx": 141835,
        "questionPatternModEntities": "What did M0 , M1 , M2 , and M3 found , M4 found , M5 found , and M6 found",
        "questionTemplate": "What did [entity] , [entity] , [entity] , and [entity] [VP_SIMPLE] , [entity] [VP_SIMPLE] , [entity] [VP_SIMPLE] , and [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P0 M3 .\n?x0 P0 M4 .\n?x0 P0 M5 .\n?x0 P0 M6\n}",
        "recursionDepth": 49,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P112 wd:Q35 .\n?x0 wdt:P112 wd:Q241 .\n?x0 wdt:P112 wd:Q32 .\n?x0 wdt:P112 wd:Q16 .\n?x0 wdt:P112 wd:Q30 .\n?x0 wdt:P112 wd:Q36 .\n?x0 wdt:P112 wd:Q41\n}",
        "questionWithBrackets": "What did [Poland] , [Cuba] , [United States of America] , and [Greece] found , [Luxembourg] found , [Canada] found , and [Denmark] found"
    },
    {
        "questionIdx": 141862,
        "questionPatternModEntities": "What did M3 and M4 write , M5 's sibling executive produce , and M0 , M1 , and M2 executive produce",
        "questionTemplate": "What did [entity] and [entity] [VP_SIMPLE] , [entity] 's [ROLE_SIMPLE] [VP_SIMPLE] , and [entity] , [entity] , and [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P1 M3 .\n?x0 P1 M4 .\n?x1 P2 M5 .\nFILTER ( ?x1 != M5 )\n}",
        "recursionDepth": 47,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1431 ?x1 .\n?x0 wdt:P1431 wd:Q263324 .\n?x0 wdt:P1431 wd:Q8877 .\n?x0 wdt:P1431 wd:Q190373 .\n?x0 wdt:P58 wd:Q3805577 .\n?x0 wdt:P58 wd:Q967077 .\n?x1 wdt:P3373 wd:Q469204 .\nFILTER ( ?x1 != wd:Q469204 )\n}",
        "questionWithBrackets": "What did [Jack Epps, Jr.] and [Jim Cash] write , [Anne Spielberg] 's sibling executive produce , and [Steven Spielberg] , [William Hanna] , and [Joseph Barbera] executive produce"
    },
    {
        "questionIdx": 141877,
        "questionPatternModEntities": "What did M0 's parent edit , executive produce , write , direct , and produce",
        "questionTemplate": "What did [entity] 's [ROLE_SIMPLE] [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x0 P3 ?x1 .\n?x0 P4 ?x1 .\n?x1 P5 M0\n}",
        "recursionDepth": 41,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 ?x1 .\n?x0 wdt:P1040 ?x1 .\n?x0 wdt:P1431 ?x1 .\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x0 wdt:P58 ?x1 .\n?x1 wdt:P40|wdt:P355 wd:Q1620638\n}LIMIT 1",
        "questionWithBrackets": "What did [Hisao Kurosawa] 's parent edit , executive produce , write , direct , and produce"
    },
    {
        "questionIdx": 141889,
        "questionPatternModEntities": "What did M0 and M1 distribute and M2 's parent distribute",
        "questionTemplate": "What did [entity] and [entity] [VP_SIMPLE] and [entity] 's [ROLE_SIMPLE] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x1 P1 M2\n}",
        "recursionDepth": 29,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P750 ?x1 .\n?x0 wdt:P750 wd:Q11196047 .\n?x0 wdt:P750 wd:Q3884 .\n?x1 wdt:P40|wdt:P355 wd:Q147505\n}",
        "questionWithBrackets": "What did [DLsite] and [Amazon] distribute and [Zappos.com] 's parent distribute"
    },
    {
        "questionIdx": 141906,
        "questionPatternModEntities": "What did M0 's parent executive produce , write , direct , and edit",
        "questionTemplate": "What did [entity] 's [ROLE_SIMPLE] [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x0 P3 ?x1 .\n?x1 P4 M0\n}",
        "recursionDepth": 35,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 ?x1 .\n?x0 wdt:P1040 ?x1 .\n?x0 wdt:P1431 ?x1 .\n?x0 wdt:P58 ?x1 .\n?x1 wdt:P40|wdt:P355 wd:Q4739681\n}LIMIT 1",
        "questionWithBrackets": "What did [Amanda Lucas] 's parent executive produce , write , direct , and edit"
    },
    {
        "questionIdx": 141907,
        "questionPatternModEntities": "What did M0 found and M1 's employee found",
        "questionTemplate": "What did [entity] [VP_SIMPLE] and [entity] 's [ROLE_SIMPLE] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P0 M0 .\n?x1 P1 M1\n}",
        "recursionDepth": 25,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P112 ?x1 .\n?x0 wdt:P112 wd:Q577729 .\n?x1 wdt:P108 wd:Q17459\n}",
        "questionWithBrackets": "What did [Erik M\u00f6ller] found and [Fandom] 's employee found"
    },
    {
        "questionIdx": 141933,
        "questionPatternModEntities": "What did M2 and M3 direct , M1 produce , M4 's sibling direct , and M0 write",
        "questionTemplate": "What did [entity] and [entity] [VP_SIMPLE] , [entity] [VP_SIMPLE] , [entity] 's [ROLE_SIMPLE] [VP_SIMPLE] , and [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P2 ?x1 .\n?x0 P2 M2 .\n?x0 P2 M3 .\n?x1 P3 M4 .\nFILTER ( ?x1 != M4 )\n}",
        "recursionDepth": 47,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 ?x1 .\n?x0 wdt:P57 wd:Q23547 .\n?x0 wdt:P57 wd:Q127800 .\n?x0 wdt:P162|wdt:P272 wd:Q652390 .\n?x0 wdt:P58 wd:Q4500 .\n?x1 wdt:P3373 wd:Q22954233 .\nFILTER ( ?x1 != wd:Q22954233 )\n}",
        "questionWithBrackets": "What did [Bryan Cranston] and [Michelle MacLaren] direct , [Sony Pictures Television] produce , [Bruce Winant] 's sibling direct , and [Vince Gilligan] write"
    },
    {
        "questionIdx": 141969,
        "questionPatternModEntities": "What did M4 , M5 , and M6 direct , M0 and M1 edit , and M2 and M3 edit",
        "questionTemplate": "What did [entity] , [entity] , and [entity] [VP_SIMPLE] , [entity] and [entity] [VP_SIMPLE] , and [entity] and [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P0 M3 .\n?x0 P1 M4 .\n?x0 P1 M5 .\n?x0 P1 M6\n}",
        "recursionDepth": 45,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 wd:Q3772 .\n?x0 wdt:P57 wd:Q549956 .\n?x0 wdt:P57 wd:Q2838329 .\n?x0 wdt:P1040 wd:Q47284 .\n?x0 wdt:P1040 wd:Q5359064 .\n?x0 wdt:P1040 wd:Q273379 .\n?x0 wdt:P1040 wd:Q541143\n}",
        "questionWithBrackets": "What did [Allison Anders] , [Alexandre Rockwell] , and [Quentin Tarantino] direct , [Terry Rawlings] and [Robert Rodriguez] edit , and [Sally Menke] and [Elena Maganini] edit"
    },
    {
        "questionIdx": 141972,
        "questionPatternModEntities": "What did M1 's sibling write and M0 write",
        "questionTemplate": "What did [entity] 's [ROLE_SIMPLE] [VP_SIMPLE] and [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P0 M0 .\n?x1 P1 M1 .\nFILTER ( ?x1 != M1 )\n}",
        "recursionDepth": 25,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P58 ?x1 .\n?x0 wdt:P58 wd:Q952428 .\n?x1 wdt:P3373 wd:Q44855 .\nFILTER ( ?x1 != wd:Q44855 )\n}",
        "questionWithBrackets": "What did [Jackie Jackson] 's sibling write and [David Newman] write"
    },
    {
        "questionIdx": 141973,
        "questionPatternModEntities": "What did M1 produce and M0 write",
        "questionTemplate": "What did [entity] [VP_SIMPLE] and [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1\n}",
        "recursionDepth": 21,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P162|wdt:P272 wd:Q888311 .\n?x0 wdt:P58 wd:Q4500\n}",
        "questionWithBrackets": "What did [Bob Weinstein] produce and [Vince Gilligan] write"
    },
    {
        "questionIdx": 142079,
        "questionPatternModEntities": "What did M0 and M1 executive produce and direct",
        "questionTemplate": "What did [entity] and [entity] [VP_SIMPLE] and [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P1 M0 .\n?x0 P1 M1\n}",
        "recursionDepth": 23,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 wd:Q3772 .\n?x0 wdt:P57 wd:Q549956 .\n?x0 wdt:P1431 wd:Q3772 .\n?x0 wdt:P1431 wd:Q549956\n}",
        "questionWithBrackets": "What did [Quentin Tarantino] and [Alexandre Rockwell] executive produce and direct"
    },
    {
        "questionIdx": 142091,
        "questionPatternModEntities": "What did M2 's French spouse executive produce and M0 produce",
        "questionTemplate": "What did [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] [VP_SIMPLE] and [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 M0 .\n?x1 P2 M1 .\n?x1 P3 M2 .\nFILTER ( ?x1 != M2 )\n}",
        "recursionDepth": 31,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1431 ?x1 .\n?x0 wdt:P162|wdt:P272 wd:Q3232649 .\n?x1 wdt:P27 wd:Q142 .\n?x1 wdt:P26 wd:Q16740966 .\nFILTER ( ?x1 != wd:Q16740966 )\n}",
        "questionWithBrackets": "What did [Madeleine Morgenstern] 's French spouse executive produce and [Les Films du Carrosse] produce"
    },
    {
        "questionIdx": 142098,
        "questionPatternModEntities": "What did M0 direct and a employee of M1 and M2 executive produce",
        "questionTemplate": "What did [entity] [VP_SIMPLE] and a [ROLE_SIMPLE] of [entity] and [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 M0 .\n?x1 P2 M1 .\n?x1 P2 M2\n}",
        "recursionDepth": 32,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 wd:Q598683 .\n?x0 wdt:P1431 ?x1 .\n?x1 wdt:P108 wd:Q3520623 .\n?x1 wdt:P108 wd:Q9531\n}",
        "questionWithBrackets": "What did [Garth Jennings] direct and a employee of [The Digital Village] and [BBC] executive produce"
    },
    {
        "questionIdx": 142099,
        "questionPatternModEntities": "What did M3 write , M4 edit , M0 , M1 , and M2 executive produce , and M5 edit",
        "questionTemplate": "What did [entity] [VP_SIMPLE] , [entity] [VP_SIMPLE] , [entity] , [entity] , and [entity] [VP_SIMPLE] , and [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P1 M3 .\n?x0 P2 M4 .\n?x0 P2 M5\n}",
        "recursionDepth": 47,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1040 wd:Q1586598 .\n?x0 wdt:P1040 wd:Q711370 .\n?x0 wdt:P1431 wd:Q8877 .\n?x0 wdt:P1431 wd:Q237207 .\n?x0 wdt:P1431 wd:Q549570 .\n?x0 wdt:P58 wd:Q725773\n}",
        "questionWithBrackets": "What did [Bob Gale] write , [Arthur Schmidt] edit , [Steven Spielberg] , [Kathleen Kennedy] , and [Frank Marshall] executive produce , and [Harry Keramidas] edit"
    },
    {
        "questionIdx": 142141,
        "questionPatternModEntities": "What did M0 's sibling found",
        "questionTemplate": "What did [entity] 's [ROLE_SIMPLE] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x1 P1 M0 .\nFILTER ( ?x1 != M0 )\n}",
        "recursionDepth": 14,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P112 ?x1 .\n?x1 wdt:P3373 wd:Q850421 .\nFILTER ( ?x1 != wd:Q850421 )\n}LIMIT 1",
        "questionWithBrackets": "What did [Betty Washington Lewis] 's sibling found"
    },
    {
        "questionIdx": 142142,
        "questionPatternModEntities": "What did M5 write , M0 , M1 , M2 , M3 , and M4 executive produce , and M6 write",
        "questionTemplate": "What did [entity] [VP_SIMPLE] , [entity] , [entity] , [entity] , [entity] , and [entity] [VP_SIMPLE] , and [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P0 M3 .\n?x0 P0 M4 .\n?x0 P1 M5 .\n?x0 P1 M6\n}",
        "recursionDepth": 44,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1431 wd:Q36970 .\n?x0 wdt:P1431 wd:Q25266114 .\n?x0 wdt:P1431 wd:Q2193613 .\n?x0 wdt:P1431 wd:Q25266117 .\n?x0 wdt:P1431 wd:Q25266202 .\n?x0 wdt:P58 wd:Q25266711 .\n?x0 wdt:P58 wd:Q15432072\n}",
        "questionWithBrackets": "What did [Michael D. Weiss] write , [Solon So] , [Alex Schwartz] , [Phyllis Alia] , [Jackie Chan] , and [Willie Chan] executive produce , and [David Benullo] write"
    },
    {
        "questionIdx": 142170,
        "questionPatternModEntities": "What did M0 's male sibling edit and executive produce",
        "questionTemplate": "What did [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] [VP_SIMPLE] and [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x1 P2 M0 .\n?x1 P3 M1 .\nFILTER ( ?x1 != M0 )\n}",
        "recursionDepth": 28,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1040 ?x1 .\n?x0 wdt:P1431 ?x1 .\n?x1 wdt:P21 wd:Q6581097 .\n?x1 wdt:P3373 wd:Q28370409 .\nFILTER ( ?x1 != wd:Q28370409 )\n}LIMIT 1",
        "questionWithBrackets": "What did [Everton Rocca] 's male sibling edit and executive produce"
    },
    {
        "questionIdx": 142176,
        "questionPatternModEntities": "What did M0 's sibling direct and write",
        "questionTemplate": "What did [entity] 's [ROLE_SIMPLE] [VP_SIMPLE] and [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x1 P2 M0 .\nFILTER ( ?x1 != M0 )\n}",
        "recursionDepth": 22,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 ?x1 .\n?x0 wdt:P58 ?x1 .\n?x1 wdt:P3373 wd:Q3567655 .\nFILTER ( ?x1 != wd:Q3567655 )\n}LIMIT 1",
        "questionWithBrackets": "What did [Wheeler Dryden] 's sibling direct and write"
    },
    {
        "questionIdx": 142192,
        "questionPatternModEntities": "What did M0 direct , edit , produce , and write",
        "questionTemplate": "What did [entity] [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M0 .\n?x0 P2 M0 .\n?x0 P3 M0\n}",
        "recursionDepth": 30,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 wd:Q25186 .\n?x0 wdt:P1040 wd:Q25186 .\n?x0 wdt:P162|wdt:P272 wd:Q25186 .\n?x0 wdt:P58 wd:Q25186\n}LIMIT 1",
        "questionWithBrackets": "What did [Gus Van Sant] direct , edit , produce , and write"
    },
    {
        "questionIdx": 142196,
        "questionPatternModEntities": "What did M2 produce , M0 distribute , and M1 distribute",
        "questionTemplate": "What did [entity] [VP_SIMPLE] , [entity] [VP_SIMPLE] , and [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P1 M2\n}",
        "recursionDepth": 30,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P750 wd:Q145 .\n?x0 wdt:P750 wd:Q907311 .\n?x0 wdt:P162|wdt:P272 wd:Q79618131\n}",
        "questionWithBrackets": "What did [Apocalypso Pictures] produce , [United Kingdom] distribute , and [Netflix] distribute"
    },
    {
        "questionIdx": 142268,
        "questionPatternModEntities": "What did M0 's employee 's sibling write and produce",
        "questionTemplate": "What did [entity] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE] [VP_SIMPLE] and [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x1 P2 ?x2 .\n?x2 P3 M0 .\nFILTER ( ?x1 != ?x2 )\n}",
        "recursionDepth": 26,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x0 wdt:P58 ?x1 .\n?x1 wdt:P3373 ?x2 .\n?x2 wdt:P108 wd:Q457281 .\nFILTER ( ?x1 != ?x2 )\n}LIMIT 1",
        "questionWithBrackets": "What did [University of Illinois at Urbana\u2013Champaign] 's employee 's sibling write and produce"
    },
    {
        "questionIdx": 142281,
        "questionPatternModEntities": "What did M0 's Chinese employee write",
        "questionTemplate": "What did [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x1 P1 M0 .\n?x1 P2 M1\n}",
        "recursionDepth": 19,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P58 ?x1 .\n?x1 wdt:P108 wd:Q740308 .\n?x1 wdt:P27 wd:Q148\n}LIMIT 1",
        "questionWithBrackets": "What did [UNICEF] 's Chinese employee write"
    },
    {
        "questionIdx": 142299,
        "questionPatternModEntities": "What did M1 's male sibling direct and M0 produce",
        "questionTemplate": "What did [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] [VP_SIMPLE] and [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 ?x1 .\n?x1 P2 M1 .\n?x1 P3 M2 .\nFILTER ( ?x1 != M1 )\n}",
        "recursionDepth": 30,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 ?x1 .\n?x0 wdt:P162|wdt:P272 wd:Q7414 .\n?x1 wdt:P21 wd:Q6581097 .\n?x1 wdt:P3373 wd:Q347432 .\nFILTER ( ?x1 != wd:Q347432 )\n}",
        "questionWithBrackets": "What did [Roy O. Disney] 's male sibling direct and [The Walt Disney Company] produce"
    },
    {
        "questionIdx": 142323,
        "questionPatternModEntities": "What did M3 's sibling write , M1 direct , M0 write , and M2 direct",
        "questionTemplate": "What did [entity] 's [ROLE_SIMPLE] [VP_SIMPLE] , [entity] [VP_SIMPLE] , [entity] [VP_SIMPLE] , and [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\n?x1 P2 M3 .\nFILTER ( ?x1 != M3 )\n}",
        "recursionDepth": 43,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 wd:Q487069 .\n?x0 wdt:P57 wd:Q7823572 .\n?x0 wdt:P58 ?x1 .\n?x0 wdt:P58 wd:Q443953 .\n?x1 wdt:P3373 wd:Q725250 .\nFILTER ( ?x1 != wd:Q725250 )\n}",
        "questionWithBrackets": "What did [Jim Hanks] 's sibling write , [Mikael Salomon] direct , [Stephen E. Ambrose] write , and [Tony To] direct"
    },
    {
        "questionIdx": 142326,
        "questionPatternModEntities": "What did M0 's German employee write",
        "questionTemplate": "What did [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x1 P1 M0 .\n?x1 P2 M1\n}",
        "recursionDepth": 19,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P58 ?x1 .\n?x1 wdt:P108 wd:Q686522 .\n?x1 wdt:P27 wd:Q183\n}LIMIT 1",
        "questionWithBrackets": "What did [University of Music and Performing Arts Vienna] 's German employee write"
    },
    {
        "questionIdx": 142331,
        "questionPatternModEntities": "What did M0 direct , executive produce , and edit",
        "questionTemplate": "What did [entity] [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M0 .\n?x0 P2 M0\n}",
        "recursionDepth": 25,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 wd:Q8006 .\n?x0 wdt:P1040 wd:Q8006 .\n?x0 wdt:P1431 wd:Q8006\n}LIMIT 1",
        "questionWithBrackets": "What did [Akira Kurosawa] direct , executive produce , and edit"
    },
    {
        "questionIdx": 142335,
        "questionPatternModEntities": "What did M0 's sibling produce and write",
        "questionTemplate": "What did [entity] 's [ROLE_SIMPLE] [VP_SIMPLE] and [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x1 P2 M0 .\nFILTER ( ?x1 != M0 )\n}",
        "recursionDepth": 22,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x0 wdt:P58 ?x1 .\n?x1 wdt:P3373 wd:Q606780 .\nFILTER ( ?x1 != wd:Q606780 )\n}LIMIT 1",
        "questionWithBrackets": "What did [Sydney Chaplin] 's sibling produce and write"
    },
    {
        "questionIdx": 142344,
        "questionPatternModEntities": "What did M0 's employee 's sibling edit",
        "questionTemplate": "What did [entity] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x1 P1 ?x2 .\n?x2 P2 M0 .\nFILTER ( ?x1 != ?x2 )\n}",
        "recursionDepth": 18,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1040 ?x1 .\n?x1 wdt:P3373 ?x2 .\n?x2 wdt:P108 wd:Q209842 .\nFILTER ( ?x1 != ?x2 )\n}LIMIT 1",
        "questionWithBrackets": "What did [University of Paris] 's employee 's sibling edit"
    },
    {
        "questionIdx": 142366,
        "questionPatternModEntities": "What did M0 executive produce , M1 write , and M2 write",
        "questionTemplate": "What did [entity] [VP_SIMPLE] , [entity] [VP_SIMPLE] , and [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P1 M2\n}",
        "recursionDepth": 31,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1431 wd:Q2643 .\n?x0 wdt:P58 wd:Q55428 .\n?x0 wdt:P58 wd:Q325805\n}",
        "questionWithBrackets": "What did [George Harrison] executive produce , [David Leland] write , and [Neil Jordan] write"
    },
    {
        "questionIdx": 142393,
        "questionPatternModEntities": "What did M5 produce , M0 distribute , M1 , M2 , and M3 distribute , and M4 distribute",
        "questionTemplate": "What did [entity] [VP_SIMPLE] , [entity] [VP_SIMPLE] , [entity] , [entity] , and [entity] [VP_SIMPLE] , and [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P0 M3 .\n?x0 P0 M4 .\n?x0 P1 M5\n}",
        "recursionDepth": 46,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P750 wd:Q145 .\n?x0 wdt:P750 wd:Q80948336 .\n?x0 wdt:P750 wd:Q5371838 .\n?x0 wdt:P750 wd:Q907311 .\n?x0 wdt:P750 wd:Q9589 .\n?x0 wdt:P162|wdt:P272 wd:Q7684047\n}",
        "questionWithBrackets": "What did [Tanya Seghatchian] produce , [Netflix] distribute , [Vudu] , [FandangoNow] , and [United Kingdom] distribute , and [iTunes] distribute"
    },
    {
        "questionIdx": 142446,
        "questionPatternModEntities": "What did M2 's female employee found , M0 found , and M1 found",
        "questionTemplate": "What did [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] [VP_SIMPLE] , [entity] [VP_SIMPLE] , and [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x1 P1 M2 .\n?x1 P2 M3\n}",
        "recursionDepth": 39,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P112 ?x1 .\n?x0 wdt:P112 wd:Q3194728 .\n?x0 wdt:P112 wd:Q14237 .\n?x1 wdt:P108 wd:Q13371 .\n?x1 wdt:P21 wd:Q6581072\n}",
        "questionWithBrackets": "What did [Harvard University] 's female employee found , [Margo Seltzer] found , and [Keith Bostic] found"
    },
    {
        "questionIdx": 142447,
        "questionPatternModEntities": "What did M0 's Canadian employee produce",
        "questionTemplate": "What did [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x1 P1 M0 .\n?x1 P2 M1\n}",
        "recursionDepth": 19,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x1 wdt:P108 wd:Q461761 .\n?x1 wdt:P27 wd:Q16\n}LIMIT 1",
        "questionWithBrackets": "What did [Canadian Broadcasting Corporation] 's Canadian employee produce"
    },
    {
        "questionIdx": 142527,
        "questionPatternModEntities": "What did M3 's Spanish spouse produce and M0 and M1 executive produce",
        "questionTemplate": "What did [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] [VP_SIMPLE] and [entity] and [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P1 ?x1 .\n?x1 P2 M2 .\n?x1 P3 M3 .\nFILTER ( ?x1 != M3 )\n}",
        "recursionDepth": 35,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1431 wd:Q4777249 .\n?x0 wdt:P1431 wd:Q95823715 .\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x1 wdt:P27 wd:Q29 .\n?x1 wdt:P26 wd:Q250627 .\nFILTER ( ?x1 != wd:Q250627 )\n}",
        "questionWithBrackets": "What did [\u00c1lex de la Iglesia] 's Spanish spouse produce and [Antony Root] and [Steve Matthews] executive produce"
    },
    {
        "questionIdx": 142540,
        "questionPatternModEntities": "What did M0 write , edit , and direct",
        "questionTemplate": "What did [entity] [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M0 .\n?x0 P2 M0\n}",
        "recursionDepth": 24,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 wd:Q8006 .\n?x0 wdt:P1040 wd:Q8006 .\n?x0 wdt:P58 wd:Q8006\n}LIMIT 1",
        "questionWithBrackets": "What did [Akira Kurosawa] write , edit , and direct"
    },
    {
        "questionIdx": 142561,
        "questionPatternModEntities": "What did M0 executive produce and M1 's employee 's spouse write",
        "questionTemplate": "What did [entity] [VP_SIMPLE] and [entity] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 ?x1 .\n?x1 P2 ?x2 .\n?x2 P3 M1 .\nFILTER ( ?x1 != ?x2 )\n}",
        "recursionDepth": 30,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1431 wd:Q3772 .\n?x0 wdt:P58 ?x1 .\n?x1 wdt:P26 ?x2 .\n?x2 wdt:P108 wd:Q126399 .\nFILTER ( ?x1 != ?x2 )\n}",
        "questionWithBrackets": "What did [Quentin Tarantino] executive produce and [Warner Bros.] 's employee 's spouse write"
    },
    {
        "questionIdx": 142654,
        "questionPatternModEntities": "What did M0 's spouse executive produce , produce , write , and edit",
        "questionTemplate": "What did [entity] 's [ROLE_SIMPLE] [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x0 P3 ?x1 .\n?x1 P4 M0 .\nFILTER ( ?x1 != M0 )\n}",
        "recursionDepth": 35,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1040 ?x1 .\n?x0 wdt:P1431 ?x1 .\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x0 wdt:P58 ?x1 .\n?x1 wdt:P26 wd:Q3032150 .\nFILTER ( ?x1 != wd:Q3032150 )\n}LIMIT 1",
        "questionWithBrackets": "What did [Y\u014dko Yaguchi] 's spouse executive produce , produce , write , and edit"
    },
    {
        "questionIdx": 142666,
        "questionPatternModEntities": "What did M0 produce , executive produce , write , and direct",
        "questionTemplate": "What did [entity] [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M0 .\n?x0 P2 M0 .\n?x0 P3 M0\n}",
        "recursionDepth": 31,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 wd:Q61347 .\n?x0 wdt:P1431 wd:Q61347 .\n?x0 wdt:P162|wdt:P272 wd:Q61347 .\n?x0 wdt:P58 wd:Q61347\n}LIMIT 1",
        "questionWithBrackets": "What did [Uwe Boll] produce , executive produce , write , and direct"
    },
    {
        "questionIdx": 142669,
        "questionPatternModEntities": "What did M0 and M1 write , M2 edit , M4 's parent write , and M3 edit",
        "questionTemplate": "What did [entity] and [entity] [VP_SIMPLE] , [entity] [VP_SIMPLE] , [entity] 's [ROLE_SIMPLE] [VP_SIMPLE] , and [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P1 M2 .\n?x0 P1 M3 .\n?x1 P2 M4\n}",
        "recursionDepth": 47,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1040 wd:Q28028 .\n?x0 wdt:P1040 wd:Q15694643 .\n?x0 wdt:P58 ?x1 .\n?x0 wdt:P58 wd:Q714651 .\n?x0 wdt:P58 wd:Q23844 .\n?x1 wdt:P40|wdt:P355 wd:Q54670264\n}",
        "questionWithBrackets": "What did [George Clooney] and [Rodrigo Garc\u00eda] write , [Alfonso Cuar\u00f3n] edit , [Alexander Clooney] 's parent write , and [Mark Sanger] edit"
    },
    {
        "questionIdx": 142670,
        "questionPatternModEntities": "What did M0 , M1 , and M2 direct , M3 direct , and a employee of M4 write",
        "questionTemplate": "What did [entity] , [entity] , and [entity] [VP_SIMPLE] , [entity] [VP_SIMPLE] , and a [ROLE_SIMPLE] of [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\n?x0 P1 M3 .\n?x1 P2 M4\n}",
        "recursionDepth": 43,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 wd:Q8262098 .\n?x0 wdt:P57 wd:Q16203893 .\n?x0 wdt:P57 wd:Q7175913 .\n?x0 wdt:P57 wd:Q7163381 .\n?x0 wdt:P58 ?x1 .\n?x1 wdt:P108 wd:Q9531\n}",
        "questionWithBrackets": "What did [Peter Moffatt] , [Richard Martin] , and [Pennant Roberts] direct , [John Nathan-Turner] direct , and a employee of [BBC] write"
    },
    {
        "questionIdx": 142671,
        "questionPatternModEntities": "What did M0 , M1 , M2 , and M3 write",
        "questionTemplate": "What did [entity] , [entity] , [entity] , and [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P0 M3\n}",
        "recursionDepth": 20,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P58 wd:Q4408 .\n?x0 wdt:P58 wd:Q1022489 .\n?x0 wdt:P58 wd:Q3559883 .\n?x0 wdt:P58 wd:Q3023726\n}",
        "questionWithBrackets": "What did [Mr. Lawrence] , [C.H. Greenblatt] , [Derek Iversen] , and [Vincent Waller] write"
    },
    {
        "questionIdx": 142679,
        "questionPatternModEntities": "What did M0 's Japanese sibling produce and direct",
        "questionTemplate": "What did [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] [VP_SIMPLE] and [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x1 P2 M0 .\n?x1 P3 M1 .\nFILTER ( ?x1 != M0 )\n}",
        "recursionDepth": 27,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 ?x1 .\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x1 wdt:P27 wd:Q17 .\n?x1 wdt:P3373 wd:Q22023377 .\nFILTER ( ?x1 != wd:Q22023377 )\n}LIMIT 1",
        "questionWithBrackets": "What did [Eiko Oshima] 's Japanese sibling produce and direct"
    },
    {
        "questionIdx": 142681,
        "questionPatternModEntities": "What did M1 edit , M2 edit , and M0 executive produce",
        "questionTemplate": "What did [entity] [VP_SIMPLE] , [entity] [VP_SIMPLE] , and [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P1 M2\n}",
        "recursionDepth": 31,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1040 wd:Q562675 .\n?x0 wdt:P1040 wd:Q1077467 .\n?x0 wdt:P1431 wd:Q13909\n}",
        "questionWithBrackets": "What did [Chris Lebenzon] edit , [Rick Pearson] edit , and [Angelina Jolie] executive produce"
    },
    {
        "questionIdx": 142682,
        "questionPatternModEntities": "What did M4 edit , M0 , M1 , M2 , and M3 executive produce , and M5 and M6 edit",
        "questionTemplate": "What did [entity] [VP_SIMPLE] , [entity] , [entity] , [entity] , and [entity] [VP_SIMPLE] , and [entity] and [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P0 M3 .\n?x0 P1 M4 .\n?x0 P1 M5 .\n?x0 P1 M6\n}",
        "recursionDepth": 45,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1040 wd:Q6397505 .\n?x0 wdt:P1040 wd:Q2704409 .\n?x0 wdt:P1040 wd:Q2347669 .\n?x0 wdt:P1431 wd:Q181900 .\n?x0 wdt:P1431 wd:Q262130 .\n?x0 wdt:P1431 wd:Q545394 .\n?x0 wdt:P1431 wd:Q6811130\n}",
        "questionWithBrackets": "What did [John Wright] edit , [Stan Lee] , [Richard Donner] , [Avi Arad] , and [Tom DeSanto] executive produce , and [Steven Rosenblum] and [Kevin Stitt] edit"
    },
    {
        "questionIdx": 142688,
        "questionPatternModEntities": "What did M1 's Italian spouse produce",
        "questionTemplate": "What did [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x1 P1 M0 .\n?x1 P2 M1 .\nFILTER ( ?x1 != M1 )\n}",
        "recursionDepth": 19,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x1 wdt:P27 wd:Q38 .\n?x1 wdt:P26 wd:Q3740833 .\nFILTER ( ?x1 != wd:Q3740833 )\n}LIMIT 1",
        "questionWithBrackets": "What did [Fedele D'Amico] 's Italian spouse produce"
    },
    {
        "questionIdx": 142699,
        "questionPatternModEntities": "What did M0 produce , edit , and write",
        "questionTemplate": "What did [entity] [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M0 .\n?x0 P2 M0\n}",
        "recursionDepth": 24,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1040 wd:Q8006 .\n?x0 wdt:P162|wdt:P272 wd:Q8006 .\n?x0 wdt:P58 wd:Q8006\n}LIMIT 1",
        "questionWithBrackets": "What did [Akira Kurosawa] produce , edit , and write"
    },
    {
        "questionIdx": 142703,
        "questionPatternModEntities": "What did M0 write , produce , and executive produce",
        "questionTemplate": "What did [entity] [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M0 .\n?x0 P2 M0\n}",
        "recursionDepth": 25,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1431 wd:Q2001 .\n?x0 wdt:P162|wdt:P272 wd:Q2001 .\n?x0 wdt:P58 wd:Q2001\n}LIMIT 1",
        "questionWithBrackets": "What did [Stanley Kubrick] write , produce , and executive produce"
    },
    {
        "questionIdx": 142773,
        "questionPatternModEntities": "What did M4 edit , M2 and M3 write , M0 and M1 executive produce , and M5 edit",
        "questionTemplate": "What did [entity] [VP_SIMPLE] , [entity] and [entity] [VP_SIMPLE] , [entity] and [entity] [VP_SIMPLE] , and [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P1 M2 .\n?x0 P1 M3 .\n?x0 P2 M4 .\n?x0 P2 M5\n}",
        "recursionDepth": 48,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1040 wd:Q21280711 .\n?x0 wdt:P1040 wd:Q3376423 .\n?x0 wdt:P1431 wd:Q60100 .\n?x0 wdt:P1431 wd:Q2390812 .\n?x0 wdt:P58 wd:Q942914 .\n?x0 wdt:P58 wd:Q119849\n}",
        "questionWithBrackets": "What did [David Siegel] edit , [Terry Rossio] and [Dean Devlin] write , [Ute Emmerich] and [Roland Emmerich] executive produce , and [Peter Amundson] edit"
    },
    {
        "questionIdx": 142815,
        "questionPatternModEntities": "What did M0 's female employee write",
        "questionTemplate": "What did [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x1 P1 M0 .\n?x1 P2 M1\n}",
        "recursionDepth": 19,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P58 ?x1 .\n?x1 wdt:P108 wd:Q646229 .\n?x1 wdt:P21 wd:Q6581072\n}LIMIT 1",
        "questionWithBrackets": "What did [L'Express (Neuch\u00e2tel)] 's female employee write"
    },
    {
        "questionIdx": 142820,
        "questionPatternModEntities": "What did M0 write , M1 write , and M2 produce",
        "questionTemplate": "What did [entity] [VP_SIMPLE] , [entity] [VP_SIMPLE] , and [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P1 M2\n}",
        "recursionDepth": 30,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P162|wdt:P272 wd:Q8066124 .\n?x0 wdt:P58 wd:Q4465 .\n?x0 wdt:P58 wd:Q892\n}",
        "questionWithBrackets": "What did [Peter Jackson] write , [J.\u00a0R.\u00a0R. Tolkien] write , and [Zane Weiner] produce"
    },
    {
        "questionIdx": 142840,
        "questionPatternModEntities": "What did M0 , M1 , M2 , and M3 edit and direct",
        "questionTemplate": "What did [entity] , [entity] , [entity] , and [entity] [VP_SIMPLE] and [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P0 M3 .\n?x0 P1 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\n?x0 P1 M3\n}",
        "recursionDepth": 28,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 wd:Q1291210 .\n?x0 wdt:P57 wd:Q16198328 .\n?x0 wdt:P57 wd:Q4207234 .\n?x0 wdt:P57 wd:Q4679987 .\n?x0 wdt:P1040 wd:Q1291210 .\n?x0 wdt:P1040 wd:Q16198328 .\n?x0 wdt:P1040 wd:Q4207234 .\n?x0 wdt:P1040 wd:Q4679987\n}",
        "questionWithBrackets": "What did [Eduardo S\u00e1nchez] , [Gareth Evans] , [Jason Eisener] , and [Adam Wingard] edit and direct"
    },
    {
        "questionIdx": 142853,
        "questionPatternModEntities": "What did M1 's sibling 's male sibling write and direct",
        "questionTemplate": "What did [entity] 's [ROLE_SIMPLE] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] [VP_SIMPLE] and [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x1 P2 ?x2 .\n?x1 P3 M0 .\n?x2 P2 M1 .\nFILTER ( ?x1 != ?x2 ) .\nFILTER ( ?x2 != M1 )\n}",
        "recursionDepth": 31,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 ?x1 .\n?x0 wdt:P58 ?x1 .\n?x1 wdt:P21 wd:Q6581097 .\n?x1 wdt:P3373 ?x2 .\n?x2 wdt:P3373 wd:Q606780 .\nFILTER ( ?x1 != ?x2 ) .\nFILTER ( ?x2 != wd:Q606780 )\n}LIMIT 1",
        "questionWithBrackets": "What did [Sydney Chaplin] 's sibling 's male sibling write and direct"
    },
    {
        "questionIdx": 142869,
        "questionPatternModEntities": "What did M0 , M1 , and M2 executive produce , M3 write , and M4 's sibling produce",
        "questionTemplate": "What did [entity] , [entity] , and [entity] [VP_SIMPLE] , [entity] [VP_SIMPLE] , and [entity] 's [ROLE_SIMPLE] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P1 M3 .\n?x0 P2 ?x1 .\n?x1 P3 M4 .\nFILTER ( ?x1 != M4 )\n}",
        "recursionDepth": 42,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1431 wd:Q39829 .\n?x0 wdt:P1431 wd:Q362793 .\n?x0 wdt:P1431 wd:Q8877 .\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x0 wdt:P58 wd:Q6984051 .\n?x1 wdt:P3373 wd:Q469204 .\nFILTER ( ?x1 != wd:Q469204 )\n}",
        "questionWithBrackets": "What did [Stephen King] , [Jack Bender] , and [Steven Spielberg] executive produce , [Neal Baer] write , and [Anne Spielberg] 's sibling produce"
    },
    {
        "questionIdx": 142879,
        "questionPatternModEntities": "What did M0 edit , executive produce , and direct",
        "questionTemplate": "What did [entity] [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M0 .\n?x0 P2 M0\n}",
        "recursionDepth": 25,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 wd:Q38222 .\n?x0 wdt:P1040 wd:Q38222 .\n?x0 wdt:P1431 wd:Q38222\n}LIMIT 1",
        "questionWithBrackets": "What did [George Lucas] edit , executive produce , and direct"
    },
    {
        "questionIdx": 142962,
        "questionPatternModEntities": "What did M0 and M1 executive produce , M2 and M3 executive produce , and M4 , M5 , and M6 write",
        "questionTemplate": "What did [entity] and [entity] [VP_SIMPLE] , [entity] and [entity] [VP_SIMPLE] , and [entity] , [entity] , and [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P0 M3 .\n?x0 P1 M4 .\n?x0 P1 M5 .\n?x0 P1 M6\n}",
        "recursionDepth": 47,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1431 wd:Q28497 .\n?x0 wdt:P1431 wd:Q653159 .\n?x0 wdt:P1431 wd:Q7807248 .\n?x0 wdt:P1431 wd:Q5233363 .\n?x0 wdt:P58 wd:Q922368 .\n?x0 wdt:P58 wd:Q18823 .\n?x0 wdt:P58 wd:Q126941\n}",
        "questionWithBrackets": "What did [Graham King] and [Timothy Headington] executive produce , [Marc Forster] and [David Ellison] executive produce , and [Matthew Michael Carnahan] , [Drew Goddard] , and [J. Michael Straczynski] write"
    },
    {
        "questionIdx": 142963,
        "questionPatternModEntities": "What did M0 and M1 found",
        "questionTemplate": "What did [entity] and [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1\n}",
        "recursionDepth": 14,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P112 wd:Q31 .\n?x0 wdt:P112 wd:Q713750\n}",
        "questionWithBrackets": "What did [Belgium] and [West Germany] found"
    },
    {
        "questionIdx": 142968,
        "questionPatternModEntities": "What did M1 's employee direct and M0 direct",
        "questionTemplate": "What did [entity] 's [ROLE_SIMPLE] [VP_SIMPLE] and [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P0 M0 .\n?x1 P1 M1\n}",
        "recursionDepth": 25,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 ?x1 .\n?x0 wdt:P57 wd:Q1744 .\n?x1 wdt:P108 wd:Q847743\n}",
        "questionWithBrackets": "What did [Dunkin'] 's employee direct and [Madonna] direct"
    },
    {
        "questionIdx": 143001,
        "questionPatternModEntities": "What did M0 direct and edit",
        "questionTemplate": "What did [entity] [VP_SIMPLE] and [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M0\n}",
        "recursionDepth": 18,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 wd:Q41148 .\n?x0 wdt:P1040 wd:Q41148\n}LIMIT 1",
        "questionWithBrackets": "What did [Martin Scorsese] direct and edit"
    },
    {
        "questionIdx": 143004,
        "questionPatternModEntities": "What did M1 's male spouse executive produce",
        "questionTemplate": "What did [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x1 P1 M0 .\n?x1 P2 M1 .\nFILTER ( ?x1 != M1 )\n}",
        "recursionDepth": 20,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1431 ?x1 .\n?x1 wdt:P21 wd:Q6581097 .\n?x1 wdt:P26 wd:Q175913 .\nFILTER ( ?x1 != wd:Q175913 )\n}LIMIT 1",
        "questionWithBrackets": "What did [Kristina S\u00f6derbaum] 's male spouse executive produce"
    },
    {
        "questionIdx": 143069,
        "questionPatternModEntities": "What did M0 , M1 , and M2 direct",
        "questionTemplate": "What did [entity] , [entity] , and [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2\n}",
        "recursionDepth": 17,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 wd:Q7371 .\n?x0 wdt:P57 wd:Q13888 .\n?x0 wdt:P57 wd:Q53004\n}",
        "questionWithBrackets": "What did [Vittorio De Sica] , [Federico Fellini] , and [Luchino Visconti] direct"
    },
    {
        "questionIdx": 143109,
        "questionPatternModEntities": "What did M0 's sibling executive produce , write , and edit",
        "questionTemplate": "What did [entity] 's [ROLE_SIMPLE] [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x1 P3 M0 .\nFILTER ( ?x1 != M0 )\n}",
        "recursionDepth": 29,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1040 ?x1 .\n?x0 wdt:P1431 ?x1 .\n?x0 wdt:P58 ?x1 .\n?x1 wdt:P3373 wd:Q28370409 .\nFILTER ( ?x1 != wd:Q28370409 )\n}LIMIT 1",
        "questionWithBrackets": "What did [Everton Rocca] 's sibling executive produce , write , and edit"
    },
    {
        "questionIdx": 143117,
        "questionPatternModEntities": "What did M1 's French parent executive produce",
        "questionTemplate": "What did [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x1 P1 M0 .\n?x1 P2 M1\n}",
        "recursionDepth": 20,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1431 ?x1 .\n?x1 wdt:P40|wdt:P355 wd:Q3592679 .\n?x1 wdt:P27 wd:Q142\n}LIMIT 1",
        "questionWithBrackets": "What did [\u00c9va Truffaut] 's French parent executive produce"
    },
    {
        "questionIdx": 143118,
        "questionPatternModEntities": "What did M0 found , M1 found , M2 found , and M3 found",
        "questionTemplate": "What did [entity] [VP_SIMPLE] , [entity] [VP_SIMPLE] , [entity] [VP_SIMPLE] , and [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P0 M3\n}",
        "recursionDepth": 39,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P112 wd:Q16 .\n?x0 wdt:P112 wd:Q739 .\n?x0 wdt:P112 wd:Q31 .\n?x0 wdt:P112 wd:Q20\n}",
        "questionWithBrackets": "What did [Canada] found , [Belgium] found , [Norway] found , and [Colombia] found"
    },
    {
        "questionIdx": 143120,
        "questionPatternModEntities": "What did M0 's Japanese sibling write and produce",
        "questionTemplate": "What did [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] [VP_SIMPLE] and [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x1 P2 M0 .\n?x1 P3 M1 .\nFILTER ( ?x1 != M0 )\n}",
        "recursionDepth": 27,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x0 wdt:P58 ?x1 .\n?x1 wdt:P27 wd:Q17 .\n?x1 wdt:P3373 wd:Q1322220 .\nFILTER ( ?x1 != wd:Q1322220 )\n}LIMIT 1",
        "questionWithBrackets": "What did [Yujiro Ishihara] 's Japanese sibling write and produce"
    },
    {
        "questionIdx": 143144,
        "questionPatternModEntities": "What did M2 direct , M0 and M1 write , and M3 's male sibling write",
        "questionTemplate": "What did [entity] [VP_SIMPLE] , [entity] and [entity] [VP_SIMPLE] , and [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P1 M2 .\n?x1 P2 M3 .\n?x1 P3 M4 .\nFILTER ( ?x1 != M3 )\n}",
        "recursionDepth": 43,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 wd:Q55169 .\n?x0 wdt:P58 ?x1 .\n?x0 wdt:P58 wd:Q1898745 .\n?x0 wdt:P58 wd:Q989 .\n?x1 wdt:P21 wd:Q6581097 .\n?x1 wdt:P3373 wd:Q3505550 .\nFILTER ( ?x1 != wd:Q3505550 )\n}",
        "questionWithBrackets": "What did [Krzysztof Zanussi] direct , [John Paul II] and [Mario Di Nardo] write , and [Edmund Wojty\u0142a] 's male sibling write"
    },
    {
        "questionIdx": 143150,
        "questionPatternModEntities": "What did M0 's spouse found",
        "questionTemplate": "What did [entity] 's [ROLE_SIMPLE] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x1 P1 M0 .\nFILTER ( ?x1 != M0 )\n}",
        "recursionDepth": 14,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P112 ?x1 .\n?x1 wdt:P26 wd:Q191789 .\nFILTER ( ?x1 != wd:Q191789 )\n}LIMIT 1",
        "questionWithBrackets": "What did [Martha Washington] 's spouse found"
    },
    {
        "questionIdx": 143222,
        "questionPatternModEntities": "What did M5 and M6 direct , M2 , M3 , and M4 edit , and M0 and M1 write",
        "questionTemplate": "What did [entity] and [entity] [VP_SIMPLE] , [entity] , [entity] , and [entity] [VP_SIMPLE] , and [entity] and [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P1 M2 .\n?x0 P1 M3 .\n?x0 P1 M4 .\n?x0 P2 M5 .\n?x0 P2 M6\n}",
        "recursionDepth": 45,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 wd:Q549956 .\n?x0 wdt:P57 wd:Q2838329 .\n?x0 wdt:P1040 wd:Q47284 .\n?x0 wdt:P1040 wd:Q5359064 .\n?x0 wdt:P1040 wd:Q273379 .\n?x0 wdt:P58 wd:Q3772 .\n?x0 wdt:P58 wd:Q25161\n}",
        "questionWithBrackets": "What did [Allison Anders] and [Alexandre Rockwell] direct , [Robert Rodriguez] , [Sally Menke] , and [Elena Maganini] edit , and [Roald Dahl] and [Quentin Tarantino] write"
    },
    {
        "questionIdx": 143224,
        "questionPatternModEntities": "What did M5 direct , M0 executive produce , M4 produce , and M1 , M2 , and M3 write",
        "questionTemplate": "What did [entity] [VP_SIMPLE] , [entity] [VP_SIMPLE] , [entity] [VP_SIMPLE] , and [entity] , [entity] , and [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\n?x0 P1 M3 .\n?x0 P2 M4 .\n?x0 P3 M5\n}",
        "recursionDepth": 47,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 wd:Q295964 .\n?x0 wdt:P1431 wd:Q8877 .\n?x0 wdt:P162|wdt:P272 wd:Q192557 .\n?x0 wdt:P58 wd:Q615343 .\n?x0 wdt:P58 wd:Q432598 .\n?x0 wdt:P58 wd:Q310556\n}",
        "questionWithBrackets": "What did [Jon Favreau] direct , [Steven Spielberg] executive produce , [DreamWorks] produce , and [Damon Lindelof] , [Alex Kurtzman] , and [Mark Fergus] write"
    },
    {
        "questionIdx": 143227,
        "questionPatternModEntities": "What did M0 , M1 , and M2 write , M3 and M4 write , and M5 and M6 edit",
        "questionTemplate": "What did [entity] , [entity] , and [entity] [VP_SIMPLE] , [entity] and [entity] [VP_SIMPLE] , and [entity] and [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P0 M3 .\n?x0 P0 M4 .\n?x0 P1 M5 .\n?x0 P1 M6\n}",
        "recursionDepth": 45,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1040 wd:Q55211 .\n?x0 wdt:P1040 wd:Q5639976 .\n?x0 wdt:P58 wd:Q312611 .\n?x0 wdt:P58 wd:Q44221 .\n?x0 wdt:P58 wd:Q55238 .\n?x0 wdt:P58 wd:Q432709 .\n?x0 wdt:P58 wd:Q113628\n}",
        "questionWithBrackets": "What did [Idrissa Ou\u00e9draogo] , [Sean Penn] , and [Ken Loach] write , [Samira Makhmalbaf] and [Youssef Chahine] write , and [Mohsen Makhmalbaf] and [Hajime Okayasu] edit"
    },
    {
        "questionIdx": 143228,
        "questionPatternModEntities": "What did M2 , M3 , and M4 edit , M0 and M1 write , and M5 and M6 edit",
        "questionTemplate": "What did [entity] , [entity] , and [entity] [VP_SIMPLE] , [entity] and [entity] [VP_SIMPLE] , and [entity] and [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P1 M2 .\n?x0 P1 M3 .\n?x0 P1 M4 .\n?x0 P1 M5 .\n?x0 P1 M6\n}",
        "recursionDepth": 45,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1040 wd:Q55211 .\n?x0 wdt:P1040 wd:Q5639976 .\n?x0 wdt:P1040 wd:Q55215 .\n?x0 wdt:P1040 wd:Q22074634 .\n?x0 wdt:P1040 wd:Q541826 .\n?x0 wdt:P58 wd:Q312611 .\n?x0 wdt:P58 wd:Q313497\n}",
        "questionWithBrackets": "What did [Alejandro Gonz\u00e1lez I\u00f1\u00e1rritu] , [Jay Cassidy] , and [Hajime Okayasu] edit , [Danis Tanovi\u0107] and [Youssef Chahine] write , and [Mohsen Makhmalbaf] and [Robert Duffy] edit"
    },
    {
        "questionIdx": 143236,
        "questionPatternModEntities": "What did M0 direct and M1 's sibling direct",
        "questionTemplate": "What did [entity] [VP_SIMPLE] and [entity] 's [ROLE_SIMPLE] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P0 M0 .\n?x1 P1 M1 .\nFILTER ( ?x1 != M1 )\n}",
        "recursionDepth": 25,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 ?x1 .\n?x0 wdt:P57 wd:Q4461 .\n?x1 wdt:P3373 wd:Q932051 .\nFILTER ( ?x1 != wd:Q932051 )\n}",
        "questionWithBrackets": "What did [Troian Bellisario] direct and [Michael Bellisario] 's sibling direct"
    },
    {
        "questionIdx": 143245,
        "questionPatternModEntities": "What did M0 distribute , M1 distribute , M3 produce , and M2 distribute",
        "questionTemplate": "What did [entity] [VP_SIMPLE] , [entity] [VP_SIMPLE] , [entity] [VP_SIMPLE] , and [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P1 M3\n}",
        "recursionDepth": 39,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P750 wd:Q9531 .\n?x0 wdt:P750 wd:Q907311 .\n?x0 wdt:P750 wd:Q80948336 .\n?x0 wdt:P162|wdt:P272 wd:Q721429\n}",
        "questionWithBrackets": "What did [FandangoNow] distribute , [Netflix] distribute , [Alastair Fothergill] produce , and [BBC] distribute"
    },
    {
        "questionIdx": 143344,
        "questionPatternModEntities": "What did M0 , M1 , M2 , and M3 write and produce",
        "questionTemplate": "What did [entity] , [entity] , [entity] , and [entity] [VP_SIMPLE] and [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P0 M3 .\n?x0 P1 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\n?x0 P1 M3\n}",
        "recursionDepth": 28,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P162|wdt:P272 wd:Q24962 .\n?x0 wdt:P162|wdt:P272 wd:Q25014 .\n?x0 wdt:P162|wdt:P272 wd:Q166159 .\n?x0 wdt:P162|wdt:P272 wd:Q210741 .\n?x0 wdt:P58 wd:Q24962 .\n?x0 wdt:P58 wd:Q25014 .\n?x0 wdt:P58 wd:Q166159 .\n?x0 wdt:P58 wd:Q210741\n}",
        "questionWithBrackets": "What did [Graham Chapman] , [John Cleese] , [Eric Idle] , and [Terry Jones] write and produce"
    },
    {
        "questionIdx": 143345,
        "questionPatternModEntities": "What did M0 , M1 , M2 , M3 , and M4 direct and write",
        "questionTemplate": "What did [entity] , [entity] , [entity] , [entity] , and [entity] [VP_SIMPLE] and [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P0 M3 .\n?x0 P0 M4 .\n?x0 P1 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\n?x0 P1 M3 .\n?x0 P1 M4\n}",
        "recursionDepth": 31,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 wd:Q4500 .\n?x0 wdt:P57 wd:Q15042700 .\n?x0 wdt:P57 wd:Q5542223 .\n?x0 wdt:P57 wd:Q7174311 .\n?x0 wdt:P57 wd:Q7407299 .\n?x0 wdt:P58 wd:Q4500 .\n?x0 wdt:P58 wd:Q15042700 .\n?x0 wdt:P58 wd:Q5542223 .\n?x0 wdt:P58 wd:Q7174311 .\n?x0 wdt:P58 wd:Q7407299\n}",
        "questionWithBrackets": "What did [George Mastras] , [Sam Catlin] , [Peter Gould] , [Thomas Schnauz] , and [Vince Gilligan] direct and write"
    },
    {
        "questionIdx": 143385,
        "questionPatternModEntities": "What did M0 distribute , M1 and M2 distribute , M5 produce , and M3 and M4 distribute",
        "questionTemplate": "What did [entity] [VP_SIMPLE] , [entity] and [entity] [VP_SIMPLE] , [entity] [VP_SIMPLE] , and [entity] and [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P0 M3 .\n?x0 P0 M4 .\n?x0 P1 M5\n}",
        "recursionDepth": 47,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P750 wd:Q145 .\n?x0 wdt:P750 wd:Q80948336 .\n?x0 wdt:P750 wd:Q907311 .\n?x0 wdt:P750 wd:Q9589 .\n?x0 wdt:P750 wd:Q5371838 .\n?x0 wdt:P162|wdt:P272 wd:Q79618131\n}",
        "questionWithBrackets": "What did [iTunes] distribute , [FandangoNow] and [Vudu] distribute , [Apocalypso Pictures] produce , and [Netflix] and [United Kingdom] distribute"
    },
    {
        "questionIdx": 143445,
        "questionPatternModEntities": "What did M0 found , M1 , M2 , and M3 found , M4 found , and M5 found",
        "questionTemplate": "What did [entity] [VP_SIMPLE] , [entity] , [entity] , and [entity] [VP_SIMPLE] , [entity] [VP_SIMPLE] , and [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P0 M3 .\n?x0 P0 M4 .\n?x0 P0 M5\n}",
        "recursionDepth": 46,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P112 wd:Q17 .\n?x0 wdt:P112 wd:Q16 .\n?x0 wdt:P112 wd:Q145 .\n?x0 wdt:P112 wd:Q30 .\n?x0 wdt:P112 wd:Q30 .\n?x0 wdt:P112 wd:Q142\n}",
        "questionWithBrackets": "What did m.0f8l9c found , m.07ssc , [Canada] , and [United States of America] found , m.09c7w0 found , and [Japan] found"
    },
    {
        "questionIdx": 143455,
        "questionPatternModEntities": "What did M0 found , M1 found , and M2 's Italian employee found",
        "questionTemplate": "What did [entity] [VP_SIMPLE] , [entity] [VP_SIMPLE] , and [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x1 P1 M2 .\n?x1 P2 M3\n}",
        "recursionDepth": 39,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P112 ?x1 .\n?x0 wdt:P112 wd:Q16268759 .\n?x0 wdt:P112 wd:Q12807 .\n?x1 wdt:P108 wd:Q131262 .\n?x1 wdt:P27 wd:Q38\n}",
        "questionWithBrackets": "What did [Umberto Eco] found , [Elisabetta Sgarbi] found , and [University of Bologna] 's Italian employee found"
    },
    {
        "questionIdx": 143467,
        "questionPatternModEntities": "What did M1 's sibling 's sibling 's American sibling found",
        "questionTemplate": "What did [entity] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x1 P1 ?x2 .\n?x1 P2 M0 .\n?x2 P1 ?x3 .\n?x3 P1 M1 .\nFILTER ( ?x1 != ?x2 ) .\nFILTER ( ?x2 != ?x3 ) .\nFILTER ( ?x3 != M1 )\n}",
        "recursionDepth": 27,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P112 ?x1 .\n?x1 wdt:P27 wd:Q30 .\n?x1 wdt:P3373 ?x2 .\n?x2 wdt:P3373 ?x3 .\n?x3 wdt:P3373 wd:Q850421 .\nFILTER ( ?x1 != ?x2 ) .\nFILTER ( ?x2 != ?x3 ) .\nFILTER ( ?x3 != wd:Q850421 )\n}LIMIT 1",
        "questionWithBrackets": "What did [Betty Washington Lewis] 's sibling 's sibling 's American sibling found"
    },
    {
        "questionIdx": 143468,
        "questionPatternModEntities": "What did M0 executive produce , M4 edit , M1 and M2 executive produce , and M3 write",
        "questionTemplate": "What did [entity] [VP_SIMPLE] , [entity] [VP_SIMPLE] , [entity] and [entity] [VP_SIMPLE] , and [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P1 M3 .\n?x0 P2 M4\n}",
        "recursionDepth": 45,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1040 wd:Q1969707 .\n?x0 wdt:P1431 wd:Q75079 .\n?x0 wdt:P1431 wd:Q1900360 .\n?x0 wdt:P1431 wd:Q3041233 .\n?x0 wdt:P58 wd:Q362061\n}",
        "questionWithBrackets": "What did [Mark Radcliffe] executive produce , [Richard Francis-Bruce] edit , [Chris Columbus] and [Duncan Henderson] executive produce , and [Steve Kloves] write"
    },
    {
        "questionIdx": 143511,
        "questionPatternModEntities": "What did M1 's parent edit and M0 executive produce",
        "questionTemplate": "What did [entity] 's [ROLE_SIMPLE] [VP_SIMPLE] and [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 ?x1 .\n?x1 P2 M1\n}",
        "recursionDepth": 26,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1040 ?x1 .\n?x0 wdt:P1431 wd:Q8877 .\n?x1 wdt:P40|wdt:P355 wd:Q1001309\n}",
        "questionWithBrackets": "What did [Dan Zimmerman] 's parent edit and [Steven Spielberg] executive produce"
    },
    {
        "questionIdx": 143554,
        "questionPatternModEntities": "What did M1 direct and M0 produce",
        "questionTemplate": "What did [entity] [VP_SIMPLE] and [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1\n}",
        "recursionDepth": 21,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 wd:Q1385379 .\n?x0 wdt:P162|wdt:P272 wd:Q7414\n}",
        "questionWithBrackets": "What did [Wilfred Jackson] direct and [The Walt Disney Company] produce"
    },
    {
        "questionIdx": 143557,
        "questionPatternModEntities": "What did M0 executive produce , M1 executive produce , and M2 's sibling produce",
        "questionTemplate": "What did [entity] [VP_SIMPLE] , [entity] [VP_SIMPLE] , and [entity] 's [ROLE_SIMPLE] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P1 ?x1 .\n?x1 P2 M2 .\nFILTER ( ?x1 != M2 )\n}",
        "recursionDepth": 36,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1431 wd:Q8877 .\n?x0 wdt:P1431 wd:Q237207 .\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x1 wdt:P3373 wd:Q6766988 .\nFILTER ( ?x1 != wd:Q6766988 )\n}",
        "questionWithBrackets": "What did [Steven Spielberg] executive produce , [Kathleen Kennedy] executive produce , and [Mark Canton] 's sibling produce"
    },
    {
        "questionIdx": 143562,
        "questionPatternModEntities": "What did M0 found and M1 's Italian sibling found",
        "questionTemplate": "What did [entity] [VP_SIMPLE] and [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P0 M0 .\n?x1 P1 M1 .\n?x1 P2 M2 .\nFILTER ( ?x1 != M1 )\n}",
        "recursionDepth": 30,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P112 ?x1 .\n?x0 wdt:P112 wd:Q2604 .\n?x1 wdt:P27 wd:Q38 .\n?x1 wdt:P3373 wd:Q2679849 .\nFILTER ( ?x1 != wd:Q2679849 )\n}",
        "questionWithBrackets": "What did [Pius XII] found and [Francesco Pacelli] 's Italian sibling found"
    },
    {
        "questionIdx": 143568,
        "questionPatternModEntities": "What did M1 's female spouse write",
        "questionTemplate": "What did [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x1 P1 M0 .\n?x1 P2 M1 .\nFILTER ( ?x1 != M1 )\n}",
        "recursionDepth": 19,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P58 ?x1 .\n?x1 wdt:P21 wd:Q6581072 .\n?x1 wdt:P26 wd:Q315051 .\nFILTER ( ?x1 != wd:Q315051 )\n}LIMIT 1",
        "questionWithBrackets": "What did [James Brolin] 's female spouse write"
    },
    {
        "questionIdx": 143585,
        "questionPatternModEntities": "What did M0 's male sibling direct and write",
        "questionTemplate": "What did [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] [VP_SIMPLE] and [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x1 P2 M0 .\n?x1 P3 M1 .\nFILTER ( ?x1 != M0 )\n}",
        "recursionDepth": 27,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 ?x1 .\n?x0 wdt:P58 ?x1 .\n?x1 wdt:P21 wd:Q6581097 .\n?x1 wdt:P3373 wd:Q606780 .\nFILTER ( ?x1 != wd:Q606780 )\n}LIMIT 1",
        "questionWithBrackets": "What did [Sydney Chaplin] 's male sibling direct and write"
    },
    {
        "questionIdx": 143590,
        "questionPatternModEntities": "What did M0 executive produce , M2 write , M4 edit , M1 executive produce , and M3 write",
        "questionTemplate": "What did [entity] [VP_SIMPLE] , [entity] [VP_SIMPLE] , [entity] [VP_SIMPLE] , [entity] [VP_SIMPLE] , and [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P1 M2 .\n?x0 P1 M3 .\n?x0 P2 M4\n}",
        "recursionDepth": 50,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1040 wd:Q977704 .\n?x0 wdt:P1431 wd:Q75079 .\n?x0 wdt:P1431 wd:Q975579 .\n?x0 wdt:P58 wd:Q362061 .\n?x0 wdt:P58 wd:Q34660\n}",
        "questionWithBrackets": "What did [David Barron] executive produce , [J. K. Rowling] write , [Peter Honess] edit , [Chris Columbus] executive produce , and [Steve Kloves] write"
    },
    {
        "questionIdx": 143591,
        "questionPatternModEntities": "What did M0 executive produce , M1 write , M3 's employee direct , and M2 direct",
        "questionTemplate": "What did [entity] [VP_SIMPLE] , [entity] [VP_SIMPLE] , [entity] 's [ROLE_SIMPLE] [VP_SIMPLE] , and [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P2 ?x1 .\n?x0 P2 M2 .\n?x1 P3 M3\n}",
        "recursionDepth": 44,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 ?x1 .\n?x0 wdt:P57 wd:Q1151111 .\n?x0 wdt:P1431 wd:Q8877 .\n?x0 wdt:P58 wd:Q3306897 .\n?x1 wdt:P108 wd:Q2216535\n}",
        "questionWithBrackets": "What did [Steven Spielberg] executive produce , [Bill Kopp] write , [Walt Disney Studios] 's employee direct , and [Rob Minkoff] direct"
    },
    {
        "questionIdx": 143593,
        "questionPatternModEntities": "What did M0 and M1 executive produce and produce",
        "questionTemplate": "What did [entity] and [entity] [VP_SIMPLE] and [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P1 M0 .\n?x0 P1 M1\n}",
        "recursionDepth": 23,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1431 wd:Q3772 .\n?x0 wdt:P1431 wd:Q965826 .\n?x0 wdt:P162|wdt:P272 wd:Q3772 .\n?x0 wdt:P162|wdt:P272 wd:Q965826\n}",
        "questionWithBrackets": "What did [Scott Spiegel] and [Quentin Tarantino] executive produce and produce"
    },
    {
        "questionIdx": 143603,
        "questionPatternModEntities": "What did M0 , M1 , and M2 produce and edit",
        "questionTemplate": "What did [entity] , [entity] , and [entity] [VP_SIMPLE] and [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P1 M0 .\n?x0 P1 M1 .\n?x0 P1 M2\n}",
        "recursionDepth": 25,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1040 wd:Q562108 .\n?x0 wdt:P1040 wd:Q1687239 .\n?x0 wdt:P1040 wd:Q35979475 .\n?x0 wdt:P162|wdt:P272 wd:Q562108 .\n?x0 wdt:P162|wdt:P272 wd:Q1687239 .\n?x0 wdt:P162|wdt:P272 wd:Q35979475\n}",
        "questionWithBrackets": "What did [J\u00f8rgen Leth] , [Jens J\u00f8rgen Thorsen] , and [Ole John] produce and edit"
    },
    {
        "questionIdx": 143616,
        "questionPatternModEntities": "What did M1 's German spouse edit",
        "questionTemplate": "What did [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x1 P1 M0 .\n?x1 P2 M1 .\nFILTER ( ?x1 != M1 )\n}",
        "recursionDepth": 19,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1040 ?x1 .\n?x1 wdt:P27 wd:Q183 .\n?x1 wdt:P26 wd:Q58866 .\nFILTER ( ?x1 != wd:Q58866 )\n}LIMIT 1",
        "questionWithBrackets": "What did [Thea von Harbou] 's German spouse edit"
    },
    {
        "questionIdx": 143617,
        "questionPatternModEntities": "What did M0 's spouse executive produce and produce",
        "questionTemplate": "What did [entity] 's [ROLE_SIMPLE] [VP_SIMPLE] and [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x1 P2 M0 .\nFILTER ( ?x1 != M0 )\n}",
        "recursionDepth": 23,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1431 ?x1 .\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x1 wdt:P26 wd:Q203165 .\nFILTER ( ?x1 != wd:Q203165 )\n}LIMIT 1",
        "questionWithBrackets": "What did [Alma Reville] 's spouse executive produce and produce"
    },
    {
        "questionIdx": 143692,
        "questionPatternModEntities": "What did M0 and M1 distribute and M2 's child distribute",
        "questionTemplate": "What did [entity] and [entity] [VP_SIMPLE] and [entity] 's [ROLE_SIMPLE] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x1 P1 M2\n}",
        "recursionDepth": 29,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P750 ?x1 .\n?x0 wdt:P750 wd:Q73801 .\n?x0 wdt:P750 wd:Q135288 .\n?x1 wdt:P749 wd:Q2283\n}",
        "questionWithBrackets": "What did [Xbox Game Studios] and [Microsoft Store] distribute and [Microsoft] 's child distribute"
    },
    {
        "questionIdx": 143704,
        "questionPatternModEntities": "What did M5 produce , M3 write , M4 write , and M0 , M1 , and M2 executive produce",
        "questionTemplate": "What did [entity] [VP_SIMPLE] , [entity] [VP_SIMPLE] , [entity] [VP_SIMPLE] , and [entity] , [entity] , and [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P1 M3 .\n?x0 P1 M4 .\n?x0 P2 M5\n}",
        "recursionDepth": 47,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1431 wd:Q75079 .\n?x0 wdt:P1431 wd:Q11778321 .\n?x0 wdt:P1431 wd:Q975579 .\n?x0 wdt:P162|wdt:P272 wd:Q319986 .\n?x0 wdt:P58 wd:Q34660 .\n?x0 wdt:P58 wd:Q362061\n}",
        "questionWithBrackets": "What did [David Heyman] produce , [Steve Kloves] write , [J. K. Rowling] write , and [Michael Barnathan] , [David Barron] , and [Chris Columbus] executive produce"
    },
    {
        "questionIdx": 143706,
        "questionPatternModEntities": "What did M0 's sibling write and direct",
        "questionTemplate": "What did [entity] 's [ROLE_SIMPLE] [VP_SIMPLE] and [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x1 P2 M0 .\nFILTER ( ?x1 != M0 )\n}",
        "recursionDepth": 22,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 ?x1 .\n?x0 wdt:P58 ?x1 .\n?x1 wdt:P3373 wd:Q606780 .\nFILTER ( ?x1 != wd:Q606780 )\n}LIMIT 1",
        "questionWithBrackets": "What did [Sydney Chaplin] 's sibling write and direct"
    },
    {
        "questionIdx": 143735,
        "questionPatternModEntities": "What did M0 executive produce and M1 's parent write",
        "questionTemplate": "What did [entity] [VP_SIMPLE] and [entity] 's [ROLE_SIMPLE] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 ?x1 .\n?x1 P2 M1\n}",
        "recursionDepth": 26,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1431 wd:Q8877 .\n?x0 wdt:P58 ?x1 .\n?x1 wdt:P40|wdt:P355 wd:Q132058\n}",
        "questionWithBrackets": "What did [Steven Spielberg] executive produce and [Jon Kasdan] 's parent write"
    },
    {
        "questionIdx": 143748,
        "questionPatternModEntities": "What did M2 direct , M0 executive produce , M1 produce , and M3 and M4 direct",
        "questionTemplate": "What did [entity] [VP_SIMPLE] , [entity] [VP_SIMPLE] , [entity] [VP_SIMPLE] , and [entity] and [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P2 M2 .\n?x0 P2 M3 .\n?x0 P2 M4\n}",
        "recursionDepth": 44,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 wd:Q1356510 .\n?x0 wdt:P57 wd:Q6514839 .\n?x0 wdt:P57 wd:Q532944 .\n?x0 wdt:P1431 wd:Q39829 .\n?x0 wdt:P162|wdt:P272 wd:Q63656290\n}",
        "questionWithBrackets": "What did [Lee Rose] direct , [Stephen King] executive produce , [Randy Sutter] produce , and [Eriq La Salle] and [Ernest Dickerson] direct"
    },
    {
        "questionIdx": 143750,
        "questionPatternModEntities": "What did M2 direct , M3 and M4 direct , M0 executive produce , and M1 executive produce",
        "questionTemplate": "What did [entity] [VP_SIMPLE] , [entity] and [entity] [VP_SIMPLE] , [entity] [VP_SIMPLE] , and [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P1 M2 .\n?x0 P1 M3 .\n?x0 P1 M4\n}",
        "recursionDepth": 45,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 wd:Q3139378 .\n?x0 wdt:P57 wd:Q360477 .\n?x0 wdt:P57 wd:Q253977 .\n?x0 wdt:P1431 wd:Q8877 .\n?x0 wdt:P1431 wd:Q362793\n}",
        "questionWithBrackets": "What did [Holly Dale] direct , [Peter Weller] and [Roxann Dawson] direct , [Jack Bender] executive produce , and [Steven Spielberg] executive produce"
    },
    {
        "questionIdx": 143761,
        "questionPatternModEntities": "What did M1 's female spouse executive produce , direct , and write",
        "questionTemplate": "What did [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x1 P3 M0 .\n?x1 P4 M1 .\nFILTER ( ?x1 != M1 )\n}",
        "recursionDepth": 34,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 ?x1 .\n?x0 wdt:P1431 ?x1 .\n?x0 wdt:P58 ?x1 .\n?x1 wdt:P21 wd:Q6581072 .\n?x1 wdt:P26 wd:Q192990 .\nFILTER ( ?x1 != wd:Q192990 )\n}LIMIT 1",
        "questionWithBrackets": "What did [Guy Ritchie] 's female spouse executive produce , direct , and write"
    },
    {
        "questionIdx": 143763,
        "questionPatternModEntities": "What did M5 and M6 direct , M0 , M1 , M2 , and M3 executive produce , and M4 produce",
        "questionTemplate": "What did [entity] and [entity] [VP_SIMPLE] , [entity] , [entity] , [entity] , and [entity] [VP_SIMPLE] , and [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P0 M3 .\n?x0 P1 M4 .\n?x0 P2 M5 .\n?x0 P2 M6\n}",
        "recursionDepth": 45,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 wd:Q253977 .\n?x0 wdt:P57 wd:Q532944 .\n?x0 wdt:P1431 wd:Q8877 .\n?x0 wdt:P1431 wd:Q849628 .\n?x0 wdt:P1431 wd:Q362793 .\n?x0 wdt:P1431 wd:Q7804237 .\n?x0 wdt:P162|wdt:P272 wd:Q63656290\n}",
        "questionWithBrackets": "What did [Eriq La Salle] and [Roxann Dawson] direct , [Steven Spielberg] , [Tim Schlattmann] , [Brian K. Vaughan] , and [Jack Bender] executive produce , and [Randy Sutter] produce"
    },
    {
        "questionIdx": 143765,
        "questionPatternModEntities": "What did M2 and M3 write , M0 and M1 executive produce , and M4 's parent direct",
        "questionTemplate": "What did [entity] and [entity] [VP_SIMPLE] , [entity] and [entity] [VP_SIMPLE] , and [entity] 's [ROLE_SIMPLE] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P1 M2 .\n?x0 P1 M3 .\n?x0 P2 ?x1 .\n?x1 P3 M4\n}",
        "recursionDepth": 43,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 ?x1 .\n?x0 wdt:P1431 wd:Q61881 .\n?x0 wdt:P1431 wd:Q1277426 .\n?x0 wdt:P58 wd:Q503767 .\n?x0 wdt:P58 wd:Q190379 .\n?x1 wdt:P40|wdt:P355 wd:Q4769572\n}",
        "questionWithBrackets": "What did [Ian McEwan] and [Andrew Birkin] write , [Bernd Eichinger] and [Martin Moszkowicz] executive produce , and [Anno Birkin] 's parent direct"
    },
    {
        "questionIdx": 143767,
        "questionPatternModEntities": "What did M0 produce and M1 's spouse executive produce",
        "questionTemplate": "What did [entity] [VP_SIMPLE] and [entity] 's [ROLE_SIMPLE] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 M0 .\n?x1 P2 M1 .\nFILTER ( ?x1 != M1 )\n}",
        "recursionDepth": 26,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1431 ?x1 .\n?x0 wdt:P162|wdt:P272 wd:Q190373 .\n?x1 wdt:P26 wd:Q40162 .\nFILTER ( ?x1 != wd:Q40162 )\n}",
        "questionWithBrackets": "What did [Joseph Barbera] produce and [Kate Capshaw] 's spouse executive produce"
    },
    {
        "questionIdx": 143772,
        "questionPatternModEntities": "What did M0 distribute , M1 distribute , M2 , M3 , and M4 distribute , and M5 produce",
        "questionTemplate": "What did [entity] [VP_SIMPLE] , [entity] [VP_SIMPLE] , [entity] , [entity] , and [entity] [VP_SIMPLE] , and [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P0 M3 .\n?x0 P0 M4 .\n?x0 P1 M5\n}",
        "recursionDepth": 46,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P750 wd:Q145 .\n?x0 wdt:P750 wd:Q80948336 .\n?x0 wdt:P750 wd:Q5371838 .\n?x0 wdt:P750 wd:Q907311 .\n?x0 wdt:P750 wd:Q9589 .\n?x0 wdt:P162|wdt:P272 wd:Q7684047\n}",
        "questionWithBrackets": "What did [FandangoNow] distribute , [United Kingdom] distribute , [Netflix] , [iTunes] , and [Vudu] distribute , and [Tanya Seghatchian] produce"
    },
    {
        "questionIdx": 143777,
        "questionPatternModEntities": "What did M0 's female sibling edit and direct",
        "questionTemplate": "What did [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] [VP_SIMPLE] and [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x1 P2 M0 .\n?x1 P3 M1 .\nFILTER ( ?x1 != M0 )\n}",
        "recursionDepth": 27,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 ?x1 .\n?x0 wdt:P1040 ?x1 .\n?x1 wdt:P21 wd:Q6581072 .\n?x1 wdt:P3373 wd:Q143945 .\nFILTER ( ?x1 != wd:Q143945 )\n}LIMIT 1",
        "questionWithBrackets": "What did [Carla Bruni] 's female sibling edit and direct"
    },
    {
        "questionIdx": 143780,
        "questionPatternModEntities": "What did M3 write , M0 and M1 executive produce , M2 executive produce , and M4 and M5 direct",
        "questionTemplate": "What did [entity] [VP_SIMPLE] , [entity] and [entity] [VP_SIMPLE] , [entity] [VP_SIMPLE] , and [entity] and [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P1 M3 .\n?x0 P2 M4 .\n?x0 P2 M5\n}",
        "recursionDepth": 49,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 wd:Q253977 .\n?x0 wdt:P57 wd:Q532944 .\n?x0 wdt:P1431 wd:Q39829 .\n?x0 wdt:P1431 wd:Q6984051 .\n?x0 wdt:P1431 wd:Q8877 .\n?x0 wdt:P58 wd:Q4133060\n}",
        "questionWithBrackets": "What did [Rick Cleveland] write , [Stephen King] and [Steven Spielberg] executive produce , [Neal Baer] executive produce , and [Eriq La Salle] and [Roxann Dawson] direct"
    },
    {
        "questionIdx": 143787,
        "questionPatternModEntities": "What did M0 direct and a female spouse of M2 write",
        "questionTemplate": "What did [entity] [VP_SIMPLE] and a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 M0 .\n?x1 P2 M1 .\n?x1 P3 M2 .\nFILTER ( ?x1 != M2 )\n}",
        "recursionDepth": 32,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 wd:Q2023824 .\n?x0 wdt:P58 ?x1 .\n?x1 wdt:P21 wd:Q6581072 .\n?x1 wdt:P26 wd:Q6120528 .\nFILTER ( ?x1 != wd:Q6120528 )\n}",
        "questionWithBrackets": "What did [Louis Mercanton] direct and a female spouse of [Jacques Damala] write"
    },
    {
        "questionIdx": 143804,
        "questionPatternModEntities": "What did M0 produce and a male sibling of M1 direct",
        "questionTemplate": "What did [entity] [VP_SIMPLE] and a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 ?x1 .\n?x1 P2 M1 .\n?x1 P3 M2 .\nFILTER ( ?x1 != M1 )\n}",
        "recursionDepth": 32,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 ?x1 .\n?x0 wdt:P162|wdt:P272 wd:Q7414 .\n?x1 wdt:P21 wd:Q6581097 .\n?x1 wdt:P3373 wd:Q1344275 .\nFILTER ( ?x1 != wd:Q1344275 )\n}",
        "questionWithBrackets": "What did [The Walt Disney Company] produce and a male sibling of [Michael DeLuise] direct"
    },
    {
        "questionIdx": 143815,
        "questionPatternModEntities": "What did M0 and M1 executive produce , M2 executive produce , and M3 , M4 , M5 , and M6 executive produce",
        "questionTemplate": "What did [entity] and [entity] [VP_SIMPLE] , [entity] [VP_SIMPLE] , and [entity] , [entity] , [entity] , and [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P0 M3 .\n?x0 P0 M4 .\n?x0 P0 M5 .\n?x0 P0 M6\n}",
        "recursionDepth": 47,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1431 wd:Q4500 .\n?x0 wdt:P1431 wd:Q434272 .\n?x0 wdt:P1431 wd:Q5523915 .\n?x0 wdt:P1431 wd:Q3942877 .\n?x0 wdt:P1431 wd:Q220751 .\n?x0 wdt:P1431 wd:Q1279758 .\n?x0 wdt:P1431 wd:Q3990673\n}",
        "questionWithBrackets": "What did [Vince Gilligan] and [David Shore] executive produce , [Mark Johnson] executive produce , and [Garrett Lerner] , [Thomas L. Moran] , [Russel Friend] , and [Bryan Singer] executive produce"
    },
    {
        "questionIdx": 143821,
        "questionPatternModEntities": "What did M0 executive produce , M1 executive produce , and M2 , M3 , M4 , M5 , and M6 executive produce",
        "questionTemplate": "What did [entity] [VP_SIMPLE] , [entity] [VP_SIMPLE] , and [entity] , [entity] , [entity] , [entity] , and [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P0 M3 .\n?x0 P0 M4 .\n?x0 P0 M5 .\n?x0 P0 M6\n}",
        "recursionDepth": 46,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1431 wd:Q4500 .\n?x0 wdt:P1431 wd:Q10307893 .\n?x0 wdt:P1431 wd:Q954319 .\n?x0 wdt:P1431 wd:Q127800 .\n?x0 wdt:P1431 wd:Q437267 .\n?x0 wdt:P1431 wd:Q463617 .\n?x0 wdt:P1431 wd:Q2410088\n}",
        "questionWithBrackets": "What did [John Shiban] executive produce , [Glen Morgan] executive produce , and [Kim Manners] , [Howard Gordon] , [Chris Carter] , [Vince Gilligan] , and [Michelle MacLaren] executive produce"
    },
    {
        "questionIdx": 143823,
        "questionPatternModEntities": "What did M0 , M1 , M2 , M3 , M4 , and M5 executive produce",
        "questionTemplate": "What did [entity] , [entity] , [entity] , [entity] , [entity] , and [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P0 M3 .\n?x0 P0 M4 .\n?x0 P0 M5\n}",
        "recursionDepth": 27,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1431 wd:Q39829 .\n?x0 wdt:P1431 wd:Q7595870 .\n?x0 wdt:P1431 wd:Q362793 .\n?x0 wdt:P1431 wd:Q8877 .\n?x0 wdt:P1431 wd:Q55601945 .\n?x0 wdt:P1431 wd:Q55602356\n}",
        "questionWithBrackets": "What did [Stephen King] , [Darryl Frank] , [Justin Falvey] , [Stacey Snider] , [Steven Spielberg] , and [Jack Bender] executive produce"
    },
    {
        "questionIdx": 143827,
        "questionPatternModEntities": "What did M0 , M1 , and M2 executive produce , M3 , M4 , and M5 executive produce , and M6 executive produce",
        "questionTemplate": "What did [entity] , [entity] , and [entity] [VP_SIMPLE] , [entity] , [entity] , and [entity] [VP_SIMPLE] , and [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P0 M3 .\n?x0 P0 M4 .\n?x0 P0 M5 .\n?x0 P0 M6\n}",
        "recursionDepth": 47,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1431 wd:Q39829 .\n?x0 wdt:P1431 wd:Q7595870 .\n?x0 wdt:P1431 wd:Q849628 .\n?x0 wdt:P1431 wd:Q362793 .\n?x0 wdt:P1431 wd:Q7804237 .\n?x0 wdt:P1431 wd:Q6984051 .\n?x0 wdt:P1431 wd:Q8877\n}",
        "questionWithBrackets": "What did [Stephen King] , [Tim Schlattmann] , and [Brian K. Vaughan] executive produce , [Steven Spielberg] , [Neal Baer] , and [Jack Bender] executive produce , and [Stacey Snider] executive produce"
    },
    {
        "questionIdx": 143847,
        "questionPatternModEntities": "What did M1 's British spouse produce",
        "questionTemplate": "What did [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x1 P1 M0 .\n?x1 P2 M1 .\nFILTER ( ?x1 != M1 )\n}",
        "recursionDepth": 19,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x1 wdt:P27 wd:Q145 .\n?x1 wdt:P26 wd:Q76717 .\nFILTER ( ?x1 != wd:Q76717 )\n}LIMIT 1",
        "questionWithBrackets": "What did [Claudia Schiffer] 's British spouse produce"
    },
    {
        "questionIdx": 143851,
        "questionPatternModEntities": "What did M1 produce and M0 distribute",
        "questionTemplate": "What did [entity] [VP_SIMPLE] and [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1\n}",
        "recursionDepth": 21,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P750 wd:Q312 .\n?x0 wdt:P162|wdt:P272 wd:Q1105482\n}",
        "questionWithBrackets": "What did [Katherine Anna Kang] produce and [Apple Inc.] distribute"
    },
    {
        "questionIdx": 143911,
        "questionPatternModEntities": "What did M0 distribute , a sibling of M2 produce , and M1 distribute",
        "questionTemplate": "What did [entity] [VP_SIMPLE] , a [ROLE_SIMPLE] of [entity] [VP_SIMPLE] , and [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P1 ?x1 .\n?x1 P2 M2 .\nFILTER ( ?x1 != M2 )\n}",
        "recursionDepth": 36,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P750 wd:Q3884 .\n?x0 wdt:P750 wd:Q9589 .\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x1 wdt:P3373 wd:Q99693584 .\nFILTER ( ?x1 != wd:Q99693584 )\n}",
        "questionWithBrackets": "What did [Amazon] distribute , a sibling of [Dina Herrmann] produce , and [iTunes] distribute"
    },
    {
        "questionIdx": 143952,
        "questionPatternModEntities": "What did M0 , M1 , M2 , M3 , and M4 write and direct",
        "questionTemplate": "What did [entity] , [entity] , [entity] , [entity] , and [entity] [VP_SIMPLE] and [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P0 M3 .\n?x0 P0 M4 .\n?x0 P1 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\n?x0 P1 M3 .\n?x0 P1 M4\n}",
        "recursionDepth": 31,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 wd:Q4500 .\n?x0 wdt:P57 wd:Q15042700 .\n?x0 wdt:P57 wd:Q5542223 .\n?x0 wdt:P57 wd:Q7174311 .\n?x0 wdt:P57 wd:Q7407299 .\n?x0 wdt:P58 wd:Q4500 .\n?x0 wdt:P58 wd:Q15042700 .\n?x0 wdt:P58 wd:Q5542223 .\n?x0 wdt:P58 wd:Q7174311 .\n?x0 wdt:P58 wd:Q7407299\n}",
        "questionWithBrackets": "What did [Peter Gould] , [Sam Catlin] , [Thomas Schnauz] , [George Mastras] , and [Vince Gilligan] write and direct"
    },
    {
        "questionIdx": 143991,
        "questionPatternModEntities": "What did M0 edit and M1 direct",
        "questionTemplate": "What did [entity] [VP_SIMPLE] and [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1\n}",
        "recursionDepth": 21,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 wd:Q83859 .\n?x0 wdt:P1040 wd:Q31294\n}",
        "questionWithBrackets": "What did [Anne V. Coates] edit and [John Milius] direct"
    },
    {
        "questionIdx": 144007,
        "questionPatternModEntities": "What did M3 edit , M0 and M1 executive produce , M4 direct , and M2 executive produce",
        "questionTemplate": "What did [entity] [VP_SIMPLE] , [entity] and [entity] [VP_SIMPLE] , [entity] [VP_SIMPLE] , and [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P1 M3 .\n?x0 P2 M4\n}",
        "recursionDepth": 45,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 wd:Q1151111 .\n?x0 wdt:P1040 wd:Q5295252 .\n?x0 wdt:P1431 wd:Q8877 .\n?x0 wdt:P1431 wd:Q237207 .\n?x0 wdt:P1431 wd:Q549570\n}",
        "questionWithBrackets": "What did [Donald W. Ernst] edit , [Frank Marshall] and [Steven Spielberg] executive produce , [Rob Minkoff] direct , and [Kathleen Kennedy] executive produce"
    },
    {
        "questionIdx": 144044,
        "questionPatternModEntities": "What did M0 , M1 , and M2 found , M3 and M4 found , M5 found , and M6 found",
        "questionTemplate": "What did [entity] , [entity] , and [entity] [VP_SIMPLE] , [entity] and [entity] [VP_SIMPLE] , [entity] [VP_SIMPLE] , and [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P0 M3 .\n?x0 P0 M4 .\n?x0 P0 M5 .\n?x0 P0 M6\n}",
        "recursionDepth": 50,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P112 wd:Q35 .\n?x0 wdt:P112 wd:Q241 .\n?x0 wdt:P112 wd:Q16 .\n?x0 wdt:P112 wd:Q32 .\n?x0 wdt:P112 wd:Q30 .\n?x0 wdt:P112 wd:Q43 .\n?x0 wdt:P112 wd:Q20\n}",
        "questionWithBrackets": "What did [Denmark] , [Canada] , and [United States of America] found , [Norway] and [Turkey] found , [Cuba] found , and [Luxembourg] found"
    },
    {
        "questionIdx": 144051,
        "questionPatternModEntities": "What did M0 direct and M1 's child direct",
        "questionTemplate": "What did [entity] [VP_SIMPLE] and [entity] 's [ROLE_SIMPLE] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P0 M0 .\n?x1 P1 M1\n}",
        "recursionDepth": 25,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 ?x1 .\n?x0 wdt:P57 wd:Q7179536 .\n?x1 wdt:P749 wd:Q201296\n}",
        "questionWithBrackets": "What did [Pew Center for Arts & Heritage] direct and [The Pew Charitable Trusts] 's child direct"
    },
    {
        "questionIdx": 144065,
        "questionPatternModEntities": "What did M0 's sibling produce and edit",
        "questionTemplate": "What did [entity] 's [ROLE_SIMPLE] [VP_SIMPLE] and [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x1 P2 M0 .\nFILTER ( ?x1 != M0 )\n}",
        "recursionDepth": 22,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1040 ?x1 .\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x1 wdt:P3373 wd:Q606780 .\nFILTER ( ?x1 != wd:Q606780 )\n}LIMIT 1",
        "questionWithBrackets": "What did [Sydney Chaplin] 's sibling produce and edit"
    },
    {
        "questionIdx": 144081,
        "questionPatternModEntities": "What did M0 executive produce , M1 executive produce , and M2 's employee produce",
        "questionTemplate": "What did [entity] [VP_SIMPLE] , [entity] [VP_SIMPLE] , and [entity] 's [ROLE_SIMPLE] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P1 ?x1 .\n?x1 P2 M2\n}",
        "recursionDepth": 36,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1431 wd:Q55400 .\n?x0 wdt:P1431 wd:Q237207 .\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x1 wdt:P108 wd:Q7842\n}",
        "questionWithBrackets": "What did [Hayao Miyazaki] executive produce , [Kathleen Kennedy] executive produce , and [University of Tokyo] 's employee produce"
    },
    {
        "questionIdx": 144101,
        "questionPatternModEntities": "What did M4 and M5 direct , M3 produce , M2 write , and M0 and M1 executive produce",
        "questionTemplate": "What did [entity] and [entity] [VP_SIMPLE] , [entity] [VP_SIMPLE] , [entity] [VP_SIMPLE] , and [entity] and [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P1 M2 .\n?x0 P2 M3 .\n?x0 P3 M4 .\n?x0 P3 M5\n}",
        "recursionDepth": 48,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 wd:Q2838329 .\n?x0 wdt:P57 wd:Q47284 .\n?x0 wdt:P1431 wd:Q3772 .\n?x0 wdt:P1431 wd:Q549956 .\n?x0 wdt:P162|wdt:P272 wd:Q514913 .\n?x0 wdt:P58 wd:Q25161\n}",
        "questionWithBrackets": "What did [Allison Anders] and [Robert Rodriguez] direct , [Lawrence Bender] produce , [Roald Dahl] write , and [Alexandre Rockwell] and [Quentin Tarantino] executive produce"
    },
    {
        "questionIdx": 144109,
        "questionPatternModEntities": "What did M0 's spouse 's sibling executive produce",
        "questionTemplate": "What did [entity] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x1 P1 ?x2 .\n?x2 P2 M0 .\nFILTER ( ?x1 != ?x2 ) .\nFILTER ( ?x2 != M0 )\n}",
        "recursionDepth": 19,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1431 ?x1 .\n?x1 wdt:P3373 ?x2 .\n?x2 wdt:P26 wd:Q22952212 .\nFILTER ( ?x1 != ?x2 ) .\nFILTER ( ?x2 != wd:Q22952212 )\n}LIMIT 1",
        "questionWithBrackets": "What did [James Rothschild] 's spouse 's sibling executive produce"
    },
    {
        "questionIdx": 144117,
        "questionPatternModEntities": "What did M0 , M1 , M2 , M3 , M4 , M5 , and M6 executive produce",
        "questionTemplate": "What did [entity] , [entity] , [entity] , [entity] , [entity] , [entity] , and [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P0 M3 .\n?x0 P0 M4 .\n?x0 P0 M5 .\n?x0 P0 M6\n}",
        "recursionDepth": 30,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1431 wd:Q39829 .\n?x0 wdt:P1431 wd:Q7595870 .\n?x0 wdt:P1431 wd:Q849628 .\n?x0 wdt:P1431 wd:Q362793 .\n?x0 wdt:P1431 wd:Q7804237 .\n?x0 wdt:P1431 wd:Q6984051 .\n?x0 wdt:P1431 wd:Q8877\n}",
        "questionWithBrackets": "What did [Brian K. Vaughan] , [Neal Baer] , [Tim Schlattmann] , [Steven Spielberg] , [Jack Bender] , [Stacey Snider] , and [Stephen King] executive produce"
    },
    {
        "questionIdx": 144118,
        "questionPatternModEntities": "What did M0 , M1 , and M2 executive produce , M4 write , M3 executive produce , and M5 produce",
        "questionTemplate": "What did [entity] , [entity] , and [entity] [VP_SIMPLE] , [entity] [VP_SIMPLE] , [entity] [VP_SIMPLE] , and [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P0 M3 .\n?x0 P1 M4 .\n?x0 P2 M5\n}",
        "recursionDepth": 48,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1431 wd:Q75079 .\n?x0 wdt:P1431 wd:Q11778321 .\n?x0 wdt:P1431 wd:Q975579 .\n?x0 wdt:P1431 wd:Q1900360 .\n?x0 wdt:P162|wdt:P272 wd:Q319986 .\n?x0 wdt:P58 wd:Q362061\n}",
        "questionWithBrackets": "What did [David Barron] , [Mark Radcliffe] , and [Chris Columbus] executive produce , [Steve Kloves] write , [Michael Barnathan] executive produce , and [David Heyman] produce"
    },
    {
        "questionIdx": 144124,
        "questionPatternModEntities": "What did M0 and M1 executive produce , M2 executive produce , M5 direct , and M3 and M4 write",
        "questionTemplate": "What did [entity] and [entity] [VP_SIMPLE] , [entity] [VP_SIMPLE] , [entity] [VP_SIMPLE] , and [entity] and [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P1 M3 .\n?x0 P1 M4 .\n?x0 P2 M5\n}",
        "recursionDepth": 49,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 wd:Q98931722 .\n?x0 wdt:P1431 wd:Q56005 .\n?x0 wdt:P1431 wd:Q63111594 .\n?x0 wdt:P1431 wd:Q17145814 .\n?x0 wdt:P58 wd:Q302063 .\n?x0 wdt:P58 wd:Q19560063\n}",
        "questionWithBrackets": "What did [David W. Zucker] and [Adam Kolbrenner] executive produce , [Ridley Scott] executive produce , [Alex Gabassi] direct , and [Aaron Guzikowski] and [Heather Bellson] write"
    },
    {
        "questionIdx": 144135,
        "questionPatternModEntities": "What did M1 's Chinese parent found",
        "questionTemplate": "What did [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x1 P1 M0 .\n?x1 P2 M1\n}",
        "recursionDepth": 19,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P112 ?x1 .\n?x1 wdt:P40|wdt:P355 wd:Q28415575 .\n?x1 wdt:P27 wd:Q148\n}LIMIT 1",
        "questionWithBrackets": "What did [Steven Zhang] 's Chinese parent found"
    },
    {
        "questionIdx": 144145,
        "questionPatternModEntities": "What did M0 's spouse executive produce and direct",
        "questionTemplate": "What did [entity] 's [ROLE_SIMPLE] [VP_SIMPLE] and [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x1 P2 M0 .\nFILTER ( ?x1 != M0 )\n}",
        "recursionDepth": 23,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 ?x1 .\n?x0 wdt:P1431 ?x1 .\n?x1 wdt:P26 wd:Q192990 .\nFILTER ( ?x1 != wd:Q192990 )\n}LIMIT 1",
        "questionWithBrackets": "What did [Guy Ritchie] 's spouse executive produce and direct"
    },
    {
        "questionIdx": 144148,
        "questionPatternModEntities": "What did M1 edit , M2 edit , and M0 produce",
        "questionTemplate": "What did [entity] [VP_SIMPLE] , [entity] [VP_SIMPLE] , and [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P1 M2\n}",
        "recursionDepth": 30,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1040 wd:Q8003 .\n?x0 wdt:P1040 wd:Q561459 .\n?x0 wdt:P162|wdt:P272 wd:Q141336\n}",
        "questionWithBrackets": "What did [Sergei Eisenstein] edit , [Grigori Aleksandrov] edit , and [Mosfilm] produce"
    },
    {
        "questionIdx": 144190,
        "questionPatternModEntities": "What did M0 's Japanese employee edit",
        "questionTemplate": "What did [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x1 P1 M0 .\n?x1 P2 M1\n}",
        "recursionDepth": 19,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1040 ?x1 .\n?x1 wdt:P108 wd:Q182950 .\n?x1 wdt:P27 wd:Q17\n}LIMIT 1",
        "questionWithBrackets": "What did [Studio Ghibli] 's Japanese employee edit"
    },
    {
        "questionIdx": 144196,
        "questionPatternModEntities": "What did M0 , M1 , M2 , and M3 edit and write",
        "questionTemplate": "What did [entity] , [entity] , [entity] , and [entity] [VP_SIMPLE] and [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P0 M3 .\n?x0 P1 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\n?x0 P1 M3\n}",
        "recursionDepth": 28,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1040 wd:Q4022902 .\n?x0 wdt:P1040 wd:Q4023328 .\n?x0 wdt:P1040 wd:Q5836844 .\n?x0 wdt:P1040 wd:Q5658534 .\n?x0 wdt:P58 wd:Q4022902 .\n?x0 wdt:P58 wd:Q4023328 .\n?x0 wdt:P58 wd:Q5836844 .\n?x0 wdt:P58 wd:Q5658534\n}",
        "questionWithBrackets": "What did [Y\u016bdai Yamaguchi] , [Yoshihiro Nishimura] , [Adri\u00e1n Garc\u00eda Bogliano] , and [Ernesto D\u00edaz Espinoza] edit and write"
    },
    {
        "questionIdx": 144210,
        "questionPatternModEntities": "What did M0 write and M1 edit",
        "questionTemplate": "What did [entity] [VP_SIMPLE] and [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1\n}",
        "recursionDepth": 21,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1040 wd:Q24907 .\n?x0 wdt:P58 wd:Q371107\n}",
        "questionWithBrackets": "What did [Leif Panduro] write and [Anker S\u00f8rensen] edit"
    },
    {
        "questionIdx": 144248,
        "questionPatternModEntities": "What did M1 write and M0 executive produce",
        "questionTemplate": "What did [entity] [VP_SIMPLE] and [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1\n}",
        "recursionDepth": 22,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1431 wd:Q8877 .\n?x0 wdt:P58 wd:Q75079\n}",
        "questionWithBrackets": "What did [Chris Columbus] write and [Steven Spielberg] executive produce"
    },
    {
        "questionIdx": 144256,
        "questionPatternModEntities": "What did M4 and M5 edit , M6 edit , and M0 , M1 , M2 , and M3 executive produce",
        "questionTemplate": "What did [entity] and [entity] [VP_SIMPLE] , [entity] [VP_SIMPLE] , and [entity] , [entity] , [entity] , and [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P0 M3 .\n?x0 P1 M4 .\n?x0 P1 M5 .\n?x0 P1 M6\n}",
        "recursionDepth": 45,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1040 wd:Q2704409 .\n?x0 wdt:P1040 wd:Q2347669 .\n?x0 wdt:P1040 wd:Q6397505 .\n?x0 wdt:P1431 wd:Q181900 .\n?x0 wdt:P1431 wd:Q6811130 .\n?x0 wdt:P1431 wd:Q262130 .\n?x0 wdt:P1431 wd:Q545394\n}",
        "questionWithBrackets": "What did [Kevin Stitt] and [Steven Rosenblum] edit , [John Wright] edit , and [Stan Lee] , [Richard Donner] , [Tom DeSanto] , and [Avi Arad] executive produce"
    },
    {
        "questionIdx": 144258,
        "questionPatternModEntities": "What did M3 , M4 , and M5 edit , M0 , M1 , and M2 executive produce , and M6 direct",
        "questionTemplate": "What did [entity] , [entity] , and [entity] [VP_SIMPLE] , [entity] , [entity] , and [entity] [VP_SIMPLE] , and [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P1 M3 .\n?x0 P1 M4 .\n?x0 P1 M5 .\n?x0 P2 M6\n}",
        "recursionDepth": 45,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 wd:Q20721911 .\n?x0 wdt:P1040 wd:Q20722014 .\n?x0 wdt:P1040 wd:Q20722018 .\n?x0 wdt:P1040 wd:Q20722019 .\n?x0 wdt:P1431 wd:Q350405 .\n?x0 wdt:P1431 wd:Q20722010 .\n?x0 wdt:P1431 wd:Q20722012\n}",
        "questionWithBrackets": "What did [Steven Simone-Friedland] , [Claire L. Chandler] , and [Todd Woody Richman] edit , [Adam McKay] , [Alex Cooke] , and [Alan Hayling] executive produce , and [Andy Bichlbaum] direct"
    },
    {
        "questionIdx": 144259,
        "questionPatternModEntities": "What did M4 , M5 , and M6 edit , M0 executive produce , and M1 , M2 , and M3 executive produce",
        "questionTemplate": "What did [entity] , [entity] , and [entity] [VP_SIMPLE] , [entity] [VP_SIMPLE] , and [entity] , [entity] , and [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P0 M3 .\n?x0 P1 M4 .\n?x0 P1 M5 .\n?x0 P1 M6\n}",
        "recursionDepth": 46,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1040 wd:Q2704409 .\n?x0 wdt:P1040 wd:Q6397505 .\n?x0 wdt:P1040 wd:Q2347669 .\n?x0 wdt:P1431 wd:Q181900 .\n?x0 wdt:P1431 wd:Q6811130 .\n?x0 wdt:P1431 wd:Q262130 .\n?x0 wdt:P1431 wd:Q545394\n}",
        "questionWithBrackets": "What did [Kevin Stitt] , [John Wright] , and [Steven Rosenblum] edit , [Stan Lee] executive produce , and [Tom DeSanto] , [Avi Arad] , and [Richard Donner] executive produce"
    },
    {
        "questionIdx": 144260,
        "questionPatternModEntities": "What did M0 executive produce and M1 's spouse write",
        "questionTemplate": "What did [entity] [VP_SIMPLE] and [entity] 's [ROLE_SIMPLE] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 ?x1 .\n?x1 P2 M1 .\nFILTER ( ?x1 != M1 )\n}",
        "recursionDepth": 26,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1431 wd:Q8289 .\n?x0 wdt:P58 ?x1 .\n?x1 wdt:P26 wd:Q116861 .\nFILTER ( ?x1 != wd:Q116861 )\n}",
        "questionWithBrackets": "What did [Jamie Selkirk] executive produce and [Fran Walsh] 's spouse write"
    },
    {
        "questionIdx": 144261,
        "questionPatternModEntities": "What did M0 's sibling direct , write , and executive produce",
        "questionTemplate": "What did [entity] 's [ROLE_SIMPLE] [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x1 P3 M0 .\nFILTER ( ?x1 != M0 )\n}",
        "recursionDepth": 29,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 ?x1 .\n?x0 wdt:P1431 ?x1 .\n?x0 wdt:P58 ?x1 .\n?x1 wdt:P3373 wd:Q5112102 .\nFILTER ( ?x1 != wd:Q5112102 )\n}LIMIT 1",
        "questionWithBrackets": "What did [Christopher Ciccone] 's sibling direct , write , and executive produce"
    },
    {
        "questionIdx": 144264,
        "questionPatternModEntities": "What did M0 , M1 , and M2 edit",
        "questionTemplate": "What did [entity] , [entity] , and [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2\n}",
        "recursionDepth": 17,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1040 wd:Q38222 .\n?x0 wdt:P1040 wd:Q429973 .\n?x0 wdt:P1040 wd:Q463119\n}",
        "questionWithBrackets": "What did [Paul Hirsch] , [Marcia Lucas] , and [George Lucas] edit"
    },
    {
        "questionIdx": 144267,
        "questionPatternModEntities": "What did M0 's spouse executive produce , write , direct , edit , and produce",
        "questionTemplate": "What did [entity] 's [ROLE_SIMPLE] [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x0 P3 ?x1 .\n?x0 P4 ?x1 .\n?x1 P5 M0 .\nFILTER ( ?x1 != M0 )\n}",
        "recursionDepth": 41,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 ?x1 .\n?x0 wdt:P1040 ?x1 .\n?x0 wdt:P1431 ?x1 .\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x0 wdt:P58 ?x1 .\n?x1 wdt:P26 wd:Q3032150 .\nFILTER ( ?x1 != wd:Q3032150 )\n}LIMIT 1",
        "questionWithBrackets": "What did [Y\u014dko Yaguchi] 's spouse executive produce , write , direct , edit , and produce"
    },
    {
        "questionIdx": 144276,
        "questionPatternModEntities": "What did M1 's Dutch spouse produce",
        "questionTemplate": "What did [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x1 P1 M0 .\n?x1 P2 M1 .\nFILTER ( ?x1 != M1 )\n}",
        "recursionDepth": 19,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x1 wdt:P27 wd:Q29999 .\n?x1 wdt:P26 wd:Q385704 .\nFILTER ( ?x1 != wd:Q385704 )\n}LIMIT 1",
        "questionWithBrackets": "What did [Remon Stotijn] 's Dutch spouse produce"
    },
    {
        "questionIdx": 144295,
        "questionPatternModEntities": "What did M2 's sibling direct , M0 executive produce , and M1 edit",
        "questionTemplate": "What did [entity] 's [ROLE_SIMPLE] [VP_SIMPLE] , [entity] [VP_SIMPLE] , and [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P2 ?x1 .\n?x1 P3 M2 .\nFILTER ( ?x1 != M2 )\n}",
        "recursionDepth": 35,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 ?x1 .\n?x0 wdt:P1040 wd:Q91191 .\n?x0 wdt:P1431 wd:Q41749 .\n?x1 wdt:P3373 wd:Q1479844 .\nFILTER ( ?x1 != wd:Q1479844 )\n}",
        "questionWithBrackets": "What did [Peter Harlan] 's sibling direct , [Joseph Goebbels] executive produce , and [Wolfgang Schleif] edit"
    },
    {
        "questionIdx": 144316,
        "questionPatternModEntities": "What did M1 's Japanese parent produce and write",
        "questionTemplate": "What did [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] [VP_SIMPLE] and [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x1 P2 M0 .\n?x1 P3 M1\n}",
        "recursionDepth": 27,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x0 wdt:P58 ?x1 .\n?x1 wdt:P40|wdt:P355 wd:Q506730 .\n?x1 wdt:P27 wd:Q17\n}LIMIT 1",
        "questionWithBrackets": "What did [Hirotaka Ishihara] 's Japanese parent produce and write"
    },
    {
        "questionIdx": 144332,
        "questionPatternModEntities": "What did M6 edit , M0 executive produce , and M1 , M2 , M3 , M4 , and M5 executive produce",
        "questionTemplate": "What did [entity] [VP_SIMPLE] , [entity] [VP_SIMPLE] , and [entity] , [entity] , [entity] , [entity] , and [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P0 M3 .\n?x0 P0 M4 .\n?x0 P0 M5 .\n?x0 P1 M6\n}",
        "recursionDepth": 45,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1040 wd:Q11737407 .\n?x0 wdt:P1431 wd:Q36159 .\n?x0 wdt:P1431 wd:Q27899287 .\n?x0 wdt:P1431 wd:Q6154581 .\n?x0 wdt:P1431 wd:Q229254 .\n?x0 wdt:P1431 wd:Q105298512 .\n?x0 wdt:P1431 wd:Q459933\n}",
        "questionWithBrackets": "What did [Kathryn Himoff] edit , [LeBron James] executive produce , and [Maverick Carter] , [Kasi Lemmons] , [Elle Johnson] , [Octavia Spencer] , and [Janine Sherman Barrois] executive produce"
    },
    {
        "questionIdx": 144345,
        "questionPatternModEntities": "What did M1 's Swedish sibling edit and M0 edit",
        "questionTemplate": "What did [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] [VP_SIMPLE] and [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P0 M0 .\n?x1 P1 M1 .\n?x1 P2 M2 .\nFILTER ( ?x1 != M1 )\n}",
        "recursionDepth": 30,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1040 ?x1 .\n?x0 wdt:P1040 wd:Q457656 .\n?x1 wdt:P27 wd:Q34 .\n?x1 wdt:P3373 wd:Q1159900 .\nFILTER ( ?x1 != wd:Q1159900 )\n}",
        "questionWithBrackets": "What did [Daniel Alfredson] 's Swedish sibling edit and [Tomas Alfredson] edit"
    },
    {
        "questionIdx": 144354,
        "questionPatternModEntities": "What did M0 found , M1 found , M2 and M3 found , and M4 and M5 found",
        "questionTemplate": "What did [entity] [VP_SIMPLE] , [entity] [VP_SIMPLE] , [entity] and [entity] [VP_SIMPLE] , and [entity] and [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P0 M3 .\n?x0 P0 M4 .\n?x0 P0 M5\n}",
        "recursionDepth": 47,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P112 wd:Q858 .\n?x0 wdt:P112 wd:Q298 .\n?x0 wdt:P112 wd:Q31 .\n?x0 wdt:P112 wd:Q16 .\n?x0 wdt:P112 wd:Q30 .\n?x0 wdt:P112 wd:Q41\n}",
        "questionWithBrackets": "What did [Belgium] found , [United States of America] found , [Canada] and [Greece] found , and [Chile] and [Syria] found"
    },
    {
        "questionIdx": 144356,
        "questionPatternModEntities": "What did M0 , M1 , M2 , M3 , M4 , and M5 found",
        "questionTemplate": "What did [entity] , [entity] , [entity] , [entity] , [entity] , and [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P0 M3 .\n?x0 P0 M4 .\n?x0 P0 M5\n}",
        "recursionDepth": 26,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P112 wd:Q20 .\n?x0 wdt:P112 wd:Q142 .\n?x0 wdt:P112 wd:Q31 .\n?x0 wdt:P112 wd:Q35 .\n?x0 wdt:P112 wd:Q16 .\n?x0 wdt:P112 wd:Q36\n}",
        "questionWithBrackets": "What did [Belgium] , [Canada] , [Denmark] , [Norway] , [France] , and [Poland] found"
    },
    {
        "questionIdx": 144376,
        "questionPatternModEntities": "What did M1 's sibling executive produce and M0 direct",
        "questionTemplate": "What did [entity] 's [ROLE_SIMPLE] [VP_SIMPLE] and [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 M0 .\n?x1 P2 M1 .\nFILTER ( ?x1 != M1 )\n}",
        "recursionDepth": 26,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 wd:Q59259 .\n?x0 wdt:P1431 ?x1 .\n?x1 wdt:P3373 wd:Q469204 .\nFILTER ( ?x1 != wd:Q469204 )\n}",
        "questionWithBrackets": "What did [Anne Spielberg] 's sibling executive produce and [Michael Bay] direct"
    },
    {
        "questionIdx": 144402,
        "questionPatternModEntities": "What did M3 edit , M0 and M1 executive produce , M2 produce , and M4 and M5 direct",
        "questionTemplate": "What did [entity] [VP_SIMPLE] , [entity] and [entity] [VP_SIMPLE] , [entity] [VP_SIMPLE] , and [entity] and [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P1 M2 .\n?x0 P2 M3 .\n?x0 P3 M4 .\n?x0 P3 M5\n}",
        "recursionDepth": 48,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 wd:Q2838329 .\n?x0 wdt:P57 wd:Q47284 .\n?x0 wdt:P1040 wd:Q5359064 .\n?x0 wdt:P1431 wd:Q3772 .\n?x0 wdt:P1431 wd:Q549956 .\n?x0 wdt:P162|wdt:P272 wd:Q300323\n}",
        "questionWithBrackets": "What did [Elena Maganini] edit , [Alexandre Rockwell] and [Quentin Tarantino] executive produce , [A Band Apart] produce , and [Allison Anders] and [Robert Rodriguez] direct"
    },
    {
        "questionIdx": 144406,
        "questionPatternModEntities": "What did M4 edit , M0 and M1 executive produce , M2 executive produce , and M3 produce",
        "questionTemplate": "What did [entity] [VP_SIMPLE] , [entity] and [entity] [VP_SIMPLE] , [entity] [VP_SIMPLE] , and [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P1 M3 .\n?x0 P2 M4\n}",
        "recursionDepth": 45,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1040 wd:Q692550 .\n?x0 wdt:P1431 wd:Q51516 .\n?x0 wdt:P1431 wd:Q22350822 .\n?x0 wdt:P1431 wd:Q22074633 .\n?x0 wdt:P162|wdt:P272 wd:Q8877\n}",
        "questionWithBrackets": "What did [Michael Kahn] edit , [John Madden] and [Michael Siegel] executive produce , [Kristie Macosko Krieger] executive produce , and [Steven Spielberg] produce"
    },
    {
        "questionIdx": 144411,
        "questionPatternModEntities": "What did M3 and M4 direct , M5 direct , M2 produce , and M0 and M1 executive produce",
        "questionTemplate": "What did [entity] and [entity] [VP_SIMPLE] , [entity] [VP_SIMPLE] , [entity] [VP_SIMPLE] , and [entity] and [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P1 M2 .\n?x0 P2 M3 .\n?x0 P2 M4 .\n?x0 P2 M5\n}",
        "recursionDepth": 48,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 wd:Q17090902 .\n?x0 wdt:P57 wd:Q253977 .\n?x0 wdt:P57 wd:Q360477 .\n?x0 wdt:P1431 wd:Q8877 .\n?x0 wdt:P1431 wd:Q849628 .\n?x0 wdt:P162|wdt:P272 wd:Q457893\n}",
        "questionWithBrackets": "What did [Olatunde Osunsanmi] and [Roxann Dawson] direct , [Peter Weller] direct , [Amblin Entertainment] produce , and [Steven Spielberg] and [Brian K. Vaughan] executive produce"
    },
    {
        "questionIdx": 144416,
        "questionPatternModEntities": "What did M0 's American sibling executive produce",
        "questionTemplate": "What did [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x1 P1 M0 .\n?x1 P2 M1 .\nFILTER ( ?x1 != M0 )\n}",
        "recursionDepth": 20,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1431 ?x1 .\n?x1 wdt:P27 wd:Q30 .\n?x1 wdt:P3373 wd:Q347432 .\nFILTER ( ?x1 != wd:Q347432 )\n}LIMIT 1",
        "questionWithBrackets": "What did [Roy O. Disney] 's American sibling executive produce"
    },
    {
        "questionIdx": 144442,
        "questionPatternModEntities": "What did M4 write , M5 write , M0 , M1 , and M2 executive produce , and M3 executive produce",
        "questionTemplate": "What did [entity] [VP_SIMPLE] , [entity] [VP_SIMPLE] , [entity] , [entity] , and [entity] [VP_SIMPLE] , and [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P0 M3 .\n?x0 P1 M4 .\n?x0 P1 M5\n}",
        "recursionDepth": 48,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1431 wd:Q75079 .\n?x0 wdt:P1431 wd:Q975579 .\n?x0 wdt:P1431 wd:Q1900360 .\n?x0 wdt:P1431 wd:Q11778321 .\n?x0 wdt:P58 wd:Q362061 .\n?x0 wdt:P58 wd:Q34660\n}",
        "questionWithBrackets": "What did [Steve Kloves] write , [J. K. Rowling] write , [Chris Columbus] , [Mark Radcliffe] , and [Michael Barnathan] executive produce , and [David Barron] executive produce"
    },
    {
        "questionIdx": 144465,
        "questionPatternModEntities": "What did M0 's parent produce , executive produce , write , edit , and direct",
        "questionTemplate": "What did [entity] 's [ROLE_SIMPLE] [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x0 P3 ?x1 .\n?x0 P4 ?x1 .\n?x1 P5 M0\n}",
        "recursionDepth": 41,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 ?x1 .\n?x0 wdt:P1040 ?x1 .\n?x0 wdt:P1431 ?x1 .\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x0 wdt:P58 ?x1 .\n?x1 wdt:P40|wdt:P355 wd:Q1620638\n}LIMIT 1",
        "questionWithBrackets": "What did [Hisao Kurosawa] 's parent produce , executive produce , write , edit , and direct"
    },
    {
        "questionIdx": 144466,
        "questionPatternModEntities": "What did M0 's parent produce , write , edit , and executive produce",
        "questionTemplate": "What did [entity] 's [ROLE_SIMPLE] [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x0 P3 ?x1 .\n?x1 P4 M0\n}",
        "recursionDepth": 35,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1040 ?x1 .\n?x0 wdt:P1431 ?x1 .\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x0 wdt:P58 ?x1 .\n?x1 wdt:P40|wdt:P355 wd:Q1620638\n}LIMIT 1",
        "questionWithBrackets": "What did [Hisao Kurosawa] 's parent produce , write , edit , and executive produce"
    },
    {
        "questionIdx": 144473,
        "questionPatternModEntities": "What did M1 's parent executive produce and M0 write",
        "questionTemplate": "What did [entity] 's [ROLE_SIMPLE] [VP_SIMPLE] and [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 M0 .\n?x1 P2 M1\n}",
        "recursionDepth": 26,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1431 ?x1 .\n?x0 wdt:P58 wd:Q6289383 .\n?x1 wdt:P40|wdt:P355 wd:Q40057\n}",
        "questionWithBrackets": "What did [Jessica Capshaw] 's parent executive produce and [Josh Singer] write"
    },
    {
        "questionIdx": 144477,
        "questionPatternModEntities": "What did M0 's French sibling direct",
        "questionTemplate": "What did [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x1 P1 M0 .\n?x1 P2 M1 .\nFILTER ( ?x1 != M0 )\n}",
        "recursionDepth": 19,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 ?x1 .\n?x1 wdt:P27 wd:Q142 .\n?x1 wdt:P3373 wd:Q105946886 .\nFILTER ( ?x1 != wd:Q105946886 )\n}LIMIT 1",
        "questionWithBrackets": "What did [Liliane Gainsbourg] 's French sibling direct"
    },
    {
        "questionIdx": 144478,
        "questionPatternModEntities": "What did M0 , M1 , and M2 direct and executive produce",
        "questionTemplate": "What did [entity] , [entity] , and [entity] [VP_SIMPLE] and [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P1 M0 .\n?x0 P1 M1 .\n?x0 P1 M2\n}",
        "recursionDepth": 26,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 wd:Q419454 .\n?x0 wdt:P57 wd:Q432598 .\n?x0 wdt:P57 wd:Q3018772 .\n?x0 wdt:P1431 wd:Q419454 .\n?x0 wdt:P1431 wd:Q432598 .\n?x0 wdt:P1431 wd:Q3018772\n}",
        "questionWithBrackets": "What did [Alex Kurtzman] , [David Semel] , and [Akiva Goldsman] direct and executive produce"
    },
    {
        "questionIdx": 144554,
        "questionPatternModEntities": "What did M1 edit , M0 executive produce , and a employee of M2 executive produce",
        "questionTemplate": "What did [entity] [VP_SIMPLE] , [entity] [VP_SIMPLE] , and a [ROLE_SIMPLE] of [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x1 P2 M2\n}",
        "recursionDepth": 38,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1040 wd:Q33331516 .\n?x0 wdt:P1431 ?x1 .\n?x0 wdt:P1431 wd:Q41148 .\n?x1 wdt:P108 wd:Q49210\n}",
        "questionWithBrackets": "What did [Julien Rey] edit , [Martin Scorsese] executive produce , and a employee of [New York University] executive produce"
    },
    {
        "questionIdx": 144590,
        "questionPatternModEntities": "What did M1 's male spouse edit , executive produce , and produce",
        "questionTemplate": "What did [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x1 P3 M0 .\n?x1 P4 M1 .\nFILTER ( ?x1 != M1 )\n}",
        "recursionDepth": 34,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1040 ?x1 .\n?x0 wdt:P1431 ?x1 .\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x1 wdt:P21 wd:Q6581097 .\n?x1 wdt:P26 wd:Q3032150 .\nFILTER ( ?x1 != wd:Q3032150 )\n}LIMIT 1",
        "questionWithBrackets": "What did [Y\u014dko Yaguchi] 's male spouse edit , executive produce , and produce"
    },
    {
        "questionIdx": 144591,
        "questionPatternModEntities": "What did M0 executive produce and a parent of M1 executive produce",
        "questionTemplate": "What did [entity] [VP_SIMPLE] and a [ROLE_SIMPLE] of [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P0 M0 .\n?x1 P1 M1\n}",
        "recursionDepth": 29,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1431 ?x1 .\n?x0 wdt:P1431 wd:Q8877 .\n?x1 wdt:P40|wdt:P355 wd:Q29260744\n}",
        "questionWithBrackets": "What did [Steven Spielberg] executive produce and a parent of [Theo Spielberg] executive produce"
    },
    {
        "questionIdx": 144599,
        "questionPatternModEntities": "What did M1 's American parent edit , direct , executive produce , and produce",
        "questionTemplate": "What did [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x0 P3 ?x1 .\n?x1 P4 M0 .\n?x1 P5 M1\n}",
        "recursionDepth": 40,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 ?x1 .\n?x0 wdt:P1040 ?x1 .\n?x0 wdt:P1431 ?x1 .\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x1 wdt:P40|wdt:P355 wd:Q4739681 .\n?x1 wdt:P27 wd:Q30\n}LIMIT 1",
        "questionWithBrackets": "What did [Amanda Lucas] 's American parent edit , direct , executive produce , and produce"
    },
    {
        "questionIdx": 144635,
        "questionPatternModEntities": "What did M0 executive produce , M4 produce , M1 , M2 , and M3 executive produce , and M5 edit",
        "questionTemplate": "What did [entity] [VP_SIMPLE] , [entity] [VP_SIMPLE] , [entity] , [entity] , and [entity] [VP_SIMPLE] , and [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P0 M3 .\n?x0 P1 M4 .\n?x0 P2 M5\n}",
        "recursionDepth": 48,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1040 wd:Q977704 .\n?x0 wdt:P1431 wd:Q75079 .\n?x0 wdt:P1431 wd:Q11778321 .\n?x0 wdt:P1431 wd:Q975579 .\n?x0 wdt:P1431 wd:Q1900360 .\n?x0 wdt:P162|wdt:P272 wd:Q2415769\n}",
        "questionWithBrackets": "What did [David Barron] executive produce , [Heyday Films] produce , [Chris Columbus] , [Michael Barnathan] , and [Mark Radcliffe] executive produce , and [Peter Honess] edit"
    },
    {
        "questionIdx": 144638,
        "questionPatternModEntities": "What did M0 's employee 's sibling produce",
        "questionTemplate": "What did [entity] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x1 P1 ?x2 .\n?x2 P2 M0 .\nFILTER ( ?x1 != ?x2 )\n}",
        "recursionDepth": 18,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x1 wdt:P3373 ?x2 .\n?x2 wdt:P108 wd:Q457281 .\nFILTER ( ?x1 != ?x2 )\n}LIMIT 1",
        "questionWithBrackets": "What did [University of Illinois at Urbana\u2013Champaign] 's employee 's sibling produce"
    },
    {
        "questionIdx": 144688,
        "questionPatternModEntities": "What did M0 and M1 executive produce , M2 write , and M3 's parent write",
        "questionTemplate": "What did [entity] and [entity] [VP_SIMPLE] , [entity] [VP_SIMPLE] , and [entity] 's [ROLE_SIMPLE] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P1 ?x1 .\n?x0 P1 M2 .\n?x1 P2 M3\n}",
        "recursionDepth": 39,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1431 wd:Q61881 .\n?x0 wdt:P1431 wd:Q1277426 .\n?x0 wdt:P58 ?x1 .\n?x0 wdt:P58 wd:Q190379 .\n?x1 wdt:P40|wdt:P355 wd:Q75309133\n}",
        "questionWithBrackets": "What did [Martin Moszkowicz] and [Bernd Eichinger] executive produce , [Ian McEwan] write , and [Edmund Xavier Birkin] 's parent write"
    },
    {
        "questionIdx": 144689,
        "questionPatternModEntities": "What did M0 and M1 write and direct",
        "questionTemplate": "What did [entity] and [entity] [VP_SIMPLE] and [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P1 M0 .\n?x0 P1 M1\n}",
        "recursionDepth": 22,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 wd:Q2737 .\n?x0 wdt:P57 wd:Q945904 .\n?x0 wdt:P58 wd:Q2737 .\n?x0 wdt:P58 wd:Q945904\n}",
        "questionWithBrackets": "What did [Louis de Fun\u00e8s] and [Jean Girault] write and direct"
    },
    {
        "questionIdx": 144727,
        "questionPatternModEntities": "What did M0 and M1 produce and executive produce",
        "questionTemplate": "What did [entity] and [entity] [VP_SIMPLE] and [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P1 M0 .\n?x0 P1 M1\n}",
        "recursionDepth": 23,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1431 wd:Q56005 .\n?x0 wdt:P1431 wd:Q193648 .\n?x0 wdt:P162|wdt:P272 wd:Q56005 .\n?x0 wdt:P162|wdt:P272 wd:Q193648\n}",
        "questionWithBrackets": "What did [Tony Scott] and [Ridley Scott] produce and executive produce"
    },
    {
        "questionIdx": 144859,
        "questionPatternModEntities": "What did M2 produce , M0 executive produce , M1 executive produce , and M3 and M4 edit",
        "questionTemplate": "What did [entity] [VP_SIMPLE] , [entity] [VP_SIMPLE] , [entity] [VP_SIMPLE] , and [entity] and [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P1 M2 .\n?x0 P2 M3 .\n?x0 P2 M4\n}",
        "recursionDepth": 45,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1040 wd:Q614630 .\n?x0 wdt:P1040 wd:Q15835006 .\n?x0 wdt:P1431 wd:Q56094 .\n?x0 wdt:P1431 wd:Q38222 .\n?x0 wdt:P162|wdt:P272 wd:Q242446\n}",
        "questionWithBrackets": "What did [Lucasfilm] produce , [Francis Ford Coppola] executive produce , [George Lucas] executive produce , and [Michael Chandler] and [Michael Chandler] edit"
    },
    {
        "questionIdx": 144860,
        "questionPatternModEntities": "What did M0 's parent 's spouse executive produce",
        "questionTemplate": "What did [entity] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x1 P1 ?x2 .\n?x2 P2 M0 .\nFILTER ( ?x1 != ?x2 )\n}",
        "recursionDepth": 19,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1431 ?x1 .\n?x1 wdt:P26 ?x2 .\n?x2 wdt:P40|wdt:P355 wd:Q7425114 .\nFILTER ( ?x1 != ?x2 )\n}LIMIT 1",
        "questionWithBrackets": "What did [Sasha Spielberg] 's parent 's spouse executive produce"
    },
    {
        "questionIdx": 144864,
        "questionPatternModEntities": "What did M0 's parent edit , direct , and produce",
        "questionTemplate": "What did [entity] 's [ROLE_SIMPLE] [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x1 P3 M0\n}",
        "recursionDepth": 28,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 ?x1 .\n?x0 wdt:P1040 ?x1 .\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x1 wdt:P40|wdt:P355 wd:Q120593\n}LIMIT 1",
        "questionWithBrackets": "What did [Eugene Chaplin] 's parent edit , direct , and produce"
    },
    {
        "questionIdx": 144889,
        "questionPatternModEntities": "What did M0 's spouse produce , write , direct , executive produce , and edit",
        "questionTemplate": "What did [entity] 's [ROLE_SIMPLE] [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x0 P3 ?x1 .\n?x0 P4 ?x1 .\n?x1 P5 M0 .\nFILTER ( ?x1 != M0 )\n}",
        "recursionDepth": 41,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 ?x1 .\n?x0 wdt:P1040 ?x1 .\n?x0 wdt:P1431 ?x1 .\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x0 wdt:P58 ?x1 .\n?x1 wdt:P26 wd:Q3032150 .\nFILTER ( ?x1 != wd:Q3032150 )\n}LIMIT 1",
        "questionWithBrackets": "What did [Y\u014dko Yaguchi] 's spouse produce , write , direct , executive produce , and edit"
    },
    {
        "questionIdx": 144919,
        "questionPatternModEntities": "What did M0 's spouse produce , write , executive produce , and edit",
        "questionTemplate": "What did [entity] 's [ROLE_SIMPLE] [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x0 P3 ?x1 .\n?x1 P4 M0 .\nFILTER ( ?x1 != M0 )\n}",
        "recursionDepth": 35,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1040 ?x1 .\n?x0 wdt:P1431 ?x1 .\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x0 wdt:P58 ?x1 .\n?x1 wdt:P26 wd:Q3032150 .\nFILTER ( ?x1 != wd:Q3032150 )\n}LIMIT 1",
        "questionWithBrackets": "What did [Y\u014dko Yaguchi] 's spouse produce , write , executive produce , and edit"
    },
    {
        "questionIdx": 144926,
        "questionPatternModEntities": "What did M0 and M1 executive produce and M3 's Chinese spouse produce",
        "questionTemplate": "What did [entity] and [entity] [VP_SIMPLE] and [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P1 ?x1 .\n?x1 P2 M2 .\n?x1 P3 M3 .\nFILTER ( ?x1 != M3 )\n}",
        "recursionDepth": 35,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1431 wd:Q36970 .\n?x0 wdt:P1431 wd:Q319204 .\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x1 wdt:P27 wd:Q148 .\n?x1 wdt:P26 wd:Q717669 .\nFILTER ( ?x1 != wd:Q717669 )\n}",
        "questionWithBrackets": "What did [Brett Ratner] and [Jackie Chan] executive produce and [Lin Feng-jiao] 's Chinese spouse produce"
    },
    {
        "questionIdx": 144937,
        "questionPatternModEntities": "What did M0 's sibling direct , executive produce , edit , and produce",
        "questionTemplate": "What did [entity] 's [ROLE_SIMPLE] [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x0 P3 ?x1 .\n?x1 P4 M0 .\nFILTER ( ?x1 != M0 )\n}",
        "recursionDepth": 35,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 ?x1 .\n?x0 wdt:P1040 ?x1 .\n?x0 wdt:P1431 ?x1 .\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x1 wdt:P3373 wd:Q28370409 .\nFILTER ( ?x1 != wd:Q28370409 )\n}LIMIT 1",
        "questionWithBrackets": "What did [Everton Rocca] 's sibling direct , executive produce , edit , and produce"
    },
    {
        "questionIdx": 144949,
        "questionPatternModEntities": "What did M1 's French spouse write",
        "questionTemplate": "What did [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x1 P1 M0 .\n?x1 P2 M1 .\nFILTER ( ?x1 != M1 )\n}",
        "recursionDepth": 19,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P58 ?x1 .\n?x1 wdt:P27 wd:Q142 .\n?x1 wdt:P26 wd:Q2825429 .\nFILTER ( ?x1 != wd:Q2825429 )\n}LIMIT 1",
        "questionWithBrackets": "What did [Ad\u00e8le Foucher] 's French spouse write"
    },
    {
        "questionIdx": 144952,
        "questionPatternModEntities": "What did M1 's French parent write , edit , and direct",
        "questionTemplate": "What did [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x1 P3 M0 .\n?x1 P4 M1\n}",
        "recursionDepth": 33,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 ?x1 .\n?x0 wdt:P1040 ?x1 .\n?x0 wdt:P58 ?x1 .\n?x1 wdt:P40|wdt:P355 wd:Q3426643 .\n?x1 wdt:P27 wd:Q142\n}LIMIT 1",
        "questionWithBrackets": "What did [Ren\u00e9 Monzat] 's French parent write , edit , and direct"
    },
    {
        "questionIdx": 144957,
        "questionPatternModEntities": "What did M0 's parent edit and executive produce",
        "questionTemplate": "What did [entity] 's [ROLE_SIMPLE] [VP_SIMPLE] and [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x1 P2 M0\n}",
        "recursionDepth": 23,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1040 ?x1 .\n?x0 wdt:P1431 ?x1 .\n?x1 wdt:P40|wdt:P355 wd:Q1620638\n}LIMIT 1",
        "questionWithBrackets": "What did [Hisao Kurosawa] 's parent edit and executive produce"
    },
    {
        "questionIdx": 144966,
        "questionPatternModEntities": "What did M3 and M4 edit , M1 write , M0 executive produce , and M2 produce",
        "questionTemplate": "What did [entity] and [entity] [VP_SIMPLE] , [entity] [VP_SIMPLE] , [entity] [VP_SIMPLE] , and [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P2 M2 .\n?x0 P3 M3 .\n?x0 P3 M4\n}",
        "recursionDepth": 44,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1040 wd:Q5359064 .\n?x0 wdt:P1040 wd:Q47284 .\n?x0 wdt:P1431 wd:Q3772 .\n?x0 wdt:P162|wdt:P272 wd:Q514913 .\n?x0 wdt:P58 wd:Q549956\n}",
        "questionWithBrackets": "What did [Robert Rodriguez] and [Elena Maganini] edit , [Alexandre Rockwell] write , [Quentin Tarantino] executive produce , and [Lawrence Bender] produce"
    },
    {
        "questionIdx": 144968,
        "questionPatternModEntities": "What did M1 , M2 , M3 , and M4 edit , M0 executive produce , and M5 's parent direct",
        "questionTemplate": "What did [entity] , [entity] , [entity] , and [entity] [VP_SIMPLE] , [entity] [VP_SIMPLE] , and [entity] 's [ROLE_SIMPLE] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\n?x0 P1 M3 .\n?x0 P1 M4 .\n?x0 P2 ?x1 .\n?x1 P3 M5\n}",
        "recursionDepth": 45,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 ?x1 .\n?x0 wdt:P1040 wd:Q5359064 .\n?x0 wdt:P1040 wd:Q47284 .\n?x0 wdt:P1040 wd:Q273379 .\n?x0 wdt:P1040 wd:Q541143 .\n?x0 wdt:P1431 wd:Q3772 .\n?x1 wdt:P40|wdt:P355 wd:Q28032516\n}",
        "questionWithBrackets": "What did [Terry Rawlings] , [Sally Menke] , [Robert Rodriguez] , and [Elena Maganini] edit , [Quentin Tarantino] executive produce , and [Racer Rodriguez] 's parent direct"
    },
    {
        "questionIdx": 145003,
        "questionPatternModEntities": "What did M1 's actor produce and M0 distribute",
        "questionTemplate": "What did [entity] 's [ROLE_SIMPLE] [VP_SIMPLE] and [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 ?x1 .\n?x1 P2 M1\n}",
        "recursionDepth": 25,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P750 wd:Q3881046 .\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x1 wdt:P453 wd:Q5815108\n}",
        "questionWithBrackets": "What did [Duke of Mantua] 's actor produce and [Officine UBU] distribute"
    },
    {
        "questionIdx": 145015,
        "questionPatternModEntities": "What did M0 write , produce , and direct",
        "questionTemplate": "What did [entity] [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M0 .\n?x0 P2 M0\n}",
        "recursionDepth": 24,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 wd:Q882 .\n?x0 wdt:P162|wdt:P272 wd:Q882 .\n?x0 wdt:P58 wd:Q882\n}LIMIT 1",
        "questionWithBrackets": "What did [Charlie Chaplin] write , produce , and direct"
    },
    {
        "questionIdx": 145046,
        "questionPatternModEntities": "What did M0 executive produce and M1 write",
        "questionTemplate": "What did [entity] [VP_SIMPLE] and [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1\n}",
        "recursionDepth": 22,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1431 wd:Q8877 .\n?x0 wdt:P58 wd:Q925413\n}",
        "questionWithBrackets": "What did [Steven Spielberg] executive produce and [Etan Cohen] write"
    },
    {
        "questionIdx": 145047,
        "questionPatternModEntities": "What did M0 and M1 executive produce , M3 , M4 , M5 , and M6 edit , and M2 executive produce",
        "questionTemplate": "What did [entity] and [entity] [VP_SIMPLE] , [entity] , [entity] , [entity] , and [entity] [VP_SIMPLE] , and [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P1 M3 .\n?x0 P1 M4 .\n?x0 P1 M5 .\n?x0 P1 M6\n}",
        "recursionDepth": 46,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1040 wd:Q20722013 .\n?x0 wdt:P1040 wd:Q20722014 .\n?x0 wdt:P1040 wd:Q20722019 .\n?x0 wdt:P1040 wd:Q20722018 .\n?x0 wdt:P1431 wd:Q350405 .\n?x0 wdt:P1431 wd:Q20722010 .\n?x0 wdt:P1431 wd:Q20722012\n}",
        "questionWithBrackets": "What did [Adam McKay] and [Alex Cooke] executive produce , [Steven Simone-Friedland] , [Geraud Brisson] , [Claire L. Chandler] , and [Todd Woody Richman] edit , and [Alan Hayling] executive produce"
    },
    {
        "questionIdx": 145050,
        "questionPatternModEntities": "What did M0 and M1 executive produce , M4 and M5 edit , M2 executive produce , and M3 executive produce",
        "questionTemplate": "What did [entity] and [entity] [VP_SIMPLE] , [entity] and [entity] [VP_SIMPLE] , [entity] [VP_SIMPLE] , and [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P0 M3 .\n?x0 P1 M4 .\n?x0 P1 M5\n}",
        "recursionDepth": 50,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1040 wd:Q16225548 .\n?x0 wdt:P1040 wd:Q1138711 .\n?x0 wdt:P1431 wd:Q37175 .\n?x0 wdt:P1431 wd:Q942914 .\n?x0 wdt:P1431 wd:Q5386431 .\n?x0 wdt:P1431 wd:Q943506\n}",
        "questionWithBrackets": "What did [Terry Rossio] and [Eric Ellenbogen] executive produce , [James Haygood] and [Craig Wood] edit , [Johnny Depp] executive produce , and [Ted Elliott] executive produce"
    },
    {
        "questionIdx": 145057,
        "questionPatternModEntities": "What did M0 executive produce , M1 executive produce , M2 and M3 executive produce , and M4 and M5 write",
        "questionTemplate": "What did [entity] [VP_SIMPLE] , [entity] [VP_SIMPLE] , [entity] and [entity] [VP_SIMPLE] , and [entity] and [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P0 M3 .\n?x0 P1 M4 .\n?x0 P1 M5\n}",
        "recursionDepth": 50,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1431 wd:Q75079 .\n?x0 wdt:P1431 wd:Q975579 .\n?x0 wdt:P1431 wd:Q11778321 .\n?x0 wdt:P1431 wd:Q1900360 .\n?x0 wdt:P58 wd:Q362061 .\n?x0 wdt:P58 wd:Q34660\n}",
        "questionWithBrackets": "What did [Chris Columbus] executive produce , [Mark Radcliffe] executive produce , [Michael Barnathan] and [David Barron] executive produce , and [J. K. Rowling] and [Steve Kloves] write"
    },
    {
        "questionIdx": 145058,
        "questionPatternModEntities": "What did M0 , M1 , and M2 executive produce , M3 and M4 edit , and M5 and M6 edit",
        "questionTemplate": "What did [entity] , [entity] , and [entity] [VP_SIMPLE] , [entity] and [entity] [VP_SIMPLE] , and [entity] and [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P1 M3 .\n?x0 P1 M4 .\n?x0 P1 M5 .\n?x0 P1 M6\n}",
        "recursionDepth": 46,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1040 wd:Q20722014 .\n?x0 wdt:P1040 wd:Q20722018 .\n?x0 wdt:P1040 wd:Q20722019 .\n?x0 wdt:P1040 wd:Q20722013 .\n?x0 wdt:P1431 wd:Q350405 .\n?x0 wdt:P1431 wd:Q20722010 .\n?x0 wdt:P1431 wd:Q20722012\n}",
        "questionWithBrackets": "What did [Adam McKay] , [Alex Cooke] , and [Alan Hayling] executive produce , [Claire L. Chandler] and [Geraud Brisson] edit , and [Steven Simone-Friedland] and [Todd Woody Richman] edit"
    },
    {
        "questionIdx": 145065,
        "questionPatternModEntities": "What did M0 , M1 , and M2 executive produce , M3 , M4 , and M5 edit , and M6 edit",
        "questionTemplate": "What did [entity] , [entity] , and [entity] [VP_SIMPLE] , [entity] , [entity] , and [entity] [VP_SIMPLE] , and [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P1 M3 .\n?x0 P1 M4 .\n?x0 P1 M5 .\n?x0 P1 M6\n}",
        "recursionDepth": 45,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1040 wd:Q20722014 .\n?x0 wdt:P1040 wd:Q20722018 .\n?x0 wdt:P1040 wd:Q20722019 .\n?x0 wdt:P1040 wd:Q20722013 .\n?x0 wdt:P1431 wd:Q350405 .\n?x0 wdt:P1431 wd:Q20722010 .\n?x0 wdt:P1431 wd:Q20722012\n}",
        "questionWithBrackets": "What did [Alex Cooke] , [Adam McKay] , and [Alan Hayling] executive produce , [Geraud Brisson] , [Steven Simone-Friedland] , and [Todd Woody Richman] edit , and [Claire L. Chandler] edit"
    },
    {
        "questionIdx": 145070,
        "questionPatternModEntities": "What did M0 executive produce , M2 and M3 edit , M1 produce , and M4 and M5 edit",
        "questionTemplate": "What did [entity] [VP_SIMPLE] , [entity] and [entity] [VP_SIMPLE] , [entity] [VP_SIMPLE] , and [entity] and [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P2 M2 .\n?x0 P2 M3 .\n?x0 P2 M4 .\n?x0 P2 M5\n}",
        "recursionDepth": 48,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1040 wd:Q47284 .\n?x0 wdt:P1040 wd:Q273379 .\n?x0 wdt:P1040 wd:Q5359064 .\n?x0 wdt:P1040 wd:Q541143 .\n?x0 wdt:P1431 wd:Q3772 .\n?x0 wdt:P162|wdt:P272 wd:Q514913\n}",
        "questionWithBrackets": "What did [Quentin Tarantino] executive produce , [Sally Menke] and [Robert Rodriguez] edit , [Lawrence Bender] produce , and [Elena Maganini] and [Terry Rawlings] edit"
    },
    {
        "questionIdx": 145077,
        "questionPatternModEntities": "What did M1 's sibling 's Spanish spouse edit",
        "questionTemplate": "What did [entity] 's [ROLE_SIMPLE] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x1 P1 M0 .\n?x1 P2 ?x2 .\n?x2 P3 M1 .\nFILTER ( ?x1 != ?x2 ) .\nFILTER ( ?x2 != M1 )\n}",
        "recursionDepth": 23,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1040 ?x1 .\n?x1 wdt:P27 wd:Q29 .\n?x1 wdt:P26 ?x2 .\n?x2 wdt:P3373 wd:Q29950249 .\nFILTER ( ?x1 != ?x2 ) .\nFILTER ( ?x2 != wd:Q29950249 )\n}LIMIT 1",
        "questionWithBrackets": "What did [Ana de Osma y Zavala] 's sibling 's Spanish spouse edit"
    },
    {
        "questionIdx": 145088,
        "questionPatternModEntities": "What did M1 's Italian spouse edit",
        "questionTemplate": "What did [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x1 P1 M0 .\n?x1 P2 M1 .\nFILTER ( ?x1 != M1 )\n}",
        "recursionDepth": 19,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1040 ?x1 .\n?x1 wdt:P27 wd:Q38 .\n?x1 wdt:P26 wd:Q20644315 .\nFILTER ( ?x1 != wd:Q20644315 )\n}LIMIT 1",
        "questionWithBrackets": "What did [Silvia Nono] 's Italian spouse edit"
    },
    {
        "questionIdx": 145107,
        "questionPatternModEntities": "What did M0 direct , write , edit , and produce",
        "questionTemplate": "What did [entity] [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M0 .\n?x0 P2 M0 .\n?x0 P3 M0\n}",
        "recursionDepth": 30,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 wd:Q8006 .\n?x0 wdt:P1040 wd:Q8006 .\n?x0 wdt:P162|wdt:P272 wd:Q8006 .\n?x0 wdt:P58 wd:Q8006\n}LIMIT 1",
        "questionWithBrackets": "What did [Akira Kurosawa] direct , write , edit , and produce"
    },
    {
        "questionIdx": 145108,
        "questionPatternModEntities": "What did M1 's sibling 's sibling executive produce , M0 edit , and a spouse of M2 direct",
        "questionTemplate": "What did [entity] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE] [VP_SIMPLE] , [entity] [VP_SIMPLE] , and a [ROLE_SIMPLE] of [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 M0 .\n?x0 P2 ?x2 .\n?x1 P3 ?x3 .\n?x2 P4 M2 .\n?x3 P3 M1 .\nFILTER ( ?x1 != ?x3 ) .\nFILTER ( ?x2 != M2 ) .\nFILTER ( ?x3 != M1 )\n}",
        "recursionDepth": 45,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 ?x1 .\n?x0 wdt:P1040 wd:Q1173825 .\n?x0 wdt:P1431 ?x2 .\n?x1 wdt:P26 wd:Q2443440 .\n?x2 wdt:P3373 ?x3 .\n?x3 wdt:P3373 wd:Q25191 .\nFILTER ( ?x1 != wd:Q2443440 ) .\nFILTER ( ?x2 != ?x3 ) .\nFILTER ( ?x3 != wd:Q25191 )\n}",
        "questionWithBrackets": "What did [Christopher Nolan] 's sibling 's sibling executive produce , [David Brenner] edit , and a spouse of [Deborah Snyder] direct"
    },
    {
        "questionIdx": 145110,
        "questionPatternModEntities": "What did M0 's parent produce , executive produce , and write",
        "questionTemplate": "What did [entity] 's [ROLE_SIMPLE] [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x1 P3 M0\n}",
        "recursionDepth": 29,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1431 ?x1 .\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x0 wdt:P58 ?x1 .\n?x1 wdt:P40|wdt:P355 wd:Q271162\n}LIMIT 1",
        "questionWithBrackets": "What did [Jennifer Lynch] 's parent produce , executive produce , and write"
    },
    {
        "questionIdx": 145126,
        "questionPatternModEntities": "What did M0 , M1 , and M2 write , M5 's female spouse write , and M3 direct",
        "questionTemplate": "What did [entity] , [entity] , and [entity] [VP_SIMPLE] , [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] [VP_SIMPLE] , and [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P1 M3 .\n?x1 P2 M4 .\n?x1 P3 M5 .\nFILTER ( ?x1 != M5 )\n}",
        "recursionDepth": 46,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 wd:Q472890 .\n?x0 wdt:P58 ?x1 .\n?x0 wdt:P58 wd:Q4137 .\n?x0 wdt:P58 wd:Q44695 .\n?x0 wdt:P58 wd:Q474192 .\n?x1 wdt:P21 wd:Q6581072 .\n?x1 wdt:P26 wd:Q4128 .\nFILTER ( ?x1 != wd:Q4128 )\n}",
        "questionWithBrackets": "What did [Konstantin Simonov] , [Elsa Triolet] , and [Charles Spaak] write , [Louis Aragon] 's female spouse write , and [Jean Dr\u00e9ville] direct"
    },
    {
        "questionIdx": 145128,
        "questionPatternModEntities": "What did M1 's male spouse produce , write , executive produce , and edit",
        "questionTemplate": "What did [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x0 P3 ?x1 .\n?x1 P4 M0 .\n?x1 P5 M1 .\nFILTER ( ?x1 != M1 )\n}",
        "recursionDepth": 40,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1040 ?x1 .\n?x0 wdt:P1431 ?x1 .\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x0 wdt:P58 ?x1 .\n?x1 wdt:P21 wd:Q6581097 .\n?x1 wdt:P26 wd:Q6813152 .\nFILTER ( ?x1 != wd:Q6813152 )\n}LIMIT 1",
        "questionWithBrackets": "What did [Mellody Hobson] 's male spouse produce , write , executive produce , and edit"
    },
    {
        "questionIdx": 145129,
        "questionPatternModEntities": "What did M0 's spouse direct , executive produce , and write",
        "questionTemplate": "What did [entity] 's [ROLE_SIMPLE] [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x1 P3 M0 .\nFILTER ( ?x1 != M0 )\n}",
        "recursionDepth": 29,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 ?x1 .\n?x0 wdt:P1431 ?x1 .\n?x0 wdt:P58 ?x1 .\n?x1 wdt:P26 wd:Q717669 .\nFILTER ( ?x1 != wd:Q717669 )\n}LIMIT 1",
        "questionWithBrackets": "What did [Lin Feng-jiao] 's spouse direct , executive produce , and write"
    },
    {
        "questionIdx": 145135,
        "questionPatternModEntities": "What did M0 produce , direct , write , and edit",
        "questionTemplate": "What did [entity] [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M0 .\n?x0 P2 M0 .\n?x0 P3 M0\n}",
        "recursionDepth": 30,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 wd:Q8006 .\n?x0 wdt:P1040 wd:Q8006 .\n?x0 wdt:P162|wdt:P272 wd:Q8006 .\n?x0 wdt:P58 wd:Q8006\n}LIMIT 1",
        "questionWithBrackets": "What did [Akira Kurosawa] produce , direct , write , and edit"
    },
    {
        "questionIdx": 145151,
        "questionPatternModEntities": "What did M0 's parent produce , direct , edit , executive produce , and write",
        "questionTemplate": "What did [entity] 's [ROLE_SIMPLE] [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x0 P3 ?x1 .\n?x0 P4 ?x1 .\n?x1 P5 M0\n}",
        "recursionDepth": 41,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 ?x1 .\n?x0 wdt:P1040 ?x1 .\n?x0 wdt:P1431 ?x1 .\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x0 wdt:P58 ?x1 .\n?x1 wdt:P40|wdt:P355 wd:Q1620638\n}LIMIT 1",
        "questionWithBrackets": "What did [Hisao Kurosawa] 's parent produce , direct , edit , executive produce , and write"
    },
    {
        "questionIdx": 145167,
        "questionPatternModEntities": "What did M0 's parent direct , executive produce , produce , edit , and write",
        "questionTemplate": "What did [entity] 's [ROLE_SIMPLE] [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x0 P3 ?x1 .\n?x0 P4 ?x1 .\n?x1 P5 M0\n}",
        "recursionDepth": 41,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 ?x1 .\n?x0 wdt:P1040 ?x1 .\n?x0 wdt:P1431 ?x1 .\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x0 wdt:P58 ?x1 .\n?x1 wdt:P40|wdt:P355 wd:Q1620638\n}LIMIT 1",
        "questionWithBrackets": "What did [Hisao Kurosawa] 's parent direct , executive produce , produce , edit , and write"
    },
    {
        "questionIdx": 145184,
        "questionPatternModEntities": "What did M0 , M1 , and M2 edit , write , and direct",
        "questionTemplate": "What did [entity] , [entity] , and [entity] [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P1 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\n?x0 P2 M0 .\n?x0 P2 M1 .\n?x0 P2 M2\n}",
        "recursionDepth": 31,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 wd:Q562108 .\n?x0 wdt:P57 wd:Q1687239 .\n?x0 wdt:P57 wd:Q35979475 .\n?x0 wdt:P1040 wd:Q562108 .\n?x0 wdt:P1040 wd:Q1687239 .\n?x0 wdt:P1040 wd:Q35979475 .\n?x0 wdt:P58 wd:Q562108 .\n?x0 wdt:P58 wd:Q1687239 .\n?x0 wdt:P58 wd:Q35979475\n}",
        "questionWithBrackets": "What did [J\u00f8rgen Leth] , [Ole John] , and [Jens J\u00f8rgen Thorsen] edit , write , and direct"
    },
    {
        "questionIdx": 145195,
        "questionPatternModEntities": "What did M0 , M1 , and M2 edit and produce",
        "questionTemplate": "What did [entity] , [entity] , and [entity] [VP_SIMPLE] and [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P1 M0 .\n?x0 P1 M1 .\n?x0 P1 M2\n}",
        "recursionDepth": 25,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1040 wd:Q562108 .\n?x0 wdt:P1040 wd:Q1687239 .\n?x0 wdt:P1040 wd:Q35979475 .\n?x0 wdt:P162|wdt:P272 wd:Q562108 .\n?x0 wdt:P162|wdt:P272 wd:Q1687239 .\n?x0 wdt:P162|wdt:P272 wd:Q35979475\n}",
        "questionWithBrackets": "What did [J\u00f8rgen Leth] , [Jens J\u00f8rgen Thorsen] , and [Ole John] edit and produce"
    },
    {
        "questionIdx": 145197,
        "questionPatternModEntities": "What did M0 , M1 , M2 , and M3 produce and direct",
        "questionTemplate": "What did [entity] , [entity] , [entity] , and [entity] [VP_SIMPLE] and [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P0 M3 .\n?x0 P1 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\n?x0 P1 M3\n}",
        "recursionDepth": 28,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 wd:Q16390 .\n?x0 wdt:P57 wd:Q4420093 .\n?x0 wdt:P57 wd:Q93188 .\n?x0 wdt:P57 wd:Q242477 .\n?x0 wdt:P162|wdt:P272 wd:Q16390 .\n?x0 wdt:P162|wdt:P272 wd:Q4420093 .\n?x0 wdt:P162|wdt:P272 wd:Q93188 .\n?x0 wdt:P162|wdt:P272 wd:Q242477\n}",
        "questionWithBrackets": "What did [Miriam Hopkins] , [Errol Flynn] , [Robert Buckner] , and [Humphrey Bogart] produce and direct"
    },
    {
        "questionIdx": 145198,
        "questionPatternModEntities": "What did M0 , M1 , and M2 direct and produce",
        "questionTemplate": "What did [entity] , [entity] , and [entity] [VP_SIMPLE] and [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P1 M0 .\n?x0 P1 M1 .\n?x0 P1 M2\n}",
        "recursionDepth": 25,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 wd:Q3772 .\n?x0 wdt:P57 wd:Q47284 .\n?x0 wdt:P57 wd:Q358714 .\n?x0 wdt:P162|wdt:P272 wd:Q3772 .\n?x0 wdt:P162|wdt:P272 wd:Q47284 .\n?x0 wdt:P162|wdt:P272 wd:Q358714\n}",
        "questionWithBrackets": "What did [Quentin Tarantino] , [Robert Rodriguez] , and [Eli Roth] direct and produce"
    },
    {
        "questionIdx": 145199,
        "questionPatternModEntities": "What did M0 's sibling 's sibling write",
        "questionTemplate": "What did [entity] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x1 P1 ?x2 .\n?x2 P1 M0 .\nFILTER ( ?x1 != ?x2 ) .\nFILTER ( ?x2 != M0 )\n}",
        "recursionDepth": 18,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P58 ?x1 .\n?x1 wdt:P3373 ?x2 .\n?x2 wdt:P3373 wd:Q606780 .\nFILTER ( ?x1 != ?x2 ) .\nFILTER ( ?x2 != wd:Q606780 )\n}LIMIT 1",
        "questionWithBrackets": "What did [Sydney Chaplin] 's sibling 's sibling write"
    },
    {
        "questionIdx": 145204,
        "questionPatternModEntities": "What did M1 's Canadian spouse produce",
        "questionTemplate": "What did [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x1 P1 M0 .\n?x1 P2 M1 .\nFILTER ( ?x1 != M1 )\n}",
        "recursionDepth": 19,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x1 wdt:P27 wd:Q16 .\n?x1 wdt:P26 wd:Q206939 .\nFILTER ( ?x1 != wd:Q206939 )\n}LIMIT 1",
        "questionWithBrackets": "What did [Elvis Costello] 's Canadian spouse produce"
    },
    {
        "questionIdx": 145213,
        "questionPatternModEntities": "What did M0 's American employee edit",
        "questionTemplate": "What did [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x1 P1 M0 .\n?x1 P2 M1\n}",
        "recursionDepth": 19,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1040 ?x1 .\n?x1 wdt:P108 wd:Q4614 .\n?x1 wdt:P27 wd:Q30\n}LIMIT 1",
        "questionWithBrackets": "What did [University of Southern California] 's American employee edit"
    },
    {
        "questionIdx": 145215,
        "questionPatternModEntities": "What did M0 's employee 's sibling produce , direct , edit , and write",
        "questionTemplate": "What did [entity] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE] [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x0 P3 ?x1 .\n?x1 P4 ?x2 .\n?x2 P5 M0 .\nFILTER ( ?x1 != ?x2 )\n}",
        "recursionDepth": 38,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 ?x1 .\n?x0 wdt:P1040 ?x1 .\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x0 wdt:P58 ?x1 .\n?x1 wdt:P3373 ?x2 .\n?x2 wdt:P108 wd:Q3194369 .\nFILTER ( ?x1 != ?x2 )\n}LIMIT 1",
        "questionWithBrackets": "What did [Kay-Bee Pictures] 's employee 's sibling produce , direct , edit , and write"
    },
    {
        "questionIdx": 145216,
        "questionPatternModEntities": "What did M0 's employee 's sibling write , edit , and direct",
        "questionTemplate": "What did [entity] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE] [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x1 P3 ?x2 .\n?x2 P4 M0 .\nFILTER ( ?x1 != ?x2 )\n}",
        "recursionDepth": 32,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 ?x1 .\n?x0 wdt:P1040 ?x1 .\n?x0 wdt:P58 ?x1 .\n?x1 wdt:P3373 ?x2 .\n?x2 wdt:P108 wd:Q8190379 .\nFILTER ( ?x1 != ?x2 )\n}LIMIT 1",
        "questionWithBrackets": "What did [Shukutoku University] 's employee 's sibling write , edit , and direct"
    },
    {
        "questionIdx": 145220,
        "questionPatternModEntities": "What did M0 , M1 , and M2 produce and direct",
        "questionTemplate": "What did [entity] , [entity] , and [entity] [VP_SIMPLE] and [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P1 M0 .\n?x0 P1 M1 .\n?x0 P1 M2\n}",
        "recursionDepth": 25,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 wd:Q3772 .\n?x0 wdt:P57 wd:Q47284 .\n?x0 wdt:P57 wd:Q358714 .\n?x0 wdt:P162|wdt:P272 wd:Q3772 .\n?x0 wdt:P162|wdt:P272 wd:Q47284 .\n?x0 wdt:P162|wdt:P272 wd:Q358714\n}",
        "questionWithBrackets": "What did [Quentin Tarantino] , [Eli Roth] , and [Robert Rodriguez] produce and direct"
    },
    {
        "questionIdx": 145242,
        "questionPatternModEntities": "What did M0 produce , direct , and edit",
        "questionTemplate": "What did [entity] [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M0 .\n?x0 P2 M0\n}",
        "recursionDepth": 24,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 wd:Q25186 .\n?x0 wdt:P1040 wd:Q25186 .\n?x0 wdt:P162|wdt:P272 wd:Q25186\n}LIMIT 1",
        "questionWithBrackets": "What did [Gus Van Sant] produce , direct , and edit"
    },
    {
        "questionIdx": 145248,
        "questionPatternModEntities": "What did M0 's spouse edit and direct",
        "questionTemplate": "What did [entity] 's [ROLE_SIMPLE] [VP_SIMPLE] and [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x1 P2 M0 .\nFILTER ( ?x1 != M0 )\n}",
        "recursionDepth": 22,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 ?x1 .\n?x0 wdt:P1040 ?x1 .\n?x1 wdt:P26 wd:Q3032150 .\nFILTER ( ?x1 != wd:Q3032150 )\n}LIMIT 1",
        "questionWithBrackets": "What did [Y\u014dko Yaguchi] 's spouse edit and direct"
    },
    {
        "questionIdx": 145259,
        "questionPatternModEntities": "What did M0 produce , write , and executive produce",
        "questionTemplate": "What did [entity] [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M0 .\n?x0 P2 M0\n}",
        "recursionDepth": 25,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1431 wd:Q2001 .\n?x0 wdt:P162|wdt:P272 wd:Q2001 .\n?x0 wdt:P58 wd:Q2001\n}LIMIT 1",
        "questionWithBrackets": "What did [Stanley Kubrick] produce , write , and executive produce"
    },
    {
        "questionIdx": 145271,
        "questionPatternModEntities": "What did M0 and M1 distribute , M4 produce , M2 distribute , and M3 distribute",
        "questionTemplate": "What did [entity] and [entity] [VP_SIMPLE] , [entity] [VP_SIMPLE] , [entity] [VP_SIMPLE] , and [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P0 M3 .\n?x0 P1 M4\n}",
        "recursionDepth": 43,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P750 wd:Q145 .\n?x0 wdt:P750 wd:Q5371838 .\n?x0 wdt:P750 wd:Q9589 .\n?x0 wdt:P750 wd:Q80948336 .\n?x0 wdt:P162|wdt:P272 wd:Q7684047\n}",
        "questionWithBrackets": "What did [FandangoNow] and [iTunes] distribute , [Tanya Seghatchian] produce , [Vudu] distribute , and [United Kingdom] distribute"
    },
    {
        "questionIdx": 145282,
        "questionPatternModEntities": "What did M0 executive produce , M1 and M2 executive produce , M4 direct , and M3 write",
        "questionTemplate": "What did [entity] [VP_SIMPLE] , [entity] and [entity] [VP_SIMPLE] , [entity] [VP_SIMPLE] , and [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P1 M3 .\n?x0 P2 M4\n}",
        "recursionDepth": 45,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 wd:Q253977 .\n?x0 wdt:P1431 wd:Q8877 .\n?x0 wdt:P1431 wd:Q6984051 .\n?x0 wdt:P1431 wd:Q55601945 .\n?x0 wdt:P58 wd:Q4133060\n}",
        "questionWithBrackets": "What did [Neal Baer] executive produce , [Darryl Frank] and [Steven Spielberg] executive produce , [Roxann Dawson] direct , and [Rick Cleveland] write"
    },
    {
        "questionIdx": 145295,
        "questionPatternModEntities": "What did M0 's parent and spouse found",
        "questionTemplate": "What did [entity] 's [ROLE_SIMPLE] and [ROLE_SIMPLE] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x1 P1 M0 .\n?x1 P2 M0 .\nFILTER ( ?x1 != M0 )\n}",
        "recursionDepth": 19,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P112 ?x1 .\n?x1 wdt:P40|wdt:P355 wd:Q270864 .\n?x1 wdt:P26 wd:Q270864 .\nFILTER ( ?x1 != wd:Q270864 )\n}LIMIT 1",
        "questionWithBrackets": "What did [Sitamun] 's parent and spouse found"
    },
    {
        "questionIdx": 145296,
        "questionPatternModEntities": "What did M0 's spouse and parent found",
        "questionTemplate": "What did [entity] 's [ROLE_SIMPLE] and [ROLE_SIMPLE] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x1 P1 M0 .\n?x1 P2 M0 .\nFILTER ( ?x1 != M0 )\n}",
        "recursionDepth": 19,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P112 ?x1 .\n?x1 wdt:P40|wdt:P355 wd:Q270864 .\n?x1 wdt:P26 wd:Q270864 .\nFILTER ( ?x1 != wd:Q270864 )\n}LIMIT 1",
        "questionWithBrackets": "What did [Sitamun] 's spouse and parent found"
    },
    {
        "questionIdx": 145311,
        "questionPatternModEntities": "What did M0 executive produce and M1 's spouse produce",
        "questionTemplate": "What did [entity] [VP_SIMPLE] and [entity] 's [ROLE_SIMPLE] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 ?x1 .\n?x1 P2 M1 .\nFILTER ( ?x1 != M1 )\n}",
        "recursionDepth": 26,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1431 wd:Q7374 .\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x1 wdt:P26 wd:Q203165 .\nFILTER ( ?x1 != wd:Q203165 )\n}",
        "questionWithBrackets": "What did [Alfred Hitchcock] executive produce and [Alma Reville] 's spouse produce"
    },
    {
        "questionIdx": 145314,
        "questionPatternModEntities": "What did M0 's sibling direct and edit",
        "questionTemplate": "What did [entity] 's [ROLE_SIMPLE] [VP_SIMPLE] and [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x1 P2 M0 .\nFILTER ( ?x1 != M0 )\n}",
        "recursionDepth": 22,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 ?x1 .\n?x0 wdt:P1040 ?x1 .\n?x1 wdt:P3373 wd:Q469204 .\nFILTER ( ?x1 != wd:Q469204 )\n}LIMIT 1",
        "questionWithBrackets": "What did [Anne Spielberg] 's sibling direct and edit"
    },
    {
        "questionIdx": 145349,
        "questionPatternModEntities": "What did M5 direct , M6 direct , and M0 , M1 , M2 , M3 , and M4 executive produce",
        "questionTemplate": "What did [entity] [VP_SIMPLE] , [entity] [VP_SIMPLE] , and [entity] , [entity] , [entity] , [entity] , and [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P0 M3 .\n?x0 P0 M4 .\n?x0 P1 M5 .\n?x0 P1 M6\n}",
        "recursionDepth": 44,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 wd:Q678310 .\n?x0 wdt:P57 wd:Q253977 .\n?x0 wdt:P1431 wd:Q39829 .\n?x0 wdt:P1431 wd:Q362793 .\n?x0 wdt:P1431 wd:Q8877 .\n?x0 wdt:P1431 wd:Q55601945 .\n?x0 wdt:P1431 wd:Q55602356\n}",
        "questionWithBrackets": "What did [Roxann Dawson] direct , [Niels Arden Oplev] direct , and [Stephen King] , [Justin Falvey] , [Jack Bender] , [Darryl Frank] , and [Steven Spielberg] executive produce"
    },
    {
        "questionIdx": 145365,
        "questionPatternModEntities": "What did M0 's Japanese sibling found",
        "questionTemplate": "What did [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x1 P1 M0 .\n?x1 P2 M1 .\nFILTER ( ?x1 != M0 )\n}",
        "recursionDepth": 19,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P112 ?x1 .\n?x1 wdt:P27 wd:Q17 .\n?x1 wdt:P3373 wd:Q11539744 .\nFILTER ( ?x1 != wd:Q11539744 )\n}LIMIT 1",
        "questionWithBrackets": "What did [Satoru Mori] 's Japanese sibling found"
    },
    {
        "questionIdx": 145386,
        "questionPatternModEntities": "What did M0 's spouse edit , produce , executive produce , and write",
        "questionTemplate": "What did [entity] 's [ROLE_SIMPLE] [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x0 P3 ?x1 .\n?x1 P4 M0 .\nFILTER ( ?x1 != M0 )\n}",
        "recursionDepth": 35,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1040 ?x1 .\n?x0 wdt:P1431 ?x1 .\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x0 wdt:P58 ?x1 .\n?x1 wdt:P26 wd:Q3032150 .\nFILTER ( ?x1 != wd:Q3032150 )\n}LIMIT 1",
        "questionWithBrackets": "What did [Y\u014dko Yaguchi] 's spouse edit , produce , executive produce , and write"
    },
    {
        "questionIdx": 145393,
        "questionPatternModEntities": "What did M1 write , M2 produce , and M0 executive produce",
        "questionTemplate": "What did [entity] [VP_SIMPLE] , [entity] [VP_SIMPLE] , and [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P2 M2\n}",
        "recursionDepth": 31,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1431 wd:Q35332 .\n?x0 wdt:P162|wdt:P272 wd:Q15884784 .\n?x0 wdt:P58 wd:Q6514075\n}",
        "questionWithBrackets": "What did [Lee Isaac Chung] write , [Jeremy Kleiner] produce , and [Brad Pitt] executive produce"
    },
    {
        "questionIdx": 145400,
        "questionPatternModEntities": "What did M0 's parent 's employee found",
        "questionTemplate": "What did [entity] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x1 P1 ?x2 .\n?x2 P2 M0\n}",
        "recursionDepth": 18,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P112 ?x1 .\n?x1 wdt:P108 ?x2 .\n?x2 wdt:P40|wdt:P355 wd:Q142740\n}LIMIT 1",
        "questionWithBrackets": "What did [MIT Sloan School of Management] 's parent 's employee found"
    },
    {
        "questionIdx": 145451,
        "questionPatternModEntities": "What did M0 's spouse and sibling found",
        "questionTemplate": "What did [entity] 's [ROLE_SIMPLE] and [ROLE_SIMPLE] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x1 P1 M0 .\n?x1 P2 M0 .\nFILTER ( ?x1 != M0 ) .\nFILTER ( ?x1 != M0 )\n}",
        "recursionDepth": 19,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P112 ?x1 .\n?x1 wdt:P3373 wd:Q225845 .\n?x1 wdt:P26 wd:Q225845 .\nFILTER ( ?x1 != wd:Q225845 ) .\nFILTER ( ?x1 != wd:Q225845 )\n}LIMIT 1",
        "questionWithBrackets": "What did [Kiya] 's spouse and sibling found"
    },
    {
        "questionIdx": 145472,
        "questionPatternModEntities": "What did M0 , M1 , and M2 executive produce and write",
        "questionTemplate": "What did [entity] , [entity] , and [entity] [VP_SIMPLE] and [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P1 M0 .\n?x0 P1 M1 .\n?x0 P1 M2\n}",
        "recursionDepth": 26,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1431 wd:Q363666 .\n?x0 wdt:P1431 wd:Q448604 .\n?x0 wdt:P1431 wd:Q452794 .\n?x0 wdt:P58 wd:Q363666 .\n?x0 wdt:P58 wd:Q448604 .\n?x0 wdt:P58 wd:Q452794\n}",
        "questionWithBrackets": "What did [David Zucker] , [Jim Abrahams] , and [Jerry Zucker] executive produce and write"
    },
    {
        "questionIdx": 145474,
        "questionPatternModEntities": "What did M3 direct , M4 direct , M0 and M1 executive produce , and M2 executive produce",
        "questionTemplate": "What did [entity] [VP_SIMPLE] , [entity] [VP_SIMPLE] , [entity] and [entity] [VP_SIMPLE] , and [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P1 M3 .\n?x0 P1 M4\n}",
        "recursionDepth": 45,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 wd:Q89738028 .\n?x0 wdt:P57 wd:Q90341521 .\n?x0 wdt:P1431 wd:Q76 .\n?x0 wdt:P1431 wd:Q13133 .\n?x0 wdt:P1431 wd:Q22115301\n}",
        "questionWithBrackets": "What did [Nicole Newnham] direct , [James LeBrecht] direct , [Barack Obama] and [Michelle Obama] executive produce , and [Howard Gertler] executive produce"
    },
    {
        "questionIdx": 145475,
        "questionPatternModEntities": "What did M4 direct , M1 write , M0 executive produce , and M2 and M3 write",
        "questionTemplate": "What did [entity] [VP_SIMPLE] , [entity] [VP_SIMPLE] , [entity] [VP_SIMPLE] , and [entity] and [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\n?x0 P1 M3 .\n?x0 P2 M4\n}",
        "recursionDepth": 44,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 wd:Q1045172 .\n?x0 wdt:P1431 wd:Q56094 .\n?x0 wdt:P58 wd:Q935410 .\n?x0 wdt:P58 wd:Q8007527 .\n?x0 wdt:P58 wd:Q435696\n}",
        "questionWithBrackets": "What did [Carroll Ballard] direct , [William D. Wittliff] write , [Francis Ford Coppola] executive produce , and [Melissa Mathison] and [Walter Farley] write"
    },
    {
        "questionIdx": 145477,
        "questionPatternModEntities": "What did M0 , M1 , and M2 executive produce and produce",
        "questionTemplate": "What did [entity] , [entity] , and [entity] [VP_SIMPLE] and [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P1 M0 .\n?x0 P1 M1 .\n?x0 P1 M2\n}",
        "recursionDepth": 26,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1431 wd:Q43994 .\n?x0 wdt:P1431 wd:Q95125 .\n?x0 wdt:P1431 wd:Q365090 .\n?x0 wdt:P162|wdt:P272 wd:Q43994 .\n?x0 wdt:P162|wdt:P272 wd:Q95125 .\n?x0 wdt:P162|wdt:P272 wd:Q365090\n}",
        "questionWithBrackets": "What did [Sam Simon] , [James L. Brooks] , and [Matt Groening] executive produce and produce"
    },
    {
        "questionIdx": 145479,
        "questionPatternModEntities": "What did M0 executive produce",
        "questionTemplate": "What did [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0\n}",
        "recursionDepth": 11,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1431 wd:Q42\n}LIMIT 1",
        "questionWithBrackets": "What did [Douglas Adams] executive produce"
    },
    {
        "questionIdx": 145482,
        "questionPatternModEntities": "What did M0 's male employee produce , edit , and direct",
        "questionTemplate": "What did [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x1 P3 M0 .\n?x1 P4 M1\n}",
        "recursionDepth": 33,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 ?x1 .\n?x0 wdt:P1040 ?x1 .\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x1 wdt:P108 wd:Q1130457 .\n?x1 wdt:P21 wd:Q6581097\n}LIMIT 1",
        "questionWithBrackets": "What did [Gerasimov Institute of Cinematography] 's male employee produce , edit , and direct"
    },
    {
        "questionIdx": 145495,
        "questionPatternModEntities": "What did M0 's German female sibling direct",
        "questionTemplate": "What did [entity] 's [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x1 P1 M0 .\n?x1 P2 M1 .\n?x1 P3 M2 .\nFILTER ( ?x1 != M0 )\n}",
        "recursionDepth": 24,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 ?x1 .\n?x1 wdt:P21 wd:Q6581072 .\n?x1 wdt:P27 wd:Q183 .\n?x1 wdt:P3373 wd:Q5553615 .\nFILTER ( ?x1 != wd:Q5553615 )\n}LIMIT 1",
        "questionWithBrackets": "What did [Gesine Bullock-Prado] 's German female sibling direct"
    },
    {
        "questionIdx": 145515,
        "questionPatternModEntities": "What did M0 , M1 , M2 , and M3 edit , write , and direct",
        "questionTemplate": "What did [entity] , [entity] , [entity] , and [entity] [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P0 M3 .\n?x0 P1 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\n?x0 P1 M3 .\n?x0 P2 M0 .\n?x0 P2 M1 .\n?x0 P2 M2 .\n?x0 P2 M3\n}",
        "recursionDepth": 34,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 wd:Q5836844 .\n?x0 wdt:P57 wd:Q5658534 .\n?x0 wdt:P57 wd:Q4022902 .\n?x0 wdt:P57 wd:Q4023328 .\n?x0 wdt:P1040 wd:Q5836844 .\n?x0 wdt:P1040 wd:Q5658534 .\n?x0 wdt:P1040 wd:Q4022902 .\n?x0 wdt:P1040 wd:Q4023328 .\n?x0 wdt:P58 wd:Q5836844 .\n?x0 wdt:P58 wd:Q5658534 .\n?x0 wdt:P58 wd:Q4022902 .\n?x0 wdt:P58 wd:Q4023328\n}",
        "questionWithBrackets": "What did [Y\u016bdai Yamaguchi] , [Adri\u00e1n Garc\u00eda Bogliano] , [Yoshihiro Nishimura] , and [Ernesto D\u00edaz Espinoza] edit , write , and direct"
    },
    {
        "questionIdx": 145517,
        "questionPatternModEntities": "What did M0 's sibling write and produce",
        "questionTemplate": "What did [entity] 's [ROLE_SIMPLE] [VP_SIMPLE] and [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x1 P2 M0 .\nFILTER ( ?x1 != M0 )\n}",
        "recursionDepth": 22,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x0 wdt:P58 ?x1 .\n?x1 wdt:P3373 wd:Q606780 .\nFILTER ( ?x1 != wd:Q606780 )\n}LIMIT 1",
        "questionWithBrackets": "What did [Sydney Chaplin] 's sibling write and produce"
    },
    {
        "questionIdx": 145524,
        "questionPatternModEntities": "What did M0 's British sibling write",
        "questionTemplate": "What did [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x1 P1 M0 .\n?x1 P2 M1 .\nFILTER ( ?x1 != M0 )\n}",
        "recursionDepth": 19,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P58 ?x1 .\n?x1 wdt:P27 wd:Q145 .\n?x1 wdt:P3373 wd:Q606780 .\nFILTER ( ?x1 != wd:Q606780 )\n}LIMIT 1",
        "questionWithBrackets": "What did [Sydney Chaplin] 's British sibling write"
    },
    {
        "questionIdx": 145525,
        "questionPatternModEntities": "What did M0 write and M1 's female employee executive produce",
        "questionTemplate": "What did [entity] [VP_SIMPLE] and [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 M0 .\n?x1 P2 M1 .\n?x1 P3 M2\n}",
        "recursionDepth": 31,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1431 ?x1 .\n?x0 wdt:P58 wd:Q1744 .\n?x1 wdt:P108 wd:Q847743 .\n?x1 wdt:P21 wd:Q6581072\n}",
        "questionWithBrackets": "What did [Madonna] write and [Dunkin'] 's female employee executive produce"
    },
    {
        "questionIdx": 145530,
        "questionPatternModEntities": "What did M0 's parent executive produce , produce , direct , edit , and write",
        "questionTemplate": "What did [entity] 's [ROLE_SIMPLE] [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x0 P3 ?x1 .\n?x0 P4 ?x1 .\n?x1 P5 M0\n}",
        "recursionDepth": 41,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 ?x1 .\n?x0 wdt:P1040 ?x1 .\n?x0 wdt:P1431 ?x1 .\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x0 wdt:P58 ?x1 .\n?x1 wdt:P40|wdt:P355 wd:Q1620638\n}LIMIT 1",
        "questionWithBrackets": "What did [Hisao Kurosawa] 's parent executive produce , produce , direct , edit , and write"
    },
    {
        "questionIdx": 145531,
        "questionPatternModEntities": "What did M0 executive produce , M1 direct , and a spouse of M2 produce",
        "questionTemplate": "What did [entity] [VP_SIMPLE] , [entity] [VP_SIMPLE] , and a [ROLE_SIMPLE] of [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 ?x1 .\n?x0 P2 M1 .\n?x1 P3 M2 .\nFILTER ( ?x1 != M2 )\n}",
        "recursionDepth": 37,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 wd:Q2451678 .\n?x0 wdt:P1431 wd:Q11313 .\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x1 wdt:P26 wd:Q496207 .\nFILTER ( ?x1 != wd:Q496207 )\n}",
        "questionWithBrackets": "What did [John Knoll] executive produce , [Gareth Edwards] direct , and a spouse of [Edward Shearmur] produce"
    },
    {
        "questionIdx": 145532,
        "questionPatternModEntities": "What did M1 's sibling 's male spouse direct",
        "questionTemplate": "What did [entity] 's [ROLE_SIMPLE] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x1 P1 M0 .\n?x1 P2 ?x2 .\n?x2 P3 M1 .\nFILTER ( ?x1 != ?x2 ) .\nFILTER ( ?x2 != M1 )\n}",
        "recursionDepth": 23,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 ?x1 .\n?x1 wdt:P21 wd:Q6581097 .\n?x1 wdt:P26 ?x2 .\n?x2 wdt:P3373 wd:Q7124243 .\nFILTER ( ?x1 != ?x2 ) .\nFILTER ( ?x2 != wd:Q7124243 )\n}LIMIT 1",
        "questionWithBrackets": "What did [Page Hannah] 's sibling 's male spouse direct"
    },
    {
        "questionIdx": 145533,
        "questionPatternModEntities": "What did M2 's female American spouse write",
        "questionTemplate": "What did [entity] 's [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x1 P1 M0 .\n?x1 P2 M1 .\n?x1 P3 M2 .\nFILTER ( ?x1 != M2 )\n}",
        "recursionDepth": 24,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P58 ?x1 .\n?x1 wdt:P21 wd:Q6581072 .\n?x1 wdt:P27 wd:Q30 .\n?x1 wdt:P26 wd:Q315051 .\nFILTER ( ?x1 != wd:Q315051 )\n}LIMIT 1",
        "questionWithBrackets": "What did [James Brolin] 's female American spouse write"
    },
    {
        "questionIdx": 145534,
        "questionPatternModEntities": "What did M0 write and executive produce",
        "questionTemplate": "What did [entity] [VP_SIMPLE] and [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M0\n}",
        "recursionDepth": 19,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1431 wd:Q61347 .\n?x0 wdt:P58 wd:Q61347\n}LIMIT 1",
        "questionWithBrackets": "What did [Uwe Boll] write and executive produce"
    },
    {
        "questionIdx": 145536,
        "questionPatternModEntities": "What did M0 executive produce , write , and produce",
        "questionTemplate": "What did [entity] [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M0 .\n?x0 P2 M0\n}",
        "recursionDepth": 25,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1431 wd:Q38222 .\n?x0 wdt:P162|wdt:P272 wd:Q38222 .\n?x0 wdt:P58 wd:Q38222\n}LIMIT 1",
        "questionWithBrackets": "What did [George Lucas] executive produce , write , and produce"
    },
    {
        "questionIdx": 145570,
        "questionPatternModEntities": "What did M0 direct , produce , and write",
        "questionTemplate": "What did [entity] [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M0 .\n?x0 P2 M0\n}",
        "recursionDepth": 24,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 wd:Q882 .\n?x0 wdt:P162|wdt:P272 wd:Q882 .\n?x0 wdt:P58 wd:Q882\n}LIMIT 1",
        "questionWithBrackets": "What did [Charlie Chaplin] direct , produce , and write"
    },
    {
        "questionIdx": 145614,
        "questionPatternModEntities": "What did M0 executive produce and M1 's child executive produce",
        "questionTemplate": "What did [entity] [VP_SIMPLE] and [entity] 's [ROLE_SIMPLE] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P0 M0 .\n?x1 P1 M1\n}",
        "recursionDepth": 27,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1431 ?x1 .\n?x0 wdt:P1431 wd:Q544560 .\n?x1 wdt:P749 wd:Q54829\n}",
        "questionWithBrackets": "What did [Televisi\u00f3n Espa\u00f1ola] executive produce and [Radiotelevisi\u00f3n Espa\u00f1ola] 's child executive produce"
    },
    {
        "questionIdx": 145664,
        "questionPatternModEntities": "What did M0 executive produce , write , and edit",
        "questionTemplate": "What did [entity] [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M0 .\n?x0 P2 M0\n}",
        "recursionDepth": 25,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1040 wd:Q55400 .\n?x0 wdt:P1431 wd:Q55400 .\n?x0 wdt:P58 wd:Q55400\n}LIMIT 1",
        "questionWithBrackets": "What did [Hayao Miyazaki] executive produce , write , and edit"
    },
    {
        "questionIdx": 145692,
        "questionPatternModEntities": "What did M2 's parent distribute and M0 and M1 distribute",
        "questionTemplate": "What did [entity] 's [ROLE_SIMPLE] [VP_SIMPLE] and [entity] and [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x1 P1 M2\n}",
        "recursionDepth": 29,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P750 ?x1 .\n?x0 wdt:P750 wd:Q312 .\n?x0 wdt:P750 wd:Q337535 .\n?x1 wdt:P40|wdt:P355 wd:Q105810600\n}",
        "questionWithBrackets": "What did [Apple Sales International] 's parent distribute and [Apple Inc.] and [Steam] distribute"
    },
    {
        "questionIdx": 145714,
        "questionPatternModEntities": "What did M1 's female parent edit and produce",
        "questionTemplate": "What did [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] [VP_SIMPLE] and [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x1 P2 M0 .\n?x1 P3 M1\n}",
        "recursionDepth": 27,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1040 ?x1 .\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x1 wdt:P40|wdt:P355 wd:Q573338 .\n?x1 wdt:P21 wd:Q6581072\n}LIMIT 1",
        "questionWithBrackets": "What did [Anthony Hickox] 's female parent edit and produce"
    },
    {
        "questionIdx": 145731,
        "questionPatternModEntities": "What did M0 's sibling direct , write , and edit",
        "questionTemplate": "What did [entity] 's [ROLE_SIMPLE] [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x1 P3 M0 .\nFILTER ( ?x1 != M0 )\n}",
        "recursionDepth": 28,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 ?x1 .\n?x0 wdt:P1040 ?x1 .\n?x0 wdt:P58 ?x1 .\n?x1 wdt:P3373 wd:Q469204 .\nFILTER ( ?x1 != wd:Q469204 )\n}LIMIT 1",
        "questionWithBrackets": "What did [Anne Spielberg] 's sibling direct , write , and edit"
    },
    {
        "questionIdx": 145760,
        "questionPatternModEntities": "What did M2 direct , M0 edit , and M1 edit",
        "questionTemplate": "What did [entity] [VP_SIMPLE] , [entity] [VP_SIMPLE] , and [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P1 M2\n}",
        "recursionDepth": 30,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 wd:Q3177517 .\n?x0 wdt:P1040 wd:Q3137 .\n?x0 wdt:P1040 wd:Q360002\n}",
        "questionWithBrackets": "What did [Jerry Zaks] direct , [Jim Clark] edit , and [Jim Clark] edit"
    },
    {
        "questionIdx": 145761,
        "questionPatternModEntities": "What did M0 , M1 , and M2 direct and edit",
        "questionTemplate": "What did [entity] , [entity] , and [entity] [VP_SIMPLE] and [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P1 M0 .\n?x0 P1 M1 .\n?x0 P1 M2\n}",
        "recursionDepth": 25,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 wd:Q562108 .\n?x0 wdt:P57 wd:Q1687239 .\n?x0 wdt:P57 wd:Q35979475 .\n?x0 wdt:P1040 wd:Q562108 .\n?x0 wdt:P1040 wd:Q1687239 .\n?x0 wdt:P1040 wd:Q35979475\n}",
        "questionWithBrackets": "What did [J\u00f8rgen Leth] , [Ole John] , and [Jens J\u00f8rgen Thorsen] direct and edit"
    },
    {
        "questionIdx": 145762,
        "questionPatternModEntities": "What did M0 , M1 , M2 , and M3 edit , direct , and write",
        "questionTemplate": "What did [entity] , [entity] , [entity] , and [entity] [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P0 M3 .\n?x0 P1 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\n?x0 P1 M3 .\n?x0 P2 M0 .\n?x0 P2 M1 .\n?x0 P2 M2 .\n?x0 P2 M3\n}",
        "recursionDepth": 34,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 wd:Q5836844 .\n?x0 wdt:P57 wd:Q5658534 .\n?x0 wdt:P57 wd:Q4022902 .\n?x0 wdt:P57 wd:Q4023328 .\n?x0 wdt:P1040 wd:Q5836844 .\n?x0 wdt:P1040 wd:Q5658534 .\n?x0 wdt:P1040 wd:Q4022902 .\n?x0 wdt:P1040 wd:Q4023328 .\n?x0 wdt:P58 wd:Q5836844 .\n?x0 wdt:P58 wd:Q5658534 .\n?x0 wdt:P58 wd:Q4022902 .\n?x0 wdt:P58 wd:Q4023328\n}",
        "questionWithBrackets": "What did [Ernesto D\u00edaz Espinoza] , [Yoshihiro Nishimura] , [Y\u016bdai Yamaguchi] , and [Adri\u00e1n Garc\u00eda Bogliano] edit , direct , and write"
    },
    {
        "questionIdx": 145770,
        "questionPatternModEntities": "What did M0 found , M3 's child found , and M1 and M2 found",
        "questionTemplate": "What did [entity] [VP_SIMPLE] , [entity] 's [ROLE_SIMPLE] [VP_SIMPLE] , and [entity] and [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x1 P1 M3\n}",
        "recursionDepth": 38,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P112 ?x1 .\n?x0 wdt:P112 wd:Q56760250 .\n?x0 wdt:P112 wd:Q3487749 .\n?x0 wdt:P112 wd:Q95 .\n?x1 wdt:P749 wd:Q20800404\n}",
        "questionWithBrackets": "What did [Google] found , [Alphabet Inc.] 's child found , and [SCPP] and [Sony Music] found"
    },
    {
        "questionIdx": 145774,
        "questionPatternModEntities": "What did M0 executive produce , M4 edit , M2 and M3 write , and M1 executive produce",
        "questionTemplate": "What did [entity] [VP_SIMPLE] , [entity] [VP_SIMPLE] , [entity] and [entity] [VP_SIMPLE] , and [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P1 M2 .\n?x0 P1 M3 .\n?x0 P2 M4\n}",
        "recursionDepth": 45,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1040 wd:Q1969707 .\n?x0 wdt:P1431 wd:Q75079 .\n?x0 wdt:P1431 wd:Q1900360 .\n?x0 wdt:P58 wd:Q34660 .\n?x0 wdt:P58 wd:Q362061\n}",
        "questionWithBrackets": "What did [Chris Columbus] executive produce , [Richard Francis-Bruce] edit , [J. K. Rowling] and [Steve Kloves] write , and [Mark Radcliffe] executive produce"
    },
    {
        "questionIdx": 145784,
        "questionPatternModEntities": "What did M4 and M5 write , M0 , M1 , M2 , and M3 executive produce , and M6 produce",
        "questionTemplate": "What did [entity] and [entity] [VP_SIMPLE] , [entity] , [entity] , [entity] , and [entity] [VP_SIMPLE] , and [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P0 M3 .\n?x0 P1 M4 .\n?x0 P1 M5 .\n?x0 P2 M6\n}",
        "recursionDepth": 45,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1431 wd:Q75079 .\n?x0 wdt:P1431 wd:Q3041233 .\n?x0 wdt:P1431 wd:Q1900360 .\n?x0 wdt:P1431 wd:Q11778321 .\n?x0 wdt:P162|wdt:P272 wd:Q319986 .\n?x0 wdt:P58 wd:Q362061 .\n?x0 wdt:P58 wd:Q34660\n}",
        "questionWithBrackets": "What did [Steve Kloves] and [J. K. Rowling] write , [Chris Columbus] , [Duncan Henderson] , [Mark Radcliffe] , and [Michael Barnathan] executive produce , and [David Heyman] produce"
    },
    {
        "questionIdx": 145788,
        "questionPatternModEntities": "What did M1 's Dutch sibling executive produce and M0 executive produce",
        "questionTemplate": "What did [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] [VP_SIMPLE] and [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P0 M0 .\n?x1 P1 M1 .\n?x1 P2 M2 .\nFILTER ( ?x1 != M1 )\n}",
        "recursionDepth": 32,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1431 ?x1 .\n?x0 wdt:P1431 wd:Q470847 .\n?x1 wdt:P27 wd:Q29999 .\n?x1 wdt:P3373 wd:Q469514 .\nFILTER ( ?x1 != wd:Q469514 )\n}",
        "questionWithBrackets": "What did [Linda de Mol] 's Dutch sibling executive produce and [John de Mol] executive produce"
    },
    {
        "questionIdx": 145795,
        "questionPatternModEntities": "What did M0 executive produce , produce , and write",
        "questionTemplate": "What did [entity] [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M0 .\n?x0 P2 M0\n}",
        "recursionDepth": 25,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1431 wd:Q2001 .\n?x0 wdt:P162|wdt:P272 wd:Q2001 .\n?x0 wdt:P58 wd:Q2001\n}LIMIT 1",
        "questionWithBrackets": "What did [Stanley Kubrick] executive produce , produce , and write"
    },
    {
        "questionIdx": 145800,
        "questionPatternModEntities": "What did M0 and M1 executive produce , M2 executive produce , M3 executive produce , and M4 and M5 write",
        "questionTemplate": "What did [entity] and [entity] [VP_SIMPLE] , [entity] [VP_SIMPLE] , [entity] [VP_SIMPLE] , and [entity] and [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P0 M3 .\n?x0 P1 M4 .\n?x0 P1 M5\n}",
        "recursionDepth": 50,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1431 wd:Q75079 .\n?x0 wdt:P1431 wd:Q1900360 .\n?x0 wdt:P1431 wd:Q3041233 .\n?x0 wdt:P1431 wd:Q11778321 .\n?x0 wdt:P58 wd:Q362061 .\n?x0 wdt:P58 wd:Q34660\n}",
        "questionWithBrackets": "What did [Chris Columbus] and [Mark Radcliffe] executive produce , [Duncan Henderson] executive produce , [Michael Barnathan] executive produce , and [Steve Kloves] and [J. K. Rowling] write"
    },
    {
        "questionIdx": 145806,
        "questionPatternModEntities": "What did M0 edit , write , and produce",
        "questionTemplate": "What did [entity] [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M0 .\n?x0 P2 M0\n}",
        "recursionDepth": 24,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1040 wd:Q8006 .\n?x0 wdt:P162|wdt:P272 wd:Q8006 .\n?x0 wdt:P58 wd:Q8006\n}LIMIT 1",
        "questionWithBrackets": "What did [Akira Kurosawa] edit , write , and produce"
    },
    {
        "questionIdx": 145808,
        "questionPatternModEntities": "What did M4 write , M0 , M1 , M2 , and M3 executive produce , and M5 and M6 write",
        "questionTemplate": "What did [entity] [VP_SIMPLE] , [entity] , [entity] , [entity] , and [entity] [VP_SIMPLE] , and [entity] and [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P0 M3 .\n?x0 P1 M4 .\n?x0 P1 M5 .\n?x0 P1 M6\n}",
        "recursionDepth": 45,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1431 wd:Q42869 .\n?x0 wdt:P1431 wd:Q19878370 .\n?x0 wdt:P1431 wd:Q24809566 .\n?x0 wdt:P1431 wd:Q24809564 .\n?x0 wdt:P58 wd:Q21694263 .\n?x0 wdt:P58 wd:Q5961308 .\n?x0 wdt:P58 wd:Q24817952\n}",
        "questionWithBrackets": "What did [Matt Lopez] write , [Todd Garner] , [Nicolas Cage] , [Mike Stenson] , and [Chad Oman] executive produce , and [Carlo Bernard] and [Doug Miro] write"
    },
    {
        "questionIdx": 145819,
        "questionPatternModEntities": "What did M3 edit , M0 executive produce , M4 direct , and M1 and M2 write",
        "questionTemplate": "What did [entity] [VP_SIMPLE] , [entity] [VP_SIMPLE] , [entity] [VP_SIMPLE] , and [entity] and [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\n?x0 P2 M3 .\n?x0 P3 M4\n}",
        "recursionDepth": 44,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 wd:Q2527608 .\n?x0 wdt:P1040 wd:Q17141437 .\n?x0 wdt:P1431 wd:Q8877 .\n?x0 wdt:P58 wd:Q5362114 .\n?x0 wdt:P58 wd:Q7176207\n}",
        "questionWithBrackets": "What did [Sidney Wolinsky] edit , [Steven Spielberg] executive produce , [Dan Attias] direct , and [Peter Ocko] and [Eliza Clark] write"
    },
    {
        "questionIdx": 145875,
        "questionPatternModEntities": "What did M0 's spouse produce and write",
        "questionTemplate": "What did [entity] 's [ROLE_SIMPLE] [VP_SIMPLE] and [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x1 P2 M0 .\nFILTER ( ?x1 != M0 )\n}",
        "recursionDepth": 22,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x0 wdt:P58 ?x1 .\n?x1 wdt:P26 wd:Q95050 .\nFILTER ( ?x1 != wd:Q95050 )\n}LIMIT 1",
        "questionWithBrackets": "What did [Paulette Goddard] 's spouse produce and write"
    },
    {
        "questionIdx": 145887,
        "questionPatternModEntities": "What did M0 's parent write , direct , edit , and produce",
        "questionTemplate": "What did [entity] 's [ROLE_SIMPLE] [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x0 P3 ?x1 .\n?x1 P4 M0\n}",
        "recursionDepth": 34,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 ?x1 .\n?x0 wdt:P1040 ?x1 .\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x0 wdt:P58 ?x1 .\n?x1 wdt:P40|wdt:P355 wd:Q4739681\n}LIMIT 1",
        "questionWithBrackets": "What did [Amanda Lucas] 's parent write , direct , edit , and produce"
    },
    {
        "questionIdx": 145896,
        "questionPatternModEntities": "What did M1 's male parent executive produce and direct",
        "questionTemplate": "What did [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] [VP_SIMPLE] and [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x1 P2 M0 .\n?x1 P3 M1\n}",
        "recursionDepth": 28,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 ?x1 .\n?x0 wdt:P1431 ?x1 .\n?x1 wdt:P40|wdt:P355 wd:Q271162 .\n?x1 wdt:P21 wd:Q6581097\n}LIMIT 1",
        "questionWithBrackets": "What did [Jennifer Lynch] 's male parent executive produce and direct"
    },
    {
        "questionIdx": 145950,
        "questionPatternModEntities": "What did M0 's female employee found",
        "questionTemplate": "What did [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x1 P1 M0 .\n?x1 P2 M1\n}",
        "recursionDepth": 19,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P112 ?x1 .\n?x1 wdt:P108 wd:Q26882567 .\n?x1 wdt:P21 wd:Q6581072\n}LIMIT 1",
        "questionWithBrackets": "What did [No label defined] 's female employee found"
    },
    {
        "questionIdx": 145976,
        "questionPatternModEntities": "What did M0 executive produce , M1 and M2 write , M4 direct , and M3 produce",
        "questionTemplate": "What did [entity] [VP_SIMPLE] , [entity] and [entity] [VP_SIMPLE] , [entity] [VP_SIMPLE] , and [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\n?x0 P2 M3 .\n?x0 P3 M4\n}",
        "recursionDepth": 44,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 wd:Q323076 .\n?x0 wdt:P1431 wd:Q8877 .\n?x0 wdt:P162|wdt:P272 wd:Q187364 .\n?x0 wdt:P58 wd:Q1159073 .\n?x0 wdt:P58 wd:Q325130\n}",
        "questionWithBrackets": "What did [Steven Spielberg] executive produce , [Dan Gilroy] and [Richard Matheson] write , [Shawn Levy] direct , and [Robert Zemeckis] produce"
    },
    {
        "questionIdx": 146001,
        "questionPatternModEntities": "What did M0 's parent write , edit , direct , produce , and executive produce",
        "questionTemplate": "What did [entity] 's [ROLE_SIMPLE] [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x0 P3 ?x1 .\n?x0 P4 ?x1 .\n?x1 P5 M0\n}",
        "recursionDepth": 41,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 ?x1 .\n?x0 wdt:P1040 ?x1 .\n?x0 wdt:P1431 ?x1 .\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x0 wdt:P58 ?x1 .\n?x1 wdt:P40|wdt:P355 wd:Q1620638\n}LIMIT 1",
        "questionWithBrackets": "What did [Hisao Kurosawa] 's parent write , edit , direct , produce , and executive produce"
    },
    {
        "questionIdx": 146056,
        "questionPatternModEntities": "What did M0 produce and write",
        "questionTemplate": "What did [entity] [VP_SIMPLE] and [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M0\n}",
        "recursionDepth": 18,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P162|wdt:P272 wd:Q882 .\n?x0 wdt:P58 wd:Q882\n}LIMIT 1",
        "questionWithBrackets": "What did [Charlie Chaplin] produce and write"
    },
    {
        "questionIdx": 146057,
        "questionPatternModEntities": "What did M0 's sibling edit , write , executive produce , direct , and produce",
        "questionTemplate": "What did [entity] 's [ROLE_SIMPLE] [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x0 P3 ?x1 .\n?x0 P4 ?x1 .\n?x1 P5 M0 .\nFILTER ( ?x1 != M0 )\n}",
        "recursionDepth": 41,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 ?x1 .\n?x0 wdt:P1040 ?x1 .\n?x0 wdt:P1431 ?x1 .\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x0 wdt:P58 ?x1 .\n?x1 wdt:P3373 wd:Q28370409 .\nFILTER ( ?x1 != wd:Q28370409 )\n}LIMIT 1",
        "questionWithBrackets": "What did [Everton Rocca] 's sibling edit , write , executive produce , direct , and produce"
    },
    {
        "questionIdx": 146058,
        "questionPatternModEntities": "What did M0 's sibling write , edit , executive produce , produce , and direct",
        "questionTemplate": "What did [entity] 's [ROLE_SIMPLE] [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x0 P3 ?x1 .\n?x0 P4 ?x1 .\n?x1 P5 M0 .\nFILTER ( ?x1 != M0 )\n}",
        "recursionDepth": 41,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 ?x1 .\n?x0 wdt:P1040 ?x1 .\n?x0 wdt:P1431 ?x1 .\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x0 wdt:P58 ?x1 .\n?x1 wdt:P3373 wd:Q28370409 .\nFILTER ( ?x1 != wd:Q28370409 )\n}LIMIT 1",
        "questionWithBrackets": "What did [Everton Rocca] 's sibling write , edit , executive produce , produce , and direct"
    },
    {
        "questionIdx": 146063,
        "questionPatternModEntities": "What did M3 direct , M0 and M1 executive produce , M2 write , and M4 direct",
        "questionTemplate": "What did [entity] [VP_SIMPLE] , [entity] and [entity] [VP_SIMPLE] , [entity] [VP_SIMPLE] , and [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P1 M2 .\n?x0 P2 M3 .\n?x0 P2 M4\n}",
        "recursionDepth": 44,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 wd:Q3176716 .\n?x0 wdt:P57 wd:Q89552 .\n?x0 wdt:P1431 wd:Q40715 .\n?x0 wdt:P1431 wd:Q19479569 .\n?x0 wdt:P58 wd:Q919229\n}",
        "questionWithBrackets": "What did [Danny Nucci] direct , [Jennifer Lopez] and [Brad Bredeweg] executive produce , [Peter Paige] write , and [Jeff Melman] direct"
    },
    {
        "questionIdx": 146064,
        "questionPatternModEntities": "What did M1 write , M2 direct , M3 direct , and M0 executive produce",
        "questionTemplate": "What did [entity] [VP_SIMPLE] , [entity] [VP_SIMPLE] , [entity] [VP_SIMPLE] , and [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P2 M2 .\n?x0 P2 M3\n}",
        "recursionDepth": 40,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 wd:Q1352043 .\n?x0 wdt:P57 wd:Q56014 .\n?x0 wdt:P1431 wd:Q72291 .\n?x0 wdt:P58 wd:Q436164\n}",
        "questionWithBrackets": "What did [Jane Murfin] write , [George Fitzmaurice] direct , [George Cukor] direct , and [David O. Selznick] executive produce"
    },
    {
        "questionIdx": 146071,
        "questionPatternModEntities": "What did M0 executive produce and M1 's sibling direct",
        "questionTemplate": "What did [entity] [VP_SIMPLE] and [entity] 's [ROLE_SIMPLE] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 ?x1 .\n?x1 P2 M1 .\nFILTER ( ?x1 != M1 )\n}",
        "recursionDepth": 26,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 ?x1 .\n?x0 wdt:P1431 wd:Q7345 .\n?x1 wdt:P3373 wd:Q1101612 .\nFILTER ( ?x1 != wd:Q1101612 )\n}",
        "questionWithBrackets": "What did [Dan Brown] executive produce and [Clint Howard] 's sibling direct"
    },
    {
        "questionIdx": 146080,
        "questionPatternModEntities": "What did M0 , M1 , M2 , and M3 write , edit , and direct",
        "questionTemplate": "What did [entity] , [entity] , [entity] , and [entity] [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P0 M3 .\n?x0 P1 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\n?x0 P1 M3 .\n?x0 P2 M0 .\n?x0 P2 M1 .\n?x0 P2 M2 .\n?x0 P2 M3\n}",
        "recursionDepth": 34,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 wd:Q4022902 .\n?x0 wdt:P57 wd:Q5658534 .\n?x0 wdt:P57 wd:Q5836844 .\n?x0 wdt:P57 wd:Q4023328 .\n?x0 wdt:P1040 wd:Q4022902 .\n?x0 wdt:P1040 wd:Q5658534 .\n?x0 wdt:P1040 wd:Q5836844 .\n?x0 wdt:P1040 wd:Q4023328 .\n?x0 wdt:P58 wd:Q4022902 .\n?x0 wdt:P58 wd:Q5658534 .\n?x0 wdt:P58 wd:Q5836844 .\n?x0 wdt:P58 wd:Q4023328\n}",
        "questionWithBrackets": "What did [Yoshihiro Nishimura] , [Ernesto D\u00edaz Espinoza] , [Adri\u00e1n Garc\u00eda Bogliano] , and [Y\u016bdai Yamaguchi] write , edit , and direct"
    },
    {
        "questionIdx": 146081,
        "questionPatternModEntities": "What did M0 , M1 , M2 , and M3 direct , write , and edit",
        "questionTemplate": "What did [entity] , [entity] , [entity] , and [entity] [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P0 M3 .\n?x0 P1 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\n?x0 P1 M3 .\n?x0 P2 M0 .\n?x0 P2 M1 .\n?x0 P2 M2 .\n?x0 P2 M3\n}",
        "recursionDepth": 34,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 wd:Q4022902 .\n?x0 wdt:P57 wd:Q4023328 .\n?x0 wdt:P57 wd:Q5658534 .\n?x0 wdt:P57 wd:Q5836844 .\n?x0 wdt:P1040 wd:Q4022902 .\n?x0 wdt:P1040 wd:Q4023328 .\n?x0 wdt:P1040 wd:Q5658534 .\n?x0 wdt:P1040 wd:Q5836844 .\n?x0 wdt:P58 wd:Q4022902 .\n?x0 wdt:P58 wd:Q4023328 .\n?x0 wdt:P58 wd:Q5658534 .\n?x0 wdt:P58 wd:Q5836844\n}",
        "questionWithBrackets": "What did [Yoshihiro Nishimura] , [Y\u016bdai Yamaguchi] , [Adri\u00e1n Garc\u00eda Bogliano] , and [Ernesto D\u00edaz Espinoza] direct , write , and edit"
    },
    {
        "questionIdx": 146084,
        "questionPatternModEntities": "What did M3 and M4 direct , M2 produce , M0 and M1 executive produce , and M5 direct",
        "questionTemplate": "What did [entity] and [entity] [VP_SIMPLE] , [entity] [VP_SIMPLE] , [entity] and [entity] [VP_SIMPLE] , and [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P1 M2 .\n?x0 P2 M3 .\n?x0 P2 M4 .\n?x0 P2 M5\n}",
        "recursionDepth": 48,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 wd:Q7117319 .\n?x0 wdt:P57 wd:Q360477 .\n?x0 wdt:P57 wd:Q253977 .\n?x0 wdt:P1431 wd:Q8877 .\n?x0 wdt:P1431 wd:Q362793 .\n?x0 wdt:P162|wdt:P272 wd:Q63656290\n}",
        "questionWithBrackets": "What did [Peter Weller] and [Roxann Dawson] direct , [Randy Sutter] produce , [Jack Bender] and [Steven Spielberg] executive produce , and [P. J. Pesce] direct"
    },
    {
        "questionIdx": 146095,
        "questionPatternModEntities": "What did M0 's spouse executive produce , direct , and write",
        "questionTemplate": "What did [entity] 's [ROLE_SIMPLE] [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x1 P3 M0 .\nFILTER ( ?x1 != M0 )\n}",
        "recursionDepth": 29,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 ?x1 .\n?x0 wdt:P1431 ?x1 .\n?x0 wdt:P58 ?x1 .\n?x1 wdt:P26 wd:Q717669 .\nFILTER ( ?x1 != wd:Q717669 )\n}LIMIT 1",
        "questionWithBrackets": "What did [Lin Feng-jiao] 's spouse executive produce , direct , and write"
    },
    {
        "questionIdx": 146103,
        "questionPatternModEntities": "What did M1 direct and M0 edit",
        "questionTemplate": "What did [entity] [VP_SIMPLE] and [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1\n}",
        "recursionDepth": 21,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 wd:Q150840 .\n?x0 wdt:P1040 wd:Q8006\n}",
        "questionWithBrackets": "What did [Ishir\u014d Honda] direct and [Akira Kurosawa] edit"
    },
    {
        "questionIdx": 146107,
        "questionPatternModEntities": "What did M3 and M4 edit , M0 , M1 , and M2 write , and a sibling of M5 executive produce",
        "questionTemplate": "What did [entity] and [entity] [VP_SIMPLE] , [entity] , [entity] , and [entity] [VP_SIMPLE] , and a [ROLE_SIMPLE] of [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\n?x0 P2 M3 .\n?x0 P2 M4 .\n?x1 P3 M5 .\nFILTER ( ?x1 != M5 )\n}",
        "recursionDepth": 48,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1040 wd:Q17141437 .\n?x0 wdt:P1040 wd:Q18674647 .\n?x0 wdt:P1431 ?x1 .\n?x0 wdt:P58 wd:Q2333174 .\n?x0 wdt:P58 wd:Q5181436 .\n?x0 wdt:P58 wd:Q5362114 .\n?x1 wdt:P3373 wd:Q469204 .\nFILTER ( ?x1 != wd:Q469204 )\n}",
        "questionWithBrackets": "What did [Augie Hess] and [Sidney Wolinsky] edit , [Leslie Bohem] , [Eliza Clark] , and [Craig Shapiro] write , and a sibling of [Anne Spielberg] executive produce"
    },
    {
        "questionIdx": 146109,
        "questionPatternModEntities": "What did M0 write and M1 produce",
        "questionTemplate": "What did [entity] [VP_SIMPLE] and [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1\n}",
        "recursionDepth": 21,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P162|wdt:P272 wd:Q1188369 .\n?x0 wdt:P58 wd:Q882\n}",
        "questionWithBrackets": "What did [Charlie Chaplin] write and [First National] produce"
    },
    {
        "questionIdx": 146112,
        "questionPatternModEntities": "What did M2 's female spouse write and M0 executive produce",
        "questionTemplate": "What did [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] [VP_SIMPLE] and [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 ?x1 .\n?x1 P2 M1 .\n?x1 P3 M2 .\nFILTER ( ?x1 != M2 )\n}",
        "recursionDepth": 31,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1431 wd:Q1744 .\n?x0 wdt:P58 ?x1 .\n?x1 wdt:P21 wd:Q6581072 .\n?x1 wdt:P26 wd:Q44221 .\nFILTER ( ?x1 != wd:Q44221 )\n}",
        "questionWithBrackets": "What did [Sean Penn] 's female spouse write and [Madonna] executive produce"
    },
    {
        "questionIdx": 146113,
        "questionPatternModEntities": "What did M1 's parent direct and M0 edit",
        "questionTemplate": "What did [entity] 's [ROLE_SIMPLE] [VP_SIMPLE] and [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 ?x1 .\n?x1 P2 M1\n}",
        "recursionDepth": 25,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 ?x1 .\n?x0 wdt:P1040 wd:Q28028 .\n?x1 wdt:P40|wdt:P355 wd:Q15142000\n}",
        "questionWithBrackets": "What did [Jon\u00e1s Cuar\u00f3n] 's parent direct and [Alfonso Cuar\u00f3n] edit"
    },
    {
        "questionIdx": 146116,
        "questionPatternModEntities": "What did M0 edit and M1 's spouse edit",
        "questionTemplate": "What did [entity] [VP_SIMPLE] and [entity] 's [ROLE_SIMPLE] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P0 M0 .\n?x1 P1 M1 .\nFILTER ( ?x1 != M1 )\n}",
        "recursionDepth": 25,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1040 ?x1 .\n?x0 wdt:P1040 wd:Q8003 .\n?x1 wdt:P26 wd:Q22247817 .\nFILTER ( ?x1 != wd:Q22247817 )\n}",
        "questionWithBrackets": "What did [Sergei Eisenstein] edit and [Pera Atasheva] 's spouse edit"
    },
    {
        "questionIdx": 146117,
        "questionPatternModEntities": "What did M0 's spouse 's spouse direct and produce",
        "questionTemplate": "What did [entity] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE] [VP_SIMPLE] and [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x1 P2 ?x2 .\n?x2 P2 M0 .\nFILTER ( ?x1 != ?x2 ) .\nFILTER ( ?x2 != M0 )\n}",
        "recursionDepth": 26,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 ?x1 .\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x1 wdt:P26 ?x2 .\n?x2 wdt:P26 wd:Q392 .\nFILTER ( ?x1 != ?x2 ) .\nFILTER ( ?x2 != wd:Q392 )\n}LIMIT 1",
        "questionWithBrackets": "What did [Bob Dylan] 's spouse 's spouse direct and produce"
    },
    {
        "questionIdx": 146119,
        "questionPatternModEntities": "What did M1 's child executive produce and M0 edit",
        "questionTemplate": "What did [entity] 's [ROLE_SIMPLE] [VP_SIMPLE] and [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 M0 .\n?x1 P2 M1\n}",
        "recursionDepth": 26,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1040 wd:Q18042410 .\n?x0 wdt:P1431 ?x1 .\n?x1 wdt:P749 wd:Q20937928\n}",
        "questionWithBrackets": "What did [Moravia Steel] 's child executive produce and [Ji\u0159ina Luke\u0161ov\u00e1] edit"
    },
    {
        "questionIdx": 146136,
        "questionPatternModEntities": "What did M0 , M1 , and M2 write and produce",
        "questionTemplate": "What did [entity] , [entity] , and [entity] [VP_SIMPLE] and [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P1 M0 .\n?x0 P1 M1 .\n?x0 P1 M2\n}",
        "recursionDepth": 25,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P162|wdt:P272 wd:Q3772 .\n?x0 wdt:P162|wdt:P272 wd:Q47284 .\n?x0 wdt:P162|wdt:P272 wd:Q358714 .\n?x0 wdt:P58 wd:Q3772 .\n?x0 wdt:P58 wd:Q47284 .\n?x0 wdt:P58 wd:Q358714\n}",
        "questionWithBrackets": "What did [Eli Roth] , [Robert Rodriguez] , and [Quentin Tarantino] write and produce"
    },
    {
        "questionIdx": 146138,
        "questionPatternModEntities": "What did M4 produce , M0 executive produce , M3 write , and M1 and M2 executive produce",
        "questionTemplate": "What did [entity] [VP_SIMPLE] , [entity] [VP_SIMPLE] , [entity] [VP_SIMPLE] , and [entity] and [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P1 M3 .\n?x0 P2 M4\n}",
        "recursionDepth": 45,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1431 wd:Q75079 .\n?x0 wdt:P1431 wd:Q975579 .\n?x0 wdt:P1431 wd:Q1900360 .\n?x0 wdt:P162|wdt:P272 wd:Q319986 .\n?x0 wdt:P58 wd:Q362061\n}",
        "questionWithBrackets": "What did [David Heyman] produce , [David Barron] executive produce , [Steve Kloves] write , and [Mark Radcliffe] and [Chris Columbus] executive produce"
    },
    {
        "questionIdx": 146146,
        "questionPatternModEntities": "What did M1 's male parent edit and executive produce",
        "questionTemplate": "What did [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] [VP_SIMPLE] and [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x1 P2 M0 .\n?x1 P3 M1\n}",
        "recursionDepth": 28,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1040 ?x1 .\n?x0 wdt:P1431 ?x1 .\n?x1 wdt:P40|wdt:P355 wd:Q1620638 .\n?x1 wdt:P21 wd:Q6581097\n}LIMIT 1",
        "questionWithBrackets": "What did [Hisao Kurosawa] 's male parent edit and executive produce"
    },
    {
        "questionIdx": 146153,
        "questionPatternModEntities": "What did M1 write , M0 executive produce , M2 write , and M3 produce",
        "questionTemplate": "What did [entity] [VP_SIMPLE] , [entity] [VP_SIMPLE] , [entity] [VP_SIMPLE] , and [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\n?x0 P2 M3\n}",
        "recursionDepth": 40,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1431 wd:Q72614 .\n?x0 wdt:P162|wdt:P272 wd:Q126399 .\n?x0 wdt:P58 wd:Q1368557 .\n?x0 wdt:P58 wd:Q3029344\n}",
        "questionWithBrackets": "What did [Leo Rosten] write , [Jack Warner] executive produce , [Vladimir Solomonovich Pozner] write , and [Warner Bros.] produce"
    },
    {
        "questionIdx": 146189,
        "questionPatternModEntities": "What did M0 's spouse produce , edit , and direct",
        "questionTemplate": "What did [entity] 's [ROLE_SIMPLE] [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x1 P3 M0 .\nFILTER ( ?x1 != M0 )\n}",
        "recursionDepth": 28,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 ?x1 .\n?x0 wdt:P1040 ?x1 .\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x1 wdt:P26 wd:Q3032150 .\nFILTER ( ?x1 != wd:Q3032150 )\n}LIMIT 1",
        "questionWithBrackets": "What did [Y\u014dko Yaguchi] 's spouse produce , edit , and direct"
    },
    {
        "questionIdx": 146193,
        "questionPatternModEntities": "What did M0 executive produce , M1 executive produce , and M2 produce",
        "questionTemplate": "What did [entity] [VP_SIMPLE] , [entity] [VP_SIMPLE] , and [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P1 M2\n}",
        "recursionDepth": 32,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1431 wd:Q75079 .\n?x0 wdt:P1431 wd:Q975579 .\n?x0 wdt:P162|wdt:P272 wd:Q319986\n}",
        "questionWithBrackets": "What did [David Barron] executive produce , [Chris Columbus] executive produce , and [David Heyman] produce"
    },
    {
        "questionIdx": 146214,
        "questionPatternModEntities": "What did M0 's parent executive produce",
        "questionTemplate": "What did [entity] 's [ROLE_SIMPLE] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x1 P1 M0\n}",
        "recursionDepth": 15,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1431 ?x1 .\n?x1 wdt:P40|wdt:P355 wd:Q201739\n}LIMIT 1",
        "questionWithBrackets": "What did [Mary McCartney] 's parent executive produce"
    },
    {
        "questionIdx": 146251,
        "questionPatternModEntities": "What did M0 found and M1 's parent found",
        "questionTemplate": "What did [entity] [VP_SIMPLE] and [entity] 's [ROLE_SIMPLE] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P0 M0 .\n?x1 P1 M1\n}",
        "recursionDepth": 25,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P112 ?x1 .\n?x0 wdt:P112 wd:Q444 .\n?x1 wdt:P40|wdt:P355 wd:Q1392390\n}",
        "questionWithBrackets": "What did [Lech Wa\u0142\u0119sa] found and [Jaros\u0142aw Wa\u0142\u0119sa] 's parent found"
    },
    {
        "questionIdx": 146256,
        "questionPatternModEntities": "What did M0 found and M2 's American spouse found",
        "questionTemplate": "What did [entity] [VP_SIMPLE] and [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P0 M0 .\n?x1 P1 M1 .\n?x1 P2 M2 .\nFILTER ( ?x1 != M2 )\n}",
        "recursionDepth": 30,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P112 ?x1 .\n?x0 wdt:P112 wd:Q180 .\n?x1 wdt:P27 wd:Q30 .\n?x1 wdt:P26 wd:Q13564310 .\nFILTER ( ?x1 != wd:Q13564310 )\n}",
        "questionWithBrackets": "What did [Wikimedia Foundation] found and [Kate Garvey] 's American spouse found"
    },
    {
        "questionIdx": 146276,
        "questionPatternModEntities": "What did M1 's parent executive produce , M2 's spouse direct , and M0 direct",
        "questionTemplate": "What did [entity] 's [ROLE_SIMPLE] [VP_SIMPLE] , [entity] 's [ROLE_SIMPLE] [VP_SIMPLE] , and [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x2 .\n?x0 P1 M0 .\n?x1 P2 M1 .\n?x2 P3 M2 .\nFILTER ( ?x2 != M2 )\n}",
        "recursionDepth": 39,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 ?x1 .\n?x0 wdt:P57 wd:Q253977 .\n?x0 wdt:P1431 ?x2 .\n?x1 wdt:P26 wd:Q544756 .\n?x2 wdt:P40|wdt:P355 wd:Q7425114 .\nFILTER ( ?x1 != wd:Q544756 )\n}",
        "questionWithBrackets": "What did [Sasha Spielberg] 's parent executive produce , [Casey Biggs] 's spouse direct , and [Roxann Dawson] direct"
    },
    {
        "questionIdx": 146290,
        "questionPatternModEntities": "What did M1 's male parent executive produce and edit",
        "questionTemplate": "What did [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] [VP_SIMPLE] and [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x1 P2 M0 .\n?x1 P3 M1\n}",
        "recursionDepth": 28,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1040 ?x1 .\n?x0 wdt:P1431 ?x1 .\n?x1 wdt:P40|wdt:P355 wd:Q459078 .\n?x1 wdt:P21 wd:Q6581097\n}LIMIT 1",
        "questionWithBrackets": "What did [Gor\u014d Miyazaki] 's male parent executive produce and edit"
    },
    {
        "questionIdx": 146362,
        "questionPatternModEntities": "What did M0 and M1 distribute , M5 produce , M2 and M3 distribute , and M4 distribute",
        "questionTemplate": "What did [entity] and [entity] [VP_SIMPLE] , [entity] [VP_SIMPLE] , [entity] and [entity] [VP_SIMPLE] , and [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P0 M3 .\n?x0 P0 M4 .\n?x0 P1 M5\n}",
        "recursionDepth": 47,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P750 wd:Q145 .\n?x0 wdt:P750 wd:Q80948336 .\n?x0 wdt:P750 wd:Q5371838 .\n?x0 wdt:P750 wd:Q907311 .\n?x0 wdt:P750 wd:Q9589 .\n?x0 wdt:P162|wdt:P272 wd:Q7684047\n}",
        "questionWithBrackets": "What did [United Kingdom] and [FandangoNow] distribute , [Tanya Seghatchian] produce , [Netflix] and [Vudu] distribute , and [iTunes] distribute"
    },
    {
        "questionIdx": 146380,
        "questionPatternModEntities": "What did M0 's spouse executive produce , edit , produce , direct , and write",
        "questionTemplate": "What did [entity] 's [ROLE_SIMPLE] [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x0 P3 ?x1 .\n?x0 P4 ?x1 .\n?x1 P5 M0 .\nFILTER ( ?x1 != M0 )\n}",
        "recursionDepth": 41,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 ?x1 .\n?x0 wdt:P1040 ?x1 .\n?x0 wdt:P1431 ?x1 .\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x0 wdt:P58 ?x1 .\n?x1 wdt:P26 wd:Q3032150 .\nFILTER ( ?x1 != wd:Q3032150 )\n}LIMIT 1",
        "questionWithBrackets": "What did [Y\u014dko Yaguchi] 's spouse executive produce , edit , produce , direct , and write"
    },
    {
        "questionIdx": 146408,
        "questionPatternModEntities": "What did M2 's female spouse write and M0 write",
        "questionTemplate": "What did [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] [VP_SIMPLE] and [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P0 M0 .\n?x1 P1 M1 .\n?x1 P2 M2 .\nFILTER ( ?x1 != M2 )\n}",
        "recursionDepth": 30,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P58 ?x1 .\n?x0 wdt:P58 wd:Q1646 .\n?x1 wdt:P21 wd:Q6581072 .\n?x1 wdt:P26 wd:Q3122139 .\nFILTER ( ?x1 != wd:Q3122139 )\n}",
        "questionWithBrackets": "What did [Guy Schoeller] 's female spouse write and [Fran\u00e7oise Sagan] write"
    },
    {
        "questionIdx": 146411,
        "questionPatternModEntities": "What did M3 edit , M0 and M1 executive produce , M2 executive produce , and M4 direct",
        "questionTemplate": "What did [entity] [VP_SIMPLE] , [entity] and [entity] [VP_SIMPLE] , [entity] [VP_SIMPLE] , and [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P1 M3 .\n?x0 P2 M4\n}",
        "recursionDepth": 45,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 wd:Q358714 .\n?x0 wdt:P1040 wd:Q1401104 .\n?x0 wdt:P1431 wd:Q3772 .\n?x0 wdt:P1431 wd:Q887636 .\n?x0 wdt:P1431 wd:Q965826\n}",
        "questionWithBrackets": "What did [George Folsey] edit , [Quentin Tarantino] and [Boaz Yakin] executive produce , [Scott Spiegel] executive produce , and [Eli Roth] direct"
    },
    {
        "questionIdx": 146414,
        "questionPatternModEntities": "What did M0 and M1 write , M2 , M3 , and M4 write , and M5 and M6 edit",
        "questionTemplate": "What did [entity] and [entity] [VP_SIMPLE] , [entity] , [entity] , and [entity] [VP_SIMPLE] , and [entity] and [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P0 M3 .\n?x0 P0 M4 .\n?x0 P1 M5 .\n?x0 P1 M6\n}",
        "recursionDepth": 45,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1040 wd:Q55211 .\n?x0 wdt:P1040 wd:Q18021284 .\n?x0 wdt:P58 wd:Q20438470 .\n?x0 wdt:P58 wd:Q432709 .\n?x0 wdt:P58 wd:Q44221 .\n?x0 wdt:P58 wd:Q113628 .\n?x0 wdt:P58 wd:Q55215\n}",
        "questionWithBrackets": "What did [Samira Makhmalbaf] and [Sean Penn] write , [Idrissa Ou\u00e9draogo] , [Alejandro Gonz\u00e1lez I\u00f1\u00e1rritu] , and [Tatjana \u0160oji\u0107] write , and [Mohsen Makhmalbaf] and [Jonathan Morris] edit"
    },
    {
        "questionIdx": 146418,
        "questionPatternModEntities": "What did M0 's French sibling write",
        "questionTemplate": "What did [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x1 P1 M0 .\n?x1 P2 M1 .\nFILTER ( ?x1 != M0 )\n}",
        "recursionDepth": 19,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P58 ?x1 .\n?x1 wdt:P27 wd:Q142 .\n?x1 wdt:P3373 wd:Q105946886 .\nFILTER ( ?x1 != wd:Q105946886 )\n}LIMIT 1",
        "questionWithBrackets": "What did [Liliane Gainsbourg] 's French sibling write"
    },
    {
        "questionIdx": 146480,
        "questionPatternModEntities": "What did M0 distribute , M4 produce , M1 and M2 distribute , and M3 distribute",
        "questionTemplate": "What did [entity] [VP_SIMPLE] , [entity] [VP_SIMPLE] , [entity] and [entity] [VP_SIMPLE] , and [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P0 M3 .\n?x0 P1 M4\n}",
        "recursionDepth": 43,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P750 wd:Q145 .\n?x0 wdt:P750 wd:Q9589 .\n?x0 wdt:P750 wd:Q80948336 .\n?x0 wdt:P750 wd:Q5371838 .\n?x0 wdt:P162|wdt:P272 wd:Q79618131\n}",
        "questionWithBrackets": "What did [United Kingdom] distribute , [Apocalypso Pictures] produce , [Vudu] and [iTunes] distribute , and [FandangoNow] distribute"
    },
    {
        "questionIdx": 146483,
        "questionPatternModEntities": "What did M0 's employee 's sibling executive produce",
        "questionTemplate": "What did [entity] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x1 P1 ?x2 .\n?x2 P2 M0 .\nFILTER ( ?x1 != ?x2 )\n}",
        "recursionDepth": 19,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1431 ?x1 .\n?x1 wdt:P3373 ?x2 .\n?x2 wdt:P108 wd:Q217439 .\nFILTER ( ?x1 != ?x2 )\n}LIMIT 1",
        "questionWithBrackets": "What did [University of Hawaii] 's employee 's sibling executive produce"
    },
    {
        "questionIdx": 146493,
        "questionPatternModEntities": "What did M0 's male sibling edit , direct , and executive produce",
        "questionTemplate": "What did [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x1 P3 M0 .\n?x1 P4 M1 .\nFILTER ( ?x1 != M0 )\n}",
        "recursionDepth": 34,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 ?x1 .\n?x0 wdt:P1040 ?x1 .\n?x0 wdt:P1431 ?x1 .\n?x1 wdt:P21 wd:Q6581097 .\n?x1 wdt:P3373 wd:Q28370409 .\nFILTER ( ?x1 != wd:Q28370409 )\n}LIMIT 1",
        "questionWithBrackets": "What did [Everton Rocca] 's male sibling edit , direct , and executive produce"
    },
    {
        "questionIdx": 146532,
        "questionPatternModEntities": "What did M0 edit and direct",
        "questionTemplate": "What did [entity] [VP_SIMPLE] and [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M0\n}",
        "recursionDepth": 18,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 wd:Q25100 .\n?x0 wdt:P1040 wd:Q25100\n}LIMIT 1",
        "questionWithBrackets": "What did [Nanni Moretti] edit and direct"
    },
    {
        "questionIdx": 146540,
        "questionPatternModEntities": "What did M1 's spouse edit , M2 's employee direct , and M0 direct",
        "questionTemplate": "What did [entity] 's [ROLE_SIMPLE] [VP_SIMPLE] , [entity] 's [ROLE_SIMPLE] [VP_SIMPLE] , and [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x2 .\n?x0 P1 M0 .\n?x1 P2 M1 .\n?x2 P3 M2 .\nFILTER ( ?x1 != M1 )\n}",
        "recursionDepth": 38,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 ?x1 .\n?x0 wdt:P57 wd:Q8003 .\n?x0 wdt:P1040 ?x2 .\n?x1 wdt:P108 wd:Q1130457 .\n?x2 wdt:P26 wd:Q22247817 .\nFILTER ( ?x2 != wd:Q22247817 )\n}",
        "questionWithBrackets": "What did [Pera Atasheva] 's spouse edit , [Gerasimov Institute of Cinematography] 's employee direct , and [Sergei Eisenstein] direct"
    },
    {
        "questionIdx": 146554,
        "questionPatternModEntities": "What did M0 produce , write , and direct",
        "questionTemplate": "What did [entity] [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M0 .\n?x0 P2 M0\n}",
        "recursionDepth": 24,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 wd:Q882 .\n?x0 wdt:P162|wdt:P272 wd:Q882 .\n?x0 wdt:P58 wd:Q882\n}LIMIT 1",
        "questionWithBrackets": "What did [Charlie Chaplin] produce , write , and direct"
    },
    {
        "questionIdx": 146605,
        "questionPatternModEntities": "What did M0 and M1 executive produce , a parent of M5 executive produce , and M2 , M3 , and M4 edit",
        "questionTemplate": "What did [entity] and [entity] [VP_SIMPLE] , a [ROLE_SIMPLE] of [entity] [VP_SIMPLE] , and [entity] , [entity] , and [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P1 M2 .\n?x0 P1 M3 .\n?x0 P1 M4 .\n?x1 P2 M5\n}",
        "recursionDepth": 49,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1040 wd:Q614630 .\n?x0 wdt:P1040 wd:Q7820333 .\n?x0 wdt:P1040 wd:Q15835006 .\n?x0 wdt:P1431 ?x1 .\n?x0 wdt:P1431 wd:Q56094 .\n?x0 wdt:P1431 wd:Q38222 .\n?x1 wdt:P40|wdt:P355 wd:Q4739681\n}",
        "questionWithBrackets": "What did [George Lucas] and [Francis Ford Coppola] executive produce , a parent of [Amanda Lucas] executive produce , and [Michael Chandler] , [Tomoyo \u014cshima] , and [Michael Chandler] edit"
    },
    {
        "questionIdx": 146616,
        "questionPatternModEntities": "What did M0 's sibling 's parent edit",
        "questionTemplate": "What did [entity] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x1 P1 ?x2 .\n?x2 P2 M0 .\nFILTER ( ?x2 != M0 )\n}",
        "recursionDepth": 18,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1040 ?x1 .\n?x1 wdt:P40|wdt:P355 ?x2 .\n?x2 wdt:P3373 wd:Q230636 .\nFILTER ( ?x2 != wd:Q230636 )\n}LIMIT 1",
        "questionWithBrackets": "What did [Geraldine Chaplin] 's sibling 's parent edit"
    },
    {
        "questionIdx": 146628,
        "questionPatternModEntities": "What did M0 found and M1 's sibling found",
        "questionTemplate": "What did [entity] [VP_SIMPLE] and [entity] 's [ROLE_SIMPLE] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P0 M0 .\n?x1 P1 M1 .\nFILTER ( ?x1 != M1 )\n}",
        "recursionDepth": 25,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P112 ?x1 .\n?x0 wdt:P112 wd:Q23 .\n?x1 wdt:P3373 wd:Q850421 .\nFILTER ( ?x1 != wd:Q850421 )\n}",
        "questionWithBrackets": "What did [George Washington] found and [Betty Washington Lewis] 's sibling found"
    },
    {
        "questionIdx": 146665,
        "questionPatternModEntities": "What did M0 executive produce , M2 write , and M1 executive produce",
        "questionTemplate": "What did [entity] [VP_SIMPLE] , [entity] [VP_SIMPLE] , and [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P1 M2\n}",
        "recursionDepth": 32,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1431 wd:Q72614 .\n?x0 wdt:P1431 wd:Q472520 .\n?x0 wdt:P58 wd:Q286104\n}",
        "questionWithBrackets": "What did [Hal B. Wallis] executive produce , [Jean Negulesco] write , and [Jack Warner] executive produce"
    },
    {
        "questionIdx": 146687,
        "questionPatternModEntities": "What did M0 , M1 , and M2 edit and write",
        "questionTemplate": "What did [entity] , [entity] , and [entity] [VP_SIMPLE] and [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P1 M0 .\n?x0 P1 M1 .\n?x0 P1 M2\n}",
        "recursionDepth": 25,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1040 wd:Q562108 .\n?x0 wdt:P1040 wd:Q1687239 .\n?x0 wdt:P1040 wd:Q35979475 .\n?x0 wdt:P58 wd:Q562108 .\n?x0 wdt:P58 wd:Q1687239 .\n?x0 wdt:P58 wd:Q35979475\n}",
        "questionWithBrackets": "What did [Jens J\u00f8rgen Thorsen] , [Ole John] , and [J\u00f8rgen Leth] edit and write"
    },
    {
        "questionIdx": 146693,
        "questionPatternModEntities": "What did M0 edit , produce , and write",
        "questionTemplate": "What did [entity] [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M0 .\n?x0 P2 M0\n}",
        "recursionDepth": 24,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1040 wd:Q25186 .\n?x0 wdt:P162|wdt:P272 wd:Q25186 .\n?x0 wdt:P58 wd:Q25186\n}LIMIT 1",
        "questionWithBrackets": "What did [Gus Van Sant] edit , produce , and write"
    },
    {
        "questionIdx": 147347,
        "questionPatternModEntities": "What did M0 's employee write",
        "questionTemplate": "What did [entity] 's [ROLE_SIMPLE] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x1 P1 M0\n}",
        "recursionDepth": 14,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P58 ?x1 .\n?x1 wdt:P108 wd:Q175529\n}LIMIT 1",
        "questionWithBrackets": "What did [John Paul II Catholic University of Lublin] 's employee write"
    },
    {
        "questionIdx": 147444,
        "questionPatternModEntities": "What did M0 distribute , M1 distribute , and M2 produce",
        "questionTemplate": "What did [entity] [VP_SIMPLE] , [entity] [VP_SIMPLE] , and [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P1 M2\n}",
        "recursionDepth": 30,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P750 wd:Q145 .\n?x0 wdt:P750 wd:Q3070866 .\n?x0 wdt:P162|wdt:P272 wd:Q12382\n}",
        "questionWithBrackets": "What did [United Kingdom] distribute , [Nintendo eShop] distribute , and [Shigeru Miyamoto] produce"
    },
    {
        "questionIdx": 147497,
        "questionPatternModEntities": "What did M1 's employee 's spouse executive produce and M0 produce",
        "questionTemplate": "What did [entity] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE] [VP_SIMPLE] and [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 M0 .\n?x1 P2 ?x2 .\n?x2 P3 M1 .\nFILTER ( ?x1 != ?x2 )\n}",
        "recursionDepth": 30,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1431 ?x1 .\n?x0 wdt:P162|wdt:P272 wd:Q55400 .\n?x1 wdt:P26 ?x2 .\n?x2 wdt:P108 wd:Q730179 .\nFILTER ( ?x1 != ?x2 )\n}",
        "questionWithBrackets": "What did [Toei Animation] 's employee 's spouse executive produce and [Hayao Miyazaki] produce"
    },
    {
        "questionIdx": 147534,
        "questionPatternModEntities": "What did M0 executive produce , M1 executive produce , and M2 edit",
        "questionTemplate": "What did [entity] [VP_SIMPLE] , [entity] [VP_SIMPLE] , and [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P1 M2\n}",
        "recursionDepth": 32,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1040 wd:Q380920 .\n?x0 wdt:P1431 wd:Q19837 .\n?x0 wdt:P1431 wd:Q93161\n}",
        "questionWithBrackets": "What did [Steve Jobs] executive produce , [Edwin Catmull] executive produce , and [Lee Unkrich] edit"
    },
    {
        "questionIdx": 147536,
        "questionPatternModEntities": "What did M1 edit , M2 edit , M3 , M4 , and M5 edit , and M0 write",
        "questionTemplate": "What did [entity] [VP_SIMPLE] , [entity] [VP_SIMPLE] , [entity] , [entity] , and [entity] [VP_SIMPLE] , and [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\n?x0 P1 M3 .\n?x0 P1 M4 .\n?x0 P1 M5\n}",
        "recursionDepth": 46,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1040 wd:Q55215 .\n?x0 wdt:P1040 wd:Q18021284 .\n?x0 wdt:P1040 wd:Q5639976 .\n?x0 wdt:P1040 wd:Q22074634 .\n?x0 wdt:P1040 wd:Q541826 .\n?x0 wdt:P58 wd:Q20438470\n}",
        "questionWithBrackets": "What did [Robert Duffy] edit , [Hajime Okayasu] edit , [Jonathan Morris] , [Jay Cassidy] , and [Alejandro Gonz\u00e1lez I\u00f1\u00e1rritu] edit , and [Tatjana \u0160oji\u0107] write"
    },
    {
        "questionIdx": 147540,
        "questionPatternModEntities": "What did M0 found and M1 's child found",
        "questionTemplate": "What did [entity] [VP_SIMPLE] and [entity] 's [ROLE_SIMPLE] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P0 M0 .\n?x1 P1 M1\n}",
        "recursionDepth": 25,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P112 ?x1 .\n?x0 wdt:P112 wd:Q95 .\n?x1 wdt:P749 wd:Q20800404\n}",
        "questionWithBrackets": "What did [Google] found and [Alphabet Inc.] 's child found"
    },
    {
        "questionIdx": 147542,
        "questionPatternModEntities": "What did M0 's sibling direct , produce , and edit",
        "questionTemplate": "What did [entity] 's [ROLE_SIMPLE] [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x1 P3 M0 .\nFILTER ( ?x1 != M0 )\n}",
        "recursionDepth": 28,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 ?x1 .\n?x0 wdt:P1040 ?x1 .\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x1 wdt:P3373 wd:Q518966 .\nFILTER ( ?x1 != wd:Q518966 )\n}LIMIT 1",
        "questionWithBrackets": "What did [Pierre Renoir] 's sibling direct , produce , and edit"
    },
    {
        "questionIdx": 147550,
        "questionPatternModEntities": "What did M1 's Swedish spouse produce , direct , and edit",
        "questionTemplate": "What did [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x1 P3 M0 .\n?x1 P4 M1 .\nFILTER ( ?x1 != M1 )\n}",
        "recursionDepth": 33,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 ?x1 .\n?x0 wdt:P1040 ?x1 .\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x1 wdt:P27 wd:Q34 .\n?x1 wdt:P26 wd:Q5364442 .\nFILTER ( ?x1 != wd:Q5364442 )\n}LIMIT 1",
        "questionWithBrackets": "What did [Lena Herzog] 's Swedish spouse produce , direct , and edit"
    },
    {
        "questionIdx": 147580,
        "questionPatternModEntities": "What did M0 's spouse 's spouse executive produce and edit",
        "questionTemplate": "What did [entity] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE] [VP_SIMPLE] and [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x1 P2 ?x2 .\n?x2 P2 M0 .\nFILTER ( ?x1 != ?x2 ) .\nFILTER ( ?x2 != M0 )\n}",
        "recursionDepth": 27,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1040 ?x1 .\n?x0 wdt:P1431 ?x1 .\n?x1 wdt:P26 ?x2 .\n?x2 wdt:P26 wd:Q8006 .\nFILTER ( ?x1 != ?x2 ) .\nFILTER ( ?x2 != wd:Q8006 )\n}LIMIT 1",
        "questionWithBrackets": "What did [Akira Kurosawa] 's spouse 's spouse executive produce and edit"
    },
    {
        "questionIdx": 147589,
        "questionPatternModEntities": "What did M0 executive produce , M1 executive produce , M2 produce , and M3 , M4 , and M5 edit",
        "questionTemplate": "What did [entity] [VP_SIMPLE] , [entity] [VP_SIMPLE] , [entity] [VP_SIMPLE] , and [entity] , [entity] , and [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P1 M2 .\n?x0 P2 M3 .\n?x0 P2 M4 .\n?x0 P2 M5\n}",
        "recursionDepth": 48,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1040 wd:Q541143 .\n?x0 wdt:P1040 wd:Q47284 .\n?x0 wdt:P1040 wd:Q5359064 .\n?x0 wdt:P1431 wd:Q3772 .\n?x0 wdt:P1431 wd:Q549956 .\n?x0 wdt:P162|wdt:P272 wd:Q300323\n}",
        "questionWithBrackets": "What did [Quentin Tarantino] executive produce , [Alexandre Rockwell] executive produce , [A Band Apart] produce , and [Robert Rodriguez] , [Elena Maganini] , and [Terry Rawlings] edit"
    },
    {
        "questionIdx": 147644,
        "questionPatternModEntities": "What did M3 direct , M4 direct , M1 produce , M2 edit , and M0 write",
        "questionTemplate": "What did [entity] [VP_SIMPLE] , [entity] [VP_SIMPLE] , [entity] [VP_SIMPLE] , [entity] [VP_SIMPLE] , and [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P2 M2 .\n?x0 P3 M3 .\n?x0 P3 M4\n}",
        "recursionDepth": 48,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 wd:Q4768980 .\n?x0 wdt:P57 wd:Q7652115 .\n?x0 wdt:P1040 wd:Q24907 .\n?x0 wdt:P162|wdt:P272 wd:Q7235521 .\n?x0 wdt:P58 wd:Q3437029\n}",
        "questionWithBrackets": "What did [Svend Methling] direct , [Annelise Reenberg] direct , [Poul Bang] produce , [Anker S\u00f8rensen] edit , and [John Olsen] write"
    },
    {
        "questionIdx": 147650,
        "questionPatternModEntities": "What did M0 distribute , M3 produce , M1 distribute , and M2 distribute",
        "questionTemplate": "What did [entity] [VP_SIMPLE] , [entity] [VP_SIMPLE] , [entity] [VP_SIMPLE] , and [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P1 M3\n}",
        "recursionDepth": 39,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P750 wd:Q145 .\n?x0 wdt:P750 wd:Q9589 .\n?x0 wdt:P750 wd:Q80948336 .\n?x0 wdt:P162|wdt:P272 wd:Q79618131\n}",
        "questionWithBrackets": "What did [iTunes] distribute , [Apocalypso Pictures] produce , [United Kingdom] distribute , and [FandangoNow] distribute"
    },
    {
        "questionIdx": 147652,
        "questionPatternModEntities": "What did M0 distribute , M1 distribute , M2 distribute , M3 distribute , and M4 produce",
        "questionTemplate": "What did [entity] [VP_SIMPLE] , [entity] [VP_SIMPLE] , [entity] [VP_SIMPLE] , [entity] [VP_SIMPLE] , and [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P0 M3 .\n?x0 P1 M4\n}",
        "recursionDepth": 48,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P750 wd:Q3884 .\n?x0 wdt:P750 wd:Q19711013 .\n?x0 wdt:P750 wd:Q9589 .\n?x0 wdt:P750 wd:Q602243 .\n?x0 wdt:P162|wdt:P272 wd:Q57138\n}",
        "questionWithBrackets": "What did [iTunes] distribute , [Deezer] distribute , [Tidal] distribute , [Amazon] distribute , and [Within Temptation] produce"
    },
    {
        "questionIdx": 147687,
        "questionPatternModEntities": "What did M0 's male employee direct , produce , and edit",
        "questionTemplate": "What did [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x1 P3 M0 .\n?x1 P4 M1\n}",
        "recursionDepth": 33,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 ?x1 .\n?x0 wdt:P1040 ?x1 .\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x1 wdt:P108 wd:Q658626 .\n?x1 wdt:P21 wd:Q6581097\n}LIMIT 1",
        "questionWithBrackets": "What did [Office of Strategic Services] 's male employee direct , produce , and edit"
    },
    {
        "questionIdx": 147714,
        "questionPatternModEntities": "What did M2 , M3 , and M4 edit , M0 executive produce , M5 direct , and M1 produce",
        "questionTemplate": "What did [entity] , [entity] , and [entity] [VP_SIMPLE] , [entity] [VP_SIMPLE] , [entity] [VP_SIMPLE] , and [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P2 M2 .\n?x0 P2 M3 .\n?x0 P2 M4 .\n?x0 P3 M5\n}",
        "recursionDepth": 47,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 wd:Q2451678 .\n?x0 wdt:P1040 wd:Q6110147 .\n?x0 wdt:P1040 wd:Q28031320 .\n?x0 wdt:P1040 wd:Q3181589 .\n?x0 wdt:P1431 wd:Q11313 .\n?x0 wdt:P162|wdt:P272 wd:Q242446\n}",
        "questionWithBrackets": "What did [Colin Goudie] , [John Gilroy] , and [Jabez Olssen] edit , [John Knoll] executive produce , [Gareth Edwards] direct , and [Lucasfilm] produce"
    },
    {
        "questionIdx": 147744,
        "questionPatternModEntities": "What did M0 produce , edit , write , and direct",
        "questionTemplate": "What did [entity] [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M0 .\n?x0 P2 M0 .\n?x0 P3 M0\n}",
        "recursionDepth": 30,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 wd:Q8006 .\n?x0 wdt:P1040 wd:Q8006 .\n?x0 wdt:P162|wdt:P272 wd:Q8006 .\n?x0 wdt:P58 wd:Q8006\n}LIMIT 1",
        "questionWithBrackets": "What did [Akira Kurosawa] produce , edit , write , and direct"
    },
    {
        "questionIdx": 147754,
        "questionPatternModEntities": "What did M0 's parent produce , edit , direct , and write",
        "questionTemplate": "What did [entity] 's [ROLE_SIMPLE] [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x0 P3 ?x1 .\n?x1 P4 M0\n}",
        "recursionDepth": 34,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 ?x1 .\n?x0 wdt:P1040 ?x1 .\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x0 wdt:P58 ?x1 .\n?x1 wdt:P40|wdt:P355 wd:Q1620638\n}LIMIT 1",
        "questionWithBrackets": "What did [Hisao Kurosawa] 's parent produce , edit , direct , and write"
    },
    {
        "questionIdx": 147768,
        "questionPatternModEntities": "What did M0 direct , produce , and edit",
        "questionTemplate": "What did [entity] [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M0 .\n?x0 P2 M0\n}",
        "recursionDepth": 24,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 wd:Q8006 .\n?x0 wdt:P1040 wd:Q8006 .\n?x0 wdt:P162|wdt:P272 wd:Q8006\n}LIMIT 1",
        "questionWithBrackets": "What did [Akira Kurosawa] direct , produce , and edit"
    },
    {
        "questionIdx": 147782,
        "questionPatternModEntities": "What did M0 distribute , M1 and M2 distribute , and M3 's parent distribute",
        "questionTemplate": "What did [entity] [VP_SIMPLE] , [entity] and [entity] [VP_SIMPLE] , and [entity] 's [ROLE_SIMPLE] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x1 P1 M3\n}",
        "recursionDepth": 38,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P750 ?x1 .\n?x0 wdt:P750 wd:Q3884 .\n?x0 wdt:P750 wd:Q337535 .\n?x0 wdt:P750 wd:Q19864315 .\n?x1 wdt:P40|wdt:P355 wd:Q147505\n}",
        "questionWithBrackets": "What did [Amazon] distribute , [Google Play Games] and [Steam] distribute , and [Zappos.com] 's parent distribute"
    },
    {
        "questionIdx": 147826,
        "questionPatternModEntities": "What did M0 's Italian sibling direct and edit",
        "questionTemplate": "What did [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] [VP_SIMPLE] and [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x1 P2 M0 .\n?x1 P3 M1 .\nFILTER ( ?x1 != M0 )\n}",
        "recursionDepth": 27,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 ?x1 .\n?x0 wdt:P1040 ?x1 .\n?x1 wdt:P27 wd:Q38 .\n?x1 wdt:P3373 wd:Q971600 .\nFILTER ( ?x1 != wd:Q971600 )\n}LIMIT 1",
        "questionWithBrackets": "What did [Franco Moretti] 's Italian sibling direct and edit"
    },
    {
        "questionIdx": 147841,
        "questionPatternModEntities": "What did M0 direct and executive produce",
        "questionTemplate": "What did [entity] [VP_SIMPLE] and [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M0\n}",
        "recursionDepth": 19,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 wd:Q74899 .\n?x0 wdt:P1431 wd:Q74899\n}LIMIT 1",
        "questionWithBrackets": "What did [Michael Pfleghar] direct and executive produce"
    },
    {
        "questionIdx": 147842,
        "questionPatternModEntities": "What did M0 's German employee found",
        "questionTemplate": "What did [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x1 P1 M0 .\n?x1 P2 M1\n}",
        "recursionDepth": 19,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P112 ?x1 .\n?x1 wdt:P108 wd:Q26882567 .\n?x1 wdt:P27 wd:Q183\n}LIMIT 1",
        "questionWithBrackets": "What did [No label defined] 's German employee found"
    },
    {
        "questionIdx": 147870,
        "questionPatternModEntities": "What did M0 distribute , M2 produce , and M1 distribute",
        "questionTemplate": "What did [entity] [VP_SIMPLE] , [entity] [VP_SIMPLE] , and [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P1 M2\n}",
        "recursionDepth": 30,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P750 wd:Q145 .\n?x0 wdt:P750 wd:Q907311 .\n?x0 wdt:P162|wdt:P272 wd:Q79618131\n}",
        "questionWithBrackets": "What did [Netflix] distribute , [Apocalypso Pictures] produce , and [United Kingdom] distribute"
    },
    {
        "questionIdx": 147949,
        "questionPatternModEntities": "What did M0 executive produce , M3 direct , M2 produce , and M1 executive produce",
        "questionTemplate": "What did [entity] [VP_SIMPLE] , [entity] [VP_SIMPLE] , [entity] [VP_SIMPLE] , and [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P1 M2 .\n?x0 P2 M3\n}",
        "recursionDepth": 41,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 wd:Q6514075 .\n?x0 wdt:P1431 wd:Q35332 .\n?x0 wdt:P1431 wd:Q552176 .\n?x0 wdt:P162|wdt:P272 wd:Q5249738\n}",
        "questionWithBrackets": "What did [Brad Pitt] executive produce , [Lee Isaac Chung] direct , [Dede Gardner] produce , and [Steven Yeun] executive produce"
    },
    {
        "questionIdx": 147954,
        "questionPatternModEntities": "What did M0 's sibling direct , write , executive produce , and produce",
        "questionTemplate": "What did [entity] 's [ROLE_SIMPLE] [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x0 P3 ?x1 .\n?x1 P4 M0 .\nFILTER ( ?x1 != M0 )\n}",
        "recursionDepth": 35,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 ?x1 .\n?x0 wdt:P1431 ?x1 .\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x0 wdt:P58 ?x1 .\n?x1 wdt:P3373 wd:Q104373781 .\nFILTER ( ?x1 != wd:Q104373781 )\n}LIMIT 1",
        "questionWithBrackets": "What did [John Lynch] 's sibling direct , write , executive produce , and produce"
    },
    {
        "questionIdx": 147989,
        "questionPatternModEntities": "What did M0 edit , write , executive produce , and produce",
        "questionTemplate": "What did [entity] [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M0 .\n?x0 P2 M0 .\n?x0 P3 M0\n}",
        "recursionDepth": 31,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1040 wd:Q8006 .\n?x0 wdt:P1431 wd:Q8006 .\n?x0 wdt:P162|wdt:P272 wd:Q8006 .\n?x0 wdt:P58 wd:Q8006\n}LIMIT 1",
        "questionWithBrackets": "What did [Akira Kurosawa] edit , write , executive produce , and produce"
    },
    {
        "questionIdx": 147991,
        "questionPatternModEntities": "What did M0 's sibling edit , write , and produce",
        "questionTemplate": "What did [entity] 's [ROLE_SIMPLE] [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x1 P3 M0 .\nFILTER ( ?x1 != M0 )\n}",
        "recursionDepth": 28,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1040 ?x1 .\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x0 wdt:P58 ?x1 .\n?x1 wdt:P3373 wd:Q372788 .\nFILTER ( ?x1 != wd:Q372788 )\n}LIMIT 1",
        "questionWithBrackets": "What did [Jonathan Nolan] 's sibling edit , write , and produce"
    },
    {
        "questionIdx": 148010,
        "questionPatternModEntities": "What did M1 's Dutch parent write and produce",
        "questionTemplate": "What did [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] [VP_SIMPLE] and [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x1 P2 M0 .\n?x1 P3 M1\n}",
        "recursionDepth": 27,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x0 wdt:P58 ?x1 .\n?x1 wdt:P40|wdt:P355 wd:Q16215139 .\n?x1 wdt:P27 wd:Q29999\n}LIMIT 1",
        "questionWithBrackets": "What did [Helen Verhoeven] 's Dutch parent write and produce"
    },
    {
        "questionIdx": 148029,
        "questionPatternModEntities": "What did M3 and M4 direct , M0 , M1 , and M2 edit , and M5 and M6 direct",
        "questionTemplate": "What did [entity] and [entity] [VP_SIMPLE] , [entity] , [entity] , and [entity] [VP_SIMPLE] , and [entity] and [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P1 M3 .\n?x0 P1 M4 .\n?x0 P1 M5 .\n?x0 P1 M6\n}",
        "recursionDepth": 45,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 wd:Q474262 .\n?x0 wdt:P57 wd:Q466320 .\n?x0 wdt:P57 wd:Q432709 .\n?x0 wdt:P57 wd:Q55238 .\n?x0 wdt:P1040 wd:Q55215 .\n?x0 wdt:P1040 wd:Q5639976 .\n?x0 wdt:P1040 wd:Q18021284\n}",
        "questionWithBrackets": "What did [Ken Loach] and [Mira Nair] direct , [Hajime Okayasu] , [Alejandro Gonz\u00e1lez I\u00f1\u00e1rritu] , and [Jonathan Morris] edit , and [Amos Gitai] and [Samira Makhmalbaf] direct"
    },
    {
        "questionIdx": 148034,
        "questionPatternModEntities": "What did M0 write , M4 and M5 direct , M3 edit , and M1 and M2 write",
        "questionTemplate": "What did [entity] [VP_SIMPLE] , [entity] and [entity] [VP_SIMPLE] , [entity] [VP_SIMPLE] , and [entity] and [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P1 M3 .\n?x0 P2 M4 .\n?x0 P2 M5\n}",
        "recursionDepth": 47,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 wd:Q113628 .\n?x0 wdt:P57 wd:Q295093 .\n?x0 wdt:P1040 wd:Q55211 .\n?x0 wdt:P58 wd:Q474262 .\n?x0 wdt:P58 wd:Q44221 .\n?x0 wdt:P58 wd:Q55215\n}",
        "questionWithBrackets": "What did [Sean Penn] write , [Idrissa Ou\u00e9draogo] and [Claude Lelouch] direct , [Mohsen Makhmalbaf] edit , and [Amos Gitai] and [Alejandro Gonz\u00e1lez I\u00f1\u00e1rritu] write"
    },
    {
        "questionIdx": 148037,
        "questionPatternModEntities": "What did M0 , M1 , M2 , and M3 direct and write",
        "questionTemplate": "What did [entity] , [entity] , [entity] , and [entity] [VP_SIMPLE] and [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P0 M3 .\n?x0 P1 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\n?x0 P1 M3\n}",
        "recursionDepth": 28,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 wd:Q3772 .\n?x0 wdt:P57 wd:Q47284 .\n?x0 wdt:P57 wd:Q298255 .\n?x0 wdt:P57 wd:Q358714 .\n?x0 wdt:P58 wd:Q3772 .\n?x0 wdt:P58 wd:Q47284 .\n?x0 wdt:P58 wd:Q298255 .\n?x0 wdt:P58 wd:Q358714\n}",
        "questionWithBrackets": "What did [Robert Rodriguez] , [Quentin Tarantino] , [Eli Roth] , and [Rob Zombie] direct and write"
    },
    {
        "questionIdx": 148078,
        "questionPatternModEntities": "What did M1 's Chinese parent write",
        "questionTemplate": "What did [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x1 P1 M0 .\n?x1 P2 M1\n}",
        "recursionDepth": 19,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P58 ?x1 .\n?x1 wdt:P40|wdt:P355 wd:Q561310 .\n?x1 wdt:P27 wd:Q148\n}LIMIT 1",
        "questionWithBrackets": "What did [Jaycee Chan] 's Chinese parent write"
    },
    {
        "questionIdx": 148082,
        "questionPatternModEntities": "What did M0 , M1 , M2 , and M3 produce and executive produce",
        "questionTemplate": "What did [entity] , [entity] , [entity] , and [entity] [VP_SIMPLE] and [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P0 M3 .\n?x0 P1 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\n?x0 P1 M3\n}",
        "recursionDepth": 29,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1431 wd:Q81520 .\n?x0 wdt:P1431 wd:Q381545 .\n?x0 wdt:P1431 wd:Q1295611 .\n?x0 wdt:P1431 wd:Q1969128 .\n?x0 wdt:P162|wdt:P272 wd:Q81520 .\n?x0 wdt:P162|wdt:P272 wd:Q381545 .\n?x0 wdt:P162|wdt:P272 wd:Q1295611 .\n?x0 wdt:P162|wdt:P272 wd:Q1969128\n}",
        "questionWithBrackets": "What did [Pierce Brosnan] , [Bob Yari] , [Elie Samaha] , and [Toby Emmerich] produce and executive produce"
    },
    {
        "questionIdx": 148157,
        "questionPatternModEntities": "What did a Canadian employee of M0 edit",
        "questionTemplate": "What did a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x1 P1 M0 .\n?x1 P2 M1\n}",
        "recursionDepth": 21,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1040 ?x1 .\n?x1 wdt:P108 wd:Q180865 .\n?x1 wdt:P27 wd:Q16\n}LIMIT 1",
        "questionWithBrackets": "What did a Canadian employee of [University of Toronto] edit"
    },
    {
        "questionIdx": 148176,
        "questionPatternModEntities": "What did a Canadian sibling of M0 direct and executive produce",
        "questionTemplate": "What did a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] [VP_SIMPLE] and [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x1 P2 M0 .\n?x1 P3 M1 .\nFILTER ( ?x1 != M0 )\n}",
        "recursionDepth": 30,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 ?x1 .\n?x0 wdt:P1431 ?x1 .\n?x1 wdt:P27 wd:Q16 .\n?x1 wdt:P3373 wd:Q9385301 .\nFILTER ( ?x1 != wd:Q9385301 )\n}LIMIT 1",
        "questionWithBrackets": "What did a Canadian sibling of [Neville Poy] direct and executive produce"
    },
    {
        "questionIdx": 148217,
        "questionPatternModEntities": "What did a Chinese employee of M2 and M3 direct and M0 and M1 direct",
        "questionTemplate": "What did a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] and [entity] [VP_SIMPLE] and [entity] and [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x1 P1 M2 .\n?x1 P1 M3 .\n?x1 P2 M4\n}",
        "recursionDepth": 40,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 ?x1 .\n?x0 wdt:P57 wd:Q25190449 .\n?x0 wdt:P57 wd:Q2802640 .\n?x1 wdt:P108 wd:Q1137652 .\n?x1 wdt:P108 wd:Q16952 .\n?x1 wdt:P27 wd:Q148\n}",
        "questionWithBrackets": "What did a Chinese employee of [Peking University] and [Maastricht University] direct and [Lulu Wang] and [Lulu Wang] direct"
    },
    {
        "questionIdx": 148254,
        "questionPatternModEntities": "What did a Chinese spouse of M1 edit",
        "questionTemplate": "What did a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x1 P1 M0 .\n?x1 P2 M1 .\nFILTER ( ?x1 != M1 )\n}",
        "recursionDepth": 21,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1040 ?x1 .\n?x1 wdt:P27 wd:Q148 .\n?x1 wdt:P26 wd:Q700315 .\nFILTER ( ?x1 != wd:Q700315 )\n}LIMIT 1",
        "questionWithBrackets": "What did a Chinese spouse of [Zhang Yuqi] edit"
    },
    {
        "questionIdx": 148284,
        "questionPatternModEntities": "What did a Dutch employee of M0 direct",
        "questionTemplate": "What did a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x1 P1 M0 .\n?x1 P2 M1\n}",
        "recursionDepth": 21,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 ?x1 .\n?x1 wdt:P108 wd:Q2602249 .\n?x1 wdt:P27 wd:Q29999\n}LIMIT 1",
        "questionWithBrackets": "What did a Dutch employee of [Maastricht Academy of Dramatic Arts] direct"
    },
    {
        "questionIdx": 148304,
        "questionPatternModEntities": "What did a Dutch sibling of M0 edit",
        "questionTemplate": "What did a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x1 P1 M0 .\n?x1 P2 M1 .\nFILTER ( ?x1 != M0 )\n}",
        "recursionDepth": 21,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1040 ?x1 .\n?x1 wdt:P27 wd:Q29999 .\n?x1 wdt:P3373 wd:Q27032273 .\nFILTER ( ?x1 != wd:Q27032273 )\n}LIMIT 1",
        "questionWithBrackets": "What did a Dutch sibling of [Johan Haanstra] edit"
    },
    {
        "questionIdx": 148382,
        "questionPatternModEntities": "What did a French spouse of M1 found",
        "questionTemplate": "What did a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x1 P1 M0 .\n?x1 P2 M1 .\nFILTER ( ?x1 != M1 )\n}",
        "recursionDepth": 21,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P112 ?x1 .\n?x1 wdt:P27 wd:Q142 .\n?x1 wdt:P26 wd:Q143945 .\nFILTER ( ?x1 != wd:Q143945 )\n}LIMIT 1",
        "questionWithBrackets": "What did a French spouse of [Carla Bruni] found"
    },
    {
        "questionIdx": 148462,
        "questionPatternModEntities": "What did a Japanese employee of M2 and M3 write and M0 and M1 direct",
        "questionTemplate": "What did a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] and [entity] [VP_SIMPLE] and [entity] and [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 M0 .\n?x0 P1 M1 .\n?x1 P2 M2 .\n?x1 P2 M3 .\n?x1 P3 M4\n}",
        "recursionDepth": 40,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 wd:Q81078 .\n?x0 wdt:P57 wd:Q742757 .\n?x0 wdt:P58 ?x1 .\n?x1 wdt:P108 wd:Q1203676 .\n?x1 wdt:P108 wd:Q834328 .\n?x1 wdt:P27 wd:Q17\n}",
        "questionWithBrackets": "What did a Japanese employee of [Gainax] and [Khara] write and [Kazuya Tsurumaki] and [Mahiro Maeda] direct"
    },
    {
        "questionIdx": 148559,
        "questionPatternModEntities": "What did a Mexican sibling of M0 found",
        "questionTemplate": "What did a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x1 P1 M0 .\n?x1 P2 M1 .\nFILTER ( ?x1 != M0 )\n}",
        "recursionDepth": 21,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P112 ?x1 .\n?x1 wdt:P27 wd:Q96 .\n?x1 wdt:P3373 wd:Q452517 .\nFILTER ( ?x1 != wd:Q452517 )\n}LIMIT 1",
        "questionWithBrackets": "What did a Mexican sibling of [Olga Kameneva] found"
    },
    {
        "questionIdx": 148562,
        "questionPatternModEntities": "What did a Mexican spouse of M1 found",
        "questionTemplate": "What did a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x1 P1 M0 .\n?x1 P2 M1 .\nFILTER ( ?x1 != M1 )\n}",
        "recursionDepth": 21,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P112 ?x1 .\n?x1 wdt:P27 wd:Q96 .\n?x1 wdt:P26 wd:Q101482501 .\nFILTER ( ?x1 != wd:Q101482501 )\n}LIMIT 1",
        "questionWithBrackets": "What did a Mexican spouse of [Soumaya Domit Gemayel] found"
    },
    {
        "questionIdx": 148628,
        "questionPatternModEntities": "What did a Spanish sibling of M2 found and M0 and M1 found",
        "questionTemplate": "What did a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] [VP_SIMPLE] and [entity] and [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x1 P1 M2 .\n?x1 P2 M3 .\nFILTER ( ?x1 != M2 )\n}",
        "recursionDepth": 36,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P112 ?x1 .\n?x0 wdt:P112 wd:Q82674 .\n?x0 wdt:P112 wd:Q133028 .\n?x1 wdt:P27 wd:Q29 .\n?x1 wdt:P3373 wd:Q157107 .\nFILTER ( ?x1 != wd:Q157107 )\n}",
        "questionWithBrackets": "What did a Spanish sibling of [John of Austria] found and [Richard III of England] and [Mary I of England] found"
    },
    {
        "questionIdx": 148759,
        "questionPatternModEntities": "What did a child of M0 found",
        "questionTemplate": "What did a [ROLE_SIMPLE] of [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x1 P1 M0\n}",
        "recursionDepth": 16,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P112 ?x1 .\n?x1 wdt:P749 wd:Q20800404\n}LIMIT 1",
        "questionWithBrackets": "What did a child of [Alphabet Inc.] found"
    },
    {
        "questionIdx": 148788,
        "questionPatternModEntities": "What did a child of M0 produce and executive produce",
        "questionTemplate": "What did a [ROLE_SIMPLE] of [entity] [VP_SIMPLE] and [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x1 P2 M0\n}",
        "recursionDepth": 25,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1431 ?x1 .\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x1 wdt:P749 wd:Q20937928\n}LIMIT 1",
        "questionWithBrackets": "What did a child of [Moravia Steel] produce and executive produce"
    },
    {
        "questionIdx": 149555,
        "questionPatternModEntities": "What did a female employee of M0 found",
        "questionTemplate": "What did a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x1 P1 M0 .\n?x1 P2 M1\n}",
        "recursionDepth": 21,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P112 ?x1 .\n?x1 wdt:P108 wd:Q26882567 .\n?x1 wdt:P21 wd:Q6581072\n}LIMIT 1",
        "questionWithBrackets": "What did a female employee of [No label defined] found"
    },
    {
        "questionIdx": 149556,
        "questionPatternModEntities": "What did a female employee of M0 write",
        "questionTemplate": "What did a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x1 P1 M0 .\n?x1 P2 M1\n}",
        "recursionDepth": 21,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P58 ?x1 .\n?x1 wdt:P108 wd:Q646229 .\n?x1 wdt:P21 wd:Q6581072\n}LIMIT 1",
        "questionWithBrackets": "What did a female employee of [L'Express (Neuch\u00e2tel)] write"
    },
    {
        "questionIdx": 149620,
        "questionPatternModEntities": "What did a female sibling of M1 executive produce and M0 write",
        "questionTemplate": "What did a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] [VP_SIMPLE] and [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 M0 .\n?x1 P2 M1 .\n?x1 P3 M2 .\nFILTER ( ?x1 != M1 )\n}",
        "recursionDepth": 33,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1431 ?x1 .\n?x0 wdt:P58 wd:Q1744 .\n?x1 wdt:P21 wd:Q6581072 .\n?x1 wdt:P3373 wd:Q5112102 .\nFILTER ( ?x1 != wd:Q5112102 )\n}",
        "questionWithBrackets": "What did a female sibling of [Christopher Ciccone] executive produce and [Madonna] write"
    },
    {
        "questionIdx": 149623,
        "questionPatternModEntities": "What did a female sibling of M0 executive produce",
        "questionTemplate": "What did a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x1 P1 M0 .\n?x1 P2 M1 .\nFILTER ( ?x1 != M0 )\n}",
        "recursionDepth": 22,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1431 ?x1 .\n?x1 wdt:P21 wd:Q6581072 .\n?x1 wdt:P3373 wd:Q5112102 .\nFILTER ( ?x1 != wd:Q5112102 )\n}LIMIT 1",
        "questionWithBrackets": "What did a female sibling of [Christopher Ciccone] executive produce"
    },
    {
        "questionIdx": 149624,
        "questionPatternModEntities": "What did a female sibling of M0 executive produce and write",
        "questionTemplate": "What did a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] [VP_SIMPLE] and [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x1 P2 M0 .\n?x1 P3 M1 .\nFILTER ( ?x1 != M0 )\n}",
        "recursionDepth": 30,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1431 ?x1 .\n?x0 wdt:P58 ?x1 .\n?x1 wdt:P21 wd:Q6581072 .\n?x1 wdt:P3373 wd:Q5112102 .\nFILTER ( ?x1 != wd:Q5112102 )\n}LIMIT 1",
        "questionWithBrackets": "What did a female sibling of [Christopher Ciccone] executive produce and write"
    },
    {
        "questionIdx": 149626,
        "questionPatternModEntities": "What did a female spouse of M1 found",
        "questionTemplate": "What did a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x1 P1 M0 .\n?x1 P2 M1 .\nFILTER ( ?x1 != M1 )\n}",
        "recursionDepth": 21,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P112 ?x1 .\n?x1 wdt:P21 wd:Q6581072 .\n?x1 wdt:P26 wd:Q896740 .\nFILTER ( ?x1 != wd:Q896740 )\n}LIMIT 1",
        "questionWithBrackets": "What did a female spouse of [Brad Armstrong] found"
    },
    {
        "questionIdx": 149638,
        "questionPatternModEntities": "What did a female spouse of M1 executive produce",
        "questionTemplate": "What did a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x1 P1 M0 .\n?x1 P2 M1 .\nFILTER ( ?x1 != M1 )\n}",
        "recursionDepth": 22,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1431 ?x1 .\n?x1 wdt:P21 wd:Q6581072 .\n?x1 wdt:P26 wd:Q192990 .\nFILTER ( ?x1 != wd:Q192990 )\n}LIMIT 1",
        "questionWithBrackets": "What did a female spouse of [Guy Ritchie] executive produce"
    },
    {
        "questionIdx": 150240,
        "questionPatternModEntities": "What did a male employee of M0 executive produce , produce , edit , and direct",
        "questionTemplate": "What did a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x0 P3 ?x1 .\n?x1 P4 M0 .\n?x1 P5 M1\n}",
        "recursionDepth": 42,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 ?x1 .\n?x0 wdt:P1040 ?x1 .\n?x0 wdt:P1431 ?x1 .\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x1 wdt:P108 wd:Q174710 .\n?x1 wdt:P21 wd:Q6581097\n}LIMIT 1",
        "questionWithBrackets": "What did a male employee of [University of California, Los Angeles] executive produce , produce , edit , and direct"
    },
    {
        "questionIdx": 150276,
        "questionPatternModEntities": "What did a male sibling of M0 found",
        "questionTemplate": "What did a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x1 P1 M0 .\n?x1 P2 M1 .\nFILTER ( ?x1 != M0 )\n}",
        "recursionDepth": 21,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P112 ?x1 .\n?x1 wdt:P21 wd:Q6581097 .\n?x1 wdt:P3373 wd:Q850421 .\nFILTER ( ?x1 != wd:Q850421 )\n}LIMIT 1",
        "questionWithBrackets": "What did a male sibling of [Betty Washington Lewis] found"
    },
    {
        "questionIdx": 150283,
        "questionPatternModEntities": "What did a male spouse of M1 direct , produce , and executive produce",
        "questionTemplate": "What did a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x1 P3 M0 .\n?x1 P4 M1 .\nFILTER ( ?x1 != M1 )\n}",
        "recursionDepth": 36,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 ?x1 .\n?x0 wdt:P1431 ?x1 .\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x1 wdt:P21 wd:Q6581097 .\n?x1 wdt:P26 wd:Q717669 .\nFILTER ( ?x1 != wd:Q717669 )\n}LIMIT 1",
        "questionWithBrackets": "What did a male spouse of [Lin Feng-jiao] direct , produce , and executive produce"
    },
    {
        "questionIdx": 150287,
        "questionPatternModEntities": "What did a male spouse of M1 found",
        "questionTemplate": "What did a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x1 P1 M0 .\n?x1 P2 M1 .\nFILTER ( ?x1 != M1 )\n}",
        "recursionDepth": 21,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P112 ?x1 .\n?x1 wdt:P21 wd:Q6581097 .\n?x1 wdt:P26 wd:Q191789 .\nFILTER ( ?x1 != wd:Q191789 )\n}LIMIT 1",
        "questionWithBrackets": "What did a male spouse of [Martha Washington] found"
    },
    {
        "questionIdx": 150303,
        "questionPatternModEntities": "What did a parent of M1 write and M0 executive produce",
        "questionTemplate": "What did a [ROLE_SIMPLE] of [entity] [VP_SIMPLE] and [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 ?x1 .\n?x1 P2 M1\n}",
        "recursionDepth": 28,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1431 wd:Q8877 .\n?x0 wdt:P58 ?x1 .\n?x1 wdt:P40|wdt:P355 wd:Q956349\n}",
        "questionWithBrackets": "What did a parent of [Eleanor Columbus] write and [Steven Spielberg] executive produce"
    },
    {
        "questionIdx": 150306,
        "questionPatternModEntities": "What did a parent of M0 executive produce , write , direct , and produce",
        "questionTemplate": "What did a [ROLE_SIMPLE] of [entity] [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x0 P3 ?x1 .\n?x1 P4 M0\n}",
        "recursionDepth": 37,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 ?x1 .\n?x0 wdt:P1431 ?x1 .\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x0 wdt:P58 ?x1 .\n?x1 wdt:P40|wdt:P355 wd:Q561310\n}LIMIT 1",
        "questionWithBrackets": "What did a parent of [Jaycee Chan] executive produce , write , direct , and produce"
    },
    {
        "questionIdx": 150332,
        "questionPatternModEntities": "What did a parent of M0 edit",
        "questionTemplate": "What did a [ROLE_SIMPLE] of [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x1 P1 M0\n}",
        "recursionDepth": 16,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1040 ?x1 .\n?x1 wdt:P40|wdt:P355 wd:Q120593\n}LIMIT 1",
        "questionWithBrackets": "What did a parent of [Eugene Chaplin] edit"
    },
    {
        "questionIdx": 150336,
        "questionPatternModEntities": "What did a parent of M0 produce , edit , write , direct , and executive produce",
        "questionTemplate": "What did a [ROLE_SIMPLE] of [entity] [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x0 P3 ?x1 .\n?x0 P4 ?x1 .\n?x1 P5 M0\n}",
        "recursionDepth": 43,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 ?x1 .\n?x0 wdt:P1040 ?x1 .\n?x0 wdt:P1431 ?x1 .\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x0 wdt:P58 ?x1 .\n?x1 wdt:P40|wdt:P355 wd:Q1620638\n}LIMIT 1",
        "questionWithBrackets": "What did a parent of [Hisao Kurosawa] produce , edit , write , direct , and executive produce"
    },
    {
        "questionIdx": 150343,
        "questionPatternModEntities": "What did a parent of M0 write",
        "questionTemplate": "What did a [ROLE_SIMPLE] of [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x1 P1 M0\n}",
        "recursionDepth": 16,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P58 ?x1 .\n?x1 wdt:P40|wdt:P355 wd:Q120593\n}LIMIT 1",
        "questionWithBrackets": "What did a parent of [Eugene Chaplin] write"
    },
    {
        "questionIdx": 150349,
        "questionPatternModEntities": "What did a parent of M0 produce and edit",
        "questionTemplate": "What did a [ROLE_SIMPLE] of [entity] [VP_SIMPLE] and [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x1 P2 M0\n}",
        "recursionDepth": 24,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1040 ?x1 .\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x1 wdt:P40|wdt:P355 wd:Q120593\n}LIMIT 1",
        "questionWithBrackets": "What did a parent of [Eugene Chaplin] produce and edit"
    },
    {
        "questionIdx": 150350,
        "questionPatternModEntities": "What did a parent of M0 direct , edit , produce , and write",
        "questionTemplate": "What did a [ROLE_SIMPLE] of [entity] [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x0 P3 ?x1 .\n?x1 P4 M0\n}",
        "recursionDepth": 36,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 ?x1 .\n?x0 wdt:P1040 ?x1 .\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x0 wdt:P58 ?x1 .\n?x1 wdt:P40|wdt:P355 wd:Q4739681\n}LIMIT 1",
        "questionWithBrackets": "What did a parent of [Amanda Lucas] direct , edit , produce , and write"
    },
    {
        "questionIdx": 150732,
        "questionPatternModEntities": "What did a sibling of M0 executive produce , direct , and write",
        "questionTemplate": "What did a [ROLE_SIMPLE] of [entity] [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x1 P3 M0 .\nFILTER ( ?x1 != M0 )\n}",
        "recursionDepth": 31,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 ?x1 .\n?x0 wdt:P1431 ?x1 .\n?x0 wdt:P58 ?x1 .\n?x1 wdt:P3373 wd:Q5112102 .\nFILTER ( ?x1 != wd:Q5112102 )\n}LIMIT 1",
        "questionWithBrackets": "What did a sibling of [Christopher Ciccone] executive produce , direct , and write"
    },
    {
        "questionIdx": 150737,
        "questionPatternModEntities": "What did a sibling of M0 found",
        "questionTemplate": "What did a [ROLE_SIMPLE] of [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x1 P1 M0 .\nFILTER ( ?x1 != M0 )\n}",
        "recursionDepth": 16,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P112 ?x1 .\n?x1 wdt:P3373 wd:Q773197 .\nFILTER ( ?x1 != wd:Q773197 )\n}LIMIT 1",
        "questionWithBrackets": "What did a sibling of [Auma Obama] found"
    },
    {
        "questionIdx": 150745,
        "questionPatternModEntities": "What did a sibling of M0 produce , edit , executive produce , and direct",
        "questionTemplate": "What did a [ROLE_SIMPLE] of [entity] [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x0 P3 ?x1 .\n?x1 P4 M0 .\nFILTER ( ?x1 != M0 )\n}",
        "recursionDepth": 37,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 ?x1 .\n?x0 wdt:P1040 ?x1 .\n?x0 wdt:P1431 ?x1 .\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x1 wdt:P3373 wd:Q28370409 .\nFILTER ( ?x1 != wd:Q28370409 )\n}LIMIT 1",
        "questionWithBrackets": "What did a sibling of [Everton Rocca] produce , edit , executive produce , and direct"
    },
    {
        "questionIdx": 150753,
        "questionPatternModEntities": "What did a sibling of M0 produce , edit , and write",
        "questionTemplate": "What did a [ROLE_SIMPLE] of [entity] [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x1 P3 M0 .\nFILTER ( ?x1 != M0 )\n}",
        "recursionDepth": 30,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1040 ?x1 .\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x0 wdt:P58 ?x1 .\n?x1 wdt:P3373 wd:Q606780 .\nFILTER ( ?x1 != wd:Q606780 )\n}LIMIT 1",
        "questionWithBrackets": "What did a sibling of [Sydney Chaplin] produce , edit , and write"
    },
    {
        "questionIdx": 150767,
        "questionPatternModEntities": "What did a sibling of M1 's German spouse edit",
        "questionTemplate": "What did a [ROLE_SIMPLE] of [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x1 P1 ?x2 .\n?x2 P2 M0 .\n?x2 P3 M1 .\nFILTER ( ?x1 != ?x2 ) .\nFILTER ( ?x2 != M1 )\n}",
        "recursionDepth": 25,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1040 ?x1 .\n?x1 wdt:P3373 ?x2 .\n?x2 wdt:P27 wd:Q183 .\n?x2 wdt:P26 wd:Q71794911 .\nFILTER ( ?x1 != ?x2 ) .\nFILTER ( ?x2 != wd:Q71794911 )\n}LIMIT 1",
        "questionWithBrackets": "What did a sibling of [Elfriede Fischinger] 's German spouse edit"
    },
    {
        "questionIdx": 150768,
        "questionPatternModEntities": "What did a sibling of M0 direct and produce",
        "questionTemplate": "What did a [ROLE_SIMPLE] of [entity] [VP_SIMPLE] and [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x1 P2 M0 .\nFILTER ( ?x1 != M0 )\n}",
        "recursionDepth": 24,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 ?x1 .\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x1 wdt:P3373 wd:Q347432 .\nFILTER ( ?x1 != wd:Q347432 )\n}LIMIT 1",
        "questionWithBrackets": "What did a sibling of [Roy O. Disney] direct and produce"
    },
    {
        "questionIdx": 150772,
        "questionPatternModEntities": "What did a sibling of M0 edit , write , and produce",
        "questionTemplate": "What did a [ROLE_SIMPLE] of [entity] [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x1 P3 M0 .\nFILTER ( ?x1 != M0 )\n}",
        "recursionDepth": 30,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1040 ?x1 .\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x0 wdt:P58 ?x1 .\n?x1 wdt:P3373 wd:Q372788 .\nFILTER ( ?x1 != wd:Q372788 )\n}LIMIT 1",
        "questionWithBrackets": "What did a sibling of [Jonathan Nolan] edit , write , and produce"
    },
    {
        "questionIdx": 150780,
        "questionPatternModEntities": "What did a sibling of M0 produce , executive produce , edit , and direct",
        "questionTemplate": "What did a [ROLE_SIMPLE] of [entity] [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x0 P3 ?x1 .\n?x1 P4 M0 .\nFILTER ( ?x1 != M0 )\n}",
        "recursionDepth": 37,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 ?x1 .\n?x0 wdt:P1040 ?x1 .\n?x0 wdt:P1431 ?x1 .\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x1 wdt:P3373 wd:Q28370409 .\nFILTER ( ?x1 != wd:Q28370409 )\n}LIMIT 1",
        "questionWithBrackets": "What did a sibling of [Everton Rocca] produce , executive produce , edit , and direct"
    },
    {
        "questionIdx": 150784,
        "questionPatternModEntities": "What did a sibling of M0 write , executive produce , direct , and edit",
        "questionTemplate": "What did a [ROLE_SIMPLE] of [entity] [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x0 P3 ?x1 .\n?x1 P4 M0 .\nFILTER ( ?x1 != M0 )\n}",
        "recursionDepth": 37,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 ?x1 .\n?x0 wdt:P1040 ?x1 .\n?x0 wdt:P1431 ?x1 .\n?x0 wdt:P58 ?x1 .\n?x1 wdt:P3373 wd:Q28370409 .\nFILTER ( ?x1 != wd:Q28370409 )\n}LIMIT 1",
        "questionWithBrackets": "What did a sibling of [Everton Rocca] write , executive produce , direct , and edit"
    },
    {
        "questionIdx": 150796,
        "questionPatternModEntities": "What did a sibling of M0 executive produce , direct , edit , write , and produce",
        "questionTemplate": "What did a [ROLE_SIMPLE] of [entity] [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x0 P3 ?x1 .\n?x0 P4 ?x1 .\n?x1 P5 M0 .\nFILTER ( ?x1 != M0 )\n}",
        "recursionDepth": 43,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 ?x1 .\n?x0 wdt:P1040 ?x1 .\n?x0 wdt:P1431 ?x1 .\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x0 wdt:P58 ?x1 .\n?x1 wdt:P3373 wd:Q28370409 .\nFILTER ( ?x1 != wd:Q28370409 )\n}LIMIT 1",
        "questionWithBrackets": "What did a sibling of [Everton Rocca] executive produce , direct , edit , write , and produce"
    },
    {
        "questionIdx": 150806,
        "questionPatternModEntities": "What did a spouse and parent of M0 found",
        "questionTemplate": "What did a [ROLE_SIMPLE] and [ROLE_SIMPLE] of [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x1 P1 M0 .\n?x1 P2 M0 .\nFILTER ( ?x1 != M0 )\n}",
        "recursionDepth": 21,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P112 ?x1 .\n?x1 wdt:P40|wdt:P355 wd:Q270864 .\n?x1 wdt:P26 wd:Q270864 .\nFILTER ( ?x1 != wd:Q270864 )\n}LIMIT 1",
        "questionWithBrackets": "What did a spouse and parent of [Sitamun] found"
    },
    {
        "questionIdx": 150812,
        "questionPatternModEntities": "What did a spouse of M0 executive produce and write",
        "questionTemplate": "What did a [ROLE_SIMPLE] of [entity] [VP_SIMPLE] and [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x1 P2 M0 .\nFILTER ( ?x1 != M0 )\n}",
        "recursionDepth": 25,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1431 ?x1 .\n?x0 wdt:P58 ?x1 .\n?x1 wdt:P26 wd:Q70294 .\nFILTER ( ?x1 != wd:Q70294 )\n}LIMIT 1",
        "questionWithBrackets": "What did a spouse of [Ingrid Caven] executive produce and write"
    },
    {
        "questionIdx": 150820,
        "questionPatternModEntities": "What did a spouse of M0 produce , write , direct , executive produce , and edit",
        "questionTemplate": "What did a [ROLE_SIMPLE] of [entity] [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x0 P3 ?x1 .\n?x0 P4 ?x1 .\n?x1 P5 M0 .\nFILTER ( ?x1 != M0 )\n}",
        "recursionDepth": 43,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 ?x1 .\n?x0 wdt:P1040 ?x1 .\n?x0 wdt:P1431 ?x1 .\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x0 wdt:P58 ?x1 .\n?x1 wdt:P26 wd:Q6813152 .\nFILTER ( ?x1 != wd:Q6813152 )\n}LIMIT 1",
        "questionWithBrackets": "What did a spouse of [Mellody Hobson] produce , write , direct , executive produce , and edit"
    },
    {
        "questionIdx": 150821,
        "questionPatternModEntities": "What did a spouse of M1 produce and M0 distribute",
        "questionTemplate": "What did a [ROLE_SIMPLE] of [entity] [VP_SIMPLE] and [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 ?x1 .\n?x1 P2 M1 .\nFILTER ( ?x1 != M1 )\n}",
        "recursionDepth": 27,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P750 wd:Q8093 .\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x1 wdt:P26 wd:Q12959049 .\nFILTER ( ?x1 != wd:Q12959049 )\n}",
        "questionWithBrackets": "What did a spouse of [Yasuko Miyamoto] produce and [Nintendo] distribute"
    },
    {
        "questionIdx": 150832,
        "questionPatternModEntities": "What did a spouse of M0 executive produce , edit , produce , and write",
        "questionTemplate": "What did a [ROLE_SIMPLE] of [entity] [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x0 P3 ?x1 .\n?x1 P4 M0 .\nFILTER ( ?x1 != M0 )\n}",
        "recursionDepth": 37,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1040 ?x1 .\n?x0 wdt:P1431 ?x1 .\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x0 wdt:P58 ?x1 .\n?x1 wdt:P26 wd:Q3032150 .\nFILTER ( ?x1 != wd:Q3032150 )\n}LIMIT 1",
        "questionWithBrackets": "What did a spouse of [Y\u014dko Yaguchi] executive produce , edit , produce , and write"
    },
    {
        "questionIdx": 150839,
        "questionPatternModEntities": "What did a spouse of M0 executive produce , direct , produce , and edit",
        "questionTemplate": "What did a [ROLE_SIMPLE] of [entity] [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x0 P3 ?x1 .\n?x1 P4 M0 .\nFILTER ( ?x1 != M0 )\n}",
        "recursionDepth": 37,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 ?x1 .\n?x0 wdt:P1040 ?x1 .\n?x0 wdt:P1431 ?x1 .\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x1 wdt:P26 wd:Q6813152 .\nFILTER ( ?x1 != wd:Q6813152 )\n}LIMIT 1",
        "questionWithBrackets": "What did a spouse of [Mellody Hobson] executive produce , direct , produce , and edit"
    },
    {
        "questionIdx": 150843,
        "questionPatternModEntities": "What did a spouse of M0 write , direct , and edit",
        "questionTemplate": "What did a [ROLE_SIMPLE] of [entity] [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x1 P3 M0 .\nFILTER ( ?x1 != M0 )\n}",
        "recursionDepth": 30,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 ?x1 .\n?x0 wdt:P1040 ?x1 .\n?x0 wdt:P58 ?x1 .\n?x1 wdt:P26 wd:Q3032150 .\nFILTER ( ?x1 != wd:Q3032150 )\n}LIMIT 1",
        "questionWithBrackets": "What did a spouse of [Y\u014dko Yaguchi] write , direct , and edit"
    },
    {
        "questionIdx": 150849,
        "questionPatternModEntities": "What did a spouse of M0 executive produce , edit , direct , and produce",
        "questionTemplate": "What did a [ROLE_SIMPLE] of [entity] [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x0 P3 ?x1 .\n?x1 P4 M0 .\nFILTER ( ?x1 != M0 )\n}",
        "recursionDepth": 37,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 ?x1 .\n?x0 wdt:P1040 ?x1 .\n?x0 wdt:P1431 ?x1 .\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x1 wdt:P26 wd:Q3032150 .\nFILTER ( ?x1 != wd:Q3032150 )\n}LIMIT 1",
        "questionWithBrackets": "What did a spouse of [Y\u014dko Yaguchi] executive produce , edit , direct , and produce"
    },
    {
        "questionIdx": 150851,
        "questionPatternModEntities": "What did a spouse of M0 executive produce , write , direct , produce , and edit",
        "questionTemplate": "What did a [ROLE_SIMPLE] of [entity] [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x0 P3 ?x1 .\n?x0 P4 ?x1 .\n?x1 P5 M0 .\nFILTER ( ?x1 != M0 )\n}",
        "recursionDepth": 43,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 ?x1 .\n?x0 wdt:P1040 ?x1 .\n?x0 wdt:P1431 ?x1 .\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x0 wdt:P58 ?x1 .\n?x1 wdt:P26 wd:Q3032150 .\nFILTER ( ?x1 != wd:Q3032150 )\n}LIMIT 1",
        "questionWithBrackets": "What did a spouse of [Y\u014dko Yaguchi] executive produce , write , direct , produce , and edit"
    },
    {
        "questionIdx": 150855,
        "questionPatternModEntities": "What did a spouse of M0 produce , write , direct , and executive produce",
        "questionTemplate": "What did a [ROLE_SIMPLE] of [entity] [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x0 P3 ?x1 .\n?x1 P4 M0 .\nFILTER ( ?x1 != M0 )\n}",
        "recursionDepth": 37,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 ?x1 .\n?x0 wdt:P1431 ?x1 .\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x0 wdt:P58 ?x1 .\n?x1 wdt:P26 wd:Q6968092 .\nFILTER ( ?x1 != wd:Q6968092 )\n}LIMIT 1",
        "questionWithBrackets": "What did a spouse of [Natalia Tudge] produce , write , direct , and executive produce"
    },
    {
        "questionIdx": 150856,
        "questionPatternModEntities": "What did a spouse of M0 direct , write , produce , and edit",
        "questionTemplate": "What did a [ROLE_SIMPLE] of [entity] [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x0 P3 ?x1 .\n?x1 P4 M0 .\nFILTER ( ?x1 != M0 )\n}",
        "recursionDepth": 36,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 ?x1 .\n?x0 wdt:P1040 ?x1 .\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x0 wdt:P58 ?x1 .\n?x1 wdt:P26 wd:Q3032150 .\nFILTER ( ?x1 != wd:Q3032150 )\n}LIMIT 1",
        "questionWithBrackets": "What did a spouse of [Y\u014dko Yaguchi] direct , write , produce , and edit"
    },
    {
        "questionIdx": 150859,
        "questionPatternModEntities": "What did a spouse of M2 direct , M0 executive produce , and M1 write",
        "questionTemplate": "What did a [ROLE_SIMPLE] of [entity] [VP_SIMPLE] , [entity] [VP_SIMPLE] , and [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P2 ?x1 .\n?x1 P3 M2 .\nFILTER ( ?x1 != M2 )\n}",
        "recursionDepth": 37,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 ?x1 .\n?x0 wdt:P1431 wd:Q56094 .\n?x0 wdt:P58 wd:Q193628 .\n?x1 wdt:P26 wd:Q3525391 .\nFILTER ( ?x1 != wd:Q3525391 )\n}",
        "questionWithBrackets": "What did a spouse of [Thomas Mars] direct , [Francis Ford Coppola] executive produce , and [Sofia Coppola] write"
    },
    {
        "questionIdx": 150863,
        "questionPatternModEntities": "What did a spouse of M1 edit and M0 edit",
        "questionTemplate": "What did a [ROLE_SIMPLE] of [entity] [VP_SIMPLE] and [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P0 M0 .\n?x1 P1 M1 .\nFILTER ( ?x1 != M1 )\n}",
        "recursionDepth": 27,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1040 ?x1 .\n?x0 wdt:P1040 wd:Q511727 .\n?x1 wdt:P26 wd:Q28487 .\nFILTER ( ?x1 != wd:Q28487 )\n}",
        "questionWithBrackets": "What did a spouse of [B\u00e9r\u00e9nice Bejo] edit and [Anne-Sophie Bion] edit"
    },
    {
        "questionIdx": 150864,
        "questionPatternModEntities": "What did a spouse of M0 write , edit , and executive produce",
        "questionTemplate": "What did a [ROLE_SIMPLE] of [entity] [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x1 P3 M0 .\nFILTER ( ?x1 != M0 )\n}",
        "recursionDepth": 31,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1040 ?x1 .\n?x0 wdt:P1431 ?x1 .\n?x0 wdt:P58 ?x1 .\n?x1 wdt:P26 wd:Q3032150 .\nFILTER ( ?x1 != wd:Q3032150 )\n}LIMIT 1",
        "questionWithBrackets": "What did a spouse of [Y\u014dko Yaguchi] write , edit , and executive produce"
    },
    {
        "questionIdx": 150866,
        "questionPatternModEntities": "What did a spouse of M0 write , direct , edit , and executive produce",
        "questionTemplate": "What did a [ROLE_SIMPLE] of [entity] [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x0 P3 ?x1 .\n?x1 P4 M0 .\nFILTER ( ?x1 != M0 )\n}",
        "recursionDepth": 37,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 ?x1 .\n?x0 wdt:P1040 ?x1 .\n?x0 wdt:P1431 ?x1 .\n?x0 wdt:P58 ?x1 .\n?x1 wdt:P26 wd:Q3032150 .\nFILTER ( ?x1 != wd:Q3032150 )\n}LIMIT 1",
        "questionWithBrackets": "What did a spouse of [Y\u014dko Yaguchi] write , direct , edit , and executive produce"
    },
    {
        "questionIdx": 150874,
        "questionPatternModEntities": "What did a spouse of M0 executive produce , edit , and write",
        "questionTemplate": "What did a [ROLE_SIMPLE] of [entity] [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x1 P3 M0 .\nFILTER ( ?x1 != M0 )\n}",
        "recursionDepth": 31,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1040 ?x1 .\n?x0 wdt:P1431 ?x1 .\n?x0 wdt:P58 ?x1 .\n?x1 wdt:P26 wd:Q3032150 .\nFILTER ( ?x1 != wd:Q3032150 )\n}LIMIT 1",
        "questionWithBrackets": "What did a spouse of [Y\u014dko Yaguchi] executive produce , edit , and write"
    },
    {
        "questionIdx": 150885,
        "questionPatternModEntities": "What did a spouse of M0 executive produce , produce , edit , direct , and write",
        "questionTemplate": "What did a [ROLE_SIMPLE] of [entity] [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x0 P3 ?x1 .\n?x0 P4 ?x1 .\n?x1 P5 M0 .\nFILTER ( ?x1 != M0 )\n}",
        "recursionDepth": 43,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 ?x1 .\n?x0 wdt:P1040 ?x1 .\n?x0 wdt:P1431 ?x1 .\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x0 wdt:P58 ?x1 .\n?x1 wdt:P26 wd:Q3032150 .\nFILTER ( ?x1 != wd:Q3032150 )\n}LIMIT 1",
        "questionWithBrackets": "What did a spouse of [Y\u014dko Yaguchi] executive produce , produce , edit , direct , and write"
    },
    {
        "questionIdx": 150886,
        "questionPatternModEntities": "What did a spouse of M0 's spouse edit",
        "questionTemplate": "What did a [ROLE_SIMPLE] of [entity] 's [ROLE_SIMPLE] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x1 P1 ?x2 .\n?x2 P1 M0 .\nFILTER ( ?x1 != ?x2 ) .\nFILTER ( ?x2 != M0 )\n}",
        "recursionDepth": 20,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1040 ?x1 .\n?x1 wdt:P26 ?x2 .\n?x2 wdt:P26 wd:Q83235 .\nFILTER ( ?x1 != ?x2 ) .\nFILTER ( ?x2 != wd:Q83235 )\n}LIMIT 1",
        "questionWithBrackets": "What did a spouse of [Horatio Nelson] 's spouse edit"
    },
    {
        "questionIdx": 151109,
        "questionPatternModEntities": "What did a American employee of M0 , M1 , M2 , and M3 write",
        "questionTemplate": "What did a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] , [entity] , [entity] , and [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x1 P1 M0 .\n?x1 P1 M1 .\n?x1 P1 M2 .\n?x1 P1 M3 .\n?x1 P2 M4\n}",
        "recursionDepth": 31,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P58 ?x1 .\n?x1 wdt:P108 wd:Q1706651 .\n?x1 wdt:P108 wd:Q2740768 .\n?x1 wdt:P108 wd:Q7806570 .\n?x1 wdt:P108 wd:Q1780816 .\n?x1 wdt:P27 wd:Q30\n}",
        "questionWithBrackets": "What did a American employee of [Times Union] , [Look] , [Miami Herald] , and [State University of New York at Albany] write"
    },
    {
        "questionIdx": 151128,
        "questionPatternModEntities": "What did a American sibling of M0 found",
        "questionTemplate": "What did a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x1 P1 M0 .\n?x1 P2 M1 .\nFILTER ( ?x1 != M0 )\n}",
        "recursionDepth": 21,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P112 ?x1 .\n?x1 wdt:P27 wd:Q30 .\n?x1 wdt:P3373 wd:Q221997 .\nFILTER ( ?x1 != wd:Q221997 )\n}LIMIT 1",
        "questionWithBrackets": "What did a American sibling of [Jeb Bush] found"
    },
    {
        "questionIdx": 151132,
        "questionPatternModEntities": "What did a American spouse of M1 executive produce and direct",
        "questionTemplate": "What did a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] [VP_SIMPLE] and [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x1 P2 M0 .\n?x1 P3 M1 .\nFILTER ( ?x1 != M1 )\n}",
        "recursionDepth": 30,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 ?x1 .\n?x0 wdt:P1431 ?x1 .\n?x1 wdt:P27 wd:Q30 .\n?x1 wdt:P26 wd:Q717669 .\nFILTER ( ?x1 != wd:Q717669 )\n}LIMIT 1",
        "questionWithBrackets": "What did a American spouse of [Lin Feng-jiao] executive produce and direct"
    },
    {
        "questionIdx": 151204,
        "questionPatternModEntities": "What did a Italian sibling of M0 found",
        "questionTemplate": "What did a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x1 P1 M0 .\n?x1 P2 M1 .\nFILTER ( ?x1 != M0 )\n}",
        "recursionDepth": 21,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P112 ?x1 .\n?x1 wdt:P27 wd:Q38 .\n?x1 wdt:P3373 wd:Q2679849 .\nFILTER ( ?x1 != wd:Q2679849 )\n}LIMIT 1",
        "questionWithBrackets": "What did a Italian sibling of [Francesco Pacelli] found"
    },
    {
        "questionIdx": 151212,
        "questionPatternModEntities": "What did a Italian spouse of M2 produce and M0 edit",
        "questionTemplate": "What did a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] [VP_SIMPLE] and [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 M0 .\n?x1 P2 M1 .\n?x1 P3 M2 .\nFILTER ( ?x1 != M2 )\n}",
        "recursionDepth": 32,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1040 wd:Q3137 .\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x1 wdt:P27 wd:Q38 .\n?x1 wdt:P26 wd:Q404341 .\nFILTER ( ?x1 != wd:Q404341 )\n}",
        "questionWithBrackets": "What did a Italian spouse of [Grace Hightower] produce and [Jim Clark] edit"
    },
    {
        "questionIdx": 151719,
        "questionPatternModEntities": "What did a employee of M0 write",
        "questionTemplate": "What did a [ROLE_SIMPLE] of [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x1 P1 M0\n}",
        "recursionDepth": 16,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P58 ?x1 .\n?x1 wdt:P108 wd:Q175529\n}LIMIT 1",
        "questionWithBrackets": "What did a employee of [John Paul II Catholic University of Lublin] write"
    },
    {
        "questionIdx": 151725,
        "questionPatternModEntities": "What did a employee of M4 edit , M1 , M2 , and M3 direct , and M0 edit",
        "questionTemplate": "What did a [ROLE_SIMPLE] of [entity] [VP_SIMPLE] , [entity] , [entity] , and [entity] [VP_SIMPLE] , and [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\n?x0 P1 M3 .\n?x1 P2 M4\n}",
        "recursionDepth": 43,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 wd:Q72267 .\n?x0 wdt:P57 wd:Q69645 .\n?x0 wdt:P57 wd:Q1751108 .\n?x0 wdt:P1040 ?x1 .\n?x0 wdt:P1040 wd:Q274244 .\n?x1 wdt:P108 wd:Q454464\n}",
        "questionWithBrackets": "What did a employee of [William Churchill deMille] edit , [Fritz Feld] , [Cecil B. DeMille] , and [Frank Urson] direct , and [Anne Bauchens] edit"
    },
    {
        "questionIdx": 151729,
        "questionPatternModEntities": "What did a employee of M0 direct",
        "questionTemplate": "What did a [ROLE_SIMPLE] of [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x1 P1 M0\n}",
        "recursionDepth": 16,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 ?x1 .\n?x1 wdt:P108 wd:Q141336\n}LIMIT 1",
        "questionWithBrackets": "What did a employee of [Mosfilm] direct"
    },
    {
        "questionIdx": 151737,
        "questionPatternModEntities": "What did a employee of M0 executive produce , produce , write , edit , and direct",
        "questionTemplate": "What did a [ROLE_SIMPLE] of [entity] [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x0 P3 ?x1 .\n?x0 P4 ?x1 .\n?x1 P5 M0\n}",
        "recursionDepth": 43,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 ?x1 .\n?x0 wdt:P1040 ?x1 .\n?x0 wdt:P1431 ?x1 .\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x0 wdt:P58 ?x1 .\n?x1 wdt:P108 wd:Q174710\n}LIMIT 1",
        "questionWithBrackets": "What did a employee of [University of California, Los Angeles] executive produce , produce , write , edit , and direct"
    },
    {
        "questionIdx": 151745,
        "questionPatternModEntities": "What did a employee of M0 produce , executive produce , direct , and edit",
        "questionTemplate": "What did a [ROLE_SIMPLE] of [entity] [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x0 P3 ?x1 .\n?x1 P4 M0\n}",
        "recursionDepth": 37,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 ?x1 .\n?x0 wdt:P1040 ?x1 .\n?x0 wdt:P1431 ?x1 .\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x1 wdt:P108 wd:Q681250\n}LIMIT 1",
        "questionWithBrackets": "What did a employee of [European Graduate School] produce , executive produce , direct , and edit"
    },
    {
        "questionIdx": 151855,
        "questionPatternModEntities": "What did M4 edit , M0 , M1 , M2 , and M3 write , and M5 's parent write",
        "questionTemplate": "What did [entity] [VP_SIMPLE] , [entity] , [entity] , [entity] , and [entity] [VP_SIMPLE] , and [entity] 's [ROLE_SIMPLE] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P0 M3 .\n?x0 P1 M4 .\n?x1 P2 M5\n}",
        "recursionDepth": 44,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1040 wd:Q55211 .\n?x0 wdt:P58 ?x1 .\n?x0 wdt:P58 wd:Q113628 .\n?x0 wdt:P58 wd:Q55215 .\n?x0 wdt:P58 wd:Q44221 .\n?x0 wdt:P58 wd:Q55238 .\n?x1 wdt:P40|wdt:P355 wd:Q3470077\n}",
        "questionWithBrackets": "What did [Mohsen Makhmalbaf] edit , [Ken Loach] , [Idrissa Ou\u00e9draogo] , [Sean Penn] , and [Alejandro Gonz\u00e1lez I\u00f1\u00e1rritu] write , and [Salom\u00e9 Lelouch] 's parent write"
    },
    {
        "questionIdx": 151870,
        "questionPatternModEntities": "What did M0 , M1 , and M2 write , M3 write , and M4 's parent edit",
        "questionTemplate": "What did [entity] , [entity] , and [entity] [VP_SIMPLE] , [entity] [VP_SIMPLE] , and [entity] 's [ROLE_SIMPLE] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P0 M3 .\n?x0 P1 ?x1 .\n?x1 P2 M4\n}",
        "recursionDepth": 41,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1040 ?x1 .\n?x0 wdt:P58 wd:Q3135269 .\n?x0 wdt:P58 wd:Q11619626 .\n?x0 wdt:P58 wd:Q26776561 .\n?x0 wdt:P58 wd:Q8006 .\n?x1 wdt:P40|wdt:P355 wd:Q1620638\n}",
        "questionWithBrackets": "What did [Masato Ide] , [Ry\u016bz\u014d Kikushima] , and [Hideo Oguni] write , [Akira Kurosawa] write , and [Hisao Kurosawa] 's parent edit"
    },
    {
        "questionIdx": 153125,
        "questionPatternModEntities": "What employee of M0 did M1 employ",
        "questionTemplate": "What [ROLE_SIMPLE] of [entity] did [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1\n}",
        "recursionDepth": 16,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P108 wd:Q84 .\n?x0 wdt:P108 wd:Q83164\n}",
        "questionWithBrackets": "What employee of [East India Company] did [London] employ"
    },
    {
        "questionIdx": 153126,
        "questionPatternModEntities": "What employee of M0 married a Chinese spouse of M2",
        "questionTemplate": "What [ROLE_SIMPLE] of [entity] [VP_SIMPLE] a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 ?x1 .\n?x1 P1 M2 .\n?x1 P2 M1 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x1 != M2 )\n}",
        "recursionDepth": 27,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P108 wd:Q10902170 .\n?x0 wdt:P26 ?x1 .\n?x1 wdt:P27 wd:Q148 .\n?x1 wdt:P26 wd:Q5816 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x1 != wd:Q5816 )\n}",
        "questionWithBrackets": "What employee of [Peking University Library] married a Chinese spouse of [Mao Zedong]"
    },
    {
        "questionIdx": 153168,
        "questionPatternModEntities": "What employee of M0 was M1 's actor",
        "questionTemplate": "What [ROLE_SIMPLE] of [entity] was [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1\n}",
        "recursionDepth": 17,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P453 wd:Q9054901 .\n?x0 wdt:P108 wd:Q207028\n}",
        "questionWithBrackets": "What employee of [Mariinsky Theatre] was [Pamina] 's actor"
    },
    {
        "questionIdx": 153177,
        "questionPatternModEntities": "What employee of M0 and M1 was influenced by M2",
        "questionTemplate": "What [ROLE_SIMPLE] of [entity] and [entity] was [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P1 M2\n}",
        "recursionDepth": 21,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P737 wd:Q42 .\n?x0 wdt:P108 wd:Q34433 .\n?x0 wdt:P108 wd:Q168756\n}",
        "questionWithBrackets": "What employee of [University of Oxford] and [University of California, Berkeley] was influenced by [Douglas Adams]"
    },
    {
        "questionIdx": 153244,
        "questionPatternModEntities": "What employee of M0 was influenced by M1",
        "questionTemplate": "What [ROLE_SIMPLE] of [entity] was [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1\n}",
        "recursionDepth": 18,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P737 wd:Q868 .\n?x0 wdt:P108 wd:Q81162\n}",
        "questionWithBrackets": "What employee of [Magdalen College] was influenced by [Aristotle]"
    },
    {
        "questionIdx": 153255,
        "questionPatternModEntities": "What employee of M0 was M1 's parent",
        "questionTemplate": "What [ROLE_SIMPLE] of [entity] was [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1\n}",
        "recursionDepth": 17,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q102649059 .\n?x0 wdt:P108 wd:Q95\n}",
        "questionWithBrackets": "What employee of [Google] was [Kavya Pichai] 's parent"
    },
    {
        "questionIdx": 153964,
        "questionPatternModEntities": "What female American sibling of M0 did M1 and M2 employ",
        "questionTemplate": "What [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] did [entity] and [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\n?x0 P2 M3 .\n?x0 P3 M4 .\nFILTER ( ?x0 != M0 )\n}",
        "recursionDepth": 30,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P108 wd:Q49115 .\n?x0 wdt:P108 wd:Q174710 .\n?x0 wdt:P21 wd:Q6581072 .\n?x0 wdt:P27 wd:Q30 .\n?x0 wdt:P3373 wd:Q7532 .\nFILTER ( ?x0 != wd:Q7532 )\n}",
        "questionWithBrackets": "What female American sibling of [Judith Estrin] did [University of California, Los Angeles] and [Cornell University] employ"
    },
    {
        "questionIdx": 154123,
        "questionPatternModEntities": "What female actor played M0 and M1 and played M2",
        "questionTemplate": "What [ADJECTIVE_SIMPLE] [NP_SIMPLE] [VP_SIMPLE] [entity] and [entity] and [VP_SIMPLE] [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P1 M3\n}",
        "recursionDepth": 33,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P453 wd:Q12742668 .\n?x0 wdt:P453 wd:Q50386809 .\n?x0 wdt:P453 wd:Q50926083 .\n?x0 wdt:P21 wd:Q6581072\n}",
        "questionWithBrackets": "What female actor played [Carmen] and [Princess Turandot] and played [Lucia Ashton]"
    },
    {
        "questionIdx": 154361,
        "questionPatternModEntities": "What female employee of M0 was influenced by M1 , influenced by M2 , and influenced by M3",
        "questionTemplate": "What [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] was [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\n?x0 P1 M3 .\n?x0 P2 M4\n}",
        "recursionDepth": 42,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P737 wd:Q692 .\n?x0 wdt:P737 wd:Q81447 .\n?x0 wdt:P737 wd:Q991 .\n?x0 wdt:P108 wd:Q391028 .\n?x0 wdt:P21 wd:Q6581072\n}",
        "questionWithBrackets": "What female employee of [University of British Columbia] was influenced by [William Shakespeare] , influenced by [Fyodor Dostoyevsky] , and influenced by [Aldous Huxley]"
    },
    {
        "questionIdx": 154820,
        "questionPatternModEntities": "What female sibling of M0 was influenced by M1 , M2 , M3 , and M4",
        "questionTemplate": "What [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] was [VP_SIMPLE] by [entity] , [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\n?x0 P1 M3 .\n?x0 P1 M4 .\n?x0 P2 M5 .\nFILTER ( ?x0 != M0 )\n}",
        "recursionDepth": 33,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P737 wd:Q868 .\n?x0 wdt:P737 wd:Q9391 .\n?x0 wdt:P737 wd:Q9438 .\n?x0 wdt:P737 wd:Q350239 .\n?x0 wdt:P21 wd:Q6581072 .\n?x0 wdt:P3373 wd:Q75577586 .\nFILTER ( ?x0 != wd:Q75577586 )\n}",
        "questionWithBrackets": "What female sibling of [Marion Frances Bosanquet] was influenced by [Ludwig Wittgenstein] , [Thomas Aquinas] , [Thomas Nagel] , and [Aristotle]"
    },
    {
        "questionIdx": 154821,
        "questionPatternModEntities": "What female sibling of M0 was influenced by M1",
        "questionTemplate": "What [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] was [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P2 M2 .\nFILTER ( ?x0 != M0 )\n}",
        "recursionDepth": 22,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P737 wd:Q868 .\n?x0 wdt:P21 wd:Q6581072 .\n?x0 wdt:P3373 wd:Q29448300 .\nFILTER ( ?x0 != wd:Q29448300 )\n}",
        "questionWithBrackets": "What female sibling of [Jean-Philippe Delsol] was influenced by [Aristotle]"
    },
    {
        "questionIdx": 154824,
        "questionPatternModEntities": "What female sibling of M0 was a actor of M1",
        "questionTemplate": "What [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] was a [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P2 M2 .\nFILTER ( ?x0 != M0 )\n}",
        "recursionDepth": 24,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P453 wd:Q222573 .\n?x0 wdt:P21 wd:Q6581072 .\n?x0 wdt:P3373 wd:Q203236 .\nFILTER ( ?x0 != wd:Q203236 )\n}",
        "questionWithBrackets": "What female sibling of [Pasipha\u00eb] was a actor of [femme fatale]"
    },
    {
        "questionIdx": 154825,
        "questionPatternModEntities": "What female sibling of M0 was influenced by M1 and influenced by M2",
        "questionTemplate": "What [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] was [VP_SIMPLE] by [entity] and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\n?x0 P2 M3 .\nFILTER ( ?x0 != M0 )\n}",
        "recursionDepth": 33,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P737 wd:Q255 .\n?x0 wdt:P737 wd:Q1339 .\n?x0 wdt:P21 wd:Q6581072 .\n?x0 wdt:P3373 wd:Q95404 .\nFILTER ( ?x0 != wd:Q95404 )\n}",
        "questionWithBrackets": "What female sibling of [Rebecka Mendelssohn] was influenced by [Ludwig van Beethoven] and influenced by [Johann Sebastian Bach]"
    },
    {
        "questionIdx": 154826,
        "questionPatternModEntities": "What female sibling of M0 did M2 marry",
        "questionTemplate": "What [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] did [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P2 M2 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x0 != M2 )\n}",
        "recursionDepth": 21,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P21 wd:Q6581072 .\n?x0 wdt:P3373 wd:Q939 .\n?x0 wdt:P26 wd:Q116972 .\nFILTER ( ?x0 != wd:Q116972 ) .\nFILTER ( ?x0 != wd:Q939 )\n}",
        "questionWithBrackets": "What female sibling of [Pedro I of Brazil] did [Nuno Jos\u00e9 Severo de Mendo\u00e7a Rolim de Moura Barreto, 1st Duke of Loul\u00e9] marry"
    },
    {
        "questionIdx": 154834,
        "questionPatternModEntities": "What female sibling of M0 was influenced by M1 and influenced by M2 , M3 , and M4",
        "questionTemplate": "What [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] was [VP_SIMPLE] by [entity] and [VP_SIMPLE] by [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\n?x0 P1 M3 .\n?x0 P1 M4 .\n?x0 P2 M5 .\nFILTER ( ?x0 != M0 )\n}",
        "recursionDepth": 40,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P737 wd:Q892 .\n?x0 wdt:P737 wd:Q943567 .\n?x0 wdt:P737 wd:Q909 .\n?x0 wdt:P737 wd:Q692 .\n?x0 wdt:P21 wd:Q6581072 .\n?x0 wdt:P3373 wd:Q6372006 .\nFILTER ( ?x0 != wd:Q6372006 )\n}",
        "questionWithBrackets": "What female sibling of [Karl Kroeber] was influenced by [Paul Goodman] and influenced by [J.\u00a0R.\u00a0R. Tolkien] , [Jorge Luis Borges] , and [William Shakespeare]"
    },
    {
        "questionIdx": 154837,
        "questionPatternModEntities": "What female sibling of M0 was influenced by M1 , influenced by M2 , and influenced by M3",
        "questionTemplate": "What [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] was [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\n?x0 P1 M3 .\n?x0 P2 M4 .\nFILTER ( ?x0 != M0 )\n}",
        "recursionDepth": 42,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P737 wd:Q255 .\n?x0 wdt:P737 wd:Q46096 .\n?x0 wdt:P737 wd:Q1339 .\n?x0 wdt:P21 wd:Q6581072 .\n?x0 wdt:P3373 wd:Q95404 .\nFILTER ( ?x0 != wd:Q95404 )\n}",
        "questionWithBrackets": "What female sibling of [Rebecka Mendelssohn] was influenced by [Felix Mendelssohn] , influenced by [Ludwig van Beethoven] , and influenced by [Johann Sebastian Bach]"
    },
    {
        "questionIdx": 154838,
        "questionPatternModEntities": "What female sibling of M0 was influenced by M1 , M2 , and M3",
        "questionTemplate": "What [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] was [VP_SIMPLE] by [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\n?x0 P1 M3 .\n?x0 P2 M4 .\nFILTER ( ?x0 != M0 )\n}",
        "recursionDepth": 30,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P737 wd:Q255 .\n?x0 wdt:P737 wd:Q46096 .\n?x0 wdt:P737 wd:Q1339 .\n?x0 wdt:P21 wd:Q6581072 .\n?x0 wdt:P3373 wd:Q95404 .\nFILTER ( ?x0 != wd:Q95404 )\n}",
        "questionWithBrackets": "What female sibling of [Rebecka Mendelssohn] was influenced by [Felix Mendelssohn] , [Ludwig van Beethoven] , and [Johann Sebastian Bach]"
    },
    {
        "questionIdx": 154841,
        "questionPatternModEntities": "What female sibling of M0 was M2 's spouse",
        "questionTemplate": "What [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] was [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P2 M2 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x0 != M2 )\n}",
        "recursionDepth": 22,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P21 wd:Q6581072 .\n?x0 wdt:P3373 wd:Q352 .\n?x0 wdt:P26 wd:Q1903961 .\nFILTER ( ?x0 != wd:Q352 ) .\nFILTER ( ?x0 != wd:Q1903961 )\n}",
        "questionWithBrackets": "What female sibling of [Adolf Hitler] was [Martin Heinrich Hammitzsch] 's spouse"
    },
    {
        "questionIdx": 154844,
        "questionPatternModEntities": "What female sibling of M0 married M2",
        "questionTemplate": "What [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] [VP_SIMPLE] [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P2 M2 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x0 != M2 )\n}",
        "recursionDepth": 21,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P21 wd:Q6581072 .\n?x0 wdt:P3373 wd:Q2677 .\n?x0 wdt:P26 wd:Q152099 .\nFILTER ( ?x0 != wd:Q152099 ) .\nFILTER ( ?x0 != wd:Q2677 )\n}",
        "questionWithBrackets": "What female sibling of [Wilhelm II] married [Constantine I of Greece]"
    },
    {
        "questionIdx": 154845,
        "questionPatternModEntities": "What female sibling of M0 was M1 's sibling and spouse",
        "questionTemplate": "What [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] was [entity] 's [ROLE_SIMPLE] and [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P1 M2 .\n?x0 P2 M1 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x0 != M1 ) .\nFILTER ( ?x0 != M1 )\n}",
        "recursionDepth": 27,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P21 wd:Q6581072 .\n?x0 wdt:P3373 wd:Q3345 .\n?x0 wdt:P3373 wd:Q3340 .\n?x0 wdt:P26 wd:Q3340 .\nFILTER ( ?x0 != wd:Q3345 ) .\nFILTER ( ?x0 != wd:Q3340 ) .\nFILTER ( ?x0 != wd:Q3340 )\n}",
        "questionWithBrackets": "What female sibling of [Ptolemy X Alexander I] was [Ptolemy IX Lathyros] 's sibling and spouse"
    },
    {
        "questionIdx": 154858,
        "questionPatternModEntities": "What female sibling of M0 did M1 influence",
        "questionTemplate": "What [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] did [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P2 M2 .\nFILTER ( ?x0 != M0 )\n}",
        "recursionDepth": 21,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P737 wd:Q255 .\n?x0 wdt:P21 wd:Q6581072 .\n?x0 wdt:P3373 wd:Q95404 .\nFILTER ( ?x0 != wd:Q95404 )\n}",
        "questionWithBrackets": "What female sibling of [Rebecka Mendelssohn] did [Ludwig van Beethoven] influence"
    },
    {
        "questionIdx": 154873,
        "questionPatternModEntities": "What female spouse of M2 did M0 influence",
        "questionTemplate": "What [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] did [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P2 M2 .\nFILTER ( ?x0 != M2 )\n}",
        "recursionDepth": 21,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P737 wd:Q255 .\n?x0 wdt:P21 wd:Q6581072 .\n?x0 wdt:P26 wd:Q560757 .\nFILTER ( ?x0 != wd:Q560757 )\n}",
        "questionWithBrackets": "What female spouse of [Wilhelm Hensel] did [Ludwig van Beethoven] influence"
    },
    {
        "questionIdx": 154889,
        "questionPatternModEntities": "What female spouse of M1 did M2 , M3 , and M4 marry",
        "questionTemplate": "What [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] did [entity] , [entity] , and [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\n?x0 P1 M3 .\n?x0 P1 M4 .\nFILTER ( ?x0 != M1 ) .\nFILTER ( ?x0 != M2 ) .\nFILTER ( ?x0 != M3 ) .\nFILTER ( ?x0 != M4 )\n}",
        "recursionDepth": 28,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P21 wd:Q6581072 .\n?x0 wdt:P26 wd:Q2831 .\n?x0 wdt:P26 wd:Q42869 .\n?x0 wdt:P26 wd:Q5220517 .\n?x0 wdt:P26 wd:Q16194168 .\nFILTER ( ?x0 != wd:Q2831 ) .\nFILTER ( ?x0 != wd:Q42869 ) .\nFILTER ( ?x0 != wd:Q5220517 ) .\nFILTER ( ?x0 != wd:Q16194168 )\n}",
        "questionWithBrackets": "What female spouse of [Michael Lockwood] did [Nicolas Cage] , [Danny Keough] , and [Michael Jackson] marry"
    },
    {
        "questionIdx": 154906,
        "questionPatternModEntities": "What female spouse of M2 was a American spouse of M3",
        "questionTemplate": "What [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] was a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P2 M2 .\n?x0 P2 M3 .\nFILTER ( ?x0 != M2 ) .\nFILTER ( ?x0 != M3 )\n}",
        "recursionDepth": 29,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P21 wd:Q6581072 .\n?x0 wdt:P27 wd:Q30 .\n?x0 wdt:P26 wd:Q51535 .\n?x0 wdt:P26 wd:Q323781 .\nFILTER ( ?x0 != wd:Q51535 ) .\nFILTER ( ?x0 != wd:Q323781 )\n}",
        "questionWithBrackets": "What female spouse of [Vincente Minnelli] was a American spouse of [Sidney Luft]"
    },
    {
        "questionIdx": 154907,
        "questionPatternModEntities": "What female spouse of M2 was influenced by M0",
        "questionTemplate": "What [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] was [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P2 M2 .\nFILTER ( ?x0 != M2 )\n}",
        "recursionDepth": 22,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P737 wd:Q868 .\n?x0 wdt:P21 wd:Q6581072 .\n?x0 wdt:P26 wd:Q1047458 .\nFILTER ( ?x0 != wd:Q1047458 )\n}",
        "questionWithBrackets": "What female spouse of [Casimir Dudevant] was influenced by [Aristotle]"
    },
    {
        "questionIdx": 154908,
        "questionPatternModEntities": "What female spouse of M4 did M0 , M1 , and M2 influence",
        "questionTemplate": "What [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] did [entity] , [entity] , and [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P1 M3 .\n?x0 P2 M4 .\nFILTER ( ?x0 != M4 )\n}",
        "recursionDepth": 28,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P737 wd:Q868 .\n?x0 wdt:P737 wd:Q79759 .\n?x0 wdt:P737 wd:Q692 .\n?x0 wdt:P21 wd:Q6581072 .\n?x0 wdt:P26 wd:Q1047458 .\nFILTER ( ?x0 != wd:Q1047458 )\n}",
        "questionWithBrackets": "What female spouse of [Casimir Dudevant] did [John Milton] , [Aristotle] , and [William Shakespeare] influence"
    },
    {
        "questionIdx": 159966,
        "questionPatternModEntities": "What male German American spouse of M5 did M0 and M1 employ",
        "questionTemplate": "What [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] did [entity] and [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P1 M2 .\n?x0 P1 M3 .\n?x0 P2 M4 .\n?x0 P3 M5 .\nFILTER ( ?x0 != M5 )\n}",
        "recursionDepth": 35,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P108 wd:Q124354 .\n?x0 wdt:P108 wd:Q659706 .\n?x0 wdt:P21 wd:Q6581097 .\n?x0 wdt:P27 wd:Q183 .\n?x0 wdt:P27 wd:Q30 .\n?x0 wdt:P26 wd:Q55844960 .\nFILTER ( ?x0 != wd:Q55844960 )\n}",
        "questionWithBrackets": "What male German American spouse of [Ada Mies] did [Bauhaus] and [Illinois Institute of Technology] employ"
    },
    {
        "questionIdx": 160057,
        "questionPatternModEntities": "What male actor of M0 did M2 marry",
        "questionTemplate": "What [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] did [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P2 M2 .\nFILTER ( ?x0 != M2 )\n}",
        "recursionDepth": 21,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P453 wd:Q50807639 .\n?x0 wdt:P21 wd:Q6581097 .\n?x0 wdt:P26 wd:Q1560129 .\nFILTER ( ?x0 != wd:Q1560129 )\n}",
        "questionWithBrackets": "What male actor of [Lohengrin] did [Margarete Joswig] marry"
    },
    {
        "questionIdx": 160348,
        "questionPatternModEntities": "What male employee of M0 did M1 and M2 influence",
        "questionTemplate": "What [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] did [entity] and [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\n?x0 P2 M3\n}",
        "recursionDepth": 25,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P737 wd:Q42 .\n?x0 wdt:P737 wd:Q33760 .\n?x0 wdt:P108 wd:Q168756 .\n?x0 wdt:P21 wd:Q6581097\n}",
        "questionWithBrackets": "What male employee of [University of California, Berkeley] did [Douglas Adams] and [Bertrand Russell] influence"
    },
    {
        "questionIdx": 160461,
        "questionPatternModEntities": "What male parent of M2 did M0 influence and marry",
        "questionTemplate": "What [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] did [entity] [VP_SIMPLE] and [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P2 M2 .\n?x0 P3 M0 .\nFILTER ( ?x0 != M0 )\n}",
        "recursionDepth": 29,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P737 wd:Q93514 .\n?x0 wdt:P40|wdt:P355 wd:Q1099928 .\n?x0 wdt:P21 wd:Q6581097 .\n?x0 wdt:P26 wd:Q93514 .\nFILTER ( ?x0 != wd:Q93514 )\n}",
        "questionWithBrackets": "What male parent of [Clemens Eich] did [Ilse Aichinger] influence and marry"
    },
    {
        "questionIdx": 160468,
        "questionPatternModEntities": "What male parent of M2 did M0 marry and influence",
        "questionTemplate": "What [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] did [entity] [VP_SIMPLE] and [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P2 M2 .\n?x0 P3 M0 .\nFILTER ( ?x0 != M0 )\n}",
        "recursionDepth": 29,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P737 wd:Q93514 .\n?x0 wdt:P40|wdt:P355 wd:Q1099928 .\n?x0 wdt:P21 wd:Q6581097 .\n?x0 wdt:P26 wd:Q93514 .\nFILTER ( ?x0 != wd:Q93514 )\n}",
        "questionWithBrackets": "What male parent of [Clemens Eich] did [Ilse Aichinger] marry and influence"
    },
    {
        "questionIdx": 160817,
        "questionPatternModEntities": "What male sibling of M0 did M1 , M2 , M3 , M4 , and M5 influence",
        "questionTemplate": "What [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] did [entity] , [entity] , [entity] , [entity] , and [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\n?x0 P1 M3 .\n?x0 P1 M4 .\n?x0 P1 M5 .\n?x0 P2 M6 .\nFILTER ( ?x0 != M0 )\n}",
        "recursionDepth": 34,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P737 wd:Q502 .\n?x0 wdt:P737 wd:Q692 .\n?x0 wdt:P737 wd:Q5879 .\n?x0 wdt:P737 wd:Q868 .\n?x0 wdt:P737 wd:Q859 .\n?x0 wdt:P21 wd:Q6581097 .\n?x0 wdt:P3373 wd:Q77377 .\nFILTER ( ?x0 != wd:Q77377 )\n}",
        "questionWithBrackets": "What male sibling of [Elisabeth F\u00f6rster-Nietzsche] did [Aristotle] , [William Shakespeare] , [Stendhal] , [Johann Wolfgang von Goethe] , and [Plato] influence"
    },
    {
        "questionIdx": 160841,
        "questionPatternModEntities": "What male spouse of M2 was M0 's sibling and spouse",
        "questionTemplate": "What [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] was [entity] 's [ROLE_SIMPLE] and [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P2 M0 .\n?x0 P2 M2 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x0 != M2 )\n}",
        "recursionDepth": 27,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P21 wd:Q6581097 .\n?x0 wdt:P3373 wd:Q38012 .\n?x0 wdt:P26 wd:Q159168 .\n?x0 wdt:P26 wd:Q38012 .\nFILTER ( ?x0 != wd:Q159168 ) .\nFILTER ( ?x0 != wd:Q38012 ) .\nFILTER ( ?x0 != wd:Q38012 )\n}",
        "questionWithBrackets": "What male spouse of [Themis] was [Hera] 's sibling and spouse"
    },
    {
        "questionIdx": 160849,
        "questionPatternModEntities": "What male spouse of M2 married M1",
        "questionTemplate": "What [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] [VP_SIMPLE] [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\nFILTER ( ?x0 != M1 ) .\nFILTER ( ?x0 != M2 )\n}",
        "recursionDepth": 21,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P21 wd:Q6581097 .\n?x0 wdt:P26 wd:Q2259 .\n?x0 wdt:P26 wd:Q152626 .\nFILTER ( ?x0 != wd:Q2259 ) .\nFILTER ( ?x0 != wd:Q152626 )\n}",
        "questionWithBrackets": "What male spouse of [Julia the Elder] married [Pomponia Caecilia Attica]"
    },
    {
        "questionIdx": 160860,
        "questionPatternModEntities": "What male spouse of M3 was influenced by M0 and M1",
        "questionTemplate": "What [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] was [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P1 M2 .\n?x0 P2 M3 .\nFILTER ( ?x0 != M3 )\n}",
        "recursionDepth": 27,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P737 wd:Q502 .\n?x0 wdt:P737 wd:Q102513 .\n?x0 wdt:P21 wd:Q6581097 .\n?x0 wdt:P26 wd:Q271934 .\nFILTER ( ?x0 != wd:Q271934 )\n}",
        "questionWithBrackets": "What male spouse of [Sophia Tolstaya] was influenced by [Stendhal] and [Harriet Beecher Stowe]"
    },
    {
        "questionIdx": 160861,
        "questionPatternModEntities": "What male spouse of M2 did M0 influence and marry",
        "questionTemplate": "What [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] did [entity] [VP_SIMPLE] and [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P2 M0 .\n?x0 P2 M2 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x0 != M2 )\n}",
        "recursionDepth": 29,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P737 wd:Q288348 .\n?x0 wdt:P21 wd:Q6581097 .\n?x0 wdt:P26 wd:Q288348 .\n?x0 wdt:P26 wd:Q2336896 .\nFILTER ( ?x0 != wd:Q288348 ) .\nFILTER ( ?x0 != wd:Q2336896 )\n}",
        "questionWithBrackets": "What male spouse of [Aleida March] did [Hilda Gadea] influence and marry"
    },
    {
        "questionIdx": 160882,
        "questionPatternModEntities": "What male spouse of M3 was influenced by M0 and married M2",
        "questionTemplate": "What [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] was [VP_SIMPLE] by [entity] and [VP_SIMPLE] [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P2 M2 .\n?x0 P2 M3 .\nFILTER ( ?x0 != M2 ) .\nFILTER ( ?x0 != M3 )\n}",
        "recursionDepth": 34,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P737 wd:Q296 .\n?x0 wdt:P21 wd:Q6581097 .\n?x0 wdt:P26 wd:Q463978 .\n?x0 wdt:P26 wd:Q18641919 .\nFILTER ( ?x0 != wd:Q463978 ) .\nFILTER ( ?x0 != wd:Q18641919 )\n}",
        "questionWithBrackets": "What male spouse of [Nina Nikolajewna Andreevskaja] was influenced by [Claude Monet] and married [Gabriele M\u00fcnter]"
    },
    {
        "questionIdx": 161006,
        "questionPatternModEntities": "What parent and sibling of M0 did M1 marry and M2 , M3 , and M4 marry",
        "questionTemplate": "What [ROLE_SIMPLE] and [ROLE_SIMPLE] of [entity] did [entity] [VP_SIMPLE] and [entity] , [entity] , and [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M0 .\n?x0 P2 M1 .\n?x0 P2 M2 .\n?x0 P2 M3 .\n?x0 P2 M4 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x0 != M1 ) .\nFILTER ( ?x0 != M2 ) .\nFILTER ( ?x0 != M3 ) .\nFILTER ( ?x0 != M4 )\n}",
        "recursionDepth": 39,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q187602 .\n?x0 wdt:P3373 wd:Q187602 .\n?x0 wdt:P26 wd:Q748574 .\n?x0 wdt:P26 wd:Q106076620 .\n?x0 wdt:P26 wd:Q1378483 .\n?x0 wdt:P26 wd:Q2293877 .\nFILTER ( ?x0 != wd:Q748574 ) .\nFILTER ( ?x0 != wd:Q187602 ) .\nFILTER ( ?x0 != wd:Q106076620 ) .\nFILTER ( ?x0 != wd:Q1378483 ) .\nFILTER ( ?x0 != wd:Q2293877 )\n}",
        "questionWithBrackets": "What parent and sibling of [Circe] did [Eidyia] marry and [N\u00e9\u00e8re (N\u00e9r\u00e9ide) N\u00e9\u00e8re (N\u00e9r\u00e9ide) inlanguage:fr] , [Asterodeia] , and [Eurylyte] marry"
    },
    {
        "questionIdx": 161007,
        "questionPatternModEntities": "What parent and sibling of M0 did M1 marry",
        "questionTemplate": "What [ROLE_SIMPLE] and [ROLE_SIMPLE] of [entity] did [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M0 .\n?x0 P2 M1 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x0 != M1 )\n}",
        "recursionDepth": 21,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q493 .\n?x0 wdt:P3373 wd:Q493 .\n?x0 wdt:P26 wd:Q17148576 .\nFILTER ( ?x0 != wd:Q493 ) .\nFILTER ( ?x0 != wd:Q17148576 )\n}",
        "questionWithBrackets": "What parent and sibling of [Arthur Rimbaud] did [Vitalie Rimbaud] marry"
    },
    {
        "questionIdx": 161038,
        "questionPatternModEntities": "What parent and spouse of M0 did M1 marry",
        "questionTemplate": "What [ROLE_SIMPLE] and [ROLE_SIMPLE] of [entity] did [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x0 != M1 )\n}",
        "recursionDepth": 21,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q40020 .\n?x0 wdt:P26 wd:Q40020 .\n?x0 wdt:P26 wd:Q40242 .\nFILTER ( ?x0 != wd:Q40020 ) .\nFILTER ( ?x0 != wd:Q40242 )\n}",
        "questionWithBrackets": "What parent and spouse of [Cleopatra VI of Egypt] did [Cleopatra V or VI of Egypt] marry"
    },
    {
        "questionIdx": 161039,
        "questionPatternModEntities": "What parent and spouse of M0 did a spouse and sibling of M1 marry",
        "questionTemplate": "What [ROLE_SIMPLE] and [ROLE_SIMPLE] of [entity] did a [ROLE_SIMPLE] and [ROLE_SIMPLE] of [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 ?x1 .\n?x0 P1 M0 .\n?x1 P1 M1 .\n?x1 P2 M1 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x1 != M1 ) .\nFILTER ( ?x1 != M1 )\n}",
        "recursionDepth": 32,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q261213 .\n?x0 wdt:P26 ?x1 .\n?x0 wdt:P26 wd:Q261213 .\n?x1 wdt:P3373 wd:Q1523 .\n?x1 wdt:P26 wd:Q1523 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x0 != wd:Q261213 ) .\nFILTER ( ?x1 != wd:Q1523 ) .\nFILTER ( ?x1 != wd:Q1523 )\n}",
        "questionWithBrackets": "What parent and spouse of [Bintanath] did a spouse and sibling of [Ramesses II] marry"
    },
    {
        "questionIdx": 161040,
        "questionPatternModEntities": "What parent and spouse of M0 did M1 marry and M2 , M3 , and M4 marry",
        "questionTemplate": "What [ROLE_SIMPLE] and [ROLE_SIMPLE] of [entity] did [entity] [VP_SIMPLE] and [entity] , [entity] , and [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\n?x0 P1 M3 .\n?x0 P1 M4 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x0 != M1 ) .\nFILTER ( ?x0 != M2 ) .\nFILTER ( ?x0 != M3 ) .\nFILTER ( ?x0 != M4 )\n}",
        "recursionDepth": 39,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q270864 .\n?x0 wdt:P26 wd:Q152230 .\n?x0 wdt:P26 wd:Q461520 .\n?x0 wdt:P26 wd:Q262428 .\n?x0 wdt:P26 wd:Q270864 .\n?x0 wdt:P26 wd:Q469955 .\nFILTER ( ?x0 != wd:Q152230 ) .\nFILTER ( ?x0 != wd:Q461520 ) .\nFILTER ( ?x0 != wd:Q262428 ) .\nFILTER ( ?x0 != wd:Q270864 ) .\nFILTER ( ?x0 != wd:Q469955 )\n}",
        "questionWithBrackets": "What parent and spouse of [Sitamun] did [Tadukhipa] marry and [Gilukhipa] , [Iset] , and [Tiye] marry"
    },
    {
        "questionIdx": 161042,
        "questionPatternModEntities": "What parent and spouse of M0 married M1",
        "questionTemplate": "What [ROLE_SIMPLE] and [ROLE_SIMPLE] of [entity] [VP_SIMPLE] [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x0 != M1 )\n}",
        "recursionDepth": 21,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q40020 .\n?x0 wdt:P26 wd:Q40242 .\n?x0 wdt:P26 wd:Q40020 .\nFILTER ( ?x0 != wd:Q40242 ) .\nFILTER ( ?x0 != wd:Q40020 )\n}",
        "questionWithBrackets": "What parent and spouse of [Cleopatra VI of Egypt] married [Cleopatra V or VI of Egypt]"
    },
    {
        "questionIdx": 161058,
        "questionPatternModEntities": "What parent of M1 was employed by M0",
        "questionTemplate": "What [ROLE_SIMPLE] of [entity] was [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1\n}",
        "recursionDepth": 18,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q102649059 .\n?x0 wdt:P108 wd:Q95\n}",
        "questionWithBrackets": "What parent of [Kavya Pichai] was employed by [Google]"
    },
    {
        "questionIdx": 161066,
        "questionPatternModEntities": "What parent of M1 did M0 employ",
        "questionTemplate": "What [ROLE_SIMPLE] of [entity] did [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1\n}",
        "recursionDepth": 16,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q102649059 .\n?x0 wdt:P108 wd:Q95\n}",
        "questionWithBrackets": "What parent of [Kavya Pichai] did [Google] employ"
    },
    {
        "questionIdx": 161072,
        "questionPatternModEntities": "What parent of M1 did M0 influence",
        "questionTemplate": "What [ROLE_SIMPLE] of [entity] did [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1\n}",
        "recursionDepth": 16,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P737 wd:Q254 .\n?x0 wdt:P40|wdt:P355 wd:Q7648698\n}",
        "questionWithBrackets": "What parent of [Susanna Styron] did [Wolfgang Amadeus Mozart] influence"
    },
    {
        "questionIdx": 161085,
        "questionPatternModEntities": "What parent of M1 was M0 's actor",
        "questionTemplate": "What [ROLE_SIMPLE] of [entity] was [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1\n}",
        "recursionDepth": 17,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P453 wd:Q222573 .\n?x0 wdt:P40|wdt:P355 wd:Q779406\n}",
        "questionWithBrackets": "What parent of [Latinus] was [femme fatale] 's actor"
    },
    {
        "questionIdx": 161086,
        "questionPatternModEntities": "What parent of M0 was M1 's spouse 's parent and sibling",
        "questionTemplate": "What [ROLE_SIMPLE] of [entity] was [entity] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE] and [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P1 M0 .\n?x1 P2 M1 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x1 != M1 )\n}",
        "recursionDepth": 26,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P40|wdt:P355 ?x1 .\n?x0 wdt:P40|wdt:P355 wd:Q40022 .\n?x0 wdt:P3373 ?x1 .\n?x1 wdt:P26 wd:Q632595 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x1 != wd:Q632595 )\n}",
        "questionWithBrackets": "What parent of [Berenice IV of Egypt] was [Archelaus] 's spouse 's parent and sibling"
    },
    {
        "questionIdx": 161092,
        "questionPatternModEntities": "What parent of M2 did M0 and M1 found",
        "questionTemplate": "What [ROLE_SIMPLE] of [entity] did [entity] and [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P1 M2\n}",
        "recursionDepth": 20,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P112 wd:Q16 .\n?x0 wdt:P112 wd:Q43 .\n?x0 wdt:P40|wdt:P355 wd:Q7801\n}",
        "questionWithBrackets": "What parent of [International Court of Justice] did [Turkey] and [Canada] found"
    },
    {
        "questionIdx": 161093,
        "questionPatternModEntities": "What parent of M1 was founded by M0",
        "questionTemplate": "What [ROLE_SIMPLE] of [entity] was [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1\n}",
        "recursionDepth": 18,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P112 wd:Q414 .\n?x0 wdt:P40|wdt:P355 wd:Q1577943\n}",
        "questionWithBrackets": "What parent of [United Nations Postal Administration] was founded by [Argentina]"
    },
    {
        "questionIdx": 161100,
        "questionPatternModEntities": "What parent of M1 was a sibling of M0",
        "questionTemplate": "What [ROLE_SIMPLE] of [entity] was a [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M0 )\n}",
        "recursionDepth": 19,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q900649 .\n?x0 wdt:P3373 wd:Q3954 .\nFILTER ( ?x0 != wd:Q3954 )\n}",
        "questionWithBrackets": "What parent of [Apollo in Roman mythology] was a sibling of [Neptune]"
    },
    {
        "questionIdx": 161118,
        "questionPatternModEntities": "What parent of M2 did M0 influence , M3 marry , M4 marry , and M1 influence",
        "questionTemplate": "What [ROLE_SIMPLE] of [entity] did [entity] [VP_SIMPLE] , [entity] [VP_SIMPLE] , [entity] [VP_SIMPLE] , and [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P1 M2 .\n?x0 P2 M3 .\n?x0 P2 M4 .\nFILTER ( ?x0 != M3 ) .\nFILTER ( ?x0 != M4 )\n}",
        "recursionDepth": 45,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P737 wd:Q855 .\n?x0 wdt:P737 wd:Q765165 .\n?x0 wdt:P40|wdt:P355 wd:Q49438459 .\n?x0 wdt:P26 wd:Q977009 .\n?x0 wdt:P26 wd:Q76893 .\nFILTER ( ?x0 != wd:Q977009 ) .\nFILTER ( ?x0 != wd:Q76893 )\n}",
        "questionWithBrackets": "What parent of [Sonja Honecker] did [Leonid Brezhnev] influence , [Edith Baumann] marry , [Margot Honecker] marry , and [Joseph Stalin] influence"
    },
    {
        "questionIdx": 161158,
        "questionPatternModEntities": "What parent of M1 's employee did M0 influence",
        "questionTemplate": "What [ROLE_SIMPLE] of [entity] 's [ROLE_SIMPLE] did [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 ?x1 .\n?x1 P2 M1\n}",
        "recursionDepth": 20,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P737 wd:Q254 .\n?x0 wdt:P40|wdt:P355 ?x1 .\n?x1 wdt:P108 wd:Q1446181\n}",
        "questionWithBrackets": "What parent of [Hunter College] 's employee did [Wolfgang Amadeus Mozart] influence"
    },
    {
        "questionIdx": 161165,
        "questionPatternModEntities": "What parent of M5 was influenced by M0 and M1 , influenced by M2 , influenced by M3 , and influenced by M4",
        "questionTemplate": "What [ROLE_SIMPLE] of [entity] was [VP_SIMPLE] by [entity] and [entity] , [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P0 M3 .\n?x0 P0 M4 .\n?x0 P1 M5\n}",
        "recursionDepth": 50,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P737 wd:Q535 .\n?x0 wdt:P737 wd:Q201221 .\n?x0 wdt:P737 wd:Q43718 .\n?x0 wdt:P737 wd:Q7200 .\n?x0 wdt:P737 wd:Q9312 .\n?x0 wdt:P40|wdt:P355 wd:Q4167247\n}",
        "questionWithBrackets": "What parent of [Lyubov Dostoevskaya] was influenced by [Immanuel Kant] and [Victor Hugo] , influenced by [Alexander Pushkin] , influenced by [Alexander Ivanovich Herzen] , and influenced by [Nikolai Gogol]"
    },
    {
        "questionIdx": 161166,
        "questionPatternModEntities": "What parent of M6 was influenced by M0 and M1 , influenced by M2 , and influenced by M3 , M4 , and M5",
        "questionTemplate": "What [ROLE_SIMPLE] of [entity] was [VP_SIMPLE] by [entity] and [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P0 M3 .\n?x0 P0 M4 .\n?x0 P0 M5 .\n?x0 P1 M6\n}",
        "recursionDepth": 48,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P737 wd:Q535 .\n?x0 wdt:P737 wd:Q642420 .\n?x0 wdt:P737 wd:Q3816 .\n?x0 wdt:P737 wd:Q16867 .\n?x0 wdt:P737 wd:Q5686 .\n?x0 wdt:P737 wd:Q5682 .\n?x0 wdt:P40|wdt:P355 wd:Q4167247\n}",
        "questionWithBrackets": "What parent of [Lyubov Dostoevskaya] was influenced by [Christ] and [George Sand] , influenced by [Charles Dickens] , and influenced by [Edgar Allan Poe] , [Victor Hugo] , and [Miguel de Cervantes]"
    },
    {
        "questionIdx": 161167,
        "questionPatternModEntities": "What parent of M6 was influenced by M0 , M1 , and M2 and was influenced by M3 , M4 , and M5",
        "questionTemplate": "What [ROLE_SIMPLE] of [entity] was [VP_SIMPLE] by [entity] , [entity] , and [entity] and was [VP_SIMPLE] by [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P0 M3 .\n?x0 P0 M4 .\n?x0 P0 M5 .\n?x0 P1 M6\n}",
        "recursionDepth": 45,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P737 wd:Q868 .\n?x0 wdt:P737 wd:Q1398 .\n?x0 wdt:P737 wd:Q7198 .\n?x0 wdt:P737 wd:Q102851 .\n?x0 wdt:P737 wd:Q9438 .\n?x0 wdt:P737 wd:Q6691 .\n?x0 wdt:P40|wdt:P355 wd:Q1161153\n}",
        "questionWithBrackets": "What parent of [Jacopo Alighieri] was influenced by [Virgil] , [Aristotle] , and [Boethius] and was influenced by [Ovid] , [Thomas Aquinas] , and [Homer]"
    },
    {
        "questionIdx": 161198,
        "questionPatternModEntities": "What parent of M0 married M1",
        "questionTemplate": "What [ROLE_SIMPLE] of [entity] [VP_SIMPLE] [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M1 )\n}",
        "recursionDepth": 16,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q983324 .\n?x0 wdt:P26 wd:Q1463 .\nFILTER ( ?x0 != wd:Q1463 )\n}",
        "questionWithBrackets": "What parent of [Bongbong Marcos] married [Ferdinand Marcos]"
    },
    {
        "questionIdx": 161203,
        "questionPatternModEntities": "What parent of M1 was influenced by M0",
        "questionTemplate": "What [ROLE_SIMPLE] of [entity] was [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1\n}",
        "recursionDepth": 17,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P737 wd:Q535 .\n?x0 wdt:P40|wdt:P355 wd:Q1152362\n}",
        "questionWithBrackets": "What parent of [Lev Lvovich Tolstoy] was influenced by [Victor Hugo]"
    },
    {
        "questionIdx": 161261,
        "questionPatternModEntities": "What parent of M6 was employed by M0 and M1 and employed by M2 , M3 , M4 , and M5",
        "questionTemplate": "What [ROLE_SIMPLE] of [entity] was [VP_SIMPLE] by [entity] and [entity] and [VP_SIMPLE] by [entity] , [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P0 M3 .\n?x0 P0 M4 .\n?x0 P0 M5 .\n?x0 P1 M6\n}",
        "recursionDepth": 42,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q118253 .\n?x0 wdt:P108 wd:Q70 .\n?x0 wdt:P108 wd:Q708038 .\n?x0 wdt:P108 wd:Q1729754 .\n?x0 wdt:P108 wd:Q11942 .\n?x0 wdt:P108 wd:Q31519 .\n?x0 wdt:P108 wd:Q168756\n}",
        "questionWithBrackets": "What parent of [Eduard Einstein] was employed by [ETH Z\u00fcrich] and [Kaiser Wilhelm Society] and employed by [German University in Prague] , [Bern] , [University of California, Berkeley] , and [Charles University]"
    },
    {
        "questionIdx": 161275,
        "questionPatternModEntities": "What parent of M5 did M0 , M1 , and M2 employ , M3 employ , and M4 employ",
        "questionTemplate": "What [ROLE_SIMPLE] of [entity] did [entity] , [entity] , and [entity] [VP_SIMPLE] , [entity] [VP_SIMPLE] , and [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P0 M3 .\n?x0 P0 M4 .\n?x0 P1 M5\n}",
        "recursionDepth": 43,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q468357 .\n?x0 wdt:P108 wd:Q70 .\n?x0 wdt:P108 wd:Q31519 .\n?x0 wdt:P108 wd:Q11942 .\n?x0 wdt:P108 wd:Q21578 .\n?x0 wdt:P108 wd:Q152087\n}",
        "questionWithBrackets": "What parent of [Lieserl (Einstein)] did [Bern] , [Humboldt University of Berlin] , and [Princeton University] employ , [ETH Z\u00fcrich] employ , and [Charles University] employ"
    },
    {
        "questionIdx": 161288,
        "questionPatternModEntities": "What parent of M2 was founded by M0 and M1",
        "questionTemplate": "What [ROLE_SIMPLE] of [entity] was [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P1 M2\n}",
        "recursionDepth": 21,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P112 wd:Q414 .\n?x0 wdt:P112 wd:Q36 .\n?x0 wdt:P40|wdt:P355 wd:Q204344\n}",
        "questionWithBrackets": "What parent of [World Food Programme] was founded by [Argentina] and [Poland]"
    },
    {
        "questionIdx": 161343,
        "questionPatternModEntities": "What parent of M5 did M0 found , M1 found , M2 and M3 found , and M4 found",
        "questionTemplate": "What [ROLE_SIMPLE] of [entity] did [entity] [VP_SIMPLE] , [entity] [VP_SIMPLE] , [entity] and [entity] [VP_SIMPLE] , and [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P0 M3 .\n?x0 P0 M4 .\n?x0 P1 M5\n}",
        "recursionDepth": 49,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P112 wd:Q13426199 .\n?x0 wdt:P112 wd:Q16 .\n?x0 wdt:P112 wd:Q145 .\n?x0 wdt:P112 wd:Q20 .\n?x0 wdt:P112 wd:Q142 .\n?x0 wdt:P40|wdt:P355 wd:Q7804\n}",
        "questionWithBrackets": "What parent of [International Monetary Fund] did [Canada] found , [Republic of China (1912\u20131949)] found , m.07ssc and m.0f8l9c found , and [Norway] found"
    },
    {
        "questionIdx": 161356,
        "questionPatternModEntities": "What parent of M5 was founded by M0 , M1 , and M2 , was founded by M3 , and was founded by M4",
        "questionTemplate": "What [ROLE_SIMPLE] of [entity] was [VP_SIMPLE] by [entity] , [entity] , and [entity] , was [VP_SIMPLE] by [entity] , and was [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P0 M3 .\n?x0 P0 M4 .\n?x0 P1 M5\n}",
        "recursionDepth": 49,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P112 wd:Q13426199 .\n?x0 wdt:P112 wd:Q16 .\n?x0 wdt:P112 wd:Q30 .\n?x0 wdt:P112 wd:Q20 .\n?x0 wdt:P112 wd:Q142 .\n?x0 wdt:P40|wdt:P355 wd:Q7801\n}",
        "questionWithBrackets": "What parent of [International Court of Justice] was founded by [Norway] , m.09c7w0 , and [Republic of China (1912\u20131949)] , was founded by m.0f8l9c , and was founded by [Canada]"
    },
    {
        "questionIdx": 161579,
        "questionPatternModEntities": "What parent of a employee of M1 did M0 influence and marry",
        "questionTemplate": "What [ROLE_SIMPLE] of a [ROLE_SIMPLE] of [entity] did [entity] [VP_SIMPLE] and [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 ?x1 .\n?x0 P2 M0 .\n?x1 P3 M1 .\nFILTER ( ?x0 != M0 )\n}",
        "recursionDepth": 30,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P737 wd:Q180099 .\n?x0 wdt:P40|wdt:P355 ?x1 .\n?x0 wdt:P26 wd:Q180099 .\n?x1 wdt:P108 wd:Q1411222 .\nFILTER ( ?x0 != wd:Q180099 )\n}",
        "questionWithBrackets": "What parent of a employee of [George Mason University] did [Margaret Mead] influence and marry"
    },
    {
        "questionIdx": 162585,
        "questionPatternModEntities": "What prequel of M0 was directed by , starred , was produced by , and was edited by M1",
        "questionTemplate": "What [ROLE_SIMPLE] of [entity] was [VP_SIMPLE] by , [VP_SIMPLE] , was [VP_SIMPLE] by , and was [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P2 M1 .\n?x0 P3 M1 .\n?x0 P4 M1\n}",
        "recursionDepth": 42,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 wd:Q207960 .\n?x0 wdt:P1040 wd:Q207960 .\n?x0 wdt:P162|wdt:P272 wd:Q207960 .\n?x0 wdt:P156 wd:Q1991804 .\n?x0 wdt:P161 wd:Q207960\n}",
        "questionWithBrackets": "What prequel of [Gertie on Tour] was directed by , starred , was produced by , and was edited by [Winsor McCay]"
    },
    {
        "questionIdx": 162588,
        "questionPatternModEntities": "What prequel of M0 was written by M1 and M2",
        "questionTemplate": "What [ROLE_SIMPLE] of [entity] was [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P1 M2\n}",
        "recursionDepth": 22,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P156 wd:Q21203766 .\n?x0 wdt:P58 wd:Q4465 .\n?x0 wdt:P58 wd:Q116854\n}",
        "questionWithBrackets": "What prequel of [Kong: Skull Island] was written by [Peter Jackson] and [Philippa Boyens]"
    },
    {
        "questionIdx": 162601,
        "questionPatternModEntities": "What prequel of M0 was written , executive produced , and produced by M1",
        "questionTemplate": "What [ROLE_SIMPLE] of [entity] was [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P2 M1 .\n?x0 P3 M1\n}",
        "recursionDepth": 30,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1431 wd:Q2071 .\n?x0 wdt:P162|wdt:P272 wd:Q2071 .\n?x0 wdt:P156 wd:Q1140578 .\n?x0 wdt:P58 wd:Q2071\n}",
        "questionWithBrackets": "What prequel of [Twin Peaks: Fire Walk with Me] was written , executive produced , and produced by [David Lynch]"
    },
    {
        "questionIdx": 162603,
        "questionPatternModEntities": "What prequel of M0 did M1 , M2 , and M3 direct , edit , and write",
        "questionTemplate": "What [ROLE_SIMPLE] of [entity] did [entity] , [entity] , and [entity] [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\n?x0 P1 M3 .\n?x0 P2 M1 .\n?x0 P2 M2 .\n?x0 P2 M3 .\n?x0 P3 M1 .\n?x0 P3 M2 .\n?x0 P3 M3\n}",
        "recursionDepth": 37,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 wd:Q1291210 .\n?x0 wdt:P57 wd:Q4207234 .\n?x0 wdt:P57 wd:Q16198328 .\n?x0 wdt:P1040 wd:Q1291210 .\n?x0 wdt:P1040 wd:Q4207234 .\n?x0 wdt:P1040 wd:Q16198328 .\n?x0 wdt:P156 wd:Q17183987 .\n?x0 wdt:P58 wd:Q1291210 .\n?x0 wdt:P58 wd:Q4207234 .\n?x0 wdt:P58 wd:Q16198328\n}",
        "questionWithBrackets": "What prequel of [V/H/S: Viral] did [Jason Eisener] , [Gareth Evans] , and [Eduardo S\u00e1nchez] direct , edit , and write"
    },
    {
        "questionIdx": 162608,
        "questionPatternModEntities": "What prequel of M0 starred M1 , was directed by M3 , M4 , and M5 , and was executive produced by M2",
        "questionTemplate": "What [ROLE_SIMPLE] of [entity] [VP_SIMPLE] [entity] , was [VP_SIMPLE] by [entity] , [entity] , and [entity] , and was [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P2 M2 .\n?x0 P3 M3 .\n?x0 P3 M4 .\n?x0 P3 M5\n}",
        "recursionDepth": 48,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 wd:Q20987428 .\n?x0 wdt:P57 wd:Q419454 .\n?x0 wdt:P57 wd:Q2129942 .\n?x0 wdt:P1431 wd:Q432598 .\n?x0 wdt:P156 wd:Q62573305 .\n?x0 wdt:P161 wd:Q39983\n}",
        "questionWithBrackets": "What prequel of [Star Trek: Picard] starred [Anthony Rapp] , was directed by [John Stuart Scott] , [T. J. Scott] , and [Akiva Goldsman] , and was executive produced by [Alex Kurtzman]"
    },
    {
        "questionIdx": 162618,
        "questionPatternModEntities": "What prequel of M0 was edited by M1 and M2 , directed by M5 and M6 , and edited by M3 and M4",
        "questionTemplate": "What [ROLE_SIMPLE] of [entity] was [VP_SIMPLE] by [entity] and [entity] , [VP_SIMPLE] by [entity] and [entity] , and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\n?x0 P1 M3 .\n?x0 P1 M4 .\n?x0 P2 M5 .\n?x0 P2 M6\n}",
        "recursionDepth": 49,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 wd:Q935646 .\n?x0 wdt:P57 wd:Q1318058 .\n?x0 wdt:P1040 wd:Q5836844 .\n?x0 wdt:P1040 wd:Q5658534 .\n?x0 wdt:P1040 wd:Q4022902 .\n?x0 wdt:P1040 wd:Q4023328 .\n?x0 wdt:P156 wd:Q18207699\n}",
        "questionWithBrackets": "What prequel of [ABCs of Death 2] was edited by [Adri\u00e1n Garc\u00eda Bogliano] and [Y\u016bdai Yamaguchi] , directed by [Jake West] and [Xavier Gens] , and edited by [Yoshihiro Nishimura] and [Ernesto D\u00edaz Espinoza]"
    },
    {
        "questionIdx": 162621,
        "questionPatternModEntities": "What prequel of M0 was executive produced by M1 and written by M2 , M3 , M4 , M5 , and M6",
        "questionTemplate": "What [ROLE_SIMPLE] of [entity] was [VP_SIMPLE] by [entity] and [VP_SIMPLE] by [entity] , [entity] , [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P2 M2 .\n?x0 P2 M3 .\n?x0 P2 M4 .\n?x0 P2 M5 .\n?x0 P2 M6\n}",
        "recursionDepth": 42,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1431 wd:Q187364 .\n?x0 wdt:P156 wd:Q21203766 .\n?x0 wdt:P58 wd:Q116854 .\n?x0 wdt:P58 wd:Q271824 .\n?x0 wdt:P58 wd:Q4465 .\n?x0 wdt:P58 wd:Q116861 .\n?x0 wdt:P58 wd:Q446427\n}",
        "questionWithBrackets": "What prequel of [Kong: Skull Island] was executive produced by [Robert Zemeckis] and written by [Edgar Wallace] , [Merian C. Cooper] , [Philippa Boyens] , [Fran Walsh] , and [Peter Jackson]"
    },
    {
        "questionIdx": 162626,
        "questionPatternModEntities": "What prequel of M0 was written by M1 , M2 , and M3",
        "questionTemplate": "What [ROLE_SIMPLE] of [entity] was [VP_SIMPLE] by [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\n?x0 P1 M3\n}",
        "recursionDepth": 24,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P156 wd:Q50380543 .\n?x0 wdt:P58 wd:Q3772 .\n?x0 wdt:P58 wd:Q440900 .\n?x0 wdt:P58 wd:Q470834\n}",
        "questionWithBrackets": "What prequel of [Grave Danger: Part 2] was written by [Anthony E. Zuiker] , [Quentin Tarantino] , and [Carol Mendelsohn]"
    },
    {
        "questionIdx": 162646,
        "questionPatternModEntities": "What prequel of M0 was distributed by M1 , distributed by M2 , M3 , M4 , and M5 , and produced by M6",
        "questionTemplate": "What [ROLE_SIMPLE] of [entity] was [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , [entity] , [entity] , and [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\n?x0 P1 M3 .\n?x0 P1 M4 .\n?x0 P1 M5 .\n?x0 P2 M6\n}",
        "recursionDepth": 47,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P750 wd:Q9589 .\n?x0 wdt:P750 wd:Q689141 .\n?x0 wdt:P750 wd:Q19711013 .\n?x0 wdt:P750 wd:Q3238917 .\n?x0 wdt:P750 wd:Q602243 .\n?x0 wdt:P162|wdt:P272 wd:Q5391295 .\n?x0 wdt:P156 wd:Q5397833\n}",
        "questionWithBrackets": "What prequel of [Nukku-Matti ja Herra Kuu] was distributed by [iTunes] , distributed by [Deezer] , [Spotify] , [Google Play Music] , and [Tidal] , and produced by [Pekka Siistonen]"
    },
    {
        "questionIdx": 162697,
        "questionPatternModEntities": "What prequel of M0 was directed by , written by , and produced by M1",
        "questionTemplate": "What [ROLE_SIMPLE] of [entity] was [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P2 M1 .\n?x0 P3 M1\n}",
        "recursionDepth": 32,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 wd:Q6078 .\n?x0 wdt:P162|wdt:P272 wd:Q6078 .\n?x0 wdt:P156 wd:Q5247200 .\n?x0 wdt:P58 wd:Q6078\n}",
        "questionWithBrackets": "What prequel of [Death Row Greatest Hits] was directed by , written by , and produced by [Dr. Dre]"
    },
    {
        "questionIdx": 162706,
        "questionPatternModEntities": "What prequel of M0 did M1 's spouse executive produce",
        "questionTemplate": "What [ROLE_SIMPLE] of [entity] did [entity] 's [ROLE_SIMPLE] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 ?x1 .\n?x1 P2 M1 .\nFILTER ( ?x1 != M1 )\n}",
        "recursionDepth": 21,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1431 ?x1 .\n?x0 wdt:P156 wd:Q127632 .\n?x1 wdt:P26 wd:Q189895 .\nFILTER ( ?x1 != wd:Q189895 )\n}",
        "questionWithBrackets": "What prequel of [The Son of Kong] did [Jennifer Jones] 's spouse executive produce"
    },
    {
        "questionIdx": 162721,
        "questionPatternModEntities": "What prequel of M2 's prequel was directed , executive produced , and written by M0 and M1",
        "questionTemplate": "What [ROLE_SIMPLE] of [entity] 's [ROLE_SIMPLE] was [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 M0 .\n?x0 P1 M1 .\n?x0 P2 M0 .\n?x0 P2 M1 .\n?x0 P3 M0 .\n?x0 P3 M1 .\n?x1 P0 M2\n}",
        "recursionDepth": 38,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 wd:Q2071 .\n?x0 wdt:P57 wd:Q778585 .\n?x0 wdt:P1431 wd:Q2071 .\n?x0 wdt:P1431 wd:Q778585 .\n?x0 wdt:P156 ?x1 .\n?x0 wdt:P58 wd:Q2071 .\n?x0 wdt:P58 wd:Q778585 .\n?x1 wdt:P156 wd:Q23971551\n}",
        "questionWithBrackets": "What prequel of [Twin Peaks] 's prequel was directed , executive produced , and written by [Mark Frost] and [David Lynch]"
    },
    {
        "questionIdx": 162736,
        "questionPatternModEntities": "What prequel of M0 was executive produced by M1 and M2 and was executive produced by M3 and M4",
        "questionTemplate": "What [ROLE_SIMPLE] of [entity] was [VP_SIMPLE] by [entity] and [entity] and was [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\n?x0 P1 M3 .\n?x0 P1 M4\n}",
        "recursionDepth": 41,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1431 wd:Q13909 .\n?x0 wdt:P1431 wd:Q24809152 .\n?x0 wdt:P1431 wd:Q1072843 .\n?x0 wdt:P1431 wd:Q24809160 .\n?x0 wdt:P156 wd:Q54437950\n}",
        "questionWithBrackets": "What prequel of [Maleficent: Mistress of Evil] was executive produced by [Angelina Jolie] and [Palak Patel] and was executive produced by [Don Hahn] and [Matt Smith]"
    },
    {
        "questionIdx": 162740,
        "questionPatternModEntities": "What prequel of M0 was produced by , directed by , edited by , and written by M1",
        "questionTemplate": "What [ROLE_SIMPLE] of [entity] was [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P2 M1 .\n?x0 P3 M1 .\n?x0 P4 M1\n}",
        "recursionDepth": 37,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 wd:Q47284 .\n?x0 wdt:P1040 wd:Q47284 .\n?x0 wdt:P162|wdt:P272 wd:Q47284 .\n?x0 wdt:P156 wd:Q128187 .\n?x0 wdt:P58 wd:Q47284\n}",
        "questionWithBrackets": "What prequel of [Machete Kills] was produced by , directed by , edited by , and written by [Robert Rodriguez]"
    },
    {
        "questionIdx": 162743,
        "questionPatternModEntities": "What prequel of M1 's prequel did M0 edit , produce , and write",
        "questionTemplate": "What [ROLE_SIMPLE] of [entity] 's [ROLE_SIMPLE] did [entity] [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 M0 .\n?x0 P2 M0 .\n?x0 P3 M0 .\n?x1 P0 M1\n}",
        "recursionDepth": 34,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1040 wd:Q47284 .\n?x0 wdt:P162|wdt:P272 wd:Q47284 .\n?x0 wdt:P156 ?x1 .\n?x0 wdt:P58 wd:Q47284 .\n?x1 wdt:P156 wd:Q550591\n}",
        "questionWithBrackets": "What prequel of [Spy Kids: All the Time in the World] 's prequel did [Robert Rodriguez] edit , produce , and write"
    },
    {
        "questionIdx": 162746,
        "questionPatternModEntities": "What prequel of M0 was produced by a sibling of M1",
        "questionTemplate": "What [ROLE_SIMPLE] of [entity] was [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 ?x1 .\n?x1 P2 M1 .\nFILTER ( ?x1 != M1 )\n}",
        "recursionDepth": 23,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x0 wdt:P156 wd:Q537983 .\n?x1 wdt:P3373 wd:Q4811453 .\nFILTER ( ?x1 != wd:Q4811453 )\n}",
        "questionWithBrackets": "What prequel of [Harvest] was produced by a sibling of [Astrid Young]"
    },
    {
        "questionIdx": 162756,
        "questionPatternModEntities": "What prequel of M0 was distributed by and produced by M1",
        "questionTemplate": "What [ROLE_SIMPLE] of [entity] was [VP_SIMPLE] by and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P2 M1\n}",
        "recursionDepth": 25,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P750 wd:Q9531 .\n?x0 wdt:P162|wdt:P272 wd:Q9531 .\n?x0 wdt:P156 wd:Q20667011\n}",
        "questionWithBrackets": "What prequel of [The Magician's Apprentice] was distributed by and produced by [BBC]"
    },
    {
        "questionIdx": 162760,
        "questionPatternModEntities": "What prequel of M0 was distributed by M1 , M2 , M3 , and M4",
        "questionTemplate": "What [ROLE_SIMPLE] of [entity] was [VP_SIMPLE] by [entity] , [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\n?x0 P1 M3 .\n?x0 P1 M4\n}",
        "recursionDepth": 27,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P750 wd:Q866 .\n?x0 wdt:P750 wd:Q20056642 .\n?x0 wdt:P750 wd:Q19711013 .\n?x0 wdt:P750 wd:Q3884 .\n?x0 wdt:P156 wd:Q65042073\n}",
        "questionWithBrackets": "What prequel of [In Vain] was distributed by [Tidal] , [YouTube] , [Amazon] , and [Apple Music]"
    },
    {
        "questionIdx": 162761,
        "questionPatternModEntities": "What prequel of M0 was distributed by M1 , M2 , M3 , M4 , and M5",
        "questionTemplate": "What [ROLE_SIMPLE] of [entity] was [VP_SIMPLE] by [entity] , [entity] , [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\n?x0 P1 M3 .\n?x0 P1 M4 .\n?x0 P1 M5\n}",
        "recursionDepth": 30,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P750 wd:Q3884 .\n?x0 wdt:P750 wd:Q689141 .\n?x0 wdt:P750 wd:Q602243 .\n?x0 wdt:P750 wd:Q866 .\n?x0 wdt:P750 wd:Q4740860 .\n?x0 wdt:P156 wd:Q65042073\n}",
        "questionWithBrackets": "What prequel of [In Vain] was distributed by [Spotify] , [Amazon Music] , [YouTube] , [Deezer] , and [Amazon]"
    },
    {
        "questionIdx": 162813,
        "questionPatternModEntities": "What prequel of M0 was written , directed , and edited by M1 , M2 , and M3",
        "questionTemplate": "What [ROLE_SIMPLE] of [entity] was [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\n?x0 P1 M3 .\n?x0 P2 M1 .\n?x0 P2 M2 .\n?x0 P2 M3 .\n?x0 P3 M1 .\n?x0 P3 M2 .\n?x0 P3 M3\n}",
        "recursionDepth": 36,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 wd:Q1291210 .\n?x0 wdt:P57 wd:Q4207234 .\n?x0 wdt:P57 wd:Q16198328 .\n?x0 wdt:P1040 wd:Q1291210 .\n?x0 wdt:P1040 wd:Q4207234 .\n?x0 wdt:P1040 wd:Q16198328 .\n?x0 wdt:P156 wd:Q17183987 .\n?x0 wdt:P58 wd:Q1291210 .\n?x0 wdt:P58 wd:Q4207234 .\n?x0 wdt:P58 wd:Q16198328\n}",
        "questionWithBrackets": "What prequel of [V/H/S: Viral] was written , directed , and edited by [Jason Eisener] , [Eduardo S\u00e1nchez] , and [Gareth Evans]"
    },
    {
        "questionIdx": 162849,
        "questionPatternModEntities": "What prequel of M0 was produced by , was directed by , and was written by M1 's sibling",
        "questionTemplate": "What [ROLE_SIMPLE] of [entity] was [VP_SIMPLE] by , was [VP_SIMPLE] by , and was [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x0 P3 ?x1 .\n?x1 P4 M1 .\nFILTER ( ?x1 != M1 )\n}",
        "recursionDepth": 40,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 ?x1 .\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x0 wdt:P156 wd:Q598499 .\n?x0 wdt:P58 ?x1 .\n?x1 wdt:P3373 wd:Q725250 .\nFILTER ( ?x1 != wd:Q725250 )\n}",
        "questionWithBrackets": "What prequel of [The Pacific] was produced by , was directed by , and was written by [Jim Hanks] 's sibling"
    },
    {
        "questionIdx": 162866,
        "questionPatternModEntities": "What prequel of M0 did M1 direct",
        "questionTemplate": "What [ROLE_SIMPLE] of [entity] did [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1\n}",
        "recursionDepth": 16,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 wd:Q6096 .\n?x0 wdt:P156 wd:Q908374\n}",
        "questionWithBrackets": "What prequel of [Ego Trippin'] did [Snoop Dogg] direct"
    },
    {
        "questionIdx": 162882,
        "questionPatternModEntities": "What prequel of M0 was produced by , was written by , starred , and was directed by M1",
        "questionTemplate": "What [ROLE_SIMPLE] of [entity] was [VP_SIMPLE] by , was [VP_SIMPLE] by , [VP_SIMPLE] , and was [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P2 M1 .\n?x0 P3 M1 .\n?x0 P4 M1\n}",
        "recursionDepth": 42,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 wd:Q4465 .\n?x0 wdt:P162|wdt:P272 wd:Q4465 .\n?x0 wdt:P156 wd:Q21203766 .\n?x0 wdt:P161 wd:Q4465 .\n?x0 wdt:P58 wd:Q4465\n}",
        "questionWithBrackets": "What prequel of [Kong: Skull Island] was produced by , was written by , starred , and was directed by [Peter Jackson]"
    },
    {
        "questionIdx": 162893,
        "questionPatternModEntities": "What prequel of M0 did M1 executive produce , M3 edit , and M2 executive produce",
        "questionTemplate": "What [ROLE_SIMPLE] of [entity] did [entity] [VP_SIMPLE] , [entity] [VP_SIMPLE] , and [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\n?x0 P2 M3\n}",
        "recursionDepth": 38,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1040 wd:Q1401104 .\n?x0 wdt:P1431 wd:Q3772 .\n?x0 wdt:P1431 wd:Q887636 .\n?x0 wdt:P156 wd:Q1338994\n}",
        "questionWithBrackets": "What prequel of [Hostel: Part III] did [Boaz Yakin] executive produce , [George Folsey] edit , and [Quentin Tarantino] executive produce"
    },
    {
        "questionIdx": 162920,
        "questionPatternModEntities": "What prequel of M0 was executive produced by M1 and M2",
        "questionTemplate": "What [ROLE_SIMPLE] of [entity] was [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P1 M2\n}",
        "recursionDepth": 22,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1431 wd:Q62896 .\n?x0 wdt:P1431 wd:Q151814 .\n?x0 wdt:P156 wd:Q4739329\n}",
        "questionWithBrackets": "What prequel of [Amalfi \u2013 Sarah Brightman Love Songs] was executive produced by [Sarah Brightman] and [Frank Peterson]"
    },
    {
        "questionIdx": 162926,
        "questionPatternModEntities": "What prequel of M0 did M1 's employee write",
        "questionTemplate": "What [ROLE_SIMPLE] of [entity] did [entity] 's [ROLE_SIMPLE] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 ?x1 .\n?x1 P2 M1\n}",
        "recursionDepth": 20,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P156 wd:Q378913 .\n?x0 wdt:P58 ?x1 .\n?x1 wdt:P108 wd:Q34433\n}",
        "questionWithBrackets": "What prequel of [The Lord of the Rings] did [University of Oxford] 's employee write"
    },
    {
        "questionIdx": 162937,
        "questionPatternModEntities": "What prequel of M0 did M1 write , edit , produce , and direct",
        "questionTemplate": "What [ROLE_SIMPLE] of [entity] did [entity] [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P2 M1 .\n?x0 P3 M1 .\n?x0 P4 M1\n}",
        "recursionDepth": 36,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 wd:Q47284 .\n?x0 wdt:P1040 wd:Q47284 .\n?x0 wdt:P162|wdt:P272 wd:Q47284 .\n?x0 wdt:P156 wd:Q128187 .\n?x0 wdt:P58 wd:Q47284\n}",
        "questionWithBrackets": "What prequel of [Machete Kills] did [Robert Rodriguez] write , edit , produce , and direct"
    },
    {
        "questionIdx": 162945,
        "questionPatternModEntities": "What prequel of M0 did M1 , M2 , and M3 write",
        "questionTemplate": "What [ROLE_SIMPLE] of [entity] did [entity] , [entity] , and [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\n?x0 P1 M3\n}",
        "recursionDepth": 23,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P156 wd:Q21203766 .\n?x0 wdt:P58 wd:Q4465 .\n?x0 wdt:P58 wd:Q116854 .\n?x0 wdt:P58 wd:Q116861\n}",
        "questionWithBrackets": "What prequel of [Kong: Skull Island] did [Peter Jackson] , [Fran Walsh] , and [Philippa Boyens] write"
    },
    {
        "questionIdx": 162953,
        "questionPatternModEntities": "What prequel of M0 was executive produced by M1 and M2 , directed by M5 , and executive produced by M3 and M4",
        "questionTemplate": "What [ROLE_SIMPLE] of [entity] was [VP_SIMPLE] by [entity] and [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\n?x0 P1 M3 .\n?x0 P1 M4 .\n?x0 P2 M5\n}",
        "recursionDepth": 47,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 wd:Q16775487 .\n?x0 wdt:P1431 wd:Q10738 .\n?x0 wdt:P1431 wd:Q6175902 .\n?x0 wdt:P1431 wd:Q22673514 .\n?x0 wdt:P1431 wd:Q27051216 .\n?x0 wdt:P156 wd:Q84712809\n}",
        "questionWithBrackets": "What prequel of [Shazam! 2] was executive produced by [Dany Garcia] and [Jeffrey Chernov] , directed by [David F. Sandberg] , and executive produced by [Dwayne Johnson] and [Hiram Garcia]"
    },
    {
        "questionIdx": 162958,
        "questionPatternModEntities": "What prequel of M0 was written by M1 , was directed by M5 , and was edited by M2 , M3 , and M4",
        "questionTemplate": "What [ROLE_SIMPLE] of [entity] was [VP_SIMPLE] by [entity] , was [VP_SIMPLE] by [entity] , and was [VP_SIMPLE] by [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P2 M2 .\n?x0 P2 M3 .\n?x0 P2 M4 .\n?x0 P3 M5\n}",
        "recursionDepth": 49,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 wd:Q56094 .\n?x0 wdt:P1040 wd:Q214066 .\n?x0 wdt:P1040 wd:Q809066 .\n?x0 wdt:P1040 wd:Q976609 .\n?x0 wdt:P156 wd:Q202326 .\n?x0 wdt:P58 wd:Q182870\n}",
        "questionWithBrackets": "What prequel of [The Godfather Part III] was written by [Mario Puzo] , was directed by [Francis Ford Coppola] , and was edited by [Peter Zinner] , [Richard Marks] , and [Barry Malkin]"
    },
    {
        "questionIdx": 162965,
        "questionPatternModEntities": "What prequel of M1 's prequel did M0 write",
        "questionTemplate": "What [ROLE_SIMPLE] of [entity] 's [ROLE_SIMPLE] did [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 M0 .\n?x1 P0 M1\n}",
        "recursionDepth": 20,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P156 ?x1 .\n?x0 wdt:P58 wd:Q1993 .\n?x1 wdt:P156 wd:Q703571\n}",
        "questionWithBrackets": "What prequel of [Naruto Shippuden the Movie: The Will of Fire] 's prequel did [Masashi Kishimoto] write"
    },
    {
        "questionIdx": 162971,
        "questionPatternModEntities": "What prequel of M1 's sequel was produced by , edited by , and written by M0",
        "questionTemplate": "What [ROLE_SIMPLE] of [entity] 's [ROLE_SIMPLE] was [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 M0 .\n?x0 P2 M0 .\n?x0 P3 M0 .\n?x1 P4 M1\n}",
        "recursionDepth": 35,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1040 wd:Q47284 .\n?x0 wdt:P162|wdt:P272 wd:Q47284 .\n?x0 wdt:P156 ?x1 .\n?x0 wdt:P58 wd:Q47284 .\n?x1 wdt:P155 wd:Q128493\n}",
        "questionWithBrackets": "What prequel of [Machete] 's sequel was produced by , edited by , and written by [Robert Rodriguez]"
    },
    {
        "questionIdx": 162975,
        "questionPatternModEntities": "What prequel of M0 was produced and edited by M2 's American parent",
        "questionTemplate": "What [ROLE_SIMPLE] of [entity] was [VP_SIMPLE] and [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x1 P3 M1 .\n?x1 P4 M2\n}",
        "recursionDepth": 33,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1040 ?x1 .\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x0 wdt:P156 wd:Q128187 .\n?x1 wdt:P40|wdt:P355 wd:Q28032516 .\n?x1 wdt:P27 wd:Q30\n}",
        "questionWithBrackets": "What prequel of [Machete Kills] was produced and edited by [Racer Rodriguez] 's American parent"
    },
    {
        "questionIdx": 162979,
        "questionPatternModEntities": "What prequel of M0 was produced by and edited by M1",
        "questionTemplate": "What [ROLE_SIMPLE] of [entity] was [VP_SIMPLE] by and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P2 M1\n}",
        "recursionDepth": 26,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1040 wd:Q47284 .\n?x0 wdt:P162|wdt:P272 wd:Q47284 .\n?x0 wdt:P156 wd:Q128187\n}",
        "questionWithBrackets": "What prequel of [Machete Kills] was produced by and edited by [Robert Rodriguez]"
    },
    {
        "questionIdx": 162982,
        "questionPatternModEntities": "What prequel of M0 did M1 's sibling executive produce",
        "questionTemplate": "What [ROLE_SIMPLE] of [entity] did [entity] 's [ROLE_SIMPLE] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 ?x1 .\n?x1 P2 M1 .\nFILTER ( ?x1 != M1 )\n}",
        "recursionDepth": 21,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1431 ?x1 .\n?x0 wdt:P156 wd:Q191100 .\n?x1 wdt:P3373 wd:Q469204 .\nFILTER ( ?x1 != wd:Q469204 )\n}",
        "questionWithBrackets": "What prequel of [Transformers: Revenge of the Fallen] did [Anne Spielberg] 's sibling executive produce"
    },
    {
        "questionIdx": 162993,
        "questionPatternModEntities": "What prequel of M0 was directed by M1 's male sibling",
        "questionTemplate": "What [ROLE_SIMPLE] of [entity] was [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 ?x1 .\n?x1 P2 M1 .\n?x1 P3 M2 .\nFILTER ( ?x1 != M1 )\n}",
        "recursionDepth": 26,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 ?x1 .\n?x0 wdt:P156 wd:Q5383534 .\n?x1 wdt:P21 wd:Q6581097 .\n?x1 wdt:P3373 wd:Q104373794 .\nFILTER ( ?x1 != wd:Q104373794 )\n}",
        "questionWithBrackets": "What prequel of [Episode 3] was directed by [Martha Lynch Levacy] 's male sibling"
    },
    {
        "questionIdx": 163000,
        "questionPatternModEntities": "What prequel of M2 's sequel did M0 and M1 executive produce",
        "questionTemplate": "What [ROLE_SIMPLE] of [entity] 's [ROLE_SIMPLE] did [entity] and [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 M0 .\n?x0 P1 M1 .\n?x1 P2 M2\n}",
        "recursionDepth": 25,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1431 wd:Q2071 .\n?x0 wdt:P1431 wd:Q778585 .\n?x0 wdt:P156 ?x1 .\n?x1 wdt:P155 wd:Q3727084\n}",
        "questionWithBrackets": "What prequel of [Twin Peaks, season 2] 's sequel did [Mark Frost] and [David Lynch] executive produce"
    },
    {
        "questionIdx": 163011,
        "questionPatternModEntities": "What prequel of M5 's sequel was directed by M2 , M3 , and M4 , starred M0 , and starred M1",
        "questionTemplate": "What [ROLE_SIMPLE] of [entity] 's [ROLE_SIMPLE] was [VP_SIMPLE] by [entity] , [entity] , and [entity] , [VP_SIMPLE] [entity] , and [VP_SIMPLE] [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 M0 .\n?x0 P1 M1 .\n?x0 P2 M2 .\n?x0 P2 M3 .\n?x0 P2 M4 .\n?x1 P3 M5\n}",
        "recursionDepth": 49,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 wd:Q3772 .\n?x0 wdt:P57 wd:Q47284 .\n?x0 wdt:P57 wd:Q207676 .\n?x0 wdt:P156 ?x1 .\n?x0 wdt:P161 wd:Q220584 .\n?x0 wdt:P161 wd:Q2680 .\n?x1 wdt:P155 wd:Q192115\n}",
        "questionWithBrackets": "What prequel of [Sin City] 's sequel was directed by [Frank Miller] , [Robert Rodriguez] , and [Quentin Tarantino] , starred [Michael Madsen] , and starred [Bruce Willis]"
    },
    {
        "questionIdx": 163012,
        "questionPatternModEntities": "What prequel of M2 's sequel was executive produced by M0 and M1",
        "questionTemplate": "What [ROLE_SIMPLE] of [entity] 's [ROLE_SIMPLE] was [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 M0 .\n?x0 P1 M1 .\n?x1 P2 M2\n}",
        "recursionDepth": 26,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1431 wd:Q60100 .\n?x0 wdt:P1431 wd:Q2390812 .\n?x0 wdt:P156 ?x1 .\n?x1 wdt:P155 wd:Q105387\n}",
        "questionWithBrackets": "What prequel of [Independence Day] 's sequel was executive produced by [Ute Emmerich] and [Roland Emmerich]"
    },
    {
        "questionIdx": 163022,
        "questionPatternModEntities": "What prequel of M0 was directed by M4 , executive produced by M1 and M2 , and produced by M3",
        "questionTemplate": "What [ROLE_SIMPLE] of [entity] was [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] and [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\n?x0 P2 M3 .\n?x0 P3 M4\n}",
        "recursionDepth": 42,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 wd:Q232273 .\n?x0 wdt:P1431 wd:Q55171 .\n?x0 wdt:P1431 wd:Q399076 .\n?x0 wdt:P162|wdt:P272 wd:Q5849390 .\n?x0 wdt:P156 wd:Q593615\n}",
        "questionWithBrackets": "What prequel of [The Sea Inside] was directed by [Isabel Coixet] , executive produced by [Agust\u00edn Almod\u00f3var] and [Pedro Almod\u00f3var] , and produced by [Esther Garc\u00eda]"
    },
    {
        "questionIdx": 163025,
        "questionPatternModEntities": "What prequel of M0 was executive produced by M1 , M2 , and M3 , executive produced by M4 , and executive produced by M5",
        "questionTemplate": "What [ROLE_SIMPLE] of [entity] was [VP_SIMPLE] by [entity] , [entity] , and [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\n?x0 P1 M3 .\n?x0 P1 M4 .\n?x0 P1 M5\n}",
        "recursionDepth": 47,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1431 wd:Q13909 .\n?x0 wdt:P1431 wd:Q1072843 .\n?x0 wdt:P1431 wd:Q24809152 .\n?x0 wdt:P1431 wd:Q24809160 .\n?x0 wdt:P1431 wd:Q24809172 .\n?x0 wdt:P156 wd:Q54437950\n}",
        "questionWithBrackets": "What prequel of [Maleficent: Mistress of Evil] was executive produced by [Angelina Jolie] , [Palak Patel] , and [Sarah Bradshaw] , executive produced by [Matt Smith] , and executive produced by [Don Hahn]"
    },
    {
        "questionIdx": 163030,
        "questionPatternModEntities": "What prequel of M0 was written by and directed by M1",
        "questionTemplate": "What [ROLE_SIMPLE] of [entity] was [VP_SIMPLE] by and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P2 M1\n}",
        "recursionDepth": 26,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 wd:Q4465 .\n?x0 wdt:P156 wd:Q21203766 .\n?x0 wdt:P58 wd:Q4465\n}",
        "questionWithBrackets": "What prequel of [Kong: Skull Island] was written by and directed by [Peter Jackson]"
    },
    {
        "questionIdx": 163035,
        "questionPatternModEntities": "What prequel of M0 starred M1 , starred M2 , and was directed by M3",
        "questionTemplate": "What [ROLE_SIMPLE] of [entity] [VP_SIMPLE] [entity] , [VP_SIMPLE] [entity] , and was [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\n?x0 P2 M3\n}",
        "recursionDepth": 38,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 wd:Q2071 .\n?x0 wdt:P156 wd:Q1140578 .\n?x0 wdt:P161 wd:Q5383 .\n?x0 wdt:P161 wd:Q29086\n}",
        "questionWithBrackets": "What prequel of [Twin Peaks: Fire Walk with Me] starred [Matthew Lillard] , starred [David Bowie] , and was directed by [David Lynch]"
    },
    {
        "questionIdx": 163042,
        "questionPatternModEntities": "What prequel of M0 starred M1",
        "questionTemplate": "What [ROLE_SIMPLE] of [entity] [VP_SIMPLE] [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1\n}",
        "recursionDepth": 16,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P156 wd:Q4525 .\n?x0 wdt:P161 wd:Q1124\n}",
        "questionWithBrackets": "What prequel of [NCIS] starred [Bill Clinton]"
    },
    {
        "questionIdx": 163044,
        "questionPatternModEntities": "What prequel of M0 was distributed by M1 , M2 , and M3",
        "questionTemplate": "What [ROLE_SIMPLE] of [entity] was [VP_SIMPLE] by [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\n?x0 P1 M3\n}",
        "recursionDepth": 24,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P750 wd:Q3884 .\n?x0 wdt:P750 wd:Q689141 .\n?x0 wdt:P750 wd:Q4740860 .\n?x0 wdt:P156 wd:Q65042073\n}",
        "questionWithBrackets": "What prequel of [In Vain] was distributed by [Amazon] , [Spotify] , and [Amazon Music]"
    },
    {
        "questionIdx": 163061,
        "questionPatternModEntities": "What prequel of M0 was executive produced , written , and produced by M1",
        "questionTemplate": "What [ROLE_SIMPLE] of [entity] was [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P2 M1 .\n?x0 P3 M1\n}",
        "recursionDepth": 30,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1431 wd:Q2071 .\n?x0 wdt:P162|wdt:P272 wd:Q2071 .\n?x0 wdt:P156 wd:Q1140578 .\n?x0 wdt:P58 wd:Q2071\n}",
        "questionWithBrackets": "What prequel of [Twin Peaks: Fire Walk with Me] was executive produced , written , and produced by [David Lynch]"
    },
    {
        "questionIdx": 163068,
        "questionPatternModEntities": "What prequel of M0 was distributed by M2 's parent and distributed by M1",
        "questionTemplate": "What [ROLE_SIMPLE] of [entity] was [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 ?x1 .\n?x0 P1 M1 .\n?x1 P2 M2\n}",
        "recursionDepth": 32,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P750 ?x1 .\n?x0 wdt:P750 wd:Q8093 .\n?x0 wdt:P156 wd:Q369264 .\n?x1 wdt:P40|wdt:P355 wd:Q991149\n}",
        "questionWithBrackets": "What prequel of [Super Bomberman 3] was distributed by [1-Up Studio] 's parent and distributed by [Nintendo]"
    },
    {
        "questionIdx": 163069,
        "questionPatternModEntities": "What prequel of M0 was produced by M5 , was executive produced by M2 , M3 , and M4 , and starred M1",
        "questionTemplate": "What [ROLE_SIMPLE] of [entity] was [VP_SIMPLE] by [entity] , was [VP_SIMPLE] by [entity] , [entity] , and [entity] , and [VP_SIMPLE] [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P2 M2 .\n?x0 P2 M3 .\n?x0 P2 M4 .\n?x0 P3 M5\n}",
        "recursionDepth": 48,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1431 wd:Q8877 .\n?x0 wdt:P1431 wd:Q3018205 .\n?x0 wdt:P1431 wd:Q190373 .\n?x0 wdt:P162|wdt:P272 wd:Q543498 .\n?x0 wdt:P156 wd:Q939084 .\n?x0 wdt:P161 wd:Q457180\n}",
        "questionWithBrackets": "What prequel of [The Flintstones in Viva Rock Vegas] was produced by [Bruce Cohen] , was executive produced by [Joseph Barbera] , [Steven Spielberg] , and [David Kirschner] , and starred [Sheryl Lee Ralph]"
    },
    {
        "questionIdx": 163091,
        "questionPatternModEntities": "What prequel of M0 was written by a employee of M1",
        "questionTemplate": "What [ROLE_SIMPLE] of [entity] was [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 ?x1 .\n?x1 P2 M1\n}",
        "recursionDepth": 24,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P156 wd:Q378913 .\n?x0 wdt:P58 ?x1 .\n?x1 wdt:P108 wd:Q34433\n}",
        "questionWithBrackets": "What prequel of [The Lord of the Rings] was written by a employee of [University of Oxford]"
    },
    {
        "questionIdx": 163112,
        "questionPatternModEntities": "What prequel of M0 starred and was produced by M1 's spouse",
        "questionTemplate": "What [ROLE_SIMPLE] of [entity] [VP_SIMPLE] and was [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x1 P3 M1 .\nFILTER ( ?x1 != M1 )\n}",
        "recursionDepth": 30,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x0 wdt:P156 wd:Q1142018 .\n?x0 wdt:P161 ?x1 .\n?x1 wdt:P26 wd:Q44221 .\nFILTER ( ?x1 != wd:Q44221 )\n}",
        "questionWithBrackets": "What prequel of [The Confessions Tour] starred and was produced by [Sean Penn] 's spouse"
    },
    {
        "questionIdx": 163127,
        "questionPatternModEntities": "What prequel of M1 's sequel was distributed by and produced by M0",
        "questionTemplate": "What [ROLE_SIMPLE] of [entity] 's [ROLE_SIMPLE] was [VP_SIMPLE] by and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 M0 .\n?x0 P2 M0 .\n?x1 P3 M1\n}",
        "recursionDepth": 29,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P750 wd:Q9531 .\n?x0 wdt:P162|wdt:P272 wd:Q9531 .\n?x0 wdt:P156 ?x1 .\n?x1 wdt:P155 wd:Q18159602\n}",
        "questionWithBrackets": "What prequel of [Last Christmas] 's sequel was distributed by and produced by [BBC]"
    },
    {
        "questionIdx": 163132,
        "questionPatternModEntities": "What prequel of M0 was executive produced by M1 and M2 , produced by M4 , and written by M3",
        "questionTemplate": "What [ROLE_SIMPLE] of [entity] was [VP_SIMPLE] by [entity] and [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\n?x0 P2 M3 .\n?x0 P3 M4\n}",
        "recursionDepth": 42,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1431 wd:Q55171 .\n?x0 wdt:P1431 wd:Q399076 .\n?x0 wdt:P162|wdt:P272 wd:Q78991283 .\n?x0 wdt:P156 wd:Q593615 .\n?x0 wdt:P58 wd:Q232273\n}",
        "questionWithBrackets": "What prequel of [The Sea Inside] was executive produced by [Pedro Almod\u00f3var] and [Agust\u00edn Almod\u00f3var] , produced by [Milestone Production] , and written by [Isabel Coixet]"
    },
    {
        "questionIdx": 163179,
        "questionPatternModEntities": "What prequel of a prequel of M1 's sequel starred M0",
        "questionTemplate": "What [ROLE_SIMPLE] of a [ROLE_SIMPLE] of [entity] 's [ROLE_SIMPLE] [VP_SIMPLE] [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 M0 .\n?x1 P0 ?x2 .\n?x2 P2 M1\n}",
        "recursionDepth": 26,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P156 ?x1 .\n?x0 wdt:P161 wd:Q261812 .\n?x1 wdt:P156 ?x2 .\n?x2 wdt:P155 wd:Q3013\n}",
        "questionWithBrackets": "What prequel of a prequel of [iCarly] 's sequel starred [Drake Bell]"
    },
    {
        "questionIdx": 163183,
        "questionPatternModEntities": "What prequel of a sequel of M1 did M0 direct , write , produce , and edit",
        "questionTemplate": "What [ROLE_SIMPLE] of a [ROLE_SIMPLE] of [entity] did [entity] [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 M0 .\n?x0 P2 M0 .\n?x0 P3 M0 .\n?x0 P4 M0 .\n?x1 P5 M1\n}",
        "recursionDepth": 42,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 wd:Q47284 .\n?x0 wdt:P1040 wd:Q47284 .\n?x0 wdt:P162|wdt:P272 wd:Q47284 .\n?x0 wdt:P156 ?x1 .\n?x0 wdt:P58 wd:Q47284 .\n?x1 wdt:P155 wd:Q128493\n}",
        "questionWithBrackets": "What prequel of a sequel of [Machete] did [Robert Rodriguez] direct , write , produce , and edit"
    },
    {
        "questionIdx": 164804,
        "questionPatternModEntities": "What sequel of M5 was written by M1 , M2 , and M3 , was executive produced by M0 , and was produced by M4",
        "questionTemplate": "What [ROLE_SIMPLE] of [entity] was [VP_SIMPLE] by [entity] , [entity] , and [entity] , was [VP_SIMPLE] by [entity] , and was [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\n?x0 P1 M3 .\n?x0 P2 M4 .\n?x0 P3 M5\n}",
        "recursionDepth": 50,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1431 wd:Q8877 .\n?x0 wdt:P155 wd:Q171453 .\n?x0 wdt:P162|wdt:P272 wd:Q536964 .\n?x0 wdt:P58 wd:Q432598 .\n?x0 wdt:P58 wd:Q467500 .\n?x0 wdt:P58 wd:Q534224\n}",
        "questionWithBrackets": "What sequel of [Transformers] was written by [Roberto Orci] , [Ehren Kruger] , and [Alex Kurtzman] , was executive produced by [Steven Spielberg] , and was produced by [Ian Bryce]"
    },
    {
        "questionIdx": 164813,
        "questionPatternModEntities": "What sequel of M1 's sequel did M0 produce",
        "questionTemplate": "What [ROLE_SIMPLE] of [entity] 's [ROLE_SIMPLE] did [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 ?x1 .\n?x1 P1 M1\n}",
        "recursionDepth": 20,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P155 ?x1 .\n?x0 wdt:P162|wdt:P272 wd:Q7414 .\n?x1 wdt:P155 wd:Q1609444\n}",
        "questionWithBrackets": "What sequel of [Herbie Rides Again] 's sequel did [The Walt Disney Company] produce"
    },
    {
        "questionIdx": 164834,
        "questionPatternModEntities": "What sequel of M1 starred , was directed by , was executive produced by , and was edited by M0",
        "questionTemplate": "What [ROLE_SIMPLE] of [entity] [VP_SIMPLE] , was [VP_SIMPLE] by , was [VP_SIMPLE] by , and was [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M0 .\n?x0 P2 M0 .\n?x0 P3 M1 .\n?x0 P4 M0\n}",
        "recursionDepth": 43,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 wd:Q4679987 .\n?x0 wdt:P1040 wd:Q4679987 .\n?x0 wdt:P1431 wd:Q4679987 .\n?x0 wdt:P155 wd:Q1359366 .\n?x0 wdt:P161 wd:Q4679987\n}",
        "questionWithBrackets": "What sequel of [V/H/S] starred , was directed by , was executive produced by , and was edited by [Adam Wingard]"
    },
    {
        "questionIdx": 164865,
        "questionPatternModEntities": "What sequel of M1 was written by , executive produced by , directed by , and produced by M0",
        "questionTemplate": "What [ROLE_SIMPLE] of [entity] was [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M0 .\n?x0 P2 M0 .\n?x0 P3 M1 .\n?x0 P4 M0\n}",
        "recursionDepth": 39,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 wd:Q60100 .\n?x0 wdt:P1431 wd:Q60100 .\n?x0 wdt:P155 wd:Q163899 .\n?x0 wdt:P162|wdt:P272 wd:Q60100 .\n?x0 wdt:P58 wd:Q60100\n}",
        "questionWithBrackets": "What sequel of [10,000 BC] was written by , executive produced by , directed by , and produced by [Roland Emmerich]"
    },
    {
        "questionIdx": 164906,
        "questionPatternModEntities": "What sequel of M1 was produced by and executive produced by M0",
        "questionTemplate": "What [ROLE_SIMPLE] of [entity] was [VP_SIMPLE] by and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M0 .\n?x0 P2 M1\n}",
        "recursionDepth": 27,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1431 wd:Q36970 .\n?x0 wdt:P155 wd:Q1144962 .\n?x0 wdt:P162|wdt:P272 wd:Q36970\n}",
        "questionWithBrackets": "What sequel of [First Strike] was produced by and executive produced by [Jackie Chan]"
    },
    {
        "questionIdx": 164932,
        "questionPatternModEntities": "What sequel of M2 's prequel did M0 and M1 write",
        "questionTemplate": "What [ROLE_SIMPLE] of [entity] 's [ROLE_SIMPLE] did [entity] and [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P1 ?x1 .\n?x1 P2 M2\n}",
        "recursionDepth": 24,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P155 ?x1 .\n?x0 wdt:P58 wd:Q4465 .\n?x0 wdt:P58 wd:Q116854 .\n?x1 wdt:P156 wd:Q2393298\n}",
        "questionWithBrackets": "What sequel of [The Dark Knight] 's prequel did [Philippa Boyens] and [Peter Jackson] write"
    },
    {
        "questionIdx": 164937,
        "questionPatternModEntities": "What sequel of M1 's prequel was produced by and distributed by M0",
        "questionTemplate": "What [ROLE_SIMPLE] of [entity] 's [ROLE_SIMPLE] was [VP_SIMPLE] by and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M0 .\n?x0 P2 ?x1 .\n?x1 P3 M1\n}",
        "recursionDepth": 29,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P750 wd:Q9531 .\n?x0 wdt:P155 ?x1 .\n?x0 wdt:P162|wdt:P272 wd:Q9531 .\n?x1 wdt:P156 wd:Q18159602\n}",
        "questionWithBrackets": "What sequel of [Last Christmas] 's prequel was produced by and distributed by [BBC]"
    },
    {
        "questionIdx": 164938,
        "questionPatternModEntities": "What sequel of M3 did M0 , M1 , and M2 edit , write , and direct",
        "questionTemplate": "What [ROLE_SIMPLE] of [entity] did [entity] , [entity] , and [entity] [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P1 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\n?x0 P2 M3 .\n?x0 P3 M0 .\n?x0 P3 M1 .\n?x0 P3 M2\n}",
        "recursionDepth": 37,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 wd:Q1291210 .\n?x0 wdt:P57 wd:Q4207234 .\n?x0 wdt:P57 wd:Q16198328 .\n?x0 wdt:P1040 wd:Q1291210 .\n?x0 wdt:P1040 wd:Q4207234 .\n?x0 wdt:P1040 wd:Q16198328 .\n?x0 wdt:P155 wd:Q1359366 .\n?x0 wdt:P58 wd:Q1291210 .\n?x0 wdt:P58 wd:Q4207234 .\n?x0 wdt:P58 wd:Q16198328\n}",
        "questionWithBrackets": "What sequel of [V/H/S] did [Jason Eisener] , [Eduardo S\u00e1nchez] , and [Gareth Evans] edit , write , and direct"
    },
    {
        "questionIdx": 164953,
        "questionPatternModEntities": "What sequel of M3 was written , edited , and directed by M0 , M1 , and M2",
        "questionTemplate": "What [ROLE_SIMPLE] of [entity] was [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P1 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\n?x0 P2 M3 .\n?x0 P3 M0 .\n?x0 P3 M1 .\n?x0 P3 M2\n}",
        "recursionDepth": 37,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 wd:Q1291210 .\n?x0 wdt:P57 wd:Q4207234 .\n?x0 wdt:P57 wd:Q16198328 .\n?x0 wdt:P1040 wd:Q1291210 .\n?x0 wdt:P1040 wd:Q4207234 .\n?x0 wdt:P1040 wd:Q16198328 .\n?x0 wdt:P155 wd:Q1359366 .\n?x0 wdt:P58 wd:Q1291210 .\n?x0 wdt:P58 wd:Q4207234 .\n?x0 wdt:P58 wd:Q16198328\n}",
        "questionWithBrackets": "What sequel of [V/H/S] was written , edited , and directed by [Gareth Evans] , [Eduardo S\u00e1nchez] , and [Jason Eisener]"
    },
    {
        "questionIdx": 164959,
        "questionPatternModEntities": "What sequel of M1 was distributed by and produced by M0",
        "questionTemplate": "What [ROLE_SIMPLE] of [entity] was [VP_SIMPLE] by and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M0 .\n?x0 P2 M1\n}",
        "recursionDepth": 25,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P750 wd:Q9531 .\n?x0 wdt:P155 wd:Q18328139 .\n?x0 wdt:P162|wdt:P272 wd:Q9531\n}",
        "questionWithBrackets": "What sequel of [Death in Heaven] was distributed by and produced by [BBC]"
    },
    {
        "questionIdx": 164961,
        "questionPatternModEntities": "What sequel of M1 was executive produced by and produced by M0",
        "questionTemplate": "What [ROLE_SIMPLE] of [entity] was [VP_SIMPLE] by and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M0 .\n?x0 P2 M1\n}",
        "recursionDepth": 26,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1431 wd:Q60100 .\n?x0 wdt:P155 wd:Q163899 .\n?x0 wdt:P162|wdt:P272 wd:Q60100\n}",
        "questionWithBrackets": "What sequel of [10,000 BC] was executive produced by and produced by [Roland Emmerich]"
    },
    {
        "questionIdx": 164965,
        "questionPatternModEntities": "What sequel of M0 did a spouse of M1 produce",
        "questionTemplate": "What [ROLE_SIMPLE] of [entity] did a [ROLE_SIMPLE] of [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 M0 .\n?x1 P2 M1 .\nFILTER ( ?x1 != M1 )\n}",
        "recursionDepth": 22,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P155 wd:Q2201 .\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x1 wdt:P26 wd:Q76717 .\nFILTER ( ?x1 != wd:Q76717 )\n}",
        "questionWithBrackets": "What sequel of [Kick-Ass] did a spouse of [Claudia Schiffer] produce"
    },
    {
        "questionIdx": 164967,
        "questionPatternModEntities": "What sequel of M0 starred M1 's sibling",
        "questionTemplate": "What [ROLE_SIMPLE] of [entity] [VP_SIMPLE] [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 M0 .\n?x1 P2 M1 .\nFILTER ( ?x1 != M1 )\n}",
        "recursionDepth": 20,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P155 wd:Q936576 .\n?x0 wdt:P161 ?x1 .\n?x1 wdt:P3373 wd:Q2831 .\nFILTER ( ?x1 != wd:Q2831 )\n}",
        "questionWithBrackets": "What sequel of [The Nutty Professor] starred [Michael Jackson] 's sibling"
    },
    {
        "questionIdx": 164968,
        "questionPatternModEntities": "What sequel of M1 was produced by M0",
        "questionTemplate": "What [ROLE_SIMPLE] of [entity] was [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1\n}",
        "recursionDepth": 17,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P155 wd:Q1077777 .\n?x0 wdt:P162|wdt:P272 wd:Q303\n}",
        "questionWithBrackets": "What sequel of [The Sun Sessions] was produced by [Elvis Presley]"
    },
    {
        "questionIdx": 164972,
        "questionPatternModEntities": "What sequel of M2 was directed by M3 , was produced by M1 , and starred M0",
        "questionTemplate": "What [ROLE_SIMPLE] of [entity] was [VP_SIMPLE] by [entity] , was [VP_SIMPLE] by [entity] , and [VP_SIMPLE] [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P2 M2 .\n?x0 P3 M3\n}",
        "recursionDepth": 40,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 wd:Q165828 .\n?x0 wdt:P155 wd:Q1199687 .\n?x0 wdt:P162|wdt:P272 wd:Q7414 .\n?x0 wdt:P161 wd:Q717656\n}",
        "questionWithBrackets": "What sequel of [Herbie Goes to Monte Carlo] was directed by [Vincent McEveety] , was produced by [The Walt Disney Company] , and starred [Harvey Korman]"
    },
    {
        "questionIdx": 164973,
        "questionPatternModEntities": "What sequel of M0 did M1 's sibling edit",
        "questionTemplate": "What [ROLE_SIMPLE] of [entity] did [entity] 's [ROLE_SIMPLE] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 M0 .\n?x1 P2 M1 .\nFILTER ( ?x1 != M1 )\n}",
        "recursionDepth": 20,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1040 ?x1 .\n?x0 wdt:P155 wd:Q1092874 .\n?x1 wdt:P3373 wd:Q55469 .\nFILTER ( ?x1 != wd:Q55469 )\n}",
        "questionWithBrackets": "What sequel of [Nell'anno del Signore] did [Marcello Mastroianni] 's sibling edit"
    },
    {
        "questionIdx": 164976,
        "questionPatternModEntities": "What sequel of M0 was written by and executive produced by M1 's spouse",
        "questionTemplate": "What [ROLE_SIMPLE] of [entity] was [VP_SIMPLE] by and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 M0 .\n?x1 P3 M1 .\nFILTER ( ?x1 != M1 )\n}",
        "recursionDepth": 30,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1431 ?x1 .\n?x0 wdt:P155 wd:Q2085 .\n?x0 wdt:P58 ?x1 .\n?x1 wdt:P26 wd:Q62929023 .\nFILTER ( ?x1 != wd:Q62929023 )\n}",
        "questionWithBrackets": "What sequel of [Twin Peaks] was written by and executive produced by [Peggy Reavey] 's spouse"
    },
    {
        "questionIdx": 164985,
        "questionPatternModEntities": "What sequel of M5 did M0 , M1 , M2 , M3 , and M4 executive produce",
        "questionTemplate": "What [ROLE_SIMPLE] of [entity] did [entity] , [entity] , [entity] , [entity] , and [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P0 M3 .\n?x0 P0 M4 .\n?x0 P1 M5\n}",
        "recursionDepth": 30,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1431 wd:Q43994 .\n?x0 wdt:P1431 wd:Q2829373 .\n?x0 wdt:P1431 wd:Q3106628 .\n?x0 wdt:P1431 wd:Q95125 .\n?x0 wdt:P1431 wd:Q365090 .\n?x0 wdt:P155 wd:Q1216882\n}",
        "questionWithBrackets": "What sequel of [The Tracey Ullman Show] did [James L. Brooks] , [Sam Simon] , [Matt Groening] , [Al Jean] , and [Ian Maxtone-Graham] executive produce"
    },
    {
        "questionIdx": 165007,
        "questionPatternModEntities": "What sequel of M2 starred M0 and M1",
        "questionTemplate": "What [ROLE_SIMPLE] of [entity] [VP_SIMPLE] [entity] and [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P1 M2\n}",
        "recursionDepth": 20,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P155 wd:Q4529 .\n?x0 wdt:P161 wd:Q891796 .\n?x0 wdt:P161 wd:Q24304\n}",
        "questionWithBrackets": "What sequel of [Veronica Mars] starred [Eden Sher] and [Max Greenfield]"
    },
    {
        "questionIdx": 165012,
        "questionPatternModEntities": "What sequel of M3 was executive produced by M1 , starred M0 , and was written by M2",
        "questionTemplate": "What [ROLE_SIMPLE] of [entity] was [VP_SIMPLE] by [entity] , [VP_SIMPLE] [entity] , and was [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P2 M2 .\n?x0 P3 M3\n}",
        "recursionDepth": 41,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1431 wd:Q8877 .\n?x0 wdt:P155 wd:Q24251026 .\n?x0 wdt:P161 wd:Q266901 .\n?x0 wdt:P58 wd:Q21066761\n}",
        "questionWithBrackets": "What sequel of [Transformers: The Last Knight] was executive produced by [Steven Spielberg] , starred [Megyn Price] , and was written by [Christina Hodson]"
    },
    {
        "questionIdx": 165037,
        "questionPatternModEntities": "What sequel of M6 was written by M0 , M1 , M2 , M3 , and M4 and was produced by M5",
        "questionTemplate": "What [ROLE_SIMPLE] of [entity] was [VP_SIMPLE] by [entity] , [entity] , [entity] , [entity] , and [entity] and was [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P0 M3 .\n?x0 P0 M4 .\n?x0 P1 M5 .\n?x0 P2 M6\n}",
        "recursionDepth": 44,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P155 wd:Q752103 .\n?x0 wdt:P162|wdt:P272 wd:Q1473065 .\n?x0 wdt:P58 wd:Q23760 .\n?x0 wdt:P58 wd:Q705602 .\n?x0 wdt:P58 wd:Q355300 .\n?x0 wdt:P58 wd:Q5645381 .\n?x0 wdt:P58 wd:Q1761327\n}",
        "questionWithBrackets": "What sequel of [Bean] was written by [Rowan Atkinson] , [Simon McBurney] , [Hamish McColl] , [Robin Driscoll] , and [Richard Curtis] and was produced by [Tim Bevan]"
    },
    {
        "questionIdx": 165043,
        "questionPatternModEntities": "What sequel of M3 did M4 direct , M2 write , and M0 and M1 executive produce",
        "questionTemplate": "What [ROLE_SIMPLE] of [entity] did [entity] [VP_SIMPLE] , [entity] [VP_SIMPLE] , and [entity] and [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P1 M2 .\n?x0 P2 M3 .\n?x0 P3 M4\n}",
        "recursionDepth": 41,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 wd:Q7836302 .\n?x0 wdt:P1431 wd:Q8877 .\n?x0 wdt:P1431 wd:Q67206382 .\n?x0 wdt:P155 wd:Q24251026 .\n?x0 wdt:P58 wd:Q21066761\n}",
        "questionWithBrackets": "What sequel of [Transformers: The Last Knight] did [Travis Knight] direct , [Christina Hodson] write , and [Edward Cheng] and [Steven Spielberg] executive produce"
    },
    {
        "questionIdx": 165047,
        "questionPatternModEntities": "What sequel of M5 did M0 , M1 , M2 , and M3 executive produce , M6 direct , and M4 edit",
        "questionTemplate": "What [ROLE_SIMPLE] of [entity] did [entity] , [entity] , [entity] , and [entity] [VP_SIMPLE] , [entity] [VP_SIMPLE] , and [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P0 M3 .\n?x0 P1 M4 .\n?x0 P2 M5 .\n?x0 P3 M6\n}",
        "recursionDepth": 47,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 wd:Q192762 .\n?x0 wdt:P1040 wd:Q123124 .\n?x0 wdt:P1431 wd:Q939079 .\n?x0 wdt:P1431 wd:Q7331721 .\n?x0 wdt:P1431 wd:Q16499753 .\n?x0 wdt:P1431 wd:Q1176853 .\n?x0 wdt:P155 wd:Q576242\n}",
        "questionWithBrackets": "What sequel of [Faster] did [Rick Schwartz] , [Ari Handel] , [Jon Avnet] , and [David Thwaites] executive produce , [Darren Aronofsky] direct , and [Andrew Weisblum] edit"
    },
    {
        "questionIdx": 165048,
        "questionPatternModEntities": "What sequel of M3 starred M0 , was executive produced by M1 , and was written by M2",
        "questionTemplate": "What [ROLE_SIMPLE] of [entity] [VP_SIMPLE] [entity] , was [VP_SIMPLE] by [entity] , and was [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P2 M2 .\n?x0 P3 M3\n}",
        "recursionDepth": 41,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1431 wd:Q2071 .\n?x0 wdt:P155 wd:Q2085 .\n?x0 wdt:P161 wd:Q3440474 .\n?x0 wdt:P58 wd:Q892285\n}",
        "questionWithBrackets": "What sequel of [Twin Peaks] starred [Catherine Coulson] , was executive produced by [David Lynch] , and was written by [Robert Engels]"
    },
    {
        "questionIdx": 165050,
        "questionPatternModEntities": "What sequel of M2 was directed by M3 , M4 , and M5 , starred M0 , and was executive produced by M1",
        "questionTemplate": "What [ROLE_SIMPLE] of [entity] was [VP_SIMPLE] by [entity] , [entity] , and [entity] , [VP_SIMPLE] [entity] , and was [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P2 M2 .\n?x0 P3 M3 .\n?x0 P3 M4 .\n?x0 P3 M5\n}",
        "recursionDepth": 48,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 wd:Q346595 .\n?x0 wdt:P57 wd:Q2129942 .\n?x0 wdt:P57 wd:Q419454 .\n?x0 wdt:P1431 wd:Q432598 .\n?x0 wdt:P155 wd:Q380519 .\n?x0 wdt:P161 wd:Q202792\n}",
        "questionWithBrackets": "What sequel of [Star Trek: Enterprise] was directed by [John Stuart Scott] , [Akiva Goldsman] , and [Jonathan Frakes] , starred [Rebecca Romijn] , and was executive produced by [Alex Kurtzman]"
    },
    {
        "questionIdx": 165057,
        "questionPatternModEntities": "What sequel of M1 was directed by M2 , directed by M3 , M4 , M5 , and M6 , and written by M0",
        "questionTemplate": "What [ROLE_SIMPLE] of [entity] was [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , [entity] , [entity] , and [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P2 M2 .\n?x0 P2 M3 .\n?x0 P2 M4 .\n?x0 P2 M5 .\n?x0 P2 M6\n}",
        "recursionDepth": 47,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 wd:Q2830590 .\n?x0 wdt:P57 wd:Q3267051 .\n?x0 wdt:P57 wd:Q3559883 .\n?x0 wdt:P57 wd:Q3530934 .\n?x0 wdt:P57 wd:Q3287885 .\n?x0 wdt:P155 wd:Q29565459 .\n?x0 wdt:P58 wd:Q4408\n}",
        "questionWithBrackets": "What sequel of [Kenny the Cat/Yeti Krabs] was directed by [Luke Brookshier] , directed by [Alan Smart] , [Marc Ceccarelli] , [Vincent Waller] , and [Tom Yasumi] , and written by [Mr. Lawrence]"
    },
    {
        "questionIdx": 165062,
        "questionPatternModEntities": "What sequel of M2 was executive produced by M0 , directed by M3 and M4 , and written by M1",
        "questionTemplate": "What [ROLE_SIMPLE] of [entity] was [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] and [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P2 M2 .\n?x0 P3 M3 .\n?x0 P3 M4\n}",
        "recursionDepth": 42,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 wd:Q713066 .\n?x0 wdt:P57 wd:Q643246 .\n?x0 wdt:P1431 wd:Q8877 .\n?x0 wdt:P155 wd:Q208048 .\n?x0 wdt:P58 wd:Q1508039\n}",
        "questionWithBrackets": "What sequel of [Band of Brothers] was executive produced by [Steven Spielberg] , directed by [Carl Franklin] and [Tim Van Patten] , and written by [George Pelecanos]"
    },
    {
        "questionIdx": 165064,
        "questionPatternModEntities": "What sequel of M3 was executive produced by M0 and M1 , produced by M2 , and directed by M4",
        "questionTemplate": "What [ROLE_SIMPLE] of [entity] was [VP_SIMPLE] by [entity] and [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P1 M2 .\n?x0 P2 M3 .\n?x0 P3 M4\n}",
        "recursionDepth": 42,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 wd:Q7836302 .\n?x0 wdt:P1431 wd:Q8877 .\n?x0 wdt:P1431 wd:Q67206382 .\n?x0 wdt:P155 wd:Q24251026 .\n?x0 wdt:P162|wdt:P272 wd:Q636664\n}",
        "questionWithBrackets": "What sequel of [Transformers: The Last Knight] was executive produced by [Steven Spielberg] and [Edward Cheng] , produced by [Lorenzo di Bonaventura] , and directed by [Travis Knight]"
    },
    {
        "questionIdx": 165072,
        "questionPatternModEntities": "What sequel of M4 was written by M3 , was executive produced by M1 and M2 , and starred M0",
        "questionTemplate": "What [ROLE_SIMPLE] of [entity] was [VP_SIMPLE] by [entity] , was [VP_SIMPLE] by [entity] and [entity] , and [VP_SIMPLE] [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\n?x0 P2 M3 .\n?x0 P3 M4\n}",
        "recursionDepth": 45,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1431 wd:Q36970 .\n?x0 wdt:P1431 wd:Q319204 .\n?x0 wdt:P155 wd:Q1549966 .\n?x0 wdt:P161 wd:Q8986791 .\n?x0 wdt:P58 wd:Q5490946\n}",
        "questionWithBrackets": "What sequel of [Armour of God II: Operation Condor] was written by [Frankie Chan] , was executive produced by [Jackie Chan] and [Brett Ratner] , and starred [Liao Fan]"
    },
    {
        "questionIdx": 165074,
        "questionPatternModEntities": "What sequel of M5 was written by M3 and M4 , executive produced by M0 , and executive produced by M1 and M2",
        "questionTemplate": "What [ROLE_SIMPLE] of [entity] was [VP_SIMPLE] by [entity] and [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P1 M3 .\n?x0 P1 M4 .\n?x0 P2 M5\n}",
        "recursionDepth": 47,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1431 wd:Q8877 .\n?x0 wdt:P1431 wd:Q263324 .\n?x0 wdt:P1431 wd:Q190373 .\n?x0 wdt:P155 wd:Q602094 .\n?x0 wdt:P58 wd:Q3127820 .\n?x0 wdt:P58 wd:Q967077\n}",
        "questionWithBrackets": "What sequel of [The Flintstones] was written by [Harry Elfont] and [Jim Cash] , executive produced by [Joseph Barbera] , and executive produced by [Steven Spielberg] and [William Hanna]"
    },
    {
        "questionIdx": 165077,
        "questionPatternModEntities": "What sequel of M1 was a prequel of M0",
        "questionTemplate": "What [ROLE_SIMPLE] of [entity] was a [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1\n}",
        "recursionDepth": 19,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P155 wd:Q131964 .\n?x0 wdt:P156 wd:Q38\n}",
        "questionWithBrackets": "What sequel of [Austrian Empire] was a prequel of [Italy]"
    },
    {
        "questionIdx": 165107,
        "questionPatternModEntities": "What sequel of M2 did M3 's spouse executive produce and M0 and M1 edit",
        "questionTemplate": "What [ROLE_SIMPLE] of [entity] did [entity] 's [ROLE_SIMPLE] [VP_SIMPLE] and [entity] and [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 M0 .\n?x0 P1 M1 .\n?x0 P2 M2 .\n?x1 P3 M3 .\nFILTER ( ?x1 != M3 )\n}",
        "recursionDepth": 36,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1040 wd:Q25853675 .\n?x0 wdt:P1040 wd:Q974615 .\n?x0 wdt:P1431 ?x1 .\n?x0 wdt:P155 wd:Q1049545 .\n?x1 wdt:P26 wd:Q272445 .\nFILTER ( ?x1 != wd:Q272445 )\n}",
        "questionWithBrackets": "What sequel of [Clash of the Titans] did [Linda Harrison] 's spouse executive produce and [David Freeman] and [Martin Walsh] edit"
    },
    {
        "questionIdx": 165157,
        "questionPatternModEntities": "What sequel of M4 did M0 , M1 , M2 , and M3 executive produce",
        "questionTemplate": "What [ROLE_SIMPLE] of [entity] did [entity] , [entity] , [entity] , and [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P0 M3 .\n?x0 P1 M4\n}",
        "recursionDepth": 27,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1431 wd:Q43994 .\n?x0 wdt:P1431 wd:Q95125 .\n?x0 wdt:P1431 wd:Q365090 .\n?x0 wdt:P1431 wd:Q2400678 .\n?x0 wdt:P155 wd:Q1216882\n}",
        "questionWithBrackets": "What sequel of [The Tracey Ullman Show] did [Matt Groening] , [James L. Brooks] , [Matt Selman] , and [Sam Simon] executive produce"
    },
    {
        "questionIdx": 165191,
        "questionPatternModEntities": "What sequel of M1 starred M0",
        "questionTemplate": "What [ROLE_SIMPLE] of [entity] [VP_SIMPLE] [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1\n}",
        "recursionDepth": 16,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P155 wd:Q5415 .\n?x0 wdt:P161 wd:Q4029\n}",
        "questionWithBrackets": "What sequel of [My Little Pony: Friendship Is Magic] starred [Tara Strong]"
    },
    {
        "questionIdx": 165203,
        "questionPatternModEntities": "What sequel of M5 's prequel did M3 and M4 write and M0 , M1 , and M2 executive produce",
        "questionTemplate": "What [ROLE_SIMPLE] of [entity] 's [ROLE_SIMPLE] did [entity] and [entity] [VP_SIMPLE] and [entity] , [entity] , and [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P1 M3 .\n?x0 P1 M4 .\n?x0 P2 ?x1 .\n?x1 P3 M5\n}",
        "recursionDepth": 43,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1431 wd:Q8877 .\n?x0 wdt:P1431 wd:Q263324 .\n?x0 wdt:P1431 wd:Q190373 .\n?x0 wdt:P155 ?x1 .\n?x0 wdt:P58 wd:Q967077 .\n?x0 wdt:P58 wd:Q3020873 .\n?x1 wdt:P156 wd:Q939084\n}",
        "questionWithBrackets": "What sequel of [The Flintstones in Viva Rock Vegas] 's prequel did [Jim Cash] and [Deborah Kaplan] write and [Steven Spielberg] , [William Hanna] , and [Joseph Barbera] executive produce"
    },
    {
        "questionIdx": 165281,
        "questionPatternModEntities": "What sequel of a sequel of M1 was written by M0",
        "questionTemplate": "What [ROLE_SIMPLE] of a [ROLE_SIMPLE] of [entity] was [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 ?x1 .\n?x1 P1 M1\n}",
        "recursionDepth": 24,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P155 ?x1 .\n?x0 wdt:P58 wd:Q42 .\n?x1 wdt:P155 wd:Q5379074\n}",
        "questionWithBrackets": "What sequel of a sequel of [Enlightenment] was written by [Douglas Adams]"
    },
    {
        "questionIdx": 165283,
        "questionPatternModEntities": "What sequel of M3 did M0 , M1 , and M2 executive produce",
        "questionTemplate": "What [ROLE_SIMPLE] of [entity] did [entity] , [entity] , and [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P1 M3\n}",
        "recursionDepth": 24,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1431 wd:Q44131 .\n?x0 wdt:P1431 wd:Q977546 .\n?x0 wdt:P1431 wd:Q4754876 .\n?x0 wdt:P155 wd:Q7712287\n}",
        "questionWithBrackets": "What sequel of [The Act of Killing] did [Errol Morris] , [Andr\u00e9 Singer] , and [Werner Herzog] executive produce"
    },
    {
        "questionIdx": 165302,
        "questionPatternModEntities": "What sibling and parent of M0 did M1 marry",
        "questionTemplate": "What [ROLE_SIMPLE] and [ROLE_SIMPLE] of [entity] did [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M0 .\n?x0 P2 M1 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x0 != M1 )\n}",
        "recursionDepth": 21,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q493 .\n?x0 wdt:P3373 wd:Q493 .\n?x0 wdt:P26 wd:Q17148576 .\nFILTER ( ?x0 != wd:Q17148576 ) .\nFILTER ( ?x0 != wd:Q493 )\n}",
        "questionWithBrackets": "What sibling and parent of [Arthur Rimbaud] did [Vitalie Rimbaud] marry"
    },
    {
        "questionIdx": 165321,
        "questionPatternModEntities": "What sibling and spouse of M0 was a female spouse of M2",
        "questionTemplate": "What [ROLE_SIMPLE] and [ROLE_SIMPLE] of [entity] was a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P2 M0 .\n?x0 P2 M2 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x0 != M2 )\n}",
        "recursionDepth": 29,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P21 wd:Q6581072 .\n?x0 wdt:P3373 wd:Q3340 .\n?x0 wdt:P26 wd:Q296446 .\n?x0 wdt:P26 wd:Q3340 .\nFILTER ( ?x0 != wd:Q296446 ) .\nFILTER ( ?x0 != wd:Q3340 ) .\nFILTER ( ?x0 != wd:Q3340 )\n}",
        "questionWithBrackets": "What sibling and spouse of [Ptolemy IX Lathyros] was a female spouse of [Antiochus IX Cyzicenus]"
    },
    {
        "questionIdx": 165322,
        "questionPatternModEntities": "What sibling and spouse of M0 did M1 marry",
        "questionTemplate": "What [ROLE_SIMPLE] and [ROLE_SIMPLE] of [entity] did [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x0 != M1 )\n}",
        "recursionDepth": 21,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P3373 wd:Q3340 .\n?x0 wdt:P26 wd:Q3340 .\n?x0 wdt:P26 wd:Q296446 .\nFILTER ( ?x0 != wd:Q3340 ) .\nFILTER ( ?x0 != wd:Q3340 ) .\nFILTER ( ?x0 != wd:Q296446 )\n}",
        "questionWithBrackets": "What sibling and spouse of [Ptolemy IX Lathyros] did [Antiochus IX Cyzicenus] marry"
    },
    {
        "questionIdx": 165327,
        "questionPatternModEntities": "What sibling of M0 was a spouse of M1 's sibling",
        "questionTemplate": "What [ROLE_SIMPLE] of [entity] was a [ROLE_SIMPLE] of [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 ?x1 .\n?x1 P0 M1 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x1 != M1 )\n}",
        "recursionDepth": 23,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P3373 wd:Q1035 .\n?x0 wdt:P26 ?x1 .\n?x1 wdt:P3373 wd:Q3133240 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x0 != wd:Q1035 ) .\nFILTER ( ?x1 != wd:Q3133240 )\n}",
        "questionWithBrackets": "What sibling of [Charles Darwin] was a spouse of [Hensleigh Wedgwood] 's sibling"
    },
    {
        "questionIdx": 165355,
        "questionPatternModEntities": "What sibling of M0 did M1 and M2 marry",
        "questionTemplate": "What [ROLE_SIMPLE] of [entity] did [entity] and [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x0 != M1 ) .\nFILTER ( ?x0 != M2 )\n}",
        "recursionDepth": 20,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P3373 wd:Q635 .\n?x0 wdt:P26 wd:Q40060 .\n?x0 wdt:P26 wd:Q632595 .\nFILTER ( ?x0 != wd:Q40060 ) .\nFILTER ( ?x0 != wd:Q632595 ) .\nFILTER ( ?x0 != wd:Q635 )\n}",
        "questionWithBrackets": "What sibling of [Cleopatra] did [Seleucus VII Kybiosaktes] and [Archelaus] marry"
    },
    {
        "questionIdx": 165369,
        "questionPatternModEntities": "What sibling of M0 was a Mexican sibling of M1",
        "questionTemplate": "What [ROLE_SIMPLE] of [entity] was a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P1 M2 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x0 != M1 )\n}",
        "recursionDepth": 24,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P27 wd:Q96 .\n?x0 wdt:P3373 wd:Q452517 .\n?x0 wdt:P3373 wd:Q4415594 .\nFILTER ( ?x0 != wd:Q452517 ) .\nFILTER ( ?x0 != wd:Q4415594 )\n}",
        "questionWithBrackets": "What sibling of [Olga Kameneva] was a Mexican sibling of [Semen Semkovski]"
    },
    {
        "questionIdx": 165393,
        "questionPatternModEntities": "What sibling of M0 was M1 's sibling",
        "questionTemplate": "What [ROLE_SIMPLE] of [entity] was [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x0 != M1 )\n}",
        "recursionDepth": 17,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P3373 wd:Q720 .\n?x0 wdt:P3373 wd:Q1014890 .\nFILTER ( ?x0 != wd:Q720 ) .\nFILTER ( ?x0 != wd:Q1014890 )\n}",
        "questionWithBrackets": "What sibling of [Genghis Khan] was [Belgutei] 's sibling"
    },
    {
        "questionIdx": 165401,
        "questionPatternModEntities": "What sibling of M0 was a British sibling of M1",
        "questionTemplate": "What [ROLE_SIMPLE] of [entity] was a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P1 M2 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x0 != M1 )\n}",
        "recursionDepth": 24,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P27 wd:Q145 .\n?x0 wdt:P3373 wd:Q75382289 .\n?x0 wdt:P3373 wd:Q331287 .\nFILTER ( ?x0 != wd:Q75382289 ) .\nFILTER ( ?x0 != wd:Q331287 )\n}",
        "questionWithBrackets": "What sibling of [John Spencer] was a British sibling of [Charles Spencer, 9th Earl Spencer]"
    },
    {
        "questionIdx": 165456,
        "questionPatternModEntities": "What sibling of M0 was M1 's parent",
        "questionTemplate": "What [ROLE_SIMPLE] of [entity] was [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M0 )\n}",
        "recursionDepth": 17,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q900649 .\n?x0 wdt:P3373 wd:Q3954 .\nFILTER ( ?x0 != wd:Q3954 )\n}",
        "questionWithBrackets": "What sibling of [Neptune] was [Apollo in Roman mythology] 's parent"
    },
    {
        "questionIdx": 165488,
        "questionPatternModEntities": "What sibling of M0 was a parent and spouse of M1 's sibling and spouse",
        "questionTemplate": "What [ROLE_SIMPLE] of [entity] was a [ROLE_SIMPLE] and [ROLE_SIMPLE] of [entity] 's [ROLE_SIMPLE] and [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x1 P0 M1 .\n?x1 P2 M1 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x1 != M1 ) .\nFILTER ( ?x1 != M1 )\n}",
        "recursionDepth": 33,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P40|wdt:P355 ?x1 .\n?x0 wdt:P3373 wd:Q273990 .\n?x0 wdt:P26 ?x1 .\n?x1 wdt:P3373 wd:Q1523 .\n?x1 wdt:P26 wd:Q1523 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x0 != wd:Q273990 ) .\nFILTER ( ?x1 != wd:Q1523 ) .\nFILTER ( ?x1 != wd:Q1523 )\n}",
        "questionWithBrackets": "What sibling of [Princess Tia] was a parent and spouse of [Ramesses II] 's sibling and spouse"
    },
    {
        "questionIdx": 165492,
        "questionPatternModEntities": "What sibling of M0 was M1 's sibling , spouse , and parent",
        "questionTemplate": "What [ROLE_SIMPLE] of [entity] was [entity] 's [ROLE_SIMPLE] , [ROLE_SIMPLE] , and [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P1 M1 .\n?x0 P2 M1 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x0 != M1 ) .\nFILTER ( ?x0 != M1 )\n}",
        "recursionDepth": 26,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q443473 .\n?x0 wdt:P3373 wd:Q273990 .\n?x0 wdt:P3373 wd:Q443473 .\n?x0 wdt:P26 wd:Q443473 .\nFILTER ( ?x0 != wd:Q273990 ) .\nFILTER ( ?x0 != wd:Q443473 ) .\nFILTER ( ?x0 != wd:Q443473 )\n}",
        "questionWithBrackets": "What sibling of [Princess Tia] was [Henutmire] 's sibling , spouse , and parent"
    },
    {
        "questionIdx": 165500,
        "questionPatternModEntities": "What sibling of M0 was influenced by M1 and M2",
        "questionTemplate": "What [ROLE_SIMPLE] of [entity] was [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\nFILTER ( ?x0 != M0 )\n}",
        "recursionDepth": 21,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P737 wd:Q255 .\n?x0 wdt:P737 wd:Q46096 .\n?x0 wdt:P3373 wd:Q95404 .\nFILTER ( ?x0 != wd:Q95404 )\n}",
        "questionWithBrackets": "What sibling of [Rebecka Mendelssohn] was influenced by [Felix Mendelssohn] and [Ludwig van Beethoven]"
    },
    {
        "questionIdx": 165501,
        "questionPatternModEntities": "What sibling of M0 did M1 , M2 , M3 , and M4 influence and M5 and M6 marry",
        "questionTemplate": "What [ROLE_SIMPLE] of [entity] did [entity] , [entity] , [entity] , and [entity] [VP_SIMPLE] and [entity] and [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\n?x0 P1 M3 .\n?x0 P1 M4 .\n?x0 P2 M5 .\n?x0 P2 M6 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x0 != M5 ) .\nFILTER ( ?x0 != M6 )\n}",
        "recursionDepth": 41,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P737 wd:Q692 .\n?x0 wdt:P737 wd:Q43718 .\n?x0 wdt:P737 wd:Q642420 .\n?x0 wdt:P737 wd:Q535 .\n?x0 wdt:P3373 wd:Q4167253 .\n?x0 wdt:P26 wd:Q15833960 .\n?x0 wdt:P26 wd:Q872246 .\nFILTER ( ?x0 != wd:Q15833960 ) .\nFILTER ( ?x0 != wd:Q872246 ) .\nFILTER ( ?x0 != wd:Q4167253 )\n}",
        "questionWithBrackets": "What sibling of [Mikhail Dostoyevsky] did [Christ] , [William Shakespeare] , [Nikolai Gogol] , and [Victor Hugo] influence and [Maria Dostoevskaya] and [Anna Dostoyevskaya] marry"
    },
    {
        "questionIdx": 165512,
        "questionPatternModEntities": "What sibling of M0 was M1 's Italian sibling",
        "questionTemplate": "What [ROLE_SIMPLE] of [entity] was [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P1 M2 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x0 != M1 )\n}",
        "recursionDepth": 22,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P27 wd:Q38 .\n?x0 wdt:P3373 wd:Q2050307 .\n?x0 wdt:P3373 wd:Q15291085 .\nFILTER ( ?x0 != wd:Q2050307 ) .\nFILTER ( ?x0 != wd:Q15291085 )\n}",
        "questionWithBrackets": "What sibling of [Maria Antonietta Berlusconi] was [Paolo Berlusconi] 's Italian sibling"
    },
    {
        "questionIdx": 165520,
        "questionPatternModEntities": "What sibling of M0 was M1 's spouse",
        "questionTemplate": "What [ROLE_SIMPLE] of [entity] was [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x0 != M1 )\n}",
        "recursionDepth": 17,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P3373 wd:Q2677 .\n?x0 wdt:P26 wd:Q152099 .\nFILTER ( ?x0 != wd:Q152099 ) .\nFILTER ( ?x0 != wd:Q2677 )\n}",
        "questionWithBrackets": "What sibling of [Wilhelm II] was [Constantine I of Greece] 's spouse"
    },
    {
        "questionIdx": 165522,
        "questionPatternModEntities": "What sibling of M0 was a French spouse of M2",
        "questionTemplate": "What [ROLE_SIMPLE] of [entity] was a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P2 M2 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x0 != M2 )\n}",
        "recursionDepth": 24,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P27 wd:Q142 .\n?x0 wdt:P3373 wd:Q2272454 .\n?x0 wdt:P26 wd:Q28487 .\nFILTER ( ?x0 != wd:Q28487 ) .\nFILTER ( ?x0 != wd:Q2272454 )\n}",
        "questionWithBrackets": "What sibling of [Serge Hazanavicius] was a French spouse of [B\u00e9r\u00e9nice Bejo]"
    },
    {
        "questionIdx": 165525,
        "questionPatternModEntities": "What sibling of M0 was influenced by M1",
        "questionTemplate": "What [ROLE_SIMPLE] of [entity] was [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M0 )\n}",
        "recursionDepth": 17,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P737 wd:Q868 .\n?x0 wdt:P3373 wd:Q1076340 .\nFILTER ( ?x0 != wd:Q1076340 )\n}",
        "questionWithBrackets": "What sibling of [Peter Kierkegaard] was influenced by [Aristotle]"
    },
    {
        "questionIdx": 165533,
        "questionPatternModEntities": "What sibling of M4 's employee was influenced by M0 , influenced by M1 and M2 , and influenced by M3",
        "questionTemplate": "What [ROLE_SIMPLE] of [entity] 's [ROLE_SIMPLE] was [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] and [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\n?x0 P1 M3 .\n?x1 P2 M4 .\nFILTER ( ?x0 != ?x1 )\n}",
        "recursionDepth": 45,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P737 wd:Q692 .\n?x0 wdt:P737 wd:Q7243 .\n?x0 wdt:P737 wd:Q312632 .\n?x0 wdt:P737 wd:Q41532 .\n?x0 wdt:P3373 ?x1 .\n?x1 wdt:P108 wd:Q49088 .\nFILTER ( ?x0 != ?x1 )\n}",
        "questionWithBrackets": "What sibling of [Columbia University] 's employee was influenced by [Carl Jung] , influenced by [Leo Tolstoy] and [William Shakespeare] , and influenced by [Jack Vance]"
    },
    {
        "questionIdx": 165539,
        "questionPatternModEntities": "What sibling of M0 was influenced by M1 , M2 , and M3 , influenced by M4 and M5 , and influenced by M6",
        "questionTemplate": "What [ROLE_SIMPLE] of [entity] was [VP_SIMPLE] by [entity] , [entity] , and [entity] , [VP_SIMPLE] by [entity] and [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\n?x0 P1 M3 .\n?x0 P1 M4 .\n?x0 P1 M5 .\n?x0 P1 M6 .\nFILTER ( ?x0 != M0 )\n}",
        "recursionDepth": 48,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P737 wd:Q502 .\n?x0 wdt:P737 wd:Q44403 .\n?x0 wdt:P737 wd:Q913 .\n?x0 wdt:P737 wd:Q692 .\n?x0 wdt:P737 wd:Q859 .\n?x0 wdt:P737 wd:Q991 .\n?x0 wdt:P3373 wd:Q77377 .\nFILTER ( ?x0 != wd:Q77377 )\n}",
        "questionWithBrackets": "What sibling of [Elisabeth F\u00f6rster-Nietzsche] was influenced by [Stendhal] , [Heinrich Heine] , and [William Shakespeare] , influenced by [Socrates] and [Plato] , and influenced by [Fyodor Dostoyevsky]"
    },
    {
        "questionIdx": 165546,
        "questionPatternModEntities": "What sibling of M0 was a female sibling of M1",
        "questionTemplate": "What [ROLE_SIMPLE] of [entity] was a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P1 M2 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x0 != M1 )\n}",
        "recursionDepth": 24,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P21 wd:Q6581072 .\n?x0 wdt:P3373 wd:Q905 .\n?x0 wdt:P3373 wd:Q1332115 .\nFILTER ( ?x0 != wd:Q905 ) .\nFILTER ( ?x0 != wd:Q1332115 )\n}",
        "questionWithBrackets": "What sibling of [Franz Kafka] was a female sibling of [Elli Kafka]"
    },
    {
        "questionIdx": 165548,
        "questionPatternModEntities": "What sibling of M1 's sibling did M0 marry",
        "questionTemplate": "What [ROLE_SIMPLE] of [entity] 's [ROLE_SIMPLE] did [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 M0 .\n?x1 P0 M1 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x1 != M1 )\n}",
        "recursionDepth": 20,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P3373 ?x1 .\n?x0 wdt:P26 wd:Q632595 .\n?x1 wdt:P3373 wd:Q39938 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x0 != wd:Q632595 ) .\nFILTER ( ?x1 != wd:Q39938 )\n}",
        "questionWithBrackets": "What sibling of [Ptolemy XIII Theos Philopator] 's sibling did [Archelaus] marry"
    },
    {
        "questionIdx": 165557,
        "questionPatternModEntities": "What sibling of M0 was influenced by M1 and M2 and was influenced by M3 , M4 , and M5",
        "questionTemplate": "What [ROLE_SIMPLE] of [entity] was [VP_SIMPLE] by [entity] and [entity] and was [VP_SIMPLE] by [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\n?x0 P1 M3 .\n?x0 P1 M4 .\n?x0 P1 M5 .\nFILTER ( ?x0 != M0 )\n}",
        "recursionDepth": 42,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P737 wd:Q868 .\n?x0 wdt:P737 wd:Q102851 .\n?x0 wdt:P737 wd:Q6691 .\n?x0 wdt:P737 wd:Q34943 .\n?x0 wdt:P737 wd:Q1398 .\n?x0 wdt:P3373 wd:Q3749520 .\nFILTER ( ?x0 != wd:Q3749520 )\n}",
        "questionWithBrackets": "What sibling of [Francesco Alighieri] was influenced by [Aristotle] and [Homer] and was influenced by [Ptolemy] , [Virgil] , and [Boethius]"
    },
    {
        "questionIdx": 165558,
        "questionPatternModEntities": "What sibling of M0 was influenced by M1 , influenced by M2 , M3 , and M4 , and influenced by M5 and M6",
        "questionTemplate": "What [ROLE_SIMPLE] of [entity] was [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , [entity] , and [entity] , and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\n?x0 P1 M3 .\n?x0 P1 M4 .\n?x0 P1 M5 .\n?x0 P1 M6 .\nFILTER ( ?x0 != M0 )\n}",
        "recursionDepth": 48,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P737 wd:Q859 .\n?x0 wdt:P737 wd:Q6882 .\n?x0 wdt:P737 wd:Q1334326 .\n?x0 wdt:P737 wd:Q1398 .\n?x0 wdt:P737 wd:Q6691 .\n?x0 wdt:P737 wd:Q1512 .\n?x0 wdt:P3373 wd:Q3343469 .\nFILTER ( ?x0 != wd:Q3343469 )\n}",
        "questionWithBrackets": "What sibling of [Norah Borges] was influenced by [Plato] , influenced by [James Joyce] , [Homer] , and [Robert Louis Stevenson] , and influenced by [Virgil] and [Macedonio Fern\u00e1ndez]"
    },
    {
        "questionIdx": 165592,
        "questionPatternModEntities": "What sibling of M0 did M1 employ",
        "questionTemplate": "What [ROLE_SIMPLE] of [entity] did [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M0 )\n}",
        "recursionDepth": 16,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P108 wd:Q1022419 .\n?x0 wdt:P3373 wd:Q352 .\nFILTER ( ?x0 != wd:Q352 )\n}",
        "questionWithBrackets": "What sibling of [Adolf Hitler] did [Uniqa Insurance Group] employ"
    },
    {
        "questionIdx": 165617,
        "questionPatternModEntities": "What sibling of M0 played M1 and M2",
        "questionTemplate": "What [ROLE_SIMPLE] of [entity] [VP_SIMPLE] [entity] and [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\nFILTER ( ?x0 != M0 )\n}",
        "recursionDepth": 20,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P453 wd:Q50386907 .\n?x0 wdt:P453 wd:Q5815108 .\n?x0 wdt:P3373 wd:Q3756757 .\nFILTER ( ?x0 != wd:Q3756757 )\n}",
        "questionWithBrackets": "What sibling of [Gabriella Pavarotti] played [Rodolfo] and [Duke of Mantua]"
    },
    {
        "questionIdx": 165619,
        "questionPatternModEntities": "What sibling of M0 did M1 influence , M2 influence , and M3 's parent influence",
        "questionTemplate": "What [ROLE_SIMPLE] of [entity] did [entity] [VP_SIMPLE] , [entity] [VP_SIMPLE] , and [entity] 's [ROLE_SIMPLE] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 ?x1 .\n?x0 P1 M1 .\n?x0 P1 M2 .\n?x1 P2 M3 .\nFILTER ( ?x0 != M0 )\n}",
        "recursionDepth": 40,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P737 ?x1 .\n?x0 wdt:P737 wd:Q868 .\n?x0 wdt:P737 wd:Q102851 .\n?x0 wdt:P3373 wd:Q3749520 .\n?x1 wdt:P40|wdt:P355 wd:Q2217419 .\nFILTER ( ?x0 != wd:Q3749520 )\n}",
        "questionWithBrackets": "What sibling of [Francesco Alighieri] did [Aristotle] influence , [Boethius] influence , and [Nicomachus] 's parent influence"
    },
    {
        "questionIdx": 165673,
        "questionPatternModEntities": "What sibling of a Mexican spouse of M2 did M0 marry",
        "questionTemplate": "What [ROLE_SIMPLE] of a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] did [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 M0 .\n?x1 P1 M2 .\n?x1 P2 M1 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x1 != M2 )\n}",
        "recursionDepth": 27,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P3373 ?x1 .\n?x0 wdt:P26 wd:Q5658602 .\n?x1 wdt:P27 wd:Q96 .\n?x1 wdt:P26 wd:Q4712055 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x0 != wd:Q5658602 ) .\nFILTER ( ?x1 != wd:Q4712055 )\n}",
        "questionWithBrackets": "What sibling of a Mexican spouse of [Bacar Buana Anlu] did [Adri\u00e1n Uribe] marry"
    },
    {
        "questionIdx": 165825,
        "questionPatternModEntities": "What sibling , parent , and spouse of M0 did M1 and M2 marry",
        "questionTemplate": "What [ROLE_SIMPLE] , [ROLE_SIMPLE] , and [ROLE_SIMPLE] of [entity] did [entity] and [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M0 .\n?x0 P2 M0 .\n?x0 P2 M1 .\n?x0 P2 M2 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x0 != M1 ) .\nFILTER ( ?x0 != M2 )\n}",
        "recursionDepth": 29,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q443473 .\n?x0 wdt:P3373 wd:Q443473 .\n?x0 wdt:P26 wd:Q210535 .\n?x0 wdt:P26 wd:Q256430 .\n?x0 wdt:P26 wd:Q443473 .\nFILTER ( ?x0 != wd:Q210535 ) .\nFILTER ( ?x0 != wd:Q256430 ) .\nFILTER ( ?x0 != wd:Q443473 ) .\nFILTER ( ?x0 != wd:Q443473 )\n}",
        "questionWithBrackets": "What sibling , parent , and spouse of [Henutmire] did [Maathorneferure] and [Nefertarilllala] marry"
    },
    {
        "questionIdx": 165827,
        "questionPatternModEntities": "What sibling , spouse , and parent of M0 married M1",
        "questionTemplate": "What [ROLE_SIMPLE] , [ROLE_SIMPLE] , and [ROLE_SIMPLE] of [entity] [VP_SIMPLE] [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M0 .\n?x0 P2 M0 .\n?x0 P2 M1 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x0 != M1 )\n}",
        "recursionDepth": 25,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q443473 .\n?x0 wdt:P3373 wd:Q443473 .\n?x0 wdt:P26 wd:Q210535 .\n?x0 wdt:P26 wd:Q443473 .\nFILTER ( ?x0 != wd:Q210535 ) .\nFILTER ( ?x0 != wd:Q443473 ) .\nFILTER ( ?x0 != wd:Q443473 )\n}",
        "questionWithBrackets": "What sibling , spouse , and parent of [Henutmire] married [Nefertarilllala]"
    },
    {
        "questionIdx": 165828,
        "questionPatternModEntities": "What sibling , spouse , and parent of M0 did M1 and M2 marry",
        "questionTemplate": "What [ROLE_SIMPLE] , [ROLE_SIMPLE] , and [ROLE_SIMPLE] of [entity] did [entity] and [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M0 .\n?x0 P2 M0 .\n?x0 P2 M1 .\n?x0 P2 M2 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x0 != M1 ) .\nFILTER ( ?x0 != M2 )\n}",
        "recursionDepth": 29,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q443473 .\n?x0 wdt:P3373 wd:Q443473 .\n?x0 wdt:P26 wd:Q443473 .\n?x0 wdt:P26 wd:Q210535 .\n?x0 wdt:P26 wd:Q256430 .\nFILTER ( ?x0 != wd:Q443473 ) .\nFILTER ( ?x0 != wd:Q443473 ) .\nFILTER ( ?x0 != wd:Q210535 ) .\nFILTER ( ?x0 != wd:Q256430 )\n}",
        "questionWithBrackets": "What sibling , spouse , and parent of [Henutmire] did [Maathorneferure] and [Nefertarilllala] marry"
    },
    {
        "questionIdx": 165846,
        "questionPatternModEntities": "What spouse and parent of M0 did M1 marry",
        "questionTemplate": "What [ROLE_SIMPLE] and [ROLE_SIMPLE] of [entity] did [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x0 != M1 )\n}",
        "recursionDepth": 21,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q40020 .\n?x0 wdt:P26 wd:Q40242 .\n?x0 wdt:P26 wd:Q40020 .\nFILTER ( ?x0 != wd:Q40242 ) .\nFILTER ( ?x0 != wd:Q40020 )\n}",
        "questionWithBrackets": "What spouse and parent of [Cleopatra VI of Egypt] did [Cleopatra V or VI of Egypt] marry"
    },
    {
        "questionIdx": 165850,
        "questionPatternModEntities": "What spouse and parent of M0 married M1 and M2 and married M3",
        "questionTemplate": "What [ROLE_SIMPLE] and [ROLE_SIMPLE] of [entity] [VP_SIMPLE] [entity] and [entity] and [VP_SIMPLE] [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\n?x0 P1 M3 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x0 != M1 ) .\nFILTER ( ?x0 != M2 ) .\nFILTER ( ?x0 != M3 )\n}",
        "recursionDepth": 36,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q261213 .\n?x0 wdt:P26 wd:Q261213 .\n?x0 wdt:P26 wd:Q210535 .\n?x0 wdt:P26 wd:Q256430 .\n?x0 wdt:P26 wd:Q256446 .\nFILTER ( ?x0 != wd:Q261213 ) .\nFILTER ( ?x0 != wd:Q210535 ) .\nFILTER ( ?x0 != wd:Q256430 ) .\nFILTER ( ?x0 != wd:Q256446 )\n}",
        "questionWithBrackets": "What spouse and parent of [Bintanath] married [Isetnofret] and [Nefertarilllala] and married [Maathorneferure]"
    },
    {
        "questionIdx": 165857,
        "questionPatternModEntities": "What spouse and sibling of M0 was a male sibling of M1",
        "questionTemplate": "What [ROLE_SIMPLE] and [ROLE_SIMPLE] of [entity] was a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P1 M2 .\n?x0 P2 M0 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x0 != M1 )\n}",
        "recursionDepth": 29,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P21 wd:Q6581097 .\n?x0 wdt:P3373 wd:Q635 .\n?x0 wdt:P3373 wd:Q39938 .\n?x0 wdt:P26 wd:Q635 .\nFILTER ( ?x0 != wd:Q635 ) .\nFILTER ( ?x0 != wd:Q635 ) .\nFILTER ( ?x0 != wd:Q39938 )\n}",
        "questionWithBrackets": "What spouse and sibling of [Cleopatra] was a male sibling of [Ptolemy XIII Theos Philopator]"
    },
    {
        "questionIdx": 165858,
        "questionPatternModEntities": "What spouse and sibling of M0 did M1 marry",
        "questionTemplate": "What [ROLE_SIMPLE] and [ROLE_SIMPLE] of [entity] did [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x0 != M1 )\n}",
        "recursionDepth": 21,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P3373 wd:Q3340 .\n?x0 wdt:P26 wd:Q296446 .\n?x0 wdt:P26 wd:Q3340 .\nFILTER ( ?x0 != wd:Q296446 ) .\nFILTER ( ?x0 != wd:Q3340 ) .\nFILTER ( ?x0 != wd:Q3340 )\n}",
        "questionWithBrackets": "What spouse and sibling of [Ptolemy IX Lathyros] did [Antiochus IX Cyzicenus] marry"
    },
    {
        "questionIdx": 165861,
        "questionPatternModEntities": "What spouse and sibling of M0 did M1 , M2 , M3 , and M4 marry",
        "questionTemplate": "What [ROLE_SIMPLE] and [ROLE_SIMPLE] of [entity] did [entity] , [entity] , [entity] , and [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\n?x0 P1 M3 .\n?x0 P1 M4 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x0 != M1 ) .\nFILTER ( ?x0 != M2 ) .\nFILTER ( ?x0 != M3 ) .\nFILTER ( ?x0 != M4 )\n}",
        "recursionDepth": 31,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P3373 wd:Q277524 .\n?x0 wdt:P26 wd:Q277524 .\n?x0 wdt:P26 wd:Q19280 .\n?x0 wdt:P26 wd:Q19281 .\n?x0 wdt:P26 wd:Q19299 .\n?x0 wdt:P26 wd:Q19284 .\nFILTER ( ?x0 != wd:Q277524 ) .\nFILTER ( ?x0 != wd:Q277524 ) .\nFILTER ( ?x0 != wd:Q19280 ) .\nFILTER ( ?x0 != wd:Q19281 ) .\nFILTER ( ?x0 != wd:Q19299 ) .\nFILTER ( ?x0 != wd:Q19284 )\n}",
        "questionWithBrackets": "What spouse and sibling of [Neferu II] did [Tem] , [Henhenet] , [Kemsit] , and [Ashayet] marry"
    },
    {
        "questionIdx": 165862,
        "questionPatternModEntities": "What spouse and sibling of M0 was M2 's female spouse",
        "questionTemplate": "What [ROLE_SIMPLE] and [ROLE_SIMPLE] of [entity] was [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P2 M0 .\n?x0 P2 M2 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x0 != M2 )\n}",
        "recursionDepth": 27,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P21 wd:Q6581072 .\n?x0 wdt:P3373 wd:Q3340 .\n?x0 wdt:P26 wd:Q3340 .\n?x0 wdt:P26 wd:Q296446 .\nFILTER ( ?x0 != wd:Q3340 ) .\nFILTER ( ?x0 != wd:Q3340 ) .\nFILTER ( ?x0 != wd:Q296446 )\n}",
        "questionWithBrackets": "What spouse and sibling of [Ptolemy IX Lathyros] was [Antiochus IX Cyzicenus] 's female spouse"
    },
    {
        "questionIdx": 165863,
        "questionPatternModEntities": "What spouse and sibling of M0 was M1 's sibling",
        "questionTemplate": "What [ROLE_SIMPLE] and [ROLE_SIMPLE] of [entity] was [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P1 M0 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x0 != M1 )\n}",
        "recursionDepth": 22,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P3373 wd:Q3345 .\n?x0 wdt:P3373 wd:Q3340 .\n?x0 wdt:P26 wd:Q3340 .\nFILTER ( ?x0 != wd:Q3345 ) .\nFILTER ( ?x0 != wd:Q3340 ) .\nFILTER ( ?x0 != wd:Q3340 )\n}",
        "questionWithBrackets": "What spouse and sibling of [Ptolemy IX Lathyros] was [Ptolemy X Alexander I] 's sibling"
    },
    {
        "questionIdx": 165870,
        "questionPatternModEntities": "What spouse and sibling of M0 married M1",
        "questionTemplate": "What [ROLE_SIMPLE] and [ROLE_SIMPLE] of [entity] [VP_SIMPLE] [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x0 != M1 )\n}",
        "recursionDepth": 21,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P3373 wd:Q3340 .\n?x0 wdt:P26 wd:Q3340 .\n?x0 wdt:P26 wd:Q296446 .\nFILTER ( ?x0 != wd:Q3340 ) .\nFILTER ( ?x0 != wd:Q3340 ) .\nFILTER ( ?x0 != wd:Q296446 )\n}",
        "questionWithBrackets": "What spouse and sibling of [Ptolemy IX Lathyros] married [Antiochus IX Cyzicenus]"
    },
    {
        "questionIdx": 165877,
        "questionPatternModEntities": "What spouse of M2 did M0 and M1 influence and M3 , M4 , M5 , and M6 marry",
        "questionTemplate": "What [ROLE_SIMPLE] of [entity] did [entity] and [entity] [VP_SIMPLE] and [entity] , [entity] , [entity] , and [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P1 M2 .\n?x0 P1 M3 .\n?x0 P1 M4 .\n?x0 P1 M5 .\n?x0 P1 M6 .\nFILTER ( ?x0 != M2 ) .\nFILTER ( ?x0 != M3 ) .\nFILTER ( ?x0 != M4 ) .\nFILTER ( ?x0 != M5 ) .\nFILTER ( ?x0 != M6 )\n}",
        "recursionDepth": 41,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P737 wd:Q7199 .\n?x0 wdt:P737 wd:Q1371154 .\n?x0 wdt:P26 wd:Q76071814 .\n?x0 wdt:P26 wd:Q6172037 .\n?x0 wdt:P26 wd:Q4681893 .\n?x0 wdt:P26 wd:Q76321864 .\n?x0 wdt:P26 wd:Q930069 .\nFILTER ( ?x0 != wd:Q76071814 ) .\nFILTER ( ?x0 != wd:Q6172037 ) .\nFILTER ( ?x0 != wd:Q4681893 ) .\nFILTER ( ?x0 != wd:Q76321864 ) .\nFILTER ( ?x0 != wd:Q930069 )\n}",
        "questionWithBrackets": "What spouse of [Beverly Rentz Bentley] did [Marcel Proust] and [James Thomas Farrell] influence and [Jeanne Campbell] , [Bea Silverman] , [Norris Church Mailer] , and [Adele Morales] marry"
    },
    {
        "questionIdx": 165893,
        "questionPatternModEntities": "What spouse of M0 did M1 and M2 marry",
        "questionTemplate": "What [ROLE_SIMPLE] of [entity] did [entity] and [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x0 != M1 ) .\nFILTER ( ?x0 != M2 )\n}",
        "recursionDepth": 20,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P26 wd:Q2831 .\n?x0 wdt:P26 wd:Q5220517 .\n?x0 wdt:P26 wd:Q42869 .\nFILTER ( ?x0 != wd:Q2831 ) .\nFILTER ( ?x0 != wd:Q5220517 ) .\nFILTER ( ?x0 != wd:Q42869 )\n}",
        "questionWithBrackets": "What spouse of [Michael Jackson] did [Danny Keough] and [Nicolas Cage] marry"
    },
    {
        "questionIdx": 165894,
        "questionPatternModEntities": "What spouse of M2 was M0 's male sibling",
        "questionTemplate": "What [ROLE_SIMPLE] of [entity] was [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P2 M2 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x0 != M2 )\n}",
        "recursionDepth": 22,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P21 wd:Q6581097 .\n?x0 wdt:P3373 wd:Q346 .\n?x0 wdt:P26 wd:Q126531 .\nFILTER ( ?x0 != wd:Q126531 ) .\nFILTER ( ?x0 != wd:Q346 )\n}",
        "questionWithBrackets": "What spouse of [Beatrice of Provence] was [Louis IX of France] 's male sibling"
    },
    {
        "questionIdx": 165913,
        "questionPatternModEntities": "What spouse of M6 married M4 and M5 and was influenced by M0 , M1 , M2 , and M3",
        "questionTemplate": "What [ROLE_SIMPLE] of [entity] [VP_SIMPLE] [entity] and [entity] and was [VP_SIMPLE] by [entity] , [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P0 M3 .\n?x0 P1 M4 .\n?x0 P1 M5 .\n?x0 P1 M6 .\nFILTER ( ?x0 != M4 ) .\nFILTER ( ?x0 != M5 ) .\nFILTER ( ?x0 != M6 )\n}",
        "recursionDepth": 43,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P737 wd:Q6527 .\n?x0 wdt:P737 wd:Q36661 .\n?x0 wdt:P737 wd:Q16867 .\n?x0 wdt:P737 wd:Q9358 .\n?x0 wdt:P26 wd:Q79179 .\n?x0 wdt:P26 wd:Q1807081 .\n?x0 wdt:P26 wd:Q435209 .\nFILTER ( ?x0 != wd:Q79179 ) .\nFILTER ( ?x0 != wd:Q1807081 ) .\nFILTER ( ?x0 != wd:Q435209 )\n}",
        "questionWithBrackets": "What spouse of [Harriet Bosse] married [Frida Uhl] and [Siri von Essen] and was influenced by [Friedrich Nietzsche] , [Jean-Jacques Rousseau] , [Edgar Allan Poe] , and [Henrik Ibsen]"
    },
    {
        "questionIdx": 165914,
        "questionPatternModEntities": "What spouse of M5 was influenced by M0 and M1 , was influenced by M2 , and married M3 and M4",
        "questionTemplate": "What [ROLE_SIMPLE] of [entity] was [VP_SIMPLE] by [entity] and [entity] , was [VP_SIMPLE] by [entity] , and [VP_SIMPLE] [entity] and [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P1 M3 .\n?x0 P1 M4 .\n?x0 P1 M5 .\nFILTER ( ?x0 != M3 ) .\nFILTER ( ?x0 != M4 ) .\nFILTER ( ?x0 != M5 )\n}",
        "recursionDepth": 48,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P737 wd:Q692 .\n?x0 wdt:P737 wd:Q7235 .\n?x0 wdt:P737 wd:Q36661 .\n?x0 wdt:P26 wd:Q112033 .\n?x0 wdt:P26 wd:Q62022932 .\n?x0 wdt:P26 wd:Q4616 .\nFILTER ( ?x0 != wd:Q112033 ) .\nFILTER ( ?x0 != wd:Q62022932 ) .\nFILTER ( ?x0 != wd:Q4616 )\n}",
        "questionWithBrackets": "What spouse of [Inge Morath] was influenced by [Henrik Ibsen] and [William Shakespeare] , was influenced by [Sophocles] , and married [Marilyn Monroe] and [Mary Slattery]"
    },
    {
        "questionIdx": 165926,
        "questionPatternModEntities": "What spouse of M0 was M1 's spouse 's spouse",
        "questionTemplate": "What [ROLE_SIMPLE] of [entity] was [entity] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P0 M0 .\n?x1 P0 M1 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x1 != M1 )\n}",
        "recursionDepth": 21,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P26 ?x1 .\n?x0 wdt:P26 wd:Q48174 .\n?x1 wdt:P26 wd:Q232090 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x0 != wd:Q48174 ) .\nFILTER ( ?x1 != wd:Q232090 )\n}",
        "questionWithBrackets": "What spouse of [Marcus Vipsanius Agrippa] was [Vipsania Agrippina] 's spouse 's spouse"
    },
    {
        "questionIdx": 165930,
        "questionPatternModEntities": "What spouse of M6 was influenced by M0 , M1 , and M2 , influenced by M3 and M4 , and influenced by M5",
        "questionTemplate": "What [ROLE_SIMPLE] of [entity] was [VP_SIMPLE] by [entity] , [entity] , and [entity] , [VP_SIMPLE] by [entity] and [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P0 M3 .\n?x0 P0 M4 .\n?x0 P0 M5 .\n?x0 P1 M6 .\nFILTER ( ?x0 != M6 )\n}",
        "recursionDepth": 48,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P737 wd:Q859 .\n?x0 wdt:P737 wd:Q42511 .\n?x0 wdt:P737 wd:Q6691 .\n?x0 wdt:P737 wd:Q16867 .\n?x0 wdt:P737 wd:Q1512 .\n?x0 wdt:P737 wd:Q38082 .\n?x0 wdt:P26 wd:Q448233 .\nFILTER ( ?x0 != wd:Q448233 )\n}",
        "questionWithBrackets": "What spouse of [Mar\u00eda Kodama] was influenced by [H. G. Wells] , [Homer] , and [Robert Louis Stevenson] , influenced by [Plato] and [Edgar Allan Poe] , and influenced by [Lewis Carroll]"
    },
    {
        "questionIdx": 165933,
        "questionPatternModEntities": "What spouse of M3 was a German female sibling of M0",
        "questionTemplate": "What [ROLE_SIMPLE] of [entity] was a [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P2 M2 .\n?x0 P3 M3 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x0 != M3 )\n}",
        "recursionDepth": 29,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P21 wd:Q6581072 .\n?x0 wdt:P27 wd:Q183 .\n?x0 wdt:P3373 wd:Q3978282 .\n?x0 wdt:P26 wd:Q91223 .\nFILTER ( ?x0 != wd:Q91223 ) .\nFILTER ( ?x0 != wd:Q3978282 )\n}",
        "questionWithBrackets": "What spouse of [Uwe R\u00f6mer] was a German female sibling of [Susanne K\u00f6nig]"
    },
    {
        "questionIdx": 165965,
        "questionPatternModEntities": "What spouse of M0 was influenced by and married M1 's spouse",
        "questionTemplate": "What [ROLE_SIMPLE] of [entity] was [VP_SIMPLE] by and [VP_SIMPLE] [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P1 M0 .\n?x1 P1 M1 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x1 != M1 )\n}",
        "recursionDepth": 30,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P737 ?x1 .\n?x0 wdt:P26 ?x1 .\n?x0 wdt:P26 wd:Q93514 .\n?x1 wdt:P26 wd:Q60869 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x0 != wd:Q93514 ) .\nFILTER ( ?x1 != wd:Q60869 )\n}",
        "questionWithBrackets": "What spouse of [Ilse Aichinger] was influenced by and married [G\u00fcnter Eich] 's spouse"
    },
    {
        "questionIdx": 165967,
        "questionPatternModEntities": "What spouse of M2 was influenced by M0 and M1 and influenced by M3 's British sibling",
        "questionTemplate": "What [ROLE_SIMPLE] of [entity] was [VP_SIMPLE] by [entity] and [entity] and [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P1 M2 .\n?x1 P2 M3 .\n?x1 P3 M4 .\nFILTER ( ?x0 != M2 ) .\nFILTER ( ?x1 != M3 )\n}",
        "recursionDepth": 41,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P737 ?x1 .\n?x0 wdt:P737 wd:Q153890 .\n?x0 wdt:P737 wd:Q1035 .\n?x0 wdt:P26 wd:Q439404 .\n?x1 wdt:P27 wd:Q145 .\n?x1 wdt:P3373 wd:Q14623673 .\nFILTER ( ?x0 != wd:Q439404 ) .\nFILTER ( ?x1 != wd:Q14623673 )\n}",
        "questionWithBrackets": "What spouse of [Lalla Ward] was influenced by [Niko Tinbergen] and [Charles Darwin] and influenced by [Susan Adams] 's British sibling"
    },
    {
        "questionIdx": 166011,
        "questionPatternModEntities": "What spouse of M4 was influenced by M0 and M1 , was influenced by M2 , and was influenced by M3",
        "questionTemplate": "What [ROLE_SIMPLE] of [entity] was [VP_SIMPLE] by [entity] and [entity] , was [VP_SIMPLE] by [entity] , and was [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P0 M3 .\n?x0 P1 M4 .\nFILTER ( ?x0 != M4 )\n}",
        "recursionDepth": 46,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P737 wd:Q535 .\n?x0 wdt:P737 wd:Q22670 .\n?x0 wdt:P737 wd:Q692 .\n?x0 wdt:P737 wd:Q43718 .\n?x0 wdt:P26 wd:Q872246 .\nFILTER ( ?x0 != wd:Q872246 )\n}",
        "questionWithBrackets": "What spouse of [Anna Dostoyevskaya] was influenced by [Victor Hugo] and [Nikolai Gogol] , was influenced by [William Shakespeare] , and was influenced by [Friedrich Schiller]"
    },
    {
        "questionIdx": 166035,
        "questionPatternModEntities": "What spouse of M3 was a Swedish employee of M0 and M1",
        "questionTemplate": "What [ROLE_SIMPLE] of [entity] was a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] and [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P1 M2 .\n?x0 P2 M3 .\nFILTER ( ?x0 != M3 )\n}",
        "recursionDepth": 28,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P108 wd:Q185246 .\n?x0 wdt:P108 wd:Q221645 .\n?x0 wdt:P27 wd:Q34 .\n?x0 wdt:P26 wd:Q20891912 .\nFILTER ( ?x0 != wd:Q20891912 )\n}",
        "questionWithBrackets": "What spouse of [Nanna Curman] was a Swedish employee of [Stockholm University] and [Uppsala University]"
    },
    {
        "questionIdx": 166041,
        "questionPatternModEntities": "What spouse of M2 's sibling married M0 and M1",
        "questionTemplate": "What [ROLE_SIMPLE] of [entity] 's [ROLE_SIMPLE] [VP_SIMPLE] [entity] and [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x1 P1 M2 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x0 != M1 ) .\nFILTER ( ?x1 != M2 )\n}",
        "recursionDepth": 24,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P26 ?x1 .\n?x0 wdt:P26 wd:Q40027 .\n?x0 wdt:P26 wd:Q451204 .\n?x1 wdt:P3373 wd:Q3345 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x0 != wd:Q40027 ) .\nFILTER ( ?x0 != wd:Q451204 ) .\nFILTER ( ?x1 != wd:Q3345 )\n}",
        "questionWithBrackets": "What spouse of [Ptolemy X Alexander I] 's sibling married [Tryphaena] and [Cleopatra Selene of Egypt and Syria]"
    },
    {
        "questionIdx": 166047,
        "questionPatternModEntities": "What spouse of M1 was a child of M0",
        "questionTemplate": "What [ROLE_SIMPLE] of [entity] was a [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M1 )\n}",
        "recursionDepth": 19,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P749 wd:Q1089760 .\n?x0 wdt:P26 wd:Q76375112 .\nFILTER ( ?x0 != wd:Q76375112 )\n}",
        "questionWithBrackets": "What spouse of [Eliazbeth Fristan] was a child of [Church Mission Society]"
    },
    {
        "questionIdx": 166066,
        "questionPatternModEntities": "What spouse of M1 's female sibling was M0 's spouse",
        "questionTemplate": "What [ROLE_SIMPLE] of [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] was [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P0 M0 .\n?x1 P1 M1 .\n?x1 P2 M2 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x1 != M1 )\n}",
        "recursionDepth": 26,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P26 ?x1 .\n?x0 wdt:P26 wd:Q1010767 .\n?x1 wdt:P21 wd:Q6581072 .\n?x1 wdt:P3373 wd:Q3044 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x0 != wd:Q1010767 ) .\nFILTER ( ?x1 != wd:Q3044 )\n}",
        "questionWithBrackets": "What spouse of [Charlemagne] 's female sibling was [Gisela, Abbess of Chelles] 's spouse"
    },
    {
        "questionIdx": 166078,
        "questionPatternModEntities": "What spouse of M1 was M0 's parent",
        "questionTemplate": "What [ROLE_SIMPLE] of [entity] was [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M1 )\n}",
        "recursionDepth": 17,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q101014 .\n?x0 wdt:P26 wd:Q1511 .\nFILTER ( ?x0 != wd:Q1511 )\n}",
        "questionWithBrackets": "What spouse of [Richard Wagner] was [Daniela von B\u00fclow] 's parent"
    },
    {
        "questionIdx": 166087,
        "questionPatternModEntities": "What spouse of M0 did a sibling of M1 influence and marry",
        "questionTemplate": "What [ROLE_SIMPLE] of [entity] did a [ROLE_SIMPLE] of [entity] [VP_SIMPLE] and [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P1 M0 .\n?x1 P2 M1 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x1 != M1 )\n}",
        "recursionDepth": 30,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P737 ?x1 .\n?x0 wdt:P26 ?x1 .\n?x0 wdt:P26 wd:Q24311 .\n?x1 wdt:P3373 wd:Q21557476 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x0 != wd:Q24311 ) .\nFILTER ( ?x1 != wd:Q21557476 )\n}",
        "questionWithBrackets": "What spouse of [Richard Meinertzhagen] did a sibling of [Margaret Booth (n\u00e9e Meinertzhagen)] influence and marry"
    },
    {
        "questionIdx": 166113,
        "questionPatternModEntities": "What spouse of M1 was a German spouse of M2",
        "questionTemplate": "What [ROLE_SIMPLE] of [entity] was a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\nFILTER ( ?x0 != M1 ) .\nFILTER ( ?x0 != M2 )\n}",
        "recursionDepth": 24,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P27 wd:Q183 .\n?x0 wdt:P26 wd:Q61450 .\n?x0 wdt:P26 wd:Q266142 .\nFILTER ( ?x0 != wd:Q61450 ) .\nFILTER ( ?x0 != wd:Q266142 )\n}",
        "questionWithBrackets": "What spouse of [Duchess Marie Gabrielle in Bavaria] was a German spouse of [Princess Antonia of Luxembourg]"
    },
    {
        "questionIdx": 166174,
        "questionPatternModEntities": "What spouse of M2 was a male sibling of M0",
        "questionTemplate": "What [ROLE_SIMPLE] of [entity] was a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P2 M2 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x0 != M2 )\n}",
        "recursionDepth": 24,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P21 wd:Q6581097 .\n?x0 wdt:P3373 wd:Q892 .\n?x0 wdt:P26 wd:Q76335497 .\nFILTER ( ?x0 != wd:Q892 ) .\nFILTER ( ?x0 != wd:Q76335497 )\n}",
        "questionWithBrackets": "What spouse of [Magdalen Matthews] was a male sibling of [J.\u00a0R.\u00a0R. Tolkien]"
    },
    {
        "questionIdx": 166201,
        "questionPatternModEntities": "What spouse of M1 was influenced by M0",
        "questionTemplate": "What [ROLE_SIMPLE] of [entity] was [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M1 )\n}",
        "recursionDepth": 18,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P737 wd:Q42 .\n?x0 wdt:P26 wd:Q439404 .\nFILTER ( ?x0 != wd:Q439404 )\n}",
        "questionWithBrackets": "What spouse of [Lalla Ward] was influenced by [Douglas Adams]"
    },
    {
        "questionIdx": 166206,
        "questionPatternModEntities": "What spouse of M1 was a sibling and parent of M0",
        "questionTemplate": "What [ROLE_SIMPLE] of [entity] was a [ROLE_SIMPLE] and [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M0 .\n?x0 P2 M1 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x0 != M1 )\n}",
        "recursionDepth": 24,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q493 .\n?x0 wdt:P3373 wd:Q493 .\n?x0 wdt:P26 wd:Q17148576 .\nFILTER ( ?x0 != wd:Q493 ) .\nFILTER ( ?x0 != wd:Q17148576 )\n}",
        "questionWithBrackets": "What spouse of [Vitalie Rimbaud] was a sibling and parent of [Arthur Rimbaud]"
    },
    {
        "questionIdx": 166350,
        "questionPatternModEntities": "What spouse of a sibling of M1 did M0 influence",
        "questionTemplate": "What [ROLE_SIMPLE] of a [ROLE_SIMPLE] of [entity] did [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 ?x1 .\n?x1 P2 M1 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x1 != M1 )\n}",
        "recursionDepth": 22,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P737 wd:Q255 .\n?x0 wdt:P26 ?x1 .\n?x1 wdt:P3373 wd:Q91828 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x1 != wd:Q91828 )\n}",
        "questionWithBrackets": "What spouse of a sibling of [Luise Hensel] did [Ludwig van Beethoven] influence"
    },
    {
        "questionIdx": 166933,
        "questionPatternModEntities": "What was M1 's male spouse 's gender",
        "questionTemplate": "What was [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x1 P1 M0 .\n?x1 P2 M1 .\nFILTER ( ?x1 != M1 )\n}",
        "recursionDepth": 20,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ^wdt:P21 ?x1 .\n?x1 wdt:P21 wd:Q6581097 .\n?x1 wdt:P26 wd:Q873 .\nFILTER ( ?x1 != wd:Q873 )\n}LIMIT 1",
        "questionWithBrackets": "What was [Meryl Streep] 's male spouse 's gender"
    },
    {
        "questionIdx": 166936,
        "questionPatternModEntities": "What was M0 's sequel 's prequel",
        "questionTemplate": "What was [entity] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x1 P1 M0\n}",
        "recursionDepth": 15,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P156 ?x1 .\n?x1 wdt:P155 wd:Q139319\n}LIMIT 1",
        "questionWithBrackets": "What was [Russian Republic] 's sequel 's prequel"
    },
    {
        "questionIdx": 166938,
        "questionPatternModEntities": "What was M0 's child 's gender",
        "questionTemplate": "What was [entity] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x1 P1 M0\n}",
        "recursionDepth": 15,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ^wdt:P21 ?x1 .\n?x1 wdt:P749 wd:Q308939\n}LIMIT 1",
        "questionWithBrackets": "What was [Akatsuki] 's child 's gender"
    },
    {
        "questionIdx": 166989,
        "questionPatternModEntities": "What was M0 's employee 's actor",
        "questionTemplate": "What was [entity] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x1 P1 M0\n}",
        "recursionDepth": 15,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P453 ?x1 .\n?x1 wdt:P108 wd:Q187998\n}LIMIT 1",
        "questionWithBrackets": "What was [Cesare Borgia] 's employee 's actor"
    },
    {
        "questionIdx": 166992,
        "questionPatternModEntities": "What was M0 's French Dutch sibling 's gender",
        "questionTemplate": "What was [entity] 's [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x1 P1 M0 .\n?x1 P2 M1 .\n?x1 P2 M2 .\nFILTER ( ?x1 != M0 )\n}",
        "recursionDepth": 25,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ^wdt:P21 ?x1 .\n?x1 wdt:P27 wd:Q29999 .\n?x1 wdt:P27 wd:Q142 .\n?x1 wdt:P3373 wd:Q94757521 .\nFILTER ( ?x1 != wd:Q94757521 )\n}LIMIT 1",
        "questionWithBrackets": "What was [Berthe Krull] 's French Dutch sibling 's gender"
    },
    {
        "questionIdx": 167028,
        "questionPatternModEntities": "What was M0 's Spanish sibling 's gender",
        "questionTemplate": "What was [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x1 P1 M0 .\n?x1 P2 M1 .\nFILTER ( ?x1 != M0 )\n}",
        "recursionDepth": 20,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ^wdt:P21 ?x1 .\n?x1 wdt:P27 wd:Q29 .\n?x1 wdt:P3373 wd:Q67198 .\nFILTER ( ?x1 != wd:Q67198 )\n}LIMIT 1",
        "questionWithBrackets": "What was [Philip William August, Count Palatine of Neuburg] 's Spanish sibling 's gender"
    },
    {
        "questionIdx": 167032,
        "questionPatternModEntities": "What was M1 's Dutch spouse 's gender",
        "questionTemplate": "What was [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x1 P1 M0 .\n?x1 P2 M1 .\nFILTER ( ?x1 != M1 )\n}",
        "recursionDepth": 20,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ^wdt:P21 ?x1 .\n?x1 wdt:P27 wd:Q29999 .\n?x1 wdt:P26 wd:Q125649 .\nFILTER ( ?x1 != wd:Q125649 )\n}LIMIT 1",
        "questionWithBrackets": "What was [William III of the Netherlands] 's Dutch spouse 's gender"
    },
    {
        "questionIdx": 167037,
        "questionPatternModEntities": "What was M0 's parent 's gender",
        "questionTemplate": "What was [entity] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x1 P1 M0\n}",
        "recursionDepth": 15,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ^wdt:P21 ?x1 .\n?x1 wdt:P40|wdt:P355 wd:Q1150\n}LIMIT 1",
        "questionWithBrackets": "What was [Mercury] 's parent 's gender"
    },
    {
        "questionIdx": 167086,
        "questionPatternModEntities": "What was M0 's sibling 's sibling 's gender",
        "questionTemplate": "What was [entity] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x1 P1 ?x2 .\n?x2 P1 M0 .\nFILTER ( ?x1 != ?x2 ) .\nFILTER ( ?x2 != M0 )\n}",
        "recursionDepth": 19,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ^wdt:P21 ?x1 .\n?x1 wdt:P3373 ?x2 .\n?x2 wdt:P3373 wd:Q773197 .\nFILTER ( ?x1 != ?x2 ) .\nFILTER ( ?x2 != wd:Q773197 )\n}LIMIT 1",
        "questionWithBrackets": "What was [Auma Obama] 's sibling 's sibling 's gender"
    },
    {
        "questionIdx": 167102,
        "questionPatternModEntities": "What was M3 's Spanish female Mexican parent 's gender",
        "questionTemplate": "What was [entity] 's [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x1 P1 M0 .\n?x1 P1 M1 .\n?x1 P2 M2 .\n?x1 P3 M3\n}",
        "recursionDepth": 30,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ^wdt:P21 ?x1 .\n?x1 wdt:P40|wdt:P355 wd:Q3299666 .\n?x1 wdt:P21 wd:Q6581072 .\n?x1 wdt:P27 wd:Q29 .\n?x1 wdt:P27 wd:Q96\n}LIMIT 1",
        "questionWithBrackets": "What was [Juan Ferrara] 's Spanish female Mexican parent 's gender"
    },
    {
        "questionIdx": 167174,
        "questionPatternModEntities": "What was M2 's female German parent 's gender",
        "questionTemplate": "What was [entity] 's [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x1 P1 M0 .\n?x1 P2 M1 .\n?x1 P3 M2\n}",
        "recursionDepth": 25,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ^wdt:P21 ?x1 .\n?x1 wdt:P40|wdt:P355 wd:Q22566830 .\n?x1 wdt:P21 wd:Q6581072 .\n?x1 wdt:P27 wd:Q183\n}LIMIT 1",
        "questionWithBrackets": "What was [Jaden Gil Agassi] 's female German parent 's gender"
    },
    {
        "questionIdx": 167229,
        "questionPatternModEntities": "What was M0 's sibling 's gender",
        "questionTemplate": "What was [entity] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x1 P1 M0 .\nFILTER ( ?x1 != M0 )\n}",
        "recursionDepth": 15,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ^wdt:P21 ?x1 .\n?x1 wdt:P3373 wd:Q3345 .\nFILTER ( ?x1 != wd:Q3345 )\n}LIMIT 1",
        "questionWithBrackets": "What was [Ptolemy X Alexander I] 's sibling 's gender"
    },
    {
        "questionIdx": 167288,
        "questionPatternModEntities": "What was M0 's actor 's spouse 's gender",
        "questionTemplate": "What was [entity] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x1 P1 ?x2 .\n?x2 P2 M0 .\nFILTER ( ?x1 != ?x2 )\n}",
        "recursionDepth": 19,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ^wdt:P21 ?x1 .\n?x1 wdt:P26 ?x2 .\n?x2 wdt:P453 wd:Q222573 .\nFILTER ( ?x1 != ?x2 )\n}LIMIT 1",
        "questionWithBrackets": "What was [femme fatale] 's actor 's spouse 's gender"
    },
    {
        "questionIdx": 167296,
        "questionPatternModEntities": "What was M0 's actor",
        "questionTemplate": "What was [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0\n}",
        "recursionDepth": 11,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P453 wd:Q190\n}LIMIT 1",
        "questionWithBrackets": "What was [God] 's actor"
    },
    {
        "questionIdx": 167314,
        "questionPatternModEntities": "What was M0 's male sibling 's actor",
        "questionTemplate": "What was [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x1 P1 M0 .\n?x1 P2 M1 .\nFILTER ( ?x1 != M0 )\n}",
        "recursionDepth": 20,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P453 ?x1 .\n?x1 wdt:P21 wd:Q6581097 .\n?x1 wdt:P3373 wd:Q2254599 .\nFILTER ( ?x1 != wd:Q2254599 )\n}LIMIT 1",
        "questionWithBrackets": "What was [\u00c9tienne Hubert de Cambac\u00e9r\u00e8s] 's male sibling 's actor"
    },
    {
        "questionIdx": 167315,
        "questionPatternModEntities": "What was M0 's Italian Swedish sibling 's gender",
        "questionTemplate": "What was [entity] 's [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x1 P1 M0 .\n?x1 P2 M1 .\n?x1 P2 M2 .\nFILTER ( ?x1 != M0 )\n}",
        "recursionDepth": 25,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ^wdt:P21 ?x1 .\n?x1 wdt:P27 wd:Q38 .\n?x1 wdt:P27 wd:Q34 .\n?x1 wdt:P3373 wd:Q508325 .\nFILTER ( ?x1 != wd:Q508325 )\n}LIMIT 1",
        "questionWithBrackets": "What was [Pia Lindstr\u00f6m] 's Italian Swedish sibling 's gender"
    },
    {
        "questionIdx": 167329,
        "questionPatternModEntities": "What was M0 's parent 's actor",
        "questionTemplate": "What was [entity] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x1 P1 M0\n}",
        "recursionDepth": 15,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P453 ?x1 .\n?x1 wdt:P40|wdt:P355 wd:Q130832\n}LIMIT 1",
        "questionWithBrackets": "What was [Perseus] 's parent 's actor"
    },
    {
        "questionIdx": 167343,
        "questionPatternModEntities": "What was M0 's spouse 's actor",
        "questionTemplate": "What was [entity] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x1 P1 M0 .\nFILTER ( ?x1 != M0 )\n}",
        "recursionDepth": 15,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P453 ?x1 .\n?x1 wdt:P26 wd:Q223468 .\nFILTER ( ?x1 != wd:Q223468 )\n}LIMIT 1",
        "questionWithBrackets": "What was [Faramir] 's spouse 's actor"
    },
    {
        "questionIdx": 167418,
        "questionPatternModEntities": "What was M0 's child",
        "questionTemplate": "What was [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0\n}",
        "recursionDepth": 11,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P749 wd:Q29\n}LIMIT 1",
        "questionWithBrackets": "What was [Spain] 's child"
    },
    {
        "questionIdx": 167856,
        "questionPatternModEntities": "What was a child of M0",
        "questionTemplate": "What was a [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0\n}",
        "recursionDepth": 13,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P749 wd:Q29\n}LIMIT 1",
        "questionWithBrackets": "What was a child of [Spain]"
    },
    {
        "questionIdx": 168595,
        "questionPatternModEntities": "What was a gender of M0 's child",
        "questionTemplate": "What was a [ROLE_SIMPLE] of [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x1 P1 M0\n}",
        "recursionDepth": 17,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ^wdt:P21 ?x1 .\n?x1 wdt:P749 wd:Q308939\n}LIMIT 1",
        "questionWithBrackets": "What was a gender of [Akatsuki] 's child"
    },
    {
        "questionIdx": 168621,
        "questionPatternModEntities": "What was a gender of a Dutch employee of M0",
        "questionTemplate": "What was a [ROLE_SIMPLE] of a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x1 P1 M0 .\n?x1 P2 M1\n}",
        "recursionDepth": 24,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ^wdt:P21 ?x1 .\n?x1 wdt:P108 wd:Q156152 .\n?x1 wdt:P27 wd:Q29999\n}LIMIT 1",
        "questionWithBrackets": "What was a gender of a Dutch employee of [IG Farben]"
    },
    {
        "questionIdx": 168653,
        "questionPatternModEntities": "What was a gender of a male employee of M0",
        "questionTemplate": "What was a [ROLE_SIMPLE] of a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x1 P1 M0 .\n?x1 P2 M1\n}",
        "recursionDepth": 24,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ^wdt:P21 ?x1 .\n?x1 wdt:P108 wd:Q15 .\n?x1 wdt:P21 wd:Q6581097\n}LIMIT 1",
        "questionWithBrackets": "What was a gender of a male employee of [Africa]"
    },
    {
        "questionIdx": 168660,
        "questionPatternModEntities": "What was a gender of a sibling of M0",
        "questionTemplate": "What was a [ROLE_SIMPLE] of a [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x1 P1 M0 .\nFILTER ( ?x1 != M0 )\n}",
        "recursionDepth": 19,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ^wdt:P21 ?x1 .\n?x1 wdt:P3373 wd:Q1322 .\nFILTER ( ?x1 != wd:Q1322 )\n}LIMIT 1",
        "questionWithBrackets": "What was a gender of a sibling of [Jos\u00e9 Manuel Balmaceda]"
    },
    {
        "questionIdx": 168666,
        "questionPatternModEntities": "What was a gender of a actor of M0",
        "questionTemplate": "What was a [ROLE_SIMPLE] of a [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x1 P1 M0\n}",
        "recursionDepth": 19,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ^wdt:P21 ?x1 .\n?x1 wdt:P453 wd:Q845913\n}LIMIT 1",
        "questionWithBrackets": "What was a gender of a actor of [Zerg]"
    },
    {
        "questionIdx": 168722,
        "questionPatternModEntities": "What was a parent of M0",
        "questionTemplate": "What was a [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0\n}",
        "recursionDepth": 13,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q334\n}LIMIT 1",
        "questionWithBrackets": "What was a parent of [Singapore]"
    },
    {
        "questionIdx": 168738,
        "questionPatternModEntities": "What was a prequel of a prequel of M0",
        "questionTemplate": "What was a [ROLE_SIMPLE] of a [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x1 P0 M0\n}",
        "recursionDepth": 19,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P156 ?x1 .\n?x1 wdt:P156 wd:Q131593\n}LIMIT 1",
        "questionWithBrackets": "What was a prequel of a prequel of [san]"
    },
    {
        "questionIdx": 168739,
        "questionPatternModEntities": "What was a prequel of a sequel of M0",
        "questionTemplate": "What was a [ROLE_SIMPLE] of a [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x1 P1 M0\n}",
        "recursionDepth": 19,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P156 ?x1 .\n?x1 wdt:P155 wd:Q112745\n}LIMIT 1",
        "questionWithBrackets": "What was a prequel of a sequel of [Kingdom of Lori]"
    },
    {
        "questionIdx": 169225,
        "questionPatternModEntities": "What was a actor of M0 's employee",
        "questionTemplate": "What was a [ROLE_SIMPLE] of [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x1 P1 M0\n}",
        "recursionDepth": 17,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P453 ?x1 .\n?x1 wdt:P108 wd:Q187998\n}LIMIT 1",
        "questionWithBrackets": "What was a actor of [Cesare Borgia] 's employee"
    },
    {
        "questionIdx": 169251,
        "questionPatternModEntities": "What was a actor of a American spouse of M1",
        "questionTemplate": "What was a [ROLE_SIMPLE] of a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x1 P1 M0 .\n?x1 P2 M1 .\nFILTER ( ?x1 != M1 )\n}",
        "recursionDepth": 24,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P453 ?x1 .\n?x1 wdt:P27 wd:Q30 .\n?x1 wdt:P26 wd:Q2984579 .\nFILTER ( ?x1 != wd:Q2984579 )\n}LIMIT 1",
        "questionWithBrackets": "What was a actor of a American spouse of [Columbo]"
    },
    {
        "questionIdx": 169252,
        "questionPatternModEntities": "What was a actor of a employee of M0",
        "questionTemplate": "What was a [ROLE_SIMPLE] of a [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x1 P1 M0\n}",
        "recursionDepth": 19,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P453 ?x1 .\n?x1 wdt:P108 wd:Q187998\n}LIMIT 1",
        "questionWithBrackets": "What was a actor of a employee of [Cesare Borgia]"
    },
    {
        "questionIdx": 169256,
        "questionPatternModEntities": "What was a actor that M0 was played by",
        "questionTemplate": "What was a [NP_SIMPLE] that [entity] was [VP_SIMPLE] by",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0\n}",
        "recursionDepth": 21,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P453 wd:Q190\n}LIMIT 1",
        "questionWithBrackets": "What was a actor that [God] was played by"
    },
    {
        "questionIdx": 169380,
        "questionPatternModEntities": "What was directed and edited by M0 and M1",
        "questionTemplate": "What was [VP_SIMPLE] and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P1 M0 .\n?x0 P1 M1\n}",
        "recursionDepth": 22,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 wd:Q53001 .\n?x0 wdt:P57 wd:Q604362 .\n?x0 wdt:P1040 wd:Q53001 .\n?x0 wdt:P1040 wd:Q604362\n}",
        "questionWithBrackets": "What was directed and edited by [Jean-Pierre Gorin] and [Jean-Luc Godard]"
    },
    {
        "questionIdx": 169386,
        "questionPatternModEntities": "What was directed and edited by M0 's sibling",
        "questionTemplate": "What was [VP_SIMPLE] and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x1 P2 M0 .\nFILTER ( ?x1 != M0 )\n}",
        "recursionDepth": 22,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 ?x1 .\n?x0 wdt:P1040 ?x1 .\n?x1 wdt:P3373 wd:Q469204 .\nFILTER ( ?x1 != wd:Q469204 )\n}LIMIT 1",
        "questionWithBrackets": "What was directed and edited by [Anne Spielberg] 's sibling"
    },
    {
        "questionIdx": 169389,
        "questionPatternModEntities": "What was directed and edited by M0",
        "questionTemplate": "What was [VP_SIMPLE] and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M0\n}",
        "recursionDepth": 18,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 wd:Q8006 .\n?x0 wdt:P1040 wd:Q8006\n}LIMIT 1",
        "questionWithBrackets": "What was directed and edited by [Akira Kurosawa]"
    },
    {
        "questionIdx": 169413,
        "questionPatternModEntities": "What was directed and edited by a spouse of M0",
        "questionTemplate": "What was [VP_SIMPLE] and [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x1 P2 M0 .\nFILTER ( ?x1 != M0 )\n}",
        "recursionDepth": 24,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 ?x1 .\n?x0 wdt:P1040 ?x1 .\n?x1 wdt:P26 wd:Q242951 .\nFILTER ( ?x1 != wd:Q242951 )\n}LIMIT 1",
        "questionWithBrackets": "What was directed and edited by a spouse of [Emma Thomas]"
    },
    {
        "questionIdx": 169427,
        "questionPatternModEntities": "What was directed and executive produced by M0 's sibling",
        "questionTemplate": "What was [VP_SIMPLE] and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x1 P2 M0 .\nFILTER ( ?x1 != M0 )\n}",
        "recursionDepth": 23,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 ?x1 .\n?x0 wdt:P1431 ?x1 .\n?x1 wdt:P3373 wd:Q469204 .\nFILTER ( ?x1 != wd:Q469204 )\n}LIMIT 1",
        "questionWithBrackets": "What was directed and executive produced by [Anne Spielberg] 's sibling"
    },
    {
        "questionIdx": 169453,
        "questionPatternModEntities": "What was directed and executive produced by a sibling of M0",
        "questionTemplate": "What was [VP_SIMPLE] and [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x1 P2 M0 .\nFILTER ( ?x1 != M0 )\n}",
        "recursionDepth": 25,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 ?x1 .\n?x0 wdt:P1431 ?x1 .\n?x1 wdt:P3373 wd:Q1899349 .\nFILTER ( ?x1 != wd:Q1899349 )\n}LIMIT 1",
        "questionWithBrackets": "What was directed and executive produced by a sibling of [Marita Gr\u00fcndgens]"
    },
    {
        "questionIdx": 169468,
        "questionPatternModEntities": "What was directed and produced by M0 's sibling 's spouse",
        "questionTemplate": "What was [VP_SIMPLE] and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x1 P2 ?x2 .\n?x2 P3 M0 .\nFILTER ( ?x1 != ?x2 ) .\nFILTER ( ?x2 != M0 )\n}",
        "recursionDepth": 26,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 ?x1 .\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x1 wdt:P26 ?x2 .\n?x2 wdt:P3373 wd:Q5407585 .\nFILTER ( ?x1 != ?x2 ) .\nFILTER ( ?x2 != wd:Q5407585 )\n}LIMIT 1",
        "questionWithBrackets": "What was directed and produced by [Eugene O'Neill, Jr.] 's sibling 's spouse"
    },
    {
        "questionIdx": 169471,
        "questionPatternModEntities": "What was directed and produced by M0",
        "questionTemplate": "What was [VP_SIMPLE] and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M0\n}",
        "recursionDepth": 18,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 wd:Q392 .\n?x0 wdt:P162|wdt:P272 wd:Q392\n}LIMIT 1",
        "questionWithBrackets": "What was directed and produced by [Bob Dylan]"
    },
    {
        "questionIdx": 169485,
        "questionPatternModEntities": "What was directed and produced by M0 , M1 , and M2",
        "questionTemplate": "What was [VP_SIMPLE] and [VP_SIMPLE] by [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P1 M0 .\n?x0 P1 M1 .\n?x0 P1 M2\n}",
        "recursionDepth": 25,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 wd:Q3772 .\n?x0 wdt:P57 wd:Q47284 .\n?x0 wdt:P57 wd:Q358714 .\n?x0 wdt:P162|wdt:P272 wd:Q3772 .\n?x0 wdt:P162|wdt:P272 wd:Q47284 .\n?x0 wdt:P162|wdt:P272 wd:Q358714\n}",
        "questionWithBrackets": "What was directed and produced by [Robert Rodriguez] , [Eli Roth] , and [Quentin Tarantino]"
    },
    {
        "questionIdx": 169511,
        "questionPatternModEntities": "What was directed and written by M0 , M1 , M2 , M3 , and M4",
        "questionTemplate": "What was [VP_SIMPLE] and [VP_SIMPLE] by [entity] , [entity] , [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P0 M3 .\n?x0 P0 M4 .\n?x0 P1 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\n?x0 P1 M3 .\n?x0 P1 M4\n}",
        "recursionDepth": 31,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 wd:Q4500 .\n?x0 wdt:P57 wd:Q15042700 .\n?x0 wdt:P57 wd:Q5542223 .\n?x0 wdt:P57 wd:Q7174311 .\n?x0 wdt:P57 wd:Q7407299 .\n?x0 wdt:P58 wd:Q4500 .\n?x0 wdt:P58 wd:Q15042700 .\n?x0 wdt:P58 wd:Q5542223 .\n?x0 wdt:P58 wd:Q7174311 .\n?x0 wdt:P58 wd:Q7407299\n}",
        "questionWithBrackets": "What was directed and written by [Vince Gilligan] , [George Mastras] , [Sam Catlin] , [Thomas Schnauz] , and [Peter Gould]"
    },
    {
        "questionIdx": 169595,
        "questionPatternModEntities": "What was directed by M0 and directed by a parent of M1",
        "questionTemplate": "What was [VP_SIMPLE] by [entity] and [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P0 M0 .\n?x1 P1 M1\n}",
        "recursionDepth": 28,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 ?x1 .\n?x0 wdt:P57 wd:Q4465 .\n?x1 wdt:P40|wdt:P355 wd:Q37824465\n}",
        "questionWithBrackets": "What was directed by [Peter Jackson] and directed by a parent of [Billy Jackson]"
    },
    {
        "questionIdx": 169644,
        "questionPatternModEntities": "What was directed by M1 's parent and directed by M0",
        "questionTemplate": "What was [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P0 M0 .\n?x1 P1 M1\n}",
        "recursionDepth": 26,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 ?x1 .\n?x0 wdt:P57 wd:Q4465 .\n?x1 wdt:P40|wdt:P355 wd:Q37824465\n}",
        "questionWithBrackets": "What was directed by [Billy Jackson] 's parent and directed by [Peter Jackson]"
    },
    {
        "questionIdx": 169656,
        "questionPatternModEntities": "What was directed by M4 , M5 , and M6 , edited by M0 and M1 , and edited by M2 and M3",
        "questionTemplate": "What was [VP_SIMPLE] by [entity] , [entity] , and [entity] , [VP_SIMPLE] by [entity] and [entity] , and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P0 M3 .\n?x0 P1 M4 .\n?x0 P1 M5 .\n?x0 P1 M6\n}",
        "recursionDepth": 46,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 wd:Q549956 .\n?x0 wdt:P57 wd:Q3772 .\n?x0 wdt:P57 wd:Q2838329 .\n?x0 wdt:P1040 wd:Q47284 .\n?x0 wdt:P1040 wd:Q5359064 .\n?x0 wdt:P1040 wd:Q273379 .\n?x0 wdt:P1040 wd:Q541143\n}",
        "questionWithBrackets": "What was directed by [Alexandre Rockwell] , [Quentin Tarantino] , and [Allison Anders] , edited by [Terry Rawlings] and [Robert Rodriguez] , and edited by [Sally Menke] and [Elena Maganini]"
    },
    {
        "questionIdx": 169667,
        "questionPatternModEntities": "What was directed by M5 and M6 , edited by M2 , M3 , and M4 , and written by M0 and M1",
        "questionTemplate": "What was [VP_SIMPLE] by [entity] and [entity] , [VP_SIMPLE] by [entity] , [entity] , and [entity] , and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P1 M2 .\n?x0 P1 M3 .\n?x0 P1 M4 .\n?x0 P2 M5 .\n?x0 P2 M6\n}",
        "recursionDepth": 46,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 wd:Q3772 .\n?x0 wdt:P57 wd:Q549956 .\n?x0 wdt:P1040 wd:Q47284 .\n?x0 wdt:P1040 wd:Q273379 .\n?x0 wdt:P1040 wd:Q541143 .\n?x0 wdt:P58 wd:Q2838329 .\n?x0 wdt:P58 wd:Q25161\n}",
        "questionWithBrackets": "What was directed by [Quentin Tarantino] and [Alexandre Rockwell] , edited by [Terry Rawlings] , [Robert Rodriguez] , and [Sally Menke] , and written by [Allison Anders] and [Roald Dahl]"
    },
    {
        "questionIdx": 169702,
        "questionPatternModEntities": "What was directed by M3 and M4 , written by M1 , executive produced by M0 , and written by M2",
        "questionTemplate": "What was [VP_SIMPLE] by [entity] and [entity] , [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\n?x0 P2 M3 .\n?x0 P2 M4\n}",
        "recursionDepth": 45,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 wd:Q62503 .\n?x0 wdt:P57 wd:Q457269 .\n?x0 wdt:P1431 wd:Q72291 .\n?x0 wdt:P58 wd:Q267441 .\n?x0 wdt:P58 wd:Q1132960\n}",
        "questionWithBrackets": "What was directed by [Victor Fleming] and [Sam Wood] , written by [Ben Hecht] , executive produced by [David O. Selznick] , and written by [Sidney Howard]"
    },
    {
        "questionIdx": 169737,
        "questionPatternModEntities": "What was directed by M0 and directed by M1 's child",
        "questionTemplate": "What was [VP_SIMPLE] by [entity] and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P0 M0 .\n?x1 P1 M1\n}",
        "recursionDepth": 26,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 ?x1 .\n?x0 wdt:P57 wd:Q7179536 .\n?x1 wdt:P749 wd:Q201296\n}",
        "questionWithBrackets": "What was directed by [Pew Center for Arts & Heritage] and directed by [The Pew Charitable Trusts] 's child"
    },
    {
        "questionIdx": 169759,
        "questionPatternModEntities": "What was directed by M2 's Mexican sibling and executive produced by M0 and M1",
        "questionTemplate": "What was [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P1 ?x1 .\n?x1 P2 M2 .\n?x1 P3 M3 .\nFILTER ( ?x1 != M2 )\n}",
        "recursionDepth": 36,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 ?x1 .\n?x0 wdt:P1431 wd:Q11778321 .\n?x0 wdt:P1431 wd:Q7684047 .\n?x1 wdt:P27 wd:Q96 .\n?x1 wdt:P3373 wd:Q2840325 .\nFILTER ( ?x1 != wd:Q2840325 )\n}",
        "questionWithBrackets": "What was directed by [Carlos Cuar\u00f3n] 's Mexican sibling and executive produced by [Tanya Seghatchian] and [Michael Barnathan]"
    },
    {
        "questionIdx": 169786,
        "questionPatternModEntities": "What was directed by M1 's sibling and edited by M0 's employee",
        "questionTemplate": "What was [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x2 .\n?x1 P2 M0 .\n?x2 P3 M1 .\nFILTER ( ?x2 != M1 )\n}",
        "recursionDepth": 30,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 ?x1 .\n?x0 wdt:P1040 ?x2 .\n?x1 wdt:P3373 wd:Q375333 .\n?x2 wdt:P108 wd:Q49088 .\nFILTER ( ?x1 != wd:Q375333 )\n}",
        "questionWithBrackets": "What was directed by [Joseph J. Kohn] 's sibling and edited by [Columbia University] 's employee"
    },
    {
        "questionIdx": 169817,
        "questionPatternModEntities": "What was directed by M1 's British spouse",
        "questionTemplate": "What was [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x1 P1 M0 .\n?x1 P2 M1 .\nFILTER ( ?x1 != M1 )\n}",
        "recursionDepth": 20,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 ?x1 .\n?x1 wdt:P27 wd:Q145 .\n?x1 wdt:P26 wd:Q95050 .\nFILTER ( ?x1 != wd:Q95050 )\n}LIMIT 1",
        "questionWithBrackets": "What was directed by [Paulette Goddard] 's British spouse"
    },
    {
        "questionIdx": 169834,
        "questionPatternModEntities": "What was directed by M1 's female spouse",
        "questionTemplate": "What was [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x1 P1 M0 .\n?x1 P2 M1 .\nFILTER ( ?x1 != M1 )\n}",
        "recursionDepth": 20,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 ?x1 .\n?x1 wdt:P21 wd:Q6581072 .\n?x1 wdt:P26 wd:Q896740 .\nFILTER ( ?x1 != wd:Q896740 )\n}LIMIT 1",
        "questionWithBrackets": "What was directed by [Brad Armstrong] 's female spouse"
    },
    {
        "questionIdx": 169864,
        "questionPatternModEntities": "What was directed by M4 , executive produced by M0 , written by M3 , and executive produced by M1 and M2",
        "questionTemplate": "What was [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P1 M3 .\n?x0 P2 M4\n}",
        "recursionDepth": 46,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 wd:Q89738028 .\n?x0 wdt:P1431 wd:Q76 .\n?x0 wdt:P1431 wd:Q13133 .\n?x0 wdt:P1431 wd:Q22115301 .\n?x0 wdt:P58 wd:Q90341521\n}",
        "questionWithBrackets": "What was directed by [James LeBrecht] , executive produced by [Michelle Obama] , written by [Nicole Newnham] , and executive produced by [Barack Obama] and [Howard Gertler]"
    },
    {
        "questionIdx": 169865,
        "questionPatternModEntities": "What was directed by M0 and M1 and executive produced by a Swedish spouse of M3",
        "questionTemplate": "What was [VP_SIMPLE] by [entity] and [entity] and [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 M0 .\n?x0 P1 M1 .\n?x1 P2 M2 .\n?x1 P3 M3 .\nFILTER ( ?x1 != M3 )\n}",
        "recursionDepth": 38,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 wd:Q355791 .\n?x0 wdt:P57 wd:Q17098673 .\n?x0 wdt:P1431 ?x1 .\n?x1 wdt:P27 wd:Q34 .\n?x1 wdt:P26 wd:Q17024515 .\nFILTER ( ?x1 != wd:Q17024515 )\n}",
        "questionWithBrackets": "What was directed by [Karin Julsrud] and [Marius Holst] and executive produced by a Swedish spouse of [My Skarsg\u00e5rd]"
    },
    {
        "questionIdx": 169867,
        "questionPatternModEntities": "What was directed by M2 , written by M0 and M1 , and directed by M4 's Mexican spouse",
        "questionTemplate": "What was [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] and [entity] , and [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P1 ?x1 .\n?x0 P1 M2 .\n?x1 P2 M3 .\n?x1 P3 M4 .\nFILTER ( ?x1 != M4 )\n}",
        "recursionDepth": 44,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 ?x1 .\n?x0 wdt:P57 wd:Q318491 .\n?x0 wdt:P58 wd:Q16145521 .\n?x0 wdt:P58 wd:Q3098604 .\n?x1 wdt:P27 wd:Q96 .\n?x1 wdt:P26 wd:Q439879 .\nFILTER ( ?x1 != wd:Q439879 )\n}",
        "questionWithBrackets": "What was directed by [Abel Salazar] , written by [Julio Alejandro] and [Alfredo Malerba] , and directed by [Gloria Mar\u00edn] 's Mexican spouse"
    },
    {
        "questionIdx": 169882,
        "questionPatternModEntities": "What was directed by M0 , produced by M3 's Italian spouse , and directed by M1",
        "questionTemplate": "What was [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 M0 .\n?x0 P1 M1 .\n?x1 P2 M2 .\n?x1 P3 M3 .\nFILTER ( ?x1 != M3 )\n}",
        "recursionDepth": 40,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 wd:Q3807488 .\n?x0 wdt:P57 wd:Q53004 .\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x1 wdt:P27 wd:Q38 .\n?x1 wdt:P26 wd:Q164065 .\nFILTER ( ?x1 != wd:Q164065 )\n}",
        "questionWithBrackets": "What was directed by [Vittorio De Sica] , produced by [Giuditta Rissone] 's Italian spouse , and directed by [Javier Set\u00f3]"
    },
    {
        "questionIdx": 169883,
        "questionPatternModEntities": "What was directed by M0 's female sibling",
        "questionTemplate": "What was [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x1 P1 M0 .\n?x1 P2 M1 .\nFILTER ( ?x1 != M0 )\n}",
        "recursionDepth": 20,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 ?x1 .\n?x1 wdt:P21 wd:Q6581072 .\n?x1 wdt:P3373 wd:Q3360333 .\nFILTER ( ?x1 != wd:Q3360333 )\n}LIMIT 1",
        "questionWithBrackets": "What was directed by [Paddy Bush] 's female sibling"
    },
    {
        "questionIdx": 169914,
        "questionPatternModEntities": "What was directed by M4 , executive produced by M0 , executive produced by M1 and M2 , and produced by M3",
        "questionTemplate": "What was [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] and [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P1 M3 .\n?x0 P2 M4\n}",
        "recursionDepth": 46,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 wd:Q13499404 .\n?x0 wdt:P1431 wd:Q35332 .\n?x0 wdt:P1431 wd:Q289380 .\n?x0 wdt:P1431 wd:Q5249738 .\n?x0 wdt:P162|wdt:P272 wd:Q907311\n}",
        "questionWithBrackets": "What was directed by [Zal Batmanglij] , executive produced by [Dede Gardner] , executive produced by [Brit Marling] and [Brad Pitt] , and produced by [Netflix]"
    },
    {
        "questionIdx": 169917,
        "questionPatternModEntities": "What was directed by M2 's spouse and directed by M1 's Dutch spouse",
        "questionTemplate": "What was [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] and [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P0 ?x2 .\n?x1 P1 M0 .\n?x1 P2 M1 .\n?x2 P2 M2 .\nFILTER ( ?x1 != M1 ) .\nFILTER ( ?x2 != M2 )\n}",
        "recursionDepth": 35,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 ?x1 .\n?x0 wdt:P57 ?x2 .\n?x1 wdt:P27 wd:Q29999 .\n?x1 wdt:P26 wd:Q22680438 .\n?x2 wdt:P26 wd:Q22680437 .\nFILTER ( ?x1 != wd:Q22680438 ) .\nFILTER ( ?x2 != wd:Q22680437 )\n}",
        "questionWithBrackets": "What was directed by [Heidi Merz] 's spouse and directed by [Ineke ten Cate] 's Dutch spouse"
    },
    {
        "questionIdx": 169956,
        "questionPatternModEntities": "What was directed by M2 's French Canadian spouse",
        "questionTemplate": "What was [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x1 P1 M0 .\n?x1 P1 M1 .\n?x1 P2 M2 .\nFILTER ( ?x1 != M2 )\n}",
        "recursionDepth": 25,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 ?x1 .\n?x1 wdt:P27 wd:Q16 .\n?x1 wdt:P27 wd:Q142 .\n?x1 wdt:P26 wd:Q128933 .\nFILTER ( ?x1 != wd:Q128933 )\n}LIMIT 1",
        "questionWithBrackets": "What was directed by [Micha\u00eblle Jean] 's French Canadian spouse"
    },
    {
        "questionIdx": 169963,
        "questionPatternModEntities": "What was directed by M0 , produced by a employee of M1 , and edited by M2 's sibling",
        "questionTemplate": "What was [VP_SIMPLE] by [entity] , [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity] , and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x2 .\n?x0 P2 M0 .\n?x1 P3 M1 .\n?x2 P4 M2 .\nFILTER ( ?x2 != M2 )\n}",
        "recursionDepth": 41,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 wd:Q51114 .\n?x0 wdt:P1040 ?x1 .\n?x0 wdt:P162|wdt:P272 ?x2 .\n?x1 wdt:P3373 wd:Q1361838 .\n?x2 wdt:P108 wd:Q658626 .\nFILTER ( ?x1 != wd:Q1361838 )\n}",
        "questionWithBrackets": "What was directed by [John Ford] , produced by a employee of [Office of Strategic Services] , and edited by [Francis Ford] 's sibling"
    },
    {
        "questionIdx": 169999,
        "questionPatternModEntities": "What was directed by M4 , directed by M5 and M6 , and executive produced by M0 , M1 , M2 , and M3",
        "questionTemplate": "What was [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] and [entity] , and [VP_SIMPLE] by [entity] , [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P0 M3 .\n?x0 P1 M4 .\n?x0 P1 M5 .\n?x0 P1 M6\n}",
        "recursionDepth": 46,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 wd:Q360477 .\n?x0 wdt:P57 wd:Q532944 .\n?x0 wdt:P57 wd:Q253977 .\n?x0 wdt:P1431 wd:Q8877 .\n?x0 wdt:P1431 wd:Q55602356 .\n?x0 wdt:P1431 wd:Q362793 .\n?x0 wdt:P1431 wd:Q849628\n}",
        "questionWithBrackets": "What was directed by [Eriq La Salle] , directed by [Roxann Dawson] and [Peter Weller] , and executive produced by [Justin Falvey] , [Jack Bender] , [Steven Spielberg] , and [Brian K. Vaughan]"
    },
    {
        "questionIdx": 170064,
        "questionPatternModEntities": "What was directed by M2 and M3 , edited by M1 , produced by M0 , and directed by a employee of M4",
        "questionTemplate": "What was [VP_SIMPLE] by [entity] and [entity] , [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P2 ?x1 .\n?x0 P2 M2 .\n?x0 P2 M3 .\n?x1 P3 M4\n}",
        "recursionDepth": 50,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 ?x1 .\n?x0 wdt:P57 wd:Q549956 .\n?x0 wdt:P57 wd:Q2838329 .\n?x0 wdt:P1040 wd:Q47284 .\n?x0 wdt:P162|wdt:P272 wd:Q300323 .\n?x1 wdt:P108 wd:Q263064\n}",
        "questionWithBrackets": "What was directed by [Allison Anders] and [Alexandre Rockwell] , edited by [Robert Rodriguez] , produced by [A Band Apart] , and directed by a employee of [University of California, Santa Barbara]"
    },
    {
        "questionIdx": 170121,
        "questionPatternModEntities": "What was directed by M1 , produced by M0 , and directed by M2",
        "questionTemplate": "What was [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P1 M2\n}",
        "recursionDepth": 31,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 wd:Q2646391 .\n?x0 wdt:P57 wd:Q951209 .\n?x0 wdt:P162|wdt:P272 wd:Q6583\n}",
        "questionWithBrackets": "What was directed by [Alfredo and Angelo Castiglioni] , produced by [Sahara] , and directed by [Guido Guerrasio]"
    },
    {
        "questionIdx": 170129,
        "questionPatternModEntities": "What was directed by M4 , produced by M5 's spouse , and executive produced by M0 , M1 , M2 , and M3",
        "questionTemplate": "What was [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] , and [VP_SIMPLE] by [entity] , [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P0 M3 .\n?x0 P1 ?x1 .\n?x0 P2 M4 .\n?x1 P3 M5 .\nFILTER ( ?x1 != M5 )\n}",
        "recursionDepth": 46,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 wd:Q360477 .\n?x0 wdt:P1431 wd:Q39829 .\n?x0 wdt:P1431 wd:Q7595870 .\n?x0 wdt:P1431 wd:Q55601945 .\n?x0 wdt:P1431 wd:Q362793 .\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x1 wdt:P26 wd:Q40162 .\nFILTER ( ?x1 != wd:Q40162 )\n}",
        "questionWithBrackets": "What was directed by [Peter Weller] , produced by [Kate Capshaw] 's spouse , and executive produced by [Stephen King] , [Jack Bender] , [Stacey Snider] , and [Darryl Frank]"
    },
    {
        "questionIdx": 170157,
        "questionPatternModEntities": "What was directed by M2 and M3 , executive produced by M0 , produced by M1 , and directed by M4",
        "questionTemplate": "What was [VP_SIMPLE] by [entity] and [entity] , [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P2 M2 .\n?x0 P2 M3 .\n?x0 P2 M4\n}",
        "recursionDepth": 45,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 wd:Q7823572 .\n?x0 wdt:P57 wd:Q1279660 .\n?x0 wdt:P57 wd:Q325805 .\n?x0 wdt:P1431 wd:Q8877 .\n?x0 wdt:P162|wdt:P272 wd:Q2263\n}",
        "questionWithBrackets": "What was directed by [Tony To] and [David Nutter] , executive produced by [Steven Spielberg] , produced by [Tom Hanks] , and directed by [David Leland]"
    },
    {
        "questionIdx": 170169,
        "questionPatternModEntities": "What was directed by M0 and directed by M1",
        "questionTemplate": "What was [VP_SIMPLE] by [entity] and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1\n}",
        "recursionDepth": 22,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 wd:Q882 .\n?x0 wdt:P57 wd:Q1383202\n}",
        "questionWithBrackets": "What was directed by [Leo White] and directed by [Charlie Chaplin]"
    },
    {
        "questionIdx": 170188,
        "questionPatternModEntities": "What was directed by M4 , executive produced by M0 and M1 , written by M2 , and written by M3",
        "questionTemplate": "What was [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] and [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P1 M2 .\n?x0 P1 M3 .\n?x0 P2 M4\n}",
        "recursionDepth": 45,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 wd:Q18519749 .\n?x0 wdt:P1431 wd:Q481925 .\n?x0 wdt:P1431 wd:Q24176186 .\n?x0 wdt:P58 wd:Q5107425 .\n?x0 wdt:P58 wd:Q26268915\n}",
        "questionWithBrackets": "What was directed by [Jon Watts] , executive produced by [Victoria Alonso] and [Amy Pascal] , written by [Erik Sommers] , and written by [Chris McKenna]"
    },
    {
        "questionIdx": 170189,
        "questionPatternModEntities": "What was directed by M6 , executive produced by M0 , M1 , and M2 , and edited by M3 , M4 , and M5",
        "questionTemplate": "What was [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , [entity] , and [entity] , and [VP_SIMPLE] by [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P1 M3 .\n?x0 P1 M4 .\n?x0 P1 M5 .\n?x0 P2 M6\n}",
        "recursionDepth": 46,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 wd:Q20721911 .\n?x0 wdt:P1040 wd:Q20722013 .\n?x0 wdt:P1040 wd:Q20722014 .\n?x0 wdt:P1040 wd:Q20722019 .\n?x0 wdt:P1431 wd:Q350405 .\n?x0 wdt:P1431 wd:Q20722010 .\n?x0 wdt:P1431 wd:Q20722012\n}",
        "questionWithBrackets": "What was directed by [Andy Bichlbaum] , executive produced by [Adam McKay] , [Alan Hayling] , and [Alex Cooke] , and edited by [Steven Simone-Friedland] , [Geraud Brisson] , and [Claire L. Chandler]"
    },
    {
        "questionIdx": 170223,
        "questionPatternModEntities": "What was directed by M1 , produced by M2 's Chinese sibling 's parent , and edited by M0",
        "questionTemplate": "What was [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] 's [ROLE_SIMPLE] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 M0 .\n?x0 P2 M1 .\n?x1 P3 ?x2 .\n?x2 P4 M2 .\n?x2 P5 M3 .\nFILTER ( ?x2 != M2 )\n}",
        "recursionDepth": 44,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 wd:Q185783 .\n?x0 wdt:P1040 wd:Q5094249 .\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x1 wdt:P40|wdt:P355 ?x2 .\n?x2 wdt:P27 wd:Q148 .\n?x2 wdt:P3373 wd:Q54317718 .\nFILTER ( ?x2 != wd:Q54317718 )\n}",
        "questionWithBrackets": "What was directed by [Stanley Tong] , produced by [Etta Ng] 's Chinese sibling 's parent , and edited by [Cheung Ka-fai]"
    },
    {
        "questionIdx": 170250,
        "questionPatternModEntities": "What was directed by M1 , edited by M0 , and executive produced by M3 's French spouse 's spouse",
        "questionTemplate": "What was [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 M0 .\n?x0 P2 M1 .\n?x1 P3 ?x2 .\n?x2 P3 M3 .\n?x2 P4 M2 .\nFILTER ( ?x1 != ?x2 ) .\nFILTER ( ?x2 != M3 )\n}",
        "recursionDepth": 45,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 wd:Q2364234 .\n?x0 wdt:P1040 wd:Q3295775 .\n?x0 wdt:P1431 ?x1 .\n?x1 wdt:P26 ?x2 .\n?x2 wdt:P27 wd:Q142 .\n?x2 wdt:P26 wd:Q484779 .\nFILTER ( ?x1 != ?x2 ) .\nFILTER ( ?x2 != wd:Q484779 )\n}",
        "questionWithBrackets": "What was directed by [Xavier Giannoli] , edited by [Martine Giordano] , and executive produced by [Luc Besson] 's French spouse 's spouse"
    },
    {
        "questionIdx": 170322,
        "questionPatternModEntities": "What was directed by M4 and M5 , directed by M6 , and executive produced by M0 , M1 , M2 , and M3",
        "questionTemplate": "What was [VP_SIMPLE] by [entity] and [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity] , [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P0 M3 .\n?x0 P1 M4 .\n?x0 P1 M5 .\n?x0 P1 M6\n}",
        "recursionDepth": 46,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 wd:Q253977 .\n?x0 wdt:P57 wd:Q1356510 .\n?x0 wdt:P57 wd:Q678310 .\n?x0 wdt:P1431 wd:Q8877 .\n?x0 wdt:P1431 wd:Q7804237 .\n?x0 wdt:P1431 wd:Q6984051 .\n?x0 wdt:P1431 wd:Q39829\n}",
        "questionWithBrackets": "What was directed by [Roxann Dawson] and [Ernest Dickerson] , directed by [Niels Arden Oplev] , and executive produced by [Tim Schlattmann] , [Stephen King] , [Neal Baer] , and [Steven Spielberg]"
    },
    {
        "questionIdx": 170379,
        "questionPatternModEntities": "What was directed by M5 's spouse , executive produced by M0 and M1 , and directed by M2 , M3 , and M4",
        "questionTemplate": "What was [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] , [VP_SIMPLE] by [entity] and [entity] , and [VP_SIMPLE] by [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P1 ?x1 .\n?x0 P1 M2 .\n?x0 P1 M3 .\n?x0 P1 M4 .\n?x1 P2 M5 .\nFILTER ( ?x1 != M5 )\n}",
        "recursionDepth": 47,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 ?x1 .\n?x0 wdt:P57 wd:Q2273145 .\n?x0 wdt:P57 wd:Q98931722 .\n?x0 wdt:P57 wd:Q21066699 .\n?x0 wdt:P1431 wd:Q56005 .\n?x0 wdt:P1431 wd:Q17145814 .\n?x1 wdt:P26 wd:Q22075592 .\nFILTER ( ?x1 != wd:Q22075592 )\n}",
        "questionWithBrackets": "What was directed by [Felicity Heywood] 's spouse , executive produced by [Ridley Scott] and [David W. Zucker] , and directed by [Alex Gabassi] , [Sergio Mimica-Gezzan] , and [Luke Scott]"
    },
    {
        "questionIdx": 170480,
        "questionPatternModEntities": "What was directed by M4 , executive produced by M0 and M1 , edited by M3 , and produced by M2",
        "questionTemplate": "What was [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] and [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P1 M2 .\n?x0 P2 M3 .\n?x0 P3 M4\n}",
        "recursionDepth": 45,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 wd:Q459933 .\n?x0 wdt:P1040 wd:Q11737407 .\n?x0 wdt:P1431 wd:Q36159 .\n?x0 wdt:P1431 wd:Q105298512 .\n?x0 wdt:P162|wdt:P272 wd:Q1156642\n}",
        "questionWithBrackets": "What was directed by [Kasi Lemmons] , executive produced by [Elle Johnson] and [LeBron James] , edited by [Kathryn Himoff] , and produced by [Warner Bros. Television Studios]"
    },
    {
        "questionIdx": 170484,
        "questionPatternModEntities": "What was directed by M2 , produced by M1 , and executive produced by M0",
        "questionTemplate": "What was [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P2 M2\n}",
        "recursionDepth": 32,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 wd:Q47284 .\n?x0 wdt:P1431 wd:Q3772 .\n?x0 wdt:P162|wdt:P272 wd:Q300323\n}",
        "questionWithBrackets": "What was directed by [Robert Rodriguez] , produced by [A Band Apart] , and executive produced by [Quentin Tarantino]"
    },
    {
        "questionIdx": 170492,
        "questionPatternModEntities": "What was directed by M1 's child and directed by M0",
        "questionTemplate": "What was [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P0 M0 .\n?x1 P1 M1\n}",
        "recursionDepth": 26,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 ?x1 .\n?x0 wdt:P57 wd:Q7179536 .\n?x1 wdt:P749 wd:Q201296\n}",
        "questionWithBrackets": "What was directed by [The Pew Charitable Trusts] 's child and directed by [Pew Center for Arts & Heritage]"
    },
    {
        "questionIdx": 170525,
        "questionPatternModEntities": "What was directed by M4 , written by M0 , M1 , M2 , and M3 , and directed by M6 's British spouse",
        "questionTemplate": "What was [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , [entity] , [entity] , and [entity] , and [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P0 M3 .\n?x0 P1 ?x1 .\n?x0 P1 M4 .\n?x1 P2 M5 .\n?x1 P3 M6 .\nFILTER ( ?x1 != M6 )\n}",
        "recursionDepth": 50,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 ?x1 .\n?x0 wdt:P57 wd:Q60041814 .\n?x0 wdt:P58 wd:Q1159118 .\n?x0 wdt:P58 wd:Q5214477 .\n?x0 wdt:P58 wd:Q29055 .\n?x0 wdt:P58 wd:Q60041870 .\n?x1 wdt:P27 wd:Q145 .\n?x1 wdt:P26 wd:Q228638 .\nFILTER ( ?x1 != wd:Q228638 )\n}",
        "questionWithBrackets": "What was directed by [Payman Benz] , written by [Dan Mazer] , [Dan Swimer] , [Sacha Baron Cohen] , and [Brian Reich] , and directed by [Isla Fisher] 's British spouse"
    },
    {
        "questionIdx": 170575,
        "questionPatternModEntities": "What was directed by a British sibling of M1 and executive produced by M0",
        "questionTemplate": "What was [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 ?x1 .\n?x1 P2 M1 .\n?x1 P3 M2 .\nFILTER ( ?x1 != M1 )\n}",
        "recursionDepth": 34,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 ?x1 .\n?x0 wdt:P1431 wd:Q39829 .\n?x1 wdt:P27 wd:Q145 .\n?x1 wdt:P3373 wd:Q506124 .\nFILTER ( ?x1 != wd:Q506124 )\n}",
        "questionWithBrackets": "What was directed by a British sibling of [Andrew Macdonald] and executive produced by [Stephen King]"
    },
    {
        "questionIdx": 170607,
        "questionPatternModEntities": "What was directed by a French spouse of M1",
        "questionTemplate": "What was [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x1 P1 M0 .\n?x1 P2 M1 .\nFILTER ( ?x1 != M1 )\n}",
        "recursionDepth": 22,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 ?x1 .\n?x1 wdt:P27 wd:Q142 .\n?x1 wdt:P26 wd:Q212873 .\nFILTER ( ?x1 != wd:Q212873 )\n}LIMIT 1",
        "questionWithBrackets": "What was directed by a French spouse of [Jane Birkin]"
    },
    {
        "questionIdx": 170614,
        "questionPatternModEntities": "What was directed by a German female sibling of M0",
        "questionTemplate": "What was [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x1 P1 M0 .\n?x1 P2 M1 .\n?x1 P3 M2 .\nFILTER ( ?x1 != M0 )\n}",
        "recursionDepth": 27,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 ?x1 .\n?x1 wdt:P21 wd:Q6581072 .\n?x1 wdt:P27 wd:Q183 .\n?x1 wdt:P3373 wd:Q5553615 .\nFILTER ( ?x1 != wd:Q5553615 )\n}LIMIT 1",
        "questionWithBrackets": "What was directed by a German female sibling of [Gesine Bullock-Prado]"
    },
    {
        "questionIdx": 170647,
        "questionPatternModEntities": "What was directed by a Swedish employee of M1 and directed by M0",
        "questionTemplate": "What was [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P0 M0 .\n?x1 P1 M1 .\n?x1 P2 M2\n}",
        "recursionDepth": 33,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 ?x1 .\n?x0 wdt:P57 wd:Q2071 .\n?x1 wdt:P108 wd:Q740308 .\n?x1 wdt:P27 wd:Q34\n}",
        "questionWithBrackets": "What was directed by a Swedish employee of [UNICEF] and directed by [David Lynch]"
    },
    {
        "questionIdx": 170858,
        "questionPatternModEntities": "What was directed by a male sibling of M3 and directed by M0 , M1 , and M2",
        "questionTemplate": "What was [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] and [VP_SIMPLE] by [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x1 P1 M3 .\n?x1 P2 M4 .\nFILTER ( ?x1 != M3 )\n}",
        "recursionDepth": 40,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 ?x1 .\n?x0 wdt:P57 wd:Q67903 .\n?x0 wdt:P57 wd:Q55168 .\n?x0 wdt:P57 wd:Q2071 .\n?x1 wdt:P21 wd:Q6581097 .\n?x1 wdt:P3373 wd:Q104373781 .\nFILTER ( ?x1 != wd:Q104373781 )\n}",
        "questionWithBrackets": "What was directed by a male sibling of [John Lynch] and directed by [David Lynch] , [Helma Sanders-Brahms] , and [Thodoros Angelopoulos]"
    },
    {
        "questionIdx": 170918,
        "questionPatternModEntities": "What was directed by a sibling of M3 , edited by M2 , written by M1 , and executive produced by M0",
        "questionTemplate": "What was [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity] , [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P2 M2 .\n?x0 P3 ?x1 .\n?x1 P4 M3 .\nFILTER ( ?x1 != M3 )\n}",
        "recursionDepth": 47,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 ?x1 .\n?x0 wdt:P1040 wd:Q692550 .\n?x0 wdt:P1431 wd:Q51516 .\n?x0 wdt:P58 wd:Q435696 .\n?x1 wdt:P3373 wd:Q469204 .\nFILTER ( ?x1 != wd:Q469204 )\n}",
        "questionWithBrackets": "What was directed by a sibling of [Anne Spielberg] , edited by [Michael Kahn] , written by [Melissa Mathison] , and executive produced by [John Madden]"
    },
    {
        "questionIdx": 170932,
        "questionPatternModEntities": "What was directed by a spouse of M1 and directed by M0",
        "questionTemplate": "What was [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity] and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P0 M0 .\n?x1 P1 M1 .\nFILTER ( ?x1 != M1 )\n}",
        "recursionDepth": 28,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 ?x1 .\n?x0 wdt:P57 wd:Q4465 .\n?x1 wdt:P26 wd:Q116861 .\nFILTER ( ?x1 != wd:Q116861 )\n}",
        "questionWithBrackets": "What was directed by a spouse of [Fran Walsh] and directed by [Peter Jackson]"
    },
    {
        "questionIdx": 171064,
        "questionPatternModEntities": "What was directed by and edited by M0 and M1",
        "questionTemplate": "What was [VP_SIMPLE] by and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P1 M0 .\n?x0 P1 M1\n}",
        "recursionDepth": 23,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 wd:Q24907 .\n?x0 wdt:P57 wd:Q5341401 .\n?x0 wdt:P1040 wd:Q24907 .\n?x0 wdt:P1040 wd:Q5341401\n}",
        "questionWithBrackets": "What was directed by and edited by [Edvin Tiemroth] and [Anker S\u00f8rensen]"
    },
    {
        "questionIdx": 171066,
        "questionPatternModEntities": "What was directed by and edited by M0 's sibling",
        "questionTemplate": "What was [VP_SIMPLE] by and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x1 P2 M0 .\nFILTER ( ?x1 != M0 )\n}",
        "recursionDepth": 23,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 ?x1 .\n?x0 wdt:P1040 ?x1 .\n?x1 wdt:P3373 wd:Q104373781 .\nFILTER ( ?x1 != wd:Q104373781 )\n}LIMIT 1",
        "questionWithBrackets": "What was directed by and edited by [John Lynch] 's sibling"
    },
    {
        "questionIdx": 171068,
        "questionPatternModEntities": "What was directed by and edited by M0 's female sibling",
        "questionTemplate": "What was [VP_SIMPLE] by and [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x1 P2 M0 .\n?x1 P3 M1 .\nFILTER ( ?x1 != M0 )\n}",
        "recursionDepth": 28,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 ?x1 .\n?x0 wdt:P1040 ?x1 .\n?x1 wdt:P21 wd:Q6581072 .\n?x1 wdt:P3373 wd:Q143945 .\nFILTER ( ?x1 != wd:Q143945 )\n}LIMIT 1",
        "questionWithBrackets": "What was directed by and edited by [Carla Bruni] 's female sibling"
    },
    {
        "questionIdx": 171081,
        "questionPatternModEntities": "What was directed by and edited by M1 's Japanese spouse",
        "questionTemplate": "What was [VP_SIMPLE] by and [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x1 P2 M0 .\n?x1 P3 M1 .\nFILTER ( ?x1 != M1 )\n}",
        "recursionDepth": 28,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 ?x1 .\n?x0 wdt:P1040 ?x1 .\n?x1 wdt:P27 wd:Q17 .\n?x1 wdt:P26 wd:Q3032150 .\nFILTER ( ?x1 != wd:Q3032150 )\n}LIMIT 1",
        "questionWithBrackets": "What was directed by and edited by [Y\u014dko Yaguchi] 's Japanese spouse"
    },
    {
        "questionIdx": 171102,
        "questionPatternModEntities": "What was directed by and edited by a female spouse of M1",
        "questionTemplate": "What was [VP_SIMPLE] by and [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x1 P2 M0 .\n?x1 P3 M1 .\nFILTER ( ?x1 != M1 )\n}",
        "recursionDepth": 30,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 ?x1 .\n?x0 wdt:P1040 ?x1 .\n?x1 wdt:P21 wd:Q6581072 .\n?x1 wdt:P26 wd:Q347950 .\nFILTER ( ?x1 != wd:Q347950 )\n}LIMIT 1",
        "questionWithBrackets": "What was directed by and edited by a female spouse of [Gaspar No\u00e9]"
    },
    {
        "questionIdx": 171124,
        "questionPatternModEntities": "What was directed by and executive produced by M0",
        "questionTemplate": "What was [VP_SIMPLE] by and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M0\n}",
        "recursionDepth": 20,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 wd:Q1744 .\n?x0 wdt:P1431 wd:Q1744\n}LIMIT 1",
        "questionWithBrackets": "What was directed by and executive produced by [Madonna]"
    },
    {
        "questionIdx": 171189,
        "questionPatternModEntities": "What was directed by and produced by M0 and M1",
        "questionTemplate": "What was [VP_SIMPLE] by and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P1 M0 .\n?x0 P1 M1\n}",
        "recursionDepth": 23,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 wd:Q3772 .\n?x0 wdt:P57 wd:Q47284 .\n?x0 wdt:P162|wdt:P272 wd:Q3772 .\n?x0 wdt:P162|wdt:P272 wd:Q47284\n}",
        "questionWithBrackets": "What was directed by and produced by [Quentin Tarantino] and [Robert Rodriguez]"
    },
    {
        "questionIdx": 171216,
        "questionPatternModEntities": "What was directed by and produced by a sibling of M0",
        "questionTemplate": "What was [VP_SIMPLE] by and [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x1 P2 M0 .\nFILTER ( ?x1 != M0 )\n}",
        "recursionDepth": 25,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 ?x1 .\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x1 wdt:P3373 wd:Q606780 .\nFILTER ( ?x1 != wd:Q606780 )\n}LIMIT 1",
        "questionWithBrackets": "What was directed by and produced by a sibling of [Sydney Chaplin]"
    },
    {
        "questionIdx": 171240,
        "questionPatternModEntities": "What was directed by and written by a French employee of M0",
        "questionTemplate": "What was [VP_SIMPLE] by and [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x1 P2 M0 .\n?x1 P3 M1\n}",
        "recursionDepth": 30,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 ?x1 .\n?x0 wdt:P58 ?x1 .\n?x1 wdt:P108 wd:Q314407 .\n?x1 wdt:P27 wd:Q142\n}LIMIT 1",
        "questionWithBrackets": "What was directed by and written by a French employee of [Europe 1]"
    },
    {
        "questionIdx": 171254,
        "questionPatternModEntities": "What was directed by and written by a male spouse of M1",
        "questionTemplate": "What was [VP_SIMPLE] by and [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x1 P2 M0 .\n?x1 P3 M1 .\nFILTER ( ?x1 != M1 )\n}",
        "recursionDepth": 30,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 ?x1 .\n?x0 wdt:P58 ?x1 .\n?x1 wdt:P21 wd:Q6581097 .\n?x1 wdt:P26 wd:Q241019 .\nFILTER ( ?x1 != wd:Q241019 )\n}LIMIT 1",
        "questionWithBrackets": "What was directed by and written by a male spouse of [Mildred Harris]"
    },
    {
        "questionIdx": 171290,
        "questionPatternModEntities": "What was directed by , edited by , and produced by a sibling of M0",
        "questionTemplate": "What was [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x1 P3 M0 .\nFILTER ( ?x1 != M0 )\n}",
        "recursionDepth": 31,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 ?x1 .\n?x0 wdt:P1040 ?x1 .\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x1 wdt:P3373 wd:Q372788 .\nFILTER ( ?x1 != wd:Q372788 )\n}LIMIT 1",
        "questionWithBrackets": "What was directed by , edited by , and produced by a sibling of [Jonathan Nolan]"
    },
    {
        "questionIdx": 171349,
        "questionPatternModEntities": "What was directed by , edited by , produced by , and written by M0 's sibling",
        "questionTemplate": "What was [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x0 P3 ?x1 .\n?x1 P4 M0 .\nFILTER ( ?x1 != M0 )\n}",
        "recursionDepth": 35,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 ?x1 .\n?x0 wdt:P1040 ?x1 .\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x0 wdt:P58 ?x1 .\n?x1 wdt:P3373 wd:Q372788 .\nFILTER ( ?x1 != wd:Q372788 )\n}LIMIT 1",
        "questionWithBrackets": "What was directed by , edited by , produced by , and written by [Jonathan Nolan] 's sibling"
    },
    {
        "questionIdx": 171364,
        "questionPatternModEntities": "What was directed by , edited by , produced by , written by , and executive produced by M0 's spouse",
        "questionTemplate": "What was [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x0 P3 ?x1 .\n?x0 P4 ?x1 .\n?x1 P5 M0 .\nFILTER ( ?x1 != M0 )\n}",
        "recursionDepth": 42,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 ?x1 .\n?x0 wdt:P1040 ?x1 .\n?x0 wdt:P1431 ?x1 .\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x0 wdt:P58 ?x1 .\n?x1 wdt:P26 wd:Q3032150 .\nFILTER ( ?x1 != wd:Q3032150 )\n}LIMIT 1",
        "questionWithBrackets": "What was directed by , edited by , produced by , written by , and executive produced by [Y\u014dko Yaguchi] 's spouse"
    },
    {
        "questionIdx": 171400,
        "questionPatternModEntities": "What was directed by , edited by , written by , executive produced by , and produced by a employee of M0",
        "questionTemplate": "What was [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x0 P3 ?x1 .\n?x0 P4 ?x1 .\n?x1 P5 M0\n}",
        "recursionDepth": 44,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 ?x1 .\n?x0 wdt:P1040 ?x1 .\n?x0 wdt:P1431 ?x1 .\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x0 wdt:P58 ?x1 .\n?x1 wdt:P108 wd:Q681250\n}LIMIT 1",
        "questionWithBrackets": "What was directed by , edited by , written by , executive produced by , and produced by a employee of [European Graduate School]"
    },
    {
        "questionIdx": 171402,
        "questionPatternModEntities": "What was directed by , edited by , written by , produced by , and executive produced by M0 's spouse",
        "questionTemplate": "What was [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x0 P3 ?x1 .\n?x0 P4 ?x1 .\n?x1 P5 M0 .\nFILTER ( ?x1 != M0 )\n}",
        "recursionDepth": 42,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 ?x1 .\n?x0 wdt:P1040 ?x1 .\n?x0 wdt:P1431 ?x1 .\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x0 wdt:P58 ?x1 .\n?x1 wdt:P26 wd:Q3032150 .\nFILTER ( ?x1 != wd:Q3032150 )\n}LIMIT 1",
        "questionWithBrackets": "What was directed by , edited by , written by , produced by , and executive produced by [Y\u014dko Yaguchi] 's spouse"
    },
    {
        "questionIdx": 171415,
        "questionPatternModEntities": "What was directed by , executive produced by , and edited by a male sibling of M0",
        "questionTemplate": "What was [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x1 P3 M0 .\n?x1 P4 M1 .\nFILTER ( ?x1 != M0 )\n}",
        "recursionDepth": 37,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 ?x1 .\n?x0 wdt:P1040 ?x1 .\n?x0 wdt:P1431 ?x1 .\n?x1 wdt:P21 wd:Q6581097 .\n?x1 wdt:P3373 wd:Q28370409 .\nFILTER ( ?x1 != wd:Q28370409 )\n}LIMIT 1",
        "questionWithBrackets": "What was directed by , executive produced by , and edited by a male sibling of [Everton Rocca]"
    },
    {
        "questionIdx": 171448,
        "questionPatternModEntities": "What was directed by , executive produced by , edited by , and produced by M1 's American spouse 's spouse",
        "questionTemplate": "What was [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x0 P3 ?x1 .\n?x1 P4 ?x2 .\n?x2 P4 M1 .\n?x2 P5 M0 .\nFILTER ( ?x1 != ?x2 ) .\nFILTER ( ?x2 != M1 )\n}",
        "recursionDepth": 45,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 ?x1 .\n?x0 wdt:P1040 ?x1 .\n?x0 wdt:P1431 ?x1 .\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x1 wdt:P26 ?x2 .\n?x2 wdt:P27 wd:Q30 .\n?x2 wdt:P26 wd:Q38222 .\nFILTER ( ?x1 != ?x2 ) .\nFILTER ( ?x2 != wd:Q38222 )\n}LIMIT 1",
        "questionWithBrackets": "What was directed by , executive produced by , edited by , and produced by [George Lucas] 's American spouse 's spouse"
    },
    {
        "questionIdx": 171466,
        "questionPatternModEntities": "What was directed by , executive produced by , edited by , produced by , and written by M0 's spouse",
        "questionTemplate": "What was [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x0 P3 ?x1 .\n?x0 P4 ?x1 .\n?x1 P5 M0 .\nFILTER ( ?x1 != M0 )\n}",
        "recursionDepth": 42,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 ?x1 .\n?x0 wdt:P1040 ?x1 .\n?x0 wdt:P1431 ?x1 .\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x0 wdt:P58 ?x1 .\n?x1 wdt:P26 wd:Q3032150 .\nFILTER ( ?x1 != wd:Q3032150 )\n}LIMIT 1",
        "questionWithBrackets": "What was directed by , executive produced by , edited by , produced by , and written by [Y\u014dko Yaguchi] 's spouse"
    },
    {
        "questionIdx": 171488,
        "questionPatternModEntities": "What was directed by , executive produced by , produced by , and written by M0 's male employee",
        "questionTemplate": "What was [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x0 P3 ?x1 .\n?x1 P4 M0 .\n?x1 P5 M1\n}",
        "recursionDepth": 41,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 ?x1 .\n?x0 wdt:P1431 ?x1 .\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x0 wdt:P58 ?x1 .\n?x1 wdt:P108 wd:Q740308 .\n?x1 wdt:P21 wd:Q6581097\n}LIMIT 1",
        "questionWithBrackets": "What was directed by , executive produced by , produced by , and written by [UNICEF] 's male employee"
    },
    {
        "questionIdx": 171526,
        "questionPatternModEntities": "What was directed by , produced by , and edited by M0 's Spanish sibling",
        "questionTemplate": "What was [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x1 P3 M0 .\n?x1 P4 M1 .\nFILTER ( ?x1 != M0 )\n}",
        "recursionDepth": 34,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 ?x1 .\n?x0 wdt:P1040 ?x1 .\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x1 wdt:P27 wd:Q29 .\n?x1 wdt:P3373 wd:Q5833303 .\nFILTER ( ?x1 != wd:Q5833303 )\n}LIMIT 1",
        "questionWithBrackets": "What was directed by , produced by , and edited by [Enrique Franco] 's Spanish sibling"
    },
    {
        "questionIdx": 171529,
        "questionPatternModEntities": "What was directed by , produced by , and edited by M1 's French spouse",
        "questionTemplate": "What was [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x1 P3 M0 .\n?x1 P4 M1 .\nFILTER ( ?x1 != M1 )\n}",
        "recursionDepth": 34,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 ?x1 .\n?x0 wdt:P1040 ?x1 .\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x1 wdt:P27 wd:Q142 .\n?x1 wdt:P26 wd:Q28487 .\nFILTER ( ?x1 != wd:Q28487 )\n}LIMIT 1",
        "questionWithBrackets": "What was directed by , produced by , and edited by [B\u00e9r\u00e9nice Bejo] 's French spouse"
    },
    {
        "questionIdx": 171594,
        "questionPatternModEntities": "What was directed by , produced by , edited by , and executive produced by M1 's American parent",
        "questionTemplate": "What was [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x0 P3 ?x1 .\n?x1 P4 M0 .\n?x1 P5 M1\n}",
        "recursionDepth": 41,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 ?x1 .\n?x0 wdt:P1040 ?x1 .\n?x0 wdt:P1431 ?x1 .\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x1 wdt:P40|wdt:P355 wd:Q4739681 .\n?x1 wdt:P27 wd:Q30\n}LIMIT 1",
        "questionWithBrackets": "What was directed by , produced by , edited by , and executive produced by [Amanda Lucas] 's American parent"
    },
    {
        "questionIdx": 171617,
        "questionPatternModEntities": "What was directed by , produced by , edited by , written by , and executive produced by M0 's spouse",
        "questionTemplate": "What was [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x0 P3 ?x1 .\n?x0 P4 ?x1 .\n?x1 P5 M0 .\nFILTER ( ?x1 != M0 )\n}",
        "recursionDepth": 42,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 ?x1 .\n?x0 wdt:P1040 ?x1 .\n?x0 wdt:P1431 ?x1 .\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x0 wdt:P58 ?x1 .\n?x1 wdt:P26 wd:Q3032150 .\nFILTER ( ?x1 != wd:Q3032150 )\n}LIMIT 1",
        "questionWithBrackets": "What was directed by , produced by , edited by , written by , and executive produced by [Y\u014dko Yaguchi] 's spouse"
    },
    {
        "questionIdx": 171628,
        "questionPatternModEntities": "What was directed by , produced by , executive produced by , and written by M0 's sibling",
        "questionTemplate": "What was [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x0 P3 ?x1 .\n?x1 P4 M0 .\nFILTER ( ?x1 != M0 )\n}",
        "recursionDepth": 36,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 ?x1 .\n?x0 wdt:P1431 ?x1 .\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x0 wdt:P58 ?x1 .\n?x1 wdt:P3373 wd:Q104373781 .\nFILTER ( ?x1 != wd:Q104373781 )\n}LIMIT 1",
        "questionWithBrackets": "What was directed by , produced by , executive produced by , and written by [John Lynch] 's sibling"
    },
    {
        "questionIdx": 171636,
        "questionPatternModEntities": "What was directed by , produced by , executive produced by , edited by , and written by M0 's sibling",
        "questionTemplate": "What was [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x0 P3 ?x1 .\n?x0 P4 ?x1 .\n?x1 P5 M0 .\nFILTER ( ?x1 != M0 )\n}",
        "recursionDepth": 42,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 ?x1 .\n?x0 wdt:P1040 ?x1 .\n?x0 wdt:P1431 ?x1 .\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x0 wdt:P58 ?x1 .\n?x1 wdt:P3373 wd:Q28370409 .\nFILTER ( ?x1 != wd:Q28370409 )\n}LIMIT 1",
        "questionWithBrackets": "What was directed by , produced by , executive produced by , edited by , and written by [Everton Rocca] 's sibling"
    },
    {
        "questionIdx": 171650,
        "questionPatternModEntities": "What was directed by , produced by , written by , and edited by M0 's employee 's sibling",
        "questionTemplate": "What was [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x0 P3 ?x1 .\n?x1 P4 ?x2 .\n?x2 P5 M0 .\nFILTER ( ?x1 != ?x2 )\n}",
        "recursionDepth": 39,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 ?x1 .\n?x0 wdt:P1040 ?x1 .\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x0 wdt:P58 ?x1 .\n?x1 wdt:P3373 ?x2 .\n?x2 wdt:P108 wd:Q3194369 .\nFILTER ( ?x1 != ?x2 )\n}LIMIT 1",
        "questionWithBrackets": "What was directed by , produced by , written by , and edited by [Kay-Bee Pictures] 's employee 's sibling"
    },
    {
        "questionIdx": 171653,
        "questionPatternModEntities": "What was directed by , produced by , written by , and edited by a parent of M0",
        "questionTemplate": "What was [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x0 P3 ?x1 .\n?x1 P4 M0\n}",
        "recursionDepth": 37,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 ?x1 .\n?x0 wdt:P1040 ?x1 .\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x0 wdt:P58 ?x1 .\n?x1 wdt:P40|wdt:P355 wd:Q1620638\n}LIMIT 1",
        "questionWithBrackets": "What was directed by , produced by , written by , and edited by a parent of [Hisao Kurosawa]"
    },
    {
        "questionIdx": 171684,
        "questionPatternModEntities": "What was directed by , written by , and edited by M0 , M1 , and M2",
        "questionTemplate": "What was [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P1 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\n?x0 P2 M0 .\n?x0 P2 M1 .\n?x0 P2 M2\n}",
        "recursionDepth": 32,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 wd:Q562108 .\n?x0 wdt:P57 wd:Q1687239 .\n?x0 wdt:P57 wd:Q35979475 .\n?x0 wdt:P1040 wd:Q562108 .\n?x0 wdt:P1040 wd:Q1687239 .\n?x0 wdt:P1040 wd:Q35979475 .\n?x0 wdt:P58 wd:Q562108 .\n?x0 wdt:P58 wd:Q1687239 .\n?x0 wdt:P58 wd:Q35979475\n}",
        "questionWithBrackets": "What was directed by , written by , and edited by [Ole John] , [Jens J\u00f8rgen Thorsen] , and [J\u00f8rgen Leth]"
    },
    {
        "questionIdx": 171709,
        "questionPatternModEntities": "What was directed by , written by , and executive produced by a female sibling of M0",
        "questionTemplate": "What was [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x1 P3 M0 .\n?x1 P4 M1 .\nFILTER ( ?x1 != M0 )\n}",
        "recursionDepth": 37,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 ?x1 .\n?x0 wdt:P1431 ?x1 .\n?x0 wdt:P58 ?x1 .\n?x1 wdt:P21 wd:Q6581072 .\n?x1 wdt:P3373 wd:Q5112102 .\nFILTER ( ?x1 != wd:Q5112102 )\n}LIMIT 1",
        "questionWithBrackets": "What was directed by , written by , and executive produced by a female sibling of [Christopher Ciccone]"
    },
    {
        "questionIdx": 171781,
        "questionPatternModEntities": "What was directed by , written by , produced by , and edited by M0",
        "questionTemplate": "What was [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M0 .\n?x0 P2 M0 .\n?x0 P3 M0\n}",
        "recursionDepth": 31,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 wd:Q8006 .\n?x0 wdt:P1040 wd:Q8006 .\n?x0 wdt:P162|wdt:P272 wd:Q8006 .\n?x0 wdt:P58 wd:Q8006\n}LIMIT 1",
        "questionWithBrackets": "What was directed by , written by , produced by , and edited by [Akira Kurosawa]"
    },
    {
        "questionIdx": 171787,
        "questionPatternModEntities": "What was directed by , written by , produced by , and executive produced by M0 's sibling",
        "questionTemplate": "What was [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x0 P3 ?x1 .\n?x1 P4 M0 .\nFILTER ( ?x1 != M0 )\n}",
        "recursionDepth": 36,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 ?x1 .\n?x0 wdt:P1431 ?x1 .\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x0 wdt:P58 ?x1 .\n?x1 wdt:P3373 wd:Q104373781 .\nFILTER ( ?x1 != wd:Q104373781 )\n}LIMIT 1",
        "questionWithBrackets": "What was directed by , written by , produced by , and executive produced by [John Lynch] 's sibling"
    },
    {
        "questionIdx": 171797,
        "questionPatternModEntities": "What was directed by , written by , produced by , executive produced by , and edited by M0 's spouse",
        "questionTemplate": "What was [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x0 P3 ?x1 .\n?x0 P4 ?x1 .\n?x1 P5 M0 .\nFILTER ( ?x1 != M0 )\n}",
        "recursionDepth": 42,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 ?x1 .\n?x0 wdt:P1040 ?x1 .\n?x0 wdt:P1431 ?x1 .\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x0 wdt:P58 ?x1 .\n?x1 wdt:P26 wd:Q3032150 .\nFILTER ( ?x1 != wd:Q3032150 )\n}LIMIT 1",
        "questionWithBrackets": "What was directed by , written by , produced by , executive produced by , and edited by [Y\u014dko Yaguchi] 's spouse"
    },
    {
        "questionIdx": 171804,
        "questionPatternModEntities": "What was directed , edited , and executive produced by M0",
        "questionTemplate": "What was [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M0 .\n?x0 P2 M0\n}",
        "recursionDepth": 24,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 wd:Q8006 .\n?x0 wdt:P1040 wd:Q8006 .\n?x0 wdt:P1431 wd:Q8006\n}LIMIT 1",
        "questionWithBrackets": "What was directed , edited , and executive produced by [Akira Kurosawa]"
    },
    {
        "questionIdx": 171812,
        "questionPatternModEntities": "What was directed , edited , and produced by M0 and M1",
        "questionTemplate": "What was [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P1 M0 .\n?x0 P1 M1 .\n?x0 P2 M0 .\n?x0 P2 M1\n}",
        "recursionDepth": 27,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 wd:Q562108 .\n?x0 wdt:P57 wd:Q1687239 .\n?x0 wdt:P1040 wd:Q562108 .\n?x0 wdt:P1040 wd:Q1687239 .\n?x0 wdt:P162|wdt:P272 wd:Q562108 .\n?x0 wdt:P162|wdt:P272 wd:Q1687239\n}",
        "questionWithBrackets": "What was directed , edited , and produced by [Jens J\u00f8rgen Thorsen] and [J\u00f8rgen Leth]"
    },
    {
        "questionIdx": 171814,
        "questionPatternModEntities": "What was directed , edited , and produced by M0 's spouse",
        "questionTemplate": "What was [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x1 P3 M0 .\nFILTER ( ?x1 != M0 )\n}",
        "recursionDepth": 27,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 ?x1 .\n?x0 wdt:P1040 ?x1 .\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x1 wdt:P26 wd:Q70294 .\nFILTER ( ?x1 != wd:Q70294 )\n}LIMIT 1",
        "questionWithBrackets": "What was directed , edited , and produced by [Ingrid Caven] 's spouse"
    },
    {
        "questionIdx": 171847,
        "questionPatternModEntities": "What was directed , edited , executive produced , written , and produced by a employee of M0",
        "questionTemplate": "What was [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x0 P3 ?x1 .\n?x0 P4 ?x1 .\n?x1 P5 M0\n}",
        "recursionDepth": 40,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 ?x1 .\n?x0 wdt:P1040 ?x1 .\n?x0 wdt:P1431 ?x1 .\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x0 wdt:P58 ?x1 .\n?x1 wdt:P108 wd:Q681250\n}LIMIT 1",
        "questionWithBrackets": "What was directed , edited , executive produced , written , and produced by a employee of [European Graduate School]"
    },
    {
        "questionIdx": 171869,
        "questionPatternModEntities": "What was directed , edited , written , and produced by M0",
        "questionTemplate": "What was [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M0 .\n?x0 P2 M0 .\n?x0 P3 M0\n}",
        "recursionDepth": 28,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 wd:Q8006 .\n?x0 wdt:P1040 wd:Q8006 .\n?x0 wdt:P162|wdt:P272 wd:Q8006 .\n?x0 wdt:P58 wd:Q8006\n}LIMIT 1",
        "questionWithBrackets": "What was directed , edited , written , and produced by [Akira Kurosawa]"
    },
    {
        "questionIdx": 171878,
        "questionPatternModEntities": "What was directed , executive produced , and edited by M0",
        "questionTemplate": "What was [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M0 .\n?x0 P2 M0\n}",
        "recursionDepth": 24,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 wd:Q55400 .\n?x0 wdt:P1040 wd:Q55400 .\n?x0 wdt:P1431 wd:Q55400\n}LIMIT 1",
        "questionWithBrackets": "What was directed , executive produced , and edited by [Hayao Miyazaki]"
    },
    {
        "questionIdx": 171888,
        "questionPatternModEntities": "What was directed , executive produced , and produced by M0 's sibling 's spouse",
        "questionTemplate": "What was [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x1 P3 ?x2 .\n?x2 P4 M0 .\nFILTER ( ?x1 != ?x2 ) .\nFILTER ( ?x2 != M0 )\n}",
        "recursionDepth": 32,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 ?x1 .\n?x0 wdt:P1431 ?x1 .\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x1 wdt:P26 ?x2 .\n?x2 wdt:P3373 wd:Q69234 .\nFILTER ( ?x1 != ?x2 ) .\nFILTER ( ?x2 != wd:Q69234 )\n}LIMIT 1",
        "questionWithBrackets": "What was directed , executive produced , and produced by [Jan Harlan] 's sibling 's spouse"
    },
    {
        "questionIdx": 171893,
        "questionPatternModEntities": "What was directed , executive produced , and produced by a female sibling of M0",
        "questionTemplate": "What was [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x1 P3 M0 .\n?x1 P4 M1 .\nFILTER ( ?x1 != M0 )\n}",
        "recursionDepth": 35,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 ?x1 .\n?x0 wdt:P1431 ?x1 .\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x1 wdt:P21 wd:Q6581072 .\n?x1 wdt:P3373 wd:Q134549 .\nFILTER ( ?x1 != wd:Q134549 )\n}LIMIT 1",
        "questionWithBrackets": "What was directed , executive produced , and produced by a female sibling of [Ted Kennedy]"
    },
    {
        "questionIdx": 171899,
        "questionPatternModEntities": "What was directed , executive produced , and written by M0 's sibling",
        "questionTemplate": "What was [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x1 P3 M0 .\nFILTER ( ?x1 != M0 )\n}",
        "recursionDepth": 28,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 ?x1 .\n?x0 wdt:P1431 ?x1 .\n?x0 wdt:P58 ?x1 .\n?x1 wdt:P3373 wd:Q5112102 .\nFILTER ( ?x1 != wd:Q5112102 )\n}LIMIT 1",
        "questionWithBrackets": "What was directed , executive produced , and written by [Christopher Ciccone] 's sibling"
    },
    {
        "questionIdx": 171924,
        "questionPatternModEntities": "What was directed , executive produced , edited , and written by a sibling of M0",
        "questionTemplate": "What was [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x0 P3 ?x1 .\n?x1 P4 M0 .\nFILTER ( ?x1 != M0 )\n}",
        "recursionDepth": 35,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 ?x1 .\n?x0 wdt:P1040 ?x1 .\n?x0 wdt:P1431 ?x1 .\n?x0 wdt:P58 ?x1 .\n?x1 wdt:P3373 wd:Q28370409 .\nFILTER ( ?x1 != wd:Q28370409 )\n}LIMIT 1",
        "questionWithBrackets": "What was directed , executive produced , edited , and written by a sibling of [Everton Rocca]"
    },
    {
        "questionIdx": 171939,
        "questionPatternModEntities": "What was directed , executive produced , produced , edited , and written by a sibling of M0",
        "questionTemplate": "What was [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x0 P3 ?x1 .\n?x0 P4 ?x1 .\n?x1 P5 M0 .\nFILTER ( ?x1 != M0 )\n}",
        "recursionDepth": 40,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 ?x1 .\n?x0 wdt:P1040 ?x1 .\n?x0 wdt:P1431 ?x1 .\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x0 wdt:P58 ?x1 .\n?x1 wdt:P3373 wd:Q28370409 .\nFILTER ( ?x1 != wd:Q28370409 )\n}LIMIT 1",
        "questionWithBrackets": "What was directed , executive produced , produced , edited , and written by a sibling of [Everton Rocca]"
    },
    {
        "questionIdx": 171965,
        "questionPatternModEntities": "What was directed , produced , and edited by M0 's sibling",
        "questionTemplate": "What was [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x1 P3 M0 .\nFILTER ( ?x1 != M0 )\n}",
        "recursionDepth": 27,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 ?x1 .\n?x0 wdt:P1040 ?x1 .\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x1 wdt:P3373 wd:Q430849 .\nFILTER ( ?x1 != wd:Q430849 )\n}LIMIT 1",
        "questionWithBrackets": "What was directed , produced , and edited by [Joie Lee] 's sibling"
    },
    {
        "questionIdx": 171972,
        "questionPatternModEntities": "What was directed , produced , and edited by M0",
        "questionTemplate": "What was [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M0 .\n?x0 P2 M0\n}",
        "recursionDepth": 23,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 wd:Q8006 .\n?x0 wdt:P1040 wd:Q8006 .\n?x0 wdt:P162|wdt:P272 wd:Q8006\n}LIMIT 1",
        "questionWithBrackets": "What was directed , produced , and edited by [Akira Kurosawa]"
    },
    {
        "questionIdx": 171976,
        "questionPatternModEntities": "What was directed , produced , and edited by a sibling of M0",
        "questionTemplate": "What was [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x1 P3 M0 .\nFILTER ( ?x1 != M0 )\n}",
        "recursionDepth": 29,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 ?x1 .\n?x0 wdt:P1040 ?x1 .\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x1 wdt:P3373 wd:Q606780 .\nFILTER ( ?x1 != wd:Q606780 )\n}LIMIT 1",
        "questionWithBrackets": "What was directed , produced , and edited by a sibling of [Sydney Chaplin]"
    },
    {
        "questionIdx": 171986,
        "questionPatternModEntities": "What was directed , produced , and executive produced by a male employee of M0 and M1",
        "questionTemplate": "What was [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] and [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x1 P3 M0 .\n?x1 P3 M1 .\n?x1 P4 M2\n}",
        "recursionDepth": 39,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 ?x1 .\n?x0 wdt:P1431 ?x1 .\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x1 wdt:P108 wd:Q174710 .\n?x1 wdt:P108 wd:Q1068752 .\n?x1 wdt:P21 wd:Q6581097\n}",
        "questionWithBrackets": "What was directed , produced , and executive produced by a male employee of [Howard University] and [University of California, Los Angeles]"
    },
    {
        "questionIdx": 171989,
        "questionPatternModEntities": "What was directed , produced , and written by M0 and M1",
        "questionTemplate": "What was [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P1 M0 .\n?x0 P1 M1 .\n?x0 P2 M0 .\n?x0 P2 M1\n}",
        "recursionDepth": 27,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 wd:Q3772 .\n?x0 wdt:P57 wd:Q47284 .\n?x0 wdt:P162|wdt:P272 wd:Q3772 .\n?x0 wdt:P162|wdt:P272 wd:Q47284 .\n?x0 wdt:P58 wd:Q3772 .\n?x0 wdt:P58 wd:Q47284\n}",
        "questionWithBrackets": "What was directed , produced , and written by [Quentin Tarantino] and [Robert Rodriguez]"
    },
    {
        "questionIdx": 171991,
        "questionPatternModEntities": "What was directed , produced , and written by M0",
        "questionTemplate": "What was [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M0 .\n?x0 P2 M0\n}",
        "recursionDepth": 23,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 wd:Q5603 .\n?x0 wdt:P162|wdt:P272 wd:Q5603 .\n?x0 wdt:P58 wd:Q5603\n}LIMIT 1",
        "questionWithBrackets": "What was directed , produced , and written by [Andy Warhol]"
    },
    {
        "questionIdx": 171996,
        "questionPatternModEntities": "What was directed , produced , edited , and executive produced by M0 's male employee",
        "questionTemplate": "What was [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x0 P3 ?x1 .\n?x1 P4 M0 .\n?x1 P5 M1\n}",
        "recursionDepth": 38,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 ?x1 .\n?x0 wdt:P1040 ?x1 .\n?x0 wdt:P1431 ?x1 .\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x1 wdt:P108 wd:Q174710 .\n?x1 wdt:P21 wd:Q6581097\n}LIMIT 1",
        "questionWithBrackets": "What was directed , produced , edited , and executive produced by [University of California, Los Angeles] 's male employee"
    },
    {
        "questionIdx": 171998,
        "questionPatternModEntities": "What was directed , produced , edited , and written by M0 's spouse",
        "questionTemplate": "What was [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x0 P3 ?x1 .\n?x1 P4 M0 .\nFILTER ( ?x1 != M0 )\n}",
        "recursionDepth": 32,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 ?x1 .\n?x0 wdt:P1040 ?x1 .\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x0 wdt:P58 ?x1 .\n?x1 wdt:P26 wd:Q3032150 .\nFILTER ( ?x1 != wd:Q3032150 )\n}LIMIT 1",
        "questionWithBrackets": "What was directed , produced , edited , and written by [Y\u014dko Yaguchi] 's spouse"
    },
    {
        "questionIdx": 172008,
        "questionPatternModEntities": "What was directed , produced , edited , written , and executive produced by M0 's sibling",
        "questionTemplate": "What was [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x0 P3 ?x1 .\n?x0 P4 ?x1 .\n?x1 P5 M0 .\nFILTER ( ?x1 != M0 )\n}",
        "recursionDepth": 38,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 ?x1 .\n?x0 wdt:P1040 ?x1 .\n?x0 wdt:P1431 ?x1 .\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x0 wdt:P58 ?x1 .\n?x1 wdt:P3373 wd:Q28370409 .\nFILTER ( ?x1 != wd:Q28370409 )\n}LIMIT 1",
        "questionWithBrackets": "What was directed , produced , edited , written , and executive produced by [Everton Rocca] 's sibling"
    },
    {
        "questionIdx": 172015,
        "questionPatternModEntities": "What was directed , produced , executive produced , and written by M0 's parent",
        "questionTemplate": "What was [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x0 P3 ?x1 .\n?x1 P4 M0\n}",
        "recursionDepth": 33,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 ?x1 .\n?x0 wdt:P1431 ?x1 .\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x0 wdt:P58 ?x1 .\n?x1 wdt:P40|wdt:P355 wd:Q271162\n}LIMIT 1",
        "questionWithBrackets": "What was directed , produced , executive produced , and written by [Jennifer Lynch] 's parent"
    },
    {
        "questionIdx": 172021,
        "questionPatternModEntities": "What was directed , produced , executive produced , edited , and written by M0 's sibling",
        "questionTemplate": "What was [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x0 P3 ?x1 .\n?x0 P4 ?x1 .\n?x1 P5 M0 .\nFILTER ( ?x1 != M0 )\n}",
        "recursionDepth": 38,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 ?x1 .\n?x0 wdt:P1040 ?x1 .\n?x0 wdt:P1431 ?x1 .\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x0 wdt:P58 ?x1 .\n?x1 wdt:P3373 wd:Q28370409 .\nFILTER ( ?x1 != wd:Q28370409 )\n}LIMIT 1",
        "questionWithBrackets": "What was directed , produced , executive produced , edited , and written by [Everton Rocca] 's sibling"
    },
    {
        "questionIdx": 172026,
        "questionPatternModEntities": "What was directed , produced , written , and edited by M0 's parent",
        "questionTemplate": "What was [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x0 P3 ?x1 .\n?x1 P4 M0\n}",
        "recursionDepth": 32,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 ?x1 .\n?x0 wdt:P1040 ?x1 .\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x0 wdt:P58 ?x1 .\n?x1 wdt:P40|wdt:P355 wd:Q4739681\n}LIMIT 1",
        "questionWithBrackets": "What was directed , produced , written , and edited by [Amanda Lucas] 's parent"
    },
    {
        "questionIdx": 172032,
        "questionPatternModEntities": "What was directed , produced , written , and edited by a Mexican parent of M1",
        "questionTemplate": "What was [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x0 P3 ?x1 .\n?x1 P4 M0 .\n?x1 P5 M1\n}",
        "recursionDepth": 39,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 ?x1 .\n?x0 wdt:P1040 ?x1 .\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x0 wdt:P58 ?x1 .\n?x1 wdt:P40|wdt:P355 wd:Q1710546 .\n?x1 wdt:P27 wd:Q96\n}LIMIT 1",
        "questionWithBrackets": "What was directed , produced , written , and edited by a Mexican parent of [Juan Luis Bu\u00f1uel]"
    },
    {
        "questionIdx": 172033,
        "questionPatternModEntities": "What was directed , produced , written , and edited by a Italian spouse of M1",
        "questionTemplate": "What was [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x0 P3 ?x1 .\n?x1 P4 M0 .\n?x1 P5 M1 .\nFILTER ( ?x1 != M1 )\n}",
        "recursionDepth": 39,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 ?x1 .\n?x0 wdt:P1040 ?x1 .\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x0 wdt:P58 ?x1 .\n?x1 wdt:P27 wd:Q38 .\n?x1 wdt:P26 wd:Q287976 .\nFILTER ( ?x1 != wd:Q287976 )\n}LIMIT 1",
        "questionWithBrackets": "What was directed , produced , written , and edited by a Italian spouse of [Claudia Mori]"
    },
    {
        "questionIdx": 172038,
        "questionPatternModEntities": "What was directed , produced , written , edited , and executive produced by M0 's sibling",
        "questionTemplate": "What was [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x0 P3 ?x1 .\n?x0 P4 ?x1 .\n?x1 P5 M0 .\nFILTER ( ?x1 != M0 )\n}",
        "recursionDepth": 38,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 ?x1 .\n?x0 wdt:P1040 ?x1 .\n?x0 wdt:P1431 ?x1 .\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x0 wdt:P58 ?x1 .\n?x1 wdt:P3373 wd:Q28370409 .\nFILTER ( ?x1 != wd:Q28370409 )\n}LIMIT 1",
        "questionWithBrackets": "What was directed , produced , written , edited , and executive produced by [Everton Rocca] 's sibling"
    },
    {
        "questionIdx": 172040,
        "questionPatternModEntities": "What was directed , produced , written , edited , and executive produced by M0 's parent",
        "questionTemplate": "What was [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x0 P3 ?x1 .\n?x0 P4 ?x1 .\n?x1 P5 M0\n}",
        "recursionDepth": 38,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 ?x1 .\n?x0 wdt:P1040 ?x1 .\n?x0 wdt:P1431 ?x1 .\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x0 wdt:P58 ?x1 .\n?x1 wdt:P40|wdt:P355 wd:Q1620638\n}LIMIT 1",
        "questionWithBrackets": "What was directed , produced , written , edited , and executive produced by [Hisao Kurosawa] 's parent"
    },
    {
        "questionIdx": 172042,
        "questionPatternModEntities": "What was directed , produced , written , edited , and executive produced by a employee of M0",
        "questionTemplate": "What was [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x0 P3 ?x1 .\n?x0 P4 ?x1 .\n?x1 P5 M0\n}",
        "recursionDepth": 40,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 ?x1 .\n?x0 wdt:P1040 ?x1 .\n?x0 wdt:P1431 ?x1 .\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x0 wdt:P58 ?x1 .\n?x1 wdt:P108 wd:Q681250\n}LIMIT 1",
        "questionWithBrackets": "What was directed , produced , written , edited , and executive produced by a employee of [European Graduate School]"
    },
    {
        "questionIdx": 172055,
        "questionPatternModEntities": "What was directed , written , and edited by M0",
        "questionTemplate": "What was [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M0 .\n?x0 P2 M0\n}",
        "recursionDepth": 23,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 wd:Q8006 .\n?x0 wdt:P1040 wd:Q8006 .\n?x0 wdt:P58 wd:Q8006\n}LIMIT 1",
        "questionWithBrackets": "What was directed , written , and edited by [Akira Kurosawa]"
    },
    {
        "questionIdx": 172080,
        "questionPatternModEntities": "What was directed , written , and produced by a sibling of M0",
        "questionTemplate": "What was [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x1 P3 M0 .\nFILTER ( ?x1 != M0 )\n}",
        "recursionDepth": 29,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 ?x1 .\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x0 wdt:P58 ?x1 .\n?x1 wdt:P3373 wd:Q606780 .\nFILTER ( ?x1 != wd:Q606780 )\n}LIMIT 1",
        "questionWithBrackets": "What was directed , written , and produced by a sibling of [Sydney Chaplin]"
    },
    {
        "questionIdx": 172090,
        "questionPatternModEntities": "What was directed , written , edited , and produced by M0 's parent",
        "questionTemplate": "What was [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x0 P3 ?x1 .\n?x1 P4 M0\n}",
        "recursionDepth": 32,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 ?x1 .\n?x0 wdt:P1040 ?x1 .\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x0 wdt:P58 ?x1 .\n?x1 wdt:P40|wdt:P355 wd:Q1620638\n}LIMIT 1",
        "questionWithBrackets": "What was directed , written , edited , and produced by [Hisao Kurosawa] 's parent"
    },
    {
        "questionIdx": 172162,
        "questionPatternModEntities": "What was distributed by M0 , distributed by M1 , and distributed by M2",
        "questionTemplate": "What was [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2\n}",
        "recursionDepth": 31,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P750 wd:Q145 .\n?x0 wdt:P750 wd:Q9589 .\n?x0 wdt:P750 wd:Q907311\n}",
        "questionWithBrackets": "What was distributed by [Netflix] , distributed by [United Kingdom] , and distributed by [iTunes]"
    },
    {
        "questionIdx": 172171,
        "questionPatternModEntities": "What was distributed by M3 's parent , distributed by M0 and M1 , and distributed by M2",
        "questionTemplate": "What was [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] , [VP_SIMPLE] by [entity] and [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x1 P1 M3\n}",
        "recursionDepth": 39,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P750 ?x1 .\n?x0 wdt:P750 wd:Q907311 .\n?x0 wdt:P750 wd:Q65359104 .\n?x0 wdt:P750 wd:Q9531 .\n?x1 wdt:P40|wdt:P355 wd:Q1160945\n}",
        "questionWithBrackets": "What was distributed by [BBC News] 's parent , distributed by [BBC] and [HBO Max] , and distributed by [Netflix]"
    },
    {
        "questionIdx": 172216,
        "questionPatternModEntities": "What was distributed by M0 and produced by a Dutch sibling of M1",
        "questionTemplate": "What was [VP_SIMPLE] by [entity] and [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 ?x1 .\n?x1 P2 M1 .\n?x1 P3 M2 .\nFILTER ( ?x1 != M1 )\n}",
        "recursionDepth": 33,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P750 wd:Q6905320 .\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x1 wdt:P27 wd:Q29999 .\n?x1 wdt:P3373 wd:Q2330817 .\nFILTER ( ?x1 != wd:Q2330817 )\n}",
        "questionWithBrackets": "What was distributed by [Monterey Home Video] and produced by a Dutch sibling of [Antoinette Beumer]"
    },
    {
        "questionIdx": 172224,
        "questionPatternModEntities": "What was distributed by M0 , M1 , M2 , M3 , M4 , and M5",
        "questionTemplate": "What was [VP_SIMPLE] by [entity] , [entity] , [entity] , [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P0 M3 .\n?x0 P0 M4 .\n?x0 P0 M5\n}",
        "recursionDepth": 27,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P750 wd:Q866 .\n?x0 wdt:P750 wd:Q568769 .\n?x0 wdt:P750 wd:Q689141 .\n?x0 wdt:P750 wd:Q9589 .\n?x0 wdt:P750 wd:Q79576 .\n?x0 wdt:P750 wd:Q545966\n}",
        "questionWithBrackets": "What was distributed by [Spotify] , [Google Play] , [YouTube] , [SoundCloud] , [Bandcamp] , and [iTunes]"
    },
    {
        "questionIdx": 172267,
        "questionPatternModEntities": "What was distributed by M0 , distributed by M1 , distributed by M2 and M3 , and produced by M4",
        "questionTemplate": "What was [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] and [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P0 M3 .\n?x0 P1 M4\n}",
        "recursionDepth": 44,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P750 wd:Q145 .\n?x0 wdt:P750 wd:Q907311 .\n?x0 wdt:P750 wd:Q5371838 .\n?x0 wdt:P750 wd:Q80948336 .\n?x0 wdt:P162|wdt:P272 wd:Q7684047\n}",
        "questionWithBrackets": "What was distributed by [Netflix] , distributed by [FandangoNow] , distributed by [Vudu] and [United Kingdom] , and produced by [Tanya Seghatchian]"
    },
    {
        "questionIdx": 172286,
        "questionPatternModEntities": "What was distributed by M0 , M1 , and M2",
        "questionTemplate": "What was [VP_SIMPLE] by [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2\n}",
        "recursionDepth": 18,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P750 wd:Q8093 .\n?x0 wdt:P750 wd:Q337535 .\n?x0 wdt:P750 wd:Q1486288\n}",
        "questionWithBrackets": "What was distributed by [Nintendo] , [Steam] , and [GOG.com]"
    },
    {
        "questionIdx": 172311,
        "questionPatternModEntities": "What was distributed by M0 , distributed by M1 and M2 , and produced by a spouse of M3",
        "questionTemplate": "What was [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] and [entity] , and [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P1 ?x1 .\n?x1 P2 M3 .\nFILTER ( ?x1 != M3 )\n}",
        "recursionDepth": 41,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P750 wd:Q3884 .\n?x0 wdt:P750 wd:Q20056642 .\n?x0 wdt:P750 wd:Q602243 .\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x1 wdt:P26 wd:Q99529491 .\nFILTER ( ?x1 != wd:Q99529491 )\n}",
        "questionWithBrackets": "What was distributed by [Apple Music] , distributed by [Amazon] and [Deezer] , and produced by a spouse of [Madri le Roux-Moriz]"
    },
    {
        "questionIdx": 172367,
        "questionPatternModEntities": "What was distributed by M0 , distributed by a parent of M2 , and distributed by M1",
        "questionTemplate": "What was [VP_SIMPLE] by [entity] , [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x1 P1 M2\n}",
        "recursionDepth": 37,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P750 ?x1 .\n?x0 wdt:P750 wd:Q11196047 .\n?x0 wdt:P750 wd:Q3884 .\n?x1 wdt:P40|wdt:P355 wd:Q147505\n}",
        "questionWithBrackets": "What was distributed by [DLsite] , distributed by a parent of [Zappos.com] , and distributed by [Amazon]"
    },
    {
        "questionIdx": 172371,
        "questionPatternModEntities": "What was distributed by M0 , produced by M4 , distributed by M1 and M2 , and distributed by M3",
        "questionTemplate": "What was [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] and [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P0 M3 .\n?x0 P1 M4\n}",
        "recursionDepth": 44,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P750 wd:Q145 .\n?x0 wdt:P750 wd:Q5371838 .\n?x0 wdt:P750 wd:Q907311 .\n?x0 wdt:P750 wd:Q9589 .\n?x0 wdt:P162|wdt:P272 wd:Q79618131\n}",
        "questionWithBrackets": "What was distributed by [iTunes] , produced by [Apocalypso Pictures] , distributed by [Vudu] and [United Kingdom] , and distributed by [Netflix]"
    },
    {
        "questionIdx": 172425,
        "questionPatternModEntities": "What was distributed by M5 's child , distributed by M0 , and distributed by M1 , M2 , M3 , and M4",
        "questionTemplate": "What was [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity] , [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P0 M3 .\n?x0 P0 M4 .\n?x1 P1 M5\n}",
        "recursionDepth": 45,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P750 ?x1 .\n?x0 wdt:P750 wd:Q4537983 .\n?x0 wdt:P750 wd:Q9589 .\n?x0 wdt:P750 wd:Q28404534 .\n?x0 wdt:P750 wd:Q183718 .\n?x0 wdt:P750 wd:Q602243 .\n?x1 wdt:P749 wd:Q866\n}",
        "questionWithBrackets": "What was distributed by [YouTube] 's child , distributed by [YouTube Music] , and distributed by [last.fm] , [Yandex Music] , [iTunes] , and [Deezer]"
    },
    {
        "questionIdx": 172455,
        "questionPatternModEntities": "What was distributed by M0 and M1 , distributed by M2 and M3 , and distributed by M4 's child",
        "questionTemplate": "What was [VP_SIMPLE] by [entity] and [entity] , [VP_SIMPLE] by [entity] and [entity] , and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P0 M3 .\n?x1 P1 M4\n}",
        "recursionDepth": 43,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P750 ?x1 .\n?x0 wdt:P750 wd:Q135288 .\n?x0 wdt:P750 wd:Q59510068 .\n?x0 wdt:P750 wd:Q42328566 .\n?x0 wdt:P750 wd:Q73801 .\n?x1 wdt:P749 wd:Q2283\n}",
        "questionWithBrackets": "What was distributed by [Xbox Game Studios] and [Microsoft Store] , distributed by [Epic Games Store] and [Humble Store] , and distributed by [Microsoft] 's child"
    },
    {
        "questionIdx": 172515,
        "questionPatternModEntities": "What was distributed by M0 , distributed by M1 , distributed by M2 and M3 , and produced by M4 's spouse",
        "questionTemplate": "What was [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] and [entity] , and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P0 M3 .\n?x0 P1 ?x1 .\n?x1 P2 M4 .\nFILTER ( ?x1 != M4 )\n}",
        "recursionDepth": 48,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P750 wd:Q9589 .\n?x0 wdt:P750 wd:Q907311 .\n?x0 wdt:P750 wd:Q1097348 .\n?x0 wdt:P750 wd:Q434841 .\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x1 wdt:P26 wd:Q76717 .\nFILTER ( ?x1 != wd:Q76717 )\n}",
        "questionWithBrackets": "What was distributed by [iTunes] , distributed by [Netflix] , distributed by [20th Century Studios] and [InterCom] , and produced by [Claudia Schiffer] 's spouse"
    },
    {
        "questionIdx": 172594,
        "questionPatternModEntities": "What was distributed by M0 , distributed by M1 and M2 , distributed by M3 , and distributed by M4",
        "questionTemplate": "What was [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] and [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P0 M3 .\n?x0 P0 M4\n}",
        "recursionDepth": 44,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P750 wd:Q145 .\n?x0 wdt:P750 wd:Q9589 .\n?x0 wdt:P750 wd:Q80948336 .\n?x0 wdt:P750 wd:Q5371838 .\n?x0 wdt:P750 wd:Q907311\n}",
        "questionWithBrackets": "What was distributed by [Netflix] , distributed by [FandangoNow] and [iTunes] , distributed by [Vudu] , and distributed by [United Kingdom]"
    },
    {
        "questionIdx": 172618,
        "questionPatternModEntities": "What was distributed by M5 's parent and distributed by M0 , M1 , M2 , M3 , and M4",
        "questionTemplate": "What was [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] and [VP_SIMPLE] by [entity] , [entity] , [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P0 M3 .\n?x0 P0 M4 .\n?x1 P1 M5\n}",
        "recursionDepth": 39,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P750 ?x1 .\n?x0 wdt:P750 wd:Q10851653 .\n?x0 wdt:P750 wd:Q3884 .\n?x0 wdt:P750 wd:Q5366830 .\n?x0 wdt:P750 wd:Q7553789 .\n?x0 wdt:P750 wd:Q105329094 .\n?x1 wdt:P40|wdt:P355 wd:Q223142\n}",
        "questionWithBrackets": "What was distributed by [Box Office Mojo] 's parent and distributed by [DMM.com] , [Sofmap] , [Amazon] , [ALICENET] , and [Melonbooks]"
    },
    {
        "questionIdx": 172631,
        "questionPatternModEntities": "What was distributed by M0 and produced by M1 's Spanish sibling",
        "questionTemplate": "What was [VP_SIMPLE] by [entity] and [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 ?x1 .\n?x1 P2 M1 .\n?x1 P3 M2 .\nFILTER ( ?x1 != M1 )\n}",
        "recursionDepth": 31,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P750 wd:Q907311 .\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x1 wdt:P27 wd:Q29 .\n?x1 wdt:P3373 wd:Q11905647 .\nFILTER ( ?x1 != wd:Q11905647 )\n}",
        "questionWithBrackets": "What was distributed by [Netflix] and produced by [Anna Maria Dal\u00ed] 's Spanish sibling"
    },
    {
        "questionIdx": 172680,
        "questionPatternModEntities": "What was distributed by a child of M5 and distributed by M0 , M1 , M2 , M3 , and M4",
        "questionTemplate": "What was [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity] and [VP_SIMPLE] by [entity] , [entity] , [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P0 M3 .\n?x0 P0 M4 .\n?x1 P1 M5\n}",
        "recursionDepth": 41,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P750 ?x1 .\n?x0 wdt:P750 wd:Q602243 .\n?x0 wdt:P750 wd:Q9589 .\n?x0 wdt:P750 wd:Q19711013 .\n?x0 wdt:P750 wd:Q28404534 .\n?x0 wdt:P750 wd:Q689141 .\n?x1 wdt:P749 wd:Q866\n}",
        "questionWithBrackets": "What was distributed by a child of [YouTube] and distributed by [Deezer] , [Spotify] , [iTunes] , [Tidal] , and [YouTube Music]"
    },
    {
        "questionIdx": 172681,
        "questionPatternModEntities": "What was distributed by a child of M1 and distributed by M0",
        "questionTemplate": "What was [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity] and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P0 M0 .\n?x1 P1 M1\n}",
        "recursionDepth": 28,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P750 ?x1 .\n?x0 wdt:P750 wd:Q1052025 .\n?x1 wdt:P749 wd:Q2283\n}",
        "questionWithBrackets": "What was distributed by a child of [Microsoft] and distributed by [PlayStation Store]"
    },
    {
        "questionIdx": 172821,
        "questionPatternModEntities": "What was edited and directed by M0 and M1",
        "questionTemplate": "What was [VP_SIMPLE] and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P1 M0 .\n?x0 P1 M1\n}",
        "recursionDepth": 22,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 wd:Q24907 .\n?x0 wdt:P57 wd:Q5341401 .\n?x0 wdt:P1040 wd:Q24907 .\n?x0 wdt:P1040 wd:Q5341401\n}",
        "questionWithBrackets": "What was edited and directed by [Edvin Tiemroth] and [Anker S\u00f8rensen]"
    },
    {
        "questionIdx": 172832,
        "questionPatternModEntities": "What was edited and directed by M0 , M1 , and M2",
        "questionTemplate": "What was [VP_SIMPLE] and [VP_SIMPLE] by [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P1 M0 .\n?x0 P1 M1 .\n?x0 P1 M2\n}",
        "recursionDepth": 25,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 wd:Q562108 .\n?x0 wdt:P57 wd:Q1687239 .\n?x0 wdt:P57 wd:Q35979475 .\n?x0 wdt:P1040 wd:Q562108 .\n?x0 wdt:P1040 wd:Q1687239 .\n?x0 wdt:P1040 wd:Q35979475\n}",
        "questionWithBrackets": "What was edited and directed by [Jens J\u00f8rgen Thorsen] , [J\u00f8rgen Leth] , and [Ole John]"
    },
    {
        "questionIdx": 172866,
        "questionPatternModEntities": "What was edited and directed by a employee of M0",
        "questionTemplate": "What was [VP_SIMPLE] and [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x1 P2 M0\n}",
        "recursionDepth": 24,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 ?x1 .\n?x0 wdt:P1040 ?x1 .\n?x1 wdt:P108 wd:Q131439\n}LIMIT 1",
        "questionWithBrackets": "What was edited and directed by a employee of [Comedy Central]"
    },
    {
        "questionIdx": 172921,
        "questionPatternModEntities": "What was edited and produced by M0 and M1",
        "questionTemplate": "What was [VP_SIMPLE] and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P1 M0 .\n?x0 P1 M1\n}",
        "recursionDepth": 22,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1040 wd:Q489831 .\n?x0 wdt:P1040 wd:Q354010 .\n?x0 wdt:P162|wdt:P272 wd:Q489831 .\n?x0 wdt:P162|wdt:P272 wd:Q354010\n}",
        "questionWithBrackets": "What was edited and produced by [Kevin Smith] and [Scott Mosier]"
    },
    {
        "questionIdx": 172922,
        "questionPatternModEntities": "What was edited and produced by M0 's female sibling",
        "questionTemplate": "What was [VP_SIMPLE] and [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x1 P2 M0 .\n?x1 P3 M1 .\nFILTER ( ?x1 != M0 )\n}",
        "recursionDepth": 27,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1040 ?x1 .\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x1 wdt:P21 wd:Q6581072 .\n?x1 wdt:P3373 wd:Q4725343 .\nFILTER ( ?x1 != wd:Q4725343 )\n}LIMIT 1",
        "questionWithBrackets": "What was edited and produced by [Alia Bhatt] 's female sibling"
    },
    {
        "questionIdx": 172938,
        "questionPatternModEntities": "What was edited and produced by M1 's female parent",
        "questionTemplate": "What was [VP_SIMPLE] and [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x1 P2 M0 .\n?x1 P3 M1\n}",
        "recursionDepth": 27,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1040 ?x1 .\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x1 wdt:P40|wdt:P355 wd:Q573338 .\n?x1 wdt:P21 wd:Q6581072\n}LIMIT 1",
        "questionWithBrackets": "What was edited and produced by [Anthony Hickox] 's female parent"
    },
    {
        "questionIdx": 172941,
        "questionPatternModEntities": "What was edited and produced by M0 , M1 , and M2",
        "questionTemplate": "What was [VP_SIMPLE] and [VP_SIMPLE] by [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P1 M0 .\n?x0 P1 M1 .\n?x0 P1 M2\n}",
        "recursionDepth": 25,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1040 wd:Q562108 .\n?x0 wdt:P1040 wd:Q1687239 .\n?x0 wdt:P1040 wd:Q35979475 .\n?x0 wdt:P162|wdt:P272 wd:Q562108 .\n?x0 wdt:P162|wdt:P272 wd:Q1687239 .\n?x0 wdt:P162|wdt:P272 wd:Q35979475\n}",
        "questionWithBrackets": "What was edited and produced by [J\u00f8rgen Leth] , [Jens J\u00f8rgen Thorsen] , and [Ole John]"
    },
    {
        "questionIdx": 172942,
        "questionPatternModEntities": "What was edited and produced by M0 's parent",
        "questionTemplate": "What was [VP_SIMPLE] and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x1 P2 M0\n}",
        "recursionDepth": 22,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1040 ?x1 .\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x1 wdt:P40|wdt:P355 wd:Q92052\n}LIMIT 1",
        "questionWithBrackets": "What was edited and produced by [Emma Schweiger] 's parent"
    },
    {
        "questionIdx": 172959,
        "questionPatternModEntities": "What was edited and produced by a female parent of M1",
        "questionTemplate": "What was [VP_SIMPLE] and [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x1 P2 M0 .\n?x1 P3 M1\n}",
        "recursionDepth": 29,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1040 ?x1 .\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x1 wdt:P40|wdt:P355 wd:Q573338 .\n?x1 wdt:P21 wd:Q6581072\n}LIMIT 1",
        "questionWithBrackets": "What was edited and produced by a female parent of [Anthony Hickox]"
    },
    {
        "questionIdx": 172960,
        "questionPatternModEntities": "What was edited and produced by a female spouse of M1",
        "questionTemplate": "What was [VP_SIMPLE] and [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x1 P2 M0 .\n?x1 P3 M1 .\nFILTER ( ?x1 != M1 )\n}",
        "recursionDepth": 29,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1040 ?x1 .\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x1 wdt:P21 wd:Q6581072 .\n?x1 wdt:P26 wd:Q16266828 .\nFILTER ( ?x1 != wd:Q16266828 )\n}LIMIT 1",
        "questionWithBrackets": "What was edited and produced by a female spouse of [Horst Kettner]"
    },
    {
        "questionIdx": 172962,
        "questionPatternModEntities": "What was edited and produced by a male employee of M0",
        "questionTemplate": "What was [VP_SIMPLE] and [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x1 P2 M0 .\n?x1 P3 M1\n}",
        "recursionDepth": 29,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1040 ?x1 .\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x1 wdt:P108 wd:Q1130457 .\n?x1 wdt:P21 wd:Q6581097\n}LIMIT 1",
        "questionWithBrackets": "What was edited and produced by a male employee of [Gerasimov Institute of Cinematography]"
    },
    {
        "questionIdx": 172966,
        "questionPatternModEntities": "What was edited and produced by a sibling of M0",
        "questionTemplate": "What was [VP_SIMPLE] and [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x1 P2 M0 .\nFILTER ( ?x1 != M0 )\n}",
        "recursionDepth": 24,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1040 ?x1 .\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x1 wdt:P3373 wd:Q606780 .\nFILTER ( ?x1 != wd:Q606780 )\n}LIMIT 1",
        "questionWithBrackets": "What was edited and produced by a sibling of [Sydney Chaplin]"
    },
    {
        "questionIdx": 172967,
        "questionPatternModEntities": "What was edited and produced by a spouse of M0",
        "questionTemplate": "What was [VP_SIMPLE] and [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x1 P2 M0 .\nFILTER ( ?x1 != M0 )\n}",
        "recursionDepth": 24,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1040 ?x1 .\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x1 wdt:P26 wd:Q116861 .\nFILTER ( ?x1 != wd:Q116861 )\n}LIMIT 1",
        "questionWithBrackets": "What was edited and produced by a spouse of [Fran Walsh]"
    },
    {
        "questionIdx": 172973,
        "questionPatternModEntities": "What was edited and produced by a employee of M0 and M1",
        "questionTemplate": "What was [VP_SIMPLE] and [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity] and [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x1 P2 M0 .\n?x1 P2 M1\n}",
        "recursionDepth": 28,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1040 ?x1 .\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x1 wdt:P108 wd:Q13371 .\n?x1 wdt:P108 wd:Q49088\n}",
        "questionWithBrackets": "What was edited and produced by a employee of [Harvard University] and [Columbia University]"
    },
    {
        "questionIdx": 172975,
        "questionPatternModEntities": "What was edited and written by M0 , M1 , M2 , and M3",
        "questionTemplate": "What was [VP_SIMPLE] and [VP_SIMPLE] by [entity] , [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P0 M3 .\n?x0 P1 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\n?x0 P1 M3\n}",
        "recursionDepth": 28,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1040 wd:Q5836844 .\n?x0 wdt:P1040 wd:Q5658534 .\n?x0 wdt:P1040 wd:Q4022902 .\n?x0 wdt:P1040 wd:Q4023328 .\n?x0 wdt:P58 wd:Q5836844 .\n?x0 wdt:P58 wd:Q5658534 .\n?x0 wdt:P58 wd:Q4022902 .\n?x0 wdt:P58 wd:Q4023328\n}",
        "questionWithBrackets": "What was edited and written by [Adri\u00e1n Garc\u00eda Bogliano] , [Y\u016bdai Yamaguchi] , [Ernesto D\u00edaz Espinoza] , and [Yoshihiro Nishimura]"
    },
    {
        "questionIdx": 172982,
        "questionPatternModEntities": "What was edited and written by M0 , M1 , and M2",
        "questionTemplate": "What was [VP_SIMPLE] and [VP_SIMPLE] by [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P1 M0 .\n?x0 P1 M1 .\n?x0 P1 M2\n}",
        "recursionDepth": 25,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1040 wd:Q562108 .\n?x0 wdt:P1040 wd:Q1687239 .\n?x0 wdt:P1040 wd:Q35979475 .\n?x0 wdt:P58 wd:Q562108 .\n?x0 wdt:P58 wd:Q1687239 .\n?x0 wdt:P58 wd:Q35979475\n}",
        "questionWithBrackets": "What was edited and written by [Jens J\u00f8rgen Thorsen] , [J\u00f8rgen Leth] , and [Ole John]"
    },
    {
        "questionIdx": 172988,
        "questionPatternModEntities": "What was edited and written by M0 and M1",
        "questionTemplate": "What was [VP_SIMPLE] and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P1 M0 .\n?x0 P1 M1\n}",
        "recursionDepth": 22,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1040 wd:Q44426 .\n?x0 wdt:P1040 wd:Q96024 .\n?x0 wdt:P58 wd:Q44426 .\n?x0 wdt:P58 wd:Q96024\n}",
        "questionWithBrackets": "What was edited and written by [Rainer Werner Fassbinder] and [Michael Fengler]"
    },
    {
        "questionIdx": 172990,
        "questionPatternModEntities": "What was edited and written by M0 's employee",
        "questionTemplate": "What was [VP_SIMPLE] and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x1 P2 M0\n}",
        "recursionDepth": 22,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1040 ?x1 .\n?x0 wdt:P58 ?x1 .\n?x1 wdt:P108 wd:Q141336\n}LIMIT 1",
        "questionWithBrackets": "What was edited and written by [Mosfilm] 's employee"
    },
    {
        "questionIdx": 172991,
        "questionPatternModEntities": "What was edited and written by M0 's spouse",
        "questionTemplate": "What was [VP_SIMPLE] and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x1 P2 M0 .\nFILTER ( ?x1 != M0 )\n}",
        "recursionDepth": 22,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1040 ?x1 .\n?x0 wdt:P58 ?x1 .\n?x1 wdt:P26 wd:Q242951 .\nFILTER ( ?x1 != wd:Q242951 )\n}LIMIT 1",
        "questionWithBrackets": "What was edited and written by [Emma Thomas] 's spouse"
    },
    {
        "questionIdx": 172992,
        "questionPatternModEntities": "What was edited and written by M0 's sibling",
        "questionTemplate": "What was [VP_SIMPLE] and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x1 P2 M0 .\nFILTER ( ?x1 != M0 )\n}",
        "recursionDepth": 22,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1040 ?x1 .\n?x0 wdt:P58 ?x1 .\n?x1 wdt:P3373 wd:Q104373781 .\nFILTER ( ?x1 != wd:Q104373781 )\n}LIMIT 1",
        "questionWithBrackets": "What was edited and written by [John Lynch] 's sibling"
    },
    {
        "questionIdx": 173021,
        "questionPatternModEntities": "What was edited and written by a spouse of M0",
        "questionTemplate": "What was [VP_SIMPLE] and [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x1 P2 M0 .\nFILTER ( ?x1 != M0 )\n}",
        "recursionDepth": 24,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1040 ?x1 .\n?x0 wdt:P58 ?x1 .\n?x1 wdt:P26 wd:Q70294 .\nFILTER ( ?x1 != wd:Q70294 )\n}LIMIT 1",
        "questionWithBrackets": "What was edited and written by a spouse of [Ingrid Caven]"
    },
    {
        "questionIdx": 173040,
        "questionPatternModEntities": "What was edited by M3 , directed by M4 , executive produced by M0 and M1 , and written by M2",
        "questionTemplate": "What was [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] and [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P1 M2 .\n?x0 P2 M3 .\n?x0 P3 M4\n}",
        "recursionDepth": 45,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 wd:Q327493 .\n?x0 wdt:P1040 wd:Q5498624 .\n?x0 wdt:P1431 wd:Q72614 .\n?x0 wdt:P1431 wd:Q472520 .\n?x0 wdt:P58 wd:Q286104\n}",
        "questionWithBrackets": "What was edited by [Frederick Richards] , directed by [Arthur Lubin] , executive produced by [Hal B. Wallis] and [Jack Warner] , and written by [Jean Negulesco]"
    },
    {
        "questionIdx": 173046,
        "questionPatternModEntities": "What was edited by M3 and M4 , executive produced by M0 , written by M1 , and written by M2",
        "questionTemplate": "What was [VP_SIMPLE] by [entity] and [entity] , [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\n?x0 P2 M3 .\n?x0 P2 M4\n}",
        "recursionDepth": 45,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1040 wd:Q614630 .\n?x0 wdt:P1040 wd:Q15835006 .\n?x0 wdt:P1431 wd:Q56094 .\n?x0 wdt:P58 wd:Q9292586 .\n?x0 wdt:P58 wd:Q134456\n}",
        "questionWithBrackets": "What was edited by [Michael Chandler] and [Michael Chandler] , executive produced by [Francis Ford Coppola] , written by [Leonard Schrader] , and written by [Yukio Mishima]"
    },
    {
        "questionIdx": 173047,
        "questionPatternModEntities": "What was edited by M1 and M2 , edited by M3 , executive produced by M0 , and edited by M4",
        "questionTemplate": "What was [VP_SIMPLE] by [entity] and [entity] , [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\n?x0 P1 M3 .\n?x0 P1 M4\n}",
        "recursionDepth": 45,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1040 wd:Q273379 .\n?x0 wdt:P1040 wd:Q47284 .\n?x0 wdt:P1040 wd:Q541143 .\n?x0 wdt:P1040 wd:Q5359064 .\n?x0 wdt:P1431 wd:Q3772\n}",
        "questionWithBrackets": "What was edited by [Terry Rawlings] and [Robert Rodriguez] , edited by [Elena Maganini] , executive produced by [Quentin Tarantino] , and edited by [Sally Menke]"
    },
    {
        "questionIdx": 173048,
        "questionPatternModEntities": "What was edited by M0 and M1 , edited by M2 and M3 , and directed by M4 , M5 , and M6",
        "questionTemplate": "What was [VP_SIMPLE] by [entity] and [entity] , [VP_SIMPLE] by [entity] and [entity] , and [VP_SIMPLE] by [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P0 M3 .\n?x0 P1 M4 .\n?x0 P1 M5 .\n?x0 P1 M6\n}",
        "recursionDepth": 46,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 wd:Q44221 .\n?x0 wdt:P57 wd:Q55238 .\n?x0 wdt:P57 wd:Q113628 .\n?x0 wdt:P1040 wd:Q55211 .\n?x0 wdt:P1040 wd:Q18021284 .\n?x0 wdt:P1040 wd:Q55215 .\n?x0 wdt:P1040 wd:Q5639976\n}",
        "questionWithBrackets": "What was edited by [Hajime Okayasu] and [Alejandro Gonz\u00e1lez I\u00f1\u00e1rritu] , edited by [Mohsen Makhmalbaf] and [Jonathan Morris] , and directed by [Sean Penn] , [Idrissa Ou\u00e9draogo] , and [Ken Loach]"
    },
    {
        "questionIdx": 173050,
        "questionPatternModEntities": "What was edited by M0 and M1 , directed by M4 , M5 , and M6 , and edited by M2 and M3",
        "questionTemplate": "What was [VP_SIMPLE] by [entity] and [entity] , [VP_SIMPLE] by [entity] , [entity] , and [entity] , and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P0 M3 .\n?x0 P1 M4 .\n?x0 P1 M5 .\n?x0 P1 M6\n}",
        "recursionDepth": 46,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 wd:Q549956 .\n?x0 wdt:P57 wd:Q3772 .\n?x0 wdt:P57 wd:Q2838329 .\n?x0 wdt:P1040 wd:Q47284 .\n?x0 wdt:P1040 wd:Q273379 .\n?x0 wdt:P1040 wd:Q5359064 .\n?x0 wdt:P1040 wd:Q541143\n}",
        "questionWithBrackets": "What was edited by [Terry Rawlings] and [Robert Rodriguez] , directed by [Alexandre Rockwell] , [Quentin Tarantino] , and [Allison Anders] , and edited by [Sally Menke] and [Elena Maganini]"
    },
    {
        "questionIdx": 173052,
        "questionPatternModEntities": "What was edited by M0 and M1 , edited by M2 , M3 , and M4 , and directed by M5 and M6",
        "questionTemplate": "What was [VP_SIMPLE] by [entity] and [entity] , [VP_SIMPLE] by [entity] , [entity] , and [entity] , and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P0 M3 .\n?x0 P0 M4 .\n?x0 P1 M5 .\n?x0 P1 M6\n}",
        "recursionDepth": 46,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 wd:Q474262 .\n?x0 wdt:P57 wd:Q113628 .\n?x0 wdt:P1040 wd:Q55211 .\n?x0 wdt:P1040 wd:Q541826 .\n?x0 wdt:P1040 wd:Q5639976 .\n?x0 wdt:P1040 wd:Q22074634 .\n?x0 wdt:P1040 wd:Q18021284\n}",
        "questionWithBrackets": "What was edited by [Jonathan Morris] and [Jay Cassidy] , edited by [Mohsen Makhmalbaf] , [Robert Duffy] , and [Hajime Okayasu] , and directed by [Amos Gitai] and [Idrissa Ou\u00e9draogo]"
    },
    {
        "questionIdx": 173053,
        "questionPatternModEntities": "What was edited by M0 , M1 , and M2 , directed by M3 and M4 , and directed by M5 and M6",
        "questionTemplate": "What was [VP_SIMPLE] by [entity] , [entity] , and [entity] , [VP_SIMPLE] by [entity] and [entity] , and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P1 M3 .\n?x0 P1 M4 .\n?x0 P1 M5 .\n?x0 P1 M6\n}",
        "recursionDepth": 46,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 wd:Q432709 .\n?x0 wdt:P57 wd:Q55238 .\n?x0 wdt:P57 wd:Q295093 .\n?x0 wdt:P57 wd:Q44221 .\n?x0 wdt:P1040 wd:Q55215 .\n?x0 wdt:P1040 wd:Q22074634 .\n?x0 wdt:P1040 wd:Q5639976\n}",
        "questionWithBrackets": "What was edited by [Robert Duffy] , [Alejandro Gonz\u00e1lez I\u00f1\u00e1rritu] , and [Hajime Okayasu] , directed by [Claude Lelouch] and [Sean Penn] , and directed by [Ken Loach] and [Samira Makhmalbaf]"
    },
    {
        "questionIdx": 173054,
        "questionPatternModEntities": "What was edited by M0 , M1 , and M2 , directed by M5 and M6 , and edited by M3 and M4",
        "questionTemplate": "What was [VP_SIMPLE] by [entity] , [entity] , and [entity] , [VP_SIMPLE] by [entity] and [entity] , and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P0 M3 .\n?x0 P0 M4 .\n?x0 P1 M5 .\n?x0 P1 M6\n}",
        "recursionDepth": 46,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 wd:Q474262 .\n?x0 wdt:P57 wd:Q295093 .\n?x0 wdt:P1040 wd:Q55211 .\n?x0 wdt:P1040 wd:Q541826 .\n?x0 wdt:P1040 wd:Q5639976 .\n?x0 wdt:P1040 wd:Q22074634 .\n?x0 wdt:P1040 wd:Q18021284\n}",
        "questionWithBrackets": "What was edited by [Robert Duffy] , [Hajime Okayasu] , and [Mohsen Makhmalbaf] , directed by [Amos Gitai] and [Claude Lelouch] , and edited by [Jonathan Morris] and [Jay Cassidy]"
    },
    {
        "questionIdx": 173057,
        "questionPatternModEntities": "What was edited by M2 , M3 , and M4 , executive produced by M0 and M1 , and written by M5 's parent",
        "questionTemplate": "What was [VP_SIMPLE] by [entity] , [entity] , and [entity] , [VP_SIMPLE] by [entity] and [entity] , and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P1 ?x1 .\n?x0 P2 M2 .\n?x0 P2 M3 .\n?x0 P2 M4 .\n?x1 P3 M5\n}",
        "recursionDepth": 47,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1040 wd:Q7820333 .\n?x0 wdt:P1040 wd:Q614630 .\n?x0 wdt:P1040 wd:Q15835006 .\n?x0 wdt:P1431 wd:Q56094 .\n?x0 wdt:P1431 wd:Q38222 .\n?x0 wdt:P58 ?x1 .\n?x1 wdt:P40|wdt:P355 wd:Q11482621\n}",
        "questionWithBrackets": "What was edited by [Michael Chandler] , [Tomoyo \u014cshima] , and [Michael Chandler] , executive produced by [Francis Ford Coppola] and [George Lucas] , and written by [Noriko Hiraoka] 's parent"
    },
    {
        "questionIdx": 173108,
        "questionPatternModEntities": "What was edited by M0 , directed by M1 , and written by M2 's female sibling",
        "questionTemplate": "What was [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 M0 .\n?x0 P2 M1 .\n?x1 P3 M2 .\n?x1 P4 M3 .\nFILTER ( ?x1 != M2 )\n}",
        "recursionDepth": 40,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 wd:Q295093 .\n?x0 wdt:P1040 wd:Q55211 .\n?x0 wdt:P58 ?x1 .\n?x1 wdt:P21 wd:Q6581072 .\n?x1 wdt:P3373 wd:Q2657179 .\nFILTER ( ?x1 != wd:Q2657179 )\n}",
        "questionWithBrackets": "What was edited by [Mohsen Makhmalbaf] , directed by [Claude Lelouch] , and written by [Hana Makhmalbaf] 's female sibling"
    },
    {
        "questionIdx": 173155,
        "questionPatternModEntities": "What was edited by M1 's female spouse",
        "questionTemplate": "What was [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x1 P1 M0 .\n?x1 P2 M1 .\nFILTER ( ?x1 != M1 )\n}",
        "recursionDepth": 20,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1040 ?x1 .\n?x1 wdt:P21 wd:Q6581072 .\n?x1 wdt:P26 wd:Q1252342 .\nFILTER ( ?x1 != wd:Q1252342 )\n}LIMIT 1",
        "questionWithBrackets": "What was edited by [Douglas Hickox] 's female spouse"
    },
    {
        "questionIdx": 173208,
        "questionPatternModEntities": "What was edited by M3 and M4 , written by M2 , executive produced by M0 , and executive produced by M1",
        "questionTemplate": "What was [VP_SIMPLE] by [entity] and [entity] , [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P1 M2 .\n?x0 P2 M3 .\n?x0 P2 M4\n}",
        "recursionDepth": 46,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1040 wd:Q3376423 .\n?x0 wdt:P1040 wd:Q21280711 .\n?x0 wdt:P1431 wd:Q60100 .\n?x0 wdt:P1431 wd:Q2390812 .\n?x0 wdt:P58 wd:Q942914\n}",
        "questionWithBrackets": "What was edited by [David Siegel] and [Peter Amundson] , written by [Terry Rossio] , executive produced by [Roland Emmerich] , and executive produced by [Ute Emmerich]"
    },
    {
        "questionIdx": 173228,
        "questionPatternModEntities": "What was edited by M2 and M3 , directed by M4 , written by M1 , and executive produced by M0",
        "questionTemplate": "What was [VP_SIMPLE] by [entity] and [entity] , [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P2 M2 .\n?x0 P2 M3 .\n?x0 P3 M4\n}",
        "recursionDepth": 45,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 wd:Q2451678 .\n?x0 wdt:P1040 wd:Q6110147 .\n?x0 wdt:P1040 wd:Q3181589 .\n?x0 wdt:P1431 wd:Q11313 .\n?x0 wdt:P58 wd:Q238638\n}",
        "questionWithBrackets": "What was edited by [Jabez Olssen] and [John Gilroy] , directed by [Gareth Edwards] , written by [Chris Weitz] , and executive produced by [John Knoll]"
    },
    {
        "questionIdx": 173271,
        "questionPatternModEntities": "What was edited by M0 and directed by M1 's parent",
        "questionTemplate": "What was [VP_SIMPLE] by [entity] and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 ?x1 .\n?x1 P2 M1\n}",
        "recursionDepth": 26,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 ?x1 .\n?x0 wdt:P1040 wd:Q47284 .\n?x1 wdt:P40|wdt:P355 wd:Q28032516\n}",
        "questionWithBrackets": "What was edited by [Robert Rodriguez] and directed by [Racer Rodriguez] 's parent"
    },
    {
        "questionIdx": 173283,
        "questionPatternModEntities": "What was edited by M1 , edited by M2 , and produced by M0",
        "questionTemplate": "What was [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P1 M2\n}",
        "recursionDepth": 31,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1040 wd:Q3137 .\n?x0 wdt:P1040 wd:Q360002 .\n?x0 wdt:P162|wdt:P272 wd:Q36949\n}",
        "questionWithBrackets": "What was edited by [Jim Clark] , edited by [Jim Clark] , and produced by [Robert De Niro]"
    },
    {
        "questionIdx": 173317,
        "questionPatternModEntities": "What was edited by M2 and M3 , written by M0 and M1 , and edited by M4 , M5 , and M6",
        "questionTemplate": "What was [VP_SIMPLE] by [entity] and [entity] , [VP_SIMPLE] by [entity] and [entity] , and [VP_SIMPLE] by [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P1 M2 .\n?x0 P1 M3 .\n?x0 P1 M4 .\n?x0 P1 M5 .\n?x0 P1 M6\n}",
        "recursionDepth": 46,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1040 wd:Q55215 .\n?x0 wdt:P1040 wd:Q18021284 .\n?x0 wdt:P1040 wd:Q5639976 .\n?x0 wdt:P1040 wd:Q22074634 .\n?x0 wdt:P1040 wd:Q541826 .\n?x0 wdt:P58 wd:Q55238 .\n?x0 wdt:P58 wd:Q113628\n}",
        "questionWithBrackets": "What was edited by [Jonathan Morris] and [Alejandro Gonz\u00e1lez I\u00f1\u00e1rritu] , written by [Ken Loach] and [Idrissa Ou\u00e9draogo] , and edited by [Hajime Okayasu] , [Jay Cassidy] , and [Robert Duffy]"
    },
    {
        "questionIdx": 173351,
        "questionPatternModEntities": "What was edited by M0 , M1 , and M2",
        "questionTemplate": "What was [VP_SIMPLE] by [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2\n}",
        "recursionDepth": 18,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1040 wd:Q44426 .\n?x0 wdt:P1040 wd:Q98665 .\n?x0 wdt:P1040 wd:Q3460896\n}",
        "questionWithBrackets": "What was edited by [Rainer Werner Fassbinder] , [Juliane Lorenz] , and [Reginald Beck]"
    },
    {
        "questionIdx": 173368,
        "questionPatternModEntities": "What was edited by M4 , produced by M3 , executive produced by M0 , and written by M1 and M2",
        "questionTemplate": "What was [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\n?x0 P2 M3 .\n?x0 P3 M4\n}",
        "recursionDepth": 45,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1040 wd:Q5295252 .\n?x0 wdt:P1431 wd:Q8877 .\n?x0 wdt:P162|wdt:P272 wd:Q1072843 .\n?x0 wdt:P58 wd:Q1151111 .\n?x0 wdt:P58 wd:Q3306897\n}",
        "questionWithBrackets": "What was edited by [Donald W. Ernst] , produced by [Don Hahn] , executive produced by [Steven Spielberg] , and written by [Bill Kopp] and [Rob Minkoff]"
    },
    {
        "questionIdx": 173398,
        "questionPatternModEntities": "What was edited by M0 and written by M1 's parent and sibling",
        "questionTemplate": "What was [VP_SIMPLE] by [entity] and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] and [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 M0 .\n?x1 P2 M1 .\n?x1 P3 M1 .\nFILTER ( ?x1 != M1 )\n}",
        "recursionDepth": 31,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1040 wd:Q1677647 .\n?x0 wdt:P58 ?x1 .\n?x1 wdt:P40|wdt:P355 wd:Q42175155 .\n?x1 wdt:P3373 wd:Q42175155 .\nFILTER ( ?x1 != wd:Q42175155 )\n}",
        "questionWithBrackets": "What was edited by [Jacob Thuesen] and written by [Greta Strindberg] 's parent and sibling"
    },
    {
        "questionIdx": 173437,
        "questionPatternModEntities": "What was edited by M0 and edited by a Chinese spouse of M2",
        "questionTemplate": "What was [VP_SIMPLE] by [entity] and [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P0 M0 .\n?x1 P1 M1 .\n?x1 P2 M2 .\nFILTER ( ?x1 != M2 )\n}",
        "recursionDepth": 33,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1040 ?x1 .\n?x0 wdt:P1040 wd:Q705226 .\n?x1 wdt:P27 wd:Q148 .\n?x1 wdt:P26 wd:Q700315 .\nFILTER ( ?x1 != wd:Q700315 )\n}",
        "questionWithBrackets": "What was edited by [Wang Quan'an] and edited by a Chinese spouse of [Zhang Yuqi]"
    },
    {
        "questionIdx": 173468,
        "questionPatternModEntities": "What was edited by M2 , written by M1 , executive produced by M0 , and directed by M3 and M4",
        "questionTemplate": "What was [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P2 M2 .\n?x0 P3 M3 .\n?x0 P3 M4\n}",
        "recursionDepth": 45,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 wd:Q7614407 .\n?x0 wdt:P57 wd:Q7288285 .\n?x0 wdt:P1040 wd:Q977397 .\n?x0 wdt:P1431 wd:Q16345 .\n?x0 wdt:P58 wd:Q8312\n}",
        "questionWithBrackets": "What was edited by [William Hoy] , written by [Nicholas Meyer] , executive produced by [Leonard Nimoy] , and directed by [Ralph Winter] and [Steven-Charles Jaffe]"
    },
    {
        "questionIdx": 173522,
        "questionPatternModEntities": "What was edited by M5 's Dutch spouse , written by M0 and M1 , and directed by M2 and M3",
        "questionTemplate": "What was [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] , [VP_SIMPLE] by [entity] and [entity] , and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P1 ?x1 .\n?x0 P2 M2 .\n?x0 P2 M3 .\n?x1 P3 M4 .\n?x1 P4 M5 .\nFILTER ( ?x1 != M5 )\n}",
        "recursionDepth": 48,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 wd:Q7008165 .\n?x0 wdt:P57 wd:Q10392130 .\n?x0 wdt:P1040 ?x1 .\n?x0 wdt:P58 wd:Q4007759 .\n?x0 wdt:P58 wd:Q161933 .\n?x1 wdt:P27 wd:Q29999 .\n?x1 wdt:P26 wd:Q15451709 .\nFILTER ( ?x1 != wd:Q15451709 )\n}",
        "questionWithBrackets": "What was edited by [Helen van Dongen] 's Dutch spouse , written by [Valentino Orsini] and [Alberto Moravia] , and directed by [Paolo Taviani] and [Vittorio Taviani]"
    },
    {
        "questionIdx": 173576,
        "questionPatternModEntities": "What was edited by M0 and M1",
        "questionTemplate": "What was [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1\n}",
        "recursionDepth": 15,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1040 wd:Q44426 .\n?x0 wdt:P1040 wd:Q96024\n}",
        "questionWithBrackets": "What was edited by [Michael Fengler] and [Rainer Werner Fassbinder]"
    },
    {
        "questionIdx": 173604,
        "questionPatternModEntities": "What was edited by M4 's spouse , directed by M1 and M2 , executive produced by M0 , and directed by M3",
        "questionTemplate": "What was [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] , [VP_SIMPLE] by [entity] and [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 ?x1 .\n?x0 P2 M1 .\n?x0 P2 M2 .\n?x0 P2 M3 .\n?x1 P3 M4 .\nFILTER ( ?x1 != M4 )\n}",
        "recursionDepth": 49,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 wd:Q47284 .\n?x0 wdt:P57 wd:Q549956 .\n?x0 wdt:P57 wd:Q2838329 .\n?x0 wdt:P1040 ?x1 .\n?x0 wdt:P1431 wd:Q3772 .\n?x1 wdt:P26 wd:Q1181116 .\nFILTER ( ?x1 != wd:Q1181116 )\n}",
        "questionWithBrackets": "What was edited by [Dean Parisot] 's spouse , directed by [Alexandre Rockwell] and [Allison Anders] , executive produced by [Quentin Tarantino] , and directed by [Robert Rodriguez]"
    },
    {
        "questionIdx": 173650,
        "questionPatternModEntities": "What was edited by M3 and M4 , executive produced by M0 , executive produced by M1 , and produced by M2",
        "questionTemplate": "What was [VP_SIMPLE] by [entity] and [entity] , [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P1 M2 .\n?x0 P2 M3 .\n?x0 P2 M4\n}",
        "recursionDepth": 46,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1040 wd:Q541143 .\n?x0 wdt:P1040 wd:Q5359064 .\n?x0 wdt:P1431 wd:Q3772 .\n?x0 wdt:P1431 wd:Q549956 .\n?x0 wdt:P162|wdt:P272 wd:Q514913\n}",
        "questionWithBrackets": "What was edited by [Elena Maganini] and [Terry Rawlings] , executive produced by [Alexandre Rockwell] , executive produced by [Quentin Tarantino] , and produced by [Lawrence Bender]"
    },
    {
        "questionIdx": 173658,
        "questionPatternModEntities": "What was edited by M1 , produced by M0 , and edited by M2",
        "questionTemplate": "What was [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P1 M2\n}",
        "recursionDepth": 31,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1040 wd:Q53005 .\n?x0 wdt:P1040 wd:Q1657596 .\n?x0 wdt:P162|wdt:P272 wd:Q3150583\n}",
        "questionWithBrackets": "What was edited by [Alessandro Blasetti] , produced by [Industrie Cinematografiche Italiane] , and edited by [Ignazio Ferronetti]"
    },
    {
        "questionIdx": 173681,
        "questionPatternModEntities": "What was edited by M1 and executive produced by M0",
        "questionTemplate": "What was [VP_SIMPLE] by [entity] and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1\n}",
        "recursionDepth": 23,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1040 wd:Q1001309 .\n?x0 wdt:P1431 wd:Q2680\n}",
        "questionWithBrackets": "What was edited by [Dan Zimmerman] and executive produced by [Bruce Willis]"
    },
    {
        "questionIdx": 173709,
        "questionPatternModEntities": "What was edited by M4 , written by M0 , M1 , M2 , and M3 , and produced by a employee of M5",
        "questionTemplate": "What was [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , [entity] , [entity] , and [entity] , and [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P0 M3 .\n?x0 P1 ?x1 .\n?x0 P2 M4 .\n?x1 P3 M5\n}",
        "recursionDepth": 47,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1040 wd:Q55211 .\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x0 wdt:P58 wd:Q55215 .\n?x0 wdt:P58 wd:Q474262 .\n?x0 wdt:P58 wd:Q44221 .\n?x0 wdt:P58 wd:Q55238 .\n?x1 wdt:P108 wd:Q2852682\n}",
        "questionWithBrackets": "What was edited by [Mohsen Makhmalbaf] , written by [Amos Gitai] , [Ken Loach] , [Sean Penn] , and [Alejandro Gonz\u00e1lez I\u00f1\u00e1rritu] , and produced by a employee of [Antenne 2]"
    },
    {
        "questionIdx": 173779,
        "questionPatternModEntities": "What was edited by M1 's spouse , edited by a spouse of M2 , and written by M0",
        "questionTemplate": "What was [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] , [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 ?x1 .\n?x0 P1 ?x2 .\n?x1 P2 M1 .\n?x2 P2 M2 .\nFILTER ( ?x1 != M1 ) .\nFILTER ( ?x2 != M2 )\n}",
        "recursionDepth": 41,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1040 ?x1 .\n?x0 wdt:P1040 ?x2 .\n?x0 wdt:P58 wd:Q882 .\n?x1 wdt:P26 wd:Q95050 .\n?x2 wdt:P26 wd:Q137808 .\nFILTER ( ?x1 != wd:Q95050 ) .\nFILTER ( ?x2 != wd:Q137808 )\n}",
        "questionWithBrackets": "What was edited by [Paulette Goddard] 's spouse , edited by a spouse of [Oona O'Neill] , and written by [Charlie Chaplin]"
    },
    {
        "questionIdx": 173804,
        "questionPatternModEntities": "What was edited by M4 , produced by M5 's employee , and written by M0 , M1 , M2 , and M3",
        "questionTemplate": "What was [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] , and [VP_SIMPLE] by [entity] , [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P0 M3 .\n?x0 P1 ?x1 .\n?x0 P2 M4 .\n?x1 P3 M5\n}",
        "recursionDepth": 45,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1040 wd:Q55211 .\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x0 wdt:P58 wd:Q432709 .\n?x0 wdt:P58 wd:Q295093 .\n?x0 wdt:P58 wd:Q55238 .\n?x0 wdt:P58 wd:Q11443774 .\n?x1 wdt:P108 wd:Q2852682\n}",
        "questionWithBrackets": "What was edited by [Mohsen Makhmalbaf] , produced by [Antenne 2] 's employee , and written by [Samira Makhmalbaf] , [Ken Loach] , [Daisuke Tengan] , and [Claude Lelouch]"
    },
    {
        "questionIdx": 173807,
        "questionPatternModEntities": "What was edited by M5 and M6 , produced by M4 , and executive produced by M0 , M1 , M2 , and M3",
        "questionTemplate": "What was [VP_SIMPLE] by [entity] and [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity] , [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P0 M3 .\n?x0 P1 M4 .\n?x0 P2 M5 .\n?x0 P2 M6\n}",
        "recursionDepth": 46,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1040 wd:Q1138711 .\n?x0 wdt:P1040 wd:Q16225548 .\n?x0 wdt:P1431 wd:Q37175 .\n?x0 wdt:P1431 wd:Q943506 .\n?x0 wdt:P1431 wd:Q24809566 .\n?x0 wdt:P1431 wd:Q942914 .\n?x0 wdt:P162|wdt:P272 wd:Q217037\n}",
        "questionWithBrackets": "What was edited by [James Haygood] and [Craig Wood] , produced by [Jerry Bruckheimer] , and executive produced by [Johnny Depp] , [Chad Oman] , [Terry Rossio] , and [Ted Elliott]"
    },
    {
        "questionIdx": 173830,
        "questionPatternModEntities": "What was edited by M2 , directed by M4 , edited by M3 , and executive produced by M0 and M1",
        "questionTemplate": "What was [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P1 M2 .\n?x0 P1 M3 .\n?x0 P2 M4\n}",
        "recursionDepth": 45,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 wd:Q363989 .\n?x0 wdt:P1040 wd:Q614630 .\n?x0 wdt:P1040 wd:Q15835006 .\n?x0 wdt:P1431 wd:Q56094 .\n?x0 wdt:P1431 wd:Q38222\n}",
        "questionWithBrackets": "What was edited by [Michael Chandler] , directed by [Paul Schrader] , edited by [Michael Chandler] , and executive produced by [Francis Ford Coppola] and [George Lucas]"
    },
    {
        "questionIdx": 173874,
        "questionPatternModEntities": "What was edited by M3 , directed by M4 , executive produced by M0 and M1 , and executive produced by M2",
        "questionTemplate": "What was [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] and [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P1 M3 .\n?x0 P2 M4\n}",
        "recursionDepth": 46,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 wd:Q1151111 .\n?x0 wdt:P1040 wd:Q5295252 .\n?x0 wdt:P1431 wd:Q8877 .\n?x0 wdt:P1431 wd:Q237207 .\n?x0 wdt:P1431 wd:Q549570\n}",
        "questionWithBrackets": "What was edited by [Donald W. Ernst] , directed by [Rob Minkoff] , executive produced by [Frank Marshall] and [Steven Spielberg] , and executive produced by [Kathleen Kennedy]"
    },
    {
        "questionIdx": 173980,
        "questionPatternModEntities": "What was edited by M1 's female sibling 's German sibling",
        "questionTemplate": "What was [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x1 P1 ?x2 .\n?x1 P2 M0 .\n?x2 P1 M1 .\n?x2 P3 M2 .\nFILTER ( ?x1 != ?x2 ) .\nFILTER ( ?x2 != M1 )\n}",
        "recursionDepth": 29,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1040 ?x1 .\n?x1 wdt:P27 wd:Q183 .\n?x1 wdt:P3373 ?x2 .\n?x2 wdt:P21 wd:Q6581072 .\n?x2 wdt:P3373 wd:Q101712 .\nFILTER ( ?x1 != ?x2 ) .\nFILTER ( ?x2 != wd:Q101712 )\n}LIMIT 1",
        "questionWithBrackets": "What was edited by [Valeska Grisebach] 's female sibling 's German sibling"
    },
    {
        "questionIdx": 174039,
        "questionPatternModEntities": "What was edited by M2 , written by M0 , executive produced by M3 's spouse , and written by M1",
        "questionTemplate": "What was [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 M0 .\n?x0 P1 M1 .\n?x0 P2 M2 .\n?x1 P3 M3 .\nFILTER ( ?x1 != M3 )\n}",
        "recursionDepth": 45,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1040 wd:Q3856251 .\n?x0 wdt:P1431 ?x1 .\n?x0 wdt:P58 wd:Q302063 .\n?x0 wdt:P58 wd:Q19560063 .\n?x1 wdt:P26 wd:Q22075592 .\nFILTER ( ?x1 != wd:Q22075592 )\n}",
        "questionWithBrackets": "What was edited by [Michael Ruscio] , written by [Aaron Guzikowski] , executive produced by [Felicity Heywood] 's spouse , and written by [Heather Bellson]"
    },
    {
        "questionIdx": 174066,
        "questionPatternModEntities": "What was edited by M4 , M5 , and M6 , executive produced by M0 , M1 , and M2 , and produced by M3",
        "questionTemplate": "What was [VP_SIMPLE] by [entity] , [entity] , and [entity] , [VP_SIMPLE] by [entity] , [entity] , and [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P1 M3 .\n?x0 P2 M4 .\n?x0 P2 M5 .\n?x0 P2 M6\n}",
        "recursionDepth": 46,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1040 wd:Q20722014 .\n?x0 wdt:P1040 wd:Q20722013 .\n?x0 wdt:P1040 wd:Q20722018 .\n?x0 wdt:P1431 wd:Q350405 .\n?x0 wdt:P1431 wd:Q20722010 .\n?x0 wdt:P1431 wd:Q20722012 .\n?x0 wdt:P162|wdt:P272 wd:Q3159997\n}",
        "questionWithBrackets": "What was edited by [Claire L. Chandler] , [Todd Woody Richman] , and [Geraud Brisson] , executive produced by [Alan Hayling] , [Alex Cooke] , and [Adam McKay] , and produced by [Jacques Servin]"
    },
    {
        "questionIdx": 174093,
        "questionPatternModEntities": "What was edited by M2 , produced by M1 , edited by M3 and M4 , and executive produced by M0",
        "questionTemplate": "What was [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] and [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P2 M2 .\n?x0 P2 M3 .\n?x0 P2 M4\n}",
        "recursionDepth": 45,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1040 wd:Q5359064 .\n?x0 wdt:P1040 wd:Q541143 .\n?x0 wdt:P1040 wd:Q47284 .\n?x0 wdt:P1431 wd:Q3772 .\n?x0 wdt:P162|wdt:P272 wd:Q514913\n}",
        "questionWithBrackets": "What was edited by [Elena Maganini] , produced by [Lawrence Bender] , edited by [Robert Rodriguez] and [Terry Rawlings] , and executive produced by [Quentin Tarantino]"
    },
    {
        "questionIdx": 174297,
        "questionPatternModEntities": "What was edited by a female sibling of M2 and directed by M0 and M1",
        "questionTemplate": "What was [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 M0 .\n?x0 P1 M1 .\n?x1 P2 M2 .\n?x1 P3 M3 .\nFILTER ( ?x1 != M2 )\n}",
        "recursionDepth": 37,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 wd:Q7436898 .\n?x0 wdt:P57 wd:Q3081957 .\n?x0 wdt:P1040 ?x1 .\n?x1 wdt:P21 wd:Q6581072 .\n?x1 wdt:P3373 wd:Q573338 .\nFILTER ( ?x1 != wd:Q573338 )\n}",
        "questionWithBrackets": "What was edited by a female sibling of [Anthony Hickox] and directed by [Scott Moore] and [Jon Lucas]"
    },
    {
        "questionIdx": 174423,
        "questionPatternModEntities": "What was edited by a parent of M1 and edited by M0",
        "questionTemplate": "What was [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity] and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P0 M0 .\n?x1 P1 M1\n}",
        "recursionDepth": 28,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1040 ?x1 .\n?x0 wdt:P1040 wd:Q15079 .\n?x1 wdt:P40|wdt:P355 wd:Q63894056\n}",
        "questionWithBrackets": "What was edited by a parent of [Kitty Sz\u00e9kely] and edited by [Louis C.K.]"
    },
    {
        "questionIdx": 174483,
        "questionPatternModEntities": "What was edited by a sibling of M4 , written by M0 and M1 , produced by M3 , and written by M2",
        "questionTemplate": "What was [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity] , [VP_SIMPLE] by [entity] and [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P1 M3 .\n?x0 P2 ?x1 .\n?x1 P3 M4 .\nFILTER ( ?x1 != M4 )\n}",
        "recursionDepth": 50,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1040 ?x1 .\n?x0 wdt:P162|wdt:P272 wd:Q7608218 .\n?x0 wdt:P58 wd:Q2409167 .\n?x0 wdt:P58 wd:Q471010 .\n?x0 wdt:P58 wd:Q1210550 .\n?x1 wdt:P3373 wd:Q6228653 .\nFILTER ( ?x1 != wd:Q6228653 )\n}",
        "questionWithBrackets": "What was edited by a sibling of [John David Cameron] , written by [Claude Zidi] and [Simon Micha\u00ebl] , produced by [Stephanie Austin] , and written by [Didier Kaminka]"
    },
    {
        "questionIdx": 174493,
        "questionPatternModEntities": "What was edited by a spouse of a French spouse of M3 , directed by M1 , and executive produced by M0",
        "questionTemplate": "What was [VP_SIMPLE] by a [ROLE_SIMPLE] of a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 ?x1 .\n?x0 P2 M1 .\n?x1 P3 ?x2 .\n?x2 P3 M3 .\n?x2 P4 M2 .\nFILTER ( ?x1 != ?x2 ) .\nFILTER ( ?x2 != M3 )\n}",
        "recursionDepth": 49,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 wd:Q55388 .\n?x0 wdt:P1040 ?x1 .\n?x0 wdt:P1431 wd:Q2847593 .\n?x1 wdt:P26 ?x2 .\n?x2 wdt:P27 wd:Q142 .\n?x2 wdt:P26 wd:Q3263879 .\nFILTER ( ?x1 != ?x2 ) .\nFILTER ( ?x2 != wd:Q3263879 )\n}",
        "questionWithBrackets": "What was edited by a spouse of a French spouse of [Louisette Hautecoeur] , directed by [Ren\u00e9 Clair] , and executive produced by [Andr\u00e9 Daven]"
    },
    {
        "questionIdx": 174523,
        "questionPatternModEntities": "What was edited by a American sibling of M0",
        "questionTemplate": "What was [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x1 P1 M0 .\n?x1 P2 M1 .\nFILTER ( ?x1 != M0 )\n}",
        "recursionDepth": 22,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1040 ?x1 .\n?x1 wdt:P27 wd:Q30 .\n?x1 wdt:P3373 wd:Q104373781 .\nFILTER ( ?x1 != wd:Q104373781 )\n}LIMIT 1",
        "questionWithBrackets": "What was edited by a American sibling of [John Lynch]"
    },
    {
        "questionIdx": 174607,
        "questionPatternModEntities": "What was edited by a employee of M0",
        "questionTemplate": "What was [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x1 P1 M0\n}",
        "recursionDepth": 17,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1040 ?x1 .\n?x1 wdt:P108 wd:Q141336\n}LIMIT 1",
        "questionWithBrackets": "What was edited by a employee of [Mosfilm]"
    },
    {
        "questionIdx": 174631,
        "questionPatternModEntities": "What was edited by and directed by M0 , M1 , M2 , and M3",
        "questionTemplate": "What was [VP_SIMPLE] by and [VP_SIMPLE] by [entity] , [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P0 M3 .\n?x0 P1 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\n?x0 P1 M3\n}",
        "recursionDepth": 29,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 wd:Q1291210 .\n?x0 wdt:P57 wd:Q16198328 .\n?x0 wdt:P57 wd:Q4207234 .\n?x0 wdt:P57 wd:Q4679987 .\n?x0 wdt:P1040 wd:Q1291210 .\n?x0 wdt:P1040 wd:Q16198328 .\n?x0 wdt:P1040 wd:Q4207234 .\n?x0 wdt:P1040 wd:Q4679987\n}",
        "questionWithBrackets": "What was edited by and directed by [Jason Eisener] , [Gareth Evans] , [Eduardo S\u00e1nchez] , and [Adam Wingard]"
    },
    {
        "questionIdx": 174632,
        "questionPatternModEntities": "What was edited by and directed by M0 's female sibling",
        "questionTemplate": "What was [VP_SIMPLE] by and [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x1 P2 M0 .\n?x1 P3 M1 .\nFILTER ( ?x1 != M0 )\n}",
        "recursionDepth": 28,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 ?x1 .\n?x0 wdt:P1040 ?x1 .\n?x1 wdt:P21 wd:Q6581072 .\n?x1 wdt:P3373 wd:Q143945 .\nFILTER ( ?x1 != wd:Q143945 )\n}LIMIT 1",
        "questionWithBrackets": "What was edited by and directed by [Carla Bruni] 's female sibling"
    },
    {
        "questionIdx": 174634,
        "questionPatternModEntities": "What was edited by and directed by M0 and M1",
        "questionTemplate": "What was [VP_SIMPLE] by and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P1 M0 .\n?x0 P1 M1\n}",
        "recursionDepth": 23,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 wd:Q24907 .\n?x0 wdt:P57 wd:Q5341401 .\n?x0 wdt:P1040 wd:Q24907 .\n?x0 wdt:P1040 wd:Q5341401\n}",
        "questionWithBrackets": "What was edited by and directed by [Edvin Tiemroth] and [Anker S\u00f8rensen]"
    },
    {
        "questionIdx": 174635,
        "questionPatternModEntities": "What was edited by and directed by M0 's employee",
        "questionTemplate": "What was [VP_SIMPLE] by and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x1 P2 M0\n}",
        "recursionDepth": 23,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 ?x1 .\n?x0 wdt:P1040 ?x1 .\n?x1 wdt:P108 wd:Q131439\n}LIMIT 1",
        "questionWithBrackets": "What was edited by and directed by [Comedy Central] 's employee"
    },
    {
        "questionIdx": 174637,
        "questionPatternModEntities": "What was edited by and directed by M0 's Italian sibling",
        "questionTemplate": "What was [VP_SIMPLE] by and [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x1 P2 M0 .\n?x1 P3 M1 .\nFILTER ( ?x1 != M0 )\n}",
        "recursionDepth": 28,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 ?x1 .\n?x0 wdt:P1040 ?x1 .\n?x1 wdt:P27 wd:Q38 .\n?x1 wdt:P3373 wd:Q971600 .\nFILTER ( ?x1 != wd:Q971600 )\n}LIMIT 1",
        "questionWithBrackets": "What was edited by and directed by [Franco Moretti] 's Italian sibling"
    },
    {
        "questionIdx": 174650,
        "questionPatternModEntities": "What was edited by and directed by M0",
        "questionTemplate": "What was [VP_SIMPLE] by and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M0\n}",
        "recursionDepth": 19,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 wd:Q853 .\n?x0 wdt:P1040 wd:Q853\n}LIMIT 1",
        "questionWithBrackets": "What was edited by and directed by [Andrei Tarkovsky]"
    },
    {
        "questionIdx": 174677,
        "questionPatternModEntities": "What was edited by and directed by a sibling of M0",
        "questionTemplate": "What was [VP_SIMPLE] by and [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x1 P2 M0 .\nFILTER ( ?x1 != M0 )\n}",
        "recursionDepth": 25,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 ?x1 .\n?x0 wdt:P1040 ?x1 .\n?x1 wdt:P3373 wd:Q372788 .\nFILTER ( ?x1 != wd:Q372788 )\n}LIMIT 1",
        "questionWithBrackets": "What was edited by and directed by a sibling of [Jonathan Nolan]"
    },
    {
        "questionIdx": 174678,
        "questionPatternModEntities": "What was edited by and directed by a spouse of M0",
        "questionTemplate": "What was [VP_SIMPLE] by and [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x1 P2 M0 .\nFILTER ( ?x1 != M0 )\n}",
        "recursionDepth": 25,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 ?x1 .\n?x0 wdt:P1040 ?x1 .\n?x1 wdt:P26 wd:Q3032150 .\nFILTER ( ?x1 != wd:Q3032150 )\n}LIMIT 1",
        "questionWithBrackets": "What was edited by and directed by a spouse of [Y\u014dko Yaguchi]"
    },
    {
        "questionIdx": 174702,
        "questionPatternModEntities": "What was edited by and executive produced by M1 's male spouse",
        "questionTemplate": "What was [VP_SIMPLE] by and [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x1 P2 M0 .\n?x1 P3 M1 .\nFILTER ( ?x1 != M1 )\n}",
        "recursionDepth": 29,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1040 ?x1 .\n?x0 wdt:P1431 ?x1 .\n?x1 wdt:P21 wd:Q6581097 .\n?x1 wdt:P26 wd:Q3032150 .\nFILTER ( ?x1 != wd:Q3032150 )\n}LIMIT 1",
        "questionWithBrackets": "What was edited by and executive produced by [Y\u014dko Yaguchi] 's male spouse"
    },
    {
        "questionIdx": 174774,
        "questionPatternModEntities": "What was edited by and produced by M0 's spouse 's spouse",
        "questionTemplate": "What was [VP_SIMPLE] by and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x1 P2 ?x2 .\n?x2 P2 M0 .\nFILTER ( ?x1 != ?x2 ) .\nFILTER ( ?x2 != M0 )\n}",
        "recursionDepth": 27,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1040 ?x1 .\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x1 wdt:P26 ?x2 .\n?x2 wdt:P26 wd:Q4909002 .\nFILTER ( ?x1 != ?x2 ) .\nFILTER ( ?x2 != wd:Q4909002 )\n}LIMIT 1",
        "questionWithBrackets": "What was edited by and produced by [Bill Fleckenstein] 's spouse 's spouse"
    },
    {
        "questionIdx": 174789,
        "questionPatternModEntities": "What was edited by and produced by M0 's spouse",
        "questionTemplate": "What was [VP_SIMPLE] by and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x1 P2 M0 .\nFILTER ( ?x1 != M0 )\n}",
        "recursionDepth": 23,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1040 ?x1 .\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x1 wdt:P26 wd:Q70294 .\nFILTER ( ?x1 != wd:Q70294 )\n}LIMIT 1",
        "questionWithBrackets": "What was edited by and produced by [Ingrid Caven] 's spouse"
    },
    {
        "questionIdx": 174825,
        "questionPatternModEntities": "What was edited by and produced by a parent of M0",
        "questionTemplate": "What was [VP_SIMPLE] by and [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x1 P2 M0\n}",
        "recursionDepth": 25,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1040 ?x1 .\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x1 wdt:P40|wdt:P355 wd:Q573338\n}LIMIT 1",
        "questionWithBrackets": "What was edited by and produced by a parent of [Anthony Hickox]"
    },
    {
        "questionIdx": 174843,
        "questionPatternModEntities": "What was edited by and written by M0 , M1 , and M2",
        "questionTemplate": "What was [VP_SIMPLE] by and [VP_SIMPLE] by [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P1 M0 .\n?x0 P1 M1 .\n?x0 P1 M2\n}",
        "recursionDepth": 26,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1040 wd:Q562108 .\n?x0 wdt:P1040 wd:Q1687239 .\n?x0 wdt:P1040 wd:Q35979475 .\n?x0 wdt:P58 wd:Q562108 .\n?x0 wdt:P58 wd:Q1687239 .\n?x0 wdt:P58 wd:Q35979475\n}",
        "questionWithBrackets": "What was edited by and written by [Ole John] , [Jens J\u00f8rgen Thorsen] , and [J\u00f8rgen Leth]"
    },
    {
        "questionIdx": 174884,
        "questionPatternModEntities": "What was edited by and written by a female employee of M0",
        "questionTemplate": "What was [VP_SIMPLE] by and [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x1 P2 M0 .\n?x1 P3 M1\n}",
        "recursionDepth": 30,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1040 ?x1 .\n?x0 wdt:P58 ?x1 .\n?x1 wdt:P108 wd:Q1622237 .\n?x1 wdt:P21 wd:Q6581072\n}LIMIT 1",
        "questionWithBrackets": "What was edited by and written by a female employee of [Hochschule f\u00fcr bildende K\u00fcnste Hamburg]"
    },
    {
        "questionIdx": 174892,
        "questionPatternModEntities": "What was edited by and written by a sibling of M0",
        "questionTemplate": "What was [VP_SIMPLE] by and [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x1 P2 M0 .\nFILTER ( ?x1 != M0 )\n}",
        "recursionDepth": 25,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1040 ?x1 .\n?x0 wdt:P58 ?x1 .\n?x1 wdt:P3373 wd:Q372788 .\nFILTER ( ?x1 != wd:Q372788 )\n}LIMIT 1",
        "questionWithBrackets": "What was edited by and written by a sibling of [Jonathan Nolan]"
    },
    {
        "questionIdx": 174893,
        "questionPatternModEntities": "What was edited by and written by a spouse of M0",
        "questionTemplate": "What was [VP_SIMPLE] by and [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x1 P2 M0 .\nFILTER ( ?x1 != M0 )\n}",
        "recursionDepth": 25,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1040 ?x1 .\n?x0 wdt:P58 ?x1 .\n?x1 wdt:P26 wd:Q95050 .\nFILTER ( ?x1 != wd:Q95050 )\n}LIMIT 1",
        "questionWithBrackets": "What was edited by and written by a spouse of [Paulette Goddard]"
    },
    {
        "questionIdx": 174926,
        "questionPatternModEntities": "What was edited by , directed by , and produced by M0 's Dutch sibling",
        "questionTemplate": "What was [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x1 P3 M0 .\n?x1 P4 M1 .\nFILTER ( ?x1 != M0 )\n}",
        "recursionDepth": 34,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 ?x1 .\n?x0 wdt:P1040 ?x1 .\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x1 wdt:P27 wd:Q29999 .\n?x1 wdt:P3373 wd:Q27032273 .\nFILTER ( ?x1 != wd:Q27032273 )\n}LIMIT 1",
        "questionWithBrackets": "What was edited by , directed by , and produced by [Johan Haanstra] 's Dutch sibling"
    },
    {
        "questionIdx": 174947,
        "questionPatternModEntities": "What was edited by , directed by , and written by M0 , M1 , M2 , and M3",
        "questionTemplate": "What was [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity] , [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P0 M3 .\n?x0 P1 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\n?x0 P1 M3 .\n?x0 P2 M0 .\n?x0 P2 M1 .\n?x0 P2 M2 .\n?x0 P2 M3\n}",
        "recursionDepth": 35,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 wd:Q5658534 .\n?x0 wdt:P57 wd:Q5836844 .\n?x0 wdt:P57 wd:Q4022902 .\n?x0 wdt:P57 wd:Q4023328 .\n?x0 wdt:P1040 wd:Q5658534 .\n?x0 wdt:P1040 wd:Q5836844 .\n?x0 wdt:P1040 wd:Q4022902 .\n?x0 wdt:P1040 wd:Q4023328 .\n?x0 wdt:P58 wd:Q5658534 .\n?x0 wdt:P58 wd:Q5836844 .\n?x0 wdt:P58 wd:Q4022902 .\n?x0 wdt:P58 wd:Q4023328\n}",
        "questionWithBrackets": "What was edited by , directed by , and written by [Ernesto D\u00edaz Espinoza] , [Adri\u00e1n Garc\u00eda Bogliano] , [Yoshihiro Nishimura] , and [Y\u016bdai Yamaguchi]"
    },
    {
        "questionIdx": 174979,
        "questionPatternModEntities": "What was edited by , directed by , executive produced by , and written by a sibling of M0",
        "questionTemplate": "What was [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x0 P3 ?x1 .\n?x1 P4 M0 .\nFILTER ( ?x1 != M0 )\n}",
        "recursionDepth": 38,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 ?x1 .\n?x0 wdt:P1040 ?x1 .\n?x0 wdt:P1431 ?x1 .\n?x0 wdt:P58 ?x1 .\n?x1 wdt:P3373 wd:Q28370409 .\nFILTER ( ?x1 != wd:Q28370409 )\n}LIMIT 1",
        "questionWithBrackets": "What was edited by , directed by , executive produced by , and written by a sibling of [Everton Rocca]"
    },
    {
        "questionIdx": 175000,
        "questionPatternModEntities": "What was edited by , directed by , produced by , and written by M1 's American spouse",
        "questionTemplate": "What was [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x0 P3 ?x1 .\n?x1 P4 M0 .\n?x1 P5 M1 .\nFILTER ( ?x1 != M1 )\n}",
        "recursionDepth": 40,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 ?x1 .\n?x0 wdt:P1040 ?x1 .\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x0 wdt:P58 ?x1 .\n?x1 wdt:P27 wd:Q30 .\n?x1 wdt:P26 wd:Q63894324 .\nFILTER ( ?x1 != wd:Q63894324 )\n}LIMIT 1",
        "questionWithBrackets": "What was edited by , directed by , produced by , and written by [Alix Bailey] 's American spouse"
    },
    {
        "questionIdx": 175002,
        "questionPatternModEntities": "What was edited by , directed by , produced by , and written by M0",
        "questionTemplate": "What was [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M0 .\n?x0 P2 M0 .\n?x0 P3 M0\n}",
        "recursionDepth": 31,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 wd:Q8006 .\n?x0 wdt:P1040 wd:Q8006 .\n?x0 wdt:P162|wdt:P272 wd:Q8006 .\n?x0 wdt:P58 wd:Q8006\n}LIMIT 1",
        "questionWithBrackets": "What was edited by , directed by , produced by , and written by [Akira Kurosawa]"
    },
    {
        "questionIdx": 175041,
        "questionPatternModEntities": "What was edited by , directed by , written by , produced by , and executive produced by M0 's sibling",
        "questionTemplate": "What was [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x0 P3 ?x1 .\n?x0 P4 ?x1 .\n?x1 P5 M0 .\nFILTER ( ?x1 != M0 )\n}",
        "recursionDepth": 42,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 ?x1 .\n?x0 wdt:P1040 ?x1 .\n?x0 wdt:P1431 ?x1 .\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x0 wdt:P58 ?x1 .\n?x1 wdt:P3373 wd:Q28370409 .\nFILTER ( ?x1 != wd:Q28370409 )\n}LIMIT 1",
        "questionWithBrackets": "What was edited by , directed by , written by , produced by , and executive produced by [Everton Rocca] 's sibling"
    },
    {
        "questionIdx": 175088,
        "questionPatternModEntities": "What was edited by , executive produced by , and written by M0",
        "questionTemplate": "What was [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M0 .\n?x0 P2 M0\n}",
        "recursionDepth": 26,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1040 wd:Q8006 .\n?x0 wdt:P1431 wd:Q8006 .\n?x0 wdt:P58 wd:Q8006\n}LIMIT 1",
        "questionWithBrackets": "What was edited by , executive produced by , and written by [Akira Kurosawa]"
    },
    {
        "questionIdx": 175236,
        "questionPatternModEntities": "What was edited by , produced by , directed by , and written by M0 's spouse",
        "questionTemplate": "What was [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x0 P3 ?x1 .\n?x1 P4 M0 .\nFILTER ( ?x1 != M0 )\n}",
        "recursionDepth": 35,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 ?x1 .\n?x0 wdt:P1040 ?x1 .\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x0 wdt:P58 ?x1 .\n?x1 wdt:P26 wd:Q242951 .\nFILTER ( ?x1 != wd:Q242951 )\n}LIMIT 1",
        "questionWithBrackets": "What was edited by , produced by , directed by , and written by [Emma Thomas] 's spouse"
    },
    {
        "questionIdx": 175247,
        "questionPatternModEntities": "What was edited by , produced by , directed by , executive produced by , and written by M0 's spouse",
        "questionTemplate": "What was [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x0 P3 ?x1 .\n?x0 P4 ?x1 .\n?x1 P5 M0 .\nFILTER ( ?x1 != M0 )\n}",
        "recursionDepth": 42,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 ?x1 .\n?x0 wdt:P1040 ?x1 .\n?x0 wdt:P1431 ?x1 .\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x0 wdt:P58 ?x1 .\n?x1 wdt:P26 wd:Q3032150 .\nFILTER ( ?x1 != wd:Q3032150 )\n}LIMIT 1",
        "questionWithBrackets": "What was edited by , produced by , directed by , executive produced by , and written by [Y\u014dko Yaguchi] 's spouse"
    },
    {
        "questionIdx": 175249,
        "questionPatternModEntities": "What was edited by , produced by , directed by , executive produced by , and written by a sibling of M0",
        "questionTemplate": "What was [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x0 P3 ?x1 .\n?x0 P4 ?x1 .\n?x1 P5 M0 .\nFILTER ( ?x1 != M0 )\n}",
        "recursionDepth": 44,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 ?x1 .\n?x0 wdt:P1040 ?x1 .\n?x0 wdt:P1431 ?x1 .\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x0 wdt:P58 ?x1 .\n?x1 wdt:P3373 wd:Q28370409 .\nFILTER ( ?x1 != wd:Q28370409 )\n}LIMIT 1",
        "questionWithBrackets": "What was edited by , produced by , directed by , executive produced by , and written by a sibling of [Everton Rocca]"
    },
    {
        "questionIdx": 175266,
        "questionPatternModEntities": "What was edited by , produced by , executive produced by , and written by M0 's spouse",
        "questionTemplate": "What was [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x0 P3 ?x1 .\n?x1 P4 M0 .\nFILTER ( ?x1 != M0 )\n}",
        "recursionDepth": 36,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1040 ?x1 .\n?x0 wdt:P1431 ?x1 .\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x0 wdt:P58 ?x1 .\n?x1 wdt:P26 wd:Q3032150 .\nFILTER ( ?x1 != wd:Q3032150 )\n}LIMIT 1",
        "questionWithBrackets": "What was edited by , produced by , executive produced by , and written by [Y\u014dko Yaguchi] 's spouse"
    },
    {
        "questionIdx": 175272,
        "questionPatternModEntities": "What was edited by , produced by , executive produced by , and written by a parent of M0",
        "questionTemplate": "What was [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x0 P3 ?x1 .\n?x1 P4 M0\n}",
        "recursionDepth": 38,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1040 ?x1 .\n?x0 wdt:P1431 ?x1 .\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x0 wdt:P58 ?x1 .\n?x1 wdt:P40|wdt:P355 wd:Q1620638\n}LIMIT 1",
        "questionWithBrackets": "What was edited by , produced by , executive produced by , and written by a parent of [Hisao Kurosawa]"
    },
    {
        "questionIdx": 175307,
        "questionPatternModEntities": "What was edited by , produced by , written by , and executive produced by a male sibling of M0",
        "questionTemplate": "What was [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x0 P3 ?x1 .\n?x1 P4 M0 .\n?x1 P5 M1 .\nFILTER ( ?x1 != M0 )\n}",
        "recursionDepth": 43,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1040 ?x1 .\n?x0 wdt:P1431 ?x1 .\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x0 wdt:P58 ?x1 .\n?x1 wdt:P21 wd:Q6581097 .\n?x1 wdt:P3373 wd:Q28370409 .\nFILTER ( ?x1 != wd:Q28370409 )\n}LIMIT 1",
        "questionWithBrackets": "What was edited by , produced by , written by , and executive produced by a male sibling of [Everton Rocca]"
    },
    {
        "questionIdx": 175321,
        "questionPatternModEntities": "What was edited by , produced by , written by , directed by , and executive produced by a employee of M0",
        "questionTemplate": "What was [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x0 P3 ?x1 .\n?x0 P4 ?x1 .\n?x1 P5 M0\n}",
        "recursionDepth": 44,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 ?x1 .\n?x0 wdt:P1040 ?x1 .\n?x0 wdt:P1431 ?x1 .\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x0 wdt:P58 ?x1 .\n?x1 wdt:P108 wd:Q174710\n}LIMIT 1",
        "questionWithBrackets": "What was edited by , produced by , written by , directed by , and executive produced by a employee of [University of California, Los Angeles]"
    },
    {
        "questionIdx": 175326,
        "questionPatternModEntities": "What was edited by , produced by , written by , executive produced by , and directed by M0 's spouse",
        "questionTemplate": "What was [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x0 P3 ?x1 .\n?x0 P4 ?x1 .\n?x1 P5 M0 .\nFILTER ( ?x1 != M0 )\n}",
        "recursionDepth": 42,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 ?x1 .\n?x0 wdt:P1040 ?x1 .\n?x0 wdt:P1431 ?x1 .\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x0 wdt:P58 ?x1 .\n?x1 wdt:P26 wd:Q3032150 .\nFILTER ( ?x1 != wd:Q3032150 )\n}LIMIT 1",
        "questionWithBrackets": "What was edited by , produced by , written by , executive produced by , and directed by [Y\u014dko Yaguchi] 's spouse"
    },
    {
        "questionIdx": 175332,
        "questionPatternModEntities": "What was edited by , produced by , written by , executive produced by , and directed by a spouse of M0",
        "questionTemplate": "What was [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x0 P3 ?x1 .\n?x0 P4 ?x1 .\n?x1 P5 M0 .\nFILTER ( ?x1 != M0 )\n}",
        "recursionDepth": 44,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 ?x1 .\n?x0 wdt:P1040 ?x1 .\n?x0 wdt:P1431 ?x1 .\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x0 wdt:P58 ?x1 .\n?x1 wdt:P26 wd:Q3032150 .\nFILTER ( ?x1 != wd:Q3032150 )\n}LIMIT 1",
        "questionWithBrackets": "What was edited by , produced by , written by , executive produced by , and directed by a spouse of [Y\u014dko Yaguchi]"
    },
    {
        "questionIdx": 175398,
        "questionPatternModEntities": "What was edited by , written by , directed by , and produced by a spouse of M0",
        "questionTemplate": "What was [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x0 P3 ?x1 .\n?x1 P4 M0 .\nFILTER ( ?x1 != M0 )\n}",
        "recursionDepth": 37,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 ?x1 .\n?x0 wdt:P1040 ?x1 .\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x0 wdt:P58 ?x1 .\n?x1 wdt:P26 wd:Q242951 .\nFILTER ( ?x1 != wd:Q242951 )\n}LIMIT 1",
        "questionWithBrackets": "What was edited by , written by , directed by , and produced by a spouse of [Emma Thomas]"
    },
    {
        "questionIdx": 175433,
        "questionPatternModEntities": "What was edited by , written by , executive produced by , and produced by M0 's parent",
        "questionTemplate": "What was [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x0 P3 ?x1 .\n?x1 P4 M0\n}",
        "recursionDepth": 36,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1040 ?x1 .\n?x0 wdt:P1431 ?x1 .\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x0 wdt:P58 ?x1 .\n?x1 wdt:P40|wdt:P355 wd:Q1620638\n}LIMIT 1",
        "questionWithBrackets": "What was edited by , written by , executive produced by , and produced by [Hisao Kurosawa] 's parent"
    },
    {
        "questionIdx": 175442,
        "questionPatternModEntities": "What was edited by , written by , executive produced by , produced by , and directed by M0 's sibling",
        "questionTemplate": "What was [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x0 P3 ?x1 .\n?x0 P4 ?x1 .\n?x1 P5 M0 .\nFILTER ( ?x1 != M0 )\n}",
        "recursionDepth": 42,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 ?x1 .\n?x0 wdt:P1040 ?x1 .\n?x0 wdt:P1431 ?x1 .\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x0 wdt:P58 ?x1 .\n?x1 wdt:P3373 wd:Q28370409 .\nFILTER ( ?x1 != wd:Q28370409 )\n}LIMIT 1",
        "questionWithBrackets": "What was edited by , written by , executive produced by , produced by , and directed by [Everton Rocca] 's sibling"
    },
    {
        "questionIdx": 175478,
        "questionPatternModEntities": "What was edited , directed , and executive produced by M0",
        "questionTemplate": "What was [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M0 .\n?x0 P2 M0\n}",
        "recursionDepth": 24,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 wd:Q38222 .\n?x0 wdt:P1040 wd:Q38222 .\n?x0 wdt:P1431 wd:Q38222\n}LIMIT 1",
        "questionWithBrackets": "What was edited , directed , and executive produced by [George Lucas]"
    },
    {
        "questionIdx": 175549,
        "questionPatternModEntities": "What was edited , directed , produced , executive produced , and written by M0 's sibling",
        "questionTemplate": "What was [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x0 P3 ?x1 .\n?x0 P4 ?x1 .\n?x1 P5 M0 .\nFILTER ( ?x1 != M0 )\n}",
        "recursionDepth": 38,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 ?x1 .\n?x0 wdt:P1040 ?x1 .\n?x0 wdt:P1431 ?x1 .\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x0 wdt:P58 ?x1 .\n?x1 wdt:P3373 wd:Q28370409 .\nFILTER ( ?x1 != wd:Q28370409 )\n}LIMIT 1",
        "questionWithBrackets": "What was edited , directed , produced , executive produced , and written by [Everton Rocca] 's sibling"
    },
    {
        "questionIdx": 175580,
        "questionPatternModEntities": "What was edited , executive produced , and directed by M1 's male spouse",
        "questionTemplate": "What was [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x1 P3 M0 .\n?x1 P4 M1 .\nFILTER ( ?x1 != M1 )\n}",
        "recursionDepth": 33,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 ?x1 .\n?x0 wdt:P1040 ?x1 .\n?x0 wdt:P1431 ?x1 .\n?x1 wdt:P21 wd:Q6581097 .\n?x1 wdt:P26 wd:Q3032150 .\nFILTER ( ?x1 != wd:Q3032150 )\n}LIMIT 1",
        "questionWithBrackets": "What was edited , executive produced , and directed by [Y\u014dko Yaguchi] 's male spouse"
    },
    {
        "questionIdx": 175592,
        "questionPatternModEntities": "What was edited , executive produced , and written by M0",
        "questionTemplate": "What was [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M0 .\n?x0 P2 M0\n}",
        "recursionDepth": 24,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1040 wd:Q8006 .\n?x0 wdt:P1431 wd:Q8006 .\n?x0 wdt:P58 wd:Q8006\n}LIMIT 1",
        "questionWithBrackets": "What was edited , executive produced , and written by [Akira Kurosawa]"
    },
    {
        "questionIdx": 175695,
        "questionPatternModEntities": "What was edited , produced , and written by M0",
        "questionTemplate": "What was [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M0 .\n?x0 P2 M0\n}",
        "recursionDepth": 23,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1040 wd:Q25186 .\n?x0 wdt:P162|wdt:P272 wd:Q25186 .\n?x0 wdt:P58 wd:Q25186\n}LIMIT 1",
        "questionWithBrackets": "What was edited , produced , and written by [Gus Van Sant]"
    },
    {
        "questionIdx": 175698,
        "questionPatternModEntities": "What was edited , produced , and written by a sibling of M0",
        "questionTemplate": "What was [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x1 P3 M0 .\nFILTER ( ?x1 != M0 )\n}",
        "recursionDepth": 29,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1040 ?x1 .\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x0 wdt:P58 ?x1 .\n?x1 wdt:P3373 wd:Q372788 .\nFILTER ( ?x1 != wd:Q372788 )\n}LIMIT 1",
        "questionWithBrackets": "What was edited , produced , and written by a sibling of [Jonathan Nolan]"
    },
    {
        "questionIdx": 175716,
        "questionPatternModEntities": "What was edited , produced , directed , executive produced , and written by M0 's sibling",
        "questionTemplate": "What was [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x0 P3 ?x1 .\n?x0 P4 ?x1 .\n?x1 P5 M0 .\nFILTER ( ?x1 != M0 )\n}",
        "recursionDepth": 38,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 ?x1 .\n?x0 wdt:P1040 ?x1 .\n?x0 wdt:P1431 ?x1 .\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x0 wdt:P58 ?x1 .\n?x1 wdt:P3373 wd:Q28370409 .\nFILTER ( ?x1 != wd:Q28370409 )\n}LIMIT 1",
        "questionWithBrackets": "What was edited , produced , directed , executive produced , and written by [Everton Rocca] 's sibling"
    },
    {
        "questionIdx": 175747,
        "questionPatternModEntities": "What was edited , produced , written , directed , and executive produced by M0 's sibling",
        "questionTemplate": "What was [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x0 P3 ?x1 .\n?x0 P4 ?x1 .\n?x1 P5 M0 .\nFILTER ( ?x1 != M0 )\n}",
        "recursionDepth": 38,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 ?x1 .\n?x0 wdt:P1040 ?x1 .\n?x0 wdt:P1431 ?x1 .\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x0 wdt:P58 ?x1 .\n?x1 wdt:P3373 wd:Q28370409 .\nFILTER ( ?x1 != wd:Q28370409 )\n}LIMIT 1",
        "questionWithBrackets": "What was edited , produced , written , directed , and executive produced by [Everton Rocca] 's sibling"
    },
    {
        "questionIdx": 175748,
        "questionPatternModEntities": "What was edited , produced , written , directed , and executive produced by M0 's parent",
        "questionTemplate": "What was [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x0 P3 ?x1 .\n?x0 P4 ?x1 .\n?x1 P5 M0\n}",
        "recursionDepth": 38,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 ?x1 .\n?x0 wdt:P1040 ?x1 .\n?x0 wdt:P1431 ?x1 .\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x0 wdt:P58 ?x1 .\n?x1 wdt:P40|wdt:P355 wd:Q1620638\n}LIMIT 1",
        "questionWithBrackets": "What was edited , produced , written , directed , and executive produced by [Hisao Kurosawa] 's parent"
    },
    {
        "questionIdx": 175762,
        "questionPatternModEntities": "What was edited , written , and directed by a spouse of M0",
        "questionTemplate": "What was [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x1 P3 M0 .\nFILTER ( ?x1 != M0 )\n}",
        "recursionDepth": 29,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 ?x1 .\n?x0 wdt:P1040 ?x1 .\n?x0 wdt:P58 ?x1 .\n?x1 wdt:P26 wd:Q95050 .\nFILTER ( ?x1 != wd:Q95050 )\n}LIMIT 1",
        "questionWithBrackets": "What was edited , written , and directed by a spouse of [Paulette Goddard]"
    },
    {
        "questionIdx": 175764,
        "questionPatternModEntities": "What was edited , written , and executive produced by M0",
        "questionTemplate": "What was [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M0 .\n?x0 P2 M0\n}",
        "recursionDepth": 24,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1040 wd:Q55400 .\n?x0 wdt:P1431 wd:Q55400 .\n?x0 wdt:P58 wd:Q55400\n}LIMIT 1",
        "questionWithBrackets": "What was edited , written , and executive produced by [Hayao Miyazaki]"
    },
    {
        "questionIdx": 175832,
        "questionPatternModEntities": "What was edited , written , produced , and directed by M0 's Mexican sibling",
        "questionTemplate": "What was [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x0 P3 ?x1 .\n?x1 P4 M0 .\n?x1 P5 M1 .\nFILTER ( ?x1 != M0 )\n}",
        "recursionDepth": 37,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 ?x1 .\n?x0 wdt:P1040 ?x1 .\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x0 wdt:P58 ?x1 .\n?x1 wdt:P27 wd:Q96 .\n?x1 wdt:P3373 wd:Q2840325 .\nFILTER ( ?x1 != wd:Q2840325 )\n}LIMIT 1",
        "questionWithBrackets": "What was edited , written , produced , and directed by [Carlos Cuar\u00f3n] 's Mexican sibling"
    },
    {
        "questionIdx": 175873,
        "questionPatternModEntities": "What was executive produced and directed by a Mexican sibling of M0",
        "questionTemplate": "What was [VP_SIMPLE] and [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x1 P2 M0 .\n?x1 P3 M1 .\nFILTER ( ?x1 != M0 )\n}",
        "recursionDepth": 30,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 ?x1 .\n?x0 wdt:P1431 ?x1 .\n?x1 wdt:P27 wd:Q96 .\n?x1 wdt:P3373 wd:Q2840325 .\nFILTER ( ?x1 != wd:Q2840325 )\n}LIMIT 1",
        "questionWithBrackets": "What was executive produced and directed by a Mexican sibling of [Carlos Cuar\u00f3n]"
    },
    {
        "questionIdx": 175882,
        "questionPatternModEntities": "What was executive produced and directed by a female spouse of M1",
        "questionTemplate": "What was [VP_SIMPLE] and [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x1 P2 M0 .\n?x1 P3 M1 .\nFILTER ( ?x1 != M1 )\n}",
        "recursionDepth": 30,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 ?x1 .\n?x0 wdt:P1431 ?x1 .\n?x1 wdt:P21 wd:Q6581072 .\n?x1 wdt:P26 wd:Q192990 .\nFILTER ( ?x1 != wd:Q192990 )\n}LIMIT 1",
        "questionWithBrackets": "What was executive produced and directed by a female spouse of [Guy Ritchie]"
    },
    {
        "questionIdx": 175885,
        "questionPatternModEntities": "What was executive produced and directed by a spouse of M0 's employee",
        "questionTemplate": "What was [VP_SIMPLE] and [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x1 P2 ?x2 .\n?x2 P3 M0 .\nFILTER ( ?x1 != ?x2 )\n}",
        "recursionDepth": 29,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 ?x1 .\n?x0 wdt:P1431 ?x1 .\n?x1 wdt:P26 ?x2 .\n?x2 wdt:P108 wd:Q730179 .\nFILTER ( ?x1 != ?x2 )\n}LIMIT 1",
        "questionWithBrackets": "What was executive produced and directed by a spouse of [Toei Animation] 's employee"
    },
    {
        "questionIdx": 175926,
        "questionPatternModEntities": "What was executive produced and produced by M0 's child",
        "questionTemplate": "What was [VP_SIMPLE] and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x1 P2 M0\n}",
        "recursionDepth": 23,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1431 ?x1 .\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x1 wdt:P749 wd:Q20937928\n}LIMIT 1",
        "questionWithBrackets": "What was executive produced and produced by [Moravia Steel] 's child"
    },
    {
        "questionIdx": 175948,
        "questionPatternModEntities": "What was executive produced and produced by a child of M0",
        "questionTemplate": "What was [VP_SIMPLE] and [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x1 P2 M0\n}",
        "recursionDepth": 25,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1431 ?x1 .\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x1 wdt:P749 wd:Q20937928\n}LIMIT 1",
        "questionWithBrackets": "What was executive produced and produced by a child of [Moravia Steel]"
    },
    {
        "questionIdx": 175975,
        "questionPatternModEntities": "What was executive produced and written by M0 's spouse",
        "questionTemplate": "What was [VP_SIMPLE] and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x1 P2 M0 .\nFILTER ( ?x1 != M0 )\n}",
        "recursionDepth": 23,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1431 ?x1 .\n?x0 wdt:P58 ?x1 .\n?x1 wdt:P26 wd:Q6968092 .\nFILTER ( ?x1 != wd:Q6968092 )\n}LIMIT 1",
        "questionWithBrackets": "What was executive produced and written by [Natalia Tudge] 's spouse"
    },
    {
        "questionIdx": 175985,
        "questionPatternModEntities": "What was executive produced and written by M0 's Chinese employee",
        "questionTemplate": "What was [VP_SIMPLE] and [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x1 P2 M0 .\n?x1 P3 M1\n}",
        "recursionDepth": 28,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1431 ?x1 .\n?x0 wdt:P58 ?x1 .\n?x1 wdt:P108 wd:Q740308 .\n?x1 wdt:P27 wd:Q148\n}LIMIT 1",
        "questionWithBrackets": "What was executive produced and written by [UNICEF] 's Chinese employee"
    },
    {
        "questionIdx": 176053,
        "questionPatternModEntities": "What was executive produced by M1 's parent and executive produced by M0",
        "questionTemplate": "What was [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P0 M0 .\n?x1 P1 M1\n}",
        "recursionDepth": 28,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1431 ?x1 .\n?x0 wdt:P1431 wd:Q8006 .\n?x1 wdt:P40|wdt:P355 wd:Q1620638\n}",
        "questionWithBrackets": "What was executive produced by [Hisao Kurosawa] 's parent and executive produced by [Akira Kurosawa]"
    },
    {
        "questionIdx": 176186,
        "questionPatternModEntities": "What was executive produced by M0 , produced by M4 's sibling , and executive produced by M1 , M2 , and M3",
        "questionTemplate": "What was [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] , and [VP_SIMPLE] by [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P0 M3 .\n?x0 P1 ?x1 .\n?x1 P2 M4 .\nFILTER ( ?x1 != M4 )\n}",
        "recursionDepth": 44,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1431 wd:Q56094 .\n?x0 wdt:P1431 wd:Q2675693 .\n?x0 wdt:P1431 wd:Q5223835 .\n?x0 wdt:P1431 wd:Q5371855 .\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x1 wdt:P3373 wd:Q245808 .\nFILTER ( ?x1 != wd:Q245808 )\n}",
        "questionWithBrackets": "What was executive produced by [Francis Ford Coppola] , produced by [Roman Coppola] 's sibling , and executive produced by [Fred Roos] , [Emilio Diez Barroso] , and [Darlene Caama\u00f1o]"
    },
    {
        "questionIdx": 176194,
        "questionPatternModEntities": "What was executive produced by M0 and edited by a Canadian sibling of M1",
        "questionTemplate": "What was [VP_SIMPLE] by [entity] and [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 ?x1 .\n?x1 P2 M1 .\n?x1 P3 M2 .\nFILTER ( ?x1 != M1 )\n}",
        "recursionDepth": 34,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1040 ?x1 .\n?x0 wdt:P1431 wd:Q1708464 .\n?x1 wdt:P27 wd:Q16 .\n?x1 wdt:P3373 wd:Q6228653 .\nFILTER ( ?x1 != wd:Q6228653 )\n}",
        "questionWithBrackets": "What was executive produced by [Colin Wilson] and edited by a Canadian sibling of [John David Cameron]"
    },
    {
        "questionIdx": 176200,
        "questionPatternModEntities": "What was executive produced by M0 and M1 , written by M2 , produced by M3 , and directed by M4",
        "questionTemplate": "What was [VP_SIMPLE] by [entity] and [entity] , [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P1 M2 .\n?x0 P2 M3 .\n?x0 P3 M4\n}",
        "recursionDepth": 45,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 wd:Q193628 .\n?x0 wdt:P1431 wd:Q56094 .\n?x0 wdt:P1431 wd:Q5371855 .\n?x0 wdt:P162|wdt:P272 wd:Q245808 .\n?x0 wdt:P58 wd:Q6962760\n}",
        "questionWithBrackets": "What was executive produced by [Emilio Diez Barroso] and [Francis Ford Coppola] , written by [Nancy Jo Sales] , produced by [Roman Coppola] , and directed by [Sofia Coppola]"
    },
    {
        "questionIdx": 176215,
        "questionPatternModEntities": "What was executive produced by M1 's American employee and executive produced by M0",
        "questionTemplate": "What was [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P0 M0 .\n?x1 P1 M1 .\n?x1 P2 M2\n}",
        "recursionDepth": 33,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1431 ?x1 .\n?x0 wdt:P1431 wd:Q59215 .\n?x1 wdt:P108 wd:Q126399 .\n?x1 wdt:P27 wd:Q30\n}",
        "questionWithBrackets": "What was executive produced by [Warner Bros.] 's American employee and executive produced by [Robert Redford]"
    },
    {
        "questionIdx": 176268,
        "questionPatternModEntities": "What was executive produced by M0 , executive produced by M1 , written by M2 and M3 , and directed by M4",
        "questionTemplate": "What was [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] and [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P1 M2 .\n?x0 P1 M3 .\n?x0 P2 M4\n}",
        "recursionDepth": 46,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 wd:Q547811 .\n?x0 wdt:P1431 wd:Q36970 .\n?x0 wdt:P1431 wd:Q2193613 .\n?x0 wdt:P58 wd:Q15432072 .\n?x0 wdt:P58 wd:Q25266711\n}",
        "questionWithBrackets": "What was executive produced by [Jackie Chan] , executive produced by [Willie Chan] , written by [David Benullo] and [Michael D. Weiss] , and directed by [Frank Coraci]"
    },
    {
        "questionIdx": 176294,
        "questionPatternModEntities": "What was executive produced by M0 and directed by M1 's parent",
        "questionTemplate": "What was [VP_SIMPLE] by [entity] and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 ?x1 .\n?x1 P2 M1\n}",
        "recursionDepth": 27,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 ?x1 .\n?x0 wdt:P1431 wd:Q72579 .\n?x1 wdt:P40|wdt:P355 wd:Q55393\n}",
        "questionWithBrackets": "What was executive produced by [Samuel Goldwyn] and directed by [Jacques Tourneur] 's parent"
    },
    {
        "questionIdx": 176307,
        "questionPatternModEntities": "What was executive produced by M0 and M1 and executive produced by a female sibling of M2",
        "questionTemplate": "What was [VP_SIMPLE] by [entity] and [entity] and [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x1 P1 M2 .\n?x1 P2 M3 .\nFILTER ( ?x1 != M2 )\n}",
        "recursionDepth": 39,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1431 ?x1 .\n?x0 wdt:P1431 wd:Q24809152 .\n?x0 wdt:P1431 wd:Q13909 .\n?x1 wdt:P21 wd:Q6581072 .\n?x1 wdt:P3373 wd:Q560170 .\nFILTER ( ?x1 != wd:Q560170 )\n}",
        "questionWithBrackets": "What was executive produced by [Angelina Jolie] and [Palak Patel] and executive produced by a female sibling of [James Haven]"
    },
    {
        "questionIdx": 176312,
        "questionPatternModEntities": "What was executive produced by M0 , directed by M2 and M3 , directed by M4 , and written by M1",
        "questionTemplate": "What was [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] and [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P2 M2 .\n?x0 P2 M3 .\n?x0 P2 M4\n}",
        "recursionDepth": 45,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 wd:Q4974114 .\n?x0 wdt:P57 wd:Q127800 .\n?x0 wdt:P57 wd:Q371455 .\n?x0 wdt:P1431 wd:Q4500 .\n?x0 wdt:P58 wd:Q5542223\n}",
        "questionWithBrackets": "What was executive produced by [Vince Gilligan] , directed by [Michelle MacLaren] and [Bronwen Hughes] , directed by [David Slade] , and written by [George Mastras]"
    },
    {
        "questionIdx": 176356,
        "questionPatternModEntities": "What was executive produced by M0 and executive produced by a female spouse of M2 's employee",
        "questionTemplate": "What was [VP_SIMPLE] by [entity] and [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P0 M0 .\n?x1 P1 M1 .\n?x1 P2 ?x2 .\n?x2 P3 M2 .\nFILTER ( ?x1 != ?x2 )\n}",
        "recursionDepth": 39,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1431 ?x1 .\n?x0 wdt:P1431 wd:Q40475 .\n?x1 wdt:P21 wd:Q6581072 .\n?x1 wdt:P26 ?x2 .\n?x2 wdt:P108 wd:Q126399 .\nFILTER ( ?x1 != ?x2 )\n}",
        "questionWithBrackets": "What was executive produced by [Joan Crawford] and executive produced by a female spouse of [Warner Bros.] 's employee"
    },
    {
        "questionIdx": 176384,
        "questionPatternModEntities": "What was executive produced by M3 's American spouse and executive produced by M0 and M1",
        "questionTemplate": "What was [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x1 P1 M2 .\n?x1 P2 M3 .\nFILTER ( ?x1 != M3 )\n}",
        "recursionDepth": 37,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1431 ?x1 .\n?x0 wdt:P1431 wd:Q35332 .\n?x0 wdt:P1431 wd:Q192165 .\n?x1 wdt:P27 wd:Q30 .\n?x1 wdt:P26 wd:Q13909 .\nFILTER ( ?x1 != wd:Q13909 )\n}",
        "questionWithBrackets": "What was executive produced by [Angelina Jolie] 's American spouse and executive produced by [Danny Glover] and [Brad Pitt]"
    },
    {
        "questionIdx": 176421,
        "questionPatternModEntities": "What was executive produced by M0 and M1 , executive produced by M2 , edited by M4 , and produced by M3",
        "questionTemplate": "What was [VP_SIMPLE] by [entity] and [entity] , [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P1 M3 .\n?x0 P2 M4\n}",
        "recursionDepth": 46,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1040 wd:Q1969707 .\n?x0 wdt:P1431 wd:Q75079 .\n?x0 wdt:P1431 wd:Q1900360 .\n?x0 wdt:P1431 wd:Q3041233 .\n?x0 wdt:P162|wdt:P272 wd:Q319986\n}",
        "questionWithBrackets": "What was executive produced by [Chris Columbus] and [Mark Radcliffe] , executive produced by [Duncan Henderson] , edited by [Richard Francis-Bruce] , and produced by [David Heyman]"
    },
    {
        "questionIdx": 176469,
        "questionPatternModEntities": "What was executive produced by M0 and produced by M1",
        "questionTemplate": "What was [VP_SIMPLE] by [entity] and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1\n}",
        "recursionDepth": 23,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1431 wd:Q2263 .\n?x0 wdt:P162|wdt:P272 wd:Q945551\n}",
        "questionWithBrackets": "What was executive produced by [Tom Hanks] and produced by [Roger Birnbaum]"
    },
    {
        "questionIdx": 176485,
        "questionPatternModEntities": "What was executive produced by M0 and M1 , executive produced by M2 , and written by a British sibling of M3",
        "questionTemplate": "What was [VP_SIMPLE] by [entity] and [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P1 ?x1 .\n?x1 P2 M3 .\n?x1 P3 M4 .\nFILTER ( ?x1 != M3 )\n}",
        "recursionDepth": 48,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1431 wd:Q56005 .\n?x0 wdt:P1431 wd:Q193648 .\n?x0 wdt:P1431 wd:Q1658295 .\n?x0 wdt:P58 ?x1 .\n?x1 wdt:P27 wd:Q145 .\n?x1 wdt:P3373 wd:Q198567 .\nFILTER ( ?x1 != wd:Q198567 )\n}",
        "questionWithBrackets": "What was executive produced by [Ridley Scott] and [Tony Scott] , executive produced by [Alain Goldman] , and written by a British sibling of [Jake Scott]"
    },
    {
        "questionIdx": 176544,
        "questionPatternModEntities": "What was executive produced by M0 and M1 , executive produced by M2 and M3 , and executive produced by M4 and M5",
        "questionTemplate": "What was [VP_SIMPLE] by [entity] and [entity] , [VP_SIMPLE] by [entity] and [entity] , and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P0 M3 .\n?x0 P0 M4 .\n?x0 P0 M5\n}",
        "recursionDepth": 46,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1431 wd:Q8877 .\n?x0 wdt:P1431 wd:Q237207 .\n?x0 wdt:P1431 wd:Q1385337 .\n?x0 wdt:P1431 wd:Q3018205 .\n?x0 wdt:P1431 wd:Q190373 .\n?x0 wdt:P1431 wd:Q263324\n}",
        "questionWithBrackets": "What was executive produced by [Kathleen Kennedy] and [Steven Spielberg] , executive produced by [David Kirschner] and [William Hanna] , and executive produced by [Gerald R. Molen] and [Joseph Barbera]"
    },
    {
        "questionIdx": 176596,
        "questionPatternModEntities": "What was executive produced by M0 , edited by M3 , produced by M2 , and executive produced by M1",
        "questionTemplate": "What was [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P1 M2 .\n?x0 P2 M3\n}",
        "recursionDepth": 42,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1040 wd:Q977704 .\n?x0 wdt:P1431 wd:Q75079 .\n?x0 wdt:P1431 wd:Q975579 .\n?x0 wdt:P162|wdt:P272 wd:Q319986\n}",
        "questionWithBrackets": "What was executive produced by [Chris Columbus] , edited by [Peter Honess] , produced by [David Heyman] , and executive produced by [David Barron]"
    },
    {
        "questionIdx": 176617,
        "questionPatternModEntities": "What was executive produced by M0 and written by M1 's parent",
        "questionTemplate": "What was [VP_SIMPLE] by [entity] and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 ?x1 .\n?x1 P2 M1\n}",
        "recursionDepth": 27,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1431 wd:Q8877 .\n?x0 wdt:P58 ?x1 .\n?x1 wdt:P40|wdt:P355 wd:Q956349\n}",
        "questionWithBrackets": "What was executive produced by [Steven Spielberg] and written by [Eleanor Columbus] 's parent"
    },
    {
        "questionIdx": 176715,
        "questionPatternModEntities": "What was executive produced by M0 's Spanish sibling",
        "questionTemplate": "What was [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x1 P1 M0 .\n?x1 P2 M1 .\nFILTER ( ?x1 != M0 )\n}",
        "recursionDepth": 21,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1431 ?x1 .\n?x1 wdt:P27 wd:Q29 .\n?x1 wdt:P3373 wd:Q399076 .\nFILTER ( ?x1 != wd:Q399076 )\n}LIMIT 1",
        "questionWithBrackets": "What was executive produced by [Agust\u00edn Almod\u00f3var] 's Spanish sibling"
    },
    {
        "questionIdx": 176741,
        "questionPatternModEntities": "What was executive produced by M0 , written by M2 , and executive produced by M1",
        "questionTemplate": "What was [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P1 M2\n}",
        "recursionDepth": 33,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1431 wd:Q72614 .\n?x0 wdt:P1431 wd:Q472520 .\n?x0 wdt:P58 wd:Q286104\n}",
        "questionWithBrackets": "What was executive produced by [Hal B. Wallis] , written by [Jean Negulesco] , and executive produced by [Jack Warner]"
    },
    {
        "questionIdx": 176767,
        "questionPatternModEntities": "What was executive produced by M0 's parent",
        "questionTemplate": "What was [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x1 P1 M0\n}",
        "recursionDepth": 16,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1431 ?x1 .\n?x1 wdt:P40|wdt:P355 wd:Q201739\n}LIMIT 1",
        "questionWithBrackets": "What was executive produced by [Mary McCartney] 's parent"
    },
    {
        "questionIdx": 176769,
        "questionPatternModEntities": "What was executive produced by M0 , directed by M1 , M2 , and M3 , and executive produced by M4 's parent 's employee",
        "questionTemplate": "What was [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , [entity] , and [entity] , and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\n?x0 P1 M3 .\n?x1 P2 ?x2 .\n?x2 P3 M4\n}",
        "recursionDepth": 48,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 wd:Q702536 .\n?x0 wdt:P57 wd:Q5490946 .\n?x0 wdt:P57 wd:Q311219 .\n?x0 wdt:P1431 ?x1 .\n?x0 wdt:P1431 wd:Q36970 .\n?x1 wdt:P108 ?x2 .\n?x2 wdt:P40|wdt:P355 wd:Q50363511\n}",
        "questionWithBrackets": "What was executive produced by [Jackie Chan] , directed by [Frankie Chan] , [Sammo Hung] , and [Dante Lam] , and executive produced by [UNICEF Canada] 's parent 's employee"
    },
    {
        "questionIdx": 176797,
        "questionPatternModEntities": "What was executive produced by M0 , written by M6 , and executive produced by M1 , M2 , M3 , M4 , and M5",
        "questionTemplate": "What was [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity] , [entity] , [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P0 M3 .\n?x0 P0 M4 .\n?x0 P0 M5 .\n?x0 P1 M6\n}",
        "recursionDepth": 46,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1431 wd:Q39829 .\n?x0 wdt:P1431 wd:Q7804237 .\n?x0 wdt:P1431 wd:Q362793 .\n?x0 wdt:P1431 wd:Q7595870 .\n?x0 wdt:P1431 wd:Q8877 .\n?x0 wdt:P1431 wd:Q849628 .\n?x0 wdt:P58 wd:Q6984051\n}",
        "questionWithBrackets": "What was executive produced by [Stacey Snider] , written by [Neal Baer] , and executive produced by [Tim Schlattmann] , [Jack Bender] , [Steven Spielberg] , [Stephen King] , and [Brian K. Vaughan]"
    },
    {
        "questionIdx": 176804,
        "questionPatternModEntities": "What was executive produced by M0 and executive produced by M2 's Mexican spouse",
        "questionTemplate": "What was [VP_SIMPLE] by [entity] and [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P0 M0 .\n?x1 P1 M1 .\n?x1 P2 M2 .\nFILTER ( ?x1 != M2 )\n}",
        "recursionDepth": 33,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1431 ?x1 .\n?x0 wdt:P1431 wd:Q15079 .\n?x1 wdt:P27 wd:Q96 .\n?x1 wdt:P26 wd:Q63894324 .\nFILTER ( ?x1 != wd:Q63894324 )\n}",
        "questionWithBrackets": "What was executive produced by [Louis C.K.] and executive produced by [Alix Bailey] 's Mexican spouse"
    },
    {
        "questionIdx": 176848,
        "questionPatternModEntities": "What was executive produced by M0 and M1 , directed by M2 , directed by M3 , and directed by M4",
        "questionTemplate": "What was [VP_SIMPLE] by [entity] and [entity] , [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P1 M2 .\n?x0 P1 M3 .\n?x0 P1 M4\n}",
        "recursionDepth": 45,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 wd:Q360477 .\n?x0 wdt:P57 wd:Q362793 .\n?x0 wdt:P57 wd:Q253977 .\n?x0 wdt:P1431 wd:Q8877 .\n?x0 wdt:P1431 wd:Q39829\n}",
        "questionWithBrackets": "What was executive produced by [Stephen King] and [Steven Spielberg] , directed by [Roxann Dawson] , directed by [Peter Weller] , and directed by [Jack Bender]"
    },
    {
        "questionIdx": 176868,
        "questionPatternModEntities": "What was executive produced by M0 , M1 , M2 , and M3 , edited by M4 and M5 , and edited by M6",
        "questionTemplate": "What was [VP_SIMPLE] by [entity] , [entity] , [entity] , and [entity] , [VP_SIMPLE] by [entity] and [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P0 M3 .\n?x0 P1 M4 .\n?x0 P1 M5 .\n?x0 P1 M6\n}",
        "recursionDepth": 46,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1040 wd:Q974615 .\n?x0 wdt:P1040 wd:Q692550 .\n?x0 wdt:P1040 wd:Q975418 .\n?x0 wdt:P1431 wd:Q263175 .\n?x0 wdt:P1431 wd:Q543697 .\n?x0 wdt:P1431 wd:Q24809566 .\n?x0 wdt:P1431 wd:Q24809569\n}",
        "questionWithBrackets": "What was executive produced by [Jordan Mechner] , [Eric McLeod] , [John August] , and [Chad Oman] , edited by [Martin Walsh] and [Michael Kahn] , and edited by [Mick Audsley]"
    },
    {
        "questionIdx": 176875,
        "questionPatternModEntities": "What was executive produced by M0 , directed by M1 and M2 , edited by M4 's parent , and directed by M3",
        "questionTemplate": "What was [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] and [entity] , [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 ?x1 .\n?x0 P2 M1 .\n?x0 P2 M2 .\n?x0 P2 M3 .\n?x1 P3 M4\n}",
        "recursionDepth": 49,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 wd:Q549956 .\n?x0 wdt:P57 wd:Q47284 .\n?x0 wdt:P57 wd:Q2838329 .\n?x0 wdt:P1040 ?x1 .\n?x0 wdt:P1431 wd:Q3772 .\n?x1 wdt:P40|wdt:P355 wd:Q28032516\n}",
        "questionWithBrackets": "What was executive produced by [Quentin Tarantino] , directed by [Robert Rodriguez] and [Alexandre Rockwell] , edited by [Racer Rodriguez] 's parent , and directed by [Allison Anders]"
    },
    {
        "questionIdx": 176939,
        "questionPatternModEntities": "What was executive produced by M0 's female sibling",
        "questionTemplate": "What was [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x1 P1 M0 .\n?x1 P2 M1 .\nFILTER ( ?x1 != M0 )\n}",
        "recursionDepth": 21,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1431 ?x1 .\n?x1 wdt:P21 wd:Q6581072 .\n?x1 wdt:P3373 wd:Q5112102 .\nFILTER ( ?x1 != wd:Q5112102 )\n}LIMIT 1",
        "questionWithBrackets": "What was executive produced by [Christopher Ciccone] 's female sibling"
    },
    {
        "questionIdx": 176966,
        "questionPatternModEntities": "What was executive produced by M0 , M1 , and M2 , written by M3 , M4 , and M5 , and produced by M6",
        "questionTemplate": "What was [VP_SIMPLE] by [entity] , [entity] , and [entity] , [VP_SIMPLE] by [entity] , [entity] , and [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P1 M3 .\n?x0 P1 M4 .\n?x0 P1 M5 .\n?x0 P2 M6\n}",
        "recursionDepth": 46,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1431 wd:Q8877 .\n?x0 wdt:P1431 wd:Q237207 .\n?x0 wdt:P1431 wd:Q549570 .\n?x0 wdt:P162|wdt:P272 wd:Q457893 .\n?x0 wdt:P58 wd:Q28855446 .\n?x0 wdt:P58 wd:Q1151111 .\n?x0 wdt:P58 wd:Q3306897\n}",
        "questionWithBrackets": "What was executive produced by [Frank Marshall] , [Steven Spielberg] , and [Kathleen Kennedy] , written by [Rob Minkoff] , [Patrick A. Ventura] , and [Bill Kopp] , and produced by [Amblin Entertainment]"
    },
    {
        "questionIdx": 177031,
        "questionPatternModEntities": "What was executive produced by M0 and written by a spouse of M1 's employee",
        "questionTemplate": "What was [VP_SIMPLE] by [entity] and [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 ?x1 .\n?x1 P2 ?x2 .\n?x2 P3 M1 .\nFILTER ( ?x1 != ?x2 )\n}",
        "recursionDepth": 33,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1431 wd:Q3772 .\n?x0 wdt:P58 ?x1 .\n?x1 wdt:P26 ?x2 .\n?x2 wdt:P108 wd:Q126399 .\nFILTER ( ?x1 != ?x2 )\n}",
        "questionWithBrackets": "What was executive produced by [Quentin Tarantino] and written by a spouse of [Warner Bros.] 's employee"
    },
    {
        "questionIdx": 177056,
        "questionPatternModEntities": "What was executive produced by M0 , edited by M5 's parent , and edited by M1 , M2 , M3 , and M4",
        "questionTemplate": "What was [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] , and [VP_SIMPLE] by [entity] , [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 ?x1 .\n?x0 P1 M1 .\n?x0 P1 M2 .\n?x0 P1 M3 .\n?x0 P1 M4 .\n?x1 P2 M5\n}",
        "recursionDepth": 46,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1040 ?x1 .\n?x0 wdt:P1040 wd:Q541143 .\n?x0 wdt:P1040 wd:Q5359064 .\n?x0 wdt:P1040 wd:Q273379 .\n?x0 wdt:P1040 wd:Q47284 .\n?x0 wdt:P1431 wd:Q3772 .\n?x1 wdt:P40|wdt:P355 wd:Q28032516\n}",
        "questionWithBrackets": "What was executive produced by [Quentin Tarantino] , edited by [Racer Rodriguez] 's parent , and edited by [Terry Rawlings] , [Elena Maganini] , [Sally Menke] , and [Robert Rodriguez]"
    },
    {
        "questionIdx": 177081,
        "questionPatternModEntities": "What was executive produced by M0 , directed by M2 , and produced by M1",
        "questionTemplate": "What was [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P2 M2\n}",
        "recursionDepth": 32,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 wd:Q358714 .\n?x0 wdt:P1431 wd:Q3772 .\n?x0 wdt:P162|wdt:P272 wd:Q965826\n}",
        "questionWithBrackets": "What was executive produced by [Quentin Tarantino] , directed by [Eli Roth] , and produced by [Scott Spiegel]"
    },
    {
        "questionIdx": 177111,
        "questionPatternModEntities": "What was executive produced by M0 and M1 , written by M2 , written by M3 , and written by M4",
        "questionTemplate": "What was [VP_SIMPLE] by [entity] and [entity] , [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P1 M2 .\n?x0 P1 M3 .\n?x0 P1 M4\n}",
        "recursionDepth": 45,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1431 wd:Q8877 .\n?x0 wdt:P1431 wd:Q237207 .\n?x0 wdt:P58 wd:Q1151111 .\n?x0 wdt:P58 wd:Q28846433 .\n?x0 wdt:P58 wd:Q28855446\n}",
        "questionWithBrackets": "What was executive produced by [Steven Spielberg] and [Kathleen Kennedy] , written by [Rob Minkoff] , written by [Mark Kausler] , and written by [Patrick A. Ventura]"
    },
    {
        "questionIdx": 177205,
        "questionPatternModEntities": "What was executive produced by M0 , executive produced by M1 , M2 , M3 , and M4 , and directed by M5 's employee",
        "questionTemplate": "What was [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , [entity] , [entity] , and [entity] , and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P0 M3 .\n?x0 P0 M4 .\n?x0 P1 ?x1 .\n?x1 P2 M5\n}",
        "recursionDepth": 47,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 ?x1 .\n?x0 wdt:P1431 wd:Q41148 .\n?x0 wdt:P1431 wd:Q713066 .\n?x0 wdt:P1431 wd:Q164119 .\n?x0 wdt:P1431 wd:Q591945 .\n?x0 wdt:P1431 wd:Q5920129 .\n?x1 wdt:P108 wd:Q49210\n}",
        "questionWithBrackets": "What was executive produced by [Mark Wahlberg] , executive produced by [Terence Winter] , [Martin Scorsese] , [Tim Van Patten] , and [Howard Korder] , and directed by [New York University] 's employee"
    },
    {
        "questionIdx": 177231,
        "questionPatternModEntities": "What was executive produced by M2 's Mexican spouse 's parent and executive produced by M0",
        "questionTemplate": "What was [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] 's [ROLE_SIMPLE] and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P0 M0 .\n?x1 P1 ?x2 .\n?x2 P2 M1 .\n?x2 P3 M2 .\nFILTER ( ?x2 != M2 )\n}",
        "recursionDepth": 37,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1431 ?x1 .\n?x0 wdt:P1431 wd:Q2153025 .\n?x1 wdt:P40|wdt:P355 ?x2 .\n?x2 wdt:P27 wd:Q96 .\n?x2 wdt:P26 wd:Q3373731 .\nFILTER ( ?x2 != wd:Q3373731 )\n}",
        "questionWithBrackets": "What was executive produced by [Paz Alicia Garciadiego] 's Mexican spouse 's parent and executive produced by [Alfredo Ripstein]"
    },
    {
        "questionIdx": 177243,
        "questionPatternModEntities": "What was executive produced by M0 , M1 , and M2 , produced by a employee of M4 and M5 , and written by M3",
        "questionTemplate": "What was [VP_SIMPLE] by [entity] , [entity] , and [entity] , [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity] and [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P1 M3 .\n?x0 P2 ?x1 .\n?x1 P3 M4 .\n?x1 P3 M5\n}",
        "recursionDepth": 49,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1431 wd:Q56005 .\n?x0 wdt:P1431 wd:Q193648 .\n?x0 wdt:P1431 wd:Q1658295 .\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x0 wdt:P58 wd:Q452925 .\n?x1 wdt:P108 wd:Q191684 .\n?x1 wdt:P108 wd:Q3348331\n}",
        "questionWithBrackets": "What was executive produced by [Tony Scott] , [Ridley Scott] , and [Alain Goldman] , produced by a employee of [George Observatory] and [Palomar Observatory] , and written by [Jordan Scott]"
    },
    {
        "questionIdx": 177271,
        "questionPatternModEntities": "What was executive produced by M0 and executive produced by M3 's male spouse 's American sibling",
        "questionTemplate": "What was [VP_SIMPLE] by [entity] and [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P0 M0 .\n?x1 P1 ?x2 .\n?x1 P2 M1 .\n?x2 P3 M2 .\n?x2 P4 M3 .\nFILTER ( ?x1 != ?x2 ) .\nFILTER ( ?x2 != M3 )\n}",
        "recursionDepth": 42,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1431 ?x1 .\n?x0 wdt:P1431 wd:Q40475 .\n?x1 wdt:P27 wd:Q30 .\n?x1 wdt:P3373 ?x2 .\n?x2 wdt:P21 wd:Q6581097 .\n?x2 wdt:P26 wd:Q75758637 .\nFILTER ( ?x1 != ?x2 ) .\nFILTER ( ?x2 != wd:Q75758637 )\n}",
        "questionWithBrackets": "What was executive produced by [Joan Crawford] and executive produced by [Jessie Beryl Burress] 's male spouse 's American sibling"
    },
    {
        "questionIdx": 177273,
        "questionPatternModEntities": "What was executive produced by M0 , executive produced by M1 , edited by M3 , and produced by M2",
        "questionTemplate": "What was [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P1 M2 .\n?x0 P2 M3\n}",
        "recursionDepth": 42,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1040 wd:Q1969707 .\n?x0 wdt:P1431 wd:Q75079 .\n?x0 wdt:P1431 wd:Q1900360 .\n?x0 wdt:P162|wdt:P272 wd:Q319986\n}",
        "questionWithBrackets": "What was executive produced by [Chris Columbus] , executive produced by [Mark Radcliffe] , edited by [Richard Francis-Bruce] , and produced by [David Heyman]"
    },
    {
        "questionIdx": 177456,
        "questionPatternModEntities": "What was executive produced by M0 , directed by M3 , executive produced by M1 and M2 , and directed by M4",
        "questionTemplate": "What was [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] and [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P1 M3 .\n?x0 P1 M4\n}",
        "recursionDepth": 46,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 wd:Q90341521 .\n?x0 wdt:P57 wd:Q89738028 .\n?x0 wdt:P1431 wd:Q13133 .\n?x0 wdt:P1431 wd:Q63940538 .\n?x0 wdt:P1431 wd:Q22115301\n}",
        "questionWithBrackets": "What was executive produced by [Howard Gertler] , directed by [James LeBrecht] , executive produced by [Tonia Davis] and [Michelle Obama] , and directed by [Nicole Newnham]"
    },
    {
        "questionIdx": 177477,
        "questionPatternModEntities": "What was executive produced by M0 , M1 , M2 , M3 , and M4 , written by M6 , and executive produced by M5",
        "questionTemplate": "What was [VP_SIMPLE] by [entity] , [entity] , [entity] , [entity] , and [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P0 M3 .\n?x0 P0 M4 .\n?x0 P0 M5 .\n?x0 P1 M6\n}",
        "recursionDepth": 46,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1431 wd:Q39829 .\n?x0 wdt:P1431 wd:Q55601945 .\n?x0 wdt:P1431 wd:Q7804237 .\n?x0 wdt:P1431 wd:Q8877 .\n?x0 wdt:P1431 wd:Q55602356 .\n?x0 wdt:P1431 wd:Q849628 .\n?x0 wdt:P58 wd:Q6984051\n}",
        "questionWithBrackets": "What was executive produced by [Brian K. Vaughan] , [Steven Spielberg] , [Tim Schlattmann] , [Darryl Frank] , and [Stephen King] , written by [Neal Baer] , and executive produced by [Justin Falvey]"
    },
    {
        "questionIdx": 177583,
        "questionPatternModEntities": "What was executive produced by a Dutch sibling of M0 and produced by M2 's parent",
        "questionTemplate": "What was [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x2 .\n?x1 P2 M0 .\n?x1 P3 M1 .\n?x2 P4 M2 .\nFILTER ( ?x1 != M0 )\n}",
        "recursionDepth": 38,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1431 ?x1 .\n?x0 wdt:P162|wdt:P272 ?x2 .\n?x1 wdt:P27 wd:Q29999 .\n?x1 wdt:P3373 wd:Q469514 .\n?x2 wdt:P40|wdt:P355 wd:Q2649438 .\nFILTER ( ?x1 != wd:Q469514 )\n}",
        "questionWithBrackets": "What was executive produced by a Dutch sibling of [Linda de Mol] and produced by [Alloy Entertainment] 's parent"
    },
    {
        "questionIdx": 177639,
        "questionPatternModEntities": "What was executive produced by a Swedish spouse of M1",
        "questionTemplate": "What was [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x1 P1 M0 .\n?x1 P2 M1 .\nFILTER ( ?x1 != M1 )\n}",
        "recursionDepth": 23,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1431 ?x1 .\n?x1 wdt:P27 wd:Q34 .\n?x1 wdt:P26 wd:Q5364442 .\nFILTER ( ?x1 != wd:Q5364442 )\n}LIMIT 1",
        "questionWithBrackets": "What was executive produced by a Swedish spouse of [Lena Herzog]"
    },
    {
        "questionIdx": 177778,
        "questionPatternModEntities": "What was executive produced by a female spouse of M1",
        "questionTemplate": "What was [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x1 P1 M0 .\n?x1 P2 M1 .\nFILTER ( ?x1 != M1 )\n}",
        "recursionDepth": 23,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1431 ?x1 .\n?x1 wdt:P21 wd:Q6581072 .\n?x1 wdt:P26 wd:Q1622098 .\nFILTER ( ?x1 != wd:Q1622098 )\n}LIMIT 1",
        "questionWithBrackets": "What was executive produced by a female spouse of [Tom Kaulitz]"
    },
    {
        "questionIdx": 177940,
        "questionPatternModEntities": "What was executive produced by a parent of M3 , executive produced by M0 , and executive produced by M1 and M2",
        "questionTemplate": "What was [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x1 P1 M3\n}",
        "recursionDepth": 44,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1431 ?x1 .\n?x0 wdt:P1431 wd:Q56005 .\n?x0 wdt:P1431 wd:Q17145814 .\n?x0 wdt:P1431 wd:Q302063 .\n?x1 wdt:P40|wdt:P355 wd:Q198567\n}",
        "questionWithBrackets": "What was executive produced by a parent of [Jake Scott] , executive produced by [Aaron Guzikowski] , and executive produced by [David W. Zucker] and [Ridley Scott]"
    },
    {
        "questionIdx": 178016,
        "questionPatternModEntities": "What was executive produced by a sibling of M4 , executive produced by M0 , and directed by M1 , M2 , and M3",
        "questionTemplate": "What was [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\n?x0 P1 M3 .\n?x1 P2 M4 .\nFILTER ( ?x1 != M4 )\n}",
        "recursionDepth": 46,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 wd:Q3195280 .\n?x0 wdt:P57 wd:Q28861428 .\n?x0 wdt:P57 wd:Q3430408 .\n?x0 wdt:P1431 ?x1 .\n?x0 wdt:P1431 wd:Q8877 .\n?x1 wdt:P3373 wd:Q469204 .\nFILTER ( ?x1 != wd:Q469204 )\n}",
        "questionWithBrackets": "What was executive produced by a sibling of [Anne Spielberg] , executive produced by [Steven Spielberg] , and directed by [Rich Arons] , [Kent Butterworth] , and [Ken Boyer]"
    },
    {
        "questionIdx": 178022,
        "questionPatternModEntities": "What was executive produced by a spouse of M0",
        "questionTemplate": "What was [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x1 P1 M0 .\nFILTER ( ?x1 != M0 )\n}",
        "recursionDepth": 18,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1431 ?x1 .\n?x1 wdt:P26 wd:Q192990 .\nFILTER ( ?x1 != wd:Q192990 )\n}LIMIT 1",
        "questionWithBrackets": "What was executive produced by a spouse of [Guy Ritchie]"
    },
    {
        "questionIdx": 178023,
        "questionPatternModEntities": "What was executive produced by a spouse of M0 's spouse",
        "questionTemplate": "What was [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x1 P1 ?x2 .\n?x2 P1 M0 .\nFILTER ( ?x1 != ?x2 ) .\nFILTER ( ?x2 != M0 )\n}",
        "recursionDepth": 22,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1431 ?x1 .\n?x1 wdt:P26 ?x2 .\n?x2 wdt:P26 wd:Q60525 .\nFILTER ( ?x1 != ?x2 ) .\nFILTER ( ?x2 != wd:Q60525 )\n}LIMIT 1",
        "questionWithBrackets": "What was executive produced by a spouse of [Veit Harlan] 's spouse"
    },
    {
        "questionIdx": 178153,
        "questionPatternModEntities": "What was executive produced by and directed by M0 and M1",
        "questionTemplate": "What was [VP_SIMPLE] by and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P1 M0 .\n?x0 P1 M1\n}",
        "recursionDepth": 24,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 wd:Q3772 .\n?x0 wdt:P57 wd:Q549956 .\n?x0 wdt:P1431 wd:Q3772 .\n?x0 wdt:P1431 wd:Q549956\n}",
        "questionWithBrackets": "What was executive produced by and directed by [Alexandre Rockwell] and [Quentin Tarantino]"
    },
    {
        "questionIdx": 178154,
        "questionPatternModEntities": "What was executive produced by and directed by M0",
        "questionTemplate": "What was [VP_SIMPLE] by and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M0\n}",
        "recursionDepth": 20,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 wd:Q1744 .\n?x0 wdt:P1431 wd:Q1744\n}LIMIT 1",
        "questionWithBrackets": "What was executive produced by and directed by [Madonna]"
    },
    {
        "questionIdx": 178203,
        "questionPatternModEntities": "What was executive produced by and directed by a sibling of M0 's sibling",
        "questionTemplate": "What was [VP_SIMPLE] by and [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x1 P2 ?x2 .\n?x2 P2 M0 .\nFILTER ( ?x1 != ?x2 ) .\nFILTER ( ?x2 != M0 )\n}",
        "recursionDepth": 30,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 ?x1 .\n?x0 wdt:P1431 ?x1 .\n?x1 wdt:P3373 ?x2 .\n?x2 wdt:P3373 wd:Q61260 .\nFILTER ( ?x1 != ?x2 ) .\nFILTER ( ?x2 != wd:Q61260 )\n}LIMIT 1",
        "questionWithBrackets": "What was executive produced by and directed by a sibling of [Gustaf Gr\u00fcndgens] 's sibling"
    },
    {
        "questionIdx": 178275,
        "questionPatternModEntities": "What was executive produced by and edited by a male sibling of M0",
        "questionTemplate": "What was [VP_SIMPLE] by and [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x1 P2 M0 .\n?x1 P3 M1 .\nFILTER ( ?x1 != M0 )\n}",
        "recursionDepth": 31,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1040 ?x1 .\n?x0 wdt:P1431 ?x1 .\n?x1 wdt:P21 wd:Q6581097 .\n?x1 wdt:P3373 wd:Q28370409 .\nFILTER ( ?x1 != wd:Q28370409 )\n}LIMIT 1",
        "questionWithBrackets": "What was executive produced by and edited by a male sibling of [Everton Rocca]"
    },
    {
        "questionIdx": 178276,
        "questionPatternModEntities": "What was executive produced by and edited by a male spouse of M1",
        "questionTemplate": "What was [VP_SIMPLE] by and [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x1 P2 M0 .\n?x1 P3 M1 .\nFILTER ( ?x1 != M1 )\n}",
        "recursionDepth": 31,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1040 ?x1 .\n?x0 wdt:P1431 ?x1 .\n?x1 wdt:P21 wd:Q6581097 .\n?x1 wdt:P26 wd:Q3032150 .\nFILTER ( ?x1 != wd:Q3032150 )\n}LIMIT 1",
        "questionWithBrackets": "What was executive produced by and edited by a male spouse of [Y\u014dko Yaguchi]"
    },
    {
        "questionIdx": 178298,
        "questionPatternModEntities": "What was executive produced by and produced by M0 , M1 , and M2",
        "questionTemplate": "What was [VP_SIMPLE] by and [VP_SIMPLE] by [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P1 M0 .\n?x0 P1 M1 .\n?x0 P1 M2\n}",
        "recursionDepth": 27,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1431 wd:Q43994 .\n?x0 wdt:P1431 wd:Q95125 .\n?x0 wdt:P1431 wd:Q365090 .\n?x0 wdt:P162|wdt:P272 wd:Q43994 .\n?x0 wdt:P162|wdt:P272 wd:Q95125 .\n?x0 wdt:P162|wdt:P272 wd:Q365090\n}",
        "questionWithBrackets": "What was executive produced by and produced by [Matt Groening] , [Sam Simon] , and [James L. Brooks]"
    },
    {
        "questionIdx": 178348,
        "questionPatternModEntities": "What was executive produced by and produced by a spouse of M0",
        "questionTemplate": "What was [VP_SIMPLE] by and [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x1 P2 M0 .\nFILTER ( ?x1 != M0 )\n}",
        "recursionDepth": 26,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1431 ?x1 .\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x1 wdt:P26 wd:Q85861 .\nFILTER ( ?x1 != wd:Q85861 )\n}LIMIT 1",
        "questionWithBrackets": "What was executive produced by and produced by a spouse of [Marianne Hoppe]"
    },
    {
        "questionIdx": 178373,
        "questionPatternModEntities": "What was executive produced by and written by M0 and M1",
        "questionTemplate": "What was [VP_SIMPLE] by and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P1 M0 .\n?x0 P1 M1\n}",
        "recursionDepth": 24,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1431 wd:Q2599 .\n?x0 wdt:P1431 wd:Q228899 .\n?x0 wdt:P58 wd:Q2599 .\n?x0 wdt:P58 wd:Q228899\n}",
        "questionWithBrackets": "What was executive produced by and written by [Paul McCartney] and [Linda McCartney]"
    },
    {
        "questionIdx": 178432,
        "questionPatternModEntities": "What was executive produced by and written by a spouse of M0",
        "questionTemplate": "What was [VP_SIMPLE] by and [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x1 P2 M0 .\nFILTER ( ?x1 != M0 )\n}",
        "recursionDepth": 26,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1431 ?x1 .\n?x0 wdt:P58 ?x1 .\n?x1 wdt:P26 wd:Q192990 .\nFILTER ( ?x1 != wd:Q192990 )\n}LIMIT 1",
        "questionWithBrackets": "What was executive produced by and written by a spouse of [Guy Ritchie]"
    },
    {
        "questionIdx": 178479,
        "questionPatternModEntities": "What was executive produced by , directed by , and written by M0 , M1 , and M2",
        "questionTemplate": "What was [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P1 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\n?x0 P2 M0 .\n?x0 P2 M1 .\n?x0 P2 M2\n}",
        "recursionDepth": 33,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 wd:Q448604 .\n?x0 wdt:P57 wd:Q363666 .\n?x0 wdt:P57 wd:Q452794 .\n?x0 wdt:P1431 wd:Q448604 .\n?x0 wdt:P1431 wd:Q363666 .\n?x0 wdt:P1431 wd:Q452794 .\n?x0 wdt:P58 wd:Q448604 .\n?x0 wdt:P58 wd:Q363666 .\n?x0 wdt:P58 wd:Q452794\n}",
        "questionWithBrackets": "What was executive produced by , directed by , and written by [David Zucker] , [Jim Abrahams] , and [Jerry Zucker]"
    },
    {
        "questionIdx": 178487,
        "questionPatternModEntities": "What was executive produced by , directed by , and written by a sibling of M0",
        "questionTemplate": "What was [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x1 P3 M0 .\nFILTER ( ?x1 != M0 )\n}",
        "recursionDepth": 32,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 ?x1 .\n?x0 wdt:P1431 ?x1 .\n?x0 wdt:P58 ?x1 .\n?x1 wdt:P3373 wd:Q5112102 .\nFILTER ( ?x1 != wd:Q5112102 )\n}LIMIT 1",
        "questionWithBrackets": "What was executive produced by , directed by , and written by a sibling of [Christopher Ciccone]"
    },
    {
        "questionIdx": 178544,
        "questionPatternModEntities": "What was executive produced by , directed by , produced by , written by , and edited by M0 's sibling",
        "questionTemplate": "What was [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x0 P3 ?x1 .\n?x0 P4 ?x1 .\n?x1 P5 M0 .\nFILTER ( ?x1 != M0 )\n}",
        "recursionDepth": 42,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 ?x1 .\n?x0 wdt:P1040 ?x1 .\n?x0 wdt:P1431 ?x1 .\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x0 wdt:P58 ?x1 .\n?x1 wdt:P3373 wd:Q28370409 .\nFILTER ( ?x1 != wd:Q28370409 )\n}LIMIT 1",
        "questionWithBrackets": "What was executive produced by , directed by , produced by , written by , and edited by [Everton Rocca] 's sibling"
    },
    {
        "questionIdx": 178558,
        "questionPatternModEntities": "What was executive produced by , directed by , written by , and produced by M0 's sibling",
        "questionTemplate": "What was [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x0 P3 ?x1 .\n?x1 P4 M0 .\nFILTER ( ?x1 != M0 )\n}",
        "recursionDepth": 36,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 ?x1 .\n?x0 wdt:P1431 ?x1 .\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x0 wdt:P58 ?x1 .\n?x1 wdt:P3373 wd:Q104373781 .\nFILTER ( ?x1 != wd:Q104373781 )\n}LIMIT 1",
        "questionWithBrackets": "What was executive produced by , directed by , written by , and produced by [John Lynch] 's sibling"
    },
    {
        "questionIdx": 178570,
        "questionPatternModEntities": "What was executive produced by , directed by , written by , edited by , and produced by a employee of M0",
        "questionTemplate": "What was [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x0 P3 ?x1 .\n?x0 P4 ?x1 .\n?x1 P5 M0\n}",
        "recursionDepth": 44,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 ?x1 .\n?x0 wdt:P1040 ?x1 .\n?x0 wdt:P1431 ?x1 .\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x0 wdt:P58 ?x1 .\n?x1 wdt:P108 wd:Q681250\n}LIMIT 1",
        "questionWithBrackets": "What was executive produced by , directed by , written by , edited by , and produced by a employee of [European Graduate School]"
    },
    {
        "questionIdx": 178597,
        "questionPatternModEntities": "What was executive produced by , edited by , and directed by a male spouse of M1",
        "questionTemplate": "What was [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x1 P3 M0 .\n?x1 P4 M1 .\nFILTER ( ?x1 != M1 )\n}",
        "recursionDepth": 37,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 ?x1 .\n?x0 wdt:P1040 ?x1 .\n?x0 wdt:P1431 ?x1 .\n?x1 wdt:P21 wd:Q6581097 .\n?x1 wdt:P26 wd:Q3032150 .\nFILTER ( ?x1 != wd:Q3032150 )\n}LIMIT 1",
        "questionWithBrackets": "What was executive produced by , edited by , and directed by a male spouse of [Y\u014dko Yaguchi]"
    },
    {
        "questionIdx": 178671,
        "questionPatternModEntities": "What was executive produced by , edited by , produced by , and written by M0 's male employee",
        "questionTemplate": "What was [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x0 P3 ?x1 .\n?x1 P4 M0 .\n?x1 P5 M1\n}",
        "recursionDepth": 41,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1040 ?x1 .\n?x0 wdt:P1431 ?x1 .\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x0 wdt:P58 ?x1 .\n?x1 wdt:P108 wd:Q681250 .\n?x1 wdt:P21 wd:Q6581097\n}LIMIT 1",
        "questionWithBrackets": "What was executive produced by , edited by , produced by , and written by [European Graduate School] 's male employee"
    },
    {
        "questionIdx": 178674,
        "questionPatternModEntities": "What was executive produced by , edited by , produced by , directed by , and written by M0 's parent",
        "questionTemplate": "What was [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x0 P3 ?x1 .\n?x0 P4 ?x1 .\n?x1 P5 M0\n}",
        "recursionDepth": 42,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 ?x1 .\n?x0 wdt:P1040 ?x1 .\n?x0 wdt:P1431 ?x1 .\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x0 wdt:P58 ?x1 .\n?x1 wdt:P40|wdt:P355 wd:Q1620638\n}LIMIT 1",
        "questionWithBrackets": "What was executive produced by , edited by , produced by , directed by , and written by [Hisao Kurosawa] 's parent"
    },
    {
        "questionIdx": 178709,
        "questionPatternModEntities": "What was executive produced by , edited by , written by , directed by , and produced by a spouse of M0",
        "questionTemplate": "What was [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x0 P3 ?x1 .\n?x0 P4 ?x1 .\n?x1 P5 M0 .\nFILTER ( ?x1 != M0 )\n}",
        "recursionDepth": 44,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 ?x1 .\n?x0 wdt:P1040 ?x1 .\n?x0 wdt:P1431 ?x1 .\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x0 wdt:P58 ?x1 .\n?x1 wdt:P26 wd:Q3032150 .\nFILTER ( ?x1 != wd:Q3032150 )\n}LIMIT 1",
        "questionWithBrackets": "What was executive produced by , edited by , written by , directed by , and produced by a spouse of [Y\u014dko Yaguchi]"
    },
    {
        "questionIdx": 178710,
        "questionPatternModEntities": "What was executive produced by , edited by , written by , directed by , and produced by a employee of M0",
        "questionTemplate": "What was [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x0 P3 ?x1 .\n?x0 P4 ?x1 .\n?x1 P5 M0\n}",
        "recursionDepth": 44,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 ?x1 .\n?x0 wdt:P1040 ?x1 .\n?x0 wdt:P1431 ?x1 .\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x0 wdt:P58 ?x1 .\n?x1 wdt:P108 wd:Q681250\n}LIMIT 1",
        "questionWithBrackets": "What was executive produced by , edited by , written by , directed by , and produced by a employee of [European Graduate School]"
    },
    {
        "questionIdx": 178775,
        "questionPatternModEntities": "What was executive produced by , produced by , directed by , edited by , and written by a parent of M0",
        "questionTemplate": "What was [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x0 P3 ?x1 .\n?x0 P4 ?x1 .\n?x1 P5 M0\n}",
        "recursionDepth": 44,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 ?x1 .\n?x0 wdt:P1040 ?x1 .\n?x0 wdt:P1431 ?x1 .\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x0 wdt:P58 ?x1 .\n?x1 wdt:P40|wdt:P355 wd:Q1620638\n}LIMIT 1",
        "questionWithBrackets": "What was executive produced by , produced by , directed by , edited by , and written by a parent of [Hisao Kurosawa]"
    },
    {
        "questionIdx": 178776,
        "questionPatternModEntities": "What was executive produced by , produced by , directed by , edited by , and written by a spouse of M0",
        "questionTemplate": "What was [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x0 P3 ?x1 .\n?x0 P4 ?x1 .\n?x1 P5 M0 .\nFILTER ( ?x1 != M0 )\n}",
        "recursionDepth": 44,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 ?x1 .\n?x0 wdt:P1040 ?x1 .\n?x0 wdt:P1431 ?x1 .\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x0 wdt:P58 ?x1 .\n?x1 wdt:P26 wd:Q3032150 .\nFILTER ( ?x1 != wd:Q3032150 )\n}LIMIT 1",
        "questionWithBrackets": "What was executive produced by , produced by , directed by , edited by , and written by a spouse of [Y\u014dko Yaguchi]"
    },
    {
        "questionIdx": 178869,
        "questionPatternModEntities": "What was executive produced by , written by , and edited by a spouse of M0",
        "questionTemplate": "What was [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x1 P3 M0 .\nFILTER ( ?x1 != M0 )\n}",
        "recursionDepth": 32,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1040 ?x1 .\n?x0 wdt:P1431 ?x1 .\n?x0 wdt:P58 ?x1 .\n?x1 wdt:P26 wd:Q2828975 .\nFILTER ( ?x1 != wd:Q2828975 )\n}LIMIT 1",
        "questionWithBrackets": "What was executive produced by , written by , and edited by a spouse of [Akemi \u014cta]"
    },
    {
        "questionIdx": 178918,
        "questionPatternModEntities": "What was executive produced by , written by , directed by , edited by , and produced by M0 's spouse",
        "questionTemplate": "What was [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x0 P3 ?x1 .\n?x0 P4 ?x1 .\n?x1 P5 M0 .\nFILTER ( ?x1 != M0 )\n}",
        "recursionDepth": 42,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 ?x1 .\n?x0 wdt:P1040 ?x1 .\n?x0 wdt:P1431 ?x1 .\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x0 wdt:P58 ?x1 .\n?x1 wdt:P26 wd:Q3032150 .\nFILTER ( ?x1 != wd:Q3032150 )\n}LIMIT 1",
        "questionWithBrackets": "What was executive produced by , written by , directed by , edited by , and produced by [Y\u014dko Yaguchi] 's spouse"
    },
    {
        "questionIdx": 178944,
        "questionPatternModEntities": "What was executive produced by , written by , edited by , produced by , and directed by M0 's spouse",
        "questionTemplate": "What was [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x0 P3 ?x1 .\n?x0 P4 ?x1 .\n?x1 P5 M0 .\nFILTER ( ?x1 != M0 )\n}",
        "recursionDepth": 42,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 ?x1 .\n?x0 wdt:P1040 ?x1 .\n?x0 wdt:P1431 ?x1 .\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x0 wdt:P58 ?x1 .\n?x1 wdt:P26 wd:Q6813152 .\nFILTER ( ?x1 != wd:Q6813152 )\n}LIMIT 1",
        "questionWithBrackets": "What was executive produced by , written by , edited by , produced by , and directed by [Mellody Hobson] 's spouse"
    },
    {
        "questionIdx": 178965,
        "questionPatternModEntities": "What was executive produced by , written by , produced by , and edited by M0 's parent",
        "questionTemplate": "What was [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x0 P3 ?x1 .\n?x1 P4 M0\n}",
        "recursionDepth": 36,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1040 ?x1 .\n?x0 wdt:P1431 ?x1 .\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x0 wdt:P58 ?x1 .\n?x1 wdt:P40|wdt:P355 wd:Q1620638\n}LIMIT 1",
        "questionWithBrackets": "What was executive produced by , written by , produced by , and edited by [Hisao Kurosawa] 's parent"
    },
    {
        "questionIdx": 178983,
        "questionPatternModEntities": "What was executive produced by , written by , produced by , edited by , and directed by M0 's spouse",
        "questionTemplate": "What was [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x0 P3 ?x1 .\n?x0 P4 ?x1 .\n?x1 P5 M0 .\nFILTER ( ?x1 != M0 )\n}",
        "recursionDepth": 42,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 ?x1 .\n?x0 wdt:P1040 ?x1 .\n?x0 wdt:P1431 ?x1 .\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x0 wdt:P58 ?x1 .\n?x1 wdt:P26 wd:Q3032150 .\nFILTER ( ?x1 != wd:Q3032150 )\n}LIMIT 1",
        "questionWithBrackets": "What was executive produced by , written by , produced by , edited by , and directed by [Y\u014dko Yaguchi] 's spouse"
    },
    {
        "questionIdx": 179003,
        "questionPatternModEntities": "What was executive produced , directed , and written by M0",
        "questionTemplate": "What was [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M0 .\n?x0 P2 M0\n}",
        "recursionDepth": 24,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 wd:Q61347 .\n?x0 wdt:P1431 wd:Q61347 .\n?x0 wdt:P58 wd:Q61347\n}LIMIT 1",
        "questionWithBrackets": "What was executive produced , directed , and written by [Uwe Boll]"
    },
    {
        "questionIdx": 179004,
        "questionPatternModEntities": "What was executive produced , directed , and written by M0 , M1 , and M2",
        "questionTemplate": "What was [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P1 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\n?x0 P2 M0 .\n?x0 P2 M1 .\n?x0 P2 M2\n}",
        "recursionDepth": 31,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 wd:Q363666 .\n?x0 wdt:P57 wd:Q448604 .\n?x0 wdt:P57 wd:Q452794 .\n?x0 wdt:P1431 wd:Q363666 .\n?x0 wdt:P1431 wd:Q448604 .\n?x0 wdt:P1431 wd:Q452794 .\n?x0 wdt:P58 wd:Q363666 .\n?x0 wdt:P58 wd:Q448604 .\n?x0 wdt:P58 wd:Q452794\n}",
        "questionWithBrackets": "What was executive produced , directed , and written by [David Zucker] , [Jim Abrahams] , and [Jerry Zucker]"
    },
    {
        "questionIdx": 179015,
        "questionPatternModEntities": "What was executive produced , directed , edited , and produced by M0",
        "questionTemplate": "What was [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M0 .\n?x0 P2 M0 .\n?x0 P3 M0\n}",
        "recursionDepth": 29,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 wd:Q8006 .\n?x0 wdt:P1040 wd:Q8006 .\n?x0 wdt:P1431 wd:Q8006 .\n?x0 wdt:P162|wdt:P272 wd:Q8006\n}LIMIT 1",
        "questionWithBrackets": "What was executive produced , directed , edited , and produced by [Akira Kurosawa]"
    },
    {
        "questionIdx": 179025,
        "questionPatternModEntities": "What was executive produced , directed , edited , written , and produced by M0 's sibling",
        "questionTemplate": "What was [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x0 P3 ?x1 .\n?x0 P4 ?x1 .\n?x1 P5 M0 .\nFILTER ( ?x1 != M0 )\n}",
        "recursionDepth": 38,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 ?x1 .\n?x0 wdt:P1040 ?x1 .\n?x0 wdt:P1431 ?x1 .\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x0 wdt:P58 ?x1 .\n?x1 wdt:P3373 wd:Q28370409 .\nFILTER ( ?x1 != wd:Q28370409 )\n}LIMIT 1",
        "questionWithBrackets": "What was executive produced , directed , edited , written , and produced by [Everton Rocca] 's sibling"
    },
    {
        "questionIdx": 179032,
        "questionPatternModEntities": "What was executive produced , directed , produced , and written by a spouse of M0",
        "questionTemplate": "What was [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x0 P3 ?x1 .\n?x1 P4 M0 .\nFILTER ( ?x1 != M0 )\n}",
        "recursionDepth": 35,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 ?x1 .\n?x0 wdt:P1431 ?x1 .\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x0 wdt:P58 ?x1 .\n?x1 wdt:P26 wd:Q717669 .\nFILTER ( ?x1 != wd:Q717669 )\n}LIMIT 1",
        "questionWithBrackets": "What was executive produced , directed , produced , and written by a spouse of [Lin Feng-jiao]"
    },
    {
        "questionIdx": 179061,
        "questionPatternModEntities": "What was executive produced , edited , and produced by M0",
        "questionTemplate": "What was [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M0 .\n?x0 P2 M0\n}",
        "recursionDepth": 24,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1040 wd:Q8006 .\n?x0 wdt:P1431 wd:Q8006 .\n?x0 wdt:P162|wdt:P272 wd:Q8006\n}LIMIT 1",
        "questionWithBrackets": "What was executive produced , edited , and produced by [Akira Kurosawa]"
    },
    {
        "questionIdx": 179064,
        "questionPatternModEntities": "What was executive produced , edited , and produced by a sibling of M0",
        "questionTemplate": "What was [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x1 P3 M0 .\nFILTER ( ?x1 != M0 )\n}",
        "recursionDepth": 30,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1040 ?x1 .\n?x0 wdt:P1431 ?x1 .\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x1 wdt:P3373 wd:Q28370409 .\nFILTER ( ?x1 != wd:Q28370409 )\n}LIMIT 1",
        "questionWithBrackets": "What was executive produced , edited , and produced by a sibling of [Everton Rocca]"
    },
    {
        "questionIdx": 179155,
        "questionPatternModEntities": "What was executive produced , produced , directed , and written by M0 's parent",
        "questionTemplate": "What was [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x0 P3 ?x1 .\n?x1 P4 M0\n}",
        "recursionDepth": 33,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 ?x1 .\n?x0 wdt:P1431 ?x1 .\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x0 wdt:P58 ?x1 .\n?x1 wdt:P40|wdt:P355 wd:Q561310\n}LIMIT 1",
        "questionWithBrackets": "What was executive produced , produced , directed , and written by [Jaycee Chan] 's parent"
    },
    {
        "questionIdx": 179183,
        "questionPatternModEntities": "What was executive produced , produced , written , and directed by M0 's sibling",
        "questionTemplate": "What was [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x0 P3 ?x1 .\n?x1 P4 M0 .\nFILTER ( ?x1 != M0 )\n}",
        "recursionDepth": 33,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 ?x1 .\n?x0 wdt:P1431 ?x1 .\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x0 wdt:P58 ?x1 .\n?x1 wdt:P3373 wd:Q104373781 .\nFILTER ( ?x1 != wd:Q104373781 )\n}LIMIT 1",
        "questionWithBrackets": "What was executive produced , produced , written , and directed by [John Lynch] 's sibling"
    },
    {
        "questionIdx": 179205,
        "questionPatternModEntities": "What was executive produced , written , and directed by a sibling of a sibling of M0",
        "questionTemplate": "What was [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by a [ROLE_SIMPLE] of a [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x1 P3 ?x2 .\n?x2 P3 M0 .\nFILTER ( ?x1 != ?x2 ) .\nFILTER ( ?x2 != M0 )\n}",
        "recursionDepth": 36,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 ?x1 .\n?x0 wdt:P1431 ?x1 .\n?x0 wdt:P58 ?x1 .\n?x1 wdt:P3373 ?x2 .\n?x2 wdt:P3373 wd:Q108622 .\nFILTER ( ?x1 != ?x2 ) .\nFILTER ( ?x2 != wd:Q108622 )\n}LIMIT 1",
        "questionWithBrackets": "What was executive produced , written , and directed by a sibling of a sibling of [Talia Shire]"
    },
    {
        "questionIdx": 179208,
        "questionPatternModEntities": "What was executive produced , written , and edited by M0",
        "questionTemplate": "What was [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M0 .\n?x0 P2 M0\n}",
        "recursionDepth": 24,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1040 wd:Q8006 .\n?x0 wdt:P1431 wd:Q8006 .\n?x0 wdt:P58 wd:Q8006\n}LIMIT 1",
        "questionWithBrackets": "What was executive produced , written , and edited by [Akira Kurosawa]"
    },
    {
        "questionIdx": 179304,
        "questionPatternModEntities": "What was founded by M0 , M1 , and M2 , founded by M3 , M4 , and M5 , and founded by M6",
        "questionTemplate": "What was [VP_SIMPLE] by [entity] , [entity] , and [entity] , [VP_SIMPLE] by [entity] , [entity] , and [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P0 M3 .\n?x0 P0 M4 .\n?x0 P0 M5 .\n?x0 P0 M6\n}",
        "recursionDepth": 45,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P112 wd:Q96 .\n?x0 wdt:P112 wd:Q31 .\n?x0 wdt:P112 wd:Q20 .\n?x0 wdt:P112 wd:Q30 .\n?x0 wdt:P112 wd:Q32 .\n?x0 wdt:P112 wd:Q43 .\n?x0 wdt:P112 wd:Q16\n}",
        "questionWithBrackets": "What was founded by [Turkey] , [Norway] , and [Mexico] , founded by [Belgium] , [Canada] , and [United States of America] , and founded by [Luxembourg]"
    },
    {
        "questionIdx": 179307,
        "questionPatternModEntities": "What was founded by M0 , M1 , M2 , M3 , M4 , and M5",
        "questionTemplate": "What was [VP_SIMPLE] by [entity] , [entity] , [entity] , [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P0 M3 .\n?x0 P0 M4 .\n?x0 P0 M5\n}",
        "recursionDepth": 27,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P112 wd:Q408 .\n?x0 wdt:P112 wd:Q79 .\n?x0 wdt:P112 wd:Q16 .\n?x0 wdt:P112 wd:Q43 .\n?x0 wdt:P112 wd:Q20 .\n?x0 wdt:P112 wd:Q30\n}",
        "questionWithBrackets": "What was founded by [Norway] , [Egypt] , [United States of America] , [Turkey] , [Australia] , and [Canada]"
    },
    {
        "questionIdx": 179334,
        "questionPatternModEntities": "What was founded by M0 's Swedish sibling",
        "questionTemplate": "What was [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x1 P1 M0 .\n?x1 P2 M1 .\nFILTER ( ?x1 != M0 )\n}",
        "recursionDepth": 20,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P112 ?x1 .\n?x1 wdt:P27 wd:Q34 .\n?x1 wdt:P3373 wd:Q5959371 .\nFILTER ( ?x1 != wd:Q5959371 )\n}LIMIT 1",
        "questionWithBrackets": "What was founded by [Samuel Linnaeus] 's Swedish sibling"
    },
    {
        "questionIdx": 179337,
        "questionPatternModEntities": "What was founded by M0 , founded by M3 's sibling , founded by M1 , and founded by M2",
        "questionTemplate": "What was [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x1 P1 M3 .\nFILTER ( ?x1 != M3 )\n}",
        "recursionDepth": 44,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P112 ?x1 .\n?x0 wdt:P112 wd:Q23 .\n?x0 wdt:P112 wd:Q36747 .\n?x0 wdt:P112 wd:Q3181518 .\n?x1 wdt:P3373 wd:Q7412891 .\nFILTER ( ?x1 != wd:Q7412891 )\n}",
        "questionWithBrackets": "What was founded by [George Washington] , founded by [Samuel Washington] 's sibling , founded by [John Forbes] , and founded by [indigenous peoples of America]"
    },
    {
        "questionIdx": 179342,
        "questionPatternModEntities": "What was founded by M0 's sibling and parent",
        "questionTemplate": "What was [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] and [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x1 P1 M0 .\n?x1 P2 M0 .\nFILTER ( ?x1 != M0 )\n}",
        "recursionDepth": 20,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P112 ?x1 .\n?x1 wdt:P40|wdt:P355 wd:Q23930949 .\n?x1 wdt:P3373 wd:Q23930949 .\nFILTER ( ?x1 != wd:Q23930949 )\n}LIMIT 1",
        "questionWithBrackets": "What was founded by [Alpais] 's sibling and parent"
    },
    {
        "questionIdx": 179343,
        "questionPatternModEntities": "What was founded by M0 's child",
        "questionTemplate": "What was [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x1 P1 M0\n}",
        "recursionDepth": 15,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P112 ?x1 .\n?x1 wdt:P749 wd:Q20800404\n}LIMIT 1",
        "questionWithBrackets": "What was founded by [Alphabet Inc.] 's child"
    },
    {
        "questionIdx": 179362,
        "questionPatternModEntities": "What was founded by M0 , M1 , and M2 and founded by a British sibling of M3",
        "questionTemplate": "What was [VP_SIMPLE] by [entity] , [entity] , and [entity] and [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x1 P1 M3 .\n?x1 P2 M4 .\nFILTER ( ?x1 != M3 )\n}",
        "recursionDepth": 40,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P112 ?x1 .\n?x0 wdt:P112 wd:Q51123 .\n?x0 wdt:P112 wd:Q104109 .\n?x0 wdt:P112 wd:Q104127 .\n?x1 wdt:P27 wd:Q145 .\n?x1 wdt:P3373 wd:Q606780 .\nFILTER ( ?x1 != wd:Q606780 )\n}",
        "questionWithBrackets": "What was founded by [Mary Pickford] , [D. W. Griffith] , and [Douglas Fairbanks] and founded by a British sibling of [Sydney Chaplin]"
    },
    {
        "questionIdx": 179416,
        "questionPatternModEntities": "What was founded by M0 and founded by M1 's sibling",
        "questionTemplate": "What was [VP_SIMPLE] by [entity] and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P0 M0 .\n?x1 P1 M1 .\nFILTER ( ?x1 != M1 )\n}",
        "recursionDepth": 26,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P112 ?x1 .\n?x0 wdt:P112 wd:Q23 .\n?x1 wdt:P3373 wd:Q850421 .\nFILTER ( ?x1 != wd:Q850421 )\n}",
        "questionWithBrackets": "What was founded by [George Washington] and founded by [Betty Washington Lewis] 's sibling"
    },
    {
        "questionIdx": 179439,
        "questionPatternModEntities": "What was founded by M0 , founded by M1 , founded by M2 , and founded by M4 's Chinese parent",
        "questionTemplate": "What was [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x1 P1 M3 .\n?x1 P2 M4\n}",
        "recursionDepth": 49,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P112 ?x1 .\n?x0 wdt:P112 wd:Q716047 .\n?x0 wdt:P112 wd:Q6450499 .\n?x0 wdt:P112 wd:Q15928352 .\n?x1 wdt:P40|wdt:P355 wd:Q6775988 .\n?x1 wdt:P27 wd:Q148\n}",
        "questionWithBrackets": "What was founded by [Fung King Hey] , founded by [Kwok Tak-Seng] , founded by [Lee Shau-kee] , and founded by [Martin Lee Ka-shing] 's Chinese parent"
    },
    {
        "questionIdx": 179445,
        "questionPatternModEntities": "What was founded by M0 and M1 , founded by M2 , and founded by M4 's American spouse 's sibling",
        "questionTemplate": "What was [VP_SIMPLE] by [entity] and [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x1 P1 ?x2 .\n?x2 P2 M3 .\n?x2 P3 M4 .\nFILTER ( ?x1 != ?x2 ) .\nFILTER ( ?x2 != M4 )\n}",
        "recursionDepth": 48,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P112 ?x1 .\n?x0 wdt:P112 wd:Q36747 .\n?x0 wdt:P112 wd:Q3181518 .\n?x0 wdt:P112 wd:Q23 .\n?x1 wdt:P3373 ?x2 .\n?x2 wdt:P27 wd:Q30 .\n?x2 wdt:P26 wd:Q105961124 .\nFILTER ( ?x1 != ?x2 ) .\nFILTER ( ?x2 != wd:Q105961124 )\n}",
        "questionWithBrackets": "What was founded by [indigenous peoples of America] and [John Forbes] , founded by [George Washington] , and founded by [Jane Champe] 's American spouse 's sibling"
    },
    {
        "questionIdx": 179451,
        "questionPatternModEntities": "What was founded by M2 's Canadian sibling , founded by M0 , and founded by M1",
        "questionTemplate": "What was [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x1 P1 M2 .\n?x1 P2 M3 .\nFILTER ( ?x1 != M2 )\n}",
        "recursionDepth": 40,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P112 ?x1 .\n?x0 wdt:P112 wd:Q320211 .\n?x0 wdt:P112 wd:Q7437154 .\n?x1 wdt:P27 wd:Q16 .\n?x1 wdt:P3373 wd:Q6228653 .\nFILTER ( ?x1 != wd:Q6228653 )\n}",
        "questionWithBrackets": "What was founded by [John David Cameron] 's Canadian sibling , founded by [Scott Ross] , and founded by [Stan Winston]"
    },
    {
        "questionIdx": 179477,
        "questionPatternModEntities": "What was founded by M0 and founded by M1 's parent 's employee",
        "questionTemplate": "What was [VP_SIMPLE] by [entity] and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P0 M0 .\n?x1 P1 ?x2 .\n?x2 P2 M1\n}",
        "recursionDepth": 30,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P112 ?x1 .\n?x0 wdt:P112 wd:Q1043 .\n?x1 wdt:P108 ?x2 .\n?x2 wdt:P40|wdt:P355 wd:Q30264384\n}",
        "questionWithBrackets": "What was founded by [Carl Linnaeus] and founded by [Center for Clinical Research Dalarna] 's parent 's employee"
    },
    {
        "questionIdx": 179478,
        "questionPatternModEntities": "What was founded by M0 and founded by a British employee of M1 , M2 , M3 , M4 , and M5",
        "questionTemplate": "What was [VP_SIMPLE] by [entity] and [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] , [entity] , [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P0 M0 .\n?x1 P1 M1 .\n?x1 P1 M2 .\n?x1 P1 M3 .\n?x1 P1 M4 .\n?x1 P1 M5 .\n?x1 P2 M6\n}",
        "recursionDepth": 46,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P112 ?x1 .\n?x0 wdt:P112 wd:Q80 .\n?x1 wdt:P108 wd:Q37033 .\n?x1 wdt:P108 wd:Q7095994 .\n?x1 wdt:P108 wd:Q7432436 .\n?x1 wdt:P108 wd:Q42944 .\n?x1 wdt:P108 wd:Q7204713 .\n?x1 wdt:P27 wd:Q145\n}",
        "questionWithBrackets": "What was founded by [Tim Berners-Lee] and founded by a British employee of [Plessey] , [CERN] , [World Wide Web Consortium] , [School of Electronics and Computer Science, University of Southampton] , and [Open Data Institute]"
    },
    {
        "questionIdx": 179483,
        "questionPatternModEntities": "What was founded by M0 and founded by M1 's employee",
        "questionTemplate": "What was [VP_SIMPLE] by [entity] and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P0 M0 .\n?x1 P1 M1\n}",
        "recursionDepth": 26,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P112 ?x1 .\n?x0 wdt:P112 wd:Q180 .\n?x1 wdt:P108 wd:Q187801\n}",
        "questionWithBrackets": "What was founded by [Wikimedia Foundation] and founded by [Citizendium] 's employee"
    },
    {
        "questionIdx": 179485,
        "questionPatternModEntities": "What was founded by M0 's spouse 's spouse",
        "questionTemplate": "What was [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x1 P1 ?x2 .\n?x2 P1 M0 .\nFILTER ( ?x1 != ?x2 ) .\nFILTER ( ?x2 != M0 )\n}",
        "recursionDepth": 19,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P112 ?x1 .\n?x1 wdt:P26 ?x2 .\n?x2 wdt:P26 wd:Q1162023 .\nFILTER ( ?x1 != ?x2 ) .\nFILTER ( ?x2 != wd:Q1162023 )\n}LIMIT 1",
        "questionWithBrackets": "What was founded by [Daniel Parke Custis] 's spouse 's spouse"
    },
    {
        "questionIdx": 179491,
        "questionPatternModEntities": "What was founded by M1 's Chinese spouse",
        "questionTemplate": "What was [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x1 P1 M0 .\n?x1 P2 M1 .\nFILTER ( ?x1 != M1 )\n}",
        "recursionDepth": 20,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P112 ?x1 .\n?x1 wdt:P27 wd:Q148 .\n?x1 wdt:P26 wd:Q283983 .\nFILTER ( ?x1 != wd:Q283983 )\n}LIMIT 1",
        "questionWithBrackets": "What was founded by [Nina Li] 's Chinese spouse"
    },
    {
        "questionIdx": 179519,
        "questionPatternModEntities": "What was founded by M0 and founded by M1 's child",
        "questionTemplate": "What was [VP_SIMPLE] by [entity] and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P0 M0 .\n?x1 P1 M1\n}",
        "recursionDepth": 26,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P112 ?x1 .\n?x0 wdt:P112 wd:Q95 .\n?x1 wdt:P749 wd:Q20800404\n}",
        "questionWithBrackets": "What was founded by [Google] and founded by [Alphabet Inc.] 's child"
    },
    {
        "questionIdx": 179574,
        "questionPatternModEntities": "What was founded by M0 's German female employee",
        "questionTemplate": "What was [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x1 P1 M0 .\n?x1 P2 M1 .\n?x1 P3 M2\n}",
        "recursionDepth": 25,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P112 ?x1 .\n?x1 wdt:P108 wd:Q26882567 .\n?x1 wdt:P21 wd:Q6581072 .\n?x1 wdt:P27 wd:Q183\n}LIMIT 1",
        "questionWithBrackets": "What was founded by [No label defined] 's German female employee"
    },
    {
        "questionIdx": 179583,
        "questionPatternModEntities": "What was founded by M0 's male sibling",
        "questionTemplate": "What was [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x1 P1 M0 .\n?x1 P2 M1 .\nFILTER ( ?x1 != M0 )\n}",
        "recursionDepth": 20,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P112 ?x1 .\n?x1 wdt:P21 wd:Q6581097 .\n?x1 wdt:P3373 wd:Q850421 .\nFILTER ( ?x1 != wd:Q850421 )\n}LIMIT 1",
        "questionWithBrackets": "What was founded by [Betty Washington Lewis] 's male sibling"
    },
    {
        "questionIdx": 179599,
        "questionPatternModEntities": "What was founded by M0 , founded by M1 , and founded by M2 's American sibling 's spouse",
        "questionTemplate": "What was [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x1 P1 ?x2 .\n?x2 P2 M2 .\n?x2 P3 M3 .\nFILTER ( ?x1 != ?x2 ) .\nFILTER ( ?x2 != M2 )\n}",
        "recursionDepth": 44,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P112 ?x1 .\n?x0 wdt:P112 wd:Q51123 .\n?x0 wdt:P112 wd:Q882 .\n?x1 wdt:P26 ?x2 .\n?x2 wdt:P27 wd:Q30 .\n?x2 wdt:P3373 wd:Q5407585 .\nFILTER ( ?x1 != ?x2 ) .\nFILTER ( ?x2 != wd:Q5407585 )\n}",
        "questionWithBrackets": "What was founded by [Charlie Chaplin] , founded by [D. W. Griffith] , and founded by [Eugene O'Neill, Jr.] 's American sibling 's spouse"
    },
    {
        "questionIdx": 179609,
        "questionPatternModEntities": "What was founded by M0 's employee 's spouse",
        "questionTemplate": "What was [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x1 P1 ?x2 .\n?x2 P2 M0 .\nFILTER ( ?x1 != ?x2 )\n}",
        "recursionDepth": 19,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P112 ?x1 .\n?x1 wdt:P26 ?x2 .\n?x2 wdt:P108 wd:Q21578 .\nFILTER ( ?x1 != ?x2 )\n}LIMIT 1",
        "questionWithBrackets": "What was founded by [Princeton University] 's employee 's spouse"
    },
    {
        "questionIdx": 179619,
        "questionPatternModEntities": "What was founded by M0 and founded by M2 's male spouse",
        "questionTemplate": "What was [VP_SIMPLE] by [entity] and [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P0 M0 .\n?x1 P1 M1 .\n?x1 P2 M2 .\nFILTER ( ?x1 != M2 )\n}",
        "recursionDepth": 31,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P112 ?x1 .\n?x0 wdt:P112 wd:Q444 .\n?x1 wdt:P21 wd:Q6581097 .\n?x1 wdt:P26 wd:Q468844 .\nFILTER ( ?x1 != wd:Q468844 )\n}",
        "questionWithBrackets": "What was founded by [Lech Wa\u0142\u0119sa] and founded by [Danuta Wa\u0142\u0119sa] 's male spouse"
    },
    {
        "questionIdx": 179628,
        "questionPatternModEntities": "What was founded by M0",
        "questionTemplate": "What was [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0\n}",
        "recursionDepth": 11,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P112 wd:Q5\n}LIMIT 1",
        "questionWithBrackets": "What was founded by [human]"
    },
    {
        "questionIdx": 179631,
        "questionPatternModEntities": "What was founded by M0 and founded by a child of M1",
        "questionTemplate": "What was [VP_SIMPLE] by [entity] and [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P0 M0 .\n?x1 P1 M1\n}",
        "recursionDepth": 28,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P112 ?x1 .\n?x0 wdt:P112 wd:Q95 .\n?x1 wdt:P749 wd:Q20800404\n}",
        "questionWithBrackets": "What was founded by [Google] and founded by a child of [Alphabet Inc.]"
    },
    {
        "questionIdx": 179757,
        "questionPatternModEntities": "What was founded by M1 's British spouse",
        "questionTemplate": "What was [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x1 P1 M0 .\n?x1 P2 M1 .\nFILTER ( ?x1 != M1 )\n}",
        "recursionDepth": 20,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P112 ?x1 .\n?x1 wdt:P27 wd:Q145 .\n?x1 wdt:P26 wd:Q14623681 .\nFILTER ( ?x1 != wd:Q14623681 )\n}LIMIT 1",
        "questionWithBrackets": "What was founded by [Jane Belson] 's British spouse"
    },
    {
        "questionIdx": 179786,
        "questionPatternModEntities": "What was founded by M1 's parent 's sibling and founded by M0",
        "questionTemplate": "What was [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE] and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P0 M0 .\n?x1 P1 ?x2 .\n?x2 P2 M1 .\nFILTER ( ?x1 != ?x2 )\n}",
        "recursionDepth": 30,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P112 ?x1 .\n?x0 wdt:P112 wd:Q352 .\n?x1 wdt:P3373 ?x2 .\n?x2 wdt:P40|wdt:P355 wd:Q22086756 .\nFILTER ( ?x1 != ?x2 )\n}",
        "questionWithBrackets": "What was founded by [Elfriede Hochegger] 's parent 's sibling and founded by [Adolf Hitler]"
    },
    {
        "questionIdx": 179791,
        "questionPatternModEntities": "What was founded by M0 , founded by M2 's child , and founded by M1",
        "questionTemplate": "What was [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x1 P1 M2\n}",
        "recursionDepth": 35,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P112 ?x1 .\n?x0 wdt:P112 wd:Q56011958 .\n?x0 wdt:P112 wd:Q7187282 .\n?x1 wdt:P749 wd:Q20800404\n}",
        "questionWithBrackets": "What was founded by [Phonographic Performance Limited] , founded by [Alphabet Inc.] 's child , and founded by [Tencent Music]"
    },
    {
        "questionIdx": 179793,
        "questionPatternModEntities": "What was founded by M4 's Japanese parent , founded by M0 and M1 , and founded by M2",
        "questionTemplate": "What was [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] , [VP_SIMPLE] by [entity] and [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x1 P1 M3 .\n?x1 P2 M4\n}",
        "recursionDepth": 44,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P112 ?x1 .\n?x0 wdt:P112 wd:Q11565851 .\n?x0 wdt:P112 wd:Q661802 .\n?x0 wdt:P112 wd:Q3818175 .\n?x1 wdt:P40|wdt:P355 wd:Q18700635 .\n?x1 wdt:P27 wd:Q17\n}",
        "questionWithBrackets": "What was founded by [Maya Inoue] 's Japanese parent , founded by [Sh\u016bichi Kat\u014d] and [Takeshi Umehara] , and founded by [Hisae Sawachi]"
    },
    {
        "questionIdx": 179814,
        "questionPatternModEntities": "What was founded by M0 's spouse 's parent",
        "questionTemplate": "What was [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x1 P1 ?x2 .\n?x2 P2 M0 .\nFILTER ( ?x2 != M0 )\n}",
        "recursionDepth": 19,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P112 ?x1 .\n?x1 wdt:P40|wdt:P355 ?x2 .\n?x2 wdt:P26 wd:Q214226 .\nFILTER ( ?x2 != wd:Q214226 )\n}LIMIT 1",
        "questionWithBrackets": "What was founded by [Lauryn Hill] 's spouse 's parent"
    },
    {
        "questionIdx": 179816,
        "questionPatternModEntities": "What was founded by M0 and founded by M2 's Chinese parent",
        "questionTemplate": "What was [VP_SIMPLE] by [entity] and [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P0 M0 .\n?x1 P1 M1 .\n?x1 P2 M2\n}",
        "recursionDepth": 31,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P112 ?x1 .\n?x0 wdt:P112 wd:Q197216 .\n?x1 wdt:P40|wdt:P355 wd:Q28415575 .\n?x1 wdt:P27 wd:Q148\n}",
        "questionWithBrackets": "What was founded by [Zhang Jindong] and founded by [Steven Zhang] 's Chinese parent"
    },
    {
        "questionIdx": 179823,
        "questionPatternModEntities": "What was founded by M0 and M1 , founded by M4 's parent , founded by M2 , and founded by M3",
        "questionTemplate": "What was [VP_SIMPLE] by [entity] and [entity] , [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P0 M3 .\n?x1 P1 M4\n}",
        "recursionDepth": 48,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P112 ?x1 .\n?x0 wdt:P112 wd:Q180 .\n?x0 wdt:P112 wd:Q181 .\n?x0 wdt:P112 wd:Q185 .\n?x0 wdt:P112 wd:Q15176445 .\n?x1 wdt:P40|wdt:P355 wd:Q106204654\n}",
        "questionWithBrackets": "What was founded by [Wikimedia Foundation] and [Jimmy Wales] , founded by [Wikimedia, LLC] 's parent , founded by [Daniel Alston] , and founded by [Larry Sanger]"
    },
    {
        "questionIdx": 179832,
        "questionPatternModEntities": "What was founded by M1 's male spouse",
        "questionTemplate": "What was [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x1 P1 M0 .\n?x1 P2 M1 .\nFILTER ( ?x1 != M1 )\n}",
        "recursionDepth": 20,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P112 ?x1 .\n?x1 wdt:P21 wd:Q6581097 .\n?x1 wdt:P26 wd:Q215062 .\nFILTER ( ?x1 != wd:Q215062 )\n}LIMIT 1",
        "questionWithBrackets": "What was founded by [Mary Todd Lincoln] 's male spouse"
    },
    {
        "questionIdx": 179833,
        "questionPatternModEntities": "What was founded by M1 's Spanish sibling and founded by M0",
        "questionTemplate": "What was [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P0 M0 .\n?x1 P1 M1 .\n?x1 P2 M2 .\nFILTER ( ?x1 != M1 )\n}",
        "recursionDepth": 31,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P112 ?x1 .\n?x0 wdt:P112 wd:Q34417 .\n?x1 wdt:P27 wd:Q29 .\n?x1 wdt:P3373 wd:Q157107 .\nFILTER ( ?x1 != wd:Q157107 )\n}",
        "questionWithBrackets": "What was founded by [John of Austria] 's Spanish sibling and founded by [Philip II of Spain]"
    },
    {
        "questionIdx": 179880,
        "questionPatternModEntities": "What was founded by M0 , founded by a child of M2 , and founded by M1",
        "questionTemplate": "What was [VP_SIMPLE] by [entity] , [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x1 P1 M2\n}",
        "recursionDepth": 37,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P112 ?x1 .\n?x0 wdt:P112 wd:Q56011958 .\n?x0 wdt:P112 wd:Q56760250 .\n?x1 wdt:P749 wd:Q20800404\n}",
        "questionWithBrackets": "What was founded by [Sony Music] , founded by a child of [Alphabet Inc.] , and founded by [Tencent Music]"
    },
    {
        "questionIdx": 179882,
        "questionPatternModEntities": "What was founded by M0 's parent and spouse",
        "questionTemplate": "What was [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] and [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x1 P1 M0 .\n?x1 P2 M0 .\nFILTER ( ?x1 != M0 )\n}",
        "recursionDepth": 20,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P112 ?x1 .\n?x1 wdt:P40|wdt:P355 wd:Q270864 .\n?x1 wdt:P26 wd:Q270864 .\nFILTER ( ?x1 != wd:Q270864 )\n}LIMIT 1",
        "questionWithBrackets": "What was founded by [Sitamun] 's parent and spouse"
    },
    {
        "questionIdx": 179883,
        "questionPatternModEntities": "What was founded by M0 's spouse and parent",
        "questionTemplate": "What was [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] and [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x1 P1 M0 .\n?x1 P2 M0 .\nFILTER ( ?x1 != M0 )\n}",
        "recursionDepth": 20,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P112 ?x1 .\n?x1 wdt:P40|wdt:P355 wd:Q270864 .\n?x1 wdt:P26 wd:Q270864 .\nFILTER ( ?x1 != wd:Q270864 )\n}LIMIT 1",
        "questionWithBrackets": "What was founded by [Sitamun] 's spouse and parent"
    },
    {
        "questionIdx": 179890,
        "questionPatternModEntities": "What was founded by M3 's employee 's parent , founded by M0 , and founded by M1 and M2",
        "questionTemplate": "What was [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x1 P1 ?x2 .\n?x2 P2 M3\n}",
        "recursionDepth": 43,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P112 ?x1 .\n?x0 wdt:P112 wd:Q855 .\n?x0 wdt:P112 wd:Q1394 .\n?x0 wdt:P112 wd:Q33391 .\n?x1 wdt:P40|wdt:P355 ?x2 .\n?x2 wdt:P108 wd:Q13164\n}",
        "questionWithBrackets": "What was founded by [Moscow State University] 's employee 's parent , founded by [Leon Trotsky] , and founded by [Vladimir Lenin] and [Joseph Stalin]"
    },
    {
        "questionIdx": 179891,
        "questionPatternModEntities": "What was founded by M0 's Mexican sibling",
        "questionTemplate": "What was [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x1 P1 M0 .\n?x1 P2 M1 .\nFILTER ( ?x1 != M0 )\n}",
        "recursionDepth": 20,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P112 ?x1 .\n?x1 wdt:P27 wd:Q96 .\n?x1 wdt:P3373 wd:Q2436982 .\nFILTER ( ?x1 != wd:Q2436982 )\n}LIMIT 1",
        "questionWithBrackets": "What was founded by [D\u00e1maso C\u00e1rdenas del R\u00edo] 's Mexican sibling"
    },
    {
        "questionIdx": 179892,
        "questionPatternModEntities": "What was founded by M0 's female sibling",
        "questionTemplate": "What was [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x1 P1 M0 .\n?x1 P2 M1 .\nFILTER ( ?x1 != M0 )\n}",
        "recursionDepth": 20,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P112 ?x1 .\n?x1 wdt:P21 wd:Q6581072 .\n?x1 wdt:P3373 wd:Q3360333 .\nFILTER ( ?x1 != wd:Q3360333 )\n}LIMIT 1",
        "questionWithBrackets": "What was founded by [Paddy Bush] 's female sibling"
    },
    {
        "questionIdx": 179900,
        "questionPatternModEntities": "What was founded by M0 , founded by a employee of M2 and M3 , and founded by M1",
        "questionTemplate": "What was [VP_SIMPLE] by [entity] , [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity] and [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x1 P1 M2 .\n?x1 P1 M3\n}",
        "recursionDepth": 41,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P112 ?x1 .\n?x0 wdt:P112 wd:Q180 .\n?x0 wdt:P112 wd:Q181 .\n?x1 wdt:P108 wd:Q17458 .\n?x1 wdt:P108 wd:Q935818\n}",
        "questionWithBrackets": "What was founded by [Wikimedia Foundation] , founded by a employee of [Bomis] and [Nupedia] , and founded by [Jimmy Wales]"
    },
    {
        "questionIdx": 179904,
        "questionPatternModEntities": "What was founded by M0 's sibling and spouse",
        "questionTemplate": "What was [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] and [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x1 P1 M0 .\n?x1 P2 M0 .\nFILTER ( ?x1 != M0 ) .\nFILTER ( ?x1 != M0 )\n}",
        "recursionDepth": 20,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P112 ?x1 .\n?x1 wdt:P3373 wd:Q449452 .\n?x1 wdt:P26 wd:Q449452 .\nFILTER ( ?x1 != wd:Q449452 ) .\nFILTER ( ?x1 != wd:Q449452 )\n}LIMIT 1",
        "questionWithBrackets": "What was founded by [Sunandha Kumariratana] 's sibling and spouse"
    },
    {
        "questionIdx": 179905,
        "questionPatternModEntities": "What was founded by M0 's spouse and sibling",
        "questionTemplate": "What was [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] and [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x1 P1 M0 .\n?x1 P2 M0 .\nFILTER ( ?x1 != M0 ) .\nFILTER ( ?x1 != M0 )\n}",
        "recursionDepth": 20,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P112 ?x1 .\n?x1 wdt:P3373 wd:Q225845 .\n?x1 wdt:P26 wd:Q225845 .\nFILTER ( ?x1 != wd:Q225845 ) .\nFILTER ( ?x1 != wd:Q225845 )\n}LIMIT 1",
        "questionWithBrackets": "What was founded by [Kiya] 's spouse and sibling"
    },
    {
        "questionIdx": 179910,
        "questionPatternModEntities": "What was founded by M0 and M1 and founded by M2 's child",
        "questionTemplate": "What was [VP_SIMPLE] by [entity] and [entity] and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x1 P1 M2\n}",
        "recursionDepth": 30,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P112 ?x1 .\n?x0 wdt:P112 wd:Q373087 .\n?x0 wdt:P112 wd:Q2207432 .\n?x1 wdt:P749 wd:Q20800404\n}",
        "questionWithBrackets": "What was founded by [Society of Composers, Authors and Music Publishers of Canada] and [American Society of Composers, Authors and Publishers] and founded by [Alphabet Inc.] 's child"
    },
    {
        "questionIdx": 179958,
        "questionPatternModEntities": "What was founded by M0 's employee",
        "questionTemplate": "What was [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x1 P1 M0\n}",
        "recursionDepth": 15,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P112 ?x1 .\n?x1 wdt:P108 wd:Q131252\n}LIMIT 1",
        "questionWithBrackets": "What was founded by [University of Chicago] 's employee"
    },
    {
        "questionIdx": 179960,
        "questionPatternModEntities": "What was founded by M1 's British sibling 's spouse and founded by M0",
        "questionTemplate": "What was [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] 's [ROLE_SIMPLE] and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P0 M0 .\n?x1 P1 ?x2 .\n?x2 P2 M1 .\n?x2 P3 M2 .\nFILTER ( ?x1 != ?x2 ) .\nFILTER ( ?x2 != M1 )\n}",
        "recursionDepth": 35,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P112 ?x1 .\n?x0 wdt:P112 wd:Q882 .\n?x1 wdt:P26 ?x2 .\n?x2 wdt:P27 wd:Q145 .\n?x2 wdt:P3373 wd:Q5407585 .\nFILTER ( ?x1 != ?x2 ) .\nFILTER ( ?x2 != wd:Q5407585 )\n}",
        "questionWithBrackets": "What was founded by [Eugene O'Neill, Jr.] 's British sibling 's spouse and founded by [Charlie Chaplin]"
    },
    {
        "questionIdx": 179963,
        "questionPatternModEntities": "What was founded by M0 and founded by a male spouse of M2",
        "questionTemplate": "What was [VP_SIMPLE] by [entity] and [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P0 M0 .\n?x1 P1 M1 .\n?x1 P2 M2 .\nFILTER ( ?x1 != M2 )\n}",
        "recursionDepth": 33,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P112 ?x1 .\n?x0 wdt:P112 wd:Q444 .\n?x1 wdt:P21 wd:Q6581097 .\n?x1 wdt:P26 wd:Q468844 .\nFILTER ( ?x1 != wd:Q468844 )\n}",
        "questionWithBrackets": "What was founded by [Lech Wa\u0142\u0119sa] and founded by a male spouse of [Danuta Wa\u0142\u0119sa]"
    },
    {
        "questionIdx": 179983,
        "questionPatternModEntities": "What was founded by M0 's male employee",
        "questionTemplate": "What was [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x1 P1 M0 .\n?x1 P2 M1\n}",
        "recursionDepth": 20,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P112 ?x1 .\n?x1 wdt:P108 wd:Q131252 .\n?x1 wdt:P21 wd:Q6581097\n}LIMIT 1",
        "questionWithBrackets": "What was founded by [University of Chicago] 's male employee"
    },
    {
        "questionIdx": 180020,
        "questionPatternModEntities": "What was founded by M3 's employee 's spouse , founded by M0 , and founded by M1 and M2",
        "questionTemplate": "What was [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x1 P1 ?x2 .\n?x2 P2 M3 .\nFILTER ( ?x1 != ?x2 )\n}",
        "recursionDepth": 43,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P112 ?x1 .\n?x0 wdt:P112 wd:Q2920243 .\n?x0 wdt:P112 wd:Q4172016 .\n?x0 wdt:P112 wd:Q181 .\n?x1 wdt:P26 ?x2 .\n?x2 wdt:P108 wd:Q5503246 .\nFILTER ( ?x1 != ?x2 )\n}",
        "questionWithBrackets": "What was founded by [Freud Communications] 's employee 's spouse , founded by [Jimmy Wales] , and founded by [Michael E. Davis] and [Tim Shell]"
    },
    {
        "questionIdx": 180023,
        "questionPatternModEntities": "What was founded by M0 , founded by M1 , founded by M2 , and founded by M3 's sibling",
        "questionTemplate": "What was [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x1 P1 M3 .\nFILTER ( ?x1 != M3 )\n}",
        "recursionDepth": 44,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P112 ?x1 .\n?x0 wdt:P112 wd:Q7793856 .\n?x0 wdt:P112 wd:Q5314471 .\n?x0 wdt:P112 wd:Q607 .\n?x1 wdt:P3373 wd:Q22339052 .\nFILTER ( ?x1 != wd:Q22339052 )\n}",
        "questionWithBrackets": "What was founded by [Michael Bloomberg] , founded by [Duncan MacMillan] , founded by [Thomas Secunda] , and founded by [Marjorie Tiven] 's sibling"
    },
    {
        "questionIdx": 180037,
        "questionPatternModEntities": "What was founded by M0 , founded by M3 's employee , founded by M1 , and founded by M2",
        "questionTemplate": "What was [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x1 P1 M3\n}",
        "recursionDepth": 44,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P112 ?x1 .\n?x0 wdt:P112 wd:Q180 .\n?x0 wdt:P112 wd:Q181 .\n?x0 wdt:P112 wd:Q185 .\n?x1 wdt:P108 wd:Q935818\n}",
        "questionWithBrackets": "What was founded by [Larry Sanger] , founded by [Bomis] 's employee , founded by [Jimmy Wales] , and founded by [Wikimedia Foundation]"
    },
    {
        "questionIdx": 180038,
        "questionPatternModEntities": "What was founded by M0 's sibling",
        "questionTemplate": "What was [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x1 P1 M0 .\nFILTER ( ?x1 != M0 )\n}",
        "recursionDepth": 15,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P112 ?x1 .\n?x1 wdt:P3373 wd:Q850421 .\nFILTER ( ?x1 != wd:Q850421 )\n}LIMIT 1",
        "questionWithBrackets": "What was founded by [Betty Washington Lewis] 's sibling"
    },
    {
        "questionIdx": 180040,
        "questionPatternModEntities": "What was founded by M1 's female spouse",
        "questionTemplate": "What was [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x1 P1 M0 .\n?x1 P2 M1 .\nFILTER ( ?x1 != M1 )\n}",
        "recursionDepth": 20,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P112 ?x1 .\n?x1 wdt:P21 wd:Q6581072 .\n?x1 wdt:P26 wd:Q896740 .\nFILTER ( ?x1 != wd:Q896740 )\n}LIMIT 1",
        "questionWithBrackets": "What was founded by [Brad Armstrong] 's female spouse"
    },
    {
        "questionIdx": 180042,
        "questionPatternModEntities": "What was founded by M1 's sibling 's sibling and founded by M0",
        "questionTemplate": "What was [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE] and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P0 M0 .\n?x1 P1 ?x2 .\n?x2 P1 M1 .\nFILTER ( ?x1 != ?x2 ) .\nFILTER ( ?x2 != M1 )\n}",
        "recursionDepth": 30,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P112 ?x1 .\n?x0 wdt:P112 wd:Q23 .\n?x1 wdt:P3373 ?x2 .\n?x2 wdt:P3373 wd:Q850421 .\nFILTER ( ?x1 != ?x2 ) .\nFILTER ( ?x2 != wd:Q850421 )\n}",
        "questionWithBrackets": "What was founded by [Betty Washington Lewis] 's sibling 's sibling and founded by [George Washington]"
    },
    {
        "questionIdx": 180045,
        "questionPatternModEntities": "What was founded by M3 's sibling , founded by M0 , founded by a parent of M2 , and founded by M1",
        "questionTemplate": "What was [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] , [VP_SIMPLE] by [entity] , [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P0 ?x2 .\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x1 P1 M2 .\n?x2 P2 M3 .\nFILTER ( ?x2 != M3 )\n}",
        "recursionDepth": 50,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P112 ?x1 .\n?x0 wdt:P112 ?x2 .\n?x0 wdt:P112 wd:Q440 .\n?x0 wdt:P112 wd:Q2026955 .\n?x1 wdt:P40|wdt:P355 wd:Q451359 .\n?x2 wdt:P3373 wd:Q507514 .\nFILTER ( ?x2 != wd:Q507514 )\n}",
        "questionWithBrackets": "What was founded by [Laura Allende] 's sibling , founded by [Marmaduke Grove] , founded by a parent of [Mar\u00eda Isabel Allende] , and founded by [Salvador Allende]"
    },
    {
        "questionIdx": 180052,
        "questionPatternModEntities": "What was founded by M0 , founded by a employee of M3 and M4 , founded by M1 , and founded by M2",
        "questionTemplate": "What was [VP_SIMPLE] by [entity] , [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity] and [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x1 P1 M3 .\n?x1 P1 M4\n}",
        "recursionDepth": 50,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P112 ?x1 .\n?x0 wdt:P112 wd:Q180 .\n?x0 wdt:P112 wd:Q15176445 .\n?x0 wdt:P112 wd:Q181 .\n?x1 wdt:P108 wd:Q935818 .\n?x1 wdt:P108 wd:Q17458\n}",
        "questionWithBrackets": "What was founded by [Jimmy Wales] , founded by a employee of [Bomis] and [Nupedia] , founded by [Wikimedia Foundation] , and founded by [Daniel Alston]"
    },
    {
        "questionIdx": 180055,
        "questionPatternModEntities": "What was founded by M1 's child and founded by M0",
        "questionTemplate": "What was [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P0 M0 .\n?x1 P1 M1\n}",
        "recursionDepth": 26,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P112 ?x1 .\n?x0 wdt:P112 wd:Q95 .\n?x1 wdt:P749 wd:Q20800404\n}",
        "questionWithBrackets": "What was founded by [Alphabet Inc.] 's child and founded by [Google]"
    },
    {
        "questionIdx": 180074,
        "questionPatternModEntities": "What was founded by M0 , founded by M1 , and founded by a Dutch spouse of M3",
        "questionTemplate": "What was [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x1 P1 M2 .\n?x1 P2 M3 .\nFILTER ( ?x1 != M3 )\n}",
        "recursionDepth": 42,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P112 ?x1 .\n?x0 wdt:P112 wd:Q80976 .\n?x0 wdt:P112 wd:Q243419 .\n?x1 wdt:P27 wd:Q29999 .\n?x1 wdt:P26 wd:Q154946 .\nFILTER ( ?x1 != wd:Q154946 )\n}",
        "questionWithBrackets": "What was founded by [Prince Philip, Duke of Edinburgh] , founded by [Julian Huxley] , and founded by a Dutch spouse of [Juliana of the Netherlands]"
    },
    {
        "questionIdx": 180077,
        "questionPatternModEntities": "What was founded by M0 and founded by a French employee of M1",
        "questionTemplate": "What was [VP_SIMPLE] by [entity] and [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P0 M0 .\n?x1 P1 M1 .\n?x1 P2 M2\n}",
        "recursionDepth": 33,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P112 ?x1 .\n?x0 wdt:P112 wd:Q529 .\n?x1 wdt:P108 wd:Q83259 .\n?x1 wdt:P27 wd:Q142\n}",
        "questionWithBrackets": "What was founded by [Louis Pasteur] and founded by a French employee of [\u00c9cole normale sup\u00e9rieure]"
    },
    {
        "questionIdx": 180082,
        "questionPatternModEntities": "What was founded by M3 's employee , founded by M2 's parent , and founded by M0 and M1",
        "questionTemplate": "What was [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] , [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] , and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P0 ?x2 .\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x1 P1 M2 .\n?x2 P2 M3\n}",
        "recursionDepth": 43,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P112 ?x1 .\n?x0 wdt:P112 ?x2 .\n?x0 wdt:P112 wd:Q181 .\n?x0 wdt:P112 wd:Q15176445 .\n?x1 wdt:P40|wdt:P355 wd:Q106204654 .\n?x2 wdt:P108 wd:Q935818\n}",
        "questionWithBrackets": "What was founded by [Bomis] 's employee , founded by [Wikimedia, LLC] 's parent , and founded by [Jimmy Wales] and [Daniel Alston]"
    },
    {
        "questionIdx": 180084,
        "questionPatternModEntities": "What was founded by M0 , founded by M1 , founded by M2 , and founded by M3 's American sibling",
        "questionTemplate": "What was [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x1 P1 M3 .\n?x1 P2 M4 .\nFILTER ( ?x1 != M3 )\n}",
        "recursionDepth": 49,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P112 ?x1 .\n?x0 wdt:P112 wd:Q607 .\n?x0 wdt:P112 wd:Q5314471 .\n?x0 wdt:P112 wd:Q7793856 .\n?x1 wdt:P27 wd:Q30 .\n?x1 wdt:P3373 wd:Q22339052 .\nFILTER ( ?x1 != wd:Q22339052 )\n}",
        "questionWithBrackets": "What was founded by [Michael Bloomberg] , founded by [Duncan MacMillan] , founded by [Thomas Secunda] , and founded by [Marjorie Tiven] 's American sibling"
    },
    {
        "questionIdx": 180098,
        "questionPatternModEntities": "What was founded by M1 's sibling 's female spouse",
        "questionTemplate": "What was [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x1 P1 M0 .\n?x1 P2 ?x2 .\n?x2 P3 M1 .\nFILTER ( ?x1 != ?x2 ) .\nFILTER ( ?x2 != M1 )\n}",
        "recursionDepth": 24,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P112 ?x1 .\n?x1 wdt:P21 wd:Q6581072 .\n?x1 wdt:P26 ?x2 .\n?x2 wdt:P3373 wd:Q297744 .\nFILTER ( ?x1 != ?x2 ) .\nFILTER ( ?x2 != wd:Q297744 )\n}LIMIT 1",
        "questionWithBrackets": "What was founded by [Chris Penn] 's sibling 's female spouse"
    },
    {
        "questionIdx": 180113,
        "questionPatternModEntities": "What was founded by M0 and founded by M1 's parent",
        "questionTemplate": "What was [VP_SIMPLE] by [entity] and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P0 M0 .\n?x1 P1 M1\n}",
        "recursionDepth": 26,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P112 ?x1 .\n?x0 wdt:P112 wd:Q444 .\n?x1 wdt:P40|wdt:P355 wd:Q1392390\n}",
        "questionWithBrackets": "What was founded by [Lech Wa\u0142\u0119sa] and founded by [Jaros\u0142aw Wa\u0142\u0119sa] 's parent"
    },
    {
        "questionIdx": 180169,
        "questionPatternModEntities": "What was founded by M0 's sibling 's parent",
        "questionTemplate": "What was [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x1 P1 ?x2 .\n?x2 P2 M0 .\nFILTER ( ?x2 != M0 )\n}",
        "recursionDepth": 19,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P112 ?x1 .\n?x1 wdt:P40|wdt:P355 ?x2 .\n?x2 wdt:P3373 wd:Q135687 .\nFILTER ( ?x2 != wd:Q135687 )\n}LIMIT 1",
        "questionWithBrackets": "What was founded by [Tad Lincoln] 's sibling 's parent"
    },
    {
        "questionIdx": 180173,
        "questionPatternModEntities": "What was founded by M0 's employee 's sibling",
        "questionTemplate": "What was [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x1 P1 ?x2 .\n?x2 P2 M0 .\nFILTER ( ?x1 != ?x2 )\n}",
        "recursionDepth": 19,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P112 ?x1 .\n?x1 wdt:P3373 ?x2 .\n?x2 wdt:P108 wd:Q217439 .\nFILTER ( ?x1 != ?x2 )\n}LIMIT 1",
        "questionWithBrackets": "What was founded by [University of Hawaii] 's employee 's sibling"
    },
    {
        "questionIdx": 180175,
        "questionPatternModEntities": "What was founded by M2 's female employee , founded by M0 , and founded by M1",
        "questionTemplate": "What was [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x1 P1 M2 .\n?x1 P2 M3\n}",
        "recursionDepth": 40,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P112 ?x1 .\n?x0 wdt:P112 wd:Q1744 .\n?x0 wdt:P112 wd:Q5496856 .\n?x1 wdt:P108 wd:Q847743 .\n?x1 wdt:P21 wd:Q6581072\n}",
        "questionWithBrackets": "What was founded by [Dunkin'] 's female employee , founded by [Madonna] , and founded by [Freddy DeMann]"
    },
    {
        "questionIdx": 180182,
        "questionPatternModEntities": "What was founded by M0 's female employee",
        "questionTemplate": "What was [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x1 P1 M0 .\n?x1 P2 M1\n}",
        "recursionDepth": 20,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P112 ?x1 .\n?x1 wdt:P108 wd:Q1070333 .\n?x1 wdt:P21 wd:Q6581072\n}LIMIT 1",
        "questionWithBrackets": "What was founded by [University of Arkansas] 's female employee"
    },
    {
        "questionIdx": 180186,
        "questionPatternModEntities": "What was founded by M0 , M1 , M2 , and M3",
        "questionTemplate": "What was [VP_SIMPLE] by [entity] , [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P0 M3\n}",
        "recursionDepth": 21,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P112 wd:Q43 .\n?x0 wdt:P112 wd:Q258 .\n?x0 wdt:P112 wd:Q16 .\n?x0 wdt:P112 wd:Q20\n}",
        "questionWithBrackets": "What was founded by [Canada] , [Norway] , [South Africa] , and [Turkey]"
    },
    {
        "questionIdx": 180193,
        "questionPatternModEntities": "What was founded by M0 and founded by a British spouse of M2",
        "questionTemplate": "What was [VP_SIMPLE] by [entity] and [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P0 M0 .\n?x1 P1 M1 .\n?x1 P2 M2 .\nFILTER ( ?x1 != M2 )\n}",
        "recursionDepth": 33,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P112 ?x1 .\n?x0 wdt:P112 wd:Q42 .\n?x1 wdt:P27 wd:Q145 .\n?x1 wdt:P26 wd:Q14623681 .\nFILTER ( ?x1 != wd:Q14623681 )\n}",
        "questionWithBrackets": "What was founded by [Douglas Adams] and founded by a British spouse of [Jane Belson]"
    },
    {
        "questionIdx": 180197,
        "questionPatternModEntities": "What was founded by M2 's male employee and founded by M0 and M1",
        "questionTemplate": "What was [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x1 P1 M2 .\n?x1 P2 M3\n}",
        "recursionDepth": 35,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P112 ?x1 .\n?x0 wdt:P112 wd:Q362485 .\n?x0 wdt:P112 wd:Q363197 .\n?x1 wdt:P108 wd:Q185246 .\n?x1 wdt:P21 wd:Q6581097\n}",
        "questionWithBrackets": "What was founded by [Uppsala University] 's male employee and founded by [Sten Carl Bielke] and [M\u00e5rten Triewald]"
    },
    {
        "questionIdx": 180199,
        "questionPatternModEntities": "What was founded by M1 's Swedish spouse",
        "questionTemplate": "What was [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x1 P1 M0 .\n?x1 P2 M1 .\nFILTER ( ?x1 != M1 )\n}",
        "recursionDepth": 20,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P112 ?x1 .\n?x1 wdt:P27 wd:Q34 .\n?x1 wdt:P26 wd:Q3473264 .\nFILTER ( ?x1 != wd:Q3473264 )\n}LIMIT 1",
        "questionWithBrackets": "What was founded by [Sara Elisabeth Mor\u00e6a] 's Swedish spouse"
    },
    {
        "questionIdx": 180208,
        "questionPatternModEntities": "What was founded by M0 and founded by a female sibling of M1",
        "questionTemplate": "What was [VP_SIMPLE] by [entity] and [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P0 M0 .\n?x1 P1 M1 .\n?x1 P2 M2 .\nFILTER ( ?x1 != M1 )\n}",
        "recursionDepth": 33,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P112 ?x1 .\n?x0 wdt:P112 wd:Q567 .\n?x1 wdt:P21 wd:Q6581072 .\n?x1 wdt:P3373 wd:Q56119579 .\nFILTER ( ?x1 != wd:Q56119579 )\n}",
        "questionWithBrackets": "What was founded by [Angela Merkel] and founded by a female sibling of [Marcus Kasner]"
    },
    {
        "questionIdx": 180211,
        "questionPatternModEntities": "What was founded by M0 and founded by M2 's female spouse",
        "questionTemplate": "What was [VP_SIMPLE] by [entity] and [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P0 M0 .\n?x1 P1 M1 .\n?x1 P2 M2 .\nFILTER ( ?x1 != M2 )\n}",
        "recursionDepth": 31,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P112 ?x1 .\n?x0 wdt:P112 wd:Q567 .\n?x1 wdt:P21 wd:Q6581072 .\n?x1 wdt:P26 wd:Q62085 .\nFILTER ( ?x1 != wd:Q62085 )\n}",
        "questionWithBrackets": "What was founded by [Angela Merkel] and founded by [Joachim Sauer] 's female spouse"
    },
    {
        "questionIdx": 180220,
        "questionPatternModEntities": "What was founded by M0 and M1 , founded by a Japanese employee of M2 , and founded by M4 's spouse",
        "questionTemplate": "What was [VP_SIMPLE] by [entity] and [entity] , [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] , and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P0 ?x2 .\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x1 P1 M2 .\n?x1 P2 M3 .\n?x2 P3 M4 .\nFILTER ( ?x2 != M4 )\n}",
        "recursionDepth": 50,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P112 ?x1 .\n?x0 wdt:P112 ?x2 .\n?x0 wdt:P112 wd:Q713511 .\n?x0 wdt:P112 wd:Q55400 .\n?x1 wdt:P108 wd:Q182950 .\n?x1 wdt:P27 wd:Q17 .\n?x2 wdt:P26 wd:Q2828975 .\nFILTER ( ?x2 != wd:Q2828975 )\n}",
        "questionWithBrackets": "What was founded by [Hayao Miyazaki] and [Toshio Suzuki] , founded by a Japanese employee of [Studio Ghibli] , and founded by [Akemi \u014cta] 's spouse"
    },
    {
        "questionIdx": 180222,
        "questionPatternModEntities": "What was founded by M0 and founded by M2 's Japanese parent",
        "questionTemplate": "What was [VP_SIMPLE] by [entity] and [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P0 M0 .\n?x1 P1 M1 .\n?x1 P2 M2\n}",
        "recursionDepth": 31,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P112 ?x1 .\n?x0 wdt:P112 wd:Q12903 .\n?x1 wdt:P40|wdt:P355 wd:Q11373256 .\n?x1 wdt:P27 wd:Q17\n}",
        "questionWithBrackets": "What was founded by [Hisashi Inoue] and founded by [Miyako Inoue] 's Japanese parent"
    },
    {
        "questionIdx": 180225,
        "questionPatternModEntities": "What was founded by M0 , M1 , and M2 and founded by a Japanese employee of M3",
        "questionTemplate": "What was [VP_SIMPLE] by [entity] , [entity] , and [entity] and [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x1 P1 M3 .\n?x1 P2 M4\n}",
        "recursionDepth": 40,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P112 ?x1 .\n?x0 wdt:P112 wd:Q900501 .\n?x0 wdt:P112 wd:Q375424 .\n?x0 wdt:P112 wd:Q6137564 .\n?x1 wdt:P108 wd:Q1203676 .\n?x1 wdt:P27 wd:Q17\n}",
        "questionWithBrackets": "What was founded by [Toshio Okada] , [Shinji Higuchi] , and [Takami Akai] and founded by a Japanese employee of [Khara]"
    },
    {
        "questionIdx": 180242,
        "questionPatternModEntities": "What was founded by a British sibling of M0",
        "questionTemplate": "What was [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x1 P1 M0 .\n?x1 P2 M1 .\nFILTER ( ?x1 != M0 )\n}",
        "recursionDepth": 22,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P112 ?x1 .\n?x1 wdt:P27 wd:Q145 .\n?x1 wdt:P3373 wd:Q14623673 .\nFILTER ( ?x1 != wd:Q14623673 )\n}LIMIT 1",
        "questionWithBrackets": "What was founded by a British sibling of [Susan Adams]"
    },
    {
        "questionIdx": 180243,
        "questionPatternModEntities": "What was founded by a British spouse of M1",
        "questionTemplate": "What was [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x1 P1 M0 .\n?x1 P2 M1 .\nFILTER ( ?x1 != M1 )\n}",
        "recursionDepth": 22,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P112 ?x1 .\n?x1 wdt:P27 wd:Q145 .\n?x1 wdt:P26 wd:Q14623681 .\nFILTER ( ?x1 != wd:Q14623681 )\n}LIMIT 1",
        "questionWithBrackets": "What was founded by a British spouse of [Jane Belson]"
    },
    {
        "questionIdx": 180266,
        "questionPatternModEntities": "What was founded by a Chinese parent of M1",
        "questionTemplate": "What was [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x1 P1 M0 .\n?x1 P2 M1\n}",
        "recursionDepth": 22,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P112 ?x1 .\n?x1 wdt:P40|wdt:P355 wd:Q28415575 .\n?x1 wdt:P27 wd:Q148\n}LIMIT 1",
        "questionWithBrackets": "What was founded by a Chinese parent of [Steven Zhang]"
    },
    {
        "questionIdx": 180298,
        "questionPatternModEntities": "What was founded by a Japanese parent of M2 and founded by M0",
        "questionTemplate": "What was [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P0 M0 .\n?x1 P1 M1 .\n?x1 P2 M2\n}",
        "recursionDepth": 33,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P112 ?x1 .\n?x0 wdt:P112 wd:Q12903 .\n?x1 wdt:P40|wdt:P355 wd:Q11373256 .\n?x1 wdt:P27 wd:Q17\n}",
        "questionWithBrackets": "What was founded by a Japanese parent of [Miyako Inoue] and founded by [Hisashi Inoue]"
    },
    {
        "questionIdx": 180301,
        "questionPatternModEntities": "What was founded by a Japanese spouse of M1",
        "questionTemplate": "What was [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x1 P1 M0 .\n?x1 P2 M1 .\nFILTER ( ?x1 != M1 )\n}",
        "recursionDepth": 22,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P112 ?x1 .\n?x1 wdt:P27 wd:Q17 .\n?x1 wdt:P26 wd:Q11629437 .\nFILTER ( ?x1 != wd:Q11629437 )\n}LIMIT 1",
        "questionWithBrackets": "What was founded by a Japanese spouse of [Yoshiko Nishidate]"
    },
    {
        "questionIdx": 180308,
        "questionPatternModEntities": "What was founded by a Spanish sibling of M1 and founded by M0",
        "questionTemplate": "What was [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P0 M0 .\n?x1 P1 M1 .\n?x1 P2 M2 .\nFILTER ( ?x1 != M1 )\n}",
        "recursionDepth": 33,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P112 ?x1 .\n?x0 wdt:P112 wd:Q36234 .\n?x1 wdt:P27 wd:Q29 .\n?x1 wdt:P3373 wd:Q223293 .\nFILTER ( ?x1 != wd:Q223293 )\n}",
        "questionWithBrackets": "What was founded by a Spanish sibling of [Philip, Duke of Parma] and founded by [Charles III of Spain]"
    },
    {
        "questionIdx": 180325,
        "questionPatternModEntities": "What was founded by a child of M0",
        "questionTemplate": "What was [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x1 P1 M0\n}",
        "recursionDepth": 17,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P112 ?x1 .\n?x1 wdt:P749 wd:Q20800404\n}LIMIT 1",
        "questionWithBrackets": "What was founded by a child of [Alphabet Inc.]"
    },
    {
        "questionIdx": 180425,
        "questionPatternModEntities": "What was founded by a female sibling of M0",
        "questionTemplate": "What was [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x1 P1 M0 .\n?x1 P2 M1 .\nFILTER ( ?x1 != M0 )\n}",
        "recursionDepth": 22,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P112 ?x1 .\n?x1 wdt:P21 wd:Q6581072 .\n?x1 wdt:P3373 wd:Q3360333 .\nFILTER ( ?x1 != wd:Q3360333 )\n}LIMIT 1",
        "questionWithBrackets": "What was founded by a female sibling of [Paddy Bush]"
    },
    {
        "questionIdx": 180552,
        "questionPatternModEntities": "What was founded by a male spouse of M2 and founded by M0",
        "questionTemplate": "What was [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P0 M0 .\n?x1 P1 M1 .\n?x1 P2 M2 .\nFILTER ( ?x1 != M2 )\n}",
        "recursionDepth": 33,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P112 ?x1 .\n?x0 wdt:P112 wd:Q444 .\n?x1 wdt:P21 wd:Q6581097 .\n?x1 wdt:P26 wd:Q468844 .\nFILTER ( ?x1 != wd:Q468844 )\n}",
        "questionWithBrackets": "What was founded by a male spouse of [Danuta Wa\u0142\u0119sa] and founded by [Lech Wa\u0142\u0119sa]"
    },
    {
        "questionIdx": 180631,
        "questionPatternModEntities": "What was founded by a sibling and parent of M0",
        "questionTemplate": "What was [VP_SIMPLE] by a [ROLE_SIMPLE] and [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x1 P1 M0 .\n?x1 P2 M0 .\nFILTER ( ?x1 != M0 )\n}",
        "recursionDepth": 22,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P112 ?x1 .\n?x1 wdt:P40|wdt:P355 wd:Q23930949 .\n?x1 wdt:P3373 wd:Q23930949 .\nFILTER ( ?x1 != wd:Q23930949 )\n}LIMIT 1",
        "questionWithBrackets": "What was founded by a sibling and parent of [Alpais]"
    },
    {
        "questionIdx": 180639,
        "questionPatternModEntities": "What was founded by a spouse and parent of M0",
        "questionTemplate": "What was [VP_SIMPLE] by a [ROLE_SIMPLE] and [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x1 P1 M0 .\n?x1 P2 M0 .\nFILTER ( ?x1 != M0 )\n}",
        "recursionDepth": 22,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P112 ?x1 .\n?x1 wdt:P40|wdt:P355 wd:Q270864 .\n?x1 wdt:P26 wd:Q270864 .\nFILTER ( ?x1 != wd:Q270864 )\n}LIMIT 1",
        "questionWithBrackets": "What was founded by a spouse and parent of [Sitamun]"
    },
    {
        "questionIdx": 180687,
        "questionPatternModEntities": "What was founded by a Italian sibling of M2 and founded by M0 and M1",
        "questionTemplate": "What was [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x1 P1 M2 .\n?x1 P2 M3 .\nFILTER ( ?x1 != M2 )\n}",
        "recursionDepth": 37,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P112 ?x1 .\n?x0 wdt:P112 wd:Q25106 .\n?x0 wdt:P112 wd:Q1052374 .\n?x1 wdt:P27 wd:Q38 .\n?x1 wdt:P3373 wd:Q73802232 .\nFILTER ( ?x1 != wd:Q73802232 )\n}",
        "questionWithBrackets": "What was founded by a Italian sibling of [Mauro De Andr\u00e9] and founded by [Dori Ghezzi] and [Fabrizio De Andr\u00e9]"
    },
    {
        "questionIdx": 180776,
        "questionPatternModEntities": "What was founded by M0 and M1 and founded by a female spouse of M3",
        "questionTemplate": "What was [VP_SIMPLE] by [entity] and [entity] and [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x1 P1 M2 .\n?x1 P2 M3 .\nFILTER ( ?x1 != M3 )\n}",
        "recursionDepth": 37,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P112 ?x1 .\n?x0 wdt:P112 wd:Q400 .\n?x0 wdt:P112 wd:Q40263 .\n?x1 wdt:P21 wd:Q6581072 .\n?x1 wdt:P26 wd:Q896740 .\nFILTER ( ?x1 != wd:Q896740 )\n}",
        "questionWithBrackets": "What was founded by [Jenna Jameson] and [Jay Grdina] and founded by a female spouse of [Brad Armstrong]"
    },
    {
        "questionIdx": 180788,
        "questionPatternModEntities": "What was produced and directed by M0 's sibling",
        "questionTemplate": "What was [VP_SIMPLE] and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x1 P2 M0 .\nFILTER ( ?x1 != M0 )\n}",
        "recursionDepth": 22,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 ?x1 .\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x1 wdt:P3373 wd:Q606780 .\nFILTER ( ?x1 != wd:Q606780 )\n}LIMIT 1",
        "questionWithBrackets": "What was produced and directed by [Sydney Chaplin] 's sibling"
    },
    {
        "questionIdx": 180805,
        "questionPatternModEntities": "What was produced and directed by M0 , M1 , M2 , and M3",
        "questionTemplate": "What was [VP_SIMPLE] and [VP_SIMPLE] by [entity] , [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P0 M3 .\n?x0 P1 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\n?x0 P1 M3\n}",
        "recursionDepth": 28,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 wd:Q4235 .\n?x0 wdt:P57 wd:Q7440949 .\n?x0 wdt:P57 wd:Q5127380 .\n?x0 wdt:P57 wd:Q40220 .\n?x0 wdt:P162|wdt:P272 wd:Q4235 .\n?x0 wdt:P162|wdt:P272 wd:Q7440949 .\n?x0 wdt:P162|wdt:P272 wd:Q5127380 .\n?x0 wdt:P162|wdt:P272 wd:Q40220\n}",
        "questionWithBrackets": "What was produced and directed by [Miley Cyrus] , [Sean Donnellan] , [Clark Spencer] , and [Susie Essman]"
    },
    {
        "questionIdx": 180837,
        "questionPatternModEntities": "What was produced and edited by M0 's parent",
        "questionTemplate": "What was [VP_SIMPLE] and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x1 P2 M0\n}",
        "recursionDepth": 22,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1040 ?x1 .\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x1 wdt:P40|wdt:P355 wd:Q1710546\n}LIMIT 1",
        "questionWithBrackets": "What was produced and edited by [Juan Luis Bu\u00f1uel] 's parent"
    },
    {
        "questionIdx": 180847,
        "questionPatternModEntities": "What was produced and edited by M0 's Dutch sibling",
        "questionTemplate": "What was [VP_SIMPLE] and [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x1 P2 M0 .\n?x1 P3 M1 .\nFILTER ( ?x1 != M0 )\n}",
        "recursionDepth": 27,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1040 ?x1 .\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x1 wdt:P27 wd:Q29999 .\n?x1 wdt:P3373 wd:Q27032273 .\nFILTER ( ?x1 != wd:Q27032273 )\n}LIMIT 1",
        "questionWithBrackets": "What was produced and edited by [Johan Haanstra] 's Dutch sibling"
    },
    {
        "questionIdx": 180853,
        "questionPatternModEntities": "What was produced and edited by M0",
        "questionTemplate": "What was [VP_SIMPLE] and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M0\n}",
        "recursionDepth": 18,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1040 wd:Q55407 .\n?x0 wdt:P162|wdt:P272 wd:Q55407\n}LIMIT 1",
        "questionWithBrackets": "What was produced and edited by [Raj Kapoor]"
    },
    {
        "questionIdx": 180872,
        "questionPatternModEntities": "What was produced and edited by a parent of M0",
        "questionTemplate": "What was [VP_SIMPLE] and [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x1 P2 M0\n}",
        "recursionDepth": 24,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1040 ?x1 .\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x1 wdt:P40|wdt:P355 wd:Q1710546\n}LIMIT 1",
        "questionWithBrackets": "What was produced and edited by a parent of [Juan Luis Bu\u00f1uel]"
    },
    {
        "questionIdx": 180882,
        "questionPatternModEntities": "What was produced and executive produced by M0",
        "questionTemplate": "What was [VP_SIMPLE] and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M0\n}",
        "recursionDepth": 19,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1431 wd:Q95125 .\n?x0 wdt:P162|wdt:P272 wd:Q95125\n}LIMIT 1",
        "questionWithBrackets": "What was produced and executive produced by [James L. Brooks]"
    },
    {
        "questionIdx": 180883,
        "questionPatternModEntities": "What was produced and executive produced by M0 's sibling 's parent",
        "questionTemplate": "What was [VP_SIMPLE] and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x1 P2 ?x2 .\n?x2 P3 M0 .\nFILTER ( ?x2 != M0 )\n}",
        "recursionDepth": 27,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1431 ?x1 .\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x1 wdt:P40|wdt:P355 ?x2 .\n?x2 wdt:P3373 wd:Q105460283 .\nFILTER ( ?x2 != wd:Q105460283 )\n}LIMIT 1",
        "questionWithBrackets": "What was produced and executive produced by [Daniel Selznick] 's sibling 's parent"
    },
    {
        "questionIdx": 180884,
        "questionPatternModEntities": "What was produced and executive produced by M0 's parent",
        "questionTemplate": "What was [VP_SIMPLE] and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x1 P2 M0\n}",
        "recursionDepth": 23,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1431 ?x1 .\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x1 wdt:P40|wdt:P355 wd:Q317824\n}LIMIT 1",
        "questionWithBrackets": "What was produced and executive produced by [Kim Jong-nam] 's parent"
    },
    {
        "questionIdx": 180886,
        "questionPatternModEntities": "What was produced and executive produced by M0 and M1",
        "questionTemplate": "What was [VP_SIMPLE] and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P1 M0 .\n?x0 P1 M1\n}",
        "recursionDepth": 23,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1431 wd:Q3772 .\n?x0 wdt:P1431 wd:Q965826 .\n?x0 wdt:P162|wdt:P272 wd:Q3772 .\n?x0 wdt:P162|wdt:P272 wd:Q965826\n}",
        "questionWithBrackets": "What was produced and executive produced by [Scott Spiegel] and [Quentin Tarantino]"
    },
    {
        "questionIdx": 180928,
        "questionPatternModEntities": "What was produced and written by M0 , M1 , and M2",
        "questionTemplate": "What was [VP_SIMPLE] and [VP_SIMPLE] by [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P1 M0 .\n?x0 P1 M1 .\n?x0 P1 M2\n}",
        "recursionDepth": 25,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P162|wdt:P272 wd:Q3772 .\n?x0 wdt:P162|wdt:P272 wd:Q47284 .\n?x0 wdt:P162|wdt:P272 wd:Q358714 .\n?x0 wdt:P58 wd:Q3772 .\n?x0 wdt:P58 wd:Q47284 .\n?x0 wdt:P58 wd:Q358714\n}",
        "questionWithBrackets": "What was produced and written by [Robert Rodriguez] , [Eli Roth] , and [Quentin Tarantino]"
    },
    {
        "questionIdx": 180946,
        "questionPatternModEntities": "What was produced and written by M0 's sibling",
        "questionTemplate": "What was [VP_SIMPLE] and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x1 P2 M0 .\nFILTER ( ?x1 != M0 )\n}",
        "recursionDepth": 22,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x0 wdt:P58 ?x1 .\n?x1 wdt:P3373 wd:Q606780 .\nFILTER ( ?x1 != wd:Q606780 )\n}LIMIT 1",
        "questionWithBrackets": "What was produced and written by [Sydney Chaplin] 's sibling"
    },
    {
        "questionIdx": 181038,
        "questionPatternModEntities": "What was produced by M1 , directed by M2 and M3 , directed by M4 , and executive produced by M0",
        "questionTemplate": "What was [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] and [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P2 M2 .\n?x0 P2 M3 .\n?x0 P2 M4\n}",
        "recursionDepth": 45,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 wd:Q7117319 .\n?x0 wdt:P57 wd:Q360477 .\n?x0 wdt:P57 wd:Q678310 .\n?x0 wdt:P1431 wd:Q39829 .\n?x0 wdt:P162|wdt:P272 wd:Q63656290\n}",
        "questionWithBrackets": "What was produced by [Randy Sutter] , directed by [P. J. Pesce] and [Niels Arden Oplev] , directed by [Peter Weller] , and executive produced by [Stephen King]"
    },
    {
        "questionIdx": 181076,
        "questionPatternModEntities": "What was produced by M0 's Mexican sibling",
        "questionTemplate": "What was [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x1 P1 M0 .\n?x1 P2 M1 .\nFILTER ( ?x1 != M0 )\n}",
        "recursionDepth": 20,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x1 wdt:P27 wd:Q96 .\n?x1 wdt:P3373 wd:Q2840325 .\nFILTER ( ?x1 != wd:Q2840325 )\n}LIMIT 1",
        "questionWithBrackets": "What was produced by [Carlos Cuar\u00f3n] 's Mexican sibling"
    },
    {
        "questionIdx": 181137,
        "questionPatternModEntities": "What was produced by M4 's spouse 's sibling and executive produced by M0 , M1 , M2 , and M3",
        "questionTemplate": "What was [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE] and [VP_SIMPLE] by [entity] , [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P0 M3 .\n?x0 P1 ?x1 .\n?x1 P2 ?x2 .\n?x2 P3 M4 .\nFILTER ( ?x1 != ?x2 ) .\nFILTER ( ?x2 != M4 )\n}",
        "recursionDepth": 41,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1431 wd:Q56094 .\n?x0 wdt:P1431 wd:Q2675693 .\n?x0 wdt:P1431 wd:Q5223835 .\n?x0 wdt:P1431 wd:Q5371855 .\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x1 wdt:P3373 ?x2 .\n?x2 wdt:P26 wd:Q3525391 .\nFILTER ( ?x1 != ?x2 ) .\nFILTER ( ?x2 != wd:Q3525391 )\n}",
        "questionWithBrackets": "What was produced by [Thomas Mars] 's spouse 's sibling and executive produced by [Fred Roos] , [Darlene Caama\u00f1o] , [Emilio Diez Barroso] , and [Francis Ford Coppola]"
    },
    {
        "questionIdx": 181170,
        "questionPatternModEntities": "What was produced by M2 , distributed by M0 , and distributed by M1",
        "questionTemplate": "What was [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P1 M2\n}",
        "recursionDepth": 31,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P750 wd:Q145 .\n?x0 wdt:P750 wd:Q9589 .\n?x0 wdt:P162|wdt:P272 wd:Q79618131\n}",
        "questionWithBrackets": "What was produced by [Apocalypso Pictures] , distributed by [United Kingdom] , and distributed by [iTunes]"
    },
    {
        "questionIdx": 181189,
        "questionPatternModEntities": "What was produced by M2 , directed by M3 and M4 , executive produced by M0 , and written by M1",
        "questionTemplate": "What was [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] and [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P2 M2 .\n?x0 P3 M3 .\n?x0 P3 M4\n}",
        "recursionDepth": 45,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 wd:Q28861428 .\n?x0 wdt:P57 wd:Q3195280 .\n?x0 wdt:P1431 wd:Q8877 .\n?x0 wdt:P162|wdt:P272 wd:Q636303 .\n?x0 wdt:P58 wd:Q3481979\n}",
        "questionWithBrackets": "What was produced by [Paul Dini] , directed by [Ken Boyer] and [Kent Butterworth] , executive produced by [Steven Spielberg] , and written by [Sherri Stoner]"
    },
    {
        "questionIdx": 181268,
        "questionPatternModEntities": "What was produced by M3 , directed by M4 , executive produced by M0 and M1 , and executive produced by M2",
        "questionTemplate": "What was [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] and [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P1 M3 .\n?x0 P2 M4\n}",
        "recursionDepth": 46,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 wd:Q912547 .\n?x0 wdt:P1431 wd:Q8877 .\n?x0 wdt:P1431 wd:Q190373 .\n?x0 wdt:P1431 wd:Q1385337 .\n?x0 wdt:P162|wdt:P272 wd:Q168383\n}",
        "questionWithBrackets": "What was produced by [Universal Pictures] , directed by [Brian Levant] , executive produced by [Steven Spielberg] and [Gerald R. Molen] , and executive produced by [Joseph Barbera]"
    },
    {
        "questionIdx": 181324,
        "questionPatternModEntities": "What was produced by M4 , distributed by M0 , distributed by M1 and M2 , and distributed by M3",
        "questionTemplate": "What was [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] and [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P0 M3 .\n?x0 P1 M4\n}",
        "recursionDepth": 44,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P750 wd:Q8093 .\n?x0 wdt:P750 wd:Q1156046 .\n?x0 wdt:P750 wd:Q875920 .\n?x0 wdt:P750 wd:Q907311 .\n?x0 wdt:P162|wdt:P272 wd:Q947930\n}",
        "questionWithBrackets": "What was produced by [OLM, Inc.] , distributed by [The Pok\u00e9mon Company] , distributed by [Nintendo] and [T\u014dh\u014d] , and distributed by [Netflix]"
    },
    {
        "questionIdx": 181325,
        "questionPatternModEntities": "What was produced by M4 , distributed by M0 , distributed by M1 , and distributed by M2 and M3",
        "questionTemplate": "What was [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P0 M3 .\n?x0 P1 M4\n}",
        "recursionDepth": 44,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P750 wd:Q145 .\n?x0 wdt:P750 wd:Q9589 .\n?x0 wdt:P750 wd:Q80948336 .\n?x0 wdt:P750 wd:Q5371838 .\n?x0 wdt:P162|wdt:P272 wd:Q7684047\n}",
        "questionWithBrackets": "What was produced by [Tanya Seghatchian] , distributed by [Vudu] , distributed by [FandangoNow] , and distributed by [United Kingdom] and [iTunes]"
    },
    {
        "questionIdx": 181338,
        "questionPatternModEntities": "What was produced by M0 's Canadian sibling",
        "questionTemplate": "What was [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x1 P1 M0 .\n?x1 P2 M1 .\nFILTER ( ?x1 != M0 )\n}",
        "recursionDepth": 20,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x1 wdt:P27 wd:Q16 .\n?x1 wdt:P3373 wd:Q4811453 .\nFILTER ( ?x1 != wd:Q4811453 )\n}LIMIT 1",
        "questionWithBrackets": "What was produced by [Astrid Young] 's Canadian sibling"
    },
    {
        "questionIdx": 181361,
        "questionPatternModEntities": "What was produced by M2 , produced by M3 's Chinese sibling , distributed by M0 , and distributed by M1",
        "questionTemplate": "What was [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P1 ?x1 .\n?x0 P1 M2 .\n?x1 P2 M3 .\n?x1 P3 M4 .\nFILTER ( ?x1 != M3 )\n}",
        "recursionDepth": 49,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P750 wd:Q947354 .\n?x0 wdt:P750 wd:Q907311 .\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x0 wdt:P162|wdt:P272 wd:Q842519 .\n?x1 wdt:P27 wd:Q148 .\n?x1 wdt:P3373 wd:Q444591 .\nFILTER ( ?x1 != wd:Q444591 )\n}",
        "questionWithBrackets": "What was produced by [Runme Shaw] , produced by [Run Run Shaw] 's Chinese sibling , distributed by [Netflix] , and distributed by [Shaw Brothers Studio]"
    },
    {
        "questionIdx": 181436,
        "questionPatternModEntities": "What was produced by M3 , written by M2 , executive produced by M0 and M1 , and edited by M4",
        "questionTemplate": "What was [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] and [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P1 M2 .\n?x0 P2 M3 .\n?x0 P3 M4\n}",
        "recursionDepth": 45,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1040 wd:Q977704 .\n?x0 wdt:P1431 wd:Q75079 .\n?x0 wdt:P1431 wd:Q975579 .\n?x0 wdt:P162|wdt:P272 wd:Q319986 .\n?x0 wdt:P58 wd:Q34660\n}",
        "questionWithBrackets": "What was produced by [David Heyman] , written by [J. K. Rowling] , executive produced by [David Barron] and [Chris Columbus] , and edited by [Peter Honess]"
    },
    {
        "questionIdx": 181445,
        "questionPatternModEntities": "What was produced by M0 's Dutch sibling",
        "questionTemplate": "What was [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x1 P1 M0 .\n?x1 P2 M1 .\nFILTER ( ?x1 != M0 )\n}",
        "recursionDepth": 20,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x1 wdt:P27 wd:Q29999 .\n?x1 wdt:P3373 wd:Q26745481 .\nFILTER ( ?x1 != wd:Q26745481 )\n}LIMIT 1",
        "questionWithBrackets": "What was produced by [Paul Wilders] 's Dutch sibling"
    },
    {
        "questionIdx": 181504,
        "questionPatternModEntities": "What was produced by M0 's Spanish employee",
        "questionTemplate": "What was [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x1 P1 M0 .\n?x1 P2 M1\n}",
        "recursionDepth": 20,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x1 wdt:P108 wd:Q686375 .\n?x1 wdt:P27 wd:Q29\n}LIMIT 1",
        "questionWithBrackets": "What was produced by [RMC] 's Spanish employee"
    },
    {
        "questionIdx": 181668,
        "questionPatternModEntities": "What was produced by M5 's Canadian sibling , written by M0 , M1 , M2 , and M3 , and directed by M4",
        "questionTemplate": "What was [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] , [VP_SIMPLE] by [entity] , [entity] , [entity] , and [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P0 M3 .\n?x0 P1 ?x1 .\n?x0 P2 M4 .\n?x1 P3 M5 .\n?x1 P4 M6 .\nFILTER ( ?x1 != M5 )\n}",
        "recursionDepth": 50,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 wd:Q19561563 .\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x0 wdt:P58 wd:Q269895 .\n?x0 wdt:P58 wd:Q2679090 .\n?x0 wdt:P58 wd:Q352010 .\n?x0 wdt:P58 wd:Q6288874 .\n?x1 wdt:P27 wd:Q16 .\n?x1 wdt:P3373 wd:Q6228653 .\nFILTER ( ?x1 != wd:Q6228653 )\n}",
        "questionWithBrackets": "What was produced by [John David Cameron] 's Canadian sibling , written by [Billy Ray] , [Gale Anne Hurd] , [Josh Friedman] , and [David S. Goyer] , and directed by [Tim Miller]"
    },
    {
        "questionIdx": 181820,
        "questionPatternModEntities": "What was produced by M0 's actor",
        "questionTemplate": "What was [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x1 P1 M0\n}",
        "recursionDepth": 15,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x1 wdt:P453 wd:Q5815108\n}LIMIT 1",
        "questionWithBrackets": "What was produced by [Duke of Mantua] 's actor"
    },
    {
        "questionIdx": 181822,
        "questionPatternModEntities": "What was produced by M3 's Italian employee , executive produced by M0 , directed by M2 , and edited by M1",
        "questionTemplate": "What was [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] , [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 ?x1 .\n?x0 P2 M1 .\n?x0 P3 M2 .\n?x1 P4 M3 .\n?x1 P5 M4\n}",
        "recursionDepth": 50,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 wd:Q484779 .\n?x0 wdt:P1040 wd:Q33331516 .\n?x0 wdt:P1431 wd:Q41148 .\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x1 wdt:P108 wd:Q49210 .\n?x1 wdt:P27 wd:Q38\n}",
        "questionWithBrackets": "What was produced by [New York University] 's Italian employee , executive produced by [Martin Scorsese] , directed by [Luc Besson] , and edited by [Julien Rey]"
    },
    {
        "questionIdx": 181907,
        "questionPatternModEntities": "What was produced by a British employee of M0 , M1 , M2 , and M3",
        "questionTemplate": "What was [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] , [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x1 P1 M0 .\n?x1 P1 M1 .\n?x1 P1 M2 .\n?x1 P1 M3 .\n?x1 P2 M4\n}",
        "recursionDepth": 32,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x1 wdt:P108 wd:Q73801 .\n?x1 wdt:P108 wd:Q173941 .\n?x1 wdt:P108 wd:Q611487 .\n?x1 wdt:P108 wd:Q765389 .\n?x1 wdt:P27 wd:Q145\n}",
        "questionWithBrackets": "What was produced by a British employee of [Lionhead Studios] , [Xbox Game Studios] , [Bullfrog Productions] , and [Electronic Arts]"
    },
    {
        "questionIdx": 181950,
        "questionPatternModEntities": "What was produced by a Chinese spouse of M1",
        "questionTemplate": "What was [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x1 P1 M0 .\n?x1 P2 M1 .\nFILTER ( ?x1 != M1 )\n}",
        "recursionDepth": 22,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x1 wdt:P27 wd:Q148 .\n?x1 wdt:P26 wd:Q28409433 .\nFILTER ( ?x1 != wd:Q28409433 )\n}LIMIT 1",
        "questionWithBrackets": "What was produced by a Chinese spouse of [Huang Youlong]"
    },
    {
        "questionIdx": 182037,
        "questionPatternModEntities": "What was produced by a Spanish spouse of M3 , edited by M1 , and written by M0",
        "questionTemplate": "What was [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 ?x1 .\n?x0 P2 M1 .\n?x1 P3 M2 .\n?x1 P4 M3 .\nFILTER ( ?x1 != M3 )\n}",
        "recursionDepth": 42,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1040 wd:Q51545 .\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x0 wdt:P58 wd:Q2746880 .\n?x1 wdt:P27 wd:Q29 .\n?x1 wdt:P26 wd:Q28708093 .\nFILTER ( ?x1 != wd:Q28708093 )\n}",
        "questionWithBrackets": "What was produced by a Spanish spouse of [Jeanne Rucar] , edited by [Luis Bu\u00f1uel] , and written by [Ram\u00f3n Ac\u00edn]"
    },
    {
        "questionIdx": 182047,
        "questionPatternModEntities": "What was produced by a Swedish employee of M2 and M3 , produced by M1 , and distributed by M0",
        "questionTemplate": "What was [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] and [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 ?x1 .\n?x0 P1 M1 .\n?x1 P2 M2 .\n?x1 P2 M3 .\n?x1 P3 M4\n}",
        "recursionDepth": 46,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P750 wd:Q7560946 .\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x0 wdt:P162|wdt:P272 wd:Q949680 .\n?x1 wdt:P108 wd:Q622664 .\n?x1 wdt:P108 wd:Q41506 .\n?x1 wdt:P27 wd:Q34\n}",
        "questionWithBrackets": "What was produced by a Swedish employee of [University of California, San Diego] and [Stanford University] , produced by [Peter Aalb\u00e6k Jensen] , and distributed by [Sonet Film]"
    },
    {
        "questionIdx": 182638,
        "questionPatternModEntities": "What was produced by and directed by M0 , M1 , and M2",
        "questionTemplate": "What was [VP_SIMPLE] by and [VP_SIMPLE] by [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P1 M0 .\n?x0 P1 M1 .\n?x0 P1 M2\n}",
        "recursionDepth": 26,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 wd:Q3772 .\n?x0 wdt:P57 wd:Q47284 .\n?x0 wdt:P57 wd:Q358714 .\n?x0 wdt:P162|wdt:P272 wd:Q3772 .\n?x0 wdt:P162|wdt:P272 wd:Q47284 .\n?x0 wdt:P162|wdt:P272 wd:Q358714\n}",
        "questionWithBrackets": "What was produced by and directed by [Eli Roth] , [Quentin Tarantino] , and [Robert Rodriguez]"
    },
    {
        "questionIdx": 182649,
        "questionPatternModEntities": "What was produced by and directed by M0 's spouse",
        "questionTemplate": "What was [VP_SIMPLE] by and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x1 P2 M0 .\nFILTER ( ?x1 != M0 )\n}",
        "recursionDepth": 23,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 ?x1 .\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x1 wdt:P26 wd:Q95050 .\nFILTER ( ?x1 != wd:Q95050 )\n}LIMIT 1",
        "questionWithBrackets": "What was produced by and directed by [Paulette Goddard] 's spouse"
    },
    {
        "questionIdx": 182675,
        "questionPatternModEntities": "What was produced by and directed by a spouse of M0",
        "questionTemplate": "What was [VP_SIMPLE] by and [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x1 P2 M0 .\nFILTER ( ?x1 != M0 )\n}",
        "recursionDepth": 25,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 ?x1 .\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x1 wdt:P26 wd:Q241019 .\nFILTER ( ?x1 != wd:Q241019 )\n}LIMIT 1",
        "questionWithBrackets": "What was produced by and directed by a spouse of [Mildred Harris]"
    },
    {
        "questionIdx": 182676,
        "questionPatternModEntities": "What was produced by and directed by a spouse of M0 's sibling",
        "questionTemplate": "What was [VP_SIMPLE] by and [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x1 P2 ?x2 .\n?x2 P3 M0 .\nFILTER ( ?x1 != ?x2 ) .\nFILTER ( ?x2 != M0 )\n}",
        "recursionDepth": 29,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 ?x1 .\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x1 wdt:P26 ?x2 .\n?x2 wdt:P3373 wd:Q5407585 .\nFILTER ( ?x1 != ?x2 ) .\nFILTER ( ?x2 != wd:Q5407585 )\n}LIMIT 1",
        "questionWithBrackets": "What was produced by and directed by a spouse of [Eugene O'Neill, Jr.] 's sibling"
    },
    {
        "questionIdx": 182714,
        "questionPatternModEntities": "What was produced by and edited by M0 's male sibling 's parent",
        "questionTemplate": "What was [VP_SIMPLE] by and [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x1 P2 ?x2 .\n?x2 P3 M0 .\n?x2 P4 M1 .\nFILTER ( ?x2 != M0 )\n}",
        "recursionDepth": 32,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1040 ?x1 .\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x1 wdt:P40|wdt:P355 ?x2 .\n?x2 wdt:P21 wd:Q6581097 .\n?x2 wdt:P3373 wd:Q3194478 .\nFILTER ( ?x2 != wd:Q3194478 )\n}LIMIT 1",
        "questionWithBrackets": "What was produced by and edited by [Kazuko Kurosawa] 's male sibling 's parent"
    },
    {
        "questionIdx": 182746,
        "questionPatternModEntities": "What was produced by and edited by a female sibling of M0",
        "questionTemplate": "What was [VP_SIMPLE] by and [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x1 P2 M0 .\n?x1 P3 M1 .\nFILTER ( ?x1 != M0 )\n}",
        "recursionDepth": 30,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1040 ?x1 .\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x1 wdt:P21 wd:Q6581072 .\n?x1 wdt:P3373 wd:Q4725343 .\nFILTER ( ?x1 != wd:Q4725343 )\n}LIMIT 1",
        "questionWithBrackets": "What was produced by and edited by a female sibling of [Alia Bhatt]"
    },
    {
        "questionIdx": 182755,
        "questionPatternModEntities": "What was produced by and edited by a male parent of M1",
        "questionTemplate": "What was [VP_SIMPLE] by and [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x1 P2 M0 .\n?x1 P3 M1\n}",
        "recursionDepth": 30,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1040 ?x1 .\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x1 wdt:P40|wdt:P355 wd:Q120593 .\n?x1 wdt:P21 wd:Q6581097\n}LIMIT 1",
        "questionWithBrackets": "What was produced by and edited by a male parent of [Eugene Chaplin]"
    },
    {
        "questionIdx": 182779,
        "questionPatternModEntities": "What was produced by and executive produced by M0 , M1 , and M2",
        "questionTemplate": "What was [VP_SIMPLE] by and [VP_SIMPLE] by [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P1 M0 .\n?x0 P1 M1 .\n?x0 P1 M2\n}",
        "recursionDepth": 27,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1431 wd:Q3772 .\n?x0 wdt:P1431 wd:Q887636 .\n?x0 wdt:P1431 wd:Q965826 .\n?x0 wdt:P162|wdt:P272 wd:Q3772 .\n?x0 wdt:P162|wdt:P272 wd:Q887636 .\n?x0 wdt:P162|wdt:P272 wd:Q965826\n}",
        "questionWithBrackets": "What was produced by and executive produced by [Scott Spiegel] , [Boaz Yakin] , and [Quentin Tarantino]"
    },
    {
        "questionIdx": 182786,
        "questionPatternModEntities": "What was produced by and executive produced by M0 's Spanish sibling",
        "questionTemplate": "What was [VP_SIMPLE] by and [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x1 P2 M0 .\n?x1 P3 M1 .\nFILTER ( ?x1 != M0 )\n}",
        "recursionDepth": 29,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1431 ?x1 .\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x1 wdt:P27 wd:Q29 .\n?x1 wdt:P3373 wd:Q5833303 .\nFILTER ( ?x1 != wd:Q5833303 )\n}LIMIT 1",
        "questionWithBrackets": "What was produced by and executive produced by [Enrique Franco] 's Spanish sibling"
    },
    {
        "questionIdx": 182839,
        "questionPatternModEntities": "What was produced by and written by M0 's Dutch sibling",
        "questionTemplate": "What was [VP_SIMPLE] by and [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x1 P2 M0 .\n?x1 P3 M1 .\nFILTER ( ?x1 != M0 )\n}",
        "recursionDepth": 28,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x0 wdt:P58 ?x1 .\n?x1 wdt:P27 wd:Q29999 .\n?x1 wdt:P3373 wd:Q26745481 .\nFILTER ( ?x1 != wd:Q26745481 )\n}LIMIT 1",
        "questionWithBrackets": "What was produced by and written by [Paul Wilders] 's Dutch sibling"
    },
    {
        "questionIdx": 182886,
        "questionPatternModEntities": "What was produced by and written by a parent of a spouse of M0",
        "questionTemplate": "What was [VP_SIMPLE] by and [VP_SIMPLE] by a [ROLE_SIMPLE] of a [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x1 P2 ?x2 .\n?x2 P3 M0 .\nFILTER ( ?x2 != M0 )\n}",
        "recursionDepth": 31,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x0 wdt:P58 ?x1 .\n?x1 wdt:P40|wdt:P355 ?x2 .\n?x2 wdt:P26 wd:Q734431 .\nFILTER ( ?x2 != wd:Q734431 )\n}LIMIT 1",
        "questionWithBrackets": "What was produced by and written by a parent of a spouse of [Ilya Salkind]"
    },
    {
        "questionIdx": 182905,
        "questionPatternModEntities": "What was produced by , directed by , and edited by M0",
        "questionTemplate": "What was [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M0 .\n?x0 P2 M0\n}",
        "recursionDepth": 25,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 wd:Q8006 .\n?x0 wdt:P1040 wd:Q8006 .\n?x0 wdt:P162|wdt:P272 wd:Q8006\n}LIMIT 1",
        "questionWithBrackets": "What was produced by , directed by , and edited by [Akira Kurosawa]"
    },
    {
        "questionIdx": 182909,
        "questionPatternModEntities": "What was produced by , directed by , and edited by M0 's sibling 's sibling",
        "questionTemplate": "What was [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x1 P3 ?x2 .\n?x2 P3 M0 .\nFILTER ( ?x1 != ?x2 ) .\nFILTER ( ?x2 != M0 )\n}",
        "recursionDepth": 33,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 ?x1 .\n?x0 wdt:P1040 ?x1 .\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x1 wdt:P3373 ?x2 .\n?x2 wdt:P3373 wd:Q430849 .\nFILTER ( ?x1 != ?x2 ) .\nFILTER ( ?x2 != wd:Q430849 )\n}LIMIT 1",
        "questionWithBrackets": "What was produced by , directed by , and edited by [Joie Lee] 's sibling 's sibling"
    },
    {
        "questionIdx": 182915,
        "questionPatternModEntities": "What was produced by , directed by , and edited by a parent of M0",
        "questionTemplate": "What was [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x1 P3 M0\n}",
        "recursionDepth": 31,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 ?x1 .\n?x0 wdt:P1040 ?x1 .\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x1 wdt:P40|wdt:P355 wd:Q1620638\n}LIMIT 1",
        "questionWithBrackets": "What was produced by , directed by , and edited by a parent of [Hisao Kurosawa]"
    },
    {
        "questionIdx": 182916,
        "questionPatternModEntities": "What was produced by , directed by , and edited by a spouse of M0",
        "questionTemplate": "What was [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x1 P3 M0 .\nFILTER ( ?x1 != M0 )\n}",
        "recursionDepth": 31,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 ?x1 .\n?x0 wdt:P1040 ?x1 .\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x1 wdt:P26 wd:Q3032150 .\nFILTER ( ?x1 != wd:Q3032150 )\n}LIMIT 1",
        "questionWithBrackets": "What was produced by , directed by , and edited by a spouse of [Y\u014dko Yaguchi]"
    },
    {
        "questionIdx": 182928,
        "questionPatternModEntities": "What was produced by , directed by , and executive produced by a male employee of M0 and M1",
        "questionTemplate": "What was [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] and [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x1 P3 M0 .\n?x1 P3 M1 .\n?x1 P4 M2\n}",
        "recursionDepth": 41,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 ?x1 .\n?x0 wdt:P1431 ?x1 .\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x1 wdt:P108 wd:Q174710 .\n?x1 wdt:P108 wd:Q1068752 .\n?x1 wdt:P21 wd:Q6581097\n}",
        "questionWithBrackets": "What was produced by , directed by , and executive produced by a male employee of [Howard University] and [University of California, Los Angeles]"
    },
    {
        "questionIdx": 182949,
        "questionPatternModEntities": "What was produced by , directed by , edited by , and written by M0",
        "questionTemplate": "What was [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M0 .\n?x0 P2 M0 .\n?x0 P3 M0\n}",
        "recursionDepth": 31,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 wd:Q8006 .\n?x0 wdt:P1040 wd:Q8006 .\n?x0 wdt:P162|wdt:P272 wd:Q8006 .\n?x0 wdt:P58 wd:Q8006\n}LIMIT 1",
        "questionWithBrackets": "What was produced by , directed by , edited by , and written by [Akira Kurosawa]"
    },
    {
        "questionIdx": 182950,
        "questionPatternModEntities": "What was produced by , directed by , edited by , and written by M0 's sibling",
        "questionTemplate": "What was [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x0 P3 ?x1 .\n?x1 P4 M0 .\nFILTER ( ?x1 != M0 )\n}",
        "recursionDepth": 35,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 ?x1 .\n?x0 wdt:P1040 ?x1 .\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x0 wdt:P58 ?x1 .\n?x1 wdt:P3373 wd:Q372788 .\nFILTER ( ?x1 != wd:Q372788 )\n}LIMIT 1",
        "questionWithBrackets": "What was produced by , directed by , edited by , and written by [Jonathan Nolan] 's sibling"
    },
    {
        "questionIdx": 182956,
        "questionPatternModEntities": "What was produced by , directed by , edited by , executive produced by , and written by M0 's parent",
        "questionTemplate": "What was [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x0 P3 ?x1 .\n?x0 P4 ?x1 .\n?x1 P5 M0\n}",
        "recursionDepth": 42,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 ?x1 .\n?x0 wdt:P1040 ?x1 .\n?x0 wdt:P1431 ?x1 .\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x0 wdt:P58 ?x1 .\n?x1 wdt:P40|wdt:P355 wd:Q1620638\n}LIMIT 1",
        "questionWithBrackets": "What was produced by , directed by , edited by , executive produced by , and written by [Hisao Kurosawa] 's parent"
    },
    {
        "questionIdx": 182988,
        "questionPatternModEntities": "What was produced by , directed by , executive produced by , edited by , and written by a sibling of M0",
        "questionTemplate": "What was [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x0 P3 ?x1 .\n?x0 P4 ?x1 .\n?x1 P5 M0 .\nFILTER ( ?x1 != M0 )\n}",
        "recursionDepth": 44,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 ?x1 .\n?x0 wdt:P1040 ?x1 .\n?x0 wdt:P1431 ?x1 .\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x0 wdt:P58 ?x1 .\n?x1 wdt:P3373 wd:Q28370409 .\nFILTER ( ?x1 != wd:Q28370409 )\n}LIMIT 1",
        "questionWithBrackets": "What was produced by , directed by , executive produced by , edited by , and written by a sibling of [Everton Rocca]"
    },
    {
        "questionIdx": 183005,
        "questionPatternModEntities": "What was produced by , directed by , written by , and edited by M0 's sibling",
        "questionTemplate": "What was [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x0 P3 ?x1 .\n?x1 P4 M0 .\nFILTER ( ?x1 != M0 )\n}",
        "recursionDepth": 35,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 ?x1 .\n?x0 wdt:P1040 ?x1 .\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x0 wdt:P58 ?x1 .\n?x1 wdt:P3373 wd:Q606780 .\nFILTER ( ?x1 != wd:Q606780 )\n}LIMIT 1",
        "questionWithBrackets": "What was produced by , directed by , written by , and edited by [Sydney Chaplin] 's sibling"
    },
    {
        "questionIdx": 183017,
        "questionPatternModEntities": "What was produced by , directed by , written by , and executive produced by M0 's sibling",
        "questionTemplate": "What was [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x0 P3 ?x1 .\n?x1 P4 M0 .\nFILTER ( ?x1 != M0 )\n}",
        "recursionDepth": 36,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 ?x1 .\n?x0 wdt:P1431 ?x1 .\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x0 wdt:P58 ?x1 .\n?x1 wdt:P3373 wd:Q104373781 .\nFILTER ( ?x1 != wd:Q104373781 )\n}LIMIT 1",
        "questionWithBrackets": "What was produced by , directed by , written by , and executive produced by [John Lynch] 's sibling"
    },
    {
        "questionIdx": 183022,
        "questionPatternModEntities": "What was produced by , directed by , written by , edited by , and executive produced by M0 's sibling",
        "questionTemplate": "What was [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x0 P3 ?x1 .\n?x0 P4 ?x1 .\n?x1 P5 M0 .\nFILTER ( ?x1 != M0 )\n}",
        "recursionDepth": 42,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 ?x1 .\n?x0 wdt:P1040 ?x1 .\n?x0 wdt:P1431 ?x1 .\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x0 wdt:P58 ?x1 .\n?x1 wdt:P3373 wd:Q28370409 .\nFILTER ( ?x1 != wd:Q28370409 )\n}LIMIT 1",
        "questionWithBrackets": "What was produced by , directed by , written by , edited by , and executive produced by [Everton Rocca] 's sibling"
    },
    {
        "questionIdx": 183026,
        "questionPatternModEntities": "What was produced by , directed by , written by , edited by , and executive produced by M0 's parent",
        "questionTemplate": "What was [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x0 P3 ?x1 .\n?x0 P4 ?x1 .\n?x1 P5 M0\n}",
        "recursionDepth": 42,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 ?x1 .\n?x0 wdt:P1040 ?x1 .\n?x0 wdt:P1431 ?x1 .\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x0 wdt:P58 ?x1 .\n?x1 wdt:P40|wdt:P355 wd:Q1620638\n}LIMIT 1",
        "questionWithBrackets": "What was produced by , directed by , written by , edited by , and executive produced by [Hisao Kurosawa] 's parent"
    },
    {
        "questionIdx": 183039,
        "questionPatternModEntities": "What was produced by , edited by , and directed by M0 's spouse",
        "questionTemplate": "What was [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x1 P3 M0 .\nFILTER ( ?x1 != M0 )\n}",
        "recursionDepth": 29,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 ?x1 .\n?x0 wdt:P1040 ?x1 .\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x1 wdt:P26 wd:Q242951 .\nFILTER ( ?x1 != wd:Q242951 )\n}LIMIT 1",
        "questionWithBrackets": "What was produced by , edited by , and directed by [Emma Thomas] 's spouse"
    },
    {
        "questionIdx": 183041,
        "questionPatternModEntities": "What was produced by , edited by , and directed by M0",
        "questionTemplate": "What was [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M0 .\n?x0 P2 M0\n}",
        "recursionDepth": 25,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 wd:Q882 .\n?x0 wdt:P1040 wd:Q882 .\n?x0 wdt:P162|wdt:P272 wd:Q882\n}LIMIT 1",
        "questionWithBrackets": "What was produced by , edited by , and directed by [Charlie Chaplin]"
    },
    {
        "questionIdx": 183048,
        "questionPatternModEntities": "What was produced by , edited by , and directed by a female spouse of M1",
        "questionTemplate": "What was [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x1 P3 M0 .\n?x1 P4 M1 .\nFILTER ( ?x1 != M1 )\n}",
        "recursionDepth": 36,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 ?x1 .\n?x0 wdt:P1040 ?x1 .\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x1 wdt:P21 wd:Q6581072 .\n?x1 wdt:P26 wd:Q357624 .\nFILTER ( ?x1 != wd:Q357624 )\n}LIMIT 1",
        "questionWithBrackets": "What was produced by , edited by , and directed by a female spouse of [Alexandr Hackenschmied]"
    },
    {
        "questionIdx": 183051,
        "questionPatternModEntities": "What was produced by , edited by , and executive produced by M0 's sibling 's sibling",
        "questionTemplate": "What was [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x1 P3 ?x2 .\n?x2 P3 M0 .\nFILTER ( ?x1 != ?x2 ) .\nFILTER ( ?x2 != M0 )\n}",
        "recursionDepth": 34,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1040 ?x1 .\n?x0 wdt:P1431 ?x1 .\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x1 wdt:P3373 ?x2 .\n?x2 wdt:P3373 wd:Q28146812 .\nFILTER ( ?x1 != ?x2 ) .\nFILTER ( ?x2 != wd:Q28146812 )\n}LIMIT 1",
        "questionWithBrackets": "What was produced by , edited by , and executive produced by [Matthew Rocca] 's sibling 's sibling"
    },
    {
        "questionIdx": 183052,
        "questionPatternModEntities": "What was produced by , edited by , and executive produced by M0",
        "questionTemplate": "What was [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M0 .\n?x0 P2 M0\n}",
        "recursionDepth": 26,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1040 wd:Q38222 .\n?x0 wdt:P1431 wd:Q38222 .\n?x0 wdt:P162|wdt:P272 wd:Q38222\n}LIMIT 1",
        "questionWithBrackets": "What was produced by , edited by , and executive produced by [George Lucas]"
    },
    {
        "questionIdx": 183065,
        "questionPatternModEntities": "What was produced by , edited by , and written by M0 's Mexican sibling",
        "questionTemplate": "What was [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x1 P3 M0 .\n?x1 P4 M1 .\nFILTER ( ?x1 != M0 )\n}",
        "recursionDepth": 34,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1040 ?x1 .\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x0 wdt:P58 ?x1 .\n?x1 wdt:P27 wd:Q96 .\n?x1 wdt:P3373 wd:Q2840325 .\nFILTER ( ?x1 != wd:Q2840325 )\n}LIMIT 1",
        "questionWithBrackets": "What was produced by , edited by , and written by [Carlos Cuar\u00f3n] 's Mexican sibling"
    },
    {
        "questionIdx": 183067,
        "questionPatternModEntities": "What was produced by , edited by , and written by M0",
        "questionTemplate": "What was [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M0 .\n?x0 P2 M0\n}",
        "recursionDepth": 25,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1040 wd:Q25186 .\n?x0 wdt:P162|wdt:P272 wd:Q25186 .\n?x0 wdt:P58 wd:Q25186\n}LIMIT 1",
        "questionWithBrackets": "What was produced by , edited by , and written by [Gus Van Sant]"
    },
    {
        "questionIdx": 183070,
        "questionPatternModEntities": "What was produced by , edited by , and written by M0 's sibling",
        "questionTemplate": "What was [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x1 P3 M0 .\nFILTER ( ?x1 != M0 )\n}",
        "recursionDepth": 29,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1040 ?x1 .\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x0 wdt:P58 ?x1 .\n?x1 wdt:P3373 wd:Q372788 .\nFILTER ( ?x1 != wd:Q372788 )\n}LIMIT 1",
        "questionWithBrackets": "What was produced by , edited by , and written by [Jonathan Nolan] 's sibling"
    },
    {
        "questionIdx": 183075,
        "questionPatternModEntities": "What was produced by , edited by , and written by a Swedish spouse of M1",
        "questionTemplate": "What was [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x1 P3 M0 .\n?x1 P4 M1 .\nFILTER ( ?x1 != M1 )\n}",
        "recursionDepth": 36,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1040 ?x1 .\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x0 wdt:P58 ?x1 .\n?x1 wdt:P27 wd:Q34 .\n?x1 wdt:P26 wd:Q5364442 .\nFILTER ( ?x1 != wd:Q5364442 )\n}LIMIT 1",
        "questionWithBrackets": "What was produced by , edited by , and written by a Swedish spouse of [Lena Herzog]"
    },
    {
        "questionIdx": 183084,
        "questionPatternModEntities": "What was produced by , edited by , and written by a Italian spouse of a female spouse of M2",
        "questionTemplate": "What was [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x1 P3 M0 .\n?x1 P4 ?x2 .\n?x2 P4 M2 .\n?x2 P5 M1 .\nFILTER ( ?x1 != ?x2 ) .\nFILTER ( ?x2 != M2 )\n}",
        "recursionDepth": 47,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1040 ?x1 .\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x0 wdt:P58 ?x1 .\n?x1 wdt:P27 wd:Q38 .\n?x1 wdt:P26 ?x2 .\n?x2 wdt:P21 wd:Q6581072 .\n?x2 wdt:P26 wd:Q199943 .\nFILTER ( ?x1 != ?x2 ) .\nFILTER ( ?x2 != wd:Q199943 )\n}LIMIT 1",
        "questionWithBrackets": "What was produced by , edited by , and written by a Italian spouse of a female spouse of [Adriano Celentano]"
    },
    {
        "questionIdx": 183101,
        "questionPatternModEntities": "What was produced by , edited by , directed by , and written by a British spouse of M1",
        "questionTemplate": "What was [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x0 P3 ?x1 .\n?x1 P4 M0 .\n?x1 P5 M1 .\nFILTER ( ?x1 != M1 )\n}",
        "recursionDepth": 42,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 ?x1 .\n?x0 wdt:P1040 ?x1 .\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x0 wdt:P58 ?x1 .\n?x1 wdt:P27 wd:Q145 .\n?x1 wdt:P26 wd:Q166887 .\nFILTER ( ?x1 != wd:Q166887 )\n}LIMIT 1",
        "questionWithBrackets": "What was produced by , edited by , directed by , and written by a British spouse of [Thelma Schoonmaker]"
    },
    {
        "questionIdx": 183103,
        "questionPatternModEntities": "What was produced by , edited by , directed by , and written by a sibling of M0",
        "questionTemplate": "What was [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x0 P3 ?x1 .\n?x1 P4 M0 .\nFILTER ( ?x1 != M0 )\n}",
        "recursionDepth": 37,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 ?x1 .\n?x0 wdt:P1040 ?x1 .\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x0 wdt:P58 ?x1 .\n?x1 wdt:P3373 wd:Q372788 .\nFILTER ( ?x1 != wd:Q372788 )\n}LIMIT 1",
        "questionWithBrackets": "What was produced by , edited by , directed by , and written by a sibling of [Jonathan Nolan]"
    },
    {
        "questionIdx": 183117,
        "questionPatternModEntities": "What was produced by , edited by , directed by , written by , and executive produced by M0 's spouse",
        "questionTemplate": "What was [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x0 P3 ?x1 .\n?x0 P4 ?x1 .\n?x1 P5 M0 .\nFILTER ( ?x1 != M0 )\n}",
        "recursionDepth": 42,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 ?x1 .\n?x0 wdt:P1040 ?x1 .\n?x0 wdt:P1431 ?x1 .\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x0 wdt:P58 ?x1 .\n?x1 wdt:P26 wd:Q3032150 .\nFILTER ( ?x1 != wd:Q3032150 )\n}LIMIT 1",
        "questionWithBrackets": "What was produced by , edited by , directed by , written by , and executive produced by [Y\u014dko Yaguchi] 's spouse"
    },
    {
        "questionIdx": 183127,
        "questionPatternModEntities": "What was produced by , edited by , executive produced by , and directed by a sibling of M0",
        "questionTemplate": "What was [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x0 P3 ?x1 .\n?x1 P4 M0 .\nFILTER ( ?x1 != M0 )\n}",
        "recursionDepth": 38,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 ?x1 .\n?x0 wdt:P1040 ?x1 .\n?x0 wdt:P1431 ?x1 .\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x1 wdt:P3373 wd:Q28370409 .\nFILTER ( ?x1 != wd:Q28370409 )\n}LIMIT 1",
        "questionWithBrackets": "What was produced by , edited by , executive produced by , and directed by a sibling of [Everton Rocca]"
    },
    {
        "questionIdx": 183176,
        "questionPatternModEntities": "What was produced by , edited by , written by , directed by , and executive produced by M0 's parent",
        "questionTemplate": "What was [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x0 P3 ?x1 .\n?x0 P4 ?x1 .\n?x1 P5 M0\n}",
        "recursionDepth": 42,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 ?x1 .\n?x0 wdt:P1040 ?x1 .\n?x0 wdt:P1431 ?x1 .\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x0 wdt:P58 ?x1 .\n?x1 wdt:P40|wdt:P355 wd:Q4739681\n}LIMIT 1",
        "questionWithBrackets": "What was produced by , edited by , written by , directed by , and executive produced by [Amanda Lucas] 's parent"
    },
    {
        "questionIdx": 183233,
        "questionPatternModEntities": "What was produced by , executive produced by , and written by a American parent of M1",
        "questionTemplate": "What was [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x1 P3 M0 .\n?x1 P4 M1\n}",
        "recursionDepth": 37,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1431 ?x1 .\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x0 wdt:P58 ?x1 .\n?x1 wdt:P40|wdt:P355 wd:Q4739681 .\n?x1 wdt:P27 wd:Q30\n}LIMIT 1",
        "questionWithBrackets": "What was produced by , executive produced by , and written by a American parent of [Amanda Lucas]"
    },
    {
        "questionIdx": 183236,
        "questionPatternModEntities": "What was produced by , executive produced by , directed by , and edited by M0 's sibling 's sibling",
        "questionTemplate": "What was [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x0 P3 ?x1 .\n?x1 P4 ?x2 .\n?x2 P4 M0 .\nFILTER ( ?x1 != ?x2 ) .\nFILTER ( ?x2 != M0 )\n}",
        "recursionDepth": 40,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 ?x1 .\n?x0 wdt:P1040 ?x1 .\n?x0 wdt:P1431 ?x1 .\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x1 wdt:P3373 ?x2 .\n?x2 wdt:P3373 wd:Q28146812 .\nFILTER ( ?x1 != ?x2 ) .\nFILTER ( ?x2 != wd:Q28146812 )\n}LIMIT 1",
        "questionWithBrackets": "What was produced by , executive produced by , directed by , and edited by [Matthew Rocca] 's sibling 's sibling"
    },
    {
        "questionIdx": 183268,
        "questionPatternModEntities": "What was produced by , executive produced by , edited by , and directed by a sibling of M0",
        "questionTemplate": "What was [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x0 P3 ?x1 .\n?x1 P4 M0 .\nFILTER ( ?x1 != M0 )\n}",
        "recursionDepth": 38,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 ?x1 .\n?x0 wdt:P1040 ?x1 .\n?x0 wdt:P1431 ?x1 .\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x1 wdt:P3373 wd:Q28370409 .\nFILTER ( ?x1 != wd:Q28370409 )\n}LIMIT 1",
        "questionWithBrackets": "What was produced by , executive produced by , edited by , and directed by a sibling of [Everton Rocca]"
    },
    {
        "questionIdx": 183293,
        "questionPatternModEntities": "What was produced by , executive produced by , written by , and edited by M1 's American spouse",
        "questionTemplate": "What was [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x0 P3 ?x1 .\n?x1 P4 M0 .\n?x1 P5 M1 .\nFILTER ( ?x1 != M1 )\n}",
        "recursionDepth": 41,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1040 ?x1 .\n?x0 wdt:P1431 ?x1 .\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x0 wdt:P58 ?x1 .\n?x1 wdt:P27 wd:Q30 .\n?x1 wdt:P26 wd:Q6813152 .\nFILTER ( ?x1 != wd:Q6813152 )\n}LIMIT 1",
        "questionWithBrackets": "What was produced by , executive produced by , written by , and edited by [Mellody Hobson] 's American spouse"
    },
    {
        "questionIdx": 183318,
        "questionPatternModEntities": "What was produced by , written by , and directed by M0",
        "questionTemplate": "What was [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M0 .\n?x0 P2 M0\n}",
        "recursionDepth": 25,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 wd:Q882 .\n?x0 wdt:P162|wdt:P272 wd:Q882 .\n?x0 wdt:P58 wd:Q882\n}LIMIT 1",
        "questionWithBrackets": "What was produced by , written by , and directed by [Charlie Chaplin]"
    },
    {
        "questionIdx": 183329,
        "questionPatternModEntities": "What was produced by , written by , and edited by M0",
        "questionTemplate": "What was [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M0 .\n?x0 P2 M0\n}",
        "recursionDepth": 25,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1040 wd:Q25186 .\n?x0 wdt:P162|wdt:P272 wd:Q25186 .\n?x0 wdt:P58 wd:Q25186\n}LIMIT 1",
        "questionWithBrackets": "What was produced by , written by , and edited by [Gus Van Sant]"
    },
    {
        "questionIdx": 183346,
        "questionPatternModEntities": "What was produced by , written by , and edited by a sibling of M0",
        "questionTemplate": "What was [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x1 P3 M0 .\nFILTER ( ?x1 != M0 )\n}",
        "recursionDepth": 31,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1040 ?x1 .\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x0 wdt:P58 ?x1 .\n?x1 wdt:P3373 wd:Q372788 .\nFILTER ( ?x1 != wd:Q372788 )\n}LIMIT 1",
        "questionWithBrackets": "What was produced by , written by , and edited by a sibling of [Jonathan Nolan]"
    },
    {
        "questionIdx": 183348,
        "questionPatternModEntities": "What was produced by , written by , and executive produced by M0",
        "questionTemplate": "What was [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M0 .\n?x0 P2 M0\n}",
        "recursionDepth": 26,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1431 wd:Q2001 .\n?x0 wdt:P162|wdt:P272 wd:Q2001 .\n?x0 wdt:P58 wd:Q2001\n}LIMIT 1",
        "questionWithBrackets": "What was produced by , written by , and executive produced by [Stanley Kubrick]"
    },
    {
        "questionIdx": 183409,
        "questionPatternModEntities": "What was produced by , written by , edited by , and directed by a sibling of M0",
        "questionTemplate": "What was [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x0 P3 ?x1 .\n?x1 P4 M0 .\nFILTER ( ?x1 != M0 )\n}",
        "recursionDepth": 37,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 ?x1 .\n?x0 wdt:P1040 ?x1 .\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x0 wdt:P58 ?x1 .\n?x1 wdt:P3373 wd:Q372788 .\nFILTER ( ?x1 != wd:Q372788 )\n}LIMIT 1",
        "questionWithBrackets": "What was produced by , written by , edited by , and directed by a sibling of [Jonathan Nolan]"
    },
    {
        "questionIdx": 183413,
        "questionPatternModEntities": "What was produced by , written by , edited by , and executive produced by a parent of M0",
        "questionTemplate": "What was [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x0 P3 ?x1 .\n?x1 P4 M0\n}",
        "recursionDepth": 38,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1040 ?x1 .\n?x0 wdt:P1431 ?x1 .\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x0 wdt:P58 ?x1 .\n?x1 wdt:P40|wdt:P355 wd:Q1620638\n}LIMIT 1",
        "questionWithBrackets": "What was produced by , written by , edited by , and executive produced by a parent of [Hisao Kurosawa]"
    },
    {
        "questionIdx": 183415,
        "questionPatternModEntities": "What was produced by , written by , edited by , directed by , and executive produced by M0 's parent",
        "questionTemplate": "What was [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x0 P3 ?x1 .\n?x0 P4 ?x1 .\n?x1 P5 M0\n}",
        "recursionDepth": 42,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 ?x1 .\n?x0 wdt:P1040 ?x1 .\n?x0 wdt:P1431 ?x1 .\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x0 wdt:P58 ?x1 .\n?x1 wdt:P40|wdt:P355 wd:Q1620638\n}LIMIT 1",
        "questionWithBrackets": "What was produced by , written by , edited by , directed by , and executive produced by [Hisao Kurosawa] 's parent"
    },
    {
        "questionIdx": 183428,
        "questionPatternModEntities": "What was produced by , written by , executive produced by , and directed by M0 's parent 's spouse",
        "questionTemplate": "What was [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x0 P3 ?x1 .\n?x1 P4 ?x2 .\n?x2 P5 M0 .\nFILTER ( ?x1 != ?x2 )\n}",
        "recursionDepth": 40,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 ?x1 .\n?x0 wdt:P1431 ?x1 .\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x0 wdt:P58 ?x1 .\n?x1 wdt:P26 ?x2 .\n?x2 wdt:P40|wdt:P355 wd:Q561310 .\nFILTER ( ?x1 != ?x2 )\n}LIMIT 1",
        "questionWithBrackets": "What was produced by , written by , executive produced by , and directed by [Jaycee Chan] 's parent 's spouse"
    },
    {
        "questionIdx": 183430,
        "questionPatternModEntities": "What was produced by , written by , executive produced by , and directed by M1 's American parent",
        "questionTemplate": "What was [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x0 P3 ?x1 .\n?x1 P4 M0 .\n?x1 P5 M1\n}",
        "recursionDepth": 41,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 ?x1 .\n?x0 wdt:P1431 ?x1 .\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x0 wdt:P58 ?x1 .\n?x1 wdt:P40|wdt:P355 wd:Q561310 .\n?x1 wdt:P27 wd:Q30\n}LIMIT 1",
        "questionWithBrackets": "What was produced by , written by , executive produced by , and directed by [Jaycee Chan] 's American parent"
    },
    {
        "questionIdx": 183437,
        "questionPatternModEntities": "What was produced by , written by , executive produced by , and edited by M0 's spouse",
        "questionTemplate": "What was [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x0 P3 ?x1 .\n?x1 P4 M0 .\nFILTER ( ?x1 != M0 )\n}",
        "recursionDepth": 36,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1040 ?x1 .\n?x0 wdt:P1431 ?x1 .\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x0 wdt:P58 ?x1 .\n?x1 wdt:P26 wd:Q3032150 .\nFILTER ( ?x1 != wd:Q3032150 )\n}LIMIT 1",
        "questionWithBrackets": "What was produced by , written by , executive produced by , and edited by [Y\u014dko Yaguchi] 's spouse"
    },
    {
        "questionIdx": 183490,
        "questionPatternModEntities": "What was produced , directed , and written by a male spouse of M1 's German sibling",
        "questionTemplate": "What was [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x1 P3 M0 .\n?x1 P4 ?x2 .\n?x2 P5 M1 .\n?x2 P6 M2 .\nFILTER ( ?x1 != ?x2 ) .\nFILTER ( ?x2 != M1 )\n}",
        "recursionDepth": 43,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 ?x1 .\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x0 wdt:P58 ?x1 .\n?x1 wdt:P21 wd:Q6581097 .\n?x1 wdt:P26 ?x2 .\n?x2 wdt:P27 wd:Q183 .\n?x2 wdt:P3373 wd:Q69234 .\nFILTER ( ?x1 != ?x2 ) .\nFILTER ( ?x2 != wd:Q69234 )\n}LIMIT 1",
        "questionWithBrackets": "What was produced , directed , and written by a male spouse of [Jan Harlan] 's German sibling"
    },
    {
        "questionIdx": 183496,
        "questionPatternModEntities": "What was produced , directed , edited , and executive produced by a sibling of M0",
        "questionTemplate": "What was [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x0 P3 ?x1 .\n?x1 P4 M0 .\nFILTER ( ?x1 != M0 )\n}",
        "recursionDepth": 35,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 ?x1 .\n?x0 wdt:P1040 ?x1 .\n?x0 wdt:P1431 ?x1 .\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x1 wdt:P3373 wd:Q28370409 .\nFILTER ( ?x1 != wd:Q28370409 )\n}LIMIT 1",
        "questionWithBrackets": "What was produced , directed , edited , and executive produced by a sibling of [Everton Rocca]"
    },
    {
        "questionIdx": 183508,
        "questionPatternModEntities": "What was produced , directed , edited , executive produced , and written by M0 's spouse",
        "questionTemplate": "What was [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x0 P3 ?x1 .\n?x0 P4 ?x1 .\n?x1 P5 M0 .\nFILTER ( ?x1 != M0 )\n}",
        "recursionDepth": 38,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 ?x1 .\n?x0 wdt:P1040 ?x1 .\n?x0 wdt:P1431 ?x1 .\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x0 wdt:P58 ?x1 .\n?x1 wdt:P26 wd:Q3032150 .\nFILTER ( ?x1 != wd:Q3032150 )\n}LIMIT 1",
        "questionWithBrackets": "What was produced , directed , edited , executive produced , and written by [Y\u014dko Yaguchi] 's spouse"
    },
    {
        "questionIdx": 183516,
        "questionPatternModEntities": "What was produced , directed , executive produced , and edited by a parent of M0",
        "questionTemplate": "What was [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x0 P3 ?x1 .\n?x1 P4 M0\n}",
        "recursionDepth": 35,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 ?x1 .\n?x0 wdt:P1040 ?x1 .\n?x0 wdt:P1431 ?x1 .\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x1 wdt:P40|wdt:P355 wd:Q1620638\n}LIMIT 1",
        "questionWithBrackets": "What was produced , directed , executive produced , and edited by a parent of [Hisao Kurosawa]"
    },
    {
        "questionIdx": 183520,
        "questionPatternModEntities": "What was produced , directed , executive produced , and written by a spouse of M0",
        "questionTemplate": "What was [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x0 P3 ?x1 .\n?x1 P4 M0 .\nFILTER ( ?x1 != M0 )\n}",
        "recursionDepth": 35,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 ?x1 .\n?x0 wdt:P1431 ?x1 .\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x0 wdt:P58 ?x1 .\n?x1 wdt:P26 wd:Q717669 .\nFILTER ( ?x1 != wd:Q717669 )\n}LIMIT 1",
        "questionWithBrackets": "What was produced , directed , executive produced , and written by a spouse of [Lin Feng-jiao]"
    },
    {
        "questionIdx": 183526,
        "questionPatternModEntities": "What was produced , directed , executive produced , edited , and written by M0 's sibling",
        "questionTemplate": "What was [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x0 P3 ?x1 .\n?x0 P4 ?x1 .\n?x1 P5 M0 .\nFILTER ( ?x1 != M0 )\n}",
        "recursionDepth": 38,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 ?x1 .\n?x0 wdt:P1040 ?x1 .\n?x0 wdt:P1431 ?x1 .\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x0 wdt:P58 ?x1 .\n?x1 wdt:P3373 wd:Q28370409 .\nFILTER ( ?x1 != wd:Q28370409 )\n}LIMIT 1",
        "questionWithBrackets": "What was produced , directed , executive produced , edited , and written by [Everton Rocca] 's sibling"
    },
    {
        "questionIdx": 183543,
        "questionPatternModEntities": "What was produced , directed , written , edited , and executive produced by M0 's parent",
        "questionTemplate": "What was [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x0 P3 ?x1 .\n?x0 P4 ?x1 .\n?x1 P5 M0\n}",
        "recursionDepth": 38,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 ?x1 .\n?x0 wdt:P1040 ?x1 .\n?x0 wdt:P1431 ?x1 .\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x0 wdt:P58 ?x1 .\n?x1 wdt:P40|wdt:P355 wd:Q1620638\n}LIMIT 1",
        "questionWithBrackets": "What was produced , directed , written , edited , and executive produced by [Hisao Kurosawa] 's parent"
    },
    {
        "questionIdx": 183554,
        "questionPatternModEntities": "What was produced , edited , and directed by M0",
        "questionTemplate": "What was [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M0 .\n?x0 P2 M0\n}",
        "recursionDepth": 23,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 wd:Q8006 .\n?x0 wdt:P1040 wd:Q8006 .\n?x0 wdt:P162|wdt:P272 wd:Q8006\n}LIMIT 1",
        "questionWithBrackets": "What was produced , edited , and directed by [Akira Kurosawa]"
    },
    {
        "questionIdx": 183555,
        "questionPatternModEntities": "What was produced , edited , and directed by M0 and M1",
        "questionTemplate": "What was [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P1 M0 .\n?x0 P1 M1 .\n?x0 P2 M0 .\n?x0 P2 M1\n}",
        "recursionDepth": 27,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 wd:Q562108 .\n?x0 wdt:P57 wd:Q1687239 .\n?x0 wdt:P1040 wd:Q562108 .\n?x0 wdt:P1040 wd:Q1687239 .\n?x0 wdt:P162|wdt:P272 wd:Q562108 .\n?x0 wdt:P162|wdt:P272 wd:Q1687239\n}",
        "questionWithBrackets": "What was produced , edited , and directed by [Jens J\u00f8rgen Thorsen] and [J\u00f8rgen Leth]"
    },
    {
        "questionIdx": 183563,
        "questionPatternModEntities": "What was produced , edited , and executive produced by M0",
        "questionTemplate": "What was [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M0 .\n?x0 P2 M0\n}",
        "recursionDepth": 24,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1040 wd:Q8006 .\n?x0 wdt:P1431 wd:Q8006 .\n?x0 wdt:P162|wdt:P272 wd:Q8006\n}LIMIT 1",
        "questionWithBrackets": "What was produced , edited , and executive produced by [Akira Kurosawa]"
    },
    {
        "questionIdx": 183567,
        "questionPatternModEntities": "What was produced , edited , and written by M0 's parent",
        "questionTemplate": "What was [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x1 P3 M0\n}",
        "recursionDepth": 27,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1040 ?x1 .\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x0 wdt:P58 ?x1 .\n?x1 wdt:P40|wdt:P355 wd:Q1620638\n}LIMIT 1",
        "questionWithBrackets": "What was produced , edited , and written by [Hisao Kurosawa] 's parent"
    },
    {
        "questionIdx": 183570,
        "questionPatternModEntities": "What was produced , edited , and written by M0 's Spanish sibling",
        "questionTemplate": "What was [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x1 P3 M0 .\n?x1 P4 M1 .\nFILTER ( ?x1 != M0 )\n}",
        "recursionDepth": 32,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1040 ?x1 .\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x0 wdt:P58 ?x1 .\n?x1 wdt:P27 wd:Q29 .\n?x1 wdt:P3373 wd:Q5833303 .\nFILTER ( ?x1 != wd:Q5833303 )\n}LIMIT 1",
        "questionWithBrackets": "What was produced , edited , and written by [Enrique Franco] 's Spanish sibling"
    },
    {
        "questionIdx": 183572,
        "questionPatternModEntities": "What was produced , edited , and written by M0 and M1",
        "questionTemplate": "What was [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P1 M0 .\n?x0 P1 M1 .\n?x0 P2 M0 .\n?x0 P2 M1\n}",
        "recursionDepth": 27,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1040 wd:Q562108 .\n?x0 wdt:P1040 wd:Q1687239 .\n?x0 wdt:P162|wdt:P272 wd:Q562108 .\n?x0 wdt:P162|wdt:P272 wd:Q1687239 .\n?x0 wdt:P58 wd:Q562108 .\n?x0 wdt:P58 wd:Q1687239\n}",
        "questionWithBrackets": "What was produced , edited , and written by [Jens J\u00f8rgen Thorsen] and [J\u00f8rgen Leth]"
    },
    {
        "questionIdx": 183573,
        "questionPatternModEntities": "What was produced , edited , and written by M0",
        "questionTemplate": "What was [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M0 .\n?x0 P2 M0\n}",
        "recursionDepth": 23,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1040 wd:Q51545 .\n?x0 wdt:P162|wdt:P272 wd:Q51545 .\n?x0 wdt:P58 wd:Q51545\n}LIMIT 1",
        "questionWithBrackets": "What was produced , edited , and written by [Luis Bu\u00f1uel]"
    },
    {
        "questionIdx": 183577,
        "questionPatternModEntities": "What was produced , edited , and written by a German sibling of M0",
        "questionTemplate": "What was [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x1 P3 M0 .\n?x1 P4 M1 .\nFILTER ( ?x1 != M0 )\n}",
        "recursionDepth": 34,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1040 ?x1 .\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x0 wdt:P58 ?x1 .\n?x1 wdt:P27 wd:Q183 .\n?x1 wdt:P3373 wd:Q15454626 .\nFILTER ( ?x1 != wd:Q15454626 )\n}LIMIT 1",
        "questionWithBrackets": "What was produced , edited , and written by a German sibling of [Steffen Sch\u00e4ffler]"
    },
    {
        "questionIdx": 183579,
        "questionPatternModEntities": "What was produced , edited , and written by a parent of M0",
        "questionTemplate": "What was [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x1 P3 M0\n}",
        "recursionDepth": 29,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1040 ?x1 .\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x0 wdt:P58 ?x1 .\n?x1 wdt:P40|wdt:P355 wd:Q1710546\n}LIMIT 1",
        "questionWithBrackets": "What was produced , edited , and written by a parent of [Juan Luis Bu\u00f1uel]"
    },
    {
        "questionIdx": 183581,
        "questionPatternModEntities": "What was produced , edited , and written by a spouse of M0",
        "questionTemplate": "What was [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x1 P3 M0 .\nFILTER ( ?x1 != M0 )\n}",
        "recursionDepth": 29,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1040 ?x1 .\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x0 wdt:P58 ?x1 .\n?x1 wdt:P26 wd:Q3032150 .\nFILTER ( ?x1 != wd:Q3032150 )\n}LIMIT 1",
        "questionWithBrackets": "What was produced , edited , and written by a spouse of [Y\u014dko Yaguchi]"
    },
    {
        "questionIdx": 183582,
        "questionPatternModEntities": "What was produced , edited , and written by a American sibling of M0",
        "questionTemplate": "What was [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x1 P3 M0 .\n?x1 P4 M1 .\nFILTER ( ?x1 != M0 )\n}",
        "recursionDepth": 34,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1040 ?x1 .\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x0 wdt:P58 ?x1 .\n?x1 wdt:P27 wd:Q30 .\n?x1 wdt:P3373 wd:Q372788 .\nFILTER ( ?x1 != wd:Q372788 )\n}LIMIT 1",
        "questionWithBrackets": "What was produced , edited , and written by a American sibling of [Jonathan Nolan]"
    },
    {
        "questionIdx": 183587,
        "questionPatternModEntities": "What was produced , edited , directed , and executive produced by M0",
        "questionTemplate": "What was [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M0 .\n?x0 P2 M0 .\n?x0 P3 M0\n}",
        "recursionDepth": 29,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 wd:Q8006 .\n?x0 wdt:P1040 wd:Q8006 .\n?x0 wdt:P1431 wd:Q8006 .\n?x0 wdt:P162|wdt:P272 wd:Q8006\n}LIMIT 1",
        "questionWithBrackets": "What was produced , edited , directed , and executive produced by [Akira Kurosawa]"
    },
    {
        "questionIdx": 183622,
        "questionPatternModEntities": "What was produced , edited , executive produced , written , and directed by M0 's sibling",
        "questionTemplate": "What was [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x0 P3 ?x1 .\n?x0 P4 ?x1 .\n?x1 P5 M0 .\nFILTER ( ?x1 != M0 )\n}",
        "recursionDepth": 38,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 ?x1 .\n?x0 wdt:P1040 ?x1 .\n?x0 wdt:P1431 ?x1 .\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x0 wdt:P58 ?x1 .\n?x1 wdt:P3373 wd:Q28370409 .\nFILTER ( ?x1 != wd:Q28370409 )\n}LIMIT 1",
        "questionWithBrackets": "What was produced , edited , executive produced , written , and directed by [Everton Rocca] 's sibling"
    },
    {
        "questionIdx": 183697,
        "questionPatternModEntities": "What was produced , executive produced , written , and edited by a parent of M0",
        "questionTemplate": "What was [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x0 P3 ?x1 .\n?x1 P4 M0\n}",
        "recursionDepth": 35,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1040 ?x1 .\n?x0 wdt:P1431 ?x1 .\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x0 wdt:P58 ?x1 .\n?x1 wdt:P40|wdt:P355 wd:Q1620638\n}LIMIT 1",
        "questionWithBrackets": "What was produced , executive produced , written , and edited by a parent of [Hisao Kurosawa]"
    },
    {
        "questionIdx": 183706,
        "questionPatternModEntities": "What was produced , written , and directed by M0 and M1",
        "questionTemplate": "What was [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P1 M0 .\n?x0 P1 M1 .\n?x0 P2 M0 .\n?x0 P2 M1\n}",
        "recursionDepth": 27,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 wd:Q3772 .\n?x0 wdt:P57 wd:Q47284 .\n?x0 wdt:P162|wdt:P272 wd:Q3772 .\n?x0 wdt:P162|wdt:P272 wd:Q47284 .\n?x0 wdt:P58 wd:Q3772 .\n?x0 wdt:P58 wd:Q47284\n}",
        "questionWithBrackets": "What was produced , written , and directed by [Quentin Tarantino] and [Robert Rodriguez]"
    },
    {
        "questionIdx": 183721,
        "questionPatternModEntities": "What was produced , written , and edited by M0",
        "questionTemplate": "What was [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M0 .\n?x0 P2 M0\n}",
        "recursionDepth": 23,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1040 wd:Q8006 .\n?x0 wdt:P162|wdt:P272 wd:Q8006 .\n?x0 wdt:P58 wd:Q8006\n}LIMIT 1",
        "questionWithBrackets": "What was produced , written , and edited by [Akira Kurosawa]"
    },
    {
        "questionIdx": 183725,
        "questionPatternModEntities": "What was produced , written , and edited by M0 and M1",
        "questionTemplate": "What was [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P1 M0 .\n?x0 P1 M1 .\n?x0 P2 M0 .\n?x0 P2 M1\n}",
        "recursionDepth": 27,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1040 wd:Q562108 .\n?x0 wdt:P1040 wd:Q1687239 .\n?x0 wdt:P162|wdt:P272 wd:Q562108 .\n?x0 wdt:P162|wdt:P272 wd:Q1687239 .\n?x0 wdt:P58 wd:Q562108 .\n?x0 wdt:P58 wd:Q1687239\n}",
        "questionWithBrackets": "What was produced , written , and edited by [Jens J\u00f8rgen Thorsen] and [J\u00f8rgen Leth]"
    },
    {
        "questionIdx": 183732,
        "questionPatternModEntities": "What was produced , written , and executive produced by M0",
        "questionTemplate": "What was [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M0 .\n?x0 P2 M0\n}",
        "recursionDepth": 24,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1431 wd:Q16473 .\n?x0 wdt:P162|wdt:P272 wd:Q16473 .\n?x0 wdt:P58 wd:Q16473\n}LIMIT 1",
        "questionWithBrackets": "What was produced , written , and executive produced by [Steve Martin]"
    },
    {
        "questionIdx": 183746,
        "questionPatternModEntities": "What was produced , written , directed , edited , and executive produced by a spouse of M0",
        "questionTemplate": "What was [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x0 P3 ?x1 .\n?x0 P4 ?x1 .\n?x1 P5 M0 .\nFILTER ( ?x1 != M0 )\n}",
        "recursionDepth": 40,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 ?x1 .\n?x0 wdt:P1040 ?x1 .\n?x0 wdt:P1431 ?x1 .\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x0 wdt:P58 ?x1 .\n?x1 wdt:P26 wd:Q3032150 .\nFILTER ( ?x1 != wd:Q3032150 )\n}LIMIT 1",
        "questionWithBrackets": "What was produced , written , directed , edited , and executive produced by a spouse of [Y\u014dko Yaguchi]"
    },
    {
        "questionIdx": 183751,
        "questionPatternModEntities": "What was produced , written , edited , and directed by M0 's sibling",
        "questionTemplate": "What was [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x0 P3 ?x1 .\n?x1 P4 M0 .\nFILTER ( ?x1 != M0 )\n}",
        "recursionDepth": 32,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 ?x1 .\n?x0 wdt:P1040 ?x1 .\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x0 wdt:P58 ?x1 .\n?x1 wdt:P3373 wd:Q606780 .\nFILTER ( ?x1 != wd:Q606780 )\n}LIMIT 1",
        "questionWithBrackets": "What was produced , written , edited , and directed by [Sydney Chaplin] 's sibling"
    },
    {
        "questionIdx": 183753,
        "questionPatternModEntities": "What was produced , written , edited , and directed by M0",
        "questionTemplate": "What was [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M0 .\n?x0 P2 M0 .\n?x0 P3 M0\n}",
        "recursionDepth": 28,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 wd:Q8006 .\n?x0 wdt:P1040 wd:Q8006 .\n?x0 wdt:P162|wdt:P272 wd:Q8006 .\n?x0 wdt:P58 wd:Q8006\n}LIMIT 1",
        "questionWithBrackets": "What was produced , written , edited , and directed by [Akira Kurosawa]"
    },
    {
        "questionIdx": 183774,
        "questionPatternModEntities": "What was produced , written , executive produced , and edited by M0 's parent",
        "questionTemplate": "What was [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x0 P3 ?x1 .\n?x1 P4 M0\n}",
        "recursionDepth": 33,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1040 ?x1 .\n?x0 wdt:P1431 ?x1 .\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x0 wdt:P58 ?x1 .\n?x1 wdt:P40|wdt:P355 wd:Q1620638\n}LIMIT 1",
        "questionWithBrackets": "What was produced , written , executive produced , and edited by [Hisao Kurosawa] 's parent"
    },
    {
        "questionIdx": 183775,
        "questionPatternModEntities": "What was produced , written , executive produced , and edited by M0",
        "questionTemplate": "What was [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M0 .\n?x0 P2 M0 .\n?x0 P3 M0\n}",
        "recursionDepth": 29,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1040 wd:Q8006 .\n?x0 wdt:P1431 wd:Q8006 .\n?x0 wdt:P162|wdt:P272 wd:Q8006 .\n?x0 wdt:P58 wd:Q8006\n}LIMIT 1",
        "questionWithBrackets": "What was produced , written , executive produced , and edited by [Akira Kurosawa]"
    },
    {
        "questionIdx": 183787,
        "questionPatternModEntities": "What was written and directed by M0 and M1",
        "questionTemplate": "What was [VP_SIMPLE] and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P1 M0 .\n?x0 P1 M1\n}",
        "recursionDepth": 22,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 wd:Q882 .\n?x0 wdt:P57 wd:Q1383202 .\n?x0 wdt:P58 wd:Q882 .\n?x0 wdt:P58 wd:Q1383202\n}",
        "questionWithBrackets": "What was written and directed by [Charlie Chaplin] and [Leo White]"
    },
    {
        "questionIdx": 183793,
        "questionPatternModEntities": "What was written and directed by M0 , M1 , M2 , and M3",
        "questionTemplate": "What was [VP_SIMPLE] and [VP_SIMPLE] by [entity] , [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P0 M3 .\n?x0 P1 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\n?x0 P1 M3\n}",
        "recursionDepth": 28,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 wd:Q4500 .\n?x0 wdt:P57 wd:Q5542223 .\n?x0 wdt:P57 wd:Q7174311 .\n?x0 wdt:P57 wd:Q7407299 .\n?x0 wdt:P58 wd:Q4500 .\n?x0 wdt:P58 wd:Q5542223 .\n?x0 wdt:P58 wd:Q7174311 .\n?x0 wdt:P58 wd:Q7407299\n}",
        "questionWithBrackets": "What was written and directed by [Sam Catlin] , [Peter Gould] , [George Mastras] , and [Vince Gilligan]"
    },
    {
        "questionIdx": 183831,
        "questionPatternModEntities": "What was written and edited by M0 's sibling",
        "questionTemplate": "What was [VP_SIMPLE] and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x1 P2 M0 .\nFILTER ( ?x1 != M0 )\n}",
        "recursionDepth": 22,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1040 ?x1 .\n?x0 wdt:P58 ?x1 .\n?x1 wdt:P3373 wd:Q104373781 .\nFILTER ( ?x1 != wd:Q104373781 )\n}LIMIT 1",
        "questionWithBrackets": "What was written and edited by [John Lynch] 's sibling"
    },
    {
        "questionIdx": 183833,
        "questionPatternModEntities": "What was written and edited by M0 , M1 , and M2",
        "questionTemplate": "What was [VP_SIMPLE] and [VP_SIMPLE] by [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P1 M0 .\n?x0 P1 M1 .\n?x0 P1 M2\n}",
        "recursionDepth": 25,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1040 wd:Q562108 .\n?x0 wdt:P1040 wd:Q1687239 .\n?x0 wdt:P1040 wd:Q35979475 .\n?x0 wdt:P58 wd:Q562108 .\n?x0 wdt:P58 wd:Q1687239 .\n?x0 wdt:P58 wd:Q35979475\n}",
        "questionWithBrackets": "What was written and edited by [Jens J\u00f8rgen Thorsen] , [Ole John] , and [J\u00f8rgen Leth]"
    },
    {
        "questionIdx": 183835,
        "questionPatternModEntities": "What was written and edited by M0 and M1",
        "questionTemplate": "What was [VP_SIMPLE] and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P1 M0 .\n?x0 P1 M1\n}",
        "recursionDepth": 22,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1040 wd:Q44426 .\n?x0 wdt:P1040 wd:Q96024 .\n?x0 wdt:P58 wd:Q44426 .\n?x0 wdt:P58 wd:Q96024\n}",
        "questionWithBrackets": "What was written and edited by [Rainer Werner Fassbinder] and [Michael Fengler]"
    },
    {
        "questionIdx": 183840,
        "questionPatternModEntities": "What was written and edited by M0",
        "questionTemplate": "What was [VP_SIMPLE] and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M0\n}",
        "recursionDepth": 18,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1040 wd:Q8006 .\n?x0 wdt:P58 wd:Q8006\n}LIMIT 1",
        "questionWithBrackets": "What was written and edited by [Akira Kurosawa]"
    },
    {
        "questionIdx": 183847,
        "questionPatternModEntities": "What was written and edited by M0 's Japanese sibling",
        "questionTemplate": "What was [VP_SIMPLE] and [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x1 P2 M0 .\n?x1 P3 M1 .\nFILTER ( ?x1 != M0 )\n}",
        "recursionDepth": 27,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1040 ?x1 .\n?x0 wdt:P58 ?x1 .\n?x1 wdt:P27 wd:Q17 .\n?x1 wdt:P3373 wd:Q11404271 .\nFILTER ( ?x1 != wd:Q11404271 )\n}LIMIT 1",
        "questionWithBrackets": "What was written and edited by [Masaru Kitano] 's Japanese sibling"
    },
    {
        "questionIdx": 183862,
        "questionPatternModEntities": "What was written and edited by a sibling of M0",
        "questionTemplate": "What was [VP_SIMPLE] and [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x1 P2 M0 .\nFILTER ( ?x1 != M0 )\n}",
        "recursionDepth": 24,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1040 ?x1 .\n?x0 wdt:P58 ?x1 .\n?x1 wdt:P3373 wd:Q374654 .\nFILTER ( ?x1 != wd:Q374654 )\n}LIMIT 1",
        "questionWithBrackets": "What was written and edited by a sibling of [Ren\u00e9 Sch\u00e9rer]"
    },
    {
        "questionIdx": 183863,
        "questionPatternModEntities": "What was written and edited by a spouse of M0",
        "questionTemplate": "What was [VP_SIMPLE] and [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x1 P2 M0 .\nFILTER ( ?x1 != M0 )\n}",
        "recursionDepth": 24,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1040 ?x1 .\n?x0 wdt:P58 ?x1 .\n?x1 wdt:P26 wd:Q3032150 .\nFILTER ( ?x1 != wd:Q3032150 )\n}LIMIT 1",
        "questionWithBrackets": "What was written and edited by a spouse of [Y\u014dko Yaguchi]"
    },
    {
        "questionIdx": 183871,
        "questionPatternModEntities": "What was written and edited by M0 's spouse",
        "questionTemplate": "What was [VP_SIMPLE] and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x1 P2 M0 .\nFILTER ( ?x1 != M0 )\n}",
        "recursionDepth": 22,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1040 ?x1 .\n?x0 wdt:P58 ?x1 .\n?x1 wdt:P26 wd:Q3032150 .\nFILTER ( ?x1 != wd:Q3032150 )\n}LIMIT 1",
        "questionWithBrackets": "What was written and edited by [Y\u014dko Yaguchi] 's spouse"
    },
    {
        "questionIdx": 183874,
        "questionPatternModEntities": "What was written and executive produced by M0 's sibling",
        "questionTemplate": "What was [VP_SIMPLE] and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x1 P2 M0 .\nFILTER ( ?x1 != M0 )\n}",
        "recursionDepth": 23,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1431 ?x1 .\n?x0 wdt:P58 ?x1 .\n?x1 wdt:P3373 wd:Q469204 .\nFILTER ( ?x1 != wd:Q469204 )\n}LIMIT 1",
        "questionWithBrackets": "What was written and executive produced by [Anne Spielberg] 's sibling"
    },
    {
        "questionIdx": 183885,
        "questionPatternModEntities": "What was written and executive produced by M1 's female spouse 's parent",
        "questionTemplate": "What was [VP_SIMPLE] and [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x1 P2 ?x2 .\n?x2 P3 M0 .\n?x2 P4 M1 .\nFILTER ( ?x2 != M1 )\n}",
        "recursionDepth": 32,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1431 ?x1 .\n?x0 wdt:P58 ?x1 .\n?x1 wdt:P40|wdt:P355 ?x2 .\n?x2 wdt:P21 wd:Q6581072 .\n?x2 wdt:P26 wd:Q23108585 .\nFILTER ( ?x2 != wd:Q23108585 )\n}LIMIT 1",
        "questionWithBrackets": "What was written and executive produced by [Alasdhair Willis] 's female spouse 's parent"
    },
    {
        "questionIdx": 183939,
        "questionPatternModEntities": "What was written and produced by M0 and M1",
        "questionTemplate": "What was [VP_SIMPLE] and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P1 M0 .\n?x0 P1 M1\n}",
        "recursionDepth": 22,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P162|wdt:P272 wd:Q3772 .\n?x0 wdt:P162|wdt:P272 wd:Q47284 .\n?x0 wdt:P58 wd:Q3772 .\n?x0 wdt:P58 wd:Q47284\n}",
        "questionWithBrackets": "What was written and produced by [Robert Rodriguez] and [Quentin Tarantino]"
    },
    {
        "questionIdx": 183963,
        "questionPatternModEntities": "What was written and produced by a spouse of M0",
        "questionTemplate": "What was [VP_SIMPLE] and [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x1 P2 M0 .\nFILTER ( ?x1 != M0 )\n}",
        "recursionDepth": 24,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x0 wdt:P58 ?x1 .\n?x1 wdt:P26 wd:Q464056 .\nFILTER ( ?x1 != wd:Q464056 )\n}LIMIT 1",
        "questionWithBrackets": "What was written and produced by a spouse of [Gala Dal\u00ed]"
    },
    {
        "questionIdx": 183987,
        "questionPatternModEntities": "What was written by M0 and M1 , directed by M2 , M3 , and M4 , and directed by M5 's parent",
        "questionTemplate": "What was [VP_SIMPLE] by [entity] and [entity] , [VP_SIMPLE] by [entity] , [entity] , and [entity] , and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P1 ?x1 .\n?x0 P1 M2 .\n?x0 P1 M3 .\n?x0 P1 M4 .\n?x1 P2 M5\n}",
        "recursionDepth": 46,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 ?x1 .\n?x0 wdt:P57 wd:Q127800 .\n?x0 wdt:P57 wd:Q462727 .\n?x0 wdt:P57 wd:Q371455 .\n?x0 wdt:P58 wd:Q4500 .\n?x0 wdt:P58 wd:Q5542223 .\n?x1 wdt:P40|wdt:P355 wd:Q33100074\n}",
        "questionWithBrackets": "What was written by [Vince Gilligan] and [George Mastras] , directed by [F\u00e9lix Enr\u00edquez Alcal\u00e1] , [David Slade] , and [Michelle MacLaren] , and directed by [Taylor Dearden] 's parent"
    },
    {
        "questionIdx": 184022,
        "questionPatternModEntities": "What was written by M0 's female sibling",
        "questionTemplate": "What was [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x1 P1 M0 .\n?x1 P2 M1 .\nFILTER ( ?x1 != M0 )\n}",
        "recursionDepth": 20,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P58 ?x1 .\n?x1 wdt:P21 wd:Q6581072 .\n?x1 wdt:P3373 wd:Q5112102 .\nFILTER ( ?x1 != wd:Q5112102 )\n}LIMIT 1",
        "questionWithBrackets": "What was written by [Christopher Ciccone] 's female sibling"
    },
    {
        "questionIdx": 184090,
        "questionPatternModEntities": "What was written by M0 , M1 , and M2 and directed by a employee of M3 , M4 , and M5",
        "questionTemplate": "What was [VP_SIMPLE] by [entity] , [entity] , and [entity] and [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P1 ?x1 .\n?x1 P2 M3 .\n?x1 P2 M4 .\n?x1 P2 M5\n}",
        "recursionDepth": 42,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 ?x1 .\n?x0 wdt:P58 wd:Q989 .\n?x0 wdt:P58 wd:Q1898745 .\n?x0 wdt:P58 wd:Q55169 .\n?x1 wdt:P108 wd:Q144488 .\n?x1 wdt:P108 wd:Q4050610 .\n?x1 wdt:P108 wd:Q6377819\n}",
        "questionWithBrackets": "What was written by [John Paul II] , [Mario Di Nardo] , and [Krzysztof Zanussi] and directed by a employee of [University of Warsaw] , [TOR film studio] , and [Krzysztof Kie\u015blowski Film School]"
    },
    {
        "questionIdx": 184128,
        "questionPatternModEntities": "What was written by M0 , directed by M1 , and executive produced by a Italian sibling of M2",
        "questionTemplate": "What was [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 M0 .\n?x0 P2 M1 .\n?x1 P3 M2 .\n?x1 P4 M3 .\nFILTER ( ?x1 != M2 )\n}",
        "recursionDepth": 43,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 wd:Q53004 .\n?x0 wdt:P1431 ?x1 .\n?x0 wdt:P58 wd:Q268443 .\n?x1 wdt:P27 wd:Q38 .\n?x1 wdt:P3373 wd:Q106180552 .\nFILTER ( ?x1 != wd:Q106180552 )\n}",
        "questionWithBrackets": "What was written by [Suso Cecchi d'Amico] , directed by [Vittorio De Sica] , and executive produced by a Italian sibling of [Elmo De Sica]"
    },
    {
        "questionIdx": 184172,
        "questionPatternModEntities": "What was written by M1 , written by M2 and M3 , written by M4 , and executive produced by M0",
        "questionTemplate": "What was [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] and [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\n?x0 P1 M3 .\n?x0 P1 M4\n}",
        "recursionDepth": 45,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1431 wd:Q56094 .\n?x0 wdt:P58 wd:Q2032881 .\n?x0 wdt:P58 wd:Q1348531 .\n?x0 wdt:P58 wd:Q879793 .\n?x0 wdt:P58 wd:Q44714205\n}",
        "questionWithBrackets": "What was written by [Godfrey Reggio] , written by [Alton Walpole] and [Ron Fricke] , written by [Michael Hoenig] , and executive produced by [Francis Ford Coppola]"
    },
    {
        "questionIdx": 184188,
        "questionPatternModEntities": "What was written by M0 and M1 , produced by M2 and M3 , and produced by M4 's Japanese employee",
        "questionTemplate": "What was [VP_SIMPLE] by [entity] and [entity] , [VP_SIMPLE] by [entity] and [entity] , and [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P1 ?x1 .\n?x0 P1 M2 .\n?x0 P1 M3 .\n?x1 P2 M4 .\n?x1 P3 M5\n}",
        "recursionDepth": 48,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x0 wdt:P162|wdt:P272 wd:Q182950 .\n?x0 wdt:P162|wdt:P272 wd:Q713511 .\n?x0 wdt:P58 wd:Q55400 .\n?x0 wdt:P58 wd:Q236829 .\n?x1 wdt:P108 wd:Q7842 .\n?x1 wdt:P27 wd:Q17\n}",
        "questionWithBrackets": "What was written by [Diana Wynne Jones] and [Hayao Miyazaki] , produced by [Toshio Suzuki] and [Studio Ghibli] , and produced by [University of Tokyo] 's Japanese employee"
    },
    {
        "questionIdx": 184190,
        "questionPatternModEntities": "What was written by M0 's American sibling",
        "questionTemplate": "What was [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x1 P1 M0 .\n?x1 P2 M1 .\nFILTER ( ?x1 != M0 )\n}",
        "recursionDepth": 20,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P58 ?x1 .\n?x1 wdt:P27 wd:Q30 .\n?x1 wdt:P3373 wd:Q4811453 .\nFILTER ( ?x1 != wd:Q4811453 )\n}LIMIT 1",
        "questionWithBrackets": "What was written by [Astrid Young] 's American sibling"
    },
    {
        "questionIdx": 184228,
        "questionPatternModEntities": "What was written by M0 , M1 , M2 , and M3 , directed by M5 's spouse , and produced by M4",
        "questionTemplate": "What was [VP_SIMPLE] by [entity] , [entity] , [entity] , and [entity] , [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P0 M3 .\n?x0 P1 M4 .\n?x0 P2 ?x1 .\n?x1 P3 M5 .\nFILTER ( ?x1 != M5 )\n}",
        "recursionDepth": 45,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 ?x1 .\n?x0 wdt:P162|wdt:P272 wd:Q8066124 .\n?x0 wdt:P58 wd:Q4465 .\n?x0 wdt:P58 wd:Q116854 .\n?x0 wdt:P58 wd:Q892 .\n?x0 wdt:P58 wd:Q219124 .\n?x1 wdt:P26 wd:Q116861 .\nFILTER ( ?x1 != wd:Q116861 )\n}",
        "questionWithBrackets": "What was written by [Guillermo del Toro] , [Peter Jackson] , [Philippa Boyens] , and [J.\u00a0R.\u00a0R. Tolkien] , directed by [Fran Walsh] 's spouse , and produced by [Zane Weiner]"
    },
    {
        "questionIdx": 184243,
        "questionPatternModEntities": "What was written by M0 's Italian sibling",
        "questionTemplate": "What was [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x1 P1 M0 .\n?x1 P2 M1 .\nFILTER ( ?x1 != M0 )\n}",
        "recursionDepth": 20,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P58 ?x1 .\n?x1 wdt:P27 wd:Q38 .\n?x1 wdt:P3373 wd:Q453557 .\nFILTER ( ?x1 != wd:Q453557 )\n}LIMIT 1",
        "questionWithBrackets": "What was written by [Bruno Pontecorvo] 's Italian sibling"
    },
    {
        "questionIdx": 184283,
        "questionPatternModEntities": "What was written by M0 's Swedish sibling and produced by a female spouse of M3",
        "questionTemplate": "What was [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] and [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x2 .\n?x1 P2 M0 .\n?x1 P3 M1 .\n?x2 P4 M2 .\n?x2 P5 M3 .\nFILTER ( ?x1 != M0 ) .\nFILTER ( ?x2 != M3 )\n}",
        "recursionDepth": 42,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x0 wdt:P58 ?x2 .\n?x1 wdt:P21 wd:Q6581072 .\n?x1 wdt:P26 wd:Q53003 .\n?x2 wdt:P27 wd:Q34 .\n?x2 wdt:P3373 wd:Q4938582 .\nFILTER ( ?x1 != wd:Q53003 ) .\nFILTER ( ?x2 != wd:Q4938582 )\n}",
        "questionWithBrackets": "What was written by [Margareta Bergman] 's Swedish sibling and produced by a female spouse of [Roberto Rossellini]"
    },
    {
        "questionIdx": 184370,
        "questionPatternModEntities": "What was written by M0 , M1 , and M2 and produced by a Japanese parent of M4",
        "questionTemplate": "What was [VP_SIMPLE] by [entity] , [entity] , and [entity] and [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P1 ?x1 .\n?x1 P2 M3 .\n?x1 P3 M4\n}",
        "recursionDepth": 40,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x0 wdt:P58 wd:Q8006 .\n?x0 wdt:P58 wd:Q12706 .\n?x0 wdt:P58 wd:Q3135269 .\n?x1 wdt:P40|wdt:P355 wd:Q3194478 .\n?x1 wdt:P27 wd:Q17\n}",
        "questionWithBrackets": "What was written by [Hideo Oguni] , [Maxim Gorki] , and [Akira Kurosawa] and produced by a Japanese parent of [Kazuko Kurosawa]"
    },
    {
        "questionIdx": 184419,
        "questionPatternModEntities": "What was written by M0 , M1 , and M2",
        "questionTemplate": "What was [VP_SIMPLE] by [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2\n}",
        "recursionDepth": 18,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P58 wd:Q3772 .\n?x0 wdt:P58 wd:Q20730272 .\n?x0 wdt:P58 wd:Q42869\n}",
        "questionWithBrackets": "What was written by [Nicolas Cage] , [Douglas S. Cook] , and [Quentin Tarantino]"
    },
    {
        "questionIdx": 184517,
        "questionPatternModEntities": "What was written by M0 and edited by M1",
        "questionTemplate": "What was [VP_SIMPLE] by [entity] and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1\n}",
        "recursionDepth": 22,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1040 wd:Q3137 .\n?x0 wdt:P58 wd:Q1158306\n}",
        "questionWithBrackets": "What was written by [Rami] and edited by [Jim Clark]"
    },
    {
        "questionIdx": 184622,
        "questionPatternModEntities": "What was written by M1 and M2 , executive produced by M0 , edited by M4 , and produced by M3",
        "questionTemplate": "What was [VP_SIMPLE] by [entity] and [entity] , [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\n?x0 P2 M3 .\n?x0 P3 M4\n}",
        "recursionDepth": 45,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1040 wd:Q977397 .\n?x0 wdt:P1431 wd:Q16345 .\n?x0 wdt:P162|wdt:P272 wd:Q7614407 .\n?x0 wdt:P58 wd:Q4572341 .\n?x0 wdt:P58 wd:Q8312\n}",
        "questionWithBrackets": "What was written by [Nicholas Meyer] and [Lawrence Konner] , executive produced by [Leonard Nimoy] , edited by [William Hoy] , and produced by [Steven-Charles Jaffe]"
    },
    {
        "questionIdx": 184646,
        "questionPatternModEntities": "What was written by M0 , M1 , and M2 , edited by M5 and M6 , and written by M3 and M4",
        "questionTemplate": "What was [VP_SIMPLE] by [entity] , [entity] , and [entity] , [VP_SIMPLE] by [entity] and [entity] , and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P0 M3 .\n?x0 P0 M4 .\n?x0 P1 M5 .\n?x0 P1 M6\n}",
        "recursionDepth": 46,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1040 wd:Q55211 .\n?x0 wdt:P1040 wd:Q5639976 .\n?x0 wdt:P58 wd:Q7396408 .\n?x0 wdt:P58 wd:Q55215 .\n?x0 wdt:P58 wd:Q44221 .\n?x0 wdt:P58 wd:Q295093 .\n?x0 wdt:P58 wd:Q313497\n}",
        "questionWithBrackets": "What was written by [Alejandro Gonz\u00e1lez I\u00f1\u00e1rritu] , [Sean Penn] , and [Danis Tanovi\u0107] , edited by [Mohsen Makhmalbaf] and [Hajime Okayasu] , and written by [Claude Lelouch] and [Sabrina Dhawan]"
    },
    {
        "questionIdx": 184668,
        "questionPatternModEntities": "What was written by M0 and M1 , edited by M5 and M6 , and written by M2 , M3 , and M4",
        "questionTemplate": "What was [VP_SIMPLE] by [entity] and [entity] , [VP_SIMPLE] by [entity] and [entity] , and [VP_SIMPLE] by [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P0 M3 .\n?x0 P0 M4 .\n?x0 P1 M5 .\n?x0 P1 M6\n}",
        "recursionDepth": 46,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1040 wd:Q55211 .\n?x0 wdt:P1040 wd:Q55215 .\n?x0 wdt:P58 wd:Q432709 .\n?x0 wdt:P58 wd:Q44221 .\n?x0 wdt:P58 wd:Q113628 .\n?x0 wdt:P58 wd:Q295093 .\n?x0 wdt:P58 wd:Q55238\n}",
        "questionWithBrackets": "What was written by [Sean Penn] and [Claude Lelouch] , edited by [Mohsen Makhmalbaf] and [Alejandro Gonz\u00e1lez I\u00f1\u00e1rritu] , and written by [Idrissa Ou\u00e9draogo] , [Ken Loach] , and [Samira Makhmalbaf]"
    },
    {
        "questionIdx": 184716,
        "questionPatternModEntities": "What was written by M0 , produced by M2 , edited by M3 's employee , and written by M1",
        "questionTemplate": "What was [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P1 M2 .\n?x0 P2 ?x1 .\n?x1 P3 M3\n}",
        "recursionDepth": 44,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1040 ?x1 .\n?x0 wdt:P162|wdt:P272 wd:Q542003 .\n?x0 wdt:P58 wd:Q53001 .\n?x0 wdt:P58 wd:Q180962 .\n?x1 wdt:P108 wd:Q909176\n}",
        "questionWithBrackets": "What was written by [Jean-Luc Godard] , produced by [Menahem Golan] , edited by [Cahiers du cin\u00e9ma] 's employee , and written by [Norman Mailer]"
    },
    {
        "questionIdx": 184822,
        "questionPatternModEntities": "What was written by M0 and directed by M1",
        "questionTemplate": "What was [VP_SIMPLE] by [entity] and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1\n}",
        "recursionDepth": 22,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 wd:Q945904 .\n?x0 wdt:P58 wd:Q2737\n}",
        "questionWithBrackets": "What was written by [Louis de Fun\u00e8s] and directed by [Jean Girault]"
    },
    {
        "questionIdx": 184860,
        "questionPatternModEntities": "What was written by M0 , written by M1 , and produced by M2",
        "questionTemplate": "What was [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P1 M2\n}",
        "recursionDepth": 31,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P162|wdt:P272 wd:Q981229 .\n?x0 wdt:P58 wd:Q2737 .\n?x0 wdt:P58 wd:Q3172471\n}",
        "questionWithBrackets": "What was written by [Jean Halain] , written by [Louis de Fun\u00e8s] , and produced by [Alain Poir\u00e9]"
    },
    {
        "questionIdx": 184971,
        "questionPatternModEntities": "What was written by M0 and produced by a Japanese sibling of M1",
        "questionTemplate": "What was [VP_SIMPLE] by [entity] and [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 ?x1 .\n?x1 P2 M1 .\n?x1 P3 M2 .\nFILTER ( ?x1 != M1 )\n}",
        "recursionDepth": 33,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x0 wdt:P58 wd:Q8006 .\n?x1 wdt:P27 wd:Q17 .\n?x1 wdt:P3373 wd:Q3194478 .\nFILTER ( ?x1 != wd:Q3194478 )\n}",
        "questionWithBrackets": "What was written by [Akira Kurosawa] and produced by a Japanese sibling of [Kazuko Kurosawa]"
    },
    {
        "questionIdx": 184993,
        "questionPatternModEntities": "What was written by M4 and M5 , executive produced by M0 , M1 , M2 , and M3 , and edited by M6",
        "questionTemplate": "What was [VP_SIMPLE] by [entity] and [entity] , [VP_SIMPLE] by [entity] , [entity] , [entity] , and [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P0 M3 .\n?x0 P1 M4 .\n?x0 P1 M5 .\n?x0 P2 M6\n}",
        "recursionDepth": 46,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1040 wd:Q3473349 .\n?x0 wdt:P1431 wd:Q56094 .\n?x0 wdt:P1431 wd:Q5223835 .\n?x0 wdt:P1431 wd:Q2675693 .\n?x0 wdt:P1431 wd:Q5371855 .\n?x0 wdt:P58 wd:Q193628 .\n?x0 wdt:P58 wd:Q6962760\n}",
        "questionWithBrackets": "What was written by [Sofia Coppola] and [Nancy Jo Sales] , executive produced by [Francis Ford Coppola] , [Darlene Caama\u00f1o] , [Fred Roos] , and [Emilio Diez Barroso] , and edited by [Sarah Flack]"
    },
    {
        "questionIdx": 185053,
        "questionPatternModEntities": "What was written by M0 and M1 , edited by M2 and M3 , and directed by M4 , M5 , and M6",
        "questionTemplate": "What was [VP_SIMPLE] by [entity] and [entity] , [VP_SIMPLE] by [entity] and [entity] , and [VP_SIMPLE] by [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P1 M2 .\n?x0 P1 M3 .\n?x0 P2 M4 .\n?x0 P2 M5 .\n?x0 P2 M6\n}",
        "recursionDepth": 46,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 wd:Q44221 .\n?x0 wdt:P57 wd:Q55215 .\n?x0 wdt:P57 wd:Q313497 .\n?x0 wdt:P1040 wd:Q55211 .\n?x0 wdt:P1040 wd:Q541826 .\n?x0 wdt:P58 wd:Q7396408 .\n?x0 wdt:P58 wd:Q432709\n}",
        "questionWithBrackets": "What was written by [Sabrina Dhawan] and [Samira Makhmalbaf] , edited by [Jay Cassidy] and [Mohsen Makhmalbaf] , and directed by [Danis Tanovi\u0107] , [Alejandro Gonz\u00e1lez I\u00f1\u00e1rritu] , and [Sean Penn]"
    },
    {
        "questionIdx": 185056,
        "questionPatternModEntities": "What was written by M0 , M1 , and M2 , directed by M5 and M6 , and edited by M3 and M4",
        "questionTemplate": "What was [VP_SIMPLE] by [entity] , [entity] , and [entity] , [VP_SIMPLE] by [entity] and [entity] , and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P1 M3 .\n?x0 P1 M4 .\n?x0 P2 M5 .\n?x0 P2 M6\n}",
        "recursionDepth": 46,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 wd:Q309950 .\n?x0 wdt:P57 wd:Q44221 .\n?x0 wdt:P1040 wd:Q55211 .\n?x0 wdt:P1040 wd:Q18021284 .\n?x0 wdt:P58 wd:Q20438470 .\n?x0 wdt:P58 wd:Q55238 .\n?x0 wdt:P58 wd:Q113628\n}",
        "questionWithBrackets": "What was written by [Tatjana \u0160oji\u0107] , [Ken Loach] , and [Idrissa Ou\u00e9draogo] , directed by [Sean Penn] and [Shohei Imamura] , and edited by [Mohsen Makhmalbaf] and [Jonathan Morris]"
    },
    {
        "questionIdx": 185107,
        "questionPatternModEntities": "What was written by a German American male spouse of M3",
        "questionTemplate": "What was [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x1 P1 M0 .\n?x1 P1 M1 .\n?x1 P2 M2 .\n?x1 P3 M3 .\nFILTER ( ?x1 != M3 )\n}",
        "recursionDepth": 32,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P58 ?x1 .\n?x1 wdt:P21 wd:Q6581097 .\n?x1 wdt:P27 wd:Q183 .\n?x1 wdt:P27 wd:Q30 .\n?x1 wdt:P26 wd:Q443073 .\nFILTER ( ?x1 != wd:Q443073 )\n}LIMIT 1",
        "questionWithBrackets": "What was written by a German American male spouse of [Emma Heming Willis]"
    },
    {
        "questionIdx": 185124,
        "questionPatternModEntities": "What was written by a Japanese sibling of M3 , executive produced by M0 , and edited by M1 and M2",
        "questionTemplate": "What was [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 ?x1 .\n?x0 P2 M1 .\n?x0 P2 M2 .\n?x1 P3 M3 .\n?x1 P4 M4 .\nFILTER ( ?x1 != M3 )\n}",
        "recursionDepth": 47,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1040 wd:Q7820333 .\n?x0 wdt:P1040 wd:Q614630 .\n?x0 wdt:P1431 wd:Q38222 .\n?x0 wdt:P58 ?x1 .\n?x1 wdt:P27 wd:Q17 .\n?x1 wdt:P3373 wd:Q7401008 .\nFILTER ( ?x1 != wd:Q7401008 )\n}",
        "questionWithBrackets": "What was written by a Japanese sibling of [Chiyuki Hiraoka] , executive produced by [George Lucas] , and edited by [Tomoyo \u014cshima] and [Michael Chandler]"
    },
    {
        "questionIdx": 185125,
        "questionPatternModEntities": "What was written by a Japanese sibling of M4 and executive produced by M0 , M1 , M2 , and M3",
        "questionTemplate": "What was [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] and [VP_SIMPLE] by [entity] , [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P0 M3 .\n?x0 P1 ?x1 .\n?x1 P2 M4 .\n?x1 P3 M5 .\nFILTER ( ?x1 != M4 )\n}",
        "recursionDepth": 44,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1431 wd:Q6490930 .\n?x0 wdt:P1431 wd:Q22023257 .\n?x0 wdt:P1431 wd:Q11409670 .\n?x0 wdt:P1431 wd:Q22023303 .\n?x0 wdt:P58 ?x1 .\n?x1 wdt:P27 wd:Q17 .\n?x1 wdt:P3373 wd:Q22023377 .\nFILTER ( ?x1 != wd:Q22023377 )\n}",
        "questionWithBrackets": "What was written by a Japanese sibling of [Eiko Oshima] and executive produced by [Terry Glinwood] , [Larry Parr] , [Masato Hara] , and [Joyce Herlihy]"
    },
    {
        "questionIdx": 185138,
        "questionPatternModEntities": "What was written by a Mexican spouse of M2 and produced by M0",
        "questionTemplate": "What was [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 M0 .\n?x1 P2 M1 .\n?x1 P3 M2 .\nFILTER ( ?x1 != M2 )\n}",
        "recursionDepth": 33,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P162|wdt:P272 wd:Q1127240 .\n?x0 wdt:P58 ?x1 .\n?x1 wdt:P27 wd:Q96 .\n?x1 wdt:P26 wd:Q2626040 .\nFILTER ( ?x1 != wd:Q2626040 )\n}",
        "questionWithBrackets": "What was written by a Mexican spouse of [Camila Sodi] and produced by [Secretariat of Culture]"
    },
    {
        "questionIdx": 185149,
        "questionPatternModEntities": "What was written by a Spanish sibling of M2 and produced by M0 and M1",
        "questionTemplate": "What was [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 M0 .\n?x0 P1 M1 .\n?x1 P2 M2 .\n?x1 P3 M3 .\nFILTER ( ?x1 != M2 )\n}",
        "recursionDepth": 37,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P162|wdt:P272 wd:Q5577 .\n?x0 wdt:P162|wdt:P272 wd:Q51545 .\n?x0 wdt:P58 ?x1 .\n?x1 wdt:P27 wd:Q29 .\n?x1 wdt:P3373 wd:Q11905647 .\nFILTER ( ?x1 != wd:Q11905647 )\n}",
        "questionWithBrackets": "What was written by a Spanish sibling of [Anna Maria Dal\u00ed] and produced by [Salvador Dal\u00ed] and [Luis Bu\u00f1uel]"
    },
    {
        "questionIdx": 185263,
        "questionPatternModEntities": "What was written by a female spouse of M3 and written by M0 and M1",
        "questionTemplate": "What was [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x1 P1 M2 .\n?x1 P2 M3 .\nFILTER ( ?x1 != M3 )\n}",
        "recursionDepth": 37,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P58 ?x1 .\n?x0 wdt:P58 wd:Q1646 .\n?x0 wdt:P58 wd:Q710334 .\n?x1 wdt:P21 wd:Q6581072 .\n?x1 wdt:P26 wd:Q3122139 .\nFILTER ( ?x1 != wd:Q3122139 )\n}",
        "questionWithBrackets": "What was written by a female spouse of [Guy Schoeller] and written by [Arthur Laurents] and [Fran\u00e7oise Sagan]"
    },
    {
        "questionIdx": 185264,
        "questionPatternModEntities": "What was written by a female spouse of M1",
        "questionTemplate": "What was [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x1 P1 M0 .\n?x1 P2 M1 .\nFILTER ( ?x1 != M1 )\n}",
        "recursionDepth": 22,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P58 ?x1 .\n?x1 wdt:P21 wd:Q6581072 .\n?x1 wdt:P26 wd:Q192990 .\nFILTER ( ?x1 != wd:Q192990 )\n}LIMIT 1",
        "questionWithBrackets": "What was written by a female spouse of [Guy Ritchie]"
    },
    {
        "questionIdx": 185385,
        "questionPatternModEntities": "What was written by a parent of M0 and written by M1 's spouse",
        "questionTemplate": "What was [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity] and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P0 ?x2 .\n?x1 P1 M0 .\n?x2 P2 M1 .\nFILTER ( ?x2 != M1 )\n}",
        "recursionDepth": 32,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P58 ?x1 .\n?x0 wdt:P58 ?x2 .\n?x1 wdt:P40|wdt:P355 wd:Q120593 .\n?x2 wdt:P26 wd:Q32337 .\nFILTER ( ?x2 != wd:Q32337 )\n}",
        "questionWithBrackets": "What was written by a parent of [Eugene Chaplin] and written by [Lita Grey] 's spouse"
    },
    {
        "questionIdx": 185455,
        "questionPatternModEntities": "What was written by a sibling and parent of M2 and directed by M0 and M1",
        "questionTemplate": "What was [VP_SIMPLE] by a [ROLE_SIMPLE] and [ROLE_SIMPLE] of [entity] and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 M0 .\n?x0 P1 M1 .\n?x1 P2 M2 .\n?x1 P3 M2 .\nFILTER ( ?x1 != M2 )\n}",
        "recursionDepth": 37,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 wd:Q4570285 .\n?x0 wdt:P57 wd:Q5600344 .\n?x0 wdt:P58 ?x1 .\n?x1 wdt:P40|wdt:P355 wd:Q42175155 .\n?x1 wdt:P3373 wd:Q42175155 .\nFILTER ( ?x1 != wd:Q42175155 )\n}",
        "questionWithBrackets": "What was written by a sibling and parent of [Greta Strindberg] and directed by [Stefan B\u00f6hm] and [Keve Hjelm]"
    },
    {
        "questionIdx": 185466,
        "questionPatternModEntities": "What was written by a spouse of M4 , written by M0 and M1 , and edited by M2 and M3",
        "questionTemplate": "What was [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity] , [VP_SIMPLE] by [entity] and [entity] , and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P1 M2 .\n?x0 P1 M3 .\n?x1 P2 M4 .\nFILTER ( ?x1 != M4 )\n}",
        "recursionDepth": 45,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1040 wd:Q8003 .\n?x0 wdt:P1040 wd:Q561459 .\n?x0 wdt:P58 ?x1 .\n?x0 wdt:P58 wd:Q460329 .\n?x0 wdt:P58 wd:Q7495246 .\n?x1 wdt:P26 wd:Q22247817 .\nFILTER ( ?x1 != wd:Q22247817 )\n}",
        "questionWithBrackets": "What was written by a spouse of [Pera Atasheva] , written by [Nikolai Aseev] and [Nina Agadzhanova-Shutko] , and edited by [Sergei Eisenstein] and [Grigori Aleksandrov]"
    },
    {
        "questionIdx": 185552,
        "questionPatternModEntities": "What was written by a employee of M0 and M1",
        "questionTemplate": "What was [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity] and [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x1 P1 M0 .\n?x1 P1 M1\n}",
        "recursionDepth": 21,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P58 ?x1 .\n?x1 wdt:P108 wd:Q9531 .\n?x1 wdt:P108 wd:Q3520623\n}",
        "questionWithBrackets": "What was written by a employee of [The Digital Village] and [BBC]"
    },
    {
        "questionIdx": 185577,
        "questionPatternModEntities": "What was written by and directed by M0 , M1 , M2 , and M3",
        "questionTemplate": "What was [VP_SIMPLE] by and [VP_SIMPLE] by [entity] , [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P0 M3 .\n?x0 P1 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\n?x0 P1 M3\n}",
        "recursionDepth": 29,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 wd:Q4500 .\n?x0 wdt:P57 wd:Q5542223 .\n?x0 wdt:P57 wd:Q7174311 .\n?x0 wdt:P57 wd:Q7407299 .\n?x0 wdt:P58 wd:Q4500 .\n?x0 wdt:P58 wd:Q5542223 .\n?x0 wdt:P58 wd:Q7174311 .\n?x0 wdt:P58 wd:Q7407299\n}",
        "questionWithBrackets": "What was written by and directed by [Vince Gilligan] , [Sam Catlin] , [Peter Gould] , and [George Mastras]"
    },
    {
        "questionIdx": 185581,
        "questionPatternModEntities": "What was written by and directed by a Dutch sibling of M0",
        "questionTemplate": "What was [VP_SIMPLE] by and [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x1 P2 M0 .\n?x1 P3 M1 .\nFILTER ( ?x1 != M0 )\n}",
        "recursionDepth": 30,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 ?x1 .\n?x0 wdt:P58 ?x1 .\n?x1 wdt:P27 wd:Q29999 .\n?x1 wdt:P3373 wd:Q26745481 .\nFILTER ( ?x1 != wd:Q26745481 )\n}LIMIT 1",
        "questionWithBrackets": "What was written by and directed by a Dutch sibling of [Paul Wilders]"
    },
    {
        "questionIdx": 185619,
        "questionPatternModEntities": "What was written by and edited by M0 's Mexican sibling",
        "questionTemplate": "What was [VP_SIMPLE] by and [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x1 P2 M0 .\n?x1 P3 M1 .\nFILTER ( ?x1 != M0 )\n}",
        "recursionDepth": 28,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1040 ?x1 .\n?x0 wdt:P58 ?x1 .\n?x1 wdt:P27 wd:Q96 .\n?x1 wdt:P3373 wd:Q2840325 .\nFILTER ( ?x1 != wd:Q2840325 )\n}LIMIT 1",
        "questionWithBrackets": "What was written by and edited by [Carlos Cuar\u00f3n] 's Mexican sibling"
    },
    {
        "questionIdx": 185624,
        "questionPatternModEntities": "What was written by and edited by M0",
        "questionTemplate": "What was [VP_SIMPLE] by and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M0\n}",
        "recursionDepth": 19,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1040 wd:Q853 .\n?x0 wdt:P58 wd:Q853\n}LIMIT 1",
        "questionWithBrackets": "What was written by and edited by [Andrei Tarkovsky]"
    },
    {
        "questionIdx": 185643,
        "questionPatternModEntities": "What was written by and edited by a female parent of M1",
        "questionTemplate": "What was [VP_SIMPLE] by and [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x1 P2 M0 .\n?x1 P3 M1\n}",
        "recursionDepth": 30,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1040 ?x1 .\n?x0 wdt:P58 ?x1 .\n?x1 wdt:P40|wdt:P355 wd:Q949017 .\n?x1 wdt:P21 wd:Q6581072\n}LIMIT 1",
        "questionWithBrackets": "What was written by and edited by a female parent of [Mathieu Demy]"
    },
    {
        "questionIdx": 185651,
        "questionPatternModEntities": "What was written by and edited by a sibling of M0",
        "questionTemplate": "What was [VP_SIMPLE] by and [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x1 P2 M0 .\nFILTER ( ?x1 != M0 )\n}",
        "recursionDepth": 25,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1040 ?x1 .\n?x0 wdt:P58 ?x1 .\n?x1 wdt:P3373 wd:Q104373781 .\nFILTER ( ?x1 != wd:Q104373781 )\n}LIMIT 1",
        "questionWithBrackets": "What was written by and edited by a sibling of [John Lynch]"
    },
    {
        "questionIdx": 185659,
        "questionPatternModEntities": "What was written by and executive produced by M0 , M1 , and M2",
        "questionTemplate": "What was [VP_SIMPLE] by and [VP_SIMPLE] by [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P1 M0 .\n?x0 P1 M1 .\n?x0 P1 M2\n}",
        "recursionDepth": 27,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1431 wd:Q622651 .\n?x0 wdt:P1431 wd:Q1074029 .\n?x0 wdt:P1431 wd:Q4965591 .\n?x0 wdt:P58 wd:Q622651 .\n?x0 wdt:P58 wd:Q1074029 .\n?x0 wdt:P58 wd:Q4965591\n}",
        "questionWithBrackets": "What was written by and executive produced by [Brian Wayne Peterson] , [Miles Millar] , and [Alfred Gough]"
    },
    {
        "questionIdx": 185670,
        "questionPatternModEntities": "What was written by and executive produced by M0 's employee",
        "questionTemplate": "What was [VP_SIMPLE] by and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x1 P2 M0\n}",
        "recursionDepth": 24,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1431 ?x1 .\n?x0 wdt:P58 ?x1 .\n?x1 wdt:P108 wd:Q847743\n}LIMIT 1",
        "questionWithBrackets": "What was written by and executive produced by [Dunkin'] 's employee"
    },
    {
        "questionIdx": 185672,
        "questionPatternModEntities": "What was written by and executive produced by M0 's employee 's spouse",
        "questionTemplate": "What was [VP_SIMPLE] by and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x1 P2 ?x2 .\n?x2 P3 M0 .\nFILTER ( ?x1 != ?x2 )\n}",
        "recursionDepth": 28,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1431 ?x1 .\n?x0 wdt:P58 ?x1 .\n?x1 wdt:P26 ?x2 .\n?x2 wdt:P108 wd:Q730179 .\nFILTER ( ?x1 != ?x2 )\n}LIMIT 1",
        "questionWithBrackets": "What was written by and executive produced by [Toei Animation] 's employee 's spouse"
    },
    {
        "questionIdx": 185703,
        "questionPatternModEntities": "What was written by and executive produced by M0 's sibling",
        "questionTemplate": "What was [VP_SIMPLE] by and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x1 P2 M0 .\nFILTER ( ?x1 != M0 )\n}",
        "recursionDepth": 24,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1431 ?x1 .\n?x0 wdt:P58 ?x1 .\n?x1 wdt:P3373 wd:Q469204 .\nFILTER ( ?x1 != wd:Q469204 )\n}LIMIT 1",
        "questionWithBrackets": "What was written by and executive produced by [Anne Spielberg] 's sibling"
    },
    {
        "questionIdx": 185755,
        "questionPatternModEntities": "What was written by and produced by M0 , M1 , M2 , and M3",
        "questionTemplate": "What was [VP_SIMPLE] by and [VP_SIMPLE] by [entity] , [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P0 M3 .\n?x0 P1 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\n?x0 P1 M3\n}",
        "recursionDepth": 29,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P162|wdt:P272 wd:Q25014 .\n?x0 wdt:P162|wdt:P272 wd:Q210741 .\n?x0 wdt:P162|wdt:P272 wd:Q166159 .\n?x0 wdt:P162|wdt:P272 wd:Q24962 .\n?x0 wdt:P58 wd:Q25014 .\n?x0 wdt:P58 wd:Q210741 .\n?x0 wdt:P58 wd:Q166159 .\n?x0 wdt:P58 wd:Q24962\n}",
        "questionWithBrackets": "What was written by and produced by [Eric Idle] , [John Cleese] , [Terry Jones] , and [Graham Chapman]"
    },
    {
        "questionIdx": 185775,
        "questionPatternModEntities": "What was written by and produced by a Swedish parent of M1",
        "questionTemplate": "What was [VP_SIMPLE] by and [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x1 P2 M0 .\n?x1 P3 M1\n}",
        "recursionDepth": 30,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x0 wdt:P58 ?x1 .\n?x1 wdt:P40|wdt:P355 wd:Q82680322 .\n?x1 wdt:P27 wd:Q34\n}LIMIT 1",
        "questionWithBrackets": "What was written by and produced by a Swedish parent of [Ida Lundgren]"
    },
    {
        "questionIdx": 185781,
        "questionPatternModEntities": "What was written by and produced by a spouse of M0",
        "questionTemplate": "What was [VP_SIMPLE] by and [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x1 P2 M0 .\nFILTER ( ?x1 != M0 )\n}",
        "recursionDepth": 25,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x0 wdt:P58 ?x1 .\n?x1 wdt:P26 wd:Q76717 .\nFILTER ( ?x1 != wd:Q76717 )\n}LIMIT 1",
        "questionWithBrackets": "What was written by and produced by a spouse of [Claudia Schiffer]"
    },
    {
        "questionIdx": 185791,
        "questionPatternModEntities": "What was written by , directed by , and edited by M0 , M1 , and M2",
        "questionTemplate": "What was [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P1 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\n?x0 P2 M0 .\n?x0 P2 M1 .\n?x0 P2 M2\n}",
        "recursionDepth": 32,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 wd:Q562108 .\n?x0 wdt:P57 wd:Q1687239 .\n?x0 wdt:P57 wd:Q35979475 .\n?x0 wdt:P1040 wd:Q562108 .\n?x0 wdt:P1040 wd:Q1687239 .\n?x0 wdt:P1040 wd:Q35979475 .\n?x0 wdt:P58 wd:Q562108 .\n?x0 wdt:P58 wd:Q1687239 .\n?x0 wdt:P58 wd:Q35979475\n}",
        "questionWithBrackets": "What was written by , directed by , and edited by [Jens J\u00f8rgen Thorsen] , [J\u00f8rgen Leth] , and [Ole John]"
    },
    {
        "questionIdx": 185792,
        "questionPatternModEntities": "What was written by , directed by , and edited by M0",
        "questionTemplate": "What was [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M0 .\n?x0 P2 M0\n}",
        "recursionDepth": 25,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 wd:Q8006 .\n?x0 wdt:P1040 wd:Q8006 .\n?x0 wdt:P58 wd:Q8006\n}LIMIT 1",
        "questionWithBrackets": "What was written by , directed by , and edited by [Akira Kurosawa]"
    },
    {
        "questionIdx": 185922,
        "questionPatternModEntities": "What was written by , directed by , produced by , executive produced by , and edited by M0 's parent",
        "questionTemplate": "What was [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x0 P3 ?x1 .\n?x0 P4 ?x1 .\n?x1 P5 M0\n}",
        "recursionDepth": 42,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 ?x1 .\n?x0 wdt:P1040 ?x1 .\n?x0 wdt:P1431 ?x1 .\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x0 wdt:P58 ?x1 .\n?x1 wdt:P40|wdt:P355 wd:Q1620638\n}LIMIT 1",
        "questionWithBrackets": "What was written by , directed by , produced by , executive produced by , and edited by [Hisao Kurosawa] 's parent"
    },
    {
        "questionIdx": 185994,
        "questionPatternModEntities": "What was written by , edited by , directed by , and produced by M0",
        "questionTemplate": "What was [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M0 .\n?x0 P2 M0 .\n?x0 P3 M0\n}",
        "recursionDepth": 31,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 wd:Q8006 .\n?x0 wdt:P1040 wd:Q8006 .\n?x0 wdt:P162|wdt:P272 wd:Q8006 .\n?x0 wdt:P58 wd:Q8006\n}LIMIT 1",
        "questionWithBrackets": "What was written by , edited by , directed by , and produced by [Akira Kurosawa]"
    },
    {
        "questionIdx": 185995,
        "questionPatternModEntities": "What was written by , edited by , directed by , and produced by M0 's parent",
        "questionTemplate": "What was [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x0 P3 ?x1 .\n?x1 P4 M0\n}",
        "recursionDepth": 35,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 ?x1 .\n?x0 wdt:P1040 ?x1 .\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x0 wdt:P58 ?x1 .\n?x1 wdt:P40|wdt:P355 wd:Q1620638\n}LIMIT 1",
        "questionWithBrackets": "What was written by , edited by , directed by , and produced by [Hisao Kurosawa] 's parent"
    },
    {
        "questionIdx": 185996,
        "questionPatternModEntities": "What was written by , edited by , directed by , and produced by M0 's sibling 's spouse",
        "questionTemplate": "What was [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x0 P3 ?x1 .\n?x1 P4 ?x2 .\n?x2 P5 M0 .\nFILTER ( ?x1 != ?x2 ) .\nFILTER ( ?x2 != M0 )\n}",
        "recursionDepth": 39,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 ?x1 .\n?x0 wdt:P1040 ?x1 .\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x0 wdt:P58 ?x1 .\n?x1 wdt:P26 ?x2 .\n?x2 wdt:P3373 wd:Q3567898 .\nFILTER ( ?x1 != ?x2 ) .\nFILTER ( ?x2 != wd:Q3567898 )\n}LIMIT 1",
        "questionWithBrackets": "What was written by , edited by , directed by , and produced by [Wiaz] 's sibling 's spouse"
    },
    {
        "questionIdx": 186067,
        "questionPatternModEntities": "What was written by , edited by , produced by , directed by , and executive produced by a spouse of M0",
        "questionTemplate": "What was [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x0 P3 ?x1 .\n?x0 P4 ?x1 .\n?x1 P5 M0 .\nFILTER ( ?x1 != M0 )\n}",
        "recursionDepth": 44,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 ?x1 .\n?x0 wdt:P1040 ?x1 .\n?x0 wdt:P1431 ?x1 .\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x0 wdt:P58 ?x1 .\n?x1 wdt:P26 wd:Q3032150 .\nFILTER ( ?x1 != wd:Q3032150 )\n}LIMIT 1",
        "questionWithBrackets": "What was written by , edited by , produced by , directed by , and executive produced by a spouse of [Y\u014dko Yaguchi]"
    },
    {
        "questionIdx": 186074,
        "questionPatternModEntities": "What was written by , executive produced by , and directed by M0 , M1 , and M2",
        "questionTemplate": "What was [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P1 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\n?x0 P2 M0 .\n?x0 P2 M1 .\n?x0 P2 M2\n}",
        "recursionDepth": 33,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 wd:Q363666 .\n?x0 wdt:P57 wd:Q448604 .\n?x0 wdt:P57 wd:Q452794 .\n?x0 wdt:P1431 wd:Q363666 .\n?x0 wdt:P1431 wd:Q448604 .\n?x0 wdt:P1431 wd:Q452794 .\n?x0 wdt:P58 wd:Q363666 .\n?x0 wdt:P58 wd:Q448604 .\n?x0 wdt:P58 wd:Q452794\n}",
        "questionWithBrackets": "What was written by , executive produced by , and directed by [Jerry Zucker] , [David Zucker] , and [Jim Abrahams]"
    },
    {
        "questionIdx": 186118,
        "questionPatternModEntities": "What was written by , executive produced by , and produced by a Japanese employee of M0",
        "questionTemplate": "What was [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x1 P3 M0 .\n?x1 P4 M1\n}",
        "recursionDepth": 37,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1431 ?x1 .\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x0 wdt:P58 ?x1 .\n?x1 wdt:P108 wd:Q182950 .\n?x1 wdt:P27 wd:Q17\n}LIMIT 1",
        "questionWithBrackets": "What was written by , executive produced by , and produced by a Japanese employee of [Studio Ghibli]"
    },
    {
        "questionIdx": 186164,
        "questionPatternModEntities": "What was written by , executive produced by , edited by , and directed by a sibling of M0",
        "questionTemplate": "What was [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x0 P3 ?x1 .\n?x1 P4 M0 .\nFILTER ( ?x1 != M0 )\n}",
        "recursionDepth": 38,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 ?x1 .\n?x0 wdt:P1040 ?x1 .\n?x0 wdt:P1431 ?x1 .\n?x0 wdt:P58 ?x1 .\n?x1 wdt:P3373 wd:Q28370409 .\nFILTER ( ?x1 != wd:Q28370409 )\n}LIMIT 1",
        "questionWithBrackets": "What was written by , executive produced by , edited by , and directed by a sibling of [Everton Rocca]"
    },
    {
        "questionIdx": 186166,
        "questionPatternModEntities": "What was written by , executive produced by , edited by , and directed by a spouse of M0",
        "questionTemplate": "What was [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x0 P3 ?x1 .\n?x1 P4 M0 .\nFILTER ( ?x1 != M0 )\n}",
        "recursionDepth": 38,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 ?x1 .\n?x0 wdt:P1040 ?x1 .\n?x0 wdt:P1431 ?x1 .\n?x0 wdt:P58 ?x1 .\n?x1 wdt:P26 wd:Q70294 .\nFILTER ( ?x1 != wd:Q70294 )\n}LIMIT 1",
        "questionWithBrackets": "What was written by , executive produced by , edited by , and directed by a spouse of [Ingrid Caven]"
    },
    {
        "questionIdx": 186180,
        "questionPatternModEntities": "What was written by , executive produced by , edited by , produced by , and directed by M0 's parent",
        "questionTemplate": "What was [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x0 P3 ?x1 .\n?x0 P4 ?x1 .\n?x1 P5 M0\n}",
        "recursionDepth": 42,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 ?x1 .\n?x0 wdt:P1040 ?x1 .\n?x0 wdt:P1431 ?x1 .\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x0 wdt:P58 ?x1 .\n?x1 wdt:P40|wdt:P355 wd:Q4739681\n}LIMIT 1",
        "questionWithBrackets": "What was written by , executive produced by , edited by , produced by , and directed by [Amanda Lucas] 's parent"
    },
    {
        "questionIdx": 186238,
        "questionPatternModEntities": "What was written by , produced by , and executive produced by M0 's parent",
        "questionTemplate": "What was [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x1 P3 M0\n}",
        "recursionDepth": 30,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1431 ?x1 .\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x0 wdt:P58 ?x1 .\n?x1 wdt:P40|wdt:P355 wd:Q271162\n}LIMIT 1",
        "questionWithBrackets": "What was written by , produced by , and executive produced by [Jennifer Lynch] 's parent"
    },
    {
        "questionIdx": 186266,
        "questionPatternModEntities": "What was written by , produced by , directed by , and edited by a spouse of M0",
        "questionTemplate": "What was [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x0 P3 ?x1 .\n?x1 P4 M0 .\nFILTER ( ?x1 != M0 )\n}",
        "recursionDepth": 37,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 ?x1 .\n?x0 wdt:P1040 ?x1 .\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x0 wdt:P58 ?x1 .\n?x1 wdt:P26 wd:Q3032150 .\nFILTER ( ?x1 != wd:Q3032150 )\n}LIMIT 1",
        "questionWithBrackets": "What was written by , produced by , directed by , and edited by a spouse of [Y\u014dko Yaguchi]"
    },
    {
        "questionIdx": 186272,
        "questionPatternModEntities": "What was written by , produced by , directed by , and executive produced by M0 's sibling",
        "questionTemplate": "What was [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x0 P3 ?x1 .\n?x1 P4 M0 .\nFILTER ( ?x1 != M0 )\n}",
        "recursionDepth": 36,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 ?x1 .\n?x0 wdt:P1431 ?x1 .\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x0 wdt:P58 ?x1 .\n?x1 wdt:P3373 wd:Q104373781 .\nFILTER ( ?x1 != wd:Q104373781 )\n}LIMIT 1",
        "questionWithBrackets": "What was written by , produced by , directed by , and executive produced by [John Lynch] 's sibling"
    },
    {
        "questionIdx": 186287,
        "questionPatternModEntities": "What was written by , produced by , directed by , executive produced by , and edited by M0 's spouse",
        "questionTemplate": "What was [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x0 P3 ?x1 .\n?x0 P4 ?x1 .\n?x1 P5 M0 .\nFILTER ( ?x1 != M0 )\n}",
        "recursionDepth": 42,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 ?x1 .\n?x0 wdt:P1040 ?x1 .\n?x0 wdt:P1431 ?x1 .\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x0 wdt:P58 ?x1 .\n?x1 wdt:P26 wd:Q3032150 .\nFILTER ( ?x1 != wd:Q3032150 )\n}LIMIT 1",
        "questionWithBrackets": "What was written by , produced by , directed by , executive produced by , and edited by [Y\u014dko Yaguchi] 's spouse"
    },
    {
        "questionIdx": 186305,
        "questionPatternModEntities": "What was written by , produced by , edited by , and directed by a spouse of M0",
        "questionTemplate": "What was [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x0 P3 ?x1 .\n?x1 P4 M0 .\nFILTER ( ?x1 != M0 )\n}",
        "recursionDepth": 37,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 ?x1 .\n?x0 wdt:P1040 ?x1 .\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x0 wdt:P58 ?x1 .\n?x1 wdt:P26 wd:Q3032150 .\nFILTER ( ?x1 != wd:Q3032150 )\n}LIMIT 1",
        "questionWithBrackets": "What was written by , produced by , edited by , and directed by a spouse of [Y\u014dko Yaguchi]"
    },
    {
        "questionIdx": 186314,
        "questionPatternModEntities": "What was written by , produced by , edited by , directed by , and executive produced by M0 's parent",
        "questionTemplate": "What was [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x0 P3 ?x1 .\n?x0 P4 ?x1 .\n?x1 P5 M0\n}",
        "recursionDepth": 42,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 ?x1 .\n?x0 wdt:P1040 ?x1 .\n?x0 wdt:P1431 ?x1 .\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x0 wdt:P58 ?x1 .\n?x1 wdt:P40|wdt:P355 wd:Q1620638\n}LIMIT 1",
        "questionWithBrackets": "What was written by , produced by , edited by , directed by , and executive produced by [Hisao Kurosawa] 's parent"
    },
    {
        "questionIdx": 186315,
        "questionPatternModEntities": "What was written by , produced by , edited by , directed by , and executive produced by M0 's sibling",
        "questionTemplate": "What was [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x0 P3 ?x1 .\n?x0 P4 ?x1 .\n?x1 P5 M0 .\nFILTER ( ?x1 != M0 )\n}",
        "recursionDepth": 42,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 ?x1 .\n?x0 wdt:P1040 ?x1 .\n?x0 wdt:P1431 ?x1 .\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x0 wdt:P58 ?x1 .\n?x1 wdt:P3373 wd:Q28370409 .\nFILTER ( ?x1 != wd:Q28370409 )\n}LIMIT 1",
        "questionWithBrackets": "What was written by , produced by , edited by , directed by , and executive produced by [Everton Rocca] 's sibling"
    },
    {
        "questionIdx": 186338,
        "questionPatternModEntities": "What was written by , produced by , executive produced by , and directed by a sibling of M0",
        "questionTemplate": "What was [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x0 P3 ?x1 .\n?x1 P4 M0 .\nFILTER ( ?x1 != M0 )\n}",
        "recursionDepth": 38,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 ?x1 .\n?x0 wdt:P1431 ?x1 .\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x0 wdt:P58 ?x1 .\n?x1 wdt:P3373 wd:Q104373781 .\nFILTER ( ?x1 != wd:Q104373781 )\n}LIMIT 1",
        "questionWithBrackets": "What was written by , produced by , executive produced by , and directed by a sibling of [John Lynch]"
    },
    {
        "questionIdx": 186355,
        "questionPatternModEntities": "What was written , directed , and edited by M0 's spouse",
        "questionTemplate": "What was [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x1 P3 M0 .\nFILTER ( ?x1 != M0 )\n}",
        "recursionDepth": 27,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 ?x1 .\n?x0 wdt:P1040 ?x1 .\n?x0 wdt:P58 ?x1 .\n?x1 wdt:P26 wd:Q3032150 .\nFILTER ( ?x1 != wd:Q3032150 )\n}LIMIT 1",
        "questionWithBrackets": "What was written , directed , and edited by [Y\u014dko Yaguchi] 's spouse"
    },
    {
        "questionIdx": 186356,
        "questionPatternModEntities": "What was written , directed , and edited by M0 , M1 , and M2",
        "questionTemplate": "What was [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P1 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\n?x0 P2 M0 .\n?x0 P2 M1 .\n?x0 P2 M2\n}",
        "recursionDepth": 30,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 wd:Q562108 .\n?x0 wdt:P57 wd:Q1687239 .\n?x0 wdt:P57 wd:Q35979475 .\n?x0 wdt:P1040 wd:Q562108 .\n?x0 wdt:P1040 wd:Q1687239 .\n?x0 wdt:P1040 wd:Q35979475 .\n?x0 wdt:P58 wd:Q562108 .\n?x0 wdt:P58 wd:Q1687239 .\n?x0 wdt:P58 wd:Q35979475\n}",
        "questionWithBrackets": "What was written , directed , and edited by [Ole John] , [Jens J\u00f8rgen Thorsen] , and [J\u00f8rgen Leth]"
    },
    {
        "questionIdx": 186369,
        "questionPatternModEntities": "What was written , directed , and executive produced by M0 , M1 , and M2",
        "questionTemplate": "What was [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P1 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\n?x0 P2 M0 .\n?x0 P2 M1 .\n?x0 P2 M2\n}",
        "recursionDepth": 31,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 wd:Q448604 .\n?x0 wdt:P57 wd:Q363666 .\n?x0 wdt:P57 wd:Q452794 .\n?x0 wdt:P1431 wd:Q448604 .\n?x0 wdt:P1431 wd:Q363666 .\n?x0 wdt:P1431 wd:Q452794 .\n?x0 wdt:P58 wd:Q448604 .\n?x0 wdt:P58 wd:Q363666 .\n?x0 wdt:P58 wd:Q452794\n}",
        "questionWithBrackets": "What was written , directed , and executive produced by [David Zucker] , [Jim Abrahams] , and [Jerry Zucker]"
    },
    {
        "questionIdx": 186387,
        "questionPatternModEntities": "What was written , directed , and produced by a parent of M0",
        "questionTemplate": "What was [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x1 P3 M0\n}",
        "recursionDepth": 29,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 ?x1 .\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x0 wdt:P58 ?x1 .\n?x1 wdt:P40|wdt:P355 wd:Q120593\n}LIMIT 1",
        "questionWithBrackets": "What was written , directed , and produced by a parent of [Eugene Chaplin]"
    },
    {
        "questionIdx": 186401,
        "questionPatternModEntities": "What was written , directed , edited , and produced by a sibling of M0",
        "questionTemplate": "What was [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x0 P3 ?x1 .\n?x1 P4 M0 .\nFILTER ( ?x1 != M0 )\n}",
        "recursionDepth": 34,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 ?x1 .\n?x0 wdt:P1040 ?x1 .\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x0 wdt:P58 ?x1 .\n?x1 wdt:P3373 wd:Q606780 .\nFILTER ( ?x1 != wd:Q606780 )\n}LIMIT 1",
        "questionWithBrackets": "What was written , directed , edited , and produced by a sibling of [Sydney Chaplin]"
    },
    {
        "questionIdx": 186411,
        "questionPatternModEntities": "What was written , directed , edited , produced , and executive produced by a sibling of M0",
        "questionTemplate": "What was [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x0 P3 ?x1 .\n?x0 P4 ?x1 .\n?x1 P5 M0 .\nFILTER ( ?x1 != M0 )\n}",
        "recursionDepth": 40,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 ?x1 .\n?x0 wdt:P1040 ?x1 .\n?x0 wdt:P1431 ?x1 .\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x0 wdt:P58 ?x1 .\n?x1 wdt:P3373 wd:Q28370409 .\nFILTER ( ?x1 != wd:Q28370409 )\n}LIMIT 1",
        "questionWithBrackets": "What was written , directed , edited , produced , and executive produced by a sibling of [Everton Rocca]"
    },
    {
        "questionIdx": 186438,
        "questionPatternModEntities": "What was written , directed , produced , and executive produced by a sibling of M0",
        "questionTemplate": "What was [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x0 P3 ?x1 .\n?x1 P4 M0 .\nFILTER ( ?x1 != M0 )\n}",
        "recursionDepth": 35,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 ?x1 .\n?x0 wdt:P1431 ?x1 .\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x0 wdt:P58 ?x1 .\n?x1 wdt:P3373 wd:Q104373781 .\nFILTER ( ?x1 != wd:Q104373781 )\n}LIMIT 1",
        "questionWithBrackets": "What was written , directed , produced , and executive produced by a sibling of [John Lynch]"
    },
    {
        "questionIdx": 186443,
        "questionPatternModEntities": "What was written , directed , produced , edited , and executive produced by a sibling of M0",
        "questionTemplate": "What was [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x0 P3 ?x1 .\n?x0 P4 ?x1 .\n?x1 P5 M0 .\nFILTER ( ?x1 != M0 )\n}",
        "recursionDepth": 40,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 ?x1 .\n?x0 wdt:P1040 ?x1 .\n?x0 wdt:P1431 ?x1 .\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x0 wdt:P58 ?x1 .\n?x1 wdt:P3373 wd:Q28370409 .\nFILTER ( ?x1 != wd:Q28370409 )\n}LIMIT 1",
        "questionWithBrackets": "What was written , directed , produced , edited , and executive produced by a sibling of [Everton Rocca]"
    },
    {
        "questionIdx": 186454,
        "questionPatternModEntities": "What was written , edited , and directed by M0 , M1 , and M2",
        "questionTemplate": "What was [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P1 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\n?x0 P2 M0 .\n?x0 P2 M1 .\n?x0 P2 M2\n}",
        "recursionDepth": 30,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 wd:Q562108 .\n?x0 wdt:P57 wd:Q1687239 .\n?x0 wdt:P57 wd:Q35979475 .\n?x0 wdt:P1040 wd:Q562108 .\n?x0 wdt:P1040 wd:Q1687239 .\n?x0 wdt:P1040 wd:Q35979475 .\n?x0 wdt:P58 wd:Q562108 .\n?x0 wdt:P58 wd:Q1687239 .\n?x0 wdt:P58 wd:Q35979475\n}",
        "questionWithBrackets": "What was written , edited , and directed by [J\u00f8rgen Leth] , [Ole John] , and [Jens J\u00f8rgen Thorsen]"
    },
    {
        "questionIdx": 186467,
        "questionPatternModEntities": "What was written , edited , and executive produced by M0",
        "questionTemplate": "What was [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M0 .\n?x0 P2 M0\n}",
        "recursionDepth": 24,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1040 wd:Q38222 .\n?x0 wdt:P1431 wd:Q38222 .\n?x0 wdt:P58 wd:Q38222\n}LIMIT 1",
        "questionWithBrackets": "What was written , edited , and executive produced by [George Lucas]"
    },
    {
        "questionIdx": 186478,
        "questionPatternModEntities": "What was written , edited , and produced by a employee of M0",
        "questionTemplate": "What was [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x1 P3 M0\n}",
        "recursionDepth": 29,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1040 ?x1 .\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x0 wdt:P58 ?x1 .\n?x1 wdt:P108 wd:Q909176\n}LIMIT 1",
        "questionWithBrackets": "What was written , edited , and produced by a employee of [Cahiers du cin\u00e9ma]"
    },
    {
        "questionIdx": 186554,
        "questionPatternModEntities": "What was written , executive produced , and edited by a sibling of M0",
        "questionTemplate": "What was [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x1 P3 M0 .\nFILTER ( ?x1 != M0 )\n}",
        "recursionDepth": 30,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1040 ?x1 .\n?x0 wdt:P1431 ?x1 .\n?x0 wdt:P58 ?x1 .\n?x1 wdt:P3373 wd:Q28370409 .\nFILTER ( ?x1 != wd:Q28370409 )\n}LIMIT 1",
        "questionWithBrackets": "What was written , executive produced , and edited by a sibling of [Everton Rocca]"
    },
    {
        "questionIdx": 186572,
        "questionPatternModEntities": "What was written , executive produced , directed , and produced by M0 's spouse",
        "questionTemplate": "What was [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x0 P3 ?x1 .\n?x1 P4 M0 .\nFILTER ( ?x1 != M0 )\n}",
        "recursionDepth": 33,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 ?x1 .\n?x0 wdt:P1431 ?x1 .\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x0 wdt:P58 ?x1 .\n?x1 wdt:P26 wd:Q717669 .\nFILTER ( ?x1 != wd:Q717669 )\n}LIMIT 1",
        "questionWithBrackets": "What was written , executive produced , directed , and produced by [Lin Feng-jiao] 's spouse"
    },
    {
        "questionIdx": 186599,
        "questionPatternModEntities": "What was written , executive produced , produced , and edited by a spouse of M0",
        "questionTemplate": "What was [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x0 P3 ?x1 .\n?x1 P4 M0 .\nFILTER ( ?x1 != M0 )\n}",
        "recursionDepth": 35,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1040 ?x1 .\n?x0 wdt:P1431 ?x1 .\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x0 wdt:P58 ?x1 .\n?x1 wdt:P26 wd:Q3032150 .\nFILTER ( ?x1 != wd:Q3032150 )\n}LIMIT 1",
        "questionWithBrackets": "What was written , executive produced , produced , and edited by a spouse of [Y\u014dko Yaguchi]"
    },
    {
        "questionIdx": 186613,
        "questionPatternModEntities": "What was written , produced , and directed by M0 's sibling",
        "questionTemplate": "What was [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x1 P3 M0 .\nFILTER ( ?x1 != M0 )\n}",
        "recursionDepth": 27,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 ?x1 .\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x0 wdt:P58 ?x1 .\n?x1 wdt:P3373 wd:Q606780 .\nFILTER ( ?x1 != wd:Q606780 )\n}LIMIT 1",
        "questionWithBrackets": "What was written , produced , and directed by [Sydney Chaplin] 's sibling"
    },
    {
        "questionIdx": 186625,
        "questionPatternModEntities": "What was written , produced , and edited by M0 and M1",
        "questionTemplate": "What was [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P1 M0 .\n?x0 P1 M1 .\n?x0 P2 M0 .\n?x0 P2 M1\n}",
        "recursionDepth": 27,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1040 wd:Q562108 .\n?x0 wdt:P1040 wd:Q1687239 .\n?x0 wdt:P162|wdt:P272 wd:Q562108 .\n?x0 wdt:P162|wdt:P272 wd:Q1687239 .\n?x0 wdt:P58 wd:Q562108 .\n?x0 wdt:P58 wd:Q1687239\n}",
        "questionWithBrackets": "What was written , produced , and edited by [Jens J\u00f8rgen Thorsen] and [J\u00f8rgen Leth]"
    },
    {
        "questionIdx": 186650,
        "questionPatternModEntities": "What was written , produced , directed , and edited by M0",
        "questionTemplate": "What was [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M0 .\n?x0 P2 M0 .\n?x0 P3 M0\n}",
        "recursionDepth": 28,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 wd:Q8006 .\n?x0 wdt:P1040 wd:Q8006 .\n?x0 wdt:P162|wdt:P272 wd:Q8006 .\n?x0 wdt:P58 wd:Q8006\n}LIMIT 1",
        "questionWithBrackets": "What was written , produced , directed , and edited by [Akira Kurosawa]"
    },
    {
        "questionIdx": 186658,
        "questionPatternModEntities": "What was written , produced , directed , edited , and executive produced by a spouse of M0",
        "questionTemplate": "What was [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x0 P3 ?x1 .\n?x0 P4 ?x1 .\n?x1 P5 M0 .\nFILTER ( ?x1 != M0 )\n}",
        "recursionDepth": 40,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 ?x1 .\n?x0 wdt:P1040 ?x1 .\n?x0 wdt:P1431 ?x1 .\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x0 wdt:P58 ?x1 .\n?x1 wdt:P26 wd:Q3032150 .\nFILTER ( ?x1 != wd:Q3032150 )\n}LIMIT 1",
        "questionWithBrackets": "What was written , produced , directed , edited , and executive produced by a spouse of [Y\u014dko Yaguchi]"
    },
    {
        "questionIdx": 186660,
        "questionPatternModEntities": "What was written , produced , directed , executive produced , and edited by M0 's parent",
        "questionTemplate": "What was [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x0 P3 ?x1 .\n?x0 P4 ?x1 .\n?x1 P5 M0\n}",
        "recursionDepth": 38,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 ?x1 .\n?x0 wdt:P1040 ?x1 .\n?x0 wdt:P1431 ?x1 .\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x0 wdt:P58 ?x1 .\n?x1 wdt:P40|wdt:P355 wd:Q4739681\n}LIMIT 1",
        "questionWithBrackets": "What was written , produced , directed , executive produced , and edited by [Amanda Lucas] 's parent"
    },
    {
        "questionIdx": 186662,
        "questionPatternModEntities": "What was written , produced , directed , executive produced , and edited by M0",
        "questionTemplate": "What was [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M0 .\n?x0 P2 M0 .\n?x0 P3 M0 .\n?x0 P4 M0\n}",
        "recursionDepth": 34,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 wd:Q8006 .\n?x0 wdt:P1040 wd:Q8006 .\n?x0 wdt:P1431 wd:Q8006 .\n?x0 wdt:P162|wdt:P272 wd:Q8006 .\n?x0 wdt:P58 wd:Q8006\n}LIMIT 1",
        "questionWithBrackets": "What was written , produced , directed , executive produced , and edited by [Akira Kurosawa]"
    },
    {
        "questionIdx": 186664,
        "questionPatternModEntities": "What was written , produced , directed , executive produced , and edited by a spouse of M0",
        "questionTemplate": "What was [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x0 P3 ?x1 .\n?x0 P4 ?x1 .\n?x1 P5 M0 .\nFILTER ( ?x1 != M0 )\n}",
        "recursionDepth": 40,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 ?x1 .\n?x0 wdt:P1040 ?x1 .\n?x0 wdt:P1431 ?x1 .\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x0 wdt:P58 ?x1 .\n?x1 wdt:P26 wd:Q3032150 .\nFILTER ( ?x1 != wd:Q3032150 )\n}LIMIT 1",
        "questionWithBrackets": "What was written , produced , directed , executive produced , and edited by a spouse of [Y\u014dko Yaguchi]"
    },
    {
        "questionIdx": 186675,
        "questionPatternModEntities": "What was written , produced , edited , and executive produced by M0 's parent",
        "questionTemplate": "What was [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x0 P3 ?x1 .\n?x1 P4 M0\n}",
        "recursionDepth": 33,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1040 ?x1 .\n?x0 wdt:P1431 ?x1 .\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x0 wdt:P58 ?x1 .\n?x1 wdt:P40|wdt:P355 wd:Q1620638\n}LIMIT 1",
        "questionWithBrackets": "What was written , produced , edited , and executive produced by [Hisao Kurosawa] 's parent"
    },
    {
        "questionIdx": 186683,
        "questionPatternModEntities": "What was written , produced , executive produced , and directed by M0 's spouse",
        "questionTemplate": "What was [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x0 P3 ?x1 .\n?x1 P4 M0 .\nFILTER ( ?x1 != M0 )\n}",
        "recursionDepth": 33,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 ?x1 .\n?x0 wdt:P1431 ?x1 .\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x0 wdt:P58 ?x1 .\n?x1 wdt:P26 wd:Q6968092 .\nFILTER ( ?x1 != wd:Q6968092 )\n}LIMIT 1",
        "questionWithBrackets": "What was written , produced , executive produced , and directed by [Natalia Tudge] 's spouse"
    },
    {
        "questionIdx": 186687,
        "questionPatternModEntities": "What was written , produced , executive produced , and edited by M0 's parent",
        "questionTemplate": "What was [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x0 P3 ?x1 .\n?x1 P4 M0\n}",
        "recursionDepth": 33,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1040 ?x1 .\n?x0 wdt:P1431 ?x1 .\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x0 wdt:P58 ?x1 .\n?x1 wdt:P40|wdt:P355 wd:Q1620638\n}LIMIT 1",
        "questionWithBrackets": "What was written , produced , executive produced , and edited by [Hisao Kurosawa] 's parent"
    },
    {
        "questionIdx": 186690,
        "questionPatternModEntities": "What was written , produced , executive produced , and edited by a parent of M0",
        "questionTemplate": "What was [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x0 P3 ?x1 .\n?x1 P4 M0\n}",
        "recursionDepth": 35,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1040 ?x1 .\n?x0 wdt:P1431 ?x1 .\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x0 wdt:P58 ?x1 .\n?x1 wdt:P40|wdt:P355 wd:Q1620638\n}LIMIT 1",
        "questionWithBrackets": "What was written , produced , executive produced , and edited by a parent of [Hisao Kurosawa]"
    },
    {
        "questionIdx": 187193,
        "questionPatternModEntities": "Which American German parent of M2 married M3 , M4 , and M5",
        "questionTemplate": "Which [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] [VP_SIMPLE] [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P1 M2 .\n?x0 P2 M3 .\n?x0 P2 M4 .\n?x0 P2 M5 .\nFILTER ( ?x0 != M3 ) .\nFILTER ( ?x0 != M4 ) .\nFILTER ( ?x0 != M5 )\n}",
        "recursionDepth": 33,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q23771162 .\n?x0 wdt:P27 wd:Q183 .\n?x0 wdt:P27 wd:Q30 .\n?x0 wdt:P26 wd:Q850252 .\n?x0 wdt:P26 wd:Q452252 .\n?x0 wdt:P26 wd:Q3374 .\nFILTER ( ?x0 != wd:Q850252 ) .\nFILTER ( ?x0 != wd:Q452252 ) .\nFILTER ( ?x0 != wd:Q3374 )\n}",
        "questionWithBrackets": "Which American German parent of [Alicia Previn] married [Dory Previn] , [Anne-Sophie Mutter] , and [Betty Bennett]"
    },
    {
        "questionIdx": 187280,
        "questionPatternModEntities": "Which American employee of M0 did M1 employ",
        "questionTemplate": "Which [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] did [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P1 M2\n}",
        "recursionDepth": 21,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P108 wd:Q37230 .\n?x0 wdt:P108 wd:Q214126 .\n?x0 wdt:P27 wd:Q30\n}",
        "questionWithBrackets": "Which American employee of [Central Intelligence Agency] did [Los Angeles Police Department] employ"
    },
    {
        "questionIdx": 187469,
        "questionPatternModEntities": "Which American spouse of M2 married M1",
        "questionTemplate": "Which [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] [VP_SIMPLE] [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\nFILTER ( ?x0 != M1 ) .\nFILTER ( ?x0 != M2 )\n}",
        "recursionDepth": 21,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P27 wd:Q30 .\n?x0 wdt:P26 wd:Q35332 .\n?x0 wdt:P26 wd:Q202735 .\nFILTER ( ?x0 != wd:Q35332 ) .\nFILTER ( ?x0 != wd:Q202735 )\n}",
        "questionWithBrackets": "Which American spouse of [Billy Bob Thornton] married [Brad Pitt]"
    },
    {
        "questionIdx": 187568,
        "questionPatternModEntities": "Which British actor played M1",
        "questionTemplate": "Which [ADJECTIVE_SIMPLE] [NP_SIMPLE] [VP_SIMPLE] [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1\n}",
        "recursionDepth": 18,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P453 wd:Q24909033 .\n?x0 wdt:P27 wd:Q145\n}LIMIT 1",
        "questionWithBrackets": "Which British actor played [Peri Lomax]"
    },
    {
        "questionIdx": 187948,
        "questionPatternModEntities": "Which British spouse of M2 was a sibling of M0",
        "questionTemplate": "Which [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] was a [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P2 M2 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x0 != M2 )\n}",
        "recursionDepth": 24,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P27 wd:Q145 .\n?x0 wdt:P3373 wd:Q883169 .\n?x0 wdt:P26 wd:Q76231898 .\nFILTER ( ?x0 != wd:Q76231898 ) .\nFILTER ( ?x0 != wd:Q883169 )\n}",
        "questionWithBrackets": "Which British spouse of [Sophia Jane Thompson] was a sibling of [Blayney Hamilton]"
    },
    {
        "questionIdx": 188195,
        "questionPatternModEntities": "Which Canadian employee of M0 , M1 , and M2 did M3 , M4 , and M5 influence",
        "questionTemplate": "Which [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] , [entity] , and [entity] did [entity] , [entity] , and [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P1 M3 .\n?x0 P1 M4 .\n?x0 P1 M5 .\n?x0 P2 M6\n}",
        "recursionDepth": 35,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P737 wd:Q692 .\n?x0 wdt:P737 wd:Q41166 .\n?x0 wdt:P737 wd:Q40909 .\n?x0 wdt:P108 wd:Q326342 .\n?x0 wdt:P108 wd:Q49210 .\n?x0 wdt:P108 wd:Q391028 .\n?x0 wdt:P27 wd:Q16\n}",
        "questionWithBrackets": "Which Canadian employee of [University of British Columbia] , [Concordia University] , and [New York University] did [William Shakespeare] , [Jonathan Swift] , and [Virginia Woolf] influence"
    },
    {
        "questionIdx": 188450,
        "questionPatternModEntities": "Which Canadian sibling of M0 was M1 's employee",
        "questionTemplate": "Which [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] was [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P2 M2 .\nFILTER ( ?x0 != M0 )\n}",
        "recursionDepth": 22,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P108 wd:Q579321 .\n?x0 wdt:P27 wd:Q16 .\n?x0 wdt:P3373 wd:Q61597 .\nFILTER ( ?x0 != wd:Q61597 )\n}",
        "questionWithBrackets": "Which Canadian sibling of [Erika Mann] was [Dalhousie University] 's employee"
    },
    {
        "questionIdx": 188467,
        "questionPatternModEntities": "Which Canadian spouse of M2 was M0 's employee",
        "questionTemplate": "Which [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] was [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P2 M2 .\nFILTER ( ?x0 != M2 )\n}",
        "recursionDepth": 22,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P108 wd:Q13371 .\n?x0 wdt:P27 wd:Q16 .\n?x0 wdt:P26 wd:Q5052689 .\nFILTER ( ?x0 != wd:Q5052689 )\n}",
        "questionWithBrackets": "Which Canadian spouse of [Catherine Galbraith] was [Harvard University] 's employee"
    },
    {
        "questionIdx": 188489,
        "questionPatternModEntities": "Which Canadian spouse of a spouse of M3 was employed by M0 and M1",
        "questionTemplate": "Which [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of a [ROLE_SIMPLE] of [entity] was [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P1 M2 .\n?x0 P2 ?x1 .\n?x1 P2 M3 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x1 != M3 )\n}",
        "recursionDepth": 33,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P108 wd:Q326342 .\n?x0 wdt:P108 wd:Q391028 .\n?x0 wdt:P27 wd:Q16 .\n?x0 wdt:P26 ?x1 .\n?x1 wdt:P26 wd:Q183492 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x1 != wd:Q183492 )\n}",
        "questionWithBrackets": "Which Canadian spouse of a spouse of [Margaret Atwood] was employed by [Concordia University] and [University of British Columbia]"
    },
    {
        "questionIdx": 188513,
        "questionPatternModEntities": "Which Chinese British parent of M2 did M3 and M4 marry",
        "questionTemplate": "Which [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] did [entity] and [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P1 M2 .\n?x0 P2 M3 .\n?x0 P2 M4 .\nFILTER ( ?x0 != M3 ) .\nFILTER ( ?x0 != M4 )\n}",
        "recursionDepth": 30,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q75603090 .\n?x0 wdt:P27 wd:Q145 .\n?x0 wdt:P27 wd:Q148 .\n?x0 wdt:P26 wd:Q75603088 .\n?x0 wdt:P26 wd:Q3370137 .\nFILTER ( ?x0 != wd:Q75603088 ) .\nFILTER ( ?x0 != wd:Q3370137 )\n}",
        "questionWithBrackets": "Which Chinese British parent of [Lin Siao Fou-Menuhin] did [Zamira Menuhin] and [Patsy Toh] marry"
    },
    {
        "questionIdx": 188867,
        "questionPatternModEntities": "Which Chinese parent of M3 was influenced by M0 and influenced by M1",
        "questionTemplate": "Which [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] was [VP_SIMPLE] by [entity] and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P1 M2 .\n?x0 P2 M3\n}",
        "recursionDepth": 33,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P737 wd:Q504 .\n?x0 wdt:P737 wd:Q5685 .\n?x0 wdt:P40|wdt:P355 wd:Q11096217 .\n?x0 wdt:P27 wd:Q148\n}",
        "questionWithBrackets": "Which Chinese parent of [Li Xiaotang] was influenced by [Anton Chekhov] and influenced by [\u00c9mile Zola]"
    },
    {
        "questionIdx": 188957,
        "questionPatternModEntities": "Which Chinese sibling of M0 was employed by M1 , M2 , and M3",
        "questionTemplate": "Which [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] was [VP_SIMPLE] by [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\n?x0 P1 M3 .\n?x0 P2 M4 .\nFILTER ( ?x0 != M0 )\n}",
        "recursionDepth": 29,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P108 wd:Q16955 .\n?x0 wdt:P108 wd:Q16952 .\n?x0 wdt:P108 wd:Q178972 .\n?x0 wdt:P27 wd:Q148 .\n?x0 wdt:P3373 wd:Q3170503 .\nFILTER ( ?x0 != wd:Q3170503 )\n}",
        "questionWithBrackets": "Which Chinese sibling of [Chen Shizeng] was employed by [Peking University] , [Tsinghua University] , and [Sun Yat-sen University]"
    },
    {
        "questionIdx": 188974,
        "questionPatternModEntities": "Which Chinese spouse of M4 was influenced by M0 , M1 , and M2",
        "questionTemplate": "Which [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] was [VP_SIMPLE] by [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P1 M3 .\n?x0 P2 M4 .\nFILTER ( ?x0 != M4 )\n}",
        "recursionDepth": 30,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P737 wd:Q504 .\n?x0 wdt:P737 wd:Q5685 .\n?x0 wdt:P737 wd:Q12773 .\n?x0 wdt:P27 wd:Q148 .\n?x0 wdt:P26 wd:Q8247678 .\nFILTER ( ?x0 != wd:Q8247678 )\n}",
        "questionWithBrackets": "Which Chinese spouse of [Xiao Shan] was influenced by [Anton Chekhov] , [Julio Baghy] , and [\u00c9mile Zola]"
    },
    {
        "questionIdx": 189089,
        "questionPatternModEntities": "Which Dutch employee of M0 was employed by M1",
        "questionTemplate": "Which [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] was [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P1 M2\n}",
        "recursionDepth": 22,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P108 wd:Q13371 .\n?x0 wdt:P108 wd:Q637936 .\n?x0 wdt:P27 wd:Q29999\n}",
        "questionWithBrackets": "Which Dutch employee of [Harvard College Observatory] was employed by [Harvard University]"
    },
    {
        "questionIdx": 189536,
        "questionPatternModEntities": "Which French employee of M0 did M2 , M3 , and M4 marry",
        "questionTemplate": "Which [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] did [entity] , [entity] , and [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P2 M2 .\n?x0 P2 M3 .\n?x0 P2 M4 .\nFILTER ( ?x0 != M2 ) .\nFILTER ( ?x0 != M3 ) .\nFILTER ( ?x0 != M4 )\n}",
        "recursionDepth": 28,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P108 wd:Q2990235 .\n?x0 wdt:P27 wd:Q142 .\n?x0 wdt:P26 wd:Q3176121 .\n?x0 wdt:P26 wd:Q3094175 .\n?x0 wdt:P26 wd:Q26297738 .\nFILTER ( ?x0 != wd:Q3176121 ) .\nFILTER ( ?x0 != wd:Q3094175 ) .\nFILTER ( ?x0 != wd:Q26297738 )\n}",
        "questionWithBrackets": "Which French employee of [Compagnie parisienne de distribution d'\u00e9lectricit\u00e9] did [Christiane Fournier] , [Jeanne Mauchain] , and [Gaby Basset] marry"
    },
    {
        "questionIdx": 189800,
        "questionPatternModEntities": "Which French sibling of M0 did M1 , M2 , M3 , and M4 employ",
        "questionTemplate": "Which [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] did [entity] , [entity] , [entity] , and [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\n?x0 P1 M3 .\n?x0 P1 M4 .\n?x0 P2 M5 .\nFILTER ( ?x0 != M0 )\n}",
        "recursionDepth": 31,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P108 wd:Q83259 .\n?x0 wdt:P108 wd:Q280413 .\n?x0 wdt:P108 wd:Q11942 .\n?x0 wdt:P108 wd:Q1480643 .\n?x0 wdt:P27 wd:Q142 .\n?x0 wdt:P3373 wd:Q2896272 .\nFILTER ( ?x0 != wd:Q2896272 )\n}",
        "questionWithBrackets": "Which French sibling of [Benjamin Werner] did [ETH Z\u00fcrich] , [\u00c9cole normale sup\u00e9rieure] , [National Center for Scientific Research] , and [University of Paris-Sud] employ"
    },
    {
        "questionIdx": 189814,
        "questionPatternModEntities": "Which French spouse of M2 was influenced by M0",
        "questionTemplate": "Which [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] was [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P2 M2 .\nFILTER ( ?x0 != M2 )\n}",
        "recursionDepth": 22,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P737 wd:Q296 .\n?x0 wdt:P27 wd:Q142 .\n?x0 wdt:P26 wd:Q18641919 .\nFILTER ( ?x0 != wd:Q18641919 )\n}",
        "questionWithBrackets": "Which French spouse of [Nina Nikolajewna Andreevskaja] was influenced by [Claude Monet]"
    },
    {
        "questionIdx": 189820,
        "questionPatternModEntities": "Which French spouse of M6 was influenced by M0 , M1 , M2 , M3 , and M4",
        "questionTemplate": "Which [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] was [VP_SIMPLE] by [entity] , [entity] , [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P0 M3 .\n?x0 P0 M4 .\n?x0 P1 M5 .\n?x0 P2 M6 .\nFILTER ( ?x0 != M6 )\n}",
        "recursionDepth": 35,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P737 wd:Q868 .\n?x0 wdt:P737 wd:Q79759 .\n?x0 wdt:P737 wd:Q692 .\n?x0 wdt:P737 wd:Q1398 .\n?x0 wdt:P737 wd:Q6527 .\n?x0 wdt:P27 wd:Q142 .\n?x0 wdt:P26 wd:Q1047458 .\nFILTER ( ?x0 != wd:Q1047458 )\n}",
        "questionWithBrackets": "Which French spouse of [Casimir Dudevant] was influenced by [Aristotle] , [Jean-Jacques Rousseau] , [John Milton] , [Virgil] , and [William Shakespeare]"
    },
    {
        "questionIdx": 189832,
        "questionPatternModEntities": "Which French spouse of M3 was influenced by M0 and influenced by M1",
        "questionTemplate": "Which [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] was [VP_SIMPLE] by [entity] and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P1 M2 .\n?x0 P2 M3 .\nFILTER ( ?x0 != M3 )\n}",
        "recursionDepth": 33,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P737 wd:Q692 .\n?x0 wdt:P737 wd:Q868 .\n?x0 wdt:P27 wd:Q142 .\n?x0 wdt:P26 wd:Q1047458 .\nFILTER ( ?x0 != wd:Q1047458 )\n}",
        "questionWithBrackets": "Which French spouse of [Casimir Dudevant] was influenced by [Aristotle] and influenced by [William Shakespeare]"
    },
    {
        "questionIdx": 189864,
        "questionPatternModEntities": "Which German American spouse of M3 was influenced by M0",
        "questionTemplate": "Which [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] was [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\n?x0 P2 M3 .\nFILTER ( ?x0 != M3 )\n}",
        "recursionDepth": 27,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P737 wd:Q859 .\n?x0 wdt:P27 wd:Q183 .\n?x0 wdt:P27 wd:Q30 .\n?x0 wdt:P26 wd:Q60884 .\nFILTER ( ?x0 != wd:Q60884 )\n}",
        "questionWithBrackets": "Which German American spouse of [G\u00fcnther Anders] was influenced by [Plato]"
    },
    {
        "questionIdx": 190238,
        "questionPatternModEntities": "Which Italian actor played M1 , played M2 and M3 , and played M4",
        "questionTemplate": "Which [ADJECTIVE_SIMPLE] [NP_SIMPLE] [VP_SIMPLE] [entity] , [VP_SIMPLE] [entity] and [entity] , and [VP_SIMPLE] [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\n?x0 P1 M3 .\n?x0 P1 M4\n}",
        "recursionDepth": 42,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P453 wd:Q48463568 .\n?x0 wdt:P453 wd:Q64005951 .\n?x0 wdt:P453 wd:Q5815108 .\n?x0 wdt:P453 wd:Q50386907 .\n?x0 wdt:P27 wd:Q38\n}",
        "questionWithBrackets": "Which Italian actor played [Mario Cavaradossi] , played [Rodolfo] and [Andrea Ch\u00e9nier] , and played [Duke of Mantua]"
    },
    {
        "questionIdx": 190379,
        "questionPatternModEntities": "Which Italian employee of M0 did M1 employ",
        "questionTemplate": "Which [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] did [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P1 M2\n}",
        "recursionDepth": 21,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P108 wd:Q41506 .\n?x0 wdt:P108 wd:Q168756 .\n?x0 wdt:P27 wd:Q38\n}",
        "questionWithBrackets": "Which Italian employee of [Stanford University] did [University of California, Berkeley] employ"
    },
    {
        "questionIdx": 190382,
        "questionPatternModEntities": "Which Italian employee of M1 , M2 , and M3 was a sibling of M0",
        "questionTemplate": "Which [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] , [entity] , and [entity] was a [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\n?x0 P1 M3 .\n?x0 P2 M4 .\nFILTER ( ?x0 != M0 )\n}",
        "recursionDepth": 31,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P108 wd:Q209344 .\n?x0 wdt:P108 wd:Q168756 .\n?x0 wdt:P108 wd:Q586904 .\n?x0 wdt:P27 wd:Q38 .\n?x0 wdt:P3373 wd:Q104764518 .\nFILTER ( ?x0 != wd:Q104764518 )\n}",
        "questionWithBrackets": "Which Italian employee of [Federal University of Rio de Janeiro] , [University of California, Berkeley] , and [Sapienza University of Rome] was a sibling of [Angelo Segr\u00e8]"
    },
    {
        "questionIdx": 190658,
        "questionPatternModEntities": "Which Italian sibling of M0 was influenced by M1 and married M3 's spouse",
        "questionTemplate": "Which [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] was [VP_SIMPLE] by [entity] and [VP_SIMPLE] [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P2 M2 .\n?x0 P3 ?x1 .\n?x1 P3 M3 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x1 != M3 )\n}",
        "recursionDepth": 38,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P737 wd:Q202319 .\n?x0 wdt:P27 wd:Q38 .\n?x0 wdt:P3373 wd:Q54864560 .\n?x0 wdt:P26 ?x1 .\n?x1 wdt:P26 wd:Q199943 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x0 != wd:Q54864560 ) .\nFILTER ( ?x1 != wd:Q199943 )\n}",
        "questionWithBrackets": "Which Italian sibling of [Alessandro Celentano] was influenced by [Bill Haley] and married [Adriano Celentano] 's spouse"
    },
    {
        "questionIdx": 190673,
        "questionPatternModEntities": "Which Italian spouse of M4 was influenced by M0 , M1 , and M2",
        "questionTemplate": "Which [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] was [VP_SIMPLE] by [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P1 M3 .\n?x0 P2 M4 .\nFILTER ( ?x0 != M4 )\n}",
        "recursionDepth": 29,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P737 wd:Q9061 .\n?x0 wdt:P737 wd:Q35802 .\n?x0 wdt:P737 wd:Q184226 .\n?x0 wdt:P27 wd:Q38 .\n?x0 wdt:P26 wd:Q3188005 .\nFILTER ( ?x0 != wd:Q3188005 )\n}",
        "questionWithBrackets": "Which Italian spouse of [Judith Revel] was influenced by [Karl Marx] , [Benedictus de Spinoza] , and [Gilles Deleuze]"
    },
    {
        "questionIdx": 190679,
        "questionPatternModEntities": "Which Italian spouse of M2 married M1",
        "questionTemplate": "Which [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] [VP_SIMPLE] [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\nFILTER ( ?x0 != M1 ) .\nFILTER ( ?x0 != M2 )\n}",
        "recursionDepth": 21,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P27 wd:Q38 .\n?x0 wdt:P26 wd:Q268099 .\n?x0 wdt:P26 wd:Q15291055 .\nFILTER ( ?x0 != wd:Q268099 ) .\nFILTER ( ?x0 != wd:Q15291055 )\n}",
        "questionWithBrackets": "Which Italian spouse of [Carla Dall'Oglio] married [Veronica Lario]"
    },
    {
        "questionIdx": 190687,
        "questionPatternModEntities": "Which Italian spouse of M1 did M2 marry",
        "questionTemplate": "Which [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] did [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\nFILTER ( ?x0 != M1 ) .\nFILTER ( ?x0 != M2 )\n}",
        "recursionDepth": 21,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P27 wd:Q38 .\n?x0 wdt:P26 wd:Q202144 .\n?x0 wdt:P26 wd:Q539582 .\nFILTER ( ?x0 != wd:Q202144 ) .\nFILTER ( ?x0 != wd:Q539582 )\n}",
        "questionWithBrackets": "Which Italian spouse of [Shelley Winters] did [Juliette Mayniel] marry"
    },
    {
        "questionIdx": 190758,
        "questionPatternModEntities": "Which Japanese actor played M1 and M2",
        "questionTemplate": "Which [ADJECTIVE_SIMPLE] [NP_SIMPLE] [VP_SIMPLE] [entity] and [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P1 M2\n}",
        "recursionDepth": 22,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P453 wd:Q1945499 .\n?x0 wdt:P453 wd:Q65115227 .\n?x0 wdt:P27 wd:Q17\n}",
        "questionWithBrackets": "Which Japanese actor played [Chun-Li] and [Meia Gisborn]"
    },
    {
        "questionIdx": 191201,
        "questionPatternModEntities": "Which Japanese spouse of M3 was influenced by M0 and M1",
        "questionTemplate": "Which [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] was [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P1 M2 .\n?x0 P2 M3 .\nFILTER ( ?x0 != M3 )\n}",
        "recursionDepth": 26,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P737 wd:Q7724 .\n?x0 wdt:P737 wd:Q81731 .\n?x0 wdt:P27 wd:Q17 .\n?x0 wdt:P26 wd:Q11482611 .\nFILTER ( ?x0 != wd:Q11482611 )\n}",
        "questionWithBrackets": "Which Japanese spouse of [Y\u014dko Hiraoka] was influenced by [August Strindberg] and [Murasaki Shikibu]"
    },
    {
        "questionIdx": 191205,
        "questionPatternModEntities": "Which Japanese spouse of M5 was a employee of M0 , M1 , M2 , and M3",
        "questionTemplate": "Which [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] was a [ROLE_SIMPLE] of [entity] , [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P0 M3 .\n?x0 P1 M4 .\n?x0 P2 M5 .\nFILTER ( ?x0 != M5 )\n}",
        "recursionDepth": 34,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P108 wd:Q651233 .\n?x0 wdt:P108 wd:Q7842 .\n?x0 wdt:P108 wd:Q336264 .\n?x0 wdt:P108 wd:Q49088 .\n?x0 wdt:P27 wd:Q17 .\n?x0 wdt:P26 wd:Q11563533 .\nFILTER ( ?x0 != wd:Q11563533 )\n}",
        "questionWithBrackets": "Which Japanese spouse of [Sumi Yukawa] was a employee of [Osaka University] , [Kyoto University] , [University of Tokyo] , and [Columbia University]"
    },
    {
        "questionIdx": 191651,
        "questionPatternModEntities": "Which Mexican spouse of M4 did M0 , M1 , and M2 influence",
        "questionTemplate": "Which [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] did [entity] , [entity] , and [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P1 M3 .\n?x0 P2 M4 .\nFILTER ( ?x0 != M4 )\n}",
        "recursionDepth": 28,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P737 wd:Q909 .\n?x0 wdt:P737 wd:Q205739 .\n?x0 wdt:P737 wd:Q274623 .\n?x0 wdt:P27 wd:Q96 .\n?x0 wdt:P26 wd:Q16298255 .\nFILTER ( ?x0 != wd:Q16298255 )\n}",
        "questionWithBrackets": "Which Mexican spouse of [Raquel Castro] did [Ang\u00e9lica Gorodischer] , [Jorge Luis Borges] , and [Alan Moore] influence"
    },
    {
        "questionIdx": 191692,
        "questionPatternModEntities": "Which Spanish Italian spouse of M3 was employed by M0",
        "questionTemplate": "Which [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] was [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\n?x0 P2 M3 .\nFILTER ( ?x0 != M3 )\n}",
        "recursionDepth": 27,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P108 wd:Q7156 .\n?x0 wdt:P27 wd:Q38 .\n?x0 wdt:P27 wd:Q29 .\n?x0 wdt:P26 wd:Q32999543 .\nFILTER ( ?x0 != wd:Q32999543 )\n}",
        "questionWithBrackets": "Which Spanish Italian spouse of [Antonella Roccuzzo] was employed by [FC Barcelona]"
    },
    {
        "questionIdx": 191876,
        "questionPatternModEntities": "Which Spanish employee of M0 , M1 , and M2 was M3 's employee",
        "questionTemplate": "Which [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] , [entity] , and [entity] was [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P0 M3 .\n?x0 P1 M4\n}",
        "recursionDepth": 29,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P108 wd:Q21578 .\n?x0 wdt:P108 wd:Q245247 .\n?x0 wdt:P108 wd:Q5963090 .\n?x0 wdt:P108 wd:Q5963866 .\n?x0 wdt:P27 wd:Q29\n}",
        "questionWithBrackets": "Which Spanish employee of [Princeton University] , [No label defined] , and [King's College London] was [La Cr\u00f3nica] 's employee"
    },
    {
        "questionIdx": 192095,
        "questionPatternModEntities": "Which Spanish sibling of M0 was employed by M1",
        "questionTemplate": "Which [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] was [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P2 M2 .\nFILTER ( ?x0 != M0 )\n}",
        "recursionDepth": 22,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P108 wd:Q333886 .\n?x0 wdt:P27 wd:Q29 .\n?x0 wdt:P3373 wd:Q5992333 .\nFILTER ( ?x0 != wd:Q5992333 )\n}",
        "questionWithBrackets": "Which Spanish sibling of [Manuel Aznar L\u00f3pez] was employed by [Georgetown University]"
    },
    {
        "questionIdx": 192115,
        "questionPatternModEntities": "Which Spanish spouse of M2 was influenced by M0",
        "questionTemplate": "Which [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] was [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P2 M2 .\nFILTER ( ?x0 != M2 )\n}",
        "recursionDepth": 22,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P737 wd:Q501 .\n?x0 wdt:P27 wd:Q29 .\n?x0 wdt:P26 wd:Q11939105 .\nFILTER ( ?x0 != wd:Q11939105 )\n}",
        "questionWithBrackets": "Which Spanish spouse of [N\u00faria Folch i Pi] was influenced by [Charles Baudelaire]"
    },
    {
        "questionIdx": 192118,
        "questionPatternModEntities": "Which Spanish spouse of M4 married M1 , M2 , and M3",
        "questionTemplate": "Which [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] [VP_SIMPLE] [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\n?x0 P1 M3 .\n?x0 P1 M4 .\nFILTER ( ?x0 != M1 ) .\nFILTER ( ?x0 != M2 ) .\nFILTER ( ?x0 != M3 ) .\nFILTER ( ?x0 != M4 )\n}",
        "recursionDepth": 28,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P27 wd:Q29 .\n?x0 wdt:P26 wd:Q450229 .\n?x0 wdt:P26 wd:Q57558788 .\n?x0 wdt:P26 wd:Q24829 .\n?x0 wdt:P26 wd:Q962908 .\nFILTER ( ?x0 != wd:Q450229 ) .\nFILTER ( ?x0 != wd:Q57558788 ) .\nFILTER ( ?x0 != wd:Q24829 ) .\nFILTER ( ?x0 != wd:Q962908 )\n}",
        "questionWithBrackets": "Which Spanish spouse of [Edward C. Judson] married [Dick Haymes] , [Orson Welles] , and [Prince Aly Khan]"
    },
    {
        "questionIdx": 192150,
        "questionPatternModEntities": "Which Swedish French spouse of M4 was M3 's male parent",
        "questionTemplate": "Which [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] was [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P1 M2 .\n?x0 P2 M3 .\n?x0 P3 M4 .\nFILTER ( ?x0 != M4 )\n}",
        "recursionDepth": 32,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q52926 .\n?x0 wdt:P21 wd:Q6581097 .\n?x0 wdt:P27 wd:Q34 .\n?x0 wdt:P27 wd:Q142 .\n?x0 wdt:P26 wd:Q211749 .\nFILTER ( ?x0 != wd:Q211749 )\n}",
        "questionWithBrackets": "Which Swedish French spouse of [D\u00e9sir\u00e9e Clary] was [Oscar I of Sweden] 's male parent"
    },
    {
        "questionIdx": 192871,
        "questionPatternModEntities": "Which actor of M1 and M2 was employed by M0",
        "questionTemplate": "Which [ROLE_SIMPLE] of [entity] and [entity] was [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P1 M2\n}",
        "recursionDepth": 21,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P453 wd:Q9054901 .\n?x0 wdt:P453 wd:Q46996485 .\n?x0 wdt:P108 wd:Q207028\n}",
        "questionWithBrackets": "Which actor of [Elsa of Brabant] and [Pamina] was employed by [Mariinsky Theatre]"
    },
    {
        "questionIdx": 192893,
        "questionPatternModEntities": "Which actor of M1 was a male sibling of M0",
        "questionTemplate": "Which [ROLE_SIMPLE] of [entity] was a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P2 M2 .\nFILTER ( ?x0 != M0 )\n}",
        "recursionDepth": 24,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P453 wd:Q5815108 .\n?x0 wdt:P21 wd:Q6581097 .\n?x0 wdt:P3373 wd:Q3756757 .\nFILTER ( ?x0 != wd:Q3756757 )\n}",
        "questionWithBrackets": "Which actor of [Duke of Mantua] was a male sibling of [Gabriella Pavarotti]"
    },
    {
        "questionIdx": 192896,
        "questionPatternModEntities": "Which actor of M1 was a employee of M0",
        "questionTemplate": "Which [ROLE_SIMPLE] of [entity] was a [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1\n}",
        "recursionDepth": 19,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P453 wd:Q9054901 .\n?x0 wdt:P108 wd:Q207028\n}",
        "questionWithBrackets": "Which actor of [Pamina] was a employee of [Mariinsky Theatre]"
    },
    {
        "questionIdx": 192901,
        "questionPatternModEntities": "Which actor of M0 was M1 's spouse",
        "questionTemplate": "Which [ROLE_SIMPLE] of [entity] was [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M1 )\n}",
        "recursionDepth": 17,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P453 wd:Q222573 .\n?x0 wdt:P26 wd:Q192482 .\nFILTER ( ?x0 != wd:Q192482 )\n}",
        "questionWithBrackets": "Which actor of [femme fatale] was [Telemachus] 's spouse"
    },
    {
        "questionIdx": 192927,
        "questionPatternModEntities": "Which actor of M2 's spouse played M0 and played M1",
        "questionTemplate": "Which [ROLE_SIMPLE] of [entity] 's [ROLE_SIMPLE] [VP_SIMPLE] [entity] and [VP_SIMPLE] [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x1 P1 M2 .\nFILTER ( ?x1 != M2 )\n}",
        "recursionDepth": 31,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P453 ?x1 .\n?x0 wdt:P453 wd:Q9054901 .\n?x0 wdt:P453 wd:Q46996485 .\n?x1 wdt:P26 wd:Q11704223 .\nFILTER ( ?x1 != wd:Q11704223 )\n}",
        "questionWithBrackets": "Which actor of [Tamino] 's spouse played [Elsa of Brabant] and played [Pamina]"
    },
    {
        "questionIdx": 193020,
        "questionPatternModEntities": "Which actor of M0 was M1 's parent",
        "questionTemplate": "Which [ROLE_SIMPLE] of [entity] was [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1\n}",
        "recursionDepth": 17,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P453 wd:Q222573 .\n?x0 wdt:P40|wdt:P355 wd:Q779406\n}",
        "questionWithBrackets": "Which actor of [femme fatale] was [Latinus] 's parent"
    },
    {
        "questionIdx": 193049,
        "questionPatternModEntities": "Which actor played M0 and M1",
        "questionTemplate": "Which [NP_SIMPLE] [VP_SIMPLE] [entity] and [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1\n}",
        "recursionDepth": 17,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P453 wd:Q845913 .\n?x0 wdt:P453 wd:Q913318\n}",
        "questionWithBrackets": "Which actor played [Zerg] and [Terran]"
    },
    {
        "questionIdx": 193224,
        "questionPatternModEntities": "Which actor was M0 's actor 's actor",
        "questionTemplate": "Which [NP_SIMPLE] was [entity] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x1 P0 M0\n}",
        "recursionDepth": 18,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P453 ?x1 .\n?x1 wdt:P453 wd:Q74886744\n}LIMIT 1",
        "questionWithBrackets": "Which actor was [Talokudo] 's actor 's actor"
    },
    {
        "questionIdx": 195149,
        "questionPatternModEntities": "Which child of M0 did M1 found",
        "questionTemplate": "Which [ROLE_SIMPLE] of [entity] did [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1\n}",
        "recursionDepth": 16,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P112 wd:Q23 .\n?x0 wdt:P749 wd:Q308439\n}",
        "questionWithBrackets": "Which child of [National Park Service] did [George Washington] found"
    },
    {
        "questionIdx": 195155,
        "questionPatternModEntities": "Which child of M0 was M1 's spouse",
        "questionTemplate": "Which [ROLE_SIMPLE] of [entity] was [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M1 )\n}",
        "recursionDepth": 17,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P749 wd:Q1089760 .\n?x0 wdt:P26 wd:Q76375112 .\nFILTER ( ?x0 != wd:Q76375112 )\n}",
        "questionWithBrackets": "Which child of [Church Mission Society] was [Eliazbeth Fristan] 's spouse"
    },
    {
        "questionIdx": 195190,
        "questionPatternModEntities": "Which child of M0 did M1 and M2 found",
        "questionTemplate": "Which [ROLE_SIMPLE] of [entity] did [entity] and [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P1 M2\n}",
        "recursionDepth": 20,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P112 wd:Q882 .\n?x0 wdt:P112 wd:Q104109 .\n?x0 wdt:P749 wd:Q179200\n}",
        "questionWithBrackets": "Which child of [Metro-Goldwyn-Mayer] did [Charlie Chaplin] and [Mary Pickford] found"
    },
    {
        "questionIdx": 195221,
        "questionPatternModEntities": "Which child of M0 was founded by M1 , M2 , M3 , and M4",
        "questionTemplate": "Which [ROLE_SIMPLE] of [entity] was [VP_SIMPLE] by [entity] , [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\n?x0 P1 M3 .\n?x0 P1 M4\n}",
        "recursionDepth": 27,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P112 wd:Q11613 .\n?x0 wdt:P112 wd:Q317243 .\n?x0 wdt:P112 wd:Q9916 .\n?x0 wdt:P112 wd:Q541981 .\n?x0 wdt:P749 wd:Q11209\n}",
        "questionWithBrackets": "Which child of [United States Department of Defense] was founded by [Allen Welsh Dulles] , [William J. Donovan] , [Dwight D. Eisenhower] , and [Harry S. Truman]"
    },
    {
        "questionIdx": 195250,
        "questionPatternModEntities": "Which child of M0 did M1 found , M2 found , M3 found , and M4 found",
        "questionTemplate": "Which [ROLE_SIMPLE] of [entity] did [entity] [VP_SIMPLE] , [entity] [VP_SIMPLE] , [entity] [VP_SIMPLE] , and [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\n?x0 P1 M3 .\n?x0 P1 M4\n}",
        "recursionDepth": 45,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P112 wd:Q648 .\n?x0 wdt:P112 wd:Q2824871 .\n?x0 wdt:P112 wd:Q381652 .\n?x0 wdt:P112 wd:Q2994073 .\n?x0 wdt:P749 wd:Q273461\n}",
        "questionWithBrackets": "Which child of [\u00c9cole Centrale de Lille] did [Fr\u00e9d\u00e9ric Kuhlmann] found , [Adolphe Matrot] found , [Lille] found , and [departmental council of Nord] found"
    },
    {
        "questionIdx": 195251,
        "questionPatternModEntities": "Which child of M0 did M1 , M2 , M3 , and M4 found",
        "questionTemplate": "Which [ROLE_SIMPLE] of [entity] did [entity] , [entity] , [entity] , and [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\n?x0 P1 M3 .\n?x0 P1 M4\n}",
        "recursionDepth": 26,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P112 wd:Q38872 .\n?x0 wdt:P112 wd:Q895817 .\n?x0 wdt:P112 wd:Q103801 .\n?x0 wdt:P112 wd:Q1818362 .\n?x0 wdt:P749 wd:Q4469829\n}",
        "questionWithBrackets": "Which child of [Ostpreu\u00dfische Kleinbahnen] did [East Prussia] , [Lyck District] , [Prussia] , and [Lenz & Co.] found"
    },
    {
        "questionIdx": 195263,
        "questionPatternModEntities": "Which child of M0 was a spouse of M1",
        "questionTemplate": "Which [ROLE_SIMPLE] of [entity] was a [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M1 )\n}",
        "recursionDepth": 19,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P749 wd:Q1089760 .\n?x0 wdt:P26 wd:Q76375112 .\nFILTER ( ?x0 != wd:Q76375112 )\n}",
        "questionWithBrackets": "Which child of [Church Mission Society] was a spouse of [Eliazbeth Fristan]"
    },
    {
        "questionIdx": 195268,
        "questionPatternModEntities": "Which child of M0 was founded by M1 and M2",
        "questionTemplate": "Which [ROLE_SIMPLE] of [entity] was [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P1 M2\n}",
        "recursionDepth": 21,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P112 wd:Q882 .\n?x0 wdt:P112 wd:Q51123 .\n?x0 wdt:P749 wd:Q179200\n}",
        "questionWithBrackets": "Which child of [Metro-Goldwyn-Mayer] was founded by [Charlie Chaplin] and [D. W. Griffith]"
    },
    {
        "questionIdx": 195278,
        "questionPatternModEntities": "Which child of M2 was influenced by M0 and M1",
        "questionTemplate": "Which [ROLE_SIMPLE] of [entity] was [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P1 M2\n}",
        "recursionDepth": 21,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P737 wd:Q149964 .\n?x0 wdt:P737 wd:Q25352258 .\n?x0 wdt:P749 wd:Q8896\n}",
        "questionWithBrackets": "Which child of [Council of the European Union] was influenced by [Eurogroup] and [Economic and Financial Committee]"
    },
    {
        "questionIdx": 195325,
        "questionPatternModEntities": "Which child of M0 was founded by M1 and M2 , was founded by M3 , and was founded by M4",
        "questionTemplate": "Which [ROLE_SIMPLE] of [entity] was [VP_SIMPLE] by [entity] and [entity] , was [VP_SIMPLE] by [entity] , and was [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\n?x0 P1 M3 .\n?x0 P1 M4\n}",
        "recursionDepth": 46,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P112 wd:Q2042 .\n?x0 wdt:P112 wd:Q2185 .\n?x0 wdt:P112 wd:Q929334 .\n?x0 wdt:P112 wd:Q1871995 .\n?x0 wdt:P749 wd:Q603388\n}",
        "questionWithBrackets": "Which child of [Paneuropean Union] was founded by [Alain Peyrefitte] and [Louis Terrenoire] , was founded by [Charles de Gaulle] , and was founded by [Georges Pompidou]"
    },
    {
        "questionIdx": 195335,
        "questionPatternModEntities": "Which child of M0 did M1 , M2 , and M3 found",
        "questionTemplate": "Which [ROLE_SIMPLE] of [entity] did [entity] , [entity] , and [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\n?x0 P1 M3\n}",
        "recursionDepth": 23,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P112 wd:Q648 .\n?x0 wdt:P112 wd:Q2824871 .\n?x0 wdt:P112 wd:Q381652 .\n?x0 wdt:P749 wd:Q273461\n}",
        "questionWithBrackets": "Which child of [\u00c9cole Centrale de Lille] did [Adolphe Matrot] , [Lille] , and [Fr\u00e9d\u00e9ric Kuhlmann] found"
    },
    {
        "questionIdx": 195364,
        "questionPatternModEntities": "Which child of M0 was founded by M1 , M2 , and M3",
        "questionTemplate": "Which [ROLE_SIMPLE] of [entity] was [VP_SIMPLE] by [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\n?x0 P1 M3\n}",
        "recursionDepth": 24,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P112 wd:Q882 .\n?x0 wdt:P112 wd:Q104109 .\n?x0 wdt:P112 wd:Q104127 .\n?x0 wdt:P749 wd:Q179200\n}",
        "questionWithBrackets": "Which child of [Metro-Goldwyn-Mayer] was founded by [Charlie Chaplin] , [Douglas Fairbanks] , and [Mary Pickford]"
    },
    {
        "questionIdx": 195372,
        "questionPatternModEntities": "Which child of M0 was founded by M1",
        "questionTemplate": "Which [ROLE_SIMPLE] of [entity] was [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1\n}",
        "recursionDepth": 18,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P112 wd:Q23 .\n?x0 wdt:P749 wd:Q308439\n}",
        "questionWithBrackets": "Which child of [National Park Service] was founded by [George Washington]"
    },
    {
        "questionIdx": 195381,
        "questionPatternModEntities": "Which child of M1 was influenced by M0",
        "questionTemplate": "Which [ROLE_SIMPLE] of [entity] was [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1\n}",
        "recursionDepth": 18,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P737 wd:Q149964 .\n?x0 wdt:P749 wd:Q8896\n}",
        "questionWithBrackets": "Which child of [Council of the European Union] was influenced by [Eurogroup]"
    },
    {
        "questionIdx": 195412,
        "questionPatternModEntities": "Which child of M0 did M1 's spouse found",
        "questionTemplate": "Which [ROLE_SIMPLE] of [entity] did [entity] 's [ROLE_SIMPLE] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 ?x1 .\n?x1 P2 M1 .\nFILTER ( ?x1 != M1 )\n}",
        "recursionDepth": 20,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P112 ?x1 .\n?x0 wdt:P749 wd:Q308439 .\n?x1 wdt:P26 wd:Q191789 .\nFILTER ( ?x1 != wd:Q191789 )\n}",
        "questionWithBrackets": "Which child of [National Park Service] did [Martha Washington] 's spouse found"
    },
    {
        "questionIdx": 195419,
        "questionPatternModEntities": "Which child of M1 did M0 influence",
        "questionTemplate": "Which [ROLE_SIMPLE] of [entity] did [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1\n}",
        "recursionDepth": 16,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P737 wd:Q149964 .\n?x0 wdt:P749 wd:Q8896\n}",
        "questionWithBrackets": "Which child of [Council of the European Union] did [Eurogroup] influence"
    },
    {
        "questionIdx": 199249,
        "questionPatternModEntities": "Which employee of M4 's parent was influenced by M0 and M1 and married M2 and M3",
        "questionTemplate": "Which [ROLE_SIMPLE] of [entity] 's [ROLE_SIMPLE] was [VP_SIMPLE] by [entity] and [entity] and [VP_SIMPLE] [entity] and [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 M0 .\n?x0 P1 M1 .\n?x0 P2 M2 .\n?x0 P2 M3 .\n?x1 P3 M4 .\nFILTER ( ?x0 != M2 ) .\nFILTER ( ?x0 != M3 )\n}",
        "recursionDepth": 41,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P737 wd:Q302 .\n?x0 wdt:P737 wd:Q859 .\n?x0 wdt:P108 ?x1 .\n?x0 wdt:P26 wd:Q60884 .\n?x0 wdt:P26 wd:Q71696 .\n?x1 wdt:P40|wdt:P355 wd:Q7432485 .\nFILTER ( ?x0 != wd:Q60884 ) .\nFILTER ( ?x0 != wd:Q71696 )\n}",
        "questionWithBrackets": "Which employee of [School of International and Public Affairs, Columbia University] 's parent was influenced by [Plato] and [Jesus] and married [G\u00fcnther Anders] and [Heinrich Bl\u00fccher]"
    },
    {
        "questionIdx": 199252,
        "questionPatternModEntities": "Which employee of M0 did M1 employ",
        "questionTemplate": "Which [ROLE_SIMPLE] of [entity] did [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1\n}",
        "recursionDepth": 16,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P108 wd:Q95 .\n?x0 wdt:P108 wd:Q94887\n}",
        "questionWithBrackets": "Which employee of [Khan Academy] did [Google] employ"
    },
    {
        "questionIdx": 199261,
        "questionPatternModEntities": "Which employee of M0 , M1 , and M2 did M3 's spouse influence",
        "questionTemplate": "Which [ROLE_SIMPLE] of [entity] , [entity] , and [entity] did [entity] 's [ROLE_SIMPLE] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P1 ?x1 .\n?x1 P2 M3 .\nFILTER ( ?x1 != M3 )\n}",
        "recursionDepth": 27,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P737 ?x1 .\n?x0 wdt:P108 wd:Q3009993 .\n?x0 wdt:P108 wd:Q2819477 .\n?x0 wdt:P108 wd:Q2562289 .\n?x1 wdt:P26 wd:Q234583 .\nFILTER ( ?x1 != wd:Q234583 )\n}",
        "questionWithBrackets": "Which employee of [Universit\u00e9 du Qu\u00e9bec \u00e0 Chicoutimi] , [ASTROLab] , and [C\u00e9gep de Chicoutimi] did [Lynn Margulis] 's spouse influence"
    },
    {
        "questionIdx": 199266,
        "questionPatternModEntities": "Which employee of M0 was a male employee of M1",
        "questionTemplate": "Which [ROLE_SIMPLE] of [entity] was a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P1 M2\n}",
        "recursionDepth": 24,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P108 wd:Q84 .\n?x0 wdt:P108 wd:Q83164 .\n?x0 wdt:P21 wd:Q6581097\n}",
        "questionWithBrackets": "Which employee of [East India Company] was a male employee of [London]"
    },
    {
        "questionIdx": 199271,
        "questionPatternModEntities": "Which employee of M0 played M1 , M2 , and M3",
        "questionTemplate": "Which [ROLE_SIMPLE] of [entity] [VP_SIMPLE] [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\n?x0 P1 M3\n}",
        "recursionDepth": 23,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P453 wd:Q50386809 .\n?x0 wdt:P453 wd:Q12742668 .\n?x0 wdt:P453 wd:Q50926083 .\n?x0 wdt:P108 wd:Q503246\n}",
        "questionWithBrackets": "Which employee of [Juilliard School] played [Carmen] , [Lucia Ashton] , and [Princess Turandot]"
    },
    {
        "questionIdx": 199372,
        "questionPatternModEntities": "Which employee of M0 was M1 's parent",
        "questionTemplate": "Which [ROLE_SIMPLE] of [entity] was [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1\n}",
        "recursionDepth": 17,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q102649059 .\n?x0 wdt:P108 wd:Q95\n}",
        "questionWithBrackets": "Which employee of [Google] was [Kavya Pichai] 's parent"
    },
    {
        "questionIdx": 199394,
        "questionPatternModEntities": "Which employee of M0 , M1 , and M2 married M5 , married M6 , and was influenced by M3 and M4",
        "questionTemplate": "Which [ROLE_SIMPLE] of [entity] , [entity] , and [entity] [VP_SIMPLE] [entity] , [VP_SIMPLE] [entity] , and was [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P1 M3 .\n?x0 P1 M4 .\n?x0 P2 M5 .\n?x0 P2 M6 .\nFILTER ( ?x0 != M5 ) .\nFILTER ( ?x0 != M6 )\n}",
        "recursionDepth": 49,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P737 wd:Q302 .\n?x0 wdt:P737 wd:Q859 .\n?x0 wdt:P108 wd:Q309350 .\n?x0 wdt:P108 wd:Q49112 .\n?x0 wdt:P108 wd:Q21578 .\n?x0 wdt:P26 wd:Q71696 .\n?x0 wdt:P26 wd:Q60884 .\nFILTER ( ?x0 != wd:Q71696 ) .\nFILTER ( ?x0 != wd:Q60884 )\n}",
        "questionWithBrackets": "Which employee of [Yale University] , [Princeton University] , and [Northwestern University] married [Heinrich Bl\u00fccher] , married [G\u00fcnther Anders] , and was influenced by [Jesus] and [Plato]"
    },
    {
        "questionIdx": 199411,
        "questionPatternModEntities": "Which employee of M0 and M1 did M5 and M6 marry and M2 , M3 , and M4 influence",
        "questionTemplate": "Which [ROLE_SIMPLE] of [entity] and [entity] did [entity] and [entity] [VP_SIMPLE] and [entity] , [entity] , and [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P1 M2 .\n?x0 P1 M3 .\n?x0 P1 M4 .\n?x0 P2 M5 .\n?x0 P2 M6 .\nFILTER ( ?x0 != M5 ) .\nFILTER ( ?x0 != M6 )\n}",
        "recursionDepth": 42,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P737 wd:Q859 .\n?x0 wdt:P737 wd:Q1334326 .\n?x0 wdt:P737 wd:Q1398 .\n?x0 wdt:P108 wd:Q1319177 .\n?x0 wdt:P108 wd:Q194223 .\n?x0 wdt:P26 wd:Q5829999 .\n?x0 wdt:P26 wd:Q448233 .\nFILTER ( ?x0 != wd:Q5829999 ) .\nFILTER ( ?x0 != wd:Q448233 )\n}",
        "questionWithBrackets": "Which employee of [University of Buenos Aires] and [National Library of the Argentine Republic] did [Elsa Astete Mill\u00e1n] and [Mar\u00eda Kodama] marry and [Plato] , [Virgil] , and [Macedonio Fern\u00e1ndez] influence"
    },
    {
        "questionIdx": 199412,
        "questionPatternModEntities": "Which employee of M0 and M1 was influenced by a spouse of M4 , influenced by M2 , and influenced by M3",
        "questionTemplate": "Which [ROLE_SIMPLE] of [entity] and [entity] was [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P1 ?x1 .\n?x0 P1 M2 .\n?x0 P1 M3 .\n?x1 P2 M4 .\nFILTER ( ?x1 != M4 )\n}",
        "recursionDepth": 47,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P737 ?x1 .\n?x0 wdt:P737 wd:Q302835 .\n?x0 wdt:P737 wd:Q140188 .\n?x0 wdt:P108 wd:Q193510 .\n?x0 wdt:P108 wd:Q189441 .\n?x1 wdt:P26 wd:Q462582 .\nFILTER ( ?x1 != wd:Q462582 )\n}",
        "questionWithBrackets": "Which employee of [Jagiellonian University] and [University of Padua] was influenced by a spouse of [Pythias] , influenced by [Nasir al-Din al-Tusi] , and influenced by [Aristarchus of Samos]"
    },
    {
        "questionIdx": 199431,
        "questionPatternModEntities": "Which employee of M0 married M1",
        "questionTemplate": "Which [ROLE_SIMPLE] of [entity] [VP_SIMPLE] [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M1 )\n}",
        "recursionDepth": 16,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P108 wd:Q280413 .\n?x0 wdt:P26 wd:Q1257 .\nFILTER ( ?x0 != wd:Q1257 )\n}",
        "questionWithBrackets": "Which employee of [National Center for Scientific Research] married [Boutros Boutros-Ghali]"
    },
    {
        "questionIdx": 199443,
        "questionPatternModEntities": "Which employee of M0 , M1 , M2 , and M3 was influenced by M4 , influenced by M5 , and influenced by M6",
        "questionTemplate": "Which [ROLE_SIMPLE] of [entity] , [entity] , [entity] , and [entity] was [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P0 M3 .\n?x0 P1 M4 .\n?x0 P1 M5 .\n?x0 P1 M6\n}",
        "recursionDepth": 47,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P737 wd:Q302 .\n?x0 wdt:P737 wd:Q9200 .\n?x0 wdt:P737 wd:Q76509 .\n?x0 wdt:P108 wd:Q49167 .\n?x0 wdt:P108 wd:Q49088 .\n?x0 wdt:P108 wd:Q49112 .\n?x0 wdt:P108 wd:Q131252\n}",
        "questionWithBrackets": "Which employee of [Yale University] , [Wesleyan University] , [University of Chicago] , and [Columbia University] was influenced by [Jesus] , influenced by [Paul] , and influenced by [Karl Jaspers]"
    },
    {
        "questionIdx": 199456,
        "questionPatternModEntities": "Which employee of M0 was M1 's sibling 's parent",
        "questionTemplate": "Which [ROLE_SIMPLE] of [entity] was [entity] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 ?x1 .\n?x1 P2 M1 .\nFILTER ( ?x1 != M1 )\n}",
        "recursionDepth": 21,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P40|wdt:P355 ?x1 .\n?x0 wdt:P108 wd:Q1393497 .\n?x1 wdt:P3373 wd:Q76 .\nFILTER ( ?x1 != wd:Q76 )\n}",
        "questionWithBrackets": "Which employee of [Unocal Corporation] was [Barack Obama] 's sibling 's parent"
    },
    {
        "questionIdx": 199460,
        "questionPatternModEntities": "Which employee of M0 was M1 's spouse",
        "questionTemplate": "Which [ROLE_SIMPLE] of [entity] was [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M1 )\n}",
        "recursionDepth": 17,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P108 wd:Q280413 .\n?x0 wdt:P26 wd:Q1257 .\nFILTER ( ?x0 != wd:Q1257 )\n}",
        "questionWithBrackets": "Which employee of [National Center for Scientific Research] was [Boutros Boutros-Ghali] 's spouse"
    },
    {
        "questionIdx": 199490,
        "questionPatternModEntities": "Which employee of M0 and M1 was employed by M2 , M3 , and M4 , employed by M5 , and employed by M6",
        "questionTemplate": "Which [ROLE_SIMPLE] of [entity] and [entity] was [VP_SIMPLE] by [entity] , [entity] , and [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P0 M3 .\n?x0 P0 M4 .\n?x0 P0 M5 .\n?x0 P0 M6\n}",
        "recursionDepth": 48,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P108 wd:Q70 .\n?x0 wdt:P108 wd:Q168756 .\n?x0 wdt:P108 wd:Q708038 .\n?x0 wdt:P108 wd:Q11942 .\n?x0 wdt:P108 wd:Q31519 .\n?x0 wdt:P108 wd:Q152087 .\n?x0 wdt:P108 wd:Q21578\n}",
        "questionWithBrackets": "Which employee of [ETH Z\u00fcrich] and [Charles University] was employed by [Kaiser Wilhelm Society] , [Humboldt University of Berlin] , and [University of California, Berkeley] , employed by [Princeton University] , and employed by [Bern]"
    },
    {
        "questionIdx": 200072,
        "questionPatternModEntities": "Which female American sibling of M0 married M3 and M4",
        "questionTemplate": "Which [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] [VP_SIMPLE] [entity] and [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P2 M2 .\n?x0 P3 M3 .\n?x0 P3 M4 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x0 != M3 ) .\nFILTER ( ?x0 != M4 )\n}",
        "recursionDepth": 30,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P21 wd:Q6581072 .\n?x0 wdt:P27 wd:Q30 .\n?x0 wdt:P3373 wd:Q207 .\n?x0 wdt:P26 wd:Q4935260 .\n?x0 wdt:P26 wd:Q100147342 .\nFILTER ( ?x0 != wd:Q4935260 ) .\nFILTER ( ?x0 != wd:Q100147342 ) .\nFILTER ( ?x0 != wd:Q207 )\n}",
        "questionWithBrackets": "Which female American sibling of [George W. Bush] married [William LeBlond] and [Bobby Koch]"
    },
    {
        "questionIdx": 200136,
        "questionPatternModEntities": "Which female German employee of M0 and M1 did M2 and M3 employ",
        "questionTemplate": "Which [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] and [entity] did [entity] and [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P0 M3 .\n?x0 P1 M4 .\n?x0 P2 M5\n}",
        "recursionDepth": 34,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P108 wd:Q685557 .\n?x0 wdt:P108 wd:Q152087 .\n?x0 wdt:P108 wd:Q153987 .\n?x0 wdt:P108 wd:Q157808 .\n?x0 wdt:P21 wd:Q6581072 .\n?x0 wdt:P27 wd:Q183\n}",
        "questionWithBrackets": "Which female German employee of [Technical University of Munich] and [Humboldt University of Berlin] did [TU Dortmund] and [University of Freiburg] employ"
    },
    {
        "questionIdx": 200146,
        "questionPatternModEntities": "Which female German spouse of M3 married M2",
        "questionTemplate": "Which [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] [VP_SIMPLE] [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P2 M2 .\n?x0 P2 M3 .\nFILTER ( ?x0 != M2 ) .\nFILTER ( ?x0 != M3 )\n}",
        "recursionDepth": 26,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P21 wd:Q6581072 .\n?x0 wdt:P27 wd:Q183 .\n?x0 wdt:P26 wd:Q104836783 .\n?x0 wdt:P26 wd:Q734944 .\nFILTER ( ?x0 != wd:Q104836783 ) .\nFILTER ( ?x0 != wd:Q734944 )\n}",
        "questionWithBrackets": "Which female German spouse of [Robert Knittel] married [Clifford Odets]"
    },
    {
        "questionIdx": 200217,
        "questionPatternModEntities": "Which female actor played M0 and M1",
        "questionTemplate": "Which [ADJECTIVE_SIMPLE] [NP_SIMPLE] [VP_SIMPLE] [entity] and [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P1 M2\n}",
        "recursionDepth": 22,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P453 wd:Q1945499 .\n?x0 wdt:P453 wd:Q65115227 .\n?x0 wdt:P21 wd:Q6581072\n}",
        "questionWithBrackets": "Which female actor played [Meia Gisborn] and [Chun-Li]"
    },
    {
        "questionIdx": 200439,
        "questionPatternModEntities": "Which female employee of M0 did M1 influence",
        "questionTemplate": "Which [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] did [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P2 M2\n}",
        "recursionDepth": 21,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P737 wd:Q868 .\n?x0 wdt:P108 wd:Q13371 .\n?x0 wdt:P21 wd:Q6581072\n}",
        "questionWithBrackets": "Which female employee of [Harvard University] did [Aristotle] influence"
    },
    {
        "questionIdx": 200870,
        "questionPatternModEntities": "Which female sibling of M0 was influenced by M1 and influenced by M2",
        "questionTemplate": "Which [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] was [VP_SIMPLE] by [entity] and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\n?x0 P2 M3 .\nFILTER ( ?x0 != M0 )\n}",
        "recursionDepth": 33,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P737 wd:Q255 .\n?x0 wdt:P737 wd:Q46096 .\n?x0 wdt:P21 wd:Q6581072 .\n?x0 wdt:P3373 wd:Q95404 .\nFILTER ( ?x0 != wd:Q95404 )\n}",
        "questionWithBrackets": "Which female sibling of [Rebecka Mendelssohn] was influenced by [Felix Mendelssohn] and influenced by [Ludwig van Beethoven]"
    },
    {
        "questionIdx": 200875,
        "questionPatternModEntities": "Which female sibling of M0 married M3 and M4 and was influenced by M1",
        "questionTemplate": "Which [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] [VP_SIMPLE] [entity] and [entity] and was [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P2 M2 .\n?x0 P3 M3 .\n?x0 P3 M4 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x0 != M3 ) .\nFILTER ( ?x0 != M4 )\n}",
        "recursionDepth": 38,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P737 wd:Q19675 .\n?x0 wdt:P21 wd:Q6581072 .\n?x0 wdt:P3373 wd:Q106298135 .\n?x0 wdt:P26 wd:Q105962583 .\n?x0 wdt:P26 wd:Q105962702 .\nFILTER ( ?x0 != wd:Q105962583 ) .\nFILTER ( ?x0 != wd:Q105962702 ) .\nFILTER ( ?x0 != wd:Q106298135 )\n}",
        "questionWithBrackets": "Which female sibling of [Mehmet Darga] married [Necati Sar\u0131er] and [Heinz Anstock] and was influenced by [Louvre Museum]"
    },
    {
        "questionIdx": 200891,
        "questionPatternModEntities": "Which female sibling of M0 was a French Canadian spouse of M4",
        "questionTemplate": "Which [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] was a [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\n?x0 P2 M3 .\n?x0 P3 M4 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x0 != M4 )\n}",
        "recursionDepth": 34,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P21 wd:Q6581072 .\n?x0 wdt:P27 wd:Q16 .\n?x0 wdt:P27 wd:Q142 .\n?x0 wdt:P3373 wd:Q88006341 .\n?x0 wdt:P26 wd:Q216913 .\nFILTER ( ?x0 != wd:Q216913 ) .\nFILTER ( ?x0 != wd:Q88006341 )\n}",
        "questionWithBrackets": "Which female sibling of [Michelle Lavigne] was a French Canadian spouse of [Deryck Whibley]"
    },
    {
        "questionIdx": 200901,
        "questionPatternModEntities": "Which female sibling of M0 married M2 and M3",
        "questionTemplate": "Which [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] [VP_SIMPLE] [entity] and [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P2 M2 .\n?x0 P2 M3 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x0 != M2 ) .\nFILTER ( ?x0 != M3 )\n}",
        "recursionDepth": 25,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P21 wd:Q6581072 .\n?x0 wdt:P3373 wd:Q2677 .\n?x0 wdt:P26 wd:Q51007 .\n?x0 wdt:P26 wd:Q2643355 .\nFILTER ( ?x0 != wd:Q51007 ) .\nFILTER ( ?x0 != wd:Q2643355 ) .\nFILTER ( ?x0 != wd:Q2677 )\n}",
        "questionWithBrackets": "Which female sibling of [Wilhelm II] married [Alexander Zoubkoff] and [Prince Adolf of Schaumburg-Lippe]"
    },
    {
        "questionIdx": 200922,
        "questionPatternModEntities": "Which female spouse of M4 did M0 , M1 , and M2 influence",
        "questionTemplate": "Which [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] did [entity] , [entity] , and [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P1 M3 .\n?x0 P2 M4 .\nFILTER ( ?x0 != M4 )\n}",
        "recursionDepth": 28,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P737 wd:Q868 .\n?x0 wdt:P737 wd:Q79759 .\n?x0 wdt:P737 wd:Q1290 .\n?x0 wdt:P21 wd:Q6581072 .\n?x0 wdt:P26 wd:Q1047458 .\nFILTER ( ?x0 != wd:Q1047458 )\n}",
        "questionWithBrackets": "Which female spouse of [Casimir Dudevant] did [Blaise Pascal] , [Aristotle] , and [John Milton] influence"
    },
    {
        "questionIdx": 200927,
        "questionPatternModEntities": "Which female spouse of M2 did M0 influence and marry",
        "questionTemplate": "Which [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] did [entity] [VP_SIMPLE] and [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P2 M0 .\n?x0 P2 M2 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x0 != M2 )\n}",
        "recursionDepth": 29,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P737 wd:Q24311 .\n?x0 wdt:P21 wd:Q6581072 .\n?x0 wdt:P26 wd:Q24311 .\n?x0 wdt:P26 wd:Q75584202 .\nFILTER ( ?x0 != wd:Q24311 ) .\nFILTER ( ?x0 != wd:Q75584202 )\n}",
        "questionWithBrackets": "Which female spouse of [Rodney G. Searight] did [Richard Meinertzhagen] influence and marry"
    },
    {
        "questionIdx": 200928,
        "questionPatternModEntities": "Which female spouse of M2 did M0 marry and influence",
        "questionTemplate": "Which [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] did [entity] [VP_SIMPLE] and [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P2 M0 .\n?x0 P2 M2 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x0 != M2 )\n}",
        "recursionDepth": 29,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P737 wd:Q24311 .\n?x0 wdt:P21 wd:Q6581072 .\n?x0 wdt:P26 wd:Q24311 .\n?x0 wdt:P26 wd:Q75584202 .\nFILTER ( ?x0 != wd:Q24311 ) .\nFILTER ( ?x0 != wd:Q75584202 )\n}",
        "questionWithBrackets": "Which female spouse of [Rodney G. Searight] did [Richard Meinertzhagen] marry and influence"
    },
    {
        "questionIdx": 200940,
        "questionPatternModEntities": "Which female spouse of M4 was influenced by M0 and M1 and married M3",
        "questionTemplate": "Which [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] was [VP_SIMPLE] by [entity] and [entity] and [VP_SIMPLE] [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P1 M2 .\n?x0 P2 M3 .\n?x0 P2 M4 .\nFILTER ( ?x0 != M3 ) .\nFILTER ( ?x0 != M4 )\n}",
        "recursionDepth": 38,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P737 wd:Q302 .\n?x0 wdt:P737 wd:Q859 .\n?x0 wdt:P21 wd:Q6581072 .\n?x0 wdt:P26 wd:Q60884 .\n?x0 wdt:P26 wd:Q71696 .\nFILTER ( ?x0 != wd:Q60884 ) .\nFILTER ( ?x0 != wd:Q71696 )\n}",
        "questionWithBrackets": "Which female spouse of [Heinrich Bl\u00fccher] was influenced by [Plato] and [Jesus] and married [G\u00fcnther Anders]"
    },
    {
        "questionIdx": 200941,
        "questionPatternModEntities": "Which female spouse of M3 was influenced by M0 and M1",
        "questionTemplate": "Which [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] was [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P1 M2 .\n?x0 P2 M3 .\nFILTER ( ?x0 != M3 )\n}",
        "recursionDepth": 27,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P737 wd:Q255 .\n?x0 wdt:P737 wd:Q1339 .\n?x0 wdt:P21 wd:Q6581072 .\n?x0 wdt:P26 wd:Q560757 .\nFILTER ( ?x0 != wd:Q560757 )\n}",
        "questionWithBrackets": "Which female spouse of [Wilhelm Hensel] was influenced by [Ludwig van Beethoven] and [Johann Sebastian Bach]"
    },
    {
        "questionIdx": 200943,
        "questionPatternModEntities": "Which female spouse of M4 married M1 , M2 , and M3",
        "questionTemplate": "Which [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] [VP_SIMPLE] [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\n?x0 P1 M3 .\n?x0 P1 M4 .\nFILTER ( ?x0 != M1 ) .\nFILTER ( ?x0 != M2 ) .\nFILTER ( ?x0 != M3 ) .\nFILTER ( ?x0 != M4 )\n}",
        "recursionDepth": 28,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P21 wd:Q6581072 .\n?x0 wdt:P26 wd:Q3340 .\n?x0 wdt:P26 wd:Q296446 .\n?x0 wdt:P26 wd:Q310808 .\n?x0 wdt:P26 wd:Q311112 .\nFILTER ( ?x0 != wd:Q3340 ) .\nFILTER ( ?x0 != wd:Q296446 ) .\nFILTER ( ?x0 != wd:Q310808 ) .\nFILTER ( ?x0 != wd:Q311112 )\n}",
        "questionWithBrackets": "Which female spouse of [Antiochus VIII Grypus] married [Antiochus X Eusebes] , [Antiochus IX Cyzicenus] , and [Ptolemy IX Lathyros]"
    },
    {
        "questionIdx": 200953,
        "questionPatternModEntities": "Which female spouse of M3 's spouse was influenced by M0 and influenced by M1",
        "questionTemplate": "Which [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] 's [ROLE_SIMPLE] was [VP_SIMPLE] by [entity] and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P1 M2 .\n?x0 P2 ?x1 .\n?x1 P2 M3 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x1 != M3 )\n}",
        "recursionDepth": 37,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P737 wd:Q255 .\n?x0 wdt:P737 wd:Q1339 .\n?x0 wdt:P21 wd:Q6581072 .\n?x0 wdt:P26 ?x1 .\n?x1 wdt:P26 wd:Q57286 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x1 != wd:Q57286 )\n}",
        "questionWithBrackets": "Which female spouse of [Fanny Mendelssohn] 's spouse was influenced by [Johann Sebastian Bach] and influenced by [Ludwig van Beethoven]"
    },
    {
        "questionIdx": 200965,
        "questionPatternModEntities": "Which female spouse of M3 played M0 and M1",
        "questionTemplate": "Which [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] [VP_SIMPLE] [entity] and [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P1 M2 .\n?x0 P2 M3 .\nFILTER ( ?x0 != M3 )\n}",
        "recursionDepth": 25,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P453 wd:Q12742668 .\n?x0 wdt:P453 wd:Q50386809 .\n?x0 wdt:P21 wd:Q6581072 .\n?x0 wdt:P26 wd:Q182360 .\nFILTER ( ?x0 != wd:Q182360 )\n}",
        "questionWithBrackets": "Which female spouse of [Giovanni Battista Meneghini] played [Princess Turandot] and [Carmen]"
    },
    {
        "questionIdx": 200970,
        "questionPatternModEntities": "Which female spouse of M4 married M3 and was influenced by M0 and M1",
        "questionTemplate": "Which [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] [VP_SIMPLE] [entity] and was [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P1 M2 .\n?x0 P2 M3 .\n?x0 P2 M4 .\nFILTER ( ?x0 != M3 ) .\nFILTER ( ?x0 != M4 )\n}",
        "recursionDepth": 38,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P737 wd:Q859 .\n?x0 wdt:P737 wd:Q76509 .\n?x0 wdt:P21 wd:Q6581072 .\n?x0 wdt:P26 wd:Q60884 .\n?x0 wdt:P26 wd:Q71696 .\nFILTER ( ?x0 != wd:Q60884 ) .\nFILTER ( ?x0 != wd:Q71696 )\n}",
        "questionWithBrackets": "Which female spouse of [Heinrich Bl\u00fccher] married [G\u00fcnther Anders] and was influenced by [Karl Jaspers] and [Plato]"
    },
    {
        "questionIdx": 206733,
        "questionPatternModEntities": "Which male parent of M2 did M0 influence and marry",
        "questionTemplate": "Which [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] did [entity] [VP_SIMPLE] and [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P2 M2 .\n?x0 P3 M0 .\nFILTER ( ?x0 != M0 )\n}",
        "recursionDepth": 29,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P737 wd:Q93514 .\n?x0 wdt:P40|wdt:P355 wd:Q1099928 .\n?x0 wdt:P21 wd:Q6581097 .\n?x0 wdt:P26 wd:Q93514 .\nFILTER ( ?x0 != wd:Q93514 )\n}",
        "questionWithBrackets": "Which male parent of [Clemens Eich] did [Ilse Aichinger] influence and marry"
    },
    {
        "questionIdx": 207039,
        "questionPatternModEntities": "Which male sibling of M0 was influenced by M1 and M2 and influenced by M3 and M4",
        "questionTemplate": "Which [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] was [VP_SIMPLE] by [entity] and [entity] and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\n?x0 P1 M3 .\n?x0 P1 M4 .\n?x0 P2 M5 .\nFILTER ( ?x0 != M0 )\n}",
        "recursionDepth": 41,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P737 wd:Q868 .\n?x0 wdt:P737 wd:Q34943 .\n?x0 wdt:P737 wd:Q1398 .\n?x0 wdt:P737 wd:Q6691 .\n?x0 wdt:P21 wd:Q6581097 .\n?x0 wdt:P3373 wd:Q3749520 .\nFILTER ( ?x0 != wd:Q3749520 )\n}",
        "questionWithBrackets": "Which male sibling of [Francesco Alighieri] was influenced by [Aristotle] and [Ptolemy] and influenced by [Virgil] and [Homer]"
    },
    {
        "questionIdx": 207048,
        "questionPatternModEntities": "Which male sibling of M0 married M2",
        "questionTemplate": "Which [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] [VP_SIMPLE] [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P2 M2 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x0 != M2 )\n}",
        "recursionDepth": 21,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P21 wd:Q6581097 .\n?x0 wdt:P3373 wd:Q1317 .\n?x0 wdt:P26 wd:Q118980 .\nFILTER ( ?x0 != wd:Q118980 ) .\nFILTER ( ?x0 != wd:Q1317 )\n}",
        "questionWithBrackets": "Which male sibling of [Osama bin Laden] married [Carmen Binladin]"
    },
    {
        "questionIdx": 207054,
        "questionPatternModEntities": "Which male sibling of M0 married M5 and was influenced by M1 , M2 , and M3",
        "questionTemplate": "Which [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] [VP_SIMPLE] [entity] and was [VP_SIMPLE] by [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\n?x0 P1 M3 .\n?x0 P2 M4 .\n?x0 P3 M5 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x0 != M5 )\n}",
        "recursionDepth": 41,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P737 wd:Q504 .\n?x0 wdt:P737 wd:Q171976 .\n?x0 wdt:P737 wd:Q991 .\n?x0 wdt:P21 wd:Q6581097 .\n?x0 wdt:P3373 wd:Q2145765 .\n?x0 wdt:P26 wd:Q466584 .\nFILTER ( ?x0 != wd:Q466584 ) .\nFILTER ( ?x0 != wd:Q2145765 )\n}",
        "questionWithBrackets": "Which male sibling of [Mikhail Chekhov] married [Olga Knipper] and was influenced by [Fyodor Dostoyevsky] , [Alexander Ostrovsky] , and [\u00c9mile Zola]"
    },
    {
        "questionIdx": 207080,
        "questionPatternModEntities": "Which male spouse of M7 was influenced by M0 , M1 , M2 , M3 , M4 , and M5",
        "questionTemplate": "Which [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] was [VP_SIMPLE] by [entity] , [entity] , [entity] , [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P0 M3 .\n?x0 P0 M4 .\n?x0 P0 M5 .\n?x0 P1 M6 .\n?x0 P2 M7 .\nFILTER ( ?x0 != M7 )\n}",
        "recursionDepth": 39,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P737 wd:Q859 .\n?x0 wdt:P737 wd:Q83375 .\n?x0 wdt:P737 wd:Q913 .\n?x0 wdt:P737 wd:Q41155 .\n?x0 wdt:P737 wd:Q5264 .\n?x0 wdt:P737 wd:Q41980 .\n?x0 wdt:P21 wd:Q6581097 .\n?x0 wdt:P26 wd:Q462582 .\nFILTER ( ?x0 != wd:Q462582 )\n}",
        "questionWithBrackets": "Which male spouse of [Pythias] was influenced by [Heraclitus] , [Democritus] , [Socrates] , [Plato] , [Hippocrates] , and [Empedocles]"
    },
    {
        "questionIdx": 207081,
        "questionPatternModEntities": "Which male spouse of M4 was influenced by M0 , M1 , and M2",
        "questionTemplate": "Which [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] was [VP_SIMPLE] by [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P1 M3 .\n?x0 P2 M4 .\nFILTER ( ?x0 != M4 )\n}",
        "recursionDepth": 29,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P737 wd:Q504 .\n?x0 wdt:P737 wd:Q171976 .\n?x0 wdt:P737 wd:Q991 .\n?x0 wdt:P21 wd:Q6581097 .\n?x0 wdt:P26 wd:Q466584 .\nFILTER ( ?x0 != wd:Q466584 )\n}",
        "questionWithBrackets": "Which male spouse of [Olga Knipper] was influenced by [Alexander Ostrovsky] , [\u00c9mile Zola] , and [Fyodor Dostoyevsky]"
    },
    {
        "questionIdx": 207086,
        "questionPatternModEntities": "Which male spouse of M4 did M0 , M1 , and M2 influence",
        "questionTemplate": "Which [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] did [entity] , [entity] , and [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P1 M3 .\n?x0 P2 M4 .\nFILTER ( ?x0 != M4 )\n}",
        "recursionDepth": 28,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P737 wd:Q535 .\n?x0 wdt:P737 wd:Q502 .\n?x0 wdt:P737 wd:Q868 .\n?x0 wdt:P21 wd:Q6581097 .\n?x0 wdt:P26 wd:Q271934 .\nFILTER ( ?x0 != wd:Q271934 )\n}",
        "questionWithBrackets": "Which male spouse of [Sophia Tolstaya] did [Aristotle] , [Victor Hugo] , and [Stendhal] influence"
    },
    {
        "questionIdx": 207116,
        "questionPatternModEntities": "Which male spouse of M3 was influenced by M0 and M1",
        "questionTemplate": "Which [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] was [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P1 M2 .\n?x0 P2 M3 .\nFILTER ( ?x0 != M3 )\n}",
        "recursionDepth": 27,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P737 wd:Q502 .\n?x0 wdt:P737 wd:Q102513 .\n?x0 wdt:P21 wd:Q6581097 .\n?x0 wdt:P26 wd:Q271934 .\nFILTER ( ?x0 != wd:Q271934 )\n}",
        "questionWithBrackets": "Which male spouse of [Sophia Tolstaya] was influenced by [Stendhal] and [Harriet Beecher Stowe]"
    },
    {
        "questionIdx": 207120,
        "questionPatternModEntities": "Which male spouse of M3 was a actor of M0 and M1",
        "questionTemplate": "Which [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] was a [ROLE_SIMPLE] of [entity] and [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P1 M2 .\n?x0 P2 M3 .\nFILTER ( ?x0 != M3 )\n}",
        "recursionDepth": 28,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P453 wd:Q64005951 .\n?x0 wdt:P453 wd:Q50807639 .\n?x0 wdt:P21 wd:Q6581097 .\n?x0 wdt:P26 wd:Q1560129 .\nFILTER ( ?x0 != wd:Q1560129 )\n}",
        "questionWithBrackets": "Which male spouse of [Margarete Joswig] was a actor of [Lohengrin] and [Mario Cavaradossi]"
    },
    {
        "questionIdx": 207237,
        "questionPatternModEntities": "Which parent and sibling of M0 did M1 marry",
        "questionTemplate": "Which [ROLE_SIMPLE] and [ROLE_SIMPLE] of [entity] did [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M0 .\n?x0 P2 M1 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x0 != M1 )\n}",
        "recursionDepth": 21,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q493 .\n?x0 wdt:P3373 wd:Q493 .\n?x0 wdt:P26 wd:Q17148576 .\nFILTER ( ?x0 != wd:Q493 ) .\nFILTER ( ?x0 != wd:Q17148576 )\n}",
        "questionWithBrackets": "Which parent and sibling of [Arthur Rimbaud] did [Vitalie Rimbaud] marry"
    },
    {
        "questionIdx": 207263,
        "questionPatternModEntities": "Which parent of M1 did M0 influence",
        "questionTemplate": "Which [ROLE_SIMPLE] of [entity] did [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1\n}",
        "recursionDepth": 16,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P737 wd:Q868 .\n?x0 wdt:P40|wdt:P355 wd:Q1152362\n}",
        "questionWithBrackets": "Which parent of [Lev Lvovich Tolstoy] did [Aristotle] influence"
    },
    {
        "questionIdx": 207267,
        "questionPatternModEntities": "Which parent of M2 did M0 and M1 found",
        "questionTemplate": "Which [ROLE_SIMPLE] of [entity] did [entity] and [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P1 M2\n}",
        "recursionDepth": 20,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P112 wd:Q43 .\n?x0 wdt:P112 wd:Q408 .\n?x0 wdt:P40|wdt:P355 wd:Q7801\n}",
        "questionWithBrackets": "Which parent of [International Court of Justice] did [Turkey] and [Australia] found"
    },
    {
        "questionIdx": 207310,
        "questionPatternModEntities": "Which parent of M3 's German spouse was influenced by M0 and M1",
        "questionTemplate": "Which [ROLE_SIMPLE] of [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] was [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P1 ?x1 .\n?x1 P2 M2 .\n?x1 P3 M3 .\nFILTER ( ?x1 != M3 )\n}",
        "recursionDepth": 31,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P737 wd:Q859 .\n?x0 wdt:P737 wd:Q75889 .\n?x0 wdt:P40|wdt:P355 ?x1 .\n?x1 wdt:P27 wd:Q183 .\n?x1 wdt:P26 wd:Q66936 .\nFILTER ( ?x1 != wd:Q66936 )\n}",
        "questionWithBrackets": "Which parent of [Georg Waitz] 's German spouse was influenced by [Friedrich H\u00f6lderlin] and [Plato]"
    },
    {
        "questionIdx": 207327,
        "questionPatternModEntities": "Which parent of M4 's spouse was employed by M0 , employed by M1 and M2 , and employed by M3",
        "questionTemplate": "Which [ROLE_SIMPLE] of [entity] 's [ROLE_SIMPLE] was [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] and [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P0 M3 .\n?x0 P1 ?x1 .\n?x1 P2 M4 .\nFILTER ( ?x1 != M4 )\n}",
        "recursionDepth": 45,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P40|wdt:P355 ?x1 .\n?x0 wdt:P108 wd:Q214341 .\n?x0 wdt:P108 wd:Q156598 .\n?x0 wdt:P108 wd:Q4354699 .\n?x0 wdt:P108 wd:Q221653 .\n?x1 wdt:P26 wd:Q38636 .\nFILTER ( ?x1 != wd:Q38636 )\n}",
        "questionWithBrackets": "Which parent of [Karen Keskulla Uhlenbeck] 's spouse was employed by [Radiation Laboratory] , employed by [University of Amsterdam] and [Utrecht University] , and employed by [Leiden University]"
    },
    {
        "questionIdx": 207354,
        "questionPatternModEntities": "Which parent of M2 was employed by M0 and M1",
        "questionTemplate": "Which [ROLE_SIMPLE] of [entity] was [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P1 M2\n}",
        "recursionDepth": 21,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q102649059 .\n?x0 wdt:P108 wd:Q95 .\n?x0 wdt:P108 wd:Q20800404\n}",
        "questionWithBrackets": "Which parent of [Kavya Pichai] was employed by [Google] and [Alphabet Inc.]"
    },
    {
        "questionIdx": 207393,
        "questionPatternModEntities": "Which parent of M2 was founded by M0 and M1",
        "questionTemplate": "Which [ROLE_SIMPLE] of [entity] was [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P1 M2\n}",
        "recursionDepth": 21,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P112 wd:Q31 .\n?x0 wdt:P112 wd:Q29999 .\n?x0 wdt:P40|wdt:P355 wd:Q480222\n}",
        "questionWithBrackets": "Which parent of [Publications Office of the European Union] was founded by [Kingdom of the Netherlands] and [Belgium]"
    },
    {
        "questionIdx": 207425,
        "questionPatternModEntities": "Which parent of M2 was a Chinese British spouse of M3",
        "questionTemplate": "Which [ROLE_SIMPLE] of [entity] was a [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P1 M2 .\n?x0 P2 M3 .\nFILTER ( ?x0 != M3 )\n}",
        "recursionDepth": 29,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q75603090 .\n?x0 wdt:P27 wd:Q145 .\n?x0 wdt:P27 wd:Q148 .\n?x0 wdt:P26 wd:Q75603088 .\nFILTER ( ?x0 != wd:Q75603088 )\n}",
        "questionWithBrackets": "Which parent of [Lin Siao Fou-Menuhin] was a Chinese British spouse of [Zamira Menuhin]"
    },
    {
        "questionIdx": 207436,
        "questionPatternModEntities": "Which parent of M0 was founded by M1 's employee",
        "questionTemplate": "Which [ROLE_SIMPLE] of [entity] was [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 M0 .\n?x1 P2 M1\n}",
        "recursionDepth": 21,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P112 ?x1 .\n?x0 wdt:P40|wdt:P355 wd:Q10397996 .\n?x1 wdt:P108 wd:Q185246\n}",
        "questionWithBrackets": "Which parent of [Abisko research station] was founded by [Uppsala University] 's employee"
    },
    {
        "questionIdx": 207460,
        "questionPatternModEntities": "Which parent of M0 did a employee of M1 found",
        "questionTemplate": "Which [ROLE_SIMPLE] of [entity] did a [ROLE_SIMPLE] of [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 M0 .\n?x1 P2 M1\n}",
        "recursionDepth": 22,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P112 ?x1 .\n?x0 wdt:P40|wdt:P355 wd:Q22980717 .\n?x1 wdt:P108 wd:Q83259\n}",
        "questionWithBrackets": "Which parent of [Alliance Francaise de Toronto] did a employee of [\u00c9cole normale sup\u00e9rieure] found"
    },
    {
        "questionIdx": 207476,
        "questionPatternModEntities": "Which parent of M0 did M1 marry",
        "questionTemplate": "Which [ROLE_SIMPLE] of [entity] did [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M1 )\n}",
        "recursionDepth": 16,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q135687 .\n?x0 wdt:P26 wd:Q91 .\nFILTER ( ?x0 != wd:Q91 )\n}",
        "questionWithBrackets": "Which parent of [Tad Lincoln] did [Abraham Lincoln] marry"
    },
    {
        "questionIdx": 207538,
        "questionPatternModEntities": "Which parent of M4 was founded by M0 , M1 , M2 , and M3",
        "questionTemplate": "Which [ROLE_SIMPLE] of [entity] was [VP_SIMPLE] by [entity] , [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P0 M3 .\n?x0 P1 M4\n}",
        "recursionDepth": 27,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P112 wd:Q20 .\n?x0 wdt:P112 wd:Q30 .\n?x0 wdt:P112 wd:Q16 .\n?x0 wdt:P112 wd:Q31 .\n?x0 wdt:P40|wdt:P355 wd:Q37470\n}",
        "questionWithBrackets": "Which parent of [United Nations Security Council] was founded by [United States of America] , [Canada] , [Norway] , and [Belgium]"
    },
    {
        "questionIdx": 207540,
        "questionPatternModEntities": "Which parent of M3 did M0 found , M1 found , and M2 found",
        "questionTemplate": "Which [ROLE_SIMPLE] of [entity] did [entity] [VP_SIMPLE] , [entity] [VP_SIMPLE] , and [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P1 M3\n}",
        "recursionDepth": 36,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P112 wd:Q16 .\n?x0 wdt:P112 wd:Q739 .\n?x0 wdt:P112 wd:Q20 .\n?x0 wdt:P40|wdt:P355 wd:Q7804\n}",
        "questionWithBrackets": "Which parent of [International Monetary Fund] did [Canada] found , [Norway] found , and [Colombia] found"
    },
    {
        "questionIdx": 207541,
        "questionPatternModEntities": "Which parent of M5 did M0 found , M1 and M2 found , and M3 and M4 found",
        "questionTemplate": "Which [ROLE_SIMPLE] of [entity] did [entity] [VP_SIMPLE] , [entity] and [entity] [VP_SIMPLE] , and [entity] and [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P0 M3 .\n?x0 P0 M4 .\n?x0 P1 M5\n}",
        "recursionDepth": 44,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P112 wd:Q2895 .\n?x0 wdt:P112 wd:Q20 .\n?x0 wdt:P112 wd:Q16 .\n?x0 wdt:P112 wd:Q142 .\n?x0 wdt:P112 wd:Q36 .\n?x0 wdt:P40|wdt:P355 wd:Q7809\n}",
        "questionWithBrackets": "Which parent of [UNESCO] did [Byelorussian Soviet Socialist Republic] found , [Canada] and [Poland] found , and m.0f8l9c and [Norway] found"
    },
    {
        "questionIdx": 207752,
        "questionPatternModEntities": "Which parent , sibling , and spouse of M0 was M1 's sibling",
        "questionTemplate": "Which [ROLE_SIMPLE] , [ROLE_SIMPLE] , and [ROLE_SIMPLE] of [entity] was [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P1 M0 .\n?x0 P2 M0 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x0 != M1 )\n}",
        "recursionDepth": 26,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q443473 .\n?x0 wdt:P3373 wd:Q443473 .\n?x0 wdt:P3373 wd:Q4000086 .\n?x0 wdt:P26 wd:Q443473 .\nFILTER ( ?x0 != wd:Q443473 ) .\nFILTER ( ?x0 != wd:Q443473 ) .\nFILTER ( ?x0 != wd:Q4000086 )\n}",
        "questionWithBrackets": "Which parent , sibling , and spouse of [Henutmire] was [Tua] 's sibling"
    },
    {
        "questionIdx": 207753,
        "questionPatternModEntities": "Which parent , sibling , and spouse of M0 married M1",
        "questionTemplate": "Which [ROLE_SIMPLE] , [ROLE_SIMPLE] , and [ROLE_SIMPLE] of [entity] [VP_SIMPLE] [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M0 .\n?x0 P2 M0 .\n?x0 P2 M1 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x0 != M1 )\n}",
        "recursionDepth": 25,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q443473 .\n?x0 wdt:P3373 wd:Q443473 .\n?x0 wdt:P26 wd:Q443473 .\n?x0 wdt:P26 wd:Q210535 .\nFILTER ( ?x0 != wd:Q443473 ) .\nFILTER ( ?x0 != wd:Q443473 ) .\nFILTER ( ?x0 != wd:Q210535 )\n}",
        "questionWithBrackets": "Which parent , sibling , and spouse of [Henutmire] married [Nefertarilllala]"
    },
    {
        "questionIdx": 208794,
        "questionPatternModEntities": "Which prequel of M0 was M1 's sequel",
        "questionTemplate": "Which [ROLE_SIMPLE] of [entity] was [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1\n}",
        "recursionDepth": 17,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P155 wd:Q131964 .\n?x0 wdt:P156 wd:Q38\n}",
        "questionWithBrackets": "Which prequel of [Italy] was [Austrian Empire] 's sequel"
    },
    {
        "questionIdx": 208797,
        "questionPatternModEntities": "Which prequel of M0 was edited by , produced by , directed by , and written by M1",
        "questionTemplate": "Which [ROLE_SIMPLE] of [entity] was [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P2 M1 .\n?x0 P3 M1 .\n?x0 P4 M1\n}",
        "recursionDepth": 37,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 wd:Q47284 .\n?x0 wdt:P1040 wd:Q47284 .\n?x0 wdt:P162|wdt:P272 wd:Q47284 .\n?x0 wdt:P156 wd:Q128187 .\n?x0 wdt:P58 wd:Q47284\n}",
        "questionWithBrackets": "Which prequel of [Machete Kills] was edited by , produced by , directed by , and written by [Robert Rodriguez]"
    },
    {
        "questionIdx": 208808,
        "questionPatternModEntities": "Which prequel of M0 was directed by M2 and M3 , directed by M4 and M5 , and executive produced by M1",
        "questionTemplate": "Which [ROLE_SIMPLE] of [entity] was [VP_SIMPLE] by [entity] and [entity] , [VP_SIMPLE] by [entity] and [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P2 M2 .\n?x0 P2 M3 .\n?x0 P2 M4 .\n?x0 P2 M5\n}",
        "recursionDepth": 46,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 wd:Q1387617 .\n?x0 wdt:P57 wd:Q2263 .\n?x0 wdt:P57 wd:Q7823572 .\n?x0 wdt:P57 wd:Q1279660 .\n?x0 wdt:P1431 wd:Q8877 .\n?x0 wdt:P156 wd:Q598499\n}",
        "questionWithBrackets": "Which prequel of [The Pacific] was directed by [Phil Alden Robinson] and [Tony To] , directed by [David Nutter] and [Tom Hanks] , and executive produced by [Steven Spielberg]"
    },
    {
        "questionIdx": 208809,
        "questionPatternModEntities": "Which prequel of M0 was directed by M4 , starred M1 and M2 , and was edited by M3",
        "questionTemplate": "Which [ROLE_SIMPLE] of [entity] was [VP_SIMPLE] by [entity] , [VP_SIMPLE] [entity] and [entity] , and was [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\n?x0 P2 M3 .\n?x0 P3 M4\n}",
        "recursionDepth": 44,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 wd:Q207676 .\n?x0 wdt:P1040 wd:Q47284 .\n?x0 wdt:P156 wd:Q1653396 .\n?x0 wdt:P161 wd:Q168847 .\n?x0 wdt:P161 wd:Q2680\n}",
        "questionWithBrackets": "Which prequel of [Sin City: A Dame to Kill For] was directed by [Frank Miller] , starred [Bruce Willis] and [Brittany Murphy] , and was edited by [Robert Rodriguez]"
    },
    {
        "questionIdx": 208812,
        "questionPatternModEntities": "Which prequel of M0 was directed by M4 and M5 , starred M1 , and was edited by M2 and M3",
        "questionTemplate": "Which [ROLE_SIMPLE] of [entity] was [VP_SIMPLE] by [entity] and [entity] , [VP_SIMPLE] [entity] , and was [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P2 M2 .\n?x0 P2 M3 .\n?x0 P3 M4 .\n?x0 P3 M5\n}",
        "recursionDepth": 48,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 wd:Q4679987 .\n?x0 wdt:P57 wd:Q60633865 .\n?x0 wdt:P1040 wd:Q1291210 .\n?x0 wdt:P1040 wd:Q4207234 .\n?x0 wdt:P156 wd:Q17183987 .\n?x0 wdt:P161 wd:Q13560502\n}",
        "questionWithBrackets": "Which prequel of [V/H/S: Viral] was directed by [Adam Wingard] and [Timo Tjahjanto] , starred [Mindy Robinson] , and was edited by [Gareth Evans] and [Eduardo S\u00e1nchez]"
    },
    {
        "questionIdx": 208813,
        "questionPatternModEntities": "Which prequel of M0 was directed by M4 , M5 , and M6 and executive produced by M1 , M2 , and M3",
        "questionTemplate": "Which [ROLE_SIMPLE] of [entity] was [VP_SIMPLE] by [entity] , [entity] , and [entity] and [VP_SIMPLE] by [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\n?x0 P1 M3 .\n?x0 P2 M4 .\n?x0 P2 M5 .\n?x0 P2 M6\n}",
        "recursionDepth": 43,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 wd:Q5231164 .\n?x0 wdt:P57 wd:Q2129942 .\n?x0 wdt:P57 wd:Q11856301 .\n?x0 wdt:P1431 wd:Q432598 .\n?x0 wdt:P1431 wd:Q995026 .\n?x0 wdt:P1431 wd:Q419454 .\n?x0 wdt:P156 wd:Q62573305\n}",
        "questionWithBrackets": "Which prequel of [Star Trek: Picard] was directed by [Douglas Aarniokoski] , [David Barrett] , and [John Stuart Scott] and executive produced by [Alex Kurtzman] , [Akiva Goldsman] , and [Bryan Fuller]"
    },
    {
        "questionIdx": 208814,
        "questionPatternModEntities": "Which prequel of M0 was edited by M1 , directed by M2 , M3 , and M4 , and directed by M5",
        "questionTemplate": "Which [ROLE_SIMPLE] of [entity] was [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , [entity] , and [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P2 M2 .\n?x0 P2 M3 .\n?x0 P2 M4 .\n?x0 P2 M5\n}",
        "recursionDepth": 44,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 wd:Q503966 .\n?x0 wdt:P57 wd:Q89720 .\n?x0 wdt:P57 wd:Q1456605 .\n?x0 wdt:P57 wd:Q100458 .\n?x0 wdt:P1040 wd:Q293078 .\n?x0 wdt:P156 wd:Q753109\n}",
        "questionWithBrackets": "Which prequel of [V\u00f6lkerball] was edited by [Mathilde Bonnefoy] , directed by [Joern Heitmann] , [Rob Cohen] , and [Philipp St\u00f6lzl] , and directed by [Hannes Rossacher]"
    },
    {
        "questionIdx": 208821,
        "questionPatternModEntities": "Which prequel of M0 was executive produced by M1 and M2 , was produced by M4 , and was written by M3",
        "questionTemplate": "Which [ROLE_SIMPLE] of [entity] was [VP_SIMPLE] by [entity] and [entity] , was [VP_SIMPLE] by [entity] , and was [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\n?x0 P2 M3 .\n?x0 P3 M4\n}",
        "recursionDepth": 47,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1431 wd:Q55171 .\n?x0 wdt:P1431 wd:Q399076 .\n?x0 wdt:P162|wdt:P272 wd:Q5849390 .\n?x0 wdt:P156 wd:Q593615 .\n?x0 wdt:P58 wd:Q6962497\n}",
        "questionWithBrackets": "Which prequel of [The Sea Inside] was executive produced by [Agust\u00edn Almod\u00f3var] and [Pedro Almod\u00f3var] , was produced by [Esther Garc\u00eda] , and was written by [Nanci Kincaid]"
    },
    {
        "questionIdx": 208823,
        "questionPatternModEntities": "Which prequel of M0 was executive produced by M1 and written by M2 , M3 , M4 , M5 , and M6",
        "questionTemplate": "Which [ROLE_SIMPLE] of [entity] was [VP_SIMPLE] by [entity] and [VP_SIMPLE] by [entity] , [entity] , [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P2 M2 .\n?x0 P2 M3 .\n?x0 P2 M4 .\n?x0 P2 M5 .\n?x0 P2 M6\n}",
        "recursionDepth": 42,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1431 wd:Q2165499 .\n?x0 wdt:P156 wd:Q202371 .\n?x0 wdt:P58 wd:Q16546380 .\n?x0 wdt:P58 wd:Q28537926 .\n?x0 wdt:P58 wd:Q937267 .\n?x0 wdt:P58 wd:Q2928589 .\n?x0 wdt:P58 wd:Q3218036\n}",
        "questionWithBrackets": "Which prequel of [The Rescuers Down Under] was executive produced by [Ron W. Miller] and written by [Burny Mattinson] , [Frank Thomas] , [Fred Lucky] , [Larry Clemmons] , and [David Michener]"
    },
    {
        "questionIdx": 208826,
        "questionPatternModEntities": "Which prequel of M0 was written by M1 , edited by M2 , edited by M3 , and directed by M4 and M5",
        "questionTemplate": "Which [ROLE_SIMPLE] of [entity] was [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P2 M2 .\n?x0 P2 M3 .\n?x0 P3 M4 .\n?x0 P3 M5\n}",
        "recursionDepth": 50,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 wd:Q60633865 .\n?x0 wdt:P57 wd:Q4207234 .\n?x0 wdt:P1040 wd:Q1291210 .\n?x0 wdt:P1040 wd:Q4679987 .\n?x0 wdt:P156 wd:Q17183987 .\n?x0 wdt:P58 wd:Q16198328\n}",
        "questionWithBrackets": "Which prequel of [V/H/S: Viral] was written by [Jason Eisener] , edited by [Adam Wingard] , edited by [Eduardo S\u00e1nchez] , and directed by [Gareth Evans] and [Timo Tjahjanto]"
    },
    {
        "questionIdx": 208827,
        "questionPatternModEntities": "Which prequel of M0 was written by M3 and M4 , starred M1 , and starred M2",
        "questionTemplate": "Which [ROLE_SIMPLE] of [entity] was [VP_SIMPLE] by [entity] and [entity] , [VP_SIMPLE] [entity] , and [VP_SIMPLE] [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\n?x0 P2 M3 .\n?x0 P2 M4\n}",
        "recursionDepth": 42,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P156 wd:Q4383669 .\n?x0 wdt:P161 wd:Q130447 .\n?x0 wdt:P161 wd:Q594106 .\n?x0 wdt:P58 wd:Q4500 .\n?x0 wdt:P58 wd:Q223992\n}",
        "questionWithBrackets": "Which prequel of [Pulse 2: Afterlife] was written by [Wes Craven] and [Vince Gilligan] , starred [Ian Somerhalder] , and starred [Jonathan Tucker]"
    },
    {
        "questionIdx": 208833,
        "questionPatternModEntities": "Which prequel of M0 did M1 write and executive produce",
        "questionTemplate": "Which [ROLE_SIMPLE] of [entity] did [entity] [VP_SIMPLE] and [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P2 M1\n}",
        "recursionDepth": 25,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1431 wd:Q2071 .\n?x0 wdt:P156 wd:Q1140578 .\n?x0 wdt:P58 wd:Q2071\n}",
        "questionWithBrackets": "Which prequel of [Twin Peaks: Fire Walk with Me] did [David Lynch] write and executive produce"
    },
    {
        "questionIdx": 208834,
        "questionPatternModEntities": "Which prequel of M0 was directed , executive produced , and written by M1 , M2 , and M3",
        "questionTemplate": "Which [ROLE_SIMPLE] of [entity] was [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\n?x0 P1 M3 .\n?x0 P2 M1 .\n?x0 P2 M2 .\n?x0 P2 M3 .\n?x0 P3 M1 .\n?x0 P3 M2 .\n?x0 P3 M3\n}",
        "recursionDepth": 37,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 wd:Q363666 .\n?x0 wdt:P57 wd:Q448604 .\n?x0 wdt:P57 wd:Q452794 .\n?x0 wdt:P1431 wd:Q363666 .\n?x0 wdt:P1431 wd:Q448604 .\n?x0 wdt:P1431 wd:Q452794 .\n?x0 wdt:P156 wd:Q502303 .\n?x0 wdt:P58 wd:Q363666 .\n?x0 wdt:P58 wd:Q448604 .\n?x0 wdt:P58 wd:Q452794\n}",
        "questionWithBrackets": "Which prequel of [Airplane II: The Sequel] was directed , executive produced , and written by [Jim Abrahams] , [David Zucker] , and [Jerry Zucker]"
    },
    {
        "questionIdx": 208836,
        "questionPatternModEntities": "Which prequel of M0 was executive produced by , was written by , starred , and was directed by M1 and M2",
        "questionTemplate": "Which [ROLE_SIMPLE] of [entity] was [VP_SIMPLE] by , was [VP_SIMPLE] by , [VP_SIMPLE] , and was [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\n?x0 P2 M1 .\n?x0 P2 M2 .\n?x0 P3 M1 .\n?x0 P3 M2 .\n?x0 P4 M1 .\n?x0 P4 M2\n}",
        "recursionDepth": 47,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 wd:Q2071 .\n?x0 wdt:P57 wd:Q778585 .\n?x0 wdt:P1431 wd:Q2071 .\n?x0 wdt:P1431 wd:Q778585 .\n?x0 wdt:P156 wd:Q1140578 .\n?x0 wdt:P161 wd:Q2071 .\n?x0 wdt:P161 wd:Q778585 .\n?x0 wdt:P58 wd:Q2071 .\n?x0 wdt:P58 wd:Q778585\n}",
        "questionWithBrackets": "Which prequel of [Twin Peaks: Fire Walk with Me] was executive produced by , was written by , starred , and was directed by [Mark Frost] and [David Lynch]"
    },
    {
        "questionIdx": 208873,
        "questionPatternModEntities": "Which prequel of M0 was produced by , written by , and executive produced by M1",
        "questionTemplate": "Which [ROLE_SIMPLE] of [entity] was [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P2 M1 .\n?x0 P3 M1\n}",
        "recursionDepth": 32,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1431 wd:Q36970 .\n?x0 wdt:P162|wdt:P272 wd:Q36970 .\n?x0 wdt:P156 wd:Q19961444 .\n?x0 wdt:P58 wd:Q36970\n}",
        "questionWithBrackets": "Which prequel of [Kung Fu Yoga] was produced by , written by , and executive produced by [Jackie Chan]"
    },
    {
        "questionIdx": 208893,
        "questionPatternModEntities": "Which prequel of M0 was directed by M2 's parent and edited by M1",
        "questionTemplate": "Which [ROLE_SIMPLE] of [entity] was [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P2 ?x1 .\n?x1 P3 M2\n}",
        "recursionDepth": 32,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 ?x1 .\n?x0 wdt:P1040 wd:Q47284 .\n?x0 wdt:P156 wd:Q128187 .\n?x1 wdt:P40|wdt:P355 wd:Q28032516\n}",
        "questionWithBrackets": "Which prequel of [Machete Kills] was directed by [Racer Rodriguez] 's parent and edited by [Robert Rodriguez]"
    },
    {
        "questionIdx": 208899,
        "questionPatternModEntities": "Which prequel of M0 did M1 and M2 direct",
        "questionTemplate": "Which [ROLE_SIMPLE] of [entity] did [entity] and [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P1 M2\n}",
        "recursionDepth": 20,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 wd:Q2071 .\n?x0 wdt:P57 wd:Q778585 .\n?x0 wdt:P156 wd:Q1140578\n}",
        "questionWithBrackets": "Which prequel of [Twin Peaks: Fire Walk with Me] did [Mark Frost] and [David Lynch] direct"
    },
    {
        "questionIdx": 208908,
        "questionPatternModEntities": "Which prequel of M0 was distributed by M1 and M2 , was distributed by M3 , and was distributed by M4",
        "questionTemplate": "Which [ROLE_SIMPLE] of [entity] was [VP_SIMPLE] by [entity] and [entity] , was [VP_SIMPLE] by [entity] , and was [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\n?x0 P1 M3 .\n?x0 P1 M4\n}",
        "recursionDepth": 46,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P750 wd:Q866 .\n?x0 wdt:P750 wd:Q4740860 .\n?x0 wdt:P750 wd:Q20056642 .\n?x0 wdt:P750 wd:Q602243 .\n?x0 wdt:P156 wd:Q65042073\n}",
        "questionWithBrackets": "Which prequel of [In Vain] was distributed by [Apple Music] and [Deezer] , was distributed by [YouTube] , and was distributed by [Amazon Music]"
    },
    {
        "questionIdx": 208915,
        "questionPatternModEntities": "Which prequel of M0 was executive produced and produced by M1 's spouse",
        "questionTemplate": "Which [ROLE_SIMPLE] of [entity] was [VP_SIMPLE] and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x1 P3 M1 .\nFILTER ( ?x1 != M1 )\n}",
        "recursionDepth": 29,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1431 ?x1 .\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x0 wdt:P156 wd:Q127632 .\n?x1 wdt:P26 wd:Q189895 .\nFILTER ( ?x1 != wd:Q189895 )\n}",
        "questionWithBrackets": "Which prequel of [The Son of Kong] was executive produced and produced by [Jennifer Jones] 's spouse"
    },
    {
        "questionIdx": 208937,
        "questionPatternModEntities": "Which prequel of M0 was produced by M1 's employee",
        "questionTemplate": "Which [ROLE_SIMPLE] of [entity] was [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 ?x1 .\n?x1 P2 M1\n}",
        "recursionDepth": 21,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x0 wdt:P156 wd:Q913700 .\n?x1 wdt:P108 wd:Q21578\n}",
        "questionWithBrackets": "Which prequel of [Bridge over Troubled Water] was produced by [Princeton University] 's employee"
    },
    {
        "questionIdx": 208964,
        "questionPatternModEntities": "Which prequel of M0 was edited by , starred , was produced by , was directed by , and was written by M1",
        "questionTemplate": "Which [ROLE_SIMPLE] of [entity] was [VP_SIMPLE] by , [VP_SIMPLE] , was [VP_SIMPLE] by , was [VP_SIMPLE] by , and was [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P2 M1 .\n?x0 P3 M1 .\n?x0 P4 M1 .\n?x0 P5 M1\n}",
        "recursionDepth": 50,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 wd:Q207960 .\n?x0 wdt:P1040 wd:Q207960 .\n?x0 wdt:P162|wdt:P272 wd:Q207960 .\n?x0 wdt:P156 wd:Q1991804 .\n?x0 wdt:P161 wd:Q207960 .\n?x0 wdt:P58 wd:Q207960\n}",
        "questionWithBrackets": "Which prequel of [Gertie on Tour] was edited by , starred , was produced by , was directed by , and was written by [Winsor McCay]"
    },
    {
        "questionIdx": 208965,
        "questionPatternModEntities": "Which prequel of M0 was edited by , was directed by , was executive produced by , and starred M1",
        "questionTemplate": "Which [ROLE_SIMPLE] of [entity] was [VP_SIMPLE] by , was [VP_SIMPLE] by , was [VP_SIMPLE] by , and [VP_SIMPLE] [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P2 M1 .\n?x0 P3 M1 .\n?x0 P4 M1\n}",
        "recursionDepth": 43,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 wd:Q4679987 .\n?x0 wdt:P1040 wd:Q4679987 .\n?x0 wdt:P1431 wd:Q4679987 .\n?x0 wdt:P156 wd:Q17183987 .\n?x0 wdt:P161 wd:Q4679987\n}",
        "questionWithBrackets": "Which prequel of [V/H/S: Viral] was edited by , was directed by , was executive produced by , and starred [Adam Wingard]"
    },
    {
        "questionIdx": 208981,
        "questionPatternModEntities": "Which prequel of M0 was written by , starred , was edited by , was directed by , and was produced by M1",
        "questionTemplate": "Which [ROLE_SIMPLE] of [entity] was [VP_SIMPLE] by , [VP_SIMPLE] , was [VP_SIMPLE] by , was [VP_SIMPLE] by , and was [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P2 M1 .\n?x0 P3 M1 .\n?x0 P4 M1 .\n?x0 P5 M1\n}",
        "recursionDepth": 50,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 wd:Q207960 .\n?x0 wdt:P1040 wd:Q207960 .\n?x0 wdt:P162|wdt:P272 wd:Q207960 .\n?x0 wdt:P156 wd:Q1991804 .\n?x0 wdt:P161 wd:Q207960 .\n?x0 wdt:P58 wd:Q207960\n}",
        "questionWithBrackets": "Which prequel of [Gertie on Tour] was written by , starred , was edited by , was directed by , and was produced by [Winsor McCay]"
    },
    {
        "questionIdx": 208992,
        "questionPatternModEntities": "Which prequel of M0 did M1 , M2 , M3 , and M4 edit and direct",
        "questionTemplate": "Which [ROLE_SIMPLE] of [entity] did [entity] , [entity] , [entity] , and [entity] [VP_SIMPLE] and [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\n?x0 P1 M3 .\n?x0 P1 M4 .\n?x0 P2 M1 .\n?x0 P2 M2 .\n?x0 P2 M3 .\n?x0 P2 M4\n}",
        "recursionDepth": 34,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 wd:Q1291210 .\n?x0 wdt:P57 wd:Q4679987 .\n?x0 wdt:P57 wd:Q4207234 .\n?x0 wdt:P57 wd:Q16198328 .\n?x0 wdt:P1040 wd:Q1291210 .\n?x0 wdt:P1040 wd:Q4679987 .\n?x0 wdt:P1040 wd:Q4207234 .\n?x0 wdt:P1040 wd:Q16198328 .\n?x0 wdt:P156 wd:Q17183987\n}",
        "questionWithBrackets": "Which prequel of [V/H/S: Viral] did [Eduardo S\u00e1nchez] , [Gareth Evans] , [Adam Wingard] , and [Jason Eisener] edit and direct"
    },
    {
        "questionIdx": 208995,
        "questionPatternModEntities": "Which prequel of M0 was directed by and edited by M1 , M2 , M3 , and M4",
        "questionTemplate": "Which [ROLE_SIMPLE] of [entity] was [VP_SIMPLE] by and [VP_SIMPLE] by [entity] , [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\n?x0 P1 M3 .\n?x0 P1 M4 .\n?x0 P2 M1 .\n?x0 P2 M2 .\n?x0 P2 M3 .\n?x0 P2 M4\n}",
        "recursionDepth": 35,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 wd:Q1291210 .\n?x0 wdt:P57 wd:Q4679987 .\n?x0 wdt:P57 wd:Q4207234 .\n?x0 wdt:P57 wd:Q16198328 .\n?x0 wdt:P1040 wd:Q1291210 .\n?x0 wdt:P1040 wd:Q4679987 .\n?x0 wdt:P1040 wd:Q4207234 .\n?x0 wdt:P1040 wd:Q16198328 .\n?x0 wdt:P156 wd:Q17183987\n}",
        "questionWithBrackets": "Which prequel of [V/H/S: Viral] was directed by and edited by [Jason Eisener] , [Adam Wingard] , [Eduardo S\u00e1nchez] , and [Gareth Evans]"
    },
    {
        "questionIdx": 209000,
        "questionPatternModEntities": "Which prequel of M0 was edited by , was written by , and was directed by M1 , M2 , M3 , and M4",
        "questionTemplate": "Which [ROLE_SIMPLE] of [entity] was [VP_SIMPLE] by , was [VP_SIMPLE] by , and was [VP_SIMPLE] by [entity] , [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\n?x0 P1 M3 .\n?x0 P1 M4 .\n?x0 P2 M1 .\n?x0 P2 M2 .\n?x0 P2 M3 .\n?x0 P2 M4 .\n?x0 P3 M1 .\n?x0 P3 M2 .\n?x0 P3 M3 .\n?x0 P3 M4\n}",
        "recursionDepth": 46,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 wd:Q4022902 .\n?x0 wdt:P57 wd:Q5658534 .\n?x0 wdt:P57 wd:Q4023328 .\n?x0 wdt:P57 wd:Q5836844 .\n?x0 wdt:P1040 wd:Q4022902 .\n?x0 wdt:P1040 wd:Q5658534 .\n?x0 wdt:P1040 wd:Q4023328 .\n?x0 wdt:P1040 wd:Q5836844 .\n?x0 wdt:P156 wd:Q18207699 .\n?x0 wdt:P58 wd:Q4022902 .\n?x0 wdt:P58 wd:Q5658534 .\n?x0 wdt:P58 wd:Q4023328 .\n?x0 wdt:P58 wd:Q5836844\n}",
        "questionWithBrackets": "Which prequel of [ABCs of Death 2] was edited by , was written by , and was directed by [Ernesto D\u00edaz Espinoza] , [Adri\u00e1n Garc\u00eda Bogliano] , [Yoshihiro Nishimura] , and [Y\u016bdai Yamaguchi]"
    },
    {
        "questionIdx": 209001,
        "questionPatternModEntities": "Which prequel of M0 was edited , directed , and written by M1 , M2 , and M3",
        "questionTemplate": "Which [ROLE_SIMPLE] of [entity] was [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\n?x0 P1 M3 .\n?x0 P2 M1 .\n?x0 P2 M2 .\n?x0 P2 M3 .\n?x0 P3 M1 .\n?x0 P3 M2 .\n?x0 P3 M3\n}",
        "recursionDepth": 37,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 wd:Q1291210 .\n?x0 wdt:P57 wd:Q4207234 .\n?x0 wdt:P57 wd:Q16198328 .\n?x0 wdt:P1040 wd:Q1291210 .\n?x0 wdt:P1040 wd:Q4207234 .\n?x0 wdt:P1040 wd:Q16198328 .\n?x0 wdt:P156 wd:Q17183987 .\n?x0 wdt:P58 wd:Q1291210 .\n?x0 wdt:P58 wd:Q4207234 .\n?x0 wdt:P58 wd:Q16198328\n}",
        "questionWithBrackets": "Which prequel of [V/H/S: Viral] was edited , directed , and written by [Eduardo S\u00e1nchez] , [Gareth Evans] , and [Jason Eisener]"
    },
    {
        "questionIdx": 209003,
        "questionPatternModEntities": "Which prequel of M0 was written by and edited by M1 , M2 , M3 , and M4",
        "questionTemplate": "Which [ROLE_SIMPLE] of [entity] was [VP_SIMPLE] by and [VP_SIMPLE] by [entity] , [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\n?x0 P1 M3 .\n?x0 P1 M4 .\n?x0 P2 M1 .\n?x0 P2 M2 .\n?x0 P2 M3 .\n?x0 P2 M4\n}",
        "recursionDepth": 35,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1040 wd:Q5658534 .\n?x0 wdt:P1040 wd:Q4022902 .\n?x0 wdt:P1040 wd:Q4023328 .\n?x0 wdt:P1040 wd:Q5836844 .\n?x0 wdt:P156 wd:Q18207699 .\n?x0 wdt:P58 wd:Q5658534 .\n?x0 wdt:P58 wd:Q4022902 .\n?x0 wdt:P58 wd:Q4023328 .\n?x0 wdt:P58 wd:Q5836844\n}",
        "questionWithBrackets": "Which prequel of [ABCs of Death 2] was written by and edited by [Yoshihiro Nishimura] , [Ernesto D\u00edaz Espinoza] , [Y\u016bdai Yamaguchi] , and [Adri\u00e1n Garc\u00eda Bogliano]"
    },
    {
        "questionIdx": 209004,
        "questionPatternModEntities": "Which prequel of M0 was written by , directed by , and edited by M1 , M2 , and M3",
        "questionTemplate": "Which [ROLE_SIMPLE] of [entity] was [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\n?x0 P1 M3 .\n?x0 P2 M1 .\n?x0 P2 M2 .\n?x0 P2 M3 .\n?x0 P3 M1 .\n?x0 P3 M2 .\n?x0 P3 M3\n}",
        "recursionDepth": 39,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 wd:Q1291210 .\n?x0 wdt:P57 wd:Q4207234 .\n?x0 wdt:P57 wd:Q16198328 .\n?x0 wdt:P1040 wd:Q1291210 .\n?x0 wdt:P1040 wd:Q4207234 .\n?x0 wdt:P1040 wd:Q16198328 .\n?x0 wdt:P156 wd:Q17183987 .\n?x0 wdt:P58 wd:Q1291210 .\n?x0 wdt:P58 wd:Q4207234 .\n?x0 wdt:P58 wd:Q16198328\n}",
        "questionWithBrackets": "Which prequel of [V/H/S: Viral] was written by , directed by , and edited by [Eduardo S\u00e1nchez] , [Jason Eisener] , and [Gareth Evans]"
    },
    {
        "questionIdx": 209005,
        "questionPatternModEntities": "Which prequel of M0 was written by , was edited by , and was directed by M1 , M2 , and M3",
        "questionTemplate": "Which [ROLE_SIMPLE] of [entity] was [VP_SIMPLE] by , was [VP_SIMPLE] by , and was [VP_SIMPLE] by [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\n?x0 P1 M3 .\n?x0 P2 M1 .\n?x0 P2 M2 .\n?x0 P2 M3 .\n?x0 P3 M1 .\n?x0 P3 M2 .\n?x0 P3 M3\n}",
        "recursionDepth": 43,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 wd:Q1291210 .\n?x0 wdt:P57 wd:Q4207234 .\n?x0 wdt:P57 wd:Q16198328 .\n?x0 wdt:P1040 wd:Q1291210 .\n?x0 wdt:P1040 wd:Q4207234 .\n?x0 wdt:P1040 wd:Q16198328 .\n?x0 wdt:P156 wd:Q17183987 .\n?x0 wdt:P58 wd:Q1291210 .\n?x0 wdt:P58 wd:Q4207234 .\n?x0 wdt:P58 wd:Q16198328\n}",
        "questionWithBrackets": "Which prequel of [V/H/S: Viral] was written by , was edited by , and was directed by [Eduardo S\u00e1nchez] , [Gareth Evans] , and [Jason Eisener]"
    },
    {
        "questionIdx": 209009,
        "questionPatternModEntities": "Which prequel of M0 did M1 , M2 , and M3 executive produce",
        "questionTemplate": "Which [ROLE_SIMPLE] of [entity] did [entity] , [entity] , and [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\n?x0 P1 M3\n}",
        "recursionDepth": 24,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1431 wd:Q8877 .\n?x0 wdt:P1431 wd:Q1385337 .\n?x0 wdt:P1431 wd:Q190373 .\n?x0 wdt:P156 wd:Q939084\n}",
        "questionWithBrackets": "Which prequel of [The Flintstones in Viva Rock Vegas] did [Joseph Barbera] , [Gerald R. Molen] , and [Steven Spielberg] executive produce"
    },
    {
        "questionIdx": 209012,
        "questionPatternModEntities": "Which prequel of M0 did M1 direct",
        "questionTemplate": "Which [ROLE_SIMPLE] of [entity] did [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1\n}",
        "recursionDepth": 16,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 wd:Q2071 .\n?x0 wdt:P156 wd:Q1140578\n}",
        "questionWithBrackets": "Which prequel of [Twin Peaks: Fire Walk with Me] did [David Lynch] direct"
    },
    {
        "questionIdx": 209014,
        "questionPatternModEntities": "Which prequel of M0 was produced by , was executive produced by , starred , and was written by M1",
        "questionTemplate": "Which [ROLE_SIMPLE] of [entity] was [VP_SIMPLE] by , was [VP_SIMPLE] by , [VP_SIMPLE] , and was [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P2 M1 .\n?x0 P3 M1 .\n?x0 P4 M1\n}",
        "recursionDepth": 43,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1431 wd:Q36970 .\n?x0 wdt:P162|wdt:P272 wd:Q36970 .\n?x0 wdt:P156 wd:Q19961444 .\n?x0 wdt:P161 wd:Q36970 .\n?x0 wdt:P58 wd:Q36970\n}",
        "questionWithBrackets": "Which prequel of [Kung Fu Yoga] was produced by , was executive produced by , starred , and was written by [Jackie Chan]"
    },
    {
        "questionIdx": 209017,
        "questionPatternModEntities": "Which prequel of M0 was produced by M4 , was executive produced by M3 , and starred M1 and M2",
        "questionTemplate": "Which [ROLE_SIMPLE] of [entity] was [VP_SIMPLE] by [entity] , was [VP_SIMPLE] by [entity] , and [VP_SIMPLE] [entity] and [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\n?x0 P2 M3 .\n?x0 P3 M4\n}",
        "recursionDepth": 45,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1431 wd:Q60100 .\n?x0 wdt:P162|wdt:P272 wd:Q119849 .\n?x0 wdt:P156 wd:Q19614711 .\n?x0 wdt:P161 wd:Q7490224 .\n?x0 wdt:P161 wd:Q106706\n}",
        "questionWithBrackets": "Which prequel of [Independence Day: Resurgence] was produced by [Dean Devlin] , was executive produced by [Roland Emmerich] , and starred [Sharon Tay] and [Jeff Goldblum]"
    },
    {
        "questionIdx": 209054,
        "questionPatternModEntities": "Which prequel of M0 was written and executive produced by M1",
        "questionTemplate": "Which [ROLE_SIMPLE] of [entity] was [VP_SIMPLE] and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P2 M1\n}",
        "recursionDepth": 25,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1431 wd:Q2071 .\n?x0 wdt:P156 wd:Q1140578 .\n?x0 wdt:P58 wd:Q2071\n}",
        "questionWithBrackets": "Which prequel of [Twin Peaks: Fire Walk with Me] was written and executive produced by [David Lynch]"
    },
    {
        "questionIdx": 209055,
        "questionPatternModEntities": "Which prequel of M0 starred , was produced by , was directed by , and was written by M1",
        "questionTemplate": "Which [ROLE_SIMPLE] of [entity] [VP_SIMPLE] , was [VP_SIMPLE] by , was [VP_SIMPLE] by , and was [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P2 M1 .\n?x0 P3 M1 .\n?x0 P4 M1\n}",
        "recursionDepth": 42,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 wd:Q2071 .\n?x0 wdt:P162|wdt:P272 wd:Q2071 .\n?x0 wdt:P156 wd:Q1140578 .\n?x0 wdt:P161 wd:Q2071 .\n?x0 wdt:P58 wd:Q2071\n}",
        "questionWithBrackets": "Which prequel of [Twin Peaks: Fire Walk with Me] starred , was produced by , was directed by , and was written by [David Lynch]"
    },
    {
        "questionIdx": 209059,
        "questionPatternModEntities": "Which prequel of M1 's prequel was written by and directed by M0",
        "questionTemplate": "Which [ROLE_SIMPLE] of [entity] 's [ROLE_SIMPLE] was [VP_SIMPLE] by and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 M0 .\n?x0 P2 M0 .\n?x1 P0 M1\n}",
        "recursionDepth": 29,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 wd:Q3772 .\n?x0 wdt:P156 ?x1 .\n?x0 wdt:P58 wd:Q3772 .\n?x1 wdt:P156 wd:Q50380703\n}",
        "questionWithBrackets": "Which prequel of [Bodies in Motion] 's prequel was written by and directed by [Quentin Tarantino]"
    },
    {
        "questionIdx": 209068,
        "questionPatternModEntities": "Which prequel of M0 was produced by , directed by , edited by , and written by M1",
        "questionTemplate": "Which [ROLE_SIMPLE] of [entity] was [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P2 M1 .\n?x0 P3 M1 .\n?x0 P4 M1\n}",
        "recursionDepth": 37,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 wd:Q47284 .\n?x0 wdt:P1040 wd:Q47284 .\n?x0 wdt:P162|wdt:P272 wd:Q47284 .\n?x0 wdt:P156 wd:Q128187 .\n?x0 wdt:P58 wd:Q47284\n}",
        "questionWithBrackets": "Which prequel of [Machete Kills] was produced by , directed by , edited by , and written by [Robert Rodriguez]"
    },
    {
        "questionIdx": 209077,
        "questionPatternModEntities": "Which prequel of M0 did M1 , M2 , M3 , and M4 distribute",
        "questionTemplate": "Which [ROLE_SIMPLE] of [entity] did [entity] , [entity] , [entity] , and [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\n?x0 P1 M3 .\n?x0 P1 M4\n}",
        "recursionDepth": 26,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P750 wd:Q866 .\n?x0 wdt:P750 wd:Q689141 .\n?x0 wdt:P750 wd:Q4740860 .\n?x0 wdt:P750 wd:Q602243 .\n?x0 wdt:P156 wd:Q65042073\n}",
        "questionWithBrackets": "Which prequel of [In Vain] did [Deezer] , [Spotify] , [YouTube] , and [Amazon Music] distribute"
    },
    {
        "questionIdx": 209079,
        "questionPatternModEntities": "Which prequel of M0 was executive produced by and written by M1",
        "questionTemplate": "Which [ROLE_SIMPLE] of [entity] was [VP_SIMPLE] by and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P2 M1\n}",
        "recursionDepth": 26,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1431 wd:Q2071 .\n?x0 wdt:P156 wd:Q1140578 .\n?x0 wdt:P58 wd:Q2071\n}",
        "questionWithBrackets": "Which prequel of [Twin Peaks: Fire Walk with Me] was executive produced by and written by [David Lynch]"
    },
    {
        "questionIdx": 209085,
        "questionPatternModEntities": "Which prequel of M0 did M1 executive produce and write",
        "questionTemplate": "Which [ROLE_SIMPLE] of [entity] did [entity] [VP_SIMPLE] and [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P2 M1\n}",
        "recursionDepth": 25,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1431 wd:Q2071 .\n?x0 wdt:P156 wd:Q1140578 .\n?x0 wdt:P58 wd:Q2071\n}",
        "questionWithBrackets": "Which prequel of [Twin Peaks: Fire Walk with Me] did [David Lynch] executive produce and write"
    },
    {
        "questionIdx": 209091,
        "questionPatternModEntities": "Which prequel of M0 was produced by M1 and directed by M2 's sibling",
        "questionTemplate": "Which [ROLE_SIMPLE] of [entity] was [VP_SIMPLE] by [entity] and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P2 ?x1 .\n?x1 P3 M2 .\nFILTER ( ?x1 != M2 )\n}",
        "recursionDepth": 32,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 ?x1 .\n?x0 wdt:P162|wdt:P272 wd:Q7414 .\n?x0 wdt:P156 wd:Q82094 .\n?x1 wdt:P3373 wd:Q1101612 .\nFILTER ( ?x1 != wd:Q1101612 )\n}",
        "questionWithBrackets": "Which prequel of [Splash] was produced by [The Walt Disney Company] and directed by [Clint Howard] 's sibling"
    },
    {
        "questionIdx": 209096,
        "questionPatternModEntities": "Which prequel of M0 did M1 produce , write , edit , and direct",
        "questionTemplate": "Which [ROLE_SIMPLE] of [entity] did [entity] [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P2 M1 .\n?x0 P3 M1 .\n?x0 P4 M1\n}",
        "recursionDepth": 36,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 wd:Q47284 .\n?x0 wdt:P1040 wd:Q47284 .\n?x0 wdt:P162|wdt:P272 wd:Q47284 .\n?x0 wdt:P156 wd:Q128187 .\n?x0 wdt:P58 wd:Q47284\n}",
        "questionWithBrackets": "Which prequel of [Machete Kills] did [Robert Rodriguez] produce , write , edit , and direct"
    },
    {
        "questionIdx": 209108,
        "questionPatternModEntities": "Which prequel of M0 was executive produced by and produced by M1",
        "questionTemplate": "Which [ROLE_SIMPLE] of [entity] was [VP_SIMPLE] by and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P2 M1\n}",
        "recursionDepth": 27,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1431 wd:Q38222 .\n?x0 wdt:P162|wdt:P272 wd:Q38222 .\n?x0 wdt:P156 wd:Q632672\n}",
        "questionWithBrackets": "Which prequel of [Star Wars: The Clone Wars] was executive produced by and produced by [George Lucas]"
    },
    {
        "questionIdx": 209120,
        "questionPatternModEntities": "Which prequel of M0 did M5 and M6 write , M1 executive produce , and M2 , M3 , and M4 executive produce",
        "questionTemplate": "Which [ROLE_SIMPLE] of [entity] did [entity] and [entity] [VP_SIMPLE] , [entity] [VP_SIMPLE] , and [entity] , [entity] , and [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\n?x0 P1 M3 .\n?x0 P1 M4 .\n?x0 P2 M5 .\n?x0 P2 M6\n}",
        "recursionDepth": 49,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1431 wd:Q2910308 .\n?x0 wdt:P1431 wd:Q5047701 .\n?x0 wdt:P1431 wd:Q2484170 .\n?x0 wdt:P1431 wd:Q6758569 .\n?x0 wdt:P156 wd:Q5385950 .\n?x0 wdt:P58 wd:Q16874411 .\n?x0 wdt:P58 wd:Q2016115\n}",
        "questionWithBrackets": "Which prequel of [Eric's Birthday] did [Terry Turner] and [Mark Brazill] write , [Marcy Carsey] executive produce , and [Caryn Mandabach] , [Bonnie Turner] , and [Tom Werner] executive produce"
    },
    {
        "questionIdx": 209121,
        "questionPatternModEntities": "Which prequel of M0 was directed and written by M1 , M2 , M3 , and M4",
        "questionTemplate": "Which [ROLE_SIMPLE] of [entity] was [VP_SIMPLE] and [VP_SIMPLE] by [entity] , [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\n?x0 P1 M3 .\n?x0 P1 M4 .\n?x0 P2 M1 .\n?x0 P2 M2 .\n?x0 P2 M3 .\n?x0 P2 M4\n}",
        "recursionDepth": 34,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 wd:Q382387 .\n?x0 wdt:P57 wd:Q6756212 .\n?x0 wdt:P57 wd:Q2638166 .\n?x0 wdt:P57 wd:Q4022902 .\n?x0 wdt:P156 wd:Q18207699 .\n?x0 wdt:P58 wd:Q382387 .\n?x0 wdt:P58 wd:Q6756212 .\n?x0 wdt:P58 wd:Q2638166 .\n?x0 wdt:P58 wd:Q4022902\n}",
        "questionWithBrackets": "Which prequel of [ABCs of Death 2] was directed and written by [Marcel Sarmiento] , [Noboru Iguchi] , [Nacho Vigalondo] , and [Yoshihiro Nishimura]"
    },
    {
        "questionIdx": 209122,
        "questionPatternModEntities": "Which prequel of M0 was directed by M6 , executive produced by M1 and M2 , and executive produced by M3 , M4 , and M5",
        "questionTemplate": "Which [ROLE_SIMPLE] of [entity] was [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] and [entity] , and [VP_SIMPLE] by [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\n?x0 P1 M3 .\n?x0 P1 M4 .\n?x0 P1 M5 .\n?x0 P2 M6\n}",
        "recursionDepth": 50,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 wd:Q2158922 .\n?x0 wdt:P1431 wd:Q13909 .\n?x0 wdt:P1431 wd:Q24809152 .\n?x0 wdt:P1431 wd:Q24809160 .\n?x0 wdt:P1431 wd:Q24809172 .\n?x0 wdt:P1431 wd:Q1072843 .\n?x0 wdt:P156 wd:Q54437950\n}",
        "questionWithBrackets": "Which prequel of [Maleficent: Mistress of Evil] was directed by [Robert Stromberg] , executive produced by [Angelina Jolie] and [Palak Patel] , and executive produced by [Don Hahn] , [Matt Smith] , and [Sarah Bradshaw]"
    },
    {
        "questionIdx": 209125,
        "questionPatternModEntities": "Which prequel of M0 was directed by M1 and M2",
        "questionTemplate": "Which [ROLE_SIMPLE] of [entity] was [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P1 M2\n}",
        "recursionDepth": 21,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 wd:Q2071 .\n?x0 wdt:P57 wd:Q778585 .\n?x0 wdt:P156 wd:Q1140578\n}",
        "questionWithBrackets": "Which prequel of [Twin Peaks: Fire Walk with Me] was directed by [Mark Frost] and [David Lynch]"
    },
    {
        "questionIdx": 209128,
        "questionPatternModEntities": "Which prequel of M0 was edited by M3 , M4 , and M5 , starred M1 , and was executive produced by M2",
        "questionTemplate": "Which [ROLE_SIMPLE] of [entity] was [VP_SIMPLE] by [entity] , [entity] , and [entity] , [VP_SIMPLE] [entity] , and was [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P2 M2 .\n?x0 P3 M3 .\n?x0 P3 M4 .\n?x0 P3 M5\n}",
        "recursionDepth": 48,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1040 wd:Q6110147 .\n?x0 wdt:P1040 wd:Q3181589 .\n?x0 wdt:P1040 wd:Q28031320 .\n?x0 wdt:P1431 wd:Q11313 .\n?x0 wdt:P156 wd:Q18486021 .\n?x0 wdt:P161 wd:Q311723\n}",
        "questionWithBrackets": "Which prequel of [Star Wars: Episode VIII \u2013 The Last Jedi] was edited by [Colin Goudie] , [Jabez Olssen] , and [John Gilroy] , starred [Donnie Yen] , and was executive produced by [John Knoll]"
    },
    {
        "questionIdx": 209129,
        "questionPatternModEntities": "Which prequel of M0 was edited by M4 , directed by M5 and M6 , and executive produced by M1 , M2 , and M3",
        "questionTemplate": "Which [ROLE_SIMPLE] of [entity] was [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] and [entity] , and [VP_SIMPLE] by [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\n?x0 P1 M3 .\n?x0 P2 M4 .\n?x0 P3 M5 .\n?x0 P3 M6\n}",
        "recursionDepth": 49,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 wd:Q1152051 .\n?x0 wdt:P57 wd:Q1073959 .\n?x0 wdt:P1040 wd:Q6225246 .\n?x0 wdt:P1431 wd:Q1334295 .\n?x0 wdt:P1431 wd:Q22115076 .\n?x0 wdt:P1431 wd:Q28834853 .\n?x0 wdt:P156 wd:Q678334\n}",
        "questionWithBrackets": "Which prequel of [Beauty and the Beast: The Enchanted Christmas] was edited by [John Carnochan] , directed by [Kirk Wise] and [Gary Trousdale] , and executive produced by [Baker Bloodworth] , [Sarah McArthur] , and [Howard Ashman]"
    },
    {
        "questionIdx": 209135,
        "questionPatternModEntities": "Which prequel of M0 was written by M2 , M3 , M4 , and M5 and was executive produced by M1",
        "questionTemplate": "Which [ROLE_SIMPLE] of [entity] was [VP_SIMPLE] by [entity] , [entity] , [entity] , and [entity] and was [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P2 M2 .\n?x0 P2 M3 .\n?x0 P2 M4 .\n?x0 P2 M5\n}",
        "recursionDepth": 42,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1431 wd:Q8877 .\n?x0 wdt:P156 wd:Q947737 .\n?x0 wdt:P58 wd:Q15433295 .\n?x0 wdt:P58 wd:Q942914 .\n?x0 wdt:P58 wd:Q943506 .\n?x0 wdt:P58 wd:Q720293\n}",
        "questionWithBrackets": "Which prequel of [The Legend of Zorro] was written by [John Eskow] , [Terry Rossio] , [Ted Elliott] , and [David S. Ward] and was executive produced by [Steven Spielberg]"
    },
    {
        "questionIdx": 209137,
        "questionPatternModEntities": "Which prequel of M0 was written by M4 and M5 , executive produced by M1 , M2 , and M3 , and directed by M6",
        "questionTemplate": "Which [ROLE_SIMPLE] of [entity] was [VP_SIMPLE] by [entity] and [entity] , [VP_SIMPLE] by [entity] , [entity] , and [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\n?x0 P1 M3 .\n?x0 P2 M4 .\n?x0 P2 M5 .\n?x0 P3 M6\n}",
        "recursionDepth": 49,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 wd:Q282033 .\n?x0 wdt:P1431 wd:Q8877 .\n?x0 wdt:P1431 wd:Q3827956 .\n?x0 wdt:P1431 wd:Q1971768 .\n?x0 wdt:P156 wd:Q947737 .\n?x0 wdt:P58 wd:Q720293 .\n?x0 wdt:P58 wd:Q942914\n}",
        "questionWithBrackets": "Which prequel of [The Legend of Zorro] was written by [Terry Rossio] and [David S. Ward] , executive produced by [Steven Spielberg] , [Laurie MacDonald] , and [Walter F. Parkes] , and directed by [Martin Campbell]"
    },
    {
        "questionIdx": 209138,
        "questionPatternModEntities": "Which prequel of M0 was written by M3 , edited by M4 , and executive produced by M1 and M2",
        "questionTemplate": "Which [ROLE_SIMPLE] of [entity] was [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\n?x0 P2 M3 .\n?x0 P3 M4\n}",
        "recursionDepth": 42,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1040 wd:Q1173825 .\n?x0 wdt:P1431 wd:Q60100 .\n?x0 wdt:P1431 wd:Q2390812 .\n?x0 wdt:P156 wd:Q19614711 .\n?x0 wdt:P58 wd:Q119849\n}",
        "questionWithBrackets": "Which prequel of [Independence Day: Resurgence] was written by [Dean Devlin] , edited by [David Brenner] , and executive produced by [Roland Emmerich] and [Ute Emmerich]"
    },
    {
        "questionIdx": 209145,
        "questionPatternModEntities": "Which prequel of M0 was produced and distributed by M1",
        "questionTemplate": "Which [ROLE_SIMPLE] of [entity] was [VP_SIMPLE] and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P2 M1\n}",
        "recursionDepth": 24,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P750 wd:Q9531 .\n?x0 wdt:P162|wdt:P272 wd:Q9531 .\n?x0 wdt:P156 wd:Q20667011\n}",
        "questionWithBrackets": "Which prequel of [The Magician's Apprentice] was produced and distributed by [BBC]"
    },
    {
        "questionIdx": 209163,
        "questionPatternModEntities": "Which prequel of M0 did a sibling of M1 produce",
        "questionTemplate": "Which [ROLE_SIMPLE] of [entity] did a [ROLE_SIMPLE] of [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 ?x1 .\n?x1 P2 M1 .\nFILTER ( ?x1 != M1 )\n}",
        "recursionDepth": 22,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P162|wdt:P272 ?x1 .\n?x0 wdt:P156 wd:Q537983 .\n?x1 wdt:P3373 wd:Q4811453 .\nFILTER ( ?x1 != wd:Q4811453 )\n}",
        "questionWithBrackets": "Which prequel of [Harvest] did a sibling of [Astrid Young] produce"
    },
    {
        "questionIdx": 209168,
        "questionPatternModEntities": "Which prequel of M0 did M1 produce and distribute",
        "questionTemplate": "Which [ROLE_SIMPLE] of [entity] did [entity] [VP_SIMPLE] and [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P2 M1\n}",
        "recursionDepth": 24,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P750 wd:Q9531 .\n?x0 wdt:P162|wdt:P272 wd:Q9531 .\n?x0 wdt:P156 wd:Q20667011\n}",
        "questionWithBrackets": "Which prequel of [The Magician's Apprentice] did [BBC] produce and distribute"
    },
    {
        "questionIdx": 209184,
        "questionPatternModEntities": "Which prequel of M4 's prequel did M0 , M1 , and M2 distribute and M3 produce",
        "questionTemplate": "Which [ROLE_SIMPLE] of [entity] 's [ROLE_SIMPLE] did [entity] , [entity] , and [entity] [VP_SIMPLE] and [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\n?x0 P2 M3 .\n?x1 P0 M4\n}",
        "recursionDepth": 38,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P750 wd:Q3884 .\n?x0 wdt:P750 wd:Q9589 .\n?x0 wdt:P750 wd:Q602243 .\n?x0 wdt:P162|wdt:P272 wd:Q98478743 .\n?x0 wdt:P156 ?x1 .\n?x1 wdt:P156 wd:Q99528875\n}",
        "questionWithBrackets": "Which prequel of [Mirrors And Shade] 's prequel did [Amazon] , [Deezer] , and [iTunes] distribute and [Ike Moriz] produce"
    },
    {
        "questionIdx": 209186,
        "questionPatternModEntities": "Which prequel of M0 was written by M5 and M6 and executive produced by M1 , M2 , M3 , and M4",
        "questionTemplate": "Which [ROLE_SIMPLE] of [entity] was [VP_SIMPLE] by [entity] and [entity] and [VP_SIMPLE] by [entity] , [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\n?x0 P1 M3 .\n?x0 P1 M4 .\n?x0 P2 M5 .\n?x0 P2 M6\n}",
        "recursionDepth": 43,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1431 wd:Q1752764 .\n?x0 wdt:P1431 wd:Q7614245 .\n?x0 wdt:P1431 wd:Q5517120 .\n?x0 wdt:P1431 wd:Q1151111 .\n?x0 wdt:P156 wd:Q2271822 .\n?x0 wdt:P58 wd:Q991682 .\n?x0 wdt:P58 wd:Q361617\n}",
        "questionWithBrackets": "Which prequel of [Stuart Little 3: Call of the Wild] was written by [E. B. White] and [Bruce Joel Rubin] and executive produced by [Jeff Franklin] , [Rob Minkoff] , [Gail Lyon] , and [Steve Waterman]"
    },
    {
        "questionIdx": 209187,
        "questionPatternModEntities": "Which prequel of M0 did M1 produce",
        "questionTemplate": "Which [ROLE_SIMPLE] of [entity] did [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1\n}",
        "recursionDepth": 16,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P162|wdt:P272 wd:Q7414 .\n?x0 wdt:P156 wd:Q188899\n}",
        "questionWithBrackets": "Which prequel of [The Fox and the Hound 2] did [The Walt Disney Company] produce"
    },
    {
        "questionIdx": 209188,
        "questionPatternModEntities": "Which prequel of M2 's prequel was written by M3 's spouse and was executive produced by M0 and M1",
        "questionTemplate": "Which [ROLE_SIMPLE] of [entity] 's [ROLE_SIMPLE] was [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] and was [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 M0 .\n?x0 P1 M1 .\n?x0 P2 ?x2 .\n?x1 P0 M2 .\n?x2 P3 M3 .\nFILTER ( ?x2 != M3 )\n}",
        "recursionDepth": 44,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1431 wd:Q2071 .\n?x0 wdt:P1431 wd:Q778585 .\n?x0 wdt:P156 ?x1 .\n?x0 wdt:P58 ?x2 .\n?x1 wdt:P156 wd:Q23971551 .\n?x2 wdt:P26 wd:Q508871 .\nFILTER ( ?x2 != wd:Q508871 )\n}",
        "questionWithBrackets": "Which prequel of [Twin Peaks] 's prequel was written by [Mary Sweeney] 's spouse and was executive produced by [David Lynch] and [Mark Frost]"
    },
    {
        "questionIdx": 209198,
        "questionPatternModEntities": "Which prequel of M0 was directed by M5 and M6 and was executive produced by M1 , M2 , M3 , and M4",
        "questionTemplate": "Which [ROLE_SIMPLE] of [entity] was [VP_SIMPLE] by [entity] and [entity] and was [VP_SIMPLE] by [entity] , [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\n?x0 P1 M3 .\n?x0 P1 M4 .\n?x0 P2 M5 .\n?x0 P2 M6\n}",
        "recursionDepth": 46,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 wd:Q6514839 .\n?x0 wdt:P57 wd:Q346595 .\n?x0 wdt:P1431 wd:Q432598 .\n?x0 wdt:P1431 wd:Q419454 .\n?x0 wdt:P1431 wd:Q3018772 .\n?x0 wdt:P1431 wd:Q995026 .\n?x0 wdt:P156 wd:Q62573305\n}",
        "questionWithBrackets": "Which prequel of [Star Trek: Picard] was directed by [Jonathan Frakes] and [Lee Rose] and was executive produced by [Bryan Fuller] , [David Semel] , [Alex Kurtzman] , and [Akiva Goldsman]"
    },
    {
        "questionIdx": 209199,
        "questionPatternModEntities": "Which prequel of M0 was edited by M1 and written by M2 's female employee",
        "questionTemplate": "Which [ROLE_SIMPLE] of [entity] was [VP_SIMPLE] by [entity] and [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 ?x1 .\n?x0 P2 M1 .\n?x1 P3 M2 .\n?x1 P4 M3\n}",
        "recursionDepth": 37,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1040 wd:Q510070 .\n?x0 wdt:P156 wd:Q9008201 .\n?x0 wdt:P58 ?x1 .\n?x1 wdt:P108 wd:Q7736850 .\n?x1 wdt:P21 wd:Q6581072\n}",
        "questionWithBrackets": "Which prequel of [In Excelsis Deo] was edited by [Tina Hirsch] and written by [The Glover Park Group] 's female employee"
    },
    {
        "questionIdx": 209205,
        "questionPatternModEntities": "Which prequel of M2 's prequel was edited by M0 and M1",
        "questionTemplate": "Which [ROLE_SIMPLE] of [entity] 's [ROLE_SIMPLE] was [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 M0 .\n?x0 P1 M1 .\n?x1 P0 M2\n}",
        "recursionDepth": 26,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1040 wd:Q484948 .\n?x0 wdt:P1040 wd:Q487090 .\n?x0 wdt:P156 ?x1 .\n?x1 wdt:P156 wd:Q18192306\n}",
        "questionWithBrackets": "Which prequel of [Inferno] 's prequel was edited by [Daniel P. Hanley] and [Mike Hill]"
    },
    {
        "questionIdx": 209208,
        "questionPatternModEntities": "Which prequel of M0 did M1 , M2 , M3 , and M4 executive produce",
        "questionTemplate": "Which [ROLE_SIMPLE] of [entity] did [entity] , [entity] , [entity] , and [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\n?x0 P1 M3 .\n?x0 P1 M4\n}",
        "recursionDepth": 27,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1431 wd:Q8877 .\n?x0 wdt:P1431 wd:Q1385337 .\n?x0 wdt:P1431 wd:Q190373 .\n?x0 wdt:P1431 wd:Q237207 .\n?x0 wdt:P156 wd:Q939084\n}",
        "questionWithBrackets": "Which prequel of [The Flintstones in Viva Rock Vegas] did [Kathleen Kennedy] , [Gerald R. Molen] , [Steven Spielberg] , and [Joseph Barbera] executive produce"
    },
    {
        "questionIdx": 209212,
        "questionPatternModEntities": "Which prequel of M0 was edited by M2 's parent and executive produced by M1",
        "questionTemplate": "Which [ROLE_SIMPLE] of [entity] was [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P2 ?x1 .\n?x1 P3 M2\n}",
        "recursionDepth": 33,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1040 ?x1 .\n?x0 wdt:P1431 wd:Q2071 .\n?x0 wdt:P156 wd:Q23971551 .\n?x1 wdt:P40|wdt:P355 wd:Q104373360\n}",
        "questionWithBrackets": "Which prequel of [Twin Peaks] was edited by [Riley Sweeney Lynch] 's parent and executive produced by [David Lynch]"
    },
    {
        "questionIdx": 209214,
        "questionPatternModEntities": "Which prequel of M0 was distributed by M1 , M2 , M3 , and M4 , distributed by M5 , and produced by M6",
        "questionTemplate": "Which [ROLE_SIMPLE] of [entity] was [VP_SIMPLE] by [entity] , [entity] , [entity] , and [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\n?x0 P1 M3 .\n?x0 P1 M4 .\n?x0 P1 M5 .\n?x0 P2 M6\n}",
        "recursionDepth": 47,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P750 wd:Q3884 .\n?x0 wdt:P750 wd:Q20056642 .\n?x0 wdt:P750 wd:Q9589 .\n?x0 wdt:P750 wd:Q602243 .\n?x0 wdt:P750 wd:Q1023161 .\n?x0 wdt:P162|wdt:P272 wd:Q98478743 .\n?x0 wdt:P156 wd:Q102310777\n}",
        "questionWithBrackets": "Which prequel of [You Could] was distributed by [iTunes] , [Amazon] , [Apple Music] , and [CD Baby] , distributed by [Deezer] , and produced by [Ike Moriz]"
    },
    {
        "questionIdx": 209216,
        "questionPatternModEntities": "Which prequel of M0 was M1 's prequel",
        "questionTemplate": "Which [ROLE_SIMPLE] of [entity] was [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1\n}",
        "recursionDepth": 17,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P156 wd:Q754 .\n?x0 wdt:P156 wd:Q1637975\n}",
        "questionWithBrackets": "Which prequel of [Saint Christopher-Nevis-Anguilla] was [Trinidad and Tobago] 's prequel"
    },
    {
        "questionIdx": 209220,
        "questionPatternModEntities": "Which prequel of M0 was edited by , was directed by , and was written by M1",
        "questionTemplate": "Which [ROLE_SIMPLE] of [entity] was [VP_SIMPLE] by , was [VP_SIMPLE] by , and was [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P2 M1 .\n?x0 P3 M1\n}",
        "recursionDepth": 36,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 wd:Q24907 .\n?x0 wdt:P1040 wd:Q24907 .\n?x0 wdt:P156 wd:Q7710953 .\n?x0 wdt:P58 wd:Q24907\n}",
        "questionWithBrackets": "Which prequel of [That's Me, Too] was edited by , was directed by , and was written by [Anker S\u00f8rensen]"
    },
    {
        "questionIdx": 209223,
        "questionPatternModEntities": "Which prequel of M0 was written and edited by M1",
        "questionTemplate": "Which [ROLE_SIMPLE] of [entity] was [VP_SIMPLE] and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P2 M1\n}",
        "recursionDepth": 25,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1040 wd:Q47284 .\n?x0 wdt:P156 wd:Q128187 .\n?x0 wdt:P58 wd:Q47284\n}",
        "questionWithBrackets": "Which prequel of [Machete Kills] was written and edited by [Robert Rodriguez]"
    },
    {
        "questionIdx": 209224,
        "questionPatternModEntities": "Which prequel of M0 starred M1 and was written by M2 's parent",
        "questionTemplate": "Which [ROLE_SIMPLE] of [entity] [VP_SIMPLE] [entity] and was [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P2 ?x1 .\n?x1 P3 M2\n}",
        "recursionDepth": 33,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P156 wd:Q6303151 .\n?x0 wdt:P161 wd:Q8944720 .\n?x0 wdt:P58 ?x1 .\n?x1 wdt:P40|wdt:P355 wd:Q14623683\n}",
        "questionWithBrackets": "Which prequel of [Warriors of the Deep] starred [Mark Strickson] and was written by [Polly Adams] 's parent"
    },
    {
        "questionIdx": 209229,
        "questionPatternModEntities": "Which prequel of M0 was directed by , produced by , edited by , and written by M1",
        "questionTemplate": "Which [ROLE_SIMPLE] of [entity] was [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P2 M1 .\n?x0 P3 M1 .\n?x0 P4 M1\n}",
        "recursionDepth": 38,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 wd:Q47284 .\n?x0 wdt:P1040 wd:Q47284 .\n?x0 wdt:P162|wdt:P272 wd:Q47284 .\n?x0 wdt:P156 wd:Q128187 .\n?x0 wdt:P58 wd:Q47284\n}",
        "questionWithBrackets": "Which prequel of [Machete Kills] was directed by , produced by , edited by , and written by [Robert Rodriguez]"
    },
    {
        "questionIdx": 209256,
        "questionPatternModEntities": "Which prequel of M0 was distributed by M1 and M2",
        "questionTemplate": "Which [ROLE_SIMPLE] of [entity] was [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P1 M2\n}",
        "recursionDepth": 22,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P750 wd:Q312 .\n?x0 wdt:P750 wd:Q3070866 .\n?x0 wdt:P156 wd:Q16267878\n}",
        "questionWithBrackets": "Which prequel of [Gardening Mama 2: The Forest Friends] was distributed by [Nintendo eShop] and [Apple Inc.]"
    },
    {
        "questionIdx": 209257,
        "questionPatternModEntities": "Which prequel of M0 was edited by M1 and M2",
        "questionTemplate": "Which [ROLE_SIMPLE] of [entity] was [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P1 M2\n}",
        "recursionDepth": 22,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1040 wd:Q158250 .\n?x0 wdt:P1040 wd:Q323950 .\n?x0 wdt:P156 wd:Q1757908\n}",
        "questionWithBrackets": "Which prequel of [Texasville] was edited by [Donn Cambern] and [Peter Bogdanovich]"
    },
    {
        "questionIdx": 209260,
        "questionPatternModEntities": "Which prequel of M0 was produced by M1",
        "questionTemplate": "Which [ROLE_SIMPLE] of [entity] was [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1\n}",
        "recursionDepth": 17,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P162|wdt:P272 wd:Q7414 .\n?x0 wdt:P156 wd:Q82094\n}",
        "questionWithBrackets": "Which prequel of [Splash] was produced by [The Walt Disney Company]"
    },
    {
        "questionIdx": 209287,
        "questionPatternModEntities": "Which prequel of M0 did M1 , M2 , and M3 distribute",
        "questionTemplate": "Which [ROLE_SIMPLE] of [entity] did [entity] , [entity] , and [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\n?x0 P1 M3\n}",
        "recursionDepth": 23,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P750 wd:Q9531 .\n?x0 wdt:P750 wd:Q907311 .\n?x0 wdt:P750 wd:Q16516296 .\n?x0 wdt:P156 wd:Q4167397\n}",
        "questionWithBrackets": "Which prequel of [The Gruffalo's Child] did [ADS Service] , [Netflix] , and [BBC] distribute"
    },
    {
        "questionIdx": 209306,
        "questionPatternModEntities": "Which prequel of M0 was distributed by M1",
        "questionTemplate": "Which [ROLE_SIMPLE] of [entity] was [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1\n}",
        "recursionDepth": 17,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P750 wd:Q31 .\n?x0 wdt:P156 wd:Q2240293\n}",
        "questionWithBrackets": "Which prequel of [K3 Bengeltjes] was distributed by [Belgium]"
    },
    {
        "questionIdx": 209326,
        "questionPatternModEntities": "Which prequel of M1 's prequel was executive produced and directed by M0",
        "questionTemplate": "Which [ROLE_SIMPLE] of [entity] 's [ROLE_SIMPLE] was [VP_SIMPLE] and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 M0 .\n?x0 P2 M0 .\n?x1 P0 M1\n}",
        "recursionDepth": 29,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 wd:Q61347 .\n?x0 wdt:P1431 wd:Q61347 .\n?x0 wdt:P156 ?x1 .\n?x1 wdt:P156 wd:Q17563594\n}",
        "questionWithBrackets": "Which prequel of [In the Name of the King 3: The Last Mission] 's prequel was executive produced and directed by [Uwe Boll]"
    },
    {
        "questionIdx": 209333,
        "questionPatternModEntities": "Which prequel of M0 was written by and executive produced by M1",
        "questionTemplate": "Which [ROLE_SIMPLE] of [entity] was [VP_SIMPLE] by and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P2 M1\n}",
        "recursionDepth": 26,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1431 wd:Q2071 .\n?x0 wdt:P156 wd:Q1140578 .\n?x0 wdt:P58 wd:Q2071\n}",
        "questionWithBrackets": "Which prequel of [Twin Peaks: Fire Walk with Me] was written by and executive produced by [David Lynch]"
    },
    {
        "questionIdx": 211146,
        "questionPatternModEntities": "Which sequel of M1 's sequel was executive produced by and starred M0",
        "questionTemplate": "Which [ROLE_SIMPLE] of [entity] 's [ROLE_SIMPLE] was [VP_SIMPLE] by and [VP_SIMPLE] [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M0 .\n?x0 P2 ?x1 .\n?x1 P2 M1\n}",
        "recursionDepth": 31,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1431 wd:Q36970 .\n?x0 wdt:P155 ?x1 .\n?x0 wdt:P161 wd:Q36970 .\n?x1 wdt:P155 wd:Q1144956\n}",
        "questionWithBrackets": "Which sequel of [Supercop] 's sequel was executive produced by and starred [Jackie Chan]"
    },
    {
        "questionIdx": 211147,
        "questionPatternModEntities": "Which sequel of M1 did M0 executive produce",
        "questionTemplate": "Which [ROLE_SIMPLE] of [entity] did [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1\n}",
        "recursionDepth": 17,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1431 wd:Q62896 .\n?x0 wdt:P155 wd:Q2894993\n}",
        "questionWithBrackets": "Which sequel of [A Winter Symphony] did [Frank Peterson] executive produce"
    },
    {
        "questionIdx": 211214,
        "questionPatternModEntities": "Which sequel of M1 was edited by M0 , directed by M2 , and directed by M3 , M4 , and M5",
        "questionTemplate": "Which [ROLE_SIMPLE] of [entity] was [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P2 M2 .\n?x0 P2 M3 .\n?x0 P2 M4 .\n?x0 P2 M5\n}",
        "recursionDepth": 44,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 wd:Q1456605 .\n?x0 wdt:P57 wd:Q503966 .\n?x0 wdt:P57 wd:Q89720 .\n?x0 wdt:P57 wd:Q100458 .\n?x0 wdt:P1040 wd:Q293078 .\n?x0 wdt:P155 wd:Q217021\n}",
        "questionWithBrackets": "Which sequel of [Live aus Berlin] was edited by [Mathilde Bonnefoy] , directed by [Philipp St\u00f6lzl] , and directed by [Joern Heitmann] , [Rob Cohen] , and [Hannes Rossacher]"
    },
    {
        "questionIdx": 211216,
        "questionPatternModEntities": "Which sequel of M0 did M1 's parent executive produce and direct",
        "questionTemplate": "Which [ROLE_SIMPLE] of [entity] did [entity] 's [ROLE_SIMPLE] [VP_SIMPLE] and [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 M0 .\n?x0 P2 ?x1 .\n?x1 P3 M1\n}",
        "recursionDepth": 29,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 ?x1 .\n?x0 wdt:P1431 ?x1 .\n?x0 wdt:P155 wd:Q2085 .\n?x1 wdt:P40|wdt:P355 wd:Q104373223\n}",
        "questionWithBrackets": "Which sequel of [Twin Peaks] did [Austin Jack Lynch] 's parent executive produce and direct"
    },
    {
        "questionIdx": 211228,
        "questionPatternModEntities": "Which sequel of M1 was distributed by M0",
        "questionTemplate": "Which [ROLE_SIMPLE] of [entity] was [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1\n}",
        "recursionDepth": 18,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P750 wd:Q7414 .\n?x0 wdt:P155 wd:Q18674916\n}",
        "questionWithBrackets": "Which sequel of [Risto R\u00e4pp\u00e4\u00e4j\u00e4 ja liukas Lennart] was distributed by [The Walt Disney Company]"
    },
    {
        "questionIdx": 211251,
        "questionPatternModEntities": "Which sequel of M4 did M0 , M1 , M2 , and M3 executive produce",
        "questionTemplate": "Which [ROLE_SIMPLE] of [entity] did [entity] , [entity] , [entity] , and [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P0 M3 .\n?x0 P1 M4\n}",
        "recursionDepth": 27,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1431 wd:Q43994 .\n?x0 wdt:P1431 wd:Q3106628 .\n?x0 wdt:P1431 wd:Q2400678 .\n?x0 wdt:P1431 wd:Q95125 .\n?x0 wdt:P155 wd:Q605111\n}",
        "questionWithBrackets": "Which sequel of [The Simpsons shorts] did [Matt Selman] , [James L. Brooks] , [Ian Maxtone-Graham] , and [Matt Groening] executive produce"
    },
    {
        "questionIdx": 211272,
        "questionPatternModEntities": "Which sequel of M1 was produced by and distributed by M0",
        "questionTemplate": "Which [ROLE_SIMPLE] of [entity] was [VP_SIMPLE] by and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M0 .\n?x0 P2 M1\n}",
        "recursionDepth": 26,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P750 wd:Q9531 .\n?x0 wdt:P155 wd:Q18328139 .\n?x0 wdt:P162|wdt:P272 wd:Q9531\n}",
        "questionWithBrackets": "Which sequel of [Death in Heaven] was produced by and distributed by [BBC]"
    },
    {
        "questionIdx": 211287,
        "questionPatternModEntities": "Which sequel of M0 was edited by and was written by M1 's sibling",
        "questionTemplate": "Which [ROLE_SIMPLE] of [entity] was [VP_SIMPLE] by and was [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 M0 .\n?x1 P3 M1 .\nFILTER ( ?x1 != M1 )\n}",
        "recursionDepth": 32,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1040 ?x1 .\n?x0 wdt:P155 wd:Q2698874 .\n?x0 wdt:P58 ?x1 .\n?x1 wdt:P3373 wd:Q5616143 .\nFILTER ( ?x1 != wd:Q5616143 )\n}",
        "questionWithBrackets": "Which sequel of [Solitary Fragments] was edited by and was written by [Guillermo Fesser] 's sibling"
    },
    {
        "questionIdx": 211290,
        "questionPatternModEntities": "Which sequel of M5 was edited by M2 , M3 , and M4 , was executive produced by M0 , and was produced by M1",
        "questionTemplate": "Which [ROLE_SIMPLE] of [entity] was [VP_SIMPLE] by [entity] , [entity] , and [entity] , was [VP_SIMPLE] by [entity] , and was [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P2 M2 .\n?x0 P2 M3 .\n?x0 P2 M4 .\n?x0 P3 M5\n}",
        "recursionDepth": 50,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1040 wd:Q974615 .\n?x0 wdt:P1040 wd:Q23409645 .\n?x0 wdt:P1040 wd:Q25853675 .\n?x0 wdt:P1431 wd:Q359311 .\n?x0 wdt:P155 wd:Q1049545 .\n?x0 wdt:P162|wdt:P272 wd:Q621364\n}",
        "questionWithBrackets": "Which sequel of [Clash of the Titans] was edited by [David Freeman] , [Vincent Tabaillon] , and [Martin Walsh] , was executive produced by [Richard D. Zanuck] , and was produced by [Legendary Pictures]"
    },
    {
        "questionIdx": 211300,
        "questionPatternModEntities": "Which sequel of M3 did M0 , M1 , and M2 edit , write , and direct",
        "questionTemplate": "Which [ROLE_SIMPLE] of [entity] did [entity] , [entity] , and [entity] [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P1 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\n?x0 P2 M3 .\n?x0 P3 M0 .\n?x0 P3 M1 .\n?x0 P3 M2\n}",
        "recursionDepth": 37,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 wd:Q1291210 .\n?x0 wdt:P57 wd:Q4207234 .\n?x0 wdt:P57 wd:Q16198328 .\n?x0 wdt:P1040 wd:Q1291210 .\n?x0 wdt:P1040 wd:Q4207234 .\n?x0 wdt:P1040 wd:Q16198328 .\n?x0 wdt:P155 wd:Q1359366 .\n?x0 wdt:P58 wd:Q1291210 .\n?x0 wdt:P58 wd:Q4207234 .\n?x0 wdt:P58 wd:Q16198328\n}",
        "questionWithBrackets": "Which sequel of [V/H/S] did [Gareth Evans] , [Jason Eisener] , and [Eduardo S\u00e1nchez] edit , write , and direct"
    },
    {
        "questionIdx": 211305,
        "questionPatternModEntities": "Which sequel of M4 was directed and edited by M0 , M1 , M2 , and M3",
        "questionTemplate": "Which [ROLE_SIMPLE] of [entity] was [VP_SIMPLE] and [VP_SIMPLE] by [entity] , [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P0 M3 .\n?x0 P1 M4 .\n?x0 P2 M0 .\n?x0 P2 M1 .\n?x0 P2 M2 .\n?x0 P2 M3\n}",
        "recursionDepth": 34,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 wd:Q1291210 .\n?x0 wdt:P57 wd:Q4207234 .\n?x0 wdt:P57 wd:Q4679987 .\n?x0 wdt:P57 wd:Q16198328 .\n?x0 wdt:P1040 wd:Q1291210 .\n?x0 wdt:P1040 wd:Q4207234 .\n?x0 wdt:P1040 wd:Q4679987 .\n?x0 wdt:P1040 wd:Q16198328 .\n?x0 wdt:P155 wd:Q1359366\n}",
        "questionWithBrackets": "Which sequel of [V/H/S] was directed and edited by [Adam Wingard] , [Jason Eisener] , [Gareth Evans] , and [Eduardo S\u00e1nchez]"
    },
    {
        "questionIdx": 211306,
        "questionPatternModEntities": "Which sequel of M4 was directed by and edited by M0 , M1 , M2 , and M3",
        "questionTemplate": "Which [ROLE_SIMPLE] of [entity] was [VP_SIMPLE] by and [VP_SIMPLE] by [entity] , [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P0 M3 .\n?x0 P1 M4 .\n?x0 P2 M0 .\n?x0 P2 M1 .\n?x0 P2 M2 .\n?x0 P2 M3\n}",
        "recursionDepth": 35,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 wd:Q1291210 .\n?x0 wdt:P57 wd:Q4207234 .\n?x0 wdt:P57 wd:Q4679987 .\n?x0 wdt:P57 wd:Q16198328 .\n?x0 wdt:P1040 wd:Q1291210 .\n?x0 wdt:P1040 wd:Q4207234 .\n?x0 wdt:P1040 wd:Q4679987 .\n?x0 wdt:P1040 wd:Q16198328 .\n?x0 wdt:P155 wd:Q1359366\n}",
        "questionWithBrackets": "Which sequel of [V/H/S] was directed by and edited by [Jason Eisener] , [Eduardo S\u00e1nchez] , [Adam Wingard] , and [Gareth Evans]"
    },
    {
        "questionIdx": 211308,
        "questionPatternModEntities": "Which sequel of M4 was directed by and written by M0 , M1 , M2 , and M3",
        "questionTemplate": "Which [ROLE_SIMPLE] of [entity] was [VP_SIMPLE] by and [VP_SIMPLE] by [entity] , [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P0 M3 .\n?x0 P1 M4 .\n?x0 P2 M0 .\n?x0 P2 M1 .\n?x0 P2 M2 .\n?x0 P2 M3\n}",
        "recursionDepth": 35,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 wd:Q1291210 .\n?x0 wdt:P57 wd:Q18002667 .\n?x0 wdt:P57 wd:Q4207234 .\n?x0 wdt:P57 wd:Q16198328 .\n?x0 wdt:P155 wd:Q1359366 .\n?x0 wdt:P58 wd:Q1291210 .\n?x0 wdt:P58 wd:Q18002667 .\n?x0 wdt:P58 wd:Q4207234 .\n?x0 wdt:P58 wd:Q16198328\n}",
        "questionWithBrackets": "Which sequel of [V/H/S] was directed by and written by [Jason Eisener] , [Simon Barrett] , [Eduardo S\u00e1nchez] , and [Gareth Evans]"
    },
    {
        "questionIdx": 211312,
        "questionPatternModEntities": "Which sequel of M4 was edited by and directed by M0 , M1 , M2 , and M3",
        "questionTemplate": "Which [ROLE_SIMPLE] of [entity] was [VP_SIMPLE] by and [VP_SIMPLE] by [entity] , [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P0 M3 .\n?x0 P1 M4 .\n?x0 P2 M0 .\n?x0 P2 M1 .\n?x0 P2 M2 .\n?x0 P2 M3\n}",
        "recursionDepth": 35,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 wd:Q1291210 .\n?x0 wdt:P57 wd:Q4207234 .\n?x0 wdt:P57 wd:Q4679987 .\n?x0 wdt:P57 wd:Q16198328 .\n?x0 wdt:P1040 wd:Q1291210 .\n?x0 wdt:P1040 wd:Q4207234 .\n?x0 wdt:P1040 wd:Q4679987 .\n?x0 wdt:P1040 wd:Q16198328 .\n?x0 wdt:P155 wd:Q1359366\n}",
        "questionWithBrackets": "Which sequel of [V/H/S] was edited by and directed by [Jason Eisener] , [Adam Wingard] , [Gareth Evans] , and [Eduardo S\u00e1nchez]"
    },
    {
        "questionIdx": 211315,
        "questionPatternModEntities": "Which sequel of M3 was edited by , directed by , and written by M0 , M1 , and M2",
        "questionTemplate": "Which [ROLE_SIMPLE] of [entity] was [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P1 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\n?x0 P2 M3 .\n?x0 P3 M0 .\n?x0 P3 M1 .\n?x0 P3 M2\n}",
        "recursionDepth": 38,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 wd:Q1291210 .\n?x0 wdt:P57 wd:Q4207234 .\n?x0 wdt:P57 wd:Q16198328 .\n?x0 wdt:P1040 wd:Q1291210 .\n?x0 wdt:P1040 wd:Q4207234 .\n?x0 wdt:P1040 wd:Q16198328 .\n?x0 wdt:P155 wd:Q1359366 .\n?x0 wdt:P58 wd:Q1291210 .\n?x0 wdt:P58 wd:Q4207234 .\n?x0 wdt:P58 wd:Q16198328\n}",
        "questionWithBrackets": "Which sequel of [V/H/S] was edited by , directed by , and written by [Eduardo S\u00e1nchez] , [Gareth Evans] , and [Jason Eisener]"
    },
    {
        "questionIdx": 211318,
        "questionPatternModEntities": "Which sequel of M4 was written by and directed by M0 , M1 , M2 , and M3",
        "questionTemplate": "Which [ROLE_SIMPLE] of [entity] was [VP_SIMPLE] by and [VP_SIMPLE] by [entity] , [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P0 M3 .\n?x0 P1 M4 .\n?x0 P2 M0 .\n?x0 P2 M1 .\n?x0 P2 M2 .\n?x0 P2 M3\n}",
        "recursionDepth": 35,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 wd:Q1291210 .\n?x0 wdt:P57 wd:Q18002667 .\n?x0 wdt:P57 wd:Q60633865 .\n?x0 wdt:P57 wd:Q4207234 .\n?x0 wdt:P155 wd:Q1359366 .\n?x0 wdt:P58 wd:Q1291210 .\n?x0 wdt:P58 wd:Q18002667 .\n?x0 wdt:P58 wd:Q60633865 .\n?x0 wdt:P58 wd:Q4207234\n}",
        "questionWithBrackets": "Which sequel of [V/H/S] was written by and directed by [Eduardo S\u00e1nchez] , [Gareth Evans] , [Simon Barrett] , and [Timo Tjahjanto]"
    },
    {
        "questionIdx": 211322,
        "questionPatternModEntities": "Which sequel of M3 was written by , edited by , and directed by M0 , M1 , and M2",
        "questionTemplate": "Which [ROLE_SIMPLE] of [entity] was [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P1 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\n?x0 P2 M3 .\n?x0 P3 M0 .\n?x0 P3 M1 .\n?x0 P3 M2\n}",
        "recursionDepth": 39,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 wd:Q1291210 .\n?x0 wdt:P57 wd:Q4207234 .\n?x0 wdt:P57 wd:Q16198328 .\n?x0 wdt:P1040 wd:Q1291210 .\n?x0 wdt:P1040 wd:Q4207234 .\n?x0 wdt:P1040 wd:Q16198328 .\n?x0 wdt:P155 wd:Q1359366 .\n?x0 wdt:P58 wd:Q1291210 .\n?x0 wdt:P58 wd:Q4207234 .\n?x0 wdt:P58 wd:Q16198328\n}",
        "questionWithBrackets": "Which sequel of [V/H/S] was written by , edited by , and directed by [Eduardo S\u00e1nchez] , [Gareth Evans] , and [Jason Eisener]"
    },
    {
        "questionIdx": 211323,
        "questionPatternModEntities": "Which sequel of M1 starred M0",
        "questionTemplate": "Which [ROLE_SIMPLE] of [entity] [VP_SIMPLE] [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1\n}",
        "recursionDepth": 16,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P155 wd:Q5415 .\n?x0 wdt:P161 wd:Q4029\n}",
        "questionWithBrackets": "Which sequel of [My Little Pony: Friendship Is Magic] starred [Tara Strong]"
    },
    {
        "questionIdx": 211328,
        "questionPatternModEntities": "Which sequel of M1 was a prequel of M0",
        "questionTemplate": "Which [ROLE_SIMPLE] of [entity] was a [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1\n}",
        "recursionDepth": 19,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P155 wd:Q68678 .\n?x0 wdt:P156 wd:Q2895\n}",
        "questionWithBrackets": "Which sequel of [Socialist Soviet Republic of Byelorussia] was a prequel of [Byelorussian Soviet Socialist Republic]"
    },
    {
        "questionIdx": 211329,
        "questionPatternModEntities": "Which sequel of M1 did M0 produce and distribute",
        "questionTemplate": "Which [ROLE_SIMPLE] of [entity] did [entity] [VP_SIMPLE] and [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M0 .\n?x0 P2 M1\n}",
        "recursionDepth": 24,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P750 wd:Q9531 .\n?x0 wdt:P155 wd:Q18328139 .\n?x0 wdt:P162|wdt:P272 wd:Q9531\n}",
        "questionWithBrackets": "Which sequel of [Death in Heaven] did [BBC] produce and distribute"
    },
    {
        "questionIdx": 211332,
        "questionPatternModEntities": "Which sequel of M0 was directed and edited by M1 's parent",
        "questionTemplate": "Which [ROLE_SIMPLE] of [entity] was [VP_SIMPLE] and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 M0 .\n?x0 P2 ?x1 .\n?x1 P3 M1\n}",
        "recursionDepth": 28,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 ?x1 .\n?x0 wdt:P1040 ?x1 .\n?x0 wdt:P155 wd:Q192115 .\n?x1 wdt:P40|wdt:P355 wd:Q28032516\n}",
        "questionWithBrackets": "Which sequel of [Sin City] was directed and edited by [Racer Rodriguez] 's parent"
    },
    {
        "questionIdx": 211333,
        "questionPatternModEntities": "Which sequel of M2 was distributed by M0 and M1",
        "questionTemplate": "Which [ROLE_SIMPLE] of [entity] was [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P1 M2\n}",
        "recursionDepth": 21,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P750 wd:Q8093 .\n?x0 wdt:P750 wd:Q3070866 .\n?x0 wdt:P155 wd:Q2722404\n}",
        "questionWithBrackets": "Which sequel of [Game & Watch Gallery 2] was distributed by [Nintendo eShop] and [Nintendo]"
    },
    {
        "questionIdx": 211337,
        "questionPatternModEntities": "Which sequel of M0 was distributed by a child of M1",
        "questionTemplate": "Which [ROLE_SIMPLE] of [entity] was [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 M0 .\n?x1 P2 M1\n}",
        "recursionDepth": 23,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P750 ?x1 .\n?x0 wdt:P155 wd:Q1628364 .\n?x1 wdt:P749 wd:Q2283\n}",
        "questionWithBrackets": "Which sequel of [Halo 3: ODST] was distributed by a child of [Microsoft]"
    },
    {
        "questionIdx": 211338,
        "questionPatternModEntities": "Which sequel of M1 was produced by M0",
        "questionTemplate": "Which [ROLE_SIMPLE] of [entity] was [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1\n}",
        "recursionDepth": 18,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P155 wd:Q1198611 .\n?x0 wdt:P162|wdt:P272 wd:Q7414\n}",
        "questionWithBrackets": "Which sequel of [The Absent-Minded Professor] was produced by [The Walt Disney Company]"
    },
    {
        "questionIdx": 211348,
        "questionPatternModEntities": "Which sequel of M2 did M0 and M1 executive produce",
        "questionTemplate": "Which [ROLE_SIMPLE] of [entity] did [entity] and [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P1 M2\n}",
        "recursionDepth": 21,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1431 wd:Q62896 .\n?x0 wdt:P1431 wd:Q151814 .\n?x0 wdt:P155 wd:Q2894993\n}",
        "questionWithBrackets": "Which sequel of [A Winter Symphony] did [Frank Peterson] and [Sarah Brightman] executive produce"
    },
    {
        "questionIdx": 211354,
        "questionPatternModEntities": "Which sequel of M6 was executive produced by M0 , executive produced by M1 , and executive produced by M2 , M3 , M4 , and M5",
        "questionTemplate": "Which [ROLE_SIMPLE] of [entity] was [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity] , [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P0 M3 .\n?x0 P0 M4 .\n?x0 P0 M5 .\n?x0 P1 M6\n}",
        "recursionDepth": 50,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1431 wd:Q43994 .\n?x0 wdt:P1431 wd:Q2829373 .\n?x0 wdt:P1431 wd:Q2400678 .\n?x0 wdt:P1431 wd:Q3106628 .\n?x0 wdt:P1431 wd:Q365090 .\n?x0 wdt:P1431 wd:Q95125 .\n?x0 wdt:P155 wd:Q605111\n}",
        "questionWithBrackets": "Which sequel of [The Simpsons shorts] was executive produced by [Ian Maxtone-Graham] , executive produced by [James L. Brooks] , and executive produced by [Al Jean] , [Sam Simon] , [Matt Selman] , and [Matt Groening]"
    },
    {
        "questionIdx": 211374,
        "questionPatternModEntities": "Which sequel of M2 was edited by M0 and M1",
        "questionTemplate": "Which [ROLE_SIMPLE] of [entity] was [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P1 M2\n}",
        "recursionDepth": 21,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1040 wd:Q315123 .\n?x0 wdt:P1040 wd:Q1711969 .\n?x0 wdt:P155 wd:Q210756\n}",
        "questionWithBrackets": "Which sequel of [The Thing] was edited by [Peter Boyle] and [Julian Clarke]"
    },
    {
        "questionIdx": 211377,
        "questionPatternModEntities": "Which sequel of M1 was written by M0",
        "questionTemplate": "Which [ROLE_SIMPLE] of [entity] was [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1\n}",
        "recursionDepth": 17,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P155 wd:Q3476301 .\n?x0 wdt:P58 wd:Q42\n}",
        "questionWithBrackets": "Which sequel of [The King's Demons] was written by [Douglas Adams]"
    },
    {
        "questionIdx": 211380,
        "questionPatternModEntities": "Which sequel of M2 did M0 and M1 edit",
        "questionTemplate": "Which [ROLE_SIMPLE] of [entity] did [entity] and [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P1 M2\n}",
        "recursionDepth": 20,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1040 wd:Q214066 .\n?x0 wdt:P1040 wd:Q809066 .\n?x0 wdt:P155 wd:Q47703\n}",
        "questionWithBrackets": "Which sequel of [The Godfather] did [Barry Malkin] and [Peter Zinner] edit"
    },
    {
        "questionIdx": 211392,
        "questionPatternModEntities": "Which sequel of M1 was directed by M2 's spouse and starred M0",
        "questionTemplate": "Which [ROLE_SIMPLE] of [entity] was [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] and [VP_SIMPLE] [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P2 ?x1 .\n?x1 P3 M2 .\nFILTER ( ?x1 != M2 )\n}",
        "recursionDepth": 33,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 ?x1 .\n?x0 wdt:P155 wd:Q1274947 .\n?x0 wdt:P161 wd:Q44450 .\n?x1 wdt:P26 wd:Q42574 .\nFILTER ( ?x1 != wd:Q42574 )\n}",
        "questionWithBrackets": "Which sequel of [Three O'Clock High] was directed by [James Cameron] 's spouse and starred [Roger Aaron Brown]"
    },
    {
        "questionIdx": 211400,
        "questionPatternModEntities": "Which sequel of M1 's prequel did M0 produce , edit , direct , and write",
        "questionTemplate": "Which [ROLE_SIMPLE] of [entity] 's [ROLE_SIMPLE] did [entity] [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M0 .\n?x0 P2 M0 .\n?x0 P3 ?x1 .\n?x0 P4 M0 .\n?x1 P5 M1\n}",
        "recursionDepth": 40,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 wd:Q47284 .\n?x0 wdt:P1040 wd:Q47284 .\n?x0 wdt:P155 ?x1 .\n?x0 wdt:P162|wdt:P272 wd:Q47284 .\n?x0 wdt:P58 wd:Q47284 .\n?x1 wdt:P156 wd:Q549908\n}",
        "questionWithBrackets": "Which sequel of [Spy Kids 2: The Island of Lost Dreams] 's prequel did [Robert Rodriguez] produce , edit , direct , and write"
    },
    {
        "questionIdx": 211407,
        "questionPatternModEntities": "Which sequel of M5 did M0 , M1 , and M2 executive produce , M3 edit , and M4 edit",
        "questionTemplate": "Which [ROLE_SIMPLE] of [entity] did [entity] , [entity] , and [entity] [VP_SIMPLE] , [entity] [VP_SIMPLE] , and [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P1 M3 .\n?x0 P1 M4 .\n?x0 P2 M5\n}",
        "recursionDepth": 44,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1040 wd:Q436125 .\n?x0 wdt:P1040 wd:Q1970454 .\n?x0 wdt:P1431 wd:Q240872 .\n?x0 wdt:P1431 wd:Q27237390 .\n?x0 wdt:P1431 wd:Q13638984 .\n?x0 wdt:P155 wd:Q18486021\n}",
        "questionWithBrackets": "Which sequel of [Star Wars: Episode VIII \u2013 The Last Jedi] did [Chris Miller] , [Jason McGatlin] , and [Lawrence Kasdan] executive produce , [Chris Dickens] edit , and [Pietro Scalia] edit"
    },
    {
        "questionIdx": 211414,
        "questionPatternModEntities": "Which sequel of M2 was directed by M3 , executive produced by M0 and M1 , and directed by M4 , M5 , and M6",
        "questionTemplate": "Which [ROLE_SIMPLE] of [entity] was [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] and [entity] , and [VP_SIMPLE] by [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P1 M2 .\n?x0 P2 M3 .\n?x0 P2 M4 .\n?x0 P2 M5 .\n?x0 P2 M6\n}",
        "recursionDepth": 49,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 wd:Q346595 .\n?x0 wdt:P57 wd:Q18705002 .\n?x0 wdt:P57 wd:Q2129942 .\n?x0 wdt:P57 wd:Q3018772 .\n?x0 wdt:P1431 wd:Q419454 .\n?x0 wdt:P1431 wd:Q7356345 .\n?x0 wdt:P155 wd:Q380519\n}",
        "questionWithBrackets": "Which sequel of [Star Trek: Enterprise] was directed by [Hanelle Culpepper] , executive produced by [Akiva Goldsman] and [Rod Roddenberry] , and directed by [John Stuart Scott] , [David Semel] , and [Jonathan Frakes]"
    },
    {
        "questionIdx": 211415,
        "questionPatternModEntities": "Which sequel of M3 was directed by M4 and M5 , executive produced by M0 and M1 , and produced by M2",
        "questionTemplate": "Which [ROLE_SIMPLE] of [entity] was [VP_SIMPLE] by [entity] and [entity] , [VP_SIMPLE] by [entity] and [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P1 M2 .\n?x0 P2 M3 .\n?x0 P3 M4 .\n?x0 P3 M5\n}",
        "recursionDepth": 46,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 wd:Q3018806 .\n?x0 wdt:P57 wd:Q419454 .\n?x0 wdt:P1431 wd:Q432598 .\n?x0 wdt:P1431 wd:Q995026 .\n?x0 wdt:P155 wd:Q380519 .\n?x0 wdt:P162|wdt:P272 wd:Q42305720\n}",
        "questionWithBrackets": "Which sequel of [Star Trek: Enterprise] was directed by [Akiva Goldsman] and [David Solomon] , executive produced by [Alex Kurtzman] and [Bryan Fuller] , and produced by [Roddenberry Entertainment]"
    },
    {
        "questionIdx": 211418,
        "questionPatternModEntities": "Which sequel of M5 was edited by M3 and M4 , written by M0 and M1 , and written by M2",
        "questionTemplate": "Which [ROLE_SIMPLE] of [entity] was [VP_SIMPLE] by [entity] and [entity] , [VP_SIMPLE] by [entity] and [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P1 M3 .\n?x0 P1 M4 .\n?x0 P2 M5\n}",
        "recursionDepth": 45,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1040 wd:Q974615 .\n?x0 wdt:P1040 wd:Q23409645 .\n?x0 wdt:P155 wd:Q1049545 .\n?x0 wdt:P58 wd:Q3998031 .\n?x0 wdt:P58 wd:Q16225521 .\n?x0 wdt:P58 wd:Q6789004\n}",
        "questionWithBrackets": "Which sequel of [Clash of the Titans] was edited by [Vincent Tabaillon] and [Martin Walsh] , written by [Matt Manfredi] and [Travis Beacham] , and written by [Phil Hay]"
    },
    {
        "questionIdx": 211419,
        "questionPatternModEntities": "Which sequel of M6 was executive produced by M0 , M1 , and M2 , edited by M4 and M5 , and written by M3",
        "questionTemplate": "Which [ROLE_SIMPLE] of [entity] was [VP_SIMPLE] by [entity] , [entity] , and [entity] , [VP_SIMPLE] by [entity] and [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P1 M3 .\n?x0 P2 M4 .\n?x0 P2 M5 .\n?x0 P3 M6\n}",
        "recursionDepth": 49,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1040 wd:Q436125 .\n?x0 wdt:P1040 wd:Q1970454 .\n?x0 wdt:P1431 wd:Q240872 .\n?x0 wdt:P1431 wd:Q13638984 .\n?x0 wdt:P1431 wd:Q3378803 .\n?x0 wdt:P155 wd:Q18486021 .\n?x0 wdt:P58 wd:Q132058\n}",
        "questionWithBrackets": "Which sequel of [Star Wars: Episode VIII \u2013 The Last Jedi] was executive produced by [Chris Miller] , [Phil Lord] , and [Lawrence Kasdan] , edited by [Chris Dickens] and [Pietro Scalia] , and written by [Jon Kasdan]"
    },
    {
        "questionIdx": 211421,
        "questionPatternModEntities": "Which sequel of M4 was produced by M1 , edited by M2 and M3 , directed by M5 , and written by M0",
        "questionTemplate": "Which [ROLE_SIMPLE] of [entity] was [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] and [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P2 M2 .\n?x0 P2 M3 .\n?x0 P3 M4 .\n?x0 P4 M5\n}",
        "recursionDepth": 50,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 wd:Q552449 .\n?x0 wdt:P1040 wd:Q315123 .\n?x0 wdt:P1040 wd:Q1711969 .\n?x0 wdt:P155 wd:Q210756 .\n?x0 wdt:P162|wdt:P272 wd:Q2446795 .\n?x0 wdt:P58 wd:Q5386707\n}",
        "questionWithBrackets": "Which sequel of [The Thing] was produced by [Marc Abraham] , edited by [Peter Boyle] and [Julian Clarke] , directed by [Matthijs van Heijningen Jr.] , and written by [Eric Heisserer]"
    },
    {
        "questionIdx": 211422,
        "questionPatternModEntities": "Which sequel of M4 was produced by M0 , edited by M1 and M2 , edited by M3 , and directed by M5",
        "questionTemplate": "Which [ROLE_SIMPLE] of [entity] was [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] and [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\n?x0 P1 M3 .\n?x0 P2 M4 .\n?x0 P3 M5\n}",
        "recursionDepth": 50,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 wd:Q56094 .\n?x0 wdt:P1040 wd:Q214066 .\n?x0 wdt:P1040 wd:Q809066 .\n?x0 wdt:P1040 wd:Q976609 .\n?x0 wdt:P155 wd:Q47703 .\n?x0 wdt:P162|wdt:P272 wd:Q2675693\n}",
        "questionWithBrackets": "Which sequel of [The Godfather] was produced by [Fred Roos] , edited by [Peter Zinner] and [Barry Malkin] , edited by [Richard Marks] , and directed by [Francis Ford Coppola]"
    },
    {
        "questionIdx": 211424,
        "questionPatternModEntities": "Which sequel of M6 was written by M2 , M3 , M4 , and M5 , executive produced by M0 , and executive produced by M1",
        "questionTemplate": "Which [ROLE_SIMPLE] of [entity] was [VP_SIMPLE] by [entity] , [entity] , [entity] , and [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P1 M2 .\n?x0 P1 M3 .\n?x0 P1 M4 .\n?x0 P1 M5 .\n?x0 P2 M6\n}",
        "recursionDepth": 49,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1431 wd:Q8877 .\n?x0 wdt:P1431 wd:Q190373 .\n?x0 wdt:P155 wd:Q602094 .\n?x0 wdt:P58 wd:Q3805577 .\n?x0 wdt:P58 wd:Q3127820 .\n?x0 wdt:P58 wd:Q3020873 .\n?x0 wdt:P58 wd:Q967077\n}",
        "questionWithBrackets": "Which sequel of [The Flintstones] was written by [Jim Cash] , [Harry Elfont] , [Jack Epps, Jr.] , and [Deborah Kaplan] , executive produced by [Steven Spielberg] , and executive produced by [Joseph Barbera]"
    },
    {
        "questionIdx": 211425,
        "questionPatternModEntities": "Which sequel of M5 was written by M0 , edited by M4 , written by M1 and M2 , and written by M3",
        "questionTemplate": "Which [ROLE_SIMPLE] of [entity] was [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] and [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P0 M3 .\n?x0 P1 M4 .\n?x0 P2 M5\n}",
        "recursionDepth": 50,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1040 wd:Q8289 .\n?x0 wdt:P155 wd:Q2401367 .\n?x0 wdt:P58 wd:Q116854 .\n?x0 wdt:P58 wd:Q4465 .\n?x0 wdt:P58 wd:Q116861 .\n?x0 wdt:P58 wd:Q446427\n}",
        "questionWithBrackets": "Which sequel of [Batman Begins] was written by [Philippa Boyens] , edited by [Jamie Selkirk] , written by [Merian C. Cooper] and [Fran Walsh] , and written by [Peter Jackson]"
    },
    {
        "questionIdx": 211436,
        "questionPatternModEntities": "Which sequel of M6 did M0 , M1 , M2 , M3 , M4 , and M5 executive produce",
        "questionTemplate": "Which [ROLE_SIMPLE] of [entity] did [entity] , [entity] , [entity] , [entity] , [entity] , and [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P0 M3 .\n?x0 P0 M4 .\n?x0 P0 M5 .\n?x0 P1 M6\n}",
        "recursionDepth": 33,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1431 wd:Q43994 .\n?x0 wdt:P1431 wd:Q3106628 .\n?x0 wdt:P1431 wd:Q2400678 .\n?x0 wdt:P1431 wd:Q365090 .\n?x0 wdt:P1431 wd:Q95125 .\n?x0 wdt:P1431 wd:Q2741850 .\n?x0 wdt:P155 wd:Q605111\n}",
        "questionWithBrackets": "Which sequel of [The Simpsons shorts] did [Ian Maxtone-Graham] , [Matt Groening] , [Sam Simon] , [James L. Brooks] , [Matt Selman] , and [John Frink] executive produce"
    },
    {
        "questionIdx": 211437,
        "questionPatternModEntities": "Which sequel of M4 was distributed by M0 , produced by M3 , and distributed by M1 and M2",
        "questionTemplate": "Which [ROLE_SIMPLE] of [entity] was [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P1 M3 .\n?x0 P2 M4\n}",
        "recursionDepth": 41,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P750 wd:Q3884 .\n?x0 wdt:P750 wd:Q28404534 .\n?x0 wdt:P750 wd:Q4740860 .\n?x0 wdt:P155 wd:Q101241052 .\n?x0 wdt:P162|wdt:P272 wd:Q97132247\n}",
        "questionWithBrackets": "Which sequel of [Entertain You] was distributed by [Amazon] , produced by [Daniel Gibson] , and distributed by [Amazon Music] and [YouTube Music]"
    },
    {
        "questionIdx": 211438,
        "questionPatternModEntities": "Which sequel of M5 was produced by M4 and was distributed by M0 , M1 , M2 , and M3",
        "questionTemplate": "Which [ROLE_SIMPLE] of [entity] was [VP_SIMPLE] by [entity] and was [VP_SIMPLE] by [entity] , [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P0 M3 .\n?x0 P1 M4 .\n?x0 P2 M5\n}",
        "recursionDepth": 41,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P750 wd:Q3884 .\n?x0 wdt:P750 wd:Q4740860 .\n?x0 wdt:P750 wd:Q9589 .\n?x0 wdt:P750 wd:Q602243 .\n?x0 wdt:P155 wd:Q101241052 .\n?x0 wdt:P162|wdt:P272 wd:Q97132247\n}",
        "questionWithBrackets": "Which sequel of [Entertain You] was produced by [Daniel Gibson] and was distributed by [Deezer] , [Amazon] , [Amazon Music] , and [iTunes]"
    },
    {
        "questionIdx": 211445,
        "questionPatternModEntities": "Which sequel of M1 did M0 executive produce and M2 's parent write",
        "questionTemplate": "Which [ROLE_SIMPLE] of [entity] did [entity] [VP_SIMPLE] and [entity] 's [ROLE_SIMPLE] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 ?x1 .\n?x0 P2 M1 .\n?x1 P3 M2\n}",
        "recursionDepth": 32,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1431 wd:Q36970 .\n?x0 wdt:P155 wd:Q1549966 .\n?x0 wdt:P58 ?x1 .\n?x1 wdt:P40|wdt:P355 wd:Q54317718\n}",
        "questionWithBrackets": "Which sequel of [Armour of God II: Operation Condor] did [Jackie Chan] executive produce and [Etta Ng] 's parent write"
    },
    {
        "questionIdx": 211446,
        "questionPatternModEntities": "Which sequel of M0 did M1 and M2 direct",
        "questionTemplate": "Which [ROLE_SIMPLE] of [entity] did [entity] and [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P1 M2\n}",
        "recursionDepth": 20,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 wd:Q25078 .\n?x0 wdt:P57 wd:Q166159 .\n?x0 wdt:P155 wd:Q1273232\n}",
        "questionWithBrackets": "Which sequel of [Monty Python Live at the Hollywood Bowl] did [Terry Jones] and [Terry Gilliam] direct"
    },
    {
        "questionIdx": 211447,
        "questionPatternModEntities": "Which sequel of M3 did M0 executive produce , M1 produce , M2 edit , and M4 direct",
        "questionTemplate": "Which [ROLE_SIMPLE] of [entity] did [entity] [VP_SIMPLE] , [entity] [VP_SIMPLE] , [entity] [VP_SIMPLE] , and [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P2 M2 .\n?x0 P3 M3 .\n?x0 P4 M4\n}",
        "recursionDepth": 46,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 wd:Q548823 .\n?x0 wdt:P1040 wd:Q15629981 .\n?x0 wdt:P1431 wd:Q56005 .\n?x0 wdt:P155 wd:Q184843 .\n?x0 wdt:P162|wdt:P272 wd:Q361443\n}",
        "questionWithBrackets": "Which sequel of [Blade Runner] did [Ridley Scott] executive produce , [Bud Yorkin] produce , [Joe Walker] edit , and [Denis Villeneuve] direct"
    },
    {
        "questionIdx": 211449,
        "questionPatternModEntities": "Which sequel of M2 starred M0 and M1",
        "questionTemplate": "Which [ROLE_SIMPLE] of [entity] [VP_SIMPLE] [entity] and [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P1 M2\n}",
        "recursionDepth": 20,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P155 wd:Q2085 .\n?x0 wdt:P161 wd:Q967797 .\n?x0 wdt:P161 wd:Q2071\n}",
        "questionWithBrackets": "Which sequel of [Twin Peaks] starred [David Lynch] and [James Parks]"
    },
    {
        "questionIdx": 211450,
        "questionPatternModEntities": "Which sequel of M5 was executive produced by M0 , M1 , M2 , and M3 and was executive produced by M4",
        "questionTemplate": "Which [ROLE_SIMPLE] of [entity] was [VP_SIMPLE] by [entity] , [entity] , [entity] , and [entity] and was [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P0 M3 .\n?x0 P0 M4 .\n?x0 P1 M5\n}",
        "recursionDepth": 43,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1431 wd:Q43994 .\n?x0 wdt:P1431 wd:Q2829373 .\n?x0 wdt:P1431 wd:Q3106628 .\n?x0 wdt:P1431 wd:Q95125 .\n?x0 wdt:P1431 wd:Q365090 .\n?x0 wdt:P155 wd:Q1216882\n}",
        "questionWithBrackets": "Which sequel of [The Tracey Ullman Show] was executive produced by [Sam Simon] , [Ian Maxtone-Graham] , [James L. Brooks] , and [Matt Groening] and was executive produced by [Al Jean]"
    },
    {
        "questionIdx": 211451,
        "questionPatternModEntities": "Which sequel of M0 was executive produced by M1 's child",
        "questionTemplate": "Which [ROLE_SIMPLE] of [entity] was [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 M0 .\n?x1 P2 M1\n}",
        "recursionDepth": 22,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1431 ?x1 .\n?x0 wdt:P155 wd:Q6994125 .\n?x1 wdt:P749 wd:Q156913\n}",
        "questionWithBrackets": "Which sequel of [La Voz Kids] was executive produced by [Bertelsmann] 's child"
    },
    {
        "questionIdx": 211475,
        "questionPatternModEntities": "Which sequel of M0 was M1 's sequel",
        "questionTemplate": "Which [ROLE_SIMPLE] of [entity] was [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1\n}",
        "recursionDepth": 17,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P155 wd:Q5988 .\n?x0 wdt:P155 wd:Q1369780\n}",
        "questionWithBrackets": "Which sequel of [Jalasj\u00e4rvi] was [Jurva] 's sequel"
    },
    {
        "questionIdx": 211502,
        "questionPatternModEntities": "Which sequel of M3 did M0 , M1 , and M2 executive produce",
        "questionTemplate": "Which [ROLE_SIMPLE] of [entity] did [entity] , [entity] , and [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P1 M3\n}",
        "recursionDepth": 24,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1431 wd:Q8296 .\n?x0 wdt:P1431 wd:Q15785524 .\n?x0 wdt:P1431 wd:Q1038416 .\n?x0 wdt:P155 wd:Q274167\n}",
        "questionWithBrackets": "Which sequel of [The Exorcist] did [David Robinson] , [Rupert Wyatt] , and [Barbara Wall] executive produce"
    },
    {
        "questionIdx": 211513,
        "questionPatternModEntities": "Which sequel of M1 was executive produced by M0",
        "questionTemplate": "Which [ROLE_SIMPLE] of [entity] was [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1\n}",
        "recursionDepth": 19,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1431 wd:Q8877 .\n?x0 wdt:P155 wd:Q171453\n}",
        "questionWithBrackets": "Which sequel of [Transformers] was executive produced by [Steven Spielberg]"
    },
    {
        "questionIdx": 211531,
        "questionPatternModEntities": "Which sequel of M0 did M1 's parent write",
        "questionTemplate": "Which [ROLE_SIMPLE] of [entity] did [entity] 's [ROLE_SIMPLE] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 M0 .\n?x1 P2 M1\n}",
        "recursionDepth": 20,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P155 wd:Q3476301 .\n?x0 wdt:P58 ?x1 .\n?x1 wdt:P40|wdt:P355 wd:Q14623683\n}",
        "questionWithBrackets": "Which sequel of [The King's Demons] did [Polly Adams] 's parent write"
    },
    {
        "questionIdx": 211532,
        "questionPatternModEntities": "Which sequel of M1 did M0 distribute and produce",
        "questionTemplate": "Which [ROLE_SIMPLE] of [entity] did [entity] [VP_SIMPLE] and [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M0 .\n?x0 P2 M1\n}",
        "recursionDepth": 24,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P750 wd:Q9531 .\n?x0 wdt:P155 wd:Q18328139 .\n?x0 wdt:P162|wdt:P272 wd:Q9531\n}",
        "questionWithBrackets": "Which sequel of [Death in Heaven] did [BBC] distribute and produce"
    },
    {
        "questionIdx": 211535,
        "questionPatternModEntities": "Which sequel of M6 was written by M3 , M4 , and M5 and starred M0 , M1 , and M2",
        "questionTemplate": "Which [ROLE_SIMPLE] of [entity] was [VP_SIMPLE] by [entity] , [entity] , and [entity] and [VP_SIMPLE] [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P1 M3 .\n?x0 P1 M4 .\n?x0 P1 M5 .\n?x0 P2 M6\n}",
        "recursionDepth": 43,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P155 wd:Q5265299 .\n?x0 wdt:P161 wd:Q463051 .\n?x0 wdt:P161 wd:Q3017985 .\n?x0 wdt:P161 wd:Q439404 .\n?x0 wdt:P58 wd:Q42 .\n?x0 wdt:P58 wd:Q5593357 .\n?x0 wdt:P58 wd:Q4572048\n}",
        "questionWithBrackets": "Which sequel of [Destiny of the Daleks] was written by [David Fisher] , [Graham Williams] , and [Douglas Adams] and starred [David Graham] , [Lalla Ward] , and [Catherine Schell]"
    },
    {
        "questionIdx": 211551,
        "questionPatternModEntities": "Which sequel of M3 's prequel did M0 , M1 , and M2 produce",
        "questionTemplate": "Which [ROLE_SIMPLE] of [entity] 's [ROLE_SIMPLE] did [entity] , [entity] , and [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P1 ?x1 .\n?x1 P2 M3\n}",
        "recursionDepth": 27,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P155 ?x1 .\n?x0 wdt:P162|wdt:P272 wd:Q142 .\n?x0 wdt:P162|wdt:P272 wd:Q3016068 .\n?x0 wdt:P162|wdt:P272 wd:Q3288538 .\n?x1 wdt:P156 wd:Q1814821\n}",
        "questionWithBrackets": "Which sequel of [Go West] 's prequel did [France] , [Marc du Pontavice] , and [Dargaud Media] produce"
    },
    {
        "questionIdx": 211555,
        "questionPatternModEntities": "Which sequel of M1 was executive produced and produced by M0",
        "questionTemplate": "Which [ROLE_SIMPLE] of [entity] was [VP_SIMPLE] and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M0 .\n?x0 P2 M1\n}",
        "recursionDepth": 25,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1431 wd:Q43994 .\n?x0 wdt:P155 wd:Q605111 .\n?x0 wdt:P162|wdt:P272 wd:Q43994\n}",
        "questionWithBrackets": "Which sequel of [The Simpsons shorts] was executive produced and produced by [Matt Groening]"
    },
    {
        "questionIdx": 211583,
        "questionPatternModEntities": "Which sequel of M2 did M0 and M1 distribute",
        "questionTemplate": "Which [ROLE_SIMPLE] of [entity] did [entity] and [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P1 M2\n}",
        "recursionDepth": 20,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P750 wd:Q8093 .\n?x0 wdt:P750 wd:Q3070866 .\n?x0 wdt:P155 wd:Q2722404\n}",
        "questionWithBrackets": "Which sequel of [Game & Watch Gallery 2] did [Nintendo eShop] and [Nintendo] distribute"
    },
    {
        "questionIdx": 211629,
        "questionPatternModEntities": "Which sequel of a prequel of M1 did M0 produce",
        "questionTemplate": "Which [ROLE_SIMPLE] of a [ROLE_SIMPLE] of [entity] did [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 ?x1 .\n?x1 P2 M1\n}",
        "recursionDepth": 22,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P155 ?x1 .\n?x0 wdt:P162|wdt:P272 wd:Q7414 .\n?x1 wdt:P156 wd:Q1193937\n}",
        "questionWithBrackets": "Which sequel of a prequel of [The Hunchback of Notre Dame II] did [The Walt Disney Company] produce"
    },
    {
        "questionIdx": 211630,
        "questionPatternModEntities": "Which sequel of a sequel of M2 did M0 and M1 edit",
        "questionTemplate": "Which [ROLE_SIMPLE] of a [ROLE_SIMPLE] of [entity] did [entity] and [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P1 ?x1 .\n?x1 P1 M2\n}",
        "recursionDepth": 26,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P1040 wd:Q489831 .\n?x0 wdt:P1040 wd:Q354010 .\n?x0 wdt:P155 ?x1 .\n?x1 wdt:P155 wd:Q747877\n}",
        "questionWithBrackets": "Which sequel of a sequel of [Clerks] did [Scott Mosier] and [Kevin Smith] edit"
    },
    {
        "questionIdx": 211631,
        "questionPatternModEntities": "Which sequel of a sequel of M1 was produced by , written by , edited by , and directed by M0",
        "questionTemplate": "Which [ROLE_SIMPLE] of a [ROLE_SIMPLE] of [entity] was [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M0 .\n?x0 P2 M0 .\n?x0 P3 ?x1 .\n?x0 P4 M0 .\n?x1 P3 M1\n}",
        "recursionDepth": 44,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P57 wd:Q47284 .\n?x0 wdt:P1040 wd:Q47284 .\n?x0 wdt:P155 ?x1 .\n?x0 wdt:P162|wdt:P272 wd:Q47284 .\n?x0 wdt:P58 wd:Q47284 .\n?x1 wdt:P155 wd:Q550581\n}",
        "questionWithBrackets": "Which sequel of a sequel of [Spy Kids] was produced by , written by , edited by , and directed by [Robert Rodriguez]"
    },
    {
        "questionIdx": 211646,
        "questionPatternModEntities": "Which sibling and parent of M0 was M1 's spouse",
        "questionTemplate": "Which [ROLE_SIMPLE] and [ROLE_SIMPLE] of [entity] was [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M0 .\n?x0 P2 M1 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x0 != M1 )\n}",
        "recursionDepth": 22,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q493 .\n?x0 wdt:P3373 wd:Q493 .\n?x0 wdt:P26 wd:Q17148576 .\nFILTER ( ?x0 != wd:Q17148576 ) .\nFILTER ( ?x0 != wd:Q493 )\n}",
        "questionWithBrackets": "Which sibling and parent of [Arthur Rimbaud] was [Vitalie Rimbaud] 's spouse"
    },
    {
        "questionIdx": 211648,
        "questionPatternModEntities": "Which sibling and parent of M0 was a sibling and spouse of M1",
        "questionTemplate": "Which [ROLE_SIMPLE] and [ROLE_SIMPLE] of [entity] was a [ROLE_SIMPLE] and [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P1 M0 .\n?x0 P2 M1 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x0 != M1 ) .\nFILTER ( ?x0 != M1 )\n}",
        "recursionDepth": 29,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q770194 .\n?x0 wdt:P3373 wd:Q12154 .\n?x0 wdt:P3373 wd:Q770194 .\n?x0 wdt:P26 wd:Q12154 .\nFILTER ( ?x0 != wd:Q12154 ) .\nFILTER ( ?x0 != wd:Q12154 ) .\nFILTER ( ?x0 != wd:Q770194 )\n}",
        "questionWithBrackets": "Which sibling and parent of [Ankhesenpaaten Tasherit] was a sibling and spouse of [Tutankhamon]"
    },
    {
        "questionIdx": 211654,
        "questionPatternModEntities": "Which sibling and parent of M0 married M1",
        "questionTemplate": "Which [ROLE_SIMPLE] and [ROLE_SIMPLE] of [entity] [VP_SIMPLE] [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M0 .\n?x0 P2 M1 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x0 != M1 )\n}",
        "recursionDepth": 21,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q493 .\n?x0 wdt:P3373 wd:Q493 .\n?x0 wdt:P26 wd:Q17148576 .\nFILTER ( ?x0 != wd:Q17148576 ) .\nFILTER ( ?x0 != wd:Q493 )\n}",
        "questionWithBrackets": "Which sibling and parent of [Arthur Rimbaud] married [Vitalie Rimbaud]"
    },
    {
        "questionIdx": 211659,
        "questionPatternModEntities": "Which sibling and parent of a spouse of M1 married M0",
        "questionTemplate": "Which [ROLE_SIMPLE] and [ROLE_SIMPLE] of a [ROLE_SIMPLE] of [entity] [VP_SIMPLE] [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 M0 .\n?x1 P2 M1 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x1 != M1 )\n}",
        "recursionDepth": 27,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P40|wdt:P355 ?x1 .\n?x0 wdt:P3373 ?x1 .\n?x0 wdt:P26 wd:Q39991 .\n?x1 wdt:P26 wd:Q632595 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x0 != wd:Q39991 ) .\nFILTER ( ?x1 != wd:Q632595 )\n}",
        "questionWithBrackets": "Which sibling and parent of a spouse of [Archelaus] married [Ptolemy XII Auletes]"
    },
    {
        "questionIdx": 211663,
        "questionPatternModEntities": "Which sibling and spouse of M0 did M1 , M2 , M3 , and M4 marry",
        "questionTemplate": "Which [ROLE_SIMPLE] and [ROLE_SIMPLE] of [entity] did [entity] , [entity] , [entity] , and [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\n?x0 P1 M3 .\n?x0 P1 M4 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x0 != M1 ) .\nFILTER ( ?x0 != M2 ) .\nFILTER ( ?x0 != M3 ) .\nFILTER ( ?x0 != M4 )\n}",
        "recursionDepth": 31,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P3373 wd:Q277524 .\n?x0 wdt:P26 wd:Q277524 .\n?x0 wdt:P26 wd:Q19280 .\n?x0 wdt:P26 wd:Q19281 .\n?x0 wdt:P26 wd:Q19299 .\n?x0 wdt:P26 wd:Q19284 .\nFILTER ( ?x0 != wd:Q277524 ) .\nFILTER ( ?x0 != wd:Q277524 ) .\nFILTER ( ?x0 != wd:Q19280 ) .\nFILTER ( ?x0 != wd:Q19281 ) .\nFILTER ( ?x0 != wd:Q19299 ) .\nFILTER ( ?x0 != wd:Q19284 )\n}",
        "questionWithBrackets": "Which sibling and spouse of [Neferu II] did [Henhenet] , [Ashayet] , [Tem] , and [Kemsit] marry"
    },
    {
        "questionIdx": 211664,
        "questionPatternModEntities": "Which sibling and spouse of M0 married M1",
        "questionTemplate": "Which [ROLE_SIMPLE] and [ROLE_SIMPLE] of [entity] [VP_SIMPLE] [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x0 != M1 )\n}",
        "recursionDepth": 21,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P3373 wd:Q3340 .\n?x0 wdt:P26 wd:Q296446 .\n?x0 wdt:P26 wd:Q3340 .\nFILTER ( ?x0 != wd:Q296446 ) .\nFILTER ( ?x0 != wd:Q3340 ) .\nFILTER ( ?x0 != wd:Q3340 )\n}",
        "questionWithBrackets": "Which sibling and spouse of [Ptolemy IX Lathyros] married [Antiochus IX Cyzicenus]"
    },
    {
        "questionIdx": 211686,
        "questionPatternModEntities": "Which sibling of M0 was M1 's sibling , spouse , and parent",
        "questionTemplate": "Which [ROLE_SIMPLE] of [entity] was [entity] 's [ROLE_SIMPLE] , [ROLE_SIMPLE] , and [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P1 M1 .\n?x0 P2 M1 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x0 != M1 ) .\nFILTER ( ?x0 != M1 )\n}",
        "recursionDepth": 26,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q443473 .\n?x0 wdt:P3373 wd:Q443473 .\n?x0 wdt:P3373 wd:Q273990 .\n?x0 wdt:P26 wd:Q443473 .\nFILTER ( ?x0 != wd:Q443473 ) .\nFILTER ( ?x0 != wd:Q443473 ) .\nFILTER ( ?x0 != wd:Q273990 )\n}",
        "questionWithBrackets": "Which sibling of [Princess Tia] was [Henutmire] 's sibling , spouse , and parent"
    },
    {
        "questionIdx": 211691,
        "questionPatternModEntities": "Which sibling of M0 did a spouse of M2 marry and M1 marry",
        "questionTemplate": "Which [ROLE_SIMPLE] of [entity] did a [ROLE_SIMPLE] of [entity] [VP_SIMPLE] and [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 ?x1 .\n?x0 P1 M1 .\n?x1 P1 M2 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x0 != M1 ) .\nFILTER ( ?x1 != M2 )\n}",
        "recursionDepth": 33,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P3373 wd:Q1035 .\n?x0 wdt:P26 ?x1 .\n?x0 wdt:P26 wd:Q16063415 .\n?x1 wdt:P26 wd:Q55363478 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x0 != wd:Q16063415 ) .\nFILTER ( ?x0 != wd:Q1035 ) .\nFILTER ( ?x1 != wd:Q55363478 )\n}",
        "questionWithBrackets": "Which sibling of [Charles Darwin] did a spouse of [Caroline Darwin] marry and [Josiah Wedgwood III] marry"
    },
    {
        "questionIdx": 211697,
        "questionPatternModEntities": "Which sibling of M0 was influenced by M1 , M2 , M3 , M4 , and M5 and was influenced by M6",
        "questionTemplate": "Which [ROLE_SIMPLE] of [entity] was [VP_SIMPLE] by [entity] , [entity] , [entity] , [entity] , and [entity] and was [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\n?x0 P1 M3 .\n?x0 P1 M4 .\n?x0 P1 M5 .\n?x0 P1 M6 .\nFILTER ( ?x0 != M0 )\n}",
        "recursionDepth": 44,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P737 wd:Q868 .\n?x0 wdt:P737 wd:Q454734 .\n?x0 wdt:P737 wd:Q214565 .\n?x0 wdt:P737 wd:Q859 .\n?x0 wdt:P737 wd:Q892 .\n?x0 wdt:P737 wd:Q19008 .\n?x0 wdt:P3373 wd:Q3038321 .\nFILTER ( ?x0 != wd:Q3038321 )\n}",
        "questionWithBrackets": "Which sibling of [Warren Lewis] was influenced by [Plato] , [Arthur Balfour] , [Aristotle] , [Evelyn Underhill] , and [Beatrix Potter] and was influenced by [J.\u00a0R.\u00a0R. Tolkien]"
    },
    {
        "questionIdx": 211698,
        "questionPatternModEntities": "Which sibling of M0 was influenced by M1 , M2 , and M3 , influenced by M4 and M5 , and influenced by M6",
        "questionTemplate": "Which [ROLE_SIMPLE] of [entity] was [VP_SIMPLE] by [entity] , [entity] , and [entity] , [VP_SIMPLE] by [entity] and [entity] , and [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\n?x0 P1 M3 .\n?x0 P1 M4 .\n?x0 P1 M5 .\n?x0 P1 M6 .\nFILTER ( ?x0 != M0 )\n}",
        "recursionDepth": 48,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P737 wd:Q502 .\n?x0 wdt:P737 wd:Q78491 .\n?x0 wdt:P737 wd:Q1035 .\n?x0 wdt:P737 wd:Q1290 .\n?x0 wdt:P737 wd:Q859 .\n?x0 wdt:P737 wd:Q1399 .\n?x0 wdt:P3373 wd:Q77377 .\nFILTER ( ?x0 != wd:Q77377 )\n}",
        "questionWithBrackets": "Which sibling of [Elisabeth F\u00f6rster-Nietzsche] was influenced by [Niccol\u00f2 Machiavelli] , [Charles Darwin] , and [Plato] , influenced by [Blaise Pascal] and [Stefan Zweig] , and influenced by [Stendhal]"
    },
    {
        "questionIdx": 211705,
        "questionPatternModEntities": "Which sibling of M0 married M3 , M4 , M5 , and M6 , was influenced by M1 , and was influenced by M2",
        "questionTemplate": "Which [ROLE_SIMPLE] of [entity] [VP_SIMPLE] [entity] , [entity] , [entity] , and [entity] , was [VP_SIMPLE] by [entity] , and was [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\n?x0 P2 M3 .\n?x0 P2 M4 .\n?x0 P2 M5 .\n?x0 P2 M6 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x0 != M3 ) .\nFILTER ( ?x0 != M4 ) .\nFILTER ( ?x0 != M5 ) .\nFILTER ( ?x0 != M6 )\n}",
        "recursionDepth": 50,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P737 wd:Q9047 .\n?x0 wdt:P737 wd:Q191029 .\n?x0 wdt:P3373 wd:Q336699 .\n?x0 wdt:P26 wd:Q5338545 .\n?x0 wdt:P26 wd:Q4355033 .\n?x0 wdt:P26 wd:Q4738704 .\n?x0 wdt:P26 wd:Q7145817 .\nFILTER ( ?x0 != wd:Q5338545 ) .\nFILTER ( ?x0 != wd:Q4355033 ) .\nFILTER ( ?x0 != wd:Q4738704 ) .\nFILTER ( ?x0 != wd:Q336699 ) .\nFILTER ( ?x0 != wd:Q7145817 )\n}",
        "questionWithBrackets": "Which sibling of [Frank Russell, 2nd Earl Russell] married [Alys Pearsall Smith] , [Edith Finch Russell] , [Dora Russell] , and [Patricia Russell, Countess Russell] , was influenced by [Gottfried Wilhelm Leibniz] , and was influenced by [Giuseppe Peano]"
    },
    {
        "questionIdx": 211710,
        "questionPatternModEntities": "Which sibling of M0 was a German sibling of M1",
        "questionTemplate": "Which [ROLE_SIMPLE] of [entity] was a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P1 M2 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x0 != M1 )\n}",
        "recursionDepth": 24,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P27 wd:Q183 .\n?x0 wdt:P3373 wd:Q49742 .\n?x0 wdt:P3373 wd:Q99859 .\nFILTER ( ?x0 != wd:Q49742 ) .\nFILTER ( ?x0 != wd:Q99859 )\n}",
        "questionWithBrackets": "Which sibling of [Aloys Kontarsky] was a German sibling of [Bernhard Kontarsky]"
    },
    {
        "questionIdx": 211735,
        "questionPatternModEntities": "Which sibling of M0 was a sibling of M1",
        "questionTemplate": "Which [ROLE_SIMPLE] of [entity] was a [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x0 != M1 )\n}",
        "recursionDepth": 19,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P3373 wd:Q3008 .\n?x0 wdt:P3373 wd:Q975209 .\nFILTER ( ?x0 != wd:Q3008 ) .\nFILTER ( ?x0 != wd:Q975209 )\n}",
        "questionWithBrackets": "Which sibling of [Mike Oldfield] was a sibling of [Terry Oldfield]"
    },
    {
        "questionIdx": 211745,
        "questionPatternModEntities": "Which sibling of M1 's employee was M0 's parent",
        "questionTemplate": "Which [ROLE_SIMPLE] of [entity] 's [ROLE_SIMPLE] was [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 M0 .\n?x1 P2 M1 .\nFILTER ( ?x0 != ?x1 )\n}",
        "recursionDepth": 21,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q27899325 .\n?x0 wdt:P3373 ?x1 .\n?x1 wdt:P108 wd:Q764850 .\nFILTER ( ?x0 != ?x1 )\n}",
        "questionWithBrackets": "Which sibling of [Bain & Company] 's employee was [Ronna Romney McDaniel] 's parent"
    },
    {
        "questionIdx": 211854,
        "questionPatternModEntities": "Which sibling of M3 's sibling did M0 , M1 , and M2 marry",
        "questionTemplate": "Which [ROLE_SIMPLE] of [entity] 's [ROLE_SIMPLE] did [entity] , [entity] , and [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\n?x1 P0 M3 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x0 != M1 ) .\nFILTER ( ?x0 != M2 ) .\nFILTER ( ?x1 != M3 )\n}",
        "recursionDepth": 27,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P3373 ?x1 .\n?x0 wdt:P26 wd:Q105961124 .\n?x0 wdt:P26 wd:Q105961136 .\n?x0 wdt:P26 wd:Q75764491 .\n?x1 wdt:P3373 wd:Q6219733 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x0 != wd:Q105961124 ) .\nFILTER ( ?x0 != wd:Q105961136 ) .\nFILTER ( ?x0 != wd:Q75764491 ) .\nFILTER ( ?x1 != wd:Q6219733 )\n}",
        "questionWithBrackets": "Which sibling of [John Augustine Washington] 's sibling did [Lucy Chapman] , [Jane Champe] , and [Mildred Thornton] marry"
    },
    {
        "questionIdx": 211872,
        "questionPatternModEntities": "Which sibling of M0 married M2 , was influenced by M1 , and married M3 , M4 , and M5",
        "questionTemplate": "Which [ROLE_SIMPLE] of [entity] [VP_SIMPLE] [entity] , was [VP_SIMPLE] by [entity] , and [VP_SIMPLE] [entity] , [entity] , and [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P2 M2 .\n?x0 P2 M3 .\n?x0 P2 M4 .\n?x0 P2 M5 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x0 != M2 ) .\nFILTER ( ?x0 != M3 ) .\nFILTER ( ?x0 != M4 ) .\nFILTER ( ?x0 != M5 )\n}",
        "recursionDepth": 45,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P737 wd:Q517 .\n?x0 wdt:P3373 wd:Q2976186 .\n?x0 wdt:P26 wd:Q3051180 .\n?x0 wdt:P26 wd:Q91157930 .\n?x0 wdt:P26 wd:Q20057746 .\n?x0 wdt:P26 wd:Q2348210 .\nFILTER ( ?x0 != wd:Q3051180 ) .\nFILTER ( ?x0 != wd:Q91157930 ) .\nFILTER ( ?x0 != wd:Q20057746 ) .\nFILTER ( ?x0 != wd:Q2348210 ) .\nFILTER ( ?x0 != wd:Q2976186 )\n}",
        "questionWithBrackets": "Which sibling of [Hyrum Smith] married [Emily Dow Partridge] , was influenced by [Napoleon] , and married [Emma Smith] , [Eliza Roxcy Snow] , and [Lucinda Morgan Harrisov\u00e1]"
    },
    {
        "questionIdx": 211890,
        "questionPatternModEntities": "Which sibling of M0 was M1 's male actor",
        "questionTemplate": "Which [ROLE_SIMPLE] of [entity] was [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P2 M2 .\nFILTER ( ?x0 != M0 )\n}",
        "recursionDepth": 22,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P453 wd:Q5815108 .\n?x0 wdt:P21 wd:Q6581097 .\n?x0 wdt:P3373 wd:Q3756757 .\nFILTER ( ?x0 != wd:Q3756757 )\n}",
        "questionWithBrackets": "Which sibling of [Gabriella Pavarotti] was [Duke of Mantua] 's male actor"
    },
    {
        "questionIdx": 211919,
        "questionPatternModEntities": "Which sibling of M0 was M1 's spouse",
        "questionTemplate": "Which [ROLE_SIMPLE] of [entity] was [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x0 != M1 )\n}",
        "recursionDepth": 17,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P3373 wd:Q859 .\n?x0 wdt:P26 wd:Q1378512 .\nFILTER ( ?x0 != wd:Q859 ) .\nFILTER ( ?x0 != wd:Q1378512 )\n}",
        "questionWithBrackets": "Which sibling of [Plato] was [Eurymedon of Myrrhinus] 's spouse"
    },
    {
        "questionIdx": 211947,
        "questionPatternModEntities": "Which sibling of M2 's employee was M0 's Canadian employee",
        "questionTemplate": "Which [ROLE_SIMPLE] of [entity] 's [ROLE_SIMPLE] was [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 M0 .\n?x0 P2 M1 .\n?x1 P1 M2 .\nFILTER ( ?x0 != ?x1 )\n}",
        "recursionDepth": 26,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P108 wd:Q579321 .\n?x0 wdt:P27 wd:Q16 .\n?x0 wdt:P3373 ?x1 .\n?x1 wdt:P108 wd:Q122453 .\nFILTER ( ?x0 != ?x1 )\n}",
        "questionWithBrackets": "Which sibling of [University of Stuttgart] 's employee was [Dalhousie University] 's Canadian employee"
    },
    {
        "questionIdx": 211954,
        "questionPatternModEntities": "Which sibling of M0 was M1 's parent",
        "questionTemplate": "Which [ROLE_SIMPLE] of [entity] was [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M0 )\n}",
        "recursionDepth": 17,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q613587 .\n?x0 wdt:P3373 wd:Q5070 .\nFILTER ( ?x0 != wd:Q5070 )\n}",
        "questionWithBrackets": "Which sibling of [Emperor Taizong of Jin] was [Wanyan Zongwang] 's parent"
    },
    {
        "questionIdx": 211961,
        "questionPatternModEntities": "Which sibling of M1 's sibling did M0 marry",
        "questionTemplate": "Which [ROLE_SIMPLE] of [entity] 's [ROLE_SIMPLE] did [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 M0 .\n?x1 P0 M1 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x1 != M1 )\n}",
        "recursionDepth": 20,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P3373 ?x1 .\n?x0 wdt:P26 wd:Q632595 .\n?x1 wdt:P3373 wd:Q39938 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x0 != wd:Q632595 ) .\nFILTER ( ?x1 != wd:Q39938 )\n}",
        "questionWithBrackets": "Which sibling of [Ptolemy XIII Theos Philopator] 's sibling did [Archelaus] marry"
    },
    {
        "questionIdx": 211963,
        "questionPatternModEntities": "Which sibling of M0 did M1 marry",
        "questionTemplate": "Which [ROLE_SIMPLE] of [entity] did [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x0 != M1 )\n}",
        "recursionDepth": 16,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P3373 wd:Q939 .\n?x0 wdt:P26 wd:Q116972 .\nFILTER ( ?x0 != wd:Q116972 ) .\nFILTER ( ?x0 != wd:Q939 )\n}",
        "questionWithBrackets": "Which sibling of [Pedro I of Brazil] did [Nuno Jos\u00e9 Severo de Mendo\u00e7a Rolim de Moura Barreto, 1st Duke of Loul\u00e9] marry"
    },
    {
        "questionIdx": 211982,
        "questionPatternModEntities": "Which sibling of M0 was M1 's sibling and spouse",
        "questionTemplate": "Which [ROLE_SIMPLE] of [entity] was [entity] 's [ROLE_SIMPLE] and [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x0 != M1 ) .\nFILTER ( ?x0 != M1 )\n}",
        "recursionDepth": 22,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P3373 wd:Q3350 .\n?x0 wdt:P3373 wd:Q39952 .\n?x0 wdt:P26 wd:Q3350 .\nFILTER ( ?x0 != wd:Q3350 ) .\nFILTER ( ?x0 != wd:Q3350 ) .\nFILTER ( ?x0 != wd:Q39952 )\n}",
        "questionWithBrackets": "Which sibling of [Ptolemy VI] was [Ptolemy VIII Physcon] 's sibling and spouse"
    },
    {
        "questionIdx": 211986,
        "questionPatternModEntities": "Which sibling of M0 was employed by M1 , M2 , M3 , and M4 and was employed by M5 and M6",
        "questionTemplate": "Which [ROLE_SIMPLE] of [entity] was [VP_SIMPLE] by [entity] , [entity] , [entity] , and [entity] and was [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\n?x0 P1 M3 .\n?x0 P1 M4 .\n?x0 P1 M5 .\n?x0 P1 M6 .\nFILTER ( ?x0 != M0 )\n}",
        "recursionDepth": 45,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P108 wd:Q3090777 .\n?x0 wdt:P108 wd:Q1809440 .\n?x0 wdt:P108 wd:Q3562346 .\n?x0 wdt:P108 wd:Q3204265 .\n?x0 wdt:P108 wd:Q3234238 .\n?x0 wdt:P108 wd:Q3209222 .\n?x0 wdt:P3373 wd:Q13524 .\nFILTER ( ?x0 != wd:Q13524 )\n}",
        "questionWithBrackets": "Which sibling of [Alfred Sauvy] was employed by [Paris-Soir] , [La France au travail] , [Voil\u00e0] , and [No label defined] and was employed by [Vu] and [L'Intransigeant]"
    },
    {
        "questionIdx": 212173,
        "questionPatternModEntities": "Which sibling , parent , and spouse of M0 did M1 and M2 marry",
        "questionTemplate": "Which [ROLE_SIMPLE] , [ROLE_SIMPLE] , and [ROLE_SIMPLE] of [entity] did [entity] and [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M0 .\n?x0 P2 M0 .\n?x0 P2 M1 .\n?x0 P2 M2 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x0 != M1 ) .\nFILTER ( ?x0 != M2 )\n}",
        "recursionDepth": 29,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q443473 .\n?x0 wdt:P3373 wd:Q443473 .\n?x0 wdt:P26 wd:Q210535 .\n?x0 wdt:P26 wd:Q443473 .\n?x0 wdt:P26 wd:Q256430 .\nFILTER ( ?x0 != wd:Q210535 ) .\nFILTER ( ?x0 != wd:Q443473 ) .\nFILTER ( ?x0 != wd:Q443473 ) .\nFILTER ( ?x0 != wd:Q256430 )\n}",
        "questionWithBrackets": "Which sibling , parent , and spouse of [Henutmire] did [Maathorneferure] and [Nefertarilllala] marry"
    },
    {
        "questionIdx": 212174,
        "questionPatternModEntities": "Which sibling , parent , and spouse of M0 was M1 's sibling",
        "questionTemplate": "Which [ROLE_SIMPLE] , [ROLE_SIMPLE] , and [ROLE_SIMPLE] of [entity] was [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P1 M0 .\n?x0 P2 M0 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x0 != M1 )\n}",
        "recursionDepth": 26,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q443473 .\n?x0 wdt:P3373 wd:Q443473 .\n?x0 wdt:P3373 wd:Q273990 .\n?x0 wdt:P26 wd:Q443473 .\nFILTER ( ?x0 != wd:Q443473 ) .\nFILTER ( ?x0 != wd:Q443473 ) .\nFILTER ( ?x0 != wd:Q273990 )\n}",
        "questionWithBrackets": "Which sibling , parent , and spouse of [Henutmire] was [Princess Tia] 's sibling"
    },
    {
        "questionIdx": 212195,
        "questionPatternModEntities": "Which spouse and parent of M1 was M0 's sibling",
        "questionTemplate": "Which [ROLE_SIMPLE] and [ROLE_SIMPLE] of [entity] was [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P2 M1 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x0 != M1 )\n}",
        "recursionDepth": 22,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q40020 .\n?x0 wdt:P3373 wd:Q40242 .\n?x0 wdt:P26 wd:Q40020 .\nFILTER ( ?x0 != wd:Q40020 ) .\nFILTER ( ?x0 != wd:Q40242 )\n}",
        "questionWithBrackets": "Which spouse and parent of [Cleopatra VI of Egypt] was [Cleopatra V or VI of Egypt] 's sibling"
    },
    {
        "questionIdx": 212202,
        "questionPatternModEntities": "Which spouse and parent of M0 did M1 marry",
        "questionTemplate": "Which [ROLE_SIMPLE] and [ROLE_SIMPLE] of [entity] did [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x0 != M1 )\n}",
        "recursionDepth": 21,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q9304 .\n?x0 wdt:P26 wd:Q9304 .\n?x0 wdt:P26 wd:Q9295 .\nFILTER ( ?x0 != wd:Q9304 ) .\nFILTER ( ?x0 != wd:Q9295 )\n}",
        "questionWithBrackets": "Which spouse and parent of [Dayan Khan] did [Manduul Khan] marry"
    },
    {
        "questionIdx": 212203,
        "questionPatternModEntities": "Which spouse and parent of M1 was M0 's sibling and spouse",
        "questionTemplate": "Which [ROLE_SIMPLE] and [ROLE_SIMPLE] of [entity] was [entity] 's [ROLE_SIMPLE] and [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P2 M0 .\n?x0 P2 M1 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x0 != M1 )\n}",
        "recursionDepth": 27,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q40020 .\n?x0 wdt:P3373 wd:Q40242 .\n?x0 wdt:P26 wd:Q40020 .\n?x0 wdt:P26 wd:Q40242 .\nFILTER ( ?x0 != wd:Q40020 ) .\nFILTER ( ?x0 != wd:Q40242 ) .\nFILTER ( ?x0 != wd:Q40242 )\n}",
        "questionWithBrackets": "Which spouse and parent of [Cleopatra VI of Egypt] was [Cleopatra V or VI of Egypt] 's sibling and spouse"
    },
    {
        "questionIdx": 212209,
        "questionPatternModEntities": "Which spouse and sibling of M0 married M1",
        "questionTemplate": "Which [ROLE_SIMPLE] and [ROLE_SIMPLE] of [entity] [VP_SIMPLE] [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x0 != M1 )\n}",
        "recursionDepth": 21,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P3373 wd:Q3356 .\n?x0 wdt:P26 wd:Q3356 .\n?x0 wdt:P26 wd:Q2045778 .\nFILTER ( ?x0 != wd:Q3356 ) .\nFILTER ( ?x0 != wd:Q3356 ) .\nFILTER ( ?x0 != wd:Q2045778 )\n}",
        "questionWithBrackets": "Which spouse and sibling of [Antiochus IV Epiphanes] married [Antiochus]"
    },
    {
        "questionIdx": 212210,
        "questionPatternModEntities": "Which spouse and sibling of M0 did M1 and M2 marry",
        "questionTemplate": "Which [ROLE_SIMPLE] and [ROLE_SIMPLE] of [entity] did [entity] and [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x0 != M1 ) .\nFILTER ( ?x0 != M2 )\n}",
        "recursionDepth": 25,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P3373 wd:Q3362 .\n?x0 wdt:P26 wd:Q3356 .\n?x0 wdt:P26 wd:Q2045778 .\n?x0 wdt:P26 wd:Q3362 .\nFILTER ( ?x0 != wd:Q3356 ) .\nFILTER ( ?x0 != wd:Q2045778 ) .\nFILTER ( ?x0 != wd:Q3362 ) .\nFILTER ( ?x0 != wd:Q3362 )\n}",
        "questionWithBrackets": "Which spouse and sibling of [Seleucus IV Philopator] did [Antiochus IV Epiphanes] and [Antiochus] marry"
    },
    {
        "questionIdx": 212217,
        "questionPatternModEntities": "Which spouse and sibling of M0 was a female spouse of M2",
        "questionTemplate": "Which [ROLE_SIMPLE] and [ROLE_SIMPLE] of [entity] was a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P2 M0 .\n?x0 P2 M2 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x0 != M2 )\n}",
        "recursionDepth": 29,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P21 wd:Q6581072 .\n?x0 wdt:P3373 wd:Q3340 .\n?x0 wdt:P26 wd:Q296446 .\n?x0 wdt:P26 wd:Q3340 .\nFILTER ( ?x0 != wd:Q296446 ) .\nFILTER ( ?x0 != wd:Q3340 ) .\nFILTER ( ?x0 != wd:Q3340 )\n}",
        "questionWithBrackets": "Which spouse and sibling of [Ptolemy IX Lathyros] was a female spouse of [Antiochus IX Cyzicenus]"
    },
    {
        "questionIdx": 212218,
        "questionPatternModEntities": "Which spouse and sibling of M0 did M1 marry",
        "questionTemplate": "Which [ROLE_SIMPLE] and [ROLE_SIMPLE] of [entity] did [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x0 != M1 )\n}",
        "recursionDepth": 21,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P3373 wd:Q3340 .\n?x0 wdt:P26 wd:Q296446 .\n?x0 wdt:P26 wd:Q3340 .\nFILTER ( ?x0 != wd:Q296446 ) .\nFILTER ( ?x0 != wd:Q3340 ) .\nFILTER ( ?x0 != wd:Q3340 )\n}",
        "questionWithBrackets": "Which spouse and sibling of [Ptolemy IX Lathyros] did [Antiochus IX Cyzicenus] marry"
    },
    {
        "questionIdx": 212240,
        "questionPatternModEntities": "Which spouse of M1 was employed by M0",
        "questionTemplate": "Which [ROLE_SIMPLE] of [entity] was [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M1 )\n}",
        "recursionDepth": 17,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P108 wd:Q76845 .\n?x0 wdt:P26 wd:Q2607 .\nFILTER ( ?x0 != wd:Q2607 )\n}",
        "questionWithBrackets": "Which spouse of [Erich Honecker] was employed by [Free German Youth]"
    },
    {
        "questionIdx": 212259,
        "questionPatternModEntities": "Which spouse of M1 was M0 's sibling",
        "questionTemplate": "Which [ROLE_SIMPLE] of [entity] was [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x0 != M1 )\n}",
        "recursionDepth": 17,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P3373 wd:Q2677 .\n?x0 wdt:P26 wd:Q152099 .\nFILTER ( ?x0 != wd:Q152099 ) .\nFILTER ( ?x0 != wd:Q2677 )\n}",
        "questionWithBrackets": "Which spouse of [Constantine I of Greece] was [Wilhelm II] 's sibling"
    },
    {
        "questionIdx": 212267,
        "questionPatternModEntities": "Which spouse of M1 's employee was influenced by M0",
        "questionTemplate": "Which [ROLE_SIMPLE] of [entity] 's [ROLE_SIMPLE] was [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 ?x1 .\n?x1 P2 M1 .\nFILTER ( ?x0 != ?x1 )\n}",
        "recursionDepth": 22,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P737 wd:Q517 .\n?x0 wdt:P26 ?x1 .\n?x1 wdt:P108 wd:Q1044455 .\nFILTER ( ?x0 != ?x1 )\n}",
        "questionWithBrackets": "Which spouse of [Caroline Bertuch] 's employee was influenced by [Napoleon]"
    },
    {
        "questionIdx": 212271,
        "questionPatternModEntities": "Which spouse of M2 was influenced by M0 and M1",
        "questionTemplate": "Which [ROLE_SIMPLE] of [entity] was [VP_SIMPLE] by [entity] and [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P1 M2 .\nFILTER ( ?x0 != M2 )\n}",
        "recursionDepth": 21,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P737 wd:Q303 .\n?x0 wdt:P737 wd:Q1438730 .\n?x0 wdt:P26 wd:Q32045 .\nFILTER ( ?x0 != wd:Q32045 )\n}",
        "questionWithBrackets": "Which spouse of [Liam Hemsworth] was influenced by [OneRepublic] and [Elvis Presley]"
    },
    {
        "questionIdx": 212276,
        "questionPatternModEntities": "Which spouse of M0 married M1 's parent",
        "questionTemplate": "Which [ROLE_SIMPLE] of [entity] [VP_SIMPLE] [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P0 M0 .\n?x1 P1 M1 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x0 != M0 )\n}",
        "recursionDepth": 20,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P26 ?x1 .\n?x0 wdt:P26 wd:Q1417 .\n?x1 wdt:P40|wdt:P355 wd:Q1216270 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x0 != wd:Q1417 )\n}",
        "questionWithBrackets": "Which spouse of [Vitellius] married [Vitellius Petronianus] 's parent"
    },
    {
        "questionIdx": 212284,
        "questionPatternModEntities": "Which spouse of M0 was a spouse of M1",
        "questionTemplate": "Which [ROLE_SIMPLE] of [entity] was a [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x0 != M1 )\n}",
        "recursionDepth": 19,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P26 wd:Q1203 .\n?x0 wdt:P26 wd:Q1190476 .\nFILTER ( ?x0 != wd:Q1203 ) .\nFILTER ( ?x0 != wd:Q1190476 )\n}",
        "questionWithBrackets": "Which spouse of [John Lennon] was a spouse of [Toshi Ichiyanagi]"
    },
    {
        "questionIdx": 212285,
        "questionPatternModEntities": "Which spouse of M0 did M1 and M2 marry",
        "questionTemplate": "Which [ROLE_SIMPLE] of [entity] did [entity] and [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x0 != M1 ) .\nFILTER ( ?x0 != M2 )\n}",
        "recursionDepth": 20,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P26 wd:Q1413 .\n?x0 wdt:P26 wd:Q2321555 .\n?x0 wdt:P26 wd:Q1416 .\nFILTER ( ?x0 != wd:Q1413 ) .\nFILTER ( ?x0 != wd:Q2321555 ) .\nFILTER ( ?x0 != wd:Q1416 )\n}",
        "questionWithBrackets": "Which spouse of [Rufrius Crispinus] did [Nero] and [Otho] marry"
    },
    {
        "questionIdx": 212287,
        "questionPatternModEntities": "Which spouse of M2 played M0 and M1",
        "questionTemplate": "Which [ROLE_SIMPLE] of [entity] [VP_SIMPLE] [entity] and [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P1 M2 .\nFILTER ( ?x0 != M2 )\n}",
        "recursionDepth": 20,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P453 wd:Q64005751 .\n?x0 wdt:P453 wd:Q50386892 .\n?x0 wdt:P26 wd:Q50896 .\nFILTER ( ?x0 != wd:Q50896 )\n}",
        "questionWithBrackets": "Which spouse of [Pippo Baudo] played [Floria Tosca] and [Mim\u00ec]"
    },
    {
        "questionIdx": 212317,
        "questionPatternModEntities": "Which spouse of M1 did M0 influence , M2 marry , and M3 marry",
        "questionTemplate": "Which [ROLE_SIMPLE] of [entity] did [entity] [VP_SIMPLE] , [entity] [VP_SIMPLE] , and [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\n?x0 P1 M3 .\nFILTER ( ?x0 != M1 ) .\nFILTER ( ?x0 != M2 ) .\nFILTER ( ?x0 != M3 )\n}",
        "recursionDepth": 36,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P737 wd:Q868 .\n?x0 wdt:P26 wd:Q190055 .\n?x0 wdt:P26 wd:Q434369 .\n?x0 wdt:P26 wd:Q5429464 .\nFILTER ( ?x0 != wd:Q190055 ) .\nFILTER ( ?x0 != wd:Q434369 ) .\nFILTER ( ?x0 != wd:Q5429464 )\n}",
        "questionWithBrackets": "Which spouse of [Roxana] did [Aristotle] influence , [Parysatis II] marry , and [Stateira II] marry"
    },
    {
        "questionIdx": 212334,
        "questionPatternModEntities": "Which spouse of M1 married M0",
        "questionTemplate": "Which [ROLE_SIMPLE] of [entity] [VP_SIMPLE] [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x0 != M1 )\n}",
        "recursionDepth": 16,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P26 wd:Q254 .\n?x0 wdt:P26 wd:Q955658 .\nFILTER ( ?x0 != wd:Q254 ) .\nFILTER ( ?x0 != wd:Q955658 )\n}",
        "questionWithBrackets": "Which spouse of [Georg Nikolaus von Nissen] married [Wolfgang Amadeus Mozart]"
    },
    {
        "questionIdx": 212353,
        "questionPatternModEntities": "Which spouse of M1 's parent did M0 influence",
        "questionTemplate": "Which [ROLE_SIMPLE] of [entity] 's [ROLE_SIMPLE] did [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 ?x1 .\n?x1 P2 M1 .\nFILTER ( ?x0 != ?x1 )\n}",
        "recursionDepth": 20,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P737 wd:Q255 .\n?x0 wdt:P26 ?x1 .\n?x1 wdt:P40|wdt:P355 wd:Q28653656 .\nFILTER ( ?x0 != ?x1 )\n}",
        "questionWithBrackets": "Which spouse of [Sebastian Hensel] 's parent did [Ludwig van Beethoven] influence"
    },
    {
        "questionIdx": 212369,
        "questionPatternModEntities": "Which spouse of M1 's parent was M0 's sibling",
        "questionTemplate": "Which [ROLE_SIMPLE] of [entity] 's [ROLE_SIMPLE] was [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 ?x1 .\n?x1 P2 M1 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x0 != M0 )\n}",
        "recursionDepth": 21,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P3373 wd:Q939 .\n?x0 wdt:P26 ?x1 .\n?x1 wdt:P40|wdt:P355 wd:Q181415 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x0 != wd:Q939 )\n}",
        "questionWithBrackets": "Which spouse of [Infanta Adelgundes] 's parent was [Pedro I of Brazil] 's sibling"
    },
    {
        "questionIdx": 212377,
        "questionPatternModEntities": "Which spouse of M0 was influenced by M1 's spouse",
        "questionTemplate": "Which [ROLE_SIMPLE] of [entity] was [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 M0 .\n?x1 P1 M1 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x1 != M1 )\n}",
        "recursionDepth": 21,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P737 ?x1 .\n?x0 wdt:P26 wd:Q463978 .\n?x1 wdt:P26 wd:Q2641426 .\nFILTER ( ?x0 != wd:Q463978 ) .\nFILTER ( ?x1 != wd:Q2641426 )\n}",
        "questionWithBrackets": "Which spouse of [Gabriele M\u00fcnter] was influenced by [Camille Doncieux] 's spouse"
    },
    {
        "questionIdx": 212382,
        "questionPatternModEntities": "Which spouse of M0 was M1 's sibling 's parent and sibling",
        "questionTemplate": "Which [ROLE_SIMPLE] of [entity] was [entity] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE] and [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 M0 .\n?x1 P0 M1 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x1 != M1 )\n}",
        "recursionDepth": 26,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P40|wdt:P355 ?x1 .\n?x0 wdt:P3373 ?x1 .\n?x0 wdt:P26 wd:Q17148576 .\n?x1 wdt:P3373 wd:Q18222132 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x0 != wd:Q17148576 ) .\nFILTER ( ?x1 != wd:Q18222132 )\n}",
        "questionWithBrackets": "Which spouse of [Vitalie Rimbaud] was [Vitalie Rimbaud] 's sibling 's parent and sibling"
    },
    {
        "questionIdx": 212434,
        "questionPatternModEntities": "Which spouse of M1 was influenced by M0",
        "questionTemplate": "Which [ROLE_SIMPLE] of [entity] was [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M1 )\n}",
        "recursionDepth": 17,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P737 wd:Q868 .\n?x0 wdt:P26 wd:Q1047458 .\nFILTER ( ?x0 != wd:Q1047458 )\n}",
        "questionWithBrackets": "Which spouse of [Casimir Dudevant] was influenced by [Aristotle]"
    },
    {
        "questionIdx": 212445,
        "questionPatternModEntities": "Which spouse of M0 did M1 , M2 , and M3 marry",
        "questionTemplate": "Which [ROLE_SIMPLE] of [entity] did [entity] , [entity] , and [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P0 M3 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x0 != M1 ) .\nFILTER ( ?x0 != M2 ) .\nFILTER ( ?x0 != M3 )\n}",
        "recursionDepth": 23,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P26 wd:Q2831 .\n?x0 wdt:P26 wd:Q42869 .\n?x0 wdt:P26 wd:Q5220517 .\n?x0 wdt:P26 wd:Q16194168 .\nFILTER ( ?x0 != wd:Q2831 ) .\nFILTER ( ?x0 != wd:Q42869 ) .\nFILTER ( ?x0 != wd:Q5220517 ) .\nFILTER ( ?x0 != wd:Q16194168 )\n}",
        "questionWithBrackets": "Which spouse of [Michael Lockwood] did [Michael Jackson] , [Danny Keough] , and [Nicolas Cage] marry"
    },
    {
        "questionIdx": 212446,
        "questionPatternModEntities": "Which spouse of M1 did M0 employ",
        "questionTemplate": "Which [ROLE_SIMPLE] of [entity] did [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M1 )\n}",
        "recursionDepth": 16,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P108 wd:Q152087 .\n?x0 wdt:P26 wd:Q567 .\nFILTER ( ?x0 != wd:Q567 )\n}",
        "questionWithBrackets": "Which spouse of [Angela Merkel] did [Humboldt University of Berlin] employ"
    },
    {
        "questionIdx": 212457,
        "questionPatternModEntities": "Which spouse of M2 was M0 's female sibling",
        "questionTemplate": "Which [ROLE_SIMPLE] of [entity] was [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P2 M2 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x0 != M2 )\n}",
        "recursionDepth": 22,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P21 wd:Q6581072 .\n?x0 wdt:P3373 wd:Q939 .\n?x0 wdt:P26 wd:Q116972 .\nFILTER ( ?x0 != wd:Q116972 ) .\nFILTER ( ?x0 != wd:Q939 )\n}",
        "questionWithBrackets": "Which spouse of [Nuno Jos\u00e9 Severo de Mendo\u00e7a Rolim de Moura Barreto, 1st Duke of Loul\u00e9] was [Pedro I of Brazil] 's female sibling"
    },
    {
        "questionIdx": 212494,
        "questionPatternModEntities": "Which spouse of M1 was M0 's sibling and parent",
        "questionTemplate": "Which [ROLE_SIMPLE] of [entity] was [entity] 's [ROLE_SIMPLE] and [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M0 .\n?x0 P2 M1 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x0 != M1 )\n}",
        "recursionDepth": 22,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q493 .\n?x0 wdt:P3373 wd:Q493 .\n?x0 wdt:P26 wd:Q17148576 .\nFILTER ( ?x0 != wd:Q17148576 ) .\nFILTER ( ?x0 != wd:Q493 )\n}",
        "questionWithBrackets": "Which spouse of [Vitalie Rimbaud] was [Arthur Rimbaud] 's sibling and parent"
    },
    {
        "questionIdx": 212504,
        "questionPatternModEntities": "Which spouse of M0 was M1 's spouse",
        "questionTemplate": "Which [ROLE_SIMPLE] of [entity] was [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x0 != M1 )\n}",
        "recursionDepth": 17,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P26 wd:Q5383 .\n?x0 wdt:P26 wd:Q1238103 .\nFILTER ( ?x0 != wd:Q5383 ) .\nFILTER ( ?x0 != wd:Q1238103 )\n}",
        "questionWithBrackets": "Which spouse of [David Bowie] was [Spencer Haywood] 's spouse"
    },
    {
        "questionIdx": 212511,
        "questionPatternModEntities": "Which spouse of M1 's sibling was a spouse of M0",
        "questionTemplate": "Which [ROLE_SIMPLE] of [entity] 's [ROLE_SIMPLE] was a [ROLE_SIMPLE] of [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P0 M0 .\n?x1 P1 M1 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x1 != M1 )\n}",
        "recursionDepth": 23,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P26 ?x1 .\n?x0 wdt:P26 wd:Q1914424 .\n?x1 wdt:P3373 wd:Q720 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x0 != wd:Q1914424 ) .\nFILTER ( ?x1 != wd:Q720 )\n}",
        "questionWithBrackets": "Which spouse of [Genghis Khan] 's sibling was a spouse of [Huochenbieji]"
    },
    {
        "questionIdx": 212525,
        "questionPatternModEntities": "Which spouse of M2 was M0 's male sibling",
        "questionTemplate": "Which [ROLE_SIMPLE] of [entity] was [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P2 M2 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x0 != M2 )\n}",
        "recursionDepth": 22,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P21 wd:Q6581097 .\n?x0 wdt:P3373 wd:Q892 .\n?x0 wdt:P26 wd:Q76335497 .\nFILTER ( ?x0 != wd:Q892 ) .\nFILTER ( ?x0 != wd:Q76335497 )\n}",
        "questionWithBrackets": "Which spouse of [Magdalen Matthews] was [J.\u00a0R.\u00a0R. Tolkien] 's male sibling"
    },
    {
        "questionIdx": 212555,
        "questionPatternModEntities": "Which spouse of M1 's employee 's sibling was influenced by M0",
        "questionTemplate": "Which [ROLE_SIMPLE] of [entity] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE] was [VP_SIMPLE] by [entity]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 ?x1 .\n?x1 P2 ?x2 .\n?x2 P3 M1 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x1 != ?x2 )\n}",
        "recursionDepth": 26,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P737 wd:Q255 .\n?x0 wdt:P26 ?x1 .\n?x1 wdt:P3373 ?x2 .\n?x2 wdt:P108 wd:Q92939387 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x1 != ?x2 )\n}",
        "questionWithBrackets": "Which spouse of [Leonhard-Gymnasium Aachen] 's employee 's sibling was influenced by [Ludwig van Beethoven]"
    },
    {
        "questionIdx": 212749,
        "questionPatternModEntities": "Which spouse , sibling , and parent of M0 was M1 's sibling",
        "questionTemplate": "Which [ROLE_SIMPLE] , [ROLE_SIMPLE] , and [ROLE_SIMPLE] of [entity] was [entity] 's [ROLE_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P1 M0 .\n?x0 P2 M0 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x0 != M1 )\n}",
        "recursionDepth": 26,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q443473 .\n?x0 wdt:P3373 wd:Q443473 .\n?x0 wdt:P3373 wd:Q273990 .\n?x0 wdt:P26 wd:Q443473 .\nFILTER ( ?x0 != wd:Q443473 ) .\nFILTER ( ?x0 != wd:Q443473 ) .\nFILTER ( ?x0 != wd:Q273990 )\n}",
        "questionWithBrackets": "Which spouse , sibling , and parent of [Henutmire] was [Princess Tia] 's sibling"
    },
    {
        "questionIdx": 212750,
        "questionPatternModEntities": "Which spouse , sibling , and parent of M0 did M1 and M2 marry",
        "questionTemplate": "Which [ROLE_SIMPLE] , [ROLE_SIMPLE] , and [ROLE_SIMPLE] of [entity] did [entity] and [entity] [VP_SIMPLE]",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M0 .\n?x0 P2 M0 .\n?x0 P2 M1 .\n?x0 P2 M2 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x0 != M1 ) .\nFILTER ( ?x0 != M2 )\n}",
        "recursionDepth": 29,
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 wdt:P40|wdt:P355 wd:Q443473 .\n?x0 wdt:P3373 wd:Q443473 .\n?x0 wdt:P26 wd:Q443473 .\n?x0 wdt:P26 wd:Q210535 .\n?x0 wdt:P26 wd:Q256430 .\nFILTER ( ?x0 != wd:Q443473 ) .\nFILTER ( ?x0 != wd:Q443473 ) .\nFILTER ( ?x0 != wd:Q210535 ) .\nFILTER ( ?x0 != wd:Q256430 )\n}",
        "questionWithBrackets": "Which spouse , sibling , and parent of [Henutmire] did [Maathorneferure] and [Nefertarilllala] marry"
    }
]