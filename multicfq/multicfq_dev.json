[
    {
        "questionIdx": 74942,
        "questionWithBrackets": "Was [Rub\u00e9n Mi\u00f1o] Spanish",
        "questionPatternModEntities": "Was M0 Spanish",
        "questionTemplate": "Was [entity] [ADJECTIVE_SIMPLE]",
        "sparql": "SELECT count(*) WHERE {\nns:m.04lk0rs ns:people.person.nationality ns:m.06mkj\n}",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1\n}",
        "expectedResponse": "Yes",
        "recursionDepth": 9
    },
    {
        "questionIdx": 98825,
        "questionWithBrackets": "Was a film producer [Germ\u00e1n Olarte]",
        "questionPatternModEntities": "Was a film producer M0",
        "questionTemplate": "Was a [NP_SIMPLE] [entity]",
        "sparql": "SELECT count(*) WHERE {\nns:m.04_6x6v a ns:film.producer\n}",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 a M1\n}",
        "expectedResponse": "Yes",
        "recursionDepth": 10
    },
    {
        "questionIdx": 11670,
        "questionWithBrackets": "Did [John Christian Bullitt] found [Drinker Biddle & Reath]",
        "questionPatternModEntities": "Did M0 found M1",
        "questionTemplate": "Did [entity] [VP_SIMPLE] [entity]",
        "sparql": "SELECT count(*) WHERE {\nns:m.04n3cbc ns:organization.organization_founder.organizations_founded ns:m.02qt93l\n}",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1\n}",
        "expectedResponse": "Yes",
        "recursionDepth": 11
    },
    {
        "questionIdx": 82690,
        "questionWithBrackets": "Was [The Tao of Steve] distributed by [Metro-Goldwyn-Mayer]",
        "questionPatternModEntities": "Was M0 distributed by M1",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity]",
        "sparql": "SELECT count(*) WHERE {\nns:m.07tsdh ns:film.film.distributors/ns:film.film_film_distributor_relationship.distributor ns:m.0g1rw\n}",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1\n}",
        "expectedResponse": "No",
        "recursionDepth": 12
    },
    {
        "questionIdx": 155341,
        "questionWithBrackets": "What film director directed [German Dreams]",
        "questionPatternModEntities": "What film director directed M0",
        "questionTemplate": "What [NP_SIMPLE] [VP_SIMPLE] [entity]",
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.director.film ns:m.0gyc7vy\n}",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0\n}",
        "expectedResponse": "Lienhard Wawrzyn",
        "recursionDepth": 13
    },
    {
        "questionIdx": 139826,
        "questionWithBrackets": "What cinematographer was [Greggers]'s actor",
        "questionPatternModEntities": "What cinematographer was M1 's actor",
        "questionTemplate": "What [NP_SIMPLE] was [entity] 's [ROLE_SIMPLE]",
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:film.cinematographer .\n?x0 ns:film.actor.film/ns:film.performance.character ns:m.0v4vr2m\n}",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M1 .\n?x0 a M0\n}",
        "expectedResponse": "Conrad Jackson",
        "recursionDepth": 14
    },
    {
        "questionIdx": 197686,
        "questionWithBrackets": "Which costume designer was [BCBG Max Azria]'s founder",
        "questionPatternModEntities": "Which costume designer was M1 's founder",
        "questionTemplate": "Which [NP_SIMPLE] was [entity] 's [ROLE_SIMPLE]",
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:film.film_costumer_designer .\n?x0 ns:organization.organization_founder.organizations_founded ns:m.042wr4f\n}",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M1 .\n?x0 a M0\n}",
        "expectedResponse": "Max Azria",
        "recursionDepth": 14
    },
    {
        "questionIdx": 52288,
        "questionWithBrackets": "Was [Dentsu Creative X Inc.] a production company's child",
        "questionPatternModEntities": "Was M1 a production company 's child",
        "questionTemplate": "Was [entity] a [NP_SIMPLE] 's [ROLE_SIMPLE]",
        "sparql": "SELECT count(*) WHERE {\n?x0 a ns:film.production_company .\nns:m.0zwbd3f ns:people.person.parents|ns:fictional_universe.fictional_character.parents|ns:organization.organization.parent/ns:organization.organization_relationship.parent ?x0\n}",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 a M0 .\nM1 P0 ?x0\n}",
        "expectedResponse": "Yes",
        "recursionDepth": 14
    },
    {
        "questionIdx": 57455,
        "questionWithBrackets": "Was [Guilt Redeemed]'s executive producer a person",
        "questionPatternModEntities": "Was M1 's executive producer a person",
        "questionTemplate": "Was [entity] 's [ROLE_SIMPLE] a [NP_SIMPLE]",
        "sparql": "SELECT count(*) WHERE {\n?x0 a ns:people.person .\n?x0 ns:film.producer.films_executive_produced ns:m.05ztlm_\n}",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M1 .\n?x0 a M0\n}",
        "expectedResponse": "No",
        "recursionDepth": 14
    },
    {
        "questionIdx": 81218,
        "questionWithBrackets": "Was [The Jaundiced Eye]'s editor a cinematographer",
        "questionPatternModEntities": "Was M1 's editor a cinematographer",
        "questionTemplate": "Was [entity] 's [ROLE_SIMPLE] a [NP_SIMPLE]",
        "sparql": "SELECT count(*) WHERE {\n?x0 a ns:film.cinematographer .\n?x0 ns:film.editor.film ns:m.0crsfmk\n}",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M1 .\n?x0 a M0\n}",
        "expectedResponse": "Yes",
        "recursionDepth": 14
    },
    {
        "questionIdx": 59397,
        "questionWithBrackets": "Was [Ignacio Fernandez Jimenez]'s country of nationality [International Gold Resources]'s child",
        "questionPatternModEntities": "Was M1 's country of nationality M0 's child",
        "questionTemplate": "Was [entity] 's [ROLE_SIMPLE] [entity] 's [ROLE_SIMPLE]",
        "sparql": "SELECT count(*) WHERE {\n?x0 ^ns:people.person.nationality ns:m.01286j3q .\n?x0 ns:people.person.parents|ns:fictional_universe.fictional_character.parents|ns:organization.organization.parent/ns:organization.organization_relationship.parent ns:m.03p2fv8\n}",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1\n}",
        "expectedResponse": "No",
        "recursionDepth": 15
    },
    {
        "questionIdx": 63589,
        "questionWithBrackets": "Was [Lady Arbella Stuart]'s spouse [Prosperous Armenia]'s founder",
        "questionPatternModEntities": "Was M1 's spouse M0 's founder",
        "questionTemplate": "Was [entity] 's [ROLE_SIMPLE] [entity] 's [ROLE_SIMPLE]",
        "sparql": "SELECT count(*) WHERE {\n?x0 ns:organization.organization_founder.organizations_founded ns:m.02r3f1j .\n?x0 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ns:m.0klx6 .\nFILTER ( ?x0 != ns:m.0klx6 )\n}",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M1 )\n}",
        "expectedResponse": "No",
        "recursionDepth": 15
    },
    {
        "questionIdx": 95381,
        "questionWithBrackets": "Was a distributor of [Jazz Boat] a film distributor",
        "questionPatternModEntities": "Was a distributor of M0 a film distributor",
        "questionTemplate": "Was a [ROLE_SIMPLE] of [entity] a [NP_SIMPLE]",
        "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.film_distributor.films_distributed/ns:film.film_film_distributor_relationship.film ns:m.0czd3fw\n}",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0\n}",
        "expectedResponse": "Yes",
        "recursionDepth": 16
    },
    {
        "questionIdx": 195170,
        "questionWithBrackets": "Which child of [Chlothar I] married [Alboin]",
        "questionPatternModEntities": "Which child of M0 married M1",
        "questionTemplate": "Which [ROLE_SIMPLE] of [entity] [VP_SIMPLE] [entity]",
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:people.person.parents|ns:fictional_universe.fictional_character.parents|ns:organization.organization.parent/ns:organization.organization_relationship.parent ns:m.0qkr1 .\n?x0 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ns:m.0r33 .\nFILTER ( ?x0 != ns:m.0r33 )\n}",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M1 )\n}",
        "expectedResponse": "Chlothsind",
        "recursionDepth": 16
    },
    {
        "questionIdx": 110329,
        "questionWithBrackets": "Was an employee of [AP Films] a film editor",
        "questionPatternModEntities": "Was a employee of M1 a film editor",
        "questionTemplate": "Was a [ROLE_SIMPLE] of [entity] a [NP_SIMPLE]",
        "sparql": "SELECT count(*) WHERE {\n?x0 a ns:film.editor .\n?x0 ns:people.person.employment_history/ns:business.employment_tenure.company ns:m.043h1n\n}",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M1 .\n?x0 a M0\n}",
        "expectedResponse": "Yes",
        "recursionDepth": 16
    },
    {
        "questionIdx": 204331,
        "questionWithBrackets": "Which film producer was an employer of [Gilbert Hovey Grosvenor]",
        "questionPatternModEntities": "Which film producer was a employer of M1",
        "questionTemplate": "Which [NP_SIMPLE] was a [ROLE_SIMPLE] of [entity]",
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:film.producer .\n?x0 ns:business.employer.employees/ns:business.employment_tenure.person ns:m.05hybc\n}",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M1 .\n?x0 a M0\n}",
        "expectedResponse": "National Geographic Society",
        "recursionDepth": 16
    },
    {
        "questionIdx": 209296,
        "questionWithBrackets": "Which prequel of [Thunderball] starred [Terence Brook]",
        "questionPatternModEntities": "Which prequel of M0 starred M1",
        "questionTemplate": "Which [ROLE_SIMPLE] of [entity] [VP_SIMPLE] [entity]",
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.film.sequel ns:m.0fsw_7 .\n?x0 ns:film.film.starring/ns:film.performance.actor ns:m.0knrtxf\n}",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1\n}",
        "expectedResponse": "Goldfinger",
        "recursionDepth": 16
    },
    {
        "questionIdx": 205893,
        "questionWithBrackets": "Which founder of [Choice USA] did [Sisters of '77] star",
        "questionPatternModEntities": "Which founder of M0 did M1 star",
        "questionTemplate": "Which [ROLE_SIMPLE] of [entity] did [entity] [VP_SIMPLE]",
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.actor.film/ns:film.performance.film ns:m.03c9mqr .\n?x0 ns:organization.organization_founder.organizations_founded ns:m.02vvc3x\n}",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1\n}",
        "expectedResponse": "Gloria Steinem",
        "recursionDepth": 16
    },
    {
        "questionIdx": 165615,
        "questionWithBrackets": "What sibling of [Sue Spielberg] was [Amblin Entertainment]'s employee",
        "questionPatternModEntities": "What sibling of M0 was M1 's employee",
        "questionTemplate": "What [ROLE_SIMPLE] of [entity] was [entity] 's [ROLE_SIMPLE]",
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:people.person.employment_history/ns:business.employment_tenure.company ns:m.030_1_ .\n?x0 ns:people.person.sibling_s/ns:people.sibling_relationship.sibling|ns:fictional_universe.fictional_character.siblings/ns:fictional_universe.sibling_relationship_of_fictional_characters.siblings ns:m.04j6pmc .\nFILTER ( ?x0 != ns:m.04j6pmc )\n}",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M0 )\n}",
        "expectedResponse": "Steven Spielberg",
        "recursionDepth": 17
    },
    {
        "questionIdx": 94391,
        "questionWithBrackets": "Was a costume designer of [The Anatomy of Love] [Raymond Dior]'s sibling",
        "questionPatternModEntities": "Was a costume designer of M1 M0 's sibling",
        "questionTemplate": "Was a [ROLE_SIMPLE] of [entity] [entity] 's [ROLE_SIMPLE]",
        "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.film_costumer_designer.costume_design_for_film ns:m.05pc2vg .\n?x0 ns:people.person.sibling_s/ns:people.sibling_relationship.sibling|ns:fictional_universe.fictional_character.siblings/ns:fictional_universe.sibling_relationship_of_fictional_characters.siblings ns:m.0n5cxlb .\nFILTER ( ?x0 != ns:m.0n5cxlb )\n}",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M0 )\n}",
        "expectedResponse": "No",
        "recursionDepth": 17
    },
    {
        "questionIdx": 155822,
        "questionWithBrackets": "What film director was a character's spouse",
        "questionPatternModEntities": "What film director was a character 's spouse",
        "questionTemplate": "What [NP_SIMPLE] was a [NP_SIMPLE] 's [ROLE_SIMPLE]",
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:film.director .\n?x0 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ?x1 .\n?x1 a ns:fictional_universe.fictional_character .\nFILTER ( ?x0 != ?x1 )\n}",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 a M0 .\n?x1 a M1 .\nFILTER ( ?x0 != ?x1 )\n}",
        "expectedResponse": "Johnathon Schaech",
        "recursionDepth": 17
    },
    {
        "questionIdx": 48995,
        "questionWithBrackets": "Was [Bye Bye Baby]'s star a screenwriter's spouse",
        "questionPatternModEntities": "Was M0 's star a screenwriter 's spouse",
        "questionTemplate": "Was [entity] 's [ROLE_SIMPLE] a [NP_SIMPLE] 's [ROLE_SIMPLE]",
        "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.actor.film/ns:film.performance.film ns:m.09jywtd .\n?x0 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ?x1 .\n?x1 a ns:film.writer .\nFILTER ( ?x0 != ?x1 )\n}",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 ?x1 .\n?x1 a M1 .\nFILTER ( ?x0 != ?x1 )\n}",
        "expectedResponse": "Yes",
        "recursionDepth": 18
    },
    {
        "questionIdx": 71436,
        "questionWithBrackets": "Was [Philippine Engelhard]'s spouse a film distributor's founder",
        "questionPatternModEntities": "Was M0 's spouse a film distributor 's founder",
        "questionTemplate": "Was [entity] 's [ROLE_SIMPLE] a [NP_SIMPLE] 's [ROLE_SIMPLE]",
        "sparql": "SELECT count(*) WHERE {\n?x0 ns:organization.organization_founder.organizations_founded ?x1 .\n?x0 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ns:m.0pdnzt5 .\n?x1 a ns:film.film_distributor .\nFILTER ( ?x0 != ns:m.0pdnzt5 )\n}",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x0 P1 M0 .\n?x1 a M1 .\nFILTER ( ?x0 != M0 )\n}",
        "expectedResponse": "No",
        "recursionDepth": 18
    },
    {
        "questionIdx": 98463,
        "questionWithBrackets": "Was a film editor's child [Syler Music]'s employee",
        "questionPatternModEntities": "Was a film editor 's child M0 's employee",
        "questionTemplate": "Was a [NP_SIMPLE] 's [ROLE_SIMPLE] [entity] 's [ROLE_SIMPLE]",
        "sparql": "SELECT count(*) WHERE {\n?x0 ns:people.person.employment_history/ns:business.employment_tenure.company ns:m.012pjz6q .\n?x0 ns:people.person.parents|ns:fictional_universe.fictional_character.parents|ns:organization.organization.parent/ns:organization.organization_relationship.parent ?x1 .\n?x1 a ns:film.editor\n}",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 ?x1 .\n?x1 a M1\n}",
        "expectedResponse": "No",
        "recursionDepth": 18
    },
    {
        "questionIdx": 101217,
        "questionWithBrackets": "Was a film's star [Michael Crowder]'s spouse",
        "questionPatternModEntities": "Was a film 's star M0 's spouse",
        "questionTemplate": "Was a [NP_SIMPLE] 's [ROLE_SIMPLE] [entity] 's [ROLE_SIMPLE]",
        "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.actor.film/ns:film.performance.film ?x1 .\n?x0 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ns:m.05x7bfs .\n?x1 a ns:film.film .\nFILTER ( ?x0 != ns:m.05x7bfs )\n}",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x0 P1 M0 .\n?x1 a M1 .\nFILTER ( ?x0 != M0 )\n}",
        "expectedResponse": "No",
        "recursionDepth": 18
    },
    {
        "questionIdx": 52836,
        "questionWithBrackets": "Was [Donald P. Sutherland School]'s employee a film editor's child",
        "questionPatternModEntities": "Was M0 's employee a film editor 's child",
        "questionTemplate": "Was [entity] 's [ROLE_SIMPLE] a [NP_SIMPLE] 's [ROLE_SIMPLE]",
        "sparql": "SELECT count(*) WHERE {\n?x0 ns:people.person.employment_history/ns:business.employment_tenure.company ns:m.076qvx_ .\n?x0 ns:people.person.parents|ns:fictional_universe.fictional_character.parents|ns:organization.organization.parent/ns:organization.organization_relationship.parent ?x1 .\n?x1 a ns:film.editor\n}",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 ?x1 .\n?x1 a M1\n}",
        "expectedResponse": "No",
        "recursionDepth": 18
    },
    {
        "questionIdx": 73671,
        "questionWithBrackets": "Was [Remember You're Special]'s executive producer a film editor's child",
        "questionPatternModEntities": "Was M0 's executive producer a film editor 's child",
        "questionTemplate": "Was [entity] 's [ROLE_SIMPLE] a [NP_SIMPLE] 's [ROLE_SIMPLE]",
        "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.producer.films_executive_produced ns:m.0_h3c_9 .\n?x0 ns:people.person.parents|ns:fictional_universe.fictional_character.parents|ns:organization.organization.parent/ns:organization.organization_relationship.parent ?x1 .\n?x1 a ns:film.editor\n}",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 ?x1 .\n?x1 a M1\n}",
        "expectedResponse": "No",
        "recursionDepth": 18
    },
    {
        "questionIdx": 60058,
        "questionWithBrackets": "Was [Iqbal Wahhab]'s spouse and sibling a film director",
        "questionPatternModEntities": "Was M0 's spouse and sibling a film director",
        "questionTemplate": "Was [entity] 's [ROLE_SIMPLE] and [ROLE_SIMPLE] a [NP_SIMPLE]",
        "sparql": "SELECT count(*) WHERE {\n?x0 a ns:film.director .\n?x0 ns:people.person.sibling_s/ns:people.sibling_relationship.sibling|ns:fictional_universe.fictional_character.siblings/ns:fictional_universe.sibling_relationship_of_fictional_characters.siblings ns:m.0ch379d .\n?x0 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ns:m.0ch379d .\nFILTER ( ?x0 != ns:m.0ch379d ) .\nFILTER ( ?x0 != ns:m.0ch379d )\n}",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M0 .\n?x0 a M1 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x0 != M0 )\n}",
        "expectedResponse": "No",
        "recursionDepth": 19
    },
    {
        "questionIdx": 138862,
        "questionWithBrackets": "What child of [Virginia Frances Spilman] married an art director",
        "questionPatternModEntities": "What child of M0 married a art director",
        "questionTemplate": "What [ROLE_SIMPLE] of [entity] [VP_SIMPLE] a [NP_SIMPLE]",
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:people.person.parents|ns:fictional_universe.fictional_character.parents|ns:organization.organization.parent/ns:organization.organization_relationship.parent ns:m.0h2833z .\n?x0 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ?x1 .\n?x1 a ns:film.film_art_director .\nFILTER ( ?x0 != ?x1 )\n}",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 ?x1 .\n?x1 a M1 .\nFILTER ( ?x0 != ?x1 )\n}",
        "expectedResponse": "Sissy Spacek",
        "recursionDepth": 19
    },
    {
        "questionIdx": 92322,
        "questionWithBrackets": "Was a cinematographer [Teresa Goduti]'s Italian child",
        "questionPatternModEntities": "Was a cinematographer M2 's Italian child",
        "questionTemplate": "Was a [NP_SIMPLE] [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparql": "SELECT count(*) WHERE {\n?x0 a ns:film.cinematographer .\n?x0 ns:people.person.nationality ns:m.03rjj .\n?x0 ns:people.person.parents|ns:fictional_universe.fictional_character.parents|ns:organization.organization.parent/ns:organization.organization_relationship.parent ns:m.0pkq3mc\n}",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M1 .\n?x0 P1 M2 .\n?x0 a M0\n}",
        "expectedResponse": "Yes",
        "recursionDepth": 19
    },
    {
        "questionIdx": 92322,
        "questionWithBrackets": "Was a cinematographer [Teresa Goduti]'s Italian child",
        "questionPatternModEntities": "Was a cinematographer M2 's Italian child",
        "questionTemplate": "Was a [NP_SIMPLE] [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparql": "SELECT count(*) WHERE {\n?x0 a ns:film.cinematographer .\n?x0 ns:people.person.nationality ns:m.03rjj .\n?x0 ns:people.person.parents|ns:fictional_universe.fictional_character.parents|ns:organization.organization.parent/ns:organization.organization_relationship.parent ns:m.0pkq3mc\n}",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M1 .\n?x0 P1 M2 .\n?x0 a M0\n}",
        "expectedResponse": "Yes",
        "recursionDepth": 19
    },
    {
        "questionIdx": 57279,
        "questionWithBrackets": "Was [Gregoire Couzinier]'s sibling a Swedish art director",
        "questionPatternModEntities": "Was M0 's sibling a Swedish art director",
        "questionTemplate": "Was [entity] 's [ROLE_SIMPLE] a [ADJECTIVE_SIMPLE] [NP_SIMPLE]",
        "sparql": "SELECT count(*) WHERE {\n?x0 a ns:film.film_art_director .\n?x0 ns:people.person.nationality ns:m.0d0vqn .\n?x0 ns:people.person.sibling_s/ns:people.sibling_relationship.sibling|ns:fictional_universe.fictional_character.siblings/ns:fictional_universe.sibling_relationship_of_fictional_characters.siblings ns:m.0bfms1q .\nFILTER ( ?x0 != ns:m.0bfms1q )\n}",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M2 .\n?x0 a M1 .\nFILTER ( ?x0 != M0 )\n}",
        "expectedResponse": "No",
        "recursionDepth": 19
    },
    {
        "questionIdx": 92313,
        "questionWithBrackets": "Was a cinematographer [Refin-Mobilvetta]'s employee and founder",
        "questionPatternModEntities": "Was a cinematographer M1 's employee and founder",
        "questionTemplate": "Was a [NP_SIMPLE] [entity] 's [ROLE_SIMPLE] and [ROLE_SIMPLE]",
        "sparql": "SELECT count(*) WHERE {\n?x0 a ns:film.cinematographer .\n?x0 ns:organization.organization_founder.organizations_founded ns:m.010lx71c .\n?x0 ns:people.person.employment_history/ns:business.employment_tenure.company ns:m.010lx71c\n}",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M1 .\n?x0 P1 M1 .\n?x0 a M0\n}",
        "expectedResponse": "No",
        "recursionDepth": 19
    },
    {
        "questionIdx": 165682,
        "questionWithBrackets": "What sibling of a character married [Massimo Marone]",
        "questionPatternModEntities": "What sibling of a character married M0",
        "questionTemplate": "What [ROLE_SIMPLE] of a [NP_SIMPLE] [VP_SIMPLE] [entity]",
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:people.person.sibling_s/ns:people.sibling_relationship.sibling|ns:fictional_universe.fictional_character.siblings/ns:fictional_universe.sibling_relationship_of_fictional_characters.siblings ?x1 .\n?x0 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ns:m.0dywnh .\n?x1 a ns:fictional_universe.fictional_character .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x0 != ns:m.0dywnh )\n}",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 M0 .\n?x1 a M1 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x0 != M0 )\n}",
        "expectedResponse": "Ridge Forrester",
        "recursionDepth": 19
    },
    {
        "questionIdx": 97882,
        "questionWithBrackets": "Was a film editor [First SteamShip Co., Ltd.]'s founder and employee",
        "questionPatternModEntities": "Was a film editor M1 's founder and employee",
        "questionTemplate": "Was a [NP_SIMPLE] [entity] 's [ROLE_SIMPLE] and [ROLE_SIMPLE]",
        "sparql": "SELECT count(*) WHERE {\n?x0 a ns:film.editor .\n?x0 ns:organization.organization_founder.organizations_founded ns:m.0cp77ny .\n?x0 ns:people.person.employment_history/ns:business.employment_tenure.company ns:m.0cp77ny\n}",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M1 .\n?x0 P1 M1 .\n?x0 a M0\n}",
        "expectedResponse": "No",
        "recursionDepth": 19
    },
    {
        "questionIdx": 167799,
        "questionWithBrackets": "What was a Spanish film producer's gender",
        "questionPatternModEntities": "What was a Spanish film producer 's gender",
        "questionTemplate": "What was a [ADJECTIVE_SIMPLE] [NP_SIMPLE] 's [ROLE_SIMPLE]",
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ^ns:people.person.gender ?x1 .\n?x1 a ns:film.producer .\n?x1 ns:people.person.nationality ns:m.06mkj\n}",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x1 P1 M1 .\n?x1 a M0\n}",
        "expectedResponse": "Female; Male",
        "recursionDepth": 19
    },
    {
        "questionIdx": 138310,
        "questionWithBrackets": "What character was [Pamela Douglas]'s sibling and spouse",
        "questionPatternModEntities": "What character was M0 's sibling and spouse",
        "questionTemplate": "What [NP_SIMPLE] was [entity] 's [ROLE_SIMPLE] and [ROLE_SIMPLE]",
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:fictional_universe.fictional_character .\n?x0 ns:people.person.sibling_s/ns:people.sibling_relationship.sibling|ns:fictional_universe.fictional_character.siblings/ns:fictional_universe.sibling_relationship_of_fictional_characters.siblings ns:m.026dx0b .\n?x0 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ns:m.026dx0b .\nFILTER ( ?x0 != ns:m.026dx0b ) .\nFILTER ( ?x0 != ns:m.026dx0b )\n}",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M0 .\n?x0 a M1 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x0 != M0 )\n}",
        "expectedResponse": "Ridge Forrester",
        "recursionDepth": 19
    },
    {
        "questionIdx": 153514,
        "questionWithBrackets": "What employer of a cinematographer did [Angela Beesley Starling] found",
        "questionPatternModEntities": "What employer of a cinematographer did M0 found",
        "questionTemplate": "What [ROLE_SIMPLE] of a [NP_SIMPLE] did [entity] [VP_SIMPLE]",
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:business.employer.employees/ns:business.employment_tenure.person ?x1 .\n?x0 ns:organization.organization.founders ns:m.0fh2k4 .\n?x1 a ns:film.cinematographer\n}",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 ?x1 .\n?x1 a M1\n}",
        "expectedResponse": "Wikia",
        "recursionDepth": 19
    },
    {
        "questionIdx": 55673,
        "questionWithBrackets": "Was [Frisco Kid]'s female star [Keerati Mahaprukpong]'s sibling",
        "questionPatternModEntities": "Was M1 's female star M0 's sibling",
        "questionTemplate": "Was [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] [entity] 's [ROLE_SIMPLE]",
        "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.actor.film/ns:film.performance.film ns:m.0cbwgz .\n?x0 ns:people.person.gender ns:m.02zsn .\n?x0 ns:people.person.sibling_s/ns:people.sibling_relationship.sibling|ns:fictional_universe.fictional_character.siblings/ns:fictional_universe.sibling_relationship_of_fictional_characters.siblings ns:m.0nc9ml9 .\nFILTER ( ?x0 != ns:m.0nc9ml9 )\n}",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P2 M2 .\nFILTER ( ?x0 != M0 )\n}",
        "expectedResponse": "No",
        "recursionDepth": 20
    },
    {
        "questionIdx": 44082,
        "questionWithBrackets": "Was [Abby Newman]'s parent and sibling [Christine Blair]'s spouse",
        "questionPatternModEntities": "Was M0 's parent and sibling M1 's spouse",
        "questionTemplate": "Was [entity] 's [ROLE_SIMPLE] and [ROLE_SIMPLE] [entity] 's [ROLE_SIMPLE]",
        "sparql": "SELECT count(*) WHERE {\n?x0 ns:people.person.children|ns:fictional_universe.fictional_character.children|ns:organization.organization.child/ns:organization.organization_relationship.child ns:m.0gx_zc .\n?x0 ns:people.person.sibling_s/ns:people.sibling_relationship.sibling|ns:fictional_universe.fictional_character.siblings/ns:fictional_universe.sibling_relationship_of_fictional_characters.siblings ns:m.0gx_zc .\n?x0 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ns:m.0g4s44 .\nFILTER ( ?x0 != ns:m.0g4s44 ) .\nFILTER ( ?x0 != ns:m.0gx_zc )\n}",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M0 .\n?x0 P2 M1 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x0 != M1 )\n}",
        "expectedResponse": "Yes",
        "recursionDepth": 20
    },
    {
        "questionIdx": 199436,
        "questionWithBrackets": "Which employee of [University of Chicago] and [IBM] did [William Faulkner] influence",
        "questionPatternModEntities": "Which employee of M0 and M1 did M2 influence",
        "questionTemplate": "Which [ROLE_SIMPLE] of [entity] and [entity] did [entity] [VP_SIMPLE]",
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:influence.influence_node.influenced_by ns:m.084w8 .\n?x0 ns:people.person.employment_history/ns:business.employment_tenure.company ns:m.03sc8 .\n?x0 ns:people.person.employment_history/ns:business.employment_tenure.company ns:m.07wrz\n}",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P1 M2\n}",
        "expectedResponse": "J. M. Coetzee",
        "recursionDepth": 20
    },
    {
        "questionIdx": 192909,
        "questionWithBrackets": "Which actor of [Jamji] was a company's employee",
        "questionPatternModEntities": "Which actor of M0 was a company 's employee",
        "questionTemplate": "Which [ROLE_SIMPLE] of [entity] was a [NP_SIMPLE] 's [ROLE_SIMPLE]",
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.actor.film/ns:film.performance.character ns:m.0ngyd20 .\n?x0 ns:people.person.employment_history/ns:business.employment_tenure.company ?x1 .\n?x1 a ns:business.employer\n}",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 M0 .\n?x1 a M1\n}",
        "expectedResponse": "Ichir\u014d Nagai",
        "recursionDepth": 20
    },
    {
        "questionIdx": 211931,
        "questionWithBrackets": "Which sibling of [Phineas Young] married [Mary Oldfield] and [Rhoda Richards]",
        "questionPatternModEntities": "Which sibling of M0 married M1 and M2",
        "questionTemplate": "Which [ROLE_SIMPLE] of [entity] [VP_SIMPLE] [entity] and [entity]",
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:people.person.sibling_s/ns:people.sibling_relationship.sibling|ns:fictional_universe.fictional_character.siblings/ns:fictional_universe.sibling_relationship_of_fictional_characters.siblings ns:m.03cd4_h .\n?x0 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ns:m.0gjvbk .\n?x0 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ns:m.0gt8sb .\nFILTER ( ?x0 != ns:m.03cd4_h ) .\nFILTER ( ?x0 != ns:m.0gjvbk ) .\nFILTER ( ?x0 != ns:m.0gt8sb )\n}",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x0 != M1 ) .\nFILTER ( ?x0 != M2 )\n}",
        "expectedResponse": "Brigham Young",
        "recursionDepth": 20
    },
    {
        "questionIdx": 136342,
        "questionWithBrackets": "What actor of [Cal Weaver] and [Hammy] did [Jon Stewart] influence",
        "questionPatternModEntities": "What actor of M1 and M2 did M0 influence",
        "questionTemplate": "What [ROLE_SIMPLE] of [entity] and [entity] did [entity] [VP_SIMPLE]",
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.actor.film/ns:film.performance.character ns:m.02vkm9d .\n?x0 ns:film.actor.film/ns:film.performance.character ns:m.0gv4xkr .\n?x0 ns:influence.influence_node.influenced_by ns:m.01j7rd\n}",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P1 M2\n}",
        "expectedResponse": "Steve Carell",
        "recursionDepth": 20
    },
    {
        "questionIdx": 163156,
        "questionWithBrackets": "What prequel of a film was [Tarzan and the Jungle Boy]'s sequel",
        "questionPatternModEntities": "What prequel of a film was M0 's sequel",
        "questionTemplate": "What [ROLE_SIMPLE] of a [NP_SIMPLE] was [entity] 's [ROLE_SIMPLE]",
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.film.prequel ns:m.0464vsc .\n?x0 ns:film.film.sequel ?x1 .\n?x1 a ns:film.film\n}",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 M0 .\n?x1 a M1\n}",
        "expectedResponse": "Tarzan's Deadly Silence",
        "recursionDepth": 20
    },
    {
        "questionIdx": 212360,
        "questionWithBrackets": "Which spouse of [Holly Bankemper] was employed by a film distributor",
        "questionPatternModEntities": "Which spouse of M0 was employed by a film distributor",
        "questionTemplate": "Which [ROLE_SIMPLE] of [entity] was [VP_SIMPLE] by a [NP_SIMPLE]",
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:people.person.employment_history/ns:business.employment_tenure.company ?x1 .\n?x0 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ns:m.05ss476 .\n?x1 a ns:film.film_distributor .\nFILTER ( ?x0 != ns:m.05ss476 )\n}",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 M0 .\n?x1 a M1 .\nFILTER ( ?x0 != M0 )\n}",
        "expectedResponse": "Cris Collinsworth",
        "recursionDepth": 21
    },
    {
        "questionIdx": 133213,
        "questionWithBrackets": "What French star of [Waking Life] did [Histoire(s) du cin\u00e9ma] star",
        "questionPatternModEntities": "What French star of M1 did M2 star",
        "questionTemplate": "What [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] did [entity] [VP_SIMPLE]",
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.actor.film/ns:film.performance.film ns:m.01kg44 .\n?x0 ns:film.actor.film/ns:film.performance.film ns:m.03h5k4m .\n?x0 ns:people.person.nationality ns:m.0f8l9c\n}",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P1 M2\n}",
        "expectedResponse": "Julie Delpy",
        "recursionDepth": 21
    },
    {
        "questionIdx": 223058,
        "questionWithBrackets": "Who was [Gesar Simon Messner]'s Italian German parent",
        "questionPatternModEntities": "Who was M3 's Italian German parent",
        "questionTemplate": "Who was [entity] 's [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:people.person .\n?x0 ns:people.person.children|ns:fictional_universe.fictional_character.children|ns:organization.organization.child/ns:organization.organization_relationship.child ns:m.0k18q6r .\n?x0 ns:people.person.nationality ns:m.0345h .\n?x0 ns:people.person.nationality ns:m.03rjj\n}",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P1 M3 .\n?x0 a M0\n}",
        "expectedResponse": "Reinhold Messner",
        "recursionDepth": 21
    },
    {
        "questionIdx": 154490,
        "questionWithBrackets": "What female founder of [Karisoke Research Center] did [George Schaller] influence",
        "questionPatternModEntities": "What female founder of M0 did M1 influence",
        "questionTemplate": "What [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] did [entity] [VP_SIMPLE]",
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:influence.influence_node.influenced_by ns:m.05f_hf .\n?x0 ns:organization.organization_founder.organizations_founded ns:m.0bcnw_ .\n?x0 ns:people.person.gender ns:m.02zsn\n}",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P2 M2\n}",
        "expectedResponse": "Dian Fossey",
        "recursionDepth": 21
    },
    {
        "questionIdx": 200477,
        "questionWithBrackets": "Which female executive producer of [Miss Meadows] did [Cloak & Dagger] star",
        "questionPatternModEntities": "Which female executive producer of M0 did M1 star",
        "questionTemplate": "Which [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] did [entity] [VP_SIMPLE]",
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.actor.film/ns:film.performance.film ns:m.04swkp .\n?x0 ns:film.producer.films_executive_produced ns:m.0109ltdh .\n?x0 ns:people.person.gender ns:m.02zsn\n}",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P2 M2\n}",
        "expectedResponse": "Karen Leigh Hopkins",
        "recursionDepth": 21
    },
    {
        "questionIdx": 191546,
        "questionWithBrackets": "Which Mexican parent of [Guadalupe Rivera Mar\u00edn] influenced [Rodolfo Nieto]",
        "questionPatternModEntities": "Which Mexican parent of M2 influenced M0",
        "questionTemplate": "Which [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] [VP_SIMPLE] [entity]",
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:influence.influence_node.influenced ns:m.03cg5gq .\n?x0 ns:people.person.children|ns:fictional_universe.fictional_character.children|ns:organization.organization.child/ns:organization.organization_relationship.child ns:m.0c36vyy .\n?x0 ns:people.person.nationality ns:m.0b90_r\n}",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P2 M2\n}",
        "expectedResponse": "Diego Rivera",
        "recursionDepth": 21
    },
    {
        "questionIdx": 56067,
        "questionWithBrackets": "Was [Gallants] executive produced by a Chinese film producer",
        "questionPatternModEntities": "Was M2 executive produced by a Chinese film producer",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [NP_SIMPLE]",
        "sparql": "SELECT count(*) WHERE {\n?x0 a ns:film.producer .\n?x0 ns:people.person.nationality ns:m.0d05w3 .\nns:m.0fphgg8 ns:film.film.executive_produced_by ?x0\n}",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M1 .\n?x0 a M0 .\nM2 P1 ?x0\n}",
        "expectedResponse": "Yes",
        "recursionDepth": 21
    },
    {
        "questionIdx": 188714,
        "questionWithBrackets": "Which Chinese executive producer of [Fist Power] did [One Hundred Years of Film] employ",
        "questionPatternModEntities": "Which Chinese executive producer of M0 did M1 employ",
        "questionTemplate": "Which [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] did [entity] [VP_SIMPLE]",
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.producer.films_executive_produced ns:m.0cs1n3x .\n?x0 ns:people.person.employment_history/ns:business.employment_tenure.company ns:m.02rmtc7 .\n?x0 ns:people.person.nationality ns:m.0d05w3\n}",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P2 M2\n}",
        "expectedResponse": "Charles Heung",
        "recursionDepth": 21
    },
    {
        "questionIdx": 154353,
        "questionWithBrackets": "What female employee of [Plum Pictures] executive produced [After.Life]",
        "questionPatternModEntities": "What female employee of M1 executive produced M0",
        "questionTemplate": "What [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] [VP_SIMPLE] [entity]",
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.producer.films_executive_produced ns:m.02pxhgv .\n?x0 ns:people.person.employment_history/ns:business.employment_tenure.company ns:m.04f04fd .\n?x0 ns:people.person.gender ns:m.02zsn\n}",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P2 M2\n}",
        "expectedResponse": "Galt Niederhoffer",
        "recursionDepth": 22
    },
    {
        "questionIdx": 211719,
        "questionWithBrackets": "Which sibling of [Brandon Trost] was a sibling of a film editor",
        "questionPatternModEntities": "Which sibling of M0 was a sibling of a film editor",
        "questionTemplate": "Which [ROLE_SIMPLE] of [entity] was a [ROLE_SIMPLE] of a [NP_SIMPLE]",
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:people.person.sibling_s/ns:people.sibling_relationship.sibling|ns:fictional_universe.fictional_character.siblings/ns:fictional_universe.sibling_relationship_of_fictional_characters.siblings ?x1 .\n?x0 ns:people.person.sibling_s/ns:people.sibling_relationship.sibling|ns:fictional_universe.fictional_character.siblings/ns:fictional_universe.sibling_relationship_of_fictional_characters.siblings ns:m.0j_cq0 .\n?x1 a ns:film.editor .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x0 != ns:m.0j_cq0 )\n}",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P0 M0 .\n?x1 a M1 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x0 != M0 )\n}",
        "expectedResponse": "Sarah Trost",
        "recursionDepth": 22
    },
    {
        "questionIdx": 200909,
        "questionWithBrackets": "Which female sibling of [Wolfi Albach-Retty] was [Woman in Oven]'s actor",
        "questionPatternModEntities": "Which female sibling of M0 was M1 's actor",
        "questionTemplate": "Which [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] was [entity] 's [ROLE_SIMPLE]",
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.actor.film/ns:film.performance.character ns:m.0y88zb5 .\n?x0 ns:people.person.gender ns:m.02zsn .\n?x0 ns:people.person.sibling_s/ns:people.sibling_relationship.sibling|ns:fictional_universe.fictional_character.siblings/ns:fictional_universe.sibling_relationship_of_fictional_characters.siblings ns:m.0my2yld .\nFILTER ( ?x0 != ns:m.0my2yld )\n}",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P2 M2 .\nFILTER ( ?x0 != M0 )\n}",
        "expectedResponse": "Sacha Darwin",
        "recursionDepth": 22
    },
    {
        "questionIdx": 44265,
        "questionWithBrackets": "Was [Addicted to Love]'s producer a screenwriter's male actor",
        "questionPatternModEntities": "Was M0 's producer a screenwriter 's male actor",
        "questionTemplate": "Was [entity] 's [ROLE_SIMPLE] a [NP_SIMPLE] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.actor.film/ns:film.performance.character ?x1 .\n?x0 ns:film.producer.film|ns:film.production_company.films ns:m.01v84j .\n?x0 ns:people.person.gender ns:m.05zppz .\n?x1 a ns:film.writer\n}",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 ?x1 .\n?x0 P2 M1 .\n?x1 a M2\n}",
        "expectedResponse": "No",
        "recursionDepth": 23
    },
    {
        "questionIdx": 59480,
        "questionWithBrackets": "Was [Iman Imam]'s sibling a film director's parent and child",
        "questionPatternModEntities": "Was M0 's sibling a film director 's parent and child",
        "questionTemplate": "Was [entity] 's [ROLE_SIMPLE] a [NP_SIMPLE] 's [ROLE_SIMPLE] and [ROLE_SIMPLE]",
        "sparql": "SELECT count(*) WHERE {\n?x0 ns:people.person.children|ns:fictional_universe.fictional_character.children|ns:organization.organization.child/ns:organization.organization_relationship.child ?x1 .\n?x0 ns:people.person.parents|ns:fictional_universe.fictional_character.parents|ns:organization.organization.parent/ns:organization.organization_relationship.parent ?x1 .\n?x0 ns:people.person.sibling_s/ns:people.sibling_relationship.sibling|ns:fictional_universe.fictional_character.siblings/ns:fictional_universe.sibling_relationship_of_fictional_characters.siblings ns:m.0jwm_rn .\n?x1 a ns:film.director .\nFILTER ( ?x0 != ns:m.0jwm_rn )\n}",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x1 a M1 .\nFILTER ( ?x0 != M0 )\n}",
        "expectedResponse": "Yes",
        "recursionDepth": 23
    },
    {
        "questionIdx": 227220,
        "questionWithBrackets": "Who was a Japanese Canadian parent of [Serena McCarthy]",
        "questionPatternModEntities": "Who was a Japanese Canadian parent of M3",
        "questionTemplate": "Who was a [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:people.person .\n?x0 ns:people.person.children|ns:fictional_universe.fictional_character.children|ns:organization.organization.child/ns:organization.organization_relationship.child ns:m.0s96ggw .\n?x0 ns:people.person.nationality ns:m.03_3d .\n?x0 ns:people.person.nationality ns:m.0d060g\n}",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P1 M3 .\n?x0 a M0\n}",
        "expectedResponse": "Nobu McCarthy",
        "recursionDepth": 23
    },
    {
        "questionIdx": 38739,
        "questionWithBrackets": "Did a production company's employee and founder influence [Garret Schuelke]",
        "questionPatternModEntities": "Did a production company 's employee and founder influence M0",
        "questionTemplate": "Did a [NP_SIMPLE] 's [ROLE_SIMPLE] and [ROLE_SIMPLE] [VP_SIMPLE] [entity]",
        "sparql": "SELECT count(*) WHERE {\n?x0 ns:influence.influence_node.influenced ns:m.066b7gk .\n?x0 ns:organization.organization_founder.organizations_founded ?x1 .\n?x0 ns:people.person.employment_history/ns:business.employment_tenure.company ?x1 .\n?x1 a ns:film.production_company\n}",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x1 a M1\n}",
        "expectedResponse": "Yes",
        "recursionDepth": 23
    },
    {
        "questionIdx": 66979,
        "questionWithBrackets": "Was [Megas\u00f3nicos] distributed by and produced by a production company",
        "questionPatternModEntities": "Was M1 distributed by and produced by a production company",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by and [VP_SIMPLE] by a [NP_SIMPLE]",
        "sparql": "SELECT count(*) WHERE {\n?x0 a ns:film.production_company .\nns:m.0cgqvvj ns:film.film.distributors/ns:film.film_film_distributor_relationship.distributor ?x0 .\nns:m.0cgqvvj ns:film.film.produced_by|ns:film.film.production_companies ?x0\n}",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 a M0 .\nM1 P0 ?x0 .\nM1 P1 ?x0\n}",
        "expectedResponse": "No",
        "recursionDepth": 23
    },
    {
        "questionIdx": 167702,
        "questionWithBrackets": "What was a Japanese Canadian cinematographer's country of nationality",
        "questionPatternModEntities": "What was a Japanese Canadian cinematographer 's country of nationality",
        "questionTemplate": "What was a [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [NP_SIMPLE] 's [ROLE_SIMPLE]",
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ^ns:people.person.nationality ?x1 .\n?x1 a ns:film.cinematographer .\n?x1 ns:people.person.nationality ns:m.03_3d .\n?x1 ns:people.person.nationality ns:m.0d060g\n}",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x1 P1 M1 .\n?x1 P1 M2 .\n?x1 a M0\n}",
        "expectedResponse": "Canada; Japan",
        "recursionDepth": 24
    },
    {
        "questionIdx": 206385,
        "questionWithBrackets": "Which male child of a costume designer did [Lalita Ray] marry",
        "questionPatternModEntities": "Which male child of a costume designer did M1 marry",
        "questionTemplate": "Which [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of a [NP_SIMPLE] did [entity] [VP_SIMPLE]",
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:people.person.gender ns:m.05zppz .\n?x0 ns:people.person.parents|ns:fictional_universe.fictional_character.parents|ns:organization.organization.parent/ns:organization.organization_relationship.parent ?x1 .\n?x0 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ns:m.0bnnsj2 .\n?x1 a ns:film.film_costumer_designer .\nFILTER ( ?x0 != ns:m.0bnnsj2 )\n}",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 ?x1 .\n?x0 P2 M1 .\n?x1 a M2 .\nFILTER ( ?x0 != M1 )\n}",
        "expectedResponse": "Sandip Ray",
        "recursionDepth": 24
    },
    {
        "questionIdx": 86443,
        "questionWithBrackets": "Was [Well Done Abba] executive produced and produced by [Mahesh Ramanathan] and [Raj Pius]",
        "questionPatternModEntities": "Was M0 executive produced and produced by M1 and M2",
        "questionTemplate": "Was [entity] [VP_SIMPLE] and [VP_SIMPLE] by [entity] and [entity]",
        "sparql": "SELECT count(*) WHERE {\nns:m.07z13j3 ns:film.film.executive_produced_by ns:m.0h5sx22 .\nns:m.07z13j3 ns:film.film.executive_produced_by ns:m.0k1628 .\nns:m.07z13j3 ns:film.film.produced_by|ns:film.film.production_companies ns:m.0h5sx22 .\nns:m.07z13j3 ns:film.film.produced_by|ns:film.film.production_companies ns:m.0k1628\n}",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P1 M1 .\nM0 P1 M2\n}",
        "expectedResponse": "Yes",
        "recursionDepth": 24
    },
    {
        "questionIdx": 96440,
        "questionWithBrackets": "Was a film director [Interrupted Freedom, Assembly]'s female Swedish editor",
        "questionPatternModEntities": "Was a film director M3 's female Swedish editor",
        "questionTemplate": "Was a [NP_SIMPLE] [entity] 's [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparql": "SELECT count(*) WHERE {\n?x0 a ns:film.director .\n?x0 ns:film.editor.film ns:m.0gkt3l6 .\n?x0 ns:people.person.gender ns:m.02zsn .\n?x0 ns:people.person.nationality ns:m.0d0vqn\n}",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M1 .\n?x0 P1 M2 .\n?x0 P2 M3 .\n?x0 a M0\n}",
        "expectedResponse": "No",
        "recursionDepth": 24
    },
    {
        "questionIdx": 58898,
        "questionWithBrackets": "Was [How Is Your Fish Today?]'s British Chinese producer a person",
        "questionPatternModEntities": "Was M3 's British Chinese producer a person",
        "questionTemplate": "Was [entity] 's [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] a [NP_SIMPLE]",
        "sparql": "SELECT count(*) WHERE {\n?x0 a ns:people.person .\n?x0 ns:film.producer.film|ns:film.production_company.films ns:m.03c33__ .\n?x0 ns:people.person.nationality ns:m.07ssc .\n?x0 ns:people.person.nationality ns:m.0d05w3\n}",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P1 M3 .\n?x0 a M0\n}",
        "expectedResponse": "Yes",
        "recursionDepth": 24
    },
    {
        "questionIdx": 200173,
        "questionWithBrackets": "Which female Spanish art director was [\u00c1m\u00e1r]'s editor",
        "questionPatternModEntities": "Which female Spanish art director was M3 's editor",
        "questionTemplate": "Which [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [NP_SIMPLE] was [entity] 's [ROLE_SIMPLE]",
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:film.film_art_director .\n?x0 ns:film.editor.film ns:m.0fy5smw .\n?x0 ns:people.person.gender ns:m.02zsn .\n?x0 ns:people.person.nationality ns:m.06mkj\n}",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M1 .\n?x0 P1 M2 .\n?x0 P2 M3 .\n?x0 a M0\n}",
        "expectedResponse": "Isabel Herguera",
        "recursionDepth": 24
    },
    {
        "questionIdx": 133170,
        "questionWithBrackets": "What French spouse of [Bulle Ogier] founded a film producer",
        "questionPatternModEntities": "What French spouse of M1 founded a film producer",
        "questionTemplate": "What [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] [VP_SIMPLE] a [NP_SIMPLE]",
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:organization.organization_founder.organizations_founded ?x1 .\n?x0 ns:people.person.nationality ns:m.0f8l9c .\n?x0 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ns:m.063k6z .\n?x1 a ns:film.producer .\nFILTER ( ?x0 != ns:m.063k6z )\n}",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 M0 .\n?x0 P2 M1 .\n?x1 a M2 .\nFILTER ( ?x0 != M1 )\n}",
        "expectedResponse": "Barbet Schroeder",
        "recursionDepth": 24
    },
    {
        "questionIdx": 50236,
        "questionWithBrackets": "Was [Chow Ting Au]'s sibling a person that executive produced [Like Crazy]",
        "questionPatternModEntities": "Was M0 's sibling a person that executive produced M2",
        "questionTemplate": "Was [entity] 's [ROLE_SIMPLE] a [NP_SIMPLE] that [VP_SIMPLE] [entity]",
        "sparql": "SELECT count(*) WHERE {\n?x0 a ns:people.person .\n?x0 ns:film.producer.films_executive_produced ns:m.0fpmrlv .\n?x0 ns:people.person.sibling_s/ns:people.sibling_relationship.sibling|ns:fictional_universe.fictional_character.siblings/ns:fictional_universe.sibling_relationship_of_fictional_characters.siblings ns:m.0w_4sht .\nFILTER ( ?x0 != ns:m.0w_4sht )\n}",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M2 .\n?x0 a M1 .\nFILTER ( ?x0 != M0 )\n}",
        "expectedResponse": "No",
        "recursionDepth": 24
    },
    {
        "questionIdx": 46014,
        "questionWithBrackets": "Was [Anna, madre di Maria]'s British Italian actor [Victor Rietti]'s child",
        "questionPatternModEntities": "Was M2 's British Italian actor M3 's child",
        "questionTemplate": "Was [entity] 's [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] [entity] 's [ROLE_SIMPLE]",
        "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.actor.film/ns:film.performance.character ns:m.0hh1ny_ .\n?x0 ns:people.person.nationality ns:m.03rjj .\n?x0 ns:people.person.nationality ns:m.07ssc .\n?x0 ns:people.person.parents|ns:fictional_universe.fictional_character.parents|ns:organization.organization.parent/ns:organization.organization_relationship.parent ns:m.0dgpyjb\n}",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P1 M2 .\n?x0 P2 M3\n}",
        "expectedResponse": "No",
        "recursionDepth": 25
    },
    {
        "questionIdx": 4766,
        "questionWithBrackets": "Did [Conroy Chan Chi-Chung]'s Chinese Canadian spouse produce [Dream Home]",
        "questionPatternModEntities": "Did M3 's Chinese Canadian spouse produce M2",
        "questionTemplate": "Did [entity] 's [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] [VP_SIMPLE] [entity]",
        "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.producer.film|ns:film.production_company.films ns:m.0ch30sk .\n?x0 ns:people.person.nationality ns:m.0d05w3 .\n?x0 ns:people.person.nationality ns:m.0d060g .\n?x0 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ns:m.0cm61n4 .\nFILTER ( ?x0 != ns:m.0cm61n4 )\n}",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P1 M2 .\n?x0 P2 M3 .\nFILTER ( ?x0 != M3 )\n}",
        "expectedResponse": "Yes",
        "recursionDepth": 25
    },
    {
        "questionIdx": 62517,
        "questionWithBrackets": "Was [Kang Wei]'s spouse [L'uomo di Toledo]'s Chinese German star",
        "questionPatternModEntities": "Was M3 's spouse M2 's Chinese German star",
        "questionTemplate": "Was [entity] 's [ROLE_SIMPLE] [entity] 's [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.actor.film/ns:film.performance.film ns:m.06zk4wy .\n?x0 ns:people.person.nationality ns:m.0345h .\n?x0 ns:people.person.nationality ns:m.0d05w3 .\n?x0 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ns:m.0hzhkzh .\nFILTER ( ?x0 != ns:m.0hzhkzh )\n}",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P1 M2 .\n?x0 P2 M3 .\nFILTER ( ?x0 != M3 )\n}",
        "expectedResponse": "No",
        "recursionDepth": 25
    },
    {
        "questionIdx": 135040,
        "questionWithBrackets": "What Mexican spouse of [Marie-Jos\u00e9 Tramini] did [St\u00e9phane Mallarm\u00e9] and [Juan Ram\u00f3n Jim\u00e9nez] influence",
        "questionPatternModEntities": "What Mexican spouse of M3 did M0 and M1 influence",
        "questionTemplate": "What [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] did [entity] and [entity] [VP_SIMPLE]",
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:influence.influence_node.influenced_by ns:m.01vzpj .\n?x0 ns:influence.influence_node.influenced_by ns:m.074ck .\n?x0 ns:people.person.nationality ns:m.0b90_r .\n?x0 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ns:m.0j972hk .\nFILTER ( ?x0 != ns:m.0j972hk )\n}",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P1 M2 .\n?x0 P2 M3 .\nFILTER ( ?x0 != M3 )\n}",
        "expectedResponse": "Octavio Paz",
        "recursionDepth": 25
    },
    {
        "questionIdx": 16572,
        "questionWithBrackets": "Did [Paul C\u00e9zanne] influence a costume designer and influence [Molly Bobak]",
        "questionPatternModEntities": "Did M1 influence a costume designer and influence M2",
        "questionTemplate": "Did [entity] [VP_SIMPLE] a [NP_SIMPLE] and [VP_SIMPLE] [entity]",
        "sparql": "SELECT count(*) WHERE {\n?x0 a ns:film.film_costumer_designer .\nns:m.063mx ns:influence.influence_node.influenced ?x0 .\nns:m.063mx ns:influence.influence_node.influenced ns:m.0465rgj\n}",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 a M0 .\nM1 P0 ?x0 .\nM1 P0 M2\n}",
        "expectedResponse": "Yes",
        "recursionDepth": 25
    },
    {
        "questionIdx": 222733,
        "questionWithBrackets": "Who was [Docks of Hamburg]'s German male Italian star",
        "questionPatternModEntities": "Who was M3 's German male Italian star",
        "questionTemplate": "Who was [entity] 's [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:people.person .\n?x0 ns:film.actor.film/ns:film.performance.film ns:m.0w330b3 .\n?x0 ns:people.person.gender ns:m.05zppz .\n?x0 ns:people.person.nationality ns:m.0345h .\n?x0 ns:people.person.nationality ns:m.03rjj\n}",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P1 M3 .\n?x0 P2 M4 .\n?x0 a M0\n}",
        "expectedResponse": "Friedrich Benfer",
        "recursionDepth": 26
    },
    {
        "questionIdx": 132207,
        "questionWithBrackets": "What Chinese parent of [Mao Anlong] was influenced by [Karl Marx] and [Thomas Robert Malthus]",
        "questionPatternModEntities": "What Chinese parent of M3 was influenced by M0 and M1",
        "questionTemplate": "What [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] was [VP_SIMPLE] by [entity] and [entity]",
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:influence.influence_node.influenced_by ns:m.048cl .\n?x0 ns:influence.influence_node.influenced_by ns:m.07r3d .\n?x0 ns:people.person.children|ns:fictional_universe.fictional_character.children|ns:organization.organization.child/ns:organization.organization_relationship.child ns:m.0j_jj2t .\n?x0 ns:people.person.nationality ns:m.0d05w3\n}",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P1 M2 .\n?x0 P2 M3\n}",
        "expectedResponse": "Mao Zedong",
        "recursionDepth": 26
    },
    {
        "questionIdx": 103027,
        "questionWithBrackets": "Was a person a German Chinese star of [Haseena Atom Bomb]",
        "questionPatternModEntities": "Was a person a German Chinese star of M3",
        "questionTemplate": "Was a [NP_SIMPLE] a [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparql": "SELECT count(*) WHERE {\n?x0 a ns:people.person .\n?x0 ns:film.actor.film/ns:film.performance.film ns:m.0404p2d .\n?x0 ns:people.person.nationality ns:m.0345h .\n?x0 ns:people.person.nationality ns:m.0d05w3\n}",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P1 M3 .\n?x0 a M0\n}",
        "expectedResponse": "No",
        "recursionDepth": 26
    },
    {
        "questionIdx": 227242,
        "questionWithBrackets": "Who was a Japanese Swedish star of a film",
        "questionPatternModEntities": "Who was a Japanese Swedish star of a film",
        "questionTemplate": "Who was a [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of a [NP_SIMPLE]",
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:people.person .\n?x0 ns:film.actor.film/ns:film.performance.film ?x1 .\n?x0 ns:people.person.nationality ns:m.03_3d .\n?x0 ns:people.person.nationality ns:m.0d0vqn .\n?x1 a ns:film.film\n}",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P1 ?x1 .\n?x0 a M0 .\n?x1 a M3\n}",
        "expectedResponse": "Gaby Stenberg",
        "recursionDepth": 26
    },
    {
        "questionIdx": 224776,
        "questionWithBrackets": "Who was [Wesley Sneijder]'s Spanish Dutch female spouse",
        "questionPatternModEntities": "Who was M4 's Spanish Dutch female spouse",
        "questionTemplate": "Who was [entity] 's [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:people.person .\n?x0 ns:people.person.gender ns:m.02zsn .\n?x0 ns:people.person.nationality ns:m.059j2 .\n?x0 ns:people.person.nationality ns:m.06mkj .\n?x0 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ns:m.03dvdx .\nFILTER ( ?x0 != ns:m.03dvdx )\n}",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P1 M3 .\n?x0 P2 M4 .\n?x0 a M0 .\nFILTER ( ?x0 != M4 )\n}",
        "expectedResponse": "Yolanthe Sneijder-Cabau",
        "recursionDepth": 26
    },
    {
        "questionIdx": 74336,
        "questionWithBrackets": "Was [Road To Ythaca] written and edited by [Chris Jones-Marino], [Andrea Ament], and [Vaughn Blake]",
        "questionPatternModEntities": "Was M0 written and edited by M1 , M2 , and M3",
        "questionTemplate": "Was [entity] [VP_SIMPLE] and [VP_SIMPLE] by [entity] , [entity] , and [entity]",
        "sparql": "SELECT count(*) WHERE {\nns:m.0g4trsz ns:film.film.edited_by ns:m.0zzv1mt .\nns:m.0g4trsz ns:film.film.edited_by ns:m.0zzv21w .\nns:m.0g4trsz ns:film.film.edited_by ns:m.0zzv37z .\nns:m.0g4trsz ns:film.film.written_by ns:m.0zzv1mt .\nns:m.0g4trsz ns:film.film.written_by ns:m.0zzv21w .\nns:m.0g4trsz ns:film.film.written_by ns:m.0zzv37z\n}",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P0 M3 .\nM0 P1 M1 .\nM0 P1 M2 .\nM0 P1 M3\n}",
        "expectedResponse": "No",
        "recursionDepth": 26
    },
    {
        "questionIdx": 136546,
        "questionWithBrackets": "What actor played a film and played [Mr. Browman]",
        "questionPatternModEntities": "What actor played a film and played M0",
        "questionTemplate": "What [NP_SIMPLE] [VP_SIMPLE] a [NP_SIMPLE] and [VP_SIMPLE] [entity]",
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.actor.film/ns:film.performance.character ?x1 .\n?x0 ns:film.actor.film/ns:film.performance.character ns:m.0h8b5bm .\n?x1 a ns:film.film\n}",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P0 M0 .\n?x1 a M1\n}",
        "expectedResponse": "Muse Watson",
        "recursionDepth": 27
    },
    {
        "questionIdx": 211589,
        "questionWithBrackets": "Which sequel of a film did [Jason Friedberg] produce and write",
        "questionPatternModEntities": "Which sequel of a film did M0 produce and write",
        "questionTemplate": "Which [ROLE_SIMPLE] of a [NP_SIMPLE] did [entity] [VP_SIMPLE] and [VP_SIMPLE]",
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.film.prequel ?x1 .\n?x0 ns:film.film.produced_by|ns:film.film.production_companies ns:m.0cgkyhg .\n?x0 ns:film.film.written_by ns:m.0cgkyhg .\n?x1 a ns:film.film\n}",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M0 .\n?x0 P2 ?x1 .\n?x1 a M1\n}",
        "expectedResponse": "Meet the Spartans; Disaster Movie",
        "recursionDepth": 27
    },
    {
        "questionIdx": 165105,
        "questionWithBrackets": "What sequel of [Road to Morocco] did a company distribute and produce",
        "questionPatternModEntities": "What sequel of M0 did a company distribute and produce",
        "questionTemplate": "What [ROLE_SIMPLE] of [entity] did a [NP_SIMPLE] [VP_SIMPLE] and [VP_SIMPLE]",
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.film.distributors/ns:film.film_film_distributor_relationship.distributor ?x1 .\n?x0 ns:film.film.prequel ns:m.0k40j .\n?x0 ns:film.film.produced_by|ns:film.film.production_companies ?x1 .\n?x1 a ns:business.employer\n}",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 M0 .\n?x1 a M1\n}",
        "expectedResponse": "Road to Utopia",
        "recursionDepth": 27
    },
    {
        "questionIdx": 188483,
        "questionWithBrackets": "Which Canadian spouse of [Tracy Pollan] was [The Michael J. Fox Foundation]'s founder and employee",
        "questionPatternModEntities": "Which Canadian spouse of M2 was M0 's founder and employee",
        "questionTemplate": "Which [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] was [entity] 's [ROLE_SIMPLE] and [ROLE_SIMPLE]",
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:organization.organization_founder.organizations_founded ns:m.0f_9_l .\n?x0 ns:people.person.employment_history/ns:business.employment_tenure.company ns:m.0f_9_l .\n?x0 ns:people.person.nationality ns:m.0d060g .\n?x0 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ns:m.03gpck .\nFILTER ( ?x0 != ns:m.03gpck )\n}",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M0 .\n?x0 P2 M1 .\n?x0 P3 M2 .\nFILTER ( ?x0 != M2 )\n}",
        "expectedResponse": "Michael J. Fox",
        "recursionDepth": 27
    },
    {
        "questionIdx": 232938,
        "questionWithBrackets": "Who was an American Dutch British parent of [Elizabeth Lorca Buiter]",
        "questionPatternModEntities": "Who was a American Dutch British parent of M4",
        "questionTemplate": "Who was a [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:people.person .\n?x0 ns:people.person.children|ns:fictional_universe.fictional_character.children|ns:organization.organization.child/ns:organization.organization_relationship.child ns:m.0w4y331 .\n?x0 ns:people.person.nationality ns:m.059j2 .\n?x0 ns:people.person.nationality ns:m.07ssc .\n?x0 ns:people.person.nationality ns:m.09c7w0\n}",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P0 M3 .\n?x0 P1 M4 .\n?x0 a M0\n}",
        "expectedResponse": "Willem Buiter",
        "recursionDepth": 28
    },
    {
        "questionIdx": 232797,
        "questionWithBrackets": "Who was a writer and cinematographer of [Schenec-tady Iii], [D'Annunzio's Cave], [A Series of Thoughts], and [Perret in France and Algeria]",
        "questionPatternModEntities": "Who was a writer and cinematographer of M1 , M2 , M3 , and M4",
        "questionTemplate": "Who was a [ROLE_SIMPLE] and [ROLE_SIMPLE] of [entity] , [entity] , [entity] , and [entity]",
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:people.person .\n?x0 ns:film.cinematographer.film ns:m.0_sksh3 .\n?x0 ns:film.cinematographer.film ns:m.0crxv3v .\n?x0 ns:film.cinematographer.film ns:m.0gf8lzf .\n?x0 ns:film.cinematographer.film ns:m.0pxb9x0 .\n?x0 ns:film.writer.film ns:m.0_sksh3 .\n?x0 ns:film.writer.film ns:m.0crxv3v .\n?x0 ns:film.writer.film ns:m.0gf8lzf .\n?x0 ns:film.writer.film ns:m.0pxb9x0\n}",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P0 M3 .\n?x0 P0 M4 .\n?x0 P1 M1 .\n?x0 P1 M2 .\n?x0 P1 M3 .\n?x0 P1 M4 .\n?x0 a M0\n}",
        "expectedResponse": "Heinz Emigholz",
        "recursionDepth": 28
    },
    {
        "questionIdx": 209265,
        "questionWithBrackets": "Which prequel of [The Little Train Robbery] was edited by and produced by a film producer",
        "questionPatternModEntities": "Which prequel of M0 was edited by and produced by a film producer",
        "questionTemplate": "Which [ROLE_SIMPLE] of [entity] was [VP_SIMPLE] by and [VP_SIMPLE] by a [NP_SIMPLE]",
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.film.edited_by ?x1 .\n?x0 ns:film.film.produced_by|ns:film.film.production_companies ?x1 .\n?x0 ns:film.film.sequel ns:m.0crfzv7 .\n?x1 a ns:film.producer\n}",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x1 a M1\n}",
        "expectedResponse": "The Great Train Robbery",
        "recursionDepth": 28
    },
    {
        "questionIdx": 226431,
        "questionWithBrackets": "Who was a French Mexican male editor of [Septiembre a\u00fan]",
        "questionPatternModEntities": "Who was a French Mexican male editor of M4",
        "questionTemplate": "Who was a [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:people.person .\n?x0 ns:film.editor.film ns:m.04p7d9_ .\n?x0 ns:people.person.gender ns:m.05zppz .\n?x0 ns:people.person.nationality ns:m.0b90_r .\n?x0 ns:people.person.nationality ns:m.0f8l9c\n}",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P1 M3 .\n?x0 P2 M4 .\n?x0 a M0\n}",
        "expectedResponse": "Mat\u00edas Meyer",
        "recursionDepth": 28
    },
    {
        "questionIdx": 132302,
        "questionWithBrackets": "What Chinese spouse of [Jia-Nian Jiang] played [He Bingyan], [Chen Chang Xing], and [Lin Dong]",
        "questionPatternModEntities": "What Chinese spouse of M4 played M1 , M2 , and M3",
        "questionTemplate": "What [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] [VP_SIMPLE] [entity] , [entity] , and [entity]",
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.actor.film/ns:film.performance.character ns:m.0g4ps3z .\n?x0 ns:film.actor.film/ns:film.performance.character ns:m.0pcqv3z .\n?x0 ns:film.actor.film/ns:film.performance.character ns:m.0v3p49n .\n?x0 ns:people.person.nationality ns:m.0d05w3 .\n?x0 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ns:m.0hhwgjm .\nFILTER ( ?x0 != ns:m.0hhwgjm )\n}",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\n?x0 P1 M3 .\n?x0 P2 M4 .\nFILTER ( ?x0 != M4 )\n}",
        "expectedResponse": "Tony Leung Ka-fai",
        "recursionDepth": 28
    },
    {
        "questionIdx": 92434,
        "questionWithBrackets": "Was a cinematographer a star and executive producer of [CZ12], [The Medallion], and [The Myth]",
        "questionPatternModEntities": "Was a cinematographer a star and executive producer of M1 , M2 , and M3",
        "questionTemplate": "Was a [NP_SIMPLE] a [ROLE_SIMPLE] and [ROLE_SIMPLE] of [entity] , [entity] , and [entity]",
        "sparql": "SELECT count(*) WHERE {\n?x0 a ns:film.cinematographer .\n?x0 ns:film.actor.film/ns:film.performance.film ns:m.02_sqq .\n?x0 ns:film.actor.film/ns:film.performance.film ns:m.07yc_w .\n?x0 ns:film.actor.film/ns:film.performance.film ns:m.0hznzl6 .\n?x0 ns:film.producer.films_executive_produced ns:m.02_sqq .\n?x0 ns:film.producer.films_executive_produced ns:m.07yc_w .\n?x0 ns:film.producer.films_executive_produced ns:m.0hznzl6\n}",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P0 M3 .\n?x0 P1 M1 .\n?x0 P1 M2 .\n?x0 P1 M3 .\n?x0 a M0\n}",
        "expectedResponse": "Yes",
        "recursionDepth": 28
    },
    {
        "questionIdx": 144763,
        "questionWithBrackets": "What did [Lars Ulrich], [Robert Trujillo], [James Hetfield], and [Kirk Hammett] executive produce and write",
        "questionPatternModEntities": "What did M0 , M1 , M2 , and M3 executive produce and write",
        "questionTemplate": "What did [entity] , [entity] , [entity] , and [entity] [VP_SIMPLE] and [VP_SIMPLE]",
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.film.executive_produced_by ns:m.01nrz4 .\n?x0 ns:film.film.executive_produced_by ns:m.020hh3 .\n?x0 ns:film.film.executive_produced_by ns:m.02t426 .\n?x0 ns:film.film.executive_produced_by ns:m.0489w .\n?x0 ns:film.film.written_by ns:m.01nrz4 .\n?x0 ns:film.film.written_by ns:m.020hh3 .\n?x0 ns:film.film.written_by ns:m.02t426 .\n?x0 ns:film.film.written_by ns:m.0489w\n}",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P0 M3 .\n?x0 P1 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\n?x0 P1 M3\n}",
        "expectedResponse": "Metallica Through the Never",
        "recursionDepth": 29
    },
    {
        "questionIdx": 61752,
        "questionWithBrackets": "Was [John Joseph Jolly Kyle] a female Mexican costume designer that [Bruno Rubeo] married",
        "questionPatternModEntities": "Was M0 a female Mexican costume designer that M4 married",
        "questionTemplate": "Was [entity] a [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [NP_SIMPLE] that [entity] [VP_SIMPLE]",
        "sparql": "SELECT count(*) WHERE {\nFILTER ( ns:m.0_qjj4n != ns:m.0bb51hq ) .\nns:m.0_qjj4n a ns:film.film_costumer_designer .\nns:m.0_qjj4n ns:people.person.gender ns:m.02zsn .\nns:m.0_qjj4n ns:people.person.nationality ns:m.0b90_r .\nns:m.0_qjj4n ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ns:m.0bb51hq\n}",
        "sparqlPattern": "SELECT count(*) WHERE {\nFILTER ( M0 != M4 ) .\nM0 P0 M2 .\nM0 P1 M3 .\nM0 P2 M4 .\nM0 a M1\n}",
        "expectedResponse": "No",
        "recursionDepth": 29
    },
    {
        "questionIdx": 133367,
        "questionWithBrackets": "What German employee of [BMW] was employed by [Tata Motors], [Opel], and [General Motors Europe]",
        "questionPatternModEntities": "What German employee of M0 was employed by M1 , M2 , and M3",
        "questionTemplate": "What [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] was [VP_SIMPLE] by [entity] , [entity] , and [entity]",
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:people.person.employment_history/ns:business.employment_tenure.company ns:m.017yh .\n?x0 ns:people.person.employment_history/ns:business.employment_tenure.company ns:m.03jxtm .\n?x0 ns:people.person.employment_history/ns:business.employment_tenure.company ns:m.05kzl .\n?x0 ns:people.person.employment_history/ns:business.employment_tenure.company ns:m.0c05l9 .\n?x0 ns:people.person.nationality ns:m.0345h\n}",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P0 M3 .\n?x0 P1 M4\n}",
        "expectedResponse": "Carl-Peter Forster",
        "recursionDepth": 29
    },
    {
        "questionIdx": 187834,
        "questionWithBrackets": "Which British founder of [Virgin Experience Days] and [Virgin Drinks] married [Joan Templeman] and [Kristen Tomassi]",
        "questionPatternModEntities": "Which British founder of M0 and M1 married M3 and M4",
        "questionTemplate": "Which [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] and [entity] [VP_SIMPLE] [entity] and [entity]",
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:organization.organization_founder.organizations_founded ns:m.039y66 .\n?x0 ns:organization.organization_founder.organizations_founded ns:m.0fblyv .\n?x0 ns:people.person.nationality ns:m.07ssc .\n?x0 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ns:m.0j6bzyp .\n?x0 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ns:m.0j6j_tw .\nFILTER ( ?x0 != ns:m.0j6bzyp ) .\nFILTER ( ?x0 != ns:m.0j6j_tw )\n}",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P1 M2 .\n?x0 P2 M3 .\n?x0 P2 M4 .\nFILTER ( ?x0 != M3 ) .\nFILTER ( ?x0 != M4 )\n}",
        "expectedResponse": "Richard Branson",
        "recursionDepth": 29
    },
    {
        "questionIdx": 134564,
        "questionWithBrackets": "What Japanese sibling of [Mizuko Ito] was employed by [Creative Commons], [Technorati], and [MIT Media Lab]",
        "questionPatternModEntities": "What Japanese sibling of M0 was employed by M1 , M2 , and M3",
        "questionTemplate": "What [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] was [VP_SIMPLE] by [entity] , [entity] , and [entity]",
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:people.person.employment_history/ns:business.employment_tenure.company ns:m.02281x .\n?x0 ns:people.person.employment_history/ns:business.employment_tenure.company ns:m.041927 .\n?x0 ns:people.person.employment_history/ns:business.employment_tenure.company ns:m.0drb3 .\n?x0 ns:people.person.nationality ns:m.03_3d .\n?x0 ns:people.person.sibling_s/ns:people.sibling_relationship.sibling|ns:fictional_universe.fictional_character.siblings/ns:fictional_universe.sibling_relationship_of_fictional_characters.siblings ns:m.05h700 .\nFILTER ( ?x0 != ns:m.05h700 )\n}",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\n?x0 P1 M3 .\n?x0 P2 M4 .\nFILTER ( ?x0 != M0 )\n}",
        "expectedResponse": "Joi Ito",
        "recursionDepth": 29
    },
    {
        "questionIdx": 190397,
        "questionWithBrackets": "Which Italian female British person was [Olga Polizzi]'s child",
        "questionPatternModEntities": "Which Italian female British person was M4 's child",
        "questionTemplate": "Which [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [NP_SIMPLE] was [entity] 's [ROLE_SIMPLE]",
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:people.person .\n?x0 ns:people.person.gender ns:m.02zsn .\n?x0 ns:people.person.nationality ns:m.03rjj .\n?x0 ns:people.person.nationality ns:m.07ssc .\n?x0 ns:people.person.parents|ns:fictional_universe.fictional_character.parents|ns:organization.organization.parent/ns:organization.organization_relationship.parent ns:m.0r5tb7k\n}",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P1 M3 .\n?x0 P2 M4 .\n?x0 a M0\n}",
        "expectedResponse": "Alex Polizzi; Charlotte Polizzi",
        "recursionDepth": 29
    },
    {
        "questionIdx": 132607,
        "questionWithBrackets": "What Dutch star and costume designer of [La stanza delle parole] and [Top Model] did [Gabriele Tinti] marry",
        "questionPatternModEntities": "What Dutch star and costume designer of M0 and M1 did M3 marry",
        "questionTemplate": "What [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] and [ROLE_SIMPLE] of [entity] and [entity] did [entity] [VP_SIMPLE]",
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.actor.film/ns:film.performance.film ns:m.0c1mwst .\n?x0 ns:film.actor.film/ns:film.performance.film ns:m.0c1mwt0 .\n?x0 ns:film.film_costumer_designer.costume_design_for_film ns:m.0c1mwst .\n?x0 ns:film.film_costumer_designer.costume_design_for_film ns:m.0c1mwt0 .\n?x0 ns:people.person.nationality ns:m.059j2 .\n?x0 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ns:m.0gbzvwf .\nFILTER ( ?x0 != ns:m.0gbzvwf )\n}",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P1 M2 .\n?x0 P2 M0 .\n?x0 P2 M1 .\n?x0 P3 M3 .\nFILTER ( ?x0 != M3 )\n}",
        "expectedResponse": "Laura Gemser",
        "recursionDepth": 30
    },
    {
        "questionIdx": 152415,
        "questionWithBrackets": "What distributor of [Tars and Stripes] did [Quadrangle Group] acquire and a company acquire",
        "questionPatternModEntities": "What distributor of M1 did M0 acquire and a company acquire",
        "questionTemplate": "What [ROLE_SIMPLE] of [entity] did [entity] [VP_SIMPLE] and a [NP_SIMPLE] [VP_SIMPLE]",
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.film_distributor.films_distributed/ns:film.film_film_distributor_relationship.film ns:m.03csk2v .\n?x0 ns:organization.organization.acquired_by/ns:business.acquisition.acquiring_company ?x1 .\n?x0 ns:organization.organization.acquired_by/ns:business.acquisition.acquiring_company ns:m.02vmhkn .\n?x1 a ns:business.employer\n}",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x1 a M2\n}",
        "expectedResponse": "Metro-Goldwyn-Mayer",
        "recursionDepth": 30
    },
    {
        "questionIdx": 229654,
        "questionWithBrackets": "Who was a director, writer, star, and executive producer of [Uncle Bob] and [Never Down]",
        "questionPatternModEntities": "Who was a director , writer , star , and executive producer of M1 and M2",
        "questionTemplate": "Who was a [ROLE_SIMPLE] , [ROLE_SIMPLE] , [ROLE_SIMPLE] , and [ROLE_SIMPLE] of [entity] and [entity]",
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:people.person .\n?x0 ns:film.actor.film/ns:film.performance.film ns:m.04j0dnl .\n?x0 ns:film.actor.film/ns:film.performance.film ns:m.0c1g08c .\n?x0 ns:film.director.film ns:m.04j0dnl .\n?x0 ns:film.director.film ns:m.0c1g08c .\n?x0 ns:film.producer.films_executive_produced ns:m.04j0dnl .\n?x0 ns:film.producer.films_executive_produced ns:m.0c1g08c .\n?x0 ns:film.writer.film ns:m.04j0dnl .\n?x0 ns:film.writer.film ns:m.0c1g08c\n}",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P1 M1 .\n?x0 P1 M2 .\n?x0 P2 M1 .\n?x0 P2 M2 .\n?x0 P3 M1 .\n?x0 P3 M2 .\n?x0 a M0\n}",
        "expectedResponse": "Robert Oppel",
        "recursionDepth": 30
    },
    {
        "questionIdx": 189996,
        "questionWithBrackets": "Which German female director of [Impressionen unter Wasser] did [Peter Jacob] and [Horst Kettner] marry",
        "questionPatternModEntities": "Which German female director of M4 did M2 and M3 marry",
        "questionTemplate": "Which [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] did [entity] and [entity] [VP_SIMPLE]",
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.director.film ns:m.0kv6pt .\n?x0 ns:people.person.gender ns:m.02zsn .\n?x0 ns:people.person.nationality ns:m.0345h .\n?x0 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ns:m.046qw1g .\n?x0 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ns:m.046qw1w .\nFILTER ( ?x0 != ns:m.046qw1g ) .\nFILTER ( ?x0 != ns:m.046qw1w )\n}",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P2 M2 .\n?x0 P2 M3 .\n?x0 P3 M4 .\nFILTER ( ?x0 != M2 ) .\nFILTER ( ?x0 != M3 )\n}",
        "expectedResponse": "Leni Riefenstahl",
        "recursionDepth": 30
    },
    {
        "questionIdx": 152867,
        "questionWithBrackets": "What editor, star, and costume designer of [The Wizard of Speed and Time] and [Animato] was [Greg Jittlov]'s sibling",
        "questionPatternModEntities": "What editor , star , and costume designer of M1 and M2 was M0 's sibling",
        "questionTemplate": "What [ROLE_SIMPLE] , [ROLE_SIMPLE] , and [ROLE_SIMPLE] of [entity] and [entity] was [entity] 's [ROLE_SIMPLE]",
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.actor.film/ns:film.performance.film ns:m.07fm59 .\n?x0 ns:film.actor.film/ns:film.performance.film ns:m.083y0 .\n?x0 ns:film.editor.film ns:m.07fm59 .\n?x0 ns:film.editor.film ns:m.083y0 .\n?x0 ns:film.film_costumer_designer.costume_design_for_film ns:m.07fm59 .\n?x0 ns:film.film_costumer_designer.costume_design_for_film ns:m.083y0 .\n?x0 ns:people.person.sibling_s/ns:people.sibling_relationship.sibling|ns:fictional_universe.fictional_character.siblings/ns:fictional_universe.sibling_relationship_of_fictional_characters.siblings ns:m.0kycj3t .\nFILTER ( ?x0 != ns:m.0kycj3t )\n}",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\n?x0 P2 M1 .\n?x0 P2 M2 .\n?x0 P3 M1 .\n?x0 P3 M2 .\nFILTER ( ?x0 != M0 )\n}",
        "expectedResponse": "Mike Jittlov",
        "recursionDepth": 30
    },
    {
        "questionIdx": 60620,
        "questionWithBrackets": "Was [Jackass 3D] produced by a British Canadian American person",
        "questionPatternModEntities": "Was M4 produced by a British Canadian American person",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [NP_SIMPLE]",
        "sparql": "SELECT count(*) WHERE {\n?x0 a ns:people.person .\n?x0 ns:people.person.nationality ns:m.07ssc .\n?x0 ns:people.person.nationality ns:m.09c7w0 .\n?x0 ns:people.person.nationality ns:m.0d060g .\nns:m.09rx7tx ns:film.film.produced_by|ns:film.film.production_companies ?x0\n}",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P0 M3 .\n?x0 a M0 .\nM4 P1 ?x0\n}",
        "expectedResponse": "Yes",
        "recursionDepth": 30
    },
    {
        "questionIdx": 190292,
        "questionWithBrackets": "Which Italian child of a film producer did [My Dad Is 100 Years Old], [A Matter of Time], and [Zelly And Me] star",
        "questionPatternModEntities": "Which Italian child of a film producer did M1 , M2 , and M3 star",
        "questionTemplate": "Which [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of a [NP_SIMPLE] did [entity] , [entity] , and [entity] [VP_SIMPLE]",
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.actor.film/ns:film.performance.film ns:m.08cxt21 .\n?x0 ns:film.actor.film/ns:film.performance.film ns:m.0c9xbd .\n?x0 ns:film.actor.film/ns:film.performance.film ns:m.0gksds8 .\n?x0 ns:people.person.nationality ns:m.03rjj .\n?x0 ns:people.person.parents|ns:fictional_universe.fictional_character.parents|ns:organization.organization.parent/ns:organization.organization_relationship.parent ?x1 .\n?x1 a ns:film.producer\n}",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\n?x0 P1 M3 .\n?x0 P2 ?x1 .\n?x1 a M4\n}",
        "expectedResponse": "Isabella Rossellini",
        "recursionDepth": 31
    },
    {
        "questionIdx": 144340,
        "questionWithBrackets": "What did [Joe Rubalcaba], [Dustin Weaver], [Esteban Powell], [Perry Sachs], and [Deb Loftis] edit and produce",
        "questionPatternModEntities": "What did M0 , M1 , M2 , M3 , and M4 edit and produce",
        "questionTemplate": "What did [entity] , [entity] , [entity] , [entity] , and [entity] [VP_SIMPLE] and [VP_SIMPLE]",
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.film.edited_by ns:m.0h2m0gm .\n?x0 ns:film.film.edited_by ns:m.0h7_wz .\n?x0 ns:film.film.edited_by ns:m.0hbbtm4 .\n?x0 ns:film.film.edited_by ns:m.0hbcdwy .\n?x0 ns:film.film.edited_by ns:m.0hbcdx4 .\n?x0 ns:film.film.produced_by|ns:film.film.production_companies ns:m.0h2m0gm .\n?x0 ns:film.film.produced_by|ns:film.film.production_companies ns:m.0h7_wz .\n?x0 ns:film.film.produced_by|ns:film.film.production_companies ns:m.0hbbtm4 .\n?x0 ns:film.film.produced_by|ns:film.film.production_companies ns:m.0hbcdwy .\n?x0 ns:film.film.produced_by|ns:film.film.production_companies ns:m.0hbcdx4\n}",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P0 M3 .\n?x0 P0 M4 .\n?x0 P1 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\n?x0 P1 M3 .\n?x0 P1 M4\n}",
        "expectedResponse": "Zoey 101: Behind the Scenes",
        "recursionDepth": 31
    },
    {
        "questionIdx": 96530,
        "questionWithBrackets": "Was a film director a cinematographer and writer of [D'Annunzio's Cave], [The Basis of Make-Up (III)], [Perret in France and Algeria], and [Schenec-tady Iii]",
        "questionPatternModEntities": "Was a film director a cinematographer and writer of M1 , M2 , M3 , and M4",
        "questionTemplate": "Was a [NP_SIMPLE] a [ROLE_SIMPLE] and [ROLE_SIMPLE] of [entity] , [entity] , [entity] , and [entity]",
        "sparql": "SELECT count(*) WHERE {\n?x0 a ns:film.director .\n?x0 ns:film.cinematographer.film ns:m.0_sksh3 .\n?x0 ns:film.cinematographer.film ns:m.0crxv3v .\n?x0 ns:film.cinematographer.film ns:m.0gx2ty5 .\n?x0 ns:film.cinematographer.film ns:m.0pxb9x0 .\n?x0 ns:film.writer.film ns:m.0_sksh3 .\n?x0 ns:film.writer.film ns:m.0crxv3v .\n?x0 ns:film.writer.film ns:m.0gx2ty5 .\n?x0 ns:film.writer.film ns:m.0pxb9x0\n}",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P0 M3 .\n?x0 P0 M4 .\n?x0 P1 M1 .\n?x0 P1 M2 .\n?x0 P1 M3 .\n?x0 P1 M4 .\n?x0 a M0\n}",
        "expectedResponse": "Yes",
        "recursionDepth": 31
    },
    {
        "questionIdx": 131004,
        "questionWithBrackets": "What British art director whose spouse wrote [The First Born] was [Pat Hitchcock]'s parent",
        "questionPatternModEntities": "What British art director whose spouse wrote M3 was M2 's parent",
        "questionTemplate": "What [ADJECTIVE_SIMPLE] [NP_SIMPLE] whose [ROLE_SIMPLE] [VP_SIMPLE] [entity] was [entity] 's [ROLE_SIMPLE]",
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:film.film_art_director .\n?x0 ns:people.person.children|ns:fictional_universe.fictional_character.children|ns:organization.organization.child/ns:organization.organization_relationship.child ns:m.01fv1q .\n?x0 ns:people.person.nationality ns:m.07ssc .\n?x0 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ?x1 .\n?x1 ns:film.writer.film ns:m.0dgn486 .\nFILTER ( ?x0 != ?x1 )\n}",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M1 .\n?x0 P1 M2 .\n?x0 P2 ?x1 .\n?x0 a M0 .\n?x1 P3 M3 .\nFILTER ( ?x0 != ?x1 )\n}",
        "expectedResponse": "Alfred Hitchcock",
        "recursionDepth": 31
    },
    {
        "questionIdx": 173002,
        "questionWithBrackets": "What was edited and written by [Vaughn Blake], [Daniel Boynton], [Laurel Graydon], [Philip Rashkovetsky], and [Andrea Ament]",
        "questionPatternModEntities": "What was edited and written by M0 , M1 , M2 , M3 , and M4",
        "questionTemplate": "What was [VP_SIMPLE] and [VP_SIMPLE] by [entity] , [entity] , [entity] , [entity] , and [entity]",
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.film.edited_by ns:m.0zzv1mt .\n?x0 ns:film.film.edited_by ns:m.0zzv21w .\n?x0 ns:film.film.edited_by ns:m.0zzv28y .\n?x0 ns:film.film.edited_by ns:m.0zzv2yv .\n?x0 ns:film.film.edited_by ns:m.0zzv45m .\n?x0 ns:film.film.written_by ns:m.0zzv1mt .\n?x0 ns:film.film.written_by ns:m.0zzv21w .\n?x0 ns:film.film.written_by ns:m.0zzv28y .\n?x0 ns:film.film.written_by ns:m.0zzv2yv .\n?x0 ns:film.film.written_by ns:m.0zzv45m\n}",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P0 M3 .\n?x0 P0 M4 .\n?x0 P1 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\n?x0 P1 M3 .\n?x0 P1 M4\n}",
        "expectedResponse": "It's Not About the Shawerma",
        "recursionDepth": 31
    },
    {
        "questionIdx": 138612,
        "questionWithBrackets": "What child of [DHX Media] was acquired by a production company and acquired by [The Walt Disney Company]",
        "questionPatternModEntities": "What child of M0 was acquired by a production company and acquired by M1",
        "questionTemplate": "What [ROLE_SIMPLE] of [entity] was [VP_SIMPLE] by a [NP_SIMPLE] and [VP_SIMPLE] by [entity]",
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:organization.organization.acquired_by/ns:business.acquisition.acquiring_company ?x1 .\n?x0 ns:organization.organization.acquired_by/ns:business.acquisition.acquiring_company ns:m.09b3v .\n?x0 ns:people.person.parents|ns:fictional_universe.fictional_character.parents|ns:organization.organization.parent/ns:organization.organization_relationship.parent ns:m.02qvlqb .\n?x1 a ns:film.production_company\n}",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 ?x1 .\n?x0 P1 M1 .\n?x1 a M2\n}",
        "expectedResponse": "DIC Entertainment",
        "recursionDepth": 31
    },
    {
        "questionIdx": 91559,
        "questionWithBrackets": "Was a character an art director of [The Talk of the Town], [The Adventures of Martin Eden], [The Lady and the Mob], [Blondie in Society], [His Girl Friday], and [Romance of the Redwoods]",
        "questionPatternModEntities": "Was a character a art director of M1 , M2 , M3 , M4 , M5 , and M6",
        "questionTemplate": "Was a [NP_SIMPLE] a [ROLE_SIMPLE] of [entity] , [entity] , [entity] , [entity] , [entity] , and [entity]",
        "sparql": "SELECT count(*) WHERE {\n?x0 a ns:fictional_universe.fictional_character .\n?x0 ns:film.film_art_director.films_art_directed ns:m.09vnx3r .\n?x0 ns:film.film_art_director.films_art_directed ns:m.0bb2bfv .\n?x0 ns:film.film_art_director.films_art_directed ns:m.0dltm7n .\n?x0 ns:film.film_art_director.films_art_directed ns:m.0ghnd6d .\n?x0 ns:film.film_art_director.films_art_directed ns:m.0jsxn .\n?x0 ns:film.film_art_director.films_art_directed ns:m.0kb6b\n}",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P0 M3 .\n?x0 P0 M4 .\n?x0 P0 M5 .\n?x0 P0 M6 .\n?x0 a M0\n}",
        "expectedResponse": "Yes",
        "recursionDepth": 32
    },
    {
        "questionIdx": 193967,
        "questionWithBrackets": "Which art director of [Cab No. 13], [Dr. Hart's Diary], [The Blouse King], and [The Conspiracy in Genoa] was [Waxworks]'s German editor",
        "questionPatternModEntities": "Which art director of M1 , M2 , M3 , and M4 was M5 's German editor",
        "questionTemplate": "Which [ROLE_SIMPLE] of [entity] , [entity] , [entity] , and [entity] was [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.editor.film ns:m.0fvgfh .\n?x0 ns:film.film_art_director.films_art_directed ns:m.07kb4t4 .\n?x0 ns:film.film_art_director.films_art_directed ns:m.0d99kg2 .\n?x0 ns:film.film_art_director.films_art_directed ns:m.0vsgfy5 .\n?x0 ns:film.film_art_director.films_art_directed ns:m.0vxdcfr .\n?x0 ns:people.person.nationality ns:m.0345h\n}",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\n?x0 P1 M3 .\n?x0 P1 M4 .\n?x0 P2 M5\n}",
        "expectedResponse": "Paul Leni",
        "recursionDepth": 32
    },
    {
        "questionIdx": 190399,
        "questionWithBrackets": "Which Italian female French actor played [Lisa Macklin] and [Una tarzanide]",
        "questionPatternModEntities": "Which Italian female French actor played M2 and M3",
        "questionTemplate": "Which [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [NP_SIMPLE] [VP_SIMPLE] [entity] and [entity]",
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.actor.film/ns:film.performance.character ns:m.0gy2y2h .\n?x0 ns:film.actor.film/ns:film.performance.character ns:m.0gy2z9n .\n?x0 ns:people.person.gender ns:m.02zsn .\n?x0 ns:people.person.nationality ns:m.03rjj .\n?x0 ns:people.person.nationality ns:m.0f8l9c\n}",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P1 M2 .\n?x0 P1 M3 .\n?x0 P2 M4\n}",
        "expectedResponse": "Sophia Loren",
        "recursionDepth": 32
    },
    {
        "questionIdx": 91554,
        "questionWithBrackets": "Was a character a writer of [Hi-Ho Mistahey!], [The Haunted Castle], [Humanity Through the Ages], [The Kingdom of the Fairies], [The Inn Where No Man Rests], and [L'enchanteur Alcofribas]",
        "questionPatternModEntities": "Was a character a writer of M1 , M2 , M3 , M4 , M5 , and M6",
        "questionTemplate": "Was a [NP_SIMPLE] a [ROLE_SIMPLE] of [entity] , [entity] , [entity] , [entity] , [entity] , and [entity]",
        "sparql": "SELECT count(*) WHERE {\n?x0 a ns:fictional_universe.fictional_character .\n?x0 ns:film.writer.film ns:m.02q3qn_ .\n?x0 ns:film.writer.film ns:m.04f3q28 .\n?x0 ns:film.writer.film ns:m.0bg4qm .\n?x0 ns:film.writer.film ns:m.0wqcktj .\n?x0 ns:film.writer.film ns:m.0x23cds .\n?x0 ns:film.writer.film ns:m.0y87_71\n}",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P0 M3 .\n?x0 P0 M4 .\n?x0 P0 M5 .\n?x0 P0 M6 .\n?x0 a M0\n}",
        "expectedResponse": "No",
        "recursionDepth": 32
    },
    {
        "questionIdx": 43811,
        "questionWithBrackets": "Was [A Separation] a film whose distributor employed and was founded by [Tom Bernard]",
        "questionPatternModEntities": "Was M1 a film whose distributor employed and was founded by M0",
        "questionTemplate": "Was [entity] a [NP_SIMPLE] whose [ROLE_SIMPLE] [VP_SIMPLE] and was [VP_SIMPLE] by [entity]",
        "sparql": "SELECT count(*) WHERE {\n?x0 ns:business.employer.employees/ns:business.employment_tenure.person ns:m.0lywf15 .\n?x0 ns:organization.organization.founders ns:m.0lywf15 .\nns:m.0g9zljd a ns:film.film .\nns:m.0g9zljd ns:film.film.distributors/ns:film.film_film_distributor_relationship.distributor ?x0\n}",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M0 .\nM1 P2 ?x0 .\nM1 a M2\n}",
        "expectedResponse": "Yes",
        "recursionDepth": 32
    },
    {
        "questionIdx": 232156,
        "questionWithBrackets": "Who was a producer, executive producer, writer, and director of [White Stork Is Coming], [The Fifth Wall], and [Maisy's Garden]",
        "questionPatternModEntities": "Who was a producer , executive producer , writer , and director of M1 , M2 , and M3",
        "questionTemplate": "Who was a [ROLE_SIMPLE] , [ROLE_SIMPLE] , [ROLE_SIMPLE] , and [ROLE_SIMPLE] of [entity] , [entity] , and [entity]",
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:people.person .\n?x0 ns:film.director.film ns:m.0_2zrgs .\n?x0 ns:film.director.film ns:m.0zgygxr .\n?x0 ns:film.director.film ns:m.0zxyz5j .\n?x0 ns:film.producer.films_executive_produced ns:m.0_2zrgs .\n?x0 ns:film.producer.films_executive_produced ns:m.0zgygxr .\n?x0 ns:film.producer.films_executive_produced ns:m.0zxyz5j .\n?x0 ns:film.producer.film|ns:film.production_company.films ns:m.0_2zrgs .\n?x0 ns:film.producer.film|ns:film.production_company.films ns:m.0zgygxr .\n?x0 ns:film.producer.film|ns:film.production_company.films ns:m.0zxyz5j .\n?x0 ns:film.writer.film ns:m.0_2zrgs .\n?x0 ns:film.writer.film ns:m.0zgygxr .\n?x0 ns:film.writer.film ns:m.0zxyz5j\n}",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P0 M3 .\n?x0 P1 M1 .\n?x0 P1 M2 .\n?x0 P1 M3 .\n?x0 P2 M1 .\n?x0 P2 M2 .\n?x0 P2 M3 .\n?x0 P3 M1 .\n?x0 P3 M2 .\n?x0 P3 M3 .\n?x0 a M0\n}",
        "expectedResponse": "Rick Schmidt",
        "recursionDepth": 33
    },
    {
        "questionIdx": 165651,
        "questionWithBrackets": "What sibling of [Victoria Granier-Deferre] was a French actor whose sibling played [Gedimat Cashier]",
        "questionPatternModEntities": "What sibling of M0 was a French actor whose sibling played M3",
        "questionTemplate": "What [ROLE_SIMPLE] of [entity] was a [ADJECTIVE_SIMPLE] [NP_SIMPLE] whose [ROLE_SIMPLE] [VP_SIMPLE] [entity]",
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:film.actor .\n?x0 ns:people.person.nationality ns:m.0f8l9c .\n?x0 ns:people.person.sibling_s/ns:people.sibling_relationship.sibling|ns:fictional_universe.fictional_character.siblings/ns:fictional_universe.sibling_relationship_of_fictional_characters.siblings ?x1 .\n?x0 ns:people.person.sibling_s/ns:people.sibling_relationship.sibling|ns:fictional_universe.fictional_character.siblings/ns:fictional_universe.sibling_relationship_of_fictional_characters.siblings ns:m.0pd4d0t .\n?x1 ns:film.actor.film/ns:film.performance.character ns:m.010pw74d .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x0 != ns:m.0pd4d0t )\n}",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P0 M0 .\n?x0 P1 M2 .\n?x0 a M1 .\n?x1 P2 M3 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x0 != M0 )\n}",
        "expectedResponse": "Denys Granier-Deferre",
        "recursionDepth": 33
    },
    {
        "questionIdx": 187193,
        "questionWithBrackets": "Which American German parent of [Samantha Traina] married [John Traina], [Danny Zugelder], and [Claude-Eric Lazard]",
        "questionPatternModEntities": "Which American German parent of M2 married M3 , M4 , and M5",
        "questionTemplate": "Which [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] [VP_SIMPLE] [entity] , [entity] , and [entity]",
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:people.person.children|ns:fictional_universe.fictional_character.children|ns:organization.organization.child/ns:organization.organization_relationship.child ns:m.0n8cvh4 .\n?x0 ns:people.person.nationality ns:m.0345h .\n?x0 ns:people.person.nationality ns:m.09c7w0 .\n?x0 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ns:m.0j6htq_ .\n?x0 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ns:m.0j6hzfq .\n?x0 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ns:m.0j6jqqx .\nFILTER ( ?x0 != ns:m.0j6htq_ ) .\nFILTER ( ?x0 != ns:m.0j6hzfq ) .\nFILTER ( ?x0 != ns:m.0j6jqqx )\n}",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P1 M2 .\n?x0 P2 M3 .\n?x0 P2 M4 .\n?x0 P2 M5 .\nFILTER ( ?x0 != M3 ) .\nFILTER ( ?x0 != M4 ) .\nFILTER ( ?x0 != M5 )\n}",
        "expectedResponse": "Danielle Steel",
        "recursionDepth": 33
    },
    {
        "questionIdx": 178856,
        "questionWithBrackets": "What was executive produced by, written by, and edited by [David Shuck], [Zack Bornstein], and [Eric Binswanger]",
        "questionPatternModEntities": "What was executive produced by , written by , and edited by M0 , M1 , and M2",
        "questionTemplate": "What was [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity] , [entity] , and [entity]",
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.film.edited_by ns:m.0k3qv_b .\n?x0 ns:film.film.edited_by ns:m.0k3qv_f .\n?x0 ns:film.film.edited_by ns:m.0k3qv_j .\n?x0 ns:film.film.executive_produced_by ns:m.0k3qv_b .\n?x0 ns:film.film.executive_produced_by ns:m.0k3qv_f .\n?x0 ns:film.film.executive_produced_by ns:m.0k3qv_j .\n?x0 ns:film.film.written_by ns:m.0k3qv_b .\n?x0 ns:film.film.written_by ns:m.0k3qv_f .\n?x0 ns:film.film.written_by ns:m.0k3qv_j\n}",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P1 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\n?x0 P2 M0 .\n?x0 P2 M1 .\n?x0 P2 M2\n}",
        "expectedResponse": "Dear Hunters",
        "recursionDepth": 33
    },
    {
        "questionIdx": 161025,
        "questionWithBrackets": "What parent and spouse of [David von Schlegell] was influenced by [Emily Dickinson] and influenced by [Jonathan Edwards]",
        "questionPatternModEntities": "What parent and spouse of M2 was influenced by M0 and influenced by M1",
        "questionTemplate": "What [ROLE_SIMPLE] and [ROLE_SIMPLE] of [entity] was [VP_SIMPLE] by [entity] and [VP_SIMPLE] by [entity]",
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:influence.influence_node.influenced_by ns:m.01509d .\n?x0 ns:influence.influence_node.influenced_by ns:m.0dpv5 .\n?x0 ns:people.person.children|ns:fictional_universe.fictional_character.children|ns:organization.organization.child/ns:organization.organization_relationship.child ns:m.09k4jvh .\n?x0 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ns:m.09k4jvh .\nFILTER ( ?x0 != ns:m.09k4jvh )\n}",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P1 M2 .\n?x0 P2 M2 .\nFILTER ( ?x0 != M2 )\n}",
        "expectedResponse": "Susan Howe",
        "recursionDepth": 33
    },
    {
        "questionIdx": 58686,
        "questionWithBrackets": "Was [Holiday Road] written by and edited by [Tavon Bolourchi], [Christine Corrigan], [Jaron Burnett], [Daniel Boynton], and [Anish Patel]",
        "questionPatternModEntities": "Was M0 written by and edited by M1 , M2 , M3 , M4 , and M5",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by and [VP_SIMPLE] by [entity] , [entity] , [entity] , [entity] , and [entity]",
        "sparql": "SELECT count(*) WHERE {\nns:m.0h2lzkf ns:film.film.edited_by ns:m.0zzv25w .\nns:m.0h2lzkf ns:film.film.edited_by ns:m.0zzv28y .\nns:m.0h2lzkf ns:film.film.edited_by ns:m.0zzv2cy .\nns:m.0h2lzkf ns:film.film.edited_by ns:m.0zzv2f_ .\nns:m.0h2lzkf ns:film.film.edited_by ns:m.0zzv3rt .\nns:m.0h2lzkf ns:film.film.written_by ns:m.0zzv25w .\nns:m.0h2lzkf ns:film.film.written_by ns:m.0zzv28y .\nns:m.0h2lzkf ns:film.film.written_by ns:m.0zzv2cy .\nns:m.0h2lzkf ns:film.film.written_by ns:m.0zzv2f_ .\nns:m.0h2lzkf ns:film.film.written_by ns:m.0zzv3rt\n}",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P0 M3 .\nM0 P0 M4 .\nM0 P0 M5 .\nM0 P1 M1 .\nM0 P1 M2 .\nM0 P1 M3 .\nM0 P1 M4 .\nM0 P1 M5\n}",
        "expectedResponse": "No",
        "recursionDepth": 33
    },
    {
        "questionIdx": 191343,
        "questionWithBrackets": "Which Mexican cinematographer that [Cha Cha Cha Films] and [Esperanto Filmoj] were founded by was [Annalisa Bugliani]'s spouse",
        "questionPatternModEntities": "Which Mexican cinematographer that M1 and M2 were founded by was M4 's spouse",
        "questionTemplate": "Which [ADJECTIVE_SIMPLE] [NP_SIMPLE] that [entity] and [entity] were [VP_SIMPLE] by was [entity] 's [ROLE_SIMPLE]",
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:film.cinematographer .\n?x0 ns:organization.organization_founder.organizations_founded ns:m.027v3hh .\n?x0 ns:organization.organization_founder.organizations_founded ns:m.06400fl .\n?x0 ns:people.person.nationality ns:m.0b90_r .\n?x0 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ns:m.0h28b9t .\nFILTER ( ?x0 != ns:m.0h28b9t )\n}",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P1 M3 .\n?x0 P2 M4 .\n?x0 a M0 .\nFILTER ( ?x0 != M4 )\n}",
        "expectedResponse": "Alfonso Cuar\u00f3n",
        "recursionDepth": 34
    },
    {
        "questionIdx": 156049,
        "questionWithBrackets": "What film director whose employer was founded by [Bruce Davey] was an actor of [Justin McLeod] and [Captain P.G. Kelly]",
        "questionPatternModEntities": "What film director whose employer was founded by M3 was a actor of M1 and M2",
        "questionTemplate": "What [NP_SIMPLE] whose [ROLE_SIMPLE] was [VP_SIMPLE] by [entity] was a [ROLE_SIMPLE] of [entity] and [entity]",
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:film.director .\n?x0 ns:film.actor.film/ns:film.performance.character ns:m.05spy4s .\n?x0 ns:film.actor.film/ns:film.performance.character ns:m.05spy63 .\n?x0 ns:people.person.employment_history/ns:business.employment_tenure.company ?x1 .\n?x1 ns:organization.organization.founders ns:m.0gvf8l\n}",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 M1 .\n?x0 P1 M2 .\n?x0 a M0 .\n?x1 P2 M3\n}",
        "expectedResponse": "Mel Gibson",
        "recursionDepth": 34
    },
    {
        "questionIdx": 173003,
        "questionWithBrackets": "What was edited and written by [Vaughn Blake], [Rick Schmidt], [Nicholas Johansson], [Philip Rashkovetsky], [Jaron Burnett], and [Anish Patel]",
        "questionPatternModEntities": "What was edited and written by M0 , M1 , M2 , M3 , M4 , and M5",
        "questionTemplate": "What was [VP_SIMPLE] and [VP_SIMPLE] by [entity] , [entity] , [entity] , [entity] , [entity] , and [entity]",
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.film.edited_by ns:m.0bvc29q .\n?x0 ns:film.film.edited_by ns:m.0zzv21w .\n?x0 ns:film.film.edited_by ns:m.0zzv2cy .\n?x0 ns:film.film.edited_by ns:m.0zzv33d .\n?x0 ns:film.film.edited_by ns:m.0zzv3rt .\n?x0 ns:film.film.edited_by ns:m.0zzv45m .\n?x0 ns:film.film.written_by ns:m.0bvc29q .\n?x0 ns:film.film.written_by ns:m.0zzv21w .\n?x0 ns:film.film.written_by ns:m.0zzv2cy .\n?x0 ns:film.film.written_by ns:m.0zzv33d .\n?x0 ns:film.film.written_by ns:m.0zzv3rt .\n?x0 ns:film.film.written_by ns:m.0zzv45m\n}",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P0 M3 .\n?x0 P0 M4 .\n?x0 P0 M5 .\n?x0 P1 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\n?x0 P1 M3 .\n?x0 P1 M4 .\n?x0 P1 M5\n}",
        "expectedResponse": "It's Not About the Shawerma",
        "recursionDepth": 34
    },
    {
        "questionIdx": 90711,
        "questionWithBrackets": "Was a Mexican screenwriter that influenced [Hisham Fageeh] and [Ricky Gervais] a spouse of [Alix Bailey]",
        "questionPatternModEntities": "Was a Mexican screenwriter that influenced M1 and M2 a spouse of M4",
        "questionTemplate": "Was a [ADJECTIVE_SIMPLE] [NP_SIMPLE] that [VP_SIMPLE] [entity] and [entity] a [ROLE_SIMPLE] of [entity]",
        "sparql": "SELECT count(*) WHERE {\n?x0 a ns:film.writer .\n?x0 ns:influence.influence_node.influenced ns:m.015pxr .\n?x0 ns:influence.influence_node.influenced ns:m.0x0yphn .\n?x0 ns:people.person.nationality ns:m.0b90_r .\n?x0 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ns:m.0gxqyrw .\nFILTER ( ?x0 != ns:m.0gxqyrw )\n}",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P1 M3 .\n?x0 P2 M4 .\n?x0 a M0 .\nFILTER ( ?x0 != M4 )\n}",
        "expectedResponse": "Yes",
        "recursionDepth": 34
    },
    {
        "questionIdx": 216838,
        "questionWithBrackets": "Who directed, wrote, and edited [The Idle Class], [The Champion], [Mabel's Married Life], and [The Tramp]",
        "questionPatternModEntities": "Who directed , wrote , and edited M1 , M2 , M3 , and M4",
        "questionTemplate": "Who [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] [entity] , [entity] , [entity] , and [entity]",
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:people.person .\n?x0 ns:film.director.film ns:m.02rd486 .\n?x0 ns:film.director.film ns:m.07m7s0 .\n?x0 ns:film.director.film ns:m.07n76l .\n?x0 ns:film.director.film ns:m.08kfbx .\n?x0 ns:film.editor.film ns:m.02rd486 .\n?x0 ns:film.editor.film ns:m.07m7s0 .\n?x0 ns:film.editor.film ns:m.07n76l .\n?x0 ns:film.editor.film ns:m.08kfbx .\n?x0 ns:film.writer.film ns:m.02rd486 .\n?x0 ns:film.writer.film ns:m.07m7s0 .\n?x0 ns:film.writer.film ns:m.07n76l .\n?x0 ns:film.writer.film ns:m.08kfbx\n}",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P0 M3 .\n?x0 P0 M4 .\n?x0 P1 M1 .\n?x0 P1 M2 .\n?x0 P1 M3 .\n?x0 P1 M4 .\n?x0 P2 M1 .\n?x0 P2 M2 .\n?x0 P2 M3 .\n?x0 P2 M4 .\n?x0 a M0\n}",
        "expectedResponse": "Charlie Chaplin",
        "recursionDepth": 34
    },
    {
        "questionIdx": 30918,
        "questionWithBrackets": "Did a company's employee and founder influence [David A. Kolb] and marry [Alice Chipman]",
        "questionPatternModEntities": "Did a company 's employee and founder influence M0 and marry M1",
        "questionTemplate": "Did a [NP_SIMPLE] 's [ROLE_SIMPLE] and [ROLE_SIMPLE] [VP_SIMPLE] [entity] and [VP_SIMPLE] [entity]",
        "sparql": "SELECT count(*) WHERE {\n?x0 ns:influence.influence_node.influenced ns:m.06x0gk .\n?x0 ns:organization.organization_founder.organizations_founded ?x1 .\n?x0 ns:people.person.employment_history/ns:business.employment_tenure.company ?x1 .\n?x0 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ns:m.0kcynvl .\n?x1 a ns:business.employer .\nFILTER ( ?x0 != ns:m.0kcynvl )\n}",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x0 P3 M1 .\n?x1 a M2 .\nFILTER ( ?x0 != M1 )\n}",
        "expectedResponse": "Yes",
        "recursionDepth": 34
    },
    {
        "questionIdx": 159531,
        "questionWithBrackets": "What founder and employee of [Lucasfilm], [American Zoetrope], and [Industrial Light & Magic] did [Leigh Brackett], [Frank Herbert], and [Christopher Lee] influence",
        "questionPatternModEntities": "What founder and employee of M0 , M1 , and M2 did M3 , M4 , and M5 influence",
        "questionTemplate": "What [ROLE_SIMPLE] and [ROLE_SIMPLE] of [entity] , [entity] , and [entity] did [entity] , [entity] , and [entity] [VP_SIMPLE]",
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:influence.influence_node.influenced_by ns:m.02xyl .\n?x0 ns:influence.influence_node.influenced_by ns:m.0b42v .\n?x0 ns:influence.influence_node.influenced_by ns:m.0f0kz .\n?x0 ns:organization.organization_founder.organizations_founded ns:m.01813n .\n?x0 ns:organization.organization_founder.organizations_founded ns:m.02jd_7 .\n?x0 ns:organization.organization_founder.organizations_founded ns:m.0kx4m .\n?x0 ns:people.person.employment_history/ns:business.employment_tenure.company ns:m.01813n .\n?x0 ns:people.person.employment_history/ns:business.employment_tenure.company ns:m.02jd_7 .\n?x0 ns:people.person.employment_history/ns:business.employment_tenure.company ns:m.0kx4m\n}",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P1 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\n?x0 P2 M3 .\n?x0 P2 M4 .\n?x0 P2 M5\n}",
        "expectedResponse": "George Lucas",
        "recursionDepth": 35
    },
    {
        "questionIdx": 227147,
        "questionWithBrackets": "Who was a German male Swedish star of [Her Third], [The Legend of Paul and Paula], and [Seine Hoheit \u2013 Genosse Prinz]",
        "questionPatternModEntities": "Who was a German male Swedish star of M3 , M4 , and M5",
        "questionTemplate": "Who was a [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] , [entity] , and [entity]",
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:people.person .\n?x0 ns:film.actor.film/ns:film.performance.film ns:m.04jj735 .\n?x0 ns:film.actor.film/ns:film.performance.film ns:m.0cjn5w .\n?x0 ns:film.actor.film/ns:film.performance.film ns:m.0gyslvw .\n?x0 ns:people.person.gender ns:m.05zppz .\n?x0 ns:people.person.nationality ns:m.0345h .\n?x0 ns:people.person.nationality ns:m.0d0vqn\n}",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P1 M3 .\n?x0 P1 M4 .\n?x0 P1 M5 .\n?x0 P2 M6 .\n?x0 a M0\n}",
        "expectedResponse": "Rolf Ludwig",
        "recursionDepth": 35
    },
    {
        "questionIdx": 134347,
        "questionWithBrackets": "What Japanese film director that was influenced by [Hans Lucas] was [Rebellion: The Killing Isle]'s executive producer and producer",
        "questionPatternModEntities": "What Japanese film director that was influenced by M2 was M1 's executive producer and producer",
        "questionTemplate": "What [ADJECTIVE_SIMPLE] [NP_SIMPLE] that was [VP_SIMPLE] by [entity] was [entity] 's [ROLE_SIMPLE] and [ROLE_SIMPLE]",
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:film.director .\n?x0 ns:film.producer.films_executive_produced ns:m.055cp6p .\n?x0 ns:film.producer.film|ns:film.production_company.films ns:m.055cp6p .\n?x0 ns:influence.influence_node.influenced_by ns:m.0gdqy .\n?x0 ns:people.person.nationality ns:m.03_3d\n}",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M1 .\n?x0 P1 M2 .\n?x0 P2 M3 .\n?x0 P3 M1 .\n?x0 a M0\n}",
        "expectedResponse": "Mamoru Oshii",
        "recursionDepth": 35
    },
    {
        "questionIdx": 156079,
        "questionWithBrackets": "What film director wrote, directed, and executive produced [Loneliness Is Soul], [White Stork Is Coming], and [Maisy's Garden]",
        "questionPatternModEntities": "What film director wrote , directed , and executive produced M0 , M1 , and M2",
        "questionTemplate": "What [NP_SIMPLE] [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] [entity] , [entity] , and [entity]",
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.director.film ns:m.0zd5p8f .\n?x0 ns:film.director.film ns:m.0zgygxr .\n?x0 ns:film.director.film ns:m.0zxyz5j .\n?x0 ns:film.producer.films_executive_produced ns:m.0zd5p8f .\n?x0 ns:film.producer.films_executive_produced ns:m.0zgygxr .\n?x0 ns:film.producer.films_executive_produced ns:m.0zxyz5j .\n?x0 ns:film.writer.film ns:m.0zd5p8f .\n?x0 ns:film.writer.film ns:m.0zgygxr .\n?x0 ns:film.writer.film ns:m.0zxyz5j\n}",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P1 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\n?x0 P2 M0 .\n?x0 P2 M1 .\n?x0 P2 M2\n}",
        "expectedResponse": "Rick Schmidt",
        "recursionDepth": 35
    },
    {
        "questionIdx": 151878,
        "questionWithBrackets": "What director and art director of [Thazhvaram], [Chaatta], [Marmaram], and [Ormakkayi] directed [Chamaram] and [Chamayam]",
        "questionPatternModEntities": "What director and art director of M0 , M1 , M2 , and M3 directed M4 and M5",
        "questionTemplate": "What [ROLE_SIMPLE] and [ROLE_SIMPLE] of [entity] , [entity] , [entity] , and [entity] [VP_SIMPLE] [entity] and [entity]",
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.director.film ns:m.0121sdkp .\n?x0 ns:film.director.film ns:m.047pk9n .\n?x0 ns:film.director.film ns:m.05q7436 .\n?x0 ns:film.director.film ns:m.0ddfvxg .\n?x0 ns:film.director.film ns:m.0g5q8ks .\n?x0 ns:film.director.film ns:m.0gvrqkh .\n?x0 ns:film.film_art_director.films_art_directed ns:m.0121sdkp .\n?x0 ns:film.film_art_director.films_art_directed ns:m.047pk9n .\n?x0 ns:film.film_art_director.films_art_directed ns:m.05q7436 .\n?x0 ns:film.film_art_director.films_art_directed ns:m.0gvrqkh\n}",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P0 M3 .\n?x0 P1 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\n?x0 P1 M3 .\n?x0 P1 M4 .\n?x0 P1 M5\n}",
        "expectedResponse": "Bharathan",
        "recursionDepth": 35
    },
    {
        "questionIdx": 130659,
        "questionWithBrackets": "What American director of [Bald: The Making of 'THX 1138] and [Star Wars Holiday Special] was employed by and founded [Skywalker Sound]",
        "questionPatternModEntities": "What American director of M2 and M3 was employed by and founded M0",
        "questionTemplate": "What [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] and [entity] was [VP_SIMPLE] by and [VP_SIMPLE] [entity]",
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.director.film ns:m.0199wf .\n?x0 ns:film.director.film ns:m.0dsvd9 .\n?x0 ns:organization.organization_founder.organizations_founded ns:m.01hy7c .\n?x0 ns:people.person.employment_history/ns:business.employment_tenure.company ns:m.01hy7c .\n?x0 ns:people.person.nationality ns:m.09c7w0\n}",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M0 .\n?x0 P2 M1 .\n?x0 P3 M2 .\n?x0 P3 M3\n}",
        "expectedResponse": "George Lucas",
        "recursionDepth": 35
    },
    {
        "questionIdx": 223765,
        "questionWithBrackets": "Who was [N'djekoh]'s costume designer, executive producer, writer, art director, director, cinematographer, and editor",
        "questionPatternModEntities": "Who was M1 's costume designer , executive producer , writer , art director , director , cinematographer , and editor",
        "questionTemplate": "Who was [entity] 's [ROLE_SIMPLE] , [ROLE_SIMPLE] , [ROLE_SIMPLE] , [ROLE_SIMPLE] , [ROLE_SIMPLE] , [ROLE_SIMPLE] , and [ROLE_SIMPLE]",
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:people.person .\n?x0 ns:film.cinematographer.film ns:m.0xqdw1h .\n?x0 ns:film.director.film ns:m.0xqdw1h .\n?x0 ns:film.editor.film ns:m.0xqdw1h .\n?x0 ns:film.film_art_director.films_art_directed ns:m.0xqdw1h .\n?x0 ns:film.film_costumer_designer.costume_design_for_film ns:m.0xqdw1h .\n?x0 ns:film.producer.films_executive_produced ns:m.0xqdw1h .\n?x0 ns:film.writer.film ns:m.0xqdw1h\n}",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M1 .\n?x0 P1 M1 .\n?x0 P2 M1 .\n?x0 P3 M1 .\n?x0 P4 M1 .\n?x0 P5 M1 .\n?x0 P6 M1 .\n?x0 a M0\n}",
        "expectedResponse": "Gregory Sukiennik",
        "recursionDepth": 36
    },
    {
        "questionIdx": 223754,
        "questionWithBrackets": "Who was [N'djekoh]'s cinematographer, writer, editor, director, art director, executive producer, and costume designer",
        "questionPatternModEntities": "Who was M1 's cinematographer , writer , editor , director , art director , executive producer , and costume designer",
        "questionTemplate": "Who was [entity] 's [ROLE_SIMPLE] , [ROLE_SIMPLE] , [ROLE_SIMPLE] , [ROLE_SIMPLE] , [ROLE_SIMPLE] , [ROLE_SIMPLE] , and [ROLE_SIMPLE]",
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:people.person .\n?x0 ns:film.cinematographer.film ns:m.0xqdw1h .\n?x0 ns:film.director.film ns:m.0xqdw1h .\n?x0 ns:film.editor.film ns:m.0xqdw1h .\n?x0 ns:film.film_art_director.films_art_directed ns:m.0xqdw1h .\n?x0 ns:film.film_costumer_designer.costume_design_for_film ns:m.0xqdw1h .\n?x0 ns:film.producer.films_executive_produced ns:m.0xqdw1h .\n?x0 ns:film.writer.film ns:m.0xqdw1h\n}",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M1 .\n?x0 P1 M1 .\n?x0 P2 M1 .\n?x0 P3 M1 .\n?x0 P4 M1 .\n?x0 P5 M1 .\n?x0 P6 M1 .\n?x0 a M0\n}",
        "expectedResponse": "Gregory Sukiennik",
        "recursionDepth": 36
    },
    {
        "questionIdx": 209314,
        "questionWithBrackets": "Which prequel of [V/H/S/2] was written, edited, and directed by [David Bruckner], [Glenn McQuaid], and [Ti West]",
        "questionPatternModEntities": "Which prequel of M0 was written , edited , and directed by M1 , M2 , and M3",
        "questionTemplate": "Which [ROLE_SIMPLE] of [entity] was [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by [entity] , [entity] , and [entity]",
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.film.directed_by ns:m.02q90qr .\n?x0 ns:film.film.directed_by ns:m.05v3_1b .\n?x0 ns:film.film.directed_by ns:m.08tkflp .\n?x0 ns:film.film.edited_by ns:m.02q90qr .\n?x0 ns:film.film.edited_by ns:m.05v3_1b .\n?x0 ns:film.film.edited_by ns:m.08tkflp .\n?x0 ns:film.film.sequel ns:m.0q2ljgs .\n?x0 ns:film.film.written_by ns:m.02q90qr .\n?x0 ns:film.film.written_by ns:m.05v3_1b .\n?x0 ns:film.film.written_by ns:m.08tkflp\n}",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\n?x0 P1 M3 .\n?x0 P2 M1 .\n?x0 P2 M2 .\n?x0 P2 M3 .\n?x0 P3 M1 .\n?x0 P3 M2 .\n?x0 P3 M3\n}",
        "expectedResponse": "V/H/S",
        "recursionDepth": 36
    },
    {
        "questionIdx": 69846,
        "questionWithBrackets": "Was [Occupation 101] produced by, directed by, written by, and edited by [Sufyan Omeish] and [Abdallah Omeish]",
        "questionPatternModEntities": "Was M0 produced by , directed by , written by , and edited by M1 and M2",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity] and [entity]",
        "sparql": "SELECT count(*) WHERE {\nns:m.0ft9nn ns:film.film.directed_by ns:m.0j8lw1_ .\nns:m.0ft9nn ns:film.film.directed_by ns:m.0j8lw1s .\nns:m.0ft9nn ns:film.film.edited_by ns:m.0j8lw1_ .\nns:m.0ft9nn ns:film.film.edited_by ns:m.0j8lw1s .\nns:m.0ft9nn ns:film.film.produced_by|ns:film.film.production_companies ns:m.0j8lw1_ .\nns:m.0ft9nn ns:film.film.produced_by|ns:film.film.production_companies ns:m.0j8lw1s .\nns:m.0ft9nn ns:film.film.written_by ns:m.0j8lw1_ .\nns:m.0ft9nn ns:film.film.written_by ns:m.0j8lw1s\n}",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P1 M1 .\nM0 P1 M2 .\nM0 P2 M1 .\nM0 P2 M2 .\nM0 P3 M1 .\nM0 P3 M2\n}",
        "expectedResponse": "Yes",
        "recursionDepth": 36
    },
    {
        "questionIdx": 29972,
        "questionWithBrackets": "Did a cinematographer edit, write, and executive produce [White Stork Is Coming], [Blues for the Avatar], and [It's Not About the Shawerma]",
        "questionPatternModEntities": "Did a cinematographer edit , write , and executive produce M1 , M2 , and M3",
        "questionTemplate": "Did a [NP_SIMPLE] [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] [entity] , [entity] , and [entity]",
        "sparql": "SELECT count(*) WHERE {\n?x0 a ns:film.cinematographer .\n?x0 ns:film.editor.film ns:m.0znn7j_ .\n?x0 ns:film.editor.film ns:m.0zxyz5j .\n?x0 ns:film.editor.film ns:m.0zztylq .\n?x0 ns:film.producer.films_executive_produced ns:m.0znn7j_ .\n?x0 ns:film.producer.films_executive_produced ns:m.0zxyz5j .\n?x0 ns:film.producer.films_executive_produced ns:m.0zztylq .\n?x0 ns:film.writer.film ns:m.0znn7j_ .\n?x0 ns:film.writer.film ns:m.0zxyz5j .\n?x0 ns:film.writer.film ns:m.0zztylq\n}",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P0 M3 .\n?x0 P1 M1 .\n?x0 P1 M2 .\n?x0 P1 M3 .\n?x0 P2 M1 .\n?x0 P2 M2 .\n?x0 P2 M3 .\n?x0 a M0\n}",
        "expectedResponse": "Yes",
        "recursionDepth": 36
    },
    {
        "questionIdx": 171699,
        "questionWithBrackets": "What was directed by, written by, and executive produced by [Joe Lynch], [Tim Sullivan], [Adam Green], and [Adam Rifkin]",
        "questionPatternModEntities": "What was directed by , written by , and executive produced by M0 , M1 , M2 , and M3",
        "questionTemplate": "What was [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity] , [entity] , [entity] , and [entity]",
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.film.directed_by ns:m.03md45k .\n?x0 ns:film.film.directed_by ns:m.03qf5l4 .\n?x0 ns:film.film.directed_by ns:m.04cxxwn .\n?x0 ns:film.film.directed_by ns:m.09v6y1 .\n?x0 ns:film.film.executive_produced_by ns:m.03md45k .\n?x0 ns:film.film.executive_produced_by ns:m.03qf5l4 .\n?x0 ns:film.film.executive_produced_by ns:m.04cxxwn .\n?x0 ns:film.film.executive_produced_by ns:m.09v6y1 .\n?x0 ns:film.film.written_by ns:m.03md45k .\n?x0 ns:film.film.written_by ns:m.03qf5l4 .\n?x0 ns:film.film.written_by ns:m.04cxxwn .\n?x0 ns:film.film.written_by ns:m.09v6y1\n}",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P0 M3 .\n?x0 P1 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\n?x0 P1 M3 .\n?x0 P2 M0 .\n?x0 P2 M1 .\n?x0 P2 M2 .\n?x0 P2 M3\n}",
        "expectedResponse": "Chillerama",
        "recursionDepth": 36
    },
    {
        "questionIdx": 205829,
        "questionWithBrackets": "Which founder and employee of [Virgin Unite] and [Virgin Mobile UK] founded [Virgin Brides] and founded [Virgin Atlantic]",
        "questionPatternModEntities": "Which founder and employee of M0 and M1 founded M2 and founded M3",
        "questionTemplate": "Which [ROLE_SIMPLE] and [ROLE_SIMPLE] of [entity] and [entity] [VP_SIMPLE] [entity] and [VP_SIMPLE] [entity]",
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:organization.organization_founder.organizations_founded ns:m.027bljb .\n?x0 ns:organization.organization_founder.organizations_founded ns:m.027cby9 .\n?x0 ns:organization.organization_founder.organizations_founded ns:m.02vny31 .\n?x0 ns:organization.organization_founder.organizations_founded ns:m.0n84_ .\n?x0 ns:people.person.employment_history/ns:business.employment_tenure.company ns:m.027bljb .\n?x0 ns:people.person.employment_history/ns:business.employment_tenure.company ns:m.02vny31\n}",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P1 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\n?x0 P1 M3\n}",
        "expectedResponse": "Richard Branson",
        "recursionDepth": 36
    },
    {
        "questionIdx": 198498,
        "questionWithBrackets": "Which director, producer, and editor of [The Gleaners and I] and [Ydessa, the Bears and etc.] did [Jacques Demy] marry and influence",
        "questionPatternModEntities": "Which director , producer , and editor of M1 and M2 did M0 marry and influence",
        "questionTemplate": "Which [ROLE_SIMPLE] , [ROLE_SIMPLE] , and [ROLE_SIMPLE] of [entity] and [entity] did [entity] [VP_SIMPLE] and [VP_SIMPLE]",
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.director.film ns:m.09m9v4 .\n?x0 ns:film.director.film ns:m.0z6mj21 .\n?x0 ns:film.editor.film ns:m.09m9v4 .\n?x0 ns:film.editor.film ns:m.0z6mj21 .\n?x0 ns:film.producer.film|ns:film.production_company.films ns:m.09m9v4 .\n?x0 ns:film.producer.film|ns:film.production_company.films ns:m.0z6mj21 .\n?x0 ns:influence.influence_node.influenced_by ns:m.046dxx .\n?x0 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ns:m.046dxx .\nFILTER ( ?x0 != ns:m.046dxx )\n}",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\n?x0 P2 M1 .\n?x0 P2 M2 .\n?x0 P3 M0 .\n?x0 P4 M1 .\n?x0 P4 M2 .\nFILTER ( ?x0 != M0 )\n}",
        "expectedResponse": "Agn\u00e8s Varda",
        "recursionDepth": 37
    },
    {
        "questionIdx": 239345,
        "questionWithBrackets": "Who wrote, produced, directed, and edited [Ah, Liberty!], [The Hyrcynium Wood], and [The Creation As We Saw It]",
        "questionPatternModEntities": "Who wrote , produced , directed , and edited M1 , M2 , and M3",
        "questionTemplate": "Who [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] [entity] , [entity] , and [entity]",
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:people.person .\n?x0 ns:film.director.film ns:m.01144wkw .\n?x0 ns:film.director.film ns:m.04p769v .\n?x0 ns:film.director.film ns:m.0pxbq8j .\n?x0 ns:film.editor.film ns:m.01144wkw .\n?x0 ns:film.editor.film ns:m.04p769v .\n?x0 ns:film.editor.film ns:m.0pxbq8j .\n?x0 ns:film.producer.film|ns:film.production_company.films ns:m.01144wkw .\n?x0 ns:film.producer.film|ns:film.production_company.films ns:m.04p769v .\n?x0 ns:film.producer.film|ns:film.production_company.films ns:m.0pxbq8j .\n?x0 ns:film.writer.film ns:m.01144wkw .\n?x0 ns:film.writer.film ns:m.04p769v .\n?x0 ns:film.writer.film ns:m.0pxbq8j\n}",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P0 M3 .\n?x0 P1 M1 .\n?x0 P1 M2 .\n?x0 P1 M3 .\n?x0 P2 M1 .\n?x0 P2 M2 .\n?x0 P2 M3 .\n?x0 P3 M1 .\n?x0 P3 M2 .\n?x0 P3 M3 .\n?x0 a M0\n}",
        "expectedResponse": "Ben Rivers",
        "recursionDepth": 37
    },
    {
        "questionIdx": 52027,
        "questionWithBrackets": "Was [Dear Hunters] written, executive produced, edited, and directed by [Eric Binswanger], [David Shuck], and [Zack Bornstein]",
        "questionPatternModEntities": "Was M0 written , executive produced , edited , and directed by M1 , M2 , and M3",
        "questionTemplate": "Was [entity] [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by [entity] , [entity] , and [entity]",
        "sparql": "SELECT count(*) WHERE {\nns:m.0k3qv_1 ns:film.film.directed_by ns:m.0k3qv_b .\nns:m.0k3qv_1 ns:film.film.directed_by ns:m.0k3qv_f .\nns:m.0k3qv_1 ns:film.film.directed_by ns:m.0k3qv_j .\nns:m.0k3qv_1 ns:film.film.edited_by ns:m.0k3qv_b .\nns:m.0k3qv_1 ns:film.film.edited_by ns:m.0k3qv_f .\nns:m.0k3qv_1 ns:film.film.edited_by ns:m.0k3qv_j .\nns:m.0k3qv_1 ns:film.film.executive_produced_by ns:m.0k3qv_b .\nns:m.0k3qv_1 ns:film.film.executive_produced_by ns:m.0k3qv_f .\nns:m.0k3qv_1 ns:film.film.executive_produced_by ns:m.0k3qv_j .\nns:m.0k3qv_1 ns:film.film.written_by ns:m.0k3qv_b .\nns:m.0k3qv_1 ns:film.film.written_by ns:m.0k3qv_f .\nns:m.0k3qv_1 ns:film.film.written_by ns:m.0k3qv_j\n}",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P0 M3 .\nM0 P1 M1 .\nM0 P1 M2 .\nM0 P1 M3 .\nM0 P2 M1 .\nM0 P2 M2 .\nM0 P2 M3 .\nM0 P3 M1 .\nM0 P3 M2 .\nM0 P3 M3\n}",
        "expectedResponse": "Yes",
        "recursionDepth": 37
    },
    {
        "questionIdx": 40478,
        "questionWithBrackets": "Did a writer, star, cinematographer, and director of [Walter Makes a Movie], [A Snake of June], and [Tetsuo II: Body Hammer] write [Vital]",
        "questionPatternModEntities": "Did a writer , star , cinematographer , and director of M0 , M1 , and M2 write M3",
        "questionTemplate": "Did a [ROLE_SIMPLE] , [ROLE_SIMPLE] , [ROLE_SIMPLE] , and [ROLE_SIMPLE] of [entity] , [entity] , and [entity] [VP_SIMPLE] [entity]",
        "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.actor.film/ns:film.performance.film ns:m.03m9g_y .\n?x0 ns:film.actor.film/ns:film.performance.film ns:m.0brs6b .\n?x0 ns:film.actor.film/ns:film.performance.film ns:m.0nfw356 .\n?x0 ns:film.cinematographer.film ns:m.03m9g_y .\n?x0 ns:film.cinematographer.film ns:m.0brs6b .\n?x0 ns:film.cinematographer.film ns:m.0nfw356 .\n?x0 ns:film.director.film ns:m.03m9g_y .\n?x0 ns:film.director.film ns:m.0brs6b .\n?x0 ns:film.director.film ns:m.0nfw356 .\n?x0 ns:film.writer.film ns:m.03m9g_y .\n?x0 ns:film.writer.film ns:m.087hmc .\n?x0 ns:film.writer.film ns:m.0brs6b .\n?x0 ns:film.writer.film ns:m.0nfw356\n}",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P0 M3 .\n?x0 P1 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\n?x0 P2 M0 .\n?x0 P2 M1 .\n?x0 P2 M2 .\n?x0 P3 M0 .\n?x0 P3 M1 .\n?x0 P3 M2\n}",
        "expectedResponse": "No",
        "recursionDepth": 37
    },
    {
        "questionIdx": 193368,
        "questionWithBrackets": "Which actor was a director, star, editor, writer, and costume designer of [The Wizard of Speed and Time] and [Animato]",
        "questionPatternModEntities": "Which actor was a director , star , editor , writer , and costume designer of M1 and M2",
        "questionTemplate": "Which [NP_SIMPLE] was a [ROLE_SIMPLE] , [ROLE_SIMPLE] , [ROLE_SIMPLE] , [ROLE_SIMPLE] , and [ROLE_SIMPLE] of [entity] and [entity]",
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:film.actor .\n?x0 ns:film.actor.film/ns:film.performance.film ns:m.07fm59 .\n?x0 ns:film.actor.film/ns:film.performance.film ns:m.083y0 .\n?x0 ns:film.director.film ns:m.07fm59 .\n?x0 ns:film.director.film ns:m.083y0 .\n?x0 ns:film.editor.film ns:m.07fm59 .\n?x0 ns:film.editor.film ns:m.083y0 .\n?x0 ns:film.film_costumer_designer.costume_design_for_film ns:m.07fm59 .\n?x0 ns:film.film_costumer_designer.costume_design_for_film ns:m.083y0 .\n?x0 ns:film.writer.film ns:m.07fm59 .\n?x0 ns:film.writer.film ns:m.083y0\n}",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P1 M1 .\n?x0 P1 M2 .\n?x0 P2 M1 .\n?x0 P2 M2 .\n?x0 P3 M1 .\n?x0 P3 M2 .\n?x0 P4 M1 .\n?x0 P4 M2 .\n?x0 a M0\n}",
        "expectedResponse": "Mike Jittlov",
        "recursionDepth": 37
    },
    {
        "questionIdx": 52026,
        "questionWithBrackets": "Was [Dear Hunters] written, executive produced, directed, and edited by [Zack Bornstein], [David Shuck], and [Eric Binswanger]",
        "questionPatternModEntities": "Was M0 written , executive produced , directed , and edited by M1 , M2 , and M3",
        "questionTemplate": "Was [entity] [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by [entity] , [entity] , and [entity]",
        "sparql": "SELECT count(*) WHERE {\nns:m.0k3qv_1 ns:film.film.directed_by ns:m.0k3qv_b .\nns:m.0k3qv_1 ns:film.film.directed_by ns:m.0k3qv_f .\nns:m.0k3qv_1 ns:film.film.directed_by ns:m.0k3qv_j .\nns:m.0k3qv_1 ns:film.film.edited_by ns:m.0k3qv_b .\nns:m.0k3qv_1 ns:film.film.edited_by ns:m.0k3qv_f .\nns:m.0k3qv_1 ns:film.film.edited_by ns:m.0k3qv_j .\nns:m.0k3qv_1 ns:film.film.executive_produced_by ns:m.0k3qv_b .\nns:m.0k3qv_1 ns:film.film.executive_produced_by ns:m.0k3qv_f .\nns:m.0k3qv_1 ns:film.film.executive_produced_by ns:m.0k3qv_j .\nns:m.0k3qv_1 ns:film.film.written_by ns:m.0k3qv_b .\nns:m.0k3qv_1 ns:film.film.written_by ns:m.0k3qv_f .\nns:m.0k3qv_1 ns:film.film.written_by ns:m.0k3qv_j\n}",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P0 M3 .\nM0 P1 M1 .\nM0 P1 M2 .\nM0 P1 M3 .\nM0 P2 M1 .\nM0 P2 M2 .\nM0 P2 M3 .\nM0 P3 M1 .\nM0 P3 M2 .\nM0 P3 M3\n}",
        "expectedResponse": "Yes",
        "recursionDepth": 37
    },
    {
        "questionIdx": 194622,
        "questionWithBrackets": "Which art director, writer, cinematographer, editor, director, and executive producer of [Tetsuo II: Body Hammer] was influenced by [David Cronenberg]",
        "questionPatternModEntities": "Which art director , writer , cinematographer , editor , director , and executive producer of M0 was influenced by M1",
        "questionTemplate": "Which [ROLE_SIMPLE] , [ROLE_SIMPLE] , [ROLE_SIMPLE] , [ROLE_SIMPLE] , [ROLE_SIMPLE] , and [ROLE_SIMPLE] of [entity] was [VP_SIMPLE] by [entity]",
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.cinematographer.film ns:m.0brs6b .\n?x0 ns:film.director.film ns:m.0brs6b .\n?x0 ns:film.editor.film ns:m.0brs6b .\n?x0 ns:film.film_art_director.films_art_directed ns:m.0brs6b .\n?x0 ns:film.producer.films_executive_produced ns:m.0brs6b .\n?x0 ns:film.writer.film ns:m.0brs6b .\n?x0 ns:influence.influence_node.influenced_by ns:m.026fd\n}",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M0 .\n?x0 P2 M1 .\n?x0 P3 M0 .\n?x0 P4 M0 .\n?x0 P5 M0 .\n?x0 P6 M0\n}",
        "expectedResponse": "Shinya Tsukamoto",
        "recursionDepth": 38
    },
    {
        "questionIdx": 151901,
        "questionWithBrackets": "What director and cinematographer of [Ticket of No Return], [Taiga], and [The Korean Wedding Chest] was a German female cinematographer",
        "questionPatternModEntities": "What director and cinematographer of M2 , M3 , and M4 was a German female cinematographer",
        "questionTemplate": "What [ROLE_SIMPLE] and [ROLE_SIMPLE] of [entity] , [entity] , and [entity] was a [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [NP_SIMPLE]",
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.cinematographer.film ns:m.063z91d .\n?x0 ns:film.cinematographer.film ns:m.07ww79r .\n?x0 ns:film.cinematographer.film ns:m.08060b6 .\n?x0 ns:film.director.film ns:m.063z91d .\n?x0 ns:film.director.film ns:m.07ww79r .\n?x0 ns:film.director.film ns:m.08060b6 .\n?x0 ns:people.person.gender ns:m.02zsn .\n?x0 ns:people.person.nationality ns:m.0345h\n}",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P2 M2 .\n?x0 P2 M3 .\n?x0 P2 M4 .\n?x0 P3 M2 .\n?x0 P3 M3 .\n?x0 P3 M4\n}",
        "expectedResponse": "Ulrike Ottinger",
        "recursionDepth": 38
    },
    {
        "questionIdx": 206233,
        "questionWithBrackets": "Which male Italian Spanish sibling of [Jessica Zielinsky Gaglione] did [ACM Group], [iProspect], and [BT Group] employ",
        "questionPatternModEntities": "Which male Italian Spanish sibling of M0 did M1 , M2 , and M3 employ",
        "questionTemplate": "Which [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] did [entity] , [entity] , and [entity] [VP_SIMPLE]",
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:people.person.employment_history/ns:business.employment_tenure.company ns:m.01g_3 .\n?x0 ns:people.person.employment_history/ns:business.employment_tenure.company ns:m.0jvtcps .\n?x0 ns:people.person.employment_history/ns:business.employment_tenure.company ns:m.0jvtcq4 .\n?x0 ns:people.person.gender ns:m.05zppz .\n?x0 ns:people.person.nationality ns:m.03rjj .\n?x0 ns:people.person.nationality ns:m.06mkj .\n?x0 ns:people.person.sibling_s/ns:people.sibling_relationship.sibling|ns:fictional_universe.fictional_character.siblings/ns:fictional_universe.sibling_relationship_of_fictional_characters.siblings ns:m.012sqxtg .\nFILTER ( ?x0 != ns:m.012sqxtg )\n}",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\n?x0 P1 M3 .\n?x0 P2 M4 .\n?x0 P2 M5 .\n?x0 P3 M6 .\nFILTER ( ?x0 != M0 )\n}",
        "expectedResponse": "Alejandro Zielinsky Gaglione",
        "recursionDepth": 38
    },
    {
        "questionIdx": 187422,
        "questionWithBrackets": "Which American person was employed by and founded [Precision I/O], [Opus Capital], [Bridge Communications], and [Packet Design]",
        "questionPatternModEntities": "Which American person was employed by and founded M1 , M2 , M3 , and M4",
        "questionTemplate": "Which [ADJECTIVE_SIMPLE] [NP_SIMPLE] was [VP_SIMPLE] by and [VP_SIMPLE] [entity] , [entity] , [entity] , and [entity]",
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:people.person .\n?x0 ns:organization.organization_founder.organizations_founded ns:m.02_43z9 .\n?x0 ns:organization.organization_founder.organizations_founded ns:m.02h747w .\n?x0 ns:organization.organization_founder.organizations_founded ns:m.03fx5t9 .\n?x0 ns:organization.organization_founder.organizations_founded ns:m.04k78nv .\n?x0 ns:people.person.employment_history/ns:business.employment_tenure.company ns:m.02_43z9 .\n?x0 ns:people.person.employment_history/ns:business.employment_tenure.company ns:m.02h747w .\n?x0 ns:people.person.employment_history/ns:business.employment_tenure.company ns:m.03fx5t9 .\n?x0 ns:people.person.employment_history/ns:business.employment_tenure.company ns:m.04k78nv .\n?x0 ns:people.person.nationality ns:m.09c7w0\n}",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P0 M3 .\n?x0 P0 M4 .\n?x0 P1 M1 .\n?x0 P1 M2 .\n?x0 P1 M3 .\n?x0 P1 M4 .\n?x0 P2 M5 .\n?x0 a M0\n}",
        "expectedResponse": "Judith L. Estrin",
        "recursionDepth": 38
    },
    {
        "questionIdx": 96775,
        "questionWithBrackets": "Was a film director that [Kung Fu Mahjong] and [High Risk] were executive produced by and directed by [Mr. & Mrs. Gambler]'s writer",
        "questionPatternModEntities": "Was a film director that M1 and M2 were executive produced by and directed by M0 's writer",
        "questionTemplate": "Was a [NP_SIMPLE] that [entity] and [entity] were [VP_SIMPLE] by and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.director.film ns:m.07hgp8 .\n?x0 ns:film.director.film ns:m.0g4grr .\n?x0 ns:film.producer.films_executive_produced ns:m.07hgp8 .\n?x0 ns:film.producer.films_executive_produced ns:m.0g4grr .\n?x0 ns:film.writer.film ns:m.0jsn8d3\n}",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\n?x0 P2 M1 .\n?x0 P2 M2\n}",
        "expectedResponse": "Yes",
        "recursionDepth": 38
    },
    {
        "questionIdx": 202763,
        "questionWithBrackets": "Which film editor executive produced, edited, and wrote [The Fifth Wall], [White Stork Is Coming], [It's Not About the Shawerma], and [Rick's Canoe]",
        "questionPatternModEntities": "Which film editor executive produced , edited , and wrote M1 , M2 , M3 , and M4",
        "questionTemplate": "Which [NP_SIMPLE] [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] [entity] , [entity] , [entity] , and [entity]",
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:film.editor .\n?x0 ns:film.editor.film ns:m.0_2zrgs .\n?x0 ns:film.editor.film ns:m.0zvz2b2 .\n?x0 ns:film.editor.film ns:m.0zxyz5j .\n?x0 ns:film.editor.film ns:m.0zztylq .\n?x0 ns:film.producer.films_executive_produced ns:m.0_2zrgs .\n?x0 ns:film.producer.films_executive_produced ns:m.0zvz2b2 .\n?x0 ns:film.producer.films_executive_produced ns:m.0zxyz5j .\n?x0 ns:film.producer.films_executive_produced ns:m.0zztylq .\n?x0 ns:film.writer.film ns:m.0_2zrgs .\n?x0 ns:film.writer.film ns:m.0zvz2b2 .\n?x0 ns:film.writer.film ns:m.0zxyz5j .\n?x0 ns:film.writer.film ns:m.0zztylq\n}",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P0 M3 .\n?x0 P0 M4 .\n?x0 P1 M1 .\n?x0 P1 M2 .\n?x0 P1 M3 .\n?x0 P1 M4 .\n?x0 P2 M1 .\n?x0 P2 M2 .\n?x0 P2 M3 .\n?x0 P2 M4 .\n?x0 a M0\n}",
        "expectedResponse": "Rick Schmidt",
        "recursionDepth": 38
    },
    {
        "questionIdx": 97943,
        "questionWithBrackets": "Was a film editor [The Man Who Killed God]'s editor, producer, executive producer, art director, writer, cinematographer, and director",
        "questionPatternModEntities": "Was a film editor M0 's editor , producer , executive producer , art director , writer , cinematographer , and director",
        "questionTemplate": "Was a [NP_SIMPLE] [entity] 's [ROLE_SIMPLE] , [ROLE_SIMPLE] , [ROLE_SIMPLE] , [ROLE_SIMPLE] , [ROLE_SIMPLE] , [ROLE_SIMPLE] , and [ROLE_SIMPLE]",
        "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.cinematographer.film ns:m.011qznqg .\n?x0 ns:film.director.film ns:m.011qznqg .\n?x0 ns:film.editor.film ns:m.011qznqg .\n?x0 ns:film.film_art_director.films_art_directed ns:m.011qznqg .\n?x0 ns:film.producer.films_executive_produced ns:m.011qznqg .\n?x0 ns:film.producer.film|ns:film.production_company.films ns:m.011qznqg .\n?x0 ns:film.writer.film ns:m.011qznqg\n}",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M0 .\n?x0 P2 M0 .\n?x0 P3 M0 .\n?x0 P4 M0 .\n?x0 P5 M0 .\n?x0 P6 M0\n}",
        "expectedResponse": "Yes",
        "recursionDepth": 39
    },
    {
        "questionIdx": 97947,
        "questionWithBrackets": "Was a film editor [The Trials of Darksmoke]'s editor, star, costume designer, writer, executive producer, cinematographer, and director",
        "questionPatternModEntities": "Was a film editor M0 's editor , star , costume designer , writer , executive producer , cinematographer , and director",
        "questionTemplate": "Was a [NP_SIMPLE] [entity] 's [ROLE_SIMPLE] , [ROLE_SIMPLE] , [ROLE_SIMPLE] , [ROLE_SIMPLE] , [ROLE_SIMPLE] , [ROLE_SIMPLE] , and [ROLE_SIMPLE]",
        "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.actor.film/ns:film.performance.film ns:m.0pb84n3 .\n?x0 ns:film.cinematographer.film ns:m.0pb84n3 .\n?x0 ns:film.director.film ns:m.0pb84n3 .\n?x0 ns:film.editor.film ns:m.0pb84n3 .\n?x0 ns:film.film_costumer_designer.costume_design_for_film ns:m.0pb84n3 .\n?x0 ns:film.producer.films_executive_produced ns:m.0pb84n3 .\n?x0 ns:film.writer.film ns:m.0pb84n3\n}",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M0 .\n?x0 P2 M0 .\n?x0 P3 M0 .\n?x0 P4 M0 .\n?x0 P5 M0 .\n?x0 P6 M0\n}",
        "expectedResponse": "Yes",
        "recursionDepth": 39
    },
    {
        "questionIdx": 205305,
        "questionWithBrackets": "Which film was executive produced by, starred, and was written by [Nasir Rahim], [Lem Collins], and [Marcus E. Munroe]",
        "questionPatternModEntities": "Which film was executive produced by , starred , and was written by M1 , M2 , and M3",
        "questionTemplate": "Which [NP_SIMPLE] was [VP_SIMPLE] by , [VP_SIMPLE] , and was [VP_SIMPLE] by [entity] , [entity] , and [entity]",
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:film.film .\n?x0 ns:film.film.executive_produced_by ns:m.010pj5tv .\n?x0 ns:film.film.executive_produced_by ns:m.0t4s3_9 .\n?x0 ns:film.film.executive_produced_by ns:m.0v8_4vp .\n?x0 ns:film.film.starring/ns:film.performance.actor ns:m.010pj5tv .\n?x0 ns:film.film.starring/ns:film.performance.actor ns:m.0t4s3_9 .\n?x0 ns:film.film.starring/ns:film.performance.actor ns:m.0v8_4vp .\n?x0 ns:film.film.written_by ns:m.010pj5tv .\n?x0 ns:film.film.written_by ns:m.0t4s3_9 .\n?x0 ns:film.film.written_by ns:m.0v8_4vp\n}",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P0 M3 .\n?x0 P1 M1 .\n?x0 P1 M2 .\n?x0 P1 M3 .\n?x0 P2 M1 .\n?x0 P2 M2 .\n?x0 P2 M3 .\n?x0 a M0\n}",
        "expectedResponse": "Inner Demons the Thrillogy",
        "recursionDepth": 39
    },
    {
        "questionIdx": 171501,
        "questionWithBrackets": "What was directed by, executive produced by, written by, and edited by [Zack Bornstein], [David Shuck], and [Eric Binswanger]",
        "questionPatternModEntities": "What was directed by , executive produced by , written by , and edited by M0 , M1 , and M2",
        "questionTemplate": "What was [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity] , [entity] , and [entity]",
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.film.directed_by ns:m.0k3qv_b .\n?x0 ns:film.film.directed_by ns:m.0k3qv_f .\n?x0 ns:film.film.directed_by ns:m.0k3qv_j .\n?x0 ns:film.film.edited_by ns:m.0k3qv_b .\n?x0 ns:film.film.edited_by ns:m.0k3qv_f .\n?x0 ns:film.film.edited_by ns:m.0k3qv_j .\n?x0 ns:film.film.executive_produced_by ns:m.0k3qv_b .\n?x0 ns:film.film.executive_produced_by ns:m.0k3qv_f .\n?x0 ns:film.film.executive_produced_by ns:m.0k3qv_j .\n?x0 ns:film.film.written_by ns:m.0k3qv_b .\n?x0 ns:film.film.written_by ns:m.0k3qv_f .\n?x0 ns:film.film.written_by ns:m.0k3qv_j\n}",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P1 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\n?x0 P2 M0 .\n?x0 P2 M1 .\n?x0 P2 M2 .\n?x0 P3 M0 .\n?x0 P3 M1 .\n?x0 P3 M2\n}",
        "expectedResponse": "Dear Hunters",
        "recursionDepth": 39
    },
    {
        "questionIdx": 58681,
        "questionWithBrackets": "Was [Holiday Road] produced, edited, written, and directed by [Mary McIlwain], [Ben Grinnell], [Todd Berger], and [Ian Eastin]",
        "questionPatternModEntities": "Was M0 produced , edited , written , and directed by M1 , M2 , M3 , and M4",
        "questionTemplate": "Was [entity] [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by [entity] , [entity] , [entity] , and [entity]",
        "sparql": "SELECT count(*) WHERE {\nns:m.0h2lzkf ns:film.film.directed_by ns:m.0gdn72_ .\nns:m.0h2lzkf ns:film.film.directed_by ns:m.0gz6b3w .\nns:m.0h2lzkf ns:film.film.directed_by ns:m.0hbzk86 .\nns:m.0h2lzkf ns:film.film.directed_by ns:m.0hbzk9_ .\nns:m.0h2lzkf ns:film.film.edited_by ns:m.0gdn72_ .\nns:m.0h2lzkf ns:film.film.edited_by ns:m.0gz6b3w .\nns:m.0h2lzkf ns:film.film.edited_by ns:m.0hbzk86 .\nns:m.0h2lzkf ns:film.film.edited_by ns:m.0hbzk9_ .\nns:m.0h2lzkf ns:film.film.produced_by|ns:film.film.production_companies ns:m.0gdn72_ .\nns:m.0h2lzkf ns:film.film.produced_by|ns:film.film.production_companies ns:m.0gz6b3w .\nns:m.0h2lzkf ns:film.film.produced_by|ns:film.film.production_companies ns:m.0hbzk86 .\nns:m.0h2lzkf ns:film.film.produced_by|ns:film.film.production_companies ns:m.0hbzk9_ .\nns:m.0h2lzkf ns:film.film.written_by ns:m.0gdn72_ .\nns:m.0h2lzkf ns:film.film.written_by ns:m.0gz6b3w .\nns:m.0h2lzkf ns:film.film.written_by ns:m.0hbzk86 .\nns:m.0h2lzkf ns:film.film.written_by ns:m.0hbzk9_\n}",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P0 M3 .\nM0 P0 M4 .\nM0 P1 M1 .\nM0 P1 M2 .\nM0 P1 M3 .\nM0 P1 M4 .\nM0 P2 M1 .\nM0 P2 M2 .\nM0 P2 M3 .\nM0 P2 M4 .\nM0 P3 M1 .\nM0 P3 M2 .\nM0 P3 M3 .\nM0 P3 M4\n}",
        "expectedResponse": "Yes",
        "recursionDepth": 39
    },
    {
        "questionIdx": 206230,
        "questionWithBrackets": "Which male German spouse of [Inge M\u00fcller] influenced and was influenced by a film producer",
        "questionPatternModEntities": "Which male German spouse of M2 influenced and was influenced by a film producer",
        "questionTemplate": "Which [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] [VP_SIMPLE] and was [VP_SIMPLE] by a [NP_SIMPLE]",
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:influence.influence_node.influenced ?x1 .\n?x0 ns:influence.influence_node.influenced_by ?x1 .\n?x0 ns:people.person.gender ns:m.05zppz .\n?x0 ns:people.person.nationality ns:m.0345h .\n?x0 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ns:m.01_vyz .\n?x1 a ns:film.producer .\nFILTER ( ?x0 != ns:m.01_vyz )\n}",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 M0 .\n?x0 P3 M1 .\n?x0 P4 M2 .\n?x1 a M3 .\nFILTER ( ?x0 != M2 )\n}",
        "expectedResponse": "Heiner M\u00fcller",
        "recursionDepth": 39
    },
    {
        "questionIdx": 8887,
        "questionWithBrackets": "Did [Gorgo Versus Godzilla]'s director write and direct [Prince of Darkness], [Escape from L.A.], [Assault on Precinct 13], [Someone's Watching Me!], [They Live], and [John Carpenter's The Fog]",
        "questionPatternModEntities": "Did M6 's director write and direct M0 , M1 , M2 , M3 , M4 , and M5",
        "questionTemplate": "Did [entity] 's [ROLE_SIMPLE] [VP_SIMPLE] and [VP_SIMPLE] [entity] , [entity] , [entity] , [entity] , [entity] , and [entity]",
        "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.director.film ns:m.01t7bl .\n?x0 ns:film.director.film ns:m.01y8zw .\n?x0 ns:film.director.film ns:m.033v5p .\n?x0 ns:film.director.film ns:m.04zhn2 .\n?x0 ns:film.director.film ns:m.051_sx .\n?x0 ns:film.director.film ns:m.0cr0_l .\n?x0 ns:film.director.film ns:m.0wdxfvk .\n?x0 ns:film.writer.film ns:m.01t7bl .\n?x0 ns:film.writer.film ns:m.01y8zw .\n?x0 ns:film.writer.film ns:m.033v5p .\n?x0 ns:film.writer.film ns:m.04zhn2 .\n?x0 ns:film.writer.film ns:m.051_sx .\n?x0 ns:film.writer.film ns:m.0cr0_l\n}",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P0 M3 .\n?x0 P0 M4 .\n?x0 P0 M5 .\n?x0 P1 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\n?x0 P1 M3 .\n?x0 P1 M4 .\n?x0 P1 M5 .\n?x0 P1 M6\n}",
        "expectedResponse": "Yes",
        "recursionDepth": 39
    },
    {
        "questionIdx": 145764,
        "questionWithBrackets": "What did [Pedro Di\u00f3genes], [Guto Parente], [Luiz Pretti], and [Ricardo Pretti] edit, direct, write, and produce",
        "questionPatternModEntities": "What did M0 , M1 , M2 , and M3 edit , direct , write , and produce",
        "questionTemplate": "What did [entity] , [entity] , [entity] , and [entity] [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE]",
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.film.directed_by ns:m.0clqvvr .\n?x0 ns:film.film.directed_by ns:m.0g4trt7 .\n?x0 ns:film.film.directed_by ns:m.0g4trtc .\n?x0 ns:film.film.directed_by ns:m.0g4trtg .\n?x0 ns:film.film.edited_by ns:m.0clqvvr .\n?x0 ns:film.film.edited_by ns:m.0g4trt7 .\n?x0 ns:film.film.edited_by ns:m.0g4trtc .\n?x0 ns:film.film.edited_by ns:m.0g4trtg .\n?x0 ns:film.film.produced_by|ns:film.film.production_companies ns:m.0clqvvr .\n?x0 ns:film.film.produced_by|ns:film.film.production_companies ns:m.0g4trt7 .\n?x0 ns:film.film.produced_by|ns:film.film.production_companies ns:m.0g4trtc .\n?x0 ns:film.film.produced_by|ns:film.film.production_companies ns:m.0g4trtg .\n?x0 ns:film.film.written_by ns:m.0clqvvr .\n?x0 ns:film.film.written_by ns:m.0g4trt7 .\n?x0 ns:film.film.written_by ns:m.0g4trtc .\n?x0 ns:film.film.written_by ns:m.0g4trtg\n}",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P0 M3 .\n?x0 P1 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\n?x0 P1 M3 .\n?x0 P2 M0 .\n?x0 P2 M1 .\n?x0 P2 M2 .\n?x0 P2 M3 .\n?x0 P3 M0 .\n?x0 P3 M1 .\n?x0 P3 M2 .\n?x0 P3 M3\n}",
        "expectedResponse": "Road To Ythaca",
        "recursionDepth": 40
    },
    {
        "questionIdx": 60442,
        "questionWithBrackets": "Was [It's Such a Beautiful Day]'s director, cinematographer, editor, star, and producer influenced by [Jack Smith], [Stanley Kubrick], and [Edward Gorey]",
        "questionPatternModEntities": "Was M3 's director , cinematographer , editor , star , and producer influenced by M0 , M1 , and M2",
        "questionTemplate": "Was [entity] 's [ROLE_SIMPLE] , [ROLE_SIMPLE] , [ROLE_SIMPLE] , [ROLE_SIMPLE] , and [ROLE_SIMPLE] [VP_SIMPLE] by [entity] , [entity] , and [entity]",
        "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.actor.film/ns:film.performance.film ns:m.0j8f48q .\n?x0 ns:film.cinematographer.film ns:m.0j8f48q .\n?x0 ns:film.director.film ns:m.0j8f48q .\n?x0 ns:film.editor.film ns:m.0j8f48q .\n?x0 ns:film.producer.film|ns:film.production_company.films ns:m.0j8f48q .\n?x0 ns:influence.influence_node.influenced_by ns:m.06mn7 .\n?x0 ns:influence.influence_node.influenced_by ns:m.07kwmh .\n?x0 ns:influence.influence_node.influenced_by ns:m.0m3vt\n}",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P1 M3 .\n?x0 P2 M3 .\n?x0 P3 M3 .\n?x0 P4 M3 .\n?x0 P5 M3\n}",
        "expectedResponse": "No",
        "recursionDepth": 40
    },
    {
        "questionIdx": 158693,
        "questionWithBrackets": "What film was directed, edited, executive produced, and written by [Eric Binswanger], [David Shuck], and [Zack Bornstein]",
        "questionPatternModEntities": "What film was directed , edited , executive produced , and written by M1 , M2 , and M3",
        "questionTemplate": "What [NP_SIMPLE] was [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by [entity] , [entity] , and [entity]",
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:film.film .\n?x0 ns:film.film.directed_by ns:m.0k3qv_b .\n?x0 ns:film.film.directed_by ns:m.0k3qv_f .\n?x0 ns:film.film.directed_by ns:m.0k3qv_j .\n?x0 ns:film.film.edited_by ns:m.0k3qv_b .\n?x0 ns:film.film.edited_by ns:m.0k3qv_f .\n?x0 ns:film.film.edited_by ns:m.0k3qv_j .\n?x0 ns:film.film.executive_produced_by ns:m.0k3qv_b .\n?x0 ns:film.film.executive_produced_by ns:m.0k3qv_f .\n?x0 ns:film.film.executive_produced_by ns:m.0k3qv_j .\n?x0 ns:film.film.written_by ns:m.0k3qv_b .\n?x0 ns:film.film.written_by ns:m.0k3qv_f .\n?x0 ns:film.film.written_by ns:m.0k3qv_j\n}",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P0 M3 .\n?x0 P1 M1 .\n?x0 P1 M2 .\n?x0 P1 M3 .\n?x0 P2 M1 .\n?x0 P2 M2 .\n?x0 P2 M3 .\n?x0 P3 M1 .\n?x0 P3 M2 .\n?x0 P3 M3 .\n?x0 a M0\n}",
        "expectedResponse": "Dear Hunters",
        "recursionDepth": 40
    },
    {
        "questionIdx": 25168,
        "questionWithBrackets": "Did [Wild Animals]'s writer, art director, and director write and executive produce [Poongsan], [Red Family], and [Samaritan Girl]",
        "questionPatternModEntities": "Did M0 's writer , art director , and director write and executive produce M1 , M2 , and M3",
        "questionTemplate": "Did [entity] 's [ROLE_SIMPLE] , [ROLE_SIMPLE] , and [ROLE_SIMPLE] [VP_SIMPLE] and [VP_SIMPLE] [entity] , [entity] , and [entity]",
        "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.director.film ns:m.09ns7t .\n?x0 ns:film.film_art_director.films_art_directed ns:m.09ns7t .\n?x0 ns:film.producer.films_executive_produced ns:m.08t9_v .\n?x0 ns:film.producer.films_executive_produced ns:m.0_qzvl0 .\n?x0 ns:film.producer.films_executive_produced ns:m.0gytc29 .\n?x0 ns:film.writer.film ns:m.08t9_v .\n?x0 ns:film.writer.film ns:m.09ns7t .\n?x0 ns:film.writer.film ns:m.0_qzvl0 .\n?x0 ns:film.writer.film ns:m.0gytc29\n}",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P0 M3 .\n?x0 P1 M1 .\n?x0 P1 M2 .\n?x0 P1 M3 .\n?x0 P2 M0 .\n?x0 P3 M0\n}",
        "expectedResponse": "Yes",
        "recursionDepth": 40
    },
    {
        "questionIdx": 57734,
        "questionWithBrackets": "Was [Haiyang Wang] [Derredor]'s art director, director, star, writer, executive producer, producer, cinematographer, and editor",
        "questionPatternModEntities": "Was M0 M1 's art director , director , star , writer , executive producer , producer , cinematographer , and editor",
        "questionTemplate": "Was [entity] [entity] 's [ROLE_SIMPLE] , [ROLE_SIMPLE] , [ROLE_SIMPLE] , [ROLE_SIMPLE] , [ROLE_SIMPLE] , [ROLE_SIMPLE] , [ROLE_SIMPLE] , and [ROLE_SIMPLE]",
        "sparql": "SELECT count(*) WHERE {\nns:m.0xq9c3b ns:film.actor.film/ns:film.performance.film ns:m.011qzmq8 .\nns:m.0xq9c3b ns:film.cinematographer.film ns:m.011qzmq8 .\nns:m.0xq9c3b ns:film.director.film ns:m.011qzmq8 .\nns:m.0xq9c3b ns:film.editor.film ns:m.011qzmq8 .\nns:m.0xq9c3b ns:film.film_art_director.films_art_directed ns:m.011qzmq8 .\nns:m.0xq9c3b ns:film.producer.films_executive_produced ns:m.011qzmq8 .\nns:m.0xq9c3b ns:film.producer.film|ns:film.production_company.films ns:m.011qzmq8 .\nns:m.0xq9c3b ns:film.writer.film ns:m.011qzmq8\n}",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1 .\nM0 P2 M1 .\nM0 P3 M1 .\nM0 P4 M1 .\nM0 P5 M1 .\nM0 P6 M1 .\nM0 P7 M1\n}",
        "expectedResponse": "No",
        "recursionDepth": 40
    },
    {
        "questionIdx": 11108,
        "questionWithBrackets": "Did [Janine Loves Jenna]'s executive producer, star, editor, director, cinematographer, writer, and art director direct [Briana Loves Jenna]",
        "questionPatternModEntities": "Did M0 's executive producer , star , editor , director , cinematographer , writer , and art director direct M1",
        "questionTemplate": "Did [entity] 's [ROLE_SIMPLE] , [ROLE_SIMPLE] , [ROLE_SIMPLE] , [ROLE_SIMPLE] , [ROLE_SIMPLE] , [ROLE_SIMPLE] , and [ROLE_SIMPLE] [VP_SIMPLE] [entity]",
        "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.actor.film/ns:film.performance.film ns:m.05kd8b8 .\n?x0 ns:film.cinematographer.film ns:m.05kd8b8 .\n?x0 ns:film.director.film ns:m.02pj9z2 .\n?x0 ns:film.director.film ns:m.05kd8b8 .\n?x0 ns:film.editor.film ns:m.05kd8b8 .\n?x0 ns:film.film_art_director.films_art_directed ns:m.05kd8b8 .\n?x0 ns:film.producer.films_executive_produced ns:m.05kd8b8 .\n?x0 ns:film.writer.film ns:m.05kd8b8\n}",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M0 .\n?x0 P2 M0 .\n?x0 P3 M0 .\n?x0 P4 M0 .\n?x0 P5 M0 .\n?x0 P6 M0 .\n?x0 P6 M1\n}",
        "expectedResponse": "Yes",
        "recursionDepth": 40
    },
    {
        "questionIdx": 155006,
        "questionWithBrackets": "What film did [Benjamin Davidow], [Nick Gregorio], and [Matthew Sanchez] direct, edit, produce, and write",
        "questionPatternModEntities": "What film did M1 , M2 , and M3 direct , edit , produce , and write",
        "questionTemplate": "What [NP_SIMPLE] did [entity] , [entity] , and [entity] [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE]",
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:film.film .\n?x0 ns:film.film.directed_by ns:m.09kbt4x .\n?x0 ns:film.film.directed_by ns:m.0g51v0x .\n?x0 ns:film.film.directed_by ns:m.0g51v1b .\n?x0 ns:film.film.edited_by ns:m.09kbt4x .\n?x0 ns:film.film.edited_by ns:m.0g51v0x .\n?x0 ns:film.film.edited_by ns:m.0g51v1b .\n?x0 ns:film.film.produced_by|ns:film.film.production_companies ns:m.09kbt4x .\n?x0 ns:film.film.produced_by|ns:film.film.production_companies ns:m.0g51v0x .\n?x0 ns:film.film.produced_by|ns:film.film.production_companies ns:m.0g51v1b .\n?x0 ns:film.film.written_by ns:m.09kbt4x .\n?x0 ns:film.film.written_by ns:m.0g51v0x .\n?x0 ns:film.film.written_by ns:m.0g51v1b\n}",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P0 M3 .\n?x0 P1 M1 .\n?x0 P1 M2 .\n?x0 P1 M3 .\n?x0 P2 M1 .\n?x0 P2 M2 .\n?x0 P2 M3 .\n?x0 P3 M1 .\n?x0 P3 M2 .\n?x0 P3 M3 .\n?x0 a M0\n}",
        "expectedResponse": "Happy Birthday Harris Malden",
        "recursionDepth": 40
    },
    {
        "questionIdx": 138878,
        "questionWithBrackets": "What child of [Xerox] was founded by [Alan Kay], was founded by [Jack Goldman], and employed [George Pake]",
        "questionPatternModEntities": "What child of M0 was founded by M1 , was founded by M2 , and employed M3",
        "questionTemplate": "What [ROLE_SIMPLE] of [entity] was [VP_SIMPLE] by [entity] , was [VP_SIMPLE] by [entity] , and [VP_SIMPLE] [entity]",
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:business.employer.employees/ns:business.employment_tenure.person ns:m.044dh_ .\n?x0 ns:organization.organization.founders ns:m.06ck6h .\n?x0 ns:organization.organization.founders ns:m.0q0x .\n?x0 ns:people.person.parents|ns:fictional_universe.fictional_character.parents|ns:organization.organization.parent/ns:organization.organization_relationship.parent ns:m.087c7\n}",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\n?x0 P2 M3\n}",
        "expectedResponse": "PARC",
        "recursionDepth": 40
    },
    {
        "questionIdx": 187124,
        "questionWithBrackets": "What writer, editor, executive producer, cinematographer, star, and art director of [Tetsuo II: Body Hammer] wrote [Kotoko] and [Vital]",
        "questionPatternModEntities": "What writer , editor , executive producer , cinematographer , star , and art director of M0 wrote M1 and M2",
        "questionTemplate": "What [ROLE_SIMPLE] , [ROLE_SIMPLE] , [ROLE_SIMPLE] , [ROLE_SIMPLE] , [ROLE_SIMPLE] , and [ROLE_SIMPLE] of [entity] [VP_SIMPLE] [entity] and [entity]",
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.actor.film/ns:film.performance.film ns:m.0brs6b .\n?x0 ns:film.cinematographer.film ns:m.0brs6b .\n?x0 ns:film.editor.film ns:m.0brs6b .\n?x0 ns:film.film_art_director.films_art_directed ns:m.0brs6b .\n?x0 ns:film.producer.films_executive_produced ns:m.0brs6b .\n?x0 ns:film.writer.film ns:m.087hmc .\n?x0 ns:film.writer.film ns:m.0brs6b .\n?x0 ns:film.writer.film ns:m.0hnv3k0\n}",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P1 M0 .\n?x0 P2 M0 .\n?x0 P3 M0 .\n?x0 P4 M0 .\n?x0 P5 M0\n}",
        "expectedResponse": "Shinya Tsukamoto",
        "recursionDepth": 41
    },
    {
        "questionIdx": 207519,
        "questionWithBrackets": "Which parent of [United Artists] was acquired by [Providence Equity Partners], [APriori Capital Partners], [Sony Corporation of America], [TPG Capital], and [Comcast] and acquired by [Quadrangle Group]",
        "questionPatternModEntities": "Which parent of M0 was acquired by M1 , M2 , M3 , M4 , and M5 and acquired by M6",
        "questionTemplate": "Which [ROLE_SIMPLE] of [entity] was [VP_SIMPLE] by [entity] , [entity] , [entity] , [entity] , and [entity] and [VP_SIMPLE] by [entity]",
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:organization.organization.acquired_by/ns:business.acquisition.acquiring_company ns:m.01s73z .\n?x0 ns:organization.organization.acquired_by/ns:business.acquisition.acquiring_company ns:m.02qb2mr .\n?x0 ns:organization.organization.acquired_by/ns:business.acquisition.acquiring_company ns:m.02vmhkn .\n?x0 ns:organization.organization.acquired_by/ns:business.acquisition.acquiring_company ns:m.03yqpb .\n?x0 ns:organization.organization.acquired_by/ns:business.acquisition.acquiring_company ns:m.04rcx3 .\n?x0 ns:organization.organization.acquired_by/ns:business.acquisition.acquiring_company ns:m.064bvc .\n?x0 ns:people.person.children|ns:fictional_universe.fictional_character.children|ns:organization.organization.child/ns:organization.organization_relationship.child ns:m.017jv5\n}",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\n?x0 P1 M3 .\n?x0 P1 M4 .\n?x0 P1 M5 .\n?x0 P1 M6\n}",
        "expectedResponse": "Metro-Goldwyn-Mayer",
        "recursionDepth": 41
    },
    {
        "questionIdx": 205397,
        "questionWithBrackets": "Which film was produced, directed, written, and edited by [Pedro Di\u00f3genes], [Guto Parente], [Luiz Pretti], and [Ricardo Pretti]",
        "questionPatternModEntities": "Which film was produced , directed , written , and edited by M1 , M2 , M3 , and M4",
        "questionTemplate": "Which [NP_SIMPLE] was [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by [entity] , [entity] , [entity] , and [entity]",
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:film.film .\n?x0 ns:film.film.directed_by ns:m.0clqvvr .\n?x0 ns:film.film.directed_by ns:m.0g4trt7 .\n?x0 ns:film.film.directed_by ns:m.0g4trtc .\n?x0 ns:film.film.directed_by ns:m.0g4trtg .\n?x0 ns:film.film.edited_by ns:m.0clqvvr .\n?x0 ns:film.film.edited_by ns:m.0g4trt7 .\n?x0 ns:film.film.edited_by ns:m.0g4trtc .\n?x0 ns:film.film.edited_by ns:m.0g4trtg .\n?x0 ns:film.film.produced_by|ns:film.film.production_companies ns:m.0clqvvr .\n?x0 ns:film.film.produced_by|ns:film.film.production_companies ns:m.0g4trt7 .\n?x0 ns:film.film.produced_by|ns:film.film.production_companies ns:m.0g4trtc .\n?x0 ns:film.film.produced_by|ns:film.film.production_companies ns:m.0g4trtg .\n?x0 ns:film.film.written_by ns:m.0clqvvr .\n?x0 ns:film.film.written_by ns:m.0g4trt7 .\n?x0 ns:film.film.written_by ns:m.0g4trtc .\n?x0 ns:film.film.written_by ns:m.0g4trtg\n}",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P0 M3 .\n?x0 P0 M4 .\n?x0 P1 M1 .\n?x0 P1 M2 .\n?x0 P1 M3 .\n?x0 P1 M4 .\n?x0 P2 M1 .\n?x0 P2 M2 .\n?x0 P2 M3 .\n?x0 P2 M4 .\n?x0 P3 M1 .\n?x0 P3 M2 .\n?x0 P3 M3 .\n?x0 P3 M4 .\n?x0 a M0\n}",
        "expectedResponse": "Road To Ythaca",
        "recursionDepth": 41
    },
    {
        "questionIdx": 204968,
        "questionWithBrackets": "Which film was directed, written, produced, and edited by [Benjamin Davidow], [Juan Cardarelli], [Matthew Sanchez], and [Nick Gregorio]",
        "questionPatternModEntities": "Which film was directed , written , produced , and edited by M1 , M2 , M3 , and M4",
        "questionTemplate": "Which [NP_SIMPLE] was [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by [entity] , [entity] , [entity] , and [entity]",
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:film.film .\n?x0 ns:film.film.directed_by ns:m.09kbt4x .\n?x0 ns:film.film.directed_by ns:m.0d2k4dl .\n?x0 ns:film.film.directed_by ns:m.0g51v0x .\n?x0 ns:film.film.directed_by ns:m.0g51v1b .\n?x0 ns:film.film.edited_by ns:m.09kbt4x .\n?x0 ns:film.film.edited_by ns:m.0d2k4dl .\n?x0 ns:film.film.edited_by ns:m.0g51v0x .\n?x0 ns:film.film.edited_by ns:m.0g51v1b .\n?x0 ns:film.film.produced_by|ns:film.film.production_companies ns:m.09kbt4x .\n?x0 ns:film.film.produced_by|ns:film.film.production_companies ns:m.0d2k4dl .\n?x0 ns:film.film.produced_by|ns:film.film.production_companies ns:m.0g51v0x .\n?x0 ns:film.film.produced_by|ns:film.film.production_companies ns:m.0g51v1b .\n?x0 ns:film.film.written_by ns:m.09kbt4x .\n?x0 ns:film.film.written_by ns:m.0d2k4dl .\n?x0 ns:film.film.written_by ns:m.0g51v0x .\n?x0 ns:film.film.written_by ns:m.0g51v1b\n}",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P0 M3 .\n?x0 P0 M4 .\n?x0 P1 M1 .\n?x0 P1 M2 .\n?x0 P1 M3 .\n?x0 P1 M4 .\n?x0 P2 M1 .\n?x0 P2 M2 .\n?x0 P2 M3 .\n?x0 P2 M4 .\n?x0 P3 M1 .\n?x0 P3 M2 .\n?x0 P3 M3 .\n?x0 P3 M4 .\n?x0 a M0\n}",
        "expectedResponse": "Happy Birthday Harris Malden",
        "recursionDepth": 41
    },
    {
        "questionIdx": 1663,
        "questionWithBrackets": "Did [Apple Inc.]'s founder and employee influence [Gerald Hocker], [Yogendra Chavda], and [Paul Scolnick] and marry a film producer",
        "questionPatternModEntities": "Did M3 's founder and employee influence M0 , M1 , and M2 and marry a film producer",
        "questionTemplate": "Did [entity] 's [ROLE_SIMPLE] and [ROLE_SIMPLE] [VP_SIMPLE] [entity] , [entity] , and [entity] and [VP_SIMPLE] a [NP_SIMPLE]",
        "sparql": "SELECT count(*) WHERE {\n?x0 ns:influence.influence_node.influenced ns:m.013141z6 .\n?x0 ns:influence.influence_node.influenced ns:m.0_kvlrg .\n?x0 ns:influence.influence_node.influenced ns:m.0z8h_1q .\n?x0 ns:organization.organization_founder.organizations_founded ns:m.0k8z .\n?x0 ns:people.person.employment_history/ns:business.employment_tenure.company ns:m.0k8z .\n?x0 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ?x1 .\n?x1 a ns:film.producer .\nFILTER ( ?x0 != ?x1 )\n}",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P1 M3 .\n?x0 P2 M3 .\n?x0 P3 ?x1 .\n?x1 a M4 .\nFILTER ( ?x0 != ?x1 )\n}",
        "expectedResponse": "No",
        "recursionDepth": 41
    },
    {
        "questionIdx": 41751,
        "questionWithBrackets": "Did an art director direct, produce, write, and edit [The Basis Of Make-up I], [Tetsuo: The Bullet Man], and [Nightmare Detective]",
        "questionPatternModEntities": "Did a art director direct , produce , write , and edit M1 , M2 , and M3",
        "questionTemplate": "Did a [NP_SIMPLE] [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] [entity] , [entity] , and [entity]",
        "sparql": "SELECT count(*) WHERE {\n?x0 a ns:film.film_art_director .\n?x0 ns:film.director.film ns:m.02qq666 .\n?x0 ns:film.director.film ns:m.06zq889 .\n?x0 ns:film.director.film ns:m.0_skn20 .\n?x0 ns:film.editor.film ns:m.02qq666 .\n?x0 ns:film.editor.film ns:m.06zq889 .\n?x0 ns:film.editor.film ns:m.0_skn20 .\n?x0 ns:film.producer.film|ns:film.production_company.films ns:m.02qq666 .\n?x0 ns:film.producer.film|ns:film.production_company.films ns:m.06zq889 .\n?x0 ns:film.producer.film|ns:film.production_company.films ns:m.0_skn20 .\n?x0 ns:film.writer.film ns:m.02qq666 .\n?x0 ns:film.writer.film ns:m.06zq889 .\n?x0 ns:film.writer.film ns:m.0_skn20\n}",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P0 M3 .\n?x0 P1 M1 .\n?x0 P1 M2 .\n?x0 P1 M3 .\n?x0 P2 M1 .\n?x0 P2 M2 .\n?x0 P2 M3 .\n?x0 P3 M1 .\n?x0 P3 M2 .\n?x0 P3 M3 .\n?x0 a M0\n}",
        "expectedResponse": "No",
        "recursionDepth": 41
    },
    {
        "questionIdx": 239338,
        "questionWithBrackets": "Who wrote, executive produced, produced, and directed [It's Not About the Shawerma], [Blues for the Avatar], [Maisy's Garden], and [The Fifth Wall]",
        "questionPatternModEntities": "Who wrote , executive produced , produced , and directed M1 , M2 , M3 , and M4",
        "questionTemplate": "Who [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] [entity] , [entity] , [entity] , and [entity]",
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:people.person .\n?x0 ns:film.director.film ns:m.0_2zrgs .\n?x0 ns:film.director.film ns:m.0zgygxr .\n?x0 ns:film.director.film ns:m.0znn7j_ .\n?x0 ns:film.director.film ns:m.0zztylq .\n?x0 ns:film.producer.films_executive_produced ns:m.0_2zrgs .\n?x0 ns:film.producer.films_executive_produced ns:m.0zgygxr .\n?x0 ns:film.producer.films_executive_produced ns:m.0znn7j_ .\n?x0 ns:film.producer.films_executive_produced ns:m.0zztylq .\n?x0 ns:film.producer.film|ns:film.production_company.films ns:m.0_2zrgs .\n?x0 ns:film.producer.film|ns:film.production_company.films ns:m.0zgygxr .\n?x0 ns:film.producer.film|ns:film.production_company.films ns:m.0znn7j_ .\n?x0 ns:film.producer.film|ns:film.production_company.films ns:m.0zztylq .\n?x0 ns:film.writer.film ns:m.0_2zrgs .\n?x0 ns:film.writer.film ns:m.0zgygxr .\n?x0 ns:film.writer.film ns:m.0znn7j_ .\n?x0 ns:film.writer.film ns:m.0zztylq\n}",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P0 M3 .\n?x0 P0 M4 .\n?x0 P1 M1 .\n?x0 P1 M2 .\n?x0 P1 M3 .\n?x0 P1 M4 .\n?x0 P2 M1 .\n?x0 P2 M2 .\n?x0 P2 M3 .\n?x0 P2 M4 .\n?x0 P3 M1 .\n?x0 P3 M2 .\n?x0 P3 M3 .\n?x0 P3 M4 .\n?x0 a M0\n}",
        "expectedResponse": "Rick Schmidt",
        "recursionDepth": 41
    },
    {
        "questionIdx": 86409,
        "questionWithBrackets": "Was [Weird Mob - Rarebit Fiends] produced by, edited by, written by, and directed by [Juan Cardarelli], [Matthew Sanchez], [Benjamin Davidow], and [Eric M. Levy]",
        "questionPatternModEntities": "Was M0 produced by , edited by , written by , and directed by M1 , M2 , M3 , and M4",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity] , [entity] , [entity] , and [entity]",
        "sparql": "SELECT count(*) WHERE {\nns:m.010x57_m ns:film.film.directed_by ns:m.09kbt4x .\nns:m.010x57_m ns:film.film.directed_by ns:m.0d2k4dl .\nns:m.010x57_m ns:film.film.directed_by ns:m.0g51v13 .\nns:m.010x57_m ns:film.film.directed_by ns:m.0g51v1b .\nns:m.010x57_m ns:film.film.edited_by ns:m.09kbt4x .\nns:m.010x57_m ns:film.film.edited_by ns:m.0d2k4dl .\nns:m.010x57_m ns:film.film.edited_by ns:m.0g51v13 .\nns:m.010x57_m ns:film.film.edited_by ns:m.0g51v1b .\nns:m.010x57_m ns:film.film.produced_by|ns:film.film.production_companies ns:m.09kbt4x .\nns:m.010x57_m ns:film.film.produced_by|ns:film.film.production_companies ns:m.0d2k4dl .\nns:m.010x57_m ns:film.film.produced_by|ns:film.film.production_companies ns:m.0g51v13 .\nns:m.010x57_m ns:film.film.produced_by|ns:film.film.production_companies ns:m.0g51v1b .\nns:m.010x57_m ns:film.film.written_by ns:m.09kbt4x .\nns:m.010x57_m ns:film.film.written_by ns:m.0d2k4dl .\nns:m.010x57_m ns:film.film.written_by ns:m.0g51v13 .\nns:m.010x57_m ns:film.film.written_by ns:m.0g51v1b\n}",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P0 M3 .\nM0 P0 M4 .\nM0 P1 M1 .\nM0 P1 M2 .\nM0 P1 M3 .\nM0 P1 M4 .\nM0 P2 M1 .\nM0 P2 M2 .\nM0 P2 M3 .\nM0 P2 M4 .\nM0 P3 M1 .\nM0 P3 M2 .\nM0 P3 M3 .\nM0 P3 M4\n}",
        "expectedResponse": "No",
        "recursionDepth": 42
    },
    {
        "questionIdx": 208871,
        "questionWithBrackets": "Which prequel of [Animator vs Animation 3] was produced by, was directed by, starred, and was written by [Alan Becker]",
        "questionPatternModEntities": "Which prequel of M0 was produced by , was directed by , starred , and was written by M1",
        "questionTemplate": "Which [ROLE_SIMPLE] of [entity] was [VP_SIMPLE] by , was [VP_SIMPLE] by , [VP_SIMPLE] , and was [VP_SIMPLE] by [entity]",
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.film.directed_by ns:m.0108mkjv .\n?x0 ns:film.film.produced_by|ns:film.film.production_companies ns:m.0108mkjv .\n?x0 ns:film.film.sequel ns:m.010lfbym .\n?x0 ns:film.film.starring/ns:film.performance.actor ns:m.0108mkjv .\n?x0 ns:film.film.written_by ns:m.0108mkjv\n}",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P2 M1 .\n?x0 P3 M1 .\n?x0 P4 M1\n}",
        "expectedResponse": "Animator vs Animation 2",
        "recursionDepth": 42
    },
    {
        "questionIdx": 19432,
        "questionWithBrackets": "Did [Someone Like Me]'s writer and editor direct, edit, and executive produce [It's Not About the Shawerma], [White Stork Is Coming], and [Blues for the Avatar]",
        "questionPatternModEntities": "Did M3 's writer and editor direct , edit , and executive produce M0 , M1 , and M2",
        "questionTemplate": "Did [entity] 's [ROLE_SIMPLE] and [ROLE_SIMPLE] [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] [entity] , [entity] , and [entity]",
        "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.director.film ns:m.0znn7j_ .\n?x0 ns:film.director.film ns:m.0zxyz5j .\n?x0 ns:film.director.film ns:m.0zztylq .\n?x0 ns:film.editor.film ns:m.0zgtvfg .\n?x0 ns:film.editor.film ns:m.0znn7j_ .\n?x0 ns:film.editor.film ns:m.0zxyz5j .\n?x0 ns:film.editor.film ns:m.0zztylq .\n?x0 ns:film.producer.films_executive_produced ns:m.0znn7j_ .\n?x0 ns:film.producer.films_executive_produced ns:m.0zxyz5j .\n?x0 ns:film.producer.films_executive_produced ns:m.0zztylq .\n?x0 ns:film.writer.film ns:m.0zgtvfg\n}",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P0 M3 .\n?x0 P1 M3 .\n?x0 P2 M0 .\n?x0 P2 M1 .\n?x0 P2 M2 .\n?x0 P3 M0 .\n?x0 P3 M1 .\n?x0 P3 M2\n}",
        "expectedResponse": "Yes",
        "recursionDepth": 42
    },
    {
        "questionIdx": 42966,
        "questionWithBrackets": "Did an executive producer, star, director, cinematographer, writer, and art director of [CZ12] produce [Everlasting Regret] and [Rob-B-Hood]",
        "questionPatternModEntities": "Did a executive producer , star , director , cinematographer , writer , and art director of M0 produce M1 and M2",
        "questionTemplate": "Did a [ROLE_SIMPLE] , [ROLE_SIMPLE] , [ROLE_SIMPLE] , [ROLE_SIMPLE] , [ROLE_SIMPLE] , and [ROLE_SIMPLE] of [entity] [VP_SIMPLE] [entity] and [entity]",
        "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.actor.film/ns:film.performance.film ns:m.0hznzl6 .\n?x0 ns:film.cinematographer.film ns:m.0hznzl6 .\n?x0 ns:film.director.film ns:m.0hznzl6 .\n?x0 ns:film.film_art_director.films_art_directed ns:m.0hznzl6 .\n?x0 ns:film.producer.films_executive_produced ns:m.0hznzl6 .\n?x0 ns:film.producer.film|ns:film.production_company.films ns:m.083zww .\n?x0 ns:film.producer.film|ns:film.production_company.films ns:m.0btf7x .\n?x0 ns:film.writer.film ns:m.0hznzl6\n}",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M0 .\n?x0 P2 M1 .\n?x0 P2 M2 .\n?x0 P3 M0 .\n?x0 P4 M0 .\n?x0 P5 M0 .\n?x0 P6 M0\n}",
        "expectedResponse": "Yes",
        "recursionDepth": 42
    },
    {
        "questionIdx": 57950,
        "questionWithBrackets": "Was [Happy Birthday Harris Malden] produced, written, edited, and directed by [Benjamin Davidow], [Nick Gregorio], [Matthew Sanchez], [Juan Cardarelli], and [Eric M. Levy]",
        "questionPatternModEntities": "Was M0 produced , written , edited , and directed by M1 , M2 , M3 , M4 , and M5",
        "questionTemplate": "Was [entity] [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by [entity] , [entity] , [entity] , [entity] , and [entity]",
        "sparql": "SELECT count(*) WHERE {\nns:m.0crzszh ns:film.film.directed_by ns:m.09kbt4x .\nns:m.0crzszh ns:film.film.directed_by ns:m.0d2k4dl .\nns:m.0crzszh ns:film.film.directed_by ns:m.0g51v0x .\nns:m.0crzszh ns:film.film.directed_by ns:m.0g51v13 .\nns:m.0crzszh ns:film.film.directed_by ns:m.0g51v1b .\nns:m.0crzszh ns:film.film.edited_by ns:m.09kbt4x .\nns:m.0crzszh ns:film.film.edited_by ns:m.0d2k4dl .\nns:m.0crzszh ns:film.film.edited_by ns:m.0g51v0x .\nns:m.0crzszh ns:film.film.edited_by ns:m.0g51v13 .\nns:m.0crzszh ns:film.film.edited_by ns:m.0g51v1b .\nns:m.0crzszh ns:film.film.produced_by|ns:film.film.production_companies ns:m.09kbt4x .\nns:m.0crzszh ns:film.film.produced_by|ns:film.film.production_companies ns:m.0d2k4dl .\nns:m.0crzszh ns:film.film.produced_by|ns:film.film.production_companies ns:m.0g51v0x .\nns:m.0crzszh ns:film.film.produced_by|ns:film.film.production_companies ns:m.0g51v13 .\nns:m.0crzszh ns:film.film.produced_by|ns:film.film.production_companies ns:m.0g51v1b .\nns:m.0crzszh ns:film.film.written_by ns:m.09kbt4x .\nns:m.0crzszh ns:film.film.written_by ns:m.0d2k4dl .\nns:m.0crzszh ns:film.film.written_by ns:m.0g51v0x .\nns:m.0crzszh ns:film.film.written_by ns:m.0g51v13 .\nns:m.0crzszh ns:film.film.written_by ns:m.0g51v1b\n}",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P0 M3 .\nM0 P0 M4 .\nM0 P0 M5 .\nM0 P1 M1 .\nM0 P1 M2 .\nM0 P1 M3 .\nM0 P1 M4 .\nM0 P1 M5 .\nM0 P2 M1 .\nM0 P2 M2 .\nM0 P2 M3 .\nM0 P2 M4 .\nM0 P2 M5 .\nM0 P3 M1 .\nM0 P3 M2 .\nM0 P3 M3 .\nM0 P3 M4 .\nM0 P3 M5\n}",
        "expectedResponse": "Yes",
        "recursionDepth": 42
    },
    {
        "questionIdx": 57905,
        "questionWithBrackets": "Was [Happy Birthday Harris Malden] directed, edited, written, and produced by [Nick Gregorio], [Matthew Sanchez], [Juan Cardarelli], [Eric M. Levy], and [Benjamin Davidow]",
        "questionPatternModEntities": "Was M0 directed , edited , written , and produced by M1 , M2 , M3 , M4 , and M5",
        "questionTemplate": "Was [entity] [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by [entity] , [entity] , [entity] , [entity] , and [entity]",
        "sparql": "SELECT count(*) WHERE {\nns:m.0crzszh ns:film.film.directed_by ns:m.09kbt4x .\nns:m.0crzszh ns:film.film.directed_by ns:m.0d2k4dl .\nns:m.0crzszh ns:film.film.directed_by ns:m.0g51v0x .\nns:m.0crzszh ns:film.film.directed_by ns:m.0g51v13 .\nns:m.0crzszh ns:film.film.directed_by ns:m.0g51v1b .\nns:m.0crzszh ns:film.film.edited_by ns:m.09kbt4x .\nns:m.0crzszh ns:film.film.edited_by ns:m.0d2k4dl .\nns:m.0crzszh ns:film.film.edited_by ns:m.0g51v0x .\nns:m.0crzszh ns:film.film.edited_by ns:m.0g51v13 .\nns:m.0crzszh ns:film.film.edited_by ns:m.0g51v1b .\nns:m.0crzszh ns:film.film.produced_by|ns:film.film.production_companies ns:m.09kbt4x .\nns:m.0crzszh ns:film.film.produced_by|ns:film.film.production_companies ns:m.0d2k4dl .\nns:m.0crzszh ns:film.film.produced_by|ns:film.film.production_companies ns:m.0g51v0x .\nns:m.0crzszh ns:film.film.produced_by|ns:film.film.production_companies ns:m.0g51v13 .\nns:m.0crzszh ns:film.film.produced_by|ns:film.film.production_companies ns:m.0g51v1b .\nns:m.0crzszh ns:film.film.written_by ns:m.09kbt4x .\nns:m.0crzszh ns:film.film.written_by ns:m.0d2k4dl .\nns:m.0crzszh ns:film.film.written_by ns:m.0g51v0x .\nns:m.0crzszh ns:film.film.written_by ns:m.0g51v13 .\nns:m.0crzszh ns:film.film.written_by ns:m.0g51v1b\n}",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P0 M3 .\nM0 P0 M4 .\nM0 P0 M5 .\nM0 P1 M1 .\nM0 P1 M2 .\nM0 P1 M3 .\nM0 P1 M4 .\nM0 P1 M5 .\nM0 P2 M1 .\nM0 P2 M2 .\nM0 P2 M3 .\nM0 P2 M4 .\nM0 P2 M5 .\nM0 P3 M1 .\nM0 P3 M2 .\nM0 P3 M3 .\nM0 P3 M4 .\nM0 P3 M5\n}",
        "expectedResponse": "Yes",
        "recursionDepth": 42
    },
    {
        "questionIdx": 37732,
        "questionWithBrackets": "Did a person executive produce, write, edit, and produce [Franklin's Magic Christmas], [Rick's Canoe], and [The Fifth Wall]",
        "questionPatternModEntities": "Did a person executive produce , write , edit , and produce M1 , M2 , and M3",
        "questionTemplate": "Did a [NP_SIMPLE] [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] [entity] , [entity] , and [entity]",
        "sparql": "SELECT count(*) WHERE {\n?x0 a ns:people.person .\n?x0 ns:film.editor.film ns:m.0_2zrgs .\n?x0 ns:film.editor.film ns:m.0b737f .\n?x0 ns:film.editor.film ns:m.0zvz2b2 .\n?x0 ns:film.producer.films_executive_produced ns:m.0_2zrgs .\n?x0 ns:film.producer.films_executive_produced ns:m.0b737f .\n?x0 ns:film.producer.films_executive_produced ns:m.0zvz2b2 .\n?x0 ns:film.producer.film|ns:film.production_company.films ns:m.0_2zrgs .\n?x0 ns:film.producer.film|ns:film.production_company.films ns:m.0b737f .\n?x0 ns:film.producer.film|ns:film.production_company.films ns:m.0zvz2b2 .\n?x0 ns:film.writer.film ns:m.0_2zrgs .\n?x0 ns:film.writer.film ns:m.0b737f .\n?x0 ns:film.writer.film ns:m.0zvz2b2\n}",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P0 M3 .\n?x0 P1 M1 .\n?x0 P1 M2 .\n?x0 P1 M3 .\n?x0 P2 M1 .\n?x0 P2 M2 .\n?x0 P2 M3 .\n?x0 P3 M1 .\n?x0 P3 M2 .\n?x0 P3 M3 .\n?x0 a M0\n}",
        "expectedResponse": "No",
        "recursionDepth": 42
    },
    {
        "questionIdx": 11535,
        "questionWithBrackets": "Did [Joel Coen] and [Ethan Coen] edit, write, produce, and direct [True Grit], [The Man Who Wasn't There], and [Burn After Reading]",
        "questionPatternModEntities": "Did M0 and M4 edit , write , produce , and direct M1 , M2 , and M3",
        "questionTemplate": "Did [entity] and [entity] [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] [entity] , [entity] , and [entity]",
        "sparql": "SELECT count(*) WHERE {\nns:m.02kxbwx ns:film.director.film ns:m.01jzyf .\nns:m.02kxbwx ns:film.director.film ns:m.02704ff .\nns:m.02kxbwx ns:film.director.film ns:m.0b73_1d .\nns:m.02kxbwx ns:film.editor.film ns:m.01jzyf .\nns:m.02kxbwx ns:film.editor.film ns:m.02704ff .\nns:m.02kxbwx ns:film.editor.film ns:m.0b73_1d .\nns:m.02kxbwx ns:film.producer.film|ns:film.production_company.films ns:m.01jzyf .\nns:m.02kxbwx ns:film.producer.film|ns:film.production_company.films ns:m.02704ff .\nns:m.02kxbwx ns:film.producer.film|ns:film.production_company.films ns:m.0b73_1d .\nns:m.02kxbwx ns:film.writer.film ns:m.01jzyf .\nns:m.02kxbwx ns:film.writer.film ns:m.02704ff .\nns:m.02kxbwx ns:film.writer.film ns:m.0b73_1d .\nns:m.02kxbx3 ns:film.director.film ns:m.01jzyf .\nns:m.02kxbx3 ns:film.director.film ns:m.02704ff .\nns:m.02kxbx3 ns:film.director.film ns:m.0b73_1d .\nns:m.02kxbx3 ns:film.editor.film ns:m.01jzyf .\nns:m.02kxbx3 ns:film.editor.film ns:m.02704ff .\nns:m.02kxbx3 ns:film.editor.film ns:m.0b73_1d .\nns:m.02kxbx3 ns:film.producer.film|ns:film.production_company.films ns:m.01jzyf .\nns:m.02kxbx3 ns:film.producer.film|ns:film.production_company.films ns:m.02704ff .\nns:m.02kxbx3 ns:film.producer.film|ns:film.production_company.films ns:m.0b73_1d .\nns:m.02kxbx3 ns:film.writer.film ns:m.01jzyf .\nns:m.02kxbx3 ns:film.writer.film ns:m.02704ff .\nns:m.02kxbx3 ns:film.writer.film ns:m.0b73_1d\n}",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P0 M3 .\nM0 P1 M1 .\nM0 P1 M2 .\nM0 P1 M3 .\nM0 P2 M1 .\nM0 P2 M2 .\nM0 P2 M3 .\nM0 P3 M1 .\nM0 P3 M2 .\nM0 P3 M3 .\nM4 P0 M1 .\nM4 P0 M2 .\nM4 P0 M3 .\nM4 P1 M1 .\nM4 P1 M2 .\nM4 P1 M3 .\nM4 P2 M1 .\nM4 P2 M2 .\nM4 P2 M3 .\nM4 P3 M1 .\nM4 P3 M2 .\nM4 P3 M3\n}",
        "expectedResponse": "Yes",
        "recursionDepth": 42
    },
    {
        "questionIdx": 19426,
        "questionWithBrackets": "Did [Someone Like Me]'s editor executive produce, direct, produce, and edit [Believe: The Misfit Pawn], [It's Not About the Shawerma], and [White Stork Is Coming]",
        "questionPatternModEntities": "Did M3 's editor executive produce , direct , produce , and edit M0 , M1 , and M2",
        "questionTemplate": "Did [entity] 's [ROLE_SIMPLE] [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] [entity] , [entity] , and [entity]",
        "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.director.film ns:m.0hmwbzh .\n?x0 ns:film.director.film ns:m.0zxyz5j .\n?x0 ns:film.director.film ns:m.0zztylq .\n?x0 ns:film.editor.film ns:m.0hmwbzh .\n?x0 ns:film.editor.film ns:m.0zgtvfg .\n?x0 ns:film.editor.film ns:m.0zxyz5j .\n?x0 ns:film.editor.film ns:m.0zztylq .\n?x0 ns:film.producer.films_executive_produced ns:m.0hmwbzh .\n?x0 ns:film.producer.films_executive_produced ns:m.0zxyz5j .\n?x0 ns:film.producer.films_executive_produced ns:m.0zztylq .\n?x0 ns:film.producer.film|ns:film.production_company.films ns:m.0hmwbzh .\n?x0 ns:film.producer.film|ns:film.production_company.films ns:m.0zxyz5j .\n?x0 ns:film.producer.film|ns:film.production_company.films ns:m.0zztylq\n}",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P0 M3 .\n?x0 P1 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\n?x0 P2 M0 .\n?x0 P2 M1 .\n?x0 P2 M2 .\n?x0 P3 M0 .\n?x0 P3 M1 .\n?x0 P3 M2\n}",
        "expectedResponse": "No",
        "recursionDepth": 43
    },
    {
        "questionIdx": 53903,
        "questionWithBrackets": "Was [Em] executive produced by [Rohit Khattar], [Greg Strasburg], [Deborah Y. Lau], [Anthony Buckner], [Ron Bozman], and [Stewart Till] and produced by a costume designer",
        "questionPatternModEntities": "Was M1 executive produced by M2 , M3 , M4 , M5 , M6 , and M7 and produced by a costume designer",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] , [entity] , [entity] , [entity] , [entity] , and [entity] and [VP_SIMPLE] by a [NP_SIMPLE]",
        "sparql": "SELECT count(*) WHERE {\n?x0 a ns:film.film_costumer_designer .\nns:m.04p2fyv ns:film.film.executive_produced_by ns:m.097q7c .\nns:m.04p2fyv ns:film.film.executive_produced_by ns:m.0cpm0vh .\nns:m.04p2fyv ns:film.film.executive_produced_by ns:m.0fq6sll .\nns:m.04p2fyv ns:film.film.executive_produced_by ns:m.0g5rc6k .\nns:m.04p2fyv ns:film.film.executive_produced_by ns:m.0j_wjj .\nns:m.04p2fyv ns:film.film.executive_produced_by ns:m.0k0mr5 .\nns:m.04p2fyv ns:film.film.produced_by|ns:film.film.production_companies ?x0\n}",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 a M0 .\nM1 P0 M2 .\nM1 P0 M3 .\nM1 P0 M4 .\nM1 P0 M5 .\nM1 P0 M6 .\nM1 P0 M7 .\nM1 P1 ?x0\n}",
        "expectedResponse": "No",
        "recursionDepth": 43
    },
    {
        "questionIdx": 36563,
        "questionWithBrackets": "Did a founder and employee of [LucasArts], [Lucasfilm], [Industrial Light & Magic], and [American Zoetrope] edit [1:42.08] and edit [Return of the Jedi]",
        "questionPatternModEntities": "Did a founder and employee of M2 , M3 , M4 , and M5 edit M0 and edit M1",
        "questionTemplate": "Did a [ROLE_SIMPLE] and [ROLE_SIMPLE] of [entity] , [entity] , [entity] , and [entity] [VP_SIMPLE] [entity] and [VP_SIMPLE] [entity]",
        "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.editor.film ns:m.0ddjy .\n?x0 ns:film.editor.film ns:m.0f23mr .\n?x0 ns:organization.organization_founder.organizations_founded ns:m.01813n .\n?x0 ns:organization.organization_founder.organizations_founded ns:m.02jd_7 .\n?x0 ns:organization.organization_founder.organizations_founded ns:m.04kqk .\n?x0 ns:organization.organization_founder.organizations_founded ns:m.0kx4m .\n?x0 ns:people.person.employment_history/ns:business.employment_tenure.company ns:m.01813n .\n?x0 ns:people.person.employment_history/ns:business.employment_tenure.company ns:m.02jd_7 .\n?x0 ns:people.person.employment_history/ns:business.employment_tenure.company ns:m.04kqk .\n?x0 ns:people.person.employment_history/ns:business.employment_tenure.company ns:m.0kx4m\n}",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P1 M2 .\n?x0 P1 M3 .\n?x0 P1 M4 .\n?x0 P1 M5 .\n?x0 P2 M2 .\n?x0 P2 M3 .\n?x0 P2 M4 .\n?x0 P2 M5\n}",
        "expectedResponse": "Yes",
        "recursionDepth": 43
    },
    {
        "questionIdx": 111042,
        "questionWithBrackets": "Was [\u00c0lex Lora] a person that [Godka Cirka], [Odysseus' Gambit], and [(Buried) Over the Roofs] were edited by, directed by, and executive produced by",
        "questionPatternModEntities": "Was M0 a person that M2 , M3 , and M4 were edited by , directed by , and executive produced by",
        "questionTemplate": "Was [entity] a [NP_SIMPLE] that [entity] , [entity] , and [entity] were [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by",
        "sparql": "SELECT count(*) WHERE {\nns:m.0j8f5v_ a ns:people.person .\nns:m.0j8f5v_ ns:film.director.film ns:m.0_9x6my .\nns:m.0j8f5v_ ns:film.director.film ns:m.0j8f5vp .\nns:m.0j8f5v_ ns:film.director.film ns:m.0qsdrdt .\nns:m.0j8f5v_ ns:film.editor.film ns:m.0_9x6my .\nns:m.0j8f5v_ ns:film.editor.film ns:m.0j8f5vp .\nns:m.0j8f5v_ ns:film.editor.film ns:m.0qsdrdt .\nns:m.0j8f5v_ ns:film.producer.films_executive_produced ns:m.0_9x6my .\nns:m.0j8f5v_ ns:film.producer.films_executive_produced ns:m.0j8f5vp .\nns:m.0j8f5v_ ns:film.producer.films_executive_produced ns:m.0qsdrdt\n}",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M2 .\nM0 P0 M3 .\nM0 P0 M4 .\nM0 P1 M2 .\nM0 P1 M3 .\nM0 P1 M4 .\nM0 P2 M2 .\nM0 P2 M3 .\nM0 P2 M4 .\nM0 a M1\n}",
        "expectedResponse": "Yes",
        "recursionDepth": 43
    },
    {
        "questionIdx": 208961,
        "questionWithBrackets": "Which prequel of [Facing the Giants] was directed by, starred, was executive produced by, and was produced by [Alex Kendrick]",
        "questionPatternModEntities": "Which prequel of M0 was directed by , starred , was executive produced by , and was produced by M1",
        "questionTemplate": "Which [ROLE_SIMPLE] of [entity] was [VP_SIMPLE] by , [VP_SIMPLE] , was [VP_SIMPLE] by , and was [VP_SIMPLE] by [entity]",
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.film.directed_by ns:m.027zpfp .\n?x0 ns:film.film.executive_produced_by ns:m.027zpfp .\n?x0 ns:film.film.produced_by|ns:film.film.production_companies ns:m.027zpfp .\n?x0 ns:film.film.sequel ns:m.0dyrhk .\n?x0 ns:film.film.starring/ns:film.performance.actor ns:m.027zpfp\n}",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P2 M1 .\n?x0 P3 M1 .\n?x0 P4 M1\n}",
        "expectedResponse": "Flywheel",
        "recursionDepth": 43
    },
    {
        "questionIdx": 209351,
        "questionWithBrackets": "Which prequel of a film was directed, produced, written, edited, and executive produced by [Alan Becker]",
        "questionPatternModEntities": "Which prequel of a film was directed , produced , written , edited , and executive produced by M0",
        "questionTemplate": "Which [ROLE_SIMPLE] of a [NP_SIMPLE] was [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by [entity]",
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.film.directed_by ns:m.0108mkjv .\n?x0 ns:film.film.edited_by ns:m.0108mkjv .\n?x0 ns:film.film.executive_produced_by ns:m.0108mkjv .\n?x0 ns:film.film.produced_by|ns:film.film.production_companies ns:m.0108mkjv .\n?x0 ns:film.film.sequel ?x1 .\n?x0 ns:film.film.written_by ns:m.0108mkjv .\n?x1 a ns:film.film\n}",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 M0 .\n?x0 P2 M0 .\n?x0 P3 M0 .\n?x0 P4 M0 .\n?x0 P5 M0 .\n?x1 a M1\n}",
        "expectedResponse": "Animation vs. Animator 1; Animator vs Animation 2",
        "recursionDepth": 43
    },
    {
        "questionIdx": 42607,
        "questionWithBrackets": "Did an employee of [Essanay Studios] direct, produce, write, and edit [Nerd-B-Gone], [A Day's Pleasure], and [The Adventurer]",
        "questionPatternModEntities": "Did a employee of M3 direct , produce , write , and edit M0 , M1 , and M2",
        "questionTemplate": "Did a [ROLE_SIMPLE] of [entity] [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] [entity] , [entity] , and [entity]",
        "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.director.film ns:m.04vxyfg .\n?x0 ns:film.director.film ns:m.07mll4 .\n?x0 ns:film.director.film ns:m.08kf7t .\n?x0 ns:film.editor.film ns:m.04vxyfg .\n?x0 ns:film.editor.film ns:m.07mll4 .\n?x0 ns:film.editor.film ns:m.08kf7t .\n?x0 ns:film.producer.film|ns:film.production_company.films ns:m.04vxyfg .\n?x0 ns:film.producer.film|ns:film.production_company.films ns:m.07mll4 .\n?x0 ns:film.producer.film|ns:film.production_company.films ns:m.08kf7t .\n?x0 ns:film.writer.film ns:m.04vxyfg .\n?x0 ns:film.writer.film ns:m.07mll4 .\n?x0 ns:film.writer.film ns:m.08kf7t .\n?x0 ns:people.person.employment_history/ns:business.employment_tenure.company ns:m.019wv3\n}",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P1 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\n?x0 P2 M3 .\n?x0 P3 M0 .\n?x0 P3 M1 .\n?x0 P3 M2 .\n?x0 P4 M0 .\n?x0 P4 M1 .\n?x0 P4 M2\n}",
        "expectedResponse": "No",
        "recursionDepth": 44
    },
    {
        "questionIdx": 163653,
        "questionWithBrackets": "What producer, star, executive producer, writer, art director, and director of [CZ12] produced [The Accidental Spy], [Jackie Chan: My Story], and [Gorgeous]",
        "questionPatternModEntities": "What producer , star , executive producer , writer , art director , and director of M0 produced M1 , M2 , and M3",
        "questionTemplate": "What [ROLE_SIMPLE] , [ROLE_SIMPLE] , [ROLE_SIMPLE] , [ROLE_SIMPLE] , [ROLE_SIMPLE] , and [ROLE_SIMPLE] of [entity] [VP_SIMPLE] [entity] , [entity] , and [entity]",
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.actor.film/ns:film.performance.film ns:m.0hznzl6 .\n?x0 ns:film.director.film ns:m.0hznzl6 .\n?x0 ns:film.film_art_director.films_art_directed ns:m.0hznzl6 .\n?x0 ns:film.producer.films_executive_produced ns:m.0hznzl6 .\n?x0 ns:film.producer.film|ns:film.production_company.films ns:m.03r2rh .\n?x0 ns:film.producer.film|ns:film.production_company.films ns:m.06t384 .\n?x0 ns:film.producer.film|ns:film.production_company.films ns:m.0hznzl6 .\n?x0 ns:film.producer.film|ns:film.production_company.films ns:m.0w0wz_2 .\n?x0 ns:film.writer.film ns:m.0hznzl6\n}",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M0 .\n?x0 P2 M0 .\n?x0 P2 M1 .\n?x0 P2 M2 .\n?x0 P2 M3 .\n?x0 P3 M0 .\n?x0 P4 M0 .\n?x0 P5 M0\n}",
        "expectedResponse": "Jackie Chan",
        "recursionDepth": 44
    },
    {
        "questionIdx": 152923,
        "questionWithBrackets": "What employee and founder of [America's Best Comics] was influenced by [Thomas Pynchon], [Arthur Machen], and [Robert Anton Wilson] and influenced by [H. G. Wells] and [Bertolt Brecht]",
        "questionPatternModEntities": "What employee and founder of M0 was influenced by M1 , M2 , and M3 and influenced by M4 and M5",
        "questionTemplate": "What [ROLE_SIMPLE] and [ROLE_SIMPLE] of [entity] was [VP_SIMPLE] by [entity] , [entity] , and [entity] and [VP_SIMPLE] by [entity] and [entity]",
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:influence.influence_node.influenced_by ns:m.017r2 .\n?x0 ns:influence.influence_node.influenced_by ns:m.03hnd .\n?x0 ns:influence.influence_node.influenced_by ns:m.06hgj .\n?x0 ns:influence.influence_node.influenced_by ns:m.07lp1 .\n?x0 ns:influence.influence_node.influenced_by ns:m.09jyp .\n?x0 ns:organization.organization_founder.organizations_founded ns:m.08fyv6 .\n?x0 ns:people.person.employment_history/ns:business.employment_tenure.company ns:m.08fyv6\n}",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M0 .\n?x0 P2 M1 .\n?x0 P2 M2 .\n?x0 P2 M3 .\n?x0 P2 M4 .\n?x0 P2 M5\n}",
        "expectedResponse": "Alan Moore",
        "recursionDepth": 44
    },
    {
        "questionIdx": 233457,
        "questionWithBrackets": "Who was an Italian film producer that [Edilnord], [Telemilano], [Cantieri Reuniti Milanesi], and [Fininvest] were founded by and employed",
        "questionPatternModEntities": "Who was a Italian film producer that M2 , M3 , M4 , and M5 were founded by and employed",
        "questionTemplate": "Who was a [ADJECTIVE_SIMPLE] [NP_SIMPLE] that [entity] , [entity] , [entity] , and [entity] were [VP_SIMPLE] by and [VP_SIMPLE]",
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:film.producer .\n?x0 a ns:people.person .\n?x0 ns:organization.organization_founder.organizations_founded ns:m.04fgkqk .\n?x0 ns:organization.organization_founder.organizations_founded ns:m.04fgl9w .\n?x0 ns:organization.organization_founder.organizations_founded ns:m.04fglb2 .\n?x0 ns:organization.organization_founder.organizations_founded ns:m.05w6sj .\n?x0 ns:people.person.employment_history/ns:business.employment_tenure.company ns:m.04fgkqk .\n?x0 ns:people.person.employment_history/ns:business.employment_tenure.company ns:m.04fgl9w .\n?x0 ns:people.person.employment_history/ns:business.employment_tenure.company ns:m.04fglb2 .\n?x0 ns:people.person.employment_history/ns:business.employment_tenure.company ns:m.05w6sj .\n?x0 ns:people.person.nationality ns:m.03rjj\n}",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M2 .\n?x0 P0 M3 .\n?x0 P0 M4 .\n?x0 P0 M5 .\n?x0 P1 M2 .\n?x0 P1 M3 .\n?x0 P1 M4 .\n?x0 P1 M5 .\n?x0 P2 M6 .\n?x0 a M0 .\n?x0 a M1\n}",
        "expectedResponse": "Silvio Berlusconi",
        "recursionDepth": 44
    },
    {
        "questionIdx": 49941,
        "questionWithBrackets": "Was [Charlie Chaplin] a film producer that [A Burlesque on Carmen], [The Rounders], and [A Jitney Elopement] were directed by, were edited by, and starred",
        "questionPatternModEntities": "Was M0 a film producer that M2 , M3 , and M4 were directed by , were edited by , and starred",
        "questionTemplate": "Was [entity] a [NP_SIMPLE] that [entity] , [entity] , and [entity] were [VP_SIMPLE] by , were [VP_SIMPLE] by , and [VP_SIMPLE]",
        "sparql": "SELECT count(*) WHERE {\nns:m.01lc5 a ns:film.producer .\nns:m.01lc5 ns:film.actor.film/ns:film.performance.film ns:m.028ccyx .\nns:m.01lc5 ns:film.actor.film/ns:film.performance.film ns:m.07m2v9 .\nns:m.01lc5 ns:film.actor.film/ns:film.performance.film ns:m.07n2_l .\nns:m.01lc5 ns:film.director.film ns:m.028ccyx .\nns:m.01lc5 ns:film.director.film ns:m.07m2v9 .\nns:m.01lc5 ns:film.director.film ns:m.07n2_l .\nns:m.01lc5 ns:film.editor.film ns:m.028ccyx .\nns:m.01lc5 ns:film.editor.film ns:m.07m2v9 .\nns:m.01lc5 ns:film.editor.film ns:m.07n2_l\n}",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M2 .\nM0 P0 M3 .\nM0 P0 M4 .\nM0 P1 M2 .\nM0 P1 M3 .\nM0 P1 M4 .\nM0 P2 M2 .\nM0 P2 M3 .\nM0 P2 M4 .\nM0 a M1\n}",
        "expectedResponse": "Yes",
        "recursionDepth": 44
    },
    {
        "questionIdx": 18062,
        "questionWithBrackets": "Did [Rick Schmidt] produce, executive produce, write, edit, and direct [White Stork Is Coming], [The Fifth Wall], and [It's Not About the Shawerma]",
        "questionPatternModEntities": "Did M0 produce , executive produce , write , edit , and direct M1 , M2 , and M3",
        "questionTemplate": "Did [entity] [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] [entity] , [entity] , and [entity]",
        "sparql": "SELECT count(*) WHERE {\nns:m.0bvc29q ns:film.director.film ns:m.0_2zrgs .\nns:m.0bvc29q ns:film.director.film ns:m.0zxyz5j .\nns:m.0bvc29q ns:film.director.film ns:m.0zztylq .\nns:m.0bvc29q ns:film.editor.film ns:m.0_2zrgs .\nns:m.0bvc29q ns:film.editor.film ns:m.0zxyz5j .\nns:m.0bvc29q ns:film.editor.film ns:m.0zztylq .\nns:m.0bvc29q ns:film.producer.films_executive_produced ns:m.0_2zrgs .\nns:m.0bvc29q ns:film.producer.films_executive_produced ns:m.0zxyz5j .\nns:m.0bvc29q ns:film.producer.films_executive_produced ns:m.0zztylq .\nns:m.0bvc29q ns:film.producer.film|ns:film.production_company.films ns:m.0_2zrgs .\nns:m.0bvc29q ns:film.producer.film|ns:film.production_company.films ns:m.0zxyz5j .\nns:m.0bvc29q ns:film.producer.film|ns:film.production_company.films ns:m.0zztylq .\nns:m.0bvc29q ns:film.writer.film ns:m.0_2zrgs .\nns:m.0bvc29q ns:film.writer.film ns:m.0zxyz5j .\nns:m.0bvc29q ns:film.writer.film ns:m.0zztylq\n}",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P0 M3 .\nM0 P1 M1 .\nM0 P1 M2 .\nM0 P1 M3 .\nM0 P2 M1 .\nM0 P2 M2 .\nM0 P2 M3 .\nM0 P3 M1 .\nM0 P3 M2 .\nM0 P3 M3 .\nM0 P4 M1 .\nM0 P4 M2 .\nM0 P4 M3\n}",
        "expectedResponse": "Yes",
        "recursionDepth": 45
    },
    {
        "questionIdx": 18000,
        "questionWithBrackets": "Did [Rick Schmidt] edit, executive produce, write, produce, and direct [Rick's Canoe], [The Fifth Wall], and [It's Not About the Shawerma]",
        "questionPatternModEntities": "Did M0 edit , executive produce , write , produce , and direct M1 , M2 , and M3",
        "questionTemplate": "Did [entity] [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] [entity] , [entity] , and [entity]",
        "sparql": "SELECT count(*) WHERE {\nns:m.0bvc29q ns:film.director.film ns:m.0_2zrgs .\nns:m.0bvc29q ns:film.director.film ns:m.0zvz2b2 .\nns:m.0bvc29q ns:film.director.film ns:m.0zztylq .\nns:m.0bvc29q ns:film.editor.film ns:m.0_2zrgs .\nns:m.0bvc29q ns:film.editor.film ns:m.0zvz2b2 .\nns:m.0bvc29q ns:film.editor.film ns:m.0zztylq .\nns:m.0bvc29q ns:film.producer.films_executive_produced ns:m.0_2zrgs .\nns:m.0bvc29q ns:film.producer.films_executive_produced ns:m.0zvz2b2 .\nns:m.0bvc29q ns:film.producer.films_executive_produced ns:m.0zztylq .\nns:m.0bvc29q ns:film.producer.film|ns:film.production_company.films ns:m.0_2zrgs .\nns:m.0bvc29q ns:film.producer.film|ns:film.production_company.films ns:m.0zvz2b2 .\nns:m.0bvc29q ns:film.producer.film|ns:film.production_company.films ns:m.0zztylq .\nns:m.0bvc29q ns:film.writer.film ns:m.0_2zrgs .\nns:m.0bvc29q ns:film.writer.film ns:m.0zvz2b2 .\nns:m.0bvc29q ns:film.writer.film ns:m.0zztylq\n}",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P0 M3 .\nM0 P1 M1 .\nM0 P1 M2 .\nM0 P1 M3 .\nM0 P2 M1 .\nM0 P2 M2 .\nM0 P2 M3 .\nM0 P3 M1 .\nM0 P3 M2 .\nM0 P3 M3 .\nM0 P4 M1 .\nM0 P4 M2 .\nM0 P4 M3\n}",
        "expectedResponse": "Yes",
        "recursionDepth": 45
    },
    {
        "questionIdx": 193072,
        "questionWithBrackets": "Which actor that [Ferestadeh] and [Samad dar rah ejdeha] were executive produced by, were edited by, and starred played [Asdallah Mirza]",
        "questionPatternModEntities": "Which actor that M0 and M1 were executive produced by , were edited by , and starred played M2",
        "questionTemplate": "Which [NP_SIMPLE] that [entity] and [entity] were [VP_SIMPLE] by , were [VP_SIMPLE] by , and [VP_SIMPLE] [VP_SIMPLE] [entity]",
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.actor.film/ns:film.performance.character ns:m.0b3rscv .\n?x0 ns:film.actor.film/ns:film.performance.film ns:g.121_c37n .\n?x0 ns:film.actor.film/ns:film.performance.film ns:m.0b3rv5d .\n?x0 ns:film.editor.film ns:g.121_c37n .\n?x0 ns:film.editor.film ns:m.0b3rv5d .\n?x0 ns:film.producer.films_executive_produced ns:g.121_c37n .\n?x0 ns:film.producer.films_executive_produced ns:m.0b3rv5d\n}",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P1 M0 .\n?x0 P1 M1 .\n?x0 P2 M0 .\n?x0 P2 M1 .\n?x0 P3 M2\n}",
        "expectedResponse": "Parviz Sayyad",
        "recursionDepth": 45
    },
    {
        "questionIdx": 9630,
        "questionWithBrackets": "Did [Henry Miller] marry [Eve McClure], marry [Janina Martha Lepska], [Beatrice Sylvas Wickens], and [June Miller], and influence [Barry Hannah], [Paulo Coelho], and [Vitomil Zupan]",
        "questionPatternModEntities": "Did M0 marry M4 , marry M5 , M6 , and M7 , and influence M1 , M2 , and M3",
        "questionTemplate": "Did [entity] [VP_SIMPLE] [entity] , [VP_SIMPLE] [entity] , [entity] , and [entity] , and [VP_SIMPLE] [entity] , [entity] , and [entity]",
        "sparql": "SELECT count(*) WHERE {\nFILTER ( ns:m.0g_2k != ns:m.059vf3z ) .\nFILTER ( ns:m.0g_2k != ns:m.059vf4c ) .\nFILTER ( ns:m.0g_2k != ns:m.07ycj_ ) .\nFILTER ( ns:m.0g_2k != ns:m.0j551kv ) .\nns:m.0g_2k ns:influence.influence_node.influenced ns:m.0414rk7 .\nns:m.0g_2k ns:influence.influence_node.influenced ns:m.0h5c6 .\nns:m.0g_2k ns:influence.influence_node.influenced ns:m.0hb3r .\nns:m.0g_2k ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ns:m.059vf3z .\nns:m.0g_2k ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ns:m.059vf4c .\nns:m.0g_2k ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ns:m.07ycj_ .\nns:m.0g_2k ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ns:m.0j551kv\n}",
        "sparqlPattern": "SELECT count(*) WHERE {\nFILTER ( M0 != M4 ) .\nFILTER ( M0 != M5 ) .\nFILTER ( M0 != M6 ) .\nFILTER ( M0 != M7 ) .\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P0 M3 .\nM0 P1 M4 .\nM0 P1 M5 .\nM0 P1 M6 .\nM0 P1 M7\n}",
        "expectedResponse": "Yes",
        "recursionDepth": 45
    },
    {
        "questionIdx": 190745,
        "questionWithBrackets": "Which Japanese actor of [Devil Count] and [Kikai Hakushaku] played [Black-Suited Commander], played [Professor Ramses], and played [Goldias]",
        "questionPatternModEntities": "Which Japanese actor of M1 and M2 played M3 , played M4 , and played M5",
        "questionTemplate": "Which [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] and [entity] [VP_SIMPLE] [entity] , [VP_SIMPLE] [entity] , and [VP_SIMPLE] [entity]",
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.actor.film/ns:film.performance.character ns:m.0j8p59z .\n?x0 ns:film.actor.film/ns:film.performance.character ns:m.0mz77t5 .\n?x0 ns:film.actor.film/ns:film.performance.character ns:m.0ngvt7t .\n?x0 ns:film.actor.film/ns:film.performance.character ns:m.0nhl47z .\n?x0 ns:film.actor.film/ns:film.performance.character ns:m.0pl_mgq .\n?x0 ns:people.person.nationality ns:m.03_3d\n}",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\n?x0 P1 M3 .\n?x0 P1 M4 .\n?x0 P1 M5\n}",
        "expectedResponse": "Hidekatsu Shibata",
        "recursionDepth": 45
    },
    {
        "questionIdx": 55373,
        "questionWithBrackets": "Was [Four Christmases] written by [Naruki Nagakawa], executive produced by [K\u014dz\u014d Morishita], [Bonnie Ross], [John Ledford], and [Mitsuhisa Ishikawa], and produced by a production company",
        "questionPatternModEntities": "Was M1 written by M6 , executive produced by M2 , M3 , M4 , and M5 , and produced by a production company",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , [entity] , [entity] , and [entity] , and [VP_SIMPLE] by a [NP_SIMPLE]",
        "sparql": "SELECT count(*) WHERE {\n?x0 a ns:film.production_company .\nns:m.03gttvn ns:film.film.executive_produced_by ns:m.010q_m91 .\nns:m.03gttvn ns:film.film.executive_produced_by ns:m.054vsc .\nns:m.03gttvn ns:film.film.executive_produced_by ns:m.06znf14 .\nns:m.03gttvn ns:film.film.executive_produced_by ns:m.0jx284 .\nns:m.03gttvn ns:film.film.produced_by|ns:film.film.production_companies ?x0 .\nns:m.03gttvn ns:film.film.written_by ns:g.1218rxyw\n}",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 a M0 .\nM1 P0 M2 .\nM1 P0 M3 .\nM1 P0 M4 .\nM1 P0 M5 .\nM1 P1 M6 .\nM1 P2 ?x0\n}",
        "expectedResponse": "No",
        "recursionDepth": 46
    },
    {
        "questionIdx": 139746,
        "questionWithBrackets": "What cinematographer that [Skywalker Sound] and [Lucasfilm] employed and were founded by did [Frank Herbert], [Joseph Campbell], [Christopher Lee], and [Francis Ford Coppola] influence",
        "questionPatternModEntities": "What cinematographer that M1 and M2 employed and were founded by did M3 , M4 , M5 , and M6 influence",
        "questionTemplate": "What [NP_SIMPLE] that [entity] and [entity] [VP_SIMPLE] and were [VP_SIMPLE] by did [entity] , [entity] , [entity] , and [entity] [VP_SIMPLE]",
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:film.cinematographer .\n?x0 ns:influence.influence_node.influenced_by ns:m.02vyw .\n?x0 ns:influence.influence_node.influenced_by ns:m.02xyl .\n?x0 ns:influence.influence_node.influenced_by ns:m.0453t .\n?x0 ns:influence.influence_node.influenced_by ns:m.0f0kz .\n?x0 ns:organization.organization_founder.organizations_founded ns:m.01hy7c .\n?x0 ns:organization.organization_founder.organizations_founded ns:m.0kx4m .\n?x0 ns:people.person.employment_history/ns:business.employment_tenure.company ns:m.01hy7c .\n?x0 ns:people.person.employment_history/ns:business.employment_tenure.company ns:m.0kx4m\n}",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P1 M1 .\n?x0 P1 M2 .\n?x0 P2 M3 .\n?x0 P2 M4 .\n?x0 P2 M5 .\n?x0 P2 M6 .\n?x0 a M0\n}",
        "expectedResponse": "George Lucas",
        "recursionDepth": 46
    },
    {
        "questionIdx": 176931,
        "questionWithBrackets": "What was executive produced by [Michael Benaroya], [Jan Korbelin], and [Pamela Hirsch], written by [Tristan Carn\u00e9] and [Shunji Twai], and produced by a company",
        "questionPatternModEntities": "What was executive produced by M0 , M1 , and M2 , written by M3 and M4 , and produced by a company",
        "questionTemplate": "What was [VP_SIMPLE] by [entity] , [entity] , and [entity] , [VP_SIMPLE] by [entity] and [entity] , and [VP_SIMPLE] by a [NP_SIMPLE]",
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.film.executive_produced_by ns:m.07ys6wv .\n?x0 ns:film.film.executive_produced_by ns:m.08lg43g .\n?x0 ns:film.film.executive_produced_by ns:m.08lg442 .\n?x0 ns:film.film.produced_by|ns:film.film.production_companies ?x1 .\n?x0 ns:film.film.written_by ns:m.026p9l .\n?x0 ns:film.film.written_by ns:m.0tlq4mw .\n?x1 a ns:business.employer\n}",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P1 M3 .\n?x0 P1 M4 .\n?x0 P2 ?x1 .\n?x1 a M5\n}",
        "expectedResponse": "New York, I Love You",
        "recursionDepth": 46
    },
    {
        "questionIdx": 79259,
        "questionWithBrackets": "Was [The ABCs of Death] written by [Lee Hardcastle], edited by [Takanori Tsujimoto], [Y\u016bdai Yamaguchi], and [Phillip Blackford], and edited by [Greg Ng], [Ernesto D\u00edaz Espinoza], and [Adri\u00e1n Garc\u00eda Bogliano]",
        "questionPatternModEntities": "Was M0 written by M1 , edited by M2 , M3 , and M4 , and edited by M5 , M6 , and M7",
        "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , [entity] , and [entity] , and [VP_SIMPLE] by [entity] , [entity] , and [entity]",
        "sparql": "SELECT count(*) WHERE {\nns:m.0j7n68k ns:film.film.edited_by ns:m.07s5hfk .\nns:m.0j7n68k ns:film.film.edited_by ns:m.0dxfmbb .\nns:m.0j7n68k ns:film.film.edited_by ns:m.0dxfsh0 .\nns:m.0j7n68k ns:film.film.edited_by ns:m.0f137tr .\nns:m.0j7n68k ns:film.film.edited_by ns:m.0gblx2c .\nns:m.0j7n68k ns:film.film.edited_by ns:m.0h5z5np .\nns:m.0j7n68k ns:film.film.written_by ns:m.0k_3p2d\n}",
        "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M2 .\nM0 P1 M3 .\nM0 P1 M4 .\nM0 P1 M5 .\nM0 P1 M6 .\nM0 P1 M7\n}",
        "expectedResponse": "Yes",
        "recursionDepth": 46
    },
    {
        "questionIdx": 35125,
        "questionWithBrackets": "Did a film producer's founder and employee edit [Dogma] and edit [Red State], [Clerks II], [Chasing Amy], [The Flying Car], and [Clerks]",
        "questionPatternModEntities": "Did a film producer 's founder and employee edit M0 and edit M1 , M2 , M3 , M4 , and M5",
        "questionTemplate": "Did a [NP_SIMPLE] 's [ROLE_SIMPLE] and [ROLE_SIMPLE] [VP_SIMPLE] [entity] and [VP_SIMPLE] [entity] , [entity] , [entity] , [entity] , and [entity]",
        "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.editor.film ns:m.01chyt .\n?x0 ns:film.editor.film ns:m.04pygz .\n?x0 ns:film.editor.film ns:m.080b09 .\n?x0 ns:film.editor.film ns:m.0dgrwqr .\n?x0 ns:film.editor.film ns:m.0gd92 .\n?x0 ns:film.editor.film ns:m.0p9lw .\n?x0 ns:organization.organization_founder.organizations_founded ?x1 .\n?x0 ns:people.person.employment_history/ns:business.employment_tenure.company ?x1 .\n?x1 a ns:film.producer\n}",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P0 M3 .\n?x0 P0 M4 .\n?x0 P0 M5 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x1 a M6\n}",
        "expectedResponse": "Yes",
        "recursionDepth": 47
    },
    {
        "questionIdx": 21906,
        "questionWithBrackets": "Did [The Circus]'s producer, editor, director, writer, and star found [Park Road Post] and [Weta Workshop] and found [Wingnut Interactive]",
        "questionPatternModEntities": "Did M0 's producer , editor , director , writer , and star found M1 and M2 and found M3",
        "questionTemplate": "Did [entity] 's [ROLE_SIMPLE] , [ROLE_SIMPLE] , [ROLE_SIMPLE] , [ROLE_SIMPLE] , and [ROLE_SIMPLE] [VP_SIMPLE] [entity] and [entity] and [VP_SIMPLE] [entity]",
        "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.actor.film/ns:film.performance.film ns:m.011_mj .\n?x0 ns:film.director.film ns:m.011_mj .\n?x0 ns:film.editor.film ns:m.011_mj .\n?x0 ns:film.producer.film|ns:film.production_company.films ns:m.011_mj .\n?x0 ns:film.writer.film ns:m.011_mj .\n?x0 ns:organization.organization_founder.organizations_founded ns:m.01cm64 .\n?x0 ns:organization.organization_founder.organizations_founded ns:m.0bz1s5 .\n?x0 ns:organization.organization_founder.organizations_founded ns:m.0kqh8s\n}",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\n?x0 P1 M3 .\n?x0 P2 M0 .\n?x0 P3 M0 .\n?x0 P4 M0 .\n?x0 P5 M0\n}",
        "expectedResponse": "No",
        "recursionDepth": 47
    },
    {
        "questionIdx": 137928,
        "questionWithBrackets": "What art director, cinematographer, and editor of [Tetsuo II: Body Hammer] and [Tetsuo: The Iron Man] edited, directed, and wrote [Tetsuo: The Bullet Man] and [A Snake of June]",
        "questionPatternModEntities": "What art director , cinematographer , and editor of M2 and M3 edited , directed , and wrote M0 and M1",
        "questionTemplate": "What [ROLE_SIMPLE] , [ROLE_SIMPLE] , and [ROLE_SIMPLE] of [entity] and [entity] [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] [entity] and [entity]",
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.cinematographer.film ns:m.05m0x0 .\n?x0 ns:film.cinematographer.film ns:m.0brs6b .\n?x0 ns:film.director.film ns:m.03m9g_y .\n?x0 ns:film.director.film ns:m.06zq889 .\n?x0 ns:film.editor.film ns:m.03m9g_y .\n?x0 ns:film.editor.film ns:m.05m0x0 .\n?x0 ns:film.editor.film ns:m.06zq889 .\n?x0 ns:film.editor.film ns:m.0brs6b .\n?x0 ns:film.film_art_director.films_art_directed ns:m.05m0x0 .\n?x0 ns:film.film_art_director.films_art_directed ns:m.0brs6b .\n?x0 ns:film.writer.film ns:m.03m9g_y .\n?x0 ns:film.writer.film ns:m.06zq889\n}",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P0 M3 .\n?x0 P1 M0 .\n?x0 P1 M1 .\n?x0 P2 M2 .\n?x0 P2 M3 .\n?x0 P3 M2 .\n?x0 P3 M3 .\n?x0 P4 M0 .\n?x0 P4 M1\n}",
        "expectedResponse": "Shinya Tsukamoto",
        "recursionDepth": 47
    },
    {
        "questionIdx": 162661,
        "questionWithBrackets": "What prequel of [Animator vs Animation 2] was edited by, written by, directed by, executive produced by, and produced by a screenwriter",
        "questionPatternModEntities": "What prequel of M0 was edited by , written by , directed by , executive produced by , and produced by a screenwriter",
        "questionTemplate": "What [ROLE_SIMPLE] of [entity] was [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by a [NP_SIMPLE]",
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.film.directed_by ?x1 .\n?x0 ns:film.film.edited_by ?x1 .\n?x0 ns:film.film.executive_produced_by ?x1 .\n?x0 ns:film.film.produced_by|ns:film.film.production_companies ?x1 .\n?x0 ns:film.film.sequel ns:m.0108mkjq .\n?x0 ns:film.film.written_by ?x1 .\n?x1 a ns:film.writer\n}",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x0 P3 ?x1 .\n?x0 P4 ?x1 .\n?x0 P5 ?x1 .\n?x1 a M1\n}",
        "expectedResponse": "Animation vs. Animator 1",
        "recursionDepth": 47
    },
    {
        "questionIdx": 231201,
        "questionWithBrackets": "Who was a male Canadian screenwriter that directed [The Trail of the Tiger] and directed [Terry of the Times], [The Indians Are Coming], and [Elmo the Mighty]",
        "questionPatternModEntities": "Who was a male Canadian screenwriter that directed M4 and directed M5 , M6 , and M7",
        "questionTemplate": "Who was a [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [NP_SIMPLE] that [VP_SIMPLE] [entity] and [VP_SIMPLE] [entity] , [entity] , and [entity]",
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:film.writer .\n?x0 a ns:people.person .\n?x0 ns:film.director.film ns:m.02pvpcr .\n?x0 ns:film.director.film ns:m.02pvplz .\n?x0 ns:film.director.film ns:m.03np3vc .\n?x0 ns:film.director.film ns:m.03qhdyg .\n?x0 ns:people.person.gender ns:m.05zppz .\n?x0 ns:people.person.nationality ns:m.0d060g\n}",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M2 .\n?x0 P1 M3 .\n?x0 P2 M4 .\n?x0 P2 M5 .\n?x0 P2 M6 .\n?x0 P2 M7 .\n?x0 a M0 .\n?x0 a M1\n}",
        "expectedResponse": "Henry MacRae",
        "recursionDepth": 47
    },
    {
        "questionIdx": 165069,
        "questionWithBrackets": "What sequel of [Paris, je t'aime] was written by [Hall Powell], [James C. Strouse], and [Stephen Winter], was executive produced by [Bradford W. Smith], and starred [Carlos Acosta]",
        "questionPatternModEntities": "What sequel of M5 was written by M2 , M3 , and M4 , was executive produced by M1 , and starred M0",
        "questionTemplate": "What [ROLE_SIMPLE] of [entity] was [VP_SIMPLE] by [entity] , [entity] , and [entity] , was [VP_SIMPLE] by [entity] , and [VP_SIMPLE] [entity]",
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.film.executive_produced_by ns:m.08lg42b .\n?x0 ns:film.film.prequel ns:m.0bz3jx .\n?x0 ns:film.film.starring/ns:film.performance.actor ns:m.0cmq6y .\n?x0 ns:film.film.written_by ns:m.02wk_2f .\n?x0 ns:film.film.written_by ns:m.07s8874 .\n?x0 ns:film.film.written_by ns:m.08lftk1\n}",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P2 M2 .\n?x0 P2 M3 .\n?x0 P2 M4 .\n?x0 P3 M5\n}",
        "expectedResponse": "New York, I Love You",
        "recursionDepth": 48
    },
    {
        "questionIdx": 165054,
        "questionWithBrackets": "What sequel of [Paris, je t'aime] was directed by [Randall Balsmeyer], edited by [Jacob Craycroft] and [Affonso Gon\u00e7alves], and written by [Natalie Portman], [Tristan Carn\u00e9], and [Stephen Winter]",
        "questionPatternModEntities": "What sequel of M5 was directed by M6 , edited by M3 and M4 , and written by M0 , M1 , and M2",
        "questionTemplate": "What [ROLE_SIMPLE] of [entity] was [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] and [entity] , and [VP_SIMPLE] by [entity] , [entity] , and [entity]",
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.film.directed_by ns:m.09rqxtd .\n?x0 ns:film.film.edited_by ns:m.08zt54n .\n?x0 ns:film.film.edited_by ns:m.0jsw9s .\n?x0 ns:film.film.prequel ns:m.0bz3jx .\n?x0 ns:film.film.written_by ns:m.08lftk1 .\n?x0 ns:film.film.written_by ns:m.09l3p .\n?x0 ns:film.film.written_by ns:m.0tlq4mw\n}",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P1 M3 .\n?x0 P1 M4 .\n?x0 P2 M5 .\n?x0 P3 M6\n}",
        "expectedResponse": "New York, I Love You",
        "recursionDepth": 48
    },
    {
        "questionIdx": 88486,
        "questionWithBrackets": "Was a Canadian film editor that [Night of the Living Dead] and [Careful] were written by, directed by, and edited by [Cowards Bend the Knee]'s cinematographer",
        "questionPatternModEntities": "Was a Canadian film editor that M1 and M2 were written by , directed by , and edited by M4 's cinematographer",
        "questionTemplate": "Was a [ADJECTIVE_SIMPLE] [NP_SIMPLE] that [entity] and [entity] were [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
        "sparql": "SELECT count(*) WHERE {\n?x0 a ns:film.editor .\n?x0 ns:film.cinematographer.film ns:m.0447rg .\n?x0 ns:film.director.film ns:m.026sy10 .\n?x0 ns:film.director.film ns:m.07g38 .\n?x0 ns:film.editor.film ns:m.026sy10 .\n?x0 ns:film.editor.film ns:m.07g38 .\n?x0 ns:film.writer.film ns:m.026sy10 .\n?x0 ns:film.writer.film ns:m.07g38 .\n?x0 ns:people.person.nationality ns:m.0d060g\n}",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P1 M1 .\n?x0 P1 M2 .\n?x0 P2 M3 .\n?x0 P3 M4 .\n?x0 P4 M1 .\n?x0 P4 M2 .\n?x0 a M0\n}",
        "expectedResponse": "No",
        "recursionDepth": 48
    },
    {
        "questionIdx": 132752,
        "questionWithBrackets": "What French child of [Lucien Auguste Camus] married [Francine Faure] and [Simone Hie], influenced [Clive James], and influenced a film director",
        "questionPatternModEntities": "What French child of M2 married M3 and M4 , influenced M0 , and influenced a film director",
        "questionTemplate": "What [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] [VP_SIMPLE] [entity] and [entity] , [VP_SIMPLE] [entity] , and [VP_SIMPLE] a [NP_SIMPLE]",
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:influence.influence_node.influenced ?x1 .\n?x0 ns:influence.influence_node.influenced ns:m.029b4z .\n?x0 ns:people.person.nationality ns:m.0f8l9c .\n?x0 ns:people.person.parents|ns:fictional_universe.fictional_character.parents|ns:organization.organization.parent/ns:organization.organization_relationship.parent ns:m.0ngmwsd .\n?x0 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ns:m.03c_q7q .\n?x0 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ns:m.0hz_jng .\n?x1 a ns:film.director .\nFILTER ( ?x0 != ns:m.03c_q7q ) .\nFILTER ( ?x0 != ns:m.0hz_jng )\n}",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P2 M2 .\n?x0 P3 M3 .\n?x0 P3 M4 .\n?x1 a M5 .\nFILTER ( ?x0 != M3 ) .\nFILTER ( ?x0 != M4 )\n}",
        "expectedResponse": "Albert Camus",
        "recursionDepth": 48
    },
    {
        "questionIdx": 102416,
        "questionWithBrackets": "Was a male sibling of [Ana Mar\u00eda Dal\u00ed] a Spanish film director that was influenced by [Jean Epstein] and married [Jeanne Bu\u00f1uel]",
        "questionPatternModEntities": "Was a male sibling of M0 a Spanish film director that was influenced by M2 and married M5",
        "questionTemplate": "Was a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] a [ADJECTIVE_SIMPLE] [NP_SIMPLE] that was [VP_SIMPLE] by [entity] and [VP_SIMPLE] [entity]",
        "sparql": "SELECT count(*) WHERE {\n?x0 a ns:film.director .\n?x0 ns:influence.influence_node.influenced_by ns:m.07g1jy .\n?x0 ns:people.person.gender ns:m.05zppz .\n?x0 ns:people.person.nationality ns:m.06mkj .\n?x0 ns:people.person.sibling_s/ns:people.sibling_relationship.sibling|ns:fictional_universe.fictional_character.siblings/ns:fictional_universe.sibling_relationship_of_fictional_characters.siblings ns:m.0jvsl6z .\n?x0 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ns:m.0j6f7_0 .\nFILTER ( ?x0 != ns:m.0j6f7_0 ) .\nFILTER ( ?x0 != ns:m.0jvsl6z )\n}",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M2 .\n?x0 P2 M3 .\n?x0 P3 M4 .\n?x0 P4 M5 .\n?x0 a M1 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x0 != M5 )\n}",
        "expectedResponse": "No",
        "recursionDepth": 48
    },
    {
        "questionIdx": 18619,
        "questionWithBrackets": "Did [Ryuji the Yakuza]'s costume designer and writer influence [Wes Anderson] and [Radley Metzger], marry [Oja Kodar], and marry [Virginia Nicolson] and [Rita Hayworth]",
        "questionPatternModEntities": "Did M0 's costume designer and writer influence M1 and M2 , marry M3 , and marry M4 and M5",
        "questionTemplate": "Did [entity] 's [ROLE_SIMPLE] and [ROLE_SIMPLE] [VP_SIMPLE] [entity] and [entity] , [VP_SIMPLE] [entity] , and [VP_SIMPLE] [entity] and [entity]",
        "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.film_costumer_designer.costume_design_for_film ns:m.0crwdt7 .\n?x0 ns:film.writer.film ns:m.0crwdt7 .\n?x0 ns:influence.influence_node.influenced ns:m.021xsc .\n?x0 ns:influence.influence_node.influenced ns:m.02ld6x .\n?x0 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ns:m.01pl9g .\n?x0 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ns:m.061kqv .\n?x0 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ns:m.0jz8kp .\nFILTER ( ?x0 != ns:m.01pl9g ) .\nFILTER ( ?x0 != ns:m.061kqv ) .\nFILTER ( ?x0 != ns:m.0jz8kp )\n}",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\n?x0 P2 M0 .\n?x0 P3 M3 .\n?x0 P3 M4 .\n?x0 P3 M5 .\nFILTER ( ?x0 != M3 ) .\nFILTER ( ?x0 != M4 ) .\nFILTER ( ?x0 != M5 )\n}",
        "expectedResponse": "No",
        "recursionDepth": 48
    },
    {
        "questionIdx": 42851,
        "questionWithBrackets": "Did an executive producer of [Loneliness Is Soul], [My Bounty Hunter], and [The Fifth Wall] edit, direct, executive produce, and write [White Stork Is Coming] and [It's Not About the Shawerma]",
        "questionPatternModEntities": "Did a executive producer of M2 , M3 , and M4 edit , direct , executive produce , and write M0 and M1",
        "questionTemplate": "Did a [ROLE_SIMPLE] of [entity] , [entity] , and [entity] [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] [entity] and [entity]",
        "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.director.film ns:m.0zxyz5j .\n?x0 ns:film.director.film ns:m.0zztylq .\n?x0 ns:film.editor.film ns:m.0zxyz5j .\n?x0 ns:film.editor.film ns:m.0zztylq .\n?x0 ns:film.producer.films_executive_produced ns:m.0_2v14v .\n?x0 ns:film.producer.films_executive_produced ns:m.0_2zrgs .\n?x0 ns:film.producer.films_executive_produced ns:m.0zd5p8f .\n?x0 ns:film.producer.films_executive_produced ns:m.0zxyz5j .\n?x0 ns:film.producer.films_executive_produced ns:m.0zztylq .\n?x0 ns:film.writer.film ns:m.0zxyz5j .\n?x0 ns:film.writer.film ns:m.0zztylq\n}",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P1 M0 .\n?x0 P1 M1 .\n?x0 P2 M0 .\n?x0 P2 M1 .\n?x0 P2 M2 .\n?x0 P2 M3 .\n?x0 P2 M4 .\n?x0 P3 M0 .\n?x0 P3 M1\n}",
        "expectedResponse": "Yes",
        "recursionDepth": 49
    },
    {
        "questionIdx": 21549,
        "questionWithBrackets": "Did [The Brown Bunny]'s director, costume designer, star, and cinematographer write, direct, produce, and executive produce [Promises Written in Water]",
        "questionPatternModEntities": "Did M1 's director , costume designer , star , and cinematographer write , direct , produce , and executive produce M0",
        "questionTemplate": "Did [entity] 's [ROLE_SIMPLE] , [ROLE_SIMPLE] , [ROLE_SIMPLE] , and [ROLE_SIMPLE] [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] [entity]",
        "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.actor.film/ns:film.performance.film ns:m.01n9cy .\n?x0 ns:film.cinematographer.film ns:m.01n9cy .\n?x0 ns:film.director.film ns:m.01n9cy .\n?x0 ns:film.director.film ns:m.0bh9qf1 .\n?x0 ns:film.film_costumer_designer.costume_design_for_film ns:m.01n9cy .\n?x0 ns:film.producer.films_executive_produced ns:m.0bh9qf1 .\n?x0 ns:film.producer.film|ns:film.production_company.films ns:m.0bh9qf1 .\n?x0 ns:film.writer.film ns:m.0bh9qf1\n}",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M0 .\n?x0 P2 M1 .\n?x0 P3 M0 .\n?x0 P4 M1 .\n?x0 P5 M1 .\n?x0 P6 M0 .\n?x0 P6 M1\n}",
        "expectedResponse": "Yes",
        "recursionDepth": 49
    },
    {
        "questionIdx": 181182,
        "questionWithBrackets": "What was produced by [Dog Eat Dog Films], [Michael Moore], and [The Weinstein Company], executive produced by a costume designer, and edited by [Alex Meillier], [Tanya Meillier], and [Todd Woody Richman]",
        "questionPatternModEntities": "What was produced by M0 , M1 , and M2 , executive produced by a costume designer , and edited by M3 , M4 , and M5",
        "questionTemplate": "What was [VP_SIMPLE] by [entity] , [entity] , and [entity] , [VP_SIMPLE] by a [NP_SIMPLE] , and [VP_SIMPLE] by [entity] , [entity] , and [entity]",
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.film.edited_by ns:m.0b3wgbw .\n?x0 ns:film.film.edited_by ns:m.0b3wgbz .\n?x0 ns:film.film.edited_by ns:m.0b3wgc4 .\n?x0 ns:film.film.executive_produced_by ?x1 .\n?x0 ns:film.film.produced_by|ns:film.film.production_companies ns:m.02z380w .\n?x0 ns:film.film.produced_by|ns:film.film.production_companies ns:m.061dn_ .\n?x0 ns:film.film.produced_by|ns:film.film.production_companies ns:m.0jw67 .\n?x1 a ns:film.film_costumer_designer\n}",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\n?x0 P2 M3 .\n?x0 P2 M4 .\n?x0 P2 M5 .\n?x1 a M6\n}",
        "expectedResponse": "Capitalism: A Love Story",
        "recursionDepth": 49
    },
    {
        "questionIdx": 25058,
        "questionWithBrackets": "Did [White Stork Is Coming]'s cinematographer, producer, executive producer, and writer executive produce, produce, edit, and direct [It's Not About the Shawerma]",
        "questionPatternModEntities": "Did M1 's cinematographer , producer , executive producer , and writer executive produce , produce , edit , and direct M0",
        "questionTemplate": "Did [entity] 's [ROLE_SIMPLE] , [ROLE_SIMPLE] , [ROLE_SIMPLE] , and [ROLE_SIMPLE] [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] [entity]",
        "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.cinematographer.film ns:m.0zxyz5j .\n?x0 ns:film.director.film ns:m.0zztylq .\n?x0 ns:film.editor.film ns:m.0zztylq .\n?x0 ns:film.producer.films_executive_produced ns:m.0zxyz5j .\n?x0 ns:film.producer.films_executive_produced ns:m.0zztylq .\n?x0 ns:film.producer.film|ns:film.production_company.films ns:m.0zxyz5j .\n?x0 ns:film.producer.film|ns:film.production_company.films ns:m.0zztylq .\n?x0 ns:film.writer.film ns:m.0zxyz5j\n}",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P2 M0 .\n?x0 P2 M1 .\n?x0 P3 M0 .\n?x0 P3 M1 .\n?x0 P4 M1 .\n?x0 P5 M0\n}",
        "expectedResponse": "Yes",
        "recursionDepth": 49
    },
    {
        "questionIdx": 21672,
        "questionWithBrackets": "Did [The Brown Bunny]'s producer, cinematographer, costume designer, and star direct, produce, executive produce, and edit [Jeg elsker dig]",
        "questionPatternModEntities": "Did M1 's producer , cinematographer , costume designer , and star direct , produce , executive produce , and edit M0",
        "questionTemplate": "Did [entity] 's [ROLE_SIMPLE] , [ROLE_SIMPLE] , [ROLE_SIMPLE] , and [ROLE_SIMPLE] [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] [entity]",
        "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.actor.film/ns:film.performance.film ns:m.01n9cy .\n?x0 ns:film.cinematographer.film ns:m.01n9cy .\n?x0 ns:film.director.film ns:m.04q3l8x .\n?x0 ns:film.editor.film ns:m.04q3l8x .\n?x0 ns:film.film_costumer_designer.costume_design_for_film ns:m.01n9cy .\n?x0 ns:film.producer.films_executive_produced ns:m.04q3l8x .\n?x0 ns:film.producer.film|ns:film.production_company.films ns:m.01n9cy .\n?x0 ns:film.producer.film|ns:film.production_company.films ns:m.04q3l8x\n}",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M0 .\n?x0 P2 M1 .\n?x0 P3 M0 .\n?x0 P3 M1 .\n?x0 P4 M1 .\n?x0 P5 M1 .\n?x0 P6 M0\n}",
        "expectedResponse": "No",
        "recursionDepth": 49
    },
    {
        "questionIdx": 133197,
        "questionWithBrackets": "What French star of [Blowup] was influenced by [St\u00e9phane Mallarm\u00e9], [Marcel Proust], [Hans-Georg Gadamer], and [James Joyce] and was influenced by a person",
        "questionPatternModEntities": "What French star of M5 was influenced by M0 , M1 , M2 , and M3 and was influenced by a person",
        "questionTemplate": "What [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] was [VP_SIMPLE] by [entity] , [entity] , [entity] , and [entity] and was [VP_SIMPLE] by a [NP_SIMPLE]",
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.actor.film/ns:film.performance.film ns:m.029p7z .\n?x0 ns:influence.influence_node.influenced_by ?x1 .\n?x0 ns:influence.influence_node.influenced_by ns:m.03_87 .\n?x0 ns:influence.influence_node.influenced_by ns:m.03mt9 .\n?x0 ns:influence.influence_node.influenced_by ns:m.058vp .\n?x0 ns:influence.influence_node.influenced_by ns:m.074ck .\n?x0 ns:people.person.nationality ns:m.0f8l9c .\n?x1 a ns:people.person\n}",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P0 M3 .\n?x0 P1 M4 .\n?x0 P2 M5 .\n?x1 a M6\n}",
        "expectedResponse": "Julio Cort\u00e1zar",
        "recursionDepth": 49
    },
    {
        "questionIdx": 186963,
        "questionWithBrackets": "What writer of [The Higden Man] edited, produced, wrote, directed, and executive produced [Rick's Canoe], [White Stork Is Coming], and [The Fifth Wall]",
        "questionPatternModEntities": "What writer of M3 edited , produced , wrote , directed , and executive produced M0 , M1 , and M2",
        "questionTemplate": "What [ROLE_SIMPLE] of [entity] [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] [entity] , [entity] , and [entity]",
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.director.film ns:m.0_2zrgs .\n?x0 ns:film.director.film ns:m.0zvz2b2 .\n?x0 ns:film.director.film ns:m.0zxyz5j .\n?x0 ns:film.editor.film ns:m.0_2zrgs .\n?x0 ns:film.editor.film ns:m.0zvz2b2 .\n?x0 ns:film.editor.film ns:m.0zxyz5j .\n?x0 ns:film.producer.films_executive_produced ns:m.0_2zrgs .\n?x0 ns:film.producer.films_executive_produced ns:m.0zvz2b2 .\n?x0 ns:film.producer.films_executive_produced ns:m.0zxyz5j .\n?x0 ns:film.producer.film|ns:film.production_company.films ns:m.0_2zrgs .\n?x0 ns:film.producer.film|ns:film.production_company.films ns:m.0zvz2b2 .\n?x0 ns:film.producer.film|ns:film.production_company.films ns:m.0zxyz5j .\n?x0 ns:film.writer.film ns:m.0_2zrgs .\n?x0 ns:film.writer.film ns:m.0_g0qr6 .\n?x0 ns:film.writer.film ns:m.0zvz2b2 .\n?x0 ns:film.writer.film ns:m.0zxyz5j\n}",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P1 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\n?x0 P1 M3 .\n?x0 P2 M0 .\n?x0 P2 M1 .\n?x0 P2 M2 .\n?x0 P3 M0 .\n?x0 P3 M1 .\n?x0 P3 M2 .\n?x0 P4 M0 .\n?x0 P4 M1 .\n?x0 P4 M2\n}",
        "expectedResponse": "Rick Schmidt",
        "recursionDepth": 50
    },
    {
        "questionIdx": 155630,
        "questionWithBrackets": "What film director that edited, produced, wrote, and directed [The Kid], [The Pawnshop], and [City Lights] was employed by [Essanay Studios]",
        "questionPatternModEntities": "What film director that edited , produced , wrote , and directed M0 , M1 , and M2 was employed by M3",
        "questionTemplate": "What [NP_SIMPLE] that [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] [entity] , [entity] , and [entity] was [VP_SIMPLE] by [entity]",
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.director.film ns:m.04vl27 .\n?x0 ns:film.director.film ns:m.07m2js .\n?x0 ns:film.director.film ns:m.0jq9t .\n?x0 ns:film.editor.film ns:m.04vl27 .\n?x0 ns:film.editor.film ns:m.07m2js .\n?x0 ns:film.editor.film ns:m.0jq9t .\n?x0 ns:film.producer.film|ns:film.production_company.films ns:m.04vl27 .\n?x0 ns:film.producer.film|ns:film.production_company.films ns:m.07m2js .\n?x0 ns:film.producer.film|ns:film.production_company.films ns:m.0jq9t .\n?x0 ns:film.writer.film ns:m.04vl27 .\n?x0 ns:film.writer.film ns:m.07m2js .\n?x0 ns:film.writer.film ns:m.0jq9t .\n?x0 ns:people.person.employment_history/ns:business.employment_tenure.company ns:m.019wv3\n}",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P1 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\n?x0 P2 M3 .\n?x0 P3 M0 .\n?x0 P3 M1 .\n?x0 P3 M2 .\n?x0 P4 M0 .\n?x0 P4 M1 .\n?x0 P4 M2\n}",
        "expectedResponse": "Charlie Chaplin",
        "recursionDepth": 50
    },
    {
        "questionIdx": 37197,
        "questionWithBrackets": "Did a male person produce, edit, executive produce, write, and direct [Krivina] and [A Doctor's Job!]",
        "questionPatternModEntities": "Did a male person produce , edit , executive produce , write , and direct M1 and M2",
        "questionTemplate": "Did a [ADJECTIVE_SIMPLE] [NP_SIMPLE] [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] [entity] and [entity]",
        "sparql": "SELECT count(*) WHERE {\n?x0 a ns:people.person .\n?x0 ns:film.director.film ns:m.0gfpm7n .\n?x0 ns:film.director.film ns:m.0rh7xyx .\n?x0 ns:film.editor.film ns:m.0gfpm7n .\n?x0 ns:film.editor.film ns:m.0rh7xyx .\n?x0 ns:film.producer.films_executive_produced ns:m.0gfpm7n .\n?x0 ns:film.producer.films_executive_produced ns:m.0rh7xyx .\n?x0 ns:film.producer.film|ns:film.production_company.films ns:m.0gfpm7n .\n?x0 ns:film.producer.film|ns:film.production_company.films ns:m.0rh7xyx .\n?x0 ns:film.writer.film ns:m.0gfpm7n .\n?x0 ns:film.writer.film ns:m.0rh7xyx .\n?x0 ns:people.person.gender ns:m.05zppz\n}",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P1 M1 .\n?x0 P1 M2 .\n?x0 P2 M1 .\n?x0 P2 M2 .\n?x0 P3 M1 .\n?x0 P3 M2 .\n?x0 P4 M3 .\n?x0 P5 M1 .\n?x0 P5 M2 .\n?x0 a M0\n}",
        "expectedResponse": "No",
        "recursionDepth": 50
    },
    {
        "questionIdx": 8548,
        "questionWithBrackets": "Did [Glengarry Glen Ross] star [Ed Harris], star a film producer, star [Jonathan Pryce], and star [Skipp Lynch], [Jude Ciccolella], and [Alec Baldwin]",
        "questionPatternModEntities": "Did M1 star M2 , star a film producer , star M3 , and star M4 , M5 , and M6",
        "questionTemplate": "Did [entity] [VP_SIMPLE] [entity] , [VP_SIMPLE] a [NP_SIMPLE] , [VP_SIMPLE] [entity] , and [VP_SIMPLE] [entity] , [entity] , and [entity]",
        "sparql": "SELECT count(*) WHERE {\n?x0 a ns:film.producer .\nns:m.06d0fg ns:film.film.starring/ns:film.performance.actor ?x0 .\nns:m.06d0fg ns:film.film.starring/ns:film.performance.actor ns:m.017149 .\nns:m.06d0fg ns:film.film.starring/ns:film.performance.actor ns:m.018ygt .\nns:m.06d0fg ns:film.film.starring/ns:film.performance.actor ns:m.01tsbmv .\nns:m.06d0fg ns:film.film.starring/ns:film.performance.actor ns:m.05dtwm .\nns:m.06d0fg ns:film.film.starring/ns:film.performance.actor ns:m.0gc6yt5\n}",
        "sparqlPattern": "SELECT count(*) WHERE {\n?x0 a M0 .\nM1 P0 ?x0 .\nM1 P0 M2 .\nM1 P0 M3 .\nM1 P0 M4 .\nM1 P0 M5 .\nM1 P0 M6\n}",
        "expectedResponse": "Yes",
        "recursionDepth": 50
    },
    {
        "questionIdx": 225389,
        "questionWithBrackets": "Who was a Canadian cinematographer that [True Lies], [Terminator 2: Judgment Day], [Titanic], and [Avatar 3] were written by, produced by, and directed by",
        "questionPatternModEntities": "Who was a Canadian cinematographer that M2 , M3 , M4 , and M5 were written by , produced by , and directed by",
        "questionTemplate": "Who was a [ADJECTIVE_SIMPLE] [NP_SIMPLE] that [entity] , [entity] , [entity] , and [entity] were [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by",
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:film.cinematographer .\n?x0 a ns:people.person .\n?x0 ns:film.director.film ns:m.07gp9 .\n?x0 ns:film.director.film ns:m.0dr_4 .\n?x0 ns:film.director.film ns:m.0gwqhhn .\n?x0 ns:film.director.film ns:m.0hwpz .\n?x0 ns:film.producer.film|ns:film.production_company.films ns:m.07gp9 .\n?x0 ns:film.producer.film|ns:film.production_company.films ns:m.0dr_4 .\n?x0 ns:film.producer.film|ns:film.production_company.films ns:m.0gwqhhn .\n?x0 ns:film.producer.film|ns:film.production_company.films ns:m.0hwpz .\n?x0 ns:film.writer.film ns:m.07gp9 .\n?x0 ns:film.writer.film ns:m.0dr_4 .\n?x0 ns:film.writer.film ns:m.0gwqhhn .\n?x0 ns:film.writer.film ns:m.0hwpz .\n?x0 ns:people.person.nationality ns:m.0d060g\n}",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M2 .\n?x0 P0 M3 .\n?x0 P0 M4 .\n?x0 P0 M5 .\n?x0 P1 M6 .\n?x0 P2 M2 .\n?x0 P2 M3 .\n?x0 P2 M4 .\n?x0 P2 M5 .\n?x0 P3 M2 .\n?x0 P3 M3 .\n?x0 P3 M4 .\n?x0 P3 M5 .\n?x0 a M0 .\n?x0 a M1\n}",
        "expectedResponse": "James Cameron",
        "recursionDepth": 50
    },
    {
        "questionIdx": 163065,
        "questionWithBrackets": "What prequel of [The Endless Summer II] was edited by, starred, was directed by, was written by, and was produced by [Bruce Brown]",
        "questionPatternModEntities": "What prequel of M0 was edited by , starred , was directed by , was written by , and was produced by M1",
        "questionTemplate": "What [ROLE_SIMPLE] of [entity] was [VP_SIMPLE] by , [VP_SIMPLE] , was [VP_SIMPLE] by , was [VP_SIMPLE] by , and was [VP_SIMPLE] by [entity]",
        "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.film.directed_by ns:m.07__d8 .\n?x0 ns:film.film.edited_by ns:m.07__d8 .\n?x0 ns:film.film.produced_by|ns:film.film.production_companies ns:m.07__d8 .\n?x0 ns:film.film.sequel ns:m.02vklgp .\n?x0 ns:film.film.starring/ns:film.performance.actor ns:m.07__d8 .\n?x0 ns:film.film.written_by ns:m.07__d8\n}",
        "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P2 M1 .\n?x0 P3 M1 .\n?x0 P4 M1 .\n?x0 P5 M1\n}",
        "expectedResponse": "The Endless Summer",
        "recursionDepth": 50
    }
]