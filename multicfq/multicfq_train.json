[
  {
    "questionIdx": 214063,
    "questionWithBrackets": "Who did [Evelina E I Suoi Figli] star",
    "questionPatternModEntities": "Who did M1 star",
    "questionTemplate": "Who did [entity] [VP_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:people.person .\n?x0 ns:film.actor.film/ns:film.performance.film ns:g.1yxkhhbn3\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M1 .\n?x0 a M0\n}",
    "expectedResponse": "Pamela Villoresi; Stefania Sandrelli",
    "recursionDepth": 10
  },
  {
    "questionIdx": 84652,
    "questionWithBrackets": "Was [Unfaithful]'s costume designer [Mrs. Meera M. Gehani]",
    "questionPatternModEntities": "Was M1 's costume designer M0",
    "questionTemplate": "Was [entity] 's [ROLE_SIMPLE] [entity]",
    "sparql": "SELECT count(*) WHERE {\nns:m.0hhkf7k ns:film.film_costumer_designer.costume_design_for_film ns:m.048htn\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1\n}",
    "expectedResponse": "No",
    "recursionDepth": 11
  },
  {
    "questionIdx": 210348,
    "questionWithBrackets": "Which screenwriter did [United Artists] employ",
    "questionPatternModEntities": "Which screenwriter did M1 employ",
    "questionTemplate": "Which [NP_SIMPLE] did [entity] [VP_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:film.writer .\n?x0 ns:people.person.employment_history/ns:business.employment_tenure.company ns:m.017jv5\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M1 .\n?x0 a M0\n}",
    "expectedResponse": "Tom Cruise; Paula Wagner",
    "recursionDepth": 13
  },
  {
    "questionIdx": 157628,
    "questionWithBrackets": "What film producer influenced [Yusuke Nakano]",
    "questionPatternModEntities": "What film producer influenced M1",
    "questionTemplate": "What [NP_SIMPLE] [VP_SIMPLE] [entity]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:film.producer .\n?x0 ns:influence.influence_node.influenced ns:m.04z_lcl\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M1 .\n?x0 a M0\n}",
    "expectedResponse": "Frank Frazetta",
    "recursionDepth": 13
  },
  {
    "questionIdx": 195718,
    "questionWithBrackets": "Which cinematographer did [Aardman Animations] employ",
    "questionPatternModEntities": "Which cinematographer did M1 employ",
    "questionTemplate": "Which [NP_SIMPLE] did [entity] [VP_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:film.cinematographer .\n?x0 ns:people.person.employment_history/ns:business.employment_tenure.company ns:m.0fk_w\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M1 .\n?x0 a M0\n}",
    "expectedResponse": "David Sproxton; Nick Park",
    "recursionDepth": 13
  },
  {
    "questionIdx": 136192,
    "questionWithBrackets": "What actor influenced [Ann Scott]",
    "questionPatternModEntities": "What actor influenced M1",
    "questionTemplate": "What [NP_SIMPLE] [VP_SIMPLE] [entity]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:film.actor .\n?x0 ns:influence.influence_node.influenced ns:m.0c8rrt\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M1 .\n?x0 a M0\n}",
    "expectedResponse": "Truman Capote",
    "recursionDepth": 13
  },
  {
    "questionIdx": 192645,
    "questionWithBrackets": "Which actor directed [Tharavattamma]",
    "questionPatternModEntities": "Which actor directed M1",
    "questionTemplate": "Which [NP_SIMPLE] [VP_SIMPLE] [entity]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:film.actor .\n?x0 ns:film.director.film ns:m.0gh8wlw\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M1 .\n?x0 a M0\n}",
    "expectedResponse": "P. Bhaskaran",
    "recursionDepth": 13
  },
  {
    "questionIdx": 163713,
    "questionWithBrackets": "What production company did [Columbia Pictures Television] acquire",
    "questionPatternModEntities": "What production company did M1 acquire",
    "questionTemplate": "What [NP_SIMPLE] did [entity] [VP_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:film.production_company .\n?x0 ns:organization.organization.acquired_by/ns:business.acquisition.acquiring_company ns:m.03shp0\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M1 .\n?x0 a M0\n}",
    "expectedResponse": "TriStar Television Inc.",
    "recursionDepth": 13
  },
  {
    "questionIdx": 29352,
    "questionWithBrackets": "Did a character influence [Mary Baker Eddy]",
    "questionPatternModEntities": "Did a character influence M1",
    "questionTemplate": "Did a [NP_SIMPLE] [VP_SIMPLE] [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 a ns:fictional_universe.fictional_character .\n?x0 ns:influence.influence_node.influenced ns:m.0xnq_\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M1 .\n?x0 a M0\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 14
  },
  {
    "questionIdx": 201514,
    "questionWithBrackets": "Which film director executive produced [Street Fight]",
    "questionPatternModEntities": "Which film director executive produced M1",
    "questionTemplate": "Which [NP_SIMPLE] [VP_SIMPLE] [entity]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:film.director .\n?x0 ns:film.producer.films_executive_produced ns:m.09dm9y\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M1 .\n?x0 a M0\n}",
    "expectedResponse": "Rory Kennedy; Liz Garbus",
    "recursionDepth": 14
  },
  {
    "questionIdx": 215010,
    "questionWithBrackets": "Who did [Ten Days' Wonder]'s costume designer influence",
    "questionPatternModEntities": "Who did M1 's costume designer influence",
    "questionTemplate": "Who did [entity] 's [ROLE_SIMPLE] [VP_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:people.person .\n?x0 ns:influence.influence_node.influenced_by ?x1 .\n?x1 ns:film.film_costumer_designer.costume_design_for_film ns:m.0bbwhtz\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 a M0 .\n?x1 P1 M1\n}",
    "expectedResponse": "Nahar The Mask",
    "recursionDepth": 14
  },
  {
    "questionIdx": 216962,
    "questionWithBrackets": "Who edited [I Love Hong Kong 2012]'s sequel",
    "questionPatternModEntities": "Who edited M1 's sequel",
    "questionTemplate": "Who [VP_SIMPLE] [entity] 's [ROLE_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:people.person .\n?x0 ns:film.editor.film ?x1 .\n?x1 ns:film.film.prequel ns:m.0hr9zl2\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 a M0 .\n?x1 P1 M1\n}",
    "expectedResponse": "Wenders Li; Man-Ho Mok",
    "recursionDepth": 14
  },
  {
    "questionIdx": 217504,
    "questionWithBrackets": "Who founded [Jeremy Aaron Johnson]'s employer",
    "questionPatternModEntities": "Who founded M1 's employer",
    "questionTemplate": "Who [VP_SIMPLE] [entity] 's [ROLE_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:people.person .\n?x0 ns:organization.organization_founder.organizations_founded ?x1 .\n?x1 ns:business.employer.employees/ns:business.employment_tenure.person ns:m.0br2hmn\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 a M0 .\n?x1 P1 M1\n}",
    "expectedResponse": "Earl Bakken; Palmer Hermundslie",
    "recursionDepth": 14
  },
  {
    "questionIdx": 11393,
    "questionWithBrackets": "Did [Jesus Christ] influence [Eastern Orthodox Church]'s founder",
    "questionPatternModEntities": "Did M1 influence M0 's founder",
    "questionTemplate": "Did [entity] [VP_SIMPLE] [entity] 's [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:organization.organization_founder.organizations_founded ns:m.02rxj .\nns:m.045m1_ ns:influence.influence_node.influenced ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 ?x0\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 15
  },
  {
    "questionIdx": 16747,
    "questionWithBrackets": "Did [Peter Cook] influence [Gentleman Drunk]'s actor",
    "questionPatternModEntities": "Did M1 influence M0 's actor",
    "questionTemplate": "Did [entity] [VP_SIMPLE] [entity] 's [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.actor.film/ns:film.performance.character ns:m.0v4vmqh .\nns:m.01t_wfl ns:influence.influence_node.influenced ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 ?x0\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 15
  },
  {
    "questionIdx": 4760,
    "questionWithBrackets": "Did [ConnectU]'s founder found [Facebook, Inc.]",
    "questionPatternModEntities": "Did M0 's founder found M1",
    "questionTemplate": "Did [entity] 's [ROLE_SIMPLE] [VP_SIMPLE] [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:organization.organization_founder.organizations_founded ns:m.02q9bp7 .\n?x0 ns:organization.organization_founder.organizations_founded ns:m.0hmyfsv\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P0 M1\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 15
  },
  {
    "questionIdx": 78397,
    "questionWithBrackets": "Was [Teinosuke Kinugasa] a Japanese screenwriter",
    "questionPatternModEntities": "Was M0 a Japanese screenwriter",
    "questionTemplate": "Was [entity] a [ADJECTIVE_SIMPLE] [NP_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\nns:m.02dfsd a ns:film.writer .\nns:m.02dfsd ns:people.person.nationality ns:m.03_3d\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M2 .\nM0 a M1\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 15
  },
  {
    "questionIdx": 49607,
    "questionWithBrackets": "Was [Catherine Frazier Joy] an Italian film editor",
    "questionPatternModEntities": "Was M0 a Italian film editor",
    "questionTemplate": "Was [entity] a [ADJECTIVE_SIMPLE] [NP_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\nns:m.03wrx57 a ns:film.editor .\nns:m.03wrx57 ns:people.person.nationality ns:m.03rjj\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M2 .\nM0 a M1\n}",
    "expectedResponse": "No",
    "recursionDepth": 15
  },
  {
    "questionIdx": 89174,
    "questionWithBrackets": "Was a Dutch film producer [Josepha Niebelsch\u00fctz]",
    "questionPatternModEntities": "Was a Dutch film producer M0",
    "questionTemplate": "Was a [ADJECTIVE_SIMPLE] [NP_SIMPLE] [entity]",
    "sparql": "SELECT count(*) WHERE {\nns:g.1229dk8k a ns:film.producer .\nns:g.1229dk8k ns:people.person.nationality ns:m.059j2\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M2 .\nM0 a M1\n}",
    "expectedResponse": "No",
    "recursionDepth": 15
  },
  {
    "questionIdx": 45439,
    "questionWithBrackets": "Was [Ampawan]'s sibling's sibling [Avi Taga]",
    "questionPatternModEntities": "Was M0 's sibling 's sibling M1",
    "questionTemplate": "Was [entity] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE] [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:people.person.sibling_s/ns:people.sibling_relationship.sibling|ns:fictional_universe.fictional_character.siblings/ns:fictional_universe.sibling_relationship_of_fictional_characters.siblings ns:m.0v_m41k .\nFILTER ( ?x0 != ns:m.0v_m41k ) .\nFILTER ( ns:m.0w03f7v != ?x0 ) .\nns:m.0w03f7v ns:people.person.sibling_s/ns:people.sibling_relationship.sibling|ns:fictional_universe.fictional_character.siblings/ns:fictional_universe.sibling_relationship_of_fictional_characters.siblings ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( M1 != ?x0 ) .\nM1 P0 ?x0\n}",
    "expectedResponse": "No",
    "recursionDepth": 15
  },
  {
    "questionIdx": 75911,
    "questionWithBrackets": "Was [Seth Weisberg] a French person",
    "questionPatternModEntities": "Was M0 a French person",
    "questionTemplate": "Was [entity] a [ADJECTIVE_SIMPLE] [NP_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\nns:m.02_yhrh a ns:people.person .\nns:m.02_yhrh ns:people.person.nationality ns:m.0f8l9c\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M2 .\nM0 a M1\n}",
    "expectedResponse": "No",
    "recursionDepth": 15
  },
  {
    "questionIdx": 62200,
    "questionWithBrackets": "Was [Jules Brulatour] [Marnie]'s producer's founder",
    "questionPatternModEntities": "Was M1 M0 's producer 's founder",
    "questionTemplate": "Was [entity] [entity] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.producer.film|ns:film.production_company.films ns:m.01n7qj .\nns:m.09nlrw ns:organization.organization_founder.organizations_founded ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 ?x0\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 15
  },
  {
    "questionIdx": 65842,
    "questionWithBrackets": "Was [Male] [Scena Del Crimine]'s cinematographer's gender",
    "questionPatternModEntities": "Was M1 M0 's cinematographer 's gender",
    "questionTemplate": "Was [entity] [entity] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.cinematographer.film ns:m.0cr6dkc .\nns:m.05zppz ^ns:people.person.gender ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 ?x0\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 15
  },
  {
    "questionIdx": 184069,
    "questionWithBrackets": "What was written by [Beijing Film Academy]'s employee",
    "questionPatternModEntities": "What was written by M0 's employee",
    "questionTemplate": "What was [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.film.written_by ?x1 .\n?x1 ns:people.person.employment_history/ns:business.employment_tenure.company ns:m.07c8z8\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x1 P1 M0\n}",
    "expectedResponse": "Woman Sesame Oil Maker; Bodyguards and Assassins",
    "recursionDepth": 15
  },
  {
    "questionIdx": 19764,
    "questionWithBrackets": "Did [Steno] direct [Hostel: Part II]'s sequel",
    "questionPatternModEntities": "Did M1 direct M0 's sequel",
    "questionTemplate": "Did [entity] [VP_SIMPLE] [entity] 's [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.film.prequel ns:m.0c9jj9 .\nns:m.03ccxs0 ns:film.director.film ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 ?x0\n}",
    "expectedResponse": "No",
    "recursionDepth": 15
  },
  {
    "questionIdx": 56744,
    "questionWithBrackets": "Was [Gigi]'s costume designer's sibling [Barbara Beaton]",
    "questionPatternModEntities": "Was M0 's costume designer 's sibling M1",
    "questionTemplate": "Was [entity] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE] [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.film_costumer_designer.costume_design_for_film ns:m.05sbv3 .\nFILTER ( ns:m.0wkrj68 != ?x0 ) .\nns:m.0wkrj68 ns:people.person.sibling_s/ns:people.sibling_relationship.sibling|ns:fictional_universe.fictional_character.siblings/ns:fictional_universe.sibling_relationship_of_fictional_characters.siblings ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( M1 != ?x0 ) .\nM1 P1 ?x0\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 15
  },
  {
    "questionIdx": 1272,
    "questionWithBrackets": "Did [Andrew Joseph Clooney]'s child marry [Jos\u00e9 Ferrer]",
    "questionPatternModEntities": "Did M0 's child marry M1",
    "questionTemplate": "Did [entity] 's [ROLE_SIMPLE] [VP_SIMPLE] [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:people.person.parents|ns:fictional_universe.fictional_character.parents|ns:organization.organization.parent/ns:organization.organization_relationship.parent ns:m.0j_v487 .\n?x0 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ns:m.0sxqg .\nFILTER ( ?x0 != ns:m.0sxqg )\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M1 )\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 15
  },
  {
    "questionIdx": 10038,
    "questionWithBrackets": "Did [I Found Stella Parish]'s director direct [Visions of Eight]",
    "questionPatternModEntities": "Did M0 's director direct M1",
    "questionTemplate": "Did [entity] 's [ROLE_SIMPLE] [VP_SIMPLE] [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.director.film ns:m.04mzw_n .\n?x0 ns:film.director.film ns:m.05zrl2k\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P0 M1\n}",
    "expectedResponse": "No",
    "recursionDepth": 15
  },
  {
    "questionIdx": 77455,
    "questionWithBrackets": "Was [Steve Donia]'s spouse's sibling [Guillermo Santos]",
    "questionPatternModEntities": "Was M0 's spouse 's sibling M1",
    "questionTemplate": "Was [entity] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE] [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ns:m.0v1sxkt .\nFILTER ( ?x0 != ns:m.0v1sxkt ) .\nFILTER ( ns:m.0njc7z4 != ?x0 ) .\nns:m.0njc7z4 ns:people.person.sibling_s/ns:people.sibling_relationship.sibling|ns:fictional_universe.fictional_character.siblings/ns:fictional_universe.sibling_relationship_of_fictional_characters.siblings ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( M1 != ?x0 ) .\nM1 P1 ?x0\n}",
    "expectedResponse": "No",
    "recursionDepth": 15
  },
  {
    "questionIdx": 81621,
    "questionWithBrackets": "Was [The Man Who Wasn't There]'s writer and editor [Ethan Coen]",
    "questionPatternModEntities": "Was M1 's writer and editor M0",
    "questionTemplate": "Was [entity] 's [ROLE_SIMPLE] and [ROLE_SIMPLE] [entity]",
    "sparql": "SELECT count(*) WHERE {\nns:m.02kxbwx ns:film.editor.film ns:m.01jzyf .\nns:m.02kxbwx ns:film.writer.film ns:m.01jzyf\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 16
  },
  {
    "questionIdx": 68472,
    "questionWithBrackets": "Was [My Blueberry Nights] edited by [Gone with the Bullets]'s art director",
    "questionPatternModEntities": "Was M1 edited by M0 's art director",
    "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.film_art_director.films_art_directed ns:m.0_gzdg9 .\nns:m.0clsl7 ns:film.film.edited_by ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 ?x0\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 16
  },
  {
    "questionIdx": 81272,
    "questionWithBrackets": "Was [The Kingdom of Diamonds]'s costume designer and director [Satyajit Ray]",
    "questionPatternModEntities": "Was M1 's costume designer and director M0",
    "questionTemplate": "Was [entity] 's [ROLE_SIMPLE] and [ROLE_SIMPLE] [entity]",
    "sparql": "SELECT count(*) WHERE {\nns:m.071xj ns:film.director.film ns:m.098dmr .\nns:m.071xj ns:film.film_costumer_designer.costume_design_for_film ns:m.098dmr\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 16
  },
  {
    "questionIdx": 61881,
    "questionWithBrackets": "Was [Jon Stewart] influenced by [Walter Hollander]'s actor",
    "questionPatternModEntities": "Was M1 influenced by M0 's actor",
    "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.actor.film/ns:film.performance.character ns:m.0h2zxlm .\nns:m.01j7rd ns:influence.influence_node.influenced_by ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 ?x0\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 16
  },
  {
    "questionIdx": 52505,
    "questionWithBrackets": "Was [Diary of a Nymphomaniac]'s Spanish editor [Luis de la Madrid]",
    "questionPatternModEntities": "Was M2 's Spanish editor M0",
    "questionTemplate": "Was [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] [entity]",
    "sparql": "SELECT count(*) WHERE {\nns:m.0c09t9k ns:film.editor.film ns:m.09rvc6v .\nns:m.0c09t9k ns:people.person.nationality ns:m.06mkj\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M2\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 16
  },
  {
    "questionIdx": 87677,
    "questionWithBrackets": "Was [Zac Hanson] [The Road to Albertane]'s director and executive producer",
    "questionPatternModEntities": "Was M0 M1 's director and executive producer",
    "questionTemplate": "Was [entity] [entity] 's [ROLE_SIMPLE] and [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\nns:m.04d2cnv ns:film.director.film ns:m.0932jn .\nns:m.04d2cnv ns:film.producer.films_executive_produced ns:m.0932jn\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 16
  },
  {
    "questionIdx": 59076,
    "questionWithBrackets": "Was [Huss-Ashmore] an actor of a screenwriter",
    "questionPatternModEntities": "Was M1 a actor of a screenwriter",
    "questionTemplate": "Was [entity] a [ROLE_SIMPLE] of a [NP_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 a ns:film.writer .\nns:m.05w5r5j ns:film.actor.film/ns:film.performance.character ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 a M0 .\nM1 P0 ?x0\n}",
    "expectedResponse": "No",
    "recursionDepth": 16
  },
  {
    "questionIdx": 67505,
    "questionWithBrackets": "Was [Michel Ocelot] [Kirikou and the Wild Beasts]'s French writer",
    "questionPatternModEntities": "Was M0 M1 's French writer",
    "questionTemplate": "Was [entity] [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\nns:m.025_nb1 ns:film.writer.film ns:m.02rvl94 .\nns:m.025_nb1 ns:people.person.nationality ns:m.0f8l9c\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M2\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 16
  },
  {
    "questionIdx": 77069,
    "questionWithBrackets": "Was [Soyeon Kim] [Ahco On The Road]'s art director and director",
    "questionPatternModEntities": "Was M0 M1 's art director and director",
    "questionTemplate": "Was [entity] [entity] 's [ROLE_SIMPLE] and [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\nns:m.0fq6hm5 ns:film.director.film ns:m.0110gjn0 .\nns:m.0fq6hm5 ns:film.film_art_director.films_art_directed ns:m.0110gjn0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 16
  },
  {
    "questionIdx": 102850,
    "questionWithBrackets": "Was a parent of a person [Theodore Larry]",
    "questionPatternModEntities": "Was a parent of a person M1",
    "questionTemplate": "Was a [ROLE_SIMPLE] of a [NP_SIMPLE] [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 a ns:people.person .\nns:m.011jx3rj ns:people.person.children|ns:fictional_universe.fictional_character.children|ns:organization.organization.child/ns:organization.organization_relationship.child ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 a M0 .\nM1 P0 ?x0\n}",
    "expectedResponse": "No",
    "recursionDepth": 16
  },
  {
    "questionIdx": 76499,
    "questionWithBrackets": "Was [Simeon Frazier Jr.]'s American sibling [Cherry Boone]",
    "questionPatternModEntities": "Was M1 's American sibling M0",
    "questionTemplate": "Was [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] [entity]",
    "sparql": "SELECT count(*) WHERE {\nFILTER ( ns:m.0280ttg != ns:m.011cms5h ) .\nns:m.0280ttg ns:people.person.nationality ns:m.09c7w0 .\nns:m.0280ttg ns:people.person.sibling_s/ns:people.sibling_relationship.sibling|ns:fictional_universe.fictional_character.siblings/ns:fictional_universe.sibling_relationship_of_fictional_characters.siblings ns:m.011cms5h\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\nFILTER ( M0 != M1 ) .\nM0 P0 M1 .\nM0 P1 M2\n}",
    "expectedResponse": "No",
    "recursionDepth": 16
  },
  {
    "questionIdx": 66977,
    "questionWithBrackets": "Was [Megan Van Peebles]'s Mexican sibling [Margarita Urueta]",
    "questionPatternModEntities": "Was M1 's Mexican sibling M0",
    "questionTemplate": "Was [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] [entity]",
    "sparql": "SELECT count(*) WHERE {\nFILTER ( ns:m.011fg1tx != ns:m.0h4npxq ) .\nns:m.011fg1tx ns:people.person.nationality ns:m.0b90_r .\nns:m.011fg1tx ns:people.person.sibling_s/ns:people.sibling_relationship.sibling|ns:fictional_universe.fictional_character.siblings/ns:fictional_universe.sibling_relationship_of_fictional_characters.siblings ns:m.0h4npxq\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\nFILTER ( M0 != M1 ) .\nM0 P0 M1 .\nM0 P1 M2\n}",
    "expectedResponse": "No",
    "recursionDepth": 16
  },
  {
    "questionIdx": 195845,
    "questionWithBrackets": "Which cinematographer distributed a film",
    "questionPatternModEntities": "Which cinematographer distributed a film",
    "questionTemplate": "Which [NP_SIMPLE] [VP_SIMPLE] a [NP_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:film.cinematographer .\n?x0 ns:film.film_distributor.films_distributed/ns:film.film_film_distributor_relationship.film ?x1 .\n?x1 a ns:film.film\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 a M0 .\n?x1 a M1\n}",
    "expectedResponse": "Lenfilm; Screen Gems",
    "recursionDepth": 16
  },
  {
    "questionIdx": 62270,
    "questionWithBrackets": "Was [Julio Bracho] [Jesus Gomez]'s Mexican sibling",
    "questionPatternModEntities": "Was M0 M1 's Mexican sibling",
    "questionTemplate": "Was [entity] [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\nFILTER ( ns:m.05c1d32 != ns:m.0j158l5 ) .\nns:m.05c1d32 ns:people.person.nationality ns:m.0b90_r .\nns:m.05c1d32 ns:people.person.sibling_s/ns:people.sibling_relationship.sibling|ns:fictional_universe.fictional_character.siblings/ns:fictional_universe.sibling_relationship_of_fictional_characters.siblings ns:m.0j158l5\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\nFILTER ( M0 != M1 ) .\nM0 P0 M1 .\nM0 P1 M2\n}",
    "expectedResponse": "No",
    "recursionDepth": 16
  },
  {
    "questionIdx": 76071,
    "questionWithBrackets": "Was [Sharp Corporation]'s Japanese founder [Tokuji Hayakawa]",
    "questionPatternModEntities": "Was M1 's Japanese founder M0",
    "questionTemplate": "Was [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] [entity]",
    "sparql": "SELECT count(*) WHERE {\nns:m.0gwzgy_ ns:organization.organization_founder.organizations_founded ns:m.0344fh .\nns:m.0gwzgy_ ns:people.person.nationality ns:m.03_3d\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M2\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 16
  },
  {
    "questionIdx": 123763,
    "questionWithBrackets": "Were [Ro.Go.Pa.G.] and [Naya Zamana] edited by [Dharamvir]",
    "questionPatternModEntities": "Were M0 and M2 edited by M1",
    "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by [entity]",
    "sparql": "SELECT count(*) WHERE {\nns:m.02qkz_v ns:film.film.edited_by ns:m.0jvtcmw .\nns:m.03gwgp0 ns:film.film.edited_by ns:m.0jvtcmw\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM2 P0 M1\n}",
    "expectedResponse": "No",
    "recursionDepth": 16
  },
  {
    "questionIdx": 75134,
    "questionWithBrackets": "Was [Sabine Az\u00e9ma] [Odile Lalande]'s French actor",
    "questionPatternModEntities": "Was M0 M2 's French actor",
    "questionTemplate": "Was [entity] [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\nns:m.0fygvb ns:film.actor.film/ns:film.performance.character ns:m.0zfrv8k .\nns:m.0fygvb ns:people.person.nationality ns:m.0f8l9c\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M2\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 16
  },
  {
    "questionIdx": 55732,
    "questionWithBrackets": "Was [Frontier(s)] distributed by [Fox Animation Studios]'s parent",
    "questionPatternModEntities": "Was M1 distributed by M0 's parent",
    "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:people.person.children|ns:fictional_universe.fictional_character.children|ns:organization.organization.child/ns:organization.organization_relationship.child ns:m.05ws8z .\nns:m.03c5vfj ns:film.film.distributors/ns:film.film_film_distributor_relationship.distributor ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 ?x0\n}",
    "expectedResponse": "No",
    "recursionDepth": 16
  },
  {
    "questionIdx": 66629,
    "questionWithBrackets": "Was [Massimo Boldi] [Make-up man]'s Italian actor",
    "questionPatternModEntities": "Was M0 M2 's Italian actor",
    "questionTemplate": "Was [entity] [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\nns:m.05zvrwt ns:film.actor.film/ns:film.performance.character ns:m.010qzgt5 .\nns:m.05zvrwt ns:people.person.nationality ns:m.03rjj\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M2\n}",
    "expectedResponse": "No",
    "recursionDepth": 16
  },
  {
    "questionIdx": 209958,
    "questionWithBrackets": "Which production company did [Cheer Squad Sleepover]'s director found",
    "questionPatternModEntities": "Which production company did M1 's director found",
    "questionTemplate": "Which [NP_SIMPLE] did [entity] 's [ROLE_SIMPLE] [VP_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:film.production_company .\n?x0 ns:organization.organization.founders ?x1 .\n?x1 ns:film.director.film ns:m.0r4yb3w\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 a M0 .\n?x1 P1 M1\n}",
    "expectedResponse": "Girlfriends Films",
    "recursionDepth": 17
  },
  {
    "questionIdx": 202871,
    "questionWithBrackets": "Which film editor married [Ariel Capital Management]'s employee",
    "questionPatternModEntities": "Which film editor married M1 's employee",
    "questionTemplate": "Which [NP_SIMPLE] [VP_SIMPLE] [entity] 's [ROLE_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:film.editor .\n?x0 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ?x1 .\n?x1 ns:people.person.employment_history/ns:business.employment_tenure.company ns:m.04gbx6v .\nFILTER ( ?x0 != ?x1 )\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 a M0 .\n?x1 P1 M1 .\nFILTER ( ?x0 != ?x1 )\n}",
    "expectedResponse": "George Lucas",
    "recursionDepth": 17
  },
  {
    "questionIdx": 157362,
    "questionWithBrackets": "What film producer did [Melinda and Melinda]'s director marry",
    "questionPatternModEntities": "What film producer did M1 's director marry",
    "questionTemplate": "What [NP_SIMPLE] did [entity] 's [ROLE_SIMPLE] [VP_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:film.producer .\n?x0 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ?x1 .\n?x1 ns:film.director.film ns:m.02lwyw .\nFILTER ( ?x0 != ?x1 )\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 a M0 .\n?x1 P1 M1 .\nFILTER ( ?x0 != ?x1 )\n}",
    "expectedResponse": "Diane Keaton",
    "recursionDepth": 17
  },
  {
    "questionIdx": 136027,
    "questionWithBrackets": "What actor did [Hum Dil De Chuke Sanam]'s writer employ",
    "questionPatternModEntities": "What actor did M1 's writer employ",
    "questionTemplate": "What [NP_SIMPLE] did [entity] 's [ROLE_SIMPLE] [VP_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:film.actor .\n?x0 ns:people.person.employment_history/ns:business.employment_tenure.company ?x1 .\n?x1 ns:film.writer.film ns:m.05v5_z\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 a M0 .\n?x1 P1 M1\n}",
    "expectedResponse": "Sonam Kapoor",
    "recursionDepth": 17
  },
  {
    "questionIdx": 164221,
    "questionWithBrackets": "What screenwriter married [Irma Vep]'s cinematographer",
    "questionPatternModEntities": "What screenwriter married M1 's cinematographer",
    "questionTemplate": "What [NP_SIMPLE] [VP_SIMPLE] [entity] 's [ROLE_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:film.writer .\n?x0 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ?x1 .\n?x1 ns:film.cinematographer.film ns:m.01w4s2 .\nFILTER ( ?x0 != ?x1 )\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 a M0 .\n?x1 P1 M1 .\nFILTER ( ?x0 != ?x1 )\n}",
    "expectedResponse": "Nathalie Boutefeu",
    "recursionDepth": 17
  },
  {
    "questionIdx": 156437,
    "questionWithBrackets": "What film editor did [Boxcar Bertha]'s director influence",
    "questionPatternModEntities": "What film editor did M1 's director influence",
    "questionTemplate": "What [NP_SIMPLE] did [entity] 's [ROLE_SIMPLE] [VP_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:film.editor .\n?x0 ns:influence.influence_node.influenced_by ?x1 .\n?x1 ns:film.director.film ns:m.062rrj\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 a M0 .\n?x1 P1 M1\n}",
    "expectedResponse": "Richard Linklater; Peter Sollett",
    "recursionDepth": 17
  },
  {
    "questionIdx": 197242,
    "questionWithBrackets": "Which costume designer did [A Hard Day for Archie]'s director marry",
    "questionPatternModEntities": "Which costume designer did M1 's director marry",
    "questionTemplate": "Which [NP_SIMPLE] did [entity] 's [ROLE_SIMPLE] [VP_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:film.film_costumer_designer .\n?x0 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ?x1 .\n?x1 ns:film.director.film ns:m.010sjp68 .\nFILTER ( ?x0 != ?x1 )\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 a M0 .\n?x1 P1 M1 .\nFILTER ( ?x0 != ?x1 )\n}",
    "expectedResponse": "Tracy Tynan",
    "recursionDepth": 17
  },
  {
    "questionIdx": 161632,
    "questionWithBrackets": "What person did [Shivanaga] and [Trimurtulu] star",
    "questionPatternModEntities": "What person did M1 and M2 star",
    "questionTemplate": "What [NP_SIMPLE] did [entity] and [entity] [VP_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:people.person .\n?x0 ns:film.actor.film/ns:film.performance.film ns:m.012hrbr_ .\n?x0 ns:film.actor.film/ns:film.performance.film ns:m.0hznpv8\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 a M0\n}",
    "expectedResponse": "Arjun Sarja",
    "recursionDepth": 17
  },
  {
    "questionIdx": 148979,
    "questionWithBrackets": "What did a cinematographer's child found",
    "questionPatternModEntities": "What did a cinematographer 's child found",
    "questionTemplate": "What did a [NP_SIMPLE] 's [ROLE_SIMPLE] [VP_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:organization.organization.founders ?x1 .\n?x1 ns:people.person.parents|ns:fictional_universe.fictional_character.parents|ns:organization.organization.parent/ns:organization.organization_relationship.parent ?x2 .\n?x2 a ns:film.cinematographer\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x1 P1 ?x2 .\n?x2 a M0\n}",
    "expectedResponse": "Simex-Iwerks; Jaye Bird Productions",
    "recursionDepth": 17
  },
  {
    "questionIdx": 155272,
    "questionWithBrackets": "What film director did [Janet Park]'s sibling influence",
    "questionPatternModEntities": "What film director did M1 's sibling influence",
    "questionTemplate": "What [NP_SIMPLE] did [entity] 's [ROLE_SIMPLE] [VP_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:film.director .\n?x0 ns:influence.influence_node.influenced_by ?x1 .\n?x1 ns:people.person.sibling_s/ns:people.sibling_relationship.sibling|ns:fictional_universe.fictional_character.siblings/ns:fictional_universe.sibling_relationship_of_fictional_characters.siblings ns:m.0j4846m .\nFILTER ( ?x1 != ns:m.0j4846m )\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 a M0 .\n?x1 P1 M1 .\nFILTER ( ?x1 != M1 )\n}",
    "expectedResponse": "Hayao Miyazaki",
    "recursionDepth": 17
  },
  {
    "questionIdx": 57586,
    "questionWithBrackets": "Was [Gyandev Agnihotri] a writer of [Creepshow 2]'s sequel",
    "questionPatternModEntities": "Was M1 a writer of M0 's sequel",
    "questionTemplate": "Was [entity] a [ROLE_SIMPLE] of [entity] 's [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.film.prequel ns:m.06h9zj .\nns:m.0jjb1f6 ns:film.writer.film ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 ?x0\n}",
    "expectedResponse": "No",
    "recursionDepth": 17
  },
  {
    "questionIdx": 37497,
    "questionWithBrackets": "Did a parent of [Landscape Entertainment Corp] distribute [Madea Goes to Jail]",
    "questionPatternModEntities": "Did a parent of M1 distribute M0",
    "questionTemplate": "Did a [ROLE_SIMPLE] of [entity] [VP_SIMPLE] [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.film_distributor.films_distributed/ns:film.film_film_distributor_relationship.film ns:m.03wgvhl .\n?x0 ns:people.person.children|ns:fictional_universe.fictional_character.children|ns:organization.organization.child/ns:organization.organization_relationship.child ns:m.09n4p45\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 17
  },
  {
    "questionIdx": 157607,
    "questionWithBrackets": "What film producer influenced [Heal the World Foundation]'s founder",
    "questionPatternModEntities": "What film producer influenced M1 's founder",
    "questionTemplate": "What [NP_SIMPLE] [VP_SIMPLE] [entity] 's [ROLE_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:film.producer .\n?x0 ns:influence.influence_node.influenced ?x1 .\n?x1 ns:organization.organization_founder.organizations_founded ns:m.05477_q\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 a M0 .\n?x1 P1 M1\n}",
    "expectedResponse": "Charlie Chaplin; Walt Disney",
    "recursionDepth": 17
  },
  {
    "questionIdx": 137204,
    "questionWithBrackets": "What art director did [Otilie Volbracht]'s child influence",
    "questionPatternModEntities": "What art director did M1 's child influence",
    "questionTemplate": "What [NP_SIMPLE] did [entity] 's [ROLE_SIMPLE] [VP_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:film.film_art_director .\n?x0 ns:influence.influence_node.influenced_by ?x1 .\n?x1 ns:people.person.parents|ns:fictional_universe.fictional_character.parents|ns:organization.organization.parent/ns:organization.organization_relationship.parent ns:m.0ksq6w0\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 a M0 .\n?x1 P1 M1\n}",
    "expectedResponse": "Alfred Hitchcock",
    "recursionDepth": 17
  },
  {
    "questionIdx": 62292,
    "questionWithBrackets": "Was [Junction Entertainment] an employer of [BETRAYED]'s cinematographer",
    "questionPatternModEntities": "Was M1 a employer of M0 's cinematographer",
    "questionTemplate": "Was [entity] a [ROLE_SIMPLE] of [entity] 's [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.cinematographer.film ns:m.05d110j .\nns:m.0hfzc42 ns:business.employer.employees/ns:business.employment_tenure.person ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 ?x0\n}",
    "expectedResponse": "No",
    "recursionDepth": 17
  },
  {
    "questionIdx": 155354,
    "questionWithBrackets": "What film director edited [Nombarathi Poovu] and [Dhanam]",
    "questionPatternModEntities": "What film director edited M1 and M2",
    "questionTemplate": "What [NP_SIMPLE] [VP_SIMPLE] [entity] and [entity]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:film.director .\n?x0 ns:film.editor.film ns:m.0fpgl7c .\n?x0 ns:film.editor.film ns:m.0k2h4lw\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 a M0\n}",
    "expectedResponse": "B. Lenin",
    "recursionDepth": 17
  },
  {
    "questionIdx": 156602,
    "questionWithBrackets": "What film editor influenced [Casper Lee]'s parent",
    "questionPatternModEntities": "What film editor influenced M1 's parent",
    "questionTemplate": "What [NP_SIMPLE] [VP_SIMPLE] [entity] 's [ROLE_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:film.editor .\n?x0 ns:influence.influence_node.influenced ?x1 .\n?x1 ns:people.person.children|ns:fictional_universe.fictional_character.children|ns:organization.organization.child/ns:organization.organization_relationship.child ns:m.0lndh2c\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 a M0 .\n?x1 P1 M1\n}",
    "expectedResponse": "Bill Murray",
    "recursionDepth": 17
  },
  {
    "questionIdx": 161691,
    "questionWithBrackets": "What person edited [The Endless Summer II]'s prequel",
    "questionPatternModEntities": "What person edited M1 's prequel",
    "questionTemplate": "What [NP_SIMPLE] [VP_SIMPLE] [entity] 's [ROLE_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:people.person .\n?x0 ns:film.editor.film ?x1 .\n?x1 ns:film.film.sequel ns:m.02vklgp\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 a M0 .\n?x1 P1 M1\n}",
    "expectedResponse": "Bruce Brown",
    "recursionDepth": 17
  },
  {
    "questionIdx": 203520,
    "questionWithBrackets": "Which film producer did [Belmont Industries]'s employee marry",
    "questionPatternModEntities": "Which film producer did M1 's employee marry",
    "questionTemplate": "Which [NP_SIMPLE] did [entity] 's [ROLE_SIMPLE] [VP_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:film.producer .\n?x0 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ?x1 .\n?x1 ns:people.person.employment_history/ns:business.employment_tenure.company ns:m.04c_h7d .\nFILTER ( ?x0 != ?x1 )\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 a M0 .\n?x1 P1 M1 .\nFILTER ( ?x0 != ?x1 )\n}",
    "expectedResponse": "Ellen Barkin; Claudia Cohen",
    "recursionDepth": 17
  },
  {
    "questionIdx": 194649,
    "questionWithBrackets": "Which character did [Hangman Books]'s founder influence",
    "questionPatternModEntities": "Which character did M1 's founder influence",
    "questionTemplate": "Which [NP_SIMPLE] did [entity] 's [ROLE_SIMPLE] [VP_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:fictional_universe.fictional_character .\n?x0 ns:influence.influence_node.influenced_by ?x1 .\n?x1 ns:organization.organization_founder.organizations_founded ns:m.07qm53\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 a M0 .\n?x1 P1 M1\n}",
    "expectedResponse": "Kurt Cobain",
    "recursionDepth": 17
  },
  {
    "questionIdx": 161723,
    "questionWithBrackets": "What person founded [Nancy C. Everett]'s employer",
    "questionPatternModEntities": "What person founded M1 's employer",
    "questionTemplate": "What [NP_SIMPLE] [VP_SIMPLE] [entity] 's [ROLE_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:people.person .\n?x0 ns:organization.organization_founder.organizations_founded ?x1 .\n?x1 ns:business.employer.employees/ns:business.employment_tenure.person ns:m.047hpc8\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 a M0 .\n?x1 P1 M1\n}",
    "expectedResponse": "William C. Durant; Charles Stewart Mott",
    "recursionDepth": 17
  },
  {
    "questionIdx": 31808,
    "questionWithBrackets": "Did a director of [Aviation Vacation] play [Willoughby the Dog]",
    "questionPatternModEntities": "Did a director of M1 play M0",
    "questionTemplate": "Did a [ROLE_SIMPLE] of [entity] [VP_SIMPLE] [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.actor.film/ns:film.performance.character ns:m.09m0ws .\n?x0 ns:film.director.film ns:m.0gg__v\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 17
  },
  {
    "questionIdx": 61486,
    "questionWithBrackets": "Was [Jim Hanks] a sibling of [Riverside Shakespeare Company]'s founder",
    "questionPatternModEntities": "Was M1 a sibling of M0 's founder",
    "questionTemplate": "Was [entity] a [ROLE_SIMPLE] of [entity] 's [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:organization.organization_founder.organizations_founded ns:m.03cyb77 .\nFILTER ( ns:m.085cw4 != ?x0 ) .\nns:m.085cw4 ns:people.person.sibling_s/ns:people.sibling_relationship.sibling|ns:fictional_universe.fictional_character.siblings/ns:fictional_universe.sibling_relationship_of_fictional_characters.siblings ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( M1 != ?x0 ) .\nM1 P1 ?x0\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 17
  },
  {
    "questionIdx": 156608,
    "questionWithBrackets": "What film editor influenced [Eraserhead]'s art director",
    "questionPatternModEntities": "What film editor influenced M1 's art director",
    "questionTemplate": "What [NP_SIMPLE] [VP_SIMPLE] [entity] 's [ROLE_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:film.editor .\n?x0 ns:influence.influence_node.influenced ?x1 .\n?x1 ns:film.film_art_director.films_art_directed ns:m.027jhb\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 a M0 .\n?x1 P1 M1\n}",
    "expectedResponse": "Maya Deren; Jack Smith",
    "recursionDepth": 17
  },
  {
    "questionIdx": 61674,
    "questionWithBrackets": "Was [John C Y. Wang]'s employer an employer of [Saul Bellow]",
    "questionPatternModEntities": "Was M0 's employer a employer of M1",
    "questionTemplate": "Was [entity] 's [ROLE_SIMPLE] a [ROLE_SIMPLE] of [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:business.employer.employees/ns:business.employment_tenure.person ns:m.073v6 .\n?x0 ns:business.employer.employees/ns:business.employment_tenure.person ns:m.0fp96fq\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P0 M1\n}",
    "expectedResponse": "No",
    "recursionDepth": 17
  },
  {
    "questionIdx": 194627,
    "questionWithBrackets": "Which character did [A Trip to the Moon]'s costume designer marry",
    "questionPatternModEntities": "Which character did M1 's costume designer marry",
    "questionTemplate": "Which [NP_SIMPLE] did [entity] 's [ROLE_SIMPLE] [VP_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:fictional_universe.fictional_character .\n?x0 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ?x1 .\n?x1 ns:film.film_costumer_designer.costume_design_for_film ns:m.02ltdy .\nFILTER ( ?x0 != ?x1 )\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 a M0 .\n?x1 P1 M1 .\nFILTER ( ?x0 != ?x1 )\n}",
    "expectedResponse": "Georges M\u00e9li\u00e8s",
    "recursionDepth": 17
  },
  {
    "questionIdx": 52105,
    "questionWithBrackets": "Was [Debra M. Satz] an employee of [Concordia University] and [Pavillon Foster]",
    "questionPatternModEntities": "Was M0 a employee of M1 and M2",
    "questionTemplate": "Was [entity] a [ROLE_SIMPLE] of [entity] and [entity]",
    "sparql": "SELECT count(*) WHERE {\nns:m.0dm5wln ns:people.person.employment_history/ns:business.employment_tenure.company ns:m.0bsnm .\nns:m.0dm5wln ns:people.person.employment_history/ns:business.employment_tenure.company ns:m.0l1634l\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2\n}",
    "expectedResponse": "No",
    "recursionDepth": 17
  },
  {
    "questionIdx": 202668,
    "questionWithBrackets": "Which film editor did [The Heart of Humanity]'s distributor employ",
    "questionPatternModEntities": "Which film editor did M1 's distributor employ",
    "questionTemplate": "Which [NP_SIMPLE] did [entity] 's [ROLE_SIMPLE] [VP_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:film.editor .\n?x0 ns:people.person.employment_history/ns:business.employment_tenure.company ?x1 .\n?x1 ns:film.film_distributor.films_distributed/ns:film.film_film_distributor_relationship.film ns:m.0dgstx9\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 a M0 .\n?x1 P1 M1\n}",
    "expectedResponse": "Steven Spielberg",
    "recursionDepth": 17
  },
  {
    "questionIdx": 50334,
    "questionWithBrackets": "Was [Christian Marquand] a sibling of [Les Pas perdus]'s editor",
    "questionPatternModEntities": "Was M1 a sibling of M0 's editor",
    "questionTemplate": "Was [entity] a [ROLE_SIMPLE] of [entity] 's [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.editor.film ns:m.04yblwb .\nFILTER ( ns:m.07zcqx != ?x0 ) .\nns:m.07zcqx ns:people.person.sibling_s/ns:people.sibling_relationship.sibling|ns:fictional_universe.fictional_character.siblings/ns:fictional_universe.sibling_relationship_of_fictional_characters.siblings ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( M1 != ?x0 ) .\nM1 P1 ?x0\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 17
  },
  {
    "questionIdx": 65868,
    "questionWithBrackets": "Was [Male] a gender of [Initiate Systems]'s employee",
    "questionPatternModEntities": "Was M1 a gender of M0 's employee",
    "questionTemplate": "Was [entity] a [ROLE_SIMPLE] of [entity] 's [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:people.person.employment_history/ns:business.employment_tenure.company ns:m.030r0jf .\nns:m.05zppz ^ns:people.person.gender ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 ?x0\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 17
  },
  {
    "questionIdx": 137364,
    "questionWithBrackets": "What art director married [Modest Reception]'s cinematographer",
    "questionPatternModEntities": "What art director married M1 's cinematographer",
    "questionTemplate": "What [NP_SIMPLE] [VP_SIMPLE] [entity] 's [ROLE_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:film.film_art_director .\n?x0 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ?x1 .\n?x1 ns:film.cinematographer.film ns:m.0j5ychb .\nFILTER ( ?x0 != ?x1 )\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 a M0 .\n?x1 P1 M1 .\nFILTER ( ?x0 != ?x1 )\n}",
    "expectedResponse": "Hedieh Tehr\u0101ni",
    "recursionDepth": 17
  },
  {
    "questionIdx": 201376,
    "questionWithBrackets": "Which film director did [De Tripas, Corazon]'s art director marry",
    "questionPatternModEntities": "Which film director did M1 's art director marry",
    "questionTemplate": "Which [NP_SIMPLE] did [entity] 's [ROLE_SIMPLE] [VP_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:film.director .\n?x0 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ?x1 .\n?x1 ns:film.film_art_director.films_art_directed ns:m.0pdv356 .\nFILTER ( ?x0 != ?x1 )\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 a M0 .\n?x1 P1 M1 .\nFILTER ( ?x0 != ?x1 )\n}",
    "expectedResponse": "Juan Carlos Rulfo",
    "recursionDepth": 17
  },
  {
    "questionIdx": 31303,
    "questionWithBrackets": "Did a costume designer marry [Alignment]'s employee",
    "questionPatternModEntities": "Did a costume designer marry M1 's employee",
    "questionTemplate": "Did a [NP_SIMPLE] [VP_SIMPLE] [entity] 's [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 a ns:film.film_costumer_designer .\n?x0 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ?x1 .\n?x1 ns:people.person.employment_history/ns:business.employment_tenure.company ns:m.02pjmt2 .\nFILTER ( ?x0 != ?x1 )\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x0 a M0 .\n?x1 P1 M1 .\nFILTER ( ?x0 != ?x1 )\n}",
    "expectedResponse": "No",
    "recursionDepth": 18
  },
  {
    "questionIdx": 90757,
    "questionWithBrackets": "Was a Mexican writer of [Duck Season] [Luis Alcoriza]",
    "questionPatternModEntities": "Was a Mexican writer of M1 M0",
    "questionTemplate": "Was a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] [entity]",
    "sparql": "SELECT count(*) WHERE {\nns:m.09_hzr ns:film.writer.film ns:m.08nv9m .\nns:m.09_hzr ns:people.person.nationality ns:m.0b90_r\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M2\n}",
    "expectedResponse": "No",
    "recursionDepth": 18
  },
  {
    "questionIdx": 18661,
    "questionWithBrackets": "Did [Sahara Hare] star an actor's actor",
    "questionPatternModEntities": "Did M1 star a actor 's actor",
    "questionTemplate": "Did [entity] [VP_SIMPLE] a [NP_SIMPLE] 's [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.actor.film/ns:film.performance.character ?x1 .\n?x1 a ns:film.actor .\nns:m.0272ctm ns:film.film.starring/ns:film.performance.actor ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x1 a M0 .\nM1 P1 ?x0\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 18
  },
  {
    "questionIdx": 98560,
    "questionWithBrackets": "Was a film editor's parent's spouse [Andr\u00e9s Carrasco]",
    "questionPatternModEntities": "Was a film editor 's parent 's spouse M1",
    "questionTemplate": "Was a [NP_SIMPLE] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE] [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:people.person.children|ns:fictional_universe.fictional_character.children|ns:organization.organization.child/ns:organization.organization_relationship.child ?x1 .\n?x1 a ns:film.editor .\nFILTER ( ns:m.010pj4w5 != ?x0 ) .\nns:m.010pj4w5 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x1 a M0 .\nFILTER ( M1 != ?x0 ) .\nM1 P1 ?x0\n}",
    "expectedResponse": "No",
    "recursionDepth": 18
  },
  {
    "questionIdx": 159225,
    "questionWithBrackets": "What film was written by [Pixote]'s costume designer",
    "questionPatternModEntities": "What film was written by M1 's costume designer",
    "questionTemplate": "What [NP_SIMPLE] was [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:film.film .\n?x0 ns:film.film.written_by ?x1 .\n?x1 ns:film.film_costumer_designer.costume_design_for_film ns:m.05vb8g\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 a M0 .\n?x1 P1 M1\n}",
    "expectedResponse": "Cafund\u00f3",
    "recursionDepth": 18
  },
  {
    "questionIdx": 47971,
    "questionWithBrackets": "Was [Bj\u00f6rk: Greatest Hits] directed by a costume designer of [Immortals]",
    "questionPatternModEntities": "Was M1 directed by a costume designer of M0",
    "questionTemplate": "Was [entity] [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.film_costumer_designer.costume_design_for_film ns:m.076tw54 .\nns:m.0crx046 ns:film.film.directed_by ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 ?x0\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 18
  },
  {
    "questionIdx": 38950,
    "questionWithBrackets": "Did a screenwriter edit [Oedipus Orca]'s prequel",
    "questionPatternModEntities": "Did a screenwriter edit M1 's prequel",
    "questionTemplate": "Did a [NP_SIMPLE] [VP_SIMPLE] [entity] 's [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 a ns:film.writer .\n?x0 ns:film.editor.film ?x1 .\n?x1 ns:film.film.sequel ns:m.0j3d7jf\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x0 a M0 .\n?x1 P1 M1\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 18
  },
  {
    "questionIdx": 30153,
    "questionWithBrackets": "Did a cinematographer marry [Mike Seeger]'s sibling",
    "questionPatternModEntities": "Did a cinematographer marry M1 's sibling",
    "questionTemplate": "Did a [NP_SIMPLE] [VP_SIMPLE] [entity] 's [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 a ns:film.cinematographer .\n?x0 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ?x1 .\n?x1 ns:people.person.sibling_s/ns:people.sibling_relationship.sibling|ns:fictional_universe.fictional_character.siblings/ns:fictional_universe.sibling_relationship_of_fictional_characters.siblings ns:m.063zcx .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x1 != ns:m.063zcx )\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x0 a M0 .\n?x1 P1 M1 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x1 != M1 )\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 18
  },
  {
    "questionIdx": 31592,
    "questionWithBrackets": "Did a costume designer's parent edit [Lookin' to Get Out]",
    "questionPatternModEntities": "Did a costume designer 's parent edit M0",
    "questionTemplate": "Did a [NP_SIMPLE] 's [ROLE_SIMPLE] [VP_SIMPLE] [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.editor.film ns:m.0by4yw .\n?x0 ns:people.person.children|ns:fictional_universe.fictional_character.children|ns:organization.organization.child/ns:organization.organization_relationship.child ?x1 .\n?x1 a ns:film.film_costumer_designer\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 ?x1 .\n?x1 a M1\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 18
  },
  {
    "questionIdx": 29950,
    "questionWithBrackets": "Did a cinematographer edit [Moan and Groan, Inc.] and [Bromo and Juliet]",
    "questionPatternModEntities": "Did a cinematographer edit M1 and M2",
    "questionTemplate": "Did a [NP_SIMPLE] [VP_SIMPLE] [entity] and [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 a ns:film.cinematographer .\n?x0 ns:film.editor.film ns:m.02z94pg .\n?x0 ns:film.editor.film ns:m.04mytcc\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 a M0\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 18
  },
  {
    "questionIdx": 103718,
    "questionWithBrackets": "Was a person's sibling [Laurent Cazalon]'s sibling",
    "questionPatternModEntities": "Was a person 's sibling M0 's sibling",
    "questionTemplate": "Was a [NP_SIMPLE] 's [ROLE_SIMPLE] [entity] 's [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:people.person.sibling_s/ns:people.sibling_relationship.sibling|ns:fictional_universe.fictional_character.siblings/ns:fictional_universe.sibling_relationship_of_fictional_characters.siblings ?x1 .\n?x0 ns:people.person.sibling_s/ns:people.sibling_relationship.sibling|ns:fictional_universe.fictional_character.siblings/ns:fictional_universe.sibling_relationship_of_fictional_characters.siblings ns:m.0h1f246 .\n?x1 a ns:people.person .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x0 != ns:m.0h1f246 )\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x0 P0 M0 .\n?x1 a M1 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x0 != M0 )\n}",
    "expectedResponse": "No",
    "recursionDepth": 18
  },
  {
    "questionIdx": 5859,
    "questionWithBrackets": "Did [Divide and Conquer] and [Adventures of Don Juan] star an actor",
    "questionPatternModEntities": "Did M1 and M2 star a actor",
    "questionTemplate": "Did [entity] and [entity] [VP_SIMPLE] a [NP_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 a ns:film.actor .\nns:m.0282gtd ns:film.film.starring/ns:film.performance.actor ?x0 .\nns:m.0c7gcz ns:film.film.starring/ns:film.performance.actor ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 a M0 .\nM1 P0 ?x0 .\nM2 P0 ?x0\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 18
  },
  {
    "questionIdx": 90665,
    "questionWithBrackets": "Was a Mexican parent of [Ang\u00e9lica Vale] [Mario Van Peebles]",
    "questionPatternModEntities": "Was a Mexican parent of M2 M0",
    "questionTemplate": "Was a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] [entity]",
    "sparql": "SELECT count(*) WHERE {\nns:m.036qs_ ns:people.person.children|ns:fictional_universe.fictional_character.children|ns:organization.organization.child/ns:organization.organization_relationship.child ns:m.09wxdd .\nns:m.036qs_ ns:people.person.nationality ns:m.0b90_r\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M2\n}",
    "expectedResponse": "No",
    "recursionDepth": 18
  },
  {
    "questionIdx": 38131,
    "questionWithBrackets": "Did a person's employer employ [Pierre Capretz]",
    "questionPatternModEntities": "Did a person 's employer employ M0",
    "questionTemplate": "Did a [NP_SIMPLE] 's [ROLE_SIMPLE] [VP_SIMPLE] [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:business.employer.employees/ns:business.employment_tenure.person ?x1 .\n?x0 ns:business.employer.employees/ns:business.employment_tenure.person ns:m.05vj6z .\n?x1 a ns:people.person\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x0 P0 M0 .\n?x1 a M1\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 18
  },
  {
    "questionIdx": 73631,
    "questionWithBrackets": "Was [Regine B\u00e4tz] a German costume designer of [Ach du lieber Harry]",
    "questionPatternModEntities": "Was M0 a German costume designer of M1",
    "questionTemplate": "Was [entity] a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
    "sparql": "SELECT count(*) WHERE {\nns:m.0byp8rd ns:film.film_costumer_designer.costume_design_for_film ns:m.0hn9937 .\nns:m.0byp8rd ns:people.person.nationality ns:m.0345h\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M2\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 18
  },
  {
    "questionIdx": 16894,
    "questionWithBrackets": "Did [Photo-Romance]'s director edit a film",
    "questionPatternModEntities": "Did M0 's director edit a film",
    "questionTemplate": "Did [entity] 's [ROLE_SIMPLE] [VP_SIMPLE] a [NP_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.director.film ns:m.0n4qjr1 .\n?x0 ns:film.editor.film ?x1 .\n?x1 a ns:film.film\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x0 P1 M0 .\n?x1 a M1\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 18
  },
  {
    "questionIdx": 16266,
    "questionWithBrackets": "Did [Our Stories Films] employ an actor's spouse",
    "questionPatternModEntities": "Did M1 employ a actor 's spouse",
    "questionTemplate": "Did [entity] [VP_SIMPLE] a [NP_SIMPLE] 's [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ?x1 .\n?x1 a ns:film.actor .\nFILTER ( ?x0 != ?x1 ) .\nns:m.02r2ks4 ns:business.employer.employees/ns:business.employment_tenure.person ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x1 a M0 .\nFILTER ( ?x0 != ?x1 ) .\nM1 P1 ?x0\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 18
  },
  {
    "questionIdx": 192348,
    "questionWithBrackets": "Which Swedish film director produced [Light Keeps Me Company]",
    "questionPatternModEntities": "Which Swedish film director produced M2",
    "questionTemplate": "Which [ADJECTIVE_SIMPLE] [NP_SIMPLE] [VP_SIMPLE] [entity]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:film.director .\n?x0 ns:film.producer.film|ns:film.production_company.films ns:m.02sdhn7 .\n?x0 ns:people.person.nationality ns:m.0d0vqn\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M1 .\n?x0 P1 M2 .\n?x0 a M0\n}",
    "expectedResponse": "Carl-Gustav Nykvist",
    "recursionDepth": 18
  },
  {
    "questionIdx": 190611,
    "questionWithBrackets": "Which Italian screenwriter edited [3 Supermen Against Godfather]",
    "questionPatternModEntities": "Which Italian screenwriter edited M1",
    "questionTemplate": "Which [ADJECTIVE_SIMPLE] [NP_SIMPLE] [VP_SIMPLE] [entity]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:film.writer .\n?x0 ns:film.editor.film ns:m.03cpgx1 .\n?x0 ns:people.person.nationality ns:m.03rjj\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M1 .\n?x0 P1 M2 .\n?x0 a M0\n}",
    "expectedResponse": "Italo Martinenghi",
    "recursionDepth": 18
  },
  {
    "questionIdx": 25742,
    "questionWithBrackets": "Did [Zero Skateboards]'s employee found a company",
    "questionPatternModEntities": "Did M0 's employee found a company",
    "questionTemplate": "Did [entity] 's [ROLE_SIMPLE] [VP_SIMPLE] a [NP_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:organization.organization_founder.organizations_founded ?x1 .\n?x0 ns:people.person.employment_history/ns:business.employment_tenure.company ns:m.09lwcj .\n?x1 a ns:business.employer\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 ?x1 .\n?x1 a M1\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 18
  },
  {
    "questionIdx": 52341,
    "questionWithBrackets": "Was [Derrick Burbank] a company's employee's sibling",
    "questionPatternModEntities": "Was M1 a company 's employee 's sibling",
    "questionTemplate": "Was [entity] a [NP_SIMPLE] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:people.person.employment_history/ns:business.employment_tenure.company ?x1 .\n?x1 a ns:business.employer .\nFILTER ( ns:m.010vst1s != ?x0 ) .\nns:m.010vst1s ns:people.person.sibling_s/ns:people.sibling_relationship.sibling|ns:fictional_universe.fictional_character.siblings/ns:fictional_universe.sibling_relationship_of_fictional_characters.siblings ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x1 a M0 .\nFILTER ( M1 != ?x0 ) .\nM1 P1 ?x0\n}",
    "expectedResponse": "No",
    "recursionDepth": 18
  },
  {
    "questionIdx": 30038,
    "questionWithBrackets": "Did a cinematographer found [Peter Odabashian]'s employer",
    "questionPatternModEntities": "Did a cinematographer found M1 's employer",
    "questionTemplate": "Did a [NP_SIMPLE] [VP_SIMPLE] [entity] 's [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 a ns:film.cinematographer .\n?x0 ns:organization.organization_founder.organizations_founded ?x1 .\n?x1 ns:business.employer.employees/ns:business.employment_tenure.person ns:m.06mg81v\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x0 a M0 .\n?x1 P1 M1\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 18
  },
  {
    "questionIdx": 141722,
    "questionWithBrackets": "What did [Aamir Khan Productions]'s employee's spouse direct",
    "questionPatternModEntities": "What did M0 's employee 's spouse direct",
    "questionTemplate": "What did [entity] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE] [VP_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.film.directed_by ?x1 .\n?x1 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ?x2 .\n?x2 ns:people.person.employment_history/ns:business.employment_tenure.company ns:m.03h4rzr .\nFILTER ( ?x1 != ?x2 )\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x1 P1 ?x2 .\n?x2 P2 M0 .\nFILTER ( ?x1 != ?x2 )\n}",
    "expectedResponse": "Mumbai Diaries",
    "recursionDepth": 18
  },
  {
    "questionIdx": 190831,
    "questionWithBrackets": "Which Japanese cinematographer directed [Shinjuku Outlaw]",
    "questionPatternModEntities": "Which Japanese cinematographer directed M2",
    "questionTemplate": "Which [ADJECTIVE_SIMPLE] [NP_SIMPLE] [VP_SIMPLE] [entity]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:film.cinematographer .\n?x0 ns:film.director.film ns:m.0285l7x .\n?x0 ns:people.person.nationality ns:m.03_3d\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M1 .\n?x0 P1 M2 .\n?x0 a M0\n}",
    "expectedResponse": "Takashi Miike",
    "recursionDepth": 18
  },
  {
    "questionIdx": 189171,
    "questionWithBrackets": "Which Dutch film producer founded [Stage Holding]",
    "questionPatternModEntities": "Which Dutch film producer founded M1",
    "questionTemplate": "Which [ADJECTIVE_SIMPLE] [NP_SIMPLE] [VP_SIMPLE] [entity]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:film.producer .\n?x0 ns:organization.organization_founder.organizations_founded ns:m.0kcpwrh .\n?x0 ns:people.person.nationality ns:m.059j2\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M1 .\n?x0 P1 M2 .\n?x0 a M0\n}",
    "expectedResponse": "Joop van den Ende",
    "recursionDepth": 18
  },
  {
    "questionIdx": 135932,
    "questionWithBrackets": "What Swedish screenwriter founded [Tre Vanner Produktion AB]",
    "questionPatternModEntities": "What Swedish screenwriter founded M1",
    "questionTemplate": "What [ADJECTIVE_SIMPLE] [NP_SIMPLE] [VP_SIMPLE] [entity]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:film.writer .\n?x0 ns:organization.organization_founder.organizations_founded ns:m.0f12tqy .\n?x0 ns:people.person.nationality ns:m.0d0vqn\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M1 .\n?x0 P1 M2 .\n?x0 a M0\n}",
    "expectedResponse": "Michael Hjorth",
    "recursionDepth": 18
  },
  {
    "questionIdx": 192483,
    "questionWithBrackets": "Which Swedish screenwriter married [Ulla \u00c5berg]",
    "questionPatternModEntities": "Which Swedish screenwriter married M2",
    "questionTemplate": "Which [ADJECTIVE_SIMPLE] [NP_SIMPLE] [VP_SIMPLE] [entity]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:film.writer .\n?x0 ns:people.person.nationality ns:m.0d0vqn .\n?x0 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ns:m.0n6673q .\nFILTER ( ?x0 != ns:m.0n6673q )\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M1 .\n?x0 P1 M2 .\n?x0 a M0 .\nFILTER ( ?x0 != M2 )\n}",
    "expectedResponse": "Erland Josephson",
    "recursionDepth": 18
  },
  {
    "questionIdx": 191747,
    "questionWithBrackets": "Which Spanish actor wrote [Horror Rises from the Tomb]",
    "questionPatternModEntities": "Which Spanish actor wrote M1",
    "questionTemplate": "Which [ADJECTIVE_SIMPLE] [NP_SIMPLE] [VP_SIMPLE] [entity]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:film.actor .\n?x0 ns:film.writer.film ns:m.04gmms3 .\n?x0 ns:people.person.nationality ns:m.06mkj\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M1 .\n?x0 P1 M2 .\n?x0 a M0\n}",
    "expectedResponse": "Paul Naschy",
    "recursionDepth": 18
  },
  {
    "questionIdx": 18653,
    "questionWithBrackets": "Did [Sadat]'s star found a company",
    "questionPatternModEntities": "Did M0 's star found a company",
    "questionTemplate": "Did [entity] 's [ROLE_SIMPLE] [VP_SIMPLE] a [NP_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.actor.film/ns:film.performance.film ns:m.05zvmg0 .\n?x0 ns:organization.organization_founder.organizations_founded ?x1 .\n?x1 a ns:business.employer\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x0 P1 M0 .\n?x1 a M1\n}",
    "expectedResponse": "No",
    "recursionDepth": 18
  },
  {
    "questionIdx": 191941,
    "questionWithBrackets": "Which Spanish film editor edited [Ana and the Wolves]",
    "questionPatternModEntities": "Which Spanish film editor edited M1",
    "questionTemplate": "Which [ADJECTIVE_SIMPLE] [NP_SIMPLE] [VP_SIMPLE] [entity]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:film.editor .\n?x0 ns:film.editor.film ns:m.02wx4vb .\n?x0 ns:people.person.nationality ns:m.06mkj\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M1 .\n?x0 P1 M2 .\n?x0 a M0\n}",
    "expectedResponse": "Pablo Gonz\u00e1lez del Amo",
    "recursionDepth": 18
  },
  {
    "questionIdx": 87406,
    "questionWithBrackets": "Was [Yash Raj Films International] a production company's employee's employer",
    "questionPatternModEntities": "Was M1 a production company 's employee 's employer",
    "questionTemplate": "Was [entity] a [NP_SIMPLE] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:people.person.employment_history/ns:business.employment_tenure.company ?x1 .\n?x1 a ns:film.production_company .\nns:m.09rxthq ns:business.employer.employees/ns:business.employment_tenure.person ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x1 a M0 .\nM1 P1 ?x0\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 18
  },
  {
    "questionIdx": 106957,
    "questionWithBrackets": "Was a writer and cinematographer of [The Fire Island Kids] [Mike Kuchar]",
    "questionPatternModEntities": "Was a writer and cinematographer of M1 M0",
    "questionTemplate": "Was a [ROLE_SIMPLE] and [ROLE_SIMPLE] of [entity] [entity]",
    "sparql": "SELECT count(*) WHERE {\nns:m.05p4fcd ns:film.cinematographer.film ns:m.0jmqczv .\nns:m.05p4fcd ns:film.writer.film ns:m.0jmqczv\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1\n}",
    "expectedResponse": "No",
    "recursionDepth": 18
  },
  {
    "questionIdx": 219529,
    "questionWithBrackets": "Who influenced an Italian art director",
    "questionPatternModEntities": "Who influenced a Italian art director",
    "questionTemplate": "Who [VP_SIMPLE] a [ADJECTIVE_SIMPLE] [NP_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:people.person .\n?x0 ns:influence.influence_node.influenced ?x1 .\n?x1 a ns:film.film_art_director .\n?x1 ns:people.person.nationality ns:m.03rjj\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 a M0 .\n?x1 P1 M2 .\n?x1 a M1\n}",
    "expectedResponse": "Anthony Burgess",
    "recursionDepth": 18
  },
  {
    "questionIdx": 35108,
    "questionWithBrackets": "Did a film producer's employer produce [Florida vs. Georgia 2008]",
    "questionPatternModEntities": "Did a film producer 's employer produce M0",
    "questionTemplate": "Did a [NP_SIMPLE] 's [ROLE_SIMPLE] [VP_SIMPLE] [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:business.employer.employees/ns:business.employment_tenure.person ?x1 .\n?x0 ns:film.producer.film|ns:film.production_company.films ns:m.0cs7c0x .\n?x1 a ns:film.producer\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x0 P1 M0 .\n?x1 a M1\n}",
    "expectedResponse": "No",
    "recursionDepth": 18
  },
  {
    "questionIdx": 204298,
    "questionWithBrackets": "Which film producer was acquired by a company",
    "questionPatternModEntities": "Which film producer was acquired by a company",
    "questionTemplate": "Which [NP_SIMPLE] was [VP_SIMPLE] by a [NP_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:film.producer .\n?x0 ns:organization.organization.acquired_by/ns:business.acquisition.acquiring_company ?x1 .\n?x1 a ns:business.employer\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 a M0 .\n?x1 a M1\n}",
    "expectedResponse": "Vivendi; Good Machine",
    "recursionDepth": 18
  },
  {
    "questionIdx": 42085,
    "questionWithBrackets": "Did an art director's employer produce [Partners: Fitness]",
    "questionPatternModEntities": "Did a art director 's employer produce M0",
    "questionTemplate": "Did a [NP_SIMPLE] 's [ROLE_SIMPLE] [VP_SIMPLE] [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:business.employer.employees/ns:business.employment_tenure.person ?x1 .\n?x0 ns:film.producer.film|ns:film.production_company.films ns:m.0cs1141 .\n?x1 a ns:film.film_art_director\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x0 P1 M0 .\n?x1 a M1\n}",
    "expectedResponse": "No",
    "recursionDepth": 18
  },
  {
    "questionIdx": 61186,
    "questionWithBrackets": "Was [Jean Louis] a French costume designer of [You Gotta Stay Happy]",
    "questionPatternModEntities": "Was M0 a French costume designer of M1",
    "questionTemplate": "Was [entity] a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
    "sparql": "SELECT count(*) WHERE {\nns:m.0b80__ ns:film.film_costumer_designer.costume_design_for_film ns:m.05pcc0c .\nns:m.0b80__ ns:people.person.nationality ns:m.0f8l9c\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M2\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 18
  },
  {
    "questionIdx": 30466,
    "questionWithBrackets": "Did a cinematographer's employer employ [John Henry Comstock]",
    "questionPatternModEntities": "Did a cinematographer 's employer employ M0",
    "questionTemplate": "Did a [NP_SIMPLE] 's [ROLE_SIMPLE] [VP_SIMPLE] [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:business.employer.employees/ns:business.employment_tenure.person ?x1 .\n?x0 ns:business.employer.employees/ns:business.employment_tenure.person ns:m.0636_3 .\n?x1 a ns:film.cinematographer\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x0 P0 M0 .\n?x1 a M1\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 18
  },
  {
    "questionIdx": 93155,
    "questionWithBrackets": "Was a cinematographer's parent [Alberto Paderni]'s parent",
    "questionPatternModEntities": "Was a cinematographer 's parent M0 's parent",
    "questionTemplate": "Was a [NP_SIMPLE] 's [ROLE_SIMPLE] [entity] 's [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:people.person.children|ns:fictional_universe.fictional_character.children|ns:organization.organization.child/ns:organization.organization_relationship.child ?x1 .\n?x0 ns:people.person.children|ns:fictional_universe.fictional_character.children|ns:organization.organization.child/ns:organization.organization_relationship.child ns:m.011nwc8m .\n?x1 a ns:film.cinematographer\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x0 P0 M0 .\n?x1 a M1\n}",
    "expectedResponse": "No",
    "recursionDepth": 18
  },
  {
    "questionIdx": 157564,
    "questionWithBrackets": "What film producer executive produced [Fast Five]'s prequel",
    "questionPatternModEntities": "What film producer executive produced M1 's prequel",
    "questionTemplate": "What [NP_SIMPLE] [VP_SIMPLE] [entity] 's [ROLE_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:film.producer .\n?x0 ns:film.producer.films_executive_produced ?x1 .\n?x1 ns:film.film.sequel ns:m.0bq6ntw\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 a M0 .\n?x1 P1 M1\n}",
    "expectedResponse": "Samantha Vincent; Amanda Lewis",
    "recursionDepth": 18
  },
  {
    "questionIdx": 38256,
    "questionWithBrackets": "Did a person's spouse edit [A Monkey in Winter]",
    "questionPatternModEntities": "Did a person 's spouse edit M0",
    "questionTemplate": "Did a [NP_SIMPLE] 's [ROLE_SIMPLE] [VP_SIMPLE] [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.editor.film ns:m.0pc32lm .\n?x0 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ?x1 .\n?x1 a ns:people.person .\nFILTER ( ?x0 != ?x1 )\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 ?x1 .\n?x1 a M1 .\nFILTER ( ?x0 != ?x1 )\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 18
  },
  {
    "questionIdx": 60888,
    "questionWithBrackets": "Was [Jan E. Goldstein]'s employer a character's employer",
    "questionPatternModEntities": "Was M0 's employer a character 's employer",
    "questionTemplate": "Was [entity] 's [ROLE_SIMPLE] a [NP_SIMPLE] 's [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:business.employer.employees/ns:business.employment_tenure.person ?x1 .\n?x0 ns:business.employer.employees/ns:business.employment_tenure.person ns:m.03mdnx8 .\n?x1 a ns:fictional_universe.fictional_character\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x0 P0 M0 .\n?x1 a M1\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 18
  },
  {
    "questionIdx": 190298,
    "questionWithBrackets": "Which Italian cinematographer did [Story of a Peculiar Night] star",
    "questionPatternModEntities": "Which Italian cinematographer did M2 star",
    "questionTemplate": "Which [ADJECTIVE_SIMPLE] [NP_SIMPLE] did [entity] [VP_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:film.cinematographer .\n?x0 ns:film.actor.film/ns:film.performance.film ns:m.0_h8n_h .\n?x0 ns:people.person.nationality ns:m.03rjj\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M1 .\n?x0 P1 M2 .\n?x0 a M0\n}",
    "expectedResponse": "Michelangelo Antonioni",
    "recursionDepth": 18
  },
  {
    "questionIdx": 35176,
    "questionWithBrackets": "Did a film producer's founder write [Stars Over the Window]",
    "questionPatternModEntities": "Did a film producer 's founder write M0",
    "questionTemplate": "Did a [NP_SIMPLE] 's [ROLE_SIMPLE] [VP_SIMPLE] [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.writer.film ns:m.0gkszsd .\n?x0 ns:organization.organization_founder.organizations_founded ?x1 .\n?x1 a ns:film.producer\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 ?x1 .\n?x1 a M1\n}",
    "expectedResponse": "No",
    "recursionDepth": 18
  },
  {
    "questionIdx": 42143,
    "questionWithBrackets": "Did an art director's sibling produce [Ghutan]",
    "questionPatternModEntities": "Did a art director 's sibling produce M0",
    "questionTemplate": "Did a [NP_SIMPLE] 's [ROLE_SIMPLE] [VP_SIMPLE] [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.producer.film|ns:film.production_company.films ns:m.04j0ftm .\n?x0 ns:people.person.sibling_s/ns:people.sibling_relationship.sibling|ns:fictional_universe.fictional_character.siblings/ns:fictional_universe.sibling_relationship_of_fictional_characters.siblings ?x1 .\n?x1 a ns:film.film_art_director .\nFILTER ( ?x0 != ?x1 )\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x0 P1 M0 .\n?x1 a M1 .\nFILTER ( ?x0 != ?x1 )\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 18
  },
  {
    "questionIdx": 1710,
    "questionWithBrackets": "Did [Arlette Langmann]'s sibling marry a costume designer",
    "questionPatternModEntities": "Did M0 's sibling marry a costume designer",
    "questionTemplate": "Did [entity] 's [ROLE_SIMPLE] [VP_SIMPLE] a [NP_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:people.person.sibling_s/ns:people.sibling_relationship.sibling|ns:fictional_universe.fictional_character.siblings/ns:fictional_universe.sibling_relationship_of_fictional_characters.siblings ns:m.02pjs7 .\n?x0 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ?x1 .\n?x1 a ns:film.film_costumer_designer .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x0 != ns:m.02pjs7 )\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 ?x1 .\n?x1 a M1 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x0 != M0 )\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 18
  },
  {
    "questionIdx": 34062,
    "questionWithBrackets": "Did a film editor marry [Nadia Sibirska\u00efa] and [Virginia Lovisone]",
    "questionPatternModEntities": "Did a film editor marry M1 and M2",
    "questionTemplate": "Did a [NP_SIMPLE] [VP_SIMPLE] [entity] and [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 a ns:film.editor .\n?x0 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ns:g.122n5yrq .\n?x0 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ns:m.0j_pzpl .\nFILTER ( ?x0 != ns:g.122n5yrq ) .\nFILTER ( ?x0 != ns:m.0j_pzpl )\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 a M0 .\nFILTER ( ?x0 != M1 ) .\nFILTER ( ?x0 != M2 )\n}",
    "expectedResponse": "No",
    "recursionDepth": 18
  },
  {
    "questionIdx": 190330,
    "questionWithBrackets": "Which Italian costume designer edited [Melissa P.]",
    "questionPatternModEntities": "Which Italian costume designer edited M1",
    "questionTemplate": "Which [ADJECTIVE_SIMPLE] [NP_SIMPLE] [VP_SIMPLE] [entity]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:film.film_costumer_designer .\n?x0 ns:film.editor.film ns:m.0h3w5rl .\n?x0 ns:people.person.nationality ns:m.03rjj\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M1 .\n?x0 P1 M2 .\n?x0 a M0\n}",
    "expectedResponse": "Walter Fasano",
    "recursionDepth": 18
  },
  {
    "questionIdx": 98508,
    "questionWithBrackets": "Was a film editor's employer's employee [Michael Wildman]",
    "questionPatternModEntities": "Was a film editor 's employer 's employee M1",
    "questionTemplate": "Was a [NP_SIMPLE] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE] [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:business.employer.employees/ns:business.employment_tenure.person ?x1 .\n?x1 a ns:film.editor .\nns:m.0b7bbn ns:people.person.employment_history/ns:business.employment_tenure.company ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x1 a M0 .\nM1 P1 ?x0\n}",
    "expectedResponse": "No",
    "recursionDepth": 18
  },
  {
    "questionIdx": 92536,
    "questionWithBrackets": "Was a cinematographer and producer of [Vacationland] [Todd Verow]",
    "questionPatternModEntities": "Was a cinematographer and producer of M1 M0",
    "questionTemplate": "Was a [ROLE_SIMPLE] and [ROLE_SIMPLE] of [entity] [entity]",
    "sparql": "SELECT count(*) WHERE {\nns:m.0kss7z ns:film.cinematographer.film ns:m.0fy7l8 .\nns:m.0kss7z ns:film.producer.film|ns:film.production_company.films ns:m.0fy7l8\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 18
  },
  {
    "questionIdx": 61767,
    "questionWithBrackets": "Was [John M. Nickolaus] an art director's parent's parent",
    "questionPatternModEntities": "Was M1 a art director 's parent 's parent",
    "questionTemplate": "Was [entity] a [NP_SIMPLE] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:people.person.children|ns:fictional_universe.fictional_character.children|ns:organization.organization.child/ns:organization.organization_relationship.child ?x1 .\n?x1 a ns:film.film_art_director .\nns:m.0jvc50h ns:people.person.children|ns:fictional_universe.fictional_character.children|ns:organization.organization.child/ns:organization.organization_relationship.child ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x1 a M0 .\nM1 P0 ?x0\n}",
    "expectedResponse": "No",
    "recursionDepth": 18
  },
  {
    "questionIdx": 93880,
    "questionWithBrackets": "Was a company's founder's employer [Satanic Skinhead Propaganda]",
    "questionPatternModEntities": "Was a company 's founder 's employer M1",
    "questionTemplate": "Was a [NP_SIMPLE] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE] [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:organization.organization_founder.organizations_founded ?x1 .\n?x1 a ns:business.employer .\nns:m.0nkkpj0 ns:business.employer.employees/ns:business.employment_tenure.person ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x1 a M0 .\nM1 P1 ?x0\n}",
    "expectedResponse": "No",
    "recursionDepth": 18
  },
  {
    "questionIdx": 132643,
    "questionWithBrackets": "What French actor did [Jorge Luis Borges] influence",
    "questionPatternModEntities": "What French actor did M1 influence",
    "questionTemplate": "What [ADJECTIVE_SIMPLE] [NP_SIMPLE] did [entity] [VP_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:film.actor .\n?x0 ns:influence.influence_node.influenced_by ns:m.040db .\n?x0 ns:people.person.nationality ns:m.0f8l9c\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M1 .\n?x0 P1 M2 .\n?x0 a M0\n}",
    "expectedResponse": "Julio Cort\u00e1zar",
    "recursionDepth": 18
  },
  {
    "questionIdx": 214871,
    "questionWithBrackets": "Who did [Rush Communications]'s founder's sibling marry",
    "questionPatternModEntities": "Who did M1 's founder 's sibling marry",
    "questionTemplate": "Who did [entity] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE] [VP_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:people.person .\n?x0 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ?x1 .\n?x1 ns:people.person.sibling_s/ns:people.sibling_relationship.sibling|ns:fictional_universe.fictional_character.siblings/ns:fictional_universe.sibling_relationship_of_fictional_characters.siblings ?x2 .\n?x2 ns:organization.organization_founder.organizations_founded ns:m.0dq18c .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x1 != ?x2 )\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 a M0 .\n?x1 P1 ?x2 .\n?x2 P2 M1 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x1 != ?x2 )\n}",
    "expectedResponse": "Justine Simmons; Valerie Vaughn",
    "recursionDepth": 18
  },
  {
    "questionIdx": 131598,
    "questionWithBrackets": "What Canadian film director produced [Voyage Of Terror]",
    "questionPatternModEntities": "What Canadian film director produced M2",
    "questionTemplate": "What [ADJECTIVE_SIMPLE] [NP_SIMPLE] [VP_SIMPLE] [entity]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:film.director .\n?x0 ns:film.producer.film|ns:film.production_company.films ns:m.04_62lw .\n?x0 ns:people.person.nationality ns:m.0d060g\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M1 .\n?x0 P1 M2 .\n?x0 a M0\n}",
    "expectedResponse": "James Shavick",
    "recursionDepth": 18
  },
  {
    "questionIdx": 90181,
    "questionWithBrackets": "Was a Japanese costume designer of [Sawako Decides] [Kyoko Baba]",
    "questionPatternModEntities": "Was a Japanese costume designer of M1 M0",
    "questionTemplate": "Was a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] [entity]",
    "sparql": "SELECT count(*) WHERE {\nns:m.0j0q0k2 ns:film.film_costumer_designer.costume_design_for_film ns:m.0bdt3tf .\nns:m.0j0q0k2 ns:people.person.nationality ns:m.03_3d\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M2\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 18
  },
  {
    "questionIdx": 189432,
    "questionWithBrackets": "Which French cinematographer did [Poup\u00e9e Andriot] marry",
    "questionPatternModEntities": "Which French cinematographer did M2 marry",
    "questionTemplate": "Which [ADJECTIVE_SIMPLE] [NP_SIMPLE] did [entity] [VP_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:film.cinematographer .\n?x0 ns:people.person.nationality ns:m.0f8l9c .\n?x0 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ns:m.0hp86gd .\nFILTER ( ?x0 != ns:m.0hp86gd )\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M1 .\n?x0 P1 M2 .\n?x0 a M0 .\nFILTER ( ?x0 != M2 )\n}",
    "expectedResponse": "Lucien N. Andriot",
    "recursionDepth": 18
  },
  {
    "questionIdx": 30416,
    "questionWithBrackets": "Did a cinematographer's child edit [Peace Out]",
    "questionPatternModEntities": "Did a cinematographer 's child edit M0",
    "questionTemplate": "Did a [NP_SIMPLE] 's [ROLE_SIMPLE] [VP_SIMPLE] [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.editor.film ns:m.0kfb7nb .\n?x0 ns:people.person.parents|ns:fictional_universe.fictional_character.parents|ns:organization.organization.parent/ns:organization.organization_relationship.parent ?x1 .\n?x1 a ns:film.cinematographer\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 ?x1 .\n?x1 a M1\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 18
  },
  {
    "questionIdx": 32904,
    "questionWithBrackets": "Did a film director influence [Three... Extremes]'s director",
    "questionPatternModEntities": "Did a film director influence M1 's director",
    "questionTemplate": "Did a [NP_SIMPLE] [VP_SIMPLE] [entity] 's [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 a ns:film.director .\n?x0 ns:influence.influence_node.influenced ?x1 .\n?x1 ns:film.director.film ns:m.06cm6h\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x0 a M0 .\n?x1 P1 M1\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 18
  },
  {
    "questionIdx": 104750,
    "questionWithBrackets": "Was a production company's founder's child [Yahoo! Deutschland GmbH]",
    "questionPatternModEntities": "Was a production company 's founder 's child M1",
    "questionTemplate": "Was a [NP_SIMPLE] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE] [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:organization.organization_founder.organizations_founded ?x1 .\n?x1 a ns:film.production_company .\nns:m.09m30l6 ns:people.person.parents|ns:fictional_universe.fictional_character.parents|ns:organization.organization.parent/ns:organization.organization_relationship.parent ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x1 a M0 .\nM1 P1 ?x0\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 18
  },
  {
    "questionIdx": 91827,
    "questionWithBrackets": "Was a character's employer's parent [Arsinoe of Macedon]",
    "questionPatternModEntities": "Was a character 's employer 's parent M1",
    "questionTemplate": "Was a [NP_SIMPLE] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE] [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:business.employer.employees/ns:business.employment_tenure.person ?x1 .\n?x1 a ns:fictional_universe.fictional_character .\nns:m.080zxh ns:people.person.children|ns:fictional_universe.fictional_character.children|ns:organization.organization.child/ns:organization.organization_relationship.child ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x1 a M0 .\nM1 P1 ?x0\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 18
  },
  {
    "questionIdx": 10182,
    "questionWithBrackets": "Did [In a Year of 13 Moons]'s cinematographer influence a cinematographer",
    "questionPatternModEntities": "Did M0 's cinematographer influence a cinematographer",
    "questionTemplate": "Did [entity] 's [ROLE_SIMPLE] [VP_SIMPLE] a [NP_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.cinematographer.film ns:m.04gkf3c .\n?x0 ns:influence.influence_node.influenced ?x1 .\n?x1 a ns:film.cinematographer\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x0 P1 M0 .\n?x1 a M1\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 18
  },
  {
    "questionIdx": 190341,
    "questionWithBrackets": "Which Italian costume designer played [Vincenzo Brown]",
    "questionPatternModEntities": "Which Italian costume designer played M2",
    "questionTemplate": "Which [ADJECTIVE_SIMPLE] [NP_SIMPLE] [VP_SIMPLE] [entity]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:film.film_costumer_designer .\n?x0 ns:film.actor.film/ns:film.performance.character ns:m.0h2y6wy .\n?x0 ns:people.person.nationality ns:m.03rjj\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M1 .\n?x0 P1 M2 .\n?x0 a M0\n}",
    "expectedResponse": "Vincent Gallo",
    "recursionDepth": 18
  },
  {
    "questionIdx": 197784,
    "questionWithBrackets": "Which costume designer was a Spanish cinematographer",
    "questionPatternModEntities": "Which costume designer was a Spanish cinematographer",
    "questionTemplate": "Which [NP_SIMPLE] was a [ADJECTIVE_SIMPLE] [NP_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:film.cinematographer .\n?x0 a ns:film.film_costumer_designer .\n?x0 ns:people.person.nationality ns:m.06mkj\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M2 .\n?x0 a M0 .\n?x0 a M1\n}",
    "expectedResponse": "David Mu\u00f1oz",
    "recursionDepth": 18
  },
  {
    "questionIdx": 135138,
    "questionWithBrackets": "What Spanish art director played [Zaldu]",
    "questionPatternModEntities": "What Spanish art director played M2",
    "questionTemplate": "What [ADJECTIVE_SIMPLE] [NP_SIMPLE] [VP_SIMPLE] [entity]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:film.film_art_director .\n?x0 ns:film.actor.film/ns:film.performance.character ns:m.0x1qz30 .\n?x0 ns:people.person.nationality ns:m.06mkj\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M1 .\n?x0 P1 M2 .\n?x0 a M0\n}",
    "expectedResponse": "Gonzalo Gonzalo",
    "recursionDepth": 18
  },
  {
    "questionIdx": 188743,
    "questionWithBrackets": "Which Chinese film director married [Wen-chi Po]",
    "questionPatternModEntities": "Which Chinese film director married M2",
    "questionTemplate": "Which [ADJECTIVE_SIMPLE] [NP_SIMPLE] [VP_SIMPLE] [entity]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:film.director .\n?x0 ns:people.person.nationality ns:m.0d05w3 .\n?x0 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ns:m.0yjjx52 .\nFILTER ( ?x0 != ns:m.0yjjx52 )\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M1 .\n?x0 P1 M2 .\n?x0 a M0 .\nFILTER ( ?x0 != M2 )\n}",
    "expectedResponse": "Pao-Shu Kao",
    "recursionDepth": 18
  },
  {
    "questionIdx": 188762,
    "questionWithBrackets": "Which Chinese film editor did [Esther Kwan] marry",
    "questionPatternModEntities": "Which Chinese film editor did M2 marry",
    "questionTemplate": "Which [ADJECTIVE_SIMPLE] [NP_SIMPLE] did [entity] [VP_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:film.editor .\n?x0 ns:people.person.nationality ns:m.0d05w3 .\n?x0 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ns:m.03hpbx_ .\nFILTER ( ?x0 != ns:m.03hpbx_ )\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M1 .\n?x0 P1 M2 .\n?x0 a M0 .\nFILTER ( ?x0 != M2 )\n}",
    "expectedResponse": "Nick Cheung",
    "recursionDepth": 18
  },
  {
    "questionIdx": 219149,
    "questionWithBrackets": "Who influenced a Mexican cinematographer",
    "questionPatternModEntities": "Who influenced a Mexican cinematographer",
    "questionTemplate": "Who [VP_SIMPLE] a [ADJECTIVE_SIMPLE] [NP_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:people.person .\n?x0 ns:influence.influence_node.influenced ?x1 .\n?x1 a ns:film.cinematographer .\n?x1 ns:people.person.nationality ns:m.0b90_r\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 a M0 .\n?x1 P1 M2 .\n?x1 a M1\n}",
    "expectedResponse": "Fernand Braudel; Gilles Deleuze",
    "recursionDepth": 18
  },
  {
    "questionIdx": 38205,
    "questionWithBrackets": "Did a person's parent found [G\u00e9n\u00e9rale Occidentale]",
    "questionPatternModEntities": "Did a person 's parent found M0",
    "questionTemplate": "Did a [NP_SIMPLE] 's [ROLE_SIMPLE] [VP_SIMPLE] [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:organization.organization_founder.organizations_founded ns:m.012m5sdq .\n?x0 ns:people.person.children|ns:fictional_universe.fictional_character.children|ns:organization.organization.child/ns:organization.organization_relationship.child ?x1 .\n?x1 a ns:people.person\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 ?x1 .\n?x1 a M1\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 18
  },
  {
    "questionIdx": 36471,
    "questionWithBrackets": "Did a film's writer marry [Gun Grut]",
    "questionPatternModEntities": "Did a film 's writer marry M0",
    "questionTemplate": "Did a [NP_SIMPLE] 's [ROLE_SIMPLE] [VP_SIMPLE] [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.writer.film ?x1 .\n?x0 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ns:m.02k9djn .\n?x1 a ns:film.film .\nFILTER ( ?x0 != ns:m.02k9djn )\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x0 P1 M0 .\n?x1 a M1 .\nFILTER ( ?x0 != M0 )\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 18
  },
  {
    "questionIdx": 191396,
    "questionWithBrackets": "Which Mexican film director did [El Chanfle] star",
    "questionPatternModEntities": "Which Mexican film director did M2 star",
    "questionTemplate": "Which [ADJECTIVE_SIMPLE] [NP_SIMPLE] did [entity] [VP_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:film.director .\n?x0 ns:film.actor.film/ns:film.performance.film ns:m.04cwg6d .\n?x0 ns:people.person.nationality ns:m.0b90_r\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M1 .\n?x0 P1 M2 .\n?x0 a M0\n}",
    "expectedResponse": "Chespirito",
    "recursionDepth": 18
  },
  {
    "questionIdx": 33661,
    "questionWithBrackets": "Did a film distributor's employee found [Pocahontas School District]",
    "questionPatternModEntities": "Did a film distributor 's employee found M0",
    "questionTemplate": "Did a [NP_SIMPLE] 's [ROLE_SIMPLE] [VP_SIMPLE] [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:organization.organization_founder.organizations_founded ns:m.048259r .\n?x0 ns:people.person.employment_history/ns:business.employment_tenure.company ?x1 .\n?x1 a ns:film.film_distributor\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x0 P1 M0 .\n?x1 a M1\n}",
    "expectedResponse": "No",
    "recursionDepth": 18
  },
  {
    "questionIdx": 196627,
    "questionWithBrackets": "Which cinematographer was influenced by [Hans Feldman] and [Fritz Lang]",
    "questionPatternModEntities": "Which cinematographer was influenced by M1 and M2",
    "questionTemplate": "Which [NP_SIMPLE] was [VP_SIMPLE] by [entity] and [entity]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:film.cinematographer .\n?x0 ns:influence.influence_node.influenced_by ns:m.032md .\n?x0 ns:influence.influence_node.influenced_by ns:m.0bx726k\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 a M0\n}",
    "expectedResponse": "Brad Mays",
    "recursionDepth": 18
  },
  {
    "questionIdx": 84162,
    "questionWithBrackets": "Was [Travel Ace] a film distributor's parent's parent",
    "questionPatternModEntities": "Was M1 a film distributor 's parent 's parent",
    "questionTemplate": "Was [entity] a [NP_SIMPLE] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:people.person.children|ns:fictional_universe.fictional_character.children|ns:organization.organization.child/ns:organization.organization_relationship.child ?x1 .\n?x1 a ns:film.film_distributor .\nns:m.075qt73 ns:people.person.children|ns:fictional_universe.fictional_character.children|ns:organization.organization.child/ns:organization.organization_relationship.child ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x1 a M0 .\nM1 P0 ?x0\n}",
    "expectedResponse": "No",
    "recursionDepth": 18
  },
  {
    "questionIdx": 142959,
    "questionWithBrackets": "What did [Dial \"P\" for Pink]'s prequel's producer found",
    "questionPatternModEntities": "What did M0 's prequel 's producer found",
    "questionTemplate": "What did [entity] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE] [VP_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:organization.organization.founders ?x1 .\n?x1 ns:film.producer.film|ns:film.production_company.films ?x2 .\n?x2 ns:film.film.sequel ns:m.03nsdgn\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x1 P1 ?x2 .\n?x2 P2 M0\n}",
    "expectedResponse": "DePatie-Freleng Enterprises; Marvel Productions",
    "recursionDepth": 18
  },
  {
    "questionIdx": 4962,
    "questionWithBrackets": "Did [Cuando Despierte]'s distributor write a film",
    "questionPatternModEntities": "Did M0 's distributor write a film",
    "questionTemplate": "Did [entity] 's [ROLE_SIMPLE] [VP_SIMPLE] a [NP_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.film_distributor.films_distributed/ns:film.film_film_distributor_relationship.film ns:m.01268jyg .\n?x0 ns:film.writer.film ?x1 .\n?x1 a ns:film.film\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x0 P1 M0 .\n?x1 a M1\n}",
    "expectedResponse": "No",
    "recursionDepth": 18
  },
  {
    "questionIdx": 190260,
    "questionWithBrackets": "Which Italian art director did [Truth or Consequences, N.M.] star",
    "questionPatternModEntities": "Which Italian art director did M2 star",
    "questionTemplate": "Which [ADJECTIVE_SIMPLE] [NP_SIMPLE] did [entity] [VP_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:film.film_art_director .\n?x0 ns:film.actor.film/ns:film.performance.film ns:m.0bwrjx .\n?x0 ns:people.person.nationality ns:m.03rjj\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M1 .\n?x0 P1 M2 .\n?x0 a M0\n}",
    "expectedResponse": "Vincent Gallo",
    "recursionDepth": 18
  },
  {
    "questionIdx": 13415,
    "questionWithBrackets": "Did [Lonnie Thompson]'s employer employ a cinematographer",
    "questionPatternModEntities": "Did M0 's employer employ a cinematographer",
    "questionTemplate": "Did [entity] 's [ROLE_SIMPLE] [VP_SIMPLE] a [NP_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:business.employer.employees/ns:business.employment_tenure.person ?x1 .\n?x0 ns:business.employer.employees/ns:business.employment_tenure.person ns:m.0blh1p .\n?x1 a ns:film.cinematographer\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x0 P0 M0 .\n?x1 a M1\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 18
  },
  {
    "questionIdx": 142725,
    "questionWithBrackets": "What did [Comedy's Dirtiest Dozen]'s writer's employer acquire",
    "questionPatternModEntities": "What did M0 's writer 's employer acquire",
    "questionTemplate": "What did [entity] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE] [VP_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:organization.organization.acquired_by/ns:business.acquisition.acquiring_company ?x1 .\n?x1 ns:business.employer.employees/ns:business.employment_tenure.person ?x2 .\n?x2 ns:film.writer.film ns:m.0dszfz\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x1 P1 ?x2 .\n?x2 P2 M0\n}",
    "expectedResponse": "World Championship Wrestling",
    "recursionDepth": 18
  },
  {
    "questionIdx": 36370,
    "questionWithBrackets": "Did a film's star write [Three, Two, One]",
    "questionPatternModEntities": "Did a film 's star write M0",
    "questionTemplate": "Did a [NP_SIMPLE] 's [ROLE_SIMPLE] [VP_SIMPLE] [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.actor.film/ns:film.performance.film ?x1 .\n?x0 ns:film.writer.film ns:m.0crxvhv .\n?x1 a ns:film.film\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 ?x1 .\n?x1 a M1\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 18
  },
  {
    "questionIdx": 214169,
    "questionWithBrackets": "Who did [Gingko Bed]'s prequel's executive producer marry",
    "questionPatternModEntities": "Who did M1 's prequel 's executive producer marry",
    "questionTemplate": "Who did [entity] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE] [VP_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:people.person .\n?x0 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ?x1 .\n?x1 ns:film.producer.films_executive_produced ?x2 .\n?x2 ns:film.film.sequel ns:g.1q2xhkksh .\nFILTER ( ?x0 != ?x1 )\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 a M0 .\n?x1 P1 ?x2 .\n?x2 P2 M1 .\nFILTER ( ?x0 != ?x1 )\n}",
    "expectedResponse": "Park Seong-mi",
    "recursionDepth": 18
  },
  {
    "questionIdx": 133945,
    "questionWithBrackets": "What Italian film producer wrote [Auguri e figli maschi!]",
    "questionPatternModEntities": "What Italian film producer wrote M1",
    "questionTemplate": "What [ADJECTIVE_SIMPLE] [NP_SIMPLE] [VP_SIMPLE] [entity]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:film.producer .\n?x0 ns:film.writer.film ns:m.06znb1x .\n?x0 ns:people.person.nationality ns:m.03rjj\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M1 .\n?x0 P1 M2 .\n?x0 a M0\n}",
    "expectedResponse": "Furio Scarpelli",
    "recursionDepth": 18
  },
  {
    "questionIdx": 58635,
    "questionWithBrackets": "Was [Hisham Abdus Samad]'s gender an actor's gender",
    "questionPatternModEntities": "Was M0 's gender a actor 's gender",
    "questionTemplate": "Was [entity] 's [ROLE_SIMPLE] a [NP_SIMPLE] 's [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ^ns:people.person.gender ?x1 .\n?x0 ^ns:people.person.gender ns:m.0w16nxd .\n?x1 a ns:film.actor\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x0 P0 M0 .\n?x1 a M1\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 18
  },
  {
    "questionIdx": 142800,
    "questionWithBrackets": "What did [Cyclops]'s spouse's actor produce",
    "questionPatternModEntities": "What did M0 's spouse 's actor produce",
    "questionTemplate": "What did [entity] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE] [VP_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.film.produced_by|ns:film.film.production_companies ?x1 .\n?x1 ns:film.actor.film/ns:film.performance.character ?x2 .\n?x2 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ns:m.0kl3p .\nFILTER ( ?x2 != ns:m.0kl3p )\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x1 P1 ?x2 .\n?x2 P2 M0 .\nFILTER ( ?x2 != M0 )\n}",
    "expectedResponse": "Bringing Up Bobby",
    "recursionDepth": 18
  },
  {
    "questionIdx": 12837,
    "questionWithBrackets": "Did [Lark Song]'s sibling marry [Taxi 2]'s writer",
    "questionPatternModEntities": "Did M0 's sibling marry M1 's writer",
    "questionTemplate": "Did [entity] 's [ROLE_SIMPLE] [VP_SIMPLE] [entity] 's [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:people.person.sibling_s/ns:people.sibling_relationship.sibling|ns:fictional_universe.fictional_character.siblings/ns:fictional_universe.sibling_relationship_of_fictional_characters.siblings ns:m.0hc97_m .\n?x0 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ?x1 .\n?x1 ns:film.writer.film ns:m.0489v9 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x0 != ns:m.0hc97_m )\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 ?x1 .\n?x1 P2 M1 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x0 != M0 )\n}",
    "expectedResponse": "No",
    "recursionDepth": 19
  },
  {
    "questionIdx": 179841,
    "questionWithBrackets": "What was founded by [Making Mr. Right]'s costume designer's spouse",
    "questionPatternModEntities": "What was founded by M0 's costume designer 's spouse",
    "questionTemplate": "What was [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:organization.organization.founders ?x1 .\n?x1 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ?x2 .\n?x2 ns:film.film_costumer_designer.costume_design_for_film ns:m.043k3f .\nFILTER ( ?x1 != ?x2 )\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x1 P1 ?x2 .\n?x2 P2 M0 .\nFILTER ( ?x1 != ?x2 )\n}",
    "expectedResponse": "Luaka Bop; Todo Mundo",
    "recursionDepth": 19
  },
  {
    "questionIdx": 84230,
    "questionWithBrackets": "Was [Trish Reeves] a Dutch film director's spouse",
    "questionPatternModEntities": "Was M2 a Dutch film director 's spouse",
    "questionTemplate": "Was [entity] a [ADJECTIVE_SIMPLE] [NP_SIMPLE] 's [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 a ns:film.director .\n?x0 ns:people.person.nationality ns:m.059j2 .\nFILTER ( ns:m.0j69bw3 != ?x0 ) .\nns:m.0j69bw3 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M1 .\n?x0 a M0 .\nFILTER ( M2 != ?x0 ) .\nM2 P1 ?x0\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 19
  },
  {
    "questionIdx": 214250,
    "questionWithBrackets": "Who did [His Ward's Love]'s American director influence",
    "questionPatternModEntities": "Who did M2 's American director influence",
    "questionTemplate": "Who did [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] [VP_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:people.person .\n?x0 ns:influence.influence_node.influenced_by ?x1 .\n?x1 ns:film.director.film ns:m.012nwt3k .\n?x1 ns:people.person.nationality ns:m.09c7w0\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 a M0 .\n?x1 P1 M1 .\n?x1 P2 M2\n}",
    "expectedResponse": "Alfred Hitchcock; Ingmar Bergman",
    "recursionDepth": 19
  },
  {
    "questionIdx": 214158,
    "questionWithBrackets": "Who did [George Rogers Clark]'s child and sibling marry",
    "questionPatternModEntities": "Who did M1 's child and sibling marry",
    "questionTemplate": "Who did [entity] 's [ROLE_SIMPLE] and [ROLE_SIMPLE] [VP_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:people.person .\n?x0 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ?x1 .\n?x1 ns:people.person.parents|ns:fictional_universe.fictional_character.parents|ns:organization.organization.parent/ns:organization.organization_relationship.parent ns:m.031k56 .\n?x1 ns:people.person.sibling_s/ns:people.sibling_relationship.sibling|ns:fictional_universe.fictional_character.siblings/ns:fictional_universe.sibling_relationship_of_fictional_characters.siblings ns:m.031k56 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x1 != ns:m.031k56 )\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 a M0 .\n?x1 P1 M1 .\n?x1 P2 M1 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x1 != M1 )\n}",
    "expectedResponse": "Harriet Radford; Julia Hancock",
    "recursionDepth": 19
  },
  {
    "questionIdx": 86494,
    "questionWithBrackets": "Was [Wes Craven] [Jason X]'s sequel's prequel's executive producer",
    "questionPatternModEntities": "Was M1 M0 's sequel 's prequel 's executive producer",
    "questionTemplate": "Was [entity] [entity] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.film.sequel ?x1 .\n?x1 ns:film.film.prequel ns:m.06_nv6 .\nns:m.013zyw ns:film.producer.films_executive_produced ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x1 P1 M0 .\nM1 P2 ?x0\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 19
  },
  {
    "questionIdx": 49004,
    "questionWithBrackets": "Was [Byron Stripling] a male person's actor",
    "questionPatternModEntities": "Was M2 a male person 's actor",
    "questionTemplate": "Was [entity] a [ADJECTIVE_SIMPLE] [NP_SIMPLE] 's [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 a ns:people.person .\n?x0 ns:people.person.gender ns:m.05zppz .\nns:m.03xny1w ns:film.actor.film/ns:film.performance.character ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M1 .\n?x0 a M0 .\nM2 P1 ?x0\n}",
    "expectedResponse": "No",
    "recursionDepth": 19
  },
  {
    "questionIdx": 35078,
    "questionWithBrackets": "Did a film producer's employee executive produce [Ratatouille]",
    "questionPatternModEntities": "Did a film producer 's employee executive produce M0",
    "questionTemplate": "Did a [NP_SIMPLE] 's [ROLE_SIMPLE] [VP_SIMPLE] [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.producer.films_executive_produced ns:m.03x7hd .\n?x0 ns:people.person.employment_history/ns:business.employment_tenure.company ?x1 .\n?x1 a ns:film.producer\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 ?x1 .\n?x1 a M1\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 19
  },
  {
    "questionIdx": 55417,
    "questionWithBrackets": "Was [Fox Searchlight Pictures] a film producer that distributed [Raavan]",
    "questionPatternModEntities": "Was M0 a film producer that distributed M2",
    "questionTemplate": "Was [entity] a [NP_SIMPLE] that [VP_SIMPLE] [entity]",
    "sparql": "SELECT count(*) WHERE {\nns:m.025jfl a ns:film.producer .\nns:m.025jfl ns:film.film_distributor.films_distributed/ns:film.film_film_distributor_relationship.film ns:m.04y5pk6\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M2 .\nM0 a M1\n}",
    "expectedResponse": "No",
    "recursionDepth": 19
  },
  {
    "questionIdx": 80965,
    "questionWithBrackets": "Was [The Grey]'s distributor's child's founder [Lou Scheimer]",
    "questionPatternModEntities": "Was M0 's distributor 's child 's founder M1",
    "questionTemplate": "Was [entity] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE] [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:people.person.parents|ns:fictional_universe.fictional_character.parents|ns:organization.organization.parent/ns:organization.organization_relationship.parent ?x1 .\n?x1 ns:film.film_distributor.films_distributed/ns:film.film_film_distributor_relationship.film ns:m.0gwys7m .\nns:m.071dcs ns:organization.organization_founder.organizations_founded ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x1 P1 M0 .\nM1 P2 ?x0\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 19
  },
  {
    "questionIdx": 220599,
    "questionWithBrackets": "Who married [Malcolm]'s male writer",
    "questionPatternModEntities": "Who married M1 's male writer",
    "questionTemplate": "Who [VP_SIMPLE] [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:people.person .\n?x0 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ?x1 .\n?x1 ns:film.writer.film ns:m.07kg4l .\n?x1 ns:people.person.gender ns:m.05zppz .\nFILTER ( ?x0 != ?x1 )\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 a M0 .\n?x1 P1 M1 .\n?x1 P2 M2 .\nFILTER ( ?x0 != ?x1 )\n}",
    "expectedResponse": "Nadia Tass",
    "recursionDepth": 19
  },
  {
    "questionIdx": 142775,
    "questionWithBrackets": "What did [Crank Balls]'s cinematographer and director direct",
    "questionPatternModEntities": "What did M0 's cinematographer and director direct",
    "questionTemplate": "What did [entity] 's [ROLE_SIMPLE] and [ROLE_SIMPLE] [VP_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.film.directed_by ?x1 .\n?x1 ns:film.cinematographer.film ns:m.04p76n2 .\n?x1 ns:film.director.film ns:m.04p76n2\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x1 P1 M0 .\n?x1 P2 M0\n}",
    "expectedResponse": "Crank Balls; Fatal Vittles",
    "recursionDepth": 19
  },
  {
    "questionIdx": 99023,
    "questionWithBrackets": "Was a film producer acquired by [Boogie Town]'s producer",
    "questionPatternModEntities": "Was a film producer acquired by M1 's producer",
    "questionTemplate": "Was a [NP_SIMPLE] [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 a ns:film.producer .\n?x0 ns:organization.organization.acquired_by/ns:business.acquisition.acquiring_company ?x1 .\n?x1 ns:film.producer.film|ns:film.production_company.films ns:m.05b2wxl\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x0 a M0 .\n?x1 P1 M1\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 19
  },
  {
    "questionIdx": 74189,
    "questionWithBrackets": "Was [Ricki Rasmussen] [Mrs. Miniver]'s sequel's costume designer's child",
    "questionPatternModEntities": "Was M1 M0 's sequel 's costume designer 's child",
    "questionTemplate": "Was [entity] [entity] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.film_costumer_designer.costume_design_for_film ?x1 .\n?x1 ns:film.film.prequel ns:m.0cq8nx .\nns:m.0_y_5p8 ns:people.person.parents|ns:fictional_universe.fictional_character.parents|ns:organization.organization.parent/ns:organization.organization_relationship.parent ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x1 P1 M0 .\nM1 P2 ?x0\n}",
    "expectedResponse": "No",
    "recursionDepth": 19
  },
  {
    "questionIdx": 48406,
    "questionWithBrackets": "Was [Boundaries: The End] directed by a company's founder",
    "questionPatternModEntities": "Was M1 directed by a company 's founder",
    "questionTemplate": "Was [entity] [VP_SIMPLE] by a [NP_SIMPLE] 's [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:organization.organization_founder.organizations_founded ?x1 .\n?x1 a ns:business.employer .\nns:m.0_qsy31 ns:film.film.directed_by ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x1 a M0 .\nM1 P1 ?x0\n}",
    "expectedResponse": "No",
    "recursionDepth": 19
  },
  {
    "questionIdx": 44147,
    "questionWithBrackets": "Was [Abuse The Rim] directed by a screenwriter's parent",
    "questionPatternModEntities": "Was M1 directed by a screenwriter 's parent",
    "questionTemplate": "Was [entity] [VP_SIMPLE] by a [NP_SIMPLE] 's [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:people.person.children|ns:fictional_universe.fictional_character.children|ns:organization.organization.child/ns:organization.organization_relationship.child ?x1 .\n?x1 a ns:film.writer .\nns:m.0653g6c ns:film.film.directed_by ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x1 a M0 .\nM1 P1 ?x0\n}",
    "expectedResponse": "No",
    "recursionDepth": 19
  },
  {
    "questionIdx": 7643,
    "questionWithBrackets": "Did [Franchise Pictures]'s founder's spouse play [Christina D'Amelio]",
    "questionPatternModEntities": "Did M1 's founder 's spouse play M0",
    "questionTemplate": "Did [entity] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE] [VP_SIMPLE] [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.actor.film/ns:film.performance.character ns:m.0gzq6sv .\n?x0 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ?x1 .\n?x1 ns:organization.organization_founder.organizations_founded ns:m.03h5pth .\nFILTER ( ?x0 != ?x1 )\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 ?x1 .\n?x1 P2 M1 .\nFILTER ( ?x0 != ?x1 )\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 19
  },
  {
    "questionIdx": 147355,
    "questionWithBrackets": "What did [The House Under the Water]'s female editor edit",
    "questionPatternModEntities": "What did M1 's female editor edit",
    "questionTemplate": "What did [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] [VP_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.film.edited_by ?x1 .\n?x1 ns:film.editor.film ns:m.0jmzjwb .\n?x1 ns:people.person.gender ns:m.02zsn\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x1 P1 M0 .\n?x1 P2 M1\n}",
    "expectedResponse": "The House Under the Water; Tehran Without Permission",
    "recursionDepth": 19
  },
  {
    "questionIdx": 100263,
    "questionWithBrackets": "Was a film's art director and costume designer [Robert Holleyman]",
    "questionPatternModEntities": "Was a film 's art director and costume designer M1",
    "questionTemplate": "Was a [NP_SIMPLE] 's [ROLE_SIMPLE] and [ROLE_SIMPLE] [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 a ns:film.film .\nns:m.07fyvk ns:film.film_art_director.films_art_directed ?x0 .\nns:m.07fyvk ns:film.film_costumer_designer.costume_design_for_film ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 a M0 .\nM1 P0 ?x0 .\nM1 P1 ?x0\n}",
    "expectedResponse": "No",
    "recursionDepth": 19
  },
  {
    "questionIdx": 27027,
    "questionWithBrackets": "Did a Dutch film director influence [Najib Amhali]",
    "questionPatternModEntities": "Did a Dutch film director influence M1",
    "questionTemplate": "Did a [ADJECTIVE_SIMPLE] [NP_SIMPLE] [VP_SIMPLE] [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 a ns:film.director .\n?x0 ns:influence.influence_node.influenced ns:m.025w_17 .\n?x0 ns:people.person.nationality ns:m.059j2\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M1 .\n?x0 P1 M2 .\n?x0 a M0\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 19
  },
  {
    "questionIdx": 20490,
    "questionWithBrackets": "Did [Teddy Winters] marry [Two a Penny]'s sequel's editor",
    "questionPatternModEntities": "Did M1 marry M0 's sequel 's editor",
    "questionTemplate": "Did [entity] [VP_SIMPLE] [entity] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.editor.film ?x1 .\n?x1 ns:film.film.prequel ns:m.05c0yx5 .\nFILTER ( ns:m.0hn5sxd != ?x0 ) .\nns:m.0hn5sxd ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x1 P1 M0 .\nFILTER ( M1 != ?x0 ) .\nM1 P2 ?x0\n}",
    "expectedResponse": "No",
    "recursionDepth": 19
  },
  {
    "questionIdx": 103777,
    "questionWithBrackets": "Was a person's spouse and parent [Roger Tatley]",
    "questionPatternModEntities": "Was a person 's spouse and parent M1",
    "questionTemplate": "Was a [NP_SIMPLE] 's [ROLE_SIMPLE] and [ROLE_SIMPLE] [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 a ns:people.person .\nFILTER ( ns:m.02x18nb != ?x0 ) .\nns:m.02x18nb ns:people.person.children|ns:fictional_universe.fictional_character.children|ns:organization.organization.child/ns:organization.organization_relationship.child ?x0 .\nns:m.02x18nb ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 a M0 .\nFILTER ( M1 != ?x0 ) .\nM1 P0 ?x0 .\nM1 P1 ?x0\n}",
    "expectedResponse": "No",
    "recursionDepth": 19
  },
  {
    "questionIdx": 99656,
    "questionWithBrackets": "Was a film producer's founder employed by [The Walt Disney Company]",
    "questionPatternModEntities": "Was a film producer 's founder employed by M0",
    "questionTemplate": "Was a [NP_SIMPLE] 's [ROLE_SIMPLE] [VP_SIMPLE] by [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:organization.organization_founder.organizations_founded ?x1 .\n?x0 ns:people.person.employment_history/ns:business.employment_tenure.company ns:m.09b3v .\n?x1 a ns:film.producer\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 ?x1 .\n?x1 a M1\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 19
  },
  {
    "questionIdx": 147996,
    "questionWithBrackets": "What did [Ya'akov Gross]'s sibling and parent write",
    "questionPatternModEntities": "What did M0 's sibling and parent write",
    "questionTemplate": "What did [entity] 's [ROLE_SIMPLE] and [ROLE_SIMPLE] [VP_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.film.written_by ?x1 .\n?x1 ns:people.person.children|ns:fictional_universe.fictional_character.children|ns:organization.organization.child/ns:organization.organization_relationship.child ns:m.0r4hs34 .\n?x1 ns:people.person.sibling_s/ns:people.sibling_relationship.sibling|ns:fictional_universe.fictional_character.siblings/ns:fictional_universe.sibling_relationship_of_fictional_characters.siblings ns:m.0r4hs34 .\nFILTER ( ?x1 != ns:m.0r4hs34 )\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x1 P1 M0 .\n?x1 P2 M0 .\nFILTER ( ?x1 != M0 )\n}",
    "expectedResponse": "Joseph the Dreamer",
    "recursionDepth": 19
  },
  {
    "questionIdx": 203326,
    "questionWithBrackets": "Which film editor was employed by [Yung Henry Yu]'s country of nationality",
    "questionPatternModEntities": "Which film editor was employed by M1 's country of nationality",
    "questionTemplate": "Which [NP_SIMPLE] was [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:film.editor .\n?x0 ns:people.person.employment_history/ns:business.employment_tenure.company ?x1 .\n?x1 ^ns:people.person.nationality ns:g.1203n4l67\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 a M0 .\n?x1 P1 M1\n}",
    "expectedResponse": "Mark Aitchison Young",
    "recursionDepth": 19
  },
  {
    "questionIdx": 145863,
    "questionWithBrackets": "What did [Ploy]'s editor's parent executive produce",
    "questionPatternModEntities": "What did M0 's editor 's parent executive produce",
    "questionTemplate": "What did [entity] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE] [VP_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.film.executive_produced_by ?x1 .\n?x1 ns:people.person.children|ns:fictional_universe.fictional_character.children|ns:organization.organization.child/ns:organization.organization_relationship.child ?x2 .\n?x2 ns:film.editor.film ns:m.02q3ps3\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x1 P1 ?x2 .\n?x2 P2 M0\n}",
    "expectedResponse": "The Overture",
    "recursionDepth": 19
  },
  {
    "questionIdx": 44157,
    "questionWithBrackets": "Was [Accordeon] produced by a screenwriter's spouse",
    "questionPatternModEntities": "Was M1 produced by a screenwriter 's spouse",
    "questionTemplate": "Was [entity] [VP_SIMPLE] by a [NP_SIMPLE] 's [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ?x1 .\n?x1 a ns:film.writer .\nFILTER ( ?x0 != ?x1 ) .\nns:m.06_9v0p ns:film.film.produced_by|ns:film.film.production_companies ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x1 a M0 .\nFILTER ( ?x0 != ?x1 ) .\nM1 P1 ?x0\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 19
  },
  {
    "questionIdx": 163762,
    "questionWithBrackets": "What production company did an editor of [Shorts] found",
    "questionPatternModEntities": "What production company did a editor of M1 found",
    "questionTemplate": "What [NP_SIMPLE] did a [ROLE_SIMPLE] of [entity] [VP_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:film.production_company .\n?x0 ns:organization.organization.founders ?x1 .\n?x1 ns:film.editor.film ns:m.05qpqj6\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 a M0 .\n?x1 P1 M1\n}",
    "expectedResponse": "Troublemaker Studios",
    "recursionDepth": 19
  },
  {
    "questionIdx": 142434,
    "questionWithBrackets": "What did [Bullets of Love]'s Chinese director found",
    "questionPatternModEntities": "What did M1 's Chinese director found",
    "questionTemplate": "What did [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] [VP_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:organization.organization.founders ?x1 .\n?x1 ns:film.director.film ns:m.0crrc8z .\n?x1 ns:people.person.nationality ns:m.0d05w3\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x1 P1 M0 .\n?x1 P2 M1\n}",
    "expectedResponse": "Basic Pictures",
    "recursionDepth": 19
  },
  {
    "questionIdx": 58754,
    "questionWithBrackets": "Was [Honey, We Shrunk Ourselves] directed by a film's cinematographer",
    "questionPatternModEntities": "Was M1 directed by a film 's cinematographer",
    "questionTemplate": "Was [entity] [VP_SIMPLE] by a [NP_SIMPLE] 's [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.cinematographer.film ?x1 .\n?x1 a ns:film.film .\nns:m.0bplqp ns:film.film.directed_by ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x1 a M0 .\nM1 P1 ?x0\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 19
  },
  {
    "questionIdx": 100456,
    "questionWithBrackets": "Was a film's costume designer and editor [Michael Prescott]",
    "questionPatternModEntities": "Was a film 's costume designer and editor M1",
    "questionTemplate": "Was a [NP_SIMPLE] 's [ROLE_SIMPLE] and [ROLE_SIMPLE] [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 a ns:film.film .\nns:m.05xjvlc ns:film.editor.film ?x0 .\nns:m.05xjvlc ns:film.film_costumer_designer.costume_design_for_film ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 a M0 .\nM1 P0 ?x0 .\nM1 P1 ?x0\n}",
    "expectedResponse": "No",
    "recursionDepth": 19
  },
  {
    "questionIdx": 82496,
    "questionWithBrackets": "Was [The Smashing Machine] directed by a cinematographer's child",
    "questionPatternModEntities": "Was M1 directed by a cinematographer 's child",
    "questionTemplate": "Was [entity] [VP_SIMPLE] by a [NP_SIMPLE] 's [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:people.person.parents|ns:fictional_universe.fictional_character.parents|ns:organization.organization.parent/ns:organization.organization_relationship.parent ?x1 .\n?x1 a ns:film.cinematographer .\nns:m.0crw2ht ns:film.film.directed_by ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x1 a M0 .\nM1 P1 ?x0\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 19
  },
  {
    "questionIdx": 214467,
    "questionWithBrackets": "Who did [Kuomintang]'s Chinese founder influence",
    "questionPatternModEntities": "Who did M1 's Chinese founder influence",
    "questionTemplate": "Who did [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] [VP_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:people.person .\n?x0 ns:influence.influence_node.influenced_by ?x1 .\n?x1 ns:organization.organization_founder.organizations_founded ns:m.049tb .\n?x1 ns:people.person.nationality ns:m.0d05w3\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 a M0 .\n?x1 P1 M1 .\n?x1 P2 M2\n}",
    "expectedResponse": "Mao Zedong",
    "recursionDepth": 19
  },
  {
    "questionIdx": 213837,
    "questionWithBrackets": "Who did [Border Incident]'s American art director marry",
    "questionPatternModEntities": "Who did M2 's American art director marry",
    "questionTemplate": "Who did [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] [VP_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:people.person .\n?x0 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ?x1 .\n?x1 ns:film.film_art_director.films_art_directed ns:m.07rhc5 .\n?x1 ns:people.person.nationality ns:m.09c7w0 .\nFILTER ( ?x0 != ?x1 )\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 a M0 .\n?x1 P1 M1 .\n?x1 P2 M2 .\nFILTER ( ?x0 != ?x1 )\n}",
    "expectedResponse": "Dolores del R\u00edo; Hazel Brooks",
    "recursionDepth": 19
  },
  {
    "questionIdx": 181158,
    "questionWithBrackets": "What was produced by [Cyclops]'s sibling's actor",
    "questionPatternModEntities": "What was produced by M0 's sibling 's actor",
    "questionTemplate": "What was [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.film.produced_by|ns:film.film.production_companies ?x1 .\n?x1 ns:film.actor.film/ns:film.performance.character ?x2 .\n?x2 ns:people.person.sibling_s/ns:people.sibling_relationship.sibling|ns:fictional_universe.fictional_character.siblings/ns:fictional_universe.sibling_relationship_of_fictional_characters.siblings ns:m.0kl3p .\nFILTER ( ?x2 != ns:m.0kl3p )\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x1 P1 ?x2 .\n?x2 P2 M0 .\nFILTER ( ?x2 != M0 )\n}",
    "expectedResponse": "Vs; Vacation 8",
    "recursionDepth": 19
  },
  {
    "questionIdx": 34599,
    "questionWithBrackets": "Did a film producer executive produce [Beck \u2013 Mannen utan ansikte]'s prequel",
    "questionPatternModEntities": "Did a film producer executive produce M1 's prequel",
    "questionTemplate": "Did a [NP_SIMPLE] [VP_SIMPLE] [entity] 's [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 a ns:film.producer .\n?x0 ns:film.producer.films_executive_produced ?x1 .\n?x1 ns:film.film.sequel ns:m.06zk8hz\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x0 a M0 .\n?x1 P1 M1\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 19
  },
  {
    "questionIdx": 4280,
    "questionWithBrackets": "Did [Claude L\u00e9vi-Strauss] influence [Chow Chee Keong]'s country of nationality's employee",
    "questionPatternModEntities": "Did M1 influence M0 's country of nationality 's employee",
    "questionTemplate": "Did [entity] [VP_SIMPLE] [entity] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:people.person.employment_history/ns:business.employment_tenure.company ?x1 .\n?x1 ^ns:people.person.nationality ns:m.02r4swn .\nns:m.01tvt ns:influence.influence_node.influenced ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x1 P1 M0 .\nM1 P2 ?x0\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 19
  },
  {
    "questionIdx": 184738,
    "questionWithBrackets": "What was written by [Piranha II: The Spawning]'s prequel's producer",
    "questionPatternModEntities": "What was written by M0 's prequel 's producer",
    "questionTemplate": "What was [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.film.written_by ?x1 .\n?x1 ns:film.producer.film|ns:film.production_company.films ?x2 .\n?x2 ns:film.film.sequel ns:m.09zwdx\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x1 P1 ?x2 .\n?x2 P2 M0\n}",
    "expectedResponse": "Frankenstein Unbound; The Terror",
    "recursionDepth": 19
  },
  {
    "questionIdx": 61751,
    "questionWithBrackets": "Was [John James Jackson] a film distributor's employee and founder",
    "questionPatternModEntities": "Was M1 a film distributor 's employee and founder",
    "questionTemplate": "Was [entity] a [NP_SIMPLE] 's [ROLE_SIMPLE] and [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 a ns:film.film_distributor .\nns:m.09g8r73 ns:organization.organization_founder.organizations_founded ?x0 .\nns:m.09g8r73 ns:people.person.employment_history/ns:business.employment_tenure.company ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 a M0 .\nM1 P0 ?x0 .\nM1 P1 ?x0\n}",
    "expectedResponse": "No",
    "recursionDepth": 19
  },
  {
    "questionIdx": 70499,
    "questionWithBrackets": "Was [Pamela Douglas] a character's sibling and spouse",
    "questionPatternModEntities": "Was M1 a character 's sibling and spouse",
    "questionTemplate": "Was [entity] a [NP_SIMPLE] 's [ROLE_SIMPLE] and [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 a ns:fictional_universe.fictional_character .\nFILTER ( ns:m.026dx0b != ?x0 ) .\nFILTER ( ns:m.026dx0b != ?x0 ) .\nns:m.026dx0b ns:people.person.sibling_s/ns:people.sibling_relationship.sibling|ns:fictional_universe.fictional_character.siblings/ns:fictional_universe.sibling_relationship_of_fictional_characters.siblings ?x0 .\nns:m.026dx0b ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 a M0 .\nFILTER ( M1 != ?x0 ) .\nFILTER ( M1 != ?x0 ) .\nM1 P0 ?x0 .\nM1 P1 ?x0\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 19
  },
  {
    "questionIdx": 62540,
    "questionWithBrackets": "Was [Karen Glanz] a film producer's spouse and sibling",
    "questionPatternModEntities": "Was M1 a film producer 's spouse and sibling",
    "questionTemplate": "Was [entity] a [NP_SIMPLE] 's [ROLE_SIMPLE] and [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 a ns:film.producer .\nFILTER ( ns:m.059btt1 != ?x0 ) .\nFILTER ( ns:m.059btt1 != ?x0 ) .\nns:m.059btt1 ns:people.person.sibling_s/ns:people.sibling_relationship.sibling|ns:fictional_universe.fictional_character.siblings/ns:fictional_universe.sibling_relationship_of_fictional_characters.siblings ?x0 .\nns:m.059btt1 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 a M0 .\nFILTER ( M1 != ?x0 ) .\nFILTER ( M1 != ?x0 ) .\nM1 P0 ?x0 .\nM1 P1 ?x0\n}",
    "expectedResponse": "No",
    "recursionDepth": 19
  },
  {
    "questionIdx": 64975,
    "questionWithBrackets": "Was [Louis-Pierre Wenes] an art director's Spanish spouse",
    "questionPatternModEntities": "Was M1 a art director 's Spanish spouse",
    "questionTemplate": "Was [entity] a [NP_SIMPLE] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 a ns:film.film_art_director .\nFILTER ( ns:m.07nw_hd != ?x0 ) .\nns:m.07nw_hd ns:people.person.nationality ns:m.06mkj .\nns:m.07nw_hd ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 a M0 .\nFILTER ( M1 != ?x0 ) .\nM1 P0 M2 .\nM1 P1 ?x0\n}",
    "expectedResponse": "No",
    "recursionDepth": 19
  },
  {
    "questionIdx": 97160,
    "questionWithBrackets": "Was a film director's sibling and child [Yoram Gross]",
    "questionPatternModEntities": "Was a film director 's sibling and child M1",
    "questionTemplate": "Was a [NP_SIMPLE] 's [ROLE_SIMPLE] and [ROLE_SIMPLE] [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 a ns:film.director .\nFILTER ( ns:m.0bh6hf != ?x0 ) .\nns:m.0bh6hf ns:people.person.parents|ns:fictional_universe.fictional_character.parents|ns:organization.organization.parent/ns:organization.organization_relationship.parent ?x0 .\nns:m.0bh6hf ns:people.person.sibling_s/ns:people.sibling_relationship.sibling|ns:fictional_universe.fictional_character.siblings/ns:fictional_universe.sibling_relationship_of_fictional_characters.siblings ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 a M0 .\nFILTER ( M1 != ?x0 ) .\nM1 P0 ?x0 .\nM1 P1 ?x0\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 19
  },
  {
    "questionIdx": 220078,
    "questionWithBrackets": "Who married [Contract Lover]'s Chinese director",
    "questionPatternModEntities": "Who married M2 's Chinese director",
    "questionTemplate": "Who [VP_SIMPLE] [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:people.person .\n?x0 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ?x1 .\n?x1 ns:film.director.film ns:m.0gkrv8c .\n?x1 ns:people.person.nationality ns:m.0d05w3 .\nFILTER ( ?x0 != ?x1 )\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 a M0 .\n?x1 P1 M1 .\n?x1 P2 M2 .\nFILTER ( ?x0 != ?x1 )\n}",
    "expectedResponse": "Cindy Yeung",
    "recursionDepth": 19
  },
  {
    "questionIdx": 18427,
    "questionWithBrackets": "Did [Rooster Cogburn] star [John Wayne Cancer Institute]'s founder's parent",
    "questionPatternModEntities": "Did M1 star M0 's founder 's parent",
    "questionTemplate": "Did [entity] [VP_SIMPLE] [entity] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:people.person.children|ns:fictional_universe.fictional_character.children|ns:organization.organization.child/ns:organization.organization_relationship.child ?x1 .\n?x1 ns:organization.organization_founder.organizations_founded ns:m.064d7g3 .\nns:m.05fhhb ns:film.film.starring/ns:film.performance.actor ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x1 P1 M0 .\nM1 P2 ?x0\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 19
  },
  {
    "questionIdx": 75216,
    "questionWithBrackets": "Was [Salman of Saudi Arabia] a sibling of a sibling of [Sophia Barrison]",
    "questionPatternModEntities": "Was M1 a sibling of a sibling of M0",
    "questionTemplate": "Was [entity] a [ROLE_SIMPLE] of a [ROLE_SIMPLE] of [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:people.person.sibling_s/ns:people.sibling_relationship.sibling|ns:fictional_universe.fictional_character.siblings/ns:fictional_universe.sibling_relationship_of_fictional_characters.siblings ns:m.0gykgdy .\nFILTER ( ?x0 != ns:m.0gykgdy ) .\nFILTER ( ns:m.06hh_s != ?x0 ) .\nns:m.06hh_s ns:people.person.sibling_s/ns:people.sibling_relationship.sibling|ns:fictional_universe.fictional_character.siblings/ns:fictional_universe.sibling_relationship_of_fictional_characters.siblings ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( M1 != ?x0 ) .\nM1 P0 ?x0\n}",
    "expectedResponse": "No",
    "recursionDepth": 19
  },
  {
    "questionIdx": 157180,
    "questionWithBrackets": "What film editor was influenced by [Picasso and Dance]'s costume designer",
    "questionPatternModEntities": "What film editor was influenced by M1 's costume designer",
    "questionTemplate": "What [NP_SIMPLE] was [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:film.editor .\n?x0 ns:influence.influence_node.influenced_by ?x1 .\n?x1 ns:film.film_costumer_designer.costume_design_for_film ns:m.0qz85rr\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 a M0 .\n?x1 P1 M1\n}",
    "expectedResponse": "Norman Mailer",
    "recursionDepth": 19
  },
  {
    "questionIdx": 133142,
    "questionWithBrackets": "What French screenwriter was employed by [UNESCO]",
    "questionPatternModEntities": "What French screenwriter was employed by M1",
    "questionTemplate": "What [ADJECTIVE_SIMPLE] [NP_SIMPLE] was [VP_SIMPLE] by [entity]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:film.writer .\n?x0 ns:people.person.employment_history/ns:business.employment_tenure.company ns:m.05yg8kx .\n?x0 ns:people.person.nationality ns:m.0f8l9c\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M1 .\n?x0 P1 M2 .\n?x0 a M0\n}",
    "expectedResponse": "Julio Cort\u00e1zar",
    "recursionDepth": 19
  },
  {
    "questionIdx": 91636,
    "questionWithBrackets": "Was a character that [Herbert Spencer] influenced [Aberjhani]",
    "questionPatternModEntities": "Was a character that M2 influenced M0",
    "questionTemplate": "Was a [NP_SIMPLE] that [entity] [VP_SIMPLE] [entity]",
    "sparql": "SELECT count(*) WHERE {\nns:m.0gg89tf a ns:fictional_universe.fictional_character .\nns:m.0gg89tf ns:influence.influence_node.influenced_by ns:m.01kznw\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M2 .\nM0 a M1\n}",
    "expectedResponse": "No",
    "recursionDepth": 19
  },
  {
    "questionIdx": 97215,
    "questionWithBrackets": "Was a film distributed by [Bavaria Film] [Winter Sleepers]",
    "questionPatternModEntities": "Was a film distributed by M2 M0",
    "questionTemplate": "Was a [NP_SIMPLE] [VP_SIMPLE] by [entity] [entity]",
    "sparql": "SELECT count(*) WHERE {\nns:m.0271h00 a ns:film.film .\nns:m.0271h00 ns:film.film.distributors/ns:film.film_film_distributor_relationship.distributor ns:m.0f4ht7\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M2 .\nM0 a M1\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 19
  },
  {
    "questionIdx": 195047,
    "questionWithBrackets": "Which character was influenced by [Sophia Jansdochter Goltzius]'s spouse",
    "questionPatternModEntities": "Which character was influenced by M1 's spouse",
    "questionTemplate": "Which [NP_SIMPLE] was [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:fictional_universe.fictional_character .\n?x0 ns:influence.influence_node.influenced_by ?x1 .\n?x1 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ns:m.0j6bg_2 .\nFILTER ( ?x1 != ns:m.0j6bg_2 )\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 a M0 .\n?x1 P1 M1 .\nFILTER ( ?x1 != M1 )\n}",
    "expectedResponse": "James VI and I",
    "recursionDepth": 19
  },
  {
    "questionIdx": 61116,
    "questionWithBrackets": "Was [Jason Vida] influenced by a character's child",
    "questionPatternModEntities": "Was M1 influenced by a character 's child",
    "questionTemplate": "Was [entity] [VP_SIMPLE] by a [NP_SIMPLE] 's [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:people.person.parents|ns:fictional_universe.fictional_character.parents|ns:organization.organization.parent/ns:organization.organization_relationship.parent ?x1 .\n?x1 a ns:fictional_universe.fictional_character .\nns:m.0z3_z1c ns:influence.influence_node.influenced_by ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x1 a M0 .\nM1 P1 ?x0\n}",
    "expectedResponse": "No",
    "recursionDepth": 19
  },
  {
    "questionIdx": 144001,
    "questionWithBrackets": "What did [Impy's Island]'s executive producer and writer write",
    "questionPatternModEntities": "What did M0 's executive producer and writer write",
    "questionTemplate": "What did [entity] 's [ROLE_SIMPLE] and [ROLE_SIMPLE] [VP_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.film.written_by ?x1 .\n?x1 ns:film.producer.films_executive_produced ns:m.02qw0nf .\n?x1 ns:film.writer.film ns:m.02qw0nf\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x1 P1 M0 .\n?x1 P2 M0\n}",
    "expectedResponse": "Animals United; Impy's Island",
    "recursionDepth": 19
  },
  {
    "questionIdx": 73358,
    "questionWithBrackets": "Was [Rajin Saleh] a film's Chinese editor",
    "questionPatternModEntities": "Was M1 a film 's Chinese editor",
    "questionTemplate": "Was [entity] a [NP_SIMPLE] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 a ns:film.film .\nns:m.03m_ym ns:film.editor.film ?x0 .\nns:m.03m_ym ns:people.person.nationality ns:m.0d05w3\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 a M0 .\nM1 P0 M2 .\nM1 P1 ?x0\n}",
    "expectedResponse": "No",
    "recursionDepth": 19
  },
  {
    "questionIdx": 22413,
    "questionWithBrackets": "Did [The Little Princess] star [United Artists Records]'s parent's founder",
    "questionPatternModEntities": "Did M1 star M0 's parent 's founder",
    "questionTemplate": "Did [entity] [VP_SIMPLE] [entity] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:organization.organization_founder.organizations_founded ?x1 .\n?x1 ns:people.person.children|ns:fictional_universe.fictional_character.children|ns:organization.organization.child/ns:organization.organization_relationship.child ns:m.041p3y .\nns:m.096vsy ns:film.film.starring/ns:film.performance.actor ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x1 P1 M0 .\nM1 P2 ?x0\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 19
  },
  {
    "questionIdx": 188104,
    "questionWithBrackets": "Which Canadian cinematographer executive produced [Fierce Light]",
    "questionPatternModEntities": "Which Canadian cinematographer executive produced M1",
    "questionTemplate": "Which [ADJECTIVE_SIMPLE] [NP_SIMPLE] [VP_SIMPLE] [entity]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:film.cinematographer .\n?x0 ns:film.producer.films_executive_produced ns:m.0bbxy9v .\n?x0 ns:people.person.nationality ns:m.0d060g\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M1 .\n?x0 P1 M2 .\n?x0 a M0\n}",
    "expectedResponse": "Mark Achbar",
    "recursionDepth": 19
  },
  {
    "questionIdx": 218711,
    "questionWithBrackets": "Who influenced [Pieter Brueghel the Younger]'s Dutch parent",
    "questionPatternModEntities": "Who influenced M2 's Dutch parent",
    "questionTemplate": "Who [VP_SIMPLE] [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:people.person .\n?x0 ns:influence.influence_node.influenced ?x1 .\n?x1 ns:people.person.children|ns:fictional_universe.fictional_character.children|ns:organization.organization.child/ns:organization.organization_relationship.child ns:m.0h6m9 .\n?x1 ns:people.person.nationality ns:m.059j2\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 a M0 .\n?x1 P1 M1 .\n?x1 P2 M2\n}",
    "expectedResponse": "Hieronymus Bosch",
    "recursionDepth": 19
  },
  {
    "questionIdx": 133942,
    "questionWithBrackets": "What Italian film producer was employed by [The Cannon Group]",
    "questionPatternModEntities": "What Italian film producer was employed by M1",
    "questionTemplate": "What [ADJECTIVE_SIMPLE] [NP_SIMPLE] was [VP_SIMPLE] by [entity]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:film.producer .\n?x0 ns:people.person.employment_history/ns:business.employment_tenure.company ns:m.037bm2 .\n?x0 ns:people.person.nationality ns:m.03rjj\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M1 .\n?x0 P1 M2 .\n?x0 a M0\n}",
    "expectedResponse": "Giancarlo Parretti; Ovidio G. Assonitis",
    "recursionDepth": 19
  },
  {
    "questionIdx": 230776,
    "questionWithBrackets": "Who was a film editor that founded [SModcast Pictures]",
    "questionPatternModEntities": "Who was a film editor that founded M2",
    "questionTemplate": "Who was a [NP_SIMPLE] that [VP_SIMPLE] [entity]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:film.editor .\n?x0 a ns:people.person .\n?x0 ns:organization.organization_founder.organizations_founded ns:m.0p3r3jj\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M2 .\n?x0 a M0 .\n?x0 a M1\n}",
    "expectedResponse": "Kevin Smith",
    "recursionDepth": 19
  },
  {
    "questionIdx": 65996,
    "questionWithBrackets": "Was [Manfred Wong] [Invasion of Astro-Monster]'s sequel's prequel's writer",
    "questionPatternModEntities": "Was M1 M0 's sequel 's prequel 's writer",
    "questionTemplate": "Was [entity] [entity] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.film.sequel ?x1 .\n?x1 ns:film.film.prequel ns:m.02r3w_ .\nns:m.03c496y ns:film.writer.film ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x1 P1 M0 .\nM1 P2 ?x0\n}",
    "expectedResponse": "No",
    "recursionDepth": 19
  },
  {
    "questionIdx": 14342,
    "questionWithBrackets": "Did [Masks and Faces]'s star's child influence [Stephen King]",
    "questionPatternModEntities": "Did M1 's star 's child influence M0",
    "questionTemplate": "Did [entity] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE] [VP_SIMPLE] [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:influence.influence_node.influenced ns:m.0jt90f5 .\n?x0 ns:people.person.parents|ns:fictional_universe.fictional_character.parents|ns:organization.organization.parent/ns:organization.organization_relationship.parent ?x1 .\n?x1 ns:film.actor.film/ns:film.performance.film ns:m.0h_dlkg\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 ?x1 .\n?x1 P2 M1\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 19
  },
  {
    "questionIdx": 26135,
    "questionWithBrackets": "Did a Canadian actor marry [William Lochren]",
    "questionPatternModEntities": "Did a Canadian actor marry M2",
    "questionTemplate": "Did a [ADJECTIVE_SIMPLE] [NP_SIMPLE] [VP_SIMPLE] [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 a ns:film.actor .\n?x0 ns:people.person.nationality ns:m.0d060g .\n?x0 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ns:m.05p5yl_ .\nFILTER ( ?x0 != ns:m.05p5yl_ )\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M1 .\n?x0 P1 M2 .\n?x0 a M0 .\nFILTER ( ?x0 != M2 )\n}",
    "expectedResponse": "No",
    "recursionDepth": 19
  },
  {
    "questionIdx": 3991,
    "questionWithBrackets": "Did [Cheech & Chong's Up in Smoke]'s sequel's writer play [Robbie Hart]",
    "questionPatternModEntities": "Did M1 's sequel 's writer play M0",
    "questionTemplate": "Did [entity] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE] [VP_SIMPLE] [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.actor.film/ns:film.performance.character ns:m.0gkmn47 .\n?x0 ns:film.writer.film ?x1 .\n?x1 ns:film.film.prequel ns:m.04p80y\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x0 P1 M0 .\n?x1 P2 M1\n}",
    "expectedResponse": "No",
    "recursionDepth": 19
  },
  {
    "questionIdx": 137820,
    "questionWithBrackets": "What art director was employed by [NEXT Ticketing LLC]'s parent",
    "questionPatternModEntities": "What art director was employed by M1 's parent",
    "questionTemplate": "What [NP_SIMPLE] was [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:film.film_art_director .\n?x0 ns:people.person.employment_history/ns:business.employment_tenure.company ?x1 .\n?x1 ns:people.person.children|ns:fictional_universe.fictional_character.children|ns:organization.organization.child/ns:organization.organization_relationship.child ns:m.09m_wgc\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 a M0 .\n?x1 P1 M1\n}",
    "expectedResponse": "Jason Garner",
    "recursionDepth": 19
  },
  {
    "questionIdx": 143136,
    "questionWithBrackets": "What did [Elena Birkbeck]'s male spouse found",
    "questionPatternModEntities": "What did M1 's male spouse found",
    "questionTemplate": "What did [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] [VP_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:organization.organization.founders ?x1 .\n?x1 ns:people.person.gender ns:m.05zppz .\n?x1 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ns:m.0dgp92 .\nFILTER ( ?x1 != ns:m.0dgp92 )\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x1 P1 M0 .\n?x1 P2 M1 .\nFILTER ( ?x1 != M1 )\n}",
    "expectedResponse": "BP",
    "recursionDepth": 19
  },
  {
    "questionIdx": 50874,
    "questionWithBrackets": "Was [Conexant Mauritius Ltd] a film's producer and distributor",
    "questionPatternModEntities": "Was M1 a film 's producer and distributor",
    "questionTemplate": "Was [entity] a [NP_SIMPLE] 's [ROLE_SIMPLE] and [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 a ns:film.film .\nns:m.09n1y37 ns:film.film_distributor.films_distributed/ns:film.film_film_distributor_relationship.film ?x0 .\nns:m.09n1y37 ns:film.producer.film|ns:film.production_company.films ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 a M0 .\nM1 P0 ?x0 .\nM1 P1 ?x0\n}",
    "expectedResponse": "No",
    "recursionDepth": 19
  },
  {
    "questionIdx": 4115,
    "questionWithBrackets": "Did [Choi In Yang]'s spouse executive produce a film",
    "questionPatternModEntities": "Did M0 's spouse executive produce a film",
    "questionTemplate": "Did [entity] 's [ROLE_SIMPLE] [VP_SIMPLE] a [NP_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.producer.films_executive_produced ?x1 .\n?x0 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ns:m.0hnv682 .\n?x1 a ns:film.film .\nFILTER ( ?x0 != ns:m.0hnv682 )\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x0 P1 M0 .\n?x1 a M1 .\nFILTER ( ?x0 != M0 )\n}",
    "expectedResponse": "No",
    "recursionDepth": 19
  },
  {
    "questionIdx": 217160,
    "questionWithBrackets": "Who executive produced [Code Name Coq Rouge]'s sequel's prequel",
    "questionPatternModEntities": "Who executive produced M1 's sequel 's prequel",
    "questionTemplate": "Who [VP_SIMPLE] [entity] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:people.person .\n?x0 ns:film.producer.films_executive_produced ?x1 .\n?x1 ns:film.film.sequel ?x2 .\n?x2 ns:film.film.prequel ns:m.0gkr233\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 a M0 .\n?x1 P1 ?x2 .\n?x2 P2 M1\n}",
    "expectedResponse": "Gunnar Bergstr\u00f6m; Wolfgang Esterer",
    "recursionDepth": 19
  },
  {
    "questionIdx": 234435,
    "questionWithBrackets": "Who was employed by [Billy Hytner]'s actor's country of nationality",
    "questionPatternModEntities": "Who was employed by M1 's actor 's country of nationality",
    "questionTemplate": "Who was [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:people.person .\n?x0 ns:people.person.employment_history/ns:business.employment_tenure.company ?x1 .\n?x1 ^ns:people.person.nationality ?x2 .\n?x2 ns:film.actor.film/ns:film.performance.character ns:m.0plt440\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 a M0 .\n?x1 P1 ?x2 .\n?x2 P2 M1\n}",
    "expectedResponse": "Mahinda Vilathgamuwa; Kumudu Munasinghe",
    "recursionDepth": 19
  },
  {
    "questionIdx": 189141,
    "questionWithBrackets": "Which Dutch film editor executive produced [Nesma's Birds]",
    "questionPatternModEntities": "Which Dutch film editor executive produced M1",
    "questionTemplate": "Which [ADJECTIVE_SIMPLE] [NP_SIMPLE] [VP_SIMPLE] [entity]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:film.editor .\n?x0 ns:film.producer.films_executive_produced ns:m.0_7n9qn .\n?x0 ns:people.person.nationality ns:m.059j2\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M1 .\n?x0 P1 M2 .\n?x0 a M0\n}",
    "expectedResponse": "Mohamed Al-Daradji",
    "recursionDepth": 19
  },
  {
    "questionIdx": 138143,
    "questionWithBrackets": "What character founded a child of [Ancient Theban Army]",
    "questionPatternModEntities": "What character founded a child of M1",
    "questionTemplate": "What [NP_SIMPLE] [VP_SIMPLE] a [ROLE_SIMPLE] of [entity]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:fictional_universe.fictional_character .\n?x0 ns:organization.organization_founder.organizations_founded ?x1 .\n?x1 ns:people.person.parents|ns:fictional_universe.fictional_character.parents|ns:organization.organization.parent/ns:organization.organization_relationship.parent ns:m.0chtrwn\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 a M0 .\n?x1 P1 M1\n}",
    "expectedResponse": "Tempus",
    "recursionDepth": 19
  },
  {
    "questionIdx": 215240,
    "questionWithBrackets": "Who did [Under the Palms]'s male star marry",
    "questionPatternModEntities": "Who did M1 's male star marry",
    "questionTemplate": "Who did [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] [VP_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:people.person .\n?x0 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ?x1 .\n?x1 ns:film.actor.film/ns:film.performance.film ns:m.05znjj2 .\n?x1 ns:people.person.gender ns:m.05zppz .\nFILTER ( ?x0 != ?x1 )\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 a M0 .\n?x1 P1 M1 .\n?x1 P2 M2 .\nFILTER ( ?x0 != ?x1 )\n}",
    "expectedResponse": "Francesca Guidato",
    "recursionDepth": 19
  },
  {
    "questionIdx": 5931,
    "questionWithBrackets": "Did [Don Rickles] influence [Mrs. Ada Harris]'s female actor",
    "questionPatternModEntities": "Did M2 influence M0 's female actor",
    "questionTemplate": "Did [entity] [VP_SIMPLE] [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.actor.film/ns:film.performance.character ns:m.0gyk2fl .\n?x0 ns:people.person.gender ns:m.02zsn .\nns:m.013tjc ns:influence.influence_node.influenced ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nM2 P2 ?x0\n}",
    "expectedResponse": "No",
    "recursionDepth": 20
  },
  {
    "questionIdx": 189034,
    "questionWithBrackets": "Which Dutch actor was influenced by [Henri Matisse]",
    "questionPatternModEntities": "Which Dutch actor was influenced by M1",
    "questionTemplate": "Which [ADJECTIVE_SIMPLE] [NP_SIMPLE] was [VP_SIMPLE] by [entity]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:film.actor .\n?x0 ns:influence.influence_node.influenced_by ns:m.0gct_ .\n?x0 ns:people.person.nationality ns:m.059j2\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M1 .\n?x0 P1 M2 .\n?x0 a M0\n}",
    "expectedResponse": "Dick Bruna",
    "recursionDepth": 20
  },
  {
    "questionIdx": 18446,
    "questionWithBrackets": "Did [Roscoe Arbuckle] influence [The Circus]'s male editor",
    "questionPatternModEntities": "Did M2 influence M1 's male editor",
    "questionTemplate": "Did [entity] [VP_SIMPLE] [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.editor.film ns:m.011_mj .\n?x0 ns:people.person.gender ns:m.05zppz .\nns:m.0k57l ns:influence.influence_node.influenced ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nM2 P2 ?x0\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 20
  },
  {
    "questionIdx": 156515,
    "questionWithBrackets": "What film editor did a screenwriter's country of nationality employ",
    "questionPatternModEntities": "What film editor did a screenwriter 's country of nationality employ",
    "questionTemplate": "What [NP_SIMPLE] did a [NP_SIMPLE] 's [ROLE_SIMPLE] [VP_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:film.editor .\n?x0 ns:people.person.employment_history/ns:business.employment_tenure.company ?x1 .\n?x1 ^ns:people.person.nationality ?x2 .\n?x2 a ns:film.writer\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 a M0 .\n?x1 P1 ?x2 .\n?x2 a M1\n}",
    "expectedResponse": "Mark Aitchison Young",
    "recursionDepth": 20
  },
  {
    "questionIdx": 113416,
    "questionWithBrackets": "Were [Between Shovers] and [The Immigrant] written by [Behind the Screen]'s editor",
    "questionPatternModEntities": "Were M1 and M2 written by M0 's editor",
    "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.editor.film ns:m.03b1dk .\nns:m.05c34r ns:film.film.written_by ?x0 .\nns:m.0jvw0 ns:film.film.written_by ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 ?x0 .\nM2 P1 ?x0\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 20
  },
  {
    "questionIdx": 237408,
    "questionWithBrackets": "Who was influenced by [Tetsuo II: Body Hammer]'s writer and art director",
    "questionPatternModEntities": "Who was influenced by M1 's writer and art director",
    "questionTemplate": "Who was [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] and [ROLE_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:people.person .\n?x0 ns:influence.influence_node.influenced_by ?x1 .\n?x1 ns:film.film_art_director.films_art_directed ns:m.0brs6b .\n?x1 ns:film.writer.film ns:m.0brs6b\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 a M0 .\n?x1 P1 M1 .\n?x1 P2 M1\n}",
    "expectedResponse": "Darren Aronofsky",
    "recursionDepth": 20
  },
  {
    "questionIdx": 75451,
    "questionWithBrackets": "Was [Sara Hartmann] a child of an actor's parent",
    "questionPatternModEntities": "Was M1 a child of a actor 's parent",
    "questionTemplate": "Was [entity] a [ROLE_SIMPLE] of a [NP_SIMPLE] 's [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:people.person.children|ns:fictional_universe.fictional_character.children|ns:organization.organization.child/ns:organization.organization_relationship.child ?x1 .\n?x1 a ns:film.actor .\nns:m.0l1znh8 ns:people.person.parents|ns:fictional_universe.fictional_character.parents|ns:organization.organization.parent/ns:organization.organization_relationship.parent ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x1 a M0 .\nM1 P1 ?x0\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 20
  },
  {
    "questionIdx": 72035,
    "questionWithBrackets": "Was [Prizzi's Honor] produced by [Walt Disney Animation Studios]'s founder's employer",
    "questionPatternModEntities": "Was M1 produced by M0 's founder 's employer",
    "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:business.employer.employees/ns:business.employment_tenure.person ?x1 .\n?x1 ns:organization.organization_founder.organizations_founded ns:m.04rcl7 .\nns:m.0sxlb ns:film.film.produced_by|ns:film.film.production_companies ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x1 P1 M0 .\nM1 P2 ?x0\n}",
    "expectedResponse": "No",
    "recursionDepth": 20
  },
  {
    "questionIdx": 54939,
    "questionWithBrackets": "Was [Fernando Solanas] [Social Genocide]'s director, cinematographer, and executive producer",
    "questionPatternModEntities": "Was M0 M1 's director , cinematographer , and executive producer",
    "questionTemplate": "Was [entity] [entity] 's [ROLE_SIMPLE] , [ROLE_SIMPLE] , and [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\nns:m.09_wn2 ns:film.cinematographer.film ns:m.03hn4wc .\nns:m.09_wn2 ns:film.director.film ns:m.03hn4wc .\nns:m.09_wn2 ns:film.producer.films_executive_produced ns:m.03hn4wc\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1 .\nM0 P2 M1\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 20
  },
  {
    "questionIdx": 144637,
    "questionWithBrackets": "What did [Khiladi 786]'s male star executive produce",
    "questionPatternModEntities": "What did M0 's male star executive produce",
    "questionTemplate": "What did [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] [VP_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.film.executive_produced_by ?x1 .\n?x1 ns:film.actor.film/ns:film.performance.film ns:m.0hgrvh8 .\n?x1 ns:people.person.gender ns:m.05zppz\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x1 P1 M0 .\n?x1 P2 M1\n}",
    "expectedResponse": "Breakaway",
    "recursionDepth": 20
  },
  {
    "questionIdx": 71220,
    "questionWithBrackets": "Was [Peppino De Filippo]'s Italian sibling's sibling [Albert Gallo]",
    "questionPatternModEntities": "Was M0 's Italian sibling 's sibling M2",
    "questionTemplate": "Was [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] 's [ROLE_SIMPLE] [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:people.person.nationality ns:m.03rjj .\n?x0 ns:people.person.sibling_s/ns:people.sibling_relationship.sibling|ns:fictional_universe.fictional_character.siblings/ns:fictional_universe.sibling_relationship_of_fictional_characters.siblings ns:m.08392m .\nFILTER ( ?x0 != ns:m.08392m ) .\nFILTER ( ns:m.026n1v6 != ?x0 ) .\nns:m.026n1v6 ns:people.person.sibling_s/ns:people.sibling_relationship.sibling|ns:fictional_universe.fictional_character.siblings/ns:fictional_universe.sibling_relationship_of_fictional_characters.siblings ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( M2 != ?x0 ) .\nM2 P0 ?x0\n}",
    "expectedResponse": "No",
    "recursionDepth": 20
  },
  {
    "questionIdx": 173692,
    "questionWithBrackets": "What was edited by [Park Ranger Janeway]'s American actor",
    "questionPatternModEntities": "What was edited by M1 's American actor",
    "questionTemplate": "What was [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.film.edited_by ?x1 .\n?x1 ns:film.actor.film/ns:film.performance.character ns:m.0pz6f7l .\n?x1 ns:people.person.nationality ns:m.09c7w0\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x1 P1 M0 .\n?x1 P2 M1\n}",
    "expectedResponse": "Dead 7",
    "recursionDepth": 20
  },
  {
    "questionIdx": 188433,
    "questionWithBrackets": "Which Canadian screenwriter was employed by [Cloud Ten Pictures]",
    "questionPatternModEntities": "Which Canadian screenwriter was employed by M1",
    "questionTemplate": "Which [ADJECTIVE_SIMPLE] [NP_SIMPLE] was [VP_SIMPLE] by [entity]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:film.writer .\n?x0 ns:people.person.employment_history/ns:business.employment_tenure.company ns:m.073n97 .\n?x0 ns:people.person.nationality ns:m.0d060g\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M1 .\n?x0 P1 M2 .\n?x0 a M0\n}",
    "expectedResponse": "Paul LaLonde",
    "recursionDepth": 20
  },
  {
    "questionIdx": 13154,
    "questionWithBrackets": "Did [Liberals] employ a spouse of a cinematographer",
    "questionPatternModEntities": "Did M1 employ a spouse of a cinematographer",
    "questionTemplate": "Did [entity] [VP_SIMPLE] a [ROLE_SIMPLE] of a [NP_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ?x1 .\n?x1 a ns:film.cinematographer .\nFILTER ( ?x0 != ?x1 ) .\nns:m.03tccl ns:business.employer.employees/ns:business.employment_tenure.person ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x1 a M0 .\nFILTER ( ?x0 != ?x1 ) .\nM1 P1 ?x0\n}",
    "expectedResponse": "No",
    "recursionDepth": 20
  },
  {
    "questionIdx": 47669,
    "questionWithBrackets": "Was [Bertrand Tavernier] influenced by [Goopy Bagha Phire Elo]'s prequel's costume designer",
    "questionPatternModEntities": "Was M1 influenced by M0 's prequel 's costume designer",
    "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.film_costumer_designer.costume_design_for_film ?x1 .\n?x1 ns:film.film.sequel ns:m.0520brh .\nns:m.055ws3 ns:influence.influence_node.influenced_by ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x1 P1 M0 .\nM1 P2 ?x0\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 20
  },
  {
    "questionIdx": 40105,
    "questionWithBrackets": "Did a star of a film marry [Albert Bartridge Jr.]",
    "questionPatternModEntities": "Did a star of a film marry M0",
    "questionTemplate": "Did a [ROLE_SIMPLE] of a [NP_SIMPLE] [VP_SIMPLE] [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.actor.film/ns:film.performance.film ?x1 .\n?x0 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ns:m.0h3b8x0 .\n?x1 a ns:film.film .\nFILTER ( ?x0 != ns:m.0h3b8x0 )\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x0 P1 M0 .\n?x1 a M1 .\nFILTER ( ?x0 != M0 )\n}",
    "expectedResponse": "No",
    "recursionDepth": 20
  },
  {
    "questionIdx": 215742,
    "questionWithBrackets": "Who did a country of nationality of [Jane Campion]'s child employ",
    "questionPatternModEntities": "Who did a country of nationality of M1 's child employ",
    "questionTemplate": "Who did a [ROLE_SIMPLE] of [entity] 's [ROLE_SIMPLE] [VP_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:people.person .\n?x0 ns:people.person.employment_history/ns:business.employment_tenure.company ?x1 .\n?x1 ^ns:people.person.nationality ?x2 .\n?x2 ns:people.person.parents|ns:fictional_universe.fictional_character.parents|ns:organization.organization.parent/ns:organization.organization_relationship.parent ns:m.02r6c_\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 a M0 .\n?x1 P1 ?x2 .\n?x2 P2 M1\n}",
    "expectedResponse": "Mahinda Vilathgamuwa; Kumudu Munasinghe",
    "recursionDepth": 20
  },
  {
    "questionIdx": 216598,
    "questionWithBrackets": "Who did an editor of [Professor Pyarelal] and [Anari] influence",
    "questionPatternModEntities": "Who did a editor of M1 and M2 influence",
    "questionTemplate": "Who did a [ROLE_SIMPLE] of [entity] and [entity] [VP_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:people.person .\n?x0 ns:influence.influence_node.influenced_by ?x1 .\n?x1 ns:film.editor.film ns:m.0bwl4ws .\n?x1 ns:film.editor.film ns:m.0fkp77\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 a M0 .\n?x1 P1 M1 .\n?x1 P1 M2\n}",
    "expectedResponse": "Tupur Chatterjee; Tapur Chatterjee",
    "recursionDepth": 20
  },
  {
    "questionIdx": 13000,
    "questionWithBrackets": "Did [Leipzig University]'s German founder influence [Frank Gouldsmith Speck]",
    "questionPatternModEntities": "Did M1 's German founder influence M0",
    "questionTemplate": "Did [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] [VP_SIMPLE] [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:influence.influence_node.influenced ns:m.05xt46b .\n?x0 ns:organization.organization_founder.organizations_founded ns:m.01y06y .\n?x0 ns:people.person.nationality ns:m.0345h\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P2 M2\n}",
    "expectedResponse": "No",
    "recursionDepth": 20
  },
  {
    "questionIdx": 111991,
    "questionWithBrackets": "Were [After the Circus] and [Star of Day] edited by [Postcard from San Miguel]'s cinematographer",
    "questionPatternModEntities": "Were M1 and M2 edited by M0 's cinematographer",
    "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.cinematographer.film ns:m.0zxxlk5 .\nns:m.011qgtxw ns:film.film.edited_by ?x0 .\nns:m.0zzp34t ns:film.film.edited_by ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 ?x0 .\nM2 P1 ?x0\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 20
  },
  {
    "questionIdx": 47446,
    "questionWithBrackets": "Was [Behind the Planet of the Apes] edited by [Siegfried Sternberg]'s sibling's sibling",
    "questionPatternModEntities": "Was M1 edited by M0 's sibling 's sibling",
    "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:people.person.sibling_s/ns:people.sibling_relationship.sibling|ns:fictional_universe.fictional_character.siblings/ns:fictional_universe.sibling_relationship_of_fictional_characters.siblings ?x1 .\n?x1 ns:people.person.sibling_s/ns:people.sibling_relationship.sibling|ns:fictional_universe.fictional_character.siblings/ns:fictional_universe.sibling_relationship_of_fictional_characters.siblings ns:m.0ksl2q1 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x1 != ns:m.0ksl2q1 ) .\nns:m.0crvtxj ns:film.film.edited_by ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x1 P0 M0 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x1 != M0 ) .\nM1 P1 ?x0\n}",
    "expectedResponse": "No",
    "recursionDepth": 20
  },
  {
    "questionIdx": 106062,
    "questionWithBrackets": "Was a sibling of a cinematographer's sibling [Glauco Onorato]",
    "questionPatternModEntities": "Was a sibling of a cinematographer 's sibling M1",
    "questionTemplate": "Was a [ROLE_SIMPLE] of a [NP_SIMPLE] 's [ROLE_SIMPLE] [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:people.person.sibling_s/ns:people.sibling_relationship.sibling|ns:fictional_universe.fictional_character.siblings/ns:fictional_universe.sibling_relationship_of_fictional_characters.siblings ?x1 .\n?x1 a ns:film.cinematographer .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ns:m.09v0w6j != ?x0 ) .\nns:m.09v0w6j ns:people.person.sibling_s/ns:people.sibling_relationship.sibling|ns:fictional_universe.fictional_character.siblings/ns:fictional_universe.sibling_relationship_of_fictional_characters.siblings ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x1 a M0 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( M1 != ?x0 ) .\nM1 P0 ?x0\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 20
  },
  {
    "questionIdx": 5823,
    "questionWithBrackets": "Did [Dil Se] star [Kaal]'s star and producer",
    "questionPatternModEntities": "Did M1 star M0 's star and producer",
    "questionTemplate": "Did [entity] [VP_SIMPLE] [entity] 's [ROLE_SIMPLE] and [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.actor.film/ns:film.performance.film ns:m.0278325 .\n?x0 ns:film.producer.film|ns:film.production_company.films ns:m.0278325 .\nns:m.05xfj0 ns:film.film.starring/ns:film.performance.actor ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M0 .\nM1 P2 ?x0\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 20
  },
  {
    "questionIdx": 11290,
    "questionWithBrackets": "Did [Jeffrey Chernov]'s employer's employee executive produce [The Ruins]",
    "questionPatternModEntities": "Did M1 's employer 's employee executive produce M0",
    "questionTemplate": "Did [entity] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE] [VP_SIMPLE] [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.producer.films_executive_produced ns:m.03nqpb7 .\n?x0 ns:people.person.employment_history/ns:business.employment_tenure.company ?x1 .\n?x1 ns:business.employer.employees/ns:business.employment_tenure.person ns:m.03d9kqc\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 ?x1 .\n?x1 P2 M1\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 20
  },
  {
    "questionIdx": 24417,
    "questionWithBrackets": "Did [Virgin Australia Holdings]'s employee's child executive produce [Breaking the Taboo]",
    "questionPatternModEntities": "Did M1 's employee 's child executive produce M0",
    "questionTemplate": "Did [entity] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE] [VP_SIMPLE] [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.producer.films_executive_produced ns:m.0h274tz .\n?x0 ns:people.person.parents|ns:fictional_universe.fictional_character.parents|ns:organization.organization.parent/ns:organization.organization_relationship.parent ?x1 .\n?x1 ns:people.person.employment_history/ns:business.employment_tenure.company ns:m.0h5ykd\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 ?x1 .\n?x1 P2 M1\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 20
  },
  {
    "questionIdx": 49483,
    "questionWithBrackets": "Was [Carol Hubner] a producer of a film's prequel",
    "questionPatternModEntities": "Was M1 a producer of a film 's prequel",
    "questionTemplate": "Was [entity] a [ROLE_SIMPLE] of a [NP_SIMPLE] 's [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.film.sequel ?x1 .\n?x1 a ns:film.film .\nns:m.0vtt3lg ns:film.producer.film|ns:film.production_company.films ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x1 a M0 .\nM1 P1 ?x0\n}",
    "expectedResponse": "No",
    "recursionDepth": 20
  },
  {
    "questionIdx": 181260,
    "questionWithBrackets": "What was produced by [Geek Maggot Bingo]'s costume designer and editor",
    "questionPatternModEntities": "What was produced by M0 's costume designer and editor",
    "questionTemplate": "What was [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] and [ROLE_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.film.produced_by|ns:film.film.production_companies ?x1 .\n?x1 ns:film.editor.film ns:m.04j1v_x .\n?x1 ns:film.film_costumer_designer.costume_design_for_film ns:m.04j1v_x\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x1 P1 M0 .\n?x1 P2 M0\n}",
    "expectedResponse": "Geek Maggot Bingo; Mutable Fire",
    "recursionDepth": 20
  },
  {
    "questionIdx": 54463,
    "questionWithBrackets": "Was [Expres]'s art director, writer, and producer [Daniel S\u00e1nchez Ar\u00e9valo]",
    "questionPatternModEntities": "Was M1 's art director , writer , and producer M0",
    "questionTemplate": "Was [entity] 's [ROLE_SIMPLE] , [ROLE_SIMPLE] , and [ROLE_SIMPLE] [entity]",
    "sparql": "SELECT count(*) WHERE {\nns:m.04p4dyg ns:film.film_art_director.films_art_directed ns:m.0cgzjdj .\nns:m.04p4dyg ns:film.producer.film|ns:film.production_company.films ns:m.0cgzjdj .\nns:m.04p4dyg ns:film.writer.film ns:m.0cgzjdj\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1 .\nM0 P2 M1\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 20
  },
  {
    "questionIdx": 146938,
    "questionWithBrackets": "What did [The Brown Bunny]'s costume designer and editor executive produce",
    "questionPatternModEntities": "What did M0 's costume designer and editor executive produce",
    "questionTemplate": "What did [entity] 's [ROLE_SIMPLE] and [ROLE_SIMPLE] [VP_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.film.executive_produced_by ?x1 .\n?x1 ns:film.editor.film ns:m.01n9cy .\n?x1 ns:film.film_costumer_designer.costume_design_for_film ns:m.01n9cy\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x1 P1 M0 .\n?x1 P2 M0\n}",
    "expectedResponse": "Promises Written in Water",
    "recursionDepth": 20
  },
  {
    "questionIdx": 62899,
    "questionWithBrackets": "Was [Khoa Le] [Back To The Temple Of The Sun]'s art director, cinematographer, and editor",
    "questionPatternModEntities": "Was M0 M1 's art director , cinematographer , and editor",
    "questionTemplate": "Was [entity] [entity] 's [ROLE_SIMPLE] , [ROLE_SIMPLE] , and [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\nns:m.010psf5k ns:film.cinematographer.film ns:m.0_skmcz .\nns:m.010psf5k ns:film.editor.film ns:m.0_skmcz .\nns:m.010psf5k ns:film.film_art_director.films_art_directed ns:m.0_skmcz\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1 .\nM0 P2 M1\n}",
    "expectedResponse": "No",
    "recursionDepth": 20
  },
  {
    "questionIdx": 6288,
    "questionWithBrackets": "Did [Edmond Wong]'s parent executive produce [All's Well, Ends Well 1997]'s sequel",
    "questionPatternModEntities": "Did M0 's parent executive produce M1 's sequel",
    "questionTemplate": "Did [entity] 's [ROLE_SIMPLE] [VP_SIMPLE] [entity] 's [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.producer.films_executive_produced ?x1 .\n?x0 ns:people.person.children|ns:fictional_universe.fictional_character.children|ns:organization.organization.child/ns:organization.organization_relationship.child ns:m.0c1nffk .\n?x1 ns:film.film.prequel ns:m.0285yxn\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x0 P1 M0 .\n?x1 P2 M1\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 20
  },
  {
    "questionIdx": 174082,
    "questionWithBrackets": "What was edited by [Young Aphrodites]'s costume designer and producer",
    "questionPatternModEntities": "What was edited by M0 's costume designer and producer",
    "questionTemplate": "What was [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] and [ROLE_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.film.edited_by ?x1 .\n?x1 ns:film.film_costumer_designer.costume_design_for_film ns:m.02q4n7k .\n?x1 ns:film.producer.film|ns:film.production_company.films ns:m.02q4n7k\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x1 P1 M0 .\n?x1 P2 M0\n}",
    "expectedResponse": "Oi paranomoi; O Drakos",
    "recursionDepth": 20
  },
  {
    "questionIdx": 149209,
    "questionWithBrackets": "What did a costume designer of [In the Mood for Love] and [Chungking Express] direct",
    "questionPatternModEntities": "What did a costume designer of M0 and M1 direct",
    "questionTemplate": "What did a [ROLE_SIMPLE] of [entity] and [entity] [VP_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.film.directed_by ?x1 .\n?x1 ns:film.film_costumer_designer.costume_design_for_film ns:m.01f85k .\n?x1 ns:film.film_costumer_designer.costume_design_for_film ns:m.01f8gz\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x1 P1 M0 .\n?x1 P1 M1\n}",
    "expectedResponse": "Shaolin Temple Against Lama; Esprit D'Amour",
    "recursionDepth": 20
  },
  {
    "questionIdx": 184503,
    "questionWithBrackets": "What was written by [Julie & Jack]'s costume designer and cinematographer",
    "questionPatternModEntities": "What was written by M0 's costume designer and cinematographer",
    "questionTemplate": "What was [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] and [ROLE_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.film.written_by ?x1 .\n?x1 ns:film.cinematographer.film ns:m.0crtjmg .\n?x1 ns:film.film_costumer_designer.costume_design_for_film ns:m.0crtjmg\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x1 P1 M0 .\n?x1 P2 M0\n}",
    "expectedResponse": "Birdemic: Shock and Terror; Julie & Jack",
    "recursionDepth": 20
  },
  {
    "questionIdx": 184116,
    "questionWithBrackets": "What was written by [Cazzo Film]'s German founder",
    "questionPatternModEntities": "What was written by M0 's German founder",
    "questionTemplate": "What was [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.film.written_by ?x1 .\n?x1 ns:organization.organization_founder.organizations_founded ns:m.05f83jk .\n?x1 ns:people.person.nationality ns:m.0345h\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x1 P1 M0 .\n?x1 P2 M1\n}",
    "expectedResponse": "Fucking Different XXX",
    "recursionDepth": 20
  },
  {
    "questionIdx": 151750,
    "questionWithBrackets": "What did an employee of [WGAR-FM] and [KJOY] found",
    "questionPatternModEntities": "What did a employee of M0 and M1 found",
    "questionTemplate": "What did a [ROLE_SIMPLE] of [entity] and [entity] [VP_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:organization.organization.founders ?x1 .\n?x1 ns:people.person.employment_history/ns:business.employment_tenure.company ns:m.02qz0dl .\n?x1 ns:people.person.employment_history/ns:business.employment_tenure.company ns:m.092vk3\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x1 P1 M0 .\n?x1 P1 M1\n}",
    "expectedResponse": "Imus Ranch",
    "recursionDepth": 20
  },
  {
    "questionIdx": 73871,
    "questionWithBrackets": "Was [Rex Balsom] [Kyle Lewis]'s spouse, sibling, and parent",
    "questionPatternModEntities": "Was M0 M1 's spouse , sibling , and parent",
    "questionTemplate": "Was [entity] [entity] 's [ROLE_SIMPLE] , [ROLE_SIMPLE] , and [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\nFILTER ( ns:m.0278psy != ns:m.05zvmcm ) .\nFILTER ( ns:m.0278psy != ns:m.05zvmcm ) .\nns:m.0278psy ns:people.person.children|ns:fictional_universe.fictional_character.children|ns:organization.organization.child/ns:organization.organization_relationship.child ns:m.05zvmcm .\nns:m.0278psy ns:people.person.sibling_s/ns:people.sibling_relationship.sibling|ns:fictional_universe.fictional_character.siblings/ns:fictional_universe.sibling_relationship_of_fictional_characters.siblings ns:m.05zvmcm .\nns:m.0278psy ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ns:m.05zvmcm\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\nFILTER ( M0 != M1 ) .\nFILTER ( M0 != M1 ) .\nM0 P0 M1 .\nM0 P1 M1 .\nM0 P2 M1\n}",
    "expectedResponse": "No",
    "recursionDepth": 20
  },
  {
    "questionIdx": 27248,
    "questionWithBrackets": "Did a French art director executive produce [Mister Cok]",
    "questionPatternModEntities": "Did a French art director executive produce M1",
    "questionTemplate": "Did a [ADJECTIVE_SIMPLE] [NP_SIMPLE] [VP_SIMPLE] [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 a ns:film.film_art_director .\n?x0 ns:film.producer.films_executive_produced ns:g.1237d7_1 .\n?x0 ns:people.person.nationality ns:m.0f8l9c\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M1 .\n?x0 P1 M2 .\n?x0 a M0\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 20
  },
  {
    "questionIdx": 73248,
    "questionWithBrackets": "Was [Rachel van Galen] [S\u00f8ren Lerby]'s Dutch spouse's spouse",
    "questionPatternModEntities": "Was M2 M1 's Dutch spouse 's spouse",
    "questionTemplate": "Was [entity] [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] 's [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:people.person.nationality ns:m.059j2 .\n?x0 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ns:m.06_zty .\nFILTER ( ?x0 != ns:m.06_zty ) .\nFILTER ( ns:m.0v_kxp3 != ?x0 ) .\nns:m.0v_kxp3 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M1 ) .\nFILTER ( M2 != ?x0 ) .\nM2 P1 ?x0\n}",
    "expectedResponse": "No",
    "recursionDepth": 20
  },
  {
    "questionIdx": 56619,
    "questionWithBrackets": "Was [Gerard Adriaan Heineken] [Brarudi]'s parent's Dutch founder",
    "questionPatternModEntities": "Was M1 M0 's parent 's Dutch founder",
    "questionTemplate": "Was [entity] [entity] 's [ROLE_SIMPLE] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:people.person.children|ns:fictional_universe.fictional_character.children|ns:organization.organization.child/ns:organization.organization_relationship.child ns:m.011v7cw3 .\nns:m.01w4b4 ns:organization.organization_founder.organizations_founded ?x0 .\nns:m.01w4b4 ns:people.person.nationality ns:m.059j2\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 ?x0 .\nM1 P2 M2\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 20
  },
  {
    "questionIdx": 67527,
    "questionWithBrackets": "Was [Michiharu Otagiri] a sibling of a character's sibling",
    "questionPatternModEntities": "Was M1 a sibling of a character 's sibling",
    "questionTemplate": "Was [entity] a [ROLE_SIMPLE] of a [NP_SIMPLE] 's [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:people.person.sibling_s/ns:people.sibling_relationship.sibling|ns:fictional_universe.fictional_character.siblings/ns:fictional_universe.sibling_relationship_of_fictional_characters.siblings ?x1 .\n?x1 a ns:fictional_universe.fictional_character .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ns:m.0c02j1q != ?x0 ) .\nns:m.0c02j1q ns:people.person.sibling_s/ns:people.sibling_relationship.sibling|ns:fictional_universe.fictional_character.siblings/ns:fictional_universe.sibling_relationship_of_fictional_characters.siblings ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x1 a M0 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( M1 != ?x0 ) .\nM1 P0 ?x0\n}",
    "expectedResponse": "No",
    "recursionDepth": 20
  },
  {
    "questionIdx": 184116,
    "questionWithBrackets": "What was written by [Cazzo Film]'s German founder",
    "questionPatternModEntities": "What was written by M0 's German founder",
    "questionTemplate": "What was [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.film.written_by ?x1 .\n?x1 ns:organization.organization_founder.organizations_founded ns:m.05f83jk .\n?x1 ns:people.person.nationality ns:m.0345h\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x1 P1 M0 .\n?x1 P2 M1\n}",
    "expectedResponse": "Fucking Different XXX",
    "recursionDepth": 20
  },
  {
    "questionIdx": 10763,
    "questionWithBrackets": "Did [Jacques Demy] influence [Huey]'s female cinematographer",
    "questionPatternModEntities": "Did M2 influence M1 's female cinematographer",
    "questionTemplate": "Did [entity] [VP_SIMPLE] [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.cinematographer.film ns:m.0hz6219 .\n?x0 ns:people.person.gender ns:m.02zsn .\nns:m.046dxx ns:influence.influence_node.influenced ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nM2 P2 ?x0\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 20
  },
  {
    "questionIdx": 27081,
    "questionWithBrackets": "Did a Dutch film producer executive produce [Sugarhouse]",
    "questionPatternModEntities": "Did a Dutch film producer executive produce M1",
    "questionTemplate": "Did a [ADJECTIVE_SIMPLE] [NP_SIMPLE] [VP_SIMPLE] [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 a ns:film.producer .\n?x0 ns:film.producer.films_executive_produced ns:m.02rpdtq .\n?x0 ns:people.person.nationality ns:m.059j2\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M1 .\n?x0 P1 M2 .\n?x0 a M0\n}",
    "expectedResponse": "No",
    "recursionDepth": 20
  },
  {
    "questionIdx": 87475,
    "questionWithBrackets": "Was [Yo quiero vivir contigo] executive produced by a character's actor",
    "questionPatternModEntities": "Was M1 executive produced by a character 's actor",
    "questionTemplate": "Was [entity] [VP_SIMPLE] by a [NP_SIMPLE] 's [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.actor.film/ns:film.performance.character ?x1 .\n?x1 a ns:fictional_universe.fictional_character .\nns:m.06_y8rj ns:film.film.executive_produced_by ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x1 a M0 .\nM1 P1 ?x0\n}",
    "expectedResponse": "No",
    "recursionDepth": 20
  },
  {
    "questionIdx": 184891,
    "questionWithBrackets": "What was written by [Strictly Sexual]'s executive producer and costume designer",
    "questionPatternModEntities": "What was written by M0 's executive producer and costume designer",
    "questionTemplate": "What was [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] and [ROLE_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.film.written_by ?x1 .\n?x1 ns:film.film_costumer_designer.costume_design_for_film ns:m.080fgs6 .\n?x1 ns:film.producer.films_executive_produced ns:m.080fgs6\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x1 P1 M0 .\n?x1 P2 M0\n}",
    "expectedResponse": "Conventioneers; Devil's Pond",
    "recursionDepth": 20
  },
  {
    "questionIdx": 49714,
    "questionWithBrackets": "Was [Cecil Clementi] employed by [Seven Days in Utopia]'s executive producer's country of nationality",
    "questionPatternModEntities": "Was M1 employed by M0 's executive producer 's country of nationality",
    "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ^ns:people.person.nationality ?x1 .\n?x1 ns:film.producer.films_executive_produced ns:m.0gky16r .\nns:m.06c_cg ns:people.person.employment_history/ns:business.employment_tenure.company ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x1 P1 M0 .\nM1 P2 ?x0\n}",
    "expectedResponse": "No",
    "recursionDepth": 20
  },
  {
    "questionIdx": 181728,
    "questionWithBrackets": "What was produced by [Summer, Kyoto]'s Japanese cinematographer",
    "questionPatternModEntities": "What was produced by M1 's Japanese cinematographer",
    "questionTemplate": "What was [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.film.produced_by|ns:film.film.production_companies ?x1 .\n?x1 ns:film.cinematographer.film ns:m.011324gp .\n?x1 ns:people.person.nationality ns:m.03_3d\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x1 P1 M0 .\n?x1 P2 M1\n}",
    "expectedResponse": "Flame of Mountain; Night of Fish",
    "recursionDepth": 20
  },
  {
    "questionIdx": 18652,
    "questionWithBrackets": "Did [Sad Vacation]'s Japanese writer edit [Lakeside Murder Case]",
    "questionPatternModEntities": "Did M1 's Japanese writer edit M0",
    "questionTemplate": "Did [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] [VP_SIMPLE] [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.editor.film ns:m.0gksc5_ .\n?x0 ns:film.writer.film ns:m.04n6dkc .\n?x0 ns:people.person.nationality ns:m.03_3d\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P2 M2\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 20
  },
  {
    "questionIdx": 48715,
    "questionWithBrackets": "Was [Bryan Singer] [Grown Ups 2]'s prequel's star and executive producer",
    "questionPatternModEntities": "Was M1 M0 's prequel 's star and executive producer",
    "questionTemplate": "Was [entity] [entity] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE] and [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.film.sequel ns:m.0mzt5cs .\nns:m.07nznf ns:film.actor.film/ns:film.performance.film ?x0 .\nns:m.07nznf ns:film.producer.films_executive_produced ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 ?x0 .\nM1 P2 ?x0\n}",
    "expectedResponse": "No",
    "recursionDepth": 20
  },
  {
    "questionIdx": 89401,
    "questionWithBrackets": "Was a French art director influenced by [Winsor McCay]",
    "questionPatternModEntities": "Was a French art director influenced by M1",
    "questionTemplate": "Was a [ADJECTIVE_SIMPLE] [NP_SIMPLE] [VP_SIMPLE] by [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 a ns:film.film_art_director .\n?x0 ns:influence.influence_node.influenced_by ns:m.0ljs3 .\n?x0 ns:people.person.nationality ns:m.0f8l9c\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M1 .\n?x0 P1 M2 .\n?x0 a M0\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 20
  },
  {
    "questionIdx": 23416,
    "questionWithBrackets": "Did [Touch of Evil]'s American writer influence [Wes Anderson]",
    "questionPatternModEntities": "Did M0 's American writer influence M1",
    "questionTemplate": "Did [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] [VP_SIMPLE] [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.writer.film ns:m.0h1kp .\n?x0 ns:influence.influence_node.influenced ns:m.02ld6x .\n?x0 ns:people.person.nationality ns:m.09c7w0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P2 M2\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 20
  },
  {
    "questionIdx": 45300,
    "questionWithBrackets": "Was [Amer Sports]'s child's Canadian founder [Charles Revson]",
    "questionPatternModEntities": "Was M0 's child 's Canadian founder M1",
    "questionTemplate": "Was [entity] 's [ROLE_SIMPLE] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:people.person.parents|ns:fictional_universe.fictional_character.parents|ns:organization.organization.parent/ns:organization.organization_relationship.parent ns:m.0g8kf5 .\nns:m.08_n8r ns:organization.organization_founder.organizations_founded ?x0 .\nns:m.08_n8r ns:people.person.nationality ns:m.0d060g\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 ?x0 .\nM1 P2 M2\n}",
    "expectedResponse": "No",
    "recursionDepth": 20
  },
  {
    "questionIdx": 150127,
    "questionWithBrackets": "What did a founder and employee of [Power Entertainment Media Ltd] produce",
    "questionPatternModEntities": "What did a founder and employee of M0 produce",
    "questionTemplate": "What did a [ROLE_SIMPLE] and [ROLE_SIMPLE] of [entity] [VP_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.film.produced_by|ns:film.film.production_companies ?x1 .\n?x1 ns:organization.organization_founder.organizations_founded ns:m.0z9c_jx .\n?x1 ns:people.person.employment_history/ns:business.employment_tenure.company ns:m.0z9c_jx\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x1 P1 M0 .\n?x1 P2 M0\n}",
    "expectedResponse": "Loves Music, Loves to Dance",
    "recursionDepth": 21
  },
  {
    "questionIdx": 62929,
    "questionWithBrackets": "Was [Kids + Money]'s female American writer [Lenore Coffee]",
    "questionPatternModEntities": "Was M1 's female American writer M0",
    "questionTemplate": "Was [entity] 's [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] [entity]",
    "sparql": "SELECT count(*) WHERE {\nns:m.0kst41 ns:film.writer.film ns:m.06_w263 .\nns:m.0kst41 ns:people.person.gender ns:m.02zsn .\nns:m.0kst41 ns:people.person.nationality ns:m.09c7w0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M2 .\nM0 P2 M3\n}",
    "expectedResponse": "No",
    "recursionDepth": 21
  },
  {
    "questionIdx": 221168,
    "questionWithBrackets": "Who married a French costume designer of [Lovers Like Us]",
    "questionPatternModEntities": "Who married a French costume designer of M1",
    "questionTemplate": "Who [VP_SIMPLE] a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:people.person .\n?x0 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ?x1 .\n?x1 ns:film.film_costumer_designer.costume_design_for_film ns:m.0274gp5 .\n?x1 ns:people.person.nationality ns:m.0f8l9c .\nFILTER ( ?x0 != ?x1 )\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 a M0 .\n?x1 P1 M1 .\n?x1 P2 M2 .\nFILTER ( ?x0 != ?x1 )\n}",
    "expectedResponse": "Fran\u00e7ois Leterrier",
    "recursionDepth": 21
  },
  {
    "questionIdx": 216638,
    "questionWithBrackets": "Who did an executive producer and star of [Rupert and the Frog Song] influence",
    "questionPatternModEntities": "Who did a executive producer and star of M1 influence",
    "questionTemplate": "Who did a [ROLE_SIMPLE] and [ROLE_SIMPLE] of [entity] [VP_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:people.person .\n?x0 ns:influence.influence_node.influenced_by ?x1 .\n?x1 ns:film.actor.film/ns:film.performance.film ns:m.0cyllk .\n?x1 ns:film.producer.films_executive_produced ns:m.0cyllk\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 a M0 .\n?x1 P1 M1 .\n?x1 P2 M1\n}",
    "expectedResponse": "George Michael",
    "recursionDepth": 21
  },
  {
    "questionIdx": 16384,
    "questionWithBrackets": "Did [Pak! Pak! My Dr. Kwak!]'s male executive producer executive produce [Stalked at 17]",
    "questionPatternModEntities": "Did M0 's male executive producer executive produce M1",
    "questionTemplate": "Did [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] [VP_SIMPLE] [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.producer.films_executive_produced ns:m.0glrxnq .\n?x0 ns:film.producer.films_executive_produced ns:m.0nb345p .\n?x0 ns:people.person.gender ns:m.05zppz\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P1 M2\n}",
    "expectedResponse": "No",
    "recursionDepth": 21
  },
  {
    "questionIdx": 31853,
    "questionWithBrackets": "Did a director of [Texas Tom] and [Blood Work] produce [Absolute Power]",
    "questionPatternModEntities": "Did a director of M1 and M2 produce M0",
    "questionTemplate": "Did a [ROLE_SIMPLE] of [entity] and [entity] [VP_SIMPLE] [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.director.film ns:m.02q722l .\n?x0 ns:film.director.film ns:m.043h5s .\n?x0 ns:film.producer.film|ns:film.production_company.films ns:m.08sz9r\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P1 M2\n}",
    "expectedResponse": "No",
    "recursionDepth": 21
  },
  {
    "questionIdx": 207871,
    "questionWithBrackets": "Which person edited and directed [Ram Teri Ganga Maili]",
    "questionPatternModEntities": "Which person edited and directed M1",
    "questionTemplate": "Which [NP_SIMPLE] [VP_SIMPLE] and [VP_SIMPLE] [entity]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:people.person .\n?x0 ns:film.director.film ns:m.05k688 .\n?x0 ns:film.editor.film ns:m.05k688\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M1 .\n?x0 P1 M1 .\n?x0 a M0\n}",
    "expectedResponse": "Raj Kapoor",
    "recursionDepth": 21
  },
  {
    "questionIdx": 157496,
    "questionWithBrackets": "What film producer employed [Benjamin Bronfman]'s sibling's parent",
    "questionPatternModEntities": "What film producer employed M1 's sibling 's parent",
    "questionTemplate": "What [NP_SIMPLE] [VP_SIMPLE] [entity] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:film.producer .\n?x0 ns:business.employer.employees/ns:business.employment_tenure.person ?x1 .\n?x1 ns:people.person.children|ns:fictional_universe.fictional_character.children|ns:organization.organization.child/ns:organization.organization_relationship.child ?x2 .\n?x2 ns:people.person.sibling_s/ns:people.sibling_relationship.sibling|ns:fictional_universe.fictional_character.siblings/ns:fictional_universe.sibling_relationship_of_fictional_characters.siblings ns:m.0gfgjtf .\nFILTER ( ?x2 != ns:m.0gfgjtf )\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 a M0 .\n?x1 P1 ?x2 .\n?x2 P2 M1 .\nFILTER ( ?x2 != M1 )\n}",
    "expectedResponse": "Warner Music Group",
    "recursionDepth": 21
  },
  {
    "questionIdx": 230956,
    "questionWithBrackets": "Who was a film producer that was employed by [Folio Corporation]",
    "questionPatternModEntities": "Who was a film producer that was employed by M2",
    "questionTemplate": "Who was a [NP_SIMPLE] that was [VP_SIMPLE] by [entity]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:film.producer .\n?x0 a ns:people.person .\n?x0 ns:people.person.employment_history/ns:business.employment_tenure.company ns:m.04mx94b\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M2 .\n?x0 a M0 .\n?x0 a M1\n}",
    "expectedResponse": "Brad Pelo",
    "recursionDepth": 21
  },
  {
    "questionIdx": 38360,
    "questionWithBrackets": "Did a producer of [Brother Bear 2]'s prequel found [DePatie-Freleng Enterprises]",
    "questionPatternModEntities": "Did a producer of M1 's prequel found M0",
    "questionTemplate": "Did a [ROLE_SIMPLE] of [entity] 's [ROLE_SIMPLE] [VP_SIMPLE] [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.producer.film|ns:film.production_company.films ?x1 .\n?x0 ns:organization.organization_founder.organizations_founded ns:m.01x379 .\n?x1 ns:film.film.sequel ns:m.0bk2k2\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 ?x1 .\n?x1 P2 M1\n}",
    "expectedResponse": "No",
    "recursionDepth": 21
  },
  {
    "questionIdx": 221775,
    "questionWithBrackets": "Who married an executive producer and writer of [Summer Eleven]",
    "questionPatternModEntities": "Who married a executive producer and writer of M1",
    "questionTemplate": "Who [VP_SIMPLE] a [ROLE_SIMPLE] and [ROLE_SIMPLE] of [entity]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:people.person .\n?x0 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ?x1 .\n?x1 ns:film.producer.films_executive_produced ns:m.0gm0zqz .\n?x1 ns:film.writer.film ns:m.0gm0zqz .\nFILTER ( ?x0 != ?x1 )\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 a M0 .\n?x1 P1 M1 .\n?x1 P2 M1 .\nFILTER ( ?x0 != ?x1 )\n}",
    "expectedResponse": "Valerie Mahaffey",
    "recursionDepth": 21
  },
  {
    "questionIdx": 140628,
    "questionWithBrackets": "What company was founded by a costume designer of [Le baron fant\u00f4me]",
    "questionPatternModEntities": "What company was founded by a costume designer of M1",
    "questionTemplate": "What [NP_SIMPLE] was [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:business.employer .\n?x0 ns:organization.organization.founders ?x1 .\n?x1 ns:film.film_costumer_designer.costume_design_for_film ns:m.0bbbnk_\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 a M0 .\n?x1 P1 M1\n}",
    "expectedResponse": "Christian Dior S.A.",
    "recursionDepth": 21
  },
  {
    "questionIdx": 32023,
    "questionWithBrackets": "Did a distributor of [The Real Blonde] and [A Lady's Profession] acquire [TVX Broadcast Group]",
    "questionPatternModEntities": "Did a distributor of M1 and M2 acquire M0",
    "questionTemplate": "Did a [ROLE_SIMPLE] of [entity] and [entity] [VP_SIMPLE] [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.film_distributor.films_distributed/ns:film.film_film_distributor_relationship.film ns:m.012wv2g0 .\n?x0 ns:film.film_distributor.films_distributed/ns:film.film_film_distributor_relationship.film ns:m.06fhrc .\n?x0 ns:organization.organization.companies_acquired/ns:business.acquisition.company_acquired ns:m.0dl0zr\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P1 M2\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 21
  },
  {
    "questionIdx": 203581,
    "questionWithBrackets": "Which film producer did [Pauline Kael] marry and influence",
    "questionPatternModEntities": "Which film producer did M1 marry and influence",
    "questionTemplate": "Which [NP_SIMPLE] did [entity] [VP_SIMPLE] and [VP_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:film.producer .\n?x0 ns:influence.influence_node.influenced_by ns:m.01tgbf .\n?x0 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ns:m.01tgbf .\nFILTER ( ?x0 != ns:m.01tgbf )\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M1 .\n?x0 P1 M1 .\n?x0 a M0 .\nFILTER ( ?x0 != M1 )\n}",
    "expectedResponse": "James Broughton",
    "recursionDepth": 21
  },
  {
    "questionIdx": 31389,
    "questionWithBrackets": "Did a costume designer of [Picasso and Dance] influence [Max Jacob] and [Norman Ollestad]",
    "questionPatternModEntities": "Did a costume designer of M2 influence M0 and M1",
    "questionTemplate": "Did a [ROLE_SIMPLE] of [entity] [VP_SIMPLE] [entity] and [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.film_costumer_designer.costume_design_for_film ns:m.0qz85rr .\n?x0 ns:influence.influence_node.influenced ns:m.06w9gfk .\n?x0 ns:influence.influence_node.influenced ns:m.0g_00\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P1 M2\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 21
  },
  {
    "questionIdx": 41323,
    "questionWithBrackets": "Did an actor of [Logan] produce [X-Men: First Class]'s sequel",
    "questionPatternModEntities": "Did a actor of M0 produce M1 's sequel",
    "questionTemplate": "Did a [ROLE_SIMPLE] of [entity] [VP_SIMPLE] [entity] 's [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.actor.film/ns:film.performance.character ns:m.01s283 .\n?x0 ns:film.producer.film|ns:film.production_company.films ?x1 .\n?x1 ns:film.film.prequel ns:m.0cd2vh9\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x0 P1 M0 .\n?x1 P2 M1\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 21
  },
  {
    "questionIdx": 69957,
    "questionWithBrackets": "Was [Ole Sheldon] influenced by a spouse of a film editor",
    "questionPatternModEntities": "Was M1 influenced by a spouse of a film editor",
    "questionTemplate": "Was [entity] [VP_SIMPLE] by a [ROLE_SIMPLE] of a [NP_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ?x1 .\n?x1 a ns:film.editor .\nFILTER ( ?x0 != ?x1 ) .\nns:m.05q8drq ns:influence.influence_node.influenced_by ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x1 a M0 .\nFILTER ( ?x0 != ?x1 ) .\nM1 P1 ?x0\n}",
    "expectedResponse": "No",
    "recursionDepth": 21
  },
  {
    "questionIdx": 216633,
    "questionWithBrackets": "Who did an executive producer and art director of [Tetsuo II: Body Hammer] influence",
    "questionPatternModEntities": "Who did a executive producer and art director of M1 influence",
    "questionTemplate": "Who did a [ROLE_SIMPLE] and [ROLE_SIMPLE] of [entity] [VP_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:people.person .\n?x0 ns:influence.influence_node.influenced_by ?x1 .\n?x1 ns:film.film_art_director.films_art_directed ns:m.0brs6b .\n?x1 ns:film.producer.films_executive_produced ns:m.0brs6b\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 a M0 .\n?x1 P1 M1 .\n?x1 P2 M1\n}",
    "expectedResponse": "Darren Aronofsky",
    "recursionDepth": 21
  },
  {
    "questionIdx": 86157,
    "questionWithBrackets": "Was [Walt Disney Pictures] a company that [Windstruck] was distributed by",
    "questionPatternModEntities": "Was M0 a company that M2 was distributed by",
    "questionTemplate": "Was [entity] a [NP_SIMPLE] that [entity] was [VP_SIMPLE] by",
    "sparql": "SELECT count(*) WHERE {\nns:m.01795t a ns:business.employer .\nns:m.01795t ns:film.film_distributor.films_distributed/ns:film.film_film_distributor_relationship.film ns:m.09_hyn\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M2 .\nM0 a M1\n}",
    "expectedResponse": "No",
    "recursionDepth": 21
  },
  {
    "questionIdx": 62132,
    "questionWithBrackets": "Was [Jo\u00e3o Pedro Rodrigues] a costume designer that [About Ndugu] was written by",
    "questionPatternModEntities": "Was M0 a costume designer that M2 was written by",
    "questionTemplate": "Was [entity] a [NP_SIMPLE] that [entity] was [VP_SIMPLE] by",
    "sparql": "SELECT count(*) WHERE {\nns:m.02vshld a ns:film.film_costumer_designer .\nns:m.02vshld ns:film.writer.film ns:m.0xn3krj\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M2 .\nM0 a M1\n}",
    "expectedResponse": "No",
    "recursionDepth": 21
  },
  {
    "questionIdx": 110501,
    "questionWithBrackets": "Was an employer of [Bruce Broughton] founded by an art director",
    "questionPatternModEntities": "Was a employer of M0 founded by a art director",
    "questionTemplate": "Was a [ROLE_SIMPLE] of [entity] [VP_SIMPLE] by a [NP_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:business.employer.employees/ns:business.employment_tenure.person ns:m.0bxtyq .\n?x0 ns:organization.organization.founders ?x1 .\n?x1 a ns:film.film_art_director\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x0 P1 M0 .\n?x1 a M1\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 21
  },
  {
    "questionIdx": 221619,
    "questionWithBrackets": "Who married a sibling and parent of [Taylor Hayes]",
    "questionPatternModEntities": "Who married a sibling and parent of M1",
    "questionTemplate": "Who [VP_SIMPLE] a [ROLE_SIMPLE] and [ROLE_SIMPLE] of [entity]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:people.person .\n?x0 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ?x1 .\n?x1 ns:people.person.children|ns:fictional_universe.fictional_character.children|ns:organization.organization.child/ns:organization.organization_relationship.child ns:m.025v2m6 .\n?x1 ns:people.person.sibling_s/ns:people.sibling_relationship.sibling|ns:fictional_universe.fictional_character.siblings/ns:fictional_universe.sibling_relationship_of_fictional_characters.siblings ns:m.025v2m6 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x1 != ns:m.025v2m6 )\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 a M0 .\n?x1 P1 M1 .\n?x1 P2 M1 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x1 != M1 )\n}",
    "expectedResponse": "Pamela Douglas",
    "recursionDepth": 21
  },
  {
    "questionIdx": 211123,
    "questionWithBrackets": "Which screenwriter wrote and directed [I Accidentally Domed Your Son]",
    "questionPatternModEntities": "Which screenwriter wrote and directed M1",
    "questionTemplate": "Which [NP_SIMPLE] [VP_SIMPLE] and [VP_SIMPLE] [entity]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:film.writer .\n?x0 ns:film.director.film ns:m.0crsg44 .\n?x0 ns:film.writer.film ns:m.0crsg44\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M1 .\n?x0 P1 M1 .\n?x0 a M0\n}",
    "expectedResponse": "Ryan Combs",
    "recursionDepth": 21
  },
  {
    "questionIdx": 45695,
    "questionWithBrackets": "Was [Andr\u00e9 d'Ormesson] a parent of a French actor",
    "questionPatternModEntities": "Was M2 a parent of a French actor",
    "questionTemplate": "Was [entity] a [ROLE_SIMPLE] of a [ADJECTIVE_SIMPLE] [NP_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 a ns:film.actor .\n?x0 ns:people.person.nationality ns:m.0f8l9c .\nns:g.121fwr7y ns:people.person.children|ns:fictional_universe.fictional_character.children|ns:organization.organization.child/ns:organization.organization_relationship.child ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M1 .\n?x0 a M0 .\nM2 P1 ?x0\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 21
  },
  {
    "questionIdx": 215544,
    "questionWithBrackets": "Who did a Swedish art director of [Drowning Ghost] marry",
    "questionPatternModEntities": "Who did a Swedish art director of M2 marry",
    "questionTemplate": "Who did a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] [VP_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:people.person .\n?x0 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ?x1 .\n?x1 ns:film.film_art_director.films_art_directed ns:m.04yg4sm .\n?x1 ns:people.person.nationality ns:m.0d0vqn .\nFILTER ( ?x0 != ?x1 )\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 a M0 .\n?x1 P1 M1 .\n?x1 P2 M2 .\nFILTER ( ?x0 != ?x1 )\n}",
    "expectedResponse": "Suzane Crepault",
    "recursionDepth": 21
  },
  {
    "questionIdx": 101919,
    "questionWithBrackets": "Was a male actor of a film [Jason BARNARD]",
    "questionPatternModEntities": "Was a male actor of a film M1",
    "questionTemplate": "Was a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of a [NP_SIMPLE] [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 a ns:film.film .\nns:m.0121q8ds ns:film.actor.film/ns:film.performance.character ?x0 .\nns:m.0121q8ds ns:people.person.gender ns:m.05zppz\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 a M0 .\nM1 P0 ?x0 .\nM1 P1 M2\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 21
  },
  {
    "questionIdx": 41326,
    "questionWithBrackets": "Did an actor of [Max Carrigan] and [Orin Scrivello, DDS] influence [Patton Oswalt]",
    "questionPatternModEntities": "Did a actor of M1 and M2 influence M0",
    "questionTemplate": "Did a [ROLE_SIMPLE] of [entity] and [entity] [VP_SIMPLE] [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.actor.film/ns:film.performance.character ns:m.0gyfn15 .\n?x0 ns:film.actor.film/ns:film.performance.character ns:m.0hgcfpg .\n?x0 ns:influence.influence_node.influenced ns:m.04l19_\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P1 M2\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 21
  },
  {
    "questionIdx": 150203,
    "questionWithBrackets": "What did a male art director of [Prophets and Lessons] write",
    "questionPatternModEntities": "What did a male art director of M1 write",
    "questionTemplate": "What did a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] [VP_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.film.written_by ?x1 .\n?x1 ns:film.film_art_director.films_art_directed ns:m.0_bqxq6 .\n?x1 ns:people.person.gender ns:m.05zppz\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x1 P1 M0 .\n?x1 P2 M1\n}",
    "expectedResponse": "A Lesson Not Learned",
    "recursionDepth": 21
  },
  {
    "questionIdx": 58295,
    "questionWithBrackets": "Was [Helene St\u00f6cker] [Fatal Recordings]'s female German founder",
    "questionPatternModEntities": "Was M0 M1 's female German founder",
    "questionTemplate": "Was [entity] [entity] 's [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\nns:m.0bv3hs ns:organization.organization_founder.organizations_founded ns:m.01nv30 .\nns:m.0bv3hs ns:people.person.gender ns:m.02zsn .\nns:m.0bv3hs ns:people.person.nationality ns:m.0345h\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M2 .\nM0 P2 M3\n}",
    "expectedResponse": "No",
    "recursionDepth": 21
  },
  {
    "questionIdx": 50980,
    "questionWithBrackets": "Was [Cornell, 1965] directed by [Duo Concertantes]'s cinematographer and producer",
    "questionPatternModEntities": "Was M1 directed by M0 's cinematographer and producer",
    "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] and [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.cinematographer.film ns:m.0zvytp_ .\n?x0 ns:film.producer.film|ns:film.production_company.films ns:m.0zvytp_ .\nns:m.0zfc_j4 ns:film.film.directed_by ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M0 .\nM1 P2 ?x0\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 21
  },
  {
    "questionIdx": 168217,
    "questionWithBrackets": "What was a film distributor that was founded by [Paul Colichman]",
    "questionPatternModEntities": "What was a film distributor that was founded by M1",
    "questionTemplate": "What was a [NP_SIMPLE] that was [VP_SIMPLE] by [entity]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:film.film_distributor .\n?x0 ns:organization.organization.founders ns:m.04cs8v8\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M1 .\n?x0 a M0\n}",
    "expectedResponse": "here TV",
    "recursionDepth": 21
  },
  {
    "questionIdx": 195770,
    "questionWithBrackets": "Which cinematographer did [Open Water 2: Adrift]'s prequel's cinematographer marry",
    "questionPatternModEntities": "Which cinematographer did M1 's prequel 's cinematographer marry",
    "questionTemplate": "Which [NP_SIMPLE] did [entity] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE] [VP_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:film.cinematographer .\n?x0 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ?x1 .\n?x1 ns:film.cinematographer.film ?x2 .\n?x2 ns:film.film.sequel ns:m.0fb7g_ .\nFILTER ( ?x0 != ?x1 )\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 a M0 .\n?x1 P1 ?x2 .\n?x2 P2 M1 .\nFILTER ( ?x0 != ?x1 )\n}",
    "expectedResponse": "Chris Kentis; Laura Lau",
    "recursionDepth": 21
  },
  {
    "questionIdx": 51717,
    "questionWithBrackets": "Was [Dave Dictor] a Japanese spouse of an actor",
    "questionPatternModEntities": "Was M1 a Japanese spouse of a actor",
    "questionTemplate": "Was [entity] a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of a [NP_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 a ns:film.actor .\nFILTER ( ns:m.03j3glj != ?x0 ) .\nns:m.03j3glj ns:people.person.nationality ns:m.03_3d .\nns:m.03j3glj ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 a M0 .\nFILTER ( M1 != ?x0 ) .\nM1 P0 M2 .\nM1 P1 ?x0\n}",
    "expectedResponse": "No",
    "recursionDepth": 21
  },
  {
    "questionIdx": 89003,
    "questionWithBrackets": "Was a Chinese spouse of a costume designer [Pieter Geelen]",
    "questionPatternModEntities": "Was a Chinese spouse of a costume designer M1",
    "questionTemplate": "Was a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of a [NP_SIMPLE] [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 a ns:film.film_costumer_designer .\nFILTER ( ns:m.0z7w544 != ?x0 ) .\nns:m.0z7w544 ns:people.person.nationality ns:m.0d05w3 .\nns:m.0z7w544 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 a M0 .\nFILTER ( M1 != ?x0 ) .\nM1 P0 M2 .\nM1 P1 ?x0\n}",
    "expectedResponse": "No",
    "recursionDepth": 21
  },
  {
    "questionIdx": 57466,
    "questionWithBrackets": "Was [Gun Grut] a spouse of a Swedish art director",
    "questionPatternModEntities": "Was M2 a spouse of a Swedish art director",
    "questionTemplate": "Was [entity] a [ROLE_SIMPLE] of a [ADJECTIVE_SIMPLE] [NP_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 a ns:film.film_art_director .\n?x0 ns:people.person.nationality ns:m.0d0vqn .\nFILTER ( ns:m.02k9djn != ?x0 ) .\nns:m.02k9djn ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M1 .\n?x0 a M0 .\nFILTER ( M2 != ?x0 ) .\nM2 P1 ?x0\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 21
  },
  {
    "questionIdx": 84358,
    "questionWithBrackets": "Was [Tung Chee Ping]'s Chinese sibling employed by [Win's Entertainment]",
    "questionPatternModEntities": "Was M0 's Chinese sibling employed by M1",
    "questionTemplate": "Was [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] [VP_SIMPLE] by [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:people.person.employment_history/ns:business.employment_tenure.company ns:m.02rp3dj .\n?x0 ns:people.person.nationality ns:m.0d05w3 .\n?x0 ns:people.person.sibling_s/ns:people.sibling_relationship.sibling|ns:fictional_universe.fictional_character.siblings/ns:fictional_universe.sibling_relationship_of_fictional_characters.siblings ns:m.0v2qxpb .\nFILTER ( ?x0 != ns:m.0v2qxpb )\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P2 M2 .\nFILTER ( ?x0 != M0 )\n}",
    "expectedResponse": "No",
    "recursionDepth": 21
  },
  {
    "questionIdx": 74004,
    "questionWithBrackets": "Was [Richard Linklater] a film editor that was influenced by [Martin Scorsese]",
    "questionPatternModEntities": "Was M0 a film editor that was influenced by M2",
    "questionTemplate": "Was [entity] a [NP_SIMPLE] that was [VP_SIMPLE] by [entity]",
    "sparql": "SELECT count(*) WHERE {\nns:m.03dbds a ns:film.editor .\nns:m.03dbds ns:influence.influence_node.influenced_by ns:m.04sry\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M2 .\nM0 a M1\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 21
  },
  {
    "questionIdx": 89297,
    "questionWithBrackets": "Was a Dutch spouse of a film producer [Vandr\u00e9 Sagrilo Monteiro]",
    "questionPatternModEntities": "Was a Dutch spouse of a film producer M1",
    "questionTemplate": "Was a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of a [NP_SIMPLE] [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 a ns:film.producer .\nFILTER ( ns:m.02832dv != ?x0 ) .\nns:m.02832dv ns:people.person.nationality ns:m.059j2 .\nns:m.02832dv ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 a M0 .\nFILTER ( M1 != ?x0 ) .\nM1 P0 M2 .\nM1 P1 ?x0\n}",
    "expectedResponse": "No",
    "recursionDepth": 21
  },
  {
    "questionIdx": 19014,
    "questionWithBrackets": "Did [Shackled]'s female costume designer executive produce [Amok]",
    "questionPatternModEntities": "Did M1 's female costume designer executive produce M0",
    "questionTemplate": "Did [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] [VP_SIMPLE] [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.film_costumer_designer.costume_design_for_film ns:m.0qps2yl .\n?x0 ns:film.producer.films_executive_produced ns:m.0hnv209 .\n?x0 ns:people.person.gender ns:m.02zsn\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P2 M2\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 21
  },
  {
    "questionIdx": 66261,
    "questionWithBrackets": "Was [Marianne Serpico] a Dutch parent of a film editor",
    "questionPatternModEntities": "Was M1 a Dutch parent of a film editor",
    "questionTemplate": "Was [entity] a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of a [NP_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 a ns:film.editor .\nns:m.0j8rxcl ns:people.person.children|ns:fictional_universe.fictional_character.children|ns:organization.organization.child/ns:organization.organization_relationship.child ?x0 .\nns:m.0j8rxcl ns:people.person.nationality ns:m.059j2\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 a M0 .\nM1 P0 M2 .\nM1 P1 ?x0\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 21
  },
  {
    "questionIdx": 37466,
    "questionWithBrackets": "Did a parent of [Dayle Silliphant] write [Paris-Timbuktu] and [Marlowe]",
    "questionPatternModEntities": "Did a parent of M2 write M0 and M1",
    "questionTemplate": "Did a [ROLE_SIMPLE] of [entity] [VP_SIMPLE] [entity] and [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.writer.film ns:m.0cg59lr .\n?x0 ns:film.writer.film ns:m.0gz8tj .\n?x0 ns:people.person.children|ns:fictional_universe.fictional_character.children|ns:organization.organization.child/ns:organization.organization_relationship.child ns:m.011cmbpf\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P1 M2\n}",
    "expectedResponse": "No",
    "recursionDepth": 21
  },
  {
    "questionIdx": 150473,
    "questionWithBrackets": "What did a producer and costume designer of [Nosferatu] found",
    "questionPatternModEntities": "What did a producer and costume designer of M0 found",
    "questionTemplate": "What did a [ROLE_SIMPLE] and [ROLE_SIMPLE] of [entity] [VP_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:organization.organization.founders ?x1 .\n?x1 ns:film.film_costumer_designer.costume_design_for_film ns:m.0l507 .\n?x1 ns:film.producer.film|ns:film.production_company.films ns:m.0l507\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x1 P1 M0 .\n?x1 P2 M0\n}",
    "expectedResponse": "Prana Film",
    "recursionDepth": 21
  },
  {
    "questionIdx": 67351,
    "questionWithBrackets": "Was [Micha Haupman] a Chinese sibling of an actor",
    "questionPatternModEntities": "Was M1 a Chinese sibling of a actor",
    "questionTemplate": "Was [entity] a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of a [NP_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 a ns:film.actor .\nFILTER ( ns:m.0dnj2cs != ?x0 ) .\nns:m.0dnj2cs ns:people.person.nationality ns:m.0d05w3 .\nns:m.0dnj2cs ns:people.person.sibling_s/ns:people.sibling_relationship.sibling|ns:fictional_universe.fictional_character.siblings/ns:fictional_universe.sibling_relationship_of_fictional_characters.siblings ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 a M0 .\nFILTER ( M1 != ?x0 ) .\nM1 P0 ?x0 .\nM1 P1 M2\n}",
    "expectedResponse": "No",
    "recursionDepth": 21
  },
  {
    "questionIdx": 78184,
    "questionWithBrackets": "Was [Tales of a Street Corner] produced by [Chieko Nakakita]'s Japanese spouse",
    "questionPatternModEntities": "Was M2 produced by M1 's Japanese spouse",
    "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:people.person.nationality ns:m.03_3d .\n?x0 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ns:m.0k1l39 .\nFILTER ( ?x0 != ns:m.0k1l39 ) .\nns:m.0zb0d2x ns:film.film.produced_by|ns:film.film.production_companies ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M1 ) .\nM2 P2 ?x0\n}",
    "expectedResponse": "No",
    "recursionDepth": 21
  },
  {
    "questionIdx": 193626,
    "questionWithBrackets": "Which actor wrote and directed [Howling III]",
    "questionPatternModEntities": "Which actor wrote and directed M1",
    "questionTemplate": "Which [NP_SIMPLE] [VP_SIMPLE] and [VP_SIMPLE] [entity]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:film.actor .\n?x0 ns:film.director.film ns:m.07zhf9 .\n?x0 ns:film.writer.film ns:m.07zhf9\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M1 .\n?x0 P1 M1 .\n?x0 a M0\n}",
    "expectedResponse": "Philippe Mora",
    "recursionDepth": 21
  },
  {
    "questionIdx": 96856,
    "questionWithBrackets": "Was a film director that [Wisit Sasanatieng] was influenced by [Mitr Chaibancha]",
    "questionPatternModEntities": "Was a film director that M2 was influenced by M0",
    "questionTemplate": "Was a [NP_SIMPLE] that [entity] was [VP_SIMPLE] by [entity]",
    "sparql": "SELECT count(*) WHERE {\nns:m.09h1_7 a ns:film.director .\nns:m.09h1_7 ns:influence.influence_node.influenced ns:m.09kxmf\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M2 .\nM0 a M1\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 21
  },
  {
    "questionIdx": 109155,
    "questionWithBrackets": "Was an art director and writer of a film [Massimo Ottoni]",
    "questionPatternModEntities": "Was a art director and writer of a film M1",
    "questionTemplate": "Was a [ROLE_SIMPLE] and [ROLE_SIMPLE] of a [NP_SIMPLE] [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 a ns:film.film .\nns:m.010r1g5f ns:film.film_art_director.films_art_directed ?x0 .\nns:m.010r1g5f ns:film.writer.film ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 a M0 .\nM1 P0 ?x0 .\nM1 P1 ?x0\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 21
  },
  {
    "questionIdx": 62504,
    "questionWithBrackets": "Was [Kamyra Stanfield] a sibling of [Capitol Records]'s employee's actor",
    "questionPatternModEntities": "Was M1 a sibling of M0 's employee 's actor",
    "questionTemplate": "Was [entity] a [ROLE_SIMPLE] of [entity] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.actor.film/ns:film.performance.character ?x1 .\n?x1 ns:people.person.employment_history/ns:business.employment_tenure.company ns:m.017l96 .\nFILTER ( ns:m.0z40w67 != ?x0 ) .\nns:m.0z40w67 ns:people.person.sibling_s/ns:people.sibling_relationship.sibling|ns:fictional_universe.fictional_character.siblings/ns:fictional_universe.sibling_relationship_of_fictional_characters.siblings ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x1 P1 M0 .\nFILTER ( M1 != ?x0 ) .\nM1 P2 ?x0\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 21
  },
  {
    "questionIdx": 149497,
    "questionWithBrackets": "What did a female art director of [Into Temptation] write",
    "questionPatternModEntities": "What did a female art director of M1 write",
    "questionTemplate": "What did a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] [VP_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.film.written_by ?x1 .\n?x1 ns:film.film_art_director.films_art_directed ns:m.0bh7v56 .\n?x1 ns:people.person.gender ns:m.02zsn\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x1 P1 M0 .\n?x1 P2 M1\n}",
    "expectedResponse": "Special Moments By Oksana",
    "recursionDepth": 21
  },
  {
    "questionIdx": 62342,
    "questionWithBrackets": "Was [Juvies] directed by [Micha\u0142 Englert]'s female spouse",
    "questionPatternModEntities": "Was M2 directed by M1 's female spouse",
    "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:people.person.gender ns:m.02zsn .\n?x0 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ns:m.093fk9c .\nFILTER ( ?x0 != ns:m.093fk9c ) .\nns:m.0crxqv8 ns:film.film.directed_by ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M1 ) .\nM2 P2 ?x0\n}",
    "expectedResponse": "No",
    "recursionDepth": 21
  },
  {
    "questionIdx": 66681,
    "questionWithBrackets": "Was [Mats Alfredson] a sibling of a Swedish screenwriter",
    "questionPatternModEntities": "Was M2 a sibling of a Swedish screenwriter",
    "questionTemplate": "Was [entity] a [ROLE_SIMPLE] of a [ADJECTIVE_SIMPLE] [NP_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 a ns:film.writer .\n?x0 ns:people.person.nationality ns:m.0d0vqn .\nFILTER ( ns:m.0xmr5q6 != ?x0 ) .\nns:m.0xmr5q6 ns:people.person.sibling_s/ns:people.sibling_relationship.sibling|ns:fictional_universe.fictional_character.siblings/ns:fictional_universe.sibling_relationship_of_fictional_characters.siblings ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M1 .\n?x0 a M0 .\nFILTER ( M2 != ?x0 ) .\nM2 P1 ?x0\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 21
  },
  {
    "questionIdx": 69492,
    "questionWithBrackets": "Was [Ning Chi] a Chinese parent of a cinematographer",
    "questionPatternModEntities": "Was M1 a Chinese parent of a cinematographer",
    "questionTemplate": "Was [entity] a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of a [NP_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 a ns:film.cinematographer .\nns:m.0y5tlcf ns:people.person.children|ns:fictional_universe.fictional_character.children|ns:organization.organization.child/ns:organization.organization_relationship.child ?x0 .\nns:m.0y5tlcf ns:people.person.nationality ns:m.0d05w3\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 a M0 .\nM1 P0 M2 .\nM1 P1 ?x0\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 21
  },
  {
    "questionIdx": 229277,
    "questionWithBrackets": "Who was a costume designer that [Raghubir Singh] was influenced by",
    "questionPatternModEntities": "Who was a costume designer that M2 was influenced by",
    "questionTemplate": "Who was a [NP_SIMPLE] that [entity] was [VP_SIMPLE] by",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:film.film_costumer_designer .\n?x0 a ns:people.person .\n?x0 ns:influence.influence_node.influenced ns:m.027fdff\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M2 .\n?x0 a M0 .\n?x0 a M1\n}",
    "expectedResponse": "Satyajit Ray",
    "recursionDepth": 21
  },
  {
    "questionIdx": 47591,
    "questionWithBrackets": "Was [Bernadette Landru] a female spouse of a costume designer",
    "questionPatternModEntities": "Was M1 a female spouse of a costume designer",
    "questionTemplate": "Was [entity] a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of a [NP_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 a ns:film.film_costumer_designer .\nFILTER ( ns:m.0rbbwnm != ?x0 ) .\nns:m.0rbbwnm ns:people.person.gender ns:m.02zsn .\nns:m.0rbbwnm ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 a M0 .\nFILTER ( M1 != ?x0 ) .\nM1 P0 M2 .\nM1 P1 ?x0\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 21
  },
  {
    "questionIdx": 177317,
    "questionWithBrackets": "What was executive produced by [The Big Alligator River]'s Italian writer",
    "questionPatternModEntities": "What was executive produced by M0 's Italian writer",
    "questionTemplate": "What was [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.film.executive_produced_by ?x1 .\n?x1 ns:film.writer.film ns:m.0crvdk1 .\n?x1 ns:people.person.nationality ns:m.03rjj\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x1 P1 M0 .\n?x1 P2 M1\n}",
    "expectedResponse": "The Battle of El Alamein",
    "recursionDepth": 21
  },
  {
    "questionIdx": 215616,
    "questionWithBrackets": "Who did a cinematographer and star of [Tales Of An Island] marry",
    "questionPatternModEntities": "Who did a cinematographer and star of M1 marry",
    "questionTemplate": "Who did a [ROLE_SIMPLE] and [ROLE_SIMPLE] of [entity] [VP_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:people.person .\n?x0 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ?x1 .\n?x1 ns:film.actor.film/ns:film.performance.film ns:m.0gksfp0 .\n?x1 ns:film.cinematographer.film ns:m.0gksfp0 .\nFILTER ( ?x0 != ?x1 )\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 a M0 .\n?x1 P1 M1 .\n?x1 P2 M1 .\nFILTER ( ?x0 != ?x1 )\n}",
    "expectedResponse": "Marzieh Meshkini; Fatemeh Meshkini",
    "recursionDepth": 21
  },
  {
    "questionIdx": 52046,
    "questionWithBrackets": "Was [Death Proof]'s male producer influenced by [Jean-Pierre Melville]",
    "questionPatternModEntities": "Was M1 's male producer influenced by M0",
    "questionTemplate": "Was [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] [VP_SIMPLE] by [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.producer.film|ns:film.production_company.films ns:m.03bxrfl .\n?x0 ns:influence.influence_node.influenced_by ns:m.0507vd .\n?x0 ns:people.person.gender ns:m.05zppz\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P2 M2\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 21
  },
  {
    "questionIdx": 53254,
    "questionWithBrackets": "Was [Drowned World Tour 2001] written by [Antoine Bourseiller]'s female spouse",
    "questionPatternModEntities": "Was M2 written by M1 's female spouse",
    "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:people.person.gender ns:m.02zsn .\n?x0 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ns:m.0jwhqh .\nFILTER ( ?x0 != ns:m.0jwhqh ) .\nns:m.02qw0ch ns:film.film.written_by ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M1 ) .\nM2 P2 ?x0\n}",
    "expectedResponse": "No",
    "recursionDepth": 21
  },
  {
    "questionIdx": 169130,
    "questionWithBrackets": "What was acquired by a distributor of [The Ace of Cads] and [The Mechanical Monsters]",
    "questionPatternModEntities": "What was acquired by a distributor of M0 and M1",
    "questionTemplate": "What was [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity] and [entity]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:organization.organization.acquired_by/ns:business.acquisition.acquiring_company ?x1 .\n?x1 ns:film.film_distributor.films_distributed/ns:film.film_film_distributor_relationship.film ns:m.02r52hc .\n?x1 ns:film.film_distributor.films_distributed/ns:film.film_film_distributor_relationship.film ns:m.0n4c9y6\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x1 P1 M0 .\n?x1 P1 M1\n}",
    "expectedResponse": "TVX Broadcast Group",
    "recursionDepth": 21
  },
  {
    "questionIdx": 43694,
    "questionWithBrackets": "Was [A Lesson in Love]'s Swedish art director employed by [Residenz Theatre]",
    "questionPatternModEntities": "Was M2 's Swedish art director employed by M0",
    "questionTemplate": "Was [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] [VP_SIMPLE] by [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.film_art_director.films_art_directed ns:m.026qfvy .\n?x0 ns:people.person.employment_history/ns:business.employment_tenure.company ns:m.02qg49s .\n?x0 ns:people.person.nationality ns:m.0d0vqn\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P2 M2\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 21
  },
  {
    "questionIdx": 37328,
    "questionWithBrackets": "Did a male sibling of [Andr\u00e9 Hakim] produce [The Good Time Girls]",
    "questionPatternModEntities": "Did a male sibling of M0 produce M1",
    "questionTemplate": "Did a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] [VP_SIMPLE] [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.producer.film|ns:film.production_company.films ns:m.0bbytld .\n?x0 ns:people.person.gender ns:m.05zppz .\n?x0 ns:people.person.sibling_s/ns:people.sibling_relationship.sibling|ns:fictional_universe.fictional_character.siblings/ns:fictional_universe.sibling_relationship_of_fictional_characters.siblings ns:m.0270m82 .\nFILTER ( ?x0 != ns:m.0270m82 )\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P2 M2 .\nFILTER ( ?x0 != M0 )\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 22
  },
  {
    "questionIdx": 84388,
    "questionWithBrackets": "Was [Twilight Zone: The Movie] executive produced by [The Attack of the Mummies]'s male cinematographer",
    "questionPatternModEntities": "Was M2 executive produced by M1 's male cinematographer",
    "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.cinematographer.film ns:m.02rml0k .\n?x0 ns:people.person.gender ns:m.05zppz .\nns:m.04sh80 ns:film.film.executive_produced_by ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nM2 P2 ?x0\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 22
  },
  {
    "questionIdx": 37386,
    "questionWithBrackets": "Did a male star of [The Conquest of the Pole] edit [Oru Veedu Iru Vasal]",
    "questionPatternModEntities": "Did a male star of M1 edit M0",
    "questionTemplate": "Did a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] [VP_SIMPLE] [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.actor.film/ns:film.performance.film ns:m.03d498s .\n?x0 ns:film.editor.film ns:m.0522zd0 .\n?x0 ns:people.person.gender ns:m.05zppz\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P2 M2\n}",
    "expectedResponse": "No",
    "recursionDepth": 22
  },
  {
    "questionIdx": 102541,
    "questionWithBrackets": "Was a parent and sibling of [Carlo Hesser]'s spouse [Rex Balsom]",
    "questionPatternModEntities": "Was a parent and sibling of M0 's spouse M1",
    "questionTemplate": "Was a [ROLE_SIMPLE] and [ROLE_SIMPLE] of [entity] 's [ROLE_SIMPLE] [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ns:m.04czj6h .\nFILTER ( ?x0 != ns:m.04czj6h ) .\nFILTER ( ns:m.0278psy != ?x0 ) .\nns:m.0278psy ns:people.person.children|ns:fictional_universe.fictional_character.children|ns:organization.organization.child/ns:organization.organization_relationship.child ?x0 .\nns:m.0278psy ns:people.person.sibling_s/ns:people.sibling_relationship.sibling|ns:fictional_universe.fictional_character.siblings/ns:fictional_universe.sibling_relationship_of_fictional_characters.siblings ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( M1 != ?x0 ) .\nM1 P1 ?x0 .\nM1 P2 ?x0\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 22
  },
  {
    "questionIdx": 52886,
    "questionWithBrackets": "Was [Doomstown] executive produced by [CrissCross]'s female star",
    "questionPatternModEntities": "Was M2 executive produced by M0 's female star",
    "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.actor.film/ns:film.performance.film ns:m.0bq8vh .\n?x0 ns:people.person.gender ns:m.02zsn .\nns:m.03qcdbx ns:film.film.executive_produced_by ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nM2 P2 ?x0\n}",
    "expectedResponse": "No",
    "recursionDepth": 22
  },
  {
    "questionIdx": 232363,
    "questionWithBrackets": "Who was a screenwriter whose sibling wrote [Gli specialisti]",
    "questionPatternModEntities": "Who was a screenwriter whose sibling wrote M2",
    "questionTemplate": "Who was a [NP_SIMPLE] whose [ROLE_SIMPLE] [VP_SIMPLE] [entity]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:film.writer .\n?x0 a ns:people.person .\n?x0 ns:people.person.sibling_s/ns:people.sibling_relationship.sibling|ns:fictional_universe.fictional_character.siblings/ns:fictional_universe.sibling_relationship_of_fictional_characters.siblings ?x1 .\n?x1 ns:film.writer.film ns:m.0hhq01k .\nFILTER ( ?x0 != ?x1 )\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 a M0 .\n?x0 a M1 .\n?x1 P1 M2 .\nFILTER ( ?x0 != ?x1 )\n}",
    "expectedResponse": "Bruno Corbucci",
    "recursionDepth": 22
  },
  {
    "questionIdx": 45005,
    "questionWithBrackets": "Was [Alien Siege] produced and written by an art director",
    "questionPatternModEntities": "Was M1 produced and written by a art director",
    "questionTemplate": "Was [entity] [VP_SIMPLE] and [VP_SIMPLE] by a [NP_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 a ns:film.film_art_director .\nns:m.058sgg3 ns:film.film.produced_by|ns:film.film.production_companies ?x0 .\nns:m.058sgg3 ns:film.film.written_by ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 a M0 .\nM1 P0 ?x0 .\nM1 P1 ?x0\n}",
    "expectedResponse": "No",
    "recursionDepth": 22
  },
  {
    "questionIdx": 180675,
    "questionWithBrackets": "What was founded by an American cinematographer of [Castro Street]",
    "questionPatternModEntities": "What was founded by a American cinematographer of M1",
    "questionTemplate": "What was [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:organization.organization.founders ?x1 .\n?x1 ns:film.cinematographer.film ns:m.0cbksj .\n?x1 ns:people.person.nationality ns:m.09c7w0\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x1 P1 M0 .\n?x1 P2 M1\n}",
    "expectedResponse": "Canyon Cinema",
    "recursionDepth": 22
  },
  {
    "questionIdx": 189398,
    "questionWithBrackets": "Which French character edited [A Trip to the Moon] and [The Vanishing Lady]",
    "questionPatternModEntities": "Which French character edited M1 and M2",
    "questionTemplate": "Which [ADJECTIVE_SIMPLE] [NP_SIMPLE] [VP_SIMPLE] [entity] and [entity]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:fictional_universe.fictional_character .\n?x0 ns:film.editor.film ns:m.02ltdy .\n?x0 ns:film.editor.film ns:m.0crhf8m .\n?x0 ns:people.person.nationality ns:m.0f8l9c\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P1 M3 .\n?x0 a M0\n}",
    "expectedResponse": "Georges M\u00e9li\u00e8s",
    "recursionDepth": 22
  },
  {
    "questionIdx": 1007,
    "questionWithBrackets": "Did [Alfred Hitchcock] influence a film director's employer's founder",
    "questionPatternModEntities": "Did M1 influence a film director 's employer 's founder",
    "questionTemplate": "Did [entity] [VP_SIMPLE] a [NP_SIMPLE] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:organization.organization_founder.organizations_founded ?x1 .\n?x1 ns:business.employer.employees/ns:business.employment_tenure.person ?x2 .\n?x2 a ns:film.director .\nns:m.0j_c ns:influence.influence_node.influenced ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x1 P1 ?x2 .\n?x2 a M0 .\nM1 P2 ?x0\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 22
  },
  {
    "questionIdx": 22369,
    "questionWithBrackets": "Did [The Kissing Place] and [Paradise, Texas] star a film director's child",
    "questionPatternModEntities": "Did M1 and M2 star a film director 's child",
    "questionTemplate": "Did [entity] and [entity] [VP_SIMPLE] a [NP_SIMPLE] 's [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:people.person.parents|ns:fictional_universe.fictional_character.parents|ns:organization.organization.parent/ns:organization.organization_relationship.parent ?x1 .\n?x1 a ns:film.director .\nns:m.05b1dwp ns:film.film.starring/ns:film.performance.actor ?x0 .\nns:m.0gkrtcn ns:film.film.starring/ns:film.performance.actor ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x1 a M0 .\nM1 P1 ?x0 .\nM2 P1 ?x0\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 22
  },
  {
    "questionIdx": 180429,
    "questionWithBrackets": "What was founded by a female writer of [Tigerwomen Grow Wings]",
    "questionPatternModEntities": "What was founded by a female writer of M0",
    "questionTemplate": "What was [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:organization.organization.founders ?x1 .\n?x1 ns:film.writer.film ns:m.05lp37d .\n?x1 ns:people.person.gender ns:m.02zsn\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x1 P1 M0 .\n?x1 P2 M1\n}",
    "expectedResponse": "Hyena Filmproduktion",
    "recursionDepth": 22
  },
  {
    "questionIdx": 131581,
    "questionWithBrackets": "What Canadian film director did [Existenz]'s producer influence",
    "questionPatternModEntities": "What Canadian film director did M2 's producer influence",
    "questionTemplate": "What [ADJECTIVE_SIMPLE] [NP_SIMPLE] did [entity] 's [ROLE_SIMPLE] [VP_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:film.director .\n?x0 ns:influence.influence_node.influenced_by ?x1 .\n?x0 ns:people.person.nationality ns:m.0d060g .\n?x1 ns:film.producer.film|ns:film.production_company.films ns:m.01r92q\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 M1 .\n?x0 a M0 .\n?x1 P2 M2\n}",
    "expectedResponse": "William Gibson; Vincenzo Natali",
    "recursionDepth": 22
  },
  {
    "questionIdx": 207925,
    "questionWithBrackets": "Which person influenced [Richard Cary Morse]'s male sibling",
    "questionPatternModEntities": "Which person influenced M1 's male sibling",
    "questionTemplate": "Which [NP_SIMPLE] [VP_SIMPLE] [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:people.person .\n?x0 ns:influence.influence_node.influenced ?x1 .\n?x1 ns:people.person.gender ns:m.05zppz .\n?x1 ns:people.person.sibling_s/ns:people.sibling_relationship.sibling|ns:fictional_universe.fictional_character.siblings/ns:fictional_universe.sibling_relationship_of_fictional_characters.siblings ns:m.0rp668n .\nFILTER ( ?x1 != ns:m.0rp668n )\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 a M0 .\n?x1 P1 M1 .\n?x1 P2 M2 .\nFILTER ( ?x1 != M1 )\n}",
    "expectedResponse": "Charles Grafton Page",
    "recursionDepth": 22
  },
  {
    "questionIdx": 141147,
    "questionWithBrackets": "What costume designer that [Oja Kodar] married did [Dolores del R\u00edo] marry",
    "questionPatternModEntities": "What costume designer that M1 married did M2 marry",
    "questionTemplate": "What [NP_SIMPLE] that [entity] [VP_SIMPLE] did [entity] [VP_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:film.film_costumer_designer .\n?x0 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ns:m.02qj31 .\n?x0 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ns:m.061kqv .\nFILTER ( ?x0 != ns:m.02qj31 ) .\nFILTER ( ?x0 != ns:m.061kqv )\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 a M0 .\nFILTER ( ?x0 != M1 ) .\nFILTER ( ?x0 != M2 )\n}",
    "expectedResponse": "Orson Welles",
    "recursionDepth": 22
  },
  {
    "questionIdx": 25342,
    "questionWithBrackets": "Did [Winter Light] star a Swedish costume designer of [491]",
    "questionPatternModEntities": "Did M2 star a Swedish costume designer of M0",
    "questionTemplate": "Did [entity] [VP_SIMPLE] a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.film_costumer_designer.costume_design_for_film ns:m.0c3bfm .\n?x0 ns:people.person.nationality ns:m.0d0vqn .\nns:m.07hnfn ns:film.film.starring/ns:film.performance.actor ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nM2 P2 ?x0\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 22
  },
  {
    "questionIdx": 160522,
    "questionWithBrackets": "What male person distributed [My Lady's Lips] and [The Lawful Cheater]",
    "questionPatternModEntities": "What male person distributed M1 and M2",
    "questionTemplate": "What [ADJECTIVE_SIMPLE] [NP_SIMPLE] [VP_SIMPLE] [entity] and [entity]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:people.person .\n?x0 ns:film.film_distributor.films_distributed/ns:film.film_film_distributor_relationship.film ns:m.0h_93n5 .\n?x0 ns:film.film_distributor.films_distributed/ns:film.film_film_distributor_relationship.film ns:m.0h_cb4j .\n?x0 ns:people.person.gender ns:m.05zppz\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P1 M3 .\n?x0 a M0\n}",
    "expectedResponse": "Al Lichtman",
    "recursionDepth": 22
  },
  {
    "questionIdx": 25930,
    "questionWithBrackets": "Did a British executive producer of [More Bloody Meetings] play [Donald P. Sinclair]",
    "questionPatternModEntities": "Did a British executive producer of M0 play M2",
    "questionTemplate": "Did a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] [VP_SIMPLE] [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.actor.film/ns:film.performance.character ns:m.0cgszpy .\n?x0 ns:film.producer.films_executive_produced ns:m.0g553c0 .\n?x0 ns:people.person.nationality ns:m.07ssc\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P2 M2\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 22
  },
  {
    "questionIdx": 68596,
    "questionWithBrackets": "Was [Myung Dan Young \"Veiled\"] directed and written by a character",
    "questionPatternModEntities": "Was M1 directed and written by a character",
    "questionTemplate": "Was [entity] [VP_SIMPLE] and [VP_SIMPLE] by a [NP_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 a ns:fictional_universe.fictional_character .\nns:m.010r1dxm ns:film.film.directed_by ?x0 .\nns:m.010r1dxm ns:film.film.written_by ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 a M0 .\nM1 P0 ?x0 .\nM1 P1 ?x0\n}",
    "expectedResponse": "No",
    "recursionDepth": 22
  },
  {
    "questionIdx": 182046,
    "questionWithBrackets": "What was produced by a Swedish editor of [Varning f\u00f6r J\u00f6nssonligan]",
    "questionPatternModEntities": "What was produced by a Swedish editor of M1",
    "questionTemplate": "What was [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.film.produced_by|ns:film.film.production_companies ?x1 .\n?x1 ns:film.editor.film ns:m.03gd6w .\n?x1 ns:people.person.nationality ns:m.0d0vqn\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x1 P1 M0 .\n?x1 P2 M1\n}",
    "expectedResponse": "Low Flying Aircraft; Keillers Park",
    "recursionDepth": 22
  },
  {
    "questionIdx": 164037,
    "questionWithBrackets": "What screenwriter did [Steve Tilly]'s Canadian sibling marry",
    "questionPatternModEntities": "What screenwriter did M1 's Canadian sibling marry",
    "questionTemplate": "What [NP_SIMPLE] did [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] [VP_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:film.writer .\n?x0 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ?x1 .\n?x1 ns:people.person.nationality ns:m.0d060g .\n?x1 ns:people.person.sibling_s/ns:people.sibling_relationship.sibling|ns:fictional_universe.fictional_character.siblings/ns:fictional_universe.sibling_relationship_of_fictional_characters.siblings ns:m.0gy267x .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x1 != ns:m.0gy267x )\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 a M0 .\n?x1 P1 M1 .\n?x1 P2 M2 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x1 != M1 )\n}",
    "expectedResponse": "Sam Simon; Don Calame",
    "recursionDepth": 22
  },
  {
    "questionIdx": 136588,
    "questionWithBrackets": "What actor that [Joseph Dietzgen] influenced influenced [Roy Johnston]",
    "questionPatternModEntities": "What actor that M2 influenced influenced M1",
    "questionTemplate": "What [NP_SIMPLE] that [entity] [VP_SIMPLE] [VP_SIMPLE] [entity]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:film.actor .\n?x0 ns:influence.influence_node.influenced ns:m.065z_vt .\n?x0 ns:influence.influence_node.influenced_by ns:m.03_88v\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M1 .\n?x0 P1 M2 .\n?x0 a M0\n}",
    "expectedResponse": "Karl Marx",
    "recursionDepth": 22
  },
  {
    "questionIdx": 35221,
    "questionWithBrackets": "Did a film producer's parent employ [Matt Baker] and [Giles Latcham]",
    "questionPatternModEntities": "Did a film producer 's parent employ M0 and M1",
    "questionTemplate": "Did a [NP_SIMPLE] 's [ROLE_SIMPLE] [VP_SIMPLE] [entity] and [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:business.employer.employees/ns:business.employment_tenure.person ns:m.03z9qz .\n?x0 ns:business.employer.employees/ns:business.employment_tenure.person ns:m.080jf7h .\n?x0 ns:people.person.children|ns:fictional_universe.fictional_character.children|ns:organization.organization.child/ns:organization.organization_relationship.child ?x1 .\n?x1 a ns:film.producer\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x0 P1 M0 .\n?x0 P1 M1 .\n?x1 a M2\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 22
  },
  {
    "questionIdx": 187809,
    "questionWithBrackets": "Which British film producer did [Earls]'s employee marry",
    "questionPatternModEntities": "Which British film producer did M2 's employee marry",
    "questionTemplate": "Which [ADJECTIVE_SIMPLE] [NP_SIMPLE] did [entity] 's [ROLE_SIMPLE] [VP_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:film.producer .\n?x0 ns:people.person.nationality ns:m.07ssc .\n?x0 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ?x1 .\n?x1 ns:people.person.employment_history/ns:business.employment_tenure.company ns:m.02qlzfd .\nFILTER ( ?x0 != ?x1 )\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M1 .\n?x0 P1 ?x1 .\n?x0 a M0 .\n?x1 P2 M2 .\nFILTER ( ?x0 != ?x1 )\n}",
    "expectedResponse": "Dominic Monaghan",
    "recursionDepth": 22
  },
  {
    "questionIdx": 14207,
    "questionWithBrackets": "Did [Martin Rackin] write [China Town] and write [Lal Patthar]",
    "questionPatternModEntities": "Did M0 write M1 and write M2",
    "questionTemplate": "Did [entity] [VP_SIMPLE] [entity] and [VP_SIMPLE] [entity]",
    "sparql": "SELECT count(*) WHERE {\nns:m.0jt4c_ ns:film.writer.film ns:m.02qmptt .\nns:m.0jt4c_ ns:film.writer.film ns:m.03yh_mq\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2\n}",
    "expectedResponse": "No",
    "recursionDepth": 22
  },
  {
    "questionIdx": 43366,
    "questionWithBrackets": "Was [44 Dartmouth Two, LLC] a costume designer's employer's founder's employer",
    "questionPatternModEntities": "Was M1 a costume designer 's employer 's founder 's employer",
    "questionTemplate": "Was [entity] a [NP_SIMPLE] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:organization.organization_founder.organizations_founded ?x1 .\n?x1 ns:business.employer.employees/ns:business.employment_tenure.person ?x2 .\n?x2 a ns:film.film_costumer_designer .\nns:m.09mx2nj ns:business.employer.employees/ns:business.employment_tenure.person ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x1 P1 ?x2 .\n?x2 a M0 .\nM1 P1 ?x0\n}",
    "expectedResponse": "No",
    "recursionDepth": 22
  },
  {
    "questionIdx": 30470,
    "questionWithBrackets": "Did a cinematographer's employer's employee marry [Carl August Dohrn]",
    "questionPatternModEntities": "Did a cinematographer 's employer 's employee marry M0",
    "questionTemplate": "Did a [NP_SIMPLE] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE] [VP_SIMPLE] [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:people.person.employment_history/ns:business.employment_tenure.company ?x1 .\n?x0 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ns:m.06zsk6 .\n?x1 ns:business.employer.employees/ns:business.employment_tenure.person ?x2 .\n?x2 a ns:film.cinematographer .\nFILTER ( ?x0 != ns:m.06zsk6 )\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x0 P1 M0 .\n?x1 P2 ?x2 .\n?x2 a M1 .\nFILTER ( ?x0 != M0 )\n}",
    "expectedResponse": "No",
    "recursionDepth": 22
  },
  {
    "questionIdx": 150037,
    "questionWithBrackets": "What did a film producer's parent and sibling write",
    "questionPatternModEntities": "What did a film producer 's parent and sibling write",
    "questionTemplate": "What did a [NP_SIMPLE] 's [ROLE_SIMPLE] and [ROLE_SIMPLE] [VP_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.film.written_by ?x1 .\n?x1 ns:people.person.children|ns:fictional_universe.fictional_character.children|ns:organization.organization.child/ns:organization.organization_relationship.child ?x2 .\n?x1 ns:people.person.sibling_s/ns:people.sibling_relationship.sibling|ns:fictional_universe.fictional_character.siblings/ns:fictional_universe.sibling_relationship_of_fictional_characters.siblings ?x2 .\n?x2 a ns:film.producer .\nFILTER ( ?x1 != ?x2 )\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x1 P1 ?x2 .\n?x1 P2 ?x2 .\n?x2 a M0 .\nFILTER ( ?x1 != ?x2 )\n}",
    "expectedResponse": "Joseph the Dreamer",
    "recursionDepth": 22
  },
  {
    "questionIdx": 174198,
    "questionWithBrackets": "What was edited by a cinematographer and art director of [Jean Genet Is Dead]",
    "questionPatternModEntities": "What was edited by a cinematographer and art director of M0",
    "questionTemplate": "What was [VP_SIMPLE] by a [ROLE_SIMPLE] and [ROLE_SIMPLE] of [entity]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.film.edited_by ?x1 .\n?x1 ns:film.cinematographer.film ns:m.0gybg9q .\n?x1 ns:film.film_art_director.films_art_directed ns:m.0gybg9q\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x1 P1 M0 .\n?x1 P2 M0\n}",
    "expectedResponse": "Man at Sea; Jean Genet Is Dead",
    "recursionDepth": 22
  },
  {
    "questionIdx": 203817,
    "questionWithBrackets": "Which film producer influenced [Tetsuo II: Body Hammer]'s art director and star",
    "questionPatternModEntities": "Which film producer influenced M1 's art director and star",
    "questionTemplate": "Which [NP_SIMPLE] [VP_SIMPLE] [entity] 's [ROLE_SIMPLE] and [ROLE_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:film.producer .\n?x0 ns:influence.influence_node.influenced ?x1 .\n?x1 ns:film.actor.film/ns:film.performance.film ns:m.0brs6b .\n?x1 ns:film.film_art_director.films_art_directed ns:m.0brs6b\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 a M0 .\n?x1 P1 M1 .\n?x1 P2 M1\n}",
    "expectedResponse": "David Cronenberg",
    "recursionDepth": 22
  },
  {
    "questionIdx": 73719,
    "questionWithBrackets": "Was [Ren\u00e9e Gundelach] a German executive producer of [Joan of Arc of Mongolia] and [L\u2019Amour, l\u2019Argent, l\u2019Amour]",
    "questionPatternModEntities": "Was M0 a German executive producer of M1 and M2",
    "questionTemplate": "Was [entity] a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] and [entity]",
    "sparql": "SELECT count(*) WHERE {\nns:m.0bfmxm8 ns:film.producer.films_executive_produced ns:m.0bfmxl3 .\nns:m.0bfmxm8 ns:film.producer.films_executive_produced ns:m.0gh70_d .\nns:m.0bfmxm8 ns:people.person.nationality ns:m.0345h\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P1 M3\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 22
  },
  {
    "questionIdx": 194088,
    "questionWithBrackets": "Which art director that [D. W. Griffith] influenced did [Under Capricorn] star",
    "questionPatternModEntities": "Which art director that M1 influenced did M2 star",
    "questionTemplate": "Which [NP_SIMPLE] that [entity] [VP_SIMPLE] did [entity] [VP_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:film.film_art_director .\n?x0 ns:film.actor.film/ns:film.performance.film ns:m.05ddtv .\n?x0 ns:influence.influence_node.influenced_by ns:m.026ck\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M1 .\n?x0 P1 M2 .\n?x0 a M0\n}",
    "expectedResponse": "Alfred Hitchcock",
    "recursionDepth": 22
  },
  {
    "questionIdx": 105943,
    "questionWithBrackets": "Was a sibling of [Margaret of Guelders] [Xelly Cabau]'s Dutch sibling",
    "questionPatternModEntities": "Was a sibling of M0 M1 's Dutch sibling",
    "questionTemplate": "Was a [ROLE_SIMPLE] of [entity] [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:people.person.nationality ns:m.059j2 .\n?x0 ns:people.person.sibling_s/ns:people.sibling_relationship.sibling|ns:fictional_universe.fictional_character.siblings/ns:fictional_universe.sibling_relationship_of_fictional_characters.siblings ns:m.0101b9ww .\n?x0 ns:people.person.sibling_s/ns:people.sibling_relationship.sibling|ns:fictional_universe.fictional_character.siblings/ns:fictional_universe.sibling_relationship_of_fictional_characters.siblings ns:m.0v_bmc_ .\nFILTER ( ?x0 != ns:m.0101b9ww ) .\nFILTER ( ?x0 != ns:m.0v_bmc_ )\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P1 M2 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x0 != M1 )\n}",
    "expectedResponse": "No",
    "recursionDepth": 22
  },
  {
    "questionIdx": 92245,
    "questionWithBrackets": "Was a child, spouse, and sibling of [Ridge Forrester] [Hope Logan]",
    "questionPatternModEntities": "Was a child , spouse , and sibling of M1 M0",
    "questionTemplate": "Was a [ROLE_SIMPLE] , [ROLE_SIMPLE] , and [ROLE_SIMPLE] of [entity] [entity]",
    "sparql": "SELECT count(*) WHERE {\nFILTER ( ns:m.02w0lyg != ns:m.0g53gd7 ) .\nFILTER ( ns:m.02w0lyg != ns:m.0g53gd7 ) .\nns:m.02w0lyg ns:people.person.parents|ns:fictional_universe.fictional_character.parents|ns:organization.organization.parent/ns:organization.organization_relationship.parent ns:m.0g53gd7 .\nns:m.02w0lyg ns:people.person.sibling_s/ns:people.sibling_relationship.sibling|ns:fictional_universe.fictional_character.siblings/ns:fictional_universe.sibling_relationship_of_fictional_characters.siblings ns:m.0g53gd7 .\nns:m.02w0lyg ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ns:m.0g53gd7\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\nFILTER ( M0 != M1 ) .\nFILTER ( M0 != M1 ) .\nM0 P0 M1 .\nM0 P1 M1 .\nM0 P2 M1\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 22
  },
  {
    "questionIdx": 63419,
    "questionWithBrackets": "Was [Kyle Lewis] a child, sibling, and spouse of [Taylor Hayes]",
    "questionPatternModEntities": "Was M0 a child , sibling , and spouse of M1",
    "questionTemplate": "Was [entity] a [ROLE_SIMPLE] , [ROLE_SIMPLE] , and [ROLE_SIMPLE] of [entity]",
    "sparql": "SELECT count(*) WHERE {\nFILTER ( ns:m.05zvmcm != ns:m.025v2m6 ) .\nFILTER ( ns:m.05zvmcm != ns:m.025v2m6 ) .\nns:m.05zvmcm ns:people.person.parents|ns:fictional_universe.fictional_character.parents|ns:organization.organization.parent/ns:organization.organization_relationship.parent ns:m.025v2m6 .\nns:m.05zvmcm ns:people.person.sibling_s/ns:people.sibling_relationship.sibling|ns:fictional_universe.fictional_character.siblings/ns:fictional_universe.sibling_relationship_of_fictional_characters.siblings ns:m.025v2m6 .\nns:m.05zvmcm ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ns:m.025v2m6\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\nFILTER ( M0 != M1 ) .\nFILTER ( M0 != M1 ) .\nM0 P0 M1 .\nM0 P1 M1 .\nM0 P2 M1\n}",
    "expectedResponse": "No",
    "recursionDepth": 22
  },
  {
    "questionIdx": 202968,
    "questionWithBrackets": "Which film editor that [Marquis de Sade] influenced played [Father Juan]",
    "questionPatternModEntities": "Which film editor that M1 influenced played M2",
    "questionTemplate": "Which [NP_SIMPLE] that [entity] [VP_SIMPLE] [VP_SIMPLE] [entity]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:film.editor .\n?x0 ns:film.actor.film/ns:film.performance.character ns:m.0yqrnhq .\n?x0 ns:influence.influence_node.influenced_by ns:m.02flz\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M1 .\n?x0 P1 M2 .\n?x0 a M0\n}",
    "expectedResponse": "Pier Paolo Pasolini",
    "recursionDepth": 22
  },
  {
    "questionIdx": 204038,
    "questionWithBrackets": "Which film producer that married [Michael Biehn] did [The Things We Carry] star",
    "questionPatternModEntities": "Which film producer that married M2 did M1 star",
    "questionTemplate": "Which [NP_SIMPLE] that [VP_SIMPLE] [entity] did [entity] [VP_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:film.producer .\n?x0 ns:film.actor.film/ns:film.performance.film ns:m.0crsclf .\n?x0 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ns:m.02d6n_ .\nFILTER ( ?x0 != ns:m.02d6n_ )\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M1 .\n?x0 P1 M2 .\n?x0 a M0 .\nFILTER ( ?x0 != M2 )\n}",
    "expectedResponse": "Jennifer Blanc",
    "recursionDepth": 22
  },
  {
    "questionIdx": 14906,
    "questionWithBrackets": "Did [Milton Friedman] influence an American founder of [Ontology2]",
    "questionPatternModEntities": "Did M2 influence a American founder of M0",
    "questionTemplate": "Did [entity] [VP_SIMPLE] a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:organization.organization_founder.organizations_founded ns:m.0j4lln9 .\n?x0 ns:people.person.nationality ns:m.09c7w0 .\nns:m.04z0g ns:influence.influence_node.influenced ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nM2 P2 ?x0\n}",
    "expectedResponse": "No",
    "recursionDepth": 22
  },
  {
    "questionIdx": 168965,
    "questionWithBrackets": "What was acquired by [Knight Ridder] and acquired by [ProQuest]",
    "questionPatternModEntities": "What was acquired by M0 and acquired by M1",
    "questionTemplate": "What was [VP_SIMPLE] by [entity] and [VP_SIMPLE] by [entity]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:organization.organization.acquired_by/ns:business.acquisition.acquiring_company ns:m.01f_dc .\n?x0 ns:organization.organization.acquired_by/ns:business.acquisition.acquiring_company ns:m.02p1hn\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1\n}",
    "expectedResponse": "Dialog",
    "recursionDepth": 22
  },
  {
    "questionIdx": 52478,
    "questionWithBrackets": "Was [Diamond Rob Music]'s founder's sibling an actor's sibling",
    "questionPatternModEntities": "Was M1 's founder 's sibling a actor 's sibling",
    "questionTemplate": "Was [entity] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE] a [NP_SIMPLE] 's [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:people.person.sibling_s/ns:people.sibling_relationship.sibling|ns:fictional_universe.fictional_character.siblings/ns:fictional_universe.sibling_relationship_of_fictional_characters.siblings ?x1 .\n?x0 ns:people.person.sibling_s/ns:people.sibling_relationship.sibling|ns:fictional_universe.fictional_character.siblings/ns:fictional_universe.sibling_relationship_of_fictional_characters.siblings ?x2 .\n?x1 a ns:film.actor .\n?x2 ns:organization.organization_founder.organizations_founded ns:m.0gm9b_6 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x0 != ?x2 )\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x0 P0 ?x2 .\n?x1 a M0 .\n?x2 P1 M1 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x0 != ?x2 )\n}",
    "expectedResponse": "No",
    "recursionDepth": 22
  },
  {
    "questionIdx": 120191,
    "questionWithBrackets": "Were [Let\u2019s Hope It\u2019s a Girl] and [We Want the Colonels] written by a parent of [Bittu Anand]",
    "questionPatternModEntities": "Were M1 and M2 written by a parent of M0",
    "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:people.person.children|ns:fictional_universe.fictional_character.children|ns:organization.organization.child/ns:organization.organization_relationship.child ns:m.0jjz5lh .\nns:m.05zntyt ns:film.film.written_by ?x0 .\nns:m.0bntqqq ns:film.film.written_by ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 ?x0 .\nM2 P1 ?x0\n}",
    "expectedResponse": "No",
    "recursionDepth": 22
  },
  {
    "questionIdx": 67022,
    "questionWithBrackets": "Was [Melinda McGraw] an actor of [James Gordon]'s child and spouse",
    "questionPatternModEntities": "Was M1 a actor of M0 's child and spouse",
    "questionTemplate": "Was [entity] a [ROLE_SIMPLE] of [entity] 's [ROLE_SIMPLE] and [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:people.person.parents|ns:fictional_universe.fictional_character.parents|ns:organization.organization.parent/ns:organization.organization_relationship.parent ns:m.031v20 .\n?x0 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ns:m.031v20 .\nFILTER ( ?x0 != ns:m.031v20 ) .\nns:m.0443_w ns:film.actor.film/ns:film.performance.character ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M0 .\nFILTER ( ?x0 != M0 ) .\nM1 P2 ?x0\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 22
  },
  {
    "questionIdx": 197361,
    "questionWithBrackets": "Which costume designer founded [Conceived In Prison]'s distributor and producer",
    "questionPatternModEntities": "Which costume designer founded M1 's distributor and producer",
    "questionTemplate": "Which [NP_SIMPLE] [VP_SIMPLE] [entity] 's [ROLE_SIMPLE] and [ROLE_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:film.film_costumer_designer .\n?x0 ns:organization.organization_founder.organizations_founded ?x1 .\n?x1 ns:film.film_distributor.films_distributed/ns:film.film_film_distributor_relationship.film ns:m.0644pyf .\n?x1 ns:film.producer.film|ns:film.production_company.films ns:m.0644pyf\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 a M0 .\n?x1 P1 M1 .\n?x1 P2 M1\n}",
    "expectedResponse": "Clint Crisher",
    "recursionDepth": 22
  },
  {
    "questionIdx": 108159,
    "questionWithBrackets": "Was an actor an art director that [Pirosmani] starred",
    "questionPatternModEntities": "Was a actor a art director that M2 starred",
    "questionTemplate": "Was a [NP_SIMPLE] a [NP_SIMPLE] that [entity] [VP_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 a ns:film.actor .\n?x0 a ns:film.film_art_director .\n?x0 ns:film.actor.film/ns:film.performance.film ns:m.04svqml\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M2 .\n?x0 a M0 .\n?x0 a M1\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 22
  },
  {
    "questionIdx": 4703,
    "questionWithBrackets": "Did [Comcast] and [NBCUniversal] acquire a film producer's child",
    "questionPatternModEntities": "Did M1 and M2 acquire a film producer 's child",
    "questionTemplate": "Did [entity] and [entity] [VP_SIMPLE] a [NP_SIMPLE] 's [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:people.person.parents|ns:fictional_universe.fictional_character.parents|ns:organization.organization.parent/ns:organization.organization_relationship.parent ?x1 .\n?x1 a ns:film.producer .\nns:m.01s73z ns:organization.organization.companies_acquired/ns:business.acquisition.company_acquired ?x0 .\nns:m.02_l39 ns:organization.organization.companies_acquired/ns:business.acquisition.company_acquired ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x1 a M0 .\nM1 P1 ?x0 .\nM2 P1 ?x0\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 22
  },
  {
    "questionIdx": 71205,
    "questionWithBrackets": "Was [Penny Dixon] a female spouse of [Allen Waterman]'s sibling",
    "questionPatternModEntities": "Was M1 a female spouse of M0 's sibling",
    "questionTemplate": "Was [entity] a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] 's [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:people.person.sibling_s/ns:people.sibling_relationship.sibling|ns:fictional_universe.fictional_character.siblings/ns:fictional_universe.sibling_relationship_of_fictional_characters.siblings ns:m.0t_7s7f .\nFILTER ( ?x0 != ns:m.0t_7s7f ) .\nFILTER ( ns:m.0j6glhy != ?x0 ) .\nns:m.0j6glhy ns:people.person.gender ns:m.02zsn .\nns:m.0j6glhy ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( M1 != ?x0 ) .\nM1 P1 M2 .\nM1 P2 ?x0\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 22
  },
  {
    "questionIdx": 104789,
    "questionWithBrackets": "Was a production company's parent's child's employee [Ralph Eggleston]",
    "questionPatternModEntities": "Was a production company 's parent 's child 's employee M1",
    "questionTemplate": "Was a [NP_SIMPLE] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE] [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:people.person.parents|ns:fictional_universe.fictional_character.parents|ns:organization.organization.parent/ns:organization.organization_relationship.parent ?x1 .\n?x1 ns:people.person.children|ns:fictional_universe.fictional_character.children|ns:organization.organization.child/ns:organization.organization_relationship.child ?x2 .\n?x2 a ns:film.production_company .\nns:m.026p4hp ns:people.person.employment_history/ns:business.employment_tenure.company ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x1 P1 ?x2 .\n?x2 a M0 .\nM1 P2 ?x0\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 22
  },
  {
    "questionIdx": 91899,
    "questionWithBrackets": "Was a child and parent of [Top Speed]'s distributor [Warner Bros.-Seven Arts]",
    "questionPatternModEntities": "Was a child and parent of M0 's distributor M1",
    "questionTemplate": "Was a [ROLE_SIMPLE] and [ROLE_SIMPLE] of [entity] 's [ROLE_SIMPLE] [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.film_distributor.films_distributed/ns:film.film_film_distributor_relationship.film ns:m.02qd47l .\nns:m.03q7q1 ns:people.person.children|ns:fictional_universe.fictional_character.children|ns:organization.organization.child/ns:organization.organization_relationship.child ?x0 .\nns:m.03q7q1 ns:people.person.parents|ns:fictional_universe.fictional_character.parents|ns:organization.organization.parent/ns:organization.organization_relationship.parent ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 ?x0 .\nM1 P2 ?x0\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 22
  },
  {
    "questionIdx": 110903,
    "questionWithBrackets": "Was an executive producer, editor, and cinematographer of [Mohammed To Maya] [Jeff Roy]",
    "questionPatternModEntities": "Was a executive producer , editor , and cinematographer of M1 M0",
    "questionTemplate": "Was a [ROLE_SIMPLE] , [ROLE_SIMPLE] , and [ROLE_SIMPLE] of [entity] [entity]",
    "sparql": "SELECT count(*) WHERE {\nns:m.0jmqd2w ns:film.cinematographer.film ns:m.0q1_vy1 .\nns:m.0jmqd2w ns:film.editor.film ns:m.0q1_vy1 .\nns:m.0jmqd2w ns:film.producer.films_executive_produced ns:m.0q1_vy1\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1 .\nM0 P2 M1\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 22
  },
  {
    "questionIdx": 59274,
    "questionWithBrackets": "Was [I'm All Right Jack]'s editor's country of nationality a cinematographer's country of nationality",
    "questionPatternModEntities": "Was M1 's editor 's country of nationality a cinematographer 's country of nationality",
    "questionTemplate": "Was [entity] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE] a [NP_SIMPLE] 's [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ^ns:people.person.nationality ?x1 .\n?x0 ^ns:people.person.nationality ?x2 .\n?x1 a ns:film.cinematographer .\n?x2 ns:film.editor.film ns:m.04l99r\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x0 P0 ?x2 .\n?x1 a M0 .\n?x2 P1 M1\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 22
  },
  {
    "questionIdx": 213670,
    "questionWithBrackets": "Who did [A Vision of Blindness]'s director's parent's country of nationality employ",
    "questionPatternModEntities": "Who did M1 's director 's parent 's country of nationality employ",
    "questionTemplate": "Who did [entity] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE] [VP_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:people.person .\n?x0 ns:people.person.employment_history/ns:business.employment_tenure.company ?x1 .\n?x1 ^ns:people.person.nationality ?x2 .\n?x2 ns:people.person.children|ns:fictional_universe.fictional_character.children|ns:organization.organization.child/ns:organization.organization_relationship.child ?x3 .\n?x3 ns:film.director.film ns:m.0hynyfp\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 a M0 .\n?x1 P1 ?x2 .\n?x2 P2 ?x3 .\n?x3 P3 M1\n}",
    "expectedResponse": "Tim Vickery",
    "recursionDepth": 22
  },
  {
    "questionIdx": 30971,
    "questionWithBrackets": "Did a company's employee's employer distribute [The Next Best Thing]",
    "questionPatternModEntities": "Did a company 's employee 's employer distribute M0",
    "questionTemplate": "Did a [NP_SIMPLE] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE] [VP_SIMPLE] [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:business.employer.employees/ns:business.employment_tenure.person ?x1 .\n?x0 ns:film.film_distributor.films_distributed/ns:film.film_film_distributor_relationship.film ns:m.09y6pb .\n?x1 ns:people.person.employment_history/ns:business.employment_tenure.company ?x2 .\n?x2 a ns:business.employer\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x0 P1 M0 .\n?x1 P2 ?x2 .\n?x2 a M1\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 22
  },
  {
    "questionIdx": 108321,
    "questionWithBrackets": "Was an actor of [Kyun! Ho Gaya Na...]'s star and writer [mintu]",
    "questionPatternModEntities": "Was a actor of M0 's star and writer M1",
    "questionTemplate": "Was a [ROLE_SIMPLE] of [entity] 's [ROLE_SIMPLE] and [ROLE_SIMPLE] [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.actor.film/ns:film.performance.film ns:m.064l1n .\n?x0 ns:film.writer.film ns:m.064l1n .\nns:m.0kb5jvq ns:film.actor.film/ns:film.performance.character ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M0 .\nM1 P2 ?x0\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 22
  },
  {
    "questionIdx": 3723,
    "questionWithBrackets": "Did [Catherine Avgiris]'s employer acquire a film's producer",
    "questionPatternModEntities": "Did M0 's employer acquire a film 's producer",
    "questionTemplate": "Did [entity] 's [ROLE_SIMPLE] [VP_SIMPLE] a [NP_SIMPLE] 's [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:business.employer.employees/ns:business.employment_tenure.person ns:m.04h_9h2 .\n?x0 ns:organization.organization.companies_acquired/ns:business.acquisition.company_acquired ?x1 .\n?x1 ns:film.producer.film|ns:film.production_company.films ?x2 .\n?x2 a ns:film.film\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 ?x1 .\n?x1 P2 ?x2 .\n?x2 a M1\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 22
  },
  {
    "questionIdx": 34366,
    "questionWithBrackets": "Did a film editor's parent's employer distribute [Vemulawada Bheemakavi]",
    "questionPatternModEntities": "Did a film editor 's parent 's employer distribute M0",
    "questionTemplate": "Did a [NP_SIMPLE] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE] [VP_SIMPLE] [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:business.employer.employees/ns:business.employment_tenure.person ?x1 .\n?x0 ns:film.film_distributor.films_distributed/ns:film.film_film_distributor_relationship.film ns:m.012r3z1w .\n?x1 ns:people.person.children|ns:fictional_universe.fictional_character.children|ns:organization.organization.child/ns:organization.organization_relationship.child ?x2 .\n?x2 a ns:film.editor\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x0 P1 M0 .\n?x1 P2 ?x2 .\n?x2 a M1\n}",
    "expectedResponse": "No",
    "recursionDepth": 22
  },
  {
    "questionIdx": 183931,
    "questionWithBrackets": "What was written and produced by [Daggers]'s costume designer",
    "questionPatternModEntities": "What was written and produced by M0 's costume designer",
    "questionTemplate": "What was [VP_SIMPLE] and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.film.produced_by|ns:film.film.production_companies ?x1 .\n?x0 ns:film.film.written_by ?x1 .\n?x1 ns:film.film_costumer_designer.costume_design_for_film ns:m.0dm7t2\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x1 P2 M0\n}",
    "expectedResponse": "Mother's House",
    "recursionDepth": 22
  },
  {
    "questionIdx": 4166,
    "questionWithBrackets": "Did [Christine Norden] and [Katherine Kath] marry an actor's spouse",
    "questionPatternModEntities": "Did M1 and M2 marry a actor 's spouse",
    "questionTemplate": "Did [entity] and [entity] [VP_SIMPLE] a [NP_SIMPLE] 's [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ?x1 .\n?x1 a ns:film.actor .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ns:m.0gchg4 != ?x0 ) .\nFILTER ( ns:m.0qfngsp != ?x0 ) .\nns:m.0gchg4 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ?x0 .\nns:m.0qfngsp ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x1 a M0 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( M1 != ?x0 ) .\nFILTER ( M2 != ?x0 ) .\nM1 P0 ?x0 .\nM2 P0 ?x0\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 22
  },
  {
    "questionIdx": 33579,
    "questionWithBrackets": "Did a film distributor's child acquire [Island Records] and [Virgin Records]",
    "questionPatternModEntities": "Did a film distributor 's child acquire M0 and M1",
    "questionTemplate": "Did a [NP_SIMPLE] 's [ROLE_SIMPLE] [VP_SIMPLE] [entity] and [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:organization.organization.companies_acquired/ns:business.acquisition.company_acquired ns:m.0mzkr .\n?x0 ns:organization.organization.companies_acquired/ns:business.acquisition.company_acquired ns:m.0n85g .\n?x0 ns:people.person.parents|ns:fictional_universe.fictional_character.parents|ns:organization.organization.parent/ns:organization.organization_relationship.parent ?x1 .\n?x1 a ns:film.film_distributor\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x0 P1 M0 .\n?x0 P1 M1 .\n?x1 a M2\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 22
  },
  {
    "questionIdx": 221064,
    "questionWithBrackets": "Who married [Training Day]'s executive producer's spouse's sibling",
    "questionPatternModEntities": "Who married M1 's executive producer 's spouse 's sibling",
    "questionTemplate": "Who [VP_SIMPLE] [entity] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:people.person .\n?x0 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ?x1 .\n?x1 ns:people.person.sibling_s/ns:people.sibling_relationship.sibling|ns:fictional_universe.fictional_character.siblings/ns:fictional_universe.sibling_relationship_of_fictional_characters.siblings ?x2 .\n?x2 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ?x3 .\n?x3 ns:film.producer.films_executive_produced ns:m.01718w .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x1 != ?x2 ) .\nFILTER ( ?x2 != ?x3 )\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 a M0 .\n?x1 P1 ?x2 .\n?x2 P0 ?x3 .\n?x3 P2 M1 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x1 != ?x2 ) .\nFILTER ( ?x2 != ?x3 )\n}",
    "expectedResponse": "Amy Robach; Jennifer Hageney",
    "recursionDepth": 22
  },
  {
    "questionIdx": 119393,
    "questionWithBrackets": "Were [Jonah: A VeggieTales Movie] and [One A.M.] directed by an editor of [The Adventurer]",
    "questionPatternModEntities": "Were M1 and M2 directed by a editor of M0",
    "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.editor.film ns:m.08kf7t .\nns:m.07m7w3 ns:film.film.directed_by ?x0 .\nns:m.0c2ty5 ns:film.film.directed_by ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 ?x0 .\nM2 P1 ?x0\n}",
    "expectedResponse": "No",
    "recursionDepth": 22
  },
  {
    "questionIdx": 16546,
    "questionWithBrackets": "Did [Patrik Pa\u0161\u0161] edit and produce a film",
    "questionPatternModEntities": "Did M1 edit and produce a film",
    "questionTemplate": "Did [entity] [VP_SIMPLE] and [VP_SIMPLE] a [NP_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 a ns:film.film .\nns:m.0bgbwph ns:film.editor.film ?x0 .\nns:m.0bgbwph ns:film.producer.film|ns:film.production_company.films ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 a M0 .\nM1 P0 ?x0 .\nM1 P1 ?x0\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 22
  },
  {
    "questionIdx": 188805,
    "questionWithBrackets": "Which Chinese film producer edited [Time and Tide] and [Angel Warriors]",
    "questionPatternModEntities": "Which Chinese film producer edited M1 and M2",
    "questionTemplate": "Which [ADJECTIVE_SIMPLE] [NP_SIMPLE] [VP_SIMPLE] [entity] and [entity]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:film.producer .\n?x0 ns:film.editor.film ns:m.0fh7w7 .\n?x0 ns:film.editor.film ns:m.0ywzr_9 .\n?x0 ns:people.person.nationality ns:m.0d05w3\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P1 M3 .\n?x0 a M0\n}",
    "expectedResponse": "Marco Mak",
    "recursionDepth": 22
  },
  {
    "questionIdx": 148961,
    "questionWithBrackets": "What did a cinematographer that [Video Archives] employed found",
    "questionPatternModEntities": "What did a cinematographer that M1 employed found",
    "questionTemplate": "What did a [NP_SIMPLE] that [entity] [VP_SIMPLE] [VP_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:organization.organization.founders ?x1 .\n?x1 a ns:film.cinematographer .\n?x1 ns:people.person.employment_history/ns:business.employment_tenure.company ns:m.03phx4\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x1 P1 M1 .\n?x1 a M0\n}",
    "expectedResponse": "A Band Apart; Rolling Thunder Pictures",
    "recursionDepth": 22
  },
  {
    "questionIdx": 190565,
    "questionWithBrackets": "Which Italian person did [Blackadder: Back & Forth]'s producer employ",
    "questionPatternModEntities": "Which Italian person did M2 's producer employ",
    "questionTemplate": "Which [ADJECTIVE_SIMPLE] [NP_SIMPLE] did [entity] 's [ROLE_SIMPLE] [VP_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:people.person .\n?x0 ns:people.person.employment_history/ns:business.employment_tenure.company ?x1 .\n?x0 ns:people.person.nationality ns:m.03rjj .\n?x1 ns:film.producer.film|ns:film.production_company.films ns:m.028k_g\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 M1 .\n?x0 a M0 .\n?x1 P2 M2\n}",
    "expectedResponse": "Alex Polizzi",
    "recursionDepth": 22
  },
  {
    "questionIdx": 171190,
    "questionWithBrackets": "What was directed by and produced by [Cookie Jar Group]'s founder",
    "questionPatternModEntities": "What was directed by and produced by M0 's founder",
    "questionTemplate": "What was [VP_SIMPLE] by and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.film.directed_by ?x1 .\n?x0 ns:film.film.produced_by|ns:film.film.production_companies ?x1 .\n?x1 ns:organization.organization_founder.organizations_founded ns:m.06_dbm\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x1 P2 M0\n}",
    "expectedResponse": "Voulez-vous coucher avec God?",
    "recursionDepth": 23
  },
  {
    "questionIdx": 99557,
    "questionWithBrackets": "Was a film producer's child's child and parent [VG Treasury SAS]",
    "questionPatternModEntities": "Was a film producer 's child 's child and parent M1",
    "questionTemplate": "Was a [NP_SIMPLE] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE] and [ROLE_SIMPLE] [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:people.person.parents|ns:fictional_universe.fictional_character.parents|ns:organization.organization.parent/ns:organization.organization_relationship.parent ?x1 .\n?x1 a ns:film.producer .\nns:m.09mywzk ns:people.person.children|ns:fictional_universe.fictional_character.children|ns:organization.organization.child/ns:organization.organization_relationship.child ?x0 .\nns:m.09mywzk ns:people.person.parents|ns:fictional_universe.fictional_character.parents|ns:organization.organization.parent/ns:organization.organization_relationship.parent ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x1 a M0 .\nM1 P0 ?x0 .\nM1 P1 ?x0\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 23
  },
  {
    "questionIdx": 185285,
    "questionWithBrackets": "What was written by a film distributor founded by [Herman Casler]",
    "questionPatternModEntities": "What was written by a film distributor founded by M1",
    "questionTemplate": "What was [VP_SIMPLE] by a [NP_SIMPLE] [VP_SIMPLE] by [entity]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.film.written_by ?x1 .\n?x1 a ns:film.film_distributor .\n?x1 ns:organization.organization.founders ns:m.0dfqtk\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x1 P1 M1 .\n?x1 a M0\n}",
    "expectedResponse": "Arrival of Tongkin Train",
    "recursionDepth": 23
  },
  {
    "questionIdx": 12555,
    "questionWithBrackets": "Did [Knut Hamsun] influence an American person's parent",
    "questionPatternModEntities": "Did M2 influence a American person 's parent",
    "questionTemplate": "Did [entity] [VP_SIMPLE] a [ADJECTIVE_SIMPLE] [NP_SIMPLE] 's [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:people.person.children|ns:fictional_universe.fictional_character.children|ns:organization.organization.child/ns:organization.organization_relationship.child ?x1 .\n?x1 a ns:people.person .\n?x1 ns:people.person.nationality ns:m.09c7w0 .\nns:m.04g0m ns:influence.influence_node.influenced ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x1 P1 M1 .\n?x1 a M0 .\nM2 P2 ?x0\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 23
  },
  {
    "questionIdx": 194449,
    "questionWithBrackets": "Which art director was influenced by [Chanel]'s female founder",
    "questionPatternModEntities": "Which art director was influenced by M1 's female founder",
    "questionTemplate": "Which [NP_SIMPLE] was [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:film.film_art_director .\n?x0 ns:influence.influence_node.influenced_by ?x1 .\n?x1 ns:organization.organization_founder.organizations_founded ns:m.036rkh .\n?x1 ns:people.person.gender ns:m.02zsn\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 a M0 .\n?x1 P1 M1 .\n?x1 P2 M2\n}",
    "expectedResponse": "Karl Lagerfeld",
    "recursionDepth": 23
  },
  {
    "questionIdx": 100984,
    "questionWithBrackets": "Was a film's producer acquired by [TPG Capital] and [APriori Capital Partners]",
    "questionPatternModEntities": "Was a film 's producer acquired by M0 and M1",
    "questionTemplate": "Was a [NP_SIMPLE] 's [ROLE_SIMPLE] [VP_SIMPLE] by [entity] and [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.producer.film|ns:film.production_company.films ?x1 .\n?x0 ns:organization.organization.acquired_by/ns:business.acquisition.acquiring_company ns:m.02qb2mr .\n?x0 ns:organization.organization.acquired_by/ns:business.acquisition.acquiring_company ns:m.03yqpb .\n?x1 a ns:film.film\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P1 ?x1 .\n?x1 a M2\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 23
  },
  {
    "questionIdx": 18656,
    "questionWithBrackets": "Did [Safari Books Online]'s founder's employer's parent acquire [Vivendi]",
    "questionPatternModEntities": "Did M1 's founder 's employer 's parent acquire M0",
    "questionTemplate": "Did [entity] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE] [VP_SIMPLE] [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:organization.organization.companies_acquired/ns:business.acquisition.company_acquired ns:m.049ql1 .\n?x0 ns:people.person.children|ns:fictional_universe.fictional_character.children|ns:organization.organization.child/ns:organization.organization_relationship.child ?x1 .\n?x1 ns:business.employer.employees/ns:business.employment_tenure.person ?x2 .\n?x2 ns:organization.organization_founder.organizations_founded ns:m.0220wh3\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x0 P1 M0 .\n?x1 P2 ?x2 .\n?x2 P3 M1\n}",
    "expectedResponse": "No",
    "recursionDepth": 23
  },
  {
    "questionIdx": 98626,
    "questionWithBrackets": "Was a film executive produced and written by [Joseph Nanni]",
    "questionPatternModEntities": "Was a film executive produced and written by M1",
    "questionTemplate": "Was a [NP_SIMPLE] [VP_SIMPLE] and [VP_SIMPLE] by [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 a ns:film.film .\n?x0 ns:film.film.executive_produced_by ns:m.0g41jck .\n?x0 ns:film.film.written_by ns:m.0g41jck\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M1 .\n?x0 P1 M1 .\n?x0 a M0\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 23
  },
  {
    "questionIdx": 32360,
    "questionWithBrackets": "Did a female person edit [Light of My Eyes] and [The Physics Of Water]",
    "questionPatternModEntities": "Did a female person edit M1 and M2",
    "questionTemplate": "Did a [ADJECTIVE_SIMPLE] [NP_SIMPLE] [VP_SIMPLE] [entity] and [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 a ns:people.person .\n?x0 ns:film.editor.film ns:m.04j24zx .\n?x0 ns:film.editor.film ns:m.0fpq2w6 .\n?x0 ns:people.person.gender ns:m.02zsn\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P1 M3 .\n?x0 a M0\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 23
  },
  {
    "questionIdx": 99614,
    "questionWithBrackets": "Was a film producer's employer acquired by [Comcast] and [NBCUniversal]",
    "questionPatternModEntities": "Was a film producer 's employer acquired by M0 and M1",
    "questionTemplate": "Was a [NP_SIMPLE] 's [ROLE_SIMPLE] [VP_SIMPLE] by [entity] and [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:business.employer.employees/ns:business.employment_tenure.person ?x1 .\n?x0 ns:organization.organization.acquired_by/ns:business.acquisition.acquiring_company ns:m.01s73z .\n?x0 ns:organization.organization.acquired_by/ns:business.acquisition.acquiring_company ns:m.02_l39 .\n?x1 a ns:film.producer\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x0 P1 M0 .\n?x0 P1 M1 .\n?x1 a M2\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 23
  },
  {
    "questionIdx": 216654,
    "questionWithBrackets": "Who did [\u00a1Mis abuelitas... nom\u00e1s!]'s Mexican writer's country of nationality employ",
    "questionPatternModEntities": "Who did M1 's Mexican writer 's country of nationality employ",
    "questionTemplate": "Who did [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] 's [ROLE_SIMPLE] [VP_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:people.person .\n?x0 ns:people.person.employment_history/ns:business.employment_tenure.company ?x1 .\n?x1 ^ns:people.person.nationality ?x2 .\n?x2 ns:film.writer.film ns:m.0ggbnrj .\n?x2 ns:people.person.nationality ns:m.0b90_r\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 a M0 .\n?x1 P1 ?x2 .\n?x2 P2 M1 .\n?x2 P3 M2\n}",
    "expectedResponse": "P\u00e1nfilo de Narv\u00e1ez",
    "recursionDepth": 23
  },
  {
    "questionIdx": 111996,
    "questionWithBrackets": "Were [Against All Flags] and [Weird Science] distributed by a person's child",
    "questionPatternModEntities": "Were M1 and M2 distributed by a person 's child",
    "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by a [NP_SIMPLE] 's [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:people.person.parents|ns:fictional_universe.fictional_character.parents|ns:organization.organization.parent/ns:organization.organization_relationship.parent ?x1 .\n?x1 a ns:people.person .\nns:m.01j_lt ns:film.film.distributors/ns:film.film_film_distributor_relationship.distributor ?x0 .\nns:m.027ylsy ns:film.film.distributors/ns:film.film_film_distributor_relationship.distributor ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x1 a M0 .\nM1 P1 ?x0 .\nM2 P1 ?x0\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 23
  },
  {
    "questionIdx": 143808,
    "questionWithBrackets": "What did [Harvard University]'s employee's Dutch spouse produce",
    "questionPatternModEntities": "What did M1 's employee 's Dutch spouse produce",
    "questionTemplate": "What did [entity] 's [ROLE_SIMPLE] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] [VP_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.film.produced_by|ns:film.film.production_companies ?x1 .\n?x1 ns:people.person.nationality ns:m.059j2 .\n?x1 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ?x2 .\n?x2 ns:people.person.employment_history/ns:business.employment_tenure.company ns:m.03ksy .\nFILTER ( ?x1 != ?x2 )\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x1 P1 M0 .\n?x1 P2 ?x2 .\n?x2 P3 M1 .\nFILTER ( ?x1 != ?x2 )\n}",
    "expectedResponse": "Submission",
    "recursionDepth": 23
  },
  {
    "questionIdx": 220268,
    "questionWithBrackets": "Who married [Goth Patron]'s actor's female spouse",
    "questionPatternModEntities": "Who married M2 's actor 's female spouse",
    "questionTemplate": "Who [VP_SIMPLE] [entity] 's [ROLE_SIMPLE] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:people.person .\n?x0 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ?x1 .\n?x1 ns:people.person.gender ns:m.02zsn .\n?x1 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ?x2 .\n?x2 ns:film.actor.film/ns:film.performance.character ns:m.0vp5z0w .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x1 != ?x2 )\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 a M0 .\n?x1 P0 ?x2 .\n?x1 P1 M1 .\n?x2 P2 M2 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x1 != ?x2 )\n}",
    "expectedResponse": "Louis E. Rosas; Paul B. Cutler",
    "recursionDepth": 23
  },
  {
    "questionIdx": 106360,
    "questionWithBrackets": "Was a spouse of [Me and My Brother]'s writer a spouse of [Halldor Enard]",
    "questionPatternModEntities": "Was a spouse of M1 's writer a spouse of M0",
    "questionTemplate": "Was a [ROLE_SIMPLE] of [entity] 's [ROLE_SIMPLE] a [ROLE_SIMPLE] of [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ?x1 .\n?x0 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ns:m.0j6f091 .\n?x1 ns:film.writer.film ns:m.047mrl2 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x0 != ns:m.0j6f091 )\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x0 P0 M0 .\n?x1 P1 M1 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x0 != M0 )\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 23
  },
  {
    "questionIdx": 39946,
    "questionWithBrackets": "Did a spouse of a spouse of [Blanche Oelrichs] play [Annie Daly]",
    "questionPatternModEntities": "Did a spouse of a spouse of M1 play M0",
    "questionTemplate": "Did a [ROLE_SIMPLE] of a [ROLE_SIMPLE] of [entity] [VP_SIMPLE] [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.actor.film/ns:film.performance.character ns:m.0n3g441 .\n?x0 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ?x1 .\n?x1 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ns:m.0830cw .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x1 != ns:m.0830cw )\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 ?x1 .\n?x1 P1 M1 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x1 != M1 )\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 23
  },
  {
    "questionIdx": 215104,
    "questionWithBrackets": "Who did [The Cell 2]'s prequel's Japanese costume designer marry",
    "questionPatternModEntities": "Who did M2 's prequel 's Japanese costume designer marry",
    "questionTemplate": "Who did [entity] 's [ROLE_SIMPLE] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] [VP_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:people.person .\n?x0 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ?x1 .\n?x1 ns:film.film_costumer_designer.costume_design_for_film ?x2 .\n?x1 ns:people.person.nationality ns:m.03_3d .\n?x2 ns:film.film.sequel ns:m.05sxjk3 .\nFILTER ( ?x0 != ?x1 )\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 a M0 .\n?x1 P1 ?x2 .\n?x1 P2 M1 .\n?x2 P3 M2 .\nFILTER ( ?x0 != ?x1 )\n}",
    "expectedResponse": "Nico Soultanakis",
    "recursionDepth": 23
  },
  {
    "questionIdx": 181992,
    "questionWithBrackets": "What was produced by a Japanese cinematographer's sibling",
    "questionPatternModEntities": "What was produced by a Japanese cinematographer 's sibling",
    "questionTemplate": "What was [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [NP_SIMPLE] 's [ROLE_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.film.produced_by|ns:film.film.production_companies ?x1 .\n?x1 ns:people.person.sibling_s/ns:people.sibling_relationship.sibling|ns:fictional_universe.fictional_character.siblings/ns:fictional_universe.sibling_relationship_of_fictional_characters.siblings ?x2 .\n?x2 a ns:film.cinematographer .\n?x2 ns:people.person.nationality ns:m.03_3d .\nFILTER ( ?x1 != ?x2 )\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x1 P1 ?x2 .\n?x2 P2 M1 .\n?x2 a M0 .\nFILTER ( ?x1 != ?x2 )\n}",
    "expectedResponse": "Zhuangzi Tests His Wife",
    "recursionDepth": 23
  },
  {
    "questionIdx": 97401,
    "questionWithBrackets": "Was a film distributor that acquired [Tivoli Systems, Inc.] and [CommQuest] [SK Telecom]",
    "questionPatternModEntities": "Was a film distributor that acquired M2 and M3 M0",
    "questionTemplate": "Was a [NP_SIMPLE] that [VP_SIMPLE] [entity] and [entity] [entity]",
    "sparql": "SELECT count(*) WHERE {\nns:m.02fz1t a ns:film.film_distributor .\nns:m.02fz1t ns:organization.organization.companies_acquired/ns:business.acquisition.company_acquired ns:m.03f6r9_ .\nns:m.02fz1t ns:organization.organization.companies_acquired/ns:business.acquisition.company_acquired ns:m.09rpsc\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M2 .\nM0 P0 M3 .\nM0 a M1\n}",
    "expectedResponse": "No",
    "recursionDepth": 23
  },
  {
    "questionIdx": 204519,
    "questionWithBrackets": "Which film producer was influenced by [Mario Calvino]'s Italian child",
    "questionPatternModEntities": "Which film producer was influenced by M2 's Italian child",
    "questionTemplate": "Which [NP_SIMPLE] was [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:film.producer .\n?x0 ns:influence.influence_node.influenced_by ?x1 .\n?x1 ns:people.person.nationality ns:m.03rjj .\n?x1 ns:people.person.parents|ns:fictional_universe.fictional_character.parents|ns:organization.organization.parent/ns:organization.organization_relationship.parent ns:m.0ndp_9s\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 a M0 .\n?x1 P1 M1 .\n?x1 P2 M2\n}",
    "expectedResponse": "Salman Rushdie; Daniel Wallace",
    "recursionDepth": 23
  },
  {
    "questionIdx": 147700,
    "questionWithBrackets": "What did [Tung]'s editor, cinematographer, and director found",
    "questionPatternModEntities": "What did M0 's editor , cinematographer , and director found",
    "questionTemplate": "What did [entity] 's [ROLE_SIMPLE] , [ROLE_SIMPLE] , and [ROLE_SIMPLE] [VP_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:organization.organization.founders ?x1 .\n?x1 ns:film.cinematographer.film ns:m.0jwgypf .\n?x1 ns:film.director.film ns:m.0jwgypf .\n?x1 ns:film.editor.film ns:m.0jwgypf\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x1 P1 M0 .\n?x1 P2 M0 .\n?x1 P3 M0\n}",
    "expectedResponse": "Canyon Cinema",
    "recursionDepth": 23
  },
  {
    "questionIdx": 59495,
    "questionWithBrackets": "Was [Improper Conduct] directed by a Spanish cinematographer of [Made in Milan]",
    "questionPatternModEntities": "Was M2 directed by a Spanish cinematographer of M1",
    "questionTemplate": "Was [entity] [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.cinematographer.film ns:m.0dgf3f1 .\n?x0 ns:people.person.nationality ns:m.06mkj .\nns:m.06sg2t ns:film.film.directed_by ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nM2 P2 ?x0\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 23
  },
  {
    "questionIdx": 205093,
    "questionWithBrackets": "Which film was edited by and starred [Bill Hinzman]",
    "questionPatternModEntities": "Which film was edited by and starred M1",
    "questionTemplate": "Which [NP_SIMPLE] was [VP_SIMPLE] by and [VP_SIMPLE] [entity]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:film.film .\n?x0 ns:film.film.edited_by ns:m.0d_w7n .\n?x0 ns:film.film.starring/ns:film.performance.actor ns:m.0d_w7n\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M1 .\n?x0 P1 M1 .\n?x0 a M0\n}",
    "expectedResponse": "Flesheater",
    "recursionDepth": 23
  },
  {
    "questionIdx": 26855,
    "questionWithBrackets": "Did a Chinese screenwriter edit [The Midnight After] and [Z Storm]",
    "questionPatternModEntities": "Did a Chinese screenwriter edit M1 and M2",
    "questionTemplate": "Did a [ADJECTIVE_SIMPLE] [NP_SIMPLE] [VP_SIMPLE] [entity] and [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 a ns:film.writer .\n?x0 ns:film.editor.film ns:m.0_frhk5 .\n?x0 ns:film.editor.film ns:m.0_gzspc .\n?x0 ns:people.person.nationality ns:m.0d05w3\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P1 M3 .\n?x0 a M0\n}",
    "expectedResponse": "No",
    "recursionDepth": 23
  },
  {
    "questionIdx": 50957,
    "questionWithBrackets": "Was [Cora\u00e7\u00e3o de Ga\u00facho] edited by a producer and editor of [Math Test]",
    "questionPatternModEntities": "Was M1 edited by a producer and editor of M0",
    "questionTemplate": "Was [entity] [VP_SIMPLE] by a [ROLE_SIMPLE] and [ROLE_SIMPLE] of [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.editor.film ns:m.0j2mycj .\n?x0 ns:film.producer.film|ns:film.production_company.films ns:m.0j2mycj .\nns:m.03cmx6l ns:film.film.edited_by ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M0 .\nM1 P2 ?x0\n}",
    "expectedResponse": "No",
    "recursionDepth": 23
  },
  {
    "questionIdx": 82982,
    "questionWithBrackets": "Was [The Ways of Fate] edited by and written by a character",
    "questionPatternModEntities": "Was M1 edited by and written by a character",
    "questionTemplate": "Was [entity] [VP_SIMPLE] by and [VP_SIMPLE] by a [NP_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 a ns:fictional_universe.fictional_character .\nns:m.047dmsl ns:film.film.edited_by ?x0 .\nns:m.047dmsl ns:film.film.written_by ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 a M0 .\nM1 P0 ?x0 .\nM1 P1 ?x0\n}",
    "expectedResponse": "No",
    "recursionDepth": 23
  },
  {
    "questionIdx": 5220,
    "questionWithBrackets": "Did [David Borowich]'s male spouse influence a character",
    "questionPatternModEntities": "Did M1 's male spouse influence a character",
    "questionTemplate": "Did [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] [VP_SIMPLE] a [NP_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:influence.influence_node.influenced ?x1 .\n?x0 ns:people.person.gender ns:m.05zppz .\n?x0 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ns:m.0520w6x .\n?x1 a ns:fictional_universe.fictional_character .\nFILTER ( ?x0 != ns:m.0520w6x )\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x0 P1 M0 .\n?x0 P2 M1 .\n?x1 a M2 .\nFILTER ( ?x0 != M1 )\n}",
    "expectedResponse": "No",
    "recursionDepth": 23
  },
  {
    "questionIdx": 158466,
    "questionWithBrackets": "What film that [Severin Frei] wrote was directed by [Jonas Frei]",
    "questionPatternModEntities": "What film that M1 wrote was directed by M2",
    "questionTemplate": "What [NP_SIMPLE] that [entity] [VP_SIMPLE] was [VP_SIMPLE] by [entity]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:film.film .\n?x0 ns:film.film.directed_by ns:m.0118tzvp .\n?x0 ns:film.film.written_by ns:g.1269ny6r5\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M1 .\n?x0 P1 M2 .\n?x0 a M0\n}",
    "expectedResponse": "Panamericana",
    "recursionDepth": 23
  },
  {
    "questionIdx": 10033,
    "questionWithBrackets": "Did [I Are You, You Am Me]'s Mexican costume designer edit a film",
    "questionPatternModEntities": "Did M0 's Mexican costume designer edit a film",
    "questionTemplate": "Did [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] [VP_SIMPLE] a [NP_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.editor.film ?x1 .\n?x0 ns:film.film_costumer_designer.costume_design_for_film ns:m.09v8y7h .\n?x0 ns:people.person.nationality ns:m.0b90_r .\n?x1 a ns:film.film\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x0 P1 M0 .\n?x0 P2 M1 .\n?x1 a M2\n}",
    "expectedResponse": "No",
    "recursionDepth": 23
  },
  {
    "questionIdx": 111361,
    "questionWithBrackets": "Were [A Busy Day] and [A Jitney Elopement] edited by a company's employee",
    "questionPatternModEntities": "Were M1 and M2 edited by a company 's employee",
    "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by a [NP_SIMPLE] 's [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:people.person.employment_history/ns:business.employment_tenure.company ?x1 .\n?x1 a ns:business.employer .\nns:m.05c3b2 ns:film.film.edited_by ?x0 .\nns:m.07m2v9 ns:film.film.edited_by ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x1 a M0 .\nM1 P1 ?x0 .\nM2 P1 ?x0\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 23
  },
  {
    "questionIdx": 27085,
    "questionWithBrackets": "Did a Dutch film producer found [Van den Ende Produkties B.V.] and [A-Film]",
    "questionPatternModEntities": "Did a Dutch film producer found M1 and M2",
    "questionTemplate": "Did a [ADJECTIVE_SIMPLE] [NP_SIMPLE] [VP_SIMPLE] [entity] and [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 a ns:film.producer .\n?x0 ns:organization.organization_founder.organizations_founded ns:m.07vq5y6 .\n?x0 ns:organization.organization_founder.organizations_founded ns:m.0gqzyk .\n?x0 ns:people.person.nationality ns:m.059j2\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P1 M3 .\n?x0 a M0\n}",
    "expectedResponse": "No",
    "recursionDepth": 23
  },
  {
    "questionIdx": 174660,
    "questionWithBrackets": "What was edited by and directed by [The Hustler of Muscle Beach]'s director",
    "questionPatternModEntities": "What was edited by and directed by M0 's director",
    "questionTemplate": "What was [VP_SIMPLE] by and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.film.directed_by ?x1 .\n?x0 ns:film.film.edited_by ?x1 .\n?x1 ns:film.director.film ns:m.04q1x6g\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x1 P2 M0\n}",
    "expectedResponse": "Night Call Nurses",
    "recursionDepth": 23
  },
  {
    "questionIdx": 220225,
    "questionWithBrackets": "Who married [Fudgy Wudgy Fudge Face]'s director, executive producer, and costume designer",
    "questionPatternModEntities": "Who married M1 's director , executive producer , and costume designer",
    "questionTemplate": "Who [VP_SIMPLE] [entity] 's [ROLE_SIMPLE] , [ROLE_SIMPLE] , and [ROLE_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:people.person .\n?x0 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ?x1 .\n?x1 ns:film.director.film ns:m.0h1pp81 .\n?x1 ns:film.film_costumer_designer.costume_design_for_film ns:m.0h1pp81 .\n?x1 ns:film.producer.films_executive_produced ns:m.0h1pp81 .\nFILTER ( ?x0 != ?x1 )\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 a M0 .\n?x1 P1 M1 .\n?x1 P2 M1 .\n?x1 P3 M1 .\nFILTER ( ?x0 != ?x1 )\n}",
    "expectedResponse": "Wendi Kenya",
    "recursionDepth": 23
  },
  {
    "questionIdx": 52277,
    "questionWithBrackets": "Was [Denmark] a costume designer's female sibling's country of nationality",
    "questionPatternModEntities": "Was M2 a costume designer 's female sibling 's country of nationality",
    "questionTemplate": "Was [entity] a [NP_SIMPLE] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] 's [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:people.person.gender ns:m.02zsn .\n?x0 ns:people.person.sibling_s/ns:people.sibling_relationship.sibling|ns:fictional_universe.fictional_character.siblings/ns:fictional_universe.sibling_relationship_of_fictional_characters.siblings ?x1 .\n?x1 a ns:film.film_costumer_designer .\nFILTER ( ?x0 != ?x1 ) .\nns:m.0k6nt ^ns:people.person.nationality ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x0 P1 M0 .\n?x1 a M1 .\nFILTER ( ?x0 != ?x1 ) .\nM2 P2 ?x0\n}",
    "expectedResponse": "No",
    "recursionDepth": 23
  },
  {
    "questionIdx": 86309,
    "questionWithBrackets": "Was [Warner Bros.-Seven Arts] a screenwriter's employer's parent and child",
    "questionPatternModEntities": "Was M1 a screenwriter 's employer 's parent and child",
    "questionTemplate": "Was [entity] a [NP_SIMPLE] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE] and [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:business.employer.employees/ns:business.employment_tenure.person ?x1 .\n?x1 a ns:film.writer .\nns:m.03q7q1 ns:people.person.children|ns:fictional_universe.fictional_character.children|ns:organization.organization.child/ns:organization.organization_relationship.child ?x0 .\nns:m.03q7q1 ns:people.person.parents|ns:fictional_universe.fictional_character.parents|ns:organization.organization.parent/ns:organization.organization_relationship.parent ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x1 a M0 .\nM1 P1 ?x0 .\nM1 P2 ?x0\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 23
  },
  {
    "questionIdx": 230855,
    "questionWithBrackets": "Who was a film producer that [Amrita Singh] and [Kareena Kapoor] married",
    "questionPatternModEntities": "Who was a film producer that M2 and M3 married",
    "questionTemplate": "Who was a [NP_SIMPLE] that [entity] and [entity] [VP_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:film.producer .\n?x0 a ns:people.person .\n?x0 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ns:m.02756j .\n?x0 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ns:m.07f49g .\nFILTER ( ?x0 != ns:m.02756j ) .\nFILTER ( ?x0 != ns:m.07f49g )\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M2 .\n?x0 P0 M3 .\n?x0 a M0 .\n?x0 a M1 .\nFILTER ( ?x0 != M2 ) .\nFILTER ( ?x0 != M3 )\n}",
    "expectedResponse": "Saif Ali Khan",
    "recursionDepth": 23
  },
  {
    "questionIdx": 154006,
    "questionWithBrackets": "What female Chinese screenwriter wrote [Once Upon a Mirage]",
    "questionPatternModEntities": "What female Chinese screenwriter wrote M1",
    "questionTemplate": "What [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [NP_SIMPLE] [VP_SIMPLE] [entity]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:film.writer .\n?x0 ns:film.writer.film ns:m.0ncxnzv .\n?x0 ns:people.person.gender ns:m.02zsn .\n?x0 ns:people.person.nationality ns:m.0d05w3\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M1 .\n?x0 P1 M2 .\n?x0 P2 M3 .\n?x0 a M0\n}",
    "expectedResponse": "Lilian Lee",
    "recursionDepth": 23
  },
  {
    "questionIdx": 220344,
    "questionWithBrackets": "Who married [Idiots and Angels]'s writer, art director, and producer",
    "questionPatternModEntities": "Who married M1 's writer , art director , and producer",
    "questionTemplate": "Who [VP_SIMPLE] [entity] 's [ROLE_SIMPLE] , [ROLE_SIMPLE] , and [ROLE_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:people.person .\n?x0 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ?x1 .\n?x1 ns:film.film_art_director.films_art_directed ns:m.04mwpx4 .\n?x1 ns:film.producer.film|ns:film.production_company.films ns:m.04mwpx4 .\n?x1 ns:film.writer.film ns:m.04mwpx4 .\nFILTER ( ?x0 != ?x1 )\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 a M0 .\n?x1 P1 M1 .\n?x1 P2 M1 .\n?x1 P3 M1 .\nFILTER ( ?x0 != ?x1 )\n}",
    "expectedResponse": "Sandrine Plympton",
    "recursionDepth": 23
  },
  {
    "questionIdx": 157073,
    "questionWithBrackets": "What film editor was employed by [Action Blue Sky Campaign]'s founder's country of nationality",
    "questionPatternModEntities": "What film editor was employed by M1 's founder 's country of nationality",
    "questionTemplate": "What [NP_SIMPLE] was [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:film.editor .\n?x0 ns:people.person.employment_history/ns:business.employment_tenure.company ?x1 .\n?x1 ^ns:people.person.nationality ?x2 .\n?x2 ns:organization.organization_founder.organizations_founded ns:m.0gqjlp\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 a M0 .\n?x1 P1 ?x2 .\n?x2 P2 M1\n}",
    "expectedResponse": "Mark Aitchison Young",
    "recursionDepth": 23
  },
  {
    "questionIdx": 105380,
    "questionWithBrackets": "Was a screenwriter's American actor's parent [R. Ravindran]",
    "questionPatternModEntities": "Was a screenwriter 's American actor 's parent M2",
    "questionTemplate": "Was a [NP_SIMPLE] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] 's [ROLE_SIMPLE] [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.actor.film/ns:film.performance.character ?x1 .\n?x0 ns:people.person.nationality ns:m.09c7w0 .\n?x1 a ns:film.writer .\nns:m.0xmnz9d ns:people.person.children|ns:fictional_universe.fictional_character.children|ns:organization.organization.child/ns:organization.organization_relationship.child ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 ?x1 .\n?x1 a M1 .\nM2 P2 ?x0\n}",
    "expectedResponse": "No",
    "recursionDepth": 23
  },
  {
    "questionIdx": 34753,
    "questionWithBrackets": "Did a film producer marry [Down Argentine Way]'s Italian star",
    "questionPatternModEntities": "Did a film producer marry M2 's Italian star",
    "questionTemplate": "Did a [NP_SIMPLE] [VP_SIMPLE] [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 a ns:film.producer .\n?x0 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ?x1 .\n?x1 ns:film.actor.film/ns:film.performance.film ns:m.0kv9dx .\n?x1 ns:people.person.nationality ns:m.03rjj .\nFILTER ( ?x0 != ?x1 )\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x0 a M0 .\n?x1 P1 M1 .\n?x1 P2 M2 .\nFILTER ( ?x0 != ?x1 )\n}",
    "expectedResponse": "No",
    "recursionDepth": 23
  },
  {
    "questionIdx": 159989,
    "questionWithBrackets": "What male Japanese art director played [Seitaro Tanaka]",
    "questionPatternModEntities": "What male Japanese art director played M2",
    "questionTemplate": "What [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [NP_SIMPLE] [VP_SIMPLE] [entity]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:film.film_art_director .\n?x0 ns:film.actor.film/ns:film.performance.character ns:m.0hz_bjw .\n?x0 ns:people.person.gender ns:m.05zppz .\n?x0 ns:people.person.nationality ns:m.03_3d\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M1 .\n?x0 P1 M2 .\n?x0 P2 M3 .\n?x0 a M0\n}",
    "expectedResponse": "Shinya Tsukamoto",
    "recursionDepth": 23
  },
  {
    "questionIdx": 86895,
    "questionWithBrackets": "Was [Will Ryder] a film's art director, producer, and director",
    "questionPatternModEntities": "Was M1 a film 's art director , producer , and director",
    "questionTemplate": "Was [entity] a [NP_SIMPLE] 's [ROLE_SIMPLE] , [ROLE_SIMPLE] , and [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 a ns:film.film .\nns:m.0jzffrt ns:film.director.film ?x0 .\nns:m.0jzffrt ns:film.film_art_director.films_art_directed ?x0 .\nns:m.0jzffrt ns:film.producer.film|ns:film.production_company.films ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 a M0 .\nM1 P0 ?x0 .\nM1 P1 ?x0 .\nM1 P2 ?x0\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 23
  },
  {
    "questionIdx": 22715,
    "questionWithBrackets": "Did [The Secret of Delft] and [Heilig recht] star a Dutch actor",
    "questionPatternModEntities": "Did M2 and M3 star a Dutch actor",
    "questionTemplate": "Did [entity] and [entity] [VP_SIMPLE] a [ADJECTIVE_SIMPLE] [NP_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 a ns:film.actor .\n?x0 ns:people.person.nationality ns:m.059j2 .\nns:m.05zk17l ns:film.film.starring/ns:film.performance.actor ?x0 .\nns:m.05zmwd7 ns:film.film.starring/ns:film.performance.actor ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M1 .\n?x0 a M0 .\nM2 P1 ?x0 .\nM3 P1 ?x0\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 23
  },
  {
    "questionIdx": 28518,
    "questionWithBrackets": "Did a Mexican sibling of [Dario Yazbek Bernal] executive produce [Just Walking]",
    "questionPatternModEntities": "Did a Mexican sibling of M0 executive produce M1",
    "questionTemplate": "Did a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] [VP_SIMPLE] [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.producer.films_executive_produced ns:m.05mwmpg .\n?x0 ns:people.person.nationality ns:m.0b90_r .\n?x0 ns:people.person.sibling_s/ns:people.sibling_relationship.sibling|ns:fictional_universe.fictional_character.siblings/ns:fictional_universe.sibling_relationship_of_fictional_characters.siblings ns:m.0gc2jzk .\nFILTER ( ?x0 != ns:m.0gc2jzk )\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P2 M2 .\nFILTER ( ?x0 != M0 )\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 23
  },
  {
    "questionIdx": 81591,
    "questionWithBrackets": "Was [The Man Who Came from Ummo] written by a Spanish actor of [Kufard]",
    "questionPatternModEntities": "Was M2 written by a Spanish actor of M1",
    "questionTemplate": "Was [entity] [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.actor.film/ns:film.performance.character ns:m.0n4tsnj .\n?x0 ns:people.person.nationality ns:m.06mkj .\nns:m.0kv35g ns:film.film.written_by ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nM2 P2 ?x0\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 23
  },
  {
    "questionIdx": 147484,
    "questionWithBrackets": "What did [The Trials of Darksmoke]'s writer, costume designer, and star direct",
    "questionPatternModEntities": "What did M0 's writer , costume designer , and star direct",
    "questionTemplate": "What did [entity] 's [ROLE_SIMPLE] , [ROLE_SIMPLE] , and [ROLE_SIMPLE] [VP_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.film.directed_by ?x1 .\n?x1 ns:film.actor.film/ns:film.performance.film ns:m.0pb84n3 .\n?x1 ns:film.film_costumer_designer.costume_design_for_film ns:m.0pb84n3 .\n?x1 ns:film.writer.film ns:m.0pb84n3\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x1 P1 M0 .\n?x1 P2 M0 .\n?x1 P3 M0\n}",
    "expectedResponse": "The Fountain of Life; The Trials of Darksmoke",
    "recursionDepth": 23
  },
  {
    "questionIdx": 218417,
    "questionWithBrackets": "Who influenced [Joe Dallet]'s spouse's German spouse",
    "questionPatternModEntities": "Who influenced M2 's spouse 's German spouse",
    "questionTemplate": "Who [VP_SIMPLE] [entity] 's [ROLE_SIMPLE] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:people.person .\n?x0 ns:influence.influence_node.influenced ?x1 .\n?x1 ns:people.person.nationality ns:m.0345h .\n?x1 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ?x2 .\n?x2 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ns:m.0k10wpl .\nFILTER ( ?x1 != ?x2 ) .\nFILTER ( ?x2 != ns:m.0k10wpl )\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 a M0 .\n?x1 P1 M1 .\n?x1 P2 ?x2 .\n?x2 P2 M2 .\nFILTER ( ?x1 != ?x2 ) .\nFILTER ( ?x2 != M2 )\n}",
    "expectedResponse": "Riazuddin",
    "recursionDepth": 23
  },
  {
    "questionIdx": 206184,
    "questionWithBrackets": "Which male Chinese film director did [Kung Fu Chefs] star",
    "questionPatternModEntities": "Which male Chinese film director did M2 star",
    "questionTemplate": "Which [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [NP_SIMPLE] did [entity] [VP_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:film.director .\n?x0 ns:film.actor.film/ns:film.performance.film ns:m.0b6dgxl .\n?x0 ns:people.person.gender ns:m.05zppz .\n?x0 ns:people.person.nationality ns:m.0d05w3\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M1 .\n?x0 P1 M2 .\n?x0 P2 M3 .\n?x0 a M0\n}",
    "expectedResponse": "Ku Feng; Lam Chi-chung",
    "recursionDepth": 23
  },
  {
    "questionIdx": 17462,
    "questionWithBrackets": "Did [Rahavalta!]'s American cinematographer marry a costume designer",
    "questionPatternModEntities": "Did M1 's American cinematographer marry a costume designer",
    "questionTemplate": "Did [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] [VP_SIMPLE] a [NP_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.cinematographer.film ns:m.0kfb18c .\n?x0 ns:people.person.nationality ns:m.09c7w0 .\n?x0 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ?x1 .\n?x1 a ns:film.film_costumer_designer .\nFILTER ( ?x0 != ?x1 )\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P2 ?x1 .\n?x1 a M2 .\nFILTER ( ?x0 != ?x1 )\n}",
    "expectedResponse": "No",
    "recursionDepth": 23
  },
  {
    "questionIdx": 159998,
    "questionWithBrackets": "What male Japanese film producer wrote [Shito no densetsu]",
    "questionPatternModEntities": "What male Japanese film producer wrote M1",
    "questionTemplate": "What [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [NP_SIMPLE] [VP_SIMPLE] [entity]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:film.producer .\n?x0 ns:film.writer.film ns:g.1q54w5y9_ .\n?x0 ns:people.person.gender ns:m.05zppz .\n?x0 ns:people.person.nationality ns:m.03_3d\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M1 .\n?x0 P1 M2 .\n?x0 P2 M3 .\n?x0 a M0\n}",
    "expectedResponse": "Keisuke Kinoshita",
    "recursionDepth": 23
  },
  {
    "questionIdx": 53275,
    "questionWithBrackets": "Was [Du Haut Du Placard] edited by and written by a screenwriter",
    "questionPatternModEntities": "Was M1 edited by and written by a screenwriter",
    "questionTemplate": "Was [entity] [VP_SIMPLE] by and [VP_SIMPLE] by a [NP_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 a ns:film.writer .\nns:m.0hpfdfq ns:film.film.edited_by ?x0 .\nns:m.0hpfdfq ns:film.film.written_by ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 a M0 .\nM1 P0 ?x0 .\nM1 P1 ?x0\n}",
    "expectedResponse": "No",
    "recursionDepth": 23
  },
  {
    "questionIdx": 94787,
    "questionWithBrackets": "Was a costume designer's sibling's female spouse [Nicole Bettencourt Coelho]",
    "questionPatternModEntities": "Was a costume designer 's sibling 's female spouse M1",
    "questionTemplate": "Was a [NP_SIMPLE] 's [ROLE_SIMPLE] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:people.person.sibling_s/ns:people.sibling_relationship.sibling|ns:fictional_universe.fictional_character.siblings/ns:fictional_universe.sibling_relationship_of_fictional_characters.siblings ?x1 .\n?x1 a ns:film.film_costumer_designer .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ns:m.0yhlcps != ?x0 ) .\nns:m.0yhlcps ns:people.person.gender ns:m.02zsn .\nns:m.0yhlcps ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x1 a M0 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( M1 != ?x0 ) .\nM1 P1 M2 .\nM1 P2 ?x0\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 23
  },
  {
    "questionIdx": 31236,
    "questionWithBrackets": "Did a costume designer influence [Avakai Biryani]'s producer and cinematographer",
    "questionPatternModEntities": "Did a costume designer influence M1 's producer and cinematographer",
    "questionTemplate": "Did a [NP_SIMPLE] [VP_SIMPLE] [entity] 's [ROLE_SIMPLE] and [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 a ns:film.film_costumer_designer .\n?x0 ns:influence.influence_node.influenced ?x1 .\n?x1 ns:film.cinematographer.film ns:m.080mkf2 .\n?x1 ns:film.producer.film|ns:film.production_company.films ns:m.080mkf2\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x0 a M0 .\n?x1 P1 M1 .\n?x1 P2 M1\n}",
    "expectedResponse": "No",
    "recursionDepth": 23
  },
  {
    "questionIdx": 101035,
    "questionWithBrackets": "Was a film's producer's child employed by [Sanjay Leela Bhansali]",
    "questionPatternModEntities": "Was a film 's producer 's child employed by M0",
    "questionTemplate": "Was a [NP_SIMPLE] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE] [VP_SIMPLE] by [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:people.person.employment_history/ns:business.employment_tenure.company ns:m.05xdjl .\n?x0 ns:people.person.parents|ns:fictional_universe.fictional_character.parents|ns:organization.organization.parent/ns:organization.organization_relationship.parent ?x1 .\n?x1 ns:film.producer.film|ns:film.production_company.films ?x2 .\n?x2 a ns:film.film\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 ?x1 .\n?x1 P2 ?x2 .\n?x2 a M1\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 23
  },
  {
    "questionIdx": 142697,
    "questionWithBrackets": "What did [Clay Pigeon]'s cinematographer, director, and star write",
    "questionPatternModEntities": "What did M0 's cinematographer , director , and star write",
    "questionTemplate": "What did [entity] 's [ROLE_SIMPLE] , [ROLE_SIMPLE] , and [ROLE_SIMPLE] [VP_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.film.written_by ?x1 .\n?x1 ns:film.actor.film/ns:film.performance.film ns:m.0gj4xgx .\n?x1 ns:film.cinematographer.film ns:m.0gj4xgx .\n?x1 ns:film.director.film ns:m.0gj4xgx\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x1 P1 M0 .\n?x1 P2 M0 .\n?x1 P3 M0\n}",
    "expectedResponse": "Plastic Bags; Clay Pigeon",
    "recursionDepth": 23
  },
  {
    "questionIdx": 123015,
    "questionWithBrackets": "Were [Quantum of Solace] and [Shockproof] distributed by a cinematographer's parent",
    "questionPatternModEntities": "Were M1 and M2 distributed by a cinematographer 's parent",
    "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by a [NP_SIMPLE] 's [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:people.person.children|ns:fictional_universe.fictional_character.children|ns:organization.organization.child/ns:organization.organization_relationship.child ?x1 .\n?x1 a ns:film.cinematographer .\nns:m.027yyjv ns:film.film.distributors/ns:film.film_film_distributor_relationship.distributor ?x0 .\nns:m.08gsvw ns:film.film.distributors/ns:film.film_film_distributor_relationship.distributor ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x1 a M0 .\nM1 P1 ?x0 .\nM2 P1 ?x0\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 23
  },
  {
    "questionIdx": 56323,
    "questionWithBrackets": "Was [Gary Stanfield] a film director's actor's male parent",
    "questionPatternModEntities": "Was M1 a film director 's actor 's male parent",
    "questionTemplate": "Was [entity] a [NP_SIMPLE] 's [ROLE_SIMPLE] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.actor.film/ns:film.performance.character ?x1 .\n?x1 a ns:film.director .\nns:m.0z40vx_ ns:people.person.children|ns:fictional_universe.fictional_character.children|ns:organization.organization.child/ns:organization.organization_relationship.child ?x0 .\nns:m.0z40vx_ ns:people.person.gender ns:m.05zppz\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x1 a M0 .\nM1 P1 M2 .\nM1 P2 ?x0\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 23
  },
  {
    "questionIdx": 95436,
    "questionWithBrackets": "Was a female American sibling of [Jimmy McNichol] [Kristy McNichol]",
    "questionPatternModEntities": "Was a female American sibling of M1 M0",
    "questionTemplate": "Was a [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] [entity]",
    "sparql": "SELECT count(*) WHERE {\nFILTER ( ns:m.02_wgp != ns:m.0gygrn ) .\nns:m.02_wgp ns:people.person.gender ns:m.02zsn .\nns:m.02_wgp ns:people.person.nationality ns:m.09c7w0 .\nns:m.02_wgp ns:people.person.sibling_s/ns:people.sibling_relationship.sibling|ns:fictional_universe.fictional_character.siblings/ns:fictional_universe.sibling_relationship_of_fictional_characters.siblings ns:m.0gygrn\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\nFILTER ( M0 != M1 ) .\nM0 P0 M1 .\nM0 P1 M2 .\nM0 P2 M3\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 23
  },
  {
    "questionIdx": 116218,
    "questionWithBrackets": "Were [Eddie Izzard] and [Jerry Seinfeld] influenced by [Jesus - The Christ ]'s parent's actor",
    "questionPatternModEntities": "Were M1 and M2 influenced by M0 's parent 's actor",
    "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.actor.film/ns:film.performance.character ?x1 .\n?x1 ns:people.person.children|ns:fictional_universe.fictional_character.children|ns:organization.organization.child/ns:organization.organization_relationship.child ns:m.042g53r .\nns:m.0126rp ns:influence.influence_node.influenced_by ?x0 .\nns:m.0q5hw ns:influence.influence_node.influenced_by ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x1 P1 M0 .\nM1 P2 ?x0 .\nM2 P2 ?x0\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 24
  },
  {
    "questionIdx": 14664,
    "questionWithBrackets": "Did [Meshes of the Afternoon]'s writer influence [Water for Maya]'s editor and cinematographer",
    "questionPatternModEntities": "Did M0 's writer influence M1 's editor and cinematographer",
    "questionTemplate": "Did [entity] 's [ROLE_SIMPLE] [VP_SIMPLE] [entity] 's [ROLE_SIMPLE] and [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.writer.film ns:m.0jy_t .\n?x0 ns:influence.influence_node.influenced ?x1 .\n?x1 ns:film.cinematographer.film ns:m.0_lvrp8 .\n?x1 ns:film.editor.film ns:m.0_lvrp8\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 ?x1 .\n?x1 P2 M1 .\n?x1 P3 M1\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 24
  },
  {
    "questionIdx": 157431,
    "questionWithBrackets": "What film producer did a male employee of [The Walt Disney Company] found",
    "questionPatternModEntities": "What film producer did a male employee of M1 found",
    "questionTemplate": "What [NP_SIMPLE] did a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] [VP_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:film.producer .\n?x0 ns:organization.organization.founders ?x1 .\n?x1 ns:people.person.employment_history/ns:business.employment_tenure.company ns:m.09b3v .\n?x1 ns:people.person.gender ns:m.05zppz\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 a M0 .\n?x1 P1 M1 .\n?x1 P2 M2\n}",
    "expectedResponse": "Walt Disney Animation Studios",
    "recursionDepth": 24
  },
  {
    "questionIdx": 22668,
    "questionWithBrackets": "Did [The Return of Casanova]'s executive producer's French spouse marry [Pierre Barret]",
    "questionPatternModEntities": "Did M2 's executive producer 's French spouse marry M1",
    "questionTemplate": "Did [entity] 's [ROLE_SIMPLE] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] [VP_SIMPLE] [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:people.person.nationality ns:m.0f8l9c .\n?x0 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ?x1 .\n?x0 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ns:m.0hhpx_4 .\n?x1 ns:film.producer.films_executive_produced ns:m.07kdsz2 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x0 != ns:m.0hhpx_4 )\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 ?x1 .\n?x0 P1 M1 .\n?x1 P2 M2 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x0 != M1 )\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 24
  },
  {
    "questionIdx": 217696,
    "questionWithBrackets": "Who founded [Walt Disney Animation Studios] and founded a production company",
    "questionPatternModEntities": "Who founded M1 and founded a production company",
    "questionTemplate": "Who [VP_SIMPLE] [entity] and [VP_SIMPLE] a [NP_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:people.person .\n?x0 ns:organization.organization_founder.organizations_founded ?x1 .\n?x0 ns:organization.organization_founder.organizations_founded ns:m.04rcl7 .\n?x1 a ns:film.production_company\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P0 M1 .\n?x0 a M0 .\n?x1 a M2\n}",
    "expectedResponse": "Roy O. Disney; Walt Disney",
    "recursionDepth": 24
  },
  {
    "questionIdx": 88855,
    "questionWithBrackets": "Was a Chinese film editor that produced [Shadow Life] [Cao Fei]",
    "questionPatternModEntities": "Was a Chinese film editor that produced M3 M0",
    "questionTemplate": "Was a [ADJECTIVE_SIMPLE] [NP_SIMPLE] that [VP_SIMPLE] [entity] [entity]",
    "sparql": "SELECT count(*) WHERE {\nns:m.0jqzdn3 a ns:film.editor .\nns:m.0jqzdn3 ns:film.producer.film|ns:film.production_company.films ns:m.0jqzdmv .\nns:m.0jqzdn3 ns:people.person.nationality ns:m.0d05w3\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M2 .\nM0 P1 M3 .\nM0 a M1\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 24
  },
  {
    "questionIdx": 173430,
    "questionWithBrackets": "What was edited by [It's Such a Beautiful Day]'s prequel's star and cinematographer",
    "questionPatternModEntities": "What was edited by M0 's prequel 's star and cinematographer",
    "questionTemplate": "What was [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE] and [ROLE_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.film.edited_by ?x1 .\n?x1 ns:film.actor.film/ns:film.performance.film ?x2 .\n?x1 ns:film.cinematographer.film ?x2 .\n?x2 ns:film.film.sequel ns:m.0j8f48q\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x1 P1 ?x2 .\n?x1 P2 ?x2 .\n?x2 P3 M0\n}",
    "expectedResponse": "It's Such a Beautiful Day; Ah, L'Amour",
    "recursionDepth": 24
  },
  {
    "questionIdx": 22793,
    "questionWithBrackets": "Did [The Terrorist]'s art director's male sibling produce [Thambi]",
    "questionPatternModEntities": "Did M2 's art director 's male sibling produce M0",
    "questionTemplate": "Did [entity] 's [ROLE_SIMPLE] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] [VP_SIMPLE] [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.producer.film|ns:film.production_company.films ns:m.0b8kc0 .\n?x0 ns:people.person.gender ns:m.05zppz .\n?x0 ns:people.person.sibling_s/ns:people.sibling_relationship.sibling|ns:fictional_universe.fictional_character.siblings/ns:fictional_universe.sibling_relationship_of_fictional_characters.siblings ?x1 .\n?x1 ns:film.film_art_director.films_art_directed ns:m.07k1k .\nFILTER ( ?x0 != ?x1 )\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x0 P1 M0 .\n?x0 P2 M1 .\n?x1 P3 M2 .\nFILTER ( ?x0 != ?x1 )\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 24
  },
  {
    "questionIdx": 74204,
    "questionWithBrackets": "Was [Ridge Forrester] [Adriana Cramer]'s spouse's sibling, child, and spouse",
    "questionPatternModEntities": "Was M1 M0 's spouse 's sibling , child , and spouse",
    "questionTemplate": "Was [entity] [entity] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE] , [ROLE_SIMPLE] , and [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ns:m.0277_gn .\nFILTER ( ?x0 != ns:m.0277_gn ) .\nFILTER ( ns:m.0g53gd7 != ?x0 ) .\nFILTER ( ns:m.0g53gd7 != ?x0 ) .\nns:m.0g53gd7 ns:people.person.parents|ns:fictional_universe.fictional_character.parents|ns:organization.organization.parent/ns:organization.organization_relationship.parent ?x0 .\nns:m.0g53gd7 ns:people.person.sibling_s/ns:people.sibling_relationship.sibling|ns:fictional_universe.fictional_character.siblings/ns:fictional_universe.sibling_relationship_of_fictional_characters.siblings ?x0 .\nns:m.0g53gd7 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( M1 != ?x0 ) .\nFILTER ( M1 != ?x0 ) .\nM1 P0 ?x0 .\nM1 P1 ?x0 .\nM1 P2 ?x0\n}",
    "expectedResponse": "No",
    "recursionDepth": 24
  },
  {
    "questionIdx": 131275,
    "questionWithBrackets": "What British screenwriter married an actor of [Miss Kenton]",
    "questionPatternModEntities": "What British screenwriter married a actor of M2",
    "questionTemplate": "What [ADJECTIVE_SIMPLE] [NP_SIMPLE] [VP_SIMPLE] a [ROLE_SIMPLE] of [entity]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:film.writer .\n?x0 ns:people.person.nationality ns:m.07ssc .\n?x0 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ?x1 .\n?x1 ns:film.actor.film/ns:film.performance.character ns:m.02nwq8l .\nFILTER ( ?x0 != ?x1 )\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M1 .\n?x0 P1 ?x1 .\n?x0 a M0 .\n?x1 P2 M2 .\nFILTER ( ?x0 != ?x1 )\n}",
    "expectedResponse": "Kenneth Branagh",
    "recursionDepth": 24
  },
  {
    "questionIdx": 144925,
    "questionWithBrackets": "What did [Lorne Morris] edit and a film producer direct",
    "questionPatternModEntities": "What did M0 edit and a film producer direct",
    "questionTemplate": "What did [entity] [VP_SIMPLE] and a [NP_SIMPLE] [VP_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.film.directed_by ?x1 .\n?x0 ns:film.film.edited_by ns:m.0n9fmp7 .\n?x1 a ns:film.producer\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 ?x1 .\n?x1 a M1\n}",
    "expectedResponse": "Burial of the Rats",
    "recursionDepth": 24
  },
  {
    "questionIdx": 172861,
    "questionWithBrackets": "What was edited and directed by a spouse of [Anna Sten]",
    "questionPatternModEntities": "What was edited and directed by a spouse of M0",
    "questionTemplate": "What was [VP_SIMPLE] and [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.film.directed_by ?x1 .\n?x0 ns:film.film.edited_by ?x1 .\n?x1 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ns:m.027h5l1 .\nFILTER ( ?x1 != ns:m.027h5l1 )\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x1 P2 M0 .\nFILTER ( ?x1 != M0 )\n}",
    "expectedResponse": "Der M\u00f6rder Dimitri Karamasoff",
    "recursionDepth": 24
  },
  {
    "questionIdx": 32058,
    "questionWithBrackets": "Did a female Canadian costume designer write [Soif]",
    "questionPatternModEntities": "Did a female Canadian costume designer write M1",
    "questionTemplate": "Did a [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [NP_SIMPLE] [VP_SIMPLE] [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 a ns:film.film_costumer_designer .\n?x0 ns:film.writer.film ns:m.010r196b .\n?x0 ns:people.person.gender ns:m.02zsn .\n?x0 ns:people.person.nationality ns:m.0d060g\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M1 .\n?x0 P1 M2 .\n?x0 P2 M3 .\n?x0 a M0\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 24
  },
  {
    "questionIdx": 237427,
    "questionWithBrackets": "Who was influenced by [Tetsuo: The Bullet Man]'s star, editor, and cinematographer",
    "questionPatternModEntities": "Who was influenced by M1 's star , editor , and cinematographer",
    "questionTemplate": "Who was [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] , [ROLE_SIMPLE] , and [ROLE_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:people.person .\n?x0 ns:influence.influence_node.influenced_by ?x1 .\n?x1 ns:film.actor.film/ns:film.performance.film ns:m.06zq889 .\n?x1 ns:film.cinematographer.film ns:m.06zq889 .\n?x1 ns:film.editor.film ns:m.06zq889\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 a M0 .\n?x1 P1 M1 .\n?x1 P2 M1 .\n?x1 P3 M1\n}",
    "expectedResponse": "Darren Aronofsky",
    "recursionDepth": 24
  },
  {
    "questionIdx": 203742,
    "questionWithBrackets": "Which film producer employed a male producer of [I Hate Luv Storys]",
    "questionPatternModEntities": "Which film producer employed a male producer of M1",
    "questionTemplate": "Which [NP_SIMPLE] [VP_SIMPLE] a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:film.producer .\n?x0 ns:business.employer.employees/ns:business.employment_tenure.person ?x1 .\n?x1 ns:film.producer.film|ns:film.production_company.films ns:m.076whzw .\n?x1 ns:people.person.gender ns:m.05zppz\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 a M0 .\n?x1 P1 M1 .\n?x1 P2 M2\n}",
    "expectedResponse": "Dharma Productions",
    "recursionDepth": 24
  },
  {
    "questionIdx": 30482,
    "questionWithBrackets": "Did a cinematographer's female parent executive produce [Mean Creek]",
    "questionPatternModEntities": "Did a cinematographer 's female parent executive produce M0",
    "questionTemplate": "Did a [NP_SIMPLE] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] [VP_SIMPLE] [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.producer.films_executive_produced ns:m.048lh4 .\n?x0 ns:people.person.children|ns:fictional_universe.fictional_character.children|ns:organization.organization.child/ns:organization.organization_relationship.child ?x1 .\n?x0 ns:people.person.gender ns:m.02zsn .\n?x1 a ns:film.cinematographer\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P2 ?x1 .\n?x1 a M2\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 24
  },
  {
    "questionIdx": 7391,
    "questionWithBrackets": "Did [Fidelity Investments]'s child employ [The Maldonado Miracle]'s Mexican director",
    "questionPatternModEntities": "Did M0 's child employ M2 's Mexican director",
    "questionTemplate": "Did [entity] 's [ROLE_SIMPLE] [VP_SIMPLE] [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:business.employer.employees/ns:business.employment_tenure.person ?x1 .\n?x0 ns:people.person.parents|ns:fictional_universe.fictional_character.parents|ns:organization.organization.parent/ns:organization.organization_relationship.parent ns:m.028q26 .\n?x1 ns:film.director.film ns:m.04j2bpw .\n?x1 ns:people.person.nationality ns:m.0b90_r\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 ?x1 .\n?x1 P2 M1 .\n?x1 P3 M2\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 24
  },
  {
    "questionIdx": 220562,
    "questionWithBrackets": "Who married [Looking for Eric]'s Spanish French executive producer",
    "questionPatternModEntities": "Who married M1 's Spanish French executive producer",
    "questionTemplate": "Who [VP_SIMPLE] [entity] 's [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:people.person .\n?x0 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ?x1 .\n?x1 ns:film.producer.films_executive_produced ns:m.05f8jnc .\n?x1 ns:people.person.nationality ns:m.06mkj .\n?x1 ns:people.person.nationality ns:m.0f8l9c .\nFILTER ( ?x0 != ?x1 )\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 a M0 .\n?x1 P1 M1 .\n?x1 P2 M2 .\n?x1 P2 M3 .\nFILTER ( ?x0 != ?x1 )\n}",
    "expectedResponse": "Rachida Brakni; Isabelle Ferrer",
    "recursionDepth": 24
  },
  {
    "questionIdx": 143091,
    "questionWithBrackets": "What did [Edmond Was a Donkey]'s editor, cinematographer, and art director executive produce",
    "questionPatternModEntities": "What did M0 's editor , cinematographer , and art director executive produce",
    "questionTemplate": "What did [entity] 's [ROLE_SIMPLE] , [ROLE_SIMPLE] , and [ROLE_SIMPLE] [VP_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.film.executive_produced_by ?x1 .\n?x1 ns:film.cinematographer.film ns:m.0k3d95c .\n?x1 ns:film.editor.film ns:m.0k3d95c .\n?x1 ns:film.film_art_director.films_art_directed ns:m.0k3d95c\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x1 P1 M0 .\n?x1 P2 M0 .\n?x1 P3 M0\n}",
    "expectedResponse": "Mister Cok",
    "recursionDepth": 24
  },
  {
    "questionIdx": 44074,
    "questionWithBrackets": "Was [Abashiri Bangaichi] distributed by a Japanese film producer's employer",
    "questionPatternModEntities": "Was M2 distributed by a Japanese film producer 's employer",
    "questionTemplate": "Was [entity] [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [NP_SIMPLE] 's [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:business.employer.employees/ns:business.employment_tenure.person ?x1 .\n?x1 a ns:film.producer .\n?x1 ns:people.person.nationality ns:m.03_3d .\nns:m.076vzd8 ns:film.film.distributors/ns:film.film_film_distributor_relationship.distributor ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x1 P1 M1 .\n?x1 a M0 .\nM2 P2 ?x0\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 24
  },
  {
    "questionIdx": 14790,
    "questionWithBrackets": "Did [Micki Dickoff] and [Tony Pagano] executive produce and edit [Neshoba]",
    "questionPatternModEntities": "Did M0 and M2 executive produce and edit M1",
    "questionTemplate": "Did [entity] and [entity] [VP_SIMPLE] and [VP_SIMPLE] [entity]",
    "sparql": "SELECT count(*) WHERE {\nns:m.03d5c9p ns:film.editor.film ns:m.05fbhht .\nns:m.03d5c9p ns:film.producer.films_executive_produced ns:m.05fbhht .\nns:m.0j8jvhn ns:film.editor.film ns:m.05fbhht .\nns:m.0j8jvhn ns:film.producer.films_executive_produced ns:m.05fbhht\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1 .\nM2 P0 M1 .\nM2 P1 M1\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 24
  },
  {
    "questionIdx": 56370,
    "questionWithBrackets": "Was [Gen Fukunaga] a film distributor's Japanese American founder",
    "questionPatternModEntities": "Was M1 a film distributor 's Japanese American founder",
    "questionTemplate": "Was [entity] a [NP_SIMPLE] 's [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 a ns:film.film_distributor .\nns:m.04cm16 ns:organization.organization_founder.organizations_founded ?x0 .\nns:m.04cm16 ns:people.person.nationality ns:m.03_3d .\nns:m.04cm16 ns:people.person.nationality ns:m.09c7w0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 a M0 .\nM1 P0 ?x0 .\nM1 P1 M2 .\nM1 P1 M3\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 24
  },
  {
    "questionIdx": 225534,
    "questionWithBrackets": "Who was a Canadian film editor that produced [30-love]",
    "questionPatternModEntities": "Who was a Canadian film editor that produced M3",
    "questionTemplate": "Who was a [ADJECTIVE_SIMPLE] [NP_SIMPLE] that [VP_SIMPLE] [entity]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:film.editor .\n?x0 a ns:people.person .\n?x0 ns:film.producer.film|ns:film.production_company.films ns:m.010bwhv7 .\n?x0 ns:people.person.nationality ns:m.0d060g\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M2 .\n?x0 P1 M3 .\n?x0 a M0 .\n?x0 a M1\n}",
    "expectedResponse": "Richard E. Stark",
    "recursionDepth": 24
  },
  {
    "questionIdx": 100203,
    "questionWithBrackets": "Was a film's Dutch French writer [Jan Kounen]",
    "questionPatternModEntities": "Was a film 's Dutch French writer M1",
    "questionTemplate": "Was a [NP_SIMPLE] 's [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 a ns:film.film .\nns:m.079zjt ns:film.writer.film ?x0 .\nns:m.079zjt ns:people.person.nationality ns:m.059j2 .\nns:m.079zjt ns:people.person.nationality ns:m.0f8l9c\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 a M0 .\nM1 P0 ?x0 .\nM1 P1 M2 .\nM1 P1 M3\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 24
  },
  {
    "questionIdx": 90594,
    "questionWithBrackets": "Was a Mexican film director that [Robert Downey, Sr.] influenced [Louis C.K.]",
    "questionPatternModEntities": "Was a Mexican film director that M2 influenced M0",
    "questionTemplate": "Was a [ADJECTIVE_SIMPLE] [NP_SIMPLE] that [entity] [VP_SIMPLE] [entity]",
    "sparql": "SELECT count(*) WHERE {\nns:m.049fgvm a ns:film.director .\nns:m.049fgvm ns:influence.influence_node.influenced_by ns:m.01_p15 .\nns:m.049fgvm ns:people.person.nationality ns:m.0b90_r\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M2 .\nM0 P1 M3 .\nM0 a M1\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 24
  },
  {
    "questionIdx": 90492,
    "questionWithBrackets": "Was a Mexican actor's spouse and child [Roc\u00edo Dur\u00e1n]",
    "questionPatternModEntities": "Was a Mexican actor 's spouse and child M2",
    "questionTemplate": "Was a [ADJECTIVE_SIMPLE] [NP_SIMPLE] 's [ROLE_SIMPLE] and [ROLE_SIMPLE] [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 a ns:film.actor .\n?x0 ns:people.person.nationality ns:m.0b90_r .\nFILTER ( ns:m.0kb_31y != ?x0 ) .\nns:m.0kb_31y ns:people.person.parents|ns:fictional_universe.fictional_character.parents|ns:organization.organization.parent/ns:organization.organization_relationship.parent ?x0 .\nns:m.0kb_31y ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M1 .\n?x0 a M0 .\nFILTER ( M2 != ?x0 ) .\nM2 P1 ?x0 .\nM2 P2 ?x0\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 24
  },
  {
    "questionIdx": 142699,
    "questionWithBrackets": "What did [Clifton Ko] produce, edit, and write",
    "questionPatternModEntities": "What did M0 produce , edit , and write",
    "questionTemplate": "What did [entity] [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.film.edited_by ns:m.0270vhl .\n?x0 ns:film.film.produced_by|ns:film.film.production_companies ns:m.0270vhl .\n?x0 ns:film.film.written_by ns:m.0270vhl\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M0 .\n?x0 P2 M0\n}",
    "expectedResponse": "Happy Ghost V",
    "recursionDepth": 24
  },
  {
    "questionIdx": 226530,
    "questionWithBrackets": "Who was a French character that produced [The Kingdom of the Fairies]",
    "questionPatternModEntities": "Who was a French character that produced M3",
    "questionTemplate": "Who was a [ADJECTIVE_SIMPLE] [NP_SIMPLE] that [VP_SIMPLE] [entity]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:fictional_universe.fictional_character .\n?x0 a ns:people.person .\n?x0 ns:film.producer.film|ns:film.production_company.films ns:m.04f3q28 .\n?x0 ns:people.person.nationality ns:m.0f8l9c\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M2 .\n?x0 P1 M3 .\n?x0 a M0 .\n?x0 a M1\n}",
    "expectedResponse": "Georges M\u00e9li\u00e8s",
    "recursionDepth": 24
  },
  {
    "questionIdx": 50671,
    "questionWithBrackets": "Was [Club Alpbach Croatia] founded by a screenwriter's child and parent",
    "questionPatternModEntities": "Was M1 founded by a screenwriter 's child and parent",
    "questionTemplate": "Was [entity] [VP_SIMPLE] by a [NP_SIMPLE] 's [ROLE_SIMPLE] and [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:people.person.children|ns:fictional_universe.fictional_character.children|ns:organization.organization.child/ns:organization.organization_relationship.child ?x1 .\n?x0 ns:people.person.parents|ns:fictional_universe.fictional_character.parents|ns:organization.organization.parent/ns:organization.organization_relationship.parent ?x1 .\n?x1 a ns:film.writer .\nns:m.0r3v1_y ns:organization.organization.founders ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x1 a M0 .\nM1 P2 ?x0\n}",
    "expectedResponse": "No",
    "recursionDepth": 24
  },
  {
    "questionIdx": 41298,
    "questionWithBrackets": "Did an actor marry an executive producer of [The Brave Little Toaster] and [Knocking On Death's Door]",
    "questionPatternModEntities": "Did a actor marry a executive producer of M1 and M2",
    "questionTemplate": "Did a [NP_SIMPLE] [VP_SIMPLE] a [ROLE_SIMPLE] of [entity] and [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 a ns:film.actor .\n?x0 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ?x1 .\n?x1 ns:film.producer.films_executive_produced ns:m.04j3579 .\n?x1 ns:film.producer.films_executive_produced ns:m.052g0w .\nFILTER ( ?x0 != ?x1 )\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x0 a M0 .\n?x1 P1 M1 .\n?x1 P1 M2 .\nFILTER ( ?x0 != ?x1 )\n}",
    "expectedResponse": "No",
    "recursionDepth": 24
  },
  {
    "questionIdx": 192813,
    "questionWithBrackets": "Which actor married and influenced a film editor",
    "questionPatternModEntities": "Which actor married and influenced a film editor",
    "questionTemplate": "Which [NP_SIMPLE] [VP_SIMPLE] and [VP_SIMPLE] a [NP_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:film.actor .\n?x0 ns:influence.influence_node.influenced ?x1 .\n?x0 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ?x1 .\n?x1 a ns:film.editor .\nFILTER ( ?x0 != ?x1 )\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 a M0 .\n?x1 a M1 .\nFILTER ( ?x0 != ?x1 )\n}",
    "expectedResponse": "Jacques Demy",
    "recursionDepth": 24
  },
  {
    "questionIdx": 218588,
    "questionWithBrackets": "Who influenced [Michael Douglas] and influenced a film producer",
    "questionPatternModEntities": "Who influenced M1 and influenced a film producer",
    "questionTemplate": "Who [VP_SIMPLE] [entity] and [VP_SIMPLE] a [NP_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:people.person .\n?x0 ns:influence.influence_node.influenced ?x1 .\n?x0 ns:influence.influence_node.influenced ns:m.0kjgl .\n?x1 a ns:film.producer\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P0 M1 .\n?x0 a M0 .\n?x1 a M2\n}",
    "expectedResponse": "Redd Foxx",
    "recursionDepth": 24
  },
  {
    "questionIdx": 137336,
    "questionWithBrackets": "What art director influenced an employee and founder of [DreamWorks Studios]",
    "questionPatternModEntities": "What art director influenced a employee and founder of M1",
    "questionTemplate": "What [NP_SIMPLE] [VP_SIMPLE] a [ROLE_SIMPLE] and [ROLE_SIMPLE] of [entity]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:film.film_art_director .\n?x0 ns:influence.influence_node.influenced ?x1 .\n?x1 ns:organization.organization_founder.organizations_founded ns:m.01gb54 .\n?x1 ns:people.person.employment_history/ns:business.employment_tenure.company ns:m.01gb54\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 a M0 .\n?x1 P1 M1 .\n?x1 P2 M1\n}",
    "expectedResponse": "Alfred Hitchcock",
    "recursionDepth": 24
  },
  {
    "questionIdx": 233406,
    "questionWithBrackets": "Who was an Italian film director that married [Maria Teresa Bellucci]",
    "questionPatternModEntities": "Who was a Italian film director that married M3",
    "questionTemplate": "Who was a [ADJECTIVE_SIMPLE] [NP_SIMPLE] that [VP_SIMPLE] [entity]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:film.director .\n?x0 a ns:people.person .\n?x0 ns:people.person.nationality ns:m.03rjj .\n?x0 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ns:m.0z9z85j .\nFILTER ( ?x0 != ns:m.0z9z85j )\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M2 .\n?x0 P1 M3 .\n?x0 a M0 .\n?x0 a M1 .\nFILTER ( ?x0 != M3 )\n}",
    "expectedResponse": "Marco Spagnoli",
    "recursionDepth": 24
  },
  {
    "questionIdx": 195960,
    "questionWithBrackets": "Which cinematographer influenced and married a screenwriter",
    "questionPatternModEntities": "Which cinematographer influenced and married a screenwriter",
    "questionTemplate": "Which [NP_SIMPLE] [VP_SIMPLE] and [VP_SIMPLE] a [NP_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:film.cinematographer .\n?x0 ns:influence.influence_node.influenced ?x1 .\n?x0 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ?x1 .\n?x1 a ns:film.writer .\nFILTER ( ?x0 != ?x1 )\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 a M0 .\n?x1 a M1 .\nFILTER ( ?x0 != ?x1 )\n}",
    "expectedResponse": "Agn\u00e8s Varda",
    "recursionDepth": 24
  },
  {
    "questionIdx": 228511,
    "questionWithBrackets": "Who was a Swedish cinematographer that [Claudia Galli] married",
    "questionPatternModEntities": "Who was a Swedish cinematographer that M3 married",
    "questionTemplate": "Who was a [ADJECTIVE_SIMPLE] [NP_SIMPLE] that [entity] [VP_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:film.cinematographer .\n?x0 a ns:people.person .\n?x0 ns:people.person.nationality ns:m.0d0vqn .\n?x0 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ns:m.0sgrydn .\nFILTER ( ?x0 != ns:m.0sgrydn )\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M2 .\n?x0 P1 M3 .\n?x0 a M0 .\n?x0 a M1 .\nFILTER ( ?x0 != M3 )\n}",
    "expectedResponse": "Manuel Concha",
    "recursionDepth": 24
  },
  {
    "questionIdx": 226221,
    "questionWithBrackets": "Who was a Dutch film director that [The Last Days of Emma Blank] starred",
    "questionPatternModEntities": "Who was a Dutch film director that M3 starred",
    "questionTemplate": "Who was a [ADJECTIVE_SIMPLE] [NP_SIMPLE] that [entity] [VP_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:film.director .\n?x0 a ns:people.person .\n?x0 ns:film.actor.film/ns:film.performance.film ns:m.07l4_ds .\n?x0 ns:people.person.nationality ns:m.059j2\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M2 .\n?x0 P1 M3 .\n?x0 a M0 .\n?x0 a M1\n}",
    "expectedResponse": "Alex van Warmerdam",
    "recursionDepth": 24
  },
  {
    "questionIdx": 29111,
    "questionWithBrackets": "Did a Swedish film editor executive produce [Beck \u2013 Det tysta skriket] and [Snapphanar]",
    "questionPatternModEntities": "Did a Swedish film editor executive produce M1 and M2",
    "questionTemplate": "Did a [ADJECTIVE_SIMPLE] [NP_SIMPLE] [VP_SIMPLE] [entity] and [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 a ns:film.editor .\n?x0 ns:film.producer.films_executive_produced ns:m.0279mfg .\n?x0 ns:film.producer.films_executive_produced ns:m.06zsbsb .\n?x0 ns:people.person.nationality ns:m.0d0vqn\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P1 M3 .\n?x0 a M0\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 24
  },
  {
    "questionIdx": 86664,
    "questionWithBrackets": "Was [Whip It] directed by a film producer's female founder",
    "questionPatternModEntities": "Was M2 directed by a film producer 's female founder",
    "questionTemplate": "Was [entity] [VP_SIMPLE] by a [NP_SIMPLE] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:organization.organization_founder.organizations_founded ?x1 .\n?x0 ns:people.person.gender ns:m.02zsn .\n?x1 a ns:film.producer .\nns:m.047p798 ns:film.film.directed_by ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x0 P1 M0 .\n?x1 a M1 .\nM2 P2 ?x0\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 24
  },
  {
    "questionIdx": 76556,
    "questionWithBrackets": "Was [Sin Nombre] produced by a production company's child and parent",
    "questionPatternModEntities": "Was M1 produced by a production company 's child and parent",
    "questionTemplate": "Was [entity] [VP_SIMPLE] by a [NP_SIMPLE] 's [ROLE_SIMPLE] and [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:people.person.children|ns:fictional_universe.fictional_character.children|ns:organization.organization.child/ns:organization.organization_relationship.child ?x1 .\n?x0 ns:people.person.parents|ns:fictional_universe.fictional_character.parents|ns:organization.organization.parent/ns:organization.organization_relationship.parent ?x1 .\n?x1 a ns:film.production_company .\nns:m.05q4ky1 ns:film.film.produced_by|ns:film.film.production_companies ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x1 a M0 .\nM1 P2 ?x0\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 24
  },
  {
    "questionIdx": 58894,
    "questionWithBrackets": "Was [How Harry Became a Tree] edited by a French film producer's child",
    "questionPatternModEntities": "Was M2 edited by a French film producer 's child",
    "questionTemplate": "Was [entity] [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [NP_SIMPLE] 's [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:people.person.parents|ns:fictional_universe.fictional_character.parents|ns:organization.organization.parent/ns:organization.organization_relationship.parent ?x1 .\n?x1 a ns:film.producer .\n?x1 ns:people.person.nationality ns:m.0f8l9c .\nns:m.0gkrryz ns:film.film.edited_by ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x1 P1 M1 .\n?x1 a M0 .\nM2 P2 ?x0\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 24
  },
  {
    "questionIdx": 146424,
    "questionWithBrackets": "What did [Sinclair Lewis] write and an art director write",
    "questionPatternModEntities": "What did M0 write and a art director write",
    "questionTemplate": "What did [entity] [VP_SIMPLE] and a [NP_SIMPLE] [VP_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.film.written_by ?x1 .\n?x0 ns:film.film.written_by ns:m.0ddcb .\n?x1 a ns:film.film_art_director\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P0 M0 .\n?x1 a M1\n}",
    "expectedResponse": "Fun and Fancy Free",
    "recursionDepth": 24
  },
  {
    "questionIdx": 229357,
    "questionWithBrackets": "Who was a costume designer whose sibling was influenced by [Johnny Carson]",
    "questionPatternModEntities": "Who was a costume designer whose sibling was influenced by M2",
    "questionTemplate": "Who was a [NP_SIMPLE] whose [ROLE_SIMPLE] was [VP_SIMPLE] by [entity]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:film.film_costumer_designer .\n?x0 a ns:people.person .\n?x0 ns:people.person.sibling_s/ns:people.sibling_relationship.sibling|ns:fictional_universe.fictional_character.siblings/ns:fictional_universe.sibling_relationship_of_fictional_characters.siblings ?x1 .\n?x1 ns:influence.influence_node.influenced_by ns:m.0ph2w .\nFILTER ( ?x0 != ?x1 )\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 a M0 .\n?x0 a M1 .\n?x1 P1 M2 .\nFILTER ( ?x0 != ?x1 )\n}",
    "expectedResponse": "Lynn Hicks",
    "recursionDepth": 24
  },
  {
    "questionIdx": 149577,
    "questionWithBrackets": "What did a female founder of a film producer direct",
    "questionPatternModEntities": "What did a female founder of a film producer direct",
    "questionTemplate": "What did a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of a [NP_SIMPLE] [VP_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.film.directed_by ?x1 .\n?x1 ns:organization.organization_founder.organizations_founded ?x2 .\n?x1 ns:people.person.gender ns:m.02zsn .\n?x2 a ns:film.producer\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x1 P1 ?x2 .\n?x1 P2 M0 .\n?x2 a M1\n}",
    "expectedResponse": "Whip It",
    "recursionDepth": 24
  },
  {
    "questionIdx": 124757,
    "questionWithBrackets": "Were [Sol Dominicana Airlines] and [Haig Fund] founded by a British character",
    "questionPatternModEntities": "Were M2 and M3 founded by a British character",
    "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [NP_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 a ns:fictional_universe.fictional_character .\n?x0 ns:people.person.nationality ns:m.07ssc .\nns:m.02rmzv4 ns:organization.organization.founders ?x0 .\nns:m.04k278 ns:organization.organization.founders ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M1 .\n?x0 a M0 .\nM2 P1 ?x0 .\nM3 P1 ?x0\n}",
    "expectedResponse": "No",
    "recursionDepth": 24
  },
  {
    "questionIdx": 7309,
    "questionWithBrackets": "Did [Fate Fighter] and [Raped by an Angel] star [Golden Chicken]'s Chinese editor",
    "questionPatternModEntities": "Did M2 and M3 star M1 's Chinese editor",
    "questionTemplate": "Did [entity] and [entity] [VP_SIMPLE] [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.editor.film ns:m.0ft56q .\n?x0 ns:people.person.nationality ns:m.0d05w3 .\nns:m.03cp602 ns:film.film.starring/ns:film.performance.actor ?x0 .\nns:m.04j2h31 ns:film.film.starring/ns:film.performance.actor ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nM2 P2 ?x0 .\nM3 P2 ?x0\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 24
  },
  {
    "questionIdx": 117016,
    "questionWithBrackets": "Were [Gala-Salvador Dal\u00ed Foundation] and [Dal\u00ed Theatre and Museum] founded by a Spanish costume designer",
    "questionPatternModEntities": "Were M2 and M3 founded by a Spanish costume designer",
    "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [NP_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 a ns:film.film_costumer_designer .\n?x0 ns:people.person.nationality ns:m.06mkj .\nns:m.04y9w_t ns:organization.organization.founders ?x0 .\nns:m.0pzb8 ns:organization.organization.founders ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M1 .\n?x0 a M0 .\nM2 P1 ?x0 .\nM3 P1 ?x0\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 24
  },
  {
    "questionIdx": 156502,
    "questionWithBrackets": "What film editor did a Spanish parent of [Milan Piqu\u00e9 Mebarak] marry",
    "questionPatternModEntities": "What film editor did a Spanish parent of M2 marry",
    "questionTemplate": "What [NP_SIMPLE] did a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] [VP_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:film.editor .\n?x0 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ?x1 .\n?x1 ns:people.person.children|ns:fictional_universe.fictional_character.children|ns:organization.organization.child/ns:organization.organization_relationship.child ns:m.0py54td .\n?x1 ns:people.person.nationality ns:m.06mkj .\nFILTER ( ?x0 != ?x1 )\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 a M0 .\n?x1 P1 M1 .\n?x1 P2 M2 .\nFILTER ( ?x0 != ?x1 )\n}",
    "expectedResponse": "Shakira",
    "recursionDepth": 24
  },
  {
    "questionIdx": 24354,
    "questionWithBrackets": "Did [Victoria Rivas]'s actor marry [Roc\u00edo Dur\u00e1n]'s parent and spouse",
    "questionPatternModEntities": "Did M0 's actor marry M1 's parent and spouse",
    "questionTemplate": "Did [entity] 's [ROLE_SIMPLE] [VP_SIMPLE] [entity] 's [ROLE_SIMPLE] and [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.actor.film/ns:film.performance.character ns:m.0rg72q3 .\n?x0 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ?x1 .\n?x1 ns:people.person.children|ns:fictional_universe.fictional_character.children|ns:organization.organization.child/ns:organization.organization_relationship.child ns:m.0kb_31y .\n?x1 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ns:m.0kb_31y .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x1 != ns:m.0kb_31y )\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 ?x1 .\n?x1 P1 M1 .\n?x1 P2 M1 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x1 != M1 )\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 24
  },
  {
    "questionIdx": 50755,
    "questionWithBrackets": "Was [Colby Schwartz] an American person's child and sibling",
    "questionPatternModEntities": "Was M2 a American person 's child and sibling",
    "questionTemplate": "Was [entity] a [ADJECTIVE_SIMPLE] [NP_SIMPLE] 's [ROLE_SIMPLE] and [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 a ns:people.person .\n?x0 ns:people.person.nationality ns:m.09c7w0 .\nFILTER ( ns:m.0ndnq14 != ?x0 ) .\nns:m.0ndnq14 ns:people.person.parents|ns:fictional_universe.fictional_character.parents|ns:organization.organization.parent/ns:organization.organization_relationship.parent ?x0 .\nns:m.0ndnq14 ns:people.person.sibling_s/ns:people.sibling_relationship.sibling|ns:fictional_universe.fictional_character.siblings/ns:fictional_universe.sibling_relationship_of_fictional_characters.siblings ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M1 .\n?x0 a M0 .\nFILTER ( M2 != ?x0 ) .\nM2 P1 ?x0 .\nM2 P2 ?x0\n}",
    "expectedResponse": "No",
    "recursionDepth": 24
  },
  {
    "questionIdx": 110405,
    "questionWithBrackets": "Was an employee of [Northern Arizona University] a film editor's employer's employee",
    "questionPatternModEntities": "Was a employee of M0 a film editor 's employer 's employee",
    "questionTemplate": "Was a [ROLE_SIMPLE] of [entity] a [NP_SIMPLE] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:people.person.employment_history/ns:business.employment_tenure.company ?x1 .\n?x0 ns:people.person.employment_history/ns:business.employment_tenure.company ns:m.02xpy5 .\n?x1 ns:business.employer.employees/ns:business.employment_tenure.person ?x2 .\n?x2 a ns:film.editor\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x0 P0 M0 .\n?x1 P1 ?x2 .\n?x2 a M1\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 24
  },
  {
    "questionIdx": 140115,
    "questionWithBrackets": "What cinematographer was influenced by [The Prince and the Showgirl]'s female executive producer",
    "questionPatternModEntities": "What cinematographer was influenced by M1 's female executive producer",
    "questionTemplate": "What [NP_SIMPLE] was [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:film.cinematographer .\n?x0 ns:influence.influence_node.influenced_by ?x1 .\n?x1 ns:film.producer.films_executive_produced ns:m.06cv63 .\n?x1 ns:people.person.gender ns:m.02zsn\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 a M0 .\n?x1 P1 M1 .\n?x1 P2 M2\n}",
    "expectedResponse": "Jayne Mansfield",
    "recursionDepth": 24
  },
  {
    "questionIdx": 227833,
    "questionWithBrackets": "Who was a Mexican film editor that [Mary Astor] married",
    "questionPatternModEntities": "Who was a Mexican film editor that M3 married",
    "questionTemplate": "Who was a [ADJECTIVE_SIMPLE] [NP_SIMPLE] that [entity] [VP_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:film.editor .\n?x0 a ns:people.person .\n?x0 ns:people.person.nationality ns:m.0b90_r .\n?x0 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ns:m.02qhm3 .\nFILTER ( ?x0 != ns:m.02qhm3 )\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M2 .\n?x0 P1 M3 .\n?x0 a M0 .\n?x0 a M1 .\nFILTER ( ?x0 != M3 )\n}",
    "expectedResponse": "Manuel del Campo",
    "recursionDepth": 24
  },
  {
    "questionIdx": 239026,
    "questionWithBrackets": "Who was influenced by and married [Lisa de Kooning]'s parent",
    "questionPatternModEntities": "Who was influenced by and married M1 's parent",
    "questionTemplate": "Who was [VP_SIMPLE] by and [VP_SIMPLE] [entity] 's [ROLE_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:people.person .\n?x0 ns:influence.influence_node.influenced_by ?x1 .\n?x0 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ?x1 .\n?x1 ns:people.person.children|ns:fictional_universe.fictional_character.children|ns:organization.organization.child/ns:organization.organization_relationship.child ns:m.0n3hll0 .\nFILTER ( ?x0 != ?x1 )\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 a M0 .\n?x1 P2 M1 .\nFILTER ( ?x0 != ?x1 )\n}",
    "expectedResponse": "Elaine de Kooning",
    "recursionDepth": 24
  },
  {
    "questionIdx": 181847,
    "questionWithBrackets": "What was produced by [Vikramaditya Motwane] and produced by a costume designer",
    "questionPatternModEntities": "What was produced by M0 and produced by a costume designer",
    "questionTemplate": "What was [VP_SIMPLE] by [entity] and [VP_SIMPLE] by a [NP_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.film.produced_by|ns:film.film.production_companies ?x1 .\n?x0 ns:film.film.produced_by|ns:film.film.production_companies ns:m.0281mhl .\n?x1 a ns:film.film_costumer_designer\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P0 M0 .\n?x1 a M1\n}",
    "expectedResponse": "Hasee Toh Phasee",
    "recursionDepth": 25
  },
  {
    "questionIdx": 237159,
    "questionWithBrackets": "Who was influenced by [Sandra Wasserstein Meyer]'s female American sibling",
    "questionPatternModEntities": "Who was influenced by M1 's female American sibling",
    "questionTemplate": "Who was [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:people.person .\n?x0 ns:influence.influence_node.influenced_by ?x1 .\n?x1 ns:people.person.gender ns:m.02zsn .\n?x1 ns:people.person.nationality ns:m.09c7w0 .\n?x1 ns:people.person.sibling_s/ns:people.sibling_relationship.sibling|ns:fictional_universe.fictional_character.siblings/ns:fictional_universe.sibling_relationship_of_fictional_characters.siblings ns:m.0w3ng36 .\nFILTER ( ?x1 != ns:m.0w3ng36 )\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 a M0 .\n?x1 P1 M1 .\n?x1 P2 M2 .\n?x1 P3 M3 .\nFILTER ( ?x1 != M1 )\n}",
    "expectedResponse": "Suzan-Lori Parks",
    "recursionDepth": 25
  },
  {
    "questionIdx": 61976,
    "questionWithBrackets": "Was [Jose Manuel Galvan]'s Spanish sibling's child and sibling [Baldomero Ballesteros]",
    "questionPatternModEntities": "Was M0 's Spanish sibling 's child and sibling M2",
    "questionTemplate": "Was [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] 's [ROLE_SIMPLE] and [ROLE_SIMPLE] [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:people.person.nationality ns:m.06mkj .\n?x0 ns:people.person.sibling_s/ns:people.sibling_relationship.sibling|ns:fictional_universe.fictional_character.siblings/ns:fictional_universe.sibling_relationship_of_fictional_characters.siblings ns:m.0_n9wll .\nFILTER ( ?x0 != ns:m.0_n9wll ) .\nFILTER ( ns:m.0j17g9g != ?x0 ) .\nns:m.0j17g9g ns:people.person.parents|ns:fictional_universe.fictional_character.parents|ns:organization.organization.parent/ns:organization.organization_relationship.parent ?x0 .\nns:m.0j17g9g ns:people.person.sibling_s/ns:people.sibling_relationship.sibling|ns:fictional_universe.fictional_character.siblings/ns:fictional_universe.sibling_relationship_of_fictional_characters.siblings ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( M2 != ?x0 ) .\nM2 P0 ?x0 .\nM2 P2 ?x0\n}",
    "expectedResponse": "No",
    "recursionDepth": 25
  },
  {
    "questionIdx": 210560,
    "questionWithBrackets": "Which screenwriter married and influenced [Les dites cariatides]'s producer",
    "questionPatternModEntities": "Which screenwriter married and influenced M1 's producer",
    "questionTemplate": "Which [NP_SIMPLE] [VP_SIMPLE] and [VP_SIMPLE] [entity] 's [ROLE_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:film.writer .\n?x0 ns:influence.influence_node.influenced ?x1 .\n?x0 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ?x1 .\n?x1 ns:film.producer.film|ns:film.production_company.films ns:m.0zncfpg .\nFILTER ( ?x0 != ?x1 )\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 a M0 .\n?x1 P2 M1 .\nFILTER ( ?x0 != ?x1 )\n}",
    "expectedResponse": "Jacques Demy",
    "recursionDepth": 25
  },
  {
    "questionIdx": 216906,
    "questionWithBrackets": "Who distributed a film whose star edited [Blind Husbands]",
    "questionPatternModEntities": "Who distributed a film whose star edited M2",
    "questionTemplate": "Who [VP_SIMPLE] a [NP_SIMPLE] whose [ROLE_SIMPLE] [VP_SIMPLE] [entity]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:people.person .\n?x0 ns:film.film_distributor.films_distributed/ns:film.film_film_distributor_relationship.film ?x1 .\n?x1 a ns:film.film .\n?x1 ns:film.film.starring/ns:film.performance.actor ?x2 .\n?x2 ns:film.editor.film ns:m.04ydl_z\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 a M0 .\n?x1 P1 ?x2 .\n?x1 a M1 .\n?x2 P2 M2\n}",
    "expectedResponse": "Republic Pictures",
    "recursionDepth": 25
  },
  {
    "questionIdx": 59509,
    "questionWithBrackets": "Was [In Hanford] executive produced, edited, and written by [Chris Mars]",
    "questionPatternModEntities": "Was M0 executive produced , edited , and written by M1",
    "questionTemplate": "Was [entity] [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by [entity]",
    "sparql": "SELECT count(*) WHERE {\nns:m.0q2lst6 ns:film.film.edited_by ns:m.01pr7kp .\nns:m.0q2lst6 ns:film.film.executive_produced_by ns:m.01pr7kp .\nns:m.0q2lst6 ns:film.film.written_by ns:m.01pr7kp\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1 .\nM0 P2 M1\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 25
  },
  {
    "questionIdx": 123750,
    "questionWithBrackets": "Were [Rise of the Guardians] and [Y volver\u00e9...] executive produced by a Mexican cinematographer",
    "questionPatternModEntities": "Were M2 and M3 executive produced by a Mexican cinematographer",
    "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [NP_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 a ns:film.cinematographer .\n?x0 ns:people.person.nationality ns:m.0b90_r .\nns:m.010bx641 ns:film.film.executive_produced_by ?x0 .\nns:m.06wbm8q ns:film.film.executive_produced_by ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M1 .\n?x0 a M0 .\nM2 P1 ?x0 .\nM3 P1 ?x0\n}",
    "expectedResponse": "No",
    "recursionDepth": 25
  },
  {
    "questionIdx": 208008,
    "questionWithBrackets": "Which person produced and edited [The Basis Of Make-up II]'s sequel",
    "questionPatternModEntities": "Which person produced and edited M1 's sequel",
    "questionTemplate": "Which [NP_SIMPLE] [VP_SIMPLE] and [VP_SIMPLE] [entity] 's [ROLE_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:people.person .\n?x0 ns:film.editor.film ?x1 .\n?x0 ns:film.producer.film|ns:film.production_company.films ?x1 .\n?x1 ns:film.film.prequel ns:m.0_skn10\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 a M0 .\n?x1 P2 M1\n}",
    "expectedResponse": "Heinz Emigholz",
    "recursionDepth": 25
  },
  {
    "questionIdx": 146390,
    "questionWithBrackets": "What did [Shout! Factory] distribute and [Amy Moynihan]'s spouse produce",
    "questionPatternModEntities": "What did M0 distribute and M1 's spouse produce",
    "questionTemplate": "What did [entity] [VP_SIMPLE] and [entity] 's [ROLE_SIMPLE] [VP_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.film.distributors/ns:film.film_film_distributor_relationship.distributor ns:m.08d8xn .\n?x0 ns:film.film.produced_by|ns:film.film.production_companies ?x1 .\n?x1 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ns:m.0jb81pc .\nFILTER ( ?x1 != ns:m.0jb81pc )\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 ?x1 .\n?x1 P2 M1 .\nFILTER ( ?x1 != M1 )\n}",
    "expectedResponse": "Our Friend, Martin",
    "recursionDepth": 25
  },
  {
    "questionIdx": 149828,
    "questionWithBrackets": "What did a film editor edit and [Darren Aronofsky] executive produce",
    "questionPatternModEntities": "What did a film editor edit and M0 executive produce",
    "questionTemplate": "What did a [NP_SIMPLE] [VP_SIMPLE] and [entity] [VP_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.film.edited_by ?x1 .\n?x0 ns:film.film.executive_produced_by ns:m.017c87 .\n?x1 a ns:film.editor\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 ?x1 .\n?x1 a M1\n}",
    "expectedResponse": "The Fighter",
    "recursionDepth": 25
  },
  {
    "questionIdx": 64385,
    "questionWithBrackets": "Was [Light Plate] executive produced by a film's cinematographer and editor",
    "questionPatternModEntities": "Was M1 executive produced by a film 's cinematographer and editor",
    "questionTemplate": "Was [entity] [VP_SIMPLE] by a [NP_SIMPLE] 's [ROLE_SIMPLE] and [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.cinematographer.film ?x1 .\n?x0 ns:film.editor.film ?x1 .\n?x1 a ns:film.film .\nns:m.0rh82jn ns:film.film.executive_produced_by ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x1 a M0 .\nM1 P2 ?x0\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 25
  },
  {
    "questionIdx": 237159,
    "questionWithBrackets": "Who was influenced by [Sandra Wasserstein Meyer]'s female American sibling",
    "questionPatternModEntities": "Who was influenced by M1 's female American sibling",
    "questionTemplate": "Who was [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:people.person .\n?x0 ns:influence.influence_node.influenced_by ?x1 .\n?x1 ns:people.person.gender ns:m.02zsn .\n?x1 ns:people.person.nationality ns:m.09c7w0 .\n?x1 ns:people.person.sibling_s/ns:people.sibling_relationship.sibling|ns:fictional_universe.fictional_character.siblings/ns:fictional_universe.sibling_relationship_of_fictional_characters.siblings ns:m.0w3ng36 .\nFILTER ( ?x1 != ns:m.0w3ng36 )\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 a M0 .\n?x1 P1 M1 .\n?x1 P2 M2 .\n?x1 P3 M3 .\nFILTER ( ?x1 != M1 )\n}",
    "expectedResponse": "Suzan-Lori Parks",
    "recursionDepth": 25
  },
  {
    "questionIdx": 39642,
    "questionWithBrackets": "Did a sibling of [Ripon Cathedral]'s employee's child influence [Stephen Dedman]",
    "questionPatternModEntities": "Did a sibling of M1 's employee 's child influence M0",
    "questionTemplate": "Did a [ROLE_SIMPLE] of [entity] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE] [VP_SIMPLE] [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:influence.influence_node.influenced ns:m.088bdn .\n?x0 ns:people.person.sibling_s/ns:people.sibling_relationship.sibling|ns:fictional_universe.fictional_character.siblings/ns:fictional_universe.sibling_relationship_of_fictional_characters.siblings ?x1 .\n?x1 ns:people.person.parents|ns:fictional_universe.fictional_character.parents|ns:organization.organization.parent/ns:organization.organization_relationship.parent ?x2 .\n?x2 ns:people.person.employment_history/ns:business.employment_tenure.company ns:m.01z8nd .\nFILTER ( ?x0 != ?x1 )\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x0 P1 M0 .\n?x1 P2 ?x2 .\n?x2 P3 M1 .\nFILTER ( ?x0 != ?x1 )\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 25
  },
  {
    "questionIdx": 11403,
    "questionWithBrackets": "Did [Ji dou shou xing] star a Canadian spouse of an art director",
    "questionPatternModEntities": "Did M2 star a Canadian spouse of a art director",
    "questionTemplate": "Did [entity] [VP_SIMPLE] a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of a [NP_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:people.person.nationality ns:m.0d060g .\n?x0 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ?x1 .\n?x1 a ns:film.film_art_director .\nFILTER ( ?x0 != ?x1 ) .\nns:m.0gkshf9 ns:film.film.starring/ns:film.performance.actor ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 ?x1 .\n?x1 a M1 .\nFILTER ( ?x0 != ?x1 ) .\nM2 P2 ?x0\n}",
    "expectedResponse": "No",
    "recursionDepth": 25
  },
  {
    "questionIdx": 221761,
    "questionWithBrackets": "Who married an editor, writer, and art director of [The Color of Pomegranates]",
    "questionPatternModEntities": "Who married a editor , writer , and art director of M1",
    "questionTemplate": "Who [VP_SIMPLE] a [ROLE_SIMPLE] , [ROLE_SIMPLE] , and [ROLE_SIMPLE] of [entity]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:people.person .\n?x0 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ?x1 .\n?x1 ns:film.editor.film ns:m.05hmb7 .\n?x1 ns:film.film_art_director.films_art_directed ns:m.05hmb7 .\n?x1 ns:film.writer.film ns:m.05hmb7 .\nFILTER ( ?x0 != ?x1 )\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 a M0 .\n?x1 P1 M1 .\n?x1 P2 M1 .\n?x1 P3 M1 .\nFILTER ( ?x0 != ?x1 )\n}",
    "expectedResponse": "Nigyar Kerimova; Svetlana Paradjanov",
    "recursionDepth": 25
  },
  {
    "questionIdx": 85201,
    "questionWithBrackets": "Was [Vestron Video] a child of a film distributor's child and parent",
    "questionPatternModEntities": "Was M1 a child of a film distributor 's child and parent",
    "questionTemplate": "Was [entity] a [ROLE_SIMPLE] of a [NP_SIMPLE] 's [ROLE_SIMPLE] and [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:people.person.children|ns:fictional_universe.fictional_character.children|ns:organization.organization.child/ns:organization.organization_relationship.child ?x1 .\n?x0 ns:people.person.parents|ns:fictional_universe.fictional_character.parents|ns:organization.organization.parent/ns:organization.organization_relationship.parent ?x1 .\n?x1 a ns:film.film_distributor .\nns:m.09btnf ns:people.person.parents|ns:fictional_universe.fictional_character.parents|ns:organization.organization.parent/ns:organization.organization_relationship.parent ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x1 a M0 .\nM1 P0 ?x0\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 25
  },
  {
    "questionIdx": 66703,
    "questionWithBrackets": "Was [Matthew Avant] an art director, editor, and star of a film",
    "questionPatternModEntities": "Was M1 a art director , editor , and star of a film",
    "questionTemplate": "Was [entity] a [ROLE_SIMPLE] , [ROLE_SIMPLE] , and [ROLE_SIMPLE] of a [NP_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 a ns:film.film .\nns:m.0h4yxvm ns:film.actor.film/ns:film.performance.film ?x0 .\nns:m.0h4yxvm ns:film.editor.film ?x0 .\nns:m.0h4yxvm ns:film.film_art_director.films_art_directed ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 a M0 .\nM1 P0 ?x0 .\nM1 P1 ?x0 .\nM1 P2 ?x0\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 25
  },
  {
    "questionIdx": 119128,
    "questionWithBrackets": "Were [Janumada Gelathi] and [Idu Saadhya] written by [Kaathil Oru Kinnaram]'s male cinematographer",
    "questionPatternModEntities": "Were M2 and M3 written by M1 's male cinematographer",
    "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.cinematographer.film ns:m.0120yydd .\n?x0 ns:people.person.gender ns:m.05zppz .\nns:m.051xsqm ns:film.film.written_by ?x0 .\nns:m.0nhk69d ns:film.film.written_by ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nM2 P2 ?x0 .\nM3 P2 ?x0\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 25
  },
  {
    "questionIdx": 237317,
    "questionWithBrackets": "Who was influenced by [Tetsuo II: Body Hammer]'s art director, cinematographer, and executive producer",
    "questionPatternModEntities": "Who was influenced by M1 's art director , cinematographer , and executive producer",
    "questionTemplate": "Who was [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] , [ROLE_SIMPLE] , and [ROLE_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:people.person .\n?x0 ns:influence.influence_node.influenced_by ?x1 .\n?x1 ns:film.cinematographer.film ns:m.0brs6b .\n?x1 ns:film.film_art_director.films_art_directed ns:m.0brs6b .\n?x1 ns:film.producer.films_executive_produced ns:m.0brs6b\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 a M0 .\n?x1 P1 M1 .\n?x1 P2 M1 .\n?x1 P3 M1\n}",
    "expectedResponse": "Darren Aronofsky",
    "recursionDepth": 25
  },
  {
    "questionIdx": 62885,
    "questionWithBrackets": "Was [Ke\u014dp\u016bolani]'s female child's spouse and sibling [Kamehameha III]",
    "questionPatternModEntities": "Was M1 's female child 's spouse and sibling M2",
    "questionTemplate": "Was [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] 's [ROLE_SIMPLE] and [ROLE_SIMPLE] [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:people.person.gender ns:m.02zsn .\n?x0 ns:people.person.parents|ns:fictional_universe.fictional_character.parents|ns:organization.organization.parent/ns:organization.organization_relationship.parent ns:m.07w6vz .\nFILTER ( ns:m.03329d != ?x0 ) .\nFILTER ( ns:m.03329d != ?x0 ) .\nns:m.03329d ns:people.person.sibling_s/ns:people.sibling_relationship.sibling|ns:fictional_universe.fictional_character.siblings/ns:fictional_universe.sibling_relationship_of_fictional_characters.siblings ?x0 .\nns:m.03329d ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( M2 != ?x0 ) .\nFILTER ( M2 != ?x0 ) .\nM2 P2 ?x0 .\nM2 P3 ?x0\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 25
  },
  {
    "questionIdx": 145438,
    "questionWithBrackets": "What did [NBCUniversal] acquire and [David T. Cassaro]'s employer acquire",
    "questionPatternModEntities": "What did M0 acquire and M1 's employer acquire",
    "questionTemplate": "What did [entity] [VP_SIMPLE] and [entity] 's [ROLE_SIMPLE] [VP_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:organization.organization.acquired_by/ns:business.acquisition.acquiring_company ?x1 .\n?x0 ns:organization.organization.acquired_by/ns:business.acquisition.acquiring_company ns:m.02_l39 .\n?x1 ns:business.employer.employees/ns:business.employment_tenure.person ns:m.04h_k3f\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P0 M0 .\n?x1 P1 M1\n}",
    "expectedResponse": "Universal Studios",
    "recursionDepth": 25
  },
  {
    "questionIdx": 228768,
    "questionWithBrackets": "Who was a character that [China Versus Allied Powers] and [A Crazy Composer] were directed by",
    "questionPatternModEntities": "Who was a character that M2 and M3 were directed by",
    "questionTemplate": "Who was a [NP_SIMPLE] that [entity] and [entity] were [VP_SIMPLE] by",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:fictional_universe.fictional_character .\n?x0 a ns:people.person .\n?x0 ns:film.director.film ns:m.012zw2qq .\n?x0 ns:film.director.film ns:m.0_mjnkt\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M2 .\n?x0 P0 M3 .\n?x0 a M0 .\n?x0 a M1\n}",
    "expectedResponse": "Georges M\u00e9li\u00e8s",
    "recursionDepth": 25
  },
  {
    "questionIdx": 213716,
    "questionWithBrackets": "Who did [Amnesty International UK] employ and [Steven Farebrother]'s country of nationality employ",
    "questionPatternModEntities": "Who did M1 employ and M2 's country of nationality employ",
    "questionTemplate": "Who did [entity] [VP_SIMPLE] and [entity] 's [ROLE_SIMPLE] [VP_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:people.person .\n?x0 ns:people.person.employment_history/ns:business.employment_tenure.company ?x1 .\n?x0 ns:people.person.employment_history/ns:business.employment_tenure.company ns:m.0120g5fq .\n?x1 ^ns:people.person.nationality ns:m.027xwvq\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P0 M1 .\n?x0 a M0 .\n?x1 P1 M2\n}",
    "expectedResponse": "Kate Allen",
    "recursionDepth": 25
  },
  {
    "questionIdx": 137765,
    "questionWithBrackets": "What art director was a screenwriter that [Ex-Mas Eve] was executive produced by",
    "questionPatternModEntities": "What art director was a screenwriter that M2 was executive produced by",
    "questionTemplate": "What [NP_SIMPLE] was a [NP_SIMPLE] that [entity] was [VP_SIMPLE] by",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:film.film_art_director .\n?x0 a ns:film.writer .\n?x0 ns:film.producer.films_executive_produced ns:m.026qj03\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M2 .\n?x0 a M0 .\n?x0 a M1\n}",
    "expectedResponse": "Vsevolod Horodyskyj",
    "recursionDepth": 25
  },
  {
    "questionIdx": 30176,
    "questionWithBrackets": "Did a cinematographer marry a writer and art director of [The Kirov Ballet: Swan Lake]",
    "questionPatternModEntities": "Did a cinematographer marry a writer and art director of M1",
    "questionTemplate": "Did a [NP_SIMPLE] [VP_SIMPLE] a [ROLE_SIMPLE] and [ROLE_SIMPLE] of [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 a ns:film.cinematographer .\n?x0 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ?x1 .\n?x1 ns:film.film_art_director.films_art_directed ns:m.0crvb5s .\n?x1 ns:film.writer.film ns:m.0crvb5s .\nFILTER ( ?x0 != ?x1 )\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x0 a M0 .\n?x1 P1 M1 .\n?x1 P2 M1 .\nFILTER ( ?x0 != ?x1 )\n}",
    "expectedResponse": "No",
    "recursionDepth": 25
  },
  {
    "questionIdx": 78900,
    "questionWithBrackets": "Was [The 1001: A Nature Trust]'s German Dutch founder's sibling [Herbert Frank]",
    "questionPatternModEntities": "Was M0 's German Dutch founder 's sibling M3",
    "questionTemplate": "Was [entity] 's [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] 's [ROLE_SIMPLE] [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:organization.organization_founder.organizations_founded ns:m.084jm0 .\n?x0 ns:people.person.nationality ns:m.0345h .\n?x0 ns:people.person.nationality ns:m.059j2 .\nFILTER ( ns:m.073jm1m != ?x0 ) .\nns:m.073jm1m ns:people.person.sibling_s/ns:people.sibling_relationship.sibling|ns:fictional_universe.fictional_character.siblings/ns:fictional_universe.sibling_relationship_of_fictional_characters.siblings ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\nFILTER ( M3 != ?x0 ) .\nM3 P2 ?x0\n}",
    "expectedResponse": "No",
    "recursionDepth": 25
  },
  {
    "questionIdx": 94619,
    "questionWithBrackets": "Was a costume designer whose sibling wrote [Cosmopolis] a person",
    "questionPatternModEntities": "Was a costume designer whose sibling wrote M2 a person",
    "questionTemplate": "Was a [NP_SIMPLE] whose [ROLE_SIMPLE] [VP_SIMPLE] [entity] a [NP_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 a ns:film.film_costumer_designer .\n?x0 a ns:people.person .\n?x0 ns:people.person.sibling_s/ns:people.sibling_relationship.sibling|ns:fictional_universe.fictional_character.siblings/ns:fictional_universe.sibling_relationship_of_fictional_characters.siblings ?x1 .\n?x1 ns:film.writer.film ns:m.0gtvrv3 .\nFILTER ( ?x0 != ?x1 )\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x0 a M0 .\n?x0 a M1 .\n?x1 P1 M2 .\nFILTER ( ?x0 != ?x1 )\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 25
  },
  {
    "questionIdx": 77459,
    "questionWithBrackets": "Was [Steve Lundquist] a child of a screenwriter's Swedish spouse",
    "questionPatternModEntities": "Was M2 a child of a screenwriter 's Swedish spouse",
    "questionTemplate": "Was [entity] a [ROLE_SIMPLE] of a [NP_SIMPLE] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:people.person.nationality ns:m.0d0vqn .\n?x0 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ?x1 .\n?x1 a ns:film.writer .\nFILTER ( ?x0 != ?x1 ) .\nns:m.0ccsg0 ns:people.person.parents|ns:fictional_universe.fictional_character.parents|ns:organization.organization.parent/ns:organization.organization_relationship.parent ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 ?x1 .\n?x1 a M1 .\nFILTER ( ?x0 != ?x1 ) .\nM2 P2 ?x0\n}",
    "expectedResponse": "No",
    "recursionDepth": 25
  },
  {
    "questionIdx": 33439,
    "questionWithBrackets": "Did a film distributor acquire a child and parent of [KML II Holdings Co Ltd]",
    "questionPatternModEntities": "Did a film distributor acquire a child and parent of M1",
    "questionTemplate": "Did a [NP_SIMPLE] [VP_SIMPLE] a [ROLE_SIMPLE] and [ROLE_SIMPLE] of [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 a ns:film.film_distributor .\n?x0 ns:organization.organization.companies_acquired/ns:business.acquisition.company_acquired ?x1 .\n?x1 ns:people.person.children|ns:fictional_universe.fictional_character.children|ns:organization.organization.child/ns:organization.organization_relationship.child ns:m.09mw2cr .\n?x1 ns:people.person.parents|ns:fictional_universe.fictional_character.parents|ns:organization.organization.parent/ns:organization.organization_relationship.parent ns:m.09mw2cr\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x0 a M0 .\n?x1 P1 M1 .\n?x1 P2 M1\n}",
    "expectedResponse": "No",
    "recursionDepth": 25
  },
  {
    "questionIdx": 87325,
    "questionWithBrackets": "Was [Xiu Xiu: The Sent Down Girl] written by and executive produced by [Pierre Sarrazin]'s spouse",
    "questionPatternModEntities": "Was M1 written by and executive produced by M0 's spouse",
    "questionTemplate": "Was [entity] [VP_SIMPLE] by and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ns:m.0b79gql .\nFILTER ( ?x0 != ns:m.0b79gql ) .\nns:m.08chpb ns:film.film.executive_produced_by ?x0 .\nns:m.08chpb ns:film.film.written_by ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nM1 P1 ?x0 .\nM1 P2 ?x0\n}",
    "expectedResponse": "No",
    "recursionDepth": 25
  },
  {
    "questionIdx": 156427,
    "questionWithBrackets": "What film editor did [A Place for Paedophiles]'s prequel's distributor's employee marry",
    "questionPatternModEntities": "What film editor did M1 's prequel 's distributor 's employee marry",
    "questionTemplate": "What [NP_SIMPLE] did [entity] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE] [VP_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:film.editor .\n?x0 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ?x1 .\n?x1 ns:people.person.employment_history/ns:business.employment_tenure.company ?x2 .\n?x2 ns:film.film_distributor.films_distributed/ns:film.film_film_distributor_relationship.film ?x3 .\n?x3 ns:film.film.sequel ns:m.0ddgv56 .\nFILTER ( ?x0 != ?x1 )\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 a M0 .\n?x1 P1 ?x2 .\n?x2 P2 ?x3 .\n?x3 P3 M1 .\nFILTER ( ?x0 != ?x1 )\n}",
    "expectedResponse": "Tony Scott",
    "recursionDepth": 25
  },
  {
    "questionIdx": 83134,
    "questionWithBrackets": "Was [The Wolf Of Waubamik Woods] written, executive produced, and edited by [Steve Belford]",
    "questionPatternModEntities": "Was M0 written , executive produced , and edited by M1",
    "questionTemplate": "Was [entity] [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by [entity]",
    "sparql": "SELECT count(*) WHERE {\nns:m.011328zf ns:film.film.edited_by ns:m.076y2y0 .\nns:m.011328zf ns:film.film.executive_produced_by ns:m.076y2y0 .\nns:m.011328zf ns:film.film.written_by ns:m.076y2y0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1 .\nM0 P2 M1\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 25
  },
  {
    "questionIdx": 47297,
    "questionWithBrackets": "Was [Battlefield Earth]'s British cinematographer's British sibling [Sandy Nuttgens]",
    "questionPatternModEntities": "Was M1 's British cinematographer 's British sibling M2",
    "questionTemplate": "Was [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.cinematographer.film ns:m.0gzlb9 .\n?x0 ns:people.person.nationality ns:m.07ssc .\nFILTER ( ns:m.0416w7s != ?x0 ) .\nns:m.0416w7s ns:people.person.nationality ns:m.07ssc .\nns:m.0416w7s ns:people.person.sibling_s/ns:people.sibling_relationship.sibling|ns:fictional_universe.fictional_character.siblings/ns:fictional_universe.sibling_relationship_of_fictional_characters.siblings ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( M2 != ?x0 ) .\nM2 P0 M0 .\nM2 P2 ?x0\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 25
  },
  {
    "questionIdx": 68768,
    "questionWithBrackets": "Was [Napoleon III] [Fiona Prince]'s French Dutch sibling's child",
    "questionPatternModEntities": "Was M3 M0 's French Dutch sibling 's child",
    "questionTemplate": "Was [entity] [entity] 's [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] 's [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:people.person.nationality ns:m.059j2 .\n?x0 ns:people.person.nationality ns:m.0f8l9c .\n?x0 ns:people.person.sibling_s/ns:people.sibling_relationship.sibling|ns:fictional_universe.fictional_character.siblings/ns:fictional_universe.sibling_relationship_of_fictional_characters.siblings ns:m.049fph7 .\nFILTER ( ?x0 != ns:m.049fph7 ) .\nns:m.0gxct ns:people.person.parents|ns:fictional_universe.fictional_character.parents|ns:organization.organization.parent/ns:organization.organization_relationship.parent ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\nFILTER ( ?x0 != M0 ) .\nM3 P2 ?x0\n}",
    "expectedResponse": "No",
    "recursionDepth": 25
  },
  {
    "questionIdx": 29941,
    "questionWithBrackets": "Did a cinematographer distribute [Road Runner a Go-Go] and distribute [The Feminist and the Fuzz]",
    "questionPatternModEntities": "Did a cinematographer distribute M1 and distribute M2",
    "questionTemplate": "Did a [NP_SIMPLE] [VP_SIMPLE] [entity] and [VP_SIMPLE] [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 a ns:film.cinematographer .\n?x0 ns:film.film_distributor.films_distributed/ns:film.film_film_distributor_relationship.film ns:m.04gvkmx .\n?x0 ns:film.film_distributor.films_distributed/ns:film.film_film_distributor_relationship.film ns:m.0g4zl8s\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 a M0\n}",
    "expectedResponse": "No",
    "recursionDepth": 25
  },
  {
    "questionIdx": 172893,
    "questionWithBrackets": "What was edited and executive produced by a child of [Mary Louise Davis]",
    "questionPatternModEntities": "What was edited and executive produced by a child of M0",
    "questionTemplate": "What was [VP_SIMPLE] and [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.film.edited_by ?x1 .\n?x0 ns:film.film.executive_produced_by ?x1 .\n?x1 ns:people.person.parents|ns:fictional_universe.fictional_character.parents|ns:organization.organization.parent/ns:organization.organization_relationship.parent ns:m.0gxqyl1\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x1 P2 M0\n}",
    "expectedResponse": "Louis C.K.: Chewed Up",
    "recursionDepth": 25
  },
  {
    "questionIdx": 149044,
    "questionWithBrackets": "What did a cinematographer, star, and director of [Grindhouse] found",
    "questionPatternModEntities": "What did a cinematographer , star , and director of M0 found",
    "questionTemplate": "What did a [ROLE_SIMPLE] , [ROLE_SIMPLE] , and [ROLE_SIMPLE] of [entity] [VP_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:organization.organization.founders ?x1 .\n?x1 ns:film.actor.film/ns:film.performance.film ns:m.084qpk .\n?x1 ns:film.cinematographer.film ns:m.084qpk .\n?x1 ns:film.director.film ns:m.084qpk\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x1 P1 M0 .\n?x1 P2 M0 .\n?x1 P3 M0\n}",
    "expectedResponse": "Rolling Thunder Pictures; A Band Apart",
    "recursionDepth": 25
  },
  {
    "questionIdx": 143273,
    "questionWithBrackets": "What did [FVC Productions, Inc]'s parent found and [British Sky Broadcasting] found",
    "questionPatternModEntities": "What did M1 's parent found and M0 found",
    "questionTemplate": "What did [entity] 's [ROLE_SIMPLE] [VP_SIMPLE] and [entity] [VP_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:organization.organization.founders ?x1 .\n?x0 ns:organization.organization.founders ns:m.03p1p8r .\n?x1 ns:people.person.children|ns:fictional_universe.fictional_character.children|ns:organization.organization.child/ns:organization.organization_relationship.child ns:m.09n9b0x\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P0 M0 .\n?x1 P1 M1\n}",
    "expectedResponse": "SKY M\u00e9xico",
    "recursionDepth": 25
  },
  {
    "questionIdx": 216156,
    "questionWithBrackets": "Who did a male writer of [Lovers and Liars] and [Il Brigante Musolino] marry",
    "questionPatternModEntities": "Who did a male writer of M1 and M2 marry",
    "questionTemplate": "Who did a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] and [entity] [VP_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:people.person .\n?x0 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ?x1 .\n?x1 ns:film.writer.film ns:m.03wfpwd .\n?x1 ns:film.writer.film ns:m.0bq8sb .\n?x1 ns:people.person.gender ns:m.05zppz .\nFILTER ( ?x0 != ?x1 )\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 a M0 .\n?x1 P1 M1 .\n?x1 P1 M2 .\n?x1 P2 M3 .\nFILTER ( ?x0 != ?x1 )\n}",
    "expectedResponse": "Antonella Salerni; Chiara Rapaccini",
    "recursionDepth": 25
  },
  {
    "questionIdx": 84816,
    "questionWithBrackets": "Was [Universal Studios] a distributor of a film's sequel and prequel",
    "questionPatternModEntities": "Was M1 a distributor of a film 's sequel and prequel",
    "questionTemplate": "Was [entity] a [ROLE_SIMPLE] of a [NP_SIMPLE] 's [ROLE_SIMPLE] and [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.film.prequel ?x1 .\n?x0 ns:film.film.sequel ?x1 .\n?x1 a ns:film.film .\nns:m.016tw3 ns:film.film_distributor.films_distributed/ns:film.film_film_distributor_relationship.film ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x1 a M0 .\nM1 P2 ?x0\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 25
  },
  {
    "questionIdx": 221143,
    "questionWithBrackets": "Who married a Canadian employee of [Pereira and Luckman] and [Columbia University]",
    "questionPatternModEntities": "Who married a Canadian employee of M1 and M2",
    "questionTemplate": "Who [VP_SIMPLE] a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] and [entity]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:people.person .\n?x0 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ?x1 .\n?x1 ns:people.person.employment_history/ns:business.employment_tenure.company ns:m.01w5m .\n?x1 ns:people.person.employment_history/ns:business.employment_tenure.company ns:m.025dt2y .\n?x1 ns:people.person.nationality ns:m.0d060g .\nFILTER ( ?x0 != ?x1 )\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 a M0 .\n?x1 P1 M1 .\n?x1 P1 M2 .\n?x1 P2 M3 .\nFILTER ( ?x0 != ?x1 )\n}",
    "expectedResponse": "Berta Isabel Aguilera; Anita Snyder",
    "recursionDepth": 25
  },
  {
    "questionIdx": 176726,
    "questionWithBrackets": "What was executive produced by [Junko's Shamisen]'s executive producer, writer, and art director",
    "questionPatternModEntities": "What was executive produced by M0 's executive producer , writer , and art director",
    "questionTemplate": "What was [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] , [ROLE_SIMPLE] , and [ROLE_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.film.executive_produced_by ?x1 .\n?x1 ns:film.film_art_director.films_art_directed ns:m.0fq6c0m .\n?x1 ns:film.producer.films_executive_produced ns:m.0fq6c0m .\n?x1 ns:film.writer.film ns:m.0fq6c0m\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x1 P1 M0 .\n?x1 P2 M0 .\n?x1 P3 M0\n}",
    "expectedResponse": "Junko's Shamisen; Beasts in the Real World",
    "recursionDepth": 25
  },
  {
    "questionIdx": 217338,
    "questionWithBrackets": "Who executive produced, produced, and directed [It's Not About the Shawerma]",
    "questionPatternModEntities": "Who executive produced , produced , and directed M1",
    "questionTemplate": "Who [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] [entity]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:people.person .\n?x0 ns:film.director.film ns:m.0zztylq .\n?x0 ns:film.producer.films_executive_produced ns:m.0zztylq .\n?x0 ns:film.producer.film|ns:film.production_company.films ns:m.0zztylq\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M1 .\n?x0 P1 M1 .\n?x0 P2 M1 .\n?x0 a M0\n}",
    "expectedResponse": "Rick Schmidt",
    "recursionDepth": 25
  },
  {
    "questionIdx": 13731,
    "questionWithBrackets": "Did [Macys Department Stores Inc] employ [Herbert Frank]'s Dutch German sibling",
    "questionPatternModEntities": "Did M3 employ M0 's Dutch German sibling",
    "questionTemplate": "Did [entity] [VP_SIMPLE] [entity] 's [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:people.person.nationality ns:m.0345h .\n?x0 ns:people.person.nationality ns:m.059j2 .\n?x0 ns:people.person.sibling_s/ns:people.sibling_relationship.sibling|ns:fictional_universe.fictional_character.siblings/ns:fictional_universe.sibling_relationship_of_fictional_characters.siblings ns:m.073jm1m .\nFILTER ( ?x0 != ns:m.073jm1m ) .\nns:m.09mldzd ns:business.employer.employees/ns:business.employment_tenure.person ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\nFILTER ( ?x0 != M0 ) .\nM3 P2 ?x0\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 25
  },
  {
    "questionIdx": 70985,
    "questionWithBrackets": "Was [Patrick Drake] [Holly Sutton-Scorpio]'s female child's parent and child",
    "questionPatternModEntities": "Was M2 M1 's female child 's parent and child",
    "questionTemplate": "Was [entity] [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] 's [ROLE_SIMPLE] and [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:people.person.gender ns:m.02zsn .\n?x0 ns:people.person.parents|ns:fictional_universe.fictional_character.parents|ns:organization.organization.parent/ns:organization.organization_relationship.parent ns:m.02rdkd0 .\nns:m.0gw37x ns:people.person.children|ns:fictional_universe.fictional_character.children|ns:organization.organization.child/ns:organization.organization_relationship.child ?x0 .\nns:m.0gw37x ns:people.person.parents|ns:fictional_universe.fictional_character.parents|ns:organization.organization.parent/ns:organization.organization_relationship.parent ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nM2 P1 ?x0 .\nM2 P2 ?x0\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 25
  },
  {
    "questionIdx": 34852,
    "questionWithBrackets": "Did a film producer that [Malti's father] was played by marry [Punitha Prabhu]",
    "questionPatternModEntities": "Did a film producer that M1 was played by marry M2",
    "questionTemplate": "Did a [NP_SIMPLE] that [entity] was [VP_SIMPLE] by [VP_SIMPLE] [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 a ns:film.producer .\n?x0 ns:film.actor.film/ns:film.performance.character ns:m.0h8c1rt .\n?x0 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ns:m.0hktjd_ .\nFILTER ( ?x0 != ns:m.0hktjd_ )\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M1 .\n?x0 P1 M2 .\n?x0 a M0 .\nFILTER ( ?x0 != M2 )\n}",
    "expectedResponse": "No",
    "recursionDepth": 25
  },
  {
    "questionIdx": 148735,
    "questionWithBrackets": "What did a character write and [Michael Tollin] executive produce",
    "questionPatternModEntities": "What did a character write and M0 executive produce",
    "questionTemplate": "What did a [NP_SIMPLE] [VP_SIMPLE] and [entity] [VP_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.film.executive_produced_by ns:m.0bgrsl .\n?x0 ns:film.film.written_by ?x1 .\n?x1 a ns:fictional_universe.fictional_character\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 ?x1 .\n?x1 a M1\n}",
    "expectedResponse": "Norbit",
    "recursionDepth": 25
  },
  {
    "questionIdx": 54418,
    "questionWithBrackets": "Was [Everyone Is Older Than I Am] directed and edited by a film editor's child",
    "questionPatternModEntities": "Was M1 directed and edited by a film editor 's child",
    "questionTemplate": "Was [entity] [VP_SIMPLE] and [VP_SIMPLE] by a [NP_SIMPLE] 's [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:people.person.parents|ns:fictional_universe.fictional_character.parents|ns:organization.organization.parent/ns:organization.organization_relationship.parent ?x1 .\n?x1 a ns:film.editor .\nns:m.011x833c ns:film.film.directed_by ?x0 .\nns:m.011x833c ns:film.film.edited_by ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x1 a M0 .\nM1 P1 ?x0 .\nM1 P2 ?x0\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 26
  },
  {
    "questionIdx": 149803,
    "questionWithBrackets": "What did a film distributor's employee executive produce and edit",
    "questionPatternModEntities": "What did a film distributor 's employee executive produce and edit",
    "questionTemplate": "What did a [NP_SIMPLE] 's [ROLE_SIMPLE] [VP_SIMPLE] and [VP_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.film.edited_by ?x1 .\n?x0 ns:film.film.executive_produced_by ?x1 .\n?x1 ns:people.person.employment_history/ns:business.employment_tenure.company ?x2 .\n?x2 a ns:film.film_distributor\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x1 P2 ?x2 .\n?x2 a M0\n}",
    "expectedResponse": "The Goonies; Reds",
    "recursionDepth": 26
  },
  {
    "questionIdx": 136656,
    "questionWithBrackets": "What actor that married [Jos\u00e9 Wilker] and [F\u00e1bio Jr.] married [Murilo Benicio]",
    "questionPatternModEntities": "What actor that married M1 and M2 married M3",
    "questionTemplate": "What [NP_SIMPLE] that [VP_SIMPLE] [entity] and [entity] [VP_SIMPLE] [entity]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:film.actor .\n?x0 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ns:m.02r6thr .\n?x0 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ns:m.05f9f1g .\n?x0 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ns:m.07g7kn .\nFILTER ( ?x0 != ns:m.02r6thr ) .\nFILTER ( ?x0 != ns:m.05f9f1g ) .\nFILTER ( ?x0 != ns:m.07g7kn )\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P0 M3 .\n?x0 a M0 .\nFILTER ( ?x0 != M1 ) .\nFILTER ( ?x0 != M2 ) .\nFILTER ( ?x0 != M3 )\n}",
    "expectedResponse": "Guilhermina Guinle",
    "recursionDepth": 26
  },
  {
    "questionIdx": 154412,
    "questionWithBrackets": "What female film director did an Italian film editor influence",
    "questionPatternModEntities": "What female film director did a Italian film editor influence",
    "questionTemplate": "What [ADJECTIVE_SIMPLE] [NP_SIMPLE] did a [ADJECTIVE_SIMPLE] [NP_SIMPLE] [VP_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:film.director .\n?x0 ns:influence.influence_node.influenced_by ?x1 .\n?x0 ns:people.person.gender ns:m.02zsn .\n?x1 a ns:film.editor .\n?x1 ns:people.person.nationality ns:m.03rjj\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 M1 .\n?x0 a M0 .\n?x1 P2 M3 .\n?x1 a M2\n}",
    "expectedResponse": "Catherine Breillat",
    "recursionDepth": 26
  },
  {
    "questionIdx": 221400,
    "questionWithBrackets": "Who married a film director's male actor's sibling",
    "questionPatternModEntities": "Who married a film director 's male actor 's sibling",
    "questionTemplate": "Who [VP_SIMPLE] a [NP_SIMPLE] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] 's [ROLE_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:people.person .\n?x0 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ?x1 .\n?x1 ns:people.person.sibling_s/ns:people.sibling_relationship.sibling|ns:fictional_universe.fictional_character.siblings/ns:fictional_universe.sibling_relationship_of_fictional_characters.siblings ?x2 .\n?x2 ns:film.actor.film/ns:film.performance.character ?x3 .\n?x2 ns:people.person.gender ns:m.05zppz .\n?x3 a ns:film.director .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x1 != ?x2 )\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 a M0 .\n?x1 P1 ?x2 .\n?x2 P2 ?x3 .\n?x2 P3 M1 .\n?x3 a M2 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x1 != ?x2 )\n}",
    "expectedResponse": "Vincent Dowling; Cornelia Hayes O'Herlihy",
    "recursionDepth": 26
  },
  {
    "questionIdx": 167964,
    "questionWithBrackets": "What was a company whose founder edited [For Ever Mozart] and [A Letter to Freddy Buache]",
    "questionPatternModEntities": "What was a company whose founder edited M1 and M2",
    "questionTemplate": "What was a [NP_SIMPLE] whose [ROLE_SIMPLE] [VP_SIMPLE] [entity] and [entity]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:business.employer .\n?x0 ns:organization.organization.founders ?x1 .\n?x1 ns:film.editor.film ns:m.0479kqt .\n?x1 ns:film.editor.film ns:m.0660q7l\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 a M0 .\n?x1 P1 M1 .\n?x1 P1 M2\n}",
    "expectedResponse": "Dziga Vertov Group",
    "recursionDepth": 26
  },
  {
    "questionIdx": 14009,
    "questionWithBrackets": "Did [Margaret Maldonado] and [Phoebe Cates] marry a screenwriter's sibling's sibling",
    "questionPatternModEntities": "Did M1 and M2 marry a screenwriter 's sibling 's sibling",
    "questionTemplate": "Did [entity] and [entity] [VP_SIMPLE] a [NP_SIMPLE] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:people.person.sibling_s/ns:people.sibling_relationship.sibling|ns:fictional_universe.fictional_character.siblings/ns:fictional_universe.sibling_relationship_of_fictional_characters.siblings ?x1 .\n?x1 ns:people.person.sibling_s/ns:people.sibling_relationship.sibling|ns:fictional_universe.fictional_character.siblings/ns:fictional_universe.sibling_relationship_of_fictional_characters.siblings ?x2 .\n?x2 a ns:film.writer .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x1 != ?x2 ) .\nFILTER ( ns:m.0151fv != ?x0 ) .\nFILTER ( ns:m.0h5w73n != ?x0 ) .\nns:m.0151fv ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ?x0 .\nns:m.0h5w73n ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x1 P0 ?x2 .\n?x2 a M0 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x1 != ?x2 ) .\nFILTER ( M1 != ?x0 ) .\nFILTER ( M2 != ?x0 ) .\nM1 P1 ?x0 .\nM2 P1 ?x0\n}",
    "expectedResponse": "No",
    "recursionDepth": 26
  },
  {
    "questionIdx": 141353,
    "questionWithBrackets": "What costume designer was a film producer that [Rabindranath Tagore] and [Jean Renoir] influenced",
    "questionPatternModEntities": "What costume designer was a film producer that M2 and M3 influenced",
    "questionTemplate": "What [NP_SIMPLE] was a [NP_SIMPLE] that [entity] and [entity] [VP_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:film.film_costumer_designer .\n?x0 a ns:film.producer .\n?x0 ns:influence.influence_node.influenced_by ns:m.0d0mbj .\n?x0 ns:influence.influence_node.influenced_by ns:m.0qdm8\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M2 .\n?x0 P0 M3 .\n?x0 a M0 .\n?x0 a M1\n}",
    "expectedResponse": "Satyajit Ray",
    "recursionDepth": 26
  },
  {
    "questionIdx": 140380,
    "questionWithBrackets": "What company did [Julie & Jack]'s director, costume designer, and cinematographer found",
    "questionPatternModEntities": "What company did M1 's director , costume designer , and cinematographer found",
    "questionTemplate": "What [NP_SIMPLE] did [entity] 's [ROLE_SIMPLE] , [ROLE_SIMPLE] , and [ROLE_SIMPLE] [VP_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:business.employer .\n?x0 ns:organization.organization.founders ?x1 .\n?x1 ns:film.cinematographer.film ns:m.0crtjmg .\n?x1 ns:film.director.film ns:m.0crtjmg .\n?x1 ns:film.film_costumer_designer.costume_design_for_film ns:m.0crtjmg\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 a M0 .\n?x1 P1 M1 .\n?x1 P2 M1 .\n?x1 P3 M1\n}",
    "expectedResponse": "Moviehead Pictures",
    "recursionDepth": 26
  },
  {
    "questionIdx": 61179,
    "questionWithBrackets": "Was [Jean Genet Is Dead] produced by, edited by, and written by [Jeffery Peterson]",
    "questionPatternModEntities": "Was M0 produced by , edited by , and written by M1",
    "questionTemplate": "Was [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity]",
    "sparql": "SELECT count(*) WHERE {\nns:m.0gybg9q ns:film.film.edited_by ns:m.0pyt4yd .\nns:m.0gybg9q ns:film.film.produced_by|ns:film.film.production_companies ns:m.0pyt4yd .\nns:m.0gybg9q ns:film.film.written_by ns:m.0pyt4yd\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1 .\nM0 P2 M1\n}",
    "expectedResponse": "No",
    "recursionDepth": 26
  },
  {
    "questionIdx": 41634,
    "questionWithBrackets": "Did an actor's parent's child's sibling influence [Marcus Knecht]",
    "questionPatternModEntities": "Did a actor 's parent 's child 's sibling influence M0",
    "questionTemplate": "Did a [NP_SIMPLE] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE] [VP_SIMPLE] [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:influence.influence_node.influenced ns:m.0j3ddvv .\n?x0 ns:people.person.sibling_s/ns:people.sibling_relationship.sibling|ns:fictional_universe.fictional_character.siblings/ns:fictional_universe.sibling_relationship_of_fictional_characters.siblings ?x1 .\n?x1 ns:people.person.parents|ns:fictional_universe.fictional_character.parents|ns:organization.organization.parent/ns:organization.organization_relationship.parent ?x2 .\n?x2 ns:people.person.children|ns:fictional_universe.fictional_character.children|ns:organization.organization.child/ns:organization.organization_relationship.child ?x3 .\n?x3 a ns:film.actor .\nFILTER ( ?x0 != ?x1 )\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x0 P1 M0 .\n?x1 P2 ?x2 .\n?x2 P3 ?x3 .\n?x3 a M1 .\nFILTER ( ?x0 != ?x1 )\n}",
    "expectedResponse": "No",
    "recursionDepth": 26
  },
  {
    "questionIdx": 22446,
    "questionWithBrackets": "Did [The Magic Crystal] and [Cop Shop Babes] star a Chinese writer of [Flirting in the Air]",
    "questionPatternModEntities": "Did M2 and M3 star a Chinese writer of M0",
    "questionTemplate": "Did [entity] and [entity] [VP_SIMPLE] a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.writer.film ns:m.010pfc_0 .\n?x0 ns:people.person.nationality ns:m.0d05w3 .\nns:m.02r85l1 ns:film.film.starring/ns:film.performance.actor ?x0 .\nns:m.04j2h3k ns:film.film.starring/ns:film.performance.actor ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nM2 P2 ?x0 .\nM3 P2 ?x0\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 26
  },
  {
    "questionIdx": 49869,
    "questionWithBrackets": "Was [Charles IV of Spain] [Luc\u00eda Domingu\u00edn]'s male Italian Spanish sibling",
    "questionPatternModEntities": "Was M0 M1 's male Italian Spanish sibling",
    "questionTemplate": "Was [entity] [entity] 's [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\nFILTER ( ns:m.01360q != ns:m.0kk48sm ) .\nns:m.01360q ns:people.person.gender ns:m.05zppz .\nns:m.01360q ns:people.person.nationality ns:m.03rjj .\nns:m.01360q ns:people.person.nationality ns:m.06mkj .\nns:m.01360q ns:people.person.sibling_s/ns:people.sibling_relationship.sibling|ns:fictional_universe.fictional_character.siblings/ns:fictional_universe.sibling_relationship_of_fictional_characters.siblings ns:m.0kk48sm\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\nFILTER ( M0 != M1 ) .\nM0 P0 M1 .\nM0 P1 M2 .\nM0 P1 M3 .\nM0 P2 M4\n}",
    "expectedResponse": "No",
    "recursionDepth": 26
  },
  {
    "questionIdx": 74870,
    "questionWithBrackets": "Was [Roy O. Disney] a film producer whose sibling founded [Walt Disney World Company] and [Disneyland Resort]",
    "questionPatternModEntities": "Was M2 a film producer whose sibling founded M0 and M1",
    "questionTemplate": "Was [entity] a [NP_SIMPLE] whose [ROLE_SIMPLE] [VP_SIMPLE] [entity] and [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:organization.organization_founder.organizations_founded ns:m.01zx_x .\n?x0 ns:organization.organization_founder.organizations_founded ns:m.048g9h .\nFILTER ( ns:m.015yg9 != ?x0 ) .\nns:m.015yg9 a ns:film.producer .\nns:m.015yg9 ns:people.person.sibling_s/ns:people.sibling_relationship.sibling|ns:fictional_universe.fictional_character.siblings/ns:fictional_universe.sibling_relationship_of_fictional_characters.siblings ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\nFILTER ( M2 != ?x0 ) .\nM2 P1 ?x0 .\nM2 a M3\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 26
  },
  {
    "questionIdx": 46631,
    "questionWithBrackets": "Was [Ashok Kumar] a cinematographer whose sibling married [Richard Roxburgh] and [Leena Chandavarkar]",
    "questionPatternModEntities": "Was M2 a cinematographer whose sibling married M0 and M1",
    "questionTemplate": "Was [entity] a [NP_SIMPLE] whose [ROLE_SIMPLE] [VP_SIMPLE] [entity] and [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ns:m.02zl4d .\n?x0 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ns:m.0cd7g0 .\nFILTER ( ?x0 != ns:m.02zl4d ) .\nFILTER ( ?x0 != ns:m.0cd7g0 ) .\nFILTER ( ns:m.03f22dp != ?x0 ) .\nns:m.03f22dp a ns:film.cinematographer .\nns:m.03f22dp ns:people.person.sibling_s/ns:people.sibling_relationship.sibling|ns:fictional_universe.fictional_character.siblings/ns:fictional_universe.sibling_relationship_of_fictional_characters.siblings ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x0 != M1 ) .\nFILTER ( M2 != ?x0 ) .\nM2 P1 ?x0 .\nM2 a M3\n}",
    "expectedResponse": "No",
    "recursionDepth": 26
  },
  {
    "questionIdx": 185804,
    "questionWithBrackets": "What was written by, directed by, and executive produced by [Glen Stephens]",
    "questionPatternModEntities": "What was written by , directed by , and executive produced by M0",
    "questionTemplate": "What was [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.film.directed_by ns:m.0fppcqb .\n?x0 ns:film.film.executive_produced_by ns:m.0fppcqb .\n?x0 ns:film.film.written_by ns:m.0fppcqb\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M0 .\n?x0 P2 M0\n}",
    "expectedResponse": "Hoboken Hollow",
    "recursionDepth": 26
  },
  {
    "questionIdx": 149881,
    "questionWithBrackets": "What did a film editor that directed [Sethurama Iyer CBI]'s sequel edit",
    "questionPatternModEntities": "What did a film editor that directed M1 's sequel edit",
    "questionTemplate": "What did a [NP_SIMPLE] that [VP_SIMPLE] [entity] 's [ROLE_SIMPLE] [VP_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.film.edited_by ?x1 .\n?x1 a ns:film.editor .\n?x1 ns:film.director.film ?x2 .\n?x2 ns:film.film.prequel ns:m.07ttd1\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x1 P1 ?x2 .\n?x1 a M0 .\n?x2 P2 M1\n}",
    "expectedResponse": "Evadaithe Nakenti",
    "recursionDepth": 26
  },
  {
    "questionIdx": 79524,
    "questionWithBrackets": "Was [The Big Sleep] executive produced by [Eve Chilton Weinstein]'s male spouse's sibling",
    "questionPatternModEntities": "Was M2 executive produced by M1 's male spouse 's sibling",
    "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] 's [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:people.person.sibling_s/ns:people.sibling_relationship.sibling|ns:fictional_universe.fictional_character.siblings/ns:fictional_universe.sibling_relationship_of_fictional_characters.siblings ?x1 .\n?x1 ns:people.person.gender ns:m.05zppz .\n?x1 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ns:m.0bb_kpq .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x1 != ns:m.0bb_kpq ) .\nns:m.05k7xj ns:film.film.executive_produced_by ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x1 P1 M0 .\n?x1 P2 M1 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x1 != M1 ) .\nM2 P3 ?x0\n}",
    "expectedResponse": "No",
    "recursionDepth": 26
  },
  {
    "questionIdx": 202378,
    "questionWithBrackets": "Which film distributor employed [Above All Else in the World]'s executive producer, writer, and director",
    "questionPatternModEntities": "Which film distributor employed M1 's executive producer , writer , and director",
    "questionTemplate": "Which [NP_SIMPLE] [VP_SIMPLE] [entity] 's [ROLE_SIMPLE] , [ROLE_SIMPLE] , and [ROLE_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:film.film_distributor .\n?x0 ns:business.employer.employees/ns:business.employment_tenure.person ?x1 .\n?x1 ns:film.director.film ns:m.010s98f4 .\n?x1 ns:film.producer.films_executive_produced ns:m.010s98f4 .\n?x1 ns:film.writer.film ns:m.010s98f4\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 a M0 .\n?x1 P1 M1 .\n?x1 P2 M1 .\n?x1 P3 M1\n}",
    "expectedResponse": "Universum Film AG",
    "recursionDepth": 26
  },
  {
    "questionIdx": 74515,
    "questionWithBrackets": "Was [Robert Shaye] an actor that a film's producer employed",
    "questionPatternModEntities": "Was M1 a actor that a film 's producer employed",
    "questionTemplate": "Was [entity] a [NP_SIMPLE] that a [NP_SIMPLE] 's [ROLE_SIMPLE] [VP_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.producer.film|ns:film.production_company.films ?x1 .\n?x1 a ns:film.film .\nns:m.027ndl1 a ns:film.actor .\nns:m.027ndl1 ns:people.person.employment_history/ns:business.employment_tenure.company ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x1 a M0 .\nM1 P1 ?x0 .\nM1 a M2\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 26
  },
  {
    "questionIdx": 184826,
    "questionWithBrackets": "What was written by [Satyajit Ray] and written by [Mahananda Bandyopadhyay]'s child",
    "questionPatternModEntities": "What was written by M0 and written by M1 's child",
    "questionTemplate": "What was [VP_SIMPLE] by [entity] and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.film.written_by ?x1 .\n?x0 ns:film.film.written_by ns:m.071xj .\n?x1 ns:people.person.parents|ns:fictional_universe.fictional_character.parents|ns:organization.organization.parent/ns:organization.organization_relationship.parent ns:m.0w_lfqj\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P0 M0 .\n?x1 P1 M1\n}",
    "expectedResponse": "Distant Thunder",
    "recursionDepth": 26
  },
  {
    "questionIdx": 179858,
    "questionWithBrackets": "What was founded by [Mary Pickford] and founded by [The Valet's Wife]'s writer",
    "questionPatternModEntities": "What was founded by M0 and founded by M1 's writer",
    "questionTemplate": "What was [VP_SIMPLE] by [entity] and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:organization.organization.founders ?x1 .\n?x0 ns:organization.organization.founders ns:m.04rfq .\n?x1 ns:film.writer.film ns:m.0zwjg3f\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P0 M0 .\n?x1 P1 M1\n}",
    "expectedResponse": "United Artists",
    "recursionDepth": 26
  },
  {
    "questionIdx": 171174,
    "questionWithBrackets": "What was directed by and executive produced by a sibling of [Talia Shire]",
    "questionPatternModEntities": "What was directed by and executive produced by a sibling of M0",
    "questionTemplate": "What was [VP_SIMPLE] by and [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.film.directed_by ?x1 .\n?x0 ns:film.film.executive_produced_by ?x1 .\n?x1 ns:people.person.sibling_s/ns:people.sibling_relationship.sibling|ns:fictional_universe.fictional_character.siblings/ns:fictional_universe.sibling_relationship_of_fictional_characters.siblings ns:m.01gw4f .\nFILTER ( ?x1 != ns:m.01gw4f )\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x1 P2 M0 .\nFILTER ( ?x1 != M0 )\n}",
    "expectedResponse": "Rumble Fish",
    "recursionDepth": 26
  },
  {
    "questionIdx": 202346,
    "questionWithBrackets": "Which film distributor did [The Idle Class]'s producer, editor, and writer found",
    "questionPatternModEntities": "Which film distributor did M1 's producer , editor , and writer found",
    "questionTemplate": "Which [NP_SIMPLE] did [entity] 's [ROLE_SIMPLE] , [ROLE_SIMPLE] , and [ROLE_SIMPLE] [VP_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:film.film_distributor .\n?x0 ns:organization.organization.founders ?x1 .\n?x1 ns:film.editor.film ns:m.07n76l .\n?x1 ns:film.producer.film|ns:film.production_company.films ns:m.07n76l .\n?x1 ns:film.writer.film ns:m.07n76l\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 a M0 .\n?x1 P1 M1 .\n?x1 P2 M1 .\n?x1 P3 M1\n}",
    "expectedResponse": "United Artists",
    "recursionDepth": 26
  },
  {
    "questionIdx": 184151,
    "questionWithBrackets": "What was written by [Corrado Pallenberg]'s child and written by [William Goodhart]",
    "questionPatternModEntities": "What was written by M1 's child and written by M0",
    "questionTemplate": "What was [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] and [VP_SIMPLE] by [entity]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.film.written_by ?x1 .\n?x0 ns:film.film.written_by ns:m.0jx_1b .\n?x1 ns:people.person.parents|ns:fictional_universe.fictional_character.parents|ns:organization.organization.parent/ns:organization.organization_relationship.parent ns:m.0c48r8_\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P0 M0 .\n?x1 P1 M1\n}",
    "expectedResponse": "Exorcist II: The Heretic",
    "recursionDepth": 26
  },
  {
    "questionIdx": 154412,
    "questionWithBrackets": "What female film director did an Italian film editor influence",
    "questionPatternModEntities": "What female film director did a Italian film editor influence",
    "questionTemplate": "What [ADJECTIVE_SIMPLE] [NP_SIMPLE] did a [ADJECTIVE_SIMPLE] [NP_SIMPLE] [VP_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:film.director .\n?x0 ns:influence.influence_node.influenced_by ?x1 .\n?x0 ns:people.person.gender ns:m.02zsn .\n?x1 a ns:film.editor .\n?x1 ns:people.person.nationality ns:m.03rjj\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 M1 .\n?x0 a M0 .\n?x1 P2 M3 .\n?x1 a M2\n}",
    "expectedResponse": "Catherine Breillat",
    "recursionDepth": 26
  },
  {
    "questionIdx": 20162,
    "questionWithBrackets": "Did [Suzanne Belperron] influence an Italian costume designer of [Shades of Romona] and [Every Day's a Holiday]",
    "questionPatternModEntities": "Did M3 influence a Italian costume designer of M0 and M1",
    "questionTemplate": "Did [entity] [VP_SIMPLE] a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] and [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.film_costumer_designer.costume_design_for_film ns:m.03h23z5 .\n?x0 ns:film.film_costumer_designer.costume_design_for_film ns:m.05nc_d1 .\n?x0 ns:people.person.nationality ns:m.03rjj .\nns:m.0j9p7g9 ns:influence.influence_node.influenced ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P1 M2 .\nM3 P2 ?x0\n}",
    "expectedResponse": "No",
    "recursionDepth": 26
  },
  {
    "questionIdx": 203431,
    "questionWithBrackets": "Which film editor was influenced by and married a film producer",
    "questionPatternModEntities": "Which film editor was influenced by and married a film producer",
    "questionTemplate": "Which [NP_SIMPLE] was [VP_SIMPLE] by and [VP_SIMPLE] a [NP_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:film.editor .\n?x0 ns:influence.influence_node.influenced_by ?x1 .\n?x0 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ?x1 .\n?x1 a ns:film.producer .\nFILTER ( ?x0 != ?x1 )\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 a M0 .\n?x1 a M1 .\nFILTER ( ?x0 != ?x1 )\n}",
    "expectedResponse": "Agn\u00e8s Varda",
    "recursionDepth": 26
  },
  {
    "questionIdx": 226509,
    "questionWithBrackets": "Who was a French character that [A Nightmare] was produced by",
    "questionPatternModEntities": "Who was a French character that M3 was produced by",
    "questionTemplate": "Who was a [ADJECTIVE_SIMPLE] [NP_SIMPLE] that [entity] was [VP_SIMPLE] by",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:fictional_universe.fictional_character .\n?x0 a ns:people.person .\n?x0 ns:film.producer.film|ns:film.production_company.films ns:m.0j9ljbs .\n?x0 ns:people.person.nationality ns:m.0f8l9c\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M2 .\n?x0 P1 M3 .\n?x0 a M0 .\n?x0 a M1\n}",
    "expectedResponse": "Georges M\u00e9li\u00e8s",
    "recursionDepth": 26
  },
  {
    "questionIdx": 170707,
    "questionWithBrackets": "What was directed by a costume designer and executive produced by [Lalji Mehrotra]",
    "questionPatternModEntities": "What was directed by a costume designer and executive produced by M0",
    "questionTemplate": "What was [VP_SIMPLE] by a [NP_SIMPLE] and [VP_SIMPLE] by [entity]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.film.directed_by ?x1 .\n?x0 ns:film.film.executive_produced_by ns:m.0zc1_7y .\n?x1 a ns:film.film_costumer_designer\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 ?x1 .\n?x1 a M1\n}",
    "expectedResponse": "Joi Baba Felunath",
    "recursionDepth": 26
  },
  {
    "questionIdx": 24587,
    "questionWithBrackets": "Did [WWF: King of the Ring 2001] star a Canadian employee of [WWE] and [New Japan Pro Wrestling]",
    "questionPatternModEntities": "Did M3 star a Canadian employee of M0 and M1",
    "questionTemplate": "Did [entity] [VP_SIMPLE] a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] and [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:people.person.employment_history/ns:business.employment_tenure.company ns:m.02z3y1 .\n?x0 ns:people.person.employment_history/ns:business.employment_tenure.company ns:m.0gy1_ .\n?x0 ns:people.person.nationality ns:m.0d060g .\nns:m.0crrqqw ns:film.film.starring/ns:film.performance.actor ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P1 M2 .\nM3 P2 ?x0\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 26
  },
  {
    "questionIdx": 107538,
    "questionWithBrackets": "Was an American sibling of [Robert Todd Williams] influenced by an actor",
    "questionPatternModEntities": "Was a American sibling of M0 influenced by a actor",
    "questionTemplate": "Was a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] [VP_SIMPLE] by a [NP_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:influence.influence_node.influenced_by ?x1 .\n?x0 ns:people.person.nationality ns:m.09c7w0 .\n?x0 ns:people.person.sibling_s/ns:people.sibling_relationship.sibling|ns:fictional_universe.fictional_character.siblings/ns:fictional_universe.sibling_relationship_of_fictional_characters.siblings ns:m.02_9fxj .\n?x1 a ns:film.actor .\nFILTER ( ?x0 != ns:m.02_9fxj )\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 ?x1 .\n?x0 P2 M1 .\n?x1 a M2 .\nFILTER ( ?x0 != M0 )\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 26
  },
  {
    "questionIdx": 42645,
    "questionWithBrackets": "Did an employee of [The Gilded Lily]'s distributor and producer direct [Don Juan Quilligan]",
    "questionPatternModEntities": "Did a employee of M1 's distributor and producer direct M0",
    "questionTemplate": "Did a [ROLE_SIMPLE] of [entity] 's [ROLE_SIMPLE] and [ROLE_SIMPLE] [VP_SIMPLE] [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.director.film ns:m.09rr2y4 .\n?x0 ns:people.person.employment_history/ns:business.employment_tenure.company ?x1 .\n?x1 ns:film.film_distributor.films_distributed/ns:film.film_film_distributor_relationship.film ns:m.02pt1r_ .\n?x1 ns:film.producer.film|ns:film.production_company.films ns:m.02pt1r_\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x0 P1 M0 .\n?x1 P2 M1 .\n?x1 P3 M1\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 26
  },
  {
    "questionIdx": 101981,
    "questionWithBrackets": "Was a male child of a female person [Bob Metzger]",
    "questionPatternModEntities": "Was a male child of a female person M2",
    "questionTemplate": "Was a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of a [ADJECTIVE_SIMPLE] [NP_SIMPLE] [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 a ns:people.person .\n?x0 ns:people.person.gender ns:m.02zsn .\nns:m.0vc5rrz ns:people.person.gender ns:m.05zppz .\nns:m.0vc5rrz ns:people.person.parents|ns:fictional_universe.fictional_character.parents|ns:organization.organization.parent/ns:organization.organization_relationship.parent ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M1 .\n?x0 a M0 .\nM2 P0 M3 .\nM2 P1 ?x0\n}",
    "expectedResponse": "No",
    "recursionDepth": 26
  },
  {
    "questionIdx": 63955,
    "questionWithBrackets": "Was [Lawrence Durrell] a screenwriter whose sibling founded [Mauritian Wildlife Foundation] and [Amblin Entertainment]",
    "questionPatternModEntities": "Was M2 a screenwriter whose sibling founded M0 and M1",
    "questionTemplate": "Was [entity] a [NP_SIMPLE] whose [ROLE_SIMPLE] [VP_SIMPLE] [entity] and [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:organization.organization_founder.organizations_founded ns:m.030_1_ .\n?x0 ns:organization.organization_founder.organizations_founded ns:m.08pg85 .\nFILTER ( ns:m.0hb1b != ?x0 ) .\nns:m.0hb1b a ns:film.writer .\nns:m.0hb1b ns:people.person.sibling_s/ns:people.sibling_relationship.sibling|ns:fictional_universe.fictional_character.siblings/ns:fictional_universe.sibling_relationship_of_fictional_characters.siblings ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\nFILTER ( M2 != ?x0 ) .\nM2 P1 ?x0 .\nM2 a M3\n}",
    "expectedResponse": "No",
    "recursionDepth": 26
  },
  {
    "questionIdx": 74720,
    "questionWithBrackets": "Was [Romy Schneider] [Sacha Darwin]'s German French female sibling",
    "questionPatternModEntities": "Was M0 M1 's German French female sibling",
    "questionTemplate": "Was [entity] [entity] 's [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\nFILTER ( ns:m.0144k5 != ns:m.0gbx3w2 ) .\nns:m.0144k5 ns:people.person.gender ns:m.02zsn .\nns:m.0144k5 ns:people.person.nationality ns:m.0345h .\nns:m.0144k5 ns:people.person.nationality ns:m.0f8l9c .\nns:m.0144k5 ns:people.person.sibling_s/ns:people.sibling_relationship.sibling|ns:fictional_universe.fictional_character.siblings/ns:fictional_universe.sibling_relationship_of_fictional_characters.siblings ns:m.0gbx3w2\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\nFILTER ( M0 != M1 ) .\nM0 P0 M1 .\nM0 P1 M2 .\nM0 P1 M3 .\nM0 P2 M4\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 26
  },
  {
    "questionIdx": 38280,
    "questionWithBrackets": "Did a prequel of [Chasing Amy] star [POW! Entertainment]'s founder and employee",
    "questionPatternModEntities": "Did a prequel of M0 star M1 's founder and employee",
    "questionTemplate": "Did a [ROLE_SIMPLE] of [entity] [VP_SIMPLE] [entity] 's [ROLE_SIMPLE] and [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.film.sequel ns:m.0gd92 .\n?x0 ns:film.film.starring/ns:film.performance.actor ?x1 .\n?x1 ns:organization.organization_founder.organizations_founded ns:m.026y0vz .\n?x1 ns:people.person.employment_history/ns:business.employment_tenure.company ns:m.026y0vz\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 ?x1 .\n?x1 P2 M1 .\n?x1 P3 M1\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 26
  },
  {
    "questionIdx": 39606,
    "questionWithBrackets": "Did a sibling of [I'm Still Here]'s cinematographer and writer play [Gavin Banek]",
    "questionPatternModEntities": "Did a sibling of M1 's cinematographer and writer play M0",
    "questionTemplate": "Did a [ROLE_SIMPLE] of [entity] 's [ROLE_SIMPLE] and [ROLE_SIMPLE] [VP_SIMPLE] [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.actor.film/ns:film.performance.character ns:m.04ds18y .\n?x0 ns:people.person.sibling_s/ns:people.sibling_relationship.sibling|ns:fictional_universe.fictional_character.siblings/ns:fictional_universe.sibling_relationship_of_fictional_characters.siblings ?x1 .\n?x1 ns:film.cinematographer.film ns:m.0czbf7b .\n?x1 ns:film.writer.film ns:m.0czbf7b .\nFILTER ( ?x0 != ?x1 )\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x0 P1 M0 .\n?x1 P2 M1 .\n?x1 P3 M1 .\nFILTER ( ?x0 != ?x1 )\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 26
  },
  {
    "questionIdx": 221392,
    "questionWithBrackets": "Who married a film director and was influenced by [Robert Benchley]",
    "questionPatternModEntities": "Who married a film director and was influenced by M1",
    "questionTemplate": "Who [VP_SIMPLE] a [NP_SIMPLE] and was [VP_SIMPLE] by [entity]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:people.person .\n?x0 ns:influence.influence_node.influenced_by ns:m.03gph9 .\n?x0 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ?x1 .\n?x1 a ns:film.director .\nFILTER ( ?x0 != ?x1 )\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M1 .\n?x0 P1 ?x1 .\n?x0 a M0 .\n?x1 a M2 .\nFILTER ( ?x0 != ?x1 )\n}",
    "expectedResponse": "Woody Allen",
    "recursionDepth": 26
  },
  {
    "questionIdx": 124563,
    "questionWithBrackets": "Were [Sicily!] and [From Today Until Tomorrow] directed and edited by an actor",
    "questionPatternModEntities": "Were M1 and M2 directed and edited by a actor",
    "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] and [VP_SIMPLE] by a [NP_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 a ns:film.actor .\nns:m.02w_h5y ns:film.film.directed_by ?x0 .\nns:m.02w_h5y ns:film.film.edited_by ?x0 .\nns:m.0bggmkk ns:film.film.directed_by ?x0 .\nns:m.0bggmkk ns:film.film.edited_by ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 a M0 .\nM1 P0 ?x0 .\nM1 P1 ?x0 .\nM2 P0 ?x0 .\nM2 P1 ?x0\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 26
  },
  {
    "questionIdx": 12345,
    "questionWithBrackets": "Did [Kelly Herron] edit [MVP: Most Vertical Primate]'s sequel and edit [Santa Paws 2: The Santa Pups]",
    "questionPatternModEntities": "Did M1 edit M0 's sequel and edit M2",
    "questionTemplate": "Did [entity] [VP_SIMPLE] [entity] 's [ROLE_SIMPLE] and [VP_SIMPLE] [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.film.prequel ns:m.0dh_2c .\nns:m.0jt3xy ns:film.editor.film ?x0 .\nns:m.0jt3xy ns:film.editor.film ns:m.0p2sqrd\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 ?x0 .\nM1 P1 M2\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 26
  },
  {
    "questionIdx": 207966,
    "questionWithBrackets": "Which person married [Little Feet]'s executive producer, editor, and producer",
    "questionPatternModEntities": "Which person married M1 's executive producer , editor , and producer",
    "questionTemplate": "Which [NP_SIMPLE] [VP_SIMPLE] [entity] 's [ROLE_SIMPLE] , [ROLE_SIMPLE] , and [ROLE_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:people.person .\n?x0 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ?x1 .\n?x1 ns:film.editor.film ns:m.0wyn1f2 .\n?x1 ns:film.producer.films_executive_produced ns:m.0wyn1f2 .\n?x1 ns:film.producer.film|ns:film.production_company.films ns:m.0wyn1f2 .\nFILTER ( ?x0 != ?x1 )\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 a M0 .\n?x1 P1 M1 .\n?x1 P2 M1 .\n?x1 P3 M1 .\nFILTER ( ?x0 != ?x1 )\n}",
    "expectedResponse": "Karyn Parsons; Jennifer Beals",
    "recursionDepth": 26
  },
  {
    "questionIdx": 103140,
    "questionWithBrackets": "Was a person an art director that [The Flim-Flam Man]'s distributor employed",
    "questionPatternModEntities": "Was a person a art director that M2 's distributor employed",
    "questionTemplate": "Was a [NP_SIMPLE] a [NP_SIMPLE] that [entity] 's [ROLE_SIMPLE] [VP_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 a ns:film.film_art_director .\n?x0 a ns:people.person .\n?x0 ns:people.person.employment_history/ns:business.employment_tenure.company ?x1 .\n?x1 ns:film.film_distributor.films_distributed/ns:film.film_film_distributor_relationship.film ns:m.0b8l1g\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x0 a M0 .\n?x0 a M1 .\n?x1 P1 M2\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 26
  },
  {
    "questionIdx": 47567,
    "questionWithBrackets": "Was [Benny Jensen] [Oliver de Groot]'s Dutch female British sibling",
    "questionPatternModEntities": "Was M0 M1 's Dutch female British sibling",
    "questionTemplate": "Was [entity] [entity] 's [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\nFILTER ( ns:m.0vvc1fn != ns:m.0jtpdk8 ) .\nns:m.0vvc1fn ns:people.person.gender ns:m.02zsn .\nns:m.0vvc1fn ns:people.person.nationality ns:m.059j2 .\nns:m.0vvc1fn ns:people.person.nationality ns:m.07ssc .\nns:m.0vvc1fn ns:people.person.sibling_s/ns:people.sibling_relationship.sibling|ns:fictional_universe.fictional_character.siblings/ns:fictional_universe.sibling_relationship_of_fictional_characters.siblings ns:m.0jtpdk8\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\nFILTER ( M0 != M1 ) .\nM0 P0 M1 .\nM0 P1 M2 .\nM0 P1 M3 .\nM0 P2 M4\n}",
    "expectedResponse": "No",
    "recursionDepth": 26
  },
  {
    "questionIdx": 163732,
    "questionWithBrackets": "What production company did [Julie & Jack]'s costume designer, star, and art director found",
    "questionPatternModEntities": "What production company did M1 's costume designer , star , and art director found",
    "questionTemplate": "What [NP_SIMPLE] did [entity] 's [ROLE_SIMPLE] , [ROLE_SIMPLE] , and [ROLE_SIMPLE] [VP_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:film.production_company .\n?x0 ns:organization.organization.founders ?x1 .\n?x1 ns:film.actor.film/ns:film.performance.film ns:m.0crtjmg .\n?x1 ns:film.film_art_director.films_art_directed ns:m.0crtjmg .\n?x1 ns:film.film_costumer_designer.costume_design_for_film ns:m.0crtjmg\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 a M0 .\n?x1 P1 M1 .\n?x1 P2 M1 .\n?x1 P3 M1\n}",
    "expectedResponse": "Moviehead Pictures",
    "recursionDepth": 26
  },
  {
    "questionIdx": 4461,
    "questionWithBrackets": "Did [Columbia University] employ [Violet & Daisy]'s producer and employ [Robert C. Schnitzer]",
    "questionPatternModEntities": "Did M1 employ M0 's producer and employ M2",
    "questionTemplate": "Did [entity] [VP_SIMPLE] [entity] 's [ROLE_SIMPLE] and [VP_SIMPLE] [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.producer.film|ns:film.production_company.films ns:m.0dsdxtp .\nns:m.01w5m ns:business.employer.employees/ns:business.employment_tenure.person ?x0 .\nns:m.01w5m ns:business.employer.employees/ns:business.employment_tenure.person ns:m.03h59gt\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 ?x0 .\nM1 P1 M2\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 26
  },
  {
    "questionIdx": 146185,
    "questionWithBrackets": "What did [Rose Castorini]'s actor executive produce and [D.G. Brock] direct",
    "questionPatternModEntities": "What did M1 's actor executive produce and M0 direct",
    "questionTemplate": "What did [entity] 's [ROLE_SIMPLE] [VP_SIMPLE] and [entity] [VP_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.film.directed_by ns:m.0s965f_ .\n?x0 ns:film.film.executive_produced_by ?x1 .\n?x1 ns:film.actor.film/ns:film.performance.character ns:m.0t4vgd_\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 M0 .\n?x1 P2 M1\n}",
    "expectedResponse": "Montana Amazon",
    "recursionDepth": 26
  },
  {
    "questionIdx": 185733,
    "questionWithBrackets": "What was written by and executive produced by a sibling of [Bobby Farrelly]",
    "questionPatternModEntities": "What was written by and executive produced by a sibling of M0",
    "questionTemplate": "What was [VP_SIMPLE] by and [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.film.executive_produced_by ?x1 .\n?x0 ns:film.film.written_by ?x1 .\n?x1 ns:people.person.sibling_s/ns:people.sibling_relationship.sibling|ns:fictional_universe.fictional_character.siblings/ns:fictional_universe.sibling_relationship_of_fictional_characters.siblings ns:m.03ysmg .\nFILTER ( ?x1 != ns:m.03ysmg )\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x1 P2 M0 .\nFILTER ( ?x1 != M0 )\n}",
    "expectedResponse": "There's Something About Mary",
    "recursionDepth": 26
  },
  {
    "questionIdx": 70012,
    "questionWithBrackets": "Was [Omer Hussain] a male person that [My Lady's Lips] was distributed by",
    "questionPatternModEntities": "Was M0 a male person that M2 was distributed by",
    "questionTemplate": "Was [entity] a [ADJECTIVE_SIMPLE] [NP_SIMPLE] that [entity] was [VP_SIMPLE] by",
    "sparql": "SELECT count(*) WHERE {\nns:m.02668hm a ns:people.person .\nns:m.02668hm ns:film.film_distributor.films_distributed/ns:film.film_film_distributor_relationship.film ns:m.0h_cb4j .\nns:m.02668hm ns:people.person.gender ns:m.05zppz\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M2 .\nM0 P1 M3 .\nM0 a M1\n}",
    "expectedResponse": "No",
    "recursionDepth": 26
  },
  {
    "questionIdx": 62220,
    "questionWithBrackets": "Was [Julian de Guzman]'s Dutch male Canadian sibling [Jonathan de Guzm\u00e1n]",
    "questionPatternModEntities": "Was M1 's Dutch male Canadian sibling M0",
    "questionTemplate": "Was [entity] 's [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] [entity]",
    "sparql": "SELECT count(*) WHERE {\nFILTER ( ns:m.09k6gb != ns:m.05_y9_ ) .\nns:m.09k6gb ns:people.person.gender ns:m.05zppz .\nns:m.09k6gb ns:people.person.nationality ns:m.059j2 .\nns:m.09k6gb ns:people.person.nationality ns:m.0d060g .\nns:m.09k6gb ns:people.person.sibling_s/ns:people.sibling_relationship.sibling|ns:fictional_universe.fictional_character.siblings/ns:fictional_universe.sibling_relationship_of_fictional_characters.siblings ns:m.05_y9_\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\nFILTER ( M0 != M1 ) .\nM0 P0 M1 .\nM0 P1 M2 .\nM0 P1 M3 .\nM0 P2 M4\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 26
  },
  {
    "questionIdx": 194810,
    "questionWithBrackets": "Which character influenced and was influenced by a person",
    "questionPatternModEntities": "Which character influenced and was influenced by a person",
    "questionTemplate": "Which [NP_SIMPLE] [VP_SIMPLE] and was [VP_SIMPLE] by a [NP_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:fictional_universe.fictional_character .\n?x0 ns:influence.influence_node.influenced ?x1 .\n?x0 ns:influence.influence_node.influenced_by ?x1 .\n?x1 a ns:people.person\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 a M0 .\n?x1 a M1\n}",
    "expectedResponse": "Federico Garc\u00eda Lorca",
    "recursionDepth": 26
  },
  {
    "questionIdx": 100517,
    "questionWithBrackets": "Was a film's costume designer, producer, cinematographer, and executive producer [Charlene Gilbert]",
    "questionPatternModEntities": "Was a film 's costume designer , producer , cinematographer , and executive producer M1",
    "questionTemplate": "Was a [NP_SIMPLE] 's [ROLE_SIMPLE] , [ROLE_SIMPLE] , [ROLE_SIMPLE] , and [ROLE_SIMPLE] [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 a ns:film.film .\nns:m.0c38mtw ns:film.cinematographer.film ?x0 .\nns:m.0c38mtw ns:film.film_costumer_designer.costume_design_for_film ?x0 .\nns:m.0c38mtw ns:film.producer.films_executive_produced ?x0 .\nns:m.0c38mtw ns:film.producer.film|ns:film.production_company.films ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 a M0 .\nM1 P0 ?x0 .\nM1 P1 ?x0 .\nM1 P2 ?x0 .\nM1 P3 ?x0\n}",
    "expectedResponse": "No",
    "recursionDepth": 27
  },
  {
    "questionIdx": 75875,
    "questionWithBrackets": "Was [Sergey Tolstoy] a male person whose sibling influenced [L\u00fc Jiamin]",
    "questionPatternModEntities": "Was M1 a male person whose sibling influenced M0",
    "questionTemplate": "Was [entity] a [ADJECTIVE_SIMPLE] [NP_SIMPLE] whose [ROLE_SIMPLE] [VP_SIMPLE] [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:influence.influence_node.influenced ns:m.03wfl6r .\nFILTER ( ns:m.0rznm24 != ?x0 ) .\nns:m.0rznm24 a ns:people.person .\nns:m.0rznm24 ns:people.person.gender ns:m.05zppz .\nns:m.0rznm24 ns:people.person.sibling_s/ns:people.sibling_relationship.sibling|ns:fictional_universe.fictional_character.siblings/ns:fictional_universe.sibling_relationship_of_fictional_characters.siblings ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( M1 != ?x0 ) .\nM1 P1 ?x0 .\nM1 P2 M3 .\nM1 a M2\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 27
  },
  {
    "questionIdx": 215474,
    "questionWithBrackets": "Who did a German person's German actor marry",
    "questionPatternModEntities": "Who did a German person 's German actor marry",
    "questionTemplate": "Who did a [ADJECTIVE_SIMPLE] [NP_SIMPLE] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] [VP_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:people.person .\n?x0 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ?x1 .\n?x1 ns:film.actor.film/ns:film.performance.character ?x2 .\n?x1 ns:people.person.nationality ns:m.0345h .\n?x2 a ns:people.person .\n?x2 ns:people.person.nationality ns:m.0345h .\nFILTER ( ?x0 != ?x1 )\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 a M0 .\n?x1 P1 M1 .\n?x1 P2 ?x2 .\n?x2 P1 M1 .\n?x2 a M0 .\nFILTER ( ?x0 != ?x1 )\n}",
    "expectedResponse": "Christine Mylius",
    "recursionDepth": 27
  },
  {
    "questionIdx": 2992,
    "questionWithBrackets": "Did [Britain in a Day]'s executive producer executive produce and produce a film",
    "questionPatternModEntities": "Did M0 's executive producer executive produce and produce a film",
    "questionTemplate": "Did [entity] 's [ROLE_SIMPLE] [VP_SIMPLE] and [VP_SIMPLE] a [NP_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.producer.films_executive_produced ?x1 .\n?x0 ns:film.producer.films_executive_produced ns:m.0hgm2hl .\n?x0 ns:film.producer.film|ns:film.production_company.films ?x1 .\n?x1 a ns:film.film\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x0 P0 M0 .\n?x0 P1 ?x1 .\n?x1 a M1\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 27
  },
  {
    "questionIdx": 88378,
    "questionWithBrackets": "Was a Canadian cinematographer whose child directed [Staunton Hill] [George A. Romero]",
    "questionPatternModEntities": "Was a Canadian cinematographer whose child directed M0 M1",
    "questionTemplate": "Was a [ADJECTIVE_SIMPLE] [NP_SIMPLE] whose [ROLE_SIMPLE] [VP_SIMPLE] [entity] [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.director.film ns:m.080g3d4 .\nns:m.01_k1z a ns:film.cinematographer .\nns:m.01_k1z ns:people.person.children|ns:fictional_universe.fictional_character.children|ns:organization.organization.child/ns:organization.organization_relationship.child ?x0 .\nns:m.01_k1z ns:people.person.nationality ns:m.0d060g\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 M3 .\nM1 P2 ?x0 .\nM1 a M2\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 27
  },
  {
    "questionIdx": 145827,
    "questionWithBrackets": "What did [Philom\u00e8ne Esposito]'s French child direct and edit",
    "questionPatternModEntities": "What did M1 's French child direct and edit",
    "questionTemplate": "What did [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] [VP_SIMPLE] and [VP_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.film.directed_by ?x1 .\n?x0 ns:film.film.edited_by ?x1 .\n?x1 ns:people.person.nationality ns:m.0f8l9c .\n?x1 ns:people.person.parents|ns:fictional_universe.fictional_character.parents|ns:organization.organization.parent/ns:organization.organization_relationship.parent ns:g.122zk1hl\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x1 P2 M0 .\n?x1 P3 M1\n}",
    "expectedResponse": "Super Trash",
    "recursionDepth": 27
  },
  {
    "questionIdx": 5589,
    "questionWithBrackets": "Did [Deep Burial]'s German executive producer marry a character's actor",
    "questionPatternModEntities": "Did M0 's German executive producer marry a character 's actor",
    "questionTemplate": "Did [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] [VP_SIMPLE] a [NP_SIMPLE] 's [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.producer.films_executive_produced ns:m.0vp1ws_ .\n?x0 ns:people.person.nationality ns:m.0345h .\n?x0 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ?x1 .\n?x1 ns:film.actor.film/ns:film.performance.character ?x2 .\n?x2 a ns:fictional_universe.fictional_character .\nFILTER ( ?x0 != ?x1 )\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P2 ?x1 .\n?x1 P3 ?x2 .\n?x2 a M2 .\nFILTER ( ?x0 != ?x1 )\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 27
  },
  {
    "questionIdx": 88946,
    "questionWithBrackets": "Was a Chinese person that founded [Xstream Pictures] a film editor",
    "questionPatternModEntities": "Was a Chinese person that founded M2 a film editor",
    "questionTemplate": "Was a [ADJECTIVE_SIMPLE] [NP_SIMPLE] that [VP_SIMPLE] [entity] a [NP_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 a ns:film.editor .\n?x0 a ns:people.person .\n?x0 ns:organization.organization_founder.organizations_founded ns:m.03qjzv2 .\n?x0 ns:people.person.nationality ns:m.0d05w3\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M2 .\n?x0 P1 M3 .\n?x0 a M0 .\n?x0 a M1\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 27
  },
  {
    "questionIdx": 226152,
    "questionWithBrackets": "Who was a Dutch cinematographer whose sibling married [Fons Rademakers]",
    "questionPatternModEntities": "Who was a Dutch cinematographer whose sibling married M3",
    "questionTemplate": "Who was a [ADJECTIVE_SIMPLE] [NP_SIMPLE] whose [ROLE_SIMPLE] [VP_SIMPLE] [entity]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:film.cinematographer .\n?x0 a ns:people.person .\n?x0 ns:people.person.nationality ns:m.059j2 .\n?x0 ns:people.person.sibling_s/ns:people.sibling_relationship.sibling|ns:fictional_universe.fictional_character.siblings/ns:fictional_universe.sibling_relationship_of_fictional_characters.siblings ?x1 .\n?x1 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ns:m.0k4c4h .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x1 != ns:m.0k4c4h )\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 M2 .\n?x0 a M0 .\n?x0 a M1 .\n?x1 P2 M3 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x1 != M3 )\n}",
    "expectedResponse": "Louis van Gasteren",
    "recursionDepth": 27
  },
  {
    "questionIdx": 156177,
    "questionWithBrackets": "What film distributor did a film producer found and [Jack L. Warner] found",
    "questionPatternModEntities": "What film distributor did a film producer found and M1 found",
    "questionTemplate": "What [NP_SIMPLE] did a [NP_SIMPLE] [VP_SIMPLE] and [entity] [VP_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:film.film_distributor .\n?x0 ns:organization.organization.founders ?x1 .\n?x0 ns:organization.organization.founders ns:m.0m593 .\n?x1 a ns:film.producer\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P0 M1 .\n?x0 a M0 .\n?x1 a M2\n}",
    "expectedResponse": "Warner Bros. Entertainment",
    "recursionDepth": 27
  },
  {
    "questionIdx": 89617,
    "questionWithBrackets": "Was a French film producer that [Irina Martynova] married a film director",
    "questionPatternModEntities": "Was a French film producer that M3 married a film director",
    "questionTemplate": "Was a [ADJECTIVE_SIMPLE] [NP_SIMPLE] that [entity] [VP_SIMPLE] a [NP_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 a ns:film.director .\n?x0 a ns:film.producer .\n?x0 ns:people.person.nationality ns:m.0f8l9c .\n?x0 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ns:m.0j10qq6 .\nFILTER ( ?x0 != ns:m.0j10qq6 )\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M2 .\n?x0 P1 M3 .\n?x0 a M0 .\n?x0 a M1 .\nFILTER ( ?x0 != M3 )\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 27
  },
  {
    "questionIdx": 127898,
    "questionWithBrackets": "Were [The Tale of Little Puppetboy] and [Mass for the Dakota Sioux] edited by and directed by a film director",
    "questionPatternModEntities": "Were M1 and M2 edited by and directed by a film director",
    "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by and [VP_SIMPLE] by a [NP_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 a ns:film.director .\nns:m.0fq6nlz ns:film.film.directed_by ?x0 .\nns:m.0fq6nlz ns:film.film.edited_by ?x0 .\nns:m.0jwgnr_ ns:film.film.directed_by ?x0 .\nns:m.0jwgnr_ ns:film.film.edited_by ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 a M0 .\nM1 P0 ?x0 .\nM1 P1 ?x0 .\nM2 P0 ?x0 .\nM2 P1 ?x0\n}",
    "expectedResponse": "No",
    "recursionDepth": 27
  },
  {
    "questionIdx": 158788,
    "questionWithBrackets": "What film was edited by [Grandmother Mambo]'s cinematographer, art director, and director",
    "questionPatternModEntities": "What film was edited by M1 's cinematographer , art director , and director",
    "questionTemplate": "What [NP_SIMPLE] was [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] , [ROLE_SIMPLE] , and [ROLE_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:film.film .\n?x0 ns:film.film.edited_by ?x1 .\n?x1 ns:film.cinematographer.film ns:m.0rhnj3b .\n?x1 ns:film.director.film ns:m.0rhnj3b .\n?x1 ns:film.film_art_director.films_art_directed ns:m.0rhnj3b\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 a M0 .\n?x1 P1 M1 .\n?x1 P2 M1 .\n?x1 P3 M1\n}",
    "expectedResponse": "Grandmother Mambo; \u00a1Dest\u00e1palo!",
    "recursionDepth": 27
  },
  {
    "questionIdx": 62938,
    "questionWithBrackets": "Was [Kiefer Sutherland] a Canadian person whose parent played [Archbishop Hume]",
    "questionPatternModEntities": "Was M1 a Canadian person whose parent played M0",
    "questionTemplate": "Was [entity] a [ADJECTIVE_SIMPLE] [NP_SIMPLE] whose [ROLE_SIMPLE] [VP_SIMPLE] [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.actor.film/ns:film.performance.character ns:m.0h1yqd9 .\nns:m.01rzqj a ns:people.person .\nns:m.01rzqj ns:people.person.nationality ns:m.0d060g .\nns:m.01rzqj ns:people.person.parents|ns:fictional_universe.fictional_character.parents|ns:organization.organization.parent/ns:organization.organization_relationship.parent ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 M3 .\nM1 P2 ?x0 .\nM1 a M2\n}",
    "expectedResponse": "No",
    "recursionDepth": 27
  },
  {
    "questionIdx": 100327,
    "questionWithBrackets": "Was a film's art director, star, cinematographer, and director [Romke Jan Wijmenga]",
    "questionPatternModEntities": "Was a film 's art director , star , cinematographer , and director M1",
    "questionTemplate": "Was a [NP_SIMPLE] 's [ROLE_SIMPLE] , [ROLE_SIMPLE] , [ROLE_SIMPLE] , and [ROLE_SIMPLE] [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 a ns:film.film .\nns:m.03j1v_q ns:film.actor.film/ns:film.performance.film ?x0 .\nns:m.03j1v_q ns:film.cinematographer.film ?x0 .\nns:m.03j1v_q ns:film.director.film ?x0 .\nns:m.03j1v_q ns:film.film_art_director.films_art_directed ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 a M0 .\nM1 P0 ?x0 .\nM1 P1 ?x0 .\nM1 P2 ?x0 .\nM1 P3 ?x0\n}",
    "expectedResponse": "No",
    "recursionDepth": 27
  },
  {
    "questionIdx": 142267,
    "questionWithBrackets": "What did [Beacon Pictures]'s founder executive produce and [Eric Newman] executive produce",
    "questionPatternModEntities": "What did M1 's founder executive produce and M0 executive produce",
    "questionTemplate": "What did [entity] 's [ROLE_SIMPLE] [VP_SIMPLE] and [entity] [VP_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.film.executive_produced_by ?x1 .\n?x0 ns:film.film.executive_produced_by ns:m.0jx077 .\n?x1 ns:organization.organization_founder.organizations_founded ns:m.07htd_\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P0 M0 .\n?x1 P1 M1\n}",
    "expectedResponse": "The Emperor's Club",
    "recursionDepth": 27
  },
  {
    "questionIdx": 37790,
    "questionWithBrackets": "Did a person influence [Louis C.K.: Chewed Up]'s director, editor, and executive producer",
    "questionPatternModEntities": "Did a person influence M1 's director , editor , and executive producer",
    "questionTemplate": "Did a [NP_SIMPLE] [VP_SIMPLE] [entity] 's [ROLE_SIMPLE] , [ROLE_SIMPLE] , and [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 a ns:people.person .\n?x0 ns:influence.influence_node.influenced ?x1 .\n?x1 ns:film.director.film ns:m.0cr_ltd .\n?x1 ns:film.editor.film ns:m.0cr_ltd .\n?x1 ns:film.producer.films_executive_produced ns:m.0cr_ltd\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x0 a M0 .\n?x1 P1 M1 .\n?x1 P2 M1 .\n?x1 P3 M1\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 27
  },
  {
    "questionIdx": 161615,
    "questionWithBrackets": "What person did [Lupe Fiasco] influence and a film producer influence",
    "questionPatternModEntities": "What person did M1 influence and a film producer influence",
    "questionTemplate": "What [NP_SIMPLE] did [entity] [VP_SIMPLE] and a [NP_SIMPLE] [VP_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:people.person .\n?x0 ns:influence.influence_node.influenced_by ?x1 .\n?x0 ns:influence.influence_node.influenced_by ns:m.01wn718 .\n?x1 a ns:film.producer\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P0 M1 .\n?x0 a M0 .\n?x1 a M2\n}",
    "expectedResponse": "Garret Schuelke",
    "recursionDepth": 27
  },
  {
    "questionIdx": 146531,
    "questionWithBrackets": "What did [Stefan G\u00e4rtner] executive produce and [Prisca Waldleitner]'s sibling executive produce",
    "questionPatternModEntities": "What did M0 executive produce and M1 's sibling executive produce",
    "questionTemplate": "What did [entity] [VP_SIMPLE] and [entity] 's [ROLE_SIMPLE] [VP_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.film.executive_produced_by ?x1 .\n?x0 ns:film.film.executive_produced_by ns:m.0p9pgyh .\n?x1 ns:people.person.sibling_s/ns:people.sibling_relationship.sibling|ns:fictional_universe.fictional_character.siblings/ns:fictional_universe.sibling_relationship_of_fictional_characters.siblings ns:m.0hn_lt0 .\nFILTER ( ?x1 != ns:m.0hn_lt0 )\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P0 M0 .\n?x1 P1 M1 .\nFILTER ( ?x1 != M1 )\n}",
    "expectedResponse": "Der Schuh des Manitu",
    "recursionDepth": 27
  },
  {
    "questionIdx": 22651,
    "questionWithBrackets": "Did [The Radical Romantic] and [Bunker 6] star a Canadian costume designer's child",
    "questionPatternModEntities": "Did M2 and M3 star a Canadian costume designer 's child",
    "questionTemplate": "Did [entity] and [entity] [VP_SIMPLE] a [ADJECTIVE_SIMPLE] [NP_SIMPLE] 's [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:people.person.parents|ns:fictional_universe.fictional_character.parents|ns:organization.organization.parent/ns:organization.organization_relationship.parent ?x1 .\n?x1 a ns:film.film_costumer_designer .\n?x1 ns:people.person.nationality ns:m.0d060g .\nns:m.010bxf_k ns:film.film.starring/ns:film.performance.actor ?x0 .\nns:m.0zrgtjz ns:film.film.starring/ns:film.performance.actor ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x1 P1 M1 .\n?x1 a M0 .\nM2 P2 ?x0 .\nM3 P2 ?x0\n}",
    "expectedResponse": "No",
    "recursionDepth": 27
  },
  {
    "questionIdx": 177856,
    "questionWithBrackets": "What was executive produced by a film producer and executive produced by [Jonathan Shestack]",
    "questionPatternModEntities": "What was executive produced by a film producer and executive produced by M0",
    "questionTemplate": "What was [VP_SIMPLE] by a [NP_SIMPLE] and [VP_SIMPLE] by [entity]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.film.executive_produced_by ?x1 .\n?x0 ns:film.film.executive_produced_by ns:m.0jt49g .\n?x1 a ns:film.producer\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P0 M0 .\n?x1 a M1\n}",
    "expectedResponse": "Waiting...; Open Grave",
    "recursionDepth": 27
  },
  {
    "questionIdx": 191130,
    "questionWithBrackets": "Which Japanese screenwriter did [Kusuo Yamada]'s female child marry",
    "questionPatternModEntities": "Which Japanese screenwriter did M3 's female child marry",
    "questionTemplate": "Which [ADJECTIVE_SIMPLE] [NP_SIMPLE] did [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] [VP_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:film.writer .\n?x0 ns:people.person.nationality ns:m.03_3d .\n?x0 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ?x1 .\n?x1 ns:people.person.gender ns:m.02zsn .\n?x1 ns:people.person.parents|ns:fictional_universe.fictional_character.parents|ns:organization.organization.parent/ns:organization.organization_relationship.parent ns:m.0hn_jqh .\nFILTER ( ?x0 != ?x1 )\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M1 .\n?x0 P1 ?x1 .\n?x0 a M0 .\n?x1 P2 M2 .\n?x1 P3 M3 .\nFILTER ( ?x0 != ?x1 )\n}",
    "expectedResponse": "Teinosuke Kinugasa",
    "recursionDepth": 27
  },
  {
    "questionIdx": 114237,
    "questionWithBrackets": "Were [Bret Easton Ellis] and [William Styron] influenced by [Gustave Flaubert] and influenced by [James Joyce]",
    "questionPatternModEntities": "Were M0 and M3 influenced by M1 and influenced by M2",
    "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by [entity] and [VP_SIMPLE] by [entity]",
    "sparql": "SELECT count(*) WHERE {\nns:m.01306d ns:influence.influence_node.influenced_by ns:m.0379s .\nns:m.01306d ns:influence.influence_node.influenced_by ns:m.03_87 .\nns:m.018slq ns:influence.influence_node.influenced_by ns:m.0379s .\nns:m.018slq ns:influence.influence_node.influenced_by ns:m.03_87\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM3 P0 M1 .\nM3 P0 M2\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 27
  },
  {
    "questionIdx": 41360,
    "questionWithBrackets": "Did an actor of a sibling of [Tweedledum] influence [Tim Young] and [Robin Williams]",
    "questionPatternModEntities": "Did a actor of a sibling of M2 influence M0 and M1",
    "questionTemplate": "Did a [ROLE_SIMPLE] of a [ROLE_SIMPLE] of [entity] [VP_SIMPLE] [entity] and [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.actor.film/ns:film.performance.character ?x1 .\n?x0 ns:influence.influence_node.influenced ns:m.0dzf_ .\n?x0 ns:influence.influence_node.influenced ns:m.0h_b2sk .\n?x1 ns:people.person.sibling_s/ns:people.sibling_relationship.sibling|ns:fictional_universe.fictional_character.siblings/ns:fictional_universe.sibling_relationship_of_fictional_characters.siblings ns:m.024gz2 .\nFILTER ( ?x1 != ns:m.024gz2 )\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P1 ?x1 .\n?x1 P2 M2 .\nFILTER ( ?x1 != M2 )\n}",
    "expectedResponse": "No",
    "recursionDepth": 27
  },
  {
    "questionIdx": 17413,
    "questionWithBrackets": "Did [R. R. Reeder]'s sibling write and executive produce a film",
    "questionPatternModEntities": "Did M0 's sibling write and executive produce a film",
    "questionTemplate": "Did [entity] 's [ROLE_SIMPLE] [VP_SIMPLE] and [VP_SIMPLE] a [NP_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.producer.films_executive_produced ?x1 .\n?x0 ns:film.writer.film ?x1 .\n?x0 ns:people.person.sibling_s/ns:people.sibling_relationship.sibling|ns:fictional_universe.fictional_character.siblings/ns:fictional_universe.sibling_relationship_of_fictional_characters.siblings ns:m.0c4jhqs .\n?x1 a ns:film.film .\nFILTER ( ?x0 != ns:m.0c4jhqs )\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x1 a M1 .\nFILTER ( ?x0 != M0 )\n}",
    "expectedResponse": "No",
    "recursionDepth": 27
  },
  {
    "questionIdx": 13197,
    "questionWithBrackets": "Did [Lightstorm Entertainment]'s founder produce and edit [Avatar 4]'s prequel",
    "questionPatternModEntities": "Did M0 's founder produce and edit M1 's prequel",
    "questionTemplate": "Did [entity] 's [ROLE_SIMPLE] [VP_SIMPLE] and [VP_SIMPLE] [entity] 's [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.editor.film ?x1 .\n?x0 ns:film.producer.film|ns:film.production_company.films ?x1 .\n?x0 ns:organization.organization_founder.organizations_founded ns:m.080p6vg .\n?x1 ns:film.film.sequel ns:m.0_hb181\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x0 P1 M0 .\n?x0 P2 ?x1 .\n?x1 P3 M1\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 27
  },
  {
    "questionIdx": 206894,
    "questionWithBrackets": "Which male person that wrote [Weekend Cowgirls] did [Kaufman Astoria Studios] employ",
    "questionPatternModEntities": "Which male person that wrote M1 did M2 employ",
    "questionTemplate": "Which [ADJECTIVE_SIMPLE] [NP_SIMPLE] that [VP_SIMPLE] [entity] did [entity] [VP_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:people.person .\n?x0 ns:film.writer.film ns:m.05bkp52 .\n?x0 ns:people.person.employment_history/ns:business.employment_tenure.company ns:m.0bnpwv .\n?x0 ns:people.person.gender ns:m.05zppz\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M1 .\n?x0 P1 M2 .\n?x0 P2 M3 .\n?x0 a M0\n}",
    "expectedResponse": "Ray Dennis Steckler",
    "recursionDepth": 27
  },
  {
    "questionIdx": 20446,
    "questionWithBrackets": "Did [Tatsunoko Production] and [Kansas City Film Ad Company] employ a film producer's employee and founder",
    "questionPatternModEntities": "Did M1 and M2 employ a film producer 's employee and founder",
    "questionTemplate": "Did [entity] and [entity] [VP_SIMPLE] a [NP_SIMPLE] 's [ROLE_SIMPLE] and [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:organization.organization_founder.organizations_founded ?x1 .\n?x0 ns:people.person.employment_history/ns:business.employment_tenure.company ?x1 .\n?x1 a ns:film.producer .\nns:m.03wdks ns:business.employer.employees/ns:business.employment_tenure.person ?x0 .\nns:m.0gy7412 ns:business.employer.employees/ns:business.employment_tenure.person ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x1 a M0 .\nM1 P2 ?x0 .\nM2 P2 ?x0\n}",
    "expectedResponse": "No",
    "recursionDepth": 27
  },
  {
    "questionIdx": 48569,
    "questionWithBrackets": "Was [Bright Leaves] written by a cinematographer, executive producer, and star of [Photographic Memory]",
    "questionPatternModEntities": "Was M1 written by a cinematographer , executive producer , and star of M0",
    "questionTemplate": "Was [entity] [VP_SIMPLE] by a [ROLE_SIMPLE] , [ROLE_SIMPLE] , and [ROLE_SIMPLE] of [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.actor.film/ns:film.performance.film ns:m.0h1gnyv .\n?x0 ns:film.cinematographer.film ns:m.0h1gnyv .\n?x0 ns:film.producer.films_executive_produced ns:m.0h1gnyv .\nns:m.07ndds ns:film.film.written_by ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M0 .\n?x0 P2 M0 .\nM1 P3 ?x0\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 27
  },
  {
    "questionIdx": 93138,
    "questionWithBrackets": "Was a cinematographer's employer's Japanese employee's spouse [Anuradha Bhat]",
    "questionPatternModEntities": "Was a cinematographer 's employer 's Japanese employee 's spouse M2",
    "questionTemplate": "Was a [NP_SIMPLE] 's [ROLE_SIMPLE] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] 's [ROLE_SIMPLE] [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:people.person.employment_history/ns:business.employment_tenure.company ?x1 .\n?x0 ns:people.person.nationality ns:m.03_3d .\n?x1 ns:business.employer.employees/ns:business.employment_tenure.person ?x2 .\n?x2 a ns:film.cinematographer .\nFILTER ( ns:m.0pb8j56 != ?x0 ) .\nns:m.0pb8j56 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x0 P1 M0 .\n?x1 P2 ?x2 .\n?x2 a M1 .\nFILTER ( M2 != ?x0 ) .\nM2 P3 ?x0\n}",
    "expectedResponse": "No",
    "recursionDepth": 27
  },
  {
    "questionIdx": 24925,
    "questionWithBrackets": "Did [Wendi Kenya] marry a film's star, producer, and art director",
    "questionPatternModEntities": "Did M1 marry a film 's star , producer , and art director",
    "questionTemplate": "Did [entity] [VP_SIMPLE] a [NP_SIMPLE] 's [ROLE_SIMPLE] , [ROLE_SIMPLE] , and [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.actor.film/ns:film.performance.film ?x1 .\n?x0 ns:film.film_art_director.films_art_directed ?x1 .\n?x0 ns:film.producer.film|ns:film.production_company.films ?x1 .\n?x1 a ns:film.film .\nFILTER ( ns:m.0qfyxcc != ?x0 ) .\nns:m.0qfyxcc ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x1 a M0 .\nFILTER ( M1 != ?x0 ) .\nM1 P3 ?x0\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 27
  },
  {
    "questionIdx": 180925,
    "questionWithBrackets": "What was produced and written by [Butterfly L'Attesa]'s producer and cinematographer",
    "questionPatternModEntities": "What was produced and written by M0 's producer and cinematographer",
    "questionTemplate": "What was [VP_SIMPLE] and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] and [ROLE_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.film.produced_by|ns:film.film.production_companies ?x1 .\n?x0 ns:film.film.written_by ?x1 .\n?x1 ns:film.cinematographer.film ns:m.0ght9gt .\n?x1 ns:film.producer.film|ns:film.production_company.films ns:m.0ght9gt\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x1 P2 M0 .\n?x1 P3 M0\n}",
    "expectedResponse": "Medea Miracle",
    "recursionDepth": 27
  },
  {
    "questionIdx": 60796,
    "questionWithBrackets": "Was [James Broughton] a film director that [Agn\u00e8s Varda] influenced and married",
    "questionPatternModEntities": "Was M0 a film director that M2 influenced and married",
    "questionTemplate": "Was [entity] a [NP_SIMPLE] that [entity] [VP_SIMPLE] and [VP_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\nFILTER ( ns:m.05lmdy != ns:m.01vylt ) .\nns:m.05lmdy a ns:film.director .\nns:m.05lmdy ns:influence.influence_node.influenced_by ns:m.01vylt .\nns:m.05lmdy ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ns:m.01vylt\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\nFILTER ( M0 != M2 ) .\nM0 P0 M2 .\nM0 P1 M2 .\nM0 a M1\n}",
    "expectedResponse": "No",
    "recursionDepth": 27
  },
  {
    "questionIdx": 219127,
    "questionWithBrackets": "Who influenced a French film editor's German spouse",
    "questionPatternModEntities": "Who influenced a French film editor 's German spouse",
    "questionTemplate": "Who [VP_SIMPLE] a [ADJECTIVE_SIMPLE] [NP_SIMPLE] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:people.person .\n?x0 ns:influence.influence_node.influenced ?x1 .\n?x1 ns:people.person.nationality ns:m.0345h .\n?x1 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ?x2 .\n?x2 a ns:film.editor .\n?x2 ns:people.person.nationality ns:m.0f8l9c .\nFILTER ( ?x1 != ?x2 )\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 a M0 .\n?x1 P1 M1 .\n?x1 P2 ?x2 .\n?x2 P1 M3 .\n?x2 a M2 .\nFILTER ( ?x1 != ?x2 )\n}",
    "expectedResponse": "Andy Warhol",
    "recursionDepth": 27
  },
  {
    "questionIdx": 135433,
    "questionWithBrackets": "What Spanish person influenced [Hard Work on the River Douro]'s director and producer",
    "questionPatternModEntities": "What Spanish person influenced M2 's director and producer",
    "questionTemplate": "What [ADJECTIVE_SIMPLE] [NP_SIMPLE] [VP_SIMPLE] [entity] 's [ROLE_SIMPLE] and [ROLE_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:people.person .\n?x0 ns:influence.influence_node.influenced ?x1 .\n?x0 ns:people.person.nationality ns:m.06mkj .\n?x1 ns:film.director.film ns:m.0bhgyh3 .\n?x1 ns:film.producer.film|ns:film.production_company.films ns:m.0bhgyh3\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 M1 .\n?x0 a M0 .\n?x1 P2 M2 .\n?x1 P3 M2\n}",
    "expectedResponse": "Luis Bu\u00f1uel",
    "recursionDepth": 27
  },
  {
    "questionIdx": 200652,
    "questionWithBrackets": "Which female person directed and executive produced [Mwansa the Great]",
    "questionPatternModEntities": "Which female person directed and executive produced M1",
    "questionTemplate": "Which [ADJECTIVE_SIMPLE] [NP_SIMPLE] [VP_SIMPLE] and [VP_SIMPLE] [entity]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:people.person .\n?x0 ns:film.director.film ns:m.0hzg5l0 .\n?x0 ns:film.producer.films_executive_produced ns:m.0hzg5l0 .\n?x0 ns:people.person.gender ns:m.02zsn\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M1 .\n?x0 P1 M2 .\n?x0 P2 M1 .\n?x0 a M0\n}",
    "expectedResponse": "Rungano Nyoni",
    "recursionDepth": 27
  },
  {
    "questionIdx": 187513,
    "questionWithBrackets": "Which British Canadian actor did [Dan Aykroyd] and [Chevy Chase] influence",
    "questionPatternModEntities": "Which British Canadian actor did M1 and M2 influence",
    "questionTemplate": "Which [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [NP_SIMPLE] did [entity] and [entity] [VP_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:film.actor .\n?x0 ns:influence.influence_node.influenced_by ns:m.0d608 .\n?x0 ns:influence.influence_node.influenced_by ns:m.0p_jc .\n?x0 ns:people.person.nationality ns:m.07ssc .\n?x0 ns:people.person.nationality ns:m.0d060g\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P1 M3 .\n?x0 P1 M4 .\n?x0 a M0\n}",
    "expectedResponse": "Mike Myers",
    "recursionDepth": 27
  },
  {
    "questionIdx": 55485,
    "questionWithBrackets": "Was [Franco Zeffirelli] an Italian art director that married a film director",
    "questionPatternModEntities": "Was M1 a Italian art director that married a film director",
    "questionTemplate": "Was [entity] a [ADJECTIVE_SIMPLE] [NP_SIMPLE] that [VP_SIMPLE] a [NP_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 a ns:film.director .\nFILTER ( ns:m.0b_c7 != ?x0 ) .\nns:m.0b_c7 a ns:film.film_art_director .\nns:m.0b_c7 ns:people.person.nationality ns:m.03rjj .\nns:m.0b_c7 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 a M0 .\nFILTER ( M1 != ?x0 ) .\nM1 P0 M3 .\nM1 P1 ?x0 .\nM1 a M2\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 27
  },
  {
    "questionIdx": 68237,
    "questionWithBrackets": "Was [Moviehead Pictures] founded by a costume designer, writer, and art director of [Julie & Jack]",
    "questionPatternModEntities": "Was M1 founded by a costume designer , writer , and art director of M0",
    "questionTemplate": "Was [entity] [VP_SIMPLE] by a [ROLE_SIMPLE] , [ROLE_SIMPLE] , and [ROLE_SIMPLE] of [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.film_art_director.films_art_directed ns:m.0crtjmg .\n?x0 ns:film.film_costumer_designer.costume_design_for_film ns:m.0crtjmg .\n?x0 ns:film.writer.film ns:m.0crtjmg .\nns:m.0bq3fz0 ns:organization.organization.founders ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M0 .\n?x0 P2 M0 .\nM1 P3 ?x0\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 27
  },
  {
    "questionIdx": 19367,
    "questionWithBrackets": "Did [Sloane Herz]'s parent direct and produce [Hope and Glory]'s sequel",
    "questionPatternModEntities": "Did M0 's parent direct and produce M1 's sequel",
    "questionTemplate": "Did [entity] 's [ROLE_SIMPLE] [VP_SIMPLE] and [VP_SIMPLE] [entity] 's [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.director.film ?x1 .\n?x0 ns:film.producer.film|ns:film.production_company.films ?x1 .\n?x0 ns:people.person.children|ns:fictional_universe.fictional_character.children|ns:organization.organization.child/ns:organization.organization_relationship.child ns:m.0k4vc95 .\n?x1 ns:film.film.prequel ns:m.0yxf4\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x0 P1 M0 .\n?x0 P2 ?x1 .\n?x1 P3 M1\n}",
    "expectedResponse": "No",
    "recursionDepth": 27
  },
  {
    "questionIdx": 19409,
    "questionWithBrackets": "Did [Sof\u00eda Boz\u00e1n] influence and marry a French film editor",
    "questionPatternModEntities": "Did M2 influence and marry a French film editor",
    "questionTemplate": "Did [entity] [VP_SIMPLE] and [VP_SIMPLE] a [ADJECTIVE_SIMPLE] [NP_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 a ns:film.editor .\n?x0 ns:people.person.nationality ns:m.0f8l9c .\nFILTER ( ns:m.02ptywn != ?x0 ) .\nns:m.02ptywn ns:influence.influence_node.influenced ?x0 .\nns:m.02ptywn ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M1 .\n?x0 a M0 .\nFILTER ( M2 != ?x0 ) .\nM2 P1 ?x0 .\nM2 P2 ?x0\n}",
    "expectedResponse": "No",
    "recursionDepth": 27
  },
  {
    "questionIdx": 73627,
    "questionWithBrackets": "Was [Regina Debora Freud] a person whose male sibling influenced [Arnold Schoenberg]",
    "questionPatternModEntities": "Was M2 a person whose male sibling influenced M0",
    "questionTemplate": "Was [entity] a [NP_SIMPLE] whose [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] [VP_SIMPLE] [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:influence.influence_node.influenced ns:m.0hnlx .\n?x0 ns:people.person.gender ns:m.05zppz .\nFILTER ( ns:m.0w42hjc != ?x0 ) .\nns:m.0w42hjc a ns:people.person .\nns:m.0w42hjc ns:people.person.sibling_s/ns:people.sibling_relationship.sibling|ns:fictional_universe.fictional_character.siblings/ns:fictional_universe.sibling_relationship_of_fictional_characters.siblings ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( M2 != ?x0 ) .\nM2 P2 ?x0 .\nM2 a M3\n}",
    "expectedResponse": "No",
    "recursionDepth": 27
  },
  {
    "questionIdx": 19397,
    "questionWithBrackets": "Did [Society Dog Show] and [Motorama] star a film producer's employee and founder",
    "questionPatternModEntities": "Did M1 and M2 star a film producer 's employee and founder",
    "questionTemplate": "Did [entity] and [entity] [VP_SIMPLE] a [NP_SIMPLE] 's [ROLE_SIMPLE] and [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:organization.organization_founder.organizations_founded ?x1 .\n?x0 ns:people.person.employment_history/ns:business.employment_tenure.company ?x1 .\n?x1 a ns:film.producer .\nns:m.0blmf2 ns:film.film.starring/ns:film.performance.actor ?x0 .\nns:m.0c1cv8 ns:film.film.starring/ns:film.performance.actor ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x1 a M0 .\nM1 P2 ?x0 .\nM2 P2 ?x0\n}",
    "expectedResponse": "No",
    "recursionDepth": 27
  },
  {
    "questionIdx": 93622,
    "questionWithBrackets": "Was a company whose Chinese founder produced [The Crimson Charm] [Tianyi Film Company]",
    "questionPatternModEntities": "Was a company whose Chinese founder produced M1 M2",
    "questionTemplate": "Was a [NP_SIMPLE] whose [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] [VP_SIMPLE] [entity] [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.producer.film|ns:film.production_company.films ns:m.03c_vc1 .\n?x0 ns:people.person.nationality ns:m.0d05w3 .\nns:m.0_1lf9q a ns:business.employer .\nns:m.0_1lf9q ns:organization.organization.founders ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nM2 P2 ?x0 .\nM2 a M3\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 27
  },
  {
    "questionIdx": 37834,
    "questionWithBrackets": "Did a person marry [Bloodthirsty Butchers]'s director, editor, and costume designer",
    "questionPatternModEntities": "Did a person marry M1 's director , editor , and costume designer",
    "questionTemplate": "Did a [NP_SIMPLE] [VP_SIMPLE] [entity] 's [ROLE_SIMPLE] , [ROLE_SIMPLE] , and [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 a ns:people.person .\n?x0 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ?x1 .\n?x1 ns:film.director.film ns:m.03mb2h6 .\n?x1 ns:film.editor.film ns:m.03mb2h6 .\n?x1 ns:film.film_costumer_designer.costume_design_for_film ns:m.03mb2h6 .\nFILTER ( ?x0 != ?x1 )\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x0 a M0 .\n?x1 P1 M1 .\n?x1 P2 M1 .\n?x1 P3 M1 .\nFILTER ( ?x0 != ?x1 )\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 27
  },
  {
    "questionIdx": 75787,
    "questionWithBrackets": "Was [Seductio] written, produced, and edited by a film editor",
    "questionPatternModEntities": "Was M1 written , produced , and edited by a film editor",
    "questionTemplate": "Was [entity] [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by a [NP_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 a ns:film.editor .\nns:m.0w2zn5s ns:film.film.edited_by ?x0 .\nns:m.0w2zn5s ns:film.film.produced_by|ns:film.film.production_companies ?x0 .\nns:m.0w2zn5s ns:film.film.written_by ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 a M0 .\nM1 P0 ?x0 .\nM1 P1 ?x0 .\nM1 P2 ?x0\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 27
  },
  {
    "questionIdx": 88830,
    "questionWithBrackets": "Was a Chinese film director that [Kung Fu Mahjong] was executive produced by [Han Sanping]",
    "questionPatternModEntities": "Was a Chinese film director that M2 was executive produced by M0",
    "questionTemplate": "Was a [ADJECTIVE_SIMPLE] [NP_SIMPLE] that [entity] was [VP_SIMPLE] by [entity]",
    "sparql": "SELECT count(*) WHERE {\nns:m.04182k6 a ns:film.director .\nns:m.04182k6 ns:film.producer.films_executive_produced ns:m.07hgp8 .\nns:m.04182k6 ns:people.person.nationality ns:m.0d05w3\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M2 .\nM0 P1 M3 .\nM0 a M1\n}",
    "expectedResponse": "No",
    "recursionDepth": 27
  },
  {
    "questionIdx": 26160,
    "questionWithBrackets": "Did a Canadian art director edit and produce [Juan Machuca Contreras]",
    "questionPatternModEntities": "Did a Canadian art director edit and produce M1",
    "questionTemplate": "Did a [ADJECTIVE_SIMPLE] [NP_SIMPLE] [VP_SIMPLE] and [VP_SIMPLE] [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 a ns:film.film_art_director .\n?x0 ns:film.editor.film ns:m.0pxb0d_ .\n?x0 ns:film.producer.film|ns:film.production_company.films ns:m.0pxb0d_ .\n?x0 ns:people.person.nationality ns:m.0d060g\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M1 .\n?x0 P1 M2 .\n?x0 P2 M1 .\n?x0 a M0\n}",
    "expectedResponse": "No",
    "recursionDepth": 27
  },
  {
    "questionIdx": 190241,
    "questionWithBrackets": "Which Italian actor that wrote [La vacanza] edited [Salon Kitty]",
    "questionPatternModEntities": "Which Italian actor that wrote M2 edited M1",
    "questionTemplate": "Which [ADJECTIVE_SIMPLE] [NP_SIMPLE] that [VP_SIMPLE] [entity] [VP_SIMPLE] [entity]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:film.actor .\n?x0 ns:film.editor.film ns:m.0crt7qf .\n?x0 ns:film.writer.film ns:m.0cz9pql .\n?x0 ns:people.person.nationality ns:m.03rjj\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M1 .\n?x0 P1 M2 .\n?x0 P2 M3 .\n?x0 a M0\n}",
    "expectedResponse": "Tinto Brass",
    "recursionDepth": 27
  },
  {
    "questionIdx": 154645,
    "questionWithBrackets": "What female person that [Live Today, Die Tomorrow!] starred did [Toei Company] employ",
    "questionPatternModEntities": "What female person that M2 starred did M1 employ",
    "questionTemplate": "What [ADJECTIVE_SIMPLE] [NP_SIMPLE] that [entity] [VP_SIMPLE] did [entity] [VP_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:people.person .\n?x0 ns:film.actor.film/ns:film.performance.film ns:m.0kv85dv .\n?x0 ns:people.person.employment_history/ns:business.employment_tenure.company ns:m.0674hk .\n?x0 ns:people.person.gender ns:m.02zsn\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M1 .\n?x0 P1 M2 .\n?x0 P2 M3 .\n?x0 a M0\n}",
    "expectedResponse": "Kiwako Taichi",
    "recursionDepth": 27
  },
  {
    "questionIdx": 203451,
    "questionWithBrackets": "Which film editor whose sibling was employed by [Stanford University] did [We Have a Pope] star",
    "questionPatternModEntities": "Which film editor whose sibling was employed by M2 did M1 star",
    "questionTemplate": "Which [NP_SIMPLE] whose [ROLE_SIMPLE] was [VP_SIMPLE] by [entity] did [entity] [VP_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:film.editor .\n?x0 ns:film.actor.film/ns:film.performance.film ns:m.0gh6j94 .\n?x0 ns:people.person.sibling_s/ns:people.sibling_relationship.sibling|ns:fictional_universe.fictional_character.siblings/ns:fictional_universe.sibling_relationship_of_fictional_characters.siblings ?x1 .\n?x1 ns:people.person.employment_history/ns:business.employment_tenure.company ns:m.06pwq .\nFILTER ( ?x0 != ?x1 )\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 M1 .\n?x0 a M0 .\n?x1 P2 M2 .\nFILTER ( ?x0 != ?x1 )\n}",
    "expectedResponse": "Nanni Moretti",
    "recursionDepth": 27
  },
  {
    "questionIdx": 34185,
    "questionWithBrackets": "Did a film editor whose sibling edited [Window on Your Present] executive produce [Bad Milo!]",
    "questionPatternModEntities": "Did a film editor whose sibling edited M2 executive produce M1",
    "questionTemplate": "Did a [NP_SIMPLE] whose [ROLE_SIMPLE] [VP_SIMPLE] [entity] [VP_SIMPLE] [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 a ns:film.editor .\n?x0 ns:film.producer.films_executive_produced ns:m.0w1f7zz .\n?x0 ns:people.person.sibling_s/ns:people.sibling_relationship.sibling|ns:fictional_universe.fictional_character.siblings/ns:fictional_universe.sibling_relationship_of_fictional_characters.siblings ?x1 .\n?x1 ns:film.editor.film ns:m.0zkbv3p .\nFILTER ( ?x0 != ?x1 )\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x0 P1 M1 .\n?x0 a M0 .\n?x1 P2 M2 .\nFILTER ( ?x0 != ?x1 )\n}",
    "expectedResponse": "No",
    "recursionDepth": 27
  },
  {
    "questionIdx": 87122,
    "questionWithBrackets": "Was [Wong Jing] a film's sequel's director, star, and writer",
    "questionPatternModEntities": "Was M1 a film 's sequel 's director , star , and writer",
    "questionTemplate": "Was [entity] a [NP_SIMPLE] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE] , [ROLE_SIMPLE] , and [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.film.prequel ?x1 .\n?x1 a ns:film.film .\nns:m.06101p ns:film.actor.film/ns:film.performance.film ?x0 .\nns:m.06101p ns:film.director.film ?x0 .\nns:m.06101p ns:film.writer.film ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x1 a M0 .\nM1 P1 ?x0 .\nM1 P2 ?x0 .\nM1 P3 ?x0\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 27
  },
  {
    "questionIdx": 65040,
    "questionWithBrackets": "Was [Love in the Afternoon] directed and edited by a Swedish costume designer",
    "questionPatternModEntities": "Was M2 directed and edited by a Swedish costume designer",
    "questionTemplate": "Was [entity] [VP_SIMPLE] and [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [NP_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 a ns:film.film_costumer_designer .\n?x0 ns:people.person.nationality ns:m.0d0vqn .\nns:m.0b2f87 ns:film.film.directed_by ?x0 .\nns:m.0b2f87 ns:film.film.edited_by ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M1 .\n?x0 a M0 .\nM2 P1 ?x0 .\nM2 P2 ?x0\n}",
    "expectedResponse": "No",
    "recursionDepth": 27
  },
  {
    "questionIdx": 13523,
    "questionWithBrackets": "Did [Love at Large] and [The American Nightmare] star a film's Canadian cinematographer",
    "questionPatternModEntities": "Did M2 and M3 star a film 's Canadian cinematographer",
    "questionTemplate": "Did [entity] and [entity] [VP_SIMPLE] a [NP_SIMPLE] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.cinematographer.film ?x1 .\n?x0 ns:people.person.nationality ns:m.0d060g .\n?x1 a ns:film.film .\nns:m.04jb638 ns:film.film.starring/ns:film.performance.actor ?x0 .\nns:m.0crt7nv ns:film.film.starring/ns:film.performance.actor ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 ?x1 .\n?x1 a M1 .\nM2 P2 ?x0 .\nM3 P2 ?x0\n}",
    "expectedResponse": "No",
    "recursionDepth": 27
  },
  {
    "questionIdx": 178174,
    "questionWithBrackets": "What was executive produced by and directed by [The Terrorist]'s art director's sibling",
    "questionPatternModEntities": "What was executive produced by and directed by M0 's art director 's sibling",
    "questionTemplate": "What was [VP_SIMPLE] by and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.film.directed_by ?x1 .\n?x0 ns:film.film.executive_produced_by ?x1 .\n?x1 ns:people.person.sibling_s/ns:people.sibling_relationship.sibling|ns:fictional_universe.fictional_character.siblings/ns:fictional_universe.sibling_relationship_of_fictional_characters.siblings ?x2 .\n?x2 ns:film.film_art_director.films_art_directed ns:m.07k1k .\nFILTER ( ?x1 != ?x2 )\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x1 P2 ?x2 .\n?x2 P3 M0 .\nFILTER ( ?x1 != ?x2 )\n}",
    "expectedResponse": "Dil Se",
    "recursionDepth": 28
  },
  {
    "questionIdx": 120316,
    "questionWithBrackets": "Were [Lo sguardo digitale] and [The Sexual Story of O] edited by a character's Spanish actor",
    "questionPatternModEntities": "Were M2 and M3 edited by a character 's Spanish actor",
    "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by a [NP_SIMPLE] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.actor.film/ns:film.performance.character ?x1 .\n?x0 ns:people.person.nationality ns:m.06mkj .\n?x1 a ns:fictional_universe.fictional_character .\nns:m.0crsn8h ns:film.film.edited_by ?x0 .\nns:m.0gx9_sz ns:film.film.edited_by ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 ?x1 .\n?x1 a M1 .\nM2 P2 ?x0 .\nM3 P2 ?x0\n}",
    "expectedResponse": "No",
    "recursionDepth": 28
  },
  {
    "questionIdx": 147369,
    "questionWithBrackets": "What did [The Klansman]'s star edit and a film editor direct",
    "questionPatternModEntities": "What did M0 's star edit and a film editor direct",
    "questionTemplate": "What did [entity] 's [ROLE_SIMPLE] [VP_SIMPLE] and a [NP_SIMPLE] [VP_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.film.directed_by ?x1 .\n?x0 ns:film.film.edited_by ?x2 .\n?x1 a ns:film.editor .\n?x2 ns:film.actor.film/ns:film.performance.film ns:m.063vys\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x2 .\n?x1 P2 M0 .\n?x2 a M1\n}",
    "expectedResponse": "Dentally Disturbed",
    "recursionDepth": 28
  },
  {
    "questionIdx": 90960,
    "questionWithBrackets": "Was a Spanish film director's male child's country of nationality [Argentina]",
    "questionPatternModEntities": "Was a Spanish film director 's male child 's country of nationality M3",
    "questionTemplate": "Was a [ADJECTIVE_SIMPLE] [NP_SIMPLE] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] 's [ROLE_SIMPLE] [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:people.person.gender ns:m.05zppz .\n?x0 ns:people.person.parents|ns:fictional_universe.fictional_character.parents|ns:organization.organization.parent/ns:organization.organization_relationship.parent ?x1 .\n?x1 a ns:film.director .\n?x1 ns:people.person.nationality ns:m.06mkj .\nns:m.0jgd ^ns:people.person.nationality ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 ?x1 .\n?x1 P2 M2 .\n?x1 a M1 .\nM3 P3 ?x0\n}",
    "expectedResponse": "No",
    "recursionDepth": 28
  },
  {
    "questionIdx": 129111,
    "questionWithBrackets": "Were [Virgin Megastores], [Walt Disney Studios], [Disney Interactive], [Disneyland Resort], and [Walt Disney Animation Studios] founded by a film producer",
    "questionPatternModEntities": "Were M1 , M2 , M3 , M4 , and M5 founded by a film producer",
    "questionTemplate": "Were [entity] , [entity] , [entity] , [entity] , and [entity] [VP_SIMPLE] by a [NP_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 a ns:film.producer .\nns:m.013r16 ns:organization.organization.founders ?x0 .\nns:m.01zx_x ns:organization.organization.founders ?x0 .\nns:m.024sz8 ns:organization.organization.founders ?x0 .\nns:m.047cb57 ns:organization.organization.founders ?x0 .\nns:m.04rcl7 ns:organization.organization.founders ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 a M0 .\nM1 P0 ?x0 .\nM2 P0 ?x0 .\nM3 P0 ?x0 .\nM4 P0 ?x0 .\nM5 P0 ?x0\n}",
    "expectedResponse": "No",
    "recursionDepth": 28
  },
  {
    "questionIdx": 120074,
    "questionWithBrackets": "Were [Leaving Normal] and [Blues for the Avatar] executive produced by and produced by a cinematographer",
    "questionPatternModEntities": "Were M1 and M2 executive produced by and produced by a cinematographer",
    "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by and [VP_SIMPLE] by a [NP_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 a ns:film.cinematographer .\nns:m.07k5hy6 ns:film.film.executive_produced_by ?x0 .\nns:m.07k5hy6 ns:film.film.produced_by|ns:film.film.production_companies ?x0 .\nns:m.0znn7j_ ns:film.film.executive_produced_by ?x0 .\nns:m.0znn7j_ ns:film.film.produced_by|ns:film.film.production_companies ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 a M0 .\nM1 P0 ?x0 .\nM1 P1 ?x0 .\nM2 P0 ?x0 .\nM2 P1 ?x0\n}",
    "expectedResponse": "No",
    "recursionDepth": 28
  },
  {
    "questionIdx": 62636,
    "questionWithBrackets": "Was [Katharina Kubrick] [Death Row II]'s executive producer's sibling's German spouse's child",
    "questionPatternModEntities": "Was M2 M1 's executive producer 's sibling 's German spouse 's child",
    "questionTemplate": "Was [entity] [entity] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] 's [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:people.person.nationality ns:m.0345h .\n?x0 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ?x1 .\n?x1 ns:people.person.sibling_s/ns:people.sibling_relationship.sibling|ns:fictional_universe.fictional_character.siblings/ns:fictional_universe.sibling_relationship_of_fictional_characters.siblings ?x2 .\n?x2 ns:film.producer.films_executive_produced ns:m.0_zb00y .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x1 != ?x2 ) .\nns:m.02g6wv_ ns:people.person.parents|ns:fictional_universe.fictional_character.parents|ns:organization.organization.parent/ns:organization.organization_relationship.parent ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 ?x1 .\n?x1 P2 ?x2 .\n?x2 P3 M1 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x1 != ?x2 ) .\nM2 P4 ?x0\n}",
    "expectedResponse": "No",
    "recursionDepth": 28
  },
  {
    "questionIdx": 24457,
    "questionWithBrackets": "Did [Virginie Silla] and [Sylvia Nicholson] marry [The Beast with a Million Eyes]'s distributor's employee and founder",
    "questionPatternModEntities": "Did M1 and M2 marry M0 's distributor 's employee and founder",
    "questionTemplate": "Did [entity] and [entity] [VP_SIMPLE] [entity] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE] and [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:organization.organization_founder.organizations_founded ?x1 .\n?x0 ns:people.person.employment_history/ns:business.employment_tenure.company ?x1 .\n?x1 ns:film.film_distributor.films_distributed/ns:film.film_film_distributor_relationship.film ns:m.04y7ksr .\nFILTER ( ns:m.0hns5bw != ?x0 ) .\nFILTER ( ns:m.0jsy9c != ?x0 ) .\nns:m.0hns5bw ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ?x0 .\nns:m.0jsy9c ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x1 P2 M0 .\nFILTER ( M1 != ?x0 ) .\nFILTER ( M2 != ?x0 ) .\nM1 P3 ?x0 .\nM2 P3 ?x0\n}",
    "expectedResponse": "No",
    "recursionDepth": 28
  },
  {
    "questionIdx": 217428,
    "questionWithBrackets": "Who founded [Disney Channel] and founded a production company's child",
    "questionPatternModEntities": "Who founded M1 and founded a production company 's child",
    "questionTemplate": "Who [VP_SIMPLE] [entity] and [VP_SIMPLE] a [NP_SIMPLE] 's [ROLE_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:people.person .\n?x0 ns:organization.organization_founder.organizations_founded ?x1 .\n?x0 ns:organization.organization_founder.organizations_founded ns:m.0kc9f .\n?x1 ns:people.person.parents|ns:fictional_universe.fictional_character.parents|ns:organization.organization.parent/ns:organization.organization_relationship.parent ?x2 .\n?x2 a ns:film.production_company\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P0 M1 .\n?x0 a M0 .\n?x1 P1 ?x2 .\n?x2 a M2\n}",
    "expectedResponse": "Walt Disney",
    "recursionDepth": 28
  },
  {
    "questionIdx": 73465,
    "questionWithBrackets": "Was [Rauno Ronkainen] a spouse of a costume designer, cinematographer, and art director of [A Hole in My Heart]",
    "questionPatternModEntities": "Was M1 a spouse of a costume designer , cinematographer , and art director of M0",
    "questionTemplate": "Was [entity] a [ROLE_SIMPLE] of a [ROLE_SIMPLE] , [ROLE_SIMPLE] , and [ROLE_SIMPLE] of [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.cinematographer.film ns:m.03xkr6 .\n?x0 ns:film.film_art_director.films_art_directed ns:m.03xkr6 .\n?x0 ns:film.film_costumer_designer.costume_design_for_film ns:m.03xkr6 .\nFILTER ( ns:m.02pwby6 != ?x0 ) .\nns:m.02pwby6 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M0 .\n?x0 P2 M0 .\nFILTER ( M1 != ?x0 ) .\nM1 P3 ?x0\n}",
    "expectedResponse": "No",
    "recursionDepth": 28
  },
  {
    "questionIdx": 66303,
    "questionWithBrackets": "Was [Marika Green] a female Swedish French sibling of [Walter Green]",
    "questionPatternModEntities": "Was M0 a female Swedish French sibling of M1",
    "questionTemplate": "Was [entity] a [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
    "sparql": "SELECT count(*) WHERE {\nFILTER ( ns:m.095jxq != ns:m.0gx903m ) .\nns:m.095jxq ns:people.person.gender ns:m.02zsn .\nns:m.095jxq ns:people.person.nationality ns:m.0d0vqn .\nns:m.095jxq ns:people.person.nationality ns:m.0f8l9c .\nns:m.095jxq ns:people.person.sibling_s/ns:people.sibling_relationship.sibling|ns:fictional_universe.fictional_character.siblings/ns:fictional_universe.sibling_relationship_of_fictional_characters.siblings ns:m.0gx903m\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\nFILTER ( M0 != M1 ) .\nM0 P0 M1 .\nM0 P1 M2 .\nM0 P1 M3 .\nM0 P2 M4\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 28
  },
  {
    "questionIdx": 157504,
    "questionWithBrackets": "What film producer employed [Duplicate]'s costume designer and employed [Yash Johar]",
    "questionPatternModEntities": "What film producer employed M2 's costume designer and employed M1",
    "questionTemplate": "What [NP_SIMPLE] [VP_SIMPLE] [entity] 's [ROLE_SIMPLE] and [VP_SIMPLE] [entity]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:film.producer .\n?x0 ns:business.employer.employees/ns:business.employment_tenure.person ?x1 .\n?x0 ns:business.employer.employees/ns:business.employment_tenure.person ns:m.0391gb .\n?x1 ns:film.film_costumer_designer.costume_design_for_film ns:m.0bwgst\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P0 M1 .\n?x0 a M0 .\n?x1 P1 M2\n}",
    "expectedResponse": "Dharma Productions",
    "recursionDepth": 28
  },
  {
    "questionIdx": 221711,
    "questionWithBrackets": "Who married an art director and married [Joseph A. McCarthy] and [Robert Carleton-Munro]",
    "questionPatternModEntities": "Who married a art director and married M1 and M2",
    "questionTemplate": "Who [VP_SIMPLE] a [NP_SIMPLE] and [VP_SIMPLE] [entity] and [entity]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:people.person .\n?x0 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ?x1 .\n?x0 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ns:m.0h2qr4q .\n?x0 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ns:m.0h2qr53 .\n?x1 a ns:film.film_art_director .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x0 != ns:m.0h2qr4q ) .\nFILTER ( ?x0 != ns:m.0h2qr53 )\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 a M0 .\n?x1 a M3 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x0 != M1 ) .\nFILTER ( ?x0 != M2 )\n}",
    "expectedResponse": "Veronica Lake",
    "recursionDepth": 28
  },
  {
    "questionIdx": 180953,
    "questionWithBrackets": "What was produced and written by a costume designer of [Field of Dreams 2: Lockout] and [Peep World]",
    "questionPatternModEntities": "What was produced and written by a costume designer of M0 and M1",
    "questionTemplate": "What was [VP_SIMPLE] and [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity] and [entity]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.film.produced_by|ns:film.film.production_companies ?x1 .\n?x0 ns:film.film.written_by ?x1 .\n?x1 ns:film.film_costumer_designer.costume_design_for_film ns:m.0crs_32 .\n?x1 ns:film.film_costumer_designer.costume_design_for_film ns:m.0g_w5hs\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x1 P2 M0 .\n?x1 P2 M1\n}",
    "expectedResponse": "Gregory Go Boom",
    "recursionDepth": 28
  },
  {
    "questionIdx": 32087,
    "questionWithBrackets": "Did a female French costume designer influence [Jos\u00e9 Mar\u00eda de Lacunza] and [Karl Lagerfeld]",
    "questionPatternModEntities": "Did a female French costume designer influence M1 and M2",
    "questionTemplate": "Did a [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [NP_SIMPLE] [VP_SIMPLE] [entity] and [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 a ns:film.film_costumer_designer .\n?x0 ns:influence.influence_node.influenced ns:m.017tl9 .\n?x0 ns:influence.influence_node.influenced ns:m.0c598t5 .\n?x0 ns:people.person.gender ns:m.02zsn .\n?x0 ns:people.person.nationality ns:m.0f8l9c\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P1 M3 .\n?x0 P2 M4 .\n?x0 a M0\n}",
    "expectedResponse": "No",
    "recursionDepth": 28
  },
  {
    "questionIdx": 79523,
    "questionWithBrackets": "Was [The Big Sink] edited, written, and produced by [I First Saw the Light]'s producer",
    "questionPatternModEntities": "Was M1 edited , written , and produced by M0 's producer",
    "questionTemplate": "Was [entity] [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.producer.film|ns:film.production_company.films ns:m.0pxbqhy .\nns:m.01144wdy ns:film.film.edited_by ?x0 .\nns:m.01144wdy ns:film.film.produced_by|ns:film.film.production_companies ?x0 .\nns:m.01144wdy ns:film.film.written_by ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 ?x0 .\nM1 P2 ?x0 .\nM1 P3 ?x0\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 28
  },
  {
    "questionIdx": 197102,
    "questionWithBrackets": "Which company was acquired by a company and acquired by [Forte Group]",
    "questionPatternModEntities": "Which company was acquired by a company and acquired by M1",
    "questionTemplate": "Which [NP_SIMPLE] was [VP_SIMPLE] by a [NP_SIMPLE] and [VP_SIMPLE] by [entity]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:business.employer .\n?x0 ns:organization.organization.acquired_by/ns:business.acquisition.acquiring_company ?x1 .\n?x0 ns:organization.organization.acquired_by/ns:business.acquisition.acquiring_company ns:m.02rjcjp .\n?x1 a ns:business.employer\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P0 M1 .\n?x0 a M0 .\n?x1 a M0\n}",
    "expectedResponse": "Le M\u00e9ridien",
    "recursionDepth": 28
  },
  {
    "questionIdx": 63616,
    "questionWithBrackets": "Was [Lafcadio Hearn] a British Japanese male sibling of [Charles Kassimati Hearn]",
    "questionPatternModEntities": "Was M0 a British Japanese male sibling of M1",
    "questionTemplate": "Was [entity] a [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
    "sparql": "SELECT count(*) WHERE {\nFILTER ( ns:m.04kr0 != ns:m.0w0k90v ) .\nns:m.04kr0 ns:people.person.gender ns:m.05zppz .\nns:m.04kr0 ns:people.person.nationality ns:m.03_3d .\nns:m.04kr0 ns:people.person.nationality ns:m.07ssc .\nns:m.04kr0 ns:people.person.sibling_s/ns:people.sibling_relationship.sibling|ns:fictional_universe.fictional_character.siblings/ns:fictional_universe.sibling_relationship_of_fictional_characters.siblings ns:m.0w0k90v\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\nFILTER ( M0 != M1 ) .\nM0 P0 M1 .\nM0 P1 M2 .\nM0 P1 M3 .\nM0 P2 M4\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 28
  },
  {
    "questionIdx": 22300,
    "questionWithBrackets": "Did [The House of the Spirits] and [The Legend of Kaspar Hauser] star [Dungeon Play 4]'s costume designer, cinematographer, and art director",
    "questionPatternModEntities": "Did M1 and M2 star M0 's costume designer , cinematographer , and art director",
    "questionTemplate": "Did [entity] and [entity] [VP_SIMPLE] [entity] 's [ROLE_SIMPLE] , [ROLE_SIMPLE] , and [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.cinematographer.film ns:m.07ylzcl .\n?x0 ns:film.film_art_director.films_art_directed ns:m.07ylzcl .\n?x0 ns:film.film_costumer_designer.costume_design_for_film ns:m.07ylzcl .\nns:m.03zyv4 ns:film.film.starring/ns:film.performance.actor ?x0 .\nns:m.0h2y6xv ns:film.film.starring/ns:film.performance.actor ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M0 .\n?x0 P2 M0 .\nM1 P3 ?x0 .\nM2 P3 ?x0\n}",
    "expectedResponse": "No",
    "recursionDepth": 28
  },
  {
    "questionIdx": 3080,
    "questionWithBrackets": "Did [Buddimantudu] star [Allu Rama Lingaiah] and star a founder of [Negro Ensemble Company]",
    "questionPatternModEntities": "Did M1 star M2 and star a founder of M0",
    "questionTemplate": "Did [entity] [VP_SIMPLE] [entity] and [VP_SIMPLE] a [ROLE_SIMPLE] of [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:organization.organization_founder.organizations_founded ns:m.02pn54p .\nns:m.0hz5_kh ns:film.film.starring/ns:film.performance.actor ?x0 .\nns:m.0hz5_kh ns:film.film.starring/ns:film.performance.actor ns:m.0krs4m\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 ?x0 .\nM1 P1 M2\n}",
    "expectedResponse": "No",
    "recursionDepth": 28
  },
  {
    "questionIdx": 32460,
    "questionWithBrackets": "Did a female person that founded [Hellenic College of London] marry [Constantine II of Greece]",
    "questionPatternModEntities": "Did a female person that founded M1 marry M3",
    "questionTemplate": "Did a [ADJECTIVE_SIMPLE] [NP_SIMPLE] that [VP_SIMPLE] [entity] [VP_SIMPLE] [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 a ns:people.person .\n?x0 ns:organization.organization_founder.organizations_founded ns:m.0g2nh_ .\n?x0 ns:people.person.gender ns:m.02zsn .\n?x0 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ns:m.01550k .\nFILTER ( ?x0 != ns:m.01550k )\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M1 .\n?x0 P1 M2 .\n?x0 P2 M3 .\n?x0 a M0 .\nFILTER ( ?x0 != M3 )\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 28
  },
  {
    "questionIdx": 149808,
    "questionWithBrackets": "What did a film distributor's founder direct and [C\u00e9dric Klapisch] direct",
    "questionPatternModEntities": "What did a film distributor 's founder direct and M0 direct",
    "questionTemplate": "What did a [NP_SIMPLE] 's [ROLE_SIMPLE] [VP_SIMPLE] and [entity] [VP_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.film.directed_by ?x1 .\n?x0 ns:film.film.directed_by ns:m.07378r .\n?x1 ns:organization.organization_founder.organizations_founded ?x2 .\n?x2 a ns:film.film_distributor\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P0 M0 .\n?x1 P1 ?x2 .\n?x2 a M1\n}",
    "expectedResponse": "Lumi\u00e8re and Company",
    "recursionDepth": 28
  },
  {
    "questionIdx": 174651,
    "questionWithBrackets": "What was edited by and directed by [Promises Written in Water]'s art director and star",
    "questionPatternModEntities": "What was edited by and directed by M0 's art director and star",
    "questionTemplate": "What was [VP_SIMPLE] by and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] and [ROLE_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.film.directed_by ?x1 .\n?x0 ns:film.film.edited_by ?x1 .\n?x1 ns:film.actor.film/ns:film.performance.film ns:m.0bh9qf1 .\n?x1 ns:film.film_art_director.films_art_directed ns:m.0bh9qf1\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x1 P2 M0 .\n?x1 P3 M0\n}",
    "expectedResponse": "Promises Written in Water; The Brown Bunny",
    "recursionDepth": 28
  },
  {
    "questionIdx": 221605,
    "questionWithBrackets": "Who married a screenwriter's child and married [Lori Sammartino]",
    "questionPatternModEntities": "Who married a screenwriter 's child and married M1",
    "questionTemplate": "Who [VP_SIMPLE] a [NP_SIMPLE] 's [ROLE_SIMPLE] and [VP_SIMPLE] [entity]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:people.person .\n?x0 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ?x1 .\n?x0 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ns:m.0n28nc6 .\n?x1 ns:people.person.parents|ns:fictional_universe.fictional_character.parents|ns:organization.organization.parent/ns:organization.organization_relationship.parent ?x2 .\n?x2 a ns:film.writer .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x0 != ns:m.0n28nc6 )\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P0 M1 .\n?x0 a M0 .\n?x1 P1 ?x2 .\n?x2 a M2 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x0 != M1 )\n}",
    "expectedResponse": "Maurizio Costanzo",
    "recursionDepth": 28
  },
  {
    "questionIdx": 84410,
    "questionWithBrackets": "Was [Twixt] distributed by a film distributor that [Jack L. Warner] and [Th\u00e9ophile Path\u00e9] founded",
    "questionPatternModEntities": "Was M3 distributed by a film distributor that M1 and M2 founded",
    "questionTemplate": "Was [entity] [VP_SIMPLE] by a [NP_SIMPLE] that [entity] and [entity] [VP_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 a ns:film.film_distributor .\n?x0 ns:organization.organization.founders ns:m.011x277w .\n?x0 ns:organization.organization.founders ns:m.0m593 .\nns:m.0drytd1 ns:film.film.distributors/ns:film.film_film_distributor_relationship.distributor ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 a M0 .\nM3 P1 ?x0\n}",
    "expectedResponse": "No",
    "recursionDepth": 28
  },
  {
    "questionIdx": 185615,
    "questionWithBrackets": "What was written by and edited by [Lonely Bones]'s Dutch art director",
    "questionPatternModEntities": "What was written by and edited by M1 's Dutch art director",
    "questionTemplate": "What was [VP_SIMPLE] by and [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.film.edited_by ?x1 .\n?x0 ns:film.film.written_by ?x1 .\n?x1 ns:film.film_art_director.films_art_directed ns:m.0rh82mj .\n?x1 ns:people.person.nationality ns:m.059j2\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x1 P2 M0 .\n?x1 P3 M1\n}",
    "expectedResponse": "The Monster of Nix",
    "recursionDepth": 28
  },
  {
    "questionIdx": 159142,
    "questionWithBrackets": "What film was produced by a film editor and directed by [Palacio Rojo]",
    "questionPatternModEntities": "What film was produced by a film editor and directed by M1",
    "questionTemplate": "What [NP_SIMPLE] was [VP_SIMPLE] by a [NP_SIMPLE] and [VP_SIMPLE] by [entity]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:film.film .\n?x0 ns:film.film.directed_by ns:m.0lg2ppv .\n?x0 ns:film.film.produced_by|ns:film.film.production_companies ?x1 .\n?x1 a ns:film.editor\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 M1 .\n?x0 a M0 .\n?x1 a M2\n}",
    "expectedResponse": "Salas SAL",
    "recursionDepth": 28
  },
  {
    "questionIdx": 103667,
    "questionWithBrackets": "Was a person's male actor influenced by [Vance Bedford] and [Paul Whitehouse]",
    "questionPatternModEntities": "Was a person 's male actor influenced by M0 and M1",
    "questionTemplate": "Was a [NP_SIMPLE] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] [VP_SIMPLE] by [entity] and [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.actor.film/ns:film.performance.character ?x1 .\n?x0 ns:influence.influence_node.influenced_by ns:m.03hhwyr .\n?x0 ns:influence.influence_node.influenced_by ns:m.061wm .\n?x0 ns:people.person.gender ns:m.05zppz .\n?x1 a ns:people.person\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P1 ?x1 .\n?x0 P2 M2 .\n?x1 a M3\n}",
    "expectedResponse": "No",
    "recursionDepth": 28
  },
  {
    "questionIdx": 7250,
    "questionWithBrackets": "Did [Fantasy Chamber] and [Shut Up And Blow Me 1] star [Hayabusa: Harukanaru kikan]'s cinematographer's child and spouse",
    "questionPatternModEntities": "Did M1 and M2 star M0 's cinematographer 's child and spouse",
    "questionTemplate": "Did [entity] and [entity] [VP_SIMPLE] [entity] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE] and [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:people.person.parents|ns:fictional_universe.fictional_character.parents|ns:organization.organization.parent/ns:organization.organization_relationship.parent ?x1 .\n?x0 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ?x1 .\n?x1 ns:film.cinematographer.film ns:m.0h335wh .\nFILTER ( ?x0 != ?x1 ) .\nns:m.05khfsk ns:film.film.starring/ns:film.performance.actor ?x0 .\nns:m.05nthh7 ns:film.film.starring/ns:film.performance.actor ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x1 P2 M0 .\nFILTER ( ?x0 != ?x1 ) .\nM1 P3 ?x0 .\nM2 P3 ?x0\n}",
    "expectedResponse": "No",
    "recursionDepth": 28
  },
  {
    "questionIdx": 182648,
    "questionWithBrackets": "What was produced by and directed by [Nary Hem]'s spouse and sibling",
    "questionPatternModEntities": "What was produced by and directed by M0 's spouse and sibling",
    "questionTemplate": "What was [VP_SIMPLE] by and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] and [ROLE_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.film.directed_by ?x1 .\n?x0 ns:film.film.produced_by|ns:film.film.production_companies ?x1 .\n?x1 ns:people.person.sibling_s/ns:people.sibling_relationship.sibling|ns:fictional_universe.fictional_character.siblings/ns:fictional_universe.sibling_relationship_of_fictional_characters.siblings ns:m.011k737t .\n?x1 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ns:m.011k737t .\nFILTER ( ?x1 != ns:m.011k737t ) .\nFILTER ( ?x1 != ns:m.011k737t )\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x1 P2 M0 .\n?x1 P3 M0 .\nFILTER ( ?x1 != M0 ) .\nFILTER ( ?x1 != M0 )\n}",
    "expectedResponse": "Sovann Pancha; Chek Deth",
    "recursionDepth": 28
  },
  {
    "questionIdx": 97836,
    "questionWithBrackets": "Was a film edited, executive produced, and directed by [Horace Edward Stockbridge]",
    "questionPatternModEntities": "Was a film edited , executive produced , and directed by M1",
    "questionTemplate": "Was a [NP_SIMPLE] [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 a ns:film.film .\n?x0 ns:film.film.directed_by ns:m.0br9r6t .\n?x0 ns:film.film.edited_by ns:m.0br9r6t .\n?x0 ns:film.film.executive_produced_by ns:m.0br9r6t\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M1 .\n?x0 P1 M1 .\n?x0 P2 M1 .\n?x0 a M0\n}",
    "expectedResponse": "No",
    "recursionDepth": 28
  },
  {
    "questionIdx": 8341,
    "questionWithBrackets": "Did [George Lucas] executive produce and edit [Shake, Rattle & Roll 9]'s prequel's prequel",
    "questionPatternModEntities": "Did M1 executive produce and edit M0 's prequel 's prequel",
    "questionTemplate": "Did [entity] [VP_SIMPLE] and [VP_SIMPLE] [entity] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.film.sequel ?x1 .\n?x1 ns:film.film.sequel ns:m.03gzgdg .\nns:m.0343h ns:film.editor.film ?x0 .\nns:m.0343h ns:film.producer.films_executive_produced ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x1 P0 M0 .\nM1 P1 ?x0 .\nM1 P2 ?x0\n}",
    "expectedResponse": "No",
    "recursionDepth": 28
  },
  {
    "questionIdx": 180289,
    "questionWithBrackets": "What was founded by a German person's spouse and parent",
    "questionPatternModEntities": "What was founded by a German person 's spouse and parent",
    "questionTemplate": "What was [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [NP_SIMPLE] 's [ROLE_SIMPLE] and [ROLE_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:organization.organization.founders ?x1 .\n?x1 ns:people.person.children|ns:fictional_universe.fictional_character.children|ns:organization.organization.child/ns:organization.organization_relationship.child ?x2 .\n?x1 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ?x2 .\n?x2 a ns:people.person .\n?x2 ns:people.person.nationality ns:m.0345h .\nFILTER ( ?x1 != ?x2 )\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x1 P1 ?x2 .\n?x1 P2 ?x2 .\n?x2 P3 M1 .\n?x2 a M0 .\nFILTER ( ?x1 != ?x2 )\n}",
    "expectedResponse": "Okapia-Film Productions",
    "recursionDepth": 28
  },
  {
    "questionIdx": 81084,
    "questionWithBrackets": "Was [The Holy Mountain] written and edited by [El Topo]'s French costume designer",
    "questionPatternModEntities": "Was M2 written and edited by M0 's French costume designer",
    "questionTemplate": "Was [entity] [VP_SIMPLE] and [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.film_costumer_designer.costume_design_for_film ns:m.060dpr .\n?x0 ns:people.person.nationality ns:m.0f8l9c .\nns:m.09qgls ns:film.film.edited_by ?x0 .\nns:m.09qgls ns:film.film.written_by ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nM2 P2 ?x0 .\nM2 P3 ?x0\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 28
  },
  {
    "questionIdx": 77394,
    "questionWithBrackets": "Was [Stepfather of the Bride] produced by and directed by a female person",
    "questionPatternModEntities": "Was M2 produced by and directed by a female person",
    "questionTemplate": "Was [entity] [VP_SIMPLE] by and [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [NP_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 a ns:people.person .\n?x0 ns:people.person.gender ns:m.02zsn .\nns:m.0n4n_hx ns:film.film.directed_by ?x0 .\nns:m.0n4n_hx ns:film.film.produced_by|ns:film.film.production_companies ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M1 .\n?x0 a M0 .\nM2 P1 ?x0 .\nM2 P2 ?x0\n}",
    "expectedResponse": "No",
    "recursionDepth": 28
  },
  {
    "questionIdx": 185615,
    "questionWithBrackets": "What was written by and edited by [Lonely Bones]'s Dutch art director",
    "questionPatternModEntities": "What was written by and edited by M1 's Dutch art director",
    "questionTemplate": "What was [VP_SIMPLE] by and [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.film.edited_by ?x1 .\n?x0 ns:film.film.written_by ?x1 .\n?x1 ns:film.film_art_director.films_art_directed ns:m.0rh82mj .\n?x1 ns:people.person.nationality ns:m.059j2\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x1 P2 M0 .\n?x1 P3 M1\n}",
    "expectedResponse": "The Monster of Nix",
    "recursionDepth": 28
  },
  {
    "questionIdx": 142083,
    "questionWithBrackets": "What did [Anna Lubitsch]'s German child direct and executive produce",
    "questionPatternModEntities": "What did M1 's German child direct and executive produce",
    "questionTemplate": "What did [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] [VP_SIMPLE] and [VP_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.film.directed_by ?x1 .\n?x0 ns:film.film.executive_produced_by ?x1 .\n?x1 ns:people.person.nationality ns:m.0345h .\n?x1 ns:people.person.parents|ns:fictional_universe.fictional_character.parents|ns:organization.organization.parent/ns:organization.organization_relationship.parent ns:m.0n4k8f1\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x1 P2 M0 .\n?x1 P3 M1\n}",
    "expectedResponse": "Ninotchka",
    "recursionDepth": 28
  },
  {
    "questionIdx": 77239,
    "questionWithBrackets": "Was [Stanford University]'s employee's American sibling influenced by a person",
    "questionPatternModEntities": "Was M1 's employee 's American sibling influenced by a person",
    "questionTemplate": "Was [entity] 's [ROLE_SIMPLE] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] [VP_SIMPLE] by a [NP_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:influence.influence_node.influenced_by ?x1 .\n?x0 ns:people.person.nationality ns:m.09c7w0 .\n?x0 ns:people.person.sibling_s/ns:people.sibling_relationship.sibling|ns:fictional_universe.fictional_character.siblings/ns:fictional_universe.sibling_relationship_of_fictional_characters.siblings ?x2 .\n?x1 a ns:people.person .\n?x2 ns:people.person.employment_history/ns:business.employment_tenure.company ns:m.06pwq .\nFILTER ( ?x0 != ?x2 )\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x2 .\n?x0 P2 M0 .\n?x1 P3 M1 .\n?x2 a M2 .\nFILTER ( ?x0 != ?x1 )\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 28
  },
  {
    "questionIdx": 163912,
    "questionWithBrackets": "What production company was founded by [Joel Silver] and was founded by [Robert Zemeckis]",
    "questionPatternModEntities": "What production company was founded by M1 and was founded by M2",
    "questionTemplate": "What [NP_SIMPLE] was [VP_SIMPLE] by [entity] and was [VP_SIMPLE] by [entity]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:film.production_company .\n?x0 ns:organization.organization.founders ns:m.01f7j9 .\n?x0 ns:organization.organization.founders ns:m.03ktjq\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 a M0\n}",
    "expectedResponse": "Dark Castle Entertainment",
    "recursionDepth": 28
  },
  {
    "questionIdx": 112081,
    "questionWithBrackets": "Were [Alex Agnew], [George Lopez], [Dave Chappelle], [Cheech Marin], and [Kenan Thompson] influenced by a film director",
    "questionPatternModEntities": "Were M1 , M2 , M3 , M4 , and M5 influenced by a film director",
    "questionTemplate": "Were [entity] , [entity] , [entity] , [entity] , and [entity] [VP_SIMPLE] by a [NP_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 a ns:film.director .\nns:m.01xwv7 ns:influence.influence_node.influenced_by ?x0 .\nns:m.027z073 ns:influence.influence_node.influenced_by ?x0 .\nns:m.029k55 ns:influence.influence_node.influenced_by ?x0 .\nns:m.02xfj0 ns:influence.influence_node.influenced_by ?x0 .\nns:m.030wkp ns:influence.influence_node.influenced_by ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 a M0 .\nM1 P0 ?x0 .\nM2 P0 ?x0 .\nM3 P0 ?x0 .\nM4 P0 ?x0 .\nM5 P0 ?x0\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 28
  },
  {
    "questionIdx": 221561,
    "questionWithBrackets": "Who married a person's sibling and married [Eli Roth]",
    "questionPatternModEntities": "Who married a person 's sibling and married M1",
    "questionTemplate": "Who [VP_SIMPLE] a [NP_SIMPLE] 's [ROLE_SIMPLE] and [VP_SIMPLE] [entity]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:people.person .\n?x0 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ?x1 .\n?x0 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ns:m.058kqy .\n?x1 ns:people.person.sibling_s/ns:people.sibling_relationship.sibling|ns:fictional_universe.fictional_character.siblings/ns:fictional_universe.sibling_relationship_of_fictional_characters.siblings ?x2 .\n?x2 a ns:people.person .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x0 != ns:m.058kqy ) .\nFILTER ( ?x1 != ?x2 )\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P0 M1 .\n?x0 a M0 .\n?x1 P1 ?x2 .\n?x2 a M0 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x0 != M1 ) .\nFILTER ( ?x1 != ?x2 )\n}",
    "expectedResponse": "Peaches Geldof; Rosario Dawson",
    "recursionDepth": 28
  },
  {
    "questionIdx": 219905,
    "questionWithBrackets": "Who married [Annabella] and [Linda Christian] and married a film editor",
    "questionPatternModEntities": "Who married M1 and M2 and married a film editor",
    "questionTemplate": "Who [VP_SIMPLE] [entity] and [entity] and [VP_SIMPLE] a [NP_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:people.person .\n?x0 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ?x1 .\n?x0 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ns:m.06tbs8 .\n?x0 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ns:m.074pgd .\n?x1 a ns:film.editor .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x0 != ns:m.06tbs8 ) .\nFILTER ( ?x0 != ns:m.074pgd )\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 a M0 .\n?x1 a M3 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x0 != M1 ) .\nFILTER ( ?x0 != M2 )\n}",
    "expectedResponse": "Tyrone Power",
    "recursionDepth": 28
  },
  {
    "questionIdx": 145180,
    "questionWithBrackets": "What did [Matthew Mailer]'s parent direct, produce, and edit",
    "questionPatternModEntities": "What did M0 's parent direct , produce , and edit",
    "questionTemplate": "What did [entity] 's [ROLE_SIMPLE] [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.film.directed_by ?x1 .\n?x0 ns:film.film.edited_by ?x1 .\n?x0 ns:film.film.produced_by|ns:film.film.production_companies ?x1 .\n?x1 ns:people.person.children|ns:fictional_universe.fictional_character.children|ns:organization.organization.child/ns:organization.organization_relationship.child ns:m.0kx97wx\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x1 P3 M0\n}",
    "expectedResponse": "Wild 90",
    "recursionDepth": 28
  },
  {
    "questionIdx": 24591,
    "questionWithBrackets": "Did [WWJK], [WJRR], [WIYY], [KMYZ-FM], and [KEZO-FM] employ [Larry Guthrie]'s actor",
    "questionPatternModEntities": "Did M1 , M2 , M3 , M4 , and M5 employ M0 's actor",
    "questionTemplate": "Did [entity] , [entity] , [entity] , [entity] , and [entity] [VP_SIMPLE] [entity] 's [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.actor.film/ns:film.performance.character ns:m.0gyd5cr .\nns:m.025xl1p ns:business.employer.employees/ns:business.employment_tenure.person ?x0 .\nns:m.06309g ns:business.employer.employees/ns:business.employment_tenure.person ?x0 .\nns:m.09fjj8 ns:business.employer.employees/ns:business.employment_tenure.person ?x0 .\nns:m.0dbch6 ns:business.employer.employees/ns:business.employment_tenure.person ?x0 .\nns:m.0fck3l ns:business.employer.employees/ns:business.employment_tenure.person ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 ?x0 .\nM2 P1 ?x0 .\nM3 P1 ?x0 .\nM4 P1 ?x0 .\nM5 P1 ?x0\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 28
  },
  {
    "questionIdx": 62568,
    "questionWithBrackets": "Was [Karl Linn] a Spanish character's male sibling's sibling",
    "questionPatternModEntities": "Was M3 a Spanish character 's male sibling 's sibling",
    "questionTemplate": "Was [entity] a [ADJECTIVE_SIMPLE] [NP_SIMPLE] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] 's [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:people.person.gender ns:m.05zppz .\n?x0 ns:people.person.sibling_s/ns:people.sibling_relationship.sibling|ns:fictional_universe.fictional_character.siblings/ns:fictional_universe.sibling_relationship_of_fictional_characters.siblings ?x1 .\n?x1 a ns:fictional_universe.fictional_character .\n?x1 ns:people.person.nationality ns:m.06mkj .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ns:m.03crq_n != ?x0 ) .\nns:m.03crq_n ns:people.person.sibling_s/ns:people.sibling_relationship.sibling|ns:fictional_universe.fictional_character.siblings/ns:fictional_universe.sibling_relationship_of_fictional_characters.siblings ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x0 P1 M0 .\n?x1 P2 M2 .\n?x1 a M1 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( M3 != ?x0 ) .\nM3 P0 ?x0\n}",
    "expectedResponse": "No",
    "recursionDepth": 28
  },
  {
    "questionIdx": 43474,
    "questionWithBrackets": "Was [8 Mile] distributed by and produced by [Artist Management Group]'s founder's employer",
    "questionPatternModEntities": "Was M1 distributed by and produced by M0 's founder 's employer",
    "questionTemplate": "Was [entity] [VP_SIMPLE] by and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:business.employer.employees/ns:business.employment_tenure.person ?x1 .\n?x1 ns:organization.organization_founder.organizations_founded ns:m.03cz6xx .\nns:m.017d93 ns:film.film.distributors/ns:film.film_film_distributor_relationship.distributor ?x0 .\nns:m.017d93 ns:film.film.produced_by|ns:film.film.production_companies ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x1 P1 M0 .\nM1 P2 ?x0 .\nM1 P3 ?x0\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 28
  },
  {
    "questionIdx": 227873,
    "questionWithBrackets": "Who was a Mexican film producer that edited [The Waterwheel] and [Only God Knows]",
    "questionPatternModEntities": "Who was a Mexican film producer that edited M2 and M3",
    "questionTemplate": "Who was a [ADJECTIVE_SIMPLE] [NP_SIMPLE] that [VP_SIMPLE] [entity] and [entity]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:film.producer .\n?x0 a ns:people.person .\n?x0 ns:film.editor.film ns:m.04j1498 .\n?x0 ns:film.editor.film ns:m.0pc4658 .\n?x0 ns:people.person.nationality ns:m.0b90_r\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M2 .\n?x0 P0 M3 .\n?x0 P1 M4 .\n?x0 a M0 .\n?x0 a M1\n}",
    "expectedResponse": "Carlos Bolado",
    "recursionDepth": 28
  },
  {
    "questionIdx": 94724,
    "questionWithBrackets": "Was a costume designer's female parent's male child [Sergio Armani]",
    "questionPatternModEntities": "Was a costume designer 's female parent 's male child M2",
    "questionTemplate": "Was a [NP_SIMPLE] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:people.person.children|ns:fictional_universe.fictional_character.children|ns:organization.organization.child/ns:organization.organization_relationship.child ?x1 .\n?x0 ns:people.person.gender ns:m.02zsn .\n?x1 a ns:film.film_costumer_designer .\nns:m.0lpyn_s ns:people.person.gender ns:m.05zppz .\nns:m.0lpyn_s ns:people.person.parents|ns:fictional_universe.fictional_character.parents|ns:organization.organization.parent/ns:organization.organization_relationship.parent ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 ?x1 .\n?x1 a M1 .\nM2 P0 M3 .\nM2 P2 ?x0\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 28
  },
  {
    "questionIdx": 94870,
    "questionWithBrackets": "Was a costume designer, editor, star, and cinematographer of a film [Peter Jackson]",
    "questionPatternModEntities": "Was a costume designer , editor , star , and cinematographer of a film M1",
    "questionTemplate": "Was a [ROLE_SIMPLE] , [ROLE_SIMPLE] , [ROLE_SIMPLE] , and [ROLE_SIMPLE] of a [NP_SIMPLE] [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 a ns:film.film .\nns:m.0js9s ns:film.actor.film/ns:film.performance.film ?x0 .\nns:m.0js9s ns:film.cinematographer.film ?x0 .\nns:m.0js9s ns:film.editor.film ?x0 .\nns:m.0js9s ns:film.film_costumer_designer.costume_design_for_film ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 a M0 .\nM1 P0 ?x0 .\nM1 P1 ?x0 .\nM1 P2 ?x0 .\nM1 P3 ?x0\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 29
  },
  {
    "questionIdx": 219819,
    "questionWithBrackets": "Who influenced, was influenced by, and married a cinematographer",
    "questionPatternModEntities": "Who influenced , was influenced by , and married a cinematographer",
    "questionTemplate": "Who [VP_SIMPLE] , was [VP_SIMPLE] by , and [VP_SIMPLE] a [NP_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:people.person .\n?x0 ns:influence.influence_node.influenced ?x1 .\n?x0 ns:influence.influence_node.influenced_by ?x1 .\n?x0 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ?x1 .\n?x1 a ns:film.cinematographer .\nFILTER ( ?x0 != ?x1 )\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x0 a M0 .\n?x1 a M1 .\nFILTER ( ?x0 != ?x1 )\n}",
    "expectedResponse": "Jacques Demy",
    "recursionDepth": 29
  },
  {
    "questionIdx": 238977,
    "questionWithBrackets": "Who was influenced by and influenced [The World of Jacques Demy]'s French producer",
    "questionPatternModEntities": "Who was influenced by and influenced M2 's French producer",
    "questionTemplate": "Who was [VP_SIMPLE] by and [VP_SIMPLE] [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:people.person .\n?x0 ns:influence.influence_node.influenced ?x1 .\n?x0 ns:influence.influence_node.influenced_by ?x1 .\n?x1 ns:film.producer.film|ns:film.production_company.films ns:m.0bysl53 .\n?x1 ns:people.person.nationality ns:m.0f8l9c\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 a M0 .\n?x1 P2 M1 .\n?x1 P3 M2\n}",
    "expectedResponse": "Jacques Demy",
    "recursionDepth": 29
  },
  {
    "questionIdx": 6322,
    "questionWithBrackets": "Did [Edwin S. Porter] edit, write, and produce [Don't Play Us Cheap]'s prequel",
    "questionPatternModEntities": "Did M1 edit , write , and produce M0 's prequel",
    "questionTemplate": "Did [entity] [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] [entity] 's [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.film.sequel ns:m.0cc2x89 .\nns:m.03rg1j ns:film.editor.film ?x0 .\nns:m.03rg1j ns:film.producer.film|ns:film.production_company.films ?x0 .\nns:m.03rg1j ns:film.writer.film ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 ?x0 .\nM1 P2 ?x0 .\nM1 P3 ?x0\n}",
    "expectedResponse": "No",
    "recursionDepth": 29
  },
  {
    "questionIdx": 214011,
    "questionWithBrackets": "Who did [Edward Butler]'s child's country of nationality employ and [Simcyp] employ",
    "questionPatternModEntities": "Who did M2 's child 's country of nationality employ and M1 employ",
    "questionTemplate": "Who did [entity] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE] [VP_SIMPLE] and [entity] [VP_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:people.person .\n?x0 ns:people.person.employment_history/ns:business.employment_tenure.company ?x1 .\n?x0 ns:people.person.employment_history/ns:business.employment_tenure.company ns:m.043kcnl .\n?x1 ^ns:people.person.nationality ?x2 .\n?x2 ns:people.person.parents|ns:fictional_universe.fictional_character.parents|ns:organization.organization.parent/ns:organization.organization_relationship.parent ns:m.0hhmcrk\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P0 M1 .\n?x0 a M0 .\n?x1 P1 ?x2 .\n?x2 P2 M2\n}",
    "expectedResponse": "Janak Wedagedera",
    "recursionDepth": 29
  },
  {
    "questionIdx": 205073,
    "questionWithBrackets": "Which film was edited by a film editor and starred [Grazyna Staniszewska]",
    "questionPatternModEntities": "Which film was edited by a film editor and starred M1",
    "questionTemplate": "Which [NP_SIMPLE] was [VP_SIMPLE] by a [NP_SIMPLE] and [VP_SIMPLE] [entity]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:film.film .\n?x0 ns:film.film.edited_by ?x1 .\n?x0 ns:film.film.starring/ns:film.performance.actor ns:m.0wqgh_c .\n?x1 a ns:film.editor\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M1 .\n?x0 P1 ?x1 .\n?x0 a M0 .\n?x1 a M2\n}",
    "expectedResponse": "Zazdrosc i medycyna; Knights of the Teutonic Order",
    "recursionDepth": 29
  },
  {
    "questionIdx": 215693,
    "questionWithBrackets": "Who did a company's child's employee influence and marry",
    "questionPatternModEntities": "Who did a company 's child 's employee influence and marry",
    "questionTemplate": "Who did a [NP_SIMPLE] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE] [VP_SIMPLE] and [VP_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:people.person .\n?x0 ns:influence.influence_node.influenced_by ?x1 .\n?x0 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ?x1 .\n?x1 ns:people.person.employment_history/ns:business.employment_tenure.company ?x2 .\n?x2 ns:people.person.parents|ns:fictional_universe.fictional_character.parents|ns:organization.organization.parent/ns:organization.organization_relationship.parent ?x3 .\n?x3 a ns:business.employer .\nFILTER ( ?x0 != ?x1 )\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 a M0 .\n?x1 P2 ?x2 .\n?x2 P3 ?x3 .\n?x3 a M1 .\nFILTER ( ?x0 != ?x1 )\n}",
    "expectedResponse": "Beth Ostrosky Stern; Gwendolyn Knight",
    "recursionDepth": 29
  },
  {
    "questionIdx": 69495,
    "questionWithBrackets": "Was [Ning Ying] a female Chinese cinematographer that produced [Born in Beijing]",
    "questionPatternModEntities": "Was M0 a female Chinese cinematographer that produced M3",
    "questionTemplate": "Was [entity] a [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [NP_SIMPLE] that [VP_SIMPLE] [entity]",
    "sparql": "SELECT count(*) WHERE {\nns:m.03yjwvx a ns:film.cinematographer .\nns:m.03yjwvx ns:film.producer.film|ns:film.production_company.films ns:m.0jqy2xv .\nns:m.03yjwvx ns:people.person.gender ns:m.02zsn .\nns:m.03yjwvx ns:people.person.nationality ns:m.0d05w3\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M2 .\nM0 P1 M3 .\nM0 P2 M4 .\nM0 a M1\n}",
    "expectedResponse": "No",
    "recursionDepth": 29
  },
  {
    "questionIdx": 210491,
    "questionWithBrackets": "Which screenwriter influenced and was influenced by a producer of [The Gleaners and I]",
    "questionPatternModEntities": "Which screenwriter influenced and was influenced by a producer of M1",
    "questionTemplate": "Which [NP_SIMPLE] [VP_SIMPLE] and was [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:film.writer .\n?x0 ns:influence.influence_node.influenced ?x1 .\n?x0 ns:influence.influence_node.influenced_by ?x1 .\n?x1 ns:film.producer.film|ns:film.production_company.films ns:m.09m9v4\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 a M0 .\n?x1 P2 M1\n}",
    "expectedResponse": "Jacques Demy",
    "recursionDepth": 29
  },
  {
    "questionIdx": 63951,
    "questionWithBrackets": "Was [Law for Tombstone] written by, directed by, and produced by an art director",
    "questionPatternModEntities": "Was M1 written by , directed by , and produced by a art director",
    "questionTemplate": "Was [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by a [NP_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 a ns:film.film_art_director .\nns:m.0gfqydx ns:film.film.directed_by ?x0 .\nns:m.0gfqydx ns:film.film.produced_by|ns:film.film.production_companies ?x0 .\nns:m.0gfqydx ns:film.film.written_by ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 a M0 .\nM1 P0 ?x0 .\nM1 P1 ?x0 .\nM1 P2 ?x0\n}",
    "expectedResponse": "No",
    "recursionDepth": 29
  },
  {
    "questionIdx": 5729,
    "questionWithBrackets": "Did [Devesh Rawal] direct a film and executive produce a film",
    "questionPatternModEntities": "Did M1 direct a film and executive produce a film",
    "questionTemplate": "Did [entity] [VP_SIMPLE] a [NP_SIMPLE] and [VP_SIMPLE] a [NP_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 a ns:film.film .\n?x1 a ns:film.film .\nns:m.0y5vp5q ns:film.director.film ?x1 .\nns:m.0y5vp5q ns:film.producer.films_executive_produced ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 a M0 .\n?x1 a M0 .\nM1 P0 ?x0 .\nM1 P1 ?x1\n}",
    "expectedResponse": "No",
    "recursionDepth": 29
  },
  {
    "questionIdx": 17529,
    "questionWithBrackets": "Did [Raymond Demy]'s child influence and marry a writer of [The Beaches of Agn\u00e8s]",
    "questionPatternModEntities": "Did M0 's child influence and marry a writer of M1",
    "questionTemplate": "Did [entity] 's [ROLE_SIMPLE] [VP_SIMPLE] and [VP_SIMPLE] a [ROLE_SIMPLE] of [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:influence.influence_node.influenced ?x1 .\n?x0 ns:people.person.parents|ns:fictional_universe.fictional_character.parents|ns:organization.organization.parent/ns:organization.organization_relationship.parent ns:m.0n3h7qn .\n?x0 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ?x1 .\n?x1 ns:film.writer.film ns:m.04nm0cr .\nFILTER ( ?x0 != ?x1 )\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x0 P1 M0 .\n?x0 P2 ?x1 .\n?x1 P3 M1 .\nFILTER ( ?x0 != ?x1 )\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 29
  },
  {
    "questionIdx": 238988,
    "questionWithBrackets": "Who was influenced by and influenced a costume designer of a film",
    "questionPatternModEntities": "Who was influenced by and influenced a costume designer of a film",
    "questionTemplate": "Who was [VP_SIMPLE] by and [VP_SIMPLE] a [ROLE_SIMPLE] of a [NP_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:people.person .\n?x0 ns:influence.influence_node.influenced ?x1 .\n?x0 ns:influence.influence_node.influenced_by ?x1 .\n?x1 ns:film.film_costumer_designer.costume_design_for_film ?x2 .\n?x2 a ns:film.film\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 a M0 .\n?x1 P2 ?x2 .\n?x2 a M1\n}",
    "expectedResponse": "Federico Garc\u00eda Lorca",
    "recursionDepth": 29
  },
  {
    "questionIdx": 82996,
    "questionWithBrackets": "Was [The Weinstein Company] founded by an actor that executive produced [Deadfall] and [Silver Linings Playbook]",
    "questionPatternModEntities": "Was M3 founded by a actor that executive produced M1 and M2",
    "questionTemplate": "Was [entity] [VP_SIMPLE] by a [NP_SIMPLE] that [VP_SIMPLE] [entity] and [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 a ns:film.actor .\n?x0 ns:film.producer.films_executive_produced ns:m.0gx0plf .\n?x0 ns:film.producer.films_executive_produced ns:m.0h95927 .\nns:m.061dn_ ns:organization.organization.founders ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 a M0 .\nM3 P1 ?x0\n}",
    "expectedResponse": "No",
    "recursionDepth": 29
  },
  {
    "questionIdx": 77736,
    "questionWithBrackets": "Was [Submission] edited by and produced by [Religious Maniac]'s Dutch actor",
    "questionPatternModEntities": "Was M2 edited by and produced by M1 's Dutch actor",
    "questionTemplate": "Was [entity] [VP_SIMPLE] by and [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.actor.film/ns:film.performance.character ns:m.0wqdw51 .\n?x0 ns:people.person.nationality ns:m.059j2 .\nns:m.04b5hv ns:film.film.edited_by ?x0 .\nns:m.04b5hv ns:film.film.produced_by|ns:film.film.production_companies ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nM2 P2 ?x0 .\nM2 P3 ?x0\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 29
  },
  {
    "questionIdx": 84739,
    "questionWithBrackets": "Was [United Kingdom] [The Godfather Part III]'s Italian writer's American sibling's country of nationality",
    "questionPatternModEntities": "Was M3 M1 's Italian writer 's American sibling 's country of nationality",
    "questionTemplate": "Was [entity] [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] 's [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:people.person.nationality ns:m.09c7w0 .\n?x0 ns:people.person.sibling_s/ns:people.sibling_relationship.sibling|ns:fictional_universe.fictional_character.siblings/ns:fictional_universe.sibling_relationship_of_fictional_characters.siblings ?x1 .\n?x1 ns:film.writer.film ns:m.0y_yw .\n?x1 ns:people.person.nationality ns:m.03rjj .\nFILTER ( ?x0 != ?x1 ) .\nns:m.07ssc ^ns:people.person.nationality ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x0 P1 M0 .\n?x1 P1 M2 .\n?x1 P2 M1 .\nFILTER ( ?x0 != ?x1 ) .\nM3 P3 ?x0\n}",
    "expectedResponse": "No",
    "recursionDepth": 29
  },
  {
    "questionIdx": 32459,
    "questionWithBrackets": "Did a female person that executive produced [Madonna: The MDNA Tour] influence [Lenny Henry]",
    "questionPatternModEntities": "Did a female person that executive produced M2 influence M1",
    "questionTemplate": "Did a [ADJECTIVE_SIMPLE] [NP_SIMPLE] that [VP_SIMPLE] [entity] [VP_SIMPLE] [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 a ns:people.person .\n?x0 ns:film.producer.films_executive_produced ns:m.0w444w1 .\n?x0 ns:influence.influence_node.influenced ns:m.013qy3 .\n?x0 ns:people.person.gender ns:m.02zsn\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M1 .\n?x0 P1 M2 .\n?x0 P2 M3 .\n?x0 a M0\n}",
    "expectedResponse": "No",
    "recursionDepth": 29
  },
  {
    "questionIdx": 219784,
    "questionWithBrackets": "Who influenced, married, and was influenced by a film editor",
    "questionPatternModEntities": "Who influenced , married , and was influenced by a film editor",
    "questionTemplate": "Who [VP_SIMPLE] , [VP_SIMPLE] , and was [VP_SIMPLE] by a [NP_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:people.person .\n?x0 ns:influence.influence_node.influenced ?x1 .\n?x0 ns:influence.influence_node.influenced_by ?x1 .\n?x0 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ?x1 .\n?x1 a ns:film.editor .\nFILTER ( ?x0 != ?x1 )\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x0 a M0 .\n?x1 a M1 .\nFILTER ( ?x0 != ?x1 )\n}",
    "expectedResponse": "Jacques Demy",
    "recursionDepth": 29
  },
  {
    "questionIdx": 21976,
    "questionWithBrackets": "Did [The Departed] star a film editor and star [Ramon Estevez]'s parent",
    "questionPatternModEntities": "Did M2 star a film editor and star M1 's parent",
    "questionTemplate": "Did [entity] [VP_SIMPLE] a [NP_SIMPLE] and [VP_SIMPLE] [entity] 's [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 a ns:film.editor .\n?x1 ns:people.person.children|ns:fictional_universe.fictional_character.children|ns:organization.organization.child/ns:organization.organization_relationship.child ns:m.08s1w8 .\nns:m.04vr_f ns:film.film.starring/ns:film.performance.actor ?x0 .\nns:m.04vr_f ns:film.film.starring/ns:film.performance.actor ?x1\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 a M0 .\n?x1 P0 M1 .\nM2 P1 ?x0 .\nM2 P1 ?x1\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 29
  },
  {
    "questionIdx": 23497,
    "questionWithBrackets": "Did [Trifon Trifanov] edit a film and executive produce a film",
    "questionPatternModEntities": "Did M1 edit a film and executive produce a film",
    "questionTemplate": "Did [entity] [VP_SIMPLE] a [NP_SIMPLE] and [VP_SIMPLE] a [NP_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 a ns:film.film .\n?x1 a ns:film.film .\nns:m.0v_294j ns:film.editor.film ?x0 .\nns:m.0v_294j ns:film.producer.films_executive_produced ?x1\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 a M0 .\n?x1 a M0 .\nM1 P0 ?x0 .\nM1 P1 ?x1\n}",
    "expectedResponse": "No",
    "recursionDepth": 29
  },
  {
    "questionIdx": 144607,
    "questionWithBrackets": "What did [Kazuko Kurosawa]'s parent executive produce, write, and produce",
    "questionPatternModEntities": "What did M0 's parent executive produce , write , and produce",
    "questionTemplate": "What did [entity] 's [ROLE_SIMPLE] [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.film.executive_produced_by ?x1 .\n?x0 ns:film.film.produced_by|ns:film.film.production_companies ?x1 .\n?x0 ns:film.film.written_by ?x1 .\n?x1 ns:people.person.children|ns:fictional_universe.fictional_character.children|ns:organization.organization.child/ns:organization.organization_relationship.child ns:m.03w9kln\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x1 P3 M0\n}",
    "expectedResponse": "Kagemusha",
    "recursionDepth": 29
  },
  {
    "questionIdx": 151364,
    "questionWithBrackets": "What did an actor's actor executive produce and [Nicol\u00e1s L\u00f3pez] write",
    "questionPatternModEntities": "What did a actor 's actor executive produce and M0 write",
    "questionTemplate": "What did a [NP_SIMPLE] 's [ROLE_SIMPLE] [VP_SIMPLE] and [entity] [VP_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.film.executive_produced_by ?x1 .\n?x0 ns:film.film.written_by ns:m.0gfrmlj .\n?x1 ns:film.actor.film/ns:film.performance.character ?x2 .\n?x2 a ns:film.actor\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 M0 .\n?x1 P2 ?x2 .\n?x2 a M1\n}",
    "expectedResponse": "Average Red",
    "recursionDepth": 29
  },
  {
    "questionIdx": 131042,
    "questionWithBrackets": "What British cinematographer that was employed by [Syncopy Inc.] influenced [Robert Santos]",
    "questionPatternModEntities": "What British cinematographer that was employed by M2 influenced M1",
    "questionTemplate": "What [ADJECTIVE_SIMPLE] [NP_SIMPLE] that was [VP_SIMPLE] by [entity] [VP_SIMPLE] [entity]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:film.cinematographer .\n?x0 ns:influence.influence_node.influenced ns:m.04vxxd8 .\n?x0 ns:people.person.employment_history/ns:business.employment_tenure.company ns:m.04yhgyb .\n?x0 ns:people.person.nationality ns:m.07ssc\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M1 .\n?x0 P1 M2 .\n?x0 P2 M3 .\n?x0 a M0\n}",
    "expectedResponse": "Christopher Nolan",
    "recursionDepth": 29
  },
  {
    "questionIdx": 222057,
    "questionWithBrackets": "Who produced, executive produced, and directed [The Magician's Hat]'s prequel",
    "questionPatternModEntities": "Who produced , executive produced , and directed M1 's prequel",
    "questionTemplate": "Who [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] [entity] 's [ROLE_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:people.person .\n?x0 ns:film.director.film ?x1 .\n?x0 ns:film.producer.films_executive_produced ?x1 .\n?x0 ns:film.producer.film|ns:film.production_company.films ?x1 .\n?x1 ns:film.film.sequel ns:m.05p77qr\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x0 a M0 .\n?x1 P3 M1\n}",
    "expectedResponse": "Doro Vlado Hreljanovic",
    "recursionDepth": 29
  },
  {
    "questionIdx": 219709,
    "questionWithBrackets": "Who influenced and was influenced by [Ydessa, the Bears and etc.]'s director and producer",
    "questionPatternModEntities": "Who influenced and was influenced by M1 's director and producer",
    "questionTemplate": "Who [VP_SIMPLE] and was [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] and [ROLE_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:people.person .\n?x0 ns:influence.influence_node.influenced ?x1 .\n?x0 ns:influence.influence_node.influenced_by ?x1 .\n?x1 ns:film.director.film ns:m.0z6mj21 .\n?x1 ns:film.producer.film|ns:film.production_company.films ns:m.0z6mj21\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 a M0 .\n?x1 P2 M1 .\n?x1 P3 M1\n}",
    "expectedResponse": "Jacques Demy",
    "recursionDepth": 29
  },
  {
    "questionIdx": 76231,
    "questionWithBrackets": "Was [Shinya Tsukamoto] a cinematographer, art director, producer, and star of a film",
    "questionPatternModEntities": "Was M1 a cinematographer , art director , producer , and star of a film",
    "questionTemplate": "Was [entity] a [ROLE_SIMPLE] , [ROLE_SIMPLE] , [ROLE_SIMPLE] , and [ROLE_SIMPLE] of a [NP_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 a ns:film.film .\nns:m.01qnfc ns:film.actor.film/ns:film.performance.film ?x0 .\nns:m.01qnfc ns:film.cinematographer.film ?x0 .\nns:m.01qnfc ns:film.film_art_director.films_art_directed ?x0 .\nns:m.01qnfc ns:film.producer.film|ns:film.production_company.films ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 a M0 .\nM1 P0 ?x0 .\nM1 P1 ?x0 .\nM1 P2 ?x0 .\nM1 P3 ?x0\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 29
  },
  {
    "questionIdx": 44111,
    "questionWithBrackets": "Was [Abigail Joshi] a screenwriter's Chinese Canadian male sibling",
    "questionPatternModEntities": "Was M1 a screenwriter 's Chinese Canadian male sibling",
    "questionTemplate": "Was [entity] a [NP_SIMPLE] 's [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 a ns:film.writer .\nFILTER ( ns:m.0_g7d1_ != ?x0 ) .\nns:m.0_g7d1_ ns:people.person.gender ns:m.05zppz .\nns:m.0_g7d1_ ns:people.person.nationality ns:m.0d05w3 .\nns:m.0_g7d1_ ns:people.person.nationality ns:m.0d060g .\nns:m.0_g7d1_ ns:people.person.sibling_s/ns:people.sibling_relationship.sibling|ns:fictional_universe.fictional_character.siblings/ns:fictional_universe.sibling_relationship_of_fictional_characters.siblings ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 a M0 .\nFILTER ( M1 != ?x0 ) .\nM1 P0 ?x0 .\nM1 P1 M2 .\nM1 P1 M3 .\nM1 P2 M4\n}",
    "expectedResponse": "No",
    "recursionDepth": 29
  },
  {
    "questionIdx": 158199,
    "questionWithBrackets": "What film producer was founded by [Roy O. Disney] and employed a film director",
    "questionPatternModEntities": "What film producer was founded by M1 and employed a film director",
    "questionTemplate": "What [NP_SIMPLE] was [VP_SIMPLE] by [entity] and [VP_SIMPLE] a [NP_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:film.producer .\n?x0 ns:business.employer.employees/ns:business.employment_tenure.person ?x1 .\n?x0 ns:organization.organization.founders ns:m.015yg9 .\n?x1 a ns:film.director\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M1 .\n?x0 P1 ?x1 .\n?x0 a M0 .\n?x1 a M2\n}",
    "expectedResponse": "Walt Disney Animation Studios",
    "recursionDepth": 29
  },
  {
    "questionIdx": 164363,
    "questionWithBrackets": "What screenwriter that married [Bijoya Ray] did a screenwriter's parent influence",
    "questionPatternModEntities": "What screenwriter that married M1 did a screenwriter 's parent influence",
    "questionTemplate": "What [NP_SIMPLE] that [VP_SIMPLE] [entity] did a [NP_SIMPLE] 's [ROLE_SIMPLE] [VP_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:film.writer .\n?x0 ns:influence.influence_node.influenced_by ?x1 .\n?x0 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ns:m.0fndm2 .\n?x1 ns:people.person.children|ns:fictional_universe.fictional_character.children|ns:organization.organization.child/ns:organization.organization_relationship.child ?x2 .\n?x2 a ns:film.writer .\nFILTER ( ?x0 != ns:m.0fndm2 )\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 M1 .\n?x0 a M0 .\n?x1 P2 ?x2 .\n?x2 a M0 .\nFILTER ( ?x0 != M1 )\n}",
    "expectedResponse": "Satyajit Ray",
    "recursionDepth": 29
  },
  {
    "questionIdx": 138215,
    "questionWithBrackets": "What character married [Mandy Pepperidge] and was influenced by a character",
    "questionPatternModEntities": "What character married M1 and was influenced by a character",
    "questionTemplate": "What [NP_SIMPLE] [VP_SIMPLE] [entity] and was [VP_SIMPLE] by a [NP_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:fictional_universe.fictional_character .\n?x0 ns:influence.influence_node.influenced_by ?x1 .\n?x0 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ns:m.04zrtj7 .\n?x1 a ns:fictional_universe.fictional_character .\nFILTER ( ?x0 != ns:m.04zrtj7 )\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 M1 .\n?x0 a M0 .\n?x1 a M0 .\nFILTER ( ?x0 != M1 )\n}",
    "expectedResponse": "John \"Bluto\" Blutarsky",
    "recursionDepth": 29
  },
  {
    "questionIdx": 42164,
    "questionWithBrackets": "Did an art director's spouse play [Saraswathi Teacher] and play [Mrs. Ganga Kumar]",
    "questionPatternModEntities": "Did a art director 's spouse play M0 and play M1",
    "questionTemplate": "Did a [NP_SIMPLE] 's [ROLE_SIMPLE] [VP_SIMPLE] [entity] and [VP_SIMPLE] [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.actor.film/ns:film.performance.character ns:m.011r7n2v .\n?x0 ns:film.actor.film/ns:film.performance.character ns:m.0h6yqz5 .\n?x0 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ?x1 .\n?x1 a ns:film.film_art_director .\nFILTER ( ?x0 != ?x1 )\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P1 ?x1 .\n?x1 a M2 .\nFILTER ( ?x0 != ?x1 )\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 29
  },
  {
    "questionIdx": 148651,
    "questionWithBrackets": "What did a Swedish cinematographer direct and [Emil Larsson] edit",
    "questionPatternModEntities": "What did a Swedish cinematographer direct and M0 edit",
    "questionTemplate": "What did a [ADJECTIVE_SIMPLE] [NP_SIMPLE] [VP_SIMPLE] and [entity] [VP_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.film.directed_by ?x1 .\n?x0 ns:film.film.edited_by ns:m.0ct2c6 .\n?x1 a ns:film.cinematographer .\n?x1 ns:people.person.nationality ns:m.0d0vqn\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 ?x1 .\n?x1 P2 M2 .\n?x1 a M1\n}",
    "expectedResponse": "Du & jag; Fjorton suger",
    "recursionDepth": 29
  },
  {
    "questionIdx": 114329,
    "questionWithBrackets": "Were [Building a Building] and [The Whoopee Party] produced by [Z-Entertainment]'s parent's employee and founder",
    "questionPatternModEntities": "Were M1 and M2 produced by M0 's parent 's employee and founder",
    "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE] and [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:organization.organization_founder.organizations_founded ?x1 .\n?x0 ns:people.person.employment_history/ns:business.employment_tenure.company ?x1 .\n?x1 ns:people.person.children|ns:fictional_universe.fictional_character.children|ns:organization.organization.child/ns:organization.organization_relationship.child ns:m.0y9vmzf .\nns:m.07k55vt ns:film.film.produced_by|ns:film.film.production_companies ?x0 .\nns:m.0g3svd ns:film.film.produced_by|ns:film.film.production_companies ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x1 P2 M0 .\nM1 P3 ?x0 .\nM2 P3 ?x0\n}",
    "expectedResponse": "No",
    "recursionDepth": 29
  },
  {
    "questionIdx": 13062,
    "questionWithBrackets": "Did [Leon Youngblood SR]'s country of nationality employ an actor and employ [G\u00e9rard Barbonnet]",
    "questionPatternModEntities": "Did M1 's country of nationality employ a actor and employ M0",
    "questionTemplate": "Did [entity] 's [ROLE_SIMPLE] [VP_SIMPLE] a [NP_SIMPLE] and [VP_SIMPLE] [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ^ns:people.person.nationality ns:m.012qgrjw .\n?x0 ns:business.employer.employees/ns:business.employment_tenure.person ?x1 .\n?x0 ns:business.employer.employees/ns:business.employment_tenure.person ns:m.0vntbp0 .\n?x1 a ns:film.actor\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x1 a M2\n}",
    "expectedResponse": "No",
    "recursionDepth": 29
  },
  {
    "questionIdx": 148282,
    "questionWithBrackets": "What did a Dutch editor of [The bridge] direct and produce",
    "questionPatternModEntities": "What did a Dutch editor of M1 direct and produce",
    "questionTemplate": "What did a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] [VP_SIMPLE] and [VP_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.film.directed_by ?x1 .\n?x0 ns:film.film.produced_by|ns:film.film.production_companies ?x1 .\n?x1 ns:film.editor.film ns:m.080955b .\n?x1 ns:people.person.nationality ns:m.059j2\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x1 P2 M0 .\n?x1 P3 M1\n}",
    "expectedResponse": "Die Windrose",
    "recursionDepth": 29
  },
  {
    "questionIdx": 86732,
    "questionWithBrackets": "Was [White Stork Is Coming] edited by and produced by [Exquisit Corpses]'s executive producer and producer",
    "questionPatternModEntities": "Was M1 edited by and produced by M0 's executive producer and producer",
    "questionTemplate": "Was [entity] [VP_SIMPLE] by and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] and [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.producer.films_executive_produced ns:m.0zntmwq .\n?x0 ns:film.producer.film|ns:film.production_company.films ns:m.0zntmwq .\nns:m.0zxyz5j ns:film.film.edited_by ?x0 .\nns:m.0zxyz5j ns:film.film.produced_by|ns:film.film.production_companies ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M0 .\nM1 P2 ?x0 .\nM1 P3 ?x0\n}",
    "expectedResponse": "No",
    "recursionDepth": 29
  },
  {
    "questionIdx": 20224,
    "questionWithBrackets": "Did [Symantec Corporation] acquire a company and acquire [NetDistributor] and [IMlogic]",
    "questionPatternModEntities": "Did M1 acquire a company and acquire M2 and M3",
    "questionTemplate": "Did [entity] [VP_SIMPLE] a [NP_SIMPLE] and [VP_SIMPLE] [entity] and [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 a ns:business.employer .\nns:m.01zpmq ns:organization.organization.companies_acquired/ns:business.acquisition.company_acquired ?x0 .\nns:m.01zpmq ns:organization.organization.companies_acquired/ns:business.acquisition.company_acquired ns:m.03brq21 .\nns:m.01zpmq ns:organization.organization.companies_acquired/ns:business.acquisition.company_acquired ns:m.05nm1gr\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 a M0 .\nM1 P0 ?x0 .\nM1 P0 M2 .\nM1 P0 M3\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 29
  },
  {
    "questionIdx": 31884,
    "questionWithBrackets": "Did a director of a film's sequel and prequel direct [Art House]",
    "questionPatternModEntities": "Did a director of a film 's sequel and prequel direct M0",
    "questionTemplate": "Did a [ROLE_SIMPLE] of a [NP_SIMPLE] 's [ROLE_SIMPLE] and [ROLE_SIMPLE] [VP_SIMPLE] [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.director.film ?x1 .\n?x0 ns:film.director.film ns:m.05nmszz .\n?x1 ns:film.film.prequel ?x2 .\n?x1 ns:film.film.sequel ?x2 .\n?x2 a ns:film.film\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x0 P0 M0 .\n?x1 P1 ?x2 .\n?x1 P2 ?x2 .\n?x2 a M1\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 29
  },
  {
    "questionIdx": 9492,
    "questionWithBrackets": "Did [Hayao Miyazaki] write [Scream 3] and write a film's prequel",
    "questionPatternModEntities": "Did M1 write M2 and write a film 's prequel",
    "questionTemplate": "Did [entity] [VP_SIMPLE] [entity] and [VP_SIMPLE] a [NP_SIMPLE] 's [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.film.sequel ?x1 .\n?x1 a ns:film.film .\nns:m.0534v ns:film.writer.film ?x0 .\nns:m.0534v ns:film.writer.film ns:m.02v63m\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x1 a M0 .\nM1 P1 ?x0 .\nM1 P1 M2\n}",
    "expectedResponse": "No",
    "recursionDepth": 29
  },
  {
    "questionIdx": 237996,
    "questionWithBrackets": "Who was influenced by a cinematographer and influenced an art director",
    "questionPatternModEntities": "Who was influenced by a cinematographer and influenced a art director",
    "questionTemplate": "Who was [VP_SIMPLE] by a [NP_SIMPLE] and [VP_SIMPLE] a [NP_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:people.person .\n?x0 ns:influence.influence_node.influenced ?x1 .\n?x0 ns:influence.influence_node.influenced_by ?x2 .\n?x1 a ns:film.film_art_director .\n?x2 a ns:film.cinematographer\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x2 .\n?x0 a M0 .\n?x1 a M1 .\n?x2 a M2\n}",
    "expectedResponse": "Maya Deren; Gilles Deleuze",
    "recursionDepth": 29
  },
  {
    "questionIdx": 35309,
    "questionWithBrackets": "Did a film star [Curtis Garcia] and star [Raging Bull]'s cinematographer",
    "questionPatternModEntities": "Did a film star M1 and star M2 's cinematographer",
    "questionTemplate": "Did a [NP_SIMPLE] [VP_SIMPLE] [entity] and [VP_SIMPLE] [entity] 's [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 a ns:film.film .\n?x0 ns:film.film.starring/ns:film.performance.actor ?x1 .\n?x0 ns:film.film.starring/ns:film.performance.actor ns:m.0gc9b4h .\n?x1 ns:film.cinematographer.film ns:m.06cm5\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x0 P0 M1 .\n?x0 a M0 .\n?x1 P1 M2\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 29
  },
  {
    "questionIdx": 18560,
    "questionWithBrackets": "Did [Rudi Feld]'s German American sibling's spouse play [Prof. Ludwig Rosenberg]",
    "questionPatternModEntities": "Did M1 's German American sibling 's spouse play M0",
    "questionTemplate": "Did [entity] 's [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] 's [ROLE_SIMPLE] [VP_SIMPLE] [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.actor.film/ns:film.performance.character ns:m.0pd1gtm .\n?x0 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ?x1 .\n?x1 ns:people.person.nationality ns:m.0345h .\n?x1 ns:people.person.nationality ns:m.09c7w0 .\n?x1 ns:people.person.sibling_s/ns:people.sibling_relationship.sibling|ns:fictional_universe.fictional_character.siblings/ns:fictional_universe.sibling_relationship_of_fictional_characters.siblings ns:m.0hqt46g .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x1 != ns:m.0hqt46g )\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 ?x1 .\n?x1 P2 M1 .\n?x1 P3 M2 .\n?x1 P3 M3 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x1 != M1 )\n}",
    "expectedResponse": "No",
    "recursionDepth": 29
  },
  {
    "questionIdx": 229806,
    "questionWithBrackets": "Who was a female French film producer that [Honor\u00e9 de Balzac] influenced",
    "questionPatternModEntities": "Who was a female French film producer that M2 influenced",
    "questionTemplate": "Who was a [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [NP_SIMPLE] that [entity] [VP_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:film.producer .\n?x0 a ns:people.person .\n?x0 ns:influence.influence_node.influenced_by ns:m.0bmjw .\n?x0 ns:people.person.gender ns:m.02zsn .\n?x0 ns:people.person.nationality ns:m.0f8l9c\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M2 .\n?x0 P1 M3 .\n?x0 P2 M4 .\n?x0 a M0 .\n?x0 a M1\n}",
    "expectedResponse": "Ann Scott",
    "recursionDepth": 29
  },
  {
    "questionIdx": 124387,
    "questionWithBrackets": "Were [Seven Swords] and [Shaolin Girl] executive produced by a film's Chinese writer",
    "questionPatternModEntities": "Were M2 and M3 executive produced by a film 's Chinese writer",
    "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by a [NP_SIMPLE] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.writer.film ?x1 .\n?x0 ns:people.person.nationality ns:m.0d05w3 .\n?x1 a ns:film.film .\nns:m.03cttnf ns:film.film.executive_produced_by ?x0 .\nns:m.079tvk ns:film.film.executive_produced_by ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x0 P1 M0 .\n?x1 a M1 .\nM2 P2 ?x0 .\nM3 P2 ?x0\n}",
    "expectedResponse": "No",
    "recursionDepth": 29
  },
  {
    "questionIdx": 11796,
    "questionWithBrackets": "Did [Johnny Dorelli] marry a character's actor and marry [Richard Emmolo]",
    "questionPatternModEntities": "Did M1 marry a character 's actor and marry M2",
    "questionTemplate": "Did [entity] [VP_SIMPLE] a [NP_SIMPLE] 's [ROLE_SIMPLE] and [VP_SIMPLE] [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.actor.film/ns:film.performance.character ?x1 .\n?x1 a ns:fictional_universe.fictional_character .\nFILTER ( ns:m.026jwcr != ?x0 ) .\nFILTER ( ns:m.026jwcr != ns:m.0h29dkz ) .\nns:m.026jwcr ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ?x0 .\nns:m.026jwcr ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ns:m.0h29dkz\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x1 a M0 .\nFILTER ( M1 != ?x0 ) .\nFILTER ( M1 != M2 ) .\nM1 P1 ?x0 .\nM1 P1 M2\n}",
    "expectedResponse": "No",
    "recursionDepth": 29
  },
  {
    "questionIdx": 205489,
    "questionWithBrackets": "Which film was written by an actor and starred [Rishi Banerjee]",
    "questionPatternModEntities": "Which film was written by a actor and starred M1",
    "questionTemplate": "Which [NP_SIMPLE] was [VP_SIMPLE] by a [NP_SIMPLE] and [VP_SIMPLE] [entity]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:film.film .\n?x0 ns:film.film.starring/ns:film.performance.actor ns:m.0sgbwr9 .\n?x0 ns:film.film.written_by ?x1 .\n?x1 a ns:film.actor\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M1 .\n?x0 P1 ?x1 .\n?x0 a M0 .\n?x1 a M2\n}",
    "expectedResponse": "Sagar Sangamey",
    "recursionDepth": 29
  },
  {
    "questionIdx": 102191,
    "questionWithBrackets": "Was a male parent of an executive producer and costume designer of [Fudgy Wudgy Fudge Face] [John Reesor Williams]",
    "questionPatternModEntities": "Was a male parent of a executive producer and costume designer of M0 M1",
    "questionTemplate": "Was a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of a [ROLE_SIMPLE] and [ROLE_SIMPLE] of [entity] [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.film_costumer_designer.costume_design_for_film ns:m.0h1pp81 .\n?x0 ns:film.producer.films_executive_produced ns:m.0h1pp81 .\nns:m.08bb7p ns:people.person.children|ns:fictional_universe.fictional_character.children|ns:organization.organization.child/ns:organization.organization_relationship.child ?x0 .\nns:m.08bb7p ns:people.person.gender ns:m.05zppz\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M0 .\nM1 P2 M2 .\nM1 P3 ?x0\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 29
  },
  {
    "questionIdx": 38388,
    "questionWithBrackets": "Did a producer of [Killer McCoy] distribute and produce [Amityville Dollhouse]'s sequel",
    "questionPatternModEntities": "Did a producer of M0 distribute and produce M1 's sequel",
    "questionTemplate": "Did a [ROLE_SIMPLE] of [entity] [VP_SIMPLE] and [VP_SIMPLE] [entity] 's [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.film_distributor.films_distributed/ns:film.film_film_distributor_relationship.film ?x1 .\n?x0 ns:film.producer.film|ns:film.production_company.films ?x1 .\n?x0 ns:film.producer.film|ns:film.production_company.films ns:m.09pgj_r .\n?x1 ns:film.film.prequel ns:m.0gbrn0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P1 M0 .\n?x1 P2 M1\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 29
  },
  {
    "questionIdx": 218424,
    "questionWithBrackets": "Who influenced [John Caparulo] and [Dane Cook] and was influenced by a film director",
    "questionPatternModEntities": "Who influenced M1 and M2 and was influenced by a film director",
    "questionTemplate": "Who [VP_SIMPLE] [entity] and [entity] and was [VP_SIMPLE] by a [NP_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:people.person .\n?x0 ns:influence.influence_node.influenced ns:m.03g5_y .\n?x0 ns:influence.influence_node.influenced ns:m.047g91w .\n?x0 ns:influence.influence_node.influenced_by ?x1 .\n?x1 a ns:film.director\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P1 ?x1 .\n?x0 a M0 .\n?x1 a M3\n}",
    "expectedResponse": "Richard Pryor",
    "recursionDepth": 30
  },
  {
    "questionIdx": 125016,
    "questionWithBrackets": "Were [State of Play] and [United 93] executive produced by [Stop! Or My Mom Will Shoot]'s writer's female spouse",
    "questionPatternModEntities": "Were M2 and M3 executive produced by M1 's writer 's female spouse",
    "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:people.person.gender ns:m.02zsn .\n?x0 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ?x1 .\n?x1 ns:film.writer.film ns:m.069q4f .\nFILTER ( ?x0 != ?x1 ) .\nns:m.02x2jl_ ns:film.film.executive_produced_by ?x0 .\nns:m.09r94m ns:film.film.executive_produced_by ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 ?x1 .\n?x1 P2 M1 .\nFILTER ( ?x0 != ?x1 ) .\nM2 P3 ?x0 .\nM3 P3 ?x0\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 30
  },
  {
    "questionIdx": 178071,
    "questionWithBrackets": "What was executive produced by an actor of [Otto Mann] and executive produced by [Glen Pitre]",
    "questionPatternModEntities": "What was executive produced by a actor of M1 and executive produced by M0",
    "questionTemplate": "What was [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity] and [VP_SIMPLE] by [entity]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.film.executive_produced_by ?x1 .\n?x0 ns:film.film.executive_produced_by ns:m.06zqj6g .\n?x1 ns:film.actor.film/ns:film.performance.character ns:m.0h8f4\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P0 M0 .\n?x1 P1 M1\n}",
    "expectedResponse": "Flood Streets",
    "recursionDepth": 30
  },
  {
    "questionIdx": 81524,
    "questionWithBrackets": "Was [The Lost Nomads: Get Lost!] directed by, edited by, and executive produced by an actor",
    "questionPatternModEntities": "Was M1 directed by , edited by , and executive produced by a actor",
    "questionTemplate": "Was [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by a [NP_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 a ns:film.actor .\nns:m.0h2xxyq ns:film.film.directed_by ?x0 .\nns:m.0h2xxyq ns:film.film.edited_by ?x0 .\nns:m.0h2xxyq ns:film.film.executive_produced_by ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 a M0 .\nM1 P0 ?x0 .\nM1 P1 ?x0 .\nM1 P2 ?x0\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 30
  },
  {
    "questionIdx": 151291,
    "questionWithBrackets": "What did an actor of [Pimentel] write, direct, and produce",
    "questionPatternModEntities": "What did a actor of M0 write , direct , and produce",
    "questionTemplate": "What did a [ROLE_SIMPLE] of [entity] [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.film.directed_by ?x1 .\n?x0 ns:film.film.produced_by|ns:film.film.production_companies ?x1 .\n?x0 ns:film.film.written_by ?x1 .\n?x1 ns:film.actor.film/ns:film.performance.character ns:m.011f80d3\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x1 P3 M0\n}",
    "expectedResponse": "Cazadores; Anything You Want",
    "recursionDepth": 30
  },
  {
    "questionIdx": 18940,
    "questionWithBrackets": "Did [Secret Service Member #2]'s actor executive produce a film and edit [Getting Any?]",
    "questionPatternModEntities": "Did M1 's actor executive produce a film and edit M0",
    "questionTemplate": "Did [entity] 's [ROLE_SIMPLE] [VP_SIMPLE] a [NP_SIMPLE] and [VP_SIMPLE] [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.actor.film/ns:film.performance.character ns:m.0yf1hwr .\n?x0 ns:film.editor.film ns:m.0381wy .\n?x0 ns:film.producer.films_executive_produced ?x1 .\n?x1 a ns:film.film\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 ?x1 .\n?x0 P2 M1 .\n?x1 a M2\n}",
    "expectedResponse": "No",
    "recursionDepth": 30
  },
  {
    "questionIdx": 83004,
    "questionWithBrackets": "Was [The White Countess]'s British Japanese male writer's parent [Shizuko Ishiguro]",
    "questionPatternModEntities": "Was M0 's British Japanese male writer 's parent M4",
    "questionTemplate": "Was [entity] 's [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] 's [ROLE_SIMPLE] [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.writer.film ns:m.0bq8pl .\n?x0 ns:people.person.gender ns:m.05zppz .\n?x0 ns:people.person.nationality ns:m.03_3d .\n?x0 ns:people.person.nationality ns:m.07ssc .\nns:m.0zbhcqv ns:people.person.children|ns:fictional_universe.fictional_character.children|ns:organization.organization.child/ns:organization.organization_relationship.child ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P1 M2 .\n?x0 P2 M3 .\nM4 P3 ?x0\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 30
  },
  {
    "questionIdx": 125566,
    "questionWithBrackets": "Were [Tetsuo: The Iron Man] and [A Day's Pleasure] edited and directed by an actor's sibling",
    "questionPatternModEntities": "Were M1 and M2 edited and directed by a actor 's sibling",
    "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] and [VP_SIMPLE] by a [NP_SIMPLE] 's [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:people.person.sibling_s/ns:people.sibling_relationship.sibling|ns:fictional_universe.fictional_character.siblings/ns:fictional_universe.sibling_relationship_of_fictional_characters.siblings ?x1 .\n?x1 a ns:film.actor .\nFILTER ( ?x0 != ?x1 ) .\nns:m.05m0x0 ns:film.film.directed_by ?x0 .\nns:m.05m0x0 ns:film.film.edited_by ?x0 .\nns:m.07mll4 ns:film.film.directed_by ?x0 .\nns:m.07mll4 ns:film.film.edited_by ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x1 a M0 .\nFILTER ( ?x0 != ?x1 ) .\nM1 P1 ?x0 .\nM1 P2 ?x0 .\nM2 P1 ?x0 .\nM2 P2 ?x0\n}",
    "expectedResponse": "No",
    "recursionDepth": 30
  },
  {
    "questionIdx": 61856,
    "questionWithBrackets": "Was [Johnny Nilsson] a character that edited [The Vanishing Lady] and edited [The Living Playing Cards]",
    "questionPatternModEntities": "Was M0 a character that edited M2 and edited M3",
    "questionTemplate": "Was [entity] a [NP_SIMPLE] that [VP_SIMPLE] [entity] and [VP_SIMPLE] [entity]",
    "sparql": "SELECT count(*) WHERE {\nns:m.0z82bl3 a ns:fictional_universe.fictional_character .\nns:m.0z82bl3 ns:film.editor.film ns:g.1pv18zxm .\nns:m.0z82bl3 ns:film.editor.film ns:m.0crhf8m\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M2 .\nM0 P0 M3 .\nM0 a M1\n}",
    "expectedResponse": "No",
    "recursionDepth": 30
  },
  {
    "questionIdx": 210304,
    "questionWithBrackets": "Which screenwriter did [Lady Oscar]'s French executive producer marry and influence",
    "questionPatternModEntities": "Which screenwriter did M1 's French executive producer marry and influence",
    "questionTemplate": "Which [NP_SIMPLE] did [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] [VP_SIMPLE] and [VP_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:film.writer .\n?x0 ns:influence.influence_node.influenced_by ?x1 .\n?x0 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ?x1 .\n?x1 ns:film.producer.films_executive_produced ns:m.02qdhzf .\n?x1 ns:people.person.nationality ns:m.0f8l9c .\nFILTER ( ?x0 != ?x1 )\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 a M0 .\n?x1 P2 M1 .\n?x1 P3 M2 .\nFILTER ( ?x0 != ?x1 )\n}",
    "expectedResponse": "Jacques Demy",
    "recursionDepth": 30
  },
  {
    "questionIdx": 219998,
    "questionWithBrackets": "Who married [Broadway Melody of 1940]'s male art director and influenced [Diana Dors]",
    "questionPatternModEntities": "Who married M3 's male art director and influenced M1",
    "questionTemplate": "Who [VP_SIMPLE] [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] and [VP_SIMPLE] [entity]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:people.person .\n?x0 ns:influence.influence_node.influenced ns:m.030vnz .\n?x0 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ?x1 .\n?x1 ns:film.film_art_director.films_art_directed ns:m.0554ch .\n?x1 ns:people.person.gender ns:m.05zppz .\nFILTER ( ?x0 != ?x1 )\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M1 .\n?x0 P1 ?x1 .\n?x0 a M0 .\n?x1 P2 M2 .\n?x1 P3 M3 .\nFILTER ( ?x0 != ?x1 )\n}",
    "expectedResponse": "Veronica Lake",
    "recursionDepth": 30
  },
  {
    "questionIdx": 128250,
    "questionWithBrackets": "Were [Three Walls] and [Dor] executive produced by [Iqbal]'s costume designer, executive producer, and star",
    "questionPatternModEntities": "Were M1 and M2 executive produced by M0 's costume designer , executive producer , and star",
    "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] , [ROLE_SIMPLE] , and [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.actor.film/ns:film.performance.film ns:m.0g9k67 .\n?x0 ns:film.film_costumer_designer.costume_design_for_film ns:m.0g9k67 .\n?x0 ns:film.producer.films_executive_produced ns:m.0g9k67 .\nns:m.0f14tc ns:film.film.executive_produced_by ?x0 .\nns:m.0kv3t6 ns:film.film.executive_produced_by ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M0 .\n?x0 P2 M0 .\nM1 P3 ?x0 .\nM2 P3 ?x0\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 30
  },
  {
    "questionIdx": 172847,
    "questionWithBrackets": "What was edited and directed by a Spanish film producer's parent",
    "questionPatternModEntities": "What was edited and directed by a Spanish film producer 's parent",
    "questionTemplate": "What was [VP_SIMPLE] and [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [NP_SIMPLE] 's [ROLE_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.film.directed_by ?x1 .\n?x0 ns:film.film.edited_by ?x1 .\n?x1 ns:people.person.children|ns:fictional_universe.fictional_character.children|ns:organization.organization.child/ns:organization.organization_relationship.child ?x2 .\n?x2 a ns:film.producer .\n?x2 ns:people.person.nationality ns:m.06mkj\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x1 P2 ?x2 .\n?x2 P3 M1 .\n?x2 a M0\n}",
    "expectedResponse": "The Uninhibited",
    "recursionDepth": 30
  },
  {
    "questionIdx": 172645,
    "questionWithBrackets": "What was distributed by [Vampires: Los Muertos]'s cinematographer and produced by [Doing Hard Time]'s editor",
    "questionPatternModEntities": "What was distributed by M0 's cinematographer and produced by M1 's editor",
    "questionTemplate": "What was [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.film.distributors/ns:film.film_film_distributor_relationship.distributor ?x1 .\n?x0 ns:film.film.produced_by|ns:film.film.production_companies ?x2 .\n?x1 ns:film.cinematographer.film ns:m.0frc02 .\n?x2 ns:film.editor.film ns:m.04j1y__\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x2 .\n?x1 P2 M0 .\n?x2 P3 M1\n}",
    "expectedResponse": "This Christmas",
    "recursionDepth": 30
  },
  {
    "questionIdx": 39846,
    "questionWithBrackets": "Did a spouse of [Patty Williams]'s spouse and sibling marry [Blake Hayes] and [Veronica Landers]",
    "questionPatternModEntities": "Did a spouse of M2 's spouse and sibling marry M0 and M1",
    "questionTemplate": "Did a [ROLE_SIMPLE] of [entity] 's [ROLE_SIMPLE] and [ROLE_SIMPLE] [VP_SIMPLE] [entity] and [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ?x1 .\n?x0 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ns:m.026hgj3 .\n?x0 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ns:m.0271f56 .\n?x1 ns:people.person.sibling_s/ns:people.sibling_relationship.sibling|ns:fictional_universe.fictional_character.siblings/ns:fictional_universe.sibling_relationship_of_fictional_characters.siblings ns:m.02plfl7 .\n?x1 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ns:m.02plfl7 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x0 != ns:m.026hgj3 ) .\nFILTER ( ?x0 != ns:m.0271f56 ) .\nFILTER ( ?x1 != ns:m.02plfl7 ) .\nFILTER ( ?x1 != ns:m.02plfl7 )\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x1 P0 M2 .\n?x1 P1 M2 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x0 != M1 ) .\nFILTER ( ?x1 != M2 ) .\nFILTER ( ?x1 != M2 )\n}",
    "expectedResponse": "No",
    "recursionDepth": 30
  },
  {
    "questionIdx": 129128,
    "questionWithBrackets": "Were [Virgin Vacations] and [Virgin Group] founded by a founder and employee of a company",
    "questionPatternModEntities": "Were M1 and M2 founded by a founder and employee of a company",
    "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by a [ROLE_SIMPLE] and [ROLE_SIMPLE] of a [NP_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:organization.organization_founder.organizations_founded ?x1 .\n?x0 ns:people.person.employment_history/ns:business.employment_tenure.company ?x1 .\n?x1 a ns:business.employer .\nns:m.01f9wm ns:organization.organization.founders ?x0 .\nns:m.0264ktc ns:organization.organization.founders ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x1 a M0 .\nM1 P2 ?x0 .\nM2 P2 ?x0\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 30
  },
  {
    "questionIdx": 40739,
    "questionWithBrackets": "Did an Italian cinematographer that [The Cyclone] was written by play [Turchi]",
    "questionPatternModEntities": "Did a Italian cinematographer that M1 was written by play M3",
    "questionTemplate": "Did a [ADJECTIVE_SIMPLE] [NP_SIMPLE] that [entity] was [VP_SIMPLE] by [VP_SIMPLE] [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 a ns:film.cinematographer .\n?x0 ns:film.actor.film/ns:film.performance.character ns:m.011lvjk_ .\n?x0 ns:film.writer.film ns:m.0c1kxsc .\n?x0 ns:people.person.nationality ns:m.03rjj\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M1 .\n?x0 P1 M2 .\n?x0 P2 M3 .\n?x0 a M0\n}",
    "expectedResponse": "No",
    "recursionDepth": 30
  },
  {
    "questionIdx": 32411,
    "questionWithBrackets": "Did a female person influence [Bob Barr] and influence [Louise Gl\u00fcck]",
    "questionPatternModEntities": "Did a female person influence M1 and influence M2",
    "questionTemplate": "Did a [ADJECTIVE_SIMPLE] [NP_SIMPLE] [VP_SIMPLE] [entity] and [VP_SIMPLE] [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 a ns:people.person .\n?x0 ns:influence.influence_node.influenced ns:m.01fdg8 .\n?x0 ns:influence.influence_node.influenced ns:m.02ls5x .\n?x0 ns:people.person.gender ns:m.02zsn\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P1 M3 .\n?x0 a M0\n}",
    "expectedResponse": "No",
    "recursionDepth": 30
  },
  {
    "questionIdx": 237749,
    "questionWithBrackets": "Who was influenced by [Woody Allen] and influenced by [Bamm-Bamm Rubble]'s parent's actor",
    "questionPatternModEntities": "Who was influenced by M1 and influenced by M2 's parent 's actor",
    "questionTemplate": "Who was [VP_SIMPLE] by [entity] and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:people.person .\n?x0 ns:influence.influence_node.influenced_by ?x1 .\n?x0 ns:influence.influence_node.influenced_by ns:m.081lh .\n?x1 ns:film.actor.film/ns:film.performance.character ?x2 .\n?x2 ns:people.person.children|ns:fictional_universe.fictional_character.children|ns:organization.organization.child/ns:organization.organization_relationship.child ns:m.057lc0\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P0 M1 .\n?x0 a M0 .\n?x1 P1 ?x2 .\n?x2 P2 M2\n}",
    "expectedResponse": "Dave Chappelle",
    "recursionDepth": 30
  },
  {
    "questionIdx": 28346,
    "questionWithBrackets": "Did a Mexican film director marry [Alix Bailey] and influence [Manoel de Oliveira]",
    "questionPatternModEntities": "Did a Mexican film director marry M3 and influence M1",
    "questionTemplate": "Did a [ADJECTIVE_SIMPLE] [NP_SIMPLE] [VP_SIMPLE] [entity] and [VP_SIMPLE] [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 a ns:film.director .\n?x0 ns:influence.influence_node.influenced ns:m.04yg98 .\n?x0 ns:people.person.nationality ns:m.0b90_r .\n?x0 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ns:m.0gxqyrw .\nFILTER ( ?x0 != ns:m.0gxqyrw )\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M1 .\n?x0 P1 M2 .\n?x0 P2 M3 .\n?x0 a M0 .\nFILTER ( ?x0 != M3 )\n}",
    "expectedResponse": "No",
    "recursionDepth": 30
  },
  {
    "questionIdx": 12826,
    "questionWithBrackets": "Did [Land of the Dead] star [Gary Ugarek] and star a Canadian actor",
    "questionPatternModEntities": "Did M2 star M3 and star a Canadian actor",
    "questionTemplate": "Did [entity] [VP_SIMPLE] [entity] and [VP_SIMPLE] a [ADJECTIVE_SIMPLE] [NP_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 a ns:film.actor .\n?x0 ns:people.person.nationality ns:m.0d060g .\nns:m.03pkmt ns:film.film.starring/ns:film.performance.actor ?x0 .\nns:m.03pkmt ns:film.film.starring/ns:film.performance.actor ns:m.0dxfk_t\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M1 .\n?x0 a M0 .\nM2 P1 ?x0 .\nM2 P1 M3\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 30
  },
  {
    "questionIdx": 204559,
    "questionWithBrackets": "Which film producer was influenced by a writer, editor, and art director of [Tetsuo: The Iron Man]",
    "questionPatternModEntities": "Which film producer was influenced by a writer , editor , and art director of M1",
    "questionTemplate": "Which [NP_SIMPLE] was [VP_SIMPLE] by a [ROLE_SIMPLE] , [ROLE_SIMPLE] , and [ROLE_SIMPLE] of [entity]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:film.producer .\n?x0 ns:influence.influence_node.influenced_by ?x1 .\n?x1 ns:film.editor.film ns:m.05m0x0 .\n?x1 ns:film.film_art_director.films_art_directed ns:m.05m0x0 .\n?x1 ns:film.writer.film ns:m.05m0x0\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 a M0 .\n?x1 P1 M1 .\n?x1 P2 M1 .\n?x1 P3 M1\n}",
    "expectedResponse": "Darren Aronofsky",
    "recursionDepth": 30
  },
  {
    "questionIdx": 70077,
    "questionWithBrackets": "Was [One Day in Life] executive produced by, directed by, and edited by a screenwriter",
    "questionPatternModEntities": "Was M1 executive produced by , directed by , and edited by a screenwriter",
    "questionTemplate": "Was [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by a [NP_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 a ns:film.writer .\nns:m.0h2mgyl ns:film.film.directed_by ?x0 .\nns:m.0h2mgyl ns:film.film.edited_by ?x0 .\nns:m.0h2mgyl ns:film.film.executive_produced_by ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 a M0 .\nM1 P0 ?x0 .\nM1 P1 ?x0 .\nM1 P2 ?x0\n}",
    "expectedResponse": "No",
    "recursionDepth": 30
  },
  {
    "questionIdx": 14121,
    "questionWithBrackets": "Did [Mario Morra] and [Kristian Petersen] edit and write a film's sequel",
    "questionPatternModEntities": "Did M1 and M2 edit and write a film 's sequel",
    "questionTemplate": "Did [entity] and [entity] [VP_SIMPLE] and [VP_SIMPLE] a [NP_SIMPLE] 's [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.film.prequel ?x1 .\n?x1 a ns:film.film .\nns:m.0c1dpw4 ns:film.editor.film ?x0 .\nns:m.0c1dpw4 ns:film.writer.film ?x0 .\nns:m.0gx2r5w ns:film.editor.film ?x0 .\nns:m.0gx2r5w ns:film.writer.film ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x1 a M0 .\nM1 P1 ?x0 .\nM1 P2 ?x0 .\nM2 P1 ?x0 .\nM2 P2 ?x0\n}",
    "expectedResponse": "No",
    "recursionDepth": 30
  },
  {
    "questionIdx": 53691,
    "questionWithBrackets": "Was [El Yaque, Pueblo De Campeones] executive produced by, produced by, and written by a film director",
    "questionPatternModEntities": "Was M1 executive produced by , produced by , and written by a film director",
    "questionTemplate": "Was [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by a [NP_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 a ns:film.director .\nns:m.010s0433 ns:film.film.executive_produced_by ?x0 .\nns:m.010s0433 ns:film.film.produced_by|ns:film.film.production_companies ?x0 .\nns:m.010s0433 ns:film.film.written_by ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 a M0 .\nM1 P0 ?x0 .\nM1 P1 ?x0 .\nM1 P2 ?x0\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 30
  },
  {
    "questionIdx": 220452,
    "questionWithBrackets": "Who married [Jonas Hodges]'s male actor and married [John Trudell]",
    "questionPatternModEntities": "Who married M2 's male actor and married M1",
    "questionTemplate": "Who [VP_SIMPLE] [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] and [VP_SIMPLE] [entity]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:people.person .\n?x0 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ?x1 .\n?x0 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ns:m.0265_l .\n?x1 ns:film.actor.film/ns:film.performance.character ns:m.0h1tjgf .\n?x1 ns:people.person.gender ns:m.05zppz .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x0 != ns:m.0265_l )\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P0 M1 .\n?x0 a M0 .\n?x1 P1 M2 .\n?x1 P2 M3 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x0 != M1 )\n}",
    "expectedResponse": "Marcheline Bertrand",
    "recursionDepth": 30
  },
  {
    "questionIdx": 24736,
    "questionWithBrackets": "Did [Walt Disney] found [Walt Disney Pictures] and found [Ed Love]'s employer's child",
    "questionPatternModEntities": "Did M1 found M2 and found M0 's employer 's child",
    "questionTemplate": "Did [entity] [VP_SIMPLE] [entity] and [VP_SIMPLE] [entity] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:people.person.parents|ns:fictional_universe.fictional_character.parents|ns:organization.organization.parent/ns:organization.organization_relationship.parent ?x1 .\n?x1 ns:business.employer.employees/ns:business.employment_tenure.person ns:m.04g1dkd .\nns:m.081nh ns:organization.organization_founder.organizations_founded ?x0 .\nns:m.081nh ns:organization.organization_founder.organizations_founded ns:m.01795t\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x1 P1 M0 .\nM1 P2 ?x0 .\nM1 P2 M2\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 30
  },
  {
    "questionIdx": 117756,
    "questionWithBrackets": "Were [Heckler & Koch] and [Royal Ordnance] acquired by a child and parent of a company",
    "questionPatternModEntities": "Were M1 and M2 acquired by a child and parent of a company",
    "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by a [ROLE_SIMPLE] and [ROLE_SIMPLE] of a [NP_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:people.person.children|ns:fictional_universe.fictional_character.children|ns:organization.organization.child/ns:organization.organization_relationship.child ?x1 .\n?x0 ns:people.person.parents|ns:fictional_universe.fictional_character.parents|ns:organization.organization.parent/ns:organization.organization_relationship.parent ?x1 .\n?x1 a ns:business.employer .\nns:m.03q12 ns:organization.organization.acquired_by/ns:business.acquisition.acquiring_company ?x0 .\nns:m.05pdbrg ns:organization.organization.acquired_by/ns:business.acquisition.acquiring_company ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x1 a M0 .\nM1 P2 ?x0 .\nM2 P2 ?x0\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 30
  },
  {
    "questionIdx": 189356,
    "questionWithBrackets": "Which French actor was employed by [International Culinary Center] and employed by [Howard Johnson's]",
    "questionPatternModEntities": "Which French actor was employed by M1 and employed by M2",
    "questionTemplate": "Which [ADJECTIVE_SIMPLE] [NP_SIMPLE] was [VP_SIMPLE] by [entity] and [VP_SIMPLE] by [entity]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:film.actor .\n?x0 ns:people.person.employment_history/ns:business.employment_tenure.company ns:m.01l0b1 .\n?x0 ns:people.person.employment_history/ns:business.employment_tenure.company ns:m.0271qcw .\n?x0 ns:people.person.nationality ns:m.0f8l9c\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P1 M3 .\n?x0 a M0\n}",
    "expectedResponse": "Jacques P\u00e9pin",
    "recursionDepth": 30
  },
  {
    "questionIdx": 171248,
    "questionWithBrackets": "What was directed by and written by a female costume designer of [Just like Home]",
    "questionPatternModEntities": "What was directed by and written by a female costume designer of M0",
    "questionTemplate": "What was [VP_SIMPLE] by and [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.film.directed_by ?x1 .\n?x0 ns:film.film.written_by ?x1 .\n?x1 ns:film.film_costumer_designer.costume_design_for_film ns:m.0b6gygg .\n?x1 ns:people.person.gender ns:m.02zsn\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x1 P2 M0 .\n?x1 P3 M1\n}",
    "expectedResponse": "Csajok; Hotreal",
    "recursionDepth": 30
  },
  {
    "questionIdx": 156159,
    "questionWithBrackets": "What film distributor did [TPG Capital] acquire and a parent of [Comcast of Illinois VI, LLC] acquire",
    "questionPatternModEntities": "What film distributor did M1 acquire and a parent of M2 acquire",
    "questionTemplate": "What [NP_SIMPLE] did [entity] [VP_SIMPLE] and a [ROLE_SIMPLE] of [entity] [VP_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:film.film_distributor .\n?x0 ns:organization.organization.acquired_by/ns:business.acquisition.acquiring_company ?x1 .\n?x0 ns:organization.organization.acquired_by/ns:business.acquisition.acquiring_company ns:m.03yqpb .\n?x1 ns:people.person.children|ns:fictional_universe.fictional_character.children|ns:organization.organization.child/ns:organization.organization_relationship.child ns:m.09mb59b\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P0 M1 .\n?x0 a M0 .\n?x1 P1 M2\n}",
    "expectedResponse": "Metro-Goldwyn-Mayer",
    "recursionDepth": 30
  },
  {
    "questionIdx": 28702,
    "questionWithBrackets": "Did a Spanish costume designer write [The Devil's Backbone] and direct [Desarrollo humano]",
    "questionPatternModEntities": "Did a Spanish costume designer write M1 and direct M3",
    "questionTemplate": "Did a [ADJECTIVE_SIMPLE] [NP_SIMPLE] [VP_SIMPLE] [entity] and [VP_SIMPLE] [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 a ns:film.film_costumer_designer .\n?x0 ns:film.director.film ns:m.0j63xrh .\n?x0 ns:film.writer.film ns:m.0dqvh3 .\n?x0 ns:people.person.nationality ns:m.06mkj\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M1 .\n?x0 P1 M2 .\n?x0 P2 M3 .\n?x0 a M0\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 30
  },
  {
    "questionIdx": 29761,
    "questionWithBrackets": "Did a child of [Werner Herzog Eats His Shoe]'s cinematographer and producer edit [Wild Wheels] and [Automorphosis]",
    "questionPatternModEntities": "Did a child of M2 's cinematographer and producer edit M0 and M1",
    "questionTemplate": "Did a [ROLE_SIMPLE] of [entity] 's [ROLE_SIMPLE] and [ROLE_SIMPLE] [VP_SIMPLE] [entity] and [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.editor.film ns:m.0crsm68 .\n?x0 ns:film.editor.film ns:m.0crvmgd .\n?x0 ns:people.person.parents|ns:fictional_universe.fictional_character.parents|ns:organization.organization.parent/ns:organization.organization_relationship.parent ?x1 .\n?x1 ns:film.cinematographer.film ns:m.07gc4j .\n?x1 ns:film.producer.film|ns:film.production_company.films ns:m.07gc4j\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P1 ?x1 .\n?x1 P2 M2 .\n?x1 P3 M2\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 30
  },
  {
    "questionIdx": 62858,
    "questionWithBrackets": "Was [Kevin & Perry Go Large] produced by a person's actor and produced by [Jolyon Symonds]",
    "questionPatternModEntities": "Was M1 produced by a person 's actor and produced by M2",
    "questionTemplate": "Was [entity] [VP_SIMPLE] by a [NP_SIMPLE] 's [ROLE_SIMPLE] and [VP_SIMPLE] by [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.actor.film/ns:film.performance.character ?x1 .\n?x1 a ns:people.person .\nns:m.073z_8 ns:film.film.produced_by|ns:film.film.production_companies ?x0 .\nns:m.073z_8 ns:film.film.produced_by|ns:film.film.production_companies ns:m.0h6clfk\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x1 a M0 .\nM1 P1 ?x0 .\nM1 P1 M2\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 30
  },
  {
    "questionIdx": 73167,
    "questionWithBrackets": "Was [Quick Billy] edited and directed by an American founder of [Rooster Teeth]",
    "questionPatternModEntities": "Was M2 edited and directed by a American founder of M0",
    "questionTemplate": "Was [entity] [VP_SIMPLE] and [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:organization.organization_founder.organizations_founded ns:m.04y69w .\n?x0 ns:people.person.nationality ns:m.09c7w0 .\nns:m.0jwgs98 ns:film.film.directed_by ?x0 .\nns:m.0jwgs98 ns:film.film.edited_by ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nM2 P2 ?x0 .\nM2 P3 ?x0\n}",
    "expectedResponse": "No",
    "recursionDepth": 30
  },
  {
    "questionIdx": 167882,
    "questionWithBrackets": "What was a company that [Benjamin West] founded and [Francesco Bartolozzi] founded",
    "questionPatternModEntities": "What was a company that M1 founded and M2 founded",
    "questionTemplate": "What was a [NP_SIMPLE] that [entity] [VP_SIMPLE] and [entity] [VP_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:business.employer .\n?x0 ns:organization.organization.founders ns:m.01g6y5 .\n?x0 ns:organization.organization.founders ns:m.01z6r6\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 a M0\n}",
    "expectedResponse": "Royal Academy of Arts",
    "recursionDepth": 30
  },
  {
    "questionIdx": 93528,
    "questionWithBrackets": "Was a company founded by a Canadian founder of [Metro-Goldwyn-Mayer]'s child",
    "questionPatternModEntities": "Was a company founded by a Canadian founder of M2 's child",
    "questionTemplate": "Was a [NP_SIMPLE] [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] 's [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 a ns:business.employer .\n?x0 ns:organization.organization.founders ?x1 .\n?x1 ns:organization.organization_founder.organizations_founded ?x2 .\n?x1 ns:people.person.nationality ns:m.0d060g .\n?x2 ns:people.person.parents|ns:fictional_universe.fictional_character.parents|ns:organization.organization.parent/ns:organization.organization_relationship.parent ns:m.0g1rw\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x0 a M0 .\n?x1 P1 ?x2 .\n?x1 P2 M1 .\n?x2 P3 M2\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 30
  },
  {
    "questionIdx": 233866,
    "questionWithBrackets": "Who was an art director that [Paperbox] was executive produced by and written by",
    "questionPatternModEntities": "Who was a art director that M2 was executive produced by and written by",
    "questionTemplate": "Who was a [NP_SIMPLE] that [entity] was [VP_SIMPLE] by and [VP_SIMPLE] by",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:film.film_art_director .\n?x0 a ns:people.person .\n?x0 ns:film.producer.films_executive_produced ns:m.0vsj6s2 .\n?x0 ns:film.writer.film ns:m.0vsj6s2\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M2 .\n?x0 P1 M2 .\n?x0 a M0 .\n?x0 a M1\n}",
    "expectedResponse": "Zbigniew Czapla",
    "recursionDepth": 30
  },
  {
    "questionIdx": 148348,
    "questionWithBrackets": "What did a French costume designer's child direct and write",
    "questionPatternModEntities": "What did a French costume designer 's child direct and write",
    "questionTemplate": "What did a [ADJECTIVE_SIMPLE] [NP_SIMPLE] 's [ROLE_SIMPLE] [VP_SIMPLE] and [VP_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.film.directed_by ?x1 .\n?x0 ns:film.film.written_by ?x1 .\n?x1 ns:people.person.parents|ns:fictional_universe.fictional_character.parents|ns:organization.organization.parent/ns:organization.organization_relationship.parent ?x2 .\n?x2 a ns:film.film_costumer_designer .\n?x2 ns:people.person.nationality ns:m.0f8l9c\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x1 P2 ?x2 .\n?x2 P3 M1 .\n?x2 a M0\n}",
    "expectedResponse": "The Voice Thief",
    "recursionDepth": 30
  },
  {
    "questionIdx": 229027,
    "questionWithBrackets": "Who was a cinematographer that played [The Devil] and played [L'illusioniste]",
    "questionPatternModEntities": "Who was a cinematographer that played M2 and played M3",
    "questionTemplate": "Who was a [NP_SIMPLE] that [VP_SIMPLE] [entity] and [VP_SIMPLE] [entity]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:film.cinematographer .\n?x0 a ns:people.person .\n?x0 ns:film.actor.film/ns:film.performance.character ns:m.010q5h45 .\n?x0 ns:film.actor.film/ns:film.performance.character ns:m.098fbx\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M2 .\n?x0 P0 M3 .\n?x0 a M0 .\n?x0 a M1\n}",
    "expectedResponse": "Georges M\u00e9li\u00e8s",
    "recursionDepth": 30
  },
  {
    "questionIdx": 18859,
    "questionWithBrackets": "Did [Scary Movie 4] star [National Banana]'s employee's sibling and star [Cloris Leachman]",
    "questionPatternModEntities": "Did M1 star M0 's employee 's sibling and star M2",
    "questionTemplate": "Did [entity] [VP_SIMPLE] [entity] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE] and [VP_SIMPLE] [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:people.person.sibling_s/ns:people.sibling_relationship.sibling|ns:fictional_universe.fictional_character.siblings/ns:fictional_universe.sibling_relationship_of_fictional_characters.siblings ?x1 .\n?x1 ns:people.person.employment_history/ns:business.employment_tenure.company ns:m.03f_kks .\nFILTER ( ?x0 != ?x1 ) .\nns:m.07h9gp ns:film.film.starring/ns:film.performance.actor ?x0 .\nns:m.07h9gp ns:film.film.starring/ns:film.performance.actor ns:m.02l3_5\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x1 P1 M0 .\nFILTER ( ?x0 != ?x1 ) .\nM1 P2 ?x0 .\nM1 P2 M2\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 30
  },
  {
    "questionIdx": 19502,
    "questionWithBrackets": "Did [Soulforce] and [Mel White Productions] employ a screenwriter whose employer distributed [Discord and Harmony]",
    "questionPatternModEntities": "Did M2 and M3 employ a screenwriter whose employer distributed M1",
    "questionTemplate": "Did [entity] and [entity] [VP_SIMPLE] a [NP_SIMPLE] whose [ROLE_SIMPLE] [VP_SIMPLE] [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 a ns:film.writer .\n?x0 ns:people.person.employment_history/ns:business.employment_tenure.company ?x1 .\n?x1 ns:film.film_distributor.films_distributed/ns:film.film_film_distributor_relationship.film ns:m.047rjmk .\nns:m.028151z ns:business.employer.employees/ns:business.employment_tenure.person ?x0 .\nns:m.05hns4y ns:business.employer.employees/ns:business.employment_tenure.person ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x0 a M0 .\n?x1 P1 M1 .\nM2 P2 ?x0 .\nM3 P2 ?x0\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 30
  },
  {
    "questionIdx": 170595,
    "questionWithBrackets": "What was directed by a Dutch film producer and produced by [Claudius Gebele]",
    "questionPatternModEntities": "What was directed by a Dutch film producer and produced by M0",
    "questionTemplate": "What was [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [NP_SIMPLE] and [VP_SIMPLE] by [entity]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.film.directed_by ?x1 .\n?x0 ns:film.film.produced_by|ns:film.film.production_companies ns:m.0j_xn1s .\n?x1 a ns:film.producer .\n?x1 ns:people.person.nationality ns:m.059j2\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 ?x1 .\n?x1 P2 M2 .\n?x1 a M1\n}",
    "expectedResponse": "The Monster of Nix",
    "recursionDepth": 30
  },
  {
    "questionIdx": 86241,
    "questionWithBrackets": "Was [Wanderlust] produced by a character and distributed by [Nazif Memedi]'s employer",
    "questionPatternModEntities": "Was M2 produced by a character and distributed by M0 's employer",
    "questionTemplate": "Was [entity] [VP_SIMPLE] by a [NP_SIMPLE] and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:business.employer.employees/ns:business.employment_tenure.person ns:m.0fpjkyw .\n?x1 a ns:fictional_universe.fictional_character .\nns:m.0dgr73z ns:film.film.distributors/ns:film.film_film_distributor_relationship.distributor ?x0 .\nns:m.0dgr73z ns:film.film.produced_by|ns:film.film.production_companies ?x1\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x1 a M1 .\nM2 P1 ?x0 .\nM2 P2 ?x1\n}",
    "expectedResponse": "No",
    "recursionDepth": 30
  },
  {
    "questionIdx": 125085,
    "questionWithBrackets": "Were [Streetcar Named Perspire] and [7 Days in Havana] written and edited by an art director's spouse",
    "questionPatternModEntities": "Were M1 and M2 written and edited by a art director 's spouse",
    "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] and [VP_SIMPLE] by a [NP_SIMPLE] 's [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ?x1 .\n?x1 a ns:film.film_art_director .\nFILTER ( ?x0 != ?x1 ) .\nns:m.0gy8kqb ns:film.film.edited_by ?x0 .\nns:m.0gy8kqb ns:film.film.written_by ?x0 .\nns:m.0yh1d1l ns:film.film.edited_by ?x0 .\nns:m.0yh1d1l ns:film.film.written_by ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x1 a M0 .\nFILTER ( ?x0 != ?x1 ) .\nM1 P1 ?x0 .\nM1 P2 ?x0 .\nM2 P1 ?x0 .\nM2 P2 ?x0\n}",
    "expectedResponse": "No",
    "recursionDepth": 30
  },
  {
    "questionIdx": 93634,
    "questionWithBrackets": "Was a company whose child and parent employed a film producer [Onomichi FM]",
    "questionPatternModEntities": "Was a company whose child and parent employed a film producer M1",
    "questionTemplate": "Was a [NP_SIMPLE] whose [ROLE_SIMPLE] and [ROLE_SIMPLE] [VP_SIMPLE] a [NP_SIMPLE] [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:business.employer.employees/ns:business.employment_tenure.person ?x1 .\n?x1 a ns:film.producer .\nns:m.026_hq6 a ns:business.employer .\nns:m.026_hq6 ns:people.person.children|ns:fictional_universe.fictional_character.children|ns:organization.organization.child/ns:organization.organization_relationship.child ?x0 .\nns:m.026_hq6 ns:people.person.parents|ns:fictional_universe.fictional_character.parents|ns:organization.organization.parent/ns:organization.organization_relationship.parent ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x1 a M0 .\nM1 P1 ?x0 .\nM1 P2 ?x0 .\nM1 a M2\n}",
    "expectedResponse": "No",
    "recursionDepth": 30
  },
  {
    "questionIdx": 176822,
    "questionWithBrackets": "What was executive produced by [Lyndell Hardin]'s male spouse's German spouse",
    "questionPatternModEntities": "What was executive produced by M2 's male spouse 's German spouse",
    "questionTemplate": "What was [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.film.executive_produced_by ?x1 .\n?x1 ns:people.person.nationality ns:m.0345h .\n?x1 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ?x2 .\n?x2 ns:people.person.gender ns:m.05zppz .\n?x2 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ns:m.0n4q4k_ .\nFILTER ( ?x1 != ?x2 ) .\nFILTER ( ?x2 != ns:m.0n4q4k_ )\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x1 P1 M0 .\n?x1 P2 ?x2 .\n?x2 P2 M2 .\n?x2 P3 M1 .\nFILTER ( ?x1 != ?x2 ) .\nFILTER ( ?x2 != M2 )\n}",
    "expectedResponse": "Dr. Minx",
    "recursionDepth": 30
  },
  {
    "questionIdx": 15654,
    "questionWithBrackets": "Did [Naya Kadam] star a female person and star [Renu Joshi]",
    "questionPatternModEntities": "Did M2 star a female person and star M3",
    "questionTemplate": "Did [entity] [VP_SIMPLE] a [ADJECTIVE_SIMPLE] [NP_SIMPLE] and [VP_SIMPLE] [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 a ns:people.person .\n?x0 ns:people.person.gender ns:m.02zsn .\nns:m.0g9xj_4 ns:film.film.starring/ns:film.performance.actor ?x0 .\nns:m.0g9xj_4 ns:film.film.starring/ns:film.performance.actor ns:m.0g9bngk\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M1 .\n?x0 a M0 .\nM2 P1 ?x0 .\nM2 P1 M3\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 30
  },
  {
    "questionIdx": 238497,
    "questionWithBrackets": "Who was influenced by a person and influenced [Russell Banks] and [Derek Marlowe]",
    "questionPatternModEntities": "Who was influenced by a person and influenced M1 and M2",
    "questionTemplate": "Who was [VP_SIMPLE] by a [NP_SIMPLE] and [VP_SIMPLE] [entity] and [entity]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:people.person .\n?x0 ns:influence.influence_node.influenced ns:m.027dr8v .\n?x0 ns:influence.influence_node.influenced ns:m.02p31c .\n?x0 ns:influence.influence_node.influenced_by ?x1 .\n?x1 a ns:people.person\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P1 ?x1 .\n?x0 a M0 .\n?x1 a M0\n}",
    "expectedResponse": "Ernest Hemingway",
    "recursionDepth": 30
  },
  {
    "questionIdx": 151267,
    "questionWithBrackets": "What did an actor of [Fabious] produce, edit, and direct",
    "questionPatternModEntities": "What did a actor of M0 produce , edit , and direct",
    "questionTemplate": "What did a [ROLE_SIMPLE] of [entity] [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.film.directed_by ?x1 .\n?x0 ns:film.film.edited_by ?x1 .\n?x0 ns:film.film.produced_by|ns:film.film.production_companies ?x1 .\n?x1 ns:film.actor.film/ns:film.performance.character ns:m.0ghc_dq\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x1 P3 M0\n}",
    "expectedResponse": "The Broken Tower",
    "recursionDepth": 30
  },
  {
    "questionIdx": 103031,
    "questionWithBrackets": "Was a person a Mexican film editor whose spouse edited [Smokey Bites the Dust]",
    "questionPatternModEntities": "Was a person a Mexican film editor whose spouse edited M3",
    "questionTemplate": "Was a [NP_SIMPLE] a [ADJECTIVE_SIMPLE] [NP_SIMPLE] whose [ROLE_SIMPLE] [VP_SIMPLE] [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 a ns:film.editor .\n?x0 a ns:people.person .\n?x0 ns:people.person.nationality ns:m.0b90_r .\n?x0 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ?x1 .\n?x1 ns:film.editor.film ns:m.0k0kg32 .\nFILTER ( ?x0 != ?x1 )\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M2 .\n?x0 P1 ?x1 .\n?x0 a M0 .\n?x0 a M1 .\n?x1 P2 M3 .\nFILTER ( ?x0 != ?x1 )\n}",
    "expectedResponse": "No",
    "recursionDepth": 30
  },
  {
    "questionIdx": 147978,
    "questionWithBrackets": "What did [Worshipper #1]'s British actor edit and [Zane Casablanca] write",
    "questionPatternModEntities": "What did M2 's British actor edit and M0 write",
    "questionTemplate": "What did [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] [VP_SIMPLE] and [entity] [VP_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.film.edited_by ?x1 .\n?x0 ns:film.film.written_by ns:m.011chxq5 .\n?x1 ns:film.actor.film/ns:film.performance.character ns:m.011chjnb .\n?x1 ns:people.person.nationality ns:m.07ssc\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 ?x1 .\n?x1 P2 M1 .\n?x1 P3 M2\n}",
    "expectedResponse": "Tales of the Supernatural",
    "recursionDepth": 30
  },
  {
    "questionIdx": 118264,
    "questionWithBrackets": "Were [Im Zauber der Kordilleren] and [The Shaper] produced by a German parent of a film editor",
    "questionPatternModEntities": "Were M2 and M3 produced by a German parent of a film editor",
    "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of a [NP_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:people.person.children|ns:fictional_universe.fictional_character.children|ns:organization.organization.child/ns:organization.organization_relationship.child ?x1 .\n?x0 ns:people.person.nationality ns:m.0345h .\n?x1 a ns:film.editor .\nns:m.0c7536l ns:film.film.produced_by|ns:film.film.production_companies ?x0 .\nns:m.0w9v5r4 ns:film.film.produced_by|ns:film.film.production_companies ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 ?x1 .\n?x1 a M1 .\nM2 P2 ?x0 .\nM3 P2 ?x0\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 30
  },
  {
    "questionIdx": 58508,
    "questionWithBrackets": "Was [Hideaki Anno] a producer, executive producer, writer, and director of [Animation vs. Animator 1]'s sequel",
    "questionPatternModEntities": "Was M1 a producer , executive producer , writer , and director of M0 's sequel",
    "questionTemplate": "Was [entity] a [ROLE_SIMPLE] , [ROLE_SIMPLE] , [ROLE_SIMPLE] , and [ROLE_SIMPLE] of [entity] 's [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.film.prequel ns:m.0108m1yx .\nns:m.01t6lp ns:film.director.film ?x0 .\nns:m.01t6lp ns:film.producer.films_executive_produced ?x0 .\nns:m.01t6lp ns:film.producer.film|ns:film.production_company.films ?x0 .\nns:m.01t6lp ns:film.writer.film ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 ?x0 .\nM1 P2 ?x0 .\nM1 P3 ?x0 .\nM1 P4 ?x0\n}",
    "expectedResponse": "No",
    "recursionDepth": 30
  },
  {
    "questionIdx": 170861,
    "questionWithBrackets": "What was directed by a parent of an actor and directed by [Abbas Kiarostami]",
    "questionPatternModEntities": "What was directed by a parent of a actor and directed by M0",
    "questionTemplate": "What was [VP_SIMPLE] by a [ROLE_SIMPLE] of a [NP_SIMPLE] and [VP_SIMPLE] by [entity]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.film.directed_by ?x1 .\n?x0 ns:film.film.directed_by ns:m.023t0q .\n?x1 ns:people.person.children|ns:fictional_universe.fictional_character.children|ns:organization.organization.child/ns:organization.organization_relationship.child ?x2 .\n?x2 a ns:film.actor\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P0 M0 .\n?x1 P1 ?x2 .\n?x2 a M1\n}",
    "expectedResponse": "Lumi\u00e8re and Company; To Each His Own Cinema",
    "recursionDepth": 31
  },
  {
    "questionIdx": 150823,
    "questionWithBrackets": "What did a spouse of [Chan Ye-cheng] write, direct, and executive produce",
    "questionPatternModEntities": "What did a spouse of M0 write , direct , and executive produce",
    "questionTemplate": "What did a [ROLE_SIMPLE] of [entity] [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.film.directed_by ?x1 .\n?x0 ns:film.film.executive_produced_by ?x1 .\n?x0 ns:film.film.written_by ?x1 .\n?x1 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ns:m.0jz54f .\nFILTER ( ?x1 != ns:m.0jz54f )\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x1 P3 M0 .\nFILTER ( ?x1 != M0 )\n}",
    "expectedResponse": "Happy Together; Fallen Angels",
    "recursionDepth": 31
  },
  {
    "questionIdx": 169820,
    "questionWithBrackets": "What was directed by [Elijah Drenner] and executive produced by a male person",
    "questionPatternModEntities": "What was directed by M0 and executive produced by a male person",
    "questionTemplate": "What was [VP_SIMPLE] by [entity] and [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [NP_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.film.directed_by ns:m.03nwz33 .\n?x0 ns:film.film.executive_produced_by ?x1 .\n?x1 a ns:people.person .\n?x1 ns:people.person.gender ns:m.05zppz\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 M0 .\n?x1 P2 M2 .\n?x1 a M1\n}",
    "expectedResponse": "That Guy Dick Miller",
    "recursionDepth": 31
  },
  {
    "questionIdx": 44979,
    "questionWithBrackets": "Was [Ali al-Naimi] employed by [Saudi Aramco] and employed by [Dineja Agathocleous]'s sibling's country of nationality",
    "questionPatternModEntities": "Was M1 employed by M2 and employed by M0 's sibling 's country of nationality",
    "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ^ns:people.person.nationality ?x1 .\n?x1 ns:people.person.sibling_s/ns:people.sibling_relationship.sibling|ns:fictional_universe.fictional_character.siblings/ns:fictional_universe.sibling_relationship_of_fictional_characters.siblings ns:m.0j81x2c .\nFILTER ( ?x1 != ns:m.0j81x2c ) .\nns:m.077cfq ns:people.person.employment_history/ns:business.employment_tenure.company ?x0 .\nns:m.077cfq ns:people.person.employment_history/ns:business.employment_tenure.company ns:m.01qjg2\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x1 P1 M0 .\nFILTER ( ?x1 != M0 ) .\nM1 P2 ?x0 .\nM1 P2 M2\n}",
    "expectedResponse": "No",
    "recursionDepth": 31
  },
  {
    "questionIdx": 128903,
    "questionWithBrackets": "Were [Une sortie du 'Rubis'] and [World Without Sun] directed by a French founder of [Cabela's Retail MO, LLC] and [EarthEcho International]",
    "questionPatternModEntities": "Were M3 and M4 directed by a French founder of M0 and M1",
    "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] and [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:organization.organization_founder.organizations_founded ns:m.09669d .\n?x0 ns:organization.organization_founder.organizations_founded ns:m.09n0s59 .\n?x0 ns:people.person.nationality ns:m.0f8l9c .\nns:m.0bl5w2 ns:film.film.directed_by ?x0 .\nns:m.0v9thzk ns:film.film.directed_by ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P1 M2 .\nM3 P2 ?x0 .\nM4 P2 ?x0\n}",
    "expectedResponse": "No",
    "recursionDepth": 31
  },
  {
    "questionIdx": 40966,
    "questionWithBrackets": "Did an Italian screenwriter executive produce [Sogni mostruosamente proibiti] and produce [Twixt]",
    "questionPatternModEntities": "Did a Italian screenwriter executive produce M1 and produce M3",
    "questionTemplate": "Did a [ADJECTIVE_SIMPLE] [NP_SIMPLE] [VP_SIMPLE] [entity] and [VP_SIMPLE] [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 a ns:film.writer .\n?x0 ns:film.producer.films_executive_produced ns:m.0ztb6hj .\n?x0 ns:film.producer.film|ns:film.production_company.films ns:m.0drytd1 .\n?x0 ns:people.person.nationality ns:m.03rjj\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M1 .\n?x0 P1 M2 .\n?x0 P2 M3 .\n?x0 a M0\n}",
    "expectedResponse": "No",
    "recursionDepth": 31
  },
  {
    "questionIdx": 193278,
    "questionWithBrackets": "Which actor was a Canadian screenwriter that [Roy Lichtenstein] and [J. G. Ballard] influenced",
    "questionPatternModEntities": "Which actor was a Canadian screenwriter that M2 and M3 influenced",
    "questionTemplate": "Which [NP_SIMPLE] was a [ADJECTIVE_SIMPLE] [NP_SIMPLE] that [entity] and [entity] [VP_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:film.actor .\n?x0 a ns:film.writer .\n?x0 ns:influence.influence_node.influenced_by ns:m.041xl .\n?x0 ns:influence.influence_node.influenced_by ns:m.0gcgd .\n?x0 ns:people.person.nationality ns:m.0d060g\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M2 .\n?x0 P0 M3 .\n?x0 P1 M4 .\n?x0 a M0 .\n?x0 a M1\n}",
    "expectedResponse": "Douglas Coupland",
    "recursionDepth": 31
  },
  {
    "questionIdx": 181883,
    "questionWithBrackets": "What was produced by [Yoram Gross] and written by [Shulamit Gross]'s child and spouse",
    "questionPatternModEntities": "What was produced by M0 and written by M1 's child and spouse",
    "questionTemplate": "What was [VP_SIMPLE] by [entity] and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] and [ROLE_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.film.produced_by|ns:film.film.production_companies ns:m.0bh6hf .\n?x0 ns:film.film.written_by ?x1 .\n?x1 ns:people.person.parents|ns:fictional_universe.fictional_character.parents|ns:organization.organization.parent/ns:organization.organization_relationship.parent ns:m.0r934js .\n?x1 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ns:m.0r934js .\nFILTER ( ?x1 != ns:m.0r934js )\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 M0 .\n?x1 P2 M1 .\n?x1 P3 M1 .\nFILTER ( ?x1 != M1 )\n}",
    "expectedResponse": "Joseph the Dreamer",
    "recursionDepth": 31
  },
  {
    "questionIdx": 149806,
    "questionWithBrackets": "What did a film distributor's founder and employee edit and executive produce",
    "questionPatternModEntities": "What did a film distributor 's founder and employee edit and executive produce",
    "questionTemplate": "What did a [NP_SIMPLE] 's [ROLE_SIMPLE] and [ROLE_SIMPLE] [VP_SIMPLE] and [VP_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.film.edited_by ?x1 .\n?x0 ns:film.film.executive_produced_by ?x1 .\n?x1 ns:organization.organization_founder.organizations_founded ?x2 .\n?x1 ns:people.person.employment_history/ns:business.employment_tenure.company ?x2 .\n?x2 a ns:film.film_distributor\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x1 P2 ?x2 .\n?x1 P3 ?x2 .\n?x2 a M0\n}",
    "expectedResponse": "The Goonies",
    "recursionDepth": 31
  },
  {
    "questionIdx": 10132,
    "questionWithBrackets": "Did [Igor] star [Jennifer Coolidge] and star [Man in white suit]'s British actor",
    "questionPatternModEntities": "Did M2 star M3 and star M1 's British actor",
    "questionTemplate": "Did [entity] [VP_SIMPLE] [entity] and [VP_SIMPLE] [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.actor.film/ns:film.performance.character ns:m.0w4ct6c .\n?x0 ns:people.person.nationality ns:m.07ssc .\nns:m.0kvc0h ns:film.film.starring/ns:film.performance.actor ?x0 .\nns:m.0kvc0h ns:film.film.starring/ns:film.performance.actor ns:m.073749\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nM2 P2 ?x0 .\nM2 P2 M3\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 31
  },
  {
    "questionIdx": 4119,
    "questionWithBrackets": "Did [Chow Yun-Fat] marry [Jasmine Tan] and marry [Love Is a Many Stupid Thing]'s Chinese costume designer",
    "questionPatternModEntities": "Did M2 marry M3 and marry M0 's Chinese costume designer",
    "questionTemplate": "Did [entity] [VP_SIMPLE] [entity] and [VP_SIMPLE] [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.film_costumer_designer.costume_design_for_film ns:m.0glrcd_ .\n?x0 ns:people.person.nationality ns:m.0d05w3 .\nFILTER ( ns:m.0m9v7 != ?x0 ) .\nFILTER ( ns:m.0m9v7 != ns:m.02kkpfq ) .\nns:m.0m9v7 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ?x0 .\nns:m.0m9v7 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ns:m.02kkpfq\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( M2 != ?x0 ) .\nFILTER ( M2 != M3 ) .\nM2 P2 ?x0 .\nM2 P2 M3\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 31
  },
  {
    "questionIdx": 121217,
    "questionWithBrackets": "Were [Mimic] and [The Devil's Backbone] directed by a Mexican executive producer of [Kung Fu Panda 2]'s sequel",
    "questionPatternModEntities": "Were M2 and M3 directed by a Mexican executive producer of M1 's sequel",
    "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] 's [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.producer.films_executive_produced ?x1 .\n?x0 ns:people.person.nationality ns:m.0b90_r .\n?x1 ns:film.film.prequel ns:m.06ztvyx .\nns:m.04d0ng ns:film.film.directed_by ?x0 .\nns:m.0dqvh3 ns:film.film.directed_by ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x0 P1 M0 .\n?x1 P2 M1 .\nM2 P3 ?x0 .\nM3 P3 ?x0\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 31
  },
  {
    "questionIdx": 150311,
    "questionWithBrackets": "What did a parent of [Bruce A. Taylor] write, produce, and executive produce",
    "questionPatternModEntities": "What did a parent of M0 write , produce , and executive produce",
    "questionTemplate": "What did a [ROLE_SIMPLE] of [entity] [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.film.executive_produced_by ?x1 .\n?x0 ns:film.film.produced_by|ns:film.film.production_companies ?x1 .\n?x0 ns:film.film.written_by ?x1 .\n?x1 ns:people.person.children|ns:fictional_universe.fictional_character.children|ns:organization.organization.child/ns:organization.organization_relationship.child ns:m.0b_vcz2\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x1 P3 M0\n}",
    "expectedResponse": "At Any Cost",
    "recursionDepth": 31
  },
  {
    "questionIdx": 156067,
    "questionWithBrackets": "What film director whose spouse was influenced by [Groucho Marx] and [Cole Porter] played [Daphne Wilder]",
    "questionPatternModEntities": "What film director whose spouse was influenced by M2 and M3 played M1",
    "questionTemplate": "What [NP_SIMPLE] whose [ROLE_SIMPLE] was [VP_SIMPLE] by [entity] and [entity] [VP_SIMPLE] [entity]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:film.director .\n?x0 ns:film.actor.film/ns:film.performance.character ns:m.09qmxvf .\n?x0 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ?x1 .\n?x1 ns:influence.influence_node.influenced_by ns:m.01jrvr6 .\n?x1 ns:influence.influence_node.influenced_by ns:m.01wj9y9 .\nFILTER ( ?x0 != ?x1 )\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M1 .\n?x0 P1 ?x1 .\n?x0 a M0 .\n?x1 P2 M2 .\n?x1 P2 M3 .\nFILTER ( ?x0 != ?x1 )\n}",
    "expectedResponse": "Diane Keaton",
    "recursionDepth": 31
  },
  {
    "questionIdx": 125110,
    "questionWithBrackets": "Were [StudentsFirst] and [The New Teacher Project] founded by a female spouse of [The ChubbChubbs!]'s cinematographer",
    "questionPatternModEntities": "Were M2 and M3 founded by a female spouse of M1 's cinematographer",
    "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] 's [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:people.person.gender ns:m.02zsn .\n?x0 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ?x1 .\n?x1 ns:film.cinematographer.film ns:m.08sk48 .\nFILTER ( ?x0 != ?x1 ) .\nns:m.0271f5x ns:organization.organization.founders ?x0 .\nns:m.0gvtxcb ns:organization.organization.founders ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 ?x1 .\n?x1 P2 M1 .\nFILTER ( ?x0 != ?x1 ) .\nM2 P3 ?x0 .\nM3 P3 ?x0\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 31
  },
  {
    "questionIdx": 217368,
    "questionWithBrackets": "Who executive produced, wrote, and edited a sequel of [Tetsuo: The Iron Man]",
    "questionPatternModEntities": "Who executive produced , wrote , and edited a sequel of M1",
    "questionTemplate": "Who [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] a [ROLE_SIMPLE] of [entity]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:people.person .\n?x0 ns:film.editor.film ?x1 .\n?x0 ns:film.producer.films_executive_produced ?x1 .\n?x0 ns:film.writer.film ?x1 .\n?x1 ns:film.film.prequel ns:m.05m0x0\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x0 a M0 .\n?x1 P3 M1\n}",
    "expectedResponse": "Shinya Tsukamoto",
    "recursionDepth": 31
  },
  {
    "questionIdx": 41025,
    "questionWithBrackets": "Did an actor direct [Out from the Shadow] and write a sequel of [The Scorpion King]",
    "questionPatternModEntities": "Did a actor direct M1 and write a sequel of M2",
    "questionTemplate": "Did a [NP_SIMPLE] [VP_SIMPLE] [entity] and [VP_SIMPLE] a [ROLE_SIMPLE] of [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 a ns:film.actor .\n?x0 ns:film.director.film ns:m.04f0m1c .\n?x0 ns:film.writer.film ?x1 .\n?x1 ns:film.film.prequel ns:m.03t95n\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x0 P1 M1 .\n?x0 a M0 .\n?x1 P2 M2\n}",
    "expectedResponse": "No",
    "recursionDepth": 31
  },
  {
    "questionIdx": 168515,
    "questionWithBrackets": "What was a film whose executive producer, costume designer, and star played [Hordak]",
    "questionPatternModEntities": "What was a film whose executive producer , costume designer , and star played M1",
    "questionTemplate": "What was a [NP_SIMPLE] whose [ROLE_SIMPLE] , [ROLE_SIMPLE] , and [ROLE_SIMPLE] [VP_SIMPLE] [entity]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:film.film .\n?x0 ns:film.film.costume_design_by ?x1 .\n?x0 ns:film.film.executive_produced_by ?x1 .\n?x0 ns:film.film.starring/ns:film.performance.actor ?x1 .\n?x1 ns:film.actor.film/ns:film.performance.character ns:m.05sdvf\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x0 a M0 .\n?x1 P3 M1\n}",
    "expectedResponse": "The Trials of Darksmoke",
    "recursionDepth": 31
  },
  {
    "questionIdx": 9440,
    "questionWithBrackets": "Did [Harvard University]'s Mexican employee influence [Eliot Weinberger] and influence [Juan Goytisolo]",
    "questionPatternModEntities": "Did M2 's Mexican employee influence M0 and influence M1",
    "questionTemplate": "Did [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] [VP_SIMPLE] [entity] and [VP_SIMPLE] [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:influence.influence_node.influenced ns:m.01vk6b .\n?x0 ns:influence.influence_node.influenced ns:m.026xrqz .\n?x0 ns:people.person.employment_history/ns:business.employment_tenure.company ns:m.03ksy .\n?x0 ns:people.person.nationality ns:m.0b90_r\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P1 M2 .\n?x0 P2 M3\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 31
  },
  {
    "questionIdx": 9381,
    "questionWithBrackets": "Did [Harvard University] employ [Mark Tobey Abroad]'s cinematographer and producer and employ [Increase Mather]",
    "questionPatternModEntities": "Did M1 employ M0 's cinematographer and producer and employ M2",
    "questionTemplate": "Did [entity] [VP_SIMPLE] [entity] 's [ROLE_SIMPLE] and [ROLE_SIMPLE] and [VP_SIMPLE] [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.cinematographer.film ns:m.02q50sq .\n?x0 ns:film.producer.film|ns:film.production_company.films ns:m.02q50sq .\nns:m.03ksy ns:business.employer.employees/ns:business.employment_tenure.person ?x0 .\nns:m.03ksy ns:business.employer.employees/ns:business.employment_tenure.person ns:m.01p1y5\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M0 .\nM1 P2 ?x0 .\nM1 P2 M2\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 31
  },
  {
    "questionIdx": 6450,
    "questionWithBrackets": "Did [Elizabeth Barrett Browning] influence and marry a female person's sibling",
    "questionPatternModEntities": "Did M2 influence and marry a female person 's sibling",
    "questionTemplate": "Did [entity] [VP_SIMPLE] and [VP_SIMPLE] a [ADJECTIVE_SIMPLE] [NP_SIMPLE] 's [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:people.person.sibling_s/ns:people.sibling_relationship.sibling|ns:fictional_universe.fictional_character.siblings/ns:fictional_universe.sibling_relationship_of_fictional_characters.siblings ?x1 .\n?x1 a ns:people.person .\n?x1 ns:people.person.gender ns:m.02zsn .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ns:m.02mfq != ?x0 ) .\nns:m.02mfq ns:influence.influence_node.influenced ?x0 .\nns:m.02mfq ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x1 P1 M1 .\n?x1 a M0 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( M2 != ?x0 ) .\nM2 P2 ?x0 .\nM2 P3 ?x0\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 31
  },
  {
    "questionIdx": 173266,
    "questionWithBrackets": "What was edited by [Days of Being Wild]'s sequel's costume designer and executive produced by [Tsai Sung-lin]",
    "questionPatternModEntities": "What was edited by M1 's sequel 's costume designer and executive produced by M0",
    "questionTemplate": "What was [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE] and [VP_SIMPLE] by [entity]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.film.edited_by ?x1 .\n?x0 ns:film.film.executive_produced_by ns:m.0jts03 .\n?x1 ns:film.film_costumer_designer.costume_design_for_film ?x2 .\n?x2 ns:film.film.prequel ns:m.027m67\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 ?x1 .\n?x1 P2 ?x2 .\n?x2 P3 M1\n}",
    "expectedResponse": "Ashes of Time",
    "recursionDepth": 31
  },
  {
    "questionIdx": 185799,
    "questionWithBrackets": "What was written by, directed by, and edited by an art director of [Vne igry]",
    "questionPatternModEntities": "What was written by , directed by , and edited by a art director of M0",
    "questionTemplate": "What was [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.film.directed_by ?x1 .\n?x0 ns:film.film.edited_by ?x1 .\n?x0 ns:film.film.written_by ?x1 .\n?x1 ns:film.film_art_director.films_art_directed ns:m.0k3db90\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x1 P3 M0\n}",
    "expectedResponse": "Pishto Goes Away",
    "recursionDepth": 31
  },
  {
    "questionIdx": 33367,
    "questionWithBrackets": "Did a film director's spouse executive produce [Wait Until Spring, Bandini] and executive produce [The Bling Ring]",
    "questionPatternModEntities": "Did a film director 's spouse executive produce M0 and executive produce M1",
    "questionTemplate": "Did a [NP_SIMPLE] 's [ROLE_SIMPLE] [VP_SIMPLE] [entity] and [VP_SIMPLE] [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.producer.films_executive_produced ns:m.09ghhks .\n?x0 ns:film.producer.films_executive_produced ns:m.0kbj11v .\n?x0 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ?x1 .\n?x1 a ns:film.director .\nFILTER ( ?x0 != ?x1 )\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P1 ?x1 .\n?x1 a M2 .\nFILTER ( ?x0 != ?x1 )\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 31
  },
  {
    "questionIdx": 169458,
    "questionWithBrackets": "What was directed and executive produced by an actor's Japanese sibling",
    "questionPatternModEntities": "What was directed and executive produced by a actor 's Japanese sibling",
    "questionTemplate": "What was [VP_SIMPLE] and [VP_SIMPLE] by a [NP_SIMPLE] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.film.directed_by ?x1 .\n?x0 ns:film.film.executive_produced_by ?x1 .\n?x1 ns:people.person.nationality ns:m.03_3d .\n?x1 ns:people.person.sibling_s/ns:people.sibling_relationship.sibling|ns:fictional_universe.fictional_character.siblings/ns:fictional_universe.sibling_relationship_of_fictional_characters.siblings ?x2 .\n?x2 a ns:film.actor .\nFILTER ( ?x1 != ?x2 )\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x1 P2 ?x2 .\n?x1 P3 M0 .\n?x2 a M1 .\nFILTER ( ?x1 != ?x2 )\n}",
    "expectedResponse": "Tetsuo II: Body Hammer",
    "recursionDepth": 31
  },
  {
    "questionIdx": 36879,
    "questionWithBrackets": "Did a male actor of [Juke-A-Tron] executive produce and edit [An Okay Place to Eat]",
    "questionPatternModEntities": "Did a male actor of M1 executive produce and edit M0",
    "questionTemplate": "Did a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] [VP_SIMPLE] and [VP_SIMPLE] [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.actor.film/ns:film.performance.character ns:m.0hgcjgq .\n?x0 ns:film.editor.film ns:m.0h36wgt .\n?x0 ns:film.producer.films_executive_produced ns:m.0h36wgt .\n?x0 ns:people.person.gender ns:m.05zppz\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M0 .\n?x0 P2 M1 .\n?x0 P3 M2\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 31
  },
  {
    "questionIdx": 7940,
    "questionWithBrackets": "Did [Fucke-Michels] and [H\u00f6chstetter] marry a female German sibling of [Eva Braun]",
    "questionPatternModEntities": "Did M3 and M4 marry a female German sibling of M0",
    "questionTemplate": "Did [entity] and [entity] [VP_SIMPLE] a [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:people.person.gender ns:m.02zsn .\n?x0 ns:people.person.nationality ns:m.0345h .\n?x0 ns:people.person.sibling_s/ns:people.sibling_relationship.sibling|ns:fictional_universe.fictional_character.siblings/ns:fictional_universe.sibling_relationship_of_fictional_characters.siblings ns:m.02n7m .\nFILTER ( ?x0 != ns:m.02n7m ) .\nFILTER ( ns:m.0v8xw_m != ?x0 ) .\nFILTER ( ns:m.0v8xwwd != ?x0 ) .\nns:m.0v8xw_m ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ?x0 .\nns:m.0v8xwwd ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P2 M2 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( M3 != ?x0 ) .\nFILTER ( M4 != ?x0 ) .\nM3 P3 ?x0 .\nM4 P3 ?x0\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 31
  },
  {
    "questionIdx": 60667,
    "questionWithBrackets": "Was [Jacky Heung] a Chinese actor whose parent founded [HK Express] and [Ocean Shores Video]",
    "questionPatternModEntities": "Was M2 a Chinese actor whose parent founded M0 and M1",
    "questionTemplate": "Was [entity] a [ADJECTIVE_SIMPLE] [NP_SIMPLE] whose [ROLE_SIMPLE] [VP_SIMPLE] [entity] and [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:organization.organization_founder.organizations_founded ns:m.05xmql .\n?x0 ns:organization.organization_founder.organizations_founded ns:m.0f3xfm .\nns:m.03qn51m a ns:film.actor .\nns:m.03qn51m ns:people.person.nationality ns:m.0d05w3 .\nns:m.03qn51m ns:people.person.parents|ns:fictional_universe.fictional_character.parents|ns:organization.organization.parent/ns:organization.organization_relationship.parent ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\nM2 P1 M4 .\nM2 P2 ?x0 .\nM2 a M3\n}",
    "expectedResponse": "No",
    "recursionDepth": 31
  },
  {
    "questionIdx": 83547,
    "questionWithBrackets": "Was [Tie ban shao] written by and directed by a Chinese sibling of [Ning Dai]",
    "questionPatternModEntities": "Was M2 written by and directed by a Chinese sibling of M0",
    "questionTemplate": "Was [entity] [VP_SIMPLE] by and [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:people.person.nationality ns:m.0d05w3 .\n?x0 ns:people.person.sibling_s/ns:people.sibling_relationship.sibling|ns:fictional_universe.fictional_character.siblings/ns:fictional_universe.sibling_relationship_of_fictional_characters.siblings ns:m.0bfrxkv .\nFILTER ( ?x0 != ns:m.0bfrxkv ) .\nns:m.0ndg46b ns:film.film.directed_by ?x0 .\nns:m.0ndg46b ns:film.film.written_by ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M0 ) .\nM2 P2 ?x0 .\nM2 P3 ?x0\n}",
    "expectedResponse": "No",
    "recursionDepth": 31
  },
  {
    "questionIdx": 148820,
    "questionWithBrackets": "What did a child of a company produce and [Jesse Berger] executive produce",
    "questionPatternModEntities": "What did a child of a company produce and M0 executive produce",
    "questionTemplate": "What did a [ROLE_SIMPLE] of a [NP_SIMPLE] [VP_SIMPLE] and [entity] [VP_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.film.executive_produced_by ns:m.0gwn49k .\n?x0 ns:film.film.produced_by|ns:film.film.production_companies ?x1 .\n?x1 ns:people.person.parents|ns:fictional_universe.fictional_character.parents|ns:organization.organization.parent/ns:organization.organization_relationship.parent ?x2 .\n?x2 a ns:business.employer\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 ?x1 .\n?x1 P2 ?x2 .\n?x2 a M1\n}",
    "expectedResponse": "Oblivion",
    "recursionDepth": 31
  },
  {
    "questionIdx": 65211,
    "questionWithBrackets": "Was [Luigi De Laurentiis] an Italian film producer whose sibling produced [Gay Cock Cravers] and [Amityville II: The Possession]",
    "questionPatternModEntities": "Was M2 a Italian film producer whose sibling produced M0 and M1",
    "questionTemplate": "Was [entity] a [ADJECTIVE_SIMPLE] [NP_SIMPLE] whose [ROLE_SIMPLE] [VP_SIMPLE] [entity] and [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.producer.film|ns:film.production_company.films ns:m.06pqx7 .\n?x0 ns:film.producer.film|ns:film.production_company.films ns:m.09vp3rk .\nFILTER ( ns:m.0bb8v9q != ?x0 ) .\nns:m.0bb8v9q a ns:film.producer .\nns:m.0bb8v9q ns:people.person.nationality ns:m.03rjj .\nns:m.0bb8v9q ns:people.person.sibling_s/ns:people.sibling_relationship.sibling|ns:fictional_universe.fictional_character.siblings/ns:fictional_universe.sibling_relationship_of_fictional_characters.siblings ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\nFILTER ( M2 != ?x0 ) .\nM2 P1 ?x0 .\nM2 P2 M4 .\nM2 a M3\n}",
    "expectedResponse": "No",
    "recursionDepth": 31
  },
  {
    "questionIdx": 47326,
    "questionWithBrackets": "Was [Bears and Man] produced and distributed by a Canadian film producer's employer",
    "questionPatternModEntities": "Was M2 produced and distributed by a Canadian film producer 's employer",
    "questionTemplate": "Was [entity] [VP_SIMPLE] and [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [NP_SIMPLE] 's [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:business.employer.employees/ns:business.employment_tenure.person ?x1 .\n?x1 a ns:film.producer .\n?x1 ns:people.person.nationality ns:m.0d060g .\nns:m.0qfq7xj ns:film.film.distributors/ns:film.film_film_distributor_relationship.distributor ?x0 .\nns:m.0qfq7xj ns:film.film.produced_by|ns:film.film.production_companies ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x1 P1 M1 .\n?x1 a M0 .\nM2 P2 ?x0 .\nM2 P3 ?x0\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 31
  },
  {
    "questionIdx": 75922,
    "questionWithBrackets": "Was [Seven Samurai] directed and edited by a Japanese film producer's parent",
    "questionPatternModEntities": "Was M2 directed and edited by a Japanese film producer 's parent",
    "questionTemplate": "Was [entity] [VP_SIMPLE] and [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [NP_SIMPLE] 's [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:people.person.children|ns:fictional_universe.fictional_character.children|ns:organization.organization.child/ns:organization.organization_relationship.child ?x1 .\n?x1 a ns:film.producer .\n?x1 ns:people.person.nationality ns:m.03_3d .\nns:m.07q78 ns:film.film.directed_by ?x0 .\nns:m.07q78 ns:film.film.edited_by ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x1 P1 M1 .\n?x1 a M0 .\nM2 P2 ?x0 .\nM2 P3 ?x0\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 31
  },
  {
    "questionIdx": 18838,
    "questionWithBrackets": "Did [Savages] star [Seann William Scott] and star [Ventanarosa]'s Mexican founder",
    "questionPatternModEntities": "Did M2 star M3 and star M0 's Mexican founder",
    "questionTemplate": "Did [entity] [VP_SIMPLE] [entity] and [VP_SIMPLE] [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:organization.organization_founder.organizations_founded ns:m.0284zcx .\n?x0 ns:people.person.nationality ns:m.0b90_r .\nns:m.0gmd3k7 ns:film.film.starring/ns:film.performance.actor ?x0 .\nns:m.0gmd3k7 ns:film.film.starring/ns:film.performance.actor ns:m.03n08b\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nM2 P2 ?x0 .\nM2 P2 M3\n}",
    "expectedResponse": "No",
    "recursionDepth": 31
  },
  {
    "questionIdx": 22094,
    "questionWithBrackets": "Did [The Flat Jungle]'s producer marry and influence [A Room in Town]'s costume designer's parent",
    "questionPatternModEntities": "Did M0 's producer marry and influence M1 's costume designer 's parent",
    "questionTemplate": "Did [entity] 's [ROLE_SIMPLE] [VP_SIMPLE] and [VP_SIMPLE] [entity] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.producer.film|ns:film.production_company.films ns:m.0gsycrd .\n?x0 ns:influence.influence_node.influenced ?x1 .\n?x0 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ?x1 .\n?x1 ns:people.person.children|ns:fictional_universe.fictional_character.children|ns:organization.organization.child/ns:organization.organization_relationship.child ?x2 .\n?x2 ns:film.film_costumer_designer.costume_design_for_film ns:m.0404hwv .\nFILTER ( ?x0 != ?x1 )\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x0 P1 M0 .\n?x0 P2 ?x1 .\n?x1 P3 ?x2 .\n?x2 P4 M1 .\nFILTER ( ?x0 != ?x1 )\n}",
    "expectedResponse": "No",
    "recursionDepth": 31
  },
  {
    "questionIdx": 182096,
    "questionWithBrackets": "What was produced by a child of a production company and distributed by [Sony Music Entertainment]",
    "questionPatternModEntities": "What was produced by a child of a production company and distributed by M0",
    "questionTemplate": "What was [VP_SIMPLE] by a [ROLE_SIMPLE] of a [NP_SIMPLE] and [VP_SIMPLE] by [entity]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.film.distributors/ns:film.film_film_distributor_relationship.distributor ns:m.043g7l .\n?x0 ns:film.film.produced_by|ns:film.film.production_companies ?x1 .\n?x1 ns:people.person.parents|ns:fictional_universe.fictional_character.parents|ns:organization.organization.parent/ns:organization.organization_relationship.parent ?x2 .\n?x2 a ns:film.production_company\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 ?x1 .\n?x1 P2 ?x2 .\n?x2 a M1\n}",
    "expectedResponse": "Pink Floyd \u2013 The Wall",
    "recursionDepth": 31
  },
  {
    "questionIdx": 172940,
    "questionWithBrackets": "What was edited and produced by [Pickels In A Pickle]'s German editor's sibling",
    "questionPatternModEntities": "What was edited and produced by M1 's German editor 's sibling",
    "questionTemplate": "What was [VP_SIMPLE] and [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] 's [ROLE_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.film.edited_by ?x1 .\n?x0 ns:film.film.produced_by|ns:film.film.production_companies ?x1 .\n?x1 ns:people.person.sibling_s/ns:people.sibling_relationship.sibling|ns:fictional_universe.fictional_character.siblings/ns:fictional_universe.sibling_relationship_of_fictional_characters.siblings ?x2 .\n?x2 ns:film.editor.film ns:m.0jsdgcz .\n?x2 ns:people.person.nationality ns:m.0345h .\nFILTER ( ?x1 != ?x2 )\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x1 P2 ?x2 .\n?x2 P3 M0 .\n?x2 P4 M1 .\nFILTER ( ?x1 != ?x2 )\n}",
    "expectedResponse": "The Periwig-Maker",
    "recursionDepth": 31
  },
  {
    "questionIdx": 81651,
    "questionWithBrackets": "Was [The Masquerader] a film whose writer and editor influenced [Wes Anderson] and [Will Hay]",
    "questionPatternModEntities": "Was M2 a film whose writer and editor influenced M0 and M1",
    "questionTemplate": "Was [entity] a [NP_SIMPLE] whose [ROLE_SIMPLE] and [ROLE_SIMPLE] [VP_SIMPLE] [entity] and [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:influence.influence_node.influenced ns:m.02k_gj .\n?x0 ns:influence.influence_node.influenced ns:m.02ld6x .\nns:m.08b2hs a ns:film.film .\nns:m.08b2hs ns:film.film.edited_by ?x0 .\nns:m.08b2hs ns:film.film.written_by ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\nM2 P1 ?x0 .\nM2 P2 ?x0 .\nM2 a M3\n}",
    "expectedResponse": "No",
    "recursionDepth": 31
  },
  {
    "questionIdx": 194658,
    "questionWithBrackets": "Which character did [Malaak Compton Rock] marry and a costume designer's sibling influence",
    "questionPatternModEntities": "Which character did M1 marry and a costume designer 's sibling influence",
    "questionTemplate": "Which [NP_SIMPLE] did [entity] [VP_SIMPLE] and a [NP_SIMPLE] 's [ROLE_SIMPLE] [VP_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:fictional_universe.fictional_character .\n?x0 ns:influence.influence_node.influenced_by ?x1 .\n?x0 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ns:m.04dn76t .\n?x1 ns:people.person.sibling_s/ns:people.sibling_relationship.sibling|ns:fictional_universe.fictional_character.siblings/ns:fictional_universe.sibling_relationship_of_fictional_characters.siblings ?x2 .\n?x2 a ns:film.film_costumer_designer .\nFILTER ( ?x0 != ns:m.04dn76t ) .\nFILTER ( ?x1 != ?x2 )\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 M1 .\n?x0 a M0 .\n?x1 P2 ?x2 .\n?x2 a M2 .\nFILTER ( ?x0 != M1 ) .\nFILTER ( ?x1 != ?x2 )\n}",
    "expectedResponse": "Chris Rock",
    "recursionDepth": 31
  },
  {
    "questionIdx": 92918,
    "questionWithBrackets": "Was a cinematographer that [Son Seul] was written by and was edited by [Daniel Mall]",
    "questionPatternModEntities": "Was a cinematographer that M2 was written by and was edited by M0",
    "questionTemplate": "Was a [NP_SIMPLE] that [entity] was [VP_SIMPLE] by and was [VP_SIMPLE] by [entity]",
    "sparql": "SELECT count(*) WHERE {\nns:m.0114b77r a ns:film.cinematographer .\nns:m.0114b77r ns:film.editor.film ns:m.0110gw14 .\nns:m.0114b77r ns:film.writer.film ns:m.0110gw14\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M2 .\nM0 P1 M2 .\nM0 a M1\n}",
    "expectedResponse": "No",
    "recursionDepth": 31
  },
  {
    "questionIdx": 86397,
    "questionWithBrackets": "Was [Wee Sing Together] produced and written by a cinematographer's American child",
    "questionPatternModEntities": "Was M2 produced and written by a cinematographer 's American child",
    "questionTemplate": "Was [entity] [VP_SIMPLE] and [VP_SIMPLE] by a [NP_SIMPLE] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:people.person.nationality ns:m.09c7w0 .\n?x0 ns:people.person.parents|ns:fictional_universe.fictional_character.parents|ns:organization.organization.parent/ns:organization.organization_relationship.parent ?x1 .\n?x1 a ns:film.cinematographer .\nns:m.0crrpkw ns:film.film.produced_by|ns:film.film.production_companies ?x0 .\nns:m.0crrpkw ns:film.film.written_by ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 ?x1 .\n?x1 a M1 .\nM2 P2 ?x0 .\nM2 P3 ?x0\n}",
    "expectedResponse": "No",
    "recursionDepth": 31
  },
  {
    "questionIdx": 122000,
    "questionWithBrackets": "Were [Noel Fielding], [Takashi Miike], [Joe Velikovsky], [Vernon Chatman], [Ellen Stagg], and [Don Hertzfeldt] influenced by an art director",
    "questionPatternModEntities": "Were M1 , M2 , M3 , M4 , M5 , and M6 influenced by a art director",
    "questionTemplate": "Were [entity] , [entity] , [entity] , [entity] , [entity] , and [entity] [VP_SIMPLE] by a [NP_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 a ns:film.film_art_director .\nns:m.01dtbz ns:influence.influence_node.influenced_by ?x0 .\nns:m.01dxx3 ns:influence.influence_node.influenced_by ?x0 .\nns:m.057qgw ns:influence.influence_node.influenced_by ?x0 .\nns:m.05c3v_5 ns:influence.influence_node.influenced_by ?x0 .\nns:m.065zt7y ns:influence.influence_node.influenced_by ?x0 .\nns:m.0bz60q ns:influence.influence_node.influenced_by ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 a M0 .\nM1 P0 ?x0 .\nM2 P0 ?x0 .\nM3 P0 ?x0 .\nM4 P0 ?x0 .\nM5 P0 ?x0 .\nM6 P0 ?x0\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 31
  },
  {
    "questionIdx": 215955,
    "questionWithBrackets": "Who did a film editor that executive produced and directed [The Last Drop of Water] influence",
    "questionPatternModEntities": "Who did a film editor that executive produced and directed M2 influence",
    "questionTemplate": "Who did a [NP_SIMPLE] that [VP_SIMPLE] and [VP_SIMPLE] [entity] [VP_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:people.person .\n?x0 ns:influence.influence_node.influenced_by ?x1 .\n?x1 a ns:film.editor .\n?x1 ns:film.director.film ns:m.04f3d2x .\n?x1 ns:film.producer.films_executive_produced ns:m.04f3d2x\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 a M0 .\n?x1 P1 M2 .\n?x1 P2 M2 .\n?x1 a M1\n}",
    "expectedResponse": "Alfred Hitchcock; Ingmar Bergman",
    "recursionDepth": 31
  },
  {
    "questionIdx": 29325,
    "questionWithBrackets": "Did a character found [Sonal Raju Kariya]'s sibling's British parent's employer",
    "questionPatternModEntities": "Did a character found M2 's sibling 's British parent 's employer",
    "questionTemplate": "Did a [NP_SIMPLE] [VP_SIMPLE] [entity] 's [ROLE_SIMPLE] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] 's [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 a ns:fictional_universe.fictional_character .\n?x0 ns:organization.organization_founder.organizations_founded ?x1 .\n?x1 ns:business.employer.employees/ns:business.employment_tenure.person ?x2 .\n?x2 ns:people.person.children|ns:fictional_universe.fictional_character.children|ns:organization.organization.child/ns:organization.organization_relationship.child ?x3 .\n?x2 ns:people.person.nationality ns:m.07ssc .\n?x3 ns:people.person.sibling_s/ns:people.sibling_relationship.sibling|ns:fictional_universe.fictional_character.siblings/ns:fictional_universe.sibling_relationship_of_fictional_characters.siblings ns:m.0wy8tr9 .\nFILTER ( ?x3 != ns:m.0wy8tr9 )\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x0 a M0 .\n?x1 P1 ?x2 .\n?x2 P2 M1 .\n?x2 P3 ?x3 .\n?x3 P4 M2 .\nFILTER ( ?x3 != M2 )\n}",
    "expectedResponse": "No",
    "recursionDepth": 31
  },
  {
    "questionIdx": 12685,
    "questionWithBrackets": "Did [L. Rezan Ye\u015filba\u015f] edit, direct, and produce a sequel of [Bride of the Monster]",
    "questionPatternModEntities": "Did M1 edit , direct , and produce a sequel of M0",
    "questionTemplate": "Did [entity] [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] a [ROLE_SIMPLE] of [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.film.prequel ns:m.01l40 .\nns:m.0js8xjr ns:film.director.film ?x0 .\nns:m.0js8xjr ns:film.editor.film ?x0 .\nns:m.0js8xjr ns:film.producer.film|ns:film.production_company.films ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 ?x0 .\nM1 P2 ?x0 .\nM1 P3 ?x0\n}",
    "expectedResponse": "No",
    "recursionDepth": 31
  },
  {
    "questionIdx": 194174,
    "questionWithBrackets": "Which art director that was influenced by [Jack Smith] and [Franz Kafka] did a film producer marry",
    "questionPatternModEntities": "Which art director that was influenced by M1 and M2 did a film producer marry",
    "questionTemplate": "Which [NP_SIMPLE] that was [VP_SIMPLE] by [entity] and [entity] did a [NP_SIMPLE] [VP_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:film.film_art_director .\n?x0 ns:influence.influence_node.influenced_by ns:m.03f0324 .\n?x0 ns:influence.influence_node.influenced_by ns:m.07kwmh .\n?x0 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ?x1 .\n?x1 a ns:film.producer .\nFILTER ( ?x0 != ?x1 )\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P1 ?x1 .\n?x0 a M0 .\n?x1 a M3 .\nFILTER ( ?x0 != ?x1 )\n}",
    "expectedResponse": "David Lynch",
    "recursionDepth": 31
  },
  {
    "questionIdx": 172658,
    "questionWithBrackets": "What was distributed by [Warner Bros. Entertainment], distributed by [Warner Independent Pictures], and produced by [National Geographic Society]",
    "questionPatternModEntities": "What was distributed by M0 , distributed by M1 , and produced by M2",
    "questionTemplate": "What was [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.film.distributors/ns:film.film_film_distributor_relationship.distributor ns:m.06s342 .\n?x0 ns:film.film.distributors/ns:film.film_film_distributor_relationship.distributor ns:m.086k8 .\n?x0 ns:film.film.produced_by|ns:film.film.production_companies ns:m.05dp2\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P1 M2\n}",
    "expectedResponse": "March of the Penguins",
    "recursionDepth": 31
  },
  {
    "questionIdx": 180896,
    "questionWithBrackets": "What was produced and executive produced by a Canadian film editor's sibling",
    "questionPatternModEntities": "What was produced and executive produced by a Canadian film editor 's sibling",
    "questionTemplate": "What was [VP_SIMPLE] and [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [NP_SIMPLE] 's [ROLE_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.film.executive_produced_by ?x1 .\n?x0 ns:film.film.produced_by|ns:film.film.production_companies ?x1 .\n?x1 ns:people.person.sibling_s/ns:people.sibling_relationship.sibling|ns:fictional_universe.fictional_character.siblings/ns:fictional_universe.sibling_relationship_of_fictional_characters.siblings ?x2 .\n?x2 a ns:film.editor .\n?x2 ns:people.person.nationality ns:m.0d060g .\nFILTER ( ?x1 != ?x2 )\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x1 P2 ?x2 .\n?x2 P3 M1 .\n?x2 a M0 .\nFILTER ( ?x1 != ?x2 )\n}",
    "expectedResponse": "Heaven on Earth",
    "recursionDepth": 31
  },
  {
    "questionIdx": 42698,
    "questionWithBrackets": "Did an employer of [Evan Bourne] employ [Alfred Radcliffe-Brown] and employ a character",
    "questionPatternModEntities": "Did a employer of M0 employ M1 and employ a character",
    "questionTemplate": "Did a [ROLE_SIMPLE] of [entity] [VP_SIMPLE] [entity] and [VP_SIMPLE] a [NP_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:business.employer.employees/ns:business.employment_tenure.person ?x1 .\n?x0 ns:business.employer.employees/ns:business.employment_tenure.person ns:m.03drkk .\n?x0 ns:business.employer.employees/ns:business.employment_tenure.person ns:m.07gs6m .\n?x1 a ns:fictional_universe.fictional_character\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x1 a M2\n}",
    "expectedResponse": "No",
    "recursionDepth": 31
  },
  {
    "questionIdx": 149597,
    "questionWithBrackets": "What did a female person that founded [Mozark Productions] and [The Claudia Foundation] write",
    "questionPatternModEntities": "What did a female person that founded M1 and M2 write",
    "questionTemplate": "What did a [ADJECTIVE_SIMPLE] [NP_SIMPLE] that [VP_SIMPLE] [entity] and [entity] [VP_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.film.written_by ?x1 .\n?x1 a ns:people.person .\n?x1 ns:organization.organization_founder.organizations_founded ns:m.02w72_z .\n?x1 ns:organization.organization_founder.organizations_founded ns:m.05kmbc5 .\n?x1 ns:people.person.gender ns:m.02zsn\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x1 P1 M1 .\n?x1 P1 M2 .\n?x1 P2 M3 .\n?x1 a M0\n}",
    "expectedResponse": "Bridegroom",
    "recursionDepth": 31
  },
  {
    "questionIdx": 178267,
    "questionWithBrackets": "What was executive produced by and edited by a female editor of [A Place at the Table]",
    "questionPatternModEntities": "What was executive produced by and edited by a female editor of M1",
    "questionTemplate": "What was [VP_SIMPLE] by and [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.film.edited_by ?x1 .\n?x0 ns:film.film.executive_produced_by ?x1 .\n?x1 ns:film.editor.film ns:m.0hy_t9b .\n?x1 ns:people.person.gender ns:m.02zsn\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x1 P2 M0 .\n?x1 P3 M1\n}",
    "expectedResponse": "The Road to Fame",
    "recursionDepth": 31
  },
  {
    "questionIdx": 178289,
    "questionWithBrackets": "What was executive produced by and edited by an actor that [Toshiko Kobayashi] married",
    "questionPatternModEntities": "What was executive produced by and edited by a actor that M1 married",
    "questionTemplate": "What was [VP_SIMPLE] by and [VP_SIMPLE] by a [NP_SIMPLE] that [entity] [VP_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.film.edited_by ?x1 .\n?x0 ns:film.film.executive_produced_by ?x1 .\n?x1 a ns:film.actor .\n?x1 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ns:m.0hnqmzc .\nFILTER ( ?x1 != ns:m.0hnqmzc )\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x1 P2 M1 .\n?x1 a M0 .\nFILTER ( ?x1 != M1 )\n}",
    "expectedResponse": "Antonio Gaudi",
    "recursionDepth": 32
  },
  {
    "questionIdx": 54234,
    "questionWithBrackets": "Was [Errors of the Human Body] written by a male person and executive produced by [Ross Bryan]",
    "questionPatternModEntities": "Was M2 written by a male person and executive produced by M3",
    "questionTemplate": "Was [entity] [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [NP_SIMPLE] and [VP_SIMPLE] by [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 a ns:people.person .\n?x0 ns:people.person.gender ns:m.05zppz .\nns:m.0rh7d23 ns:film.film.executive_produced_by ns:m.0pkyh8k .\nns:m.0rh7d23 ns:film.film.written_by ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M1 .\n?x0 a M0 .\nM2 P1 M3 .\nM2 P2 ?x0\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 32
  },
  {
    "questionIdx": 96984,
    "questionWithBrackets": "Was a film director whose spouse founded and was employed by [Lorimar Television] [Rosanna Arquette]",
    "questionPatternModEntities": "Was a film director whose spouse founded and was employed by M0 M1",
    "questionTemplate": "Was a [NP_SIMPLE] whose [ROLE_SIMPLE] [VP_SIMPLE] and was [VP_SIMPLE] by [entity] [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:organization.organization_founder.organizations_founded ns:m.01p5yn .\n?x0 ns:people.person.employment_history/ns:business.employment_tenure.company ns:m.01p5yn .\nFILTER ( ns:m.01wk51 != ?x0 ) .\nns:m.01wk51 a ns:film.director .\nns:m.01wk51 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M0 .\nFILTER ( M1 != ?x0 ) .\nM1 P2 ?x0 .\nM1 a M2\n}",
    "expectedResponse": "No",
    "recursionDepth": 32
  },
  {
    "questionIdx": 213723,
    "questionWithBrackets": "Who did [Andrew Silverman] marry and a British sibling of [Nicholas Cowell] marry",
    "questionPatternModEntities": "Who did M1 marry and a British sibling of M2 marry",
    "questionTemplate": "Who did [entity] [VP_SIMPLE] and a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] [VP_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:people.person .\n?x0 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ?x1 .\n?x0 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ns:m.0wfddxg .\n?x1 ns:people.person.nationality ns:m.07ssc .\n?x1 ns:people.person.sibling_s/ns:people.sibling_relationship.sibling|ns:fictional_universe.fictional_character.siblings/ns:fictional_universe.sibling_relationship_of_fictional_characters.siblings ns:m.04jfj7z .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x0 != ns:m.0wfddxg ) .\nFILTER ( ?x1 != ns:m.04jfj7z )\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P0 M1 .\n?x0 a M0 .\n?x1 P1 M2 .\n?x1 P2 M3 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x0 != M1 ) .\nFILTER ( ?x1 != M2 )\n}",
    "expectedResponse": "Lauren Silverman",
    "recursionDepth": 32
  },
  {
    "questionIdx": 44167,
    "questionWithBrackets": "Was [Across 110th Street] written by [Wally Ferris] and executive produced by [Mrs. Cratchit]'s child's actor",
    "questionPatternModEntities": "Was M1 written by M2 and executive produced by M0 's child 's actor",
    "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.actor.film/ns:film.performance.character ?x1 .\n?x1 ns:people.person.parents|ns:fictional_universe.fictional_character.parents|ns:organization.organization.parent/ns:organization.organization_relationship.parent ns:m.059q64k .\nns:m.04kvfm ns:film.film.executive_produced_by ?x0 .\nns:m.04kvfm ns:film.film.written_by ns:m.0jt07d\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x1 P1 M0 .\nM1 P2 ?x0 .\nM1 P3 M2\n}",
    "expectedResponse": "No",
    "recursionDepth": 32
  },
  {
    "questionIdx": 66399,
    "questionWithBrackets": "Was [Mariya Petkova] a French male person that founded a film distributor",
    "questionPatternModEntities": "Was M1 a French male person that founded a film distributor",
    "questionTemplate": "Was [entity] a [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [NP_SIMPLE] that [VP_SIMPLE] a [NP_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 a ns:film.film_distributor .\nns:m.09ppmn a ns:people.person .\nns:m.09ppmn ns:organization.organization_founder.organizations_founded ?x0 .\nns:m.09ppmn ns:people.person.gender ns:m.05zppz .\nns:m.09ppmn ns:people.person.nationality ns:m.0f8l9c\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 a M0 .\nM1 P0 ?x0 .\nM1 P1 M3 .\nM1 P2 M4 .\nM1 a M2\n}",
    "expectedResponse": "No",
    "recursionDepth": 32
  },
  {
    "questionIdx": 59002,
    "questionWithBrackets": "Was [Human Rights Association] founded by [Ivory Coast], founded by [Slovakia], and founded by [Paraguay]",
    "questionPatternModEntities": "Was M0 founded by M1 , founded by M2 , and founded by M3",
    "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity]",
    "sparql": "SELECT count(*) WHERE {\nns:m.02r1shh ns:organization.organization.founders ns:m.05v10 .\nns:m.02r1shh ns:organization.organization.founders ns:m.06npd .\nns:m.02r1shh ns:organization.organization.founders ns:m.0fv4v\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P0 M2 .\nM0 P0 M3\n}",
    "expectedResponse": "No",
    "recursionDepth": 32
  },
  {
    "questionIdx": 147789,
    "questionWithBrackets": "What did [Vicente Aranda] direct and a German star of [Cronolog\u00eda] direct",
    "questionPatternModEntities": "What did M0 direct and a German star of M2 direct",
    "questionTemplate": "What did [entity] [VP_SIMPLE] and a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] [VP_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.film.directed_by ?x1 .\n?x0 ns:film.film.directed_by ns:m.0bs_48 .\n?x1 ns:film.actor.film/ns:film.performance.film ns:m.0gbqpfl .\n?x1 ns:people.person.nationality ns:m.0345h\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P0 M0 .\n?x1 P1 M1 .\n?x1 P2 M2\n}",
    "expectedResponse": "Lumi\u00e8re and Company",
    "recursionDepth": 32
  },
  {
    "questionIdx": 167970,
    "questionWithBrackets": "What was a company whose founder founded and was employed by [StumbleUpon]",
    "questionPatternModEntities": "What was a company whose founder founded and was employed by M1",
    "questionTemplate": "What was a [NP_SIMPLE] whose [ROLE_SIMPLE] [VP_SIMPLE] and was [VP_SIMPLE] by [entity]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:business.employer .\n?x0 ns:organization.organization.founders ?x1 .\n?x1 ns:organization.organization_founder.organizations_founded ns:m.0390wb .\n?x1 ns:people.person.employment_history/ns:business.employment_tenure.company ns:m.0390wb\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 a M0 .\n?x1 P1 M1 .\n?x1 P2 M1\n}",
    "expectedResponse": "Uber; StumbleUpon",
    "recursionDepth": 32
  },
  {
    "questionIdx": 30763,
    "questionWithBrackets": "Did a company employ [Lost Islands]'s cinematographer and employ an actor",
    "questionPatternModEntities": "Did a company employ M1 's cinematographer and employ a actor",
    "questionTemplate": "Did a [NP_SIMPLE] [VP_SIMPLE] [entity] 's [ROLE_SIMPLE] and [VP_SIMPLE] a [NP_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 a ns:business.employer .\n?x0 ns:business.employer.employees/ns:business.employment_tenure.person ?x1 .\n?x0 ns:business.employer.employees/ns:business.employment_tenure.person ?x2 .\n?x1 ns:film.cinematographer.film ns:m.07n98j4 .\n?x2 a ns:film.actor\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x0 P0 ?x2 .\n?x0 a M0 .\n?x1 P1 M1 .\n?x2 a M2\n}",
    "expectedResponse": "No",
    "recursionDepth": 32
  },
  {
    "questionIdx": 175932,
    "questionWithBrackets": "What was executive produced and produced by [La chair de ma chair]'s male cinematographer's sibling",
    "questionPatternModEntities": "What was executive produced and produced by M1 's male cinematographer 's sibling",
    "questionTemplate": "What was [VP_SIMPLE] and [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] 's [ROLE_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.film.executive_produced_by ?x1 .\n?x0 ns:film.film.produced_by|ns:film.film.production_companies ?x1 .\n?x1 ns:people.person.sibling_s/ns:people.sibling_relationship.sibling|ns:fictional_universe.fictional_character.siblings/ns:fictional_universe.sibling_relationship_of_fictional_characters.siblings ?x2 .\n?x2 ns:film.cinematographer.film ns:m.0_d1tp2 .\n?x2 ns:people.person.gender ns:m.05zppz .\nFILTER ( ?x1 != ?x2 )\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x1 P2 ?x2 .\n?x2 P3 M0 .\n?x2 P4 M1 .\nFILTER ( ?x1 != ?x2 )\n}",
    "expectedResponse": "The Summer of Flying Fish",
    "recursionDepth": 32
  },
  {
    "questionIdx": 164260,
    "questionWithBrackets": "What screenwriter married, influenced, and was influenced by a film editor",
    "questionPatternModEntities": "What screenwriter married , influenced , and was influenced by a film editor",
    "questionTemplate": "What [NP_SIMPLE] [VP_SIMPLE] , [VP_SIMPLE] , and was [VP_SIMPLE] by a [NP_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:film.writer .\n?x0 ns:influence.influence_node.influenced ?x1 .\n?x0 ns:influence.influence_node.influenced_by ?x1 .\n?x0 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ?x1 .\n?x1 a ns:film.editor .\nFILTER ( ?x0 != ?x1 )\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x0 a M0 .\n?x1 a M1 .\nFILTER ( ?x0 != ?x1 )\n}",
    "expectedResponse": "Jacques Demy",
    "recursionDepth": 32
  },
  {
    "questionIdx": 90810,
    "questionWithBrackets": "Was a Spanish actor that edited and wrote [The Soul of Flies] [Juan Jos\u00e9 Campanella]",
    "questionPatternModEntities": "Was a Spanish actor that edited and wrote M2 M0",
    "questionTemplate": "Was a [ADJECTIVE_SIMPLE] [NP_SIMPLE] that [VP_SIMPLE] and [VP_SIMPLE] [entity] [entity]",
    "sparql": "SELECT count(*) WHERE {\nns:m.02774r6 a ns:film.actor .\nns:m.02774r6 ns:film.editor.film ns:m.0jsdcyp .\nns:m.02774r6 ns:film.writer.film ns:m.0jsdcyp .\nns:m.02774r6 ns:people.person.nationality ns:m.06mkj\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M2 .\nM0 P1 M2 .\nM0 P2 M3 .\nM0 a M1\n}",
    "expectedResponse": "No",
    "recursionDepth": 32
  },
  {
    "questionIdx": 157045,
    "questionWithBrackets": "What film editor was an Italian male person that [Ultimo metr\u00f2] starred",
    "questionPatternModEntities": "What film editor was a Italian male person that M3 starred",
    "questionTemplate": "What [NP_SIMPLE] was a [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [NP_SIMPLE] that [entity] [VP_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:film.editor .\n?x0 a ns:people.person .\n?x0 ns:film.actor.film/ns:film.performance.film ns:m.0yblpzc .\n?x0 ns:people.person.gender ns:m.05zppz .\n?x0 ns:people.person.nationality ns:m.03rjj\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M2 .\n?x0 P1 M3 .\n?x0 P2 M4 .\n?x0 a M0 .\n?x0 a M1\n}",
    "expectedResponse": "Tinto Brass",
    "recursionDepth": 32
  },
  {
    "questionIdx": 2512,
    "questionWithBrackets": "Did [Bill Cosby] influence an actor and influence a film editor's parent",
    "questionPatternModEntities": "Did M2 influence a actor and influence a film editor 's parent",
    "questionTemplate": "Did [entity] [VP_SIMPLE] a [NP_SIMPLE] and [VP_SIMPLE] a [NP_SIMPLE] 's [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 a ns:film.actor .\n?x1 ns:people.person.children|ns:fictional_universe.fictional_character.children|ns:organization.organization.child/ns:organization.organization_relationship.child ?x2 .\n?x2 a ns:film.editor .\nns:m.014zfs ns:influence.influence_node.influenced ?x0 .\nns:m.014zfs ns:influence.influence_node.influenced ?x1\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 a M0 .\n?x1 P0 ?x2 .\n?x2 a M1 .\nM2 P1 ?x0 .\nM2 P1 ?x1\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 32
  },
  {
    "questionIdx": 176095,
    "questionWithBrackets": "What was executive produced by [Andreas Schmid] and executive produced by a Chinese screenwriter",
    "questionPatternModEntities": "What was executive produced by M0 and executive produced by a Chinese screenwriter",
    "questionTemplate": "What was [VP_SIMPLE] by [entity] and [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [NP_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.film.executive_produced_by ?x1 .\n?x0 ns:film.film.executive_produced_by ns:m.0k4h2v .\n?x1 a ns:film.writer .\n?x1 ns:people.person.nationality ns:m.0d05w3\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P0 M0 .\n?x1 P1 M2 .\n?x1 a M1\n}",
    "expectedResponse": "The White Countess",
    "recursionDepth": 32
  },
  {
    "questionIdx": 206270,
    "questionWithBrackets": "Which male Mexican film producer that edited [Where Are Their Stories?] produced [Interview with the Earth]",
    "questionPatternModEntities": "Which male Mexican film producer that edited M1 produced M3",
    "questionTemplate": "Which [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [NP_SIMPLE] that [VP_SIMPLE] [entity] [VP_SIMPLE] [entity]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:film.producer .\n?x0 ns:film.editor.film ns:m.04_8s41 .\n?x0 ns:film.producer.film|ns:film.production_company.films ns:m.07l4_50 .\n?x0 ns:people.person.gender ns:m.05zppz .\n?x0 ns:people.person.nationality ns:m.0b90_r\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M1 .\n?x0 P1 M2 .\n?x0 P2 M3 .\n?x0 P3 M4 .\n?x0 a M0\n}",
    "expectedResponse": "Nicol\u00e1s Pereda",
    "recursionDepth": 32
  },
  {
    "questionIdx": 71474,
    "questionWithBrackets": "Was [Phoenix Health Care] founded by [Mary Robinson] and founded by [Wyeth]'s female employee",
    "questionPatternModEntities": "Was M2 founded by M3 and founded by M0 's female employee",
    "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] and [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:people.person.employment_history/ns:business.employment_tenure.company ns:m.084v5p .\n?x0 ns:people.person.gender ns:m.02zsn .\nns:m.0gst303 ns:organization.organization.founders ?x0 .\nns:m.0gst303 ns:organization.organization.founders ns:m.05577\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nM2 P2 ?x0 .\nM2 P2 M3\n}",
    "expectedResponse": "No",
    "recursionDepth": 32
  },
  {
    "questionIdx": 180889,
    "questionWithBrackets": "What was produced and executive produced by [Morgause]'s child's French actor",
    "questionPatternModEntities": "What was produced and executive produced by M1 's child 's French actor",
    "questionTemplate": "What was [VP_SIMPLE] and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.film.executive_produced_by ?x1 .\n?x0 ns:film.film.produced_by|ns:film.film.production_companies ?x1 .\n?x1 ns:film.actor.film/ns:film.performance.character ?x2 .\n?x1 ns:people.person.nationality ns:m.0f8l9c .\n?x2 ns:people.person.parents|ns:fictional_universe.fictional_character.parents|ns:organization.organization.parent/ns:organization.organization_relationship.parent ns:m.026n7n\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x1 P2 M0 .\n?x1 P3 ?x2 .\n?x2 P4 M1\n}",
    "expectedResponse": "When the Sea Rises",
    "recursionDepth": 32
  },
  {
    "questionIdx": 93037,
    "questionWithBrackets": "Was a cinematographer whose male German sibling produced [Curse of the Zodiac] [Manuel Lommel]",
    "questionPatternModEntities": "Was a cinematographer whose male German sibling produced M1 M3",
    "questionTemplate": "Was a [NP_SIMPLE] whose [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] [VP_SIMPLE] [entity] [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.producer.film|ns:film.production_company.films ns:m.064kw76 .\n?x0 ns:people.person.gender ns:m.05zppz .\n?x0 ns:people.person.nationality ns:m.0345h .\nFILTER ( ns:g.121v241k != ?x0 ) .\nns:g.121v241k a ns:film.cinematographer .\nns:g.121v241k ns:people.person.sibling_s/ns:people.sibling_relationship.sibling|ns:fictional_universe.fictional_character.siblings/ns:fictional_universe.sibling_relationship_of_fictional_characters.siblings ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P2 M2 .\nFILTER ( M3 != ?x0 ) .\nM3 P3 ?x0 .\nM3 a M4\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 32
  },
  {
    "questionIdx": 183229,
    "questionWithBrackets": "What was produced by, executive produced by, and written by a costume designer of [Mohabbatein]",
    "questionPatternModEntities": "What was produced by , executive produced by , and written by a costume designer of M0",
    "questionTemplate": "What was [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.film.executive_produced_by ?x1 .\n?x0 ns:film.film.produced_by|ns:film.film.production_companies ?x1 .\n?x0 ns:film.film.written_by ?x1 .\n?x1 ns:film.film_costumer_designer.costume_design_for_film ns:m.03dtt3\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x1 P3 M0\n}",
    "expectedResponse": "Koochie Koochie Hota Hai",
    "recursionDepth": 32
  },
  {
    "questionIdx": 73051,
    "questionWithBrackets": "Was [Puppet Master II]'s sequel produced and written by [The Other Side]'s producer and executive producer",
    "questionPatternModEntities": "Was M0 's sequel produced and written by M1 's producer and executive producer",
    "questionTemplate": "Was [entity] 's [ROLE_SIMPLE] [VP_SIMPLE] and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] and [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.film.prequel ns:m.0h72s_ .\n?x0 ns:film.film.produced_by|ns:film.film.production_companies ?x1 .\n?x0 ns:film.film.written_by ?x1 .\n?x1 ns:film.producer.films_executive_produced ns:m.03cn8vs .\n?x1 ns:film.producer.film|ns:film.production_company.films ns:m.03cn8vs\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 M0 .\n?x1 P3 M1 .\n?x1 P4 M1\n}",
    "expectedResponse": "No",
    "recursionDepth": 32
  },
  {
    "questionIdx": 201314,
    "questionWithBrackets": "Which film did a star of [The Funeral] and [N\u00e9nette et Boni] edit and executive produce",
    "questionPatternModEntities": "Which film did a star of M1 and M2 edit and executive produce",
    "questionTemplate": "Which [NP_SIMPLE] did a [ROLE_SIMPLE] of [entity] and [entity] [VP_SIMPLE] and [VP_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:film.film .\n?x0 ns:film.film.edited_by ?x1 .\n?x0 ns:film.film.executive_produced_by ?x1 .\n?x1 ns:film.actor.film/ns:film.performance.film ns:m.02rdyyz .\n?x1 ns:film.actor.film/ns:film.performance.film ns:m.02wjh2\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 a M0 .\n?x1 P2 M1 .\n?x1 P2 M2\n}",
    "expectedResponse": "Promises Written in Water",
    "recursionDepth": 32
  },
  {
    "questionIdx": 29702,
    "questionWithBrackets": "Did a child of [Jim Henson Foundation]'s founder play [Jack Pumpkinhead] and play [Talking Sandwich]",
    "questionPatternModEntities": "Did a child of M2 's founder play M0 and play M1",
    "questionTemplate": "Did a [ROLE_SIMPLE] of [entity] 's [ROLE_SIMPLE] [VP_SIMPLE] [entity] and [VP_SIMPLE] [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.actor.film/ns:film.performance.character ns:m.03m57_ .\n?x0 ns:film.actor.film/ns:film.performance.character ns:m.0sxf90n .\n?x0 ns:people.person.parents|ns:fictional_universe.fictional_character.parents|ns:organization.organization.parent/ns:organization.organization_relationship.parent ?x1 .\n?x1 ns:organization.organization_founder.organizations_founded ns:m.05y32_\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P1 ?x1 .\n?x1 P2 M2\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 32
  },
  {
    "questionIdx": 55115,
    "questionWithBrackets": "Was [Fixer Dugan] edited by and produced by a film's American star",
    "questionPatternModEntities": "Was M2 edited by and produced by a film 's American star",
    "questionTemplate": "Was [entity] [VP_SIMPLE] by and [VP_SIMPLE] by a [NP_SIMPLE] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.actor.film/ns:film.performance.film ?x1 .\n?x0 ns:people.person.nationality ns:m.09c7w0 .\n?x1 a ns:film.film .\nns:m.04649sn ns:film.film.edited_by ?x0 .\nns:m.04649sn ns:film.film.produced_by|ns:film.film.production_companies ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 ?x1 .\n?x1 a M1 .\nM2 P2 ?x0 .\nM2 P3 ?x0\n}",
    "expectedResponse": "No",
    "recursionDepth": 32
  },
  {
    "questionIdx": 204258,
    "questionWithBrackets": "Which film producer was a male Chinese screenwriter that [Jasper Johns] influenced",
    "questionPatternModEntities": "Which film producer was a male Chinese screenwriter that M2 influenced",
    "questionTemplate": "Which [NP_SIMPLE] was a [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [NP_SIMPLE] that [entity] [VP_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:film.producer .\n?x0 a ns:film.writer .\n?x0 ns:influence.influence_node.influenced_by ns:m.0gcjf .\n?x0 ns:people.person.gender ns:m.05zppz .\n?x0 ns:people.person.nationality ns:m.0d05w3\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M2 .\n?x0 P1 M3 .\n?x0 P2 M4 .\n?x0 a M0 .\n?x0 a M1\n}",
    "expectedResponse": "Ai Weiwei",
    "recursionDepth": 32
  },
  {
    "questionIdx": 237499,
    "questionWithBrackets": "Who was influenced by [The French as Seen By...]'s director and was influenced by a character",
    "questionPatternModEntities": "Who was influenced by M2 's director and was influenced by a character",
    "questionTemplate": "Who was [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] and was [VP_SIMPLE] by a [NP_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:people.person .\n?x0 ns:influence.influence_node.influenced_by ?x1 .\n?x0 ns:influence.influence_node.influenced_by ?x2 .\n?x1 a ns:fictional_universe.fictional_character .\n?x2 ns:film.director.film ns:m.05086x\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P0 ?x2 .\n?x0 a M0 .\n?x1 a M1 .\n?x2 P1 M2\n}",
    "expectedResponse": "Garret Schuelke",
    "recursionDepth": 32
  },
  {
    "questionIdx": 98005,
    "questionWithBrackets": "Was a film editor a costume designer that [Weta Workshop] employed and was founded by",
    "questionPatternModEntities": "Was a film editor a costume designer that M2 employed and was founded by",
    "questionTemplate": "Was a [NP_SIMPLE] a [NP_SIMPLE] that [entity] [VP_SIMPLE] and was [VP_SIMPLE] by",
    "sparql": "SELECT count(*) WHERE {\n?x0 a ns:film.editor .\n?x0 a ns:film.film_costumer_designer .\n?x0 ns:organization.organization_founder.organizations_founded ns:m.01cm64 .\n?x0 ns:people.person.employment_history/ns:business.employment_tenure.company ns:m.01cm64\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M2 .\n?x0 P1 M2 .\n?x0 a M0 .\n?x0 a M1\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 32
  },
  {
    "questionIdx": 148629,
    "questionWithBrackets": "What did a Spanish sibling of [Mar\u00eda del Pilar Saura] direct and [Pierre Lamoureux] direct",
    "questionPatternModEntities": "What did a Spanish sibling of M1 direct and M0 direct",
    "questionTemplate": "What did a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] [VP_SIMPLE] and [entity] [VP_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.film.directed_by ?x1 .\n?x0 ns:film.film.directed_by ns:m.0jsqn_ .\n?x1 ns:people.person.nationality ns:m.06mkj .\n?x1 ns:people.person.sibling_s/ns:people.sibling_relationship.sibling|ns:fictional_universe.fictional_character.siblings/ns:fictional_universe.sibling_relationship_of_fictional_characters.siblings ns:m.011jdm11 .\nFILTER ( ?x1 != ns:m.011jdm11 )\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P0 M0 .\n?x1 P1 M1 .\n?x1 P2 M2 .\nFILTER ( ?x1 != M1 )\n}",
    "expectedResponse": "Flamenco Hoy",
    "recursionDepth": 32
  },
  {
    "questionIdx": 55369,
    "questionWithBrackets": "Was [Four Bags Full] edited by [Jen\u00f6 Csepreghy] and directed by [L'Homme du large]'s costume designer and art director",
    "questionPatternModEntities": "Was M1 edited by M2 and directed by M0 's costume designer and art director",
    "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] and [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.film_art_director.films_art_directed ns:m.02z2c_4 .\n?x0 ns:film.film_costumer_designer.costume_design_for_film ns:m.02z2c_4 .\nns:m.0ds76_8 ns:film.film.directed_by ?x0 .\nns:m.0ds76_8 ns:film.film.edited_by ns:m.0bnnvvw\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M0 .\nM1 P2 M2 .\nM1 P3 ?x0\n}",
    "expectedResponse": "No",
    "recursionDepth": 32
  },
  {
    "questionIdx": 175668,
    "questionWithBrackets": "What was edited, produced, and directed by [Mastering Bambi]'s Dutch cinematographer",
    "questionPatternModEntities": "What was edited , produced , and directed by M1 's Dutch cinematographer",
    "questionTemplate": "What was [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.film.directed_by ?x1 .\n?x0 ns:film.film.edited_by ?x1 .\n?x0 ns:film.film.produced_by|ns:film.film.production_companies ?x1 .\n?x1 ns:film.cinematographer.film ns:m.0ghtdrf .\n?x1 ns:people.person.nationality ns:m.059j2\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x1 P3 M0 .\n?x1 P4 M1\n}",
    "expectedResponse": "Beyond Sunset and Sunrise; Mastering Bambi",
    "recursionDepth": 32
  },
  {
    "questionIdx": 140935,
    "questionWithBrackets": "What costume designer married [Marie Berry]'s sibling and married [Bruno Moynot] and [George Aguilar]",
    "questionPatternModEntities": "What costume designer married M3 's sibling and married M1 and M2",
    "questionTemplate": "What [NP_SIMPLE] [VP_SIMPLE] [entity] 's [ROLE_SIMPLE] and [VP_SIMPLE] [entity] and [entity]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:film.film_costumer_designer .\n?x0 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ?x1 .\n?x0 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ns:m.03cjgf8 .\n?x0 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ns:m.0byp8q8 .\n?x1 ns:people.person.sibling_s/ns:people.sibling_relationship.sibling|ns:fictional_universe.fictional_character.siblings/ns:fictional_universe.sibling_relationship_of_fictional_characters.siblings ns:m.0n3nnsd .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x0 != ns:m.03cjgf8 ) .\nFILTER ( ?x0 != ns:m.0byp8q8 ) .\nFILTER ( ?x1 != ns:m.0n3nnsd )\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 a M0 .\n?x1 P1 M3 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x0 != M1 ) .\nFILTER ( ?x0 != M2 ) .\nFILTER ( ?x1 != M3 )\n}",
    "expectedResponse": "Josiane Balasko",
    "recursionDepth": 32
  },
  {
    "questionIdx": 156706,
    "questionWithBrackets": "What film editor married, influenced, and was influenced by a screenwriter",
    "questionPatternModEntities": "What film editor married , influenced , and was influenced by a screenwriter",
    "questionTemplate": "What [NP_SIMPLE] [VP_SIMPLE] , [VP_SIMPLE] , and was [VP_SIMPLE] by a [NP_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:film.editor .\n?x0 ns:influence.influence_node.influenced ?x1 .\n?x0 ns:influence.influence_node.influenced_by ?x1 .\n?x0 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ?x1 .\n?x1 a ns:film.writer .\nFILTER ( ?x0 != ?x1 )\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x0 a M0 .\n?x1 a M1 .\nFILTER ( ?x0 != ?x1 )\n}",
    "expectedResponse": "Agn\u00e8s Varda",
    "recursionDepth": 32
  },
  {
    "questionIdx": 178065,
    "questionWithBrackets": "What was executive produced by an actor and edited by an employee of [Arizona State University]",
    "questionPatternModEntities": "What was executive produced by a actor and edited by a employee of M1",
    "questionTemplate": "What was [VP_SIMPLE] by a [NP_SIMPLE] and [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.film.edited_by ?x1 .\n?x0 ns:film.film.executive_produced_by ?x2 .\n?x1 ns:people.person.employment_history/ns:business.employment_tenure.company ns:m.0trv .\n?x2 a ns:film.actor\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x2 .\n?x1 a M0 .\n?x2 P2 M1\n}",
    "expectedResponse": "Lady Oscar",
    "recursionDepth": 32
  },
  {
    "questionIdx": 144731,
    "questionWithBrackets": "What did [K\u00e1tia Lund] produce and a film editor's parent's child direct",
    "questionPatternModEntities": "What did M0 produce and a film editor 's parent 's child direct",
    "questionTemplate": "What did [entity] [VP_SIMPLE] and a [NP_SIMPLE] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE] [VP_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.film.directed_by ?x1 .\n?x0 ns:film.film.produced_by|ns:film.film.production_companies ns:m.0ckgy4 .\n?x1 ns:people.person.parents|ns:fictional_universe.fictional_character.parents|ns:organization.organization.parent/ns:organization.organization_relationship.parent ?x2 .\n?x2 ns:people.person.children|ns:fictional_universe.fictional_character.children|ns:organization.organization.child/ns:organization.organization_relationship.child ?x3 .\n?x3 a ns:film.editor\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 ?x1 .\n?x1 P2 ?x2 .\n?x2 P3 ?x3 .\n?x3 a M1\n}",
    "expectedResponse": "All the Invisible Children",
    "recursionDepth": 32
  },
  {
    "questionIdx": 30114,
    "questionWithBrackets": "Did a cinematographer influence a person and influence [Mississippi Mermaid]'s costume designer",
    "questionPatternModEntities": "Did a cinematographer influence a person and influence M2 's costume designer",
    "questionTemplate": "Did a [NP_SIMPLE] [VP_SIMPLE] a [NP_SIMPLE] and [VP_SIMPLE] [entity] 's [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 a ns:film.cinematographer .\n?x0 ns:influence.influence_node.influenced ?x1 .\n?x0 ns:influence.influence_node.influenced ?x2 .\n?x1 a ns:people.person .\n?x2 ns:film.film_costumer_designer.costume_design_for_film ns:m.05kfhz\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x0 P0 ?x2 .\n?x0 a M0 .\n?x1 a M1 .\n?x2 P1 M2\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 32
  },
  {
    "questionIdx": 175507,
    "questionWithBrackets": "What was edited, directed, and written by [Grandmother Mambo]'s female art director",
    "questionPatternModEntities": "What was edited , directed , and written by M1 's female art director",
    "questionTemplate": "What was [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.film.directed_by ?x1 .\n?x0 ns:film.film.edited_by ?x1 .\n?x0 ns:film.film.written_by ?x1 .\n?x1 ns:film.film_art_director.films_art_directed ns:m.0rhnj3b .\n?x1 ns:people.person.gender ns:m.02zsn\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x1 P3 M0 .\n?x1 P4 M1\n}",
    "expectedResponse": "\u00a1Dest\u00e1palo!",
    "recursionDepth": 32
  },
  {
    "questionIdx": 91317,
    "questionWithBrackets": "Was a Swedish film director whose female sibling produced [Dr\u00f6mmen Om Maremma] [Jonas Gardell]",
    "questionPatternModEntities": "Was a Swedish film director whose female sibling produced M0 M2",
    "questionTemplate": "Was a [ADJECTIVE_SIMPLE] [NP_SIMPLE] whose [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] [VP_SIMPLE] [entity] [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.producer.film|ns:film.production_company.films ns:g.12nvp6nrv .\n?x0 ns:people.person.gender ns:m.02zsn .\nFILTER ( ns:m.0dhj5_ != ?x0 ) .\nns:m.0dhj5_ a ns:film.director .\nns:m.0dhj5_ ns:people.person.nationality ns:m.0d0vqn .\nns:m.0dhj5_ ns:people.person.sibling_s/ns:people.sibling_relationship.sibling|ns:fictional_universe.fictional_character.siblings/ns:fictional_universe.sibling_relationship_of_fictional_characters.siblings ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( M2 != ?x0 ) .\nM2 P2 ?x0 .\nM2 P3 M4 .\nM2 a M3\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 32
  },
  {
    "questionIdx": 120846,
    "questionWithBrackets": "Were [Marrying Mr. Perfect] and [Flirting in the Air] produced by a film's star, writer, and executive producer",
    "questionPatternModEntities": "Were M1 and M2 produced by a film 's star , writer , and executive producer",
    "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by a [NP_SIMPLE] 's [ROLE_SIMPLE] , [ROLE_SIMPLE] , and [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.actor.film/ns:film.performance.film ?x1 .\n?x0 ns:film.producer.films_executive_produced ?x1 .\n?x0 ns:film.writer.film ?x1 .\n?x1 a ns:film.film .\nns:m.010pfc_0 ns:film.film.produced_by|ns:film.film.production_companies ?x0 .\nns:m.0j3dcqb ns:film.film.produced_by|ns:film.film.production_companies ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x1 a M0 .\nM1 P3 ?x0 .\nM2 P3 ?x0\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 32
  },
  {
    "questionIdx": 74832,
    "questionWithBrackets": "Was [Rossana] written by and produced by an Italian film producer's sibling",
    "questionPatternModEntities": "Was M2 written by and produced by a Italian film producer 's sibling",
    "questionTemplate": "Was [entity] [VP_SIMPLE] by and [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [NP_SIMPLE] 's [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:people.person.sibling_s/ns:people.sibling_relationship.sibling|ns:fictional_universe.fictional_character.siblings/ns:fictional_universe.sibling_relationship_of_fictional_characters.siblings ?x1 .\n?x1 a ns:film.producer .\n?x1 ns:people.person.nationality ns:m.03rjj .\nFILTER ( ?x0 != ?x1 ) .\nns:m.05c29_p ns:film.film.produced_by|ns:film.film.production_companies ?x0 .\nns:m.05c29_p ns:film.film.written_by ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x1 P1 M1 .\n?x1 a M0 .\nFILTER ( ?x0 != ?x1 ) .\nM2 P2 ?x0 .\nM2 P3 ?x0\n}",
    "expectedResponse": "No",
    "recursionDepth": 32
  },
  {
    "questionIdx": 33932,
    "questionWithBrackets": "Did a film editor found [Weta Digital] and found a costume designer's employer",
    "questionPatternModEntities": "Did a film editor found M1 and found a costume designer 's employer",
    "questionTemplate": "Did a [NP_SIMPLE] [VP_SIMPLE] [entity] and [VP_SIMPLE] a [NP_SIMPLE] 's [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 a ns:film.editor .\n?x0 ns:organization.organization_founder.organizations_founded ?x1 .\n?x0 ns:organization.organization_founder.organizations_founded ns:m.01cm3c .\n?x1 ns:business.employer.employees/ns:business.employment_tenure.person ?x2 .\n?x2 a ns:film.film_costumer_designer\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x0 P0 M1 .\n?x0 a M0 .\n?x1 P1 ?x2 .\n?x2 a M2\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 32
  },
  {
    "questionIdx": 207994,
    "questionWithBrackets": "Which person married, influenced, and was influenced by a cinematographer",
    "questionPatternModEntities": "Which person married , influenced , and was influenced by a cinematographer",
    "questionTemplate": "Which [NP_SIMPLE] [VP_SIMPLE] , [VP_SIMPLE] , and was [VP_SIMPLE] by a [NP_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:people.person .\n?x0 ns:influence.influence_node.influenced ?x1 .\n?x0 ns:influence.influence_node.influenced_by ?x1 .\n?x0 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ?x1 .\n?x1 a ns:film.cinematographer .\nFILTER ( ?x0 != ?x1 )\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x0 a M0 .\n?x1 a M1 .\nFILTER ( ?x0 != ?x1 )\n}",
    "expectedResponse": "Jacques Demy",
    "recursionDepth": 32
  },
  {
    "questionIdx": 2877,
    "questionWithBrackets": "Did [Boynton Beach Club]'s female producer's child produce and direct [She-Devil]",
    "questionPatternModEntities": "Did M1 's female producer 's child produce and direct M0",
    "questionTemplate": "Did [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] 's [ROLE_SIMPLE] [VP_SIMPLE] and [VP_SIMPLE] [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.director.film ns:m.0275nqh .\n?x0 ns:film.producer.film|ns:film.production_company.films ns:m.0275nqh .\n?x0 ns:people.person.parents|ns:fictional_universe.fictional_character.parents|ns:organization.organization.parent/ns:organization.organization_relationship.parent ?x1 .\n?x1 ns:film.producer.film|ns:film.production_company.films ns:m.0fzs7k .\n?x1 ns:people.person.gender ns:m.02zsn\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 ?x1 .\n?x0 P2 M0 .\n?x1 P0 M1 .\n?x1 P3 M2\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 32
  },
  {
    "questionIdx": 193542,
    "questionWithBrackets": "Which actor was influenced by [Sleeping Dogs Lie]'s director and influenced by an actor",
    "questionPatternModEntities": "Which actor was influenced by M1 's director and influenced by a actor",
    "questionTemplate": "Which [NP_SIMPLE] was [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] and [VP_SIMPLE] by a [NP_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:film.actor .\n?x0 ns:influence.influence_node.influenced_by ?x1 .\n?x0 ns:influence.influence_node.influenced_by ?x2 .\n?x1 a ns:film.actor .\n?x2 ns:film.director.film ns:m.0gfx9j\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P0 ?x2 .\n?x0 a M0 .\n?x1 a M0 .\n?x2 P1 M1\n}",
    "expectedResponse": "Mitch Hedberg; Patton Oswalt",
    "recursionDepth": 32
  },
  {
    "questionIdx": 10586,
    "questionWithBrackets": "Did [Italy] found a country of nationality of [Hans Blom] and found [UNESCO] and [World Trade Organization]",
    "questionPatternModEntities": "Did M1 found a country of nationality of M0 and found M2 and M3",
    "questionTemplate": "Did [entity] [VP_SIMPLE] a [ROLE_SIMPLE] of [entity] and [VP_SIMPLE] [entity] and [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ^ns:people.person.nationality ns:m.03x_ncc .\nns:m.03rjj ns:organization.organization_founder.organizations_founded ?x0 .\nns:m.03rjj ns:organization.organization_founder.organizations_founded ns:m.05yg8kx .\nns:m.03rjj ns:organization.organization_founder.organizations_founded ns:m.085h1\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 ?x0 .\nM1 P1 M2 .\nM1 P1 M3\n}",
    "expectedResponse": "No",
    "recursionDepth": 32
  },
  {
    "questionIdx": 34539,
    "questionWithBrackets": "Did a film producer employ [Mickey's Revue]'s producer and employ an actor",
    "questionPatternModEntities": "Did a film producer employ M1 's producer and employ a actor",
    "questionTemplate": "Did a [NP_SIMPLE] [VP_SIMPLE] [entity] 's [ROLE_SIMPLE] and [VP_SIMPLE] a [NP_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 a ns:film.producer .\n?x0 ns:business.employer.employees/ns:business.employment_tenure.person ?x1 .\n?x0 ns:business.employer.employees/ns:business.employment_tenure.person ?x2 .\n?x1 ns:film.producer.film|ns:film.production_company.films ns:m.01pf2d .\n?x2 a ns:film.actor\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x0 P0 ?x2 .\n?x0 a M0 .\n?x1 P1 M1 .\n?x2 a M2\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 32
  },
  {
    "questionIdx": 41467,
    "questionWithBrackets": "Did an actor write [Coxblocker] and write a film's prequel",
    "questionPatternModEntities": "Did a actor write M1 and write a film 's prequel",
    "questionTemplate": "Did a [NP_SIMPLE] [VP_SIMPLE] [entity] and [VP_SIMPLE] a [NP_SIMPLE] 's [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 a ns:film.actor .\n?x0 ns:film.writer.film ?x1 .\n?x0 ns:film.writer.film ns:m.026p4jr .\n?x1 ns:film.film.sequel ?x2 .\n?x2 a ns:film.film\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x0 P0 M1 .\n?x0 a M0 .\n?x1 P1 ?x2 .\n?x2 a M2\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 32
  },
  {
    "questionIdx": 71204,
    "questionWithBrackets": "Was [Pennin Perumai] written by and directed by a production company's founder and employee",
    "questionPatternModEntities": "Was M1 written by and directed by a production company 's founder and employee",
    "questionTemplate": "Was [entity] [VP_SIMPLE] by and [VP_SIMPLE] by a [NP_SIMPLE] 's [ROLE_SIMPLE] and [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:organization.organization_founder.organizations_founded ?x1 .\n?x0 ns:people.person.employment_history/ns:business.employment_tenure.company ?x1 .\n?x1 a ns:film.production_company .\nns:m.0h_f0w9 ns:film.film.directed_by ?x0 .\nns:m.0h_f0w9 ns:film.film.written_by ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x1 a M0 .\nM1 P2 ?x0 .\nM1 P3 ?x0\n}",
    "expectedResponse": "No",
    "recursionDepth": 32
  },
  {
    "questionIdx": 14217,
    "questionWithBrackets": "Did [Martin Scorsese] and [David Lynch] marry a film director and influence a film producer",
    "questionPatternModEntities": "Did M2 and M3 marry a film director and influence a film producer",
    "questionTemplate": "Did [entity] and [entity] [VP_SIMPLE] a [NP_SIMPLE] and [VP_SIMPLE] a [NP_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 a ns:film.producer .\n?x1 a ns:film.director .\nFILTER ( ns:m.026dx != ?x1 ) .\nFILTER ( ns:m.04sry != ?x1 ) .\nns:m.026dx ns:influence.influence_node.influenced ?x0 .\nns:m.026dx ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ?x1 .\nns:m.04sry ns:influence.influence_node.influenced ?x0 .\nns:m.04sry ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ?x1\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 a M0 .\n?x1 a M1 .\nFILTER ( M2 != ?x1 ) .\nFILTER ( M3 != ?x1 ) .\nM2 P0 ?x0 .\nM2 P1 ?x1 .\nM3 P0 ?x0 .\nM3 P1 ?x1\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 32
  },
  {
    "questionIdx": 204871,
    "questionWithBrackets": "Which film was directed by a film director and was executive produced by [Jung-soo Suh]",
    "questionPatternModEntities": "Which film was directed by a film director and was executive produced by M1",
    "questionTemplate": "Which [NP_SIMPLE] was [VP_SIMPLE] by a [NP_SIMPLE] and was [VP_SIMPLE] by [entity]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:film.film .\n?x0 ns:film.film.directed_by ?x1 .\n?x0 ns:film.film.executive_produced_by ns:m.011r8s87 .\n?x1 a ns:film.director\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M1 .\n?x0 P1 ?x1 .\n?x0 a M0 .\n?x1 a M2\n}",
    "expectedResponse": "The Traffickers",
    "recursionDepth": 32
  },
  {
    "questionIdx": 34786,
    "questionWithBrackets": "Did a film producer marry a costume designer's sibling and marry [Peter Getty]",
    "questionPatternModEntities": "Did a film producer marry a costume designer 's sibling and marry M1",
    "questionTemplate": "Did a [NP_SIMPLE] [VP_SIMPLE] a [NP_SIMPLE] 's [ROLE_SIMPLE] and [VP_SIMPLE] [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 a ns:film.producer .\n?x0 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ?x1 .\n?x0 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ns:m.0qjc774 .\n?x1 ns:people.person.sibling_s/ns:people.sibling_relationship.sibling|ns:fictional_universe.fictional_character.siblings/ns:fictional_universe.sibling_relationship_of_fictional_characters.siblings ?x2 .\n?x2 a ns:film.film_costumer_designer .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x0 != ns:m.0qjc774 ) .\nFILTER ( ?x1 != ?x2 )\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x0 P0 M1 .\n?x0 a M0 .\n?x1 P1 ?x2 .\n?x2 a M2 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x0 != M1 ) .\nFILTER ( ?x1 != ?x2 )\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 32
  },
  {
    "questionIdx": 59638,
    "questionWithBrackets": "Was [Infernal Affairs] directed by [Alan Mak] and directed by [Basic Pictures]'s Chinese founder",
    "questionPatternModEntities": "Was M2 directed by M3 and directed by M0 's Chinese founder",
    "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] and [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:organization.organization_founder.organizations_founded ns:m.02rv39k .\n?x0 ns:people.person.nationality ns:m.0d05w3 .\nns:m.0233bn ns:film.film.directed_by ?x0 .\nns:m.0233bn ns:film.film.directed_by ns:m.02vknxw\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nM2 P2 ?x0 .\nM2 P2 M3\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 32
  },
  {
    "questionIdx": 225012,
    "questionWithBrackets": "Who was a British cinematographer that edited and directed [Poised]",
    "questionPatternModEntities": "Who was a British cinematographer that edited and directed M2",
    "questionTemplate": "Who was a [ADJECTIVE_SIMPLE] [NP_SIMPLE] that [VP_SIMPLE] and [VP_SIMPLE] [entity]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:film.cinematographer .\n?x0 a ns:people.person .\n?x0 ns:film.director.film ns:m.0rh893d .\n?x0 ns:film.editor.film ns:m.0rh893d .\n?x0 ns:people.person.nationality ns:m.07ssc\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M2 .\n?x0 P1 M3 .\n?x0 P2 M2 .\n?x0 a M0 .\n?x0 a M1\n}",
    "expectedResponse": "Dryden Goodwin",
    "recursionDepth": 32
  },
  {
    "questionIdx": 43227,
    "questionWithBrackets": "Was [2 Guns] distributed by [Batteries Not Included]'s producer and distributor and distributed by [TriStar Pictures]",
    "questionPatternModEntities": "Was M1 distributed by M0 's producer and distributor and distributed by M2",
    "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] and [ROLE_SIMPLE] and [VP_SIMPLE] by [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.film_distributor.films_distributed/ns:film.film_film_distributor_relationship.film ns:m.09zn92 .\n?x0 ns:film.producer.film|ns:film.production_company.films ns:m.09zn92 .\nns:m.0nb2hgq ns:film.film.distributors/ns:film.film_film_distributor_relationship.distributor ?x0 .\nns:m.0nb2hgq ns:film.film.distributors/ns:film.film_film_distributor_relationship.distributor ns:m.030_1m\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M0 .\nM1 P2 ?x0 .\nM1 P2 M2\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 32
  },
  {
    "questionIdx": 184437,
    "questionWithBrackets": "What was written by [Jason Richman] and executive produced by [Three Men and a Baby]'s male producer",
    "questionPatternModEntities": "What was written by M0 and executive produced by M1 's male producer",
    "questionTemplate": "What was [VP_SIMPLE] by [entity] and [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.film.executive_produced_by ?x1 .\n?x0 ns:film.film.written_by ns:m.0jtyny .\n?x1 ns:film.producer.film|ns:film.production_company.films ns:m.02ttcy .\n?x1 ns:people.person.gender ns:m.05zppz\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 M0 .\n?x1 P2 M1 .\n?x1 P3 M2\n}",
    "expectedResponse": "Swing Vote",
    "recursionDepth": 32
  },
  {
    "questionIdx": 150070,
    "questionWithBrackets": "What did a film's cinematographer and star found and [Albert Yeung] found",
    "questionPatternModEntities": "What did a film 's cinematographer and star found and M0 found",
    "questionTemplate": "What did a [NP_SIMPLE] 's [ROLE_SIMPLE] and [ROLE_SIMPLE] [VP_SIMPLE] and [entity] [VP_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:organization.organization.founders ?x1 .\n?x0 ns:organization.organization.founders ns:m.06f72t .\n?x1 ns:film.actor.film/ns:film.performance.film ?x2 .\n?x1 ns:film.cinematographer.film ?x2 .\n?x2 a ns:film.film\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P0 M0 .\n?x1 P1 ?x2 .\n?x1 P2 ?x2 .\n?x2 a M1\n}",
    "expectedResponse": "JCE Movies Limited",
    "recursionDepth": 33
  },
  {
    "questionIdx": 233588,
    "questionWithBrackets": "Who was an actor employed by [Vitagraph Studios] and employed by a film producer",
    "questionPatternModEntities": "Who was a actor employed by M2 and employed by a film producer",
    "questionTemplate": "Who was a [NP_SIMPLE] [VP_SIMPLE] by [entity] and [VP_SIMPLE] by a [NP_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:film.actor .\n?x0 a ns:people.person .\n?x0 ns:people.person.employment_history/ns:business.employment_tenure.company ?x1 .\n?x0 ns:people.person.employment_history/ns:business.employment_tenure.company ns:m.01wwf0 .\n?x1 a ns:film.producer\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P0 M2 .\n?x0 a M0 .\n?x0 a M1 .\n?x1 a M3\n}",
    "expectedResponse": "Rex Ingram",
    "recursionDepth": 33
  },
  {
    "questionIdx": 63851,
    "questionWithBrackets": "Was [Laurence Anyways] directed by and edited by [The Wizard of Speed and Time]'s director, producer, and costume designer",
    "questionPatternModEntities": "Was M1 directed by and edited by M0 's director , producer , and costume designer",
    "questionTemplate": "Was [entity] [VP_SIMPLE] by and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] , [ROLE_SIMPLE] , and [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.director.film ns:m.083y0 .\n?x0 ns:film.film_costumer_designer.costume_design_for_film ns:m.083y0 .\n?x0 ns:film.producer.film|ns:film.production_company.films ns:m.083y0 .\nns:m.0jkypf1 ns:film.film.directed_by ?x0 .\nns:m.0jkypf1 ns:film.film.edited_by ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M0 .\n?x0 P2 M0 .\nM1 P3 ?x0 .\nM1 P4 ?x0\n}",
    "expectedResponse": "No",
    "recursionDepth": 33
  },
  {
    "questionIdx": 157553,
    "questionWithBrackets": "What film producer employed an art director and was founded by [Roy O. Disney] and [Walt Disney]",
    "questionPatternModEntities": "What film producer employed a art director and was founded by M1 and M2",
    "questionTemplate": "What [NP_SIMPLE] [VP_SIMPLE] a [NP_SIMPLE] and was [VP_SIMPLE] by [entity] and [entity]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:film.producer .\n?x0 ns:business.employer.employees/ns:business.employment_tenure.person ?x1 .\n?x0 ns:organization.organization.founders ns:m.015yg9 .\n?x0 ns:organization.organization.founders ns:m.081nh .\n?x1 a ns:film.film_art_director\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P1 ?x1 .\n?x0 a M0 .\n?x1 a M3\n}",
    "expectedResponse": "Walt Disney Animation Studios",
    "recursionDepth": 33
  },
  {
    "questionIdx": 68087,
    "questionWithBrackets": "Was [Mont Pelerin Society] a company whose founder married [Helene Bitterlich] and influenced [Nassim Nicholas Taleb]",
    "questionPatternModEntities": "Was M2 a company whose founder married M1 and influenced M0",
    "questionTemplate": "Was [entity] a [NP_SIMPLE] whose [ROLE_SIMPLE] [VP_SIMPLE] [entity] and [VP_SIMPLE] [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:influence.influence_node.influenced ns:m.045dtq .\n?x0 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ns:m.010hw6vl .\nFILTER ( ?x0 != ns:m.010hw6vl ) .\nns:m.02vf9y a ns:business.employer .\nns:m.02vf9y ns:organization.organization.founders ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M1 ) .\nM2 P2 ?x0 .\nM2 a M3\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 33
  },
  {
    "questionIdx": 28166,
    "questionWithBrackets": "Did a Japanese screenwriter influence a person and marry [Matsuko Morita]",
    "questionPatternModEntities": "Did a Japanese screenwriter influence a person and marry M2",
    "questionTemplate": "Did a [ADJECTIVE_SIMPLE] [NP_SIMPLE] [VP_SIMPLE] a [NP_SIMPLE] and [VP_SIMPLE] [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 a ns:film.writer .\n?x0 ns:influence.influence_node.influenced ?x1 .\n?x0 ns:people.person.nationality ns:m.03_3d .\n?x0 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ns:m.0m2m8jx .\n?x1 a ns:people.person .\nFILTER ( ?x0 != ns:m.0m2m8jx )\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x0 P1 M1 .\n?x0 P2 M2 .\n?x0 a M0 .\n?x1 a M3 .\nFILTER ( ?x0 != M2 )\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 33
  },
  {
    "questionIdx": 33534,
    "questionWithBrackets": "Did a film distributor that a producer of [Over the Hills] and [Where's Elmer?] founded distribute [Blood in the Water]",
    "questionPatternModEntities": "Did a film distributor that a producer of M2 and M3 founded distribute M1",
    "questionTemplate": "Did a [NP_SIMPLE] that a [ROLE_SIMPLE] of [entity] and [entity] [VP_SIMPLE] [VP_SIMPLE] [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 a ns:film.film_distributor .\n?x0 ns:film.film_distributor.films_distributed/ns:film.film_film_distributor_relationship.film ns:m.0c407c0 .\n?x0 ns:organization.organization.founders ?x1 .\n?x1 ns:film.producer.film|ns:film.production_company.films ns:m.0b6scr6 .\n?x1 ns:film.producer.film|ns:film.production_company.films ns:m.0hy_zqq\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x0 P1 M1 .\n?x0 a M0 .\n?x1 P2 M2 .\n?x1 P2 M3\n}",
    "expectedResponse": "No",
    "recursionDepth": 33
  },
  {
    "questionIdx": 151482,
    "questionWithBrackets": "What did an art director produce and [Mr W\u00fcrfel]'s director and writer edit",
    "questionPatternModEntities": "What did a art director produce and M1 's director and writer edit",
    "questionTemplate": "What did a [NP_SIMPLE] [VP_SIMPLE] and [entity] 's [ROLE_SIMPLE] and [ROLE_SIMPLE] [VP_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.film.edited_by ?x1 .\n?x0 ns:film.film.produced_by|ns:film.film.production_companies ?x2 .\n?x1 ns:film.director.film ns:m.0fq6l88 .\n?x1 ns:film.writer.film ns:m.0fq6l88 .\n?x2 a ns:film.film_art_director\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x2 .\n?x1 a M0 .\n?x2 P2 M1 .\n?x2 P3 M1\n}",
    "expectedResponse": "Room 69",
    "recursionDepth": 33
  },
  {
    "questionIdx": 93563,
    "questionWithBrackets": "Was a company that [Presidential Reunion]'s executive producer founded and was employed by [Funny or Die]",
    "questionPatternModEntities": "Was a company that M0 's executive producer founded and was employed by M1",
    "questionTemplate": "Was a [NP_SIMPLE] that [entity] 's [ROLE_SIMPLE] [VP_SIMPLE] and was [VP_SIMPLE] by [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.producer.films_executive_produced ns:m.0gmdpnm .\nns:m.02qp3m_ a ns:business.employer .\nns:m.02qp3m_ ns:business.employer.employees/ns:business.employment_tenure.person ?x0 .\nns:m.02qp3m_ ns:organization.organization.founders ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 ?x0 .\nM1 P2 ?x0 .\nM1 a M2\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 33
  },
  {
    "questionIdx": 142906,
    "questionWithBrackets": "What did [Davis Entertainment]'s founder and employee direct and a company produce",
    "questionPatternModEntities": "What did M1 's founder and employee direct and a company produce",
    "questionTemplate": "What did [entity] 's [ROLE_SIMPLE] and [ROLE_SIMPLE] [VP_SIMPLE] and a [NP_SIMPLE] [VP_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.film.directed_by ?x1 .\n?x0 ns:film.film.produced_by|ns:film.film.production_companies ?x2 .\n?x1 ns:organization.organization_founder.organizations_founded ns:m.05nn2c .\n?x1 ns:people.person.employment_history/ns:business.employment_tenure.company ns:m.05nn2c .\n?x2 a ns:business.employer\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x2 .\n?x1 a M0 .\n?x2 P2 M1 .\n?x2 P3 M1\n}",
    "expectedResponse": "Shady Talez",
    "recursionDepth": 33
  },
  {
    "questionIdx": 23314,
    "questionWithBrackets": "Did [Tom Palumbo] marry [Anne St. Marie] and marry a female sibling of [Lady Jane Grey]",
    "questionPatternModEntities": "Did M2 marry M3 and marry a female sibling of M0",
    "questionTemplate": "Did [entity] [VP_SIMPLE] [entity] and [VP_SIMPLE] a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:people.person.gender ns:m.02zsn .\n?x0 ns:people.person.sibling_s/ns:people.sibling_relationship.sibling|ns:fictional_universe.fictional_character.siblings/ns:fictional_universe.sibling_relationship_of_fictional_characters.siblings ns:m.0b_58l .\nFILTER ( ?x0 != ns:m.0b_58l ) .\nFILTER ( ns:m.025vbkj != ?x0 ) .\nFILTER ( ns:m.025vbkj != ns:m.0_0kcb7 ) .\nns:m.025vbkj ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ?x0 .\nns:m.025vbkj ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ns:m.0_0kcb7\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( M2 != ?x0 ) .\nFILTER ( M2 != M3 ) .\nM2 P2 ?x0 .\nM2 P2 M3\n}",
    "expectedResponse": "No",
    "recursionDepth": 33
  },
  {
    "questionIdx": 215982,
    "questionWithBrackets": "Who did a film producer marry, [Virginia Nicolson] marry, and [G. K. Chesterton] influence",
    "questionPatternModEntities": "Who did a film producer marry , M2 marry , and M1 influence",
    "questionTemplate": "Who did a [NP_SIMPLE] [VP_SIMPLE] , [entity] [VP_SIMPLE] , and [entity] [VP_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:people.person .\n?x0 ns:influence.influence_node.influenced_by ns:m.037jz .\n?x0 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ?x1 .\n?x0 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ns:m.0jz8kp .\n?x1 a ns:film.producer .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x0 != ns:m.0jz8kp )\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M1 .\n?x0 P1 ?x1 .\n?x0 P1 M2 .\n?x0 a M0 .\n?x1 a M3 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x0 != M2 )\n}",
    "expectedResponse": "Orson Welles",
    "recursionDepth": 33
  },
  {
    "questionIdx": 1338,
    "questionWithBrackets": "Did [Andy Warhol], [Talitha Getty], [Christian Dior], [Henri Matisse], and [Coco Chanel] influence [America's Best Comics]'s founder and employee",
    "questionPatternModEntities": "Did M1 , M2 , M3 , M4 , and M5 influence M0 's founder and employee",
    "questionTemplate": "Did [entity] , [entity] , [entity] , [entity] , and [entity] [VP_SIMPLE] [entity] 's [ROLE_SIMPLE] and [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:organization.organization_founder.organizations_founded ns:m.08fyv6 .\n?x0 ns:people.person.employment_history/ns:business.employment_tenure.company ns:m.08fyv6 .\nns:m.012t9m ns:influence.influence_node.influenced ?x0 .\nns:m.037g0 ns:influence.influence_node.influenced ?x0 .\nns:m.0dxf99 ns:influence.influence_node.influenced ?x0 .\nns:m.0gct_ ns:influence.influence_node.influenced ?x0 .\nns:m.0kc6 ns:influence.influence_node.influenced ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M0 .\nM1 P2 ?x0 .\nM2 P2 ?x0 .\nM3 P2 ?x0 .\nM4 P2 ?x0 .\nM5 P2 ?x0\n}",
    "expectedResponse": "No",
    "recursionDepth": 33
  },
  {
    "questionIdx": 14201,
    "questionWithBrackets": "Did [Martin Lawrence], [Dewey 'Pigmeat' Markham], [Bill Hicks], [Steve Martin], and [Eddie Murphy] influence [Jakob the Liar]'s star and executive producer",
    "questionPatternModEntities": "Did M1 , M2 , M3 , M4 , and M5 influence M0 's star and executive producer",
    "questionTemplate": "Did [entity] , [entity] , [entity] , [entity] , and [entity] [VP_SIMPLE] [entity] 's [ROLE_SIMPLE] and [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.actor.film/ns:film.performance.film ns:m.09mjxy .\n?x0 ns:film.producer.films_executive_produced ns:m.09mjxy .\nns:m.01jpwfr ns:influence.influence_node.influenced ?x0 .\nns:m.01wp_jm ns:influence.influence_node.influenced ?x0 .\nns:m.02633g ns:influence.influence_node.influenced ?x0 .\nns:m.0f7hc ns:influence.influence_node.influenced ?x0 .\nns:m.0p_47 ns:influence.influence_node.influenced ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M0 .\nM1 P2 ?x0 .\nM2 P2 ?x0 .\nM3 P2 ?x0 .\nM4 P2 ?x0 .\nM5 P2 ?x0\n}",
    "expectedResponse": "No",
    "recursionDepth": 33
  },
  {
    "questionIdx": 15753,
    "questionWithBrackets": "Did [New York: A Documentary Film]'s director's sibling influence [Daryl F. Mallett] and marry a screenwriter",
    "questionPatternModEntities": "Did M1 's director 's sibling influence M0 and marry a screenwriter",
    "questionTemplate": "Did [entity] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE] [VP_SIMPLE] [entity] and [VP_SIMPLE] a [NP_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:influence.influence_node.influenced ns:m.02xlgt .\n?x0 ns:people.person.sibling_s/ns:people.sibling_relationship.sibling|ns:fictional_universe.fictional_character.siblings/ns:fictional_universe.sibling_relationship_of_fictional_characters.siblings ?x1 .\n?x0 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ?x2 .\n?x1 ns:film.director.film ns:m.02vxlc .\n?x2 a ns:film.writer .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x0 != ?x2 )\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x0 P1 M0 .\n?x0 P2 ?x2 .\n?x1 P3 M1 .\n?x2 a M2 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x0 != ?x2 )\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 33
  },
  {
    "questionIdx": 81664,
    "questionWithBrackets": "Was [The Matrix Revolutions]'s prequel written and executive produced by [Ca-bau-kan]'s female producer",
    "questionPatternModEntities": "Was M0 's prequel written and executive produced by M1 's female producer",
    "questionTemplate": "Was [entity] 's [ROLE_SIMPLE] [VP_SIMPLE] and [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.film.executive_produced_by ?x1 .\n?x0 ns:film.film.sequel ns:m.01dyvs .\n?x0 ns:film.film.written_by ?x1 .\n?x1 ns:film.producer.film|ns:film.production_company.films ns:m.02q0s1h .\n?x1 ns:people.person.gender ns:m.02zsn\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x1 P3 M1 .\n?x1 P4 M2\n}",
    "expectedResponse": "No",
    "recursionDepth": 33
  },
  {
    "questionIdx": 147386,
    "questionWithBrackets": "What did [The Memories of Dogs]'s Italian producer produce, edit, and write",
    "questionPatternModEntities": "What did M1 's Italian producer produce , edit , and write",
    "questionTemplate": "What did [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.film.edited_by ?x1 .\n?x0 ns:film.film.produced_by|ns:film.film.production_companies ?x1 .\n?x0 ns:film.film.written_by ?x1 .\n?x1 ns:film.producer.film|ns:film.production_company.films ns:m.08625_4 .\n?x1 ns:people.person.nationality ns:m.03rjj\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x1 P3 M0 .\n?x1 P4 M1\n}",
    "expectedResponse": "About Killing The Pig; Tengo la posizione",
    "recursionDepth": 33
  },
  {
    "questionIdx": 15571,
    "questionWithBrackets": "Did [Nancy Brilli] marry a screenwriter and marry an Italian actor",
    "questionPatternModEntities": "Did M3 marry a screenwriter and marry a Italian actor",
    "questionTemplate": "Did [entity] [VP_SIMPLE] a [NP_SIMPLE] and [VP_SIMPLE] a [ADJECTIVE_SIMPLE] [NP_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 a ns:film.writer .\n?x1 a ns:film.actor .\n?x1 ns:people.person.nationality ns:m.03rjj .\nFILTER ( ns:m.0c1kxw0 != ?x0 ) .\nFILTER ( ns:m.0c1kxw0 != ?x1 ) .\nns:m.0c1kxw0 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ?x0 .\nns:m.0c1kxw0 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ?x1\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 a M0 .\n?x1 P0 M2 .\n?x1 a M1 .\nFILTER ( M3 != ?x0 ) .\nFILTER ( M3 != ?x1 ) .\nM3 P1 ?x0 .\nM3 P1 ?x1\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 33
  },
  {
    "questionIdx": 156772,
    "questionWithBrackets": "What film editor that [She Killed in Ecstasy] and [Killer Barbys] were written by was a Spanish person",
    "questionPatternModEntities": "What film editor that M2 and M3 were written by was a Spanish person",
    "questionTemplate": "What [NP_SIMPLE] that [entity] and [entity] were [VP_SIMPLE] by was a [ADJECTIVE_SIMPLE] [NP_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:film.editor .\n?x0 a ns:people.person .\n?x0 ns:film.writer.film ns:m.02q0rsk .\n?x0 ns:film.writer.film ns:m.04j289y .\n?x0 ns:people.person.nationality ns:m.06mkj\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M2 .\n?x0 P0 M3 .\n?x0 P1 M4 .\n?x0 a M0 .\n?x0 a M1\n}",
    "expectedResponse": "Jesu\u0301s Franco",
    "recursionDepth": 33
  },
  {
    "questionIdx": 1151,
    "questionWithBrackets": "Did [American Red Cross], [University of North Texas], [Juggle], [Pixelular Interactive], and [Digital-Rebirth] employ [Steamboat Willie]'s producer and star",
    "questionPatternModEntities": "Did M1 , M2 , M3 , M4 , and M5 employ M0 's producer and star",
    "questionTemplate": "Did [entity] , [entity] , [entity] , [entity] , and [entity] [VP_SIMPLE] [entity] 's [ROLE_SIMPLE] and [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.actor.film/ns:film.performance.film ns:m.07bp0 .\n?x0 ns:film.producer.film|ns:film.production_company.films ns:m.07bp0 .\nns:m.04fw01b ns:business.employer.employees/ns:business.employment_tenure.person ?x0 .\nns:m.04vxxkw ns:business.employer.employees/ns:business.employment_tenure.person ?x0 .\nns:m.04vxxl2 ns:business.employer.employees/ns:business.employment_tenure.person ?x0 .\nns:m.05zjtn4 ns:business.employer.employees/ns:business.employment_tenure.person ?x0 .\nns:m.0by8vb ns:business.employer.employees/ns:business.employment_tenure.person ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M0 .\nM1 P2 ?x0 .\nM2 P2 ?x0 .\nM3 P2 ?x0 .\nM4 P2 ?x0 .\nM5 P2 ?x0\n}",
    "expectedResponse": "No",
    "recursionDepth": 33
  },
  {
    "questionIdx": 66634,
    "questionWithBrackets": "Was [Massimo Marone] a parent, sibling, and spouse of a spouse and sibling of [Sharon Newman]",
    "questionPatternModEntities": "Was M1 a parent , sibling , and spouse of a spouse and sibling of M0",
    "questionTemplate": "Was [entity] a [ROLE_SIMPLE] , [ROLE_SIMPLE] , and [ROLE_SIMPLE] of a [ROLE_SIMPLE] and [ROLE_SIMPLE] of [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:people.person.sibling_s/ns:people.sibling_relationship.sibling|ns:fictional_universe.fictional_character.siblings/ns:fictional_universe.sibling_relationship_of_fictional_characters.siblings ns:m.0f22zn .\n?x0 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ns:m.0f22zn .\nFILTER ( ?x0 != ns:m.0f22zn ) .\nFILTER ( ?x0 != ns:m.0f22zn ) .\nFILTER ( ns:m.0dywnh != ?x0 ) .\nFILTER ( ns:m.0dywnh != ?x0 ) .\nns:m.0dywnh ns:people.person.children|ns:fictional_universe.fictional_character.children|ns:organization.organization.child/ns:organization.organization_relationship.child ?x0 .\nns:m.0dywnh ns:people.person.sibling_s/ns:people.sibling_relationship.sibling|ns:fictional_universe.fictional_character.siblings/ns:fictional_universe.sibling_relationship_of_fictional_characters.siblings ?x0 .\nns:m.0dywnh ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M0 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x0 != M0 ) .\nFILTER ( M1 != ?x0 ) .\nFILTER ( M1 != ?x0 ) .\nM1 P0 ?x0 .\nM1 P1 ?x0 .\nM1 P2 ?x0\n}",
    "expectedResponse": "No",
    "recursionDepth": 33
  },
  {
    "questionIdx": 140476,
    "questionWithBrackets": "What company that distributed [Danielle Steel's Kaleidoscope] and distributed [Crash Course] employed [Garrick Utley]",
    "questionPatternModEntities": "What company that distributed M2 and distributed M3 employed M1",
    "questionTemplate": "What [NP_SIMPLE] that [VP_SIMPLE] [entity] and [VP_SIMPLE] [entity] [VP_SIMPLE] [entity]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:business.employer .\n?x0 ns:business.employer.employees/ns:business.employment_tenure.person ns:m.05y6ww .\n?x0 ns:film.film_distributor.films_distributed/ns:film.film_film_distributor_relationship.film ns:m.02rd2vg .\n?x0 ns:film.film_distributor.films_distributed/ns:film.film_film_distributor_relationship.film ns:m.0crt42p\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M1 .\n?x0 P1 M2 .\n?x0 P1 M3 .\n?x0 a M0\n}",
    "expectedResponse": "NBC",
    "recursionDepth": 33
  },
  {
    "questionIdx": 80945,
    "questionWithBrackets": "Was [The Green Hornet] executive produced by [George W. Trendle Jr.] and executive produced by a Canadian screenwriter",
    "questionPatternModEntities": "Was M2 executive produced by M3 and executive produced by a Canadian screenwriter",
    "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] and [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [NP_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 a ns:film.writer .\n?x0 ns:people.person.nationality ns:m.0d060g .\nns:m.07k8rt4 ns:film.film.executive_produced_by ?x0 .\nns:m.07k8rt4 ns:film.film.executive_produced_by ns:m.083hl7l\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M1 .\n?x0 a M0 .\nM2 P1 ?x0 .\nM2 P1 M3\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 33
  },
  {
    "questionIdx": 2604,
    "questionWithBrackets": "Did [Black Mambas F.C.] employ a character and employ a Dutch person",
    "questionPatternModEntities": "Did M3 employ a character and employ a Dutch person",
    "questionTemplate": "Did [entity] [VP_SIMPLE] a [NP_SIMPLE] and [VP_SIMPLE] a [ADJECTIVE_SIMPLE] [NP_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 a ns:fictional_universe.fictional_character .\n?x1 a ns:people.person .\n?x1 ns:people.person.nationality ns:m.059j2 .\nns:m.0crgkxr ns:business.employer.employees/ns:business.employment_tenure.person ?x0 .\nns:m.0crgkxr ns:business.employer.employees/ns:business.employment_tenure.person ?x1\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 a M0 .\n?x1 P0 M2 .\n?x1 a M1 .\nM3 P1 ?x0 .\nM3 P1 ?x1\n}",
    "expectedResponse": "No",
    "recursionDepth": 33
  },
  {
    "questionIdx": 208645,
    "questionWithBrackets": "Which person was employed by [Kansas City Film Ad Company] and founded a company's child",
    "questionPatternModEntities": "Which person was employed by M1 and founded a company 's child",
    "questionTemplate": "Which [NP_SIMPLE] was [VP_SIMPLE] by [entity] and [VP_SIMPLE] a [NP_SIMPLE] 's [ROLE_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:people.person .\n?x0 ns:organization.organization_founder.organizations_founded ?x1 .\n?x0 ns:people.person.employment_history/ns:business.employment_tenure.company ns:m.0gy7412 .\n?x1 ns:people.person.parents|ns:fictional_universe.fictional_character.parents|ns:organization.organization.parent/ns:organization.organization_relationship.parent ?x2 .\n?x2 a ns:business.employer\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M1 .\n?x0 P1 ?x1 .\n?x0 a M0 .\n?x1 P2 ?x2 .\n?x2 a M2\n}",
    "expectedResponse": "Walt Disney",
    "recursionDepth": 33
  },
  {
    "questionIdx": 82193,
    "questionWithBrackets": "Was [The Proposal] directed by [Anne Fletcher] and executive produced by [Birdee Pruitt]'s female actor",
    "questionPatternModEntities": "Was M2 directed by M3 and executive produced by M0 's female actor",
    "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] and [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.actor.film/ns:film.performance.character ns:m.0bj9kwg .\n?x0 ns:people.person.gender ns:m.02zsn .\nns:m.0421v9q ns:film.film.directed_by ns:m.0f9p8x .\nns:m.0421v9q ns:film.film.executive_produced_by ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nM2 P2 ?x0 .\nM2 P3 M3\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 33
  },
  {
    "questionIdx": 39496,
    "questionWithBrackets": "Did a screenwriter's spouse found [A Mighty Heart]'s producer and found [World Film Company]",
    "questionPatternModEntities": "Did a screenwriter 's spouse found M1 's producer and found M0",
    "questionTemplate": "Did a [NP_SIMPLE] 's [ROLE_SIMPLE] [VP_SIMPLE] [entity] 's [ROLE_SIMPLE] and [VP_SIMPLE] [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:organization.organization_founder.organizations_founded ?x1 .\n?x0 ns:organization.organization_founder.organizations_founded ns:m.0hzplml .\n?x0 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ?x2 .\n?x1 ns:film.producer.film|ns:film.production_company.films ns:m.0fgm_l .\n?x2 a ns:film.writer .\nFILTER ( ?x0 != ?x2 )\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x0 P0 M0 .\n?x0 P1 ?x2 .\n?x1 P2 M1 .\n?x2 a M2 .\nFILTER ( ?x0 != ?x2 )\n}",
    "expectedResponse": "No",
    "recursionDepth": 33
  },
  {
    "questionIdx": 217457,
    "questionWithBrackets": "Who founded [Disneynature] and founded a Canadian actor's employer",
    "questionPatternModEntities": "Who founded M1 and founded a Canadian actor 's employer",
    "questionTemplate": "Who [VP_SIMPLE] [entity] and [VP_SIMPLE] a [ADJECTIVE_SIMPLE] [NP_SIMPLE] 's [ROLE_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:people.person .\n?x0 ns:organization.organization_founder.organizations_founded ?x1 .\n?x0 ns:organization.organization_founder.organizations_founded ns:m.0416ycv .\n?x1 ns:business.employer.employees/ns:business.employment_tenure.person ?x2 .\n?x2 a ns:film.actor .\n?x2 ns:people.person.nationality ns:m.0d060g\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P0 M1 .\n?x0 a M0 .\n?x1 P1 ?x2 .\n?x2 P2 M3 .\n?x2 a M2\n}",
    "expectedResponse": "Walt Disney",
    "recursionDepth": 33
  },
  {
    "questionIdx": 53555,
    "questionWithBrackets": "Was [Edward C Forst] a person's Spanish German sibling's female sibling",
    "questionPatternModEntities": "Was M3 a person 's Spanish German sibling 's female sibling",
    "questionTemplate": "Was [entity] a [NP_SIMPLE] 's [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:people.person.nationality ns:m.0345h .\n?x0 ns:people.person.nationality ns:m.06mkj .\n?x0 ns:people.person.sibling_s/ns:people.sibling_relationship.sibling|ns:fictional_universe.fictional_character.siblings/ns:fictional_universe.sibling_relationship_of_fictional_characters.siblings ?x1 .\n?x1 a ns:people.person .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ns:m.03ww471 != ?x0 ) .\nns:m.03ww471 ns:people.person.gender ns:m.02zsn .\nns:m.03ww471 ns:people.person.sibling_s/ns:people.sibling_relationship.sibling|ns:fictional_universe.fictional_character.siblings/ns:fictional_universe.sibling_relationship_of_fictional_characters.siblings ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x0 P1 M0 .\n?x0 P1 M1 .\n?x1 a M2 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( M3 != ?x0 ) .\nM3 P0 ?x0 .\nM3 P2 M4\n}",
    "expectedResponse": "No",
    "recursionDepth": 33
  },
  {
    "questionIdx": 146048,
    "questionWithBrackets": "What did [Rhapsody in August]'s producer's parent direct, produce, and executive produce",
    "questionPatternModEntities": "What did M0 's producer 's parent direct , produce , and executive produce",
    "questionTemplate": "What did [entity] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE] [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.film.directed_by ?x1 .\n?x0 ns:film.film.executive_produced_by ?x1 .\n?x0 ns:film.film.produced_by|ns:film.film.production_companies ?x1 .\n?x1 ns:people.person.children|ns:fictional_universe.fictional_character.children|ns:organization.organization.child/ns:organization.organization_relationship.child ?x2 .\n?x2 ns:film.producer.film|ns:film.production_company.films ns:m.07g36f\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x1 P3 ?x2 .\n?x2 P4 M0\n}",
    "expectedResponse": "Kagemusha",
    "recursionDepth": 33
  },
  {
    "questionIdx": 142818,
    "questionWithBrackets": "What did [Damjan Kozole] and [Andy Bausch] write and [How Harry Became a Tree]'s art director's sibling direct",
    "questionPatternModEntities": "What did M0 and M1 write and M2 's art director 's sibling direct",
    "questionTemplate": "What did [entity] and [entity] [VP_SIMPLE] and [entity] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE] [VP_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.film.directed_by ?x1 .\n?x0 ns:film.film.written_by ns:m.038wxz .\n?x0 ns:film.film.written_by ns:m.05234yc .\n?x1 ns:people.person.sibling_s/ns:people.sibling_relationship.sibling|ns:fictional_universe.fictional_character.siblings/ns:fictional_universe.sibling_relationship_of_fictional_characters.siblings ?x2 .\n?x2 ns:film.film_art_director.films_art_directed ns:m.0gkrryz .\nFILTER ( ?x1 != ?x2 )\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P1 ?x1 .\n?x1 P2 ?x2 .\n?x2 P3 M2 .\nFILTER ( ?x1 != ?x2 )\n}",
    "expectedResponse": "Visions of Europe",
    "recursionDepth": 33
  },
  {
    "questionIdx": 116430,
    "questionWithBrackets": "Were [Eraserhead] and [The 3 Rs] edited by an art director that a cinematographer was influenced by",
    "questionPatternModEntities": "Were M2 and M3 edited by a art director that a cinematographer was influenced by",
    "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by a [NP_SIMPLE] that a [NP_SIMPLE] was [VP_SIMPLE] by",
    "sparql": "SELECT count(*) WHERE {\n?x0 a ns:film.film_art_director .\n?x0 ns:influence.influence_node.influenced ?x1 .\n?x1 a ns:film.cinematographer .\nns:m.027jhb ns:film.film.edited_by ?x0 .\nns:m.0px9295 ns:film.film.edited_by ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x0 a M0 .\n?x1 a M1 .\nM2 P1 ?x0 .\nM3 P1 ?x0\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 33
  },
  {
    "questionIdx": 171003,
    "questionWithBrackets": "What was directed by an art director's sibling's parent and written by [Girish Dhamija]",
    "questionPatternModEntities": "What was directed by a art director 's sibling 's parent and written by M0",
    "questionTemplate": "What was [VP_SIMPLE] by a [NP_SIMPLE] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE] and [VP_SIMPLE] by [entity]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.film.directed_by ?x1 .\n?x0 ns:film.film.written_by ns:m.0jt1t9 .\n?x1 ns:people.person.children|ns:fictional_universe.fictional_character.children|ns:organization.organization.child/ns:organization.organization_relationship.child ?x2 .\n?x2 ns:people.person.sibling_s/ns:people.sibling_relationship.sibling|ns:fictional_universe.fictional_character.siblings/ns:fictional_universe.sibling_relationship_of_fictional_characters.siblings ?x3 .\n?x3 a ns:film.film_art_director .\nFILTER ( ?x2 != ?x3 )\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 ?x1 .\n?x1 P2 ?x2 .\n?x2 P3 ?x3 .\n?x3 a M1 .\nFILTER ( ?x2 != ?x3 )\n}",
    "expectedResponse": "Yeh Hai Mumbai Meri Jaan; Zakhm",
    "recursionDepth": 33
  },
  {
    "questionIdx": 52161,
    "questionWithBrackets": "Was [Deh Namaki-ha] edited by and directed by [Arifmetika ubiystva]'s female producer's child",
    "questionPatternModEntities": "Was M2 edited by and directed by M0 's female producer 's child",
    "questionTemplate": "Was [entity] [VP_SIMPLE] by and [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] 's [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:people.person.parents|ns:fictional_universe.fictional_character.parents|ns:organization.organization.parent/ns:organization.organization_relationship.parent ?x1 .\n?x1 ns:film.producer.film|ns:film.production_company.films ns:m.0ghsjzv .\n?x1 ns:people.person.gender ns:m.02zsn .\nns:m.0x1x8yb ns:film.film.directed_by ?x0 .\nns:m.0x1x8yb ns:film.film.edited_by ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x1 P1 M0 .\n?x1 P2 M1 .\nM2 P3 ?x0 .\nM2 P4 ?x0\n}",
    "expectedResponse": "No",
    "recursionDepth": 33
  },
  {
    "questionIdx": 128391,
    "questionWithBrackets": "Were [Tokyo Fist] and [A Snake of June] produced by [Tetsuo II: Body Hammer]'s prequel's writer, cinematographer, and director",
    "questionPatternModEntities": "Were M1 and M2 produced by M0 's prequel 's writer , cinematographer , and director",
    "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE] , [ROLE_SIMPLE] , and [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.cinematographer.film ?x1 .\n?x0 ns:film.director.film ?x1 .\n?x0 ns:film.writer.film ?x1 .\n?x1 ns:film.film.sequel ns:m.0brs6b .\nns:m.03m9g_y ns:film.film.produced_by|ns:film.film.production_companies ?x0 .\nns:m.09twfb ns:film.film.produced_by|ns:film.film.production_companies ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x1 P3 M0 .\nM1 P4 ?x0 .\nM2 P4 ?x0\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 33
  },
  {
    "questionIdx": 157703,
    "questionWithBrackets": "What film producer married, influenced, and was influenced by [Antoine Bourseiller]'s spouse",
    "questionPatternModEntities": "What film producer married , influenced , and was influenced by M1 's spouse",
    "questionTemplate": "What [NP_SIMPLE] [VP_SIMPLE] , [VP_SIMPLE] , and was [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:film.producer .\n?x0 ns:influence.influence_node.influenced ?x1 .\n?x0 ns:influence.influence_node.influenced_by ?x1 .\n?x0 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ?x1 .\n?x1 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ns:m.0jwhqh .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x1 != ns:m.0jwhqh )\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x0 a M0 .\n?x1 P2 M1 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x1 != M1 )\n}",
    "expectedResponse": "Jacques Demy",
    "recursionDepth": 33
  },
  {
    "questionIdx": 185406,
    "questionWithBrackets": "What was written by a person's parent's parent and directed by [Roger Donaldson]",
    "questionPatternModEntities": "What was written by a person 's parent 's parent and directed by M0",
    "questionTemplate": "What was [VP_SIMPLE] by a [NP_SIMPLE] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE] and [VP_SIMPLE] by [entity]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.film.directed_by ns:m.03n120 .\n?x0 ns:film.film.written_by ?x1 .\n?x1 ns:people.person.children|ns:fictional_universe.fictional_character.children|ns:organization.organization.child/ns:organization.organization_relationship.child ?x2 .\n?x2 ns:people.person.children|ns:fictional_universe.fictional_character.children|ns:organization.organization.child/ns:organization.organization_relationship.child ?x3 .\n?x3 a ns:people.person\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 M0 .\n?x1 P2 ?x2 .\n?x2 P2 ?x3 .\n?x3 a M1\n}",
    "expectedResponse": "The Bounty",
    "recursionDepth": 33
  },
  {
    "questionIdx": 144365,
    "questionWithBrackets": "What did [John Gay] found, [Thomas Parnell] found, and a character found",
    "questionPatternModEntities": "What did M0 found , M1 found , and a character found",
    "questionTemplate": "What did [entity] [VP_SIMPLE] , [entity] [VP_SIMPLE] , and a [NP_SIMPLE] [VP_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:organization.organization.founders ?x1 .\n?x0 ns:organization.organization.founders ns:m.015kcp .\n?x0 ns:organization.organization.founders ns:m.03rt5q .\n?x1 a ns:fictional_universe.fictional_character\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x1 a M2\n}",
    "expectedResponse": "Scriblerus Club",
    "recursionDepth": 33
  },
  {
    "questionIdx": 70793,
    "questionWithBrackets": "Was [Paris, je t'aime] executive produced by [Sam Englebardt] and directed by [Django Films]'s French founder",
    "questionPatternModEntities": "Was M2 executive produced by M3 and directed by M0 's French founder",
    "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] and [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:organization.organization_founder.organizations_founded ns:m.03czmkw .\n?x0 ns:people.person.nationality ns:m.0f8l9c .\nns:m.0bz3jx ns:film.film.directed_by ?x0 .\nns:m.0bz3jx ns:film.film.executive_produced_by ns:m.04mv787\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nM2 P2 M3 .\nM2 P3 ?x0\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 33
  },
  {
    "questionIdx": 6194,
    "questionWithBrackets": "Did [EMEP Records] employ an Italian film producer and employ a character",
    "questionPatternModEntities": "Did M3 employ a Italian film producer and employ a character",
    "questionTemplate": "Did [entity] [VP_SIMPLE] a [ADJECTIVE_SIMPLE] [NP_SIMPLE] and [VP_SIMPLE] a [NP_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 a ns:film.producer .\n?x0 ns:people.person.nationality ns:m.03rjj .\n?x1 a ns:fictional_universe.fictional_character .\nns:m.0nkkfw8 ns:business.employer.employees/ns:business.employment_tenure.person ?x0 .\nns:m.0nkkfw8 ns:business.employer.employees/ns:business.employment_tenure.person ?x1\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M1 .\n?x0 a M0 .\n?x1 a M2 .\nM3 P1 ?x0 .\nM3 P1 ?x1\n}",
    "expectedResponse": "No",
    "recursionDepth": 33
  },
  {
    "questionIdx": 113089,
    "questionWithBrackets": "Were [Bade Dil Wala] and [Zamaana Deewana] directed by a film director and edited by an art director",
    "questionPatternModEntities": "Were M2 and M3 directed by a film director and edited by a art director",
    "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by a [NP_SIMPLE] and [VP_SIMPLE] by a [NP_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 a ns:film.film_art_director .\n?x1 a ns:film.director .\nns:m.03m6ljb ns:film.film.directed_by ?x1 .\nns:m.03m6ljb ns:film.film.edited_by ?x0 .\nns:m.0btt8v ns:film.film.directed_by ?x1 .\nns:m.0btt8v ns:film.film.edited_by ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 a M0 .\n?x1 a M1 .\nM2 P0 ?x0 .\nM2 P1 ?x1 .\nM3 P0 ?x0 .\nM3 P1 ?x1\n}",
    "expectedResponse": "No",
    "recursionDepth": 33
  },
  {
    "questionIdx": 37546,
    "questionWithBrackets": "Did a parent of a Dutch actor direct and write [Salute for Three]",
    "questionPatternModEntities": "Did a parent of a Dutch actor direct and write M0",
    "questionTemplate": "Did a [ROLE_SIMPLE] of a [ADJECTIVE_SIMPLE] [NP_SIMPLE] [VP_SIMPLE] and [VP_SIMPLE] [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.director.film ns:m.091m4db .\n?x0 ns:film.writer.film ns:m.091m4db .\n?x0 ns:people.person.children|ns:fictional_universe.fictional_character.children|ns:organization.organization.child/ns:organization.organization_relationship.child ?x1 .\n?x1 a ns:film.actor .\n?x1 ns:people.person.nationality ns:m.059j2\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 ?x1 .\n?x0 P2 M0 .\n?x1 P3 M2 .\n?x1 a M1\n}",
    "expectedResponse": "No",
    "recursionDepth": 33
  },
  {
    "questionIdx": 13052,
    "questionWithBrackets": "Did [Leo Tolstoy] influence a female founder of [Hogarth Press] and influence [Manuel Mujica L\u00e1inez]",
    "questionPatternModEntities": "Did M2 influence a female founder of M0 and influence M3",
    "questionTemplate": "Did [entity] [VP_SIMPLE] a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] and [VP_SIMPLE] [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:organization.organization_founder.organizations_founded ns:m.01r2q9 .\n?x0 ns:people.person.gender ns:m.02zsn .\nns:m.01tz6vs ns:influence.influence_node.influenced ?x0 .\nns:m.01tz6vs ns:influence.influence_node.influenced ns:m.0cp2l9\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nM2 P2 ?x0 .\nM2 P2 M3\n}",
    "expectedResponse": "No",
    "recursionDepth": 33
  },
  {
    "questionIdx": 234624,
    "questionWithBrackets": "Who was employed by [Louisiana State Police] and employed by an actor's spouse's employer",
    "questionPatternModEntities": "Who was employed by M1 and employed by a actor 's spouse 's employer",
    "questionTemplate": "Who was [VP_SIMPLE] by [entity] and [VP_SIMPLE] by a [NP_SIMPLE] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:people.person .\n?x0 ns:people.person.employment_history/ns:business.employment_tenure.company ?x1 .\n?x0 ns:people.person.employment_history/ns:business.employment_tenure.company ns:m.0fb8w5 .\n?x1 ns:business.employer.employees/ns:business.employment_tenure.person ?x2 .\n?x2 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ?x3 .\n?x3 a ns:film.actor .\nFILTER ( ?x2 != ?x3 )\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P0 M1 .\n?x0 a M0 .\n?x1 P1 ?x2 .\n?x2 P2 ?x3 .\n?x3 a M2 .\nFILTER ( ?x2 != ?x3 )\n}",
    "expectedResponse": "Francis Grevemberg",
    "recursionDepth": 33
  },
  {
    "questionIdx": 161664,
    "questionWithBrackets": "What person did an editor of [Lost Highway] marry and a cinematographer influence",
    "questionPatternModEntities": "What person did a editor of M2 marry and a cinematographer influence",
    "questionTemplate": "What [NP_SIMPLE] did a [ROLE_SIMPLE] of [entity] [VP_SIMPLE] and a [NP_SIMPLE] [VP_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:people.person .\n?x0 ns:influence.influence_node.influenced_by ?x1 .\n?x0 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ?x2 .\n?x1 a ns:film.cinematographer .\n?x2 ns:film.editor.film ns:m.01d259 .\nFILTER ( ?x0 != ?x2 )\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x2 .\n?x0 a M0 .\n?x1 a M1 .\n?x2 P2 M2 .\nFILTER ( ?x0 != ?x2 )\n}",
    "expectedResponse": "David Lynch",
    "recursionDepth": 33
  },
  {
    "questionIdx": 176414,
    "questionWithBrackets": "What was executive produced by [Edward McDonnell] and executive produced by [CZ12]'s art director and cinematographer",
    "questionPatternModEntities": "What was executive produced by M0 and executive produced by M1 's art director and cinematographer",
    "questionTemplate": "What was [VP_SIMPLE] by [entity] and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] and [ROLE_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.film.executive_produced_by ?x1 .\n?x0 ns:film.film.executive_produced_by ns:m.0jw65p .\n?x1 ns:film.cinematographer.film ns:m.0hznzl6 .\n?x1 ns:film.film_art_director.films_art_directed ns:m.0hznzl6\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P0 M0 .\n?x1 P1 M1 .\n?x1 P2 M1\n}",
    "expectedResponse": "Shanghai Knights",
    "recursionDepth": 33
  },
  {
    "questionIdx": 184469,
    "questionWithBrackets": "What was written by [Joel Spencer]'s employer's employee and written by an actor",
    "questionPatternModEntities": "What was written by M1 's employer 's employee and written by a actor",
    "questionTemplate": "What was [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE] and [VP_SIMPLE] by a [NP_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.film.written_by ?x1 .\n?x0 ns:film.film.written_by ?x2 .\n?x1 a ns:film.actor .\n?x2 ns:people.person.employment_history/ns:business.employment_tenure.company ?x3 .\n?x3 ns:business.employer.employees/ns:business.employment_tenure.person ns:m.0bs1b5\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P0 ?x2 .\n?x1 a M0 .\n?x2 P1 ?x3 .\n?x3 P2 M1\n}",
    "expectedResponse": "Re:Awakenings",
    "recursionDepth": 33
  },
  {
    "questionIdx": 169527,
    "questionWithBrackets": "What was directed and written by a costume designer, writer, and director of [The Wizard of Speed and Time]",
    "questionPatternModEntities": "What was directed and written by a costume designer , writer , and director of M0",
    "questionTemplate": "What was [VP_SIMPLE] and [VP_SIMPLE] by a [ROLE_SIMPLE] , [ROLE_SIMPLE] , and [ROLE_SIMPLE] of [entity]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.film.directed_by ?x1 .\n?x0 ns:film.film.written_by ?x1 .\n?x1 ns:film.director.film ns:m.083y0 .\n?x1 ns:film.film_costumer_designer.costume_design_for_film ns:m.083y0 .\n?x1 ns:film.writer.film ns:m.083y0\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x1 P2 M0 .\n?x1 P3 M0 .\n?x1 P4 M0\n}",
    "expectedResponse": "Animato; The Wizard of Speed and Time",
    "recursionDepth": 33
  },
  {
    "questionIdx": 69319,
    "questionWithBrackets": "Was [Nicolai V. Krylov] employed by a film producer and employed by a film producer's parent",
    "questionPatternModEntities": "Was M1 employed by a film producer and employed by a film producer 's parent",
    "questionTemplate": "Was [entity] [VP_SIMPLE] by a [NP_SIMPLE] and [VP_SIMPLE] by a [NP_SIMPLE] 's [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:people.person.children|ns:fictional_universe.fictional_character.children|ns:organization.organization.child/ns:organization.organization_relationship.child ?x1 .\n?x1 a ns:film.producer .\n?x2 a ns:film.producer .\nns:m.0j7l7k4 ns:people.person.employment_history/ns:business.employment_tenure.company ?x0 .\nns:m.0j7l7k4 ns:people.person.employment_history/ns:business.employment_tenure.company ?x2\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x1 a M0 .\n?x2 a M0 .\nM1 P1 ?x0 .\nM1 P1 ?x2\n}",
    "expectedResponse": "No",
    "recursionDepth": 33
  },
  {
    "questionIdx": 217398,
    "questionWithBrackets": "Who founded [Bell Labs], founded [Aerial Experiment Association], and founded a film distributor",
    "questionPatternModEntities": "Who founded M1 , founded M2 , and founded a film distributor",
    "questionTemplate": "Who [VP_SIMPLE] [entity] , [VP_SIMPLE] [entity] , and [VP_SIMPLE] a [NP_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:people.person .\n?x0 ns:organization.organization_founder.organizations_founded ?x1 .\n?x0 ns:organization.organization_founder.organizations_founded ns:m.0179y .\n?x0 ns:organization.organization_founder.organizations_founded ns:m.02fggr .\n?x1 a ns:film.film_distributor\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 a M0 .\n?x1 a M3\n}",
    "expectedResponse": "Alexander Graham Bell",
    "recursionDepth": 33
  },
  {
    "questionIdx": 178168,
    "questionWithBrackets": "What was executive produced by and directed by [The Brown Bunny]'s cinematographer, editor, and costume designer",
    "questionPatternModEntities": "What was executive produced by and directed by M0 's cinematographer , editor , and costume designer",
    "questionTemplate": "What was [VP_SIMPLE] by and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] , [ROLE_SIMPLE] , and [ROLE_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.film.directed_by ?x1 .\n?x0 ns:film.film.executive_produced_by ?x1 .\n?x1 ns:film.cinematographer.film ns:m.01n9cy .\n?x1 ns:film.editor.film ns:m.01n9cy .\n?x1 ns:film.film_costumer_designer.costume_design_for_film ns:m.01n9cy\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x1 P2 M0 .\n?x1 P3 M0 .\n?x1 P4 M0\n}",
    "expectedResponse": "Promises Written in Water",
    "recursionDepth": 33
  },
  {
    "questionIdx": 204898,
    "questionWithBrackets": "Which film was directed by and was edited by a Dutch art director",
    "questionPatternModEntities": "Which film was directed by and was edited by a Dutch art director",
    "questionTemplate": "Which [NP_SIMPLE] was [VP_SIMPLE] by and was [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [NP_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:film.film .\n?x0 ns:film.film.directed_by ?x1 .\n?x0 ns:film.film.edited_by ?x1 .\n?x1 a ns:film.film_art_director .\n?x1 ns:people.person.nationality ns:m.059j2\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 a M0 .\n?x1 P2 M2 .\n?x1 a M1\n}",
    "expectedResponse": "The Monster of Nix",
    "recursionDepth": 33
  },
  {
    "questionIdx": 90883,
    "questionWithBrackets": "Was a Spanish costume designer that [Joanna Dunn] and [Georges Braque] were influenced by an actor",
    "questionPatternModEntities": "Was a Spanish costume designer that M2 and M3 were influenced by a actor",
    "questionTemplate": "Was a [ADJECTIVE_SIMPLE] [NP_SIMPLE] that [entity] and [entity] were [VP_SIMPLE] by a [NP_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 a ns:film.actor .\n?x0 a ns:film.film_costumer_designer .\n?x0 ns:influence.influence_node.influenced ns:m.037f3 .\n?x0 ns:influence.influence_node.influenced ns:m.0k_1y7t .\n?x0 ns:people.person.nationality ns:m.06mkj\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M2 .\n?x0 P0 M3 .\n?x0 P1 M4 .\n?x0 a M0 .\n?x0 a M1\n}",
    "expectedResponse": "No",
    "recursionDepth": 33
  },
  {
    "questionIdx": 227820,
    "questionWithBrackets": "Who was a Mexican film director whose male sibling executive produced [Scriptfellas]",
    "questionPatternModEntities": "Who was a Mexican film director whose male sibling executive produced M3",
    "questionTemplate": "Who was a [ADJECTIVE_SIMPLE] [NP_SIMPLE] whose [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] [VP_SIMPLE] [entity]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:film.director .\n?x0 a ns:people.person .\n?x0 ns:people.person.nationality ns:m.0b90_r .\n?x0 ns:people.person.sibling_s/ns:people.sibling_relationship.sibling|ns:fictional_universe.fictional_character.siblings/ns:fictional_universe.sibling_relationship_of_fictional_characters.siblings ?x1 .\n?x1 ns:film.producer.films_executive_produced ns:m.05sp75r .\n?x1 ns:people.person.gender ns:m.05zppz .\nFILTER ( ?x0 != ?x1 )\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 M2 .\n?x0 a M0 .\n?x0 a M1 .\n?x1 P2 M3 .\n?x1 P3 M4 .\nFILTER ( ?x0 != ?x1 )\n}",
    "expectedResponse": "Fernando Rovzar",
    "recursionDepth": 33
  },
  {
    "questionIdx": 99848,
    "questionWithBrackets": "Was a film that was executive produced by [Agn\u00e8s Mentre] and starred [Adam Kozlowski] [Lay the Favorite]",
    "questionPatternModEntities": "Was a film that was executive produced by M3 and starred M2 M0",
    "questionTemplate": "Was a [NP_SIMPLE] that was [VP_SIMPLE] by [entity] and [VP_SIMPLE] [entity] [entity]",
    "sparql": "SELECT count(*) WHERE {\nns:m.0gy0p_h a ns:film.film .\nns:m.0gy0p_h ns:film.film.executive_produced_by ns:m.04mvyjq .\nns:m.0gy0p_h ns:film.film.starring/ns:film.performance.actor ns:m.0v_2g7k\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M2 .\nM0 P1 M3 .\nM0 a M1\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 33
  },
  {
    "questionIdx": 214000,
    "questionWithBrackets": "Who did [DreamWorks Studios] employ and a production company acquired by [NBCUniversal] employ",
    "questionPatternModEntities": "Who did M1 employ and a production company acquired by M3 employ",
    "questionTemplate": "Who did [entity] [VP_SIMPLE] and a [NP_SIMPLE] [VP_SIMPLE] by [entity] [VP_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:people.person .\n?x0 ns:people.person.employment_history/ns:business.employment_tenure.company ?x1 .\n?x0 ns:people.person.employment_history/ns:business.employment_tenure.company ns:m.01gb54 .\n?x1 a ns:film.production_company .\n?x1 ns:organization.organization.acquired_by/ns:business.acquisition.acquiring_company ns:m.02_l39\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P0 M1 .\n?x0 a M0 .\n?x1 P1 M3 .\n?x1 a M2\n}",
    "expectedResponse": "Steven Spielberg; Stacey Snider",
    "recursionDepth": 33
  },
  {
    "questionIdx": 133002,
    "questionWithBrackets": "What French film producer founded and was employed by a producer of [Transporter 3]",
    "questionPatternModEntities": "What French film producer founded and was employed by a producer of M2",
    "questionTemplate": "What [ADJECTIVE_SIMPLE] [NP_SIMPLE] [VP_SIMPLE] and was [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:film.producer .\n?x0 ns:organization.organization_founder.organizations_founded ?x1 .\n?x0 ns:people.person.employment_history/ns:business.employment_tenure.company ?x1 .\n?x0 ns:people.person.nationality ns:m.0f8l9c .\n?x1 ns:film.producer.film|ns:film.production_company.films ns:m.047vq5n\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 M1 .\n?x0 a M0 .\n?x1 P3 M2\n}",
    "expectedResponse": "Luc Besson",
    "recursionDepth": 34
  },
  {
    "questionIdx": 214046,
    "questionWithBrackets": "Who did [Eraserhead]'s male art director influence and [Billy Childish] and [Chuck Munson] influence",
    "questionPatternModEntities": "Who did M4 's male art director influence and M1 and M2 influence",
    "questionTemplate": "Who did [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] [VP_SIMPLE] and [entity] and [entity] [VP_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:people.person .\n?x0 ns:influence.influence_node.influenced_by ?x1 .\n?x0 ns:influence.influence_node.influenced_by ns:m.03f6jyw .\n?x0 ns:influence.influence_node.influenced_by ns:m.053cl_ .\n?x1 ns:film.film_art_director.films_art_directed ns:m.027jhb .\n?x1 ns:people.person.gender ns:m.05zppz\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 a M0 .\n?x1 P1 M3 .\n?x1 P2 M4\n}",
    "expectedResponse": "Garret Schuelke",
    "recursionDepth": 34
  },
  {
    "questionIdx": 104745,
    "questionWithBrackets": "Was a production company's founder employed by [Midway Games] and employed by [The Hi-Lo Country]'s distributor",
    "questionPatternModEntities": "Was a production company 's founder employed by M0 and employed by M1 's distributor",
    "questionTemplate": "Was a [NP_SIMPLE] 's [ROLE_SIMPLE] [VP_SIMPLE] by [entity] and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:organization.organization_founder.organizations_founded ?x1 .\n?x0 ns:people.person.employment_history/ns:business.employment_tenure.company ?x2 .\n?x0 ns:people.person.employment_history/ns:business.employment_tenure.company ns:m.027lf1 .\n?x1 a ns:film.production_company .\n?x2 ns:film.film_distributor.films_distributed/ns:film.film_film_distributor_relationship.film ns:m.02w97lh\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x0 P0 M0 .\n?x0 P1 ?x2 .\n?x1 P2 M1 .\n?x2 a M2\n}",
    "expectedResponse": "No",
    "recursionDepth": 34
  },
  {
    "questionIdx": 128379,
    "questionWithBrackets": "Were [To the Last Day], [Wichul], [Prince Yeonsan], [A Tender Heart], and [The Three-Day Reign] produced by [Deaf Sam-yong]'s director and producer",
    "questionPatternModEntities": "Were M1 , M2 , M3 , M4 , and M5 produced by M0 's director and producer",
    "questionTemplate": "Were [entity] , [entity] , [entity] , [entity] , and [entity] [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] and [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.director.film ns:m.05zwphf .\n?x0 ns:film.producer.film|ns:film.production_company.films ns:m.05zwphf .\nns:m.05zvjxt ns:film.film.produced_by|ns:film.film.production_companies ?x0 .\nns:m.06zt4qw ns:film.film.produced_by|ns:film.film.production_companies ?x0 .\nns:m.0b6mstp ns:film.film.produced_by|ns:film.film.production_companies ?x0 .\nns:m.0gksxc_ ns:film.film.produced_by|ns:film.film.production_companies ?x0 .\nns:m.0gkt9g1 ns:film.film.produced_by|ns:film.film.production_companies ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M0 .\nM1 P2 ?x0 .\nM2 P2 ?x0 .\nM3 P2 ?x0 .\nM4 P2 ?x0 .\nM5 P2 ?x0\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 34
  },
  {
    "questionIdx": 66050,
    "questionWithBrackets": "Was [Manuel De Landa] a Mexican film editor that an employer of [Kenneth Koch] and [Hideki Yukawa] employed",
    "questionPatternModEntities": "Was M2 a Mexican film editor that a employer of M0 and M1 employed",
    "questionTemplate": "Was [entity] a [ADJECTIVE_SIMPLE] [NP_SIMPLE] that a [ROLE_SIMPLE] of [entity] and [entity] [VP_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:business.employer.employees/ns:business.employment_tenure.person ns:m.019p07 .\n?x0 ns:business.employer.employees/ns:business.employment_tenure.person ns:m.02ttr7 .\nns:m.021ql3 a ns:film.editor .\nns:m.021ql3 ns:people.person.employment_history/ns:business.employment_tenure.company ?x0 .\nns:m.021ql3 ns:people.person.nationality ns:m.0b90_r\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\nM2 P1 ?x0 .\nM2 P2 M4 .\nM2 a M3\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 34
  },
  {
    "questionIdx": 85573,
    "questionWithBrackets": "Was [Virgin Group] founded by a male executive producer of [Absolute Beginners] and founded by [Richard Branson]",
    "questionPatternModEntities": "Was M2 founded by a male executive producer of M0 and founded by M3",
    "questionTemplate": "Was [entity] [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] and [VP_SIMPLE] by [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.producer.films_executive_produced ns:m.076zs0 .\n?x0 ns:people.person.gender ns:m.05zppz .\nns:m.01f9wm ns:organization.organization.founders ?x0 .\nns:m.01f9wm ns:organization.organization.founders ns:m.0n839\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nM2 P2 ?x0 .\nM2 P2 M3\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 34
  },
  {
    "questionIdx": 86312,
    "questionWithBrackets": "Was [Warner Music Group] a film producer that employed [Kevin Liles] and [Alejandro Zubillaga] and employed [Edgar Bronfman, Jr.]",
    "questionPatternModEntities": "Was M0 a film producer that employed M2 and M3 and employed M4",
    "questionTemplate": "Was [entity] a [NP_SIMPLE] that [VP_SIMPLE] [entity] and [entity] and [VP_SIMPLE] [entity]",
    "sparql": "SELECT count(*) WHERE {\nns:m.02bh8z a ns:film.producer .\nns:m.02bh8z ns:business.employer.employees/ns:business.employment_tenure.person ns:m.02h4qc .\nns:m.02bh8z ns:business.employer.employees/ns:business.employment_tenure.person ns:m.03wwrg9 .\nns:m.02bh8z ns:business.employer.employees/ns:business.employment_tenure.person ns:m.03y914q\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M2 .\nM0 P0 M3 .\nM0 P0 M4 .\nM0 a M1\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 34
  },
  {
    "questionIdx": 221478,
    "questionWithBrackets": "Who married a film's producer and was influenced by [Philip K. Dick] and [Philip Roth]",
    "questionPatternModEntities": "Who married a film 's producer and was influenced by M1 and M2",
    "questionTemplate": "Who [VP_SIMPLE] a [NP_SIMPLE] 's [ROLE_SIMPLE] and was [VP_SIMPLE] by [entity] and [entity]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:people.person .\n?x0 ns:influence.influence_node.influenced_by ns:m.013pp3 .\n?x0 ns:influence.influence_node.influenced_by ns:m.05qzv .\n?x0 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ?x1 .\n?x1 ns:film.producer.film|ns:film.production_company.films ?x2 .\n?x2 a ns:film.film .\nFILTER ( ?x0 != ?x1 )\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P1 ?x1 .\n?x0 a M0 .\n?x1 P2 ?x2 .\n?x2 a M3 .\nFILTER ( ?x0 != ?x1 )\n}",
    "expectedResponse": "Jonathan Lethem",
    "recursionDepth": 34
  },
  {
    "questionIdx": 140159,
    "questionWithBrackets": "What cinematographer whose sibling executive produced and edited [Machines of the Working Class] played [Student Playing Facemash #2]",
    "questionPatternModEntities": "What cinematographer whose sibling executive produced and edited M2 played M1",
    "questionTemplate": "What [NP_SIMPLE] whose [ROLE_SIMPLE] [VP_SIMPLE] and [VP_SIMPLE] [entity] [VP_SIMPLE] [entity]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:film.cinematographer .\n?x0 ns:film.actor.film/ns:film.performance.character ns:m.0pbxdyv .\n?x0 ns:people.person.sibling_s/ns:people.sibling_relationship.sibling|ns:fictional_universe.fictional_character.siblings/ns:fictional_universe.sibling_relationship_of_fictional_characters.siblings ?x1 .\n?x1 ns:film.editor.film ns:m.0gkw0fz .\n?x1 ns:film.producer.films_executive_produced ns:m.0gkw0fz .\nFILTER ( ?x0 != ?x1 )\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 M1 .\n?x0 a M0 .\n?x1 P2 M2 .\n?x1 P3 M2 .\nFILTER ( ?x0 != ?x1 )\n}",
    "expectedResponse": "James Dastoli",
    "recursionDepth": 34
  },
  {
    "questionIdx": 204407,
    "questionWithBrackets": "Which film producer was founded by [Jens Theander] and [Peter Theander] and employed [Vivi Berens Private]'s writer",
    "questionPatternModEntities": "Which film producer was founded by M1 and M2 and employed M3 's writer",
    "questionTemplate": "Which [NP_SIMPLE] was [VP_SIMPLE] by [entity] and [entity] and [VP_SIMPLE] [entity] 's [ROLE_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:film.producer .\n?x0 ns:business.employer.employees/ns:business.employment_tenure.person ?x1 .\n?x0 ns:organization.organization.founders ns:g.121kwn_n .\n?x0 ns:organization.organization.founders ns:m.0bdr5k8 .\n?x1 ns:film.writer.film ns:m.0cn9qtg\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P1 ?x1 .\n?x0 a M0 .\n?x1 P2 M3\n}",
    "expectedResponse": "Rodox Trading",
    "recursionDepth": 34
  },
  {
    "questionIdx": 88488,
    "questionWithBrackets": "Was a Canadian film editor that [The Environmentalist] was written and executive produced by [Jacob Bond]",
    "questionPatternModEntities": "Was a Canadian film editor that M2 was written and executive produced by M0",
    "questionTemplate": "Was a [ADJECTIVE_SIMPLE] [NP_SIMPLE] that [entity] was [VP_SIMPLE] and [VP_SIMPLE] by [entity]",
    "sparql": "SELECT count(*) WHERE {\nns:m.0q204cc a ns:film.editor .\nns:m.0q204cc ns:film.producer.films_executive_produced ns:m.0q204bx .\nns:m.0q204cc ns:film.writer.film ns:m.0q204bx .\nns:m.0q204cc ns:people.person.nationality ns:m.0d060g\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M2 .\nM0 P1 M2 .\nM0 P2 M3 .\nM0 a M1\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 34
  },
  {
    "questionIdx": 62613,
    "questionWithBrackets": "Was [Kate Allen] employed by [Amnesty International UK] and employed by an art director's parent's country of nationality",
    "questionPatternModEntities": "Was M1 employed by M2 and employed by a art director 's parent 's country of nationality",
    "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] and [VP_SIMPLE] by a [NP_SIMPLE] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ^ns:people.person.nationality ?x1 .\n?x1 ns:people.person.children|ns:fictional_universe.fictional_character.children|ns:organization.organization.child/ns:organization.organization_relationship.child ?x2 .\n?x2 a ns:film.film_art_director .\nns:m.025ylhs ns:people.person.employment_history/ns:business.employment_tenure.company ?x0 .\nns:m.025ylhs ns:people.person.employment_history/ns:business.employment_tenure.company ns:m.0120g5fq\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x1 P1 ?x2 .\n?x2 a M0 .\nM1 P2 ?x0 .\nM1 P2 M2\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 34
  },
  {
    "questionIdx": 183357,
    "questionWithBrackets": "What was produced by, written by, and executive produced by a Canadian costume designer",
    "questionPatternModEntities": "What was produced by , written by , and executive produced by a Canadian costume designer",
    "questionTemplate": "What was [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [NP_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.film.executive_produced_by ?x1 .\n?x0 ns:film.film.produced_by|ns:film.film.production_companies ?x1 .\n?x0 ns:film.film.written_by ?x1 .\n?x1 a ns:film.film_costumer_designer .\n?x1 ns:people.person.nationality ns:m.0d060g\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x1 P3 M1 .\n?x1 a M0\n}",
    "expectedResponse": "Fudgy Wudgy Fudge Face",
    "recursionDepth": 34
  },
  {
    "questionIdx": 64138,
    "questionWithBrackets": "Was [Leonor Fini] a costume designer that married [Stanislao Lepri] and [Andr\u00e9 Pieyre de Mandiargues] and married [Federico Veneziani]",
    "questionPatternModEntities": "Was M0 a costume designer that married M2 and M3 and married M4",
    "questionTemplate": "Was [entity] a [NP_SIMPLE] that [VP_SIMPLE] [entity] and [entity] and [VP_SIMPLE] [entity]",
    "sparql": "SELECT count(*) WHERE {\nFILTER ( ns:m.04c6v9 != ns:m.010qxtzx ) .\nFILTER ( ns:m.04c6v9 != ns:m.06myq2 ) .\nFILTER ( ns:m.04c6v9 != ns:m.0wpbmcj ) .\nns:m.04c6v9 a ns:film.film_costumer_designer .\nns:m.04c6v9 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ns:m.010qxtzx .\nns:m.04c6v9 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ns:m.06myq2 .\nns:m.04c6v9 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ns:m.0wpbmcj\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\nFILTER ( M0 != M2 ) .\nFILTER ( M0 != M3 ) .\nFILTER ( M0 != M4 ) .\nM0 P0 M2 .\nM0 P0 M3 .\nM0 P0 M4 .\nM0 a M1\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 34
  },
  {
    "questionIdx": 170956,
    "questionWithBrackets": "What was directed by an actor and directed by [Anne Estonilo Charles]'s British spouse",
    "questionPatternModEntities": "What was directed by a actor and directed by M2 's British spouse",
    "questionTemplate": "What was [VP_SIMPLE] by a [NP_SIMPLE] and [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.film.directed_by ?x1 .\n?x0 ns:film.film.directed_by ?x2 .\n?x1 a ns:film.actor .\n?x2 ns:people.person.nationality ns:m.07ssc .\n?x2 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ns:m.0jwybdh .\nFILTER ( ?x2 != ns:m.0jwybdh )\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P0 ?x2 .\n?x1 a M0 .\n?x2 P1 M1 .\n?x2 P2 M2 .\nFILTER ( ?x2 != M2 )\n}",
    "expectedResponse": "Concert For New York City",
    "recursionDepth": 34
  },
  {
    "questionIdx": 39529,
    "questionWithBrackets": "Did a sequel of [The Godfather] star a film editor and star a screenwriter",
    "questionPatternModEntities": "Did a sequel of M0 star a film editor and star a screenwriter",
    "questionTemplate": "Did a [ROLE_SIMPLE] of [entity] [VP_SIMPLE] a [NP_SIMPLE] and [VP_SIMPLE] a [NP_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.film.prequel ns:m.07g1sm .\n?x0 ns:film.film.starring/ns:film.performance.actor ?x1 .\n?x0 ns:film.film.starring/ns:film.performance.actor ?x2 .\n?x1 a ns:film.editor .\n?x2 a ns:film.writer\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x0 P0 ?x2 .\n?x0 P1 M0 .\n?x1 a M1 .\n?x2 a M2\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 34
  },
  {
    "questionIdx": 143481,
    "questionWithBrackets": "What did [Fredrik Abrahamsen] edit and [A Hole in My Heart]'s art director, costume designer, and cinematographer write",
    "questionPatternModEntities": "What did M0 edit and M1 's art director , costume designer , and cinematographer write",
    "questionTemplate": "What did [entity] [VP_SIMPLE] and [entity] 's [ROLE_SIMPLE] , [ROLE_SIMPLE] , and [ROLE_SIMPLE] [VP_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.film.edited_by ns:m.0gm0gzr .\n?x0 ns:film.film.written_by ?x1 .\n?x1 ns:film.cinematographer.film ns:m.03xkr6 .\n?x1 ns:film.film_art_director.films_art_directed ns:m.03xkr6 .\n?x1 ns:film.film_costumer_designer.costume_design_for_film ns:m.03xkr6\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 M0 .\n?x1 P2 M1 .\n?x1 P3 M1 .\n?x1 P4 M1\n}",
    "expectedResponse": "Together",
    "recursionDepth": 34
  },
  {
    "questionIdx": 75180,
    "questionWithBrackets": "Was [Saimir] a film whose sequel was written by and was directed by [Mitchell Klebanoff]",
    "questionPatternModEntities": "Was M1 a film whose sequel was written by and was directed by M0",
    "questionTemplate": "Was [entity] a [NP_SIMPLE] whose [ROLE_SIMPLE] was [VP_SIMPLE] by and was [VP_SIMPLE] by [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.film.directed_by ns:m.0jv92k .\n?x0 ns:film.film.written_by ns:m.0jv92k .\nns:m.0c4d4zw a ns:film.film .\nns:m.0c4d4zw ns:film.film.sequel ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M0 .\nM1 P2 ?x0 .\nM1 a M2\n}",
    "expectedResponse": "No",
    "recursionDepth": 34
  },
  {
    "questionIdx": 85338,
    "questionWithBrackets": "Was [Victory of the Faith] produced by, edited by, and written by a female person",
    "questionPatternModEntities": "Was M2 produced by , edited by , and written by a female person",
    "questionTemplate": "Was [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [NP_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 a ns:people.person .\n?x0 ns:people.person.gender ns:m.02zsn .\nns:m.08fpbz ns:film.film.edited_by ?x0 .\nns:m.08fpbz ns:film.film.produced_by|ns:film.film.production_companies ?x0 .\nns:m.08fpbz ns:film.film.written_by ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M1 .\n?x0 a M0 .\nM2 P1 ?x0 .\nM2 P2 ?x0 .\nM2 P3 ?x0\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 34
  },
  {
    "questionIdx": 4669,
    "questionWithBrackets": "Did [Comcast] acquire a film distributor that [Carte Postale Records] acquired and acquire [United Artists]",
    "questionPatternModEntities": "Did M2 acquire a film distributor that M1 acquired and acquire M3",
    "questionTemplate": "Did [entity] [VP_SIMPLE] a [NP_SIMPLE] that [entity] [VP_SIMPLE] and [VP_SIMPLE] [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 a ns:film.film_distributor .\n?x0 ns:organization.organization.acquired_by/ns:business.acquisition.acquiring_company ns:m.0f9lxzw .\nns:m.01s73z ns:organization.organization.companies_acquired/ns:business.acquisition.company_acquired ?x0 .\nns:m.01s73z ns:organization.organization.companies_acquired/ns:business.acquisition.company_acquired ns:m.017jv5\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M1 .\n?x0 a M0 .\nM2 P1 ?x0 .\nM2 P1 M3\n}",
    "expectedResponse": "No",
    "recursionDepth": 34
  },
  {
    "questionIdx": 172422,
    "questionWithBrackets": "What was distributed by [Miramax], produced by a production company, and distributed by [eOne Films]",
    "questionPatternModEntities": "What was distributed by M0 , produced by a production company , and distributed by M1",
    "questionTemplate": "What was [VP_SIMPLE] by [entity] , [VP_SIMPLE] by a [NP_SIMPLE] , and [VP_SIMPLE] by [entity]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.film.distributors/ns:film.film_film_distributor_relationship.distributor ns:m.0f12prt .\n?x0 ns:film.film.distributors/ns:film.film_film_distributor_relationship.distributor ns:m.0jz9f .\n?x0 ns:film.film.produced_by|ns:film.film.production_companies ?x1 .\n?x1 a ns:film.production_company\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P1 ?x1 .\n?x1 a M2\n}",
    "expectedResponse": "Last Night",
    "recursionDepth": 34
  },
  {
    "questionIdx": 3079,
    "questionWithBrackets": "Did [Buddha Assassinator]'s writer's country of nationality employ [Sandra Brand] and employ [Reginald Edward Stubbs] and [Matthew Nathan]",
    "questionPatternModEntities": "Did M3 's writer 's country of nationality employ M0 and employ M1 and M2",
    "questionTemplate": "Did [entity] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE] [VP_SIMPLE] [entity] and [VP_SIMPLE] [entity] and [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ^ns:people.person.nationality ?x1 .\n?x0 ns:business.employer.employees/ns:business.employment_tenure.person ns:m.0399vv .\n?x0 ns:business.employer.employees/ns:business.employment_tenure.person ns:m.03d8bw .\n?x0 ns:business.employer.employees/ns:business.employment_tenure.person ns:m.05yhw4h .\n?x1 ns:film.writer.film ns:m.02qqxvh\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P1 ?x1 .\n?x1 P2 M3\n}",
    "expectedResponse": "No",
    "recursionDepth": 34
  },
  {
    "questionIdx": 190500,
    "questionWithBrackets": "Which Italian film producer executive produced [After Death] and edited [99 Women] and [Shocking Dark]",
    "questionPatternModEntities": "Which Italian film producer executive produced M3 and edited M1 and M2",
    "questionTemplate": "Which [ADJECTIVE_SIMPLE] [NP_SIMPLE] [VP_SIMPLE] [entity] and [VP_SIMPLE] [entity] and [entity]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:film.producer .\n?x0 ns:film.editor.film ns:m.04dhp6f .\n?x0 ns:film.editor.film ns:m.09gg4mp .\n?x0 ns:film.producer.films_executive_produced ns:m.0b90lk .\n?x0 ns:people.person.nationality ns:m.03rjj\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P1 M3 .\n?x0 P2 M4 .\n?x0 a M0\n}",
    "expectedResponse": "Bruno Mattei",
    "recursionDepth": 34
  },
  {
    "questionIdx": 142312,
    "questionWithBrackets": "What did [Berthe Grumbach]'s French child produce, executive produce, and write",
    "questionPatternModEntities": "What did M1 's French child produce , executive produce , and write",
    "questionTemplate": "What did [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.film.executive_produced_by ?x1 .\n?x0 ns:film.film.produced_by|ns:film.film.production_companies ?x1 .\n?x0 ns:film.film.written_by ?x1 .\n?x1 ns:people.person.nationality ns:m.0f8l9c .\n?x1 ns:people.person.parents|ns:fictional_universe.fictional_character.parents|ns:organization.organization.parent/ns:organization.organization_relationship.parent ns:m.0swhv4z\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x1 P3 M0 .\n?x1 P4 M1\n}",
    "expectedResponse": "The Silence of the Sea",
    "recursionDepth": 34
  },
  {
    "questionIdx": 5014,
    "questionWithBrackets": "Did [D. W. Griffith] found [The Bat Whispers]'s producer and distributor and found a production company",
    "questionPatternModEntities": "Did M2 found M0 's producer and distributor and found a production company",
    "questionTemplate": "Did [entity] [VP_SIMPLE] [entity] 's [ROLE_SIMPLE] and [ROLE_SIMPLE] and [VP_SIMPLE] a [NP_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.film_distributor.films_distributed/ns:film.film_film_distributor_relationship.film ns:m.04crf3k .\n?x0 ns:film.producer.film|ns:film.production_company.films ns:m.04crf3k .\n?x1 a ns:film.production_company .\nns:m.026ck ns:organization.organization_founder.organizations_founded ?x0 .\nns:m.026ck ns:organization.organization_founder.organizations_founded ?x1\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M0 .\n?x1 a M1 .\nM2 P2 ?x0 .\nM2 P2 ?x1\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 34
  },
  {
    "questionIdx": 15377,
    "questionWithBrackets": "Did [My Favorite Spy] star [Chester Conklin] and star a film producer's male actor",
    "questionPatternModEntities": "Did M2 star M3 and star a film producer 's male actor",
    "questionTemplate": "Did [entity] [VP_SIMPLE] [entity] and [VP_SIMPLE] a [NP_SIMPLE] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.actor.film/ns:film.performance.character ?x1 .\n?x0 ns:people.person.gender ns:m.05zppz .\n?x1 a ns:film.producer .\nns:m.02wwdml ns:film.film.starring/ns:film.performance.actor ?x0 .\nns:m.02wwdml ns:film.film.starring/ns:film.performance.actor ns:m.07__pr\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x0 P1 M0 .\n?x1 a M1 .\nM2 P2 ?x0 .\nM2 P2 M3\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 34
  },
  {
    "questionIdx": 236454,
    "questionWithBrackets": "Who was influenced by [Johnny Carson] and influenced by a film director's child and parent",
    "questionPatternModEntities": "Who was influenced by M1 and influenced by a film director 's child and parent",
    "questionTemplate": "Who was [VP_SIMPLE] by [entity] and [VP_SIMPLE] by a [NP_SIMPLE] 's [ROLE_SIMPLE] and [ROLE_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:people.person .\n?x0 ns:influence.influence_node.influenced_by ?x1 .\n?x0 ns:influence.influence_node.influenced_by ns:m.0ph2w .\n?x1 ns:people.person.children|ns:fictional_universe.fictional_character.children|ns:organization.organization.child/ns:organization.organization_relationship.child ?x2 .\n?x1 ns:people.person.parents|ns:fictional_universe.fictional_character.parents|ns:organization.organization.parent/ns:organization.organization_relationship.parent ?x2 .\n?x2 a ns:film.director\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P0 M1 .\n?x0 a M0 .\n?x1 P1 ?x2 .\n?x1 P2 ?x2 .\n?x2 a M2\n}",
    "expectedResponse": "Meena Dimian",
    "recursionDepth": 34
  },
  {
    "questionIdx": 157984,
    "questionWithBrackets": "What film producer was a Mexican person whose sibling wrote [S\u00edstole Di\u00e1stole] and [Love in the Time of Hysteria]",
    "questionPatternModEntities": "What film producer was a Mexican person whose sibling wrote M3 and M4",
    "questionTemplate": "What [NP_SIMPLE] was a [ADJECTIVE_SIMPLE] [NP_SIMPLE] whose [ROLE_SIMPLE] [VP_SIMPLE] [entity] and [entity]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:film.producer .\n?x0 a ns:people.person .\n?x0 ns:people.person.nationality ns:m.0b90_r .\n?x0 ns:people.person.sibling_s/ns:people.sibling_relationship.sibling|ns:fictional_universe.fictional_character.siblings/ns:fictional_universe.sibling_relationship_of_fictional_characters.siblings ?x1 .\n?x1 ns:film.writer.film ns:m.092c5s .\n?x1 ns:film.writer.film ns:m.0rhnsyg .\nFILTER ( ?x0 != ?x1 )\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 M2 .\n?x0 a M0 .\n?x0 a M1 .\n?x1 P2 M3 .\n?x1 P2 M4 .\nFILTER ( ?x0 != ?x1 )\n}",
    "expectedResponse": "Alfonso Cuar\u00f3n; Carlos Cuar\u00f3n",
    "recursionDepth": 34
  },
  {
    "questionIdx": 145736,
    "questionWithBrackets": "What did [Patsy van Ettinger] executive produce, a costume designer produce, and [T. Scott Layman] edit",
    "questionPatternModEntities": "What did M0 executive produce , a costume designer produce , and M1 edit",
    "questionTemplate": "What did [entity] [VP_SIMPLE] , a [NP_SIMPLE] [VP_SIMPLE] , and [entity] [VP_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.film.edited_by ns:m.0nhnxvl .\n?x0 ns:film.film.executive_produced_by ns:m.0gbx5b9 .\n?x0 ns:film.film.produced_by|ns:film.film.production_companies ?x1 .\n?x1 a ns:film.film_costumer_designer\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 ?x1 .\n?x0 P2 M1 .\n?x1 a M2\n}",
    "expectedResponse": "Julie & Jack",
    "recursionDepth": 34
  },
  {
    "questionIdx": 80209,
    "questionWithBrackets": "Was [The Dance of Reality] produced by a French costume designer of [El Topo] and produced by [Mois\u00e9s Cos\u00edo]",
    "questionPatternModEntities": "Was M2 produced by a French costume designer of M0 and produced by M3",
    "questionTemplate": "Was [entity] [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] and [VP_SIMPLE] by [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.film_costumer_designer.costume_design_for_film ns:m.060dpr .\n?x0 ns:people.person.nationality ns:m.0f8l9c .\nns:m.0g9xnt3 ns:film.film.produced_by|ns:film.film.production_companies ?x0 .\nns:m.0g9xnt3 ns:film.film.produced_by|ns:film.film.production_companies ns:m.04nrvpb\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nM2 P2 ?x0 .\nM2 P2 M3\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 34
  },
  {
    "questionIdx": 144374,
    "questionWithBrackets": "What did [John Houseman] write and [Chimes at Midnight]'s director, star, and costume designer direct",
    "questionPatternModEntities": "What did M0 write and M1 's director , star , and costume designer direct",
    "questionTemplate": "What did [entity] [VP_SIMPLE] and [entity] 's [ROLE_SIMPLE] , [ROLE_SIMPLE] , and [ROLE_SIMPLE] [VP_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.film.directed_by ?x1 .\n?x0 ns:film.film.written_by ns:m.01vsps .\n?x1 ns:film.actor.film/ns:film.performance.film ns:m.07jpg0 .\n?x1 ns:film.director.film ns:m.07jpg0 .\n?x1 ns:film.film_costumer_designer.costume_design_for_film ns:m.07jpg0\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 ?x1 .\n?x1 P2 M1 .\n?x1 P3 M1 .\n?x1 P4 M1\n}",
    "expectedResponse": "Citizen Kane",
    "recursionDepth": 34
  },
  {
    "questionIdx": 42738,
    "questionWithBrackets": "Did an employer of a star of [Recount] acquire [Gridware] and acquire [Titan Aerospace]",
    "questionPatternModEntities": "Did a employer of a star of M2 acquire M0 and acquire M1",
    "questionTemplate": "Did a [ROLE_SIMPLE] of a [ROLE_SIMPLE] of [entity] [VP_SIMPLE] [entity] and [VP_SIMPLE] [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:business.employer.employees/ns:business.employment_tenure.person ?x1 .\n?x0 ns:organization.organization.companies_acquired/ns:business.acquisition.company_acquired ns:m.0128rwdj .\n?x0 ns:organization.organization.companies_acquired/ns:business.acquisition.company_acquired ns:m.05m0ylk .\n?x1 ns:film.actor.film/ns:film.performance.film ns:m.043mk4y\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x0 P1 M0 .\n?x0 P1 M1 .\n?x1 P2 M2\n}",
    "expectedResponse": "No",
    "recursionDepth": 34
  },
  {
    "questionIdx": 171107,
    "questionWithBrackets": "What was directed by and edited by a star, costume designer, and cinematographer of [The Brown Bunny]",
    "questionPatternModEntities": "What was directed by and edited by a star , costume designer , and cinematographer of M0",
    "questionTemplate": "What was [VP_SIMPLE] by and [VP_SIMPLE] by a [ROLE_SIMPLE] , [ROLE_SIMPLE] , and [ROLE_SIMPLE] of [entity]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.film.directed_by ?x1 .\n?x0 ns:film.film.edited_by ?x1 .\n?x1 ns:film.actor.film/ns:film.performance.film ns:m.01n9cy .\n?x1 ns:film.cinematographer.film ns:m.01n9cy .\n?x1 ns:film.film_costumer_designer.costume_design_for_film ns:m.01n9cy\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x1 P2 M0 .\n?x1 P3 M0 .\n?x1 P4 M0\n}",
    "expectedResponse": "The Brown Bunny; Promises Written in Water",
    "recursionDepth": 34
  },
  {
    "questionIdx": 33507,
    "questionWithBrackets": "Did a film distributor employ [The Secret World Of Foley]'s British writer and employ [Abdoulaye Yerodia Ndombasi]",
    "questionPatternModEntities": "Did a film distributor employ M2 's British writer and employ M1",
    "questionTemplate": "Did a [NP_SIMPLE] [VP_SIMPLE] [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] and [VP_SIMPLE] [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 a ns:film.film_distributor .\n?x0 ns:business.employer.employees/ns:business.employment_tenure.person ?x1 .\n?x0 ns:business.employer.employees/ns:business.employment_tenure.person ns:m.03r9n3 .\n?x1 ns:film.writer.film ns:m.0110n4_9 .\n?x1 ns:people.person.nationality ns:m.07ssc\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x0 P0 M1 .\n?x0 a M0 .\n?x1 P1 M2 .\n?x1 P2 M3\n}",
    "expectedResponse": "No",
    "recursionDepth": 34
  },
  {
    "questionIdx": 170956,
    "questionWithBrackets": "What was directed by an actor and directed by [Anne Estonilo Charles]'s British spouse",
    "questionPatternModEntities": "What was directed by a actor and directed by M2 's British spouse",
    "questionTemplate": "What was [VP_SIMPLE] by a [NP_SIMPLE] and [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.film.directed_by ?x1 .\n?x0 ns:film.film.directed_by ?x2 .\n?x1 a ns:film.actor .\n?x2 ns:people.person.nationality ns:m.07ssc .\n?x2 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ns:m.0jwybdh .\nFILTER ( ?x2 != ns:m.0jwybdh )\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P0 ?x2 .\n?x1 a M0 .\n?x2 P1 M1 .\n?x2 P2 M2 .\nFILTER ( ?x2 != M2 )\n}",
    "expectedResponse": "Concert For New York City",
    "recursionDepth": 34
  },
  {
    "questionIdx": 216658,
    "questionWithBrackets": "Who directed [A Bucket of Blood], executive produced [Cover Girl Models], and produced a film",
    "questionPatternModEntities": "Who directed M2 , executive produced M1 , and produced a film",
    "questionTemplate": "Who [VP_SIMPLE] [entity] , [VP_SIMPLE] [entity] , and [VP_SIMPLE] a [NP_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:people.person .\n?x0 ns:film.director.film ns:m.0bxnsk .\n?x0 ns:film.producer.films_executive_produced ns:m.0gkrpw7 .\n?x0 ns:film.producer.film|ns:film.production_company.films ?x1 .\n?x1 a ns:film.film\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M1 .\n?x0 P1 ?x1 .\n?x0 P2 M2 .\n?x0 a M0 .\n?x1 a M3\n}",
    "expectedResponse": "Roger Corman",
    "recursionDepth": 34
  },
  {
    "questionIdx": 121077,
    "questionWithBrackets": "Were [Mere Yaar Ki Shaadi Hai] and [\u2026and there wasn\u2019t everafter\u2026] executive produced by a costume designer and edited by a film editor",
    "questionPatternModEntities": "Were M2 and M3 executive produced by a costume designer and edited by a film editor",
    "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by a [NP_SIMPLE] and [VP_SIMPLE] by a [NP_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 a ns:film.film_costumer_designer .\n?x1 a ns:film.editor .\nns:m.0cc744m ns:film.film.edited_by ?x1 .\nns:m.0cc744m ns:film.film.executive_produced_by ?x0 .\nns:m.0kv551 ns:film.film.edited_by ?x1 .\nns:m.0kv551 ns:film.film.executive_produced_by ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 a M0 .\n?x1 a M1 .\nM2 P0 ?x0 .\nM2 P1 ?x1 .\nM3 P0 ?x0 .\nM3 P1 ?x1\n}",
    "expectedResponse": "No",
    "recursionDepth": 34
  },
  {
    "questionIdx": 184762,
    "questionWithBrackets": "What was written by [Red Beard]'s editor and produced by [A Global Affair]'s art director's employer",
    "questionPatternModEntities": "What was written by M0 's editor and produced by M1 's art director 's employer",
    "questionTemplate": "What was [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.film.produced_by|ns:film.film.production_companies ?x1 .\n?x0 ns:film.film.written_by ?x2 .\n?x1 ns:business.employer.employees/ns:business.employment_tenure.person ?x3 .\n?x2 ns:film.editor.film ns:m.01j5x_ .\n?x3 ns:film.film_art_director.films_art_directed ns:m.09gldq6\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x2 .\n?x1 P2 M0 .\n?x2 P3 ?x3 .\n?x3 P4 M1\n}",
    "expectedResponse": "Kagemusha; Tora! Tora! Tora!",
    "recursionDepth": 34
  },
  {
    "questionIdx": 48082,
    "questionWithBrackets": "Was [Blood Flood] produced by, written by, and edited by a French cinematographer",
    "questionPatternModEntities": "Was M2 produced by , written by , and edited by a French cinematographer",
    "questionTemplate": "Was [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [NP_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 a ns:film.cinematographer .\n?x0 ns:people.person.nationality ns:m.0f8l9c .\nns:m.0crvhdl ns:film.film.edited_by ?x0 .\nns:m.0crvhdl ns:film.film.produced_by|ns:film.film.production_companies ?x0 .\nns:m.0crvhdl ns:film.film.written_by ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M1 .\n?x0 a M0 .\nM2 P1 ?x0 .\nM2 P2 ?x0 .\nM2 P3 ?x0\n}",
    "expectedResponse": "No",
    "recursionDepth": 34
  },
  {
    "questionIdx": 52300,
    "questionWithBrackets": "Was [Der 7bte Zwerg]'s prequel executive produced by, written by, and directed by a film producer",
    "questionPatternModEntities": "Was M0 's prequel executive produced by , written by , and directed by a film producer",
    "questionTemplate": "Was [entity] 's [ROLE_SIMPLE] [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by a [NP_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.film.directed_by ?x1 .\n?x0 ns:film.film.executive_produced_by ?x1 .\n?x0 ns:film.film.sequel ns:m.0wsv496 .\n?x0 ns:film.film.written_by ?x1 .\n?x1 a ns:film.producer\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x0 P3 ?x1 .\n?x1 a M1\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 34
  },
  {
    "questionIdx": 125982,
    "questionWithBrackets": "Were [The Campaign], [Two Evil Eyes], [The Sect], [Creepers], and [Trauma] produced by [Deep Red]'s writer and star",
    "questionPatternModEntities": "Were M1 , M2 , M3 , M4 , and M5 produced by M0 's writer and star",
    "questionTemplate": "Were [entity] , [entity] , [entity] , [entity] , and [entity] [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] and [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.actor.film/ns:film.performance.film ns:m.0bntlf .\n?x0 ns:film.writer.film ns:m.0bntlf .\nns:m.02rns0q ns:film.film.produced_by|ns:film.film.production_companies ?x0 .\nns:m.0bbt9g ns:film.film.produced_by|ns:film.film.production_companies ?x0 .\nns:m.0bm15g ns:film.film.produced_by|ns:film.film.production_companies ?x0 .\nns:m.0dwcs4 ns:film.film.produced_by|ns:film.film.production_companies ?x0 .\nns:m.0hgnvc3 ns:film.film.produced_by|ns:film.film.production_companies ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M0 .\nM1 P2 ?x0 .\nM2 P2 ?x0 .\nM3 P2 ?x0 .\nM4 P2 ?x0 .\nM5 P2 ?x0\n}",
    "expectedResponse": "No",
    "recursionDepth": 34
  },
  {
    "questionIdx": 76083,
    "questionWithBrackets": "Was [Shaw Brothers Studio] a film producer that [The House of 72 Tenants] was distributed by and [The One-Armed Swordsman] was distributed by",
    "questionPatternModEntities": "Was M0 a film producer that M2 was distributed by and M3 was distributed by",
    "questionTemplate": "Was [entity] a [NP_SIMPLE] that [entity] was [VP_SIMPLE] by and [entity] was [VP_SIMPLE] by",
    "sparql": "SELECT count(*) WHERE {\nns:m.01b83_ a ns:film.producer .\nns:m.01b83_ ns:film.film_distributor.films_distributed/ns:film.film_film_distributor_relationship.film ns:m.04j0mv5 .\nns:m.01b83_ ns:film.film_distributor.films_distributed/ns:film.film_film_distributor_relationship.film ns:m.0kv870\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M2 .\nM0 P0 M3 .\nM0 a M1\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 34
  },
  {
    "questionIdx": 145148,
    "questionWithBrackets": "What did [Mary, Mother of Jesus]'s female executive producer's sibling found and [Mark Shriver] found",
    "questionPatternModEntities": "What did M1 's female executive producer 's sibling found and M0 found",
    "questionTemplate": "What did [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] 's [ROLE_SIMPLE] [VP_SIMPLE] and [entity] [VP_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:organization.organization.founders ?x1 .\n?x0 ns:organization.organization.founders ns:m.02frx4 .\n?x1 ns:people.person.sibling_s/ns:people.sibling_relationship.sibling|ns:fictional_universe.fictional_character.siblings/ns:fictional_universe.sibling_relationship_of_fictional_characters.siblings ?x2 .\n?x2 ns:film.producer.films_executive_produced ns:m.0b81m4 .\n?x2 ns:people.person.gender ns:m.02zsn .\nFILTER ( ?x1 != ?x2 )\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P0 M0 .\n?x1 P1 ?x2 .\n?x2 P2 M1 .\n?x2 P3 M2 .\nFILTER ( ?x1 != ?x2 )\n}",
    "expectedResponse": "Peace Corps",
    "recursionDepth": 34
  },
  {
    "questionIdx": 38,
    "questionWithBrackets": "Did [1941] star a male person's child and star [Dory Manzour]",
    "questionPatternModEntities": "Did M2 star a male person 's child and star M3",
    "questionTemplate": "Did [entity] [VP_SIMPLE] a [ADJECTIVE_SIMPLE] [NP_SIMPLE] 's [ROLE_SIMPLE] and [VP_SIMPLE] [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:people.person.parents|ns:fictional_universe.fictional_character.parents|ns:organization.organization.parent/ns:organization.organization_relationship.parent ?x1 .\n?x1 a ns:people.person .\n?x1 ns:people.person.gender ns:m.05zppz .\nns:m.04t6fk ns:film.film.starring/ns:film.performance.actor ?x0 .\nns:m.04t6fk ns:film.film.starring/ns:film.performance.actor ns:m.0v8zl19\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x1 P1 M1 .\n?x1 a M0 .\nM2 P2 ?x0 .\nM2 P2 M3\n}",
    "expectedResponse": "No",
    "recursionDepth": 34
  },
  {
    "questionIdx": 116640,
    "questionWithBrackets": "Were [Federal Art Project], [Tennessee Valley Authority], [Fannie Mae], [Public Works Administration], [United Service Organizations], and [Home Owners' Loan Corporation] founded by a parent of [Anna Roosevelt Halsted]",
    "questionPatternModEntities": "Were M1 , M2 , M3 , M4 , M5 , and M6 founded by a parent of M0",
    "questionTemplate": "Were [entity] , [entity] , [entity] , [entity] , [entity] , and [entity] [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:people.person.children|ns:fictional_universe.fictional_character.children|ns:organization.organization.child/ns:organization.organization_relationship.child ns:m.026jn1 .\nns:m.019r_w ns:organization.organization.founders ?x0 .\nns:m.01qxf8 ns:organization.organization.founders ?x0 .\nns:m.02np5x ns:organization.organization.founders ?x0 .\nns:m.0fh2p ns:organization.organization.founders ?x0 .\nns:m.0fh30 ns:organization.organization.founders ?x0 .\nns:m.0fh3h ns:organization.organization.founders ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 ?x0 .\nM2 P1 ?x0 .\nM3 P1 ?x0 .\nM4 P1 ?x0 .\nM5 P1 ?x0 .\nM6 P1 ?x0\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 34
  },
  {
    "questionIdx": 18841,
    "questionWithBrackets": "Did [Saving Mr. Banks] star [Anna Roberts] and star a person's British sibling",
    "questionPatternModEntities": "Did M2 star M3 and star a person 's British sibling",
    "questionTemplate": "Did [entity] [VP_SIMPLE] [entity] and [VP_SIMPLE] a [NP_SIMPLE] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:people.person.nationality ns:m.07ssc .\n?x0 ns:people.person.sibling_s/ns:people.sibling_relationship.sibling|ns:fictional_universe.fictional_character.siblings/ns:fictional_universe.sibling_relationship_of_fictional_characters.siblings ?x1 .\n?x1 a ns:people.person .\nFILTER ( ?x0 != ?x1 ) .\nns:m.0k3lpxc ns:film.film.starring/ns:film.performance.actor ?x0 .\nns:m.0k3lpxc ns:film.film.starring/ns:film.performance.actor ns:m.0w22dpd\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x0 P1 M0 .\n?x1 a M1 .\nFILTER ( ?x0 != ?x1 ) .\nM2 P2 ?x0 .\nM2 P2 M3\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 34
  },
  {
    "questionIdx": 18099,
    "questionWithBrackets": "Did [Rick Sloane] write, edit, and produce a prequel of a film",
    "questionPatternModEntities": "Did M1 write , edit , and produce a prequel of a film",
    "questionTemplate": "Did [entity] [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] a [ROLE_SIMPLE] of a [NP_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.film.sequel ?x1 .\n?x1 a ns:film.film .\nns:m.09nlnc ns:film.editor.film ?x0 .\nns:m.09nlnc ns:film.producer.film|ns:film.production_company.films ?x0 .\nns:m.09nlnc ns:film.writer.film ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x1 a M0 .\nM1 P1 ?x0 .\nM1 P2 ?x0 .\nM1 P3 ?x0\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 34
  },
  {
    "questionIdx": 150644,
    "questionWithBrackets": "What did a screenwriter found and a cinematographer of [Night Owls] and [Brats] found",
    "questionPatternModEntities": "What did a screenwriter found and a cinematographer of M1 and M2 found",
    "questionTemplate": "What did a [NP_SIMPLE] [VP_SIMPLE] and a [ROLE_SIMPLE] of [entity] and [entity] [VP_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:organization.organization.founders ?x1 .\n?x0 ns:organization.organization.founders ?x2 .\n?x1 a ns:film.writer .\n?x2 ns:film.cinematographer.film ns:m.026ktnx .\n?x2 ns:film.cinematographer.film ns:m.06rj44\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P0 ?x2 .\n?x1 a M0 .\n?x2 P1 M1 .\n?x2 P1 M2\n}",
    "expectedResponse": "Liberty Films",
    "recursionDepth": 34
  },
  {
    "questionIdx": 16717,
    "questionWithBrackets": "Did [PepsiCo] employ a person's American spouse and employ [Peter N. Kellogg]",
    "questionPatternModEntities": "Did M2 employ a person 's American spouse and employ M3",
    "questionTemplate": "Did [entity] [VP_SIMPLE] a [NP_SIMPLE] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] and [VP_SIMPLE] [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:people.person.nationality ns:m.09c7w0 .\n?x0 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ?x1 .\n?x1 a ns:people.person .\nFILTER ( ?x0 != ?x1 ) .\nns:m.04htfd ns:business.employer.employees/ns:business.employment_tenure.person ?x0 .\nns:m.04htfd ns:business.employer.employees/ns:business.employment_tenure.person ns:m.03wxrsx\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 ?x1 .\n?x1 a M1 .\nFILTER ( ?x0 != ?x1 ) .\nM2 P2 ?x0 .\nM2 P2 M3\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 34
  },
  {
    "questionIdx": 185402,
    "questionWithBrackets": "What was written by a person's child and parent and directed by [K\u00e1tia Lund]",
    "questionPatternModEntities": "What was written by a person 's child and parent and directed by M0",
    "questionTemplate": "What was [VP_SIMPLE] by a [NP_SIMPLE] 's [ROLE_SIMPLE] and [ROLE_SIMPLE] and [VP_SIMPLE] by [entity]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.film.directed_by ns:m.0ckgy4 .\n?x0 ns:film.film.written_by ?x1 .\n?x1 ns:people.person.children|ns:fictional_universe.fictional_character.children|ns:organization.organization.child/ns:organization.organization_relationship.child ?x2 .\n?x1 ns:people.person.parents|ns:fictional_universe.fictional_character.parents|ns:organization.organization.parent/ns:organization.organization_relationship.parent ?x2 .\n?x2 a ns:people.person\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 M0 .\n?x1 P2 ?x2 .\n?x1 P3 ?x2 .\n?x2 a M1\n}",
    "expectedResponse": "News from a Personal War",
    "recursionDepth": 34
  },
  {
    "questionIdx": 149948,
    "questionWithBrackets": "What did a film producer found and a writer of [Mei and the Kittenbus] and [The Castle of Cagliostro] found",
    "questionPatternModEntities": "What did a film producer found and a writer of M1 and M2 found",
    "questionTemplate": "What did a [NP_SIMPLE] [VP_SIMPLE] and a [ROLE_SIMPLE] of [entity] and [entity] [VP_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:organization.organization.founders ?x1 .\n?x0 ns:organization.organization.founders ?x2 .\n?x1 a ns:film.producer .\n?x2 ns:film.writer.film ns:m.0cwczl .\n?x2 ns:film.writer.film ns:m.0mbq3\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P0 ?x2 .\n?x1 a M0 .\n?x2 P1 M1 .\n?x2 P1 M2\n}",
    "expectedResponse": "Studio Ghibli",
    "recursionDepth": 34
  },
  {
    "questionIdx": 226820,
    "questionWithBrackets": "Who was a French screenwriter that [NYAV Post] was founded by and employed",
    "questionPatternModEntities": "Who was a French screenwriter that M2 was founded by and employed",
    "questionTemplate": "Who was a [ADJECTIVE_SIMPLE] [NP_SIMPLE] that [entity] was [VP_SIMPLE] by and [VP_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:film.writer .\n?x0 a ns:people.person .\n?x0 ns:organization.organization_founder.organizations_founded ns:m.0clfr7 .\n?x0 ns:people.person.employment_history/ns:business.employment_tenure.company ns:m.0clfr7 .\n?x0 ns:people.person.nationality ns:m.0f8l9c\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M2 .\n?x0 P1 M2 .\n?x0 P2 M3 .\n?x0 a M0 .\n?x0 a M1\n}",
    "expectedResponse": "Michael Sinterniklaas",
    "recursionDepth": 34
  },
  {
    "questionIdx": 40861,
    "questionWithBrackets": "Did an Italian film editor's parent play [Frank Baylies] and play [Douglas Michelson]",
    "questionPatternModEntities": "Did a Italian film editor 's parent play M0 and play M1",
    "questionTemplate": "Did a [ADJECTIVE_SIMPLE] [NP_SIMPLE] 's [ROLE_SIMPLE] [VP_SIMPLE] [entity] and [VP_SIMPLE] [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.actor.film/ns:film.performance.character ns:m.0n5d7nq .\n?x0 ns:film.actor.film/ns:film.performance.character ns:m.0y8kjp_ .\n?x0 ns:people.person.children|ns:fictional_universe.fictional_character.children|ns:organization.organization.child/ns:organization.organization_relationship.child ?x1 .\n?x1 a ns:film.editor .\n?x1 ns:people.person.nationality ns:m.03rjj\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P1 ?x1 .\n?x1 P2 M3 .\n?x1 a M2\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 34
  },
  {
    "questionIdx": 14655,
    "questionWithBrackets": "Did [Merle Oberon] marry a film editor and marry [White Feather]'s male cinematographer",
    "questionPatternModEntities": "Did M3 marry a film editor and marry M2 's male cinematographer",
    "questionTemplate": "Did [entity] [VP_SIMPLE] a [NP_SIMPLE] and [VP_SIMPLE] [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 a ns:film.editor .\n?x1 ns:film.cinematographer.film ns:m.064n_mb .\n?x1 ns:people.person.gender ns:m.05zppz .\nFILTER ( ns:m.017tkv != ?x0 ) .\nFILTER ( ns:m.017tkv != ?x1 ) .\nns:m.017tkv ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ?x0 .\nns:m.017tkv ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ?x1\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 a M0 .\n?x1 P0 M1 .\n?x1 P1 M2 .\nFILTER ( M3 != ?x0 ) .\nFILTER ( M3 != ?x1 ) .\nM3 P2 ?x0 .\nM3 P2 ?x1\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 34
  },
  {
    "questionIdx": 8045,
    "questionWithBrackets": "Did [Gabbar Singh] star [Jana Sena Party]'s founder and star [The Boondock Saints]'s producer's spouse",
    "questionPatternModEntities": "Did M2 star M1 's founder and star M0 's producer 's spouse",
    "questionTemplate": "Did [entity] [VP_SIMPLE] [entity] 's [ROLE_SIMPLE] and [VP_SIMPLE] [entity] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ?x1 .\n?x1 ns:film.producer.film|ns:film.production_company.films ns:m.02kp5p .\n?x2 ns:organization.organization_founder.organizations_founded ns:m.0_yfg74 .\nFILTER ( ?x0 != ?x1 ) .\nns:m.0g9xnr0 ns:film.film.starring/ns:film.performance.actor ?x0 .\nns:m.0g9xnr0 ns:film.film.starring/ns:film.performance.actor ?x2\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x1 P1 M0 .\n?x2 P2 M1 .\nFILTER ( ?x0 != ?x1 ) .\nM2 P3 ?x0 .\nM2 P3 ?x2\n}",
    "expectedResponse": "No",
    "recursionDepth": 34
  },
  {
    "questionIdx": 29400,
    "questionWithBrackets": "Did a character marry [James Dougherty] and influence [I Am Because We Are]'s female executive producer",
    "questionPatternModEntities": "Did a character marry M1 and influence M2 's female executive producer",
    "questionTemplate": "Did a [NP_SIMPLE] [VP_SIMPLE] [entity] and [VP_SIMPLE] [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 a ns:fictional_universe.fictional_character .\n?x0 ns:influence.influence_node.influenced ?x1 .\n?x0 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ns:m.07g_2g .\n?x1 ns:film.producer.films_executive_produced ns:m.03cfts5 .\n?x1 ns:people.person.gender ns:m.02zsn .\nFILTER ( ?x0 != ns:m.07g_2g )\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x0 P1 M1 .\n?x0 a M0 .\n?x1 P2 M2 .\n?x1 P3 M3 .\nFILTER ( ?x0 != M1 )\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 34
  },
  {
    "questionIdx": 178339,
    "questionWithBrackets": "What was executive produced by and produced by a costume designer, editor, and producer of [The Brown Bunny]",
    "questionPatternModEntities": "What was executive produced by and produced by a costume designer , editor , and producer of M0",
    "questionTemplate": "What was [VP_SIMPLE] by and [VP_SIMPLE] by a [ROLE_SIMPLE] , [ROLE_SIMPLE] , and [ROLE_SIMPLE] of [entity]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.film.executive_produced_by ?x1 .\n?x0 ns:film.film.produced_by|ns:film.film.production_companies ?x1 .\n?x1 ns:film.editor.film ns:m.01n9cy .\n?x1 ns:film.film_costumer_designer.costume_design_for_film ns:m.01n9cy .\n?x1 ns:film.producer.film|ns:film.production_company.films ns:m.01n9cy\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x1 P2 M0 .\n?x1 P3 M0 .\n?x1 P4 M0\n}",
    "expectedResponse": "Promises Written in Water",
    "recursionDepth": 35
  },
  {
    "questionIdx": 170524,
    "questionWithBrackets": "What was directed by [Wes Craven], directed by an actor, and executive produced by [Ara Katz]",
    "questionPatternModEntities": "What was directed by M1 , directed by a actor , and executive produced by M0",
    "questionTemplate": "What was [VP_SIMPLE] by [entity] , [VP_SIMPLE] by a [NP_SIMPLE] , and [VP_SIMPLE] by [entity]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.film.directed_by ?x1 .\n?x0 ns:film.film.directed_by ns:m.013zyw .\n?x0 ns:film.film.executive_produced_by ns:m.04mv77t .\n?x1 a ns:film.actor\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 ?x1 .\n?x0 P1 M1 .\n?x1 a M2\n}",
    "expectedResponse": "Paris, je t'aime",
    "recursionDepth": 35
  },
  {
    "questionIdx": 219111,
    "questionWithBrackets": "Who influenced a Chinese film director and was influenced by [Man Ray] and [Tom of Finland]",
    "questionPatternModEntities": "Who influenced a Chinese film director and was influenced by M1 and M2",
    "questionTemplate": "Who [VP_SIMPLE] a [ADJECTIVE_SIMPLE] [NP_SIMPLE] and was [VP_SIMPLE] by [entity] and [entity]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:people.person .\n?x0 ns:influence.influence_node.influenced ?x1 .\n?x0 ns:influence.influence_node.influenced_by ns:m.024hjy .\n?x0 ns:influence.influence_node.influenced_by ns:m.0gskj .\n?x1 a ns:film.director .\n?x1 ns:people.person.nationality ns:m.0d05w3\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 M1 .\n?x0 P1 M2 .\n?x0 a M0 .\n?x1 P2 M4 .\n?x1 a M3\n}",
    "expectedResponse": "Andy Warhol",
    "recursionDepth": 35
  },
  {
    "questionIdx": 98233,
    "questionWithBrackets": "Was a film editor that [Jacques Demy] influenced, married, and was influenced by [Agn\u00e8s Varda]",
    "questionPatternModEntities": "Was a film editor that M2 influenced , married , and was influenced by M0",
    "questionTemplate": "Was a [NP_SIMPLE] that [entity] [VP_SIMPLE] , [VP_SIMPLE] , and was [VP_SIMPLE] by [entity]",
    "sparql": "SELECT count(*) WHERE {\nFILTER ( ns:m.01vylt != ns:m.046dxx ) .\nns:m.01vylt a ns:film.editor .\nns:m.01vylt ns:influence.influence_node.influenced ns:m.046dxx .\nns:m.01vylt ns:influence.influence_node.influenced_by ns:m.046dxx .\nns:m.01vylt ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ns:m.046dxx\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\nFILTER ( M0 != M2 ) .\nM0 P0 M2 .\nM0 P1 M2 .\nM0 P2 M2 .\nM0 a M1\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 35
  },
  {
    "questionIdx": 70035,
    "questionWithBrackets": "Was [On the Green Carpet] produced by and directed by an art director of a prequel of a film",
    "questionPatternModEntities": "Was M1 produced by and directed by a art director of a prequel of a film",
    "questionTemplate": "Was [entity] [VP_SIMPLE] by and [VP_SIMPLE] by a [ROLE_SIMPLE] of a [ROLE_SIMPLE] of a [NP_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.film_art_director.films_art_directed ?x1 .\n?x1 ns:film.film.sequel ?x2 .\n?x2 a ns:film.film .\nns:m.04yblxq ns:film.film.directed_by ?x0 .\nns:m.04yblxq ns:film.film.produced_by|ns:film.film.production_companies ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x1 P1 ?x2 .\n?x2 a M0 .\nM1 P2 ?x0 .\nM1 P3 ?x0\n}",
    "expectedResponse": "No",
    "recursionDepth": 35
  },
  {
    "questionIdx": 3488,
    "questionWithBrackets": "Did [Cabuche]'s actor influence a costume designer and influence a director of [Offside]",
    "questionPatternModEntities": "Did M0 's actor influence a costume designer and influence a director of M2",
    "questionTemplate": "Did [entity] 's [ROLE_SIMPLE] [VP_SIMPLE] a [NP_SIMPLE] and [VP_SIMPLE] a [ROLE_SIMPLE] of [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.actor.film/ns:film.performance.character ns:m.010q2_6n .\n?x0 ns:influence.influence_node.influenced ?x1 .\n?x0 ns:influence.influence_node.influenced ?x2 .\n?x1 a ns:film.film_costumer_designer .\n?x2 ns:film.director.film ns:m.0273335\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x0 P0 ?x2 .\n?x0 P1 M0 .\n?x1 a M1 .\n?x2 P2 M2\n}",
    "expectedResponse": "No",
    "recursionDepth": 35
  },
  {
    "questionIdx": 124800,
    "questionWithBrackets": "Were [Somewhere] and [The Bling Ring] produced by and directed by a film's director's child",
    "questionPatternModEntities": "Were M1 and M2 produced by and directed by a film 's director 's child",
    "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by and [VP_SIMPLE] by a [NP_SIMPLE] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:people.person.parents|ns:fictional_universe.fictional_character.parents|ns:organization.organization.parent/ns:organization.organization_relationship.parent ?x1 .\n?x1 ns:film.director.film ?x2 .\n?x2 a ns:film.film .\nns:m.06_vlp9 ns:film.film.directed_by ?x0 .\nns:m.06_vlp9 ns:film.film.produced_by|ns:film.film.production_companies ?x0 .\nns:m.0kbj11v ns:film.film.directed_by ?x0 .\nns:m.0kbj11v ns:film.film.produced_by|ns:film.film.production_companies ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x1 P1 ?x2 .\n?x2 a M0 .\nM1 P2 ?x0 .\nM1 P3 ?x0 .\nM2 P2 ?x0 .\nM2 P3 ?x0\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 35
  },
  {
    "questionIdx": 150749,
    "questionWithBrackets": "What did a sibling of [Get on the Bus]'s star write, executive produce, and edit",
    "questionPatternModEntities": "What did a sibling of M0 's star write , executive produce , and edit",
    "questionTemplate": "What did a [ROLE_SIMPLE] of [entity] 's [ROLE_SIMPLE] [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.film.edited_by ?x1 .\n?x0 ns:film.film.executive_produced_by ?x1 .\n?x0 ns:film.film.written_by ?x1 .\n?x1 ns:people.person.sibling_s/ns:people.sibling_relationship.sibling|ns:fictional_universe.fictional_character.siblings/ns:fictional_universe.sibling_relationship_of_fictional_characters.siblings ?x2 .\n?x2 ns:film.actor.film/ns:film.performance.film ns:m.0cmdm1 .\nFILTER ( ?x1 != ?x2 )\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x1 P3 ?x2 .\n?x2 P4 M0 .\nFILTER ( ?x1 != ?x2 )\n}",
    "expectedResponse": "Window on Your Present",
    "recursionDepth": 35
  },
  {
    "questionIdx": 185083,
    "questionWithBrackets": "What was written by a Chinese film director and executive produced by [Bai Ling] and [Edward Tian Suning]",
    "questionPatternModEntities": "What was written by a Chinese film director and executive produced by M0 and M1",
    "questionTemplate": "What was [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [NP_SIMPLE] and [VP_SIMPLE] by [entity] and [entity]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.film.executive_produced_by ns:m.02lnhv .\n?x0 ns:film.film.executive_produced_by ns:m.04gc7wv .\n?x0 ns:film.film.written_by ?x1 .\n?x1 a ns:film.director .\n?x1 ns:people.person.nationality ns:m.0d05w3\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P1 ?x1 .\n?x1 P2 M3 .\n?x1 a M2\n}",
    "expectedResponse": "Bodyguards and Assassins",
    "recursionDepth": 35
  },
  {
    "questionIdx": 43736,
    "questionWithBrackets": "Was [A Matter of Hair] directed, produced, and written by a Spanish sibling of [Eduardo Bajo Ulloa]",
    "questionPatternModEntities": "Was M2 directed , produced , and written by a Spanish sibling of M0",
    "questionTemplate": "Was [entity] [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:people.person.nationality ns:m.06mkj .\n?x0 ns:people.person.sibling_s/ns:people.sibling_relationship.sibling|ns:fictional_universe.fictional_character.siblings/ns:fictional_universe.sibling_relationship_of_fictional_characters.siblings ns:m.0cgh4s8 .\nFILTER ( ?x0 != ns:m.0cgh4s8 ) .\nns:m.02r55y1 ns:film.film.directed_by ?x0 .\nns:m.02r55y1 ns:film.film.produced_by|ns:film.film.production_companies ?x0 .\nns:m.02r55y1 ns:film.film.written_by ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M0 ) .\nM2 P2 ?x0 .\nM2 P3 ?x0 .\nM2 P4 ?x0\n}",
    "expectedResponse": "No",
    "recursionDepth": 35
  },
  {
    "questionIdx": 81500,
    "questionWithBrackets": "Was [The Long and Short of It] executive produced by a screenwriter that [The House of the Devil] was edited by and starred",
    "questionPatternModEntities": "Was M2 executive produced by a screenwriter that M1 was edited by and starred",
    "questionTemplate": "Was [entity] [VP_SIMPLE] by a [NP_SIMPLE] that [entity] was [VP_SIMPLE] by and [VP_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 a ns:film.writer .\n?x0 ns:film.actor.film/ns:film.performance.film ns:m.063yc35 .\n?x0 ns:film.editor.film ns:m.063yc35 .\nns:m.0kv96r ns:film.film.executive_produced_by ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M1 .\n?x0 P1 M1 .\n?x0 a M0 .\nM2 P2 ?x0\n}",
    "expectedResponse": "No",
    "recursionDepth": 35
  },
  {
    "questionIdx": 68349,
    "questionWithBrackets": "Was [Muktodhara] written by an art director's female spouse and directed by [Shiboprosad mukherjee]",
    "questionPatternModEntities": "Was M2 written by a art director 's female spouse and directed by M3",
    "questionTemplate": "Was [entity] [VP_SIMPLE] by a [NP_SIMPLE] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] and [VP_SIMPLE] by [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:people.person.gender ns:m.02zsn .\n?x0 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ?x1 .\n?x1 a ns:film.film_art_director .\nFILTER ( ?x0 != ?x1 ) .\nns:m.0ll0xhf ns:film.film.directed_by ns:m.010x1myz .\nns:m.0ll0xhf ns:film.film.written_by ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 ?x1 .\n?x1 a M1 .\nFILTER ( ?x0 != ?x1 ) .\nM2 P2 ?x0 .\nM2 P3 M3\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 35
  },
  {
    "questionIdx": 32387,
    "questionWithBrackets": "Did a female person executive produce [Malaysian Gods] and [This Longing] and edit [The Life of Rosa]",
    "questionPatternModEntities": "Did a female person executive produce M2 and M3 and edit M1",
    "questionTemplate": "Did a [ADJECTIVE_SIMPLE] [NP_SIMPLE] [VP_SIMPLE] [entity] and [entity] and [VP_SIMPLE] [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 a ns:people.person .\n?x0 ns:film.editor.film ns:m.0j311ms .\n?x0 ns:film.producer.films_executive_produced ns:m.05q7dmq .\n?x0 ns:film.producer.films_executive_produced ns:m.05q9j91 .\n?x0 ns:people.person.gender ns:m.02zsn\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M1 .\n?x0 P1 M2 .\n?x0 P1 M3 .\n?x0 P2 M4 .\n?x0 a M0\n}",
    "expectedResponse": "No",
    "recursionDepth": 35
  },
  {
    "questionIdx": 157581,
    "questionWithBrackets": "What film producer founded [She's the Man]'s producer and distributor and was employed by [DreamWorks Animation]",
    "questionPatternModEntities": "What film producer founded M2 's producer and distributor and was employed by M1",
    "questionTemplate": "What [NP_SIMPLE] [VP_SIMPLE] [entity] 's [ROLE_SIMPLE] and [ROLE_SIMPLE] and was [VP_SIMPLE] by [entity]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:film.producer .\n?x0 ns:organization.organization_founder.organizations_founded ?x1 .\n?x0 ns:people.person.employment_history/ns:business.employment_tenure.company ns:m.056ws9 .\n?x1 ns:film.film_distributor.films_distributed/ns:film.film_film_distributor_relationship.film ns:m.0818gg .\n?x1 ns:film.producer.film|ns:film.production_company.films ns:m.0818gg\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M1 .\n?x0 P1 ?x1 .\n?x0 a M0 .\n?x1 P2 M2 .\n?x1 P3 M2\n}",
    "expectedResponse": "Jeffrey Katzenberg",
    "recursionDepth": 35
  },
  {
    "questionIdx": 234634,
    "questionWithBrackets": "Who was employed by [Manga Entertainment], founded a film distributor, and founded [Island Records]",
    "questionPatternModEntities": "Who was employed by M1 , founded a film distributor , and founded M2",
    "questionTemplate": "Who was [VP_SIMPLE] by [entity] , [VP_SIMPLE] a [NP_SIMPLE] , and [VP_SIMPLE] [entity]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:people.person .\n?x0 ns:organization.organization_founder.organizations_founded ?x1 .\n?x0 ns:organization.organization_founder.organizations_founded ns:m.0mzkr .\n?x0 ns:people.person.employment_history/ns:business.employment_tenure.company ns:m.01w66z .\n?x1 a ns:film.film_distributor\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M1 .\n?x0 P1 ?x1 .\n?x0 P1 M2 .\n?x0 a M0 .\n?x1 a M3\n}",
    "expectedResponse": "Chris Blackwell",
    "recursionDepth": 35
  },
  {
    "questionIdx": 46387,
    "questionWithBrackets": "Was [Ariadna Gil] a film producer whose Spanish spouse edited and wrote [Soldiers Of Salamina]",
    "questionPatternModEntities": "Was M2 a film producer whose Spanish spouse edited and wrote M0",
    "questionTemplate": "Was [entity] a [NP_SIMPLE] whose [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] [VP_SIMPLE] and [VP_SIMPLE] [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.editor.film ns:m.07cdwl .\n?x0 ns:film.writer.film ns:m.07cdwl .\n?x0 ns:people.person.nationality ns:m.06mkj .\nFILTER ( ns:m.02805gx != ?x0 ) .\nns:m.02805gx a ns:film.producer .\nns:m.02805gx ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M0 .\n?x0 P2 M1 .\nFILTER ( M2 != ?x0 ) .\nM2 P3 ?x0 .\nM2 a M3\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 35
  },
  {
    "questionIdx": 17209,
    "questionWithBrackets": "Did [Princeton University] employ [Roger Toussaint]'s American sibling and employ [Janette Hegner]'s spouse",
    "questionPatternModEntities": "Did M3 employ M0 's American sibling and employ M2 's spouse",
    "questionTemplate": "Did [entity] [VP_SIMPLE] [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] and [VP_SIMPLE] [entity] 's [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:people.person.nationality ns:m.09c7w0 .\n?x0 ns:people.person.sibling_s/ns:people.sibling_relationship.sibling|ns:fictional_universe.fictional_character.siblings/ns:fictional_universe.sibling_relationship_of_fictional_characters.siblings ns:m.09ckyp .\n?x1 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ns:m.0hnt9hb .\nFILTER ( ?x0 != ns:m.09ckyp ) .\nFILTER ( ?x1 != ns:m.0hnt9hb ) .\nns:m.05zl0 ns:business.employer.employees/ns:business.employment_tenure.person ?x0 .\nns:m.05zl0 ns:business.employer.employees/ns:business.employment_tenure.person ?x1\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x1 P2 M2 .\nFILTER ( ?x0 != M0 ) .\nFILTER ( ?x1 != M2 ) .\nM3 P3 ?x0 .\nM3 P3 ?x1\n}",
    "expectedResponse": "No",
    "recursionDepth": 35
  },
  {
    "questionIdx": 172163,
    "questionWithBrackets": "What was distributed by [Bob Iger]'s employer, produced by [David Nicksay], and distributed by [Touchstone Pictures]",
    "questionPatternModEntities": "What was distributed by M2 's employer , produced by M1 , and distributed by M0",
    "questionTemplate": "What was [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.film.distributors/ns:film.film_film_distributor_relationship.distributor ?x1 .\n?x0 ns:film.film.distributors/ns:film.film_film_distributor_relationship.distributor ns:m.020h2v .\n?x0 ns:film.film.produced_by|ns:film.film.production_companies ns:m.0jv3j7 .\n?x1 ns:business.employer.employees/ns:business.employment_tenure.person ns:m.05chnj\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x1 P2 M2\n}",
    "expectedResponse": "Up Close & Personal",
    "recursionDepth": 35
  },
  {
    "questionIdx": 99446,
    "questionWithBrackets": "Was a film producer whose Canadian sibling produced and wrote [The Search for Santa Paws] [William Vince]",
    "questionPatternModEntities": "Was a film producer whose Canadian sibling produced and wrote M0 M2",
    "questionTemplate": "Was a [NP_SIMPLE] whose [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] [VP_SIMPLE] and [VP_SIMPLE] [entity] [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.producer.film|ns:film.production_company.films ns:m.08ntllg .\n?x0 ns:film.writer.film ns:m.08ntllg .\n?x0 ns:people.person.nationality ns:m.0d060g .\nFILTER ( ns:m.04cvqxr != ?x0 ) .\nns:m.04cvqxr a ns:film.producer .\nns:m.04cvqxr ns:people.person.sibling_s/ns:people.sibling_relationship.sibling|ns:fictional_universe.fictional_character.siblings/ns:fictional_universe.sibling_relationship_of_fictional_characters.siblings ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P2 M0 .\nFILTER ( M2 != ?x0 ) .\nM2 P3 ?x0 .\nM2 a M3\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 35
  },
  {
    "questionIdx": 204392,
    "questionWithBrackets": "Which film producer was founded by [Disney Interactive]'s founder and was founded by a film producer",
    "questionPatternModEntities": "Which film producer was founded by M1 's founder and was founded by a film producer",
    "questionTemplate": "Which [NP_SIMPLE] was [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] and was [VP_SIMPLE] by a [NP_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:film.producer .\n?x0 ns:organization.organization.founders ?x1 .\n?x0 ns:organization.organization.founders ?x2 .\n?x1 ns:organization.organization_founder.organizations_founded ns:m.047cb57 .\n?x2 a ns:film.producer\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P0 ?x2 .\n?x0 a M0 .\n?x1 P1 M1 .\n?x2 a M0\n}",
    "expectedResponse": "Walt Disney Animation Studios",
    "recursionDepth": 35
  },
  {
    "questionIdx": 206208,
    "questionWithBrackets": "Which male French film editor edited [Backstreets of Paris] and executive produced [French Connexion]",
    "questionPatternModEntities": "Which male French film editor edited M1 and executive produced M2",
    "questionTemplate": "Which [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [NP_SIMPLE] [VP_SIMPLE] [entity] and [VP_SIMPLE] [entity]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:film.editor .\n?x0 ns:film.editor.film ns:m.0hypxj2 .\n?x0 ns:film.producer.films_executive_produced ns:m.0hyql59 .\n?x0 ns:people.person.gender ns:m.05zppz .\n?x0 ns:people.person.nationality ns:m.0f8l9c\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M1 .\n?x0 P1 M2 .\n?x0 P2 M3 .\n?x0 P3 M4 .\n?x0 a M0\n}",
    "expectedResponse": "Marc Dorcel",
    "recursionDepth": 35
  },
  {
    "questionIdx": 217835,
    "questionWithBrackets": "Who founded a film producer, founded [Walt Disney Records], and was employed by [The Walt Disney Company]",
    "questionPatternModEntities": "Who founded a film producer , founded M2 , and was employed by M1",
    "questionTemplate": "Who [VP_SIMPLE] a [NP_SIMPLE] , [VP_SIMPLE] [entity] , and was [VP_SIMPLE] by [entity]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:people.person .\n?x0 ns:organization.organization_founder.organizations_founded ?x1 .\n?x0 ns:organization.organization_founder.organizations_founded ns:m.03tg5s .\n?x0 ns:people.person.employment_history/ns:business.employment_tenure.company ns:m.09b3v .\n?x1 a ns:film.producer\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M1 .\n?x0 P1 ?x1 .\n?x0 P1 M2 .\n?x0 a M0 .\n?x1 a M3\n}",
    "expectedResponse": "Walt Disney; Roy O. Disney",
    "recursionDepth": 35
  },
  {
    "questionIdx": 9020,
    "questionWithBrackets": "Did [Gustavo Alatriste] marry [Valerie Mathis]'s Mexican actor's sibling and marry [Sonia Infante]",
    "questionPatternModEntities": "Did M2 marry M1 's Mexican actor 's sibling and marry M3",
    "questionTemplate": "Did [entity] [VP_SIMPLE] [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] 's [ROLE_SIMPLE] and [VP_SIMPLE] [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:people.person.sibling_s/ns:people.sibling_relationship.sibling|ns:fictional_universe.fictional_character.siblings/ns:fictional_universe.sibling_relationship_of_fictional_characters.siblings ?x1 .\n?x1 ns:film.actor.film/ns:film.performance.character ns:m.08nb_sk .\n?x1 ns:people.person.nationality ns:m.0b90_r .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ns:m.06wcp_ != ?x0 ) .\nFILTER ( ns:m.06wcp_ != ns:m.0bz6v0h ) .\nns:m.06wcp_ ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ?x0 .\nns:m.06wcp_ ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ns:m.0bz6v0h\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x1 P1 M0 .\n?x1 P2 M1 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( M2 != ?x0 ) .\nFILTER ( M2 != M3 ) .\nM2 P3 ?x0 .\nM2 P3 M3\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 35
  },
  {
    "questionIdx": 157658,
    "questionWithBrackets": "What film producer influenced, was influenced by, and married a cinematographer of [The Beaches of Agn\u00e8s]",
    "questionPatternModEntities": "What film producer influenced , was influenced by , and married a cinematographer of M1",
    "questionTemplate": "What [NP_SIMPLE] [VP_SIMPLE] , was [VP_SIMPLE] by , and [VP_SIMPLE] a [ROLE_SIMPLE] of [entity]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:film.producer .\n?x0 ns:influence.influence_node.influenced ?x1 .\n?x0 ns:influence.influence_node.influenced_by ?x1 .\n?x0 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ?x1 .\n?x1 ns:film.cinematographer.film ns:m.04nm0cr .\nFILTER ( ?x0 != ?x1 )\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x0 a M0 .\n?x1 P3 M1 .\nFILTER ( ?x0 != ?x1 )\n}",
    "expectedResponse": "Jacques Demy",
    "recursionDepth": 35
  },
  {
    "questionIdx": 84256,
    "questionWithBrackets": "Was [Troma Entertainment] a production company whose founder and employee directed and produced [The First Turn-On!]",
    "questionPatternModEntities": "Was M1 a production company whose founder and employee directed and produced M0",
    "questionTemplate": "Was [entity] a [NP_SIMPLE] whose [ROLE_SIMPLE] and [ROLE_SIMPLE] [VP_SIMPLE] and [VP_SIMPLE] [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.director.film ns:m.02vwvl4 .\n?x0 ns:film.producer.film|ns:film.production_company.films ns:m.02vwvl4 .\nns:m.0qf1j a ns:film.production_company .\nns:m.0qf1j ns:business.employer.employees/ns:business.employment_tenure.person ?x0 .\nns:m.0qf1j ns:organization.organization.founders ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M0 .\nM1 P2 ?x0 .\nM1 P3 ?x0 .\nM1 a M2\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 35
  },
  {
    "questionIdx": 5251,
    "questionWithBrackets": "Did [David Cronenberg] influence [Rivers of Fire and Ice]'s prequel's Japanese cinematographer and influence [Christophe Gans]",
    "questionPatternModEntities": "Did M2 influence M1 's prequel 's Japanese cinematographer and influence M3",
    "questionTemplate": "Did [entity] [VP_SIMPLE] [entity] 's [ROLE_SIMPLE] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] and [VP_SIMPLE] [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.cinematographer.film ?x1 .\n?x0 ns:people.person.nationality ns:m.03_3d .\n?x1 ns:film.film.sequel ns:m.065zr99 .\nns:m.026fd ns:influence.influence_node.influenced ?x0 .\nns:m.026fd ns:influence.influence_node.influenced ns:m.08ghwh\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 ?x1 .\n?x1 P2 M1 .\nM2 P3 ?x0 .\nM2 P3 M3\n}",
    "expectedResponse": "No",
    "recursionDepth": 35
  },
  {
    "questionIdx": 5174,
    "questionWithBrackets": "Did [Darcy LaPier] marry [Luc Deveraux]'s male actor and marry [Mark R. Hughes] and [Brian Snodgrass]",
    "questionPatternModEntities": "Did M2 marry M0 's male actor and marry M3 and M4",
    "questionTemplate": "Did [entity] [VP_SIMPLE] [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] and [VP_SIMPLE] [entity] and [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.actor.film/ns:film.performance.character ns:m.0fp_855 .\n?x0 ns:people.person.gender ns:m.05zppz .\nFILTER ( ns:m.02qn2km != ?x0 ) .\nFILTER ( ns:m.02qn2km != ns:m.05yxlwn ) .\nFILTER ( ns:m.02qn2km != ns:m.07wwc0 ) .\nns:m.02qn2km ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ?x0 .\nns:m.02qn2km ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ns:m.05yxlwn .\nns:m.02qn2km ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ns:m.07wwc0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( M2 != ?x0 ) .\nFILTER ( M2 != M3 ) .\nFILTER ( M2 != M4 ) .\nM2 P2 ?x0 .\nM2 P2 M3 .\nM2 P2 M4\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 35
  },
  {
    "questionIdx": 83659,
    "questionWithBrackets": "Was [To Die Like a Man] written by a male person and written by [Sirf Main Aur Tum]'s editor",
    "questionPatternModEntities": "Was M3 written by a male person and written by M2 's editor",
    "questionTemplate": "Was [entity] [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [NP_SIMPLE] and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 a ns:people.person .\n?x0 ns:people.person.gender ns:m.05zppz .\n?x1 ns:film.editor.film ns:m.0h6mjtc .\nns:m.063_wk3 ns:film.film.written_by ?x0 .\nns:m.063_wk3 ns:film.film.written_by ?x1\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M1 .\n?x0 a M0 .\n?x1 P1 M2 .\nM3 P2 ?x0 .\nM3 P2 ?x1\n}",
    "expectedResponse": "No",
    "recursionDepth": 35
  },
  {
    "questionIdx": 144990,
    "questionWithBrackets": "What did [Magic Magic]'s cinematographer direct, [Ara Katz] executive produce, and [Gurinder Chadha] direct",
    "questionPatternModEntities": "What did M2 's cinematographer direct , M0 executive produce , and M1 direct",
    "questionTemplate": "What did [entity] 's [ROLE_SIMPLE] [VP_SIMPLE] , [entity] [VP_SIMPLE] , and [entity] [VP_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.film.directed_by ?x1 .\n?x0 ns:film.film.directed_by ns:m.03yjtb .\n?x0 ns:film.film.executive_produced_by ns:m.04mv77t .\n?x1 ns:film.cinematographer.film ns:m.0hn914d\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 ?x1 .\n?x0 P1 M1 .\n?x1 P2 M2\n}",
    "expectedResponse": "Paris, je t'aime",
    "recursionDepth": 35
  },
  {
    "questionIdx": 139232,
    "questionWithBrackets": "What cinematographer did [Mellody Hobson] marry and a film's star's child influence",
    "questionPatternModEntities": "What cinematographer did M1 marry and a film 's star 's child influence",
    "questionTemplate": "What [NP_SIMPLE] did [entity] [VP_SIMPLE] and a [NP_SIMPLE] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE] [VP_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:film.cinematographer .\n?x0 ns:influence.influence_node.influenced_by ?x1 .\n?x0 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ns:m.02q3xjl .\n?x1 ns:people.person.parents|ns:fictional_universe.fictional_character.parents|ns:organization.organization.parent/ns:organization.organization_relationship.parent ?x2 .\n?x2 ns:film.actor.film/ns:film.performance.film ?x3 .\n?x3 a ns:film.film .\nFILTER ( ?x0 != ns:m.02q3xjl )\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 M1 .\n?x0 a M0 .\n?x1 P2 ?x2 .\n?x2 P3 ?x3 .\n?x3 a M2 .\nFILTER ( ?x0 != M1 )\n}",
    "expectedResponse": "George Lucas",
    "recursionDepth": 35
  },
  {
    "questionIdx": 172163,
    "questionWithBrackets": "What was distributed by [Bob Iger]'s employer, produced by [David Nicksay], and distributed by [Touchstone Pictures]",
    "questionPatternModEntities": "What was distributed by M2 's employer , produced by M1 , and distributed by M0",
    "questionTemplate": "What was [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.film.distributors/ns:film.film_film_distributor_relationship.distributor ?x1 .\n?x0 ns:film.film.distributors/ns:film.film_film_distributor_relationship.distributor ns:m.020h2v .\n?x0 ns:film.film.produced_by|ns:film.film.production_companies ns:m.0jv3j7 .\n?x1 ns:business.employer.employees/ns:business.employment_tenure.person ns:m.05chnj\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x1 P2 M2\n}",
    "expectedResponse": "Up Close & Personal",
    "recursionDepth": 35
  },
  {
    "questionIdx": 127545,
    "questionWithBrackets": "Were [The Myth], [Police Story 3: Super Cop], [Run Papa Run], [1911], and [Shanghai Noon] executive produced by [Co jsme udelali slep\u00edcim]'s cinematographer and producer",
    "questionPatternModEntities": "Were M1 , M2 , M3 , M4 , and M5 executive produced by M0 's cinematographer and producer",
    "questionTemplate": "Were [entity] , [entity] , [entity] , [entity] , and [entity] [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] and [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.cinematographer.film ns:m.0gwk5hd .\n?x0 ns:film.producer.film|ns:film.production_company.films ns:m.0gwk5hd .\nns:m.01f6x7 ns:film.film.executive_produced_by ?x0 .\nns:m.03_95w ns:film.film.executive_produced_by ?x0 .\nns:m.04q6_z5 ns:film.film.executive_produced_by ?x0 .\nns:m.07yc_w ns:film.film.executive_produced_by ?x0 .\nns:m.0gj967f ns:film.film.executive_produced_by ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M0 .\nM1 P2 ?x0 .\nM2 P2 ?x0 .\nM3 P2 ?x0 .\nM4 P2 ?x0 .\nM5 P2 ?x0\n}",
    "expectedResponse": "No",
    "recursionDepth": 35
  },
  {
    "questionIdx": 202201,
    "questionWithBrackets": "Which film director was influenced by a company's founder and was influenced by [Edgar Bergen]",
    "questionPatternModEntities": "Which film director was influenced by a company 's founder and was influenced by M1",
    "questionTemplate": "Which [NP_SIMPLE] was [VP_SIMPLE] by a [NP_SIMPLE] 's [ROLE_SIMPLE] and was [VP_SIMPLE] by [entity]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:film.director .\n?x0 ns:influence.influence_node.influenced_by ?x1 .\n?x0 ns:influence.influence_node.influenced_by ns:m.011lhy .\n?x1 ns:organization.organization_founder.organizations_founded ?x2 .\n?x2 a ns:business.employer\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P0 M1 .\n?x0 a M0 .\n?x1 P1 ?x2 .\n?x2 a M2\n}",
    "expectedResponse": "Jim Henson",
    "recursionDepth": 35
  },
  {
    "questionIdx": 161649,
    "questionWithBrackets": "What person did a costume designer's sibling's sibling influence and [Mitch Hedberg] influence",
    "questionPatternModEntities": "What person did a costume designer 's sibling 's sibling influence and M1 influence",
    "questionTemplate": "What [NP_SIMPLE] did a [NP_SIMPLE] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE] [VP_SIMPLE] and [entity] [VP_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:people.person .\n?x0 ns:influence.influence_node.influenced_by ?x1 .\n?x0 ns:influence.influence_node.influenced_by ns:m.02vzgl .\n?x1 ns:people.person.sibling_s/ns:people.sibling_relationship.sibling|ns:fictional_universe.fictional_character.siblings/ns:fictional_universe.sibling_relationship_of_fictional_characters.siblings ?x2 .\n?x2 ns:people.person.sibling_s/ns:people.sibling_relationship.sibling|ns:fictional_universe.fictional_character.siblings/ns:fictional_universe.sibling_relationship_of_fictional_characters.siblings ?x3 .\n?x3 a ns:film.film_costumer_designer .\nFILTER ( ?x1 != ?x2 ) .\nFILTER ( ?x2 != ?x3 )\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P0 M1 .\n?x0 a M0 .\n?x1 P1 ?x2 .\n?x2 P1 ?x3 .\n?x3 a M2 .\nFILTER ( ?x1 != ?x2 ) .\nFILTER ( ?x2 != ?x3 )\n}",
    "expectedResponse": "Mikey Mileos; Azhar Usman",
    "recursionDepth": 35
  },
  {
    "questionIdx": 167903,
    "questionWithBrackets": "What was a company that a screenwriter that [Anna Lezhneva] and [Renu Desai] married founded",
    "questionPatternModEntities": "What was a company that a screenwriter that M2 and M3 married founded",
    "questionTemplate": "What was a [NP_SIMPLE] that a [NP_SIMPLE] that [entity] and [entity] [VP_SIMPLE] [VP_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:business.employer .\n?x0 ns:organization.organization.founders ?x1 .\n?x1 a ns:film.writer .\n?x1 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ns:m.0_v5vxp .\n?x1 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ns:m.0g0nfs .\nFILTER ( ?x1 != ns:m.0_v5vxp ) .\nFILTER ( ?x1 != ns:m.0g0nfs )\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 a M0 .\n?x1 P1 M2 .\n?x1 P1 M3 .\n?x1 a M1 .\nFILTER ( ?x1 != M2 ) .\nFILTER ( ?x1 != M3 )\n}",
    "expectedResponse": "Jana Sena Party",
    "recursionDepth": 35
  },
  {
    "questionIdx": 158732,
    "questionWithBrackets": "What film was distributed by [StudioCanal UK] and [Madman Entertainment] and was produced by a cinematographer",
    "questionPatternModEntities": "What film was distributed by M1 and M2 and was produced by a cinematographer",
    "questionTemplate": "What [NP_SIMPLE] was [VP_SIMPLE] by [entity] and [entity] and was [VP_SIMPLE] by a [NP_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:film.film .\n?x0 ns:film.film.distributors/ns:film.film_film_distributor_relationship.distributor ns:m.058y8m .\n?x0 ns:film.film.distributors/ns:film.film_film_distributor_relationship.distributor ns:m.08225h .\n?x0 ns:film.film.produced_by|ns:film.film.production_companies ?x1 .\n?x1 a ns:film.cinematographer\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P1 ?x1 .\n?x0 a M0 .\n?x1 a M3\n}",
    "expectedResponse": "Ponyo",
    "recursionDepth": 35
  },
  {
    "questionIdx": 56163,
    "questionWithBrackets": "Was [Garret Schuelke] influenced by [Erika Cosby]'s parent and influenced by a Mexican screenwriter",
    "questionPatternModEntities": "Was M3 influenced by M0 's parent and influenced by a Mexican screenwriter",
    "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] and [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [NP_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:people.person.children|ns:fictional_universe.fictional_character.children|ns:organization.organization.child/ns:organization.organization_relationship.child ns:m.0hpc399 .\n?x1 a ns:film.writer .\n?x1 ns:people.person.nationality ns:m.0b90_r .\nns:m.066b7gk ns:influence.influence_node.influenced_by ?x0 .\nns:m.066b7gk ns:influence.influence_node.influenced_by ?x1\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x1 P1 M2 .\n?x1 a M1 .\nM3 P2 ?x0 .\nM3 P2 ?x1\n}",
    "expectedResponse": "No",
    "recursionDepth": 35
  },
  {
    "questionIdx": 175349,
    "questionWithBrackets": "What was edited by, written by, and executive produced by [Kit Pennebaker]'s female parent",
    "questionPatternModEntities": "What was edited by , written by , and executive produced by M1 's female parent",
    "questionTemplate": "What was [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.film.edited_by ?x1 .\n?x0 ns:film.film.executive_produced_by ?x1 .\n?x0 ns:film.film.written_by ?x1 .\n?x1 ns:people.person.children|ns:fictional_universe.fictional_character.children|ns:organization.organization.child/ns:organization.organization_relationship.child ns:m.0gxm3d0 .\n?x1 ns:people.person.gender ns:m.02zsn\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x1 P3 M0 .\n?x1 P4 M1\n}",
    "expectedResponse": "Startup.com",
    "recursionDepth": 35
  },
  {
    "questionIdx": 217805,
    "questionWithBrackets": "Who founded a film distributor, founded [World Championship Wrestling], and was employed by [Turner Broadcasting System]",
    "questionPatternModEntities": "Who founded a film distributor , founded M2 , and was employed by M1",
    "questionTemplate": "Who [VP_SIMPLE] a [NP_SIMPLE] , [VP_SIMPLE] [entity] , and was [VP_SIMPLE] by [entity]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:people.person .\n?x0 ns:organization.organization_founder.organizations_founded ?x1 .\n?x0 ns:organization.organization_founder.organizations_founded ns:m.019jdn .\n?x0 ns:people.person.employment_history/ns:business.employment_tenure.company ns:m.021c6_ .\n?x1 a ns:film.film_distributor\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M1 .\n?x0 P1 ?x1 .\n?x0 P1 M2 .\n?x0 a M0 .\n?x1 a M3\n}",
    "expectedResponse": "Ted Turner",
    "recursionDepth": 35
  },
  {
    "questionIdx": 30116,
    "questionWithBrackets": "Did a cinematographer influence a producer of [Darkened Room] and marry [Irene Kane]'s sibling",
    "questionPatternModEntities": "Did a cinematographer influence a producer of M1 and marry M2 's sibling",
    "questionTemplate": "Did a [NP_SIMPLE] [VP_SIMPLE] a [ROLE_SIMPLE] of [entity] and [VP_SIMPLE] [entity] 's [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 a ns:film.cinematographer .\n?x0 ns:influence.influence_node.influenced ?x1 .\n?x0 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ?x2 .\n?x1 ns:film.producer.film|ns:film.production_company.films ns:m.05977w .\n?x2 ns:people.person.sibling_s/ns:people.sibling_relationship.sibling|ns:fictional_universe.fictional_character.siblings/ns:fictional_universe.sibling_relationship_of_fictional_characters.siblings ns:m.0j_gns .\nFILTER ( ?x0 != ?x2 ) .\nFILTER ( ?x2 != ns:m.0j_gns )\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x2 .\n?x0 a M0 .\n?x1 P2 M1 .\n?x2 P3 M2 .\nFILTER ( ?x0 != ?x2 ) .\nFILTER ( ?x2 != M2 )\n}",
    "expectedResponse": "No",
    "recursionDepth": 35
  },
  {
    "questionIdx": 239121,
    "questionWithBrackets": "Who was influenced by, married, and influenced [The Beaches of Agn\u00e8s]'s female producer",
    "questionPatternModEntities": "Who was influenced by , married , and influenced M1 's female producer",
    "questionTemplate": "Who was [VP_SIMPLE] by , [VP_SIMPLE] , and [VP_SIMPLE] [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:people.person .\n?x0 ns:influence.influence_node.influenced ?x1 .\n?x0 ns:influence.influence_node.influenced_by ?x1 .\n?x0 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ?x1 .\n?x1 ns:film.producer.film|ns:film.production_company.films ns:m.04nm0cr .\n?x1 ns:people.person.gender ns:m.02zsn .\nFILTER ( ?x0 != ?x1 )\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x0 a M0 .\n?x1 P3 M1 .\n?x1 P4 M2 .\nFILTER ( ?x0 != ?x1 )\n}",
    "expectedResponse": "Jacques Demy",
    "recursionDepth": 35
  },
  {
    "questionIdx": 99820,
    "questionWithBrackets": "Was a film that was directed by a film producer and starred [Poojappura Radhakrishnan] [Friends with Benefits]",
    "questionPatternModEntities": "Was a film that was directed by a film producer and starred M3 M1",
    "questionTemplate": "Was a [NP_SIMPLE] that was [VP_SIMPLE] by a [NP_SIMPLE] and [VP_SIMPLE] [entity] [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 a ns:film.producer .\nns:m.0c3xw46 a ns:film.film .\nns:m.0c3xw46 ns:film.film.directed_by ?x0 .\nns:m.0c3xw46 ns:film.film.starring/ns:film.performance.actor ns:m.0k693yh\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 a M0 .\nM1 P0 M3 .\nM1 P1 ?x0 .\nM1 a M2\n}",
    "expectedResponse": "No",
    "recursionDepth": 35
  },
  {
    "questionIdx": 68162,
    "questionWithBrackets": "Was [Moskito Bravo] edited by a Spanish screenwriter's parent and written by [Henri-Fran\u00e7ois Rey]",
    "questionPatternModEntities": "Was M2 edited by a Spanish screenwriter 's parent and written by M3",
    "questionTemplate": "Was [entity] [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [NP_SIMPLE] 's [ROLE_SIMPLE] and [VP_SIMPLE] by [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:people.person.children|ns:fictional_universe.fictional_character.children|ns:organization.organization.child/ns:organization.organization_relationship.child ?x1 .\n?x1 a ns:film.writer .\n?x1 ns:people.person.nationality ns:m.06mkj .\nns:m.0fpp74n ns:film.film.edited_by ?x0 .\nns:m.0fpp74n ns:film.film.written_by ns:m.0n4l1ck\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x1 P1 M1 .\n?x1 a M0 .\nM2 P2 M3 .\nM2 P3 ?x0\n}",
    "expectedResponse": "No",
    "recursionDepth": 35
  },
  {
    "questionIdx": 111030,
    "questionWithBrackets": "Was [\u00a1Que seas feliz!] produced by [Sergio Kogan] and directed by a film producer's Mexican sibling",
    "questionPatternModEntities": "Was M2 produced by M3 and directed by a film producer 's Mexican sibling",
    "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] and [VP_SIMPLE] by a [NP_SIMPLE] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:people.person.nationality ns:m.0b90_r .\n?x0 ns:people.person.sibling_s/ns:people.sibling_relationship.sibling|ns:fictional_universe.fictional_character.siblings/ns:fictional_universe.sibling_relationship_of_fictional_characters.siblings ?x1 .\n?x1 a ns:film.producer .\nFILTER ( ?x0 != ?x1 ) .\nns:m.0d7dgk0 ns:film.film.directed_by ?x0 .\nns:m.0d7dgk0 ns:film.film.produced_by|ns:film.film.production_companies ns:m.0wgj76y\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x0 P1 M0 .\n?x1 a M1 .\nFILTER ( ?x0 != ?x1 ) .\nM2 P2 M3 .\nM2 P3 ?x0\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 35
  },
  {
    "questionIdx": 63657,
    "questionWithBrackets": "Was [Land and Houses] founded by [Roy O. Disney] and founded by a film producer's founder and employee",
    "questionPatternModEntities": "Was M1 founded by M2 and founded by a film producer 's founder and employee",
    "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] and [VP_SIMPLE] by a [NP_SIMPLE] 's [ROLE_SIMPLE] and [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:organization.organization_founder.organizations_founded ?x1 .\n?x0 ns:people.person.employment_history/ns:business.employment_tenure.company ?x1 .\n?x1 a ns:film.producer .\nns:m.0675n6 ns:organization.organization.founders ?x0 .\nns:m.0675n6 ns:organization.organization.founders ns:m.015yg9\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x1 a M0 .\nM1 P2 ?x0 .\nM1 P2 M2\n}",
    "expectedResponse": "No",
    "recursionDepth": 35
  },
  {
    "questionIdx": 45705,
    "questionWithBrackets": "Was [Andy Mills] a screenwriter whose parent founded and was employed by a company",
    "questionPatternModEntities": "Was M1 a screenwriter whose parent founded and was employed by a company",
    "questionTemplate": "Was [entity] a [NP_SIMPLE] whose [ROLE_SIMPLE] [VP_SIMPLE] and was [VP_SIMPLE] by a [NP_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:organization.organization_founder.organizations_founded ?x1 .\n?x0 ns:people.person.employment_history/ns:business.employment_tenure.company ?x1 .\n?x1 a ns:business.employer .\nns:m.0rz7wsg a ns:film.writer .\nns:m.0rz7wsg ns:people.person.parents|ns:fictional_universe.fictional_character.parents|ns:organization.organization.parent/ns:organization.organization_relationship.parent ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x1 a M0 .\nM1 P2 ?x0 .\nM1 a M2\n}",
    "expectedResponse": "No",
    "recursionDepth": 35
  },
  {
    "questionIdx": 76351,
    "questionWithBrackets": "Was [Shorts] produced, directed, and written by an American sibling of [Mark Kasdan]",
    "questionPatternModEntities": "Was M2 produced , directed , and written by a American sibling of M0",
    "questionTemplate": "Was [entity] [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:people.person.nationality ns:m.09c7w0 .\n?x0 ns:people.person.sibling_s/ns:people.sibling_relationship.sibling|ns:fictional_universe.fictional_character.siblings/ns:fictional_universe.sibling_relationship_of_fictional_characters.siblings ns:m.0jwsf7 .\nFILTER ( ?x0 != ns:m.0jwsf7 ) .\nns:m.05qpqj6 ns:film.film.directed_by ?x0 .\nns:m.05qpqj6 ns:film.film.produced_by|ns:film.film.production_companies ?x0 .\nns:m.05qpqj6 ns:film.film.written_by ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M0 ) .\nM2 P2 ?x0 .\nM2 P3 ?x0 .\nM2 P4 ?x0\n}",
    "expectedResponse": "No",
    "recursionDepth": 35
  },
  {
    "questionIdx": 145993,
    "questionWithBrackets": "What did [Randy Mermell] produce and a Canadian spouse of an art director edit",
    "questionPatternModEntities": "What did M0 produce and a Canadian spouse of a art director edit",
    "questionTemplate": "What did [entity] [VP_SIMPLE] and a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of a [NP_SIMPLE] [VP_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.film.edited_by ?x1 .\n?x0 ns:film.film.produced_by|ns:film.film.production_companies ns:m.0pcqpcr .\n?x1 ns:people.person.nationality ns:m.0d060g .\n?x1 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ?x2 .\n?x2 a ns:film.film_art_director .\nFILTER ( ?x1 != ?x2 )\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 ?x1 .\n?x1 P2 M1 .\n?x1 P3 ?x2 .\n?x2 a M2 .\nFILTER ( ?x1 != ?x2 )\n}",
    "expectedResponse": "Blood Gnome",
    "recursionDepth": 35
  },
  {
    "questionIdx": 220093,
    "questionWithBrackets": "Who married [Darya Greenwood]'s female actor and was influenced by a costume designer",
    "questionPatternModEntities": "Who married M2 's female actor and was influenced by a costume designer",
    "questionTemplate": "Who [VP_SIMPLE] [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] and was [VP_SIMPLE] by a [NP_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:people.person .\n?x0 ns:influence.influence_node.influenced_by ?x1 .\n?x0 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ?x2 .\n?x1 a ns:film.film_costumer_designer .\n?x2 ns:film.actor.film/ns:film.performance.character ns:m.0gz5m0j .\n?x2 ns:people.person.gender ns:m.02zsn .\nFILTER ( ?x0 != ?x2 )\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x2 .\n?x0 a M0 .\n?x1 a M1 .\n?x2 P2 M2 .\n?x2 P3 M3 .\nFILTER ( ?x0 != ?x2 )\n}",
    "expectedResponse": "Martin Scorsese",
    "recursionDepth": 35
  },
  {
    "questionIdx": 205675,
    "questionWithBrackets": "Which film written by [Chris Columbus] was executive produced and edited by [An American Tail]'s executive producer",
    "questionPatternModEntities": "Which film written by M1 was executive produced and edited by M2 's executive producer",
    "questionTemplate": "Which [NP_SIMPLE] [VP_SIMPLE] by [entity] was [VP_SIMPLE] and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:film.film .\n?x0 ns:film.film.edited_by ?x1 .\n?x0 ns:film.film.executive_produced_by ?x1 .\n?x0 ns:film.film.written_by ns:m.01r2c7 .\n?x1 ns:film.producer.films_executive_produced ns:m.03vp54\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 M1 .\n?x0 P2 ?x1 .\n?x0 a M0 .\n?x1 P3 M2\n}",
    "expectedResponse": "The Goonies",
    "recursionDepth": 35
  },
  {
    "questionIdx": 179129,
    "questionWithBrackets": "What was executive produced, produced, and directed by an Italian actor of [Sergio Ghia]",
    "questionPatternModEntities": "What was executive produced , produced , and directed by a Italian actor of M1",
    "questionTemplate": "What was [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.film.directed_by ?x1 .\n?x0 ns:film.film.executive_produced_by ?x1 .\n?x0 ns:film.film.produced_by|ns:film.film.production_companies ?x1 .\n?x1 ns:film.actor.film/ns:film.performance.character ns:m.04mmxbp .\n?x1 ns:people.person.nationality ns:m.03rjj\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x1 P3 M0 .\n?x1 P4 M1\n}",
    "expectedResponse": "Screw Loose",
    "recursionDepth": 35
  },
  {
    "questionIdx": 4426,
    "questionWithBrackets": "Did [Columbia University] and [University of Minnesota] employ a person that [Rose Friedman] married and influenced",
    "questionPatternModEntities": "Did M2 and M3 employ a person that M1 married and influenced",
    "questionTemplate": "Did [entity] and [entity] [VP_SIMPLE] a [NP_SIMPLE] that [entity] [VP_SIMPLE] and [VP_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 a ns:people.person .\n?x0 ns:influence.influence_node.influenced_by ns:m.06g0rk .\n?x0 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ns:m.06g0rk .\nFILTER ( ?x0 != ns:m.06g0rk ) .\nns:m.01w5m ns:business.employer.employees/ns:business.employment_tenure.person ?x0 .\nns:m.025v3k ns:business.employer.employees/ns:business.employment_tenure.person ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M1 .\n?x0 P1 M1 .\n?x0 a M0 .\nFILTER ( ?x0 != M1 ) .\nM2 P2 ?x0 .\nM3 P2 ?x0\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 35
  },
  {
    "questionIdx": 124067,
    "questionWithBrackets": "Were [Samad dar rah ejdeha] and [Ferestadeh] edited by and executive produced by a male spouse of [Parvin Sayyad]",
    "questionPatternModEntities": "Were M2 and M3 edited by and executive produced by a male spouse of M1",
    "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by and [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:people.person.gender ns:m.05zppz .\n?x0 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ns:m.0n4cykj .\nFILTER ( ?x0 != ns:m.0n4cykj ) .\nns:g.121_c37n ns:film.film.edited_by ?x0 .\nns:g.121_c37n ns:film.film.executive_produced_by ?x0 .\nns:m.0b3rv5d ns:film.film.edited_by ?x0 .\nns:m.0b3rv5d ns:film.film.executive_produced_by ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M1 ) .\nM2 P2 ?x0 .\nM2 P3 ?x0 .\nM3 P2 ?x0 .\nM3 P3 ?x0\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 36
  },
  {
    "questionIdx": 85234,
    "questionWithBrackets": "Was [Viagem na Chuva] executive produced by and produced by a cinematographer, art director, and editor of [Far West: A True Western]",
    "questionPatternModEntities": "Was M1 executive produced by and produced by a cinematographer , art director , and editor of M0",
    "questionTemplate": "Was [entity] [VP_SIMPLE] by and [VP_SIMPLE] by a [ROLE_SIMPLE] , [ROLE_SIMPLE] , and [ROLE_SIMPLE] of [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.cinematographer.film ns:m.0107hywx .\n?x0 ns:film.editor.film ns:m.0107hywx .\n?x0 ns:film.film_art_director.films_art_directed ns:m.0107hywx .\nns:m.011p1tds ns:film.film.executive_produced_by ?x0 .\nns:m.011p1tds ns:film.film.produced_by|ns:film.film.production_companies ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M0 .\n?x0 P2 M0 .\nM1 P3 ?x0 .\nM1 P4 ?x0\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 36
  },
  {
    "questionIdx": 159423,
    "questionWithBrackets": "What film whose executive producer wrote [Claudine's Return] was directed by [Odysseus' Gambit]'s executive producer and cinematographer",
    "questionPatternModEntities": "What film whose executive producer wrote M1 was directed by M2 's executive producer and cinematographer",
    "questionTemplate": "What [NP_SIMPLE] whose [ROLE_SIMPLE] [VP_SIMPLE] [entity] was [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] and [ROLE_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:film.film .\n?x0 ns:film.film.directed_by ?x1 .\n?x0 ns:film.film.executive_produced_by ?x2 .\n?x1 ns:film.cinematographer.film ns:m.0j8f5vp .\n?x1 ns:film.producer.films_executive_produced ns:m.0j8f5vp .\n?x2 ns:film.writer.film ns:m.0b1q_4\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x2 .\n?x0 a M0 .\n?x1 P2 M1 .\n?x2 P3 M2 .\n?x2 P4 M2\n}",
    "expectedResponse": "Godka Cirka",
    "recursionDepth": 36
  },
  {
    "questionIdx": 201597,
    "questionWithBrackets": "Which film director influenced, was influenced by, and married a film's producer",
    "questionPatternModEntities": "Which film director influenced , was influenced by , and married a film 's producer",
    "questionTemplate": "Which [NP_SIMPLE] [VP_SIMPLE] , was [VP_SIMPLE] by , and [VP_SIMPLE] a [NP_SIMPLE] 's [ROLE_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:film.director .\n?x0 ns:influence.influence_node.influenced ?x1 .\n?x0 ns:influence.influence_node.influenced_by ?x1 .\n?x0 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ?x1 .\n?x1 ns:film.producer.film|ns:film.production_company.films ?x2 .\n?x2 a ns:film.film .\nFILTER ( ?x0 != ?x1 )\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x0 a M0 .\n?x1 P3 ?x2 .\n?x2 a M1 .\nFILTER ( ?x0 != ?x1 )\n}",
    "expectedResponse": "Jacques Demy; Agn\u00e8s Varda",
    "recursionDepth": 36
  },
  {
    "questionIdx": 70098,
    "questionWithBrackets": "Was [One Man's Hero] produced, written, and edited by a production company's employee and founder",
    "questionPatternModEntities": "Was M1 produced , written , and edited by a production company 's employee and founder",
    "questionTemplate": "Was [entity] [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by a [NP_SIMPLE] 's [ROLE_SIMPLE] and [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:organization.organization_founder.organizations_founded ?x1 .\n?x0 ns:people.person.employment_history/ns:business.employment_tenure.company ?x1 .\n?x1 a ns:film.production_company .\nns:m.07wsr5 ns:film.film.edited_by ?x0 .\nns:m.07wsr5 ns:film.film.produced_by|ns:film.film.production_companies ?x0 .\nns:m.07wsr5 ns:film.film.written_by ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x1 a M0 .\nM1 P2 ?x0 .\nM1 P3 ?x0 .\nM1 P4 ?x0\n}",
    "expectedResponse": "No",
    "recursionDepth": 36
  },
  {
    "questionIdx": 114795,
    "questionWithBrackets": "Were [Chicago Joe and the Showgirl] and [Taking Woodstock] produced by and distributed by a film distributor's child and parent",
    "questionPatternModEntities": "Were M1 and M2 produced by and distributed by a film distributor 's child and parent",
    "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by and [VP_SIMPLE] by a [NP_SIMPLE] 's [ROLE_SIMPLE] and [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:people.person.children|ns:fictional_universe.fictional_character.children|ns:organization.organization.child/ns:organization.organization_relationship.child ?x1 .\n?x0 ns:people.person.parents|ns:fictional_universe.fictional_character.parents|ns:organization.organization.parent/ns:organization.organization_relationship.parent ?x1 .\n?x1 a ns:film.film_distributor .\nns:m.0404hcg ns:film.film.distributors/ns:film.film_film_distributor_relationship.distributor ?x0 .\nns:m.0404hcg ns:film.film.produced_by|ns:film.film.production_companies ?x0 .\nns:m.04grkmd ns:film.film.distributors/ns:film.film_film_distributor_relationship.distributor ?x0 .\nns:m.04grkmd ns:film.film.produced_by|ns:film.film.production_companies ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x1 a M0 .\nM1 P2 ?x0 .\nM1 P3 ?x0 .\nM2 P2 ?x0 .\nM2 P3 ?x0\n}",
    "expectedResponse": "No",
    "recursionDepth": 36
  },
  {
    "questionIdx": 176322,
    "questionWithBrackets": "What was executive produced by [Clea De Koning] and [Bert Nijdam] and produced by [Jurriaan Oerlemans]'s Dutch sibling",
    "questionPatternModEntities": "What was executive produced by M0 and M1 and produced by M2 's Dutch sibling",
    "questionTemplate": "What was [VP_SIMPLE] by [entity] and [entity] and [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.film.executive_produced_by ns:g.11b6lkrv_z .\n?x0 ns:film.film.executive_produced_by ns:m.0jc8ls1 .\n?x0 ns:film.film.produced_by|ns:film.film.production_companies ?x1 .\n?x1 ns:people.person.nationality ns:m.059j2 .\n?x1 ns:people.person.sibling_s/ns:people.sibling_relationship.sibling|ns:fictional_universe.fictional_character.siblings/ns:fictional_universe.sibling_relationship_of_fictional_characters.siblings ns:m.0109_p23 .\nFILTER ( ?x1 != ns:m.0109_p23 )\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P1 ?x1 .\n?x1 P2 M2 .\n?x1 P3 M3 .\nFILTER ( ?x1 != M2 )\n}",
    "expectedResponse": "The Happy Housewife; Duska",
    "recursionDepth": 36
  },
  {
    "questionIdx": 173388,
    "questionWithBrackets": "What was edited by [Guastafeste]'s Italian actor and executive produced by [Pino Gargiulo] and [Massimo Ferrero]",
    "questionPatternModEntities": "What was edited by M3 's Italian actor and executive produced by M0 and M1",
    "questionTemplate": "What was [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] and [VP_SIMPLE] by [entity] and [entity]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.film.edited_by ?x1 .\n?x0 ns:film.film.executive_produced_by ns:m.0wxt_lq .\n?x0 ns:film.film.executive_produced_by ns:m.0wxt_q1 .\n?x1 ns:film.actor.film/ns:film.performance.character ns:m.0yblpzk .\n?x1 ns:people.person.nationality ns:m.03rjj\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P1 ?x1 .\n?x1 P2 M2 .\n?x1 P3 M3\n}",
    "expectedResponse": "Cheeky!",
    "recursionDepth": 36
  },
  {
    "questionIdx": 52138,
    "questionWithBrackets": "Was [Deepa Mehta] a film director that [Heaven on Earth] was executive produced by, directed by, and written by",
    "questionPatternModEntities": "Was M0 a film director that M1 was executive produced by , directed by , and written by",
    "questionTemplate": "Was [entity] a [NP_SIMPLE] that [entity] was [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by",
    "sparql": "SELECT count(*) WHERE {\nns:m.04jw71 ns:film.director.film ns:m.03c84gv .\nns:m.04jw71 ns:film.producer.films_executive_produced ns:m.03c84gv .\nns:m.04jw71 ns:film.writer.film ns:m.03c84gv\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M1 .\nM0 P1 M1 .\nM0 P2 M1\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 36
  },
  {
    "questionIdx": 111228,
    "questionWithBrackets": "Were [21st Century Male] and [Year of the Nail] produced and edited by a child of a film editor's sibling",
    "questionPatternModEntities": "Were M1 and M2 produced and edited by a child of a film editor 's sibling",
    "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] and [VP_SIMPLE] by a [ROLE_SIMPLE] of a [NP_SIMPLE] 's [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:people.person.parents|ns:fictional_universe.fictional_character.parents|ns:organization.organization.parent/ns:organization.organization_relationship.parent ?x1 .\n?x1 ns:people.person.sibling_s/ns:people.sibling_relationship.sibling|ns:fictional_universe.fictional_character.siblings/ns:fictional_universe.sibling_relationship_of_fictional_characters.siblings ?x2 .\n?x2 a ns:film.editor .\nFILTER ( ?x1 != ?x2 ) .\nns:m.02x9zks ns:film.film.edited_by ?x0 .\nns:m.02x9zks ns:film.film.produced_by|ns:film.film.production_companies ?x0 .\nns:m.04mwc27 ns:film.film.edited_by ?x0 .\nns:m.04mwc27 ns:film.film.produced_by|ns:film.film.production_companies ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x1 P1 ?x2 .\n?x2 a M0 .\nFILTER ( ?x1 != ?x2 ) .\nM1 P2 ?x0 .\nM1 P3 ?x0 .\nM2 P2 ?x0 .\nM2 P3 ?x0\n}",
    "expectedResponse": "No",
    "recursionDepth": 36
  },
  {
    "questionIdx": 143582,
    "questionWithBrackets": "What did [Gianni Amico] and [Glauber Rocha] write and a film's cinematographer's sibling edit",
    "questionPatternModEntities": "What did M0 and M1 write and a film 's cinematographer 's sibling edit",
    "questionTemplate": "What did [entity] and [entity] [VP_SIMPLE] and a [NP_SIMPLE] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE] [VP_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.film.edited_by ?x1 .\n?x0 ns:film.film.written_by ns:m.02_p09 .\n?x0 ns:film.film.written_by ns:m.0c04nl4 .\n?x1 ns:people.person.sibling_s/ns:people.sibling_relationship.sibling|ns:fictional_universe.fictional_character.siblings/ns:fictional_universe.sibling_relationship_of_fictional_characters.siblings ?x2 .\n?x2 ns:film.cinematographer.film ?x3 .\n?x3 a ns:film.film .\nFILTER ( ?x1 != ?x2 )\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P1 ?x1 .\n?x1 P2 ?x2 .\n?x2 P3 ?x3 .\n?x3 a M2 .\nFILTER ( ?x1 != ?x2 )\n}",
    "expectedResponse": "The Lion Has Seven Heads",
    "recursionDepth": 36
  },
  {
    "questionIdx": 229329,
    "questionWithBrackets": "Who was a costume designer that was employed by [Weta Workshop] and [Wingnut Interactive] and founded [Weta Digital]",
    "questionPatternModEntities": "Who was a costume designer that was employed by M2 and M3 and founded M4",
    "questionTemplate": "Who was a [NP_SIMPLE] that was [VP_SIMPLE] by [entity] and [entity] and [VP_SIMPLE] [entity]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:film.film_costumer_designer .\n?x0 a ns:people.person .\n?x0 ns:organization.organization_founder.organizations_founded ns:m.01cm3c .\n?x0 ns:people.person.employment_history/ns:business.employment_tenure.company ns:m.01cm64 .\n?x0 ns:people.person.employment_history/ns:business.employment_tenure.company ns:m.0kqh8s\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M2 .\n?x0 P0 M3 .\n?x0 P1 M4 .\n?x0 a M0 .\n?x0 a M1\n}",
    "expectedResponse": "Peter Jackson",
    "recursionDepth": 36
  },
  {
    "questionIdx": 50472,
    "questionWithBrackets": "Was [Cin\u00e9vardaphoto] directed by and edited by a person's male sibling's spouse",
    "questionPatternModEntities": "Was M2 directed by and edited by a person 's male sibling 's spouse",
    "questionTemplate": "Was [entity] [VP_SIMPLE] by and [VP_SIMPLE] by a [NP_SIMPLE] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] 's [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ?x1 .\n?x1 ns:people.person.gender ns:m.05zppz .\n?x1 ns:people.person.sibling_s/ns:people.sibling_relationship.sibling|ns:fictional_universe.fictional_character.siblings/ns:fictional_universe.sibling_relationship_of_fictional_characters.siblings ?x2 .\n?x2 a ns:people.person .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x1 != ?x2 ) .\nns:m.0bf1dvb ns:film.film.directed_by ?x0 .\nns:m.0bf1dvb ns:film.film.edited_by ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x1 P1 ?x2 .\n?x1 P2 M0 .\n?x2 a M1 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x1 != ?x2 ) .\nM2 P3 ?x0 .\nM2 P4 ?x0\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 36
  },
  {
    "questionIdx": 43282,
    "questionWithBrackets": "Was [24: The Movie] produced and executive produced by an actor that played [Ejlert Lovborg] and [Curtis Freley]",
    "questionPatternModEntities": "Was M2 produced and executive produced by a actor that played M0 and M1",
    "questionTemplate": "Was [entity] [VP_SIMPLE] and [VP_SIMPLE] by a [NP_SIMPLE] that [VP_SIMPLE] [entity] and [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.actor.film/ns:film.performance.character ns:m.02gd6jx .\n?x0 ns:film.actor.film/ns:film.performance.character ns:m.0gyk1p9 .\nns:m.052k0yp ns:film.film.executive_produced_by ?x0 .\nns:m.052k0yp ns:film.film.produced_by|ns:film.film.production_companies ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\nM2 P1 ?x0 .\nM2 P2 ?x0\n}",
    "expectedResponse": "No",
    "recursionDepth": 36
  },
  {
    "questionIdx": 53476,
    "questionWithBrackets": "Was [Ed and His Dead Mother] distributed by and produced by a child of a distributor of [Niagara Fools]'s prequel",
    "questionPatternModEntities": "Was M1 distributed by and produced by a child of a distributor of M0 's prequel",
    "questionTemplate": "Was [entity] [VP_SIMPLE] by and [VP_SIMPLE] by a [ROLE_SIMPLE] of a [ROLE_SIMPLE] of [entity] 's [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:people.person.parents|ns:fictional_universe.fictional_character.parents|ns:organization.organization.parent/ns:organization.organization_relationship.parent ?x1 .\n?x1 ns:film.film_distributor.films_distributed/ns:film.film_film_distributor_relationship.film ?x2 .\n?x2 ns:film.film.sequel ns:m.05229gd .\nns:m.04j2ms9 ns:film.film.distributors/ns:film.film_film_distributor_relationship.distributor ?x0 .\nns:m.04j2ms9 ns:film.film.produced_by|ns:film.film.production_companies ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x1 P1 ?x2 .\n?x2 P2 M0 .\nM1 P3 ?x0 .\nM1 P4 ?x0\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 36
  },
  {
    "questionIdx": 169843,
    "questionWithBrackets": "What was directed by [Favela Rising]'s editor, cinematographer, and producer and executive produced by [Bill Simmons]",
    "questionPatternModEntities": "What was directed by M1 's editor , cinematographer , and producer and executive produced by M0",
    "questionTemplate": "What was [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] , [ROLE_SIMPLE] , and [ROLE_SIMPLE] and [VP_SIMPLE] by [entity]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.film.directed_by ?x1 .\n?x0 ns:film.film.executive_produced_by ns:m.053sdy .\n?x1 ns:film.cinematographer.film ns:m.0fbdkq .\n?x1 ns:film.editor.film ns:m.0fbdkq .\n?x1 ns:film.producer.film|ns:film.production_company.films ns:m.0fbdkq\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 ?x1 .\n?x1 P2 M1 .\n?x1 P3 M1 .\n?x1 P4 M1\n}",
    "expectedResponse": "The Two Escobars",
    "recursionDepth": 36
  },
  {
    "questionIdx": 147581,
    "questionWithBrackets": "What did [Tiwa Moeithaisong] write and a costume designer and writer of [Oh My Ghosts!]'s prequel produce",
    "questionPatternModEntities": "What did M0 write and a costume designer and writer of M1 's prequel produce",
    "questionTemplate": "What did [entity] [VP_SIMPLE] and a [ROLE_SIMPLE] and [ROLE_SIMPLE] of [entity] 's [ROLE_SIMPLE] [VP_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.film.produced_by|ns:film.film.production_companies ?x1 .\n?x0 ns:film.film.written_by ns:m.0g7xdbn .\n?x1 ns:film.film_costumer_designer.costume_design_for_film ?x2 .\n?x1 ns:film.writer.film ?x2 .\n?x2 ns:film.film.sequel ns:m.0vx3vtg\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 ?x1 .\n?x1 P2 ?x2 .\n?x1 P3 ?x2 .\n?x2 P4 M1\n}",
    "expectedResponse": "Meat Grinder",
    "recursionDepth": 36
  },
  {
    "questionIdx": 168998,
    "questionWithBrackets": "What was acquired by [Quadrangle Group] and [APriori Capital Partners] and acquired by an employer of [John H. Ridall] and [Suzanne L.  Keenan]",
    "questionPatternModEntities": "What was acquired by M0 and M1 and acquired by a employer of M2 and M3",
    "questionTemplate": "What was [VP_SIMPLE] by [entity] and [entity] and [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity] and [entity]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:organization.organization.acquired_by/ns:business.acquisition.acquiring_company ?x1 .\n?x0 ns:organization.organization.acquired_by/ns:business.acquisition.acquiring_company ns:m.02qb2mr .\n?x0 ns:organization.organization.acquired_by/ns:business.acquisition.acquiring_company ns:m.02vmhkn .\n?x1 ns:business.employer.employees/ns:business.employment_tenure.person ns:m.04h_htt .\n?x1 ns:business.employer.employees/ns:business.employment_tenure.person ns:m.04h_hvv\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x1 P1 M2 .\n?x1 P1 M3\n}",
    "expectedResponse": "Metro-Goldwyn-Mayer",
    "recursionDepth": 36
  },
  {
    "questionIdx": 150338,
    "questionWithBrackets": "What did a parent of [Morgan Creek Productions]'s founder's spouse executive produce and [Eve Newman] edit",
    "questionPatternModEntities": "What did a parent of M1 's founder 's spouse executive produce and M0 edit",
    "questionTemplate": "What did a [ROLE_SIMPLE] of [entity] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE] [VP_SIMPLE] and [entity] [VP_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.film.edited_by ns:m.0k1q82 .\n?x0 ns:film.film.executive_produced_by ?x1 .\n?x1 ns:people.person.children|ns:fictional_universe.fictional_character.children|ns:organization.organization.child/ns:organization.organization_relationship.child ?x2 .\n?x2 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ?x3 .\n?x3 ns:organization.organization_founder.organizations_founded ns:m.031rp3 .\nFILTER ( ?x2 != ?x3 )\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 M0 .\n?x1 P2 ?x2 .\n?x2 P3 ?x3 .\n?x3 P4 M1 .\nFILTER ( ?x2 != ?x3 )\n}",
    "expectedResponse": "The Big T.N.T. Show",
    "recursionDepth": 36
  },
  {
    "questionIdx": 173563,
    "questionWithBrackets": "What was edited by [Lucasfilm]'s founder and employee and executive produced by [Talia Shire]'s sibling",
    "questionPatternModEntities": "What was edited by M1 's founder and employee and executive produced by M0 's sibling",
    "questionTemplate": "What was [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] and [ROLE_SIMPLE] and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.film.edited_by ?x1 .\n?x0 ns:film.film.executive_produced_by ?x2 .\n?x1 ns:organization.organization_founder.organizations_founded ns:m.0kx4m .\n?x1 ns:people.person.employment_history/ns:business.employment_tenure.company ns:m.0kx4m .\n?x2 ns:people.person.sibling_s/ns:people.sibling_relationship.sibling|ns:fictional_universe.fictional_character.siblings/ns:fictional_universe.sibling_relationship_of_fictional_characters.siblings ns:m.01gw4f .\nFILTER ( ?x2 != ns:m.01gw4f )\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x2 .\n?x1 P2 M0 .\n?x2 P3 M1 .\n?x2 P4 M1 .\nFILTER ( ?x1 != M0 )\n}",
    "expectedResponse": "THX 1138",
    "recursionDepth": 36
  },
  {
    "questionIdx": 54502,
    "questionWithBrackets": "Was [F for Fake] edited by [Fist Of Jesus]'s producer and costume designer and edited by [Adri\u00e1n Cardona] and [Rafa Dengr\u00e1]",
    "questionPatternModEntities": "Was M1 edited by M0 's producer and costume designer and edited by M2 and M3",
    "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] and [ROLE_SIMPLE] and [VP_SIMPLE] by [entity] and [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.film_costumer_designer.costume_design_for_film ns:m.010s0v9j .\n?x0 ns:film.producer.film|ns:film.production_company.films ns:m.010s0v9j .\nns:m.055l31 ns:film.film.edited_by ?x0 .\nns:m.055l31 ns:film.film.edited_by ns:m.0hpfc9j .\nns:m.055l31 ns:film.film.edited_by ns:m.0hpfc9m\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M0 .\nM1 P2 ?x0 .\nM1 P2 M2 .\nM1 P2 M3\n}",
    "expectedResponse": "No",
    "recursionDepth": 36
  },
  {
    "questionIdx": 51622,
    "questionWithBrackets": "Was [Darren Aronofsky] influenced by [Spike Lee] and influenced by [Tetsuo: The Iron Man]'s art director, star, and cinematographer",
    "questionPatternModEntities": "Was M1 influenced by M2 and influenced by M0 's art director , star , and cinematographer",
    "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] , [ROLE_SIMPLE] , and [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.actor.film/ns:film.performance.film ns:m.05m0x0 .\n?x0 ns:film.cinematographer.film ns:m.05m0x0 .\n?x0 ns:film.film_art_director.films_art_directed ns:m.05m0x0 .\nns:m.017c87 ns:influence.influence_node.influenced_by ?x0 .\nns:m.017c87 ns:influence.influence_node.influenced_by ns:m.06pjs\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M0 .\n?x0 P2 M0 .\nM1 P3 ?x0 .\nM1 P3 M2\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 36
  },
  {
    "questionIdx": 238173,
    "questionWithBrackets": "Who was influenced by a female director of [Rabbit Test] and was influenced by [Lenny Clarke]",
    "questionPatternModEntities": "Who was influenced by a female director of M3 and was influenced by M1",
    "questionTemplate": "Who was [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] and was [VP_SIMPLE] by [entity]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:people.person .\n?x0 ns:influence.influence_node.influenced_by ?x1 .\n?x0 ns:influence.influence_node.influenced_by ns:m.01l7f1 .\n?x1 ns:film.director.film ns:m.0400ts .\n?x1 ns:people.person.gender ns:m.02zsn\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P0 M1 .\n?x0 a M0 .\n?x1 P1 M2 .\n?x1 P2 M3\n}",
    "expectedResponse": "Louis C.K.",
    "recursionDepth": 36
  },
  {
    "questionIdx": 9058,
    "questionWithBrackets": "Did [H. Gifford Fong], [Johann Wolfgang von Goethe], [William Godwin], [Samuel Taylor Coleridge], and [Mary Wollstonecraft] influence a character's female sibling",
    "questionPatternModEntities": "Did M2 , M3 , M4 , M5 , and M6 influence a character 's female sibling",
    "questionTemplate": "Did [entity] , [entity] , [entity] , [entity] , and [entity] [VP_SIMPLE] a [NP_SIMPLE] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:people.person.gender ns:m.02zsn .\n?x0 ns:people.person.sibling_s/ns:people.sibling_relationship.sibling|ns:fictional_universe.fictional_character.siblings/ns:fictional_universe.sibling_relationship_of_fictional_characters.siblings ?x1 .\n?x1 a ns:fictional_universe.fictional_character .\nFILTER ( ?x0 != ?x1 ) .\nns:m.011zsy ns:influence.influence_node.influenced ?x0 .\nns:m.042q3 ns:influence.influence_node.influenced ?x0 .\nns:m.04_cw ns:influence.influence_node.influenced ?x0 .\nns:m.05w58sv ns:influence.influence_node.influenced ?x0 .\nns:m.078w2 ns:influence.influence_node.influenced ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x0 P1 M0 .\n?x1 a M1 .\nFILTER ( ?x0 != ?x1 ) .\nM2 P2 ?x0 .\nM3 P2 ?x0 .\nM4 P2 ?x0 .\nM5 P2 ?x0 .\nM6 P2 ?x0\n}",
    "expectedResponse": "No",
    "recursionDepth": 36
  },
  {
    "questionIdx": 82220,
    "questionWithBrackets": "Was [The Rain People] written by a film editor that executive produced [Goosed] and wrote [Apocalypse Now Redux]",
    "questionPatternModEntities": "Was M3 written by a film editor that executive produced M2 and wrote M1",
    "questionTemplate": "Was [entity] [VP_SIMPLE] by a [NP_SIMPLE] that [VP_SIMPLE] [entity] and [VP_SIMPLE] [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 a ns:film.editor .\n?x0 ns:film.producer.films_executive_produced ns:m.0dl7yl1 .\n?x0 ns:film.writer.film ns:m.02p5_hn .\nns:m.0ds_t_ ns:film.film.written_by ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M1 .\n?x0 P1 M2 .\n?x0 a M0 .\nM3 P2 ?x0\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 36
  },
  {
    "questionIdx": 81029,
    "questionWithBrackets": "Was [The Heifer] edited by [Rudolfo Wedeles] and executive produced by a film producer's Spanish parent",
    "questionPatternModEntities": "Was M2 edited by M3 and executive produced by a film producer 's Spanish parent",
    "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] and [VP_SIMPLE] by a [NP_SIMPLE] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:people.person.children|ns:fictional_universe.fictional_character.children|ns:organization.organization.child/ns:organization.organization_relationship.child ?x1 .\n?x0 ns:people.person.nationality ns:m.06mkj .\n?x1 a ns:film.producer .\nns:m.03qd025 ns:film.film.edited_by ns:m.0n4c_6_ .\nns:m.03qd025 ns:film.film.executive_produced_by ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 ?x1 .\n?x1 a M1 .\nM2 P2 ?x0 .\nM2 P3 M3\n}",
    "expectedResponse": "No",
    "recursionDepth": 36
  },
  {
    "questionIdx": 135883,
    "questionWithBrackets": "What Swedish male film producer was influenced by [S\u00f8ren Kierkegaard] and influenced [John Waters]",
    "questionPatternModEntities": "What Swedish male film producer was influenced by M2 and influenced M1",
    "questionTemplate": "What [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [NP_SIMPLE] was [VP_SIMPLE] by [entity] and [VP_SIMPLE] [entity]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:film.producer .\n?x0 ns:influence.influence_node.influenced ns:m.02yy_j .\n?x0 ns:influence.influence_node.influenced_by ns:m.06qvh .\n?x0 ns:people.person.gender ns:m.05zppz .\n?x0 ns:people.person.nationality ns:m.0d0vqn\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M1 .\n?x0 P1 M2 .\n?x0 P2 M3 .\n?x0 P3 M4 .\n?x0 a M0\n}",
    "expectedResponse": "Ingmar Bergman",
    "recursionDepth": 36
  },
  {
    "questionIdx": 125824,
    "questionWithBrackets": "Were [The Big Gay Musical] and [Year of the Nail] edited by and directed by a film editor's Mexican spouse",
    "questionPatternModEntities": "Were M2 and M3 edited by and directed by a film editor 's Mexican spouse",
    "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by and [VP_SIMPLE] by a [NP_SIMPLE] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:people.person.nationality ns:m.0b90_r .\n?x0 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ?x1 .\n?x1 a ns:film.editor .\nFILTER ( ?x0 != ?x1 ) .\nns:m.04mwc27 ns:film.film.directed_by ?x0 .\nns:m.04mwc27 ns:film.film.edited_by ?x0 .\nns:m.05c131f ns:film.film.directed_by ?x0 .\nns:m.05c131f ns:film.film.edited_by ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 ?x1 .\n?x1 a M1 .\nFILTER ( ?x0 != ?x1 ) .\nM2 P2 ?x0 .\nM2 P3 ?x0 .\nM3 P2 ?x0 .\nM3 P3 ?x0\n}",
    "expectedResponse": "No",
    "recursionDepth": 36
  },
  {
    "questionIdx": 122395,
    "questionWithBrackets": "Were [Paradise Road] and [She's the One] distributed by an employer of [Alan N. Braverman] and distributed by a film producer",
    "questionPatternModEntities": "Were M2 and M3 distributed by a employer of M1 and distributed by a film producer",
    "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity] and [VP_SIMPLE] by a [NP_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 a ns:film.producer .\n?x1 ns:business.employer.employees/ns:business.employment_tenure.person ns:m.03hdl2x .\nns:m.06wqgh ns:film.film.distributors/ns:film.film_film_distributor_relationship.distributor ?x0 .\nns:m.06wqgh ns:film.film.distributors/ns:film.film_film_distributor_relationship.distributor ?x1 .\nns:m.0bvvw7 ns:film.film.distributors/ns:film.film_film_distributor_relationship.distributor ?x0 .\nns:m.0bvvw7 ns:film.film.distributors/ns:film.film_film_distributor_relationship.distributor ?x1\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 a M0 .\n?x1 P0 M1 .\nM2 P1 ?x0 .\nM2 P1 ?x1 .\nM3 P1 ?x0 .\nM3 P1 ?x1\n}",
    "expectedResponse": "No",
    "recursionDepth": 36
  },
  {
    "questionIdx": 120364,
    "questionWithBrackets": "Were [Loneliness Is Soul], [Radioland Murders], [Maisy's Garden], [Blues for the Avatar], and [Rick's Canoe] written and executive produced by a film editor",
    "questionPatternModEntities": "Were M1 , M2 , M3 , M4 , and M5 written and executive produced by a film editor",
    "questionTemplate": "Were [entity] , [entity] , [entity] , [entity] , and [entity] [VP_SIMPLE] and [VP_SIMPLE] by a [NP_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 a ns:film.editor .\nns:m.08ktmx ns:film.film.executive_produced_by ?x0 .\nns:m.08ktmx ns:film.film.written_by ?x0 .\nns:m.0zd5p8f ns:film.film.executive_produced_by ?x0 .\nns:m.0zd5p8f ns:film.film.written_by ?x0 .\nns:m.0zgygxr ns:film.film.executive_produced_by ?x0 .\nns:m.0zgygxr ns:film.film.written_by ?x0 .\nns:m.0znn7j_ ns:film.film.executive_produced_by ?x0 .\nns:m.0znn7j_ ns:film.film.written_by ?x0 .\nns:m.0zvz2b2 ns:film.film.executive_produced_by ?x0 .\nns:m.0zvz2b2 ns:film.film.written_by ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 a M0 .\nM1 P0 ?x0 .\nM1 P1 ?x0 .\nM2 P0 ?x0 .\nM2 P1 ?x0 .\nM3 P0 ?x0 .\nM3 P1 ?x0 .\nM4 P0 ?x0 .\nM4 P1 ?x0 .\nM5 P0 ?x0 .\nM5 P1 ?x0\n}",
    "expectedResponse": "No",
    "recursionDepth": 36
  },
  {
    "questionIdx": 186363,
    "questionWithBrackets": "What was written, directed, and edited by [The Wizard of Speed and Time]'s director, producer, and costume designer",
    "questionPatternModEntities": "What was written , directed , and edited by M0 's director , producer , and costume designer",
    "questionTemplate": "What was [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] , [ROLE_SIMPLE] , and [ROLE_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.film.directed_by ?x1 .\n?x0 ns:film.film.edited_by ?x1 .\n?x0 ns:film.film.written_by ?x1 .\n?x1 ns:film.director.film ns:m.083y0 .\n?x1 ns:film.film_costumer_designer.costume_design_for_film ns:m.083y0 .\n?x1 ns:film.producer.film|ns:film.production_company.films ns:m.083y0\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x1 P3 M0 .\n?x1 P4 M0 .\n?x1 P5 M0\n}",
    "expectedResponse": "The Wizard of Speed and Time; Animato",
    "recursionDepth": 36
  },
  {
    "questionIdx": 150201,
    "questionWithBrackets": "What did a male art director of [Edmond Was a Donkey] write, executive produce, and direct",
    "questionPatternModEntities": "What did a male art director of M1 write , executive produce , and direct",
    "questionTemplate": "What did a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.film.directed_by ?x1 .\n?x0 ns:film.film.executive_produced_by ?x1 .\n?x0 ns:film.film.written_by ?x1 .\n?x1 ns:film.film_art_director.films_art_directed ns:m.0k3d95c .\n?x1 ns:people.person.gender ns:m.05zppz\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x1 P3 M0 .\n?x1 P4 M1\n}",
    "expectedResponse": "Mister Cok",
    "recursionDepth": 36
  },
  {
    "questionIdx": 176412,
    "questionWithBrackets": "What was executive produced by [Edward L. Montoro] and directed by [Porno Holocaust]'s director, cinematographer, and star",
    "questionPatternModEntities": "What was executive produced by M0 and directed by M1 's director , cinematographer , and star",
    "questionTemplate": "What was [VP_SIMPLE] by [entity] and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] , [ROLE_SIMPLE] , and [ROLE_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.film.directed_by ?x1 .\n?x0 ns:film.film.executive_produced_by ns:m.02qfpxz .\n?x1 ns:film.actor.film/ns:film.performance.film ns:m.04jbf3q .\n?x1 ns:film.cinematographer.film ns:m.04jbf3q .\n?x1 ns:film.director.film ns:m.04jbf3q\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 ?x1 .\n?x1 P2 M1 .\n?x1 P3 M1 .\n?x1 P4 M1\n}",
    "expectedResponse": "Anthropophagous",
    "recursionDepth": 36
  },
  {
    "questionIdx": 47983,
    "questionWithBrackets": "Was [Black Book] directed by a Dutch actor and executive produced by [Andreas Schmid] and [Carl Woebcken]",
    "questionPatternModEntities": "Was M2 directed by a Dutch actor and executive produced by M3 and M4",
    "questionTemplate": "Was [entity] [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [NP_SIMPLE] and [VP_SIMPLE] by [entity] and [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 a ns:film.actor .\n?x0 ns:people.person.nationality ns:m.059j2 .\nns:m.0b40y4 ns:film.film.directed_by ?x0 .\nns:m.0b40y4 ns:film.film.executive_produced_by ns:m.064kww4 .\nns:m.0b40y4 ns:film.film.executive_produced_by ns:m.0k4h2v\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M1 .\n?x0 a M0 .\nM2 P1 M3 .\nM2 P1 M4 .\nM2 P2 ?x0\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 36
  },
  {
    "questionIdx": 118007,
    "questionWithBrackets": "Were [Hong Kong Ghost Stories] and [Pulse Pounders] directed by and executive produced by a film's prequel's producer",
    "questionPatternModEntities": "Were M1 and M2 directed by and executive produced by a film 's prequel 's producer",
    "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by and [VP_SIMPLE] by a [NP_SIMPLE] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.producer.film|ns:film.production_company.films ?x1 .\n?x1 ns:film.film.sequel ?x2 .\n?x2 a ns:film.film .\nns:m.0b6krjv ns:film.film.directed_by ?x0 .\nns:m.0b6krjv ns:film.film.executive_produced_by ?x0 .\nns:m.0hz8pl_ ns:film.film.directed_by ?x0 .\nns:m.0hz8pl_ ns:film.film.executive_produced_by ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x1 P1 ?x2 .\n?x2 a M0 .\nM1 P2 ?x0 .\nM1 P3 ?x0 .\nM2 P2 ?x0 .\nM2 P3 ?x0\n}",
    "expectedResponse": "No",
    "recursionDepth": 36
  },
  {
    "questionIdx": 20536,
    "questionWithBrackets": "Did [Terrence Malick] executive produce [The Medallion], executive produce [Rob-B-Hood], and write a film",
    "questionPatternModEntities": "Did M1 executive produce M2 , executive produce M3 , and write a film",
    "questionTemplate": "Did [entity] [VP_SIMPLE] [entity] , [VP_SIMPLE] [entity] , and [VP_SIMPLE] a [NP_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 a ns:film.film .\nns:m.0kvqv ns:film.producer.films_executive_produced ns:m.02_sqq .\nns:m.0kvqv ns:film.producer.films_executive_produced ns:m.0btf7x .\nns:m.0kvqv ns:film.writer.film ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 a M0 .\nM1 P0 ?x0 .\nM1 P1 M2 .\nM1 P1 M3\n}",
    "expectedResponse": "No",
    "recursionDepth": 36
  },
  {
    "questionIdx": 214785,
    "questionWithBrackets": "Who did [Philippa Scott]'s male spouse's female spouse marry and influence",
    "questionPatternModEntities": "Who did M3 's male spouse 's female spouse marry and influence",
    "questionTemplate": "Who did [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] [VP_SIMPLE] and [VP_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:people.person .\n?x0 ns:influence.influence_node.influenced_by ?x1 .\n?x0 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ?x1 .\n?x1 ns:people.person.gender ns:m.02zsn .\n?x1 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ?x2 .\n?x2 ns:people.person.gender ns:m.05zppz .\n?x2 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ns:m.09v6q4s .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x1 != ?x2 ) .\nFILTER ( ?x2 != ns:m.09v6q4s )\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 a M0 .\n?x1 P1 ?x2 .\n?x1 P2 M1 .\n?x2 P1 M3 .\n?x2 P2 M2 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x1 != ?x2 ) .\nFILTER ( ?x2 != M3 )\n}",
    "expectedResponse": "Kingsley Amis",
    "recursionDepth": 36
  },
  {
    "questionIdx": 125008,
    "questionWithBrackets": "Were [Stars 80] and [Prehysteria!] directed by and produced by a French film director's child",
    "questionPatternModEntities": "Were M2 and M3 directed by and produced by a French film director 's child",
    "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by and [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [NP_SIMPLE] 's [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:people.person.parents|ns:fictional_universe.fictional_character.parents|ns:organization.organization.parent/ns:organization.organization_relationship.parent ?x1 .\n?x1 a ns:film.director .\n?x1 ns:people.person.nationality ns:m.0f8l9c .\nns:m.07j8r5 ns:film.film.directed_by ?x0 .\nns:m.07j8r5 ns:film.film.produced_by|ns:film.film.production_companies ?x0 .\nns:m.0ngn633 ns:film.film.directed_by ?x0 .\nns:m.0ngn633 ns:film.film.produced_by|ns:film.film.production_companies ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x1 P1 M1 .\n?x1 a M0 .\nM2 P2 ?x0 .\nM2 P3 ?x0 .\nM3 P2 ?x0 .\nM3 P3 ?x0\n}",
    "expectedResponse": "No",
    "recursionDepth": 36
  },
  {
    "questionIdx": 216453,
    "questionWithBrackets": "Who did an Italian employee of [Maker Studios] influence and [La Toya Jackson]'s sibling influence",
    "questionPatternModEntities": "Who did a Italian employee of M2 influence and M1 's sibling influence",
    "questionTemplate": "Who did a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] [VP_SIMPLE] and [entity] 's [ROLE_SIMPLE] [VP_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:people.person .\n?x0 ns:influence.influence_node.influenced_by ?x1 .\n?x0 ns:influence.influence_node.influenced_by ?x2 .\n?x1 ns:people.person.sibling_s/ns:people.sibling_relationship.sibling|ns:fictional_universe.fictional_character.siblings/ns:fictional_universe.sibling_relationship_of_fictional_characters.siblings ns:m.013v5j .\n?x2 ns:people.person.employment_history/ns:business.employment_tenure.company ns:m.0h3m6mm .\n?x2 ns:people.person.nationality ns:m.03rjj .\nFILTER ( ?x1 != ns:m.013v5j )\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P0 ?x2 .\n?x0 a M0 .\n?x1 P1 M1 .\n?x2 P2 M2 .\n?x2 P3 M3 .\nFILTER ( ?x1 != M1 )\n}",
    "expectedResponse": "Lady Gaga",
    "recursionDepth": 36
  },
  {
    "questionIdx": 174341,
    "questionWithBrackets": "What was edited by a film editor that [The ABCs of Death] was written by and directed by [Glenn McQuaid]",
    "questionPatternModEntities": "What was edited by a film editor that M2 was written by and directed by M0",
    "questionTemplate": "What was [VP_SIMPLE] by a [NP_SIMPLE] that [entity] was [VP_SIMPLE] by and [VP_SIMPLE] by [entity]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.film.directed_by ns:m.08tkflp .\n?x0 ns:film.film.edited_by ?x1 .\n?x1 a ns:film.editor .\n?x1 ns:film.writer.film ns:m.0j7n68k\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 M0 .\n?x1 P2 M2 .\n?x1 a M1\n}",
    "expectedResponse": "V/H/S",
    "recursionDepth": 36
  },
  {
    "questionIdx": 174499,
    "questionWithBrackets": "What was edited by a star of [Pop Skull] and [24 Exposures] and edited by [Rangga Maya Barack-Evans]'s spouse",
    "questionPatternModEntities": "What was edited by a star of M0 and M1 and edited by M2 's spouse",
    "questionTemplate": "What was [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity] and [entity] and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.film.edited_by ?x1 .\n?x0 ns:film.film.edited_by ?x2 .\n?x1 ns:film.actor.film/ns:film.performance.film ns:m.0cs86r8 .\n?x1 ns:film.actor.film/ns:film.performance.film ns:m.0zv_9rf .\n?x2 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ns:m.0hls1rq .\nFILTER ( ?x2 != ns:m.0hls1rq )\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P0 ?x2 .\n?x1 P1 M0 .\n?x1 P1 M1 .\n?x2 P2 M2 .\nFILTER ( ?x2 != M2 )\n}",
    "expectedResponse": "V/H/S/2",
    "recursionDepth": 36
  },
  {
    "questionIdx": 80062,
    "questionWithBrackets": "Was [The Chaplin Revue] distributed by [Warner Bros. Entertainment], produced by [Sleeping Betty]'s editor, and distributed by [United Artists]",
    "questionPatternModEntities": "Was M1 distributed by M2 , produced by M0 's editor , and distributed by M3",
    "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] , and [VP_SIMPLE] by [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.editor.film ns:m.09gjc4k .\nns:m.02vl0sm ns:film.film.distributors/ns:film.film_film_distributor_relationship.distributor ns:m.017jv5 .\nns:m.02vl0sm ns:film.film.distributors/ns:film.film_film_distributor_relationship.distributor ns:m.086k8 .\nns:m.02vl0sm ns:film.film.produced_by|ns:film.film.production_companies ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 M2 .\nM1 P1 M3 .\nM1 P2 ?x0\n}",
    "expectedResponse": "No",
    "recursionDepth": 36
  },
  {
    "questionIdx": 136831,
    "questionWithBrackets": "What actor was a female Canadian film director that edited [P4W: Prison For Women] and [Hookers...On Davie]",
    "questionPatternModEntities": "What actor was a female Canadian film director that edited M2 and M3",
    "questionTemplate": "What [NP_SIMPLE] was a [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [NP_SIMPLE] that [VP_SIMPLE] [entity] and [entity]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:film.actor .\n?x0 a ns:film.director .\n?x0 ns:film.editor.film ns:m.0c5j4b3 .\n?x0 ns:film.editor.film ns:m.0c5vgtt .\n?x0 ns:people.person.gender ns:m.02zsn .\n?x0 ns:people.person.nationality ns:m.0d060g\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M2 .\n?x0 P0 M3 .\n?x0 P1 M4 .\n?x0 P2 M5 .\n?x0 a M0 .\n?x0 a M1\n}",
    "expectedResponse": "Holly Dale",
    "recursionDepth": 36
  },
  {
    "questionIdx": 128906,
    "questionWithBrackets": "Were [Unforgivable Blackness] and [The Dust Bowl] produced by and executive produced by a film director's parent's spouse",
    "questionPatternModEntities": "Were M1 and M2 produced by and executive produced by a film director 's parent 's spouse",
    "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by and [VP_SIMPLE] by a [NP_SIMPLE] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ?x1 .\n?x1 ns:people.person.children|ns:fictional_universe.fictional_character.children|ns:organization.organization.child/ns:organization.organization_relationship.child ?x2 .\n?x2 a ns:film.director .\nFILTER ( ?x0 != ?x1 ) .\nns:m.0264ttw ns:film.film.executive_produced_by ?x0 .\nns:m.0264ttw ns:film.film.produced_by|ns:film.film.production_companies ?x0 .\nns:m.0nbv85d ns:film.film.executive_produced_by ?x0 .\nns:m.0nbv85d ns:film.film.produced_by|ns:film.film.production_companies ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x1 P1 ?x2 .\n?x2 a M0 .\nFILTER ( ?x0 != ?x1 ) .\nM1 P2 ?x0 .\nM1 P3 ?x0 .\nM2 P2 ?x0 .\nM2 P3 ?x0\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 36
  },
  {
    "questionIdx": 16634,
    "questionWithBrackets": "Did [Pauline Kael] influence a male writer of [Django Unchained] and marry a cinematographer",
    "questionPatternModEntities": "Did M3 influence a male writer of M0 and marry a cinematographer",
    "questionTemplate": "Did [entity] [VP_SIMPLE] a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] and [VP_SIMPLE] a [NP_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.writer.film ns:m.0gwjw0c .\n?x0 ns:people.person.gender ns:m.05zppz .\n?x1 a ns:film.cinematographer .\nFILTER ( ns:m.01tgbf != ?x1 ) .\nns:m.01tgbf ns:influence.influence_node.influenced ?x0 .\nns:m.01tgbf ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ?x1\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x1 a M2 .\nFILTER ( M3 != ?x1 ) .\nM3 P2 ?x0 .\nM3 P3 ?x1\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 36
  },
  {
    "questionIdx": 219436,
    "questionWithBrackets": "Who influenced a parent and spouse of [David von Schlegell] and influenced [Ostensibly]'s star",
    "questionPatternModEntities": "Who influenced a parent and spouse of M1 and influenced M2 's star",
    "questionTemplate": "Who [VP_SIMPLE] a [ROLE_SIMPLE] and [ROLE_SIMPLE] of [entity] and [VP_SIMPLE] [entity] 's [ROLE_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:people.person .\n?x0 ns:influence.influence_node.influenced ?x1 .\n?x0 ns:influence.influence_node.influenced ?x2 .\n?x1 ns:people.person.children|ns:fictional_universe.fictional_character.children|ns:organization.organization.child/ns:organization.organization_relationship.child ns:m.09k4jvh .\n?x1 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ns:m.09k4jvh .\n?x2 ns:film.actor.film/ns:film.performance.film ns:m.0_cq5vy .\nFILTER ( ?x1 != ns:m.09k4jvh )\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P0 ?x2 .\n?x0 a M0 .\n?x1 P1 M1 .\n?x1 P2 M1 .\n?x2 P3 M2 .\nFILTER ( ?x1 != M1 )\n}",
    "expectedResponse": "Wallace Stevens",
    "recursionDepth": 36
  },
  {
    "questionIdx": 215654,
    "questionWithBrackets": "Who did a cinematographer that [One Hundred and One Nights] and [Les dites cariatides bis] were directed by marry and influence",
    "questionPatternModEntities": "Who did a cinematographer that M2 and M3 were directed by marry and influence",
    "questionTemplate": "Who did a [NP_SIMPLE] that [entity] and [entity] were [VP_SIMPLE] by [VP_SIMPLE] and [VP_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:people.person .\n?x0 ns:influence.influence_node.influenced_by ?x1 .\n?x0 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ?x1 .\n?x1 a ns:film.cinematographer .\n?x1 ns:film.director.film ns:m.05q6jgk .\n?x1 ns:film.director.film ns:m.0hz1xxb .\nFILTER ( ?x0 != ?x1 )\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 a M0 .\n?x1 P2 M2 .\n?x1 P2 M3 .\n?x1 a M1 .\nFILTER ( ?x0 != ?x1 )\n}",
    "expectedResponse": "Jacques Demy",
    "recursionDepth": 36
  },
  {
    "questionIdx": 124227,
    "questionWithBrackets": "Were [Scenes from a Marriage] and [Sally and Freedom] produced by a Swedish person influenced by [August Strindberg] and [D. W. Griffith]",
    "questionPatternModEntities": "Were M4 and M5 produced by a Swedish person influenced by M1 and M2",
    "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [NP_SIMPLE] [VP_SIMPLE] by [entity] and [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 a ns:people.person .\n?x0 ns:influence.influence_node.influenced_by ns:m.026ck .\n?x0 ns:influence.influence_node.influenced_by ns:m.0d5_f .\n?x0 ns:people.person.nationality ns:m.0d0vqn .\nns:m.037ld1 ns:film.film.produced_by|ns:film.film.production_companies ?x0 .\nns:m.0bxl9s3 ns:film.film.produced_by|ns:film.film.production_companies ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P1 M3 .\n?x0 a M0 .\nM4 P2 ?x0 .\nM5 P2 ?x0\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 37
  },
  {
    "questionIdx": 180229,
    "questionWithBrackets": "What was founded by [Yogi the Easter Bear]'s executive producer and founded by a film's sequel's producer",
    "questionPatternModEntities": "What was founded by M1 's executive producer and founded by a film 's sequel 's producer",
    "questionTemplate": "What was [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] and [VP_SIMPLE] by a [NP_SIMPLE] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:organization.organization.founders ?x1 .\n?x0 ns:organization.organization.founders ?x2 .\n?x1 ns:film.producer.film|ns:film.production_company.films ?x3 .\n?x2 ns:film.producer.films_executive_produced ns:m.06mccp .\n?x3 ns:film.film.prequel ?x4 .\n?x4 a ns:film.film\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P0 ?x2 .\n?x1 P1 ?x3 .\n?x2 P2 M1 .\n?x3 P3 ?x4 .\n?x4 a M0\n}",
    "expectedResponse": "Hanna-Barbera",
    "recursionDepth": 37
  },
  {
    "questionIdx": 172446,
    "questionWithBrackets": "What was distributed by [Newmarket Films] and distributed by a film distributor that a film distributor acquired",
    "questionPatternModEntities": "What was distributed by M0 and distributed by a film distributor that a film distributor acquired",
    "questionTemplate": "What was [VP_SIMPLE] by [entity] and [VP_SIMPLE] by a [NP_SIMPLE] that a [NP_SIMPLE] [VP_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.film.distributors/ns:film.film_film_distributor_relationship.distributor ?x1 .\n?x0 ns:film.film.distributors/ns:film.film_film_distributor_relationship.distributor ns:m.02nssb .\n?x1 a ns:film.film_distributor .\n?x1 ns:organization.organization.acquired_by/ns:business.acquisition.acquiring_company ?x2 .\n?x2 a ns:film.film_distributor\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P0 M0 .\n?x1 P1 ?x2 .\n?x1 a M1 .\n?x2 a M1\n}",
    "expectedResponse": "Memento",
    "recursionDepth": 37
  },
  {
    "questionIdx": 179391,
    "questionWithBrackets": "What was founded by [Buddy Squires] and founded by a producer, executive producer, and director of [The Central Park Five]",
    "questionPatternModEntities": "What was founded by M0 and founded by a producer , executive producer , and director of M1",
    "questionTemplate": "What was [VP_SIMPLE] by [entity] and [VP_SIMPLE] by a [ROLE_SIMPLE] , [ROLE_SIMPLE] , and [ROLE_SIMPLE] of [entity]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:organization.organization.founders ?x1 .\n?x0 ns:organization.organization.founders ns:m.0jt29j .\n?x1 ns:film.director.film ns:m.0js8x3_ .\n?x1 ns:film.producer.films_executive_produced ns:m.0js8x3_ .\n?x1 ns:film.producer.film|ns:film.production_company.films ns:m.0js8x3_\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P0 M0 .\n?x1 P1 M1 .\n?x1 P2 M1 .\n?x1 P3 M1\n}",
    "expectedResponse": "Florentine Films",
    "recursionDepth": 37
  },
  {
    "questionIdx": 8204,
    "questionWithBrackets": "Did [George Carlin] and [Don Rickles] influence [Dan Cochran]'s actor and influence a film's executive producer",
    "questionPatternModEntities": "Did M2 and M3 influence M0 's actor and influence a film 's executive producer",
    "questionTemplate": "Did [entity] and [entity] [VP_SIMPLE] [entity] 's [ROLE_SIMPLE] and [VP_SIMPLE] a [NP_SIMPLE] 's [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.actor.film/ns:film.performance.character ns:m.0j36zlx .\n?x1 ns:film.producer.films_executive_produced ?x2 .\n?x2 a ns:film.film .\nns:m.013tjc ns:influence.influence_node.influenced ?x0 .\nns:m.013tjc ns:influence.influence_node.influenced ?x1 .\nns:m.014z8v ns:influence.influence_node.influenced ?x0 .\nns:m.014z8v ns:influence.influence_node.influenced ?x1\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x1 P1 ?x2 .\n?x2 a M1 .\nM2 P2 ?x0 .\nM2 P2 ?x1 .\nM3 P2 ?x0 .\nM3 P2 ?x1\n}",
    "expectedResponse": "No",
    "recursionDepth": 37
  },
  {
    "questionIdx": 145540,
    "questionWithBrackets": "What did [Niels Dekker] and [L\u00e9on Verkade] edit and a film's producer and art director direct",
    "questionPatternModEntities": "What did M0 and M1 edit and a film 's producer and art director direct",
    "questionTemplate": "What did [entity] and [entity] [VP_SIMPLE] and a [NP_SIMPLE] 's [ROLE_SIMPLE] and [ROLE_SIMPLE] [VP_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.film.directed_by ?x1 .\n?x0 ns:film.film.edited_by ns:m.0gwvlhx .\n?x0 ns:film.film.edited_by ns:m.0w_h96_ .\n?x1 ns:film.film_art_director.films_art_directed ?x2 .\n?x1 ns:film.producer.film|ns:film.production_company.films ?x2 .\n?x2 a ns:film.film\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P1 ?x1 .\n?x1 P2 ?x2 .\n?x1 P3 ?x2 .\n?x2 a M2\n}",
    "expectedResponse": "Visions of Europe",
    "recursionDepth": 37
  },
  {
    "questionIdx": 19553,
    "questionWithBrackets": "Did [Spiritual Kung Fu] and [Enter the Phoenix] star [Yuen Biao] and star an art director and executive producer of [CZ12]",
    "questionPatternModEntities": "Did M1 and M3 star M2 and star a art director and executive producer of M0",
    "questionTemplate": "Did [entity] and [entity] [VP_SIMPLE] [entity] and [VP_SIMPLE] a [ROLE_SIMPLE] and [ROLE_SIMPLE] of [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.film_art_director.films_art_directed ns:m.0hznzl6 .\n?x0 ns:film.producer.films_executive_produced ns:m.0hznzl6 .\nns:m.040p_b ns:film.film.starring/ns:film.performance.actor ?x0 .\nns:m.040p_b ns:film.film.starring/ns:film.performance.actor ns:m.02nrln .\nns:m.09h355 ns:film.film.starring/ns:film.performance.actor ?x0 .\nns:m.09h355 ns:film.film.starring/ns:film.performance.actor ns:m.02nrln\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M0 .\nM1 P2 ?x0 .\nM1 P2 M2 .\nM3 P2 ?x0 .\nM3 P2 M2\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 37
  },
  {
    "questionIdx": 123264,
    "questionWithBrackets": "Were [Return of the Jedi] and [Radioland Murders] written by and executive produced by a production company's founder and employee",
    "questionPatternModEntities": "Were M1 and M2 written by and executive produced by a production company 's founder and employee",
    "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by and [VP_SIMPLE] by a [NP_SIMPLE] 's [ROLE_SIMPLE] and [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:organization.organization_founder.organizations_founded ?x1 .\n?x0 ns:people.person.employment_history/ns:business.employment_tenure.company ?x1 .\n?x1 a ns:film.production_company .\nns:m.08ktmx ns:film.film.executive_produced_by ?x0 .\nns:m.08ktmx ns:film.film.written_by ?x0 .\nns:m.0ddjy ns:film.film.executive_produced_by ?x0 .\nns:m.0ddjy ns:film.film.written_by ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x1 a M0 .\nM1 P2 ?x0 .\nM1 P3 ?x0 .\nM2 P2 ?x0 .\nM2 P3 ?x0\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 37
  },
  {
    "questionIdx": 210693,
    "questionWithBrackets": "Which screenwriter that married [The Evening Star]'s star and married [Viviane Gaudet] directed [The Postman's White Nights]",
    "questionPatternModEntities": "Which screenwriter that married M3 's star and married M1 directed M2",
    "questionTemplate": "Which [NP_SIMPLE] that [VP_SIMPLE] [entity] 's [ROLE_SIMPLE] and [VP_SIMPLE] [entity] [VP_SIMPLE] [entity]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:film.writer .\n?x0 ns:film.director.film ns:m.011f1wxn .\n?x0 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ?x1 .\n?x0 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ns:m.0j10qps .\n?x1 ns:film.actor.film/ns:film.performance.film ns:m.05nysd .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x0 != ns:m.0j10qps )\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P0 M1 .\n?x0 P1 M2 .\n?x0 a M0 .\n?x1 P2 M3 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x0 != M1 )\n}",
    "expectedResponse": "Andrei Konchalovsky",
    "recursionDepth": 37
  },
  {
    "questionIdx": 215691,
    "questionWithBrackets": "Who did a company's child and parent employ and [MyPoints.com] and [Federal Reserve System] employ",
    "questionPatternModEntities": "Who did a company 's child and parent employ and M1 and M2 employ",
    "questionTemplate": "Who did a [NP_SIMPLE] 's [ROLE_SIMPLE] and [ROLE_SIMPLE] [VP_SIMPLE] and [entity] and [entity] [VP_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:people.person .\n?x0 ns:people.person.employment_history/ns:business.employment_tenure.company ?x1 .\n?x0 ns:people.person.employment_history/ns:business.employment_tenure.company ns:m.02xmb .\n?x0 ns:people.person.employment_history/ns:business.employment_tenure.company ns:m.03btr4q .\n?x1 ns:people.person.children|ns:fictional_universe.fictional_character.children|ns:organization.organization.child/ns:organization.organization_relationship.child ?x2 .\n?x1 ns:people.person.parents|ns:fictional_universe.fictional_character.parents|ns:organization.organization.parent/ns:organization.organization_relationship.parent ?x2 .\n?x2 a ns:business.employer\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 a M0 .\n?x1 P1 ?x2 .\n?x1 P2 ?x2 .\n?x2 a M3\n}",
    "expectedResponse": "Curtis Atkisson",
    "recursionDepth": 37
  },
  {
    "questionIdx": 193607,
    "questionWithBrackets": "Which actor whose spouse directed and wrote [Animals Distract Me] did [Franz Kafka] and [William Eggleston] influence",
    "questionPatternModEntities": "Which actor whose spouse directed and wrote M3 did M1 and M2 influence",
    "questionTemplate": "Which [NP_SIMPLE] whose [ROLE_SIMPLE] [VP_SIMPLE] and [VP_SIMPLE] [entity] did [entity] and [entity] [VP_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:film.actor .\n?x0 ns:influence.influence_node.influenced_by ns:m.03dpcd .\n?x0 ns:influence.influence_node.influenced_by ns:m.03f0324 .\n?x0 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ?x1 .\n?x1 ns:film.director.film ns:m.0ft1rpp .\n?x1 ns:film.writer.film ns:m.0ft1rpp .\nFILTER ( ?x0 != ?x1 )\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P1 ?x1 .\n?x0 a M0 .\n?x1 P2 M3 .\n?x1 P3 M3 .\nFILTER ( ?x0 != ?x1 )\n}",
    "expectedResponse": "David Lynch",
    "recursionDepth": 37
  },
  {
    "questionIdx": 181918,
    "questionWithBrackets": "What was produced by a Canadian cinematographer of [Elton John: Tantrums & Tiaras] and written by [Steve Hamilton Shaw] and [Kathy Greenberg]",
    "questionPatternModEntities": "What was produced by a Canadian cinematographer of M3 and written by M0 and M1",
    "questionTemplate": "What was [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] and [VP_SIMPLE] by [entity] and [entity]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.film.produced_by|ns:film.film.production_companies ?x1 .\n?x0 ns:film.film.written_by ns:m.0b3vx23 .\n?x0 ns:film.film.written_by ns:m.0k2bwd .\n?x1 ns:film.cinematographer.film ns:m.08hgwv .\n?x1 ns:people.person.nationality ns:m.0d060g\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P1 ?x1 .\n?x1 P2 M2 .\n?x1 P3 M3\n}",
    "expectedResponse": "Gnomeo & Juliet",
    "recursionDepth": 37
  },
  {
    "questionIdx": 9962,
    "questionWithBrackets": "Did [Howard Hughes] found [Electron Technologies, Inc.], found an employer of [Guy Meisl], and found [Trans World Airlines]",
    "questionPatternModEntities": "Did M1 found M2 , found a employer of M0 , and found M3",
    "questionTemplate": "Did [entity] [VP_SIMPLE] [entity] , [VP_SIMPLE] a [ROLE_SIMPLE] of [entity] , and [VP_SIMPLE] [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:business.employer.employees/ns:business.employment_tenure.person ns:m.042x5dh .\nns:m.03n93 ns:organization.organization_founder.organizations_founded ?x0 .\nns:m.03n93 ns:organization.organization_founder.organizations_founded ns:m.013w80 .\nns:m.03n93 ns:organization.organization_founder.organizations_founded ns:m.0gyt9_f\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 ?x0 .\nM1 P1 M2 .\nM1 P1 M3\n}",
    "expectedResponse": "No",
    "recursionDepth": 37
  },
  {
    "questionIdx": 51501,
    "questionWithBrackets": "Was [Danielle Koenig] an Italian film editor that [Dante Alighieri] influenced and [Catherine Breillat] was influenced by",
    "questionPatternModEntities": "Was M0 a Italian film editor that M3 influenced and M2 was influenced by",
    "questionTemplate": "Was [entity] a [ADJECTIVE_SIMPLE] [NP_SIMPLE] that [entity] [VP_SIMPLE] and [entity] was [VP_SIMPLE] by",
    "sparql": "SELECT count(*) WHERE {\nns:m.0gcrj5 a ns:film.editor .\nns:m.0gcrj5 ns:influence.influence_node.influenced ns:m.01sws5 .\nns:m.0gcrj5 ns:influence.influence_node.influenced_by ns:m.028p0 .\nns:m.0gcrj5 ns:people.person.nationality ns:m.03rjj\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M2 .\nM0 P1 M3 .\nM0 P2 M4 .\nM0 a M1\n}",
    "expectedResponse": "No",
    "recursionDepth": 37
  },
  {
    "questionIdx": 58794,
    "questionWithBrackets": "Was [Hopelessly in June] executive produced by an art director of [Inquietude [light Version]] and [Osmosis Jones] and written by an actor",
    "questionPatternModEntities": "Was M3 executive produced by a art director of M0 and M1 and written by a actor",
    "questionTemplate": "Was [entity] [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity] and [entity] and [VP_SIMPLE] by a [NP_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.film_art_director.films_art_directed ns:m.011qztzx .\n?x0 ns:film.film_art_director.films_art_directed ns:m.0dqwvw .\n?x1 a ns:film.actor .\nns:m.0h4_31c ns:film.film.executive_produced_by ?x0 .\nns:m.0h4_31c ns:film.film.written_by ?x1\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x1 a M2 .\nM3 P1 ?x0 .\nM3 P2 ?x1\n}",
    "expectedResponse": "No",
    "recursionDepth": 37
  },
  {
    "questionIdx": 122137,
    "questionWithBrackets": "Were [O Porto] and [The Godfather Part III] edited by a cinematographer's sibling and edited by a screenwriter",
    "questionPatternModEntities": "Were M2 and M3 edited by a cinematographer 's sibling and edited by a screenwriter",
    "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by a [NP_SIMPLE] 's [ROLE_SIMPLE] and [VP_SIMPLE] by a [NP_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:people.person.sibling_s/ns:people.sibling_relationship.sibling|ns:fictional_universe.fictional_character.siblings/ns:fictional_universe.sibling_relationship_of_fictional_characters.siblings ?x1 .\n?x1 a ns:film.cinematographer .\n?x2 a ns:film.writer .\nFILTER ( ?x0 != ?x1 ) .\nns:m.0_skr6c ns:film.film.edited_by ?x0 .\nns:m.0_skr6c ns:film.film.edited_by ?x2 .\nns:m.0y_yw ns:film.film.edited_by ?x0 .\nns:m.0y_yw ns:film.film.edited_by ?x2\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x1 a M0 .\n?x2 a M1 .\nFILTER ( ?x0 != ?x1 ) .\nM2 P1 ?x0 .\nM2 P1 ?x2 .\nM3 P1 ?x0 .\nM3 P1 ?x2\n}",
    "expectedResponse": "No",
    "recursionDepth": 37
  },
  {
    "questionIdx": 26429,
    "questionWithBrackets": "Did a Canadian founder of a film producer executive produce [Milius] and edit [Jersey Girl]",
    "questionPatternModEntities": "Did a Canadian founder of a film producer executive produce M1 and edit M0",
    "questionTemplate": "Did a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of a [NP_SIMPLE] [VP_SIMPLE] [entity] and [VP_SIMPLE] [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.editor.film ns:m.02qzh2 .\n?x0 ns:film.producer.films_executive_produced ns:m.0_7n71j .\n?x0 ns:organization.organization_founder.organizations_founded ?x1 .\n?x0 ns:people.person.nationality ns:m.0d060g .\n?x1 a ns:film.producer\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P2 ?x1 .\n?x0 P3 M2 .\n?x1 a M3\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 37
  },
  {
    "questionIdx": 216049,
    "questionWithBrackets": "Who did a film's sequel's female producer marry and [Patty Walters] marry",
    "questionPatternModEntities": "Who did a film 's sequel 's female producer marry and M1 marry",
    "questionTemplate": "Who did a [NP_SIMPLE] 's [ROLE_SIMPLE] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] [VP_SIMPLE] and [entity] [VP_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:people.person .\n?x0 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ?x1 .\n?x0 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ns:m.0vs7lf4 .\n?x1 ns:film.producer.film|ns:film.production_company.films ?x2 .\n?x1 ns:people.person.gender ns:m.02zsn .\n?x2 ns:film.film.prequel ?x3 .\n?x3 a ns:film.film .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x0 != ns:m.0vs7lf4 )\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P0 M1 .\n?x0 a M0 .\n?x1 P1 ?x2 .\n?x1 P2 M2 .\n?x2 P3 ?x3 .\n?x3 a M3 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x0 != M1 )\n}",
    "expectedResponse": "Jamie Walters",
    "recursionDepth": 37
  },
  {
    "questionIdx": 144573,
    "questionWithBrackets": "What did [Kalpathi S. Suresh] produce, [Abburi Ravi] write, and a film editor's child direct",
    "questionPatternModEntities": "What did M1 produce , M0 write , and a film editor 's child direct",
    "questionTemplate": "What did [entity] [VP_SIMPLE] , [entity] [VP_SIMPLE] , and a [NP_SIMPLE] 's [ROLE_SIMPLE] [VP_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.film.directed_by ?x1 .\n?x0 ns:film.film.produced_by|ns:film.film.production_companies ns:m.0wrqjg1 .\n?x0 ns:film.film.written_by ns:m.026v1zh .\n?x1 ns:people.person.parents|ns:fictional_universe.fictional_character.parents|ns:organization.organization.parent/ns:organization.organization_relationship.parent ?x2 .\n?x2 a ns:film.editor\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P2 ?x1 .\n?x1 P3 ?x2 .\n?x2 a M2\n}",
    "expectedResponse": "Santosh Subramaniam",
    "recursionDepth": 37
  },
  {
    "questionIdx": 164040,
    "questionWithBrackets": "What screenwriter did [The Oil Conspiracy]'s male writer's employer employ and [Temple University] employ",
    "questionPatternModEntities": "What screenwriter did M2 's male writer 's employer employ and M1 employ",
    "questionTemplate": "What [NP_SIMPLE] did [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] 's [ROLE_SIMPLE] [VP_SIMPLE] and [entity] [VP_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:film.writer .\n?x0 ns:people.person.employment_history/ns:business.employment_tenure.company ?x1 .\n?x0 ns:people.person.employment_history/ns:business.employment_tenure.company ns:m.01jt2w .\n?x1 ns:business.employer.employees/ns:business.employment_tenure.person ?x2 .\n?x2 ns:film.writer.film ns:m.0j8ghjr .\n?x2 ns:people.person.gender ns:m.05zppz\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P0 M1 .\n?x0 a M0 .\n?x1 P1 ?x2 .\n?x2 P2 M2 .\n?x2 P3 M3\n}",
    "expectedResponse": "Jan Krawitz",
    "recursionDepth": 37
  },
  {
    "questionIdx": 145507,
    "questionWithBrackets": "What did [Newmarket Films] and [Walt Disney Pictures] distribute and a film's cinematographer and editor produce",
    "questionPatternModEntities": "What did M0 and M1 distribute and a film 's cinematographer and editor produce",
    "questionTemplate": "What did [entity] and [entity] [VP_SIMPLE] and a [NP_SIMPLE] 's [ROLE_SIMPLE] and [ROLE_SIMPLE] [VP_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.film.distributors/ns:film.film_film_distributor_relationship.distributor ns:m.01795t .\n?x0 ns:film.film.distributors/ns:film.film_film_distributor_relationship.distributor ns:m.02nssb .\n?x0 ns:film.film.produced_by|ns:film.film.production_companies ?x1 .\n?x1 ns:film.cinematographer.film ?x2 .\n?x1 ns:film.editor.film ?x2 .\n?x2 a ns:film.film\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P1 ?x1 .\n?x1 P2 ?x2 .\n?x1 P3 ?x2 .\n?x2 a M2\n}",
    "expectedResponse": "The Prestige",
    "recursionDepth": 37
  },
  {
    "questionIdx": 161941,
    "questionWithBrackets": "What person that a person married was employed by [Regent Seven Seas Cruises] and employed by [Radisson Seven Seas]",
    "questionPatternModEntities": "What person that a person married was employed by M1 and employed by M2",
    "questionTemplate": "What [NP_SIMPLE] that a [NP_SIMPLE] [VP_SIMPLE] was [VP_SIMPLE] by [entity] and [VP_SIMPLE] by [entity]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:people.person .\n?x0 ns:people.person.employment_history/ns:business.employment_tenure.company ns:m.053srj .\n?x0 ns:people.person.employment_history/ns:business.employment_tenure.company ns:m.0q35m_y .\n?x0 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ?x1 .\n?x1 a ns:people.person .\nFILTER ( ?x0 != ?x1 )\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P1 ?x1 .\n?x0 a M0 .\n?x1 a M0 .\nFILTER ( ?x0 != ?x1 )\n}",
    "expectedResponse": "Maria Cabase",
    "recursionDepth": 37
  },
  {
    "questionIdx": 71821,
    "questionWithBrackets": "Was [Pop Skull] produced by and edited by [Leningrad Cowboys Go America]'s sequel's director, editor, and star",
    "questionPatternModEntities": "Was M1 produced by and edited by M0 's sequel 's director , editor , and star",
    "questionTemplate": "Was [entity] [VP_SIMPLE] by and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE] , [ROLE_SIMPLE] , and [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.actor.film/ns:film.performance.film ?x1 .\n?x0 ns:film.director.film ?x1 .\n?x0 ns:film.editor.film ?x1 .\n?x1 ns:film.film.prequel ns:m.08tg5n .\nns:m.0cs86r8 ns:film.film.edited_by ?x0 .\nns:m.0cs86r8 ns:film.film.produced_by|ns:film.film.production_companies ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x1 P3 M0 .\nM1 P4 ?x0 .\nM1 P5 ?x0\n}",
    "expectedResponse": "No",
    "recursionDepth": 37
  },
  {
    "questionIdx": 142693,
    "questionWithBrackets": "What did [Claudine Merlin] and [Gina Pignier] edit and a film director's French sibling produce",
    "questionPatternModEntities": "What did M0 and M1 edit and a film director 's French sibling produce",
    "questionTemplate": "What did [entity] and [entity] [VP_SIMPLE] and a [NP_SIMPLE] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] [VP_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.film.edited_by ns:m.0bwb7z4 .\n?x0 ns:film.film.edited_by ns:m.0k3md0 .\n?x0 ns:film.film.produced_by|ns:film.film.production_companies ?x1 .\n?x1 ns:people.person.nationality ns:m.0f8l9c .\n?x1 ns:people.person.sibling_s/ns:people.sibling_relationship.sibling|ns:fictional_universe.fictional_character.siblings/ns:fictional_universe.sibling_relationship_of_fictional_characters.siblings ?x2 .\n?x2 a ns:film.director .\nFILTER ( ?x1 != ?x2 )\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 M0 .\n?x0 P1 M1 .\n?x1 P2 ?x2 .\n?x1 P3 M2 .\n?x2 a M3 .\nFILTER ( ?x1 != ?x2 )\n}",
    "expectedResponse": "The Big Feast",
    "recursionDepth": 37
  },
  {
    "questionIdx": 180501,
    "questionWithBrackets": "What was founded by a film producer, founded by a costume designer, and founded by [Jamie Selkirk]",
    "questionPatternModEntities": "What was founded by a film producer , founded by a costume designer , and founded by M0",
    "questionTemplate": "What was [VP_SIMPLE] by a [NP_SIMPLE] , [VP_SIMPLE] by a [NP_SIMPLE] , and [VP_SIMPLE] by [entity]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:organization.organization.founders ?x1 .\n?x0 ns:organization.organization.founders ?x2 .\n?x0 ns:organization.organization.founders ns:m.0bxj82 .\n?x1 a ns:film.producer .\n?x2 a ns:film.film_costumer_designer\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P0 ?x2 .\n?x0 P0 M0 .\n?x1 a M1 .\n?x2 a M2\n}",
    "expectedResponse": "Weta Workshop; Weta Digital",
    "recursionDepth": 37
  },
  {
    "questionIdx": 44555,
    "questionWithBrackets": "Was [Agn\u00e8s Varda] a person that a director of [Le sabotier du val de Loire] and [Three Tickets for the 26th] married and influenced",
    "questionPatternModEntities": "Was M2 a person that a director of M0 and M1 married and influenced",
    "questionTemplate": "Was [entity] a [NP_SIMPLE] that a [ROLE_SIMPLE] of [entity] and [entity] [VP_SIMPLE] and [VP_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.director.film ns:m.07wvrk8 .\n?x0 ns:film.director.film ns:m.0gwdz5t .\nFILTER ( ns:m.01vylt != ?x0 ) .\nns:m.01vylt a ns:people.person .\nns:m.01vylt ns:influence.influence_node.influenced_by ?x0 .\nns:m.01vylt ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\nFILTER ( M2 != ?x0 ) .\nM2 P1 ?x0 .\nM2 P2 ?x0 .\nM2 a M3\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 37
  },
  {
    "questionIdx": 171309,
    "questionWithBrackets": "What was directed by, edited by, and written by a French film editor's child",
    "questionPatternModEntities": "What was directed by , edited by , and written by a French film editor 's child",
    "questionTemplate": "What was [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [NP_SIMPLE] 's [ROLE_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.film.directed_by ?x1 .\n?x0 ns:film.film.edited_by ?x1 .\n?x0 ns:film.film.written_by ?x1 .\n?x1 ns:people.person.parents|ns:fictional_universe.fictional_character.parents|ns:organization.organization.parent/ns:organization.organization_relationship.parent ?x2 .\n?x2 a ns:film.editor .\n?x2 ns:people.person.nationality ns:m.0f8l9c\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x1 P3 ?x2 .\n?x2 P4 M1 .\n?x2 a M0\n}",
    "expectedResponse": "The Ceiling",
    "recursionDepth": 37
  },
  {
    "questionIdx": 99253,
    "questionWithBrackets": "Was a film producer that [Ennio Flaiano] was influenced by and [Semih Kaplano\u011flu] was influenced by a costume designer",
    "questionPatternModEntities": "Was a film producer that M2 was influenced by and M3 was influenced by a costume designer",
    "questionTemplate": "Was a [NP_SIMPLE] that [entity] was [VP_SIMPLE] by and [entity] was [VP_SIMPLE] by a [NP_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 a ns:film.film_costumer_designer .\n?x0 a ns:film.producer .\n?x0 ns:influence.influence_node.influenced ns:m.03cs629 .\n?x0 ns:influence.influence_node.influenced ns:m.0czp2t\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M2 .\n?x0 P0 M3 .\n?x0 a M0 .\n?x0 a M1\n}",
    "expectedResponse": "No",
    "recursionDepth": 37
  },
  {
    "questionIdx": 213742,
    "questionWithBrackets": "Who did [Anthony Burgess] influence, an art director marry, and [Toba Metz] and [Christiane Kubrick] marry",
    "questionPatternModEntities": "Who did M1 influence , a art director marry , and M2 and M3 marry",
    "questionTemplate": "Who did [entity] [VP_SIMPLE] , a [NP_SIMPLE] [VP_SIMPLE] , and [entity] and [entity] [VP_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:people.person .\n?x0 ns:influence.influence_node.influenced_by ns:m.0d4jl .\n?x0 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ?x1 .\n?x0 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ns:m.02g6jx0 .\n?x0 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ns:m.09385j .\n?x1 a ns:film.film_art_director .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x0 != ns:m.02g6jx0 ) .\nFILTER ( ?x0 != ns:m.09385j )\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M1 .\n?x0 P1 ?x1 .\n?x0 P1 M2 .\n?x0 P1 M3 .\n?x0 a M0 .\n?x1 a M4 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x0 != M2 ) .\nFILTER ( ?x0 != M3 )\n}",
    "expectedResponse": "Stanley Kubrick",
    "recursionDepth": 37
  },
  {
    "questionIdx": 128282,
    "questionWithBrackets": "Were [Tiger Cage], [Last Hero in China], [True Legend], [Snake in the Eagle's Shadow], and [The Hands of Shang-Chi] directed by a screenwriter's Chinese sibling",
    "questionPatternModEntities": "Were M2 , M3 , M4 , M5 , and M6 directed by a screenwriter 's Chinese sibling",
    "questionTemplate": "Were [entity] , [entity] , [entity] , [entity] , and [entity] [VP_SIMPLE] by a [NP_SIMPLE] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:people.person.nationality ns:m.0d05w3 .\n?x0 ns:people.person.sibling_s/ns:people.sibling_relationship.sibling|ns:fictional_universe.fictional_character.siblings/ns:fictional_universe.sibling_relationship_of_fictional_characters.siblings ?x1 .\n?x1 a ns:film.writer .\nFILTER ( ?x0 != ?x1 ) .\nns:m.02_s2p ns:film.film.directed_by ?x0 .\nns:m.02pxxlq ns:film.film.directed_by ?x0 .\nns:m.07kf0d4 ns:film.film.directed_by ?x0 .\nns:m.0gkrk43 ns:film.film.directed_by ?x0 .\nns:m.0hyqv3d ns:film.film.directed_by ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x0 P1 M0 .\n?x1 a M1 .\nFILTER ( ?x0 != ?x1 ) .\nM2 P2 ?x0 .\nM3 P2 ?x0 .\nM4 P2 ?x0 .\nM5 P2 ?x0 .\nM6 P2 ?x0\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 37
  },
  {
    "questionIdx": 577,
    "questionWithBrackets": "Did [Agatha Sparrow]'s female American actor's spouse's sibling play [Clara Forsythe Allen] and [Queen Clarion]",
    "questionPatternModEntities": "Did M3 's female American actor 's spouse 's sibling play M0 and M1",
    "questionTemplate": "Did [entity] 's [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE] [VP_SIMPLE] [entity] and [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.actor.film/ns:film.performance.character ns:m.0283__w .\n?x0 ns:film.actor.film/ns:film.performance.character ns:m.0h2c_g0 .\n?x0 ns:people.person.sibling_s/ns:people.sibling_relationship.sibling|ns:fictional_universe.fictional_character.siblings/ns:fictional_universe.sibling_relationship_of_fictional_characters.siblings ?x1 .\n?x1 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ?x2 .\n?x2 ns:film.actor.film/ns:film.performance.character ns:m.0gj65x5 .\n?x2 ns:people.person.gender ns:m.02zsn .\n?x2 ns:people.person.nationality ns:m.09c7w0 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x1 != ?x2 )\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x0 P1 M0 .\n?x0 P1 M1 .\n?x1 P2 ?x2 .\n?x2 P1 M3 .\n?x2 P3 M2 .\n?x2 P4 M4 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x1 != ?x2 )\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 37
  },
  {
    "questionIdx": 160713,
    "questionWithBrackets": "What male person was influenced by a film director's child and influenced by [Terry Wooten]",
    "questionPatternModEntities": "What male person was influenced by a film director 's child and influenced by M1",
    "questionTemplate": "What [ADJECTIVE_SIMPLE] [NP_SIMPLE] was [VP_SIMPLE] by a [NP_SIMPLE] 's [ROLE_SIMPLE] and [VP_SIMPLE] by [entity]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:people.person .\n?x0 ns:influence.influence_node.influenced_by ?x1 .\n?x0 ns:influence.influence_node.influenced_by ns:m.05w0hgg .\n?x0 ns:people.person.gender ns:m.05zppz .\n?x1 ns:people.person.parents|ns:fictional_universe.fictional_character.parents|ns:organization.organization.parent/ns:organization.organization_relationship.parent ?x2 .\n?x2 a ns:film.director\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P0 M1 .\n?x0 P1 M2 .\n?x0 a M0 .\n?x1 P2 ?x2 .\n?x2 a M3\n}",
    "expectedResponse": "Garret Schuelke",
    "recursionDepth": 37
  },
  {
    "questionIdx": 238048,
    "questionWithBrackets": "Who was influenced by a cinematographer, influenced by a film editor, and influenced by [Jack Kerouac]",
    "questionPatternModEntities": "Who was influenced by a cinematographer , influenced by a film editor , and influenced by M1",
    "questionTemplate": "Who was [VP_SIMPLE] by a [NP_SIMPLE] , [VP_SIMPLE] by a [NP_SIMPLE] , and [VP_SIMPLE] by [entity]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:people.person .\n?x0 ns:influence.influence_node.influenced_by ?x1 .\n?x0 ns:influence.influence_node.influenced_by ?x2 .\n?x0 ns:influence.influence_node.influenced_by ns:m.041mt .\n?x1 a ns:film.editor .\n?x2 a ns:film.cinematographer\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P0 ?x2 .\n?x0 P0 M1 .\n?x0 a M0 .\n?x1 a M2 .\n?x2 a M3\n}",
    "expectedResponse": "Garret Schuelke; Haruki Murakami",
    "recursionDepth": 37
  },
  {
    "questionIdx": 150636,
    "questionWithBrackets": "What did a screenwriter executive produce and a Canadian screenwriter's child edit",
    "questionPatternModEntities": "What did a screenwriter executive produce and a Canadian screenwriter 's child edit",
    "questionTemplate": "What did a [NP_SIMPLE] [VP_SIMPLE] and a [ADJECTIVE_SIMPLE] [NP_SIMPLE] 's [ROLE_SIMPLE] [VP_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.film.edited_by ?x1 .\n?x0 ns:film.film.executive_produced_by ?x2 .\n?x1 ns:people.person.parents|ns:fictional_universe.fictional_character.parents|ns:organization.organization.parent/ns:organization.organization_relationship.parent ?x3 .\n?x2 a ns:film.writer .\n?x3 a ns:film.writer .\n?x3 ns:people.person.nationality ns:m.0d060g\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x2 .\n?x1 a M0 .\n?x2 P2 ?x3 .\n?x3 P3 M1 .\n?x3 a M0\n}",
    "expectedResponse": "Piranha 3DD; Drive Angry",
    "recursionDepth": 37
  },
  {
    "questionIdx": 174916,
    "questionWithBrackets": "What was edited by, directed by, and executive produced by a female founder of [Interloper Films]",
    "questionPatternModEntities": "What was edited by , directed by , and executive produced by a female founder of M0",
    "questionTemplate": "What was [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.film.directed_by ?x1 .\n?x0 ns:film.film.edited_by ?x1 .\n?x0 ns:film.film.executive_produced_by ?x1 .\n?x1 ns:organization.organization_founder.organizations_founded ns:m.0kqjl3 .\n?x1 ns:people.person.gender ns:m.02zsn\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x1 P3 M0 .\n?x1 P4 M1\n}",
    "expectedResponse": "Dig!",
    "recursionDepth": 37
  },
  {
    "questionIdx": 12239,
    "questionWithBrackets": "Did [Karl Marx] and [Friedrich Engels] influence [Cornel West] and influence a Chinese parent of [Mao Anqing]",
    "questionPatternModEntities": "Did M2 and M4 influence M3 and influence a Chinese parent of M1",
    "questionTemplate": "Did [entity] and [entity] [VP_SIMPLE] [entity] and [VP_SIMPLE] a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:people.person.children|ns:fictional_universe.fictional_character.children|ns:organization.organization.child/ns:organization.organization_relationship.child ns:m.02q6kjb .\n?x0 ns:people.person.nationality ns:m.0d05w3 .\nns:m.048cl ns:influence.influence_node.influenced ?x0 .\nns:m.048cl ns:influence.influence_node.influenced ns:m.02szmg .\nns:m.0cp8j ns:influence.influence_node.influenced ?x0 .\nns:m.0cp8j ns:influence.influence_node.influenced ns:m.02szmg\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nM2 P2 ?x0 .\nM2 P2 M3 .\nM4 P2 ?x0 .\nM4 P2 M3\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 37
  },
  {
    "questionIdx": 215928,
    "questionWithBrackets": "Who did a film distributor's child's child and parent employ and [Momentum Pictures] employ",
    "questionPatternModEntities": "Who did a film distributor 's child 's child and parent employ and M1 employ",
    "questionTemplate": "Who did a [NP_SIMPLE] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE] and [ROLE_SIMPLE] [VP_SIMPLE] and [entity] [VP_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:people.person .\n?x0 ns:people.person.employment_history/ns:business.employment_tenure.company ?x1 .\n?x0 ns:people.person.employment_history/ns:business.employment_tenure.company ns:m.04ggdyk .\n?x1 ns:people.person.children|ns:fictional_universe.fictional_character.children|ns:organization.organization.child/ns:organization.organization_relationship.child ?x2 .\n?x1 ns:people.person.parents|ns:fictional_universe.fictional_character.parents|ns:organization.organization.parent/ns:organization.organization_relationship.parent ?x2 .\n?x2 ns:people.person.parents|ns:fictional_universe.fictional_character.parents|ns:organization.organization.parent/ns:organization.organization_relationship.parent ?x3 .\n?x3 a ns:film.film_distributor\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P0 M1 .\n?x0 a M0 .\n?x1 P1 ?x2 .\n?x1 P2 ?x2 .\n?x2 P1 ?x3 .\n?x3 a M2\n}",
    "expectedResponse": "Daniel Jewel",
    "recursionDepth": 37
  },
  {
    "questionIdx": 84123,
    "questionWithBrackets": "Was [Train Stops for Five Minutes] edited by, written by, and directed by a female spouse of [Jacques Demy]",
    "questionPatternModEntities": "Was M2 edited by , written by , and directed by a female spouse of M1",
    "questionTemplate": "Was [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:people.person.gender ns:m.02zsn .\n?x0 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ns:m.046dxx .\nFILTER ( ?x0 != ns:m.046dxx ) .\nns:m.0z46z1_ ns:film.film.directed_by ?x0 .\nns:m.0z46z1_ ns:film.film.edited_by ?x0 .\nns:m.0z46z1_ ns:film.film.written_by ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M1 ) .\nM2 P2 ?x0 .\nM2 P3 ?x0 .\nM2 P4 ?x0\n}",
    "expectedResponse": "No",
    "recursionDepth": 37
  },
  {
    "questionIdx": 183756,
    "questionWithBrackets": "What was produced, written, edited, and directed by [The Days After]'s Japanese writer",
    "questionPatternModEntities": "What was produced , written , edited , and directed by M0 's Japanese writer",
    "questionTemplate": "What was [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.film.directed_by ?x1 .\n?x0 ns:film.film.edited_by ?x1 .\n?x0 ns:film.film.produced_by|ns:film.film.production_companies ?x1 .\n?x0 ns:film.film.written_by ?x1 .\n?x1 ns:film.writer.film ns:m.0hp7svn .\n?x1 ns:people.person.nationality ns:m.03_3d\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x0 P3 ?x1 .\n?x1 P4 M0 .\n?x1 P5 M1\n}",
    "expectedResponse": "Nobody Knows; Air Doll",
    "recursionDepth": 37
  },
  {
    "questionIdx": 174497,
    "questionWithBrackets": "What was edited by a star of [Boltneck] and [Dead Man on Campus] and executive produced by [Kyra Mitchell]'s sibling",
    "questionPatternModEntities": "What was edited by a star of M1 and M2 and executive produced by M0 's sibling",
    "questionTemplate": "What was [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity] and [entity] and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.film.edited_by ?x1 .\n?x0 ns:film.film.executive_produced_by ?x2 .\n?x1 ns:film.actor.film/ns:film.performance.film ns:m.04j309s .\n?x1 ns:film.actor.film/ns:film.performance.film ns:m.07yr62 .\n?x2 ns:people.person.sibling_s/ns:people.sibling_relationship.sibling|ns:fictional_universe.fictional_character.siblings/ns:fictional_universe.sibling_relationship_of_fictional_characters.siblings ns:m.0sgw386 .\nFILTER ( ?x2 != ns:m.0sgw386 )\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x2 .\n?x1 P2 M0 .\n?x2 P3 M1 .\n?x2 P3 M2 .\nFILTER ( ?x1 != M0 )\n}",
    "expectedResponse": "Ganked",
    "recursionDepth": 37
  },
  {
    "questionIdx": 125802,
    "questionWithBrackets": "Were [The Beaches of Agn\u00e8s], [Der Viennale '04-Trailer], [Lion\u2019s Love], [The World of Jacques Demy], [Mural Murals], and [Ydessa, the Bears and etc.] produced by [The Gleaners and I]'s director and producer",
    "questionPatternModEntities": "Were M1 , M2 , M3 , M4 , M5 , and M6 produced by M0 's director and producer",
    "questionTemplate": "Were [entity] , [entity] , [entity] , [entity] , [entity] , and [entity] [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] and [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.director.film ns:m.09m9v4 .\n?x0 ns:film.producer.film|ns:film.production_company.films ns:m.09m9v4 .\nns:m.04nm0cr ns:film.film.produced_by|ns:film.film.production_companies ?x0 .\nns:m.0b_j8b_ ns:film.film.produced_by|ns:film.film.production_companies ?x0 .\nns:m.0bxl979 ns:film.film.produced_by|ns:film.film.production_companies ?x0 .\nns:m.0bysl53 ns:film.film.produced_by|ns:film.film.production_companies ?x0 .\nns:m.0hz1xxj ns:film.film.produced_by|ns:film.film.production_companies ?x0 .\nns:m.0z6mj21 ns:film.film.produced_by|ns:film.film.production_companies ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M0 .\nM1 P2 ?x0 .\nM2 P2 ?x0 .\nM3 P2 ?x0 .\nM4 P2 ?x0 .\nM5 P2 ?x0 .\nM6 P2 ?x0\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 37
  },
  {
    "questionIdx": 221902,
    "questionWithBrackets": "Who married, influenced, and was influenced by a writer and cinematographer of [The Young Girls Turn 25]",
    "questionPatternModEntities": "Who married , influenced , and was influenced by a writer and cinematographer of M1",
    "questionTemplate": "Who [VP_SIMPLE] , [VP_SIMPLE] , and was [VP_SIMPLE] by a [ROLE_SIMPLE] and [ROLE_SIMPLE] of [entity]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:people.person .\n?x0 ns:influence.influence_node.influenced ?x1 .\n?x0 ns:influence.influence_node.influenced_by ?x1 .\n?x0 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ?x1 .\n?x1 ns:film.cinematographer.film ns:m.07k4vg8 .\n?x1 ns:film.writer.film ns:m.07k4vg8 .\nFILTER ( ?x0 != ?x1 )\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x0 a M0 .\n?x1 P3 M1 .\n?x1 P4 M1 .\nFILTER ( ?x0 != ?x1 )\n}",
    "expectedResponse": "Jacques Demy",
    "recursionDepth": 37
  },
  {
    "questionIdx": 147423,
    "questionWithBrackets": "What did [The Presumption of Justice]'s cinematographer, executive producer, and producer edit, produce, and direct",
    "questionPatternModEntities": "What did M0 's cinematographer , executive producer , and producer edit , produce , and direct",
    "questionTemplate": "What did [entity] 's [ROLE_SIMPLE] , [ROLE_SIMPLE] , and [ROLE_SIMPLE] [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.film.directed_by ?x1 .\n?x0 ns:film.film.edited_by ?x1 .\n?x0 ns:film.film.produced_by|ns:film.film.production_companies ?x1 .\n?x1 ns:film.cinematographer.film ns:m.0sgg1l9 .\n?x1 ns:film.producer.films_executive_produced ns:m.0sgg1l9 .\n?x1 ns:film.producer.film|ns:film.production_company.films ns:m.0sgg1l9\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x1 P3 M0 .\n?x1 P4 M0 .\n?x1 P5 M0\n}",
    "expectedResponse": "The Weight of Chains; The Presumption of Justice",
    "recursionDepth": 37
  },
  {
    "questionIdx": 147412,
    "questionWithBrackets": "What did [The Orchid Gardener]'s star, editor, and producer found and an actor found",
    "questionPatternModEntities": "What did M1 's star , editor , and producer found and a actor found",
    "questionTemplate": "What did [entity] 's [ROLE_SIMPLE] , [ROLE_SIMPLE] , and [ROLE_SIMPLE] [VP_SIMPLE] and a [NP_SIMPLE] [VP_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:organization.organization.founders ?x1 .\n?x0 ns:organization.organization.founders ?x2 .\n?x1 a ns:film.actor .\n?x2 ns:film.actor.film/ns:film.performance.film ns:m.04yfqxn .\n?x2 ns:film.editor.film ns:m.04yfqxn .\n?x2 ns:film.producer.film|ns:film.production_company.films ns:m.04yfqxn\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P0 ?x2 .\n?x1 a M0 .\n?x2 P1 M1 .\n?x2 P2 M1 .\n?x2 P3 M1\n}",
    "expectedResponse": "Zentropa",
    "recursionDepth": 37
  },
  {
    "questionIdx": 82100,
    "questionWithBrackets": "Was [The Pawnshop] written by [Maverick Terrell] and [Vincent P. Bryan] and edited by an actor of [An old steward] and [The Lone Prospector]",
    "questionPatternModEntities": "Was M2 written by M3 and M4 and edited by a actor of M0 and M1",
    "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] and [entity] and [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity] and [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.actor.film/ns:film.performance.character ns:m.0nd97n7 .\n?x0 ns:film.actor.film/ns:film.performance.character ns:m.0v3z9_r .\nns:m.07m2js ns:film.film.edited_by ?x0 .\nns:m.07m2js ns:film.film.written_by ns:m.02xt55 .\nns:m.07m2js ns:film.film.written_by ns:m.0jv6bd\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\nM2 P1 M3 .\nM2 P1 M4 .\nM2 P2 ?x0\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 37
  },
  {
    "questionIdx": 77212,
    "questionWithBrackets": "Was [Stalking Hotline] directed by [Home Shoppin' wit da Mob]'s producer, editor, and executive producer and executive produced by [Virginia Constantinescu]",
    "questionPatternModEntities": "Was M1 directed by M0 's producer , editor , and executive producer and executive produced by M2",
    "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] , [ROLE_SIMPLE] , and [ROLE_SIMPLE] and [VP_SIMPLE] by [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.editor.film ns:m.09_405z .\n?x0 ns:film.producer.films_executive_produced ns:m.09_405z .\n?x0 ns:film.producer.film|ns:film.production_company.films ns:m.09_405z .\nns:m.09_405h ns:film.film.directed_by ?x0 .\nns:m.09_405h ns:film.film.executive_produced_by ns:m.0fq9rhf\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M0 .\n?x0 P2 M0 .\nM1 P3 M2 .\nM1 P4 ?x0\n}",
    "expectedResponse": "No",
    "recursionDepth": 37
  },
  {
    "questionIdx": 141505,
    "questionWithBrackets": "What costume designer was influenced by an Italian parent of [Manuel De Sica] and influenced [Raghubir Singh]",
    "questionPatternModEntities": "What costume designer was influenced by a Italian parent of M3 and influenced M1",
    "questionTemplate": "What [NP_SIMPLE] was [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] and [VP_SIMPLE] [entity]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:film.film_costumer_designer .\n?x0 ns:influence.influence_node.influenced ns:m.027fdff .\n?x0 ns:influence.influence_node.influenced_by ?x1 .\n?x1 ns:people.person.children|ns:fictional_universe.fictional_character.children|ns:organization.organization.child/ns:organization.organization_relationship.child ns:m.0jx4r7 .\n?x1 ns:people.person.nationality ns:m.03rjj\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M1 .\n?x0 P1 ?x1 .\n?x0 a M0 .\n?x1 P2 M2 .\n?x1 P3 M3\n}",
    "expectedResponse": "Satyajit Ray",
    "recursionDepth": 37
  },
  {
    "questionIdx": 226276,
    "questionWithBrackets": "Who was a Dutch film producer that [Submission] was edited by and [De Witte Waan] starred",
    "questionPatternModEntities": "Who was a Dutch film producer that M2 was edited by and M4 starred",
    "questionTemplate": "Who was a [ADJECTIVE_SIMPLE] [NP_SIMPLE] that [entity] was [VP_SIMPLE] by and [entity] [VP_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:film.producer .\n?x0 a ns:people.person .\n?x0 ns:film.actor.film/ns:film.performance.film ns:m.05z_1kg .\n?x0 ns:film.editor.film ns:m.04b5hv .\n?x0 ns:people.person.nationality ns:m.059j2\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M2 .\n?x0 P1 M3 .\n?x0 P2 M4 .\n?x0 a M0 .\n?x0 a M1\n}",
    "expectedResponse": "Theo van Gogh",
    "recursionDepth": 37
  },
  {
    "questionIdx": 49922,
    "questionWithBrackets": "Was [Charlie Chaplin] a British film director that [A Burlesque on Carmen] starred and [A Busy Day] was edited by",
    "questionPatternModEntities": "Was M0 a British film director that M4 starred and M2 was edited by",
    "questionTemplate": "Was [entity] a [ADJECTIVE_SIMPLE] [NP_SIMPLE] that [entity] [VP_SIMPLE] and [entity] was [VP_SIMPLE] by",
    "sparql": "SELECT count(*) WHERE {\nns:m.01lc5 a ns:film.director .\nns:m.01lc5 ns:film.actor.film/ns:film.performance.film ns:m.07n2_l .\nns:m.01lc5 ns:film.editor.film ns:m.05c3b2 .\nns:m.01lc5 ns:people.person.nationality ns:m.07ssc\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M2 .\nM0 P1 M3 .\nM0 P2 M4 .\nM0 a M1\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 37
  },
  {
    "questionIdx": 127752,
    "questionWithBrackets": "Were [The Roller Blade Seven], [9mm Sunrise], [Guns of El Chupacabra], [Super Hero Central], and [Interview: The Documentary] edited by and produced by [Undercover X]'s star",
    "questionPatternModEntities": "Were M1 , M2 , M3 , M4 , and M5 edited by and produced by M0 's star",
    "questionTemplate": "Were [entity] , [entity] , [entity] , [entity] , and [entity] [VP_SIMPLE] by and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.actor.film/ns:film.performance.film ns:m.07grly .\nns:m.074s65 ns:film.film.edited_by ?x0 .\nns:m.074s65 ns:film.film.produced_by|ns:film.film.production_companies ?x0 .\nns:m.07gqs2 ns:film.film.edited_by ?x0 .\nns:m.07gqs2 ns:film.film.produced_by|ns:film.film.production_companies ?x0 .\nns:m.07gr38 ns:film.film.edited_by ?x0 .\nns:m.07gr38 ns:film.film.produced_by|ns:film.film.production_companies ?x0 .\nns:m.08c8xx ns:film.film.edited_by ?x0 .\nns:m.08c8xx ns:film.film.produced_by|ns:film.film.production_companies ?x0 .\nns:m.0f2fxg ns:film.film.edited_by ?x0 .\nns:m.0f2fxg ns:film.film.produced_by|ns:film.film.production_companies ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 ?x0 .\nM1 P2 ?x0 .\nM2 P1 ?x0 .\nM2 P2 ?x0 .\nM3 P1 ?x0 .\nM3 P2 ?x0 .\nM4 P1 ?x0 .\nM4 P2 ?x0 .\nM5 P1 ?x0 .\nM5 P2 ?x0\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 37
  },
  {
    "questionIdx": 73856,
    "questionWithBrackets": "Was [Revenge of the Green Dragons] directed by [Motel Cactus]'s cinematographer, executive produced by [Alan Pao], and executive produced by [Corey Large]",
    "questionPatternModEntities": "Was M1 directed by M0 's cinematographer , executive produced by M2 , and executive produced by M3",
    "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.cinematographer.film ns:m.0bggpnj .\nns:m.0w7n1f4 ns:film.film.directed_by ?x0 .\nns:m.0w7n1f4 ns:film.film.executive_produced_by ns:m.0k78q_ .\nns:m.0w7n1f4 ns:film.film.executive_produced_by ns:m.0k78r6\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 M2 .\nM1 P1 M3 .\nM1 P2 ?x0\n}",
    "expectedResponse": "No",
    "recursionDepth": 38
  },
  {
    "questionIdx": 226234,
    "questionWithBrackets": "Who was a Dutch film director whose spouse wrote [Mis\u00e8re au Borinage] and edited [Songs of Heroes]",
    "questionPatternModEntities": "Who was a Dutch film director whose spouse wrote M4 and edited M3",
    "questionTemplate": "Who was a [ADJECTIVE_SIMPLE] [NP_SIMPLE] whose [ROLE_SIMPLE] [VP_SIMPLE] [entity] and [VP_SIMPLE] [entity]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:film.director .\n?x0 a ns:people.person .\n?x0 ns:people.person.nationality ns:m.059j2 .\n?x0 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ?x1 .\n?x1 ns:film.editor.film ns:m.0j5ygwz .\n?x1 ns:film.writer.film ns:m.07kg9ww .\nFILTER ( ?x0 != ?x1 )\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M2 .\n?x0 P1 ?x1 .\n?x0 a M0 .\n?x0 a M1 .\n?x1 P2 M3 .\n?x1 P3 M4 .\nFILTER ( ?x0 != ?x1 )\n}",
    "expectedResponse": "Helen van Dongen",
    "recursionDepth": 38
  },
  {
    "questionIdx": 24236,
    "questionWithBrackets": "Did [Valeria Golino] marry [Andrea Di Stefano] and [Fabrizio Bentivoglio] and marry a film's Italian director",
    "questionPatternModEntities": "Did M2 marry M3 and M4 and marry a film 's Italian director",
    "questionTemplate": "Did [entity] [VP_SIMPLE] [entity] and [entity] and [VP_SIMPLE] a [NP_SIMPLE] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.director.film ?x1 .\n?x0 ns:people.person.nationality ns:m.03rjj .\n?x1 a ns:film.film .\nFILTER ( ns:m.06x4nd != ?x0 ) .\nFILTER ( ns:m.06x4nd != ns:m.02x0lh_ ) .\nFILTER ( ns:m.06x4nd != ns:m.0d22w7 ) .\nns:m.06x4nd ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ?x0 .\nns:m.06x4nd ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ns:m.02x0lh_ .\nns:m.06x4nd ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ns:m.0d22w7\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 ?x1 .\n?x1 a M1 .\nFILTER ( M2 != ?x0 ) .\nFILTER ( M2 != M3 ) .\nFILTER ( M2 != M4 ) .\nM2 P2 ?x0 .\nM2 P2 M3 .\nM2 P2 M4\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 38
  },
  {
    "questionIdx": 10214,
    "questionWithBrackets": "Did [Indian Premier League] and [Dreamz Unlimited] employ a film producer that [Aatank Hi Aatank] starred and [Kabhi Haan Kabhi Naa] starred",
    "questionPatternModEntities": "Did M3 and M4 employ a film producer that M1 starred and M2 starred",
    "questionTemplate": "Did [entity] and [entity] [VP_SIMPLE] a [NP_SIMPLE] that [entity] [VP_SIMPLE] and [entity] [VP_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 a ns:film.producer .\n?x0 ns:film.actor.film/ns:film.performance.film ns:m.07l415 .\n?x0 ns:film.actor.film/ns:film.performance.film ns:m.0ffvrt .\nns:m.03b_lm1 ns:business.employer.employees/ns:business.employment_tenure.person ?x0 .\nns:m.043m_x1 ns:business.employer.employees/ns:business.employment_tenure.person ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 a M0 .\nM3 P1 ?x0 .\nM4 P1 ?x0\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 38
  },
  {
    "questionIdx": 45455,
    "questionWithBrackets": "Was [Amy Irving] a person whose spouse directed [War of the Worlds] and executive produced [Harry and the Hendersons] and [Batteries Not Included]",
    "questionPatternModEntities": "Was M3 a person whose spouse directed M2 and executive produced M0 and M1",
    "questionTemplate": "Was [entity] a [NP_SIMPLE] whose [ROLE_SIMPLE] [VP_SIMPLE] [entity] and [VP_SIMPLE] [entity] and [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.director.film ns:m.02mmwk .\n?x0 ns:film.producer.films_executive_produced ns:m.06gvqz .\n?x0 ns:film.producer.films_executive_produced ns:m.09zn92 .\nFILTER ( ns:m.030h95 != ?x0 ) .\nns:m.030h95 a ns:people.person .\nns:m.030h95 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P1 M2 .\nFILTER ( M3 != ?x0 ) .\nM3 P2 ?x0 .\nM3 a M4\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 38
  },
  {
    "questionIdx": 52812,
    "questionWithBrackets": "Was [Don Hopkins] influenced by a screenwriter's spouse's sibling and influenced by [Hayao Miyazaki] and [Buddy Holly]",
    "questionPatternModEntities": "Was M1 influenced by a screenwriter 's spouse 's sibling and influenced by M2 and M3",
    "questionTemplate": "Was [entity] [VP_SIMPLE] by a [NP_SIMPLE] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE] and [VP_SIMPLE] by [entity] and [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:people.person.sibling_s/ns:people.sibling_relationship.sibling|ns:fictional_universe.fictional_character.siblings/ns:fictional_universe.sibling_relationship_of_fictional_characters.siblings ?x1 .\n?x1 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ?x2 .\n?x2 a ns:film.writer .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x1 != ?x2 ) .\nns:m.04jvqg ns:influence.influence_node.influenced_by ?x0 .\nns:m.04jvqg ns:influence.influence_node.influenced_by ns:m.01vs_yt .\nns:m.04jvqg ns:influence.influence_node.influenced_by ns:m.0534v\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x1 P1 ?x2 .\n?x2 a M0 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x1 != ?x2 ) .\nM1 P2 ?x0 .\nM1 P2 M2 .\nM1 P2 M3\n}",
    "expectedResponse": "No",
    "recursionDepth": 38
  },
  {
    "questionIdx": 70468,
    "questionWithBrackets": "Was [Paisan] directed by, produced by, and written by an Italian screenwriter's spouse",
    "questionPatternModEntities": "Was M2 directed by , produced by , and written by a Italian screenwriter 's spouse",
    "questionTemplate": "Was [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [NP_SIMPLE] 's [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ?x1 .\n?x1 a ns:film.writer .\n?x1 ns:people.person.nationality ns:m.03rjj .\nFILTER ( ?x0 != ?x1 ) .\nns:m.02pmn09 ns:film.film.directed_by ?x0 .\nns:m.02pmn09 ns:film.film.produced_by|ns:film.film.production_companies ?x0 .\nns:m.02pmn09 ns:film.film.written_by ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x1 P1 M1 .\n?x1 a M0 .\nFILTER ( ?x0 != ?x1 ) .\nM2 P2 ?x0 .\nM2 P3 ?x0 .\nM2 P4 ?x0\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 38
  },
  {
    "questionIdx": 213850,
    "questionWithBrackets": "Who did [Brandi Milbradt] marry, [Alan Moore] influence, and a Japanese film editor influence",
    "questionPatternModEntities": "Who did M2 marry , M1 influence , and a Japanese film editor influence",
    "questionTemplate": "Who did [entity] [VP_SIMPLE] , [entity] [VP_SIMPLE] , and a [ADJECTIVE_SIMPLE] [NP_SIMPLE] [VP_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:people.person .\n?x0 ns:influence.influence_node.influenced_by ?x1 .\n?x0 ns:influence.influence_node.influenced_by ns:m.0yxl .\n?x0 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ns:m.04nm39j .\n?x1 a ns:film.editor .\n?x1 ns:people.person.nationality ns:m.03_3d .\nFILTER ( ?x0 != ns:m.04nm39j )\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P0 M1 .\n?x0 P1 M2 .\n?x0 a M0 .\n?x1 P2 M4 .\n?x1 a M3 .\nFILTER ( ?x0 != M2 )\n}",
    "expectedResponse": "Darren Aronofsky",
    "recursionDepth": 38
  },
  {
    "questionIdx": 225189,
    "questionWithBrackets": "Who was a British screenwriter that was influenced by and influenced [Digital Village, The]'s employee",
    "questionPatternModEntities": "Who was a British screenwriter that was influenced by and influenced M3 's employee",
    "questionTemplate": "Who was a [ADJECTIVE_SIMPLE] [NP_SIMPLE] that was [VP_SIMPLE] by and [VP_SIMPLE] [entity] 's [ROLE_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:film.writer .\n?x0 a ns:people.person .\n?x0 ns:influence.influence_node.influenced ?x1 .\n?x0 ns:influence.influence_node.influenced_by ?x1 .\n?x0 ns:people.person.nationality ns:m.07ssc .\n?x1 ns:people.person.employment_history/ns:business.employment_tenure.company ns:m.012_vh\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 M2 .\n?x0 a M0 .\n?x0 a M1 .\n?x1 P3 M3\n}",
    "expectedResponse": "Richard Dawkins; Neil Gaiman",
    "recursionDepth": 38
  },
  {
    "questionIdx": 215451,
    "questionWithBrackets": "Who did a French person whose spouse influenced and married [Jacques Demy] marry",
    "questionPatternModEntities": "Who did a French person whose spouse influenced and married M2 marry",
    "questionTemplate": "Who did a [ADJECTIVE_SIMPLE] [NP_SIMPLE] whose [ROLE_SIMPLE] [VP_SIMPLE] and [VP_SIMPLE] [entity] [VP_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:people.person .\n?x0 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ?x1 .\n?x1 a ns:people.person .\n?x1 ns:people.person.nationality ns:m.0f8l9c .\n?x1 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ?x2 .\n?x2 ns:influence.influence_node.influenced ns:m.046dxx .\n?x2 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ns:m.046dxx .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x1 != ?x2 ) .\nFILTER ( ?x2 != ns:m.046dxx )\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 a M0 .\n?x1 P0 ?x2 .\n?x1 P1 M1 .\n?x1 a M0 .\n?x2 P0 M2 .\n?x2 P2 M2 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x1 != ?x2 ) .\nFILTER ( ?x2 != M2 )\n}",
    "expectedResponse": "Agn\u00e8s Varda; Chantal Darget",
    "recursionDepth": 38
  },
  {
    "questionIdx": 133770,
    "questionWithBrackets": "What Italian costume designer was a film director that [Promises Written in Water] was executive produced by and starred",
    "questionPatternModEntities": "What Italian costume designer was a film director that M2 was executive produced by and starred",
    "questionTemplate": "What [ADJECTIVE_SIMPLE] [NP_SIMPLE] was a [NP_SIMPLE] that [entity] was [VP_SIMPLE] by and [VP_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:film.director .\n?x0 a ns:film.film_costumer_designer .\n?x0 ns:film.actor.film/ns:film.performance.film ns:m.0bh9qf1 .\n?x0 ns:film.producer.films_executive_produced ns:m.0bh9qf1 .\n?x0 ns:people.person.nationality ns:m.03rjj\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M2 .\n?x0 P1 M3 .\n?x0 P2 M2 .\n?x0 a M0 .\n?x0 a M1\n}",
    "expectedResponse": "Vincent Gallo",
    "recursionDepth": 38
  },
  {
    "questionIdx": 68407,
    "questionWithBrackets": "Was [Muse Watson] a male person that played [Jerimiah Shuman] and played a film",
    "questionPatternModEntities": "Was M1 a male person that played M3 and played a film",
    "questionTemplate": "Was [entity] a [ADJECTIVE_SIMPLE] [NP_SIMPLE] that [VP_SIMPLE] [entity] and [VP_SIMPLE] a [NP_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 a ns:film.film .\nns:m.032kpr a ns:people.person .\nns:m.032kpr ns:film.actor.film/ns:film.performance.character ?x0 .\nns:m.032kpr ns:film.actor.film/ns:film.performance.character ns:m.0q5bkz4 .\nns:m.032kpr ns:people.person.gender ns:m.05zppz\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 a M0 .\nM1 P0 ?x0 .\nM1 P0 M3 .\nM1 P1 M4 .\nM1 a M2\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 38
  },
  {
    "questionIdx": 144793,
    "questionWithBrackets": "What did [Le Naufrag\u00e9]'s writer produce and [The French Minister]'s French star's sibling produce",
    "questionPatternModEntities": "What did M2 's writer produce and M1 's French star 's sibling produce",
    "questionTemplate": "What did [entity] 's [ROLE_SIMPLE] [VP_SIMPLE] and [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] 's [ROLE_SIMPLE] [VP_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.film.produced_by|ns:film.film.production_companies ?x1 .\n?x0 ns:film.film.produced_by|ns:film.film.production_companies ?x2 .\n?x1 ns:people.person.sibling_s/ns:people.sibling_relationship.sibling|ns:fictional_universe.fictional_character.siblings/ns:fictional_universe.sibling_relationship_of_fictional_characters.siblings ?x3 .\n?x2 ns:film.writer.film ns:m.0_f3rjc .\n?x3 ns:film.actor.film/ns:film.performance.film ns:m.0wxsyyt .\n?x3 ns:people.person.nationality ns:m.0f8l9c .\nFILTER ( ?x1 != ?x3 )\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P0 ?x2 .\n?x1 P1 ?x3 .\n?x2 P2 M2 .\n?x3 P3 M0 .\n?x3 P4 M1 .\nFILTER ( ?x1 != ?x3 )\n}",
    "expectedResponse": "Le Naufrag\u00e9; A World Without Women",
    "recursionDepth": 38
  },
  {
    "questionIdx": 18682,
    "questionWithBrackets": "Did [Saludos Amigos] star a production company's parent's founder and employee and star [Clarence Nash]",
    "questionPatternModEntities": "Did M1 star a production company 's parent 's founder and employee and star M2",
    "questionTemplate": "Did [entity] [VP_SIMPLE] a [NP_SIMPLE] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE] and [ROLE_SIMPLE] and [VP_SIMPLE] [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:organization.organization_founder.organizations_founded ?x1 .\n?x0 ns:people.person.employment_history/ns:business.employment_tenure.company ?x1 .\n?x1 ns:people.person.children|ns:fictional_universe.fictional_character.children|ns:organization.organization.child/ns:organization.organization_relationship.child ?x2 .\n?x2 a ns:film.production_company .\nns:m.0k5j9 ns:film.film.starring/ns:film.performance.actor ?x0 .\nns:m.0k5j9 ns:film.film.starring/ns:film.performance.actor ns:m.0phh6\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x1 P2 ?x2 .\n?x2 a M0 .\nM1 P3 ?x0 .\nM1 P3 M2\n}",
    "expectedResponse": "No",
    "recursionDepth": 38
  },
  {
    "questionIdx": 191468,
    "questionWithBrackets": "Which Mexican film editor was a cinematographer that directed [Perseguido] and wrote [Un secreto de Esperanza]",
    "questionPatternModEntities": "Which Mexican film editor was a cinematographer that directed M4 and wrote M2",
    "questionTemplate": "Which [ADJECTIVE_SIMPLE] [NP_SIMPLE] was a [NP_SIMPLE] that [VP_SIMPLE] [entity] and [VP_SIMPLE] [entity]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:film.cinematographer .\n?x0 a ns:film.editor .\n?x0 ns:film.director.film ns:m.0crrwq8 .\n?x0 ns:film.writer.film ns:m.07fc39 .\n?x0 ns:people.person.nationality ns:m.0b90_r\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M2 .\n?x0 P1 M3 .\n?x0 P2 M4 .\n?x0 a M0 .\n?x0 a M1\n}",
    "expectedResponse": "Leopoldo Laborde",
    "recursionDepth": 38
  },
  {
    "questionIdx": 9401,
    "questionWithBrackets": "Did [Harvard University] employ a Dutch screenwriter's spouse and employ [Max Theiler] and [Elaine Scarry]",
    "questionPatternModEntities": "Did M2 employ a Dutch screenwriter 's spouse and employ M3 and M4",
    "questionTemplate": "Did [entity] [VP_SIMPLE] a [ADJECTIVE_SIMPLE] [NP_SIMPLE] 's [ROLE_SIMPLE] and [VP_SIMPLE] [entity] and [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ?x1 .\n?x1 a ns:film.writer .\n?x1 ns:people.person.nationality ns:m.059j2 .\nFILTER ( ?x0 != ?x1 ) .\nns:m.03ksy ns:business.employer.employees/ns:business.employment_tenure.person ?x0 .\nns:m.03ksy ns:business.employer.employees/ns:business.employment_tenure.person ns:m.058rln .\nns:m.03ksy ns:business.employer.employees/ns:business.employment_tenure.person ns:m.08q768\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x1 P1 M1 .\n?x1 a M0 .\nFILTER ( ?x0 != ?x1 ) .\nM2 P2 ?x0 .\nM2 P2 M3 .\nM2 P2 M4\n}",
    "expectedResponse": "No",
    "recursionDepth": 38
  },
  {
    "questionIdx": 149595,
    "questionWithBrackets": "What did a female person that [The Maldonado Miracle] was executive produced by and directed by found",
    "questionPatternModEntities": "What did a female person that M1 was executive produced by and directed by found",
    "questionTemplate": "What did a [ADJECTIVE_SIMPLE] [NP_SIMPLE] that [entity] was [VP_SIMPLE] by and [VP_SIMPLE] by [VP_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:organization.organization.founders ?x1 .\n?x1 a ns:people.person .\n?x1 ns:film.director.film ns:m.04j2bpw .\n?x1 ns:film.producer.films_executive_produced ns:m.04j2bpw .\n?x1 ns:people.person.gender ns:m.02zsn\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x1 P1 M1 .\n?x1 P2 M2 .\n?x1 P3 M1 .\n?x1 a M0\n}",
    "expectedResponse": "Ventanarosa",
    "recursionDepth": 38
  },
  {
    "questionIdx": 13540,
    "questionWithBrackets": "Did [Luc Besson] marry [Edie Brickell], influence [Douglas Adams], and marry a cinematographer's sibling",
    "questionPatternModEntities": "Did M1 marry M3 , influence M2 , and marry a cinematographer 's sibling",
    "questionTemplate": "Did [entity] [VP_SIMPLE] [entity] , [VP_SIMPLE] [entity] , and [VP_SIMPLE] a [NP_SIMPLE] 's [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:people.person.sibling_s/ns:people.sibling_relationship.sibling|ns:fictional_universe.fictional_character.siblings/ns:fictional_universe.sibling_relationship_of_fictional_characters.siblings ?x1 .\n?x1 a ns:film.cinematographer .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ns:m.0b478 != ?x0 ) .\nFILTER ( ns:m.0b478 != ns:m.03r7kj ) .\nns:m.0b478 ns:influence.influence_node.influenced ns:m.0282x .\nns:m.0b478 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ?x0 .\nns:m.0b478 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ns:m.03r7kj\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x1 a M0 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( M1 != ?x0 ) .\nFILTER ( M1 != M3 ) .\nM1 P1 M2 .\nM1 P2 ?x0 .\nM1 P2 M3\n}",
    "expectedResponse": "No",
    "recursionDepth": 38
  },
  {
    "questionIdx": 68805,
    "questionWithBrackets": "Was [Natalie Palmer] influenced by a film director's parent and child and influenced by a person",
    "questionPatternModEntities": "Was M2 influenced by a film director 's parent and child and influenced by a person",
    "questionTemplate": "Was [entity] [VP_SIMPLE] by a [NP_SIMPLE] 's [ROLE_SIMPLE] and [ROLE_SIMPLE] and [VP_SIMPLE] by a [NP_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 a ns:people.person .\n?x1 ns:people.person.children|ns:fictional_universe.fictional_character.children|ns:organization.organization.child/ns:organization.organization_relationship.child ?x2 .\n?x1 ns:people.person.parents|ns:fictional_universe.fictional_character.parents|ns:organization.organization.parent/ns:organization.organization_relationship.parent ?x2 .\n?x2 a ns:film.director .\nns:m.0krp7lv ns:influence.influence_node.influenced_by ?x0 .\nns:m.0krp7lv ns:influence.influence_node.influenced_by ?x1\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 a M0 .\n?x1 P0 ?x2 .\n?x1 P1 ?x2 .\n?x2 a M1 .\nM2 P2 ?x0 .\nM2 P2 ?x1\n}",
    "expectedResponse": "No",
    "recursionDepth": 38
  },
  {
    "questionIdx": 174188,
    "questionWithBrackets": "What was edited by a Swedish film editor's spouse and edited by [Asa Mossberg] and [Erik B\u00e4fving]",
    "questionPatternModEntities": "What was edited by a Swedish film editor 's spouse and edited by M0 and M1",
    "questionTemplate": "What was [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [NP_SIMPLE] 's [ROLE_SIMPLE] and [VP_SIMPLE] by [entity] and [entity]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.film.edited_by ?x1 .\n?x0 ns:film.film.edited_by ns:m.0bgk4ws .\n?x0 ns:film.film.edited_by ns:m.0cr6sdy .\n?x1 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ?x2 .\n?x2 a ns:film.editor .\n?x2 ns:people.person.nationality ns:m.0d0vqn .\nFILTER ( ?x1 != ?x2 )\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x1 P1 ?x2 .\n?x2 P2 M3 .\n?x2 a M2 .\nFILTER ( ?x1 != ?x2 )\n}",
    "expectedResponse": "Everyone Is Older Than I Am",
    "recursionDepth": 38
  },
  {
    "questionIdx": 214510,
    "questionWithBrackets": "Who did [Litton Industries] employ, [Litton Medical Products] and [University of Paris] employ, and [Har Gobind Khorana]'s employer employ",
    "questionPatternModEntities": "Who did M1 employ , M2 and M3 employ , and M4 's employer employ",
    "questionTemplate": "Who did [entity] [VP_SIMPLE] , [entity] and [entity] [VP_SIMPLE] , and [entity] 's [ROLE_SIMPLE] [VP_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:people.person .\n?x0 ns:people.person.employment_history/ns:business.employment_tenure.company ?x1 .\n?x0 ns:people.person.employment_history/ns:business.employment_tenure.company ns:m.02v3pg .\n?x0 ns:people.person.employment_history/ns:business.employment_tenure.company ns:m.0g7n2wm .\n?x0 ns:people.person.employment_history/ns:business.employment_tenure.company ns:m.0lk0l .\n?x1 ns:business.employer.employees/ns:business.employment_tenure.person ns:m.026mh5\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P0 M3 .\n?x0 a M0 .\n?x1 P1 M4\n}",
    "expectedResponse": "Alain Enthoven",
    "recursionDepth": 38
  },
  {
    "questionIdx": 8275,
    "questionWithBrackets": "Did [George Folsey, Jr.] produce [\u00a1Three Amigos!], executive produce [Clue], and edit a prequel of [Hostel 3]",
    "questionPatternModEntities": "Did M1 produce M3 , executive produce M2 , and edit a prequel of M0",
    "questionTemplate": "Did [entity] [VP_SIMPLE] [entity] , [VP_SIMPLE] [entity] , and [VP_SIMPLE] a [ROLE_SIMPLE] of [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.film.sequel ns:m.0j8k_lc .\nns:m.05c00qy ns:film.editor.film ?x0 .\nns:m.05c00qy ns:film.producer.films_executive_produced ns:m.0hqdd .\nns:m.05c00qy ns:film.producer.film|ns:film.production_company.films ns:m.03nnzk\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 ?x0 .\nM1 P2 M2 .\nM1 P3 M3\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 38
  },
  {
    "questionIdx": 175516,
    "questionWithBrackets": "What was edited, directed, and written by a star, costume designer, and art director of [Animato]",
    "questionPatternModEntities": "What was edited , directed , and written by a star , costume designer , and art director of M0",
    "questionTemplate": "What was [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by a [ROLE_SIMPLE] , [ROLE_SIMPLE] , and [ROLE_SIMPLE] of [entity]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.film.directed_by ?x1 .\n?x0 ns:film.film.edited_by ?x1 .\n?x0 ns:film.film.written_by ?x1 .\n?x1 ns:film.actor.film/ns:film.performance.film ns:m.07fm59 .\n?x1 ns:film.film_art_director.films_art_directed ns:m.07fm59 .\n?x1 ns:film.film_costumer_designer.costume_design_for_film ns:m.07fm59\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x1 P3 M0 .\n?x1 P4 M0 .\n?x1 P5 M0\n}",
    "expectedResponse": "The Wizard of Speed and Time; Animato",
    "recursionDepth": 38
  },
  {
    "questionIdx": 170955,
    "questionWithBrackets": "What was directed by an Italian writer of [Luisa Sanfelice] and executive produced by [Luggi  Waldleitner] and [Jean-Claude Cecile]",
    "questionPatternModEntities": "What was directed by a Italian writer of M2 and executive produced by M0 and M1",
    "questionTemplate": "What was [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] and [VP_SIMPLE] by [entity] and [entity]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.film.directed_by ?x1 .\n?x0 ns:film.film.executive_produced_by ns:m.07q91y7 .\n?x0 ns:film.film.executive_produced_by ns:m.0w_6vj_ .\n?x1 ns:film.writer.film ns:m.0n_bq9c .\n?x1 ns:people.person.nationality ns:m.03rjj\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P1 ?x1 .\n?x1 P2 M2 .\n?x1 P3 M3\n}",
    "expectedResponse": "Fiorile",
    "recursionDepth": 38
  },
  {
    "questionIdx": 37702,
    "questionWithBrackets": "Did a person employed by [Robert Edwards]'s employer and employed by [Macquarie University] edit [Lady Oscar]",
    "questionPatternModEntities": "Did a person employed by M3 's employer and employed by M2 edit M1",
    "questionTemplate": "Did a [NP_SIMPLE] [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] and [VP_SIMPLE] by [entity] [VP_SIMPLE] [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 a ns:people.person .\n?x0 ns:film.editor.film ns:m.02qdhzf .\n?x0 ns:people.person.employment_history/ns:business.employment_tenure.company ?x1 .\n?x0 ns:people.person.employment_history/ns:business.employment_tenure.company ns:m.04zwc .\n?x1 ns:business.employer.employees/ns:business.employment_tenure.person ns:m.05mk24\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M1 .\n?x0 P1 ?x1 .\n?x0 P1 M2 .\n?x0 a M0 .\n?x1 P2 M3\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 38
  },
  {
    "questionIdx": 81700,
    "questionWithBrackets": "Was [The Medusa Touch] distributed by [Warner Bros. Pictures] and produced by a parent of [Wolvesbayne]'s star and editor",
    "questionPatternModEntities": "Was M1 distributed by M2 and produced by a parent of M0 's star and editor",
    "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] and [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity] 's [ROLE_SIMPLE] and [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:people.person.children|ns:fictional_universe.fictional_character.children|ns:organization.organization.child/ns:organization.organization_relationship.child ?x1 .\n?x1 ns:film.actor.film/ns:film.performance.film ns:m.05p3q7f .\n?x1 ns:film.editor.film ns:m.05p3q7f .\nns:m.0b9r5k ns:film.film.distributors/ns:film.film_film_distributor_relationship.distributor ns:m.0k9pn .\nns:m.0b9r5k ns:film.film.produced_by|ns:film.film.production_companies ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x1 P1 M0 .\n?x1 P2 M0 .\nM1 P3 M2 .\nM1 P4 ?x0\n}",
    "expectedResponse": "No",
    "recursionDepth": 38
  },
  {
    "questionIdx": 97318,
    "questionWithBrackets": "Was a film distributor founded by [Jules Brulatour], founded by [Marcie Bloom], and founded by a person",
    "questionPatternModEntities": "Was a film distributor founded by M1 , founded by M2 , and founded by a person",
    "questionTemplate": "Was a [NP_SIMPLE] [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by a [NP_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 a ns:film.film_distributor .\n?x0 ns:organization.organization.founders ?x1 .\n?x0 ns:organization.organization.founders ns:m.09nlrw .\n?x0 ns:organization.organization.founders ns:m.0lywcw1 .\n?x1 a ns:people.person\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 a M0 .\n?x1 a M3\n}",
    "expectedResponse": "No",
    "recursionDepth": 38
  },
  {
    "questionIdx": 77286,
    "questionWithBrackets": "Was [Star of Midnight] executive produced, edited, directed, produced, and written by a costume designer",
    "questionPatternModEntities": "Was M1 executive produced , edited , directed , produced , and written by a costume designer",
    "questionTemplate": "Was [entity] [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by a [NP_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 a ns:film.film_costumer_designer .\nns:m.06w8lt0 ns:film.film.directed_by ?x0 .\nns:m.06w8lt0 ns:film.film.edited_by ?x0 .\nns:m.06w8lt0 ns:film.film.executive_produced_by ?x0 .\nns:m.06w8lt0 ns:film.film.produced_by|ns:film.film.production_companies ?x0 .\nns:m.06w8lt0 ns:film.film.written_by ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 a M0 .\nM1 P0 ?x0 .\nM1 P1 ?x0 .\nM1 P2 ?x0 .\nM1 P3 ?x0 .\nM1 P4 ?x0\n}",
    "expectedResponse": "No",
    "recursionDepth": 38
  },
  {
    "questionIdx": 72592,
    "questionWithBrackets": "Was [Promises Written in Water] produced by a costume designer, writer, and editor of [The Brown Bunny] and distributed by [Gray Daisy Films]",
    "questionPatternModEntities": "Was M1 produced by a costume designer , writer , and editor of M0 and distributed by M2",
    "questionTemplate": "Was [entity] [VP_SIMPLE] by a [ROLE_SIMPLE] , [ROLE_SIMPLE] , and [ROLE_SIMPLE] of [entity] and [VP_SIMPLE] by [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.editor.film ns:m.01n9cy .\n?x0 ns:film.film_costumer_designer.costume_design_for_film ns:m.01n9cy .\n?x0 ns:film.writer.film ns:m.01n9cy .\nns:m.0bh9qf1 ns:film.film.distributors/ns:film.film_film_distributor_relationship.distributor ns:m.0f136rz .\nns:m.0bh9qf1 ns:film.film.produced_by|ns:film.film.production_companies ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M0 .\n?x0 P2 M0 .\nM1 P3 M2 .\nM1 P4 ?x0\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 38
  },
  {
    "questionIdx": 24682,
    "questionWithBrackets": "Did [Walt Disney] found [Detective Montalbano: Vol. 4]'s producer, found a film distributor, and found [Disney Interactive]",
    "questionPatternModEntities": "Did M2 found M0 's producer , found a film distributor , and found M3",
    "questionTemplate": "Did [entity] [VP_SIMPLE] [entity] 's [ROLE_SIMPLE] , [VP_SIMPLE] a [NP_SIMPLE] , and [VP_SIMPLE] [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.producer.film|ns:film.production_company.films ns:m.0gyy20_ .\n?x1 a ns:film.film_distributor .\nns:m.081nh ns:organization.organization_founder.organizations_founded ?x0 .\nns:m.081nh ns:organization.organization_founder.organizations_founded ?x1 .\nns:m.081nh ns:organization.organization_founder.organizations_founded ns:m.047cb57\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x1 a M1 .\nM2 P1 ?x0 .\nM2 P1 ?x1 .\nM2 P1 M3\n}",
    "expectedResponse": "No",
    "recursionDepth": 38
  },
  {
    "questionIdx": 21111,
    "questionWithBrackets": "Did [The Auteur] star [Sawdust City]'s costume designer, star a film editor, and star [Tamar Bryner]",
    "questionPatternModEntities": "Did M2 star M1 's costume designer , star a film editor , and star M3",
    "questionTemplate": "Did [entity] [VP_SIMPLE] [entity] 's [ROLE_SIMPLE] , [VP_SIMPLE] a [NP_SIMPLE] , and [VP_SIMPLE] [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 a ns:film.editor .\n?x1 ns:film.film_costumer_designer.costume_design_for_film ns:m.0gyy7ng .\nns:m.04mwcfs ns:film.film.starring/ns:film.performance.actor ?x0 .\nns:m.04mwcfs ns:film.film.starring/ns:film.performance.actor ?x1 .\nns:m.04mwcfs ns:film.film.starring/ns:film.performance.actor ns:m.0vzkzqc\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 a M0 .\n?x1 P0 M1 .\nM2 P1 ?x0 .\nM2 P1 ?x1 .\nM2 P1 M3\n}",
    "expectedResponse": "No",
    "recursionDepth": 38
  },
  {
    "questionIdx": 215023,
    "questionWithBrackets": "Who did [Tetsuo II: Body Hammer]'s art director, writer, and cinematographer influence and [Brandi Milbradt] and [Rachel Weisz] marry",
    "questionPatternModEntities": "Who did M3 's art director , writer , and cinematographer influence and M1 and M2 marry",
    "questionTemplate": "Who did [entity] 's [ROLE_SIMPLE] , [ROLE_SIMPLE] , and [ROLE_SIMPLE] [VP_SIMPLE] and [entity] and [entity] [VP_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:people.person .\n?x0 ns:influence.influence_node.influenced_by ?x1 .\n?x0 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ns:m.014x77 .\n?x0 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ns:m.04nm39j .\n?x1 ns:film.cinematographer.film ns:m.0brs6b .\n?x1 ns:film.film_art_director.films_art_directed ns:m.0brs6b .\n?x1 ns:film.writer.film ns:m.0brs6b .\nFILTER ( ?x0 != ns:m.014x77 ) .\nFILTER ( ?x0 != ns:m.04nm39j )\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 M1 .\n?x0 P1 M2 .\n?x0 a M0 .\n?x1 P2 M3 .\n?x1 P3 M3 .\n?x1 P4 M3 .\nFILTER ( ?x0 != M1 ) .\nFILTER ( ?x0 != M2 )\n}",
    "expectedResponse": "Darren Aronofsky",
    "recursionDepth": 38
  },
  {
    "questionIdx": 11361,
    "questionWithBrackets": "Did [Jerry Primm] marry [Frances Blog] and influence a film's star, editor, and art director",
    "questionPatternModEntities": "Did M1 marry M2 and influence a film 's star , editor , and art director",
    "questionTemplate": "Did [entity] [VP_SIMPLE] [entity] and [VP_SIMPLE] a [NP_SIMPLE] 's [ROLE_SIMPLE] , [ROLE_SIMPLE] , and [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.actor.film/ns:film.performance.film ?x1 .\n?x0 ns:film.editor.film ?x1 .\n?x0 ns:film.film_art_director.films_art_directed ?x1 .\n?x1 a ns:film.film .\nFILTER ( ns:m.0zv3wjc != ns:m.0hnznxy ) .\nns:m.0zv3wjc ns:influence.influence_node.influenced ?x0 .\nns:m.0zv3wjc ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ns:m.0hnznxy\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x1 a M0 .\nFILTER ( M1 != M2 ) .\nM1 P3 ?x0 .\nM1 P4 M2\n}",
    "expectedResponse": "No",
    "recursionDepth": 38
  },
  {
    "questionIdx": 20037,
    "questionWithBrackets": "Did [Stuck on You] star [Gordon Haight] and [Dawn Adams] and star a male person's spouse",
    "questionPatternModEntities": "Did M2 star M3 and M4 and star a male person 's spouse",
    "questionTemplate": "Did [entity] [VP_SIMPLE] [entity] and [entity] and [VP_SIMPLE] a [ADJECTIVE_SIMPLE] [NP_SIMPLE] 's [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ?x1 .\n?x1 a ns:people.person .\n?x1 ns:people.person.gender ns:m.05zppz .\nFILTER ( ?x0 != ?x1 ) .\nns:m.06hq4s ns:film.film.starring/ns:film.performance.actor ?x0 .\nns:m.06hq4s ns:film.film.starring/ns:film.performance.actor ns:m.0t602bd .\nns:m.06hq4s ns:film.film.starring/ns:film.performance.actor ns:m.0t60nfk\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x1 P1 M1 .\n?x1 a M0 .\nFILTER ( ?x0 != ?x1 ) .\nM2 P2 ?x0 .\nM2 P2 M3 .\nM2 P2 M4\n}",
    "expectedResponse": "No",
    "recursionDepth": 38
  },
  {
    "questionIdx": 183622,
    "questionWithBrackets": "What was produced, edited, executive produced, written, and directed by [Elena Andrade]'s sibling",
    "questionPatternModEntities": "What was produced , edited , executive produced , written , and directed by M0 's sibling",
    "questionTemplate": "What was [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.film.directed_by ?x1 .\n?x0 ns:film.film.edited_by ?x1 .\n?x0 ns:film.film.executive_produced_by ?x1 .\n?x0 ns:film.film.produced_by|ns:film.film.production_companies ?x1 .\n?x0 ns:film.film.written_by ?x1 .\n?x1 ns:people.person.sibling_s/ns:people.sibling_relationship.sibling|ns:fictional_universe.fictional_character.siblings/ns:fictional_universe.sibling_relationship_of_fictional_characters.siblings ns:m.0wq3zpf .\nFILTER ( ?x1 != ns:m.0wq3zpf )\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x0 P3 ?x1 .\n?x0 P4 ?x1 .\n?x1 P5 M0 .\nFILTER ( ?x1 != M0 )\n}",
    "expectedResponse": "Undertow Eyes",
    "recursionDepth": 38
  },
  {
    "questionIdx": 185214,
    "questionWithBrackets": "What was written by a company, executive produced by an actor, and edited by [Hemal Kothari]",
    "questionPatternModEntities": "What was written by a company , executive produced by a actor , and edited by M0",
    "questionTemplate": "What was [VP_SIMPLE] by a [NP_SIMPLE] , [VP_SIMPLE] by a [NP_SIMPLE] , and [VP_SIMPLE] by [entity]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.film.edited_by ns:m.0b3t_8z .\n?x0 ns:film.film.executive_produced_by ?x1 .\n?x0 ns:film.film.written_by ?x2 .\n?x1 a ns:film.actor .\n?x2 a ns:business.employer\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x2 .\n?x0 P2 M0 .\n?x1 a M1 .\n?x2 a M2\n}",
    "expectedResponse": "Guzaarish",
    "recursionDepth": 38
  },
  {
    "questionIdx": 108575,
    "questionWithBrackets": "Was an actor that was employed by [KIRO-TV] and [Cumulus Media Networks] and was employed by [SportsChannel] [Arthur Blank]",
    "questionPatternModEntities": "Was a actor that was employed by M2 and M3 and was employed by M4 M0",
    "questionTemplate": "Was a [NP_SIMPLE] that was [VP_SIMPLE] by [entity] and [entity] and was [VP_SIMPLE] by [entity] [entity]",
    "sparql": "SELECT count(*) WHERE {\nns:m.03kk81 a ns:film.actor .\nns:m.03kk81 ns:people.person.employment_history/ns:business.employment_tenure.company ns:m.0335jv .\nns:m.03kk81 ns:people.person.employment_history/ns:business.employment_tenure.company ns:m.05s34b .\nns:m.03kk81 ns:people.person.employment_history/ns:business.employment_tenure.company ns:m.08wn7x\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M2 .\nM0 P0 M3 .\nM0 P0 M4 .\nM0 a M1\n}",
    "expectedResponse": "No",
    "recursionDepth": 38
  },
  {
    "questionIdx": 25529,
    "questionWithBrackets": "Did [Woody Allen], [Sam Kinison], [Richard Pryor], [Rodney Dangerfield], and [Eddie Murphy] influence a character and influence [Artie Lange]",
    "questionPatternModEntities": "Did M1 , M3 , M4 , M5 , and M6 influence a character and influence M2",
    "questionTemplate": "Did [entity] , [entity] , [entity] , [entity] , and [entity] [VP_SIMPLE] a [NP_SIMPLE] and [VP_SIMPLE] [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 a ns:fictional_universe.fictional_character .\nns:m.015b67 ns:influence.influence_node.influenced ?x0 .\nns:m.015b67 ns:influence.influence_node.influenced ns:m.01xwqn .\nns:m.01hmk9 ns:influence.influence_node.influenced ?x0 .\nns:m.01hmk9 ns:influence.influence_node.influenced ns:m.01xwqn .\nns:m.02gt7m ns:influence.influence_node.influenced ?x0 .\nns:m.02gt7m ns:influence.influence_node.influenced ns:m.01xwqn .\nns:m.081lh ns:influence.influence_node.influenced ?x0 .\nns:m.081lh ns:influence.influence_node.influenced ns:m.01xwqn .\nns:m.0f7hc ns:influence.influence_node.influenced ?x0 .\nns:m.0f7hc ns:influence.influence_node.influenced ns:m.01xwqn\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 a M0 .\nM1 P0 ?x0 .\nM1 P0 M2 .\nM3 P0 ?x0 .\nM3 P0 M2 .\nM4 P0 ?x0 .\nM4 P0 M2 .\nM5 P0 ?x0 .\nM5 P0 M2 .\nM6 P0 ?x0 .\nM6 P0 M2\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 38
  },
  {
    "questionIdx": 203800,
    "questionWithBrackets": "Which film producer influenced [Jeff Dye] and [Redd Foxx] and was influenced by a female actor",
    "questionPatternModEntities": "Which film producer influenced M1 and M2 and was influenced by a female actor",
    "questionTemplate": "Which [NP_SIMPLE] [VP_SIMPLE] [entity] and [entity] and was [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [NP_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:film.producer .\n?x0 ns:influence.influence_node.influenced ns:m.01b9db .\n?x0 ns:influence.influence_node.influenced ns:m.04g0785 .\n?x0 ns:influence.influence_node.influenced_by ?x1 .\n?x1 a ns:film.actor .\n?x1 ns:people.person.gender ns:m.02zsn\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P1 ?x1 .\n?x0 a M0 .\n?x1 P2 M4 .\n?x1 a M3\n}",
    "expectedResponse": "Bill Cosby",
    "recursionDepth": 38
  },
  {
    "questionIdx": 120070,
    "questionWithBrackets": "Were [Le lion volatil] and [Elsa la rose] directed by a cinematographer that was influenced by and married [Maksim Shishkin]",
    "questionPatternModEntities": "Were M2 and M3 directed by a cinematographer that was influenced by and married M1",
    "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by a [NP_SIMPLE] that was [VP_SIMPLE] by and [VP_SIMPLE] [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 a ns:film.cinematographer .\n?x0 ns:influence.influence_node.influenced_by ns:m.0w8j569 .\n?x0 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ns:m.0w8j569 .\nFILTER ( ?x0 != ns:m.0w8j569 ) .\nns:m.0gxb6vt ns:film.film.directed_by ?x0 .\nns:m.0zgmyvc ns:film.film.directed_by ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M1 .\n?x0 P1 M1 .\n?x0 a M0 .\nFILTER ( ?x0 != M1 ) .\nM2 P2 ?x0 .\nM3 P2 ?x0\n}",
    "expectedResponse": "No",
    "recursionDepth": 38
  },
  {
    "questionIdx": 149162,
    "questionWithBrackets": "What did a costume designer direct, [Chad Oman] and [Ned Dowd] executive produce, and [Jerry Bruckheimer Films] produce",
    "questionPatternModEntities": "What did a costume designer direct , M0 and M1 executive produce , and M2 produce",
    "questionTemplate": "What did a [NP_SIMPLE] [VP_SIMPLE] , [entity] and [entity] [VP_SIMPLE] , and [entity] [VP_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.film.directed_by ?x1 .\n?x0 ns:film.film.executive_produced_by ns:m.04grr41 .\n?x0 ns:film.film.executive_produced_by ns:m.0jwqrl .\n?x0 ns:film.film.produced_by|ns:film.film.production_companies ns:m.05pw3jg .\n?x1 a ns:film.film_costumer_designer\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P1 M2 .\n?x0 P2 ?x1 .\n?x1 a M3\n}",
    "expectedResponse": "Veronica Guerin",
    "recursionDepth": 38
  },
  {
    "questionIdx": 205426,
    "questionWithBrackets": "Which film was written by [Augustin Daly]'s employer's French employee and written by [Margaret Drabble]",
    "questionPatternModEntities": "Which film was written by M3 's employer 's French employee and written by M1",
    "questionTemplate": "Which [NP_SIMPLE] was [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] and [VP_SIMPLE] by [entity]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:film.film .\n?x0 ns:film.film.written_by ?x1 .\n?x0 ns:film.film.written_by ns:m.01666h .\n?x1 ns:people.person.employment_history/ns:business.employment_tenure.company ?x2 .\n?x1 ns:people.person.nationality ns:m.0f8l9c .\n?x2 ns:business.employer.employees/ns:business.employment_tenure.person ns:m.01gyhl\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P0 M1 .\n?x0 a M0 .\n?x1 P1 ?x2 .\n?x1 P2 M2 .\n?x2 P3 M3\n}",
    "expectedResponse": "Isadora",
    "recursionDepth": 38
  },
  {
    "questionIdx": 58975,
    "questionWithBrackets": "Was [Hum Tere Aashiq Hain] edited by [Lachhmandass], written by a parent of [J\u00falia Camps], and written by [Kamleshwar]",
    "questionPatternModEntities": "Was M1 edited by M3 , written by a parent of M0 , and written by M2",
    "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] , [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity] , and [VP_SIMPLE] by [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:people.person.children|ns:fictional_universe.fictional_character.children|ns:organization.organization.child/ns:organization.organization_relationship.child ns:m.0j12yzw .\nns:m.05b1lp5 ns:film.film.edited_by ns:m.0jj290q .\nns:m.05b1lp5 ns:film.film.written_by ?x0 .\nns:m.05b1lp5 ns:film.film.written_by ns:m.08v3xp\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 ?x0 .\nM1 P1 M2 .\nM1 P2 M3\n}",
    "expectedResponse": "No",
    "recursionDepth": 38
  },
  {
    "questionIdx": 177304,
    "questionWithBrackets": "What was executive produced by [Terry Dougas] and produced by a film producer that a film director influenced",
    "questionPatternModEntities": "What was executive produced by M0 and produced by a film producer that a film director influenced",
    "questionTemplate": "What was [VP_SIMPLE] by [entity] and [VP_SIMPLE] by a [NP_SIMPLE] that a [NP_SIMPLE] [VP_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.film.executive_produced_by ns:m.07zpk77 .\n?x0 ns:film.film.produced_by|ns:film.film.production_companies ?x1 .\n?x1 a ns:film.producer .\n?x1 ns:influence.influence_node.influenced_by ?x2 .\n?x2 a ns:film.director\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 ?x1 .\n?x1 P2 ?x2 .\n?x1 a M1 .\n?x2 a M2\n}",
    "expectedResponse": "The Invention of Lying",
    "recursionDepth": 38
  },
  {
    "questionIdx": 13167,
    "questionWithBrackets": "Did [Life of Brian] star [House of Blues]'s founder and employee and star a film editor's parent",
    "questionPatternModEntities": "Did M2 star M0 's founder and employee and star a film editor 's parent",
    "questionTemplate": "Did [entity] [VP_SIMPLE] [entity] 's [ROLE_SIMPLE] and [ROLE_SIMPLE] and [VP_SIMPLE] a [NP_SIMPLE] 's [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:organization.organization_founder.organizations_founded ns:m.0525fd .\n?x0 ns:people.person.employment_history/ns:business.employment_tenure.company ns:m.0525fd .\n?x1 ns:people.person.children|ns:fictional_universe.fictional_character.children|ns:organization.organization.child/ns:organization.organization_relationship.child ?x2 .\n?x2 a ns:film.editor .\nns:m.04k2p ns:film.film.starring/ns:film.performance.actor ?x0 .\nns:m.04k2p ns:film.film.starring/ns:film.performance.actor ?x1\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M0 .\n?x1 P2 ?x2 .\n?x2 a M1 .\nM2 P3 ?x0 .\nM2 P3 ?x1\n}",
    "expectedResponse": "No",
    "recursionDepth": 38
  },
  {
    "questionIdx": 8939,
    "questionWithBrackets": "Did [Gregory Bateson] influence a film editor that married [Norris Church Mailer] and [Teiji Ito] and marry [Lois Cammack]",
    "questionPatternModEntities": "Did M3 influence a film editor that married M1 and M2 and marry M4",
    "questionTemplate": "Did [entity] [VP_SIMPLE] a [NP_SIMPLE] that [VP_SIMPLE] [entity] and [entity] and [VP_SIMPLE] [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 a ns:film.editor .\n?x0 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ns:m.0bmd3bb .\n?x0 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ns:m.0fss6y .\nFILTER ( ?x0 != ns:m.0bmd3bb ) .\nFILTER ( ?x0 != ns:m.0fss6y ) .\nFILTER ( ns:m.01452x != ns:m.0j6b62k ) .\nns:m.01452x ns:influence.influence_node.influenced ?x0 .\nns:m.01452x ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ns:m.0j6b62k\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 a M0 .\nFILTER ( ?x0 != M1 ) .\nFILTER ( ?x0 != M2 ) .\nFILTER ( M3 != M4 ) .\nM3 P0 M4 .\nM3 P1 ?x0\n}",
    "expectedResponse": "No",
    "recursionDepth": 38
  },
  {
    "questionIdx": 238305,
    "questionWithBrackets": "Who was influenced by a film editor and influenced by [Tetsuo II: Body Hammer]'s art director, director, and executive producer",
    "questionPatternModEntities": "Who was influenced by a film editor and influenced by M2 's art director , director , and executive producer",
    "questionTemplate": "Who was [VP_SIMPLE] by a [NP_SIMPLE] and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] , [ROLE_SIMPLE] , and [ROLE_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:people.person .\n?x0 ns:influence.influence_node.influenced_by ?x1 .\n?x0 ns:influence.influence_node.influenced_by ?x2 .\n?x1 a ns:film.editor .\n?x2 ns:film.director.film ns:m.0brs6b .\n?x2 ns:film.film_art_director.films_art_directed ns:m.0brs6b .\n?x2 ns:film.producer.films_executive_produced ns:m.0brs6b\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P0 ?x2 .\n?x0 a M0 .\n?x1 a M1 .\n?x2 P1 M2 .\n?x2 P2 M2 .\n?x2 P3 M2\n}",
    "expectedResponse": "Darren Aronofsky",
    "recursionDepth": 38
  },
  {
    "questionIdx": 179153,
    "questionWithBrackets": "What was executive produced, produced, directed, and edited by [The Private Life Of Fenfen]'s Chinese director",
    "questionPatternModEntities": "What was executive produced , produced , directed , and edited by M1 's Chinese director",
    "questionTemplate": "What was [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.film.directed_by ?x1 .\n?x0 ns:film.film.edited_by ?x1 .\n?x0 ns:film.film.executive_produced_by ?x1 .\n?x0 ns:film.film.produced_by|ns:film.film.production_companies ?x1 .\n?x1 ns:film.director.film ns:m.0_zb30t .\n?x1 ns:people.person.nationality ns:m.0d05w3\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x0 P3 ?x1 .\n?x1 P4 M0 .\n?x1 P5 M1\n}",
    "expectedResponse": "Grave Goods",
    "recursionDepth": 38
  },
  {
    "questionIdx": 92956,
    "questionWithBrackets": "Was a cinematographer that a screenwriter married, was influenced by, and influenced [Robert H. Whaley]",
    "questionPatternModEntities": "Was a cinematographer that a screenwriter married , was influenced by , and influenced M1",
    "questionTemplate": "Was a [NP_SIMPLE] that a [NP_SIMPLE] [VP_SIMPLE] , was [VP_SIMPLE] by , and [VP_SIMPLE] [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 a ns:film.writer .\nFILTER ( ns:m.05p34yf != ?x0 ) .\nns:m.05p34yf a ns:film.cinematographer .\nns:m.05p34yf ns:influence.influence_node.influenced ?x0 .\nns:m.05p34yf ns:influence.influence_node.influenced_by ?x0 .\nns:m.05p34yf ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 a M0 .\nFILTER ( M1 != ?x0 ) .\nM1 P0 ?x0 .\nM1 P1 ?x0 .\nM1 P2 ?x0 .\nM1 a M2\n}",
    "expectedResponse": "No",
    "recursionDepth": 38
  },
  {
    "questionIdx": 64906,
    "questionWithBrackets": "Was [Louis C.K.] a Mexican film producer that influenced [Patton Oswalt] and influenced a film editor",
    "questionPatternModEntities": "Was M1 a Mexican film producer that influenced M3 and influenced a film editor",
    "questionTemplate": "Was [entity] a [ADJECTIVE_SIMPLE] [NP_SIMPLE] that [VP_SIMPLE] [entity] and [VP_SIMPLE] a [NP_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 a ns:film.editor .\nns:m.049fgvm a ns:film.producer .\nns:m.049fgvm ns:influence.influence_node.influenced ?x0 .\nns:m.049fgvm ns:influence.influence_node.influenced ns:m.04l19_ .\nns:m.049fgvm ns:people.person.nationality ns:m.0b90_r\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 a M0 .\nM1 P0 ?x0 .\nM1 P0 M3 .\nM1 P1 M4 .\nM1 a M2\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 38
  },
  {
    "questionIdx": 182403,
    "questionWithBrackets": "What was produced by a person's sibling and child and edited by [Ted Otton] and [Neil Thumpston]",
    "questionPatternModEntities": "What was produced by a person 's sibling and child and edited by M0 and M1",
    "questionTemplate": "What was [VP_SIMPLE] by a [NP_SIMPLE] 's [ROLE_SIMPLE] and [ROLE_SIMPLE] and [VP_SIMPLE] by [entity] and [entity]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.film.edited_by ns:m.0k89h4 .\n?x0 ns:film.film.edited_by ns:m.0kbh3vz .\n?x0 ns:film.film.produced_by|ns:film.film.production_companies ?x1 .\n?x1 ns:people.person.parents|ns:fictional_universe.fictional_character.parents|ns:organization.organization.parent/ns:organization.organization_relationship.parent ?x2 .\n?x1 ns:people.person.sibling_s/ns:people.sibling_relationship.sibling|ns:fictional_universe.fictional_character.siblings/ns:fictional_universe.sibling_relationship_of_fictional_characters.siblings ?x2 .\n?x2 a ns:people.person .\nFILTER ( ?x1 != ?x2 )\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 M0 .\n?x0 P1 M1 .\n?x1 P2 ?x2 .\n?x1 P3 ?x2 .\n?x2 a M2 .\nFILTER ( ?x1 != ?x2 )\n}",
    "expectedResponse": "Dot and the Koala",
    "recursionDepth": 38
  },
  {
    "questionIdx": 99551,
    "questionWithBrackets": "Was a film producer's child founded by [Tales from Earthsea]'s director's parent and founded by [Linda Oldham]",
    "questionPatternModEntities": "Was a film producer 's child founded by M2 's director 's parent and founded by M0",
    "questionTemplate": "Was a [NP_SIMPLE] 's [ROLE_SIMPLE] [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE] and [VP_SIMPLE] by [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:organization.organization.founders ?x1 .\n?x0 ns:organization.organization.founders ns:m.0c4md70 .\n?x0 ns:people.person.parents|ns:fictional_universe.fictional_character.parents|ns:organization.organization.parent/ns:organization.organization_relationship.parent ?x2 .\n?x1 ns:people.person.children|ns:fictional_universe.fictional_character.children|ns:organization.organization.child/ns:organization.organization_relationship.child ?x3 .\n?x2 a ns:film.producer .\n?x3 ns:film.director.film ns:m.09c557\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x2 .\n?x0 P1 M0 .\n?x1 a M1 .\n?x2 P2 ?x3 .\n?x3 P3 M2\n}",
    "expectedResponse": "No",
    "recursionDepth": 38
  },
  {
    "questionIdx": 237662,
    "questionWithBrackets": "Who was influenced by [Video Archives]'s employee and influenced by [Eraserhead]'s editor, producer, and art director",
    "questionPatternModEntities": "Who was influenced by M1 's employee and influenced by M2 's editor , producer , and art director",
    "questionTemplate": "Who was [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] , [ROLE_SIMPLE] , and [ROLE_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:people.person .\n?x0 ns:influence.influence_node.influenced_by ?x1 .\n?x0 ns:influence.influence_node.influenced_by ?x2 .\n?x1 ns:people.person.employment_history/ns:business.employment_tenure.company ns:m.03phx4 .\n?x2 ns:film.editor.film ns:m.027jhb .\n?x2 ns:film.film_art_director.films_art_directed ns:m.027jhb .\n?x2 ns:film.producer.film|ns:film.production_company.films ns:m.027jhb\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P0 ?x2 .\n?x0 a M0 .\n?x1 P1 M1 .\n?x2 P2 M2 .\n?x2 P3 M2 .\n?x2 P4 M2\n}",
    "expectedResponse": "Garret Schuelke; Martin McDonagh",
    "recursionDepth": 39
  },
  {
    "questionIdx": 63759,
    "questionWithBrackets": "Was [Last Will and Embezzlement] executive produced, written, produced, directed, and edited by [Angela Winter]'s sibling",
    "questionPatternModEntities": "Was M1 executive produced , written , produced , directed , and edited by M0 's sibling",
    "questionTemplate": "Was [entity] [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:people.person.sibling_s/ns:people.sibling_relationship.sibling|ns:fictional_universe.fictional_character.siblings/ns:fictional_universe.sibling_relationship_of_fictional_characters.siblings ns:m.011cfvg0 .\nFILTER ( ?x0 != ns:m.011cfvg0 ) .\nns:m.0w1b18c ns:film.film.directed_by ?x0 .\nns:m.0w1b18c ns:film.film.edited_by ?x0 .\nns:m.0w1b18c ns:film.film.executive_produced_by ?x0 .\nns:m.0w1b18c ns:film.film.produced_by|ns:film.film.production_companies ?x0 .\nns:m.0w1b18c ns:film.film.written_by ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nM1 P1 ?x0 .\nM1 P2 ?x0 .\nM1 P3 ?x0 .\nM1 P4 ?x0 .\nM1 P5 ?x0\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 39
  },
  {
    "questionIdx": 217795,
    "questionWithBrackets": "Who founded a film distributor's parent, founded [CNN], and was employed by [World Championship Wrestling]",
    "questionPatternModEntities": "Who founded a film distributor 's parent , founded M2 , and was employed by M1",
    "questionTemplate": "Who [VP_SIMPLE] a [NP_SIMPLE] 's [ROLE_SIMPLE] , [VP_SIMPLE] [entity] , and was [VP_SIMPLE] by [entity]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:people.person .\n?x0 ns:organization.organization_founder.organizations_founded ?x1 .\n?x0 ns:organization.organization_founder.organizations_founded ns:m.0gsgr .\n?x0 ns:people.person.employment_history/ns:business.employment_tenure.company ns:m.019jdn .\n?x1 ns:people.person.children|ns:fictional_universe.fictional_character.children|ns:organization.organization.child/ns:organization.organization_relationship.child ?x2 .\n?x2 a ns:film.film_distributor\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M1 .\n?x0 P1 ?x1 .\n?x0 P1 M2 .\n?x0 a M0 .\n?x1 P2 ?x2 .\n?x2 a M3\n}",
    "expectedResponse": "Ted Turner",
    "recursionDepth": 39
  },
  {
    "questionIdx": 179472,
    "questionWithBrackets": "What was founded by [Daddy Longlegs]'s executive producer, founded by [Chad Buri], and founded by [Partners & Spade]'s founder",
    "questionPatternModEntities": "What was founded by M1 's executive producer , founded by M0 , and founded by M2 's founder",
    "questionTemplate": "What was [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:organization.organization.founders ?x1 .\n?x0 ns:organization.organization.founders ?x2 .\n?x0 ns:organization.organization.founders ns:m.0tlvcvg .\n?x1 ns:film.producer.films_executive_produced ns:m.09sylrq .\n?x2 ns:organization.organization_founder.organizations_founded ns:m.0ch24xg\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P0 ?x2 .\n?x0 P0 M0 .\n?x1 P1 M1 .\n?x2 P2 M2\n}",
    "expectedResponse": "Sleepy Jones",
    "recursionDepth": 39
  },
  {
    "questionIdx": 93601,
    "questionWithBrackets": "Was a company that was acquired by [Providence Equity Partners] and [APriori Capital Partners] and acquired a film distributor [FK Spartak Zlatibor Voda]",
    "questionPatternModEntities": "Was a company that was acquired by M3 and M4 and acquired a film distributor M1",
    "questionTemplate": "Was a [NP_SIMPLE] that was [VP_SIMPLE] by [entity] and [entity] and [VP_SIMPLE] a [NP_SIMPLE] [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 a ns:film.film_distributor .\nns:m.052480b a ns:business.employer .\nns:m.052480b ns:organization.organization.acquired_by/ns:business.acquisition.acquiring_company ns:m.02qb2mr .\nns:m.052480b ns:organization.organization.acquired_by/ns:business.acquisition.acquiring_company ns:m.04rcx3 .\nns:m.052480b ns:organization.organization.companies_acquired/ns:business.acquisition.company_acquired ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 a M0 .\nM1 P0 M3 .\nM1 P0 M4 .\nM1 P1 ?x0 .\nM1 a M2\n}",
    "expectedResponse": "No",
    "recursionDepth": 39
  },
  {
    "questionIdx": 168807,
    "questionWithBrackets": "What was a production company whose employee and founder executive produced [Dateline: Disneyland] and produced [Pinocchio]",
    "questionPatternModEntities": "What was a production company whose employee and founder executive produced M1 and produced M2",
    "questionTemplate": "What was a [NP_SIMPLE] whose [ROLE_SIMPLE] and [ROLE_SIMPLE] [VP_SIMPLE] [entity] and [VP_SIMPLE] [entity]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:film.production_company .\n?x0 ns:business.employer.employees/ns:business.employment_tenure.person ?x1 .\n?x0 ns:organization.organization.founders ?x1 .\n?x1 ns:film.producer.films_executive_produced ns:m.0y639_j .\n?x1 ns:film.producer.film|ns:film.production_company.films ns:m.019kyn\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 a M0 .\n?x1 P2 M1 .\n?x1 P3 M2\n}",
    "expectedResponse": "Walt Disney Animation Studios; The Walt Disney Company",
    "recursionDepth": 39
  },
  {
    "questionIdx": 144137,
    "questionWithBrackets": "What did [Jane Rosenthal] found and a star of a film's prequel and sequel found",
    "questionPatternModEntities": "What did M0 found and a star of a film 's prequel and sequel found",
    "questionTemplate": "What did [entity] [VP_SIMPLE] and a [ROLE_SIMPLE] of a [NP_SIMPLE] 's [ROLE_SIMPLE] and [ROLE_SIMPLE] [VP_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:organization.organization.founders ?x1 .\n?x0 ns:organization.organization.founders ns:m.0ctmx1 .\n?x1 ns:film.actor.film/ns:film.performance.film ?x2 .\n?x2 ns:film.film.prequel ?x3 .\n?x2 ns:film.film.sequel ?x3 .\n?x3 a ns:film.film\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P0 M0 .\n?x1 P1 ?x2 .\n?x2 P2 ?x3 .\n?x2 P3 ?x3 .\n?x3 a M1\n}",
    "expectedResponse": "TriBeCa Productions",
    "recursionDepth": 39
  },
  {
    "questionIdx": 214775,
    "questionWithBrackets": "Who did [Perilous Holiday]'s male costume designer marry, [Mae Murray] influence, and [Grant Withers] marry",
    "questionPatternModEntities": "Who did M3 's male costume designer marry , M1 influence , and M2 marry",
    "questionTemplate": "Who did [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] [VP_SIMPLE] , [entity] [VP_SIMPLE] , and [entity] [VP_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:people.person .\n?x0 ns:influence.influence_node.influenced_by ns:m.02dmts .\n?x0 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ?x1 .\n?x0 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ns:m.0fj_nl .\n?x1 ns:film.film_costumer_designer.costume_design_for_film ns:m.09rjzth .\n?x1 ns:people.person.gender ns:m.05zppz .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x0 != ns:m.0fj_nl )\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M1 .\n?x0 P1 ?x1 .\n?x0 P1 M2 .\n?x0 a M0 .\n?x1 P2 M3 .\n?x1 P3 M4 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x0 != M2 )\n}",
    "expectedResponse": "Loretta Young",
    "recursionDepth": 39
  },
  {
    "questionIdx": 59029,
    "questionWithBrackets": "Was [Human Rights Association] founded by a person that wrote [Balalayka] and founded by [Didar \u015eensoy] and [Filiz Karaku\u015f]",
    "questionPatternModEntities": "Was M2 founded by a person that wrote M1 and founded by M3 and M4",
    "questionTemplate": "Was [entity] [VP_SIMPLE] by a [NP_SIMPLE] that [VP_SIMPLE] [entity] and [VP_SIMPLE] by [entity] and [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 a ns:people.person .\n?x0 ns:film.writer.film ns:m.04174hl .\nns:m.02r1shh ns:organization.organization.founders ?x0 .\nns:m.02r1shh ns:organization.organization.founders ns:m.0w37jjn .\nns:m.02r1shh ns:organization.organization.founders ns:m.0w37jv4\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M1 .\n?x0 a M0 .\nM2 P1 ?x0 .\nM2 P1 M3 .\nM2 P1 M4\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 39
  },
  {
    "questionIdx": 9662,
    "questionWithBrackets": "Did [Here Comes the Boom] star [Kevin James] and [Marely Mercedes] and star [Katherine Borowitz]'s Italian spouse's sibling",
    "questionPatternModEntities": "Did M2 star M3 and M4 and star M1 's Italian spouse 's sibling",
    "questionTemplate": "Did [entity] [VP_SIMPLE] [entity] and [entity] and [VP_SIMPLE] [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] 's [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:people.person.sibling_s/ns:people.sibling_relationship.sibling|ns:fictional_universe.fictional_character.siblings/ns:fictional_universe.sibling_relationship_of_fictional_characters.siblings ?x1 .\n?x1 ns:people.person.nationality ns:m.03rjj .\n?x1 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ns:m.0bbr594 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x1 != ns:m.0bbr594 ) .\nns:m.0gh9fjz ns:film.film.starring/ns:film.performance.actor ?x0 .\nns:m.0gh9fjz ns:film.film.starring/ns:film.performance.actor ns:m.03xb2w .\nns:m.0gh9fjz ns:film.film.starring/ns:film.performance.actor ns:m.0v4062f\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x1 P1 M0 .\n?x1 P2 M1 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x1 != M1 ) .\nM2 P3 ?x0 .\nM2 P3 M3 .\nM2 P3 M4\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 39
  },
  {
    "questionIdx": 194266,
    "questionWithBrackets": "Which art director was a Canadian screenwriter that wrote [Titanic] and executive produced [The Exodus Decoded]",
    "questionPatternModEntities": "Which art director was a Canadian screenwriter that wrote M2 and executive produced M3",
    "questionTemplate": "Which [NP_SIMPLE] was a [ADJECTIVE_SIMPLE] [NP_SIMPLE] that [VP_SIMPLE] [entity] and [VP_SIMPLE] [entity]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:film.film_art_director .\n?x0 a ns:film.writer .\n?x0 ns:film.producer.films_executive_produced ns:m.0cmw3v .\n?x0 ns:film.writer.film ns:m.0dr_4 .\n?x0 ns:people.person.nationality ns:m.0d060g\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M2 .\n?x0 P1 M3 .\n?x0 P2 M4 .\n?x0 a M0 .\n?x0 a M1\n}",
    "expectedResponse": "James Cameron",
    "recursionDepth": 39
  },
  {
    "questionIdx": 5400,
    "questionWithBrackets": "Did [David Lynch] and [Martin Scorsese] marry a child of an actor and influence [Christopher Largen] and [David Chase]",
    "questionPatternModEntities": "Did M1 and M4 marry a child of a actor and influence M2 and M3",
    "questionTemplate": "Did [entity] and [entity] [VP_SIMPLE] a [ROLE_SIMPLE] of a [NP_SIMPLE] and [VP_SIMPLE] [entity] and [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:people.person.parents|ns:fictional_universe.fictional_character.parents|ns:organization.organization.parent/ns:organization.organization_relationship.parent ?x1 .\n?x1 a ns:film.actor .\nFILTER ( ns:m.026dx != ?x0 ) .\nFILTER ( ns:m.04sry != ?x0 ) .\nns:m.026dx ns:influence.influence_node.influenced ns:m.04x4s2 .\nns:m.026dx ns:influence.influence_node.influenced ns:m.0bqnky .\nns:m.026dx ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ?x0 .\nns:m.04sry ns:influence.influence_node.influenced ns:m.04x4s2 .\nns:m.04sry ns:influence.influence_node.influenced ns:m.0bqnky .\nns:m.04sry ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x1 a M0 .\nFILTER ( M1 != ?x0 ) .\nFILTER ( M4 != ?x0 ) .\nM1 P1 M2 .\nM1 P1 M3 .\nM1 P2 ?x0 .\nM4 P1 M2 .\nM4 P1 M3 .\nM4 P2 ?x0\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 39
  },
  {
    "questionIdx": 24734,
    "questionWithBrackets": "Did [Walt Disney] found [Walt Disney Animation Studios], found [Disney Channel], and found [Steamboat Willie]'s producer's employer",
    "questionPatternModEntities": "Did M1 found M2 , found M3 , and found M0 's producer 's employer",
    "questionTemplate": "Did [entity] [VP_SIMPLE] [entity] , [VP_SIMPLE] [entity] , and [VP_SIMPLE] [entity] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:business.employer.employees/ns:business.employment_tenure.person ?x1 .\n?x1 ns:film.producer.film|ns:film.production_company.films ns:m.07bp0 .\nns:m.081nh ns:organization.organization_founder.organizations_founded ?x0 .\nns:m.081nh ns:organization.organization_founder.organizations_founded ns:m.04rcl7 .\nns:m.081nh ns:organization.organization_founder.organizations_founded ns:m.0kc9f\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x1 P1 M0 .\nM1 P2 ?x0 .\nM1 P2 M2 .\nM1 P2 M3\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 39
  },
  {
    "questionIdx": 183853,
    "questionWithBrackets": "What was written and edited by a costume designer that executive produced and edited [Promises Written in Water]",
    "questionPatternModEntities": "What was written and edited by a costume designer that executive produced and edited M1",
    "questionTemplate": "What was [VP_SIMPLE] and [VP_SIMPLE] by a [NP_SIMPLE] that [VP_SIMPLE] and [VP_SIMPLE] [entity]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.film.edited_by ?x1 .\n?x0 ns:film.film.written_by ?x1 .\n?x1 a ns:film.film_costumer_designer .\n?x1 ns:film.editor.film ns:m.0bh9qf1 .\n?x1 ns:film.producer.films_executive_produced ns:m.0bh9qf1\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x1 P2 M1 .\n?x1 P3 M1 .\n?x1 a M0\n}",
    "expectedResponse": "The Brown Bunny; Promises Written in Water",
    "recursionDepth": 39
  },
  {
    "questionIdx": 76639,
    "questionWithBrackets": "Was [Skhizein] written by a film producer and edited by [Panic in the Parlour]'s executive producer, art director, and cinematographer",
    "questionPatternModEntities": "Was M2 written by a film producer and edited by M1 's executive producer , art director , and cinematographer",
    "questionTemplate": "Was [entity] [VP_SIMPLE] by a [NP_SIMPLE] and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] , [ROLE_SIMPLE] , and [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 a ns:film.producer .\n?x1 ns:film.cinematographer.film ns:m.05szgwg .\n?x1 ns:film.film_art_director.films_art_directed ns:m.05szgwg .\n?x1 ns:film.producer.films_executive_produced ns:m.05szgwg .\nns:m.04mwpwz ns:film.film.edited_by ?x1 .\nns:m.04mwpwz ns:film.film.written_by ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 a M0 .\n?x1 P0 M1 .\n?x1 P1 M1 .\n?x1 P2 M1 .\nM2 P3 ?x0 .\nM2 P4 ?x1\n}",
    "expectedResponse": "No",
    "recursionDepth": 39
  },
  {
    "questionIdx": 98097,
    "questionWithBrackets": "Was a film editor employed by [Temple University], employed by [The Walt Disney Company]'s child, and employed by [Industrial Light & Magic]",
    "questionPatternModEntities": "Was a film editor employed by M1 , employed by M3 's child , and employed by M2",
    "questionTemplate": "Was a [NP_SIMPLE] [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] , and [VP_SIMPLE] by [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 a ns:film.editor .\n?x0 ns:people.person.employment_history/ns:business.employment_tenure.company ?x1 .\n?x0 ns:people.person.employment_history/ns:business.employment_tenure.company ns:m.01813n .\n?x0 ns:people.person.employment_history/ns:business.employment_tenure.company ns:m.01jt2w .\n?x1 ns:people.person.parents|ns:fictional_universe.fictional_character.parents|ns:organization.organization.parent/ns:organization.organization_relationship.parent ns:m.09b3v\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 a M0 .\n?x1 P1 M3\n}",
    "expectedResponse": "No",
    "recursionDepth": 39
  },
  {
    "questionIdx": 74674,
    "questionWithBrackets": "Was [Role Models] produced by a production company, executive produced by [Peter Saraf], and written by a character",
    "questionPatternModEntities": "Was M2 produced by a production company , executive produced by M3 , and written by a character",
    "questionTemplate": "Was [entity] [VP_SIMPLE] by a [NP_SIMPLE] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by a [NP_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 a ns:fictional_universe.fictional_character .\n?x1 a ns:film.production_company .\nns:m.03b_fm5 ns:film.film.executive_produced_by ns:m.0jxyym .\nns:m.03b_fm5 ns:film.film.produced_by|ns:film.film.production_companies ?x1 .\nns:m.03b_fm5 ns:film.film.written_by ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 a M0 .\n?x1 a M1 .\nM2 P0 M3 .\nM2 P1 ?x0 .\nM2 P2 ?x1\n}",
    "expectedResponse": "No",
    "recursionDepth": 39
  },
  {
    "questionIdx": 181737,
    "questionWithBrackets": "What was produced by [Tarak Ben Ammar] and executive produced by a film producer's parent's employee and founder",
    "questionPatternModEntities": "What was produced by M0 and executive produced by a film producer 's parent 's employee and founder",
    "questionTemplate": "What was [VP_SIMPLE] by [entity] and [VP_SIMPLE] by a [NP_SIMPLE] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE] and [ROLE_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.film.executive_produced_by ?x1 .\n?x0 ns:film.film.produced_by|ns:film.film.production_companies ns:m.047kcc .\n?x1 ns:organization.organization_founder.organizations_founded ?x2 .\n?x1 ns:people.person.employment_history/ns:business.employment_tenure.company ?x2 .\n?x2 ns:people.person.children|ns:fictional_universe.fictional_character.children|ns:organization.organization.child/ns:organization.organization_relationship.child ?x3 .\n?x3 a ns:film.producer\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 M0 .\n?x1 P2 ?x2 .\n?x1 P3 ?x2 .\n?x2 P4 ?x3 .\n?x3 a M1\n}",
    "expectedResponse": "The Last Legion",
    "recursionDepth": 39
  },
  {
    "questionIdx": 11222,
    "questionWithBrackets": "Did [Jean Renoir] marry [Dido Renoir], influence [The Kingdom of Diamonds]'s costume designer, and influence [Changing Lanes]'s star",
    "questionPatternModEntities": "Did M2 marry M3 , influence M0 's costume designer , and influence M1 's star",
    "questionTemplate": "Did [entity] [VP_SIMPLE] [entity] , [VP_SIMPLE] [entity] 's [ROLE_SIMPLE] , and [VP_SIMPLE] [entity] 's [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.film_costumer_designer.costume_design_for_film ns:m.098dmr .\n?x1 ns:film.actor.film/ns:film.performance.film ns:m.04w7fk .\nFILTER ( ns:m.0qdm8 != ns:m.0hn30y5 ) .\nns:m.0qdm8 ns:influence.influence_node.influenced ?x0 .\nns:m.0qdm8 ns:influence.influence_node.influenced ?x1 .\nns:m.0qdm8 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ns:m.0hn30y5\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x1 P1 M1 .\nFILTER ( M2 != M3 ) .\nM2 P2 ?x0 .\nM2 P2 ?x1 .\nM2 P3 M3\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 39
  },
  {
    "questionIdx": 227153,
    "questionWithBrackets": "Who was a German male film director that [Bigfoot Entertainment] employed and was founded by",
    "questionPatternModEntities": "Who was a German male film director that M2 employed and was founded by",
    "questionTemplate": "Who was a [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [NP_SIMPLE] that [entity] [VP_SIMPLE] and was [VP_SIMPLE] by",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:film.director .\n?x0 a ns:people.person .\n?x0 ns:organization.organization_founder.organizations_founded ns:m.04f4nrb .\n?x0 ns:people.person.employment_history/ns:business.employment_tenure.company ns:m.04f4nrb .\n?x0 ns:people.person.gender ns:m.05zppz .\n?x0 ns:people.person.nationality ns:m.0345h\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M2 .\n?x0 P1 M2 .\n?x0 P2 M3 .\n?x0 P3 M4 .\n?x0 a M0 .\n?x0 a M1\n}",
    "expectedResponse": "Michael Gleissner",
    "recursionDepth": 39
  },
  {
    "questionIdx": 56502,
    "questionWithBrackets": "Was [George Lucas] a cinematographer that [Christopher Lee] influenced and [American Zoetrope]'s Italian founder influenced",
    "questionPatternModEntities": "Was M2 a cinematographer that M4 influenced and M0 's Italian founder influenced",
    "questionTemplate": "Was [entity] a [NP_SIMPLE] that [entity] [VP_SIMPLE] and [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] [VP_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:organization.organization_founder.organizations_founded ns:m.02jd_7 .\n?x0 ns:people.person.nationality ns:m.03rjj .\nns:m.0343h a ns:film.cinematographer .\nns:m.0343h ns:influence.influence_node.influenced_by ?x0 .\nns:m.0343h ns:influence.influence_node.influenced_by ns:m.0f0kz\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nM2 P2 ?x0 .\nM2 P2 M4 .\nM2 a M3\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 39
  },
  {
    "questionIdx": 7189,
    "questionWithBrackets": "Did [Ezra Pound] influence [Florence Joyce]'s sibling, marry [Dorothy Shakespear], and influence [The McClatchy Company]'s employee",
    "questionPatternModEntities": "Did M2 influence M1 's sibling , marry M3 , and influence M0 's employee",
    "questionTemplate": "Did [entity] [VP_SIMPLE] [entity] 's [ROLE_SIMPLE] , [VP_SIMPLE] [entity] , and [VP_SIMPLE] [entity] 's [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:people.person.employment_history/ns:business.employment_tenure.company ns:m.03y7ml .\n?x1 ns:people.person.sibling_s/ns:people.sibling_relationship.sibling|ns:fictional_universe.fictional_character.siblings/ns:fictional_universe.sibling_relationship_of_fictional_characters.siblings ns:m.0__wb6h .\nFILTER ( ?x1 != ns:m.0__wb6h ) .\nFILTER ( ns:m.0c1jh != ns:m.05jh5j ) .\nns:m.0c1jh ns:influence.influence_node.influenced ?x0 .\nns:m.0c1jh ns:influence.influence_node.influenced ?x1 .\nns:m.0c1jh ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ns:m.05jh5j\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x1 P1 M1 .\nFILTER ( ?x1 != M1 ) .\nFILTER ( M2 != M3 ) .\nM2 P2 ?x0 .\nM2 P2 ?x1 .\nM2 P3 M3\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 39
  },
  {
    "questionIdx": 7200,
    "questionWithBrackets": "Did [FC Schaffhausen], [FC Winterthur], [FK Austria Wien], [FC Tirol Innsbruck], [FC Frauenfeld], and [VfB Stuttgart] employ a person's German sibling",
    "questionPatternModEntities": "Did M2 , M3 , M4 , M5 , M6 , and M7 employ a person 's German sibling",
    "questionTemplate": "Did [entity] , [entity] , [entity] , [entity] , [entity] , and [entity] [VP_SIMPLE] a [NP_SIMPLE] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:people.person.nationality ns:m.0345h .\n?x0 ns:people.person.sibling_s/ns:people.sibling_relationship.sibling|ns:fictional_universe.fictional_character.siblings/ns:fictional_universe.sibling_relationship_of_fictional_characters.siblings ?x1 .\n?x1 a ns:people.person .\nFILTER ( ?x0 != ?x1 ) .\nns:m.025tjy0 ns:business.employer.employees/ns:business.employment_tenure.person ?x0 .\nns:m.0371rb ns:business.employer.employees/ns:business.employment_tenure.person ?x0 .\nns:m.03mp37 ns:business.employer.employees/ns:business.employment_tenure.person ?x0 .\nns:m.065y5df ns:business.employer.employees/ns:business.employment_tenure.person ?x0 .\nns:m.0c5wln ns:business.employer.employees/ns:business.employment_tenure.person ?x0 .\nns:m.0f1lkk ns:business.employer.employees/ns:business.employment_tenure.person ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x0 P1 M0 .\n?x1 a M1 .\nFILTER ( ?x0 != ?x1 ) .\nM2 P2 ?x0 .\nM3 P2 ?x0 .\nM4 P2 ?x0 .\nM5 P2 ?x0 .\nM6 P2 ?x0 .\nM7 P2 ?x0\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 39
  },
  {
    "questionIdx": 78888,
    "questionWithBrackets": "Was [That Justice Be Done] directed by [Thomas Cappelen Malling], produced by a film producer, and edited by [Muchacho besador]'s actor",
    "questionPatternModEntities": "Was M2 directed by M3 , produced by a film producer , and edited by M1 's actor",
    "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] , [VP_SIMPLE] by a [NP_SIMPLE] , and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 a ns:film.producer .\n?x1 ns:film.actor.film/ns:film.performance.character ns:m.0w1xgbr .\nns:m.026m0y_ ns:film.film.directed_by ns:m.0bmdc4v .\nns:m.026m0y_ ns:film.film.edited_by ?x1 .\nns:m.026m0y_ ns:film.film.produced_by|ns:film.film.production_companies ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 a M0 .\n?x1 P0 M1 .\nM2 P1 ?x0 .\nM2 P2 ?x1 .\nM2 P3 M3\n}",
    "expectedResponse": "No",
    "recursionDepth": 39
  },
  {
    "questionIdx": 60908,
    "questionWithBrackets": "Was [Jan Persson] a Swedish cinematographer that [Yrrol] was edited by and [Ronia, the Robber's Daughter] was edited by",
    "questionPatternModEntities": "Was M0 a Swedish cinematographer that M2 was edited by and M3 was edited by",
    "questionTemplate": "Was [entity] a [ADJECTIVE_SIMPLE] [NP_SIMPLE] that [entity] was [VP_SIMPLE] by and [entity] was [VP_SIMPLE] by",
    "sparql": "SELECT count(*) WHERE {\nns:m.01wmwcz a ns:film.cinematographer .\nns:m.01wmwcz ns:film.editor.film ns:m.04m_qb1 .\nns:m.01wmwcz ns:film.editor.film ns:m.0dgn3s6 .\nns:m.01wmwcz ns:people.person.nationality ns:m.0d0vqn\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M2 .\nM0 P0 M3 .\nM0 P1 M4 .\nM0 a M1\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 39
  },
  {
    "questionIdx": 230749,
    "questionWithBrackets": "Who was a film editor that [The 400 Blows]'s star married, was influenced by, and influenced",
    "questionPatternModEntities": "Who was a film editor that M2 's star married , was influenced by , and influenced",
    "questionTemplate": "Who was a [NP_SIMPLE] that [entity] 's [ROLE_SIMPLE] [VP_SIMPLE] , was [VP_SIMPLE] by , and [VP_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:film.editor .\n?x0 a ns:people.person .\n?x0 ns:influence.influence_node.influenced ?x1 .\n?x0 ns:influence.influence_node.influenced_by ?x1 .\n?x0 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ?x1 .\n?x1 ns:film.actor.film/ns:film.performance.film ns:m.01cqks .\nFILTER ( ?x0 != ?x1 )\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x0 a M0 .\n?x0 a M1 .\n?x1 P3 M2 .\nFILTER ( ?x0 != ?x1 )\n}",
    "expectedResponse": "Agn\u00e8s Varda",
    "recursionDepth": 39
  },
  {
    "questionIdx": 143647,
    "questionWithBrackets": "What did [Goat Story 2]'s editor, cinematographer, and art director produce and [Patrick Ewald] and [Shaked Berenson] executive produce",
    "questionPatternModEntities": "What did M2 's editor , cinematographer , and art director produce and M0 and M1 executive produce",
    "questionTemplate": "What did [entity] 's [ROLE_SIMPLE] , [ROLE_SIMPLE] , and [ROLE_SIMPLE] [VP_SIMPLE] and [entity] and [entity] [VP_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.film.executive_produced_by ns:m.0h0t4pz .\n?x0 ns:film.film.executive_produced_by ns:m.0h0t4q7 .\n?x0 ns:film.film.produced_by|ns:film.film.production_companies ?x1 .\n?x1 ns:film.cinematographer.film ns:m.0nbtt_1 .\n?x1 ns:film.editor.film ns:m.0nbtt_1 .\n?x1 ns:film.film_art_director.films_art_directed ns:m.0nbtt_1\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P1 ?x1 .\n?x1 P2 M2 .\n?x1 P3 M2 .\n?x1 P4 M2\n}",
    "expectedResponse": "Goat Story",
    "recursionDepth": 39
  },
  {
    "questionIdx": 116740,
    "questionWithBrackets": "Were [Flags of Our Fathers] and [Memoirs of a Geisha] produced by a costume designer's male parent and distributed by [DreamWorks Studios]",
    "questionPatternModEntities": "Were M2 and M4 produced by a costume designer 's male parent and distributed by M3",
    "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by a [NP_SIMPLE] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] and [VP_SIMPLE] by [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:people.person.children|ns:fictional_universe.fictional_character.children|ns:organization.organization.child/ns:organization.organization_relationship.child ?x1 .\n?x0 ns:people.person.gender ns:m.05zppz .\n?x1 a ns:film.film_costumer_designer .\nns:m.08fn5b ns:film.film.distributors/ns:film.film_film_distributor_relationship.distributor ns:m.01gb54 .\nns:m.08fn5b ns:film.film.produced_by|ns:film.film.production_companies ?x0 .\nns:m.0drnwh ns:film.film.distributors/ns:film.film_film_distributor_relationship.distributor ns:m.01gb54 .\nns:m.0drnwh ns:film.film.produced_by|ns:film.film.production_companies ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 ?x1 .\n?x1 a M1 .\nM2 P2 M3 .\nM2 P3 ?x0 .\nM4 P2 M3 .\nM4 P3 ?x0\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 39
  },
  {
    "questionIdx": 115741,
    "questionWithBrackets": "Were [Dil Hai Ke Manta Nahin] and [Aashiqui] executive produced by a male sibling of [Sheila Bhatt] and directed by [Mahesh Bhatt]",
    "questionPatternModEntities": "Were M2 and M4 executive produced by a male sibling of M0 and directed by M3",
    "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] and [VP_SIMPLE] by [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:people.person.gender ns:m.05zppz .\n?x0 ns:people.person.sibling_s/ns:people.sibling_relationship.sibling|ns:fictional_universe.fictional_character.siblings/ns:fictional_universe.sibling_relationship_of_fictional_characters.siblings ns:m.010r3gbk .\nFILTER ( ?x0 != ns:m.010r3gbk ) .\nns:m.095r59 ns:film.film.directed_by ns:m.04rs03 .\nns:m.095r59 ns:film.film.executive_produced_by ?x0 .\nns:m.0gfgk5 ns:film.film.directed_by ns:m.04rs03 .\nns:m.0gfgk5 ns:film.film.executive_produced_by ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M0 ) .\nM2 P2 ?x0 .\nM2 P3 M3 .\nM4 P2 ?x0 .\nM4 P3 M3\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 39
  },
  {
    "questionIdx": 48155,
    "questionWithBrackets": "Was [Blues for the Avatar] directed, edited, executive produced, produced, and written by [Maryam Sayyad]'s parent",
    "questionPatternModEntities": "Was M1 directed , edited , executive produced , produced , and written by M0 's parent",
    "questionTemplate": "Was [entity] [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:people.person.children|ns:fictional_universe.fictional_character.children|ns:organization.organization.child/ns:organization.organization_relationship.child ns:m.0n4cyvn .\nns:m.0znn7j_ ns:film.film.directed_by ?x0 .\nns:m.0znn7j_ ns:film.film.edited_by ?x0 .\nns:m.0znn7j_ ns:film.film.executive_produced_by ?x0 .\nns:m.0znn7j_ ns:film.film.produced_by|ns:film.film.production_companies ?x0 .\nns:m.0znn7j_ ns:film.film.written_by ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 ?x0 .\nM1 P2 ?x0 .\nM1 P3 ?x0 .\nM1 P4 ?x0 .\nM1 P5 ?x0\n}",
    "expectedResponse": "No",
    "recursionDepth": 39
  },
  {
    "questionIdx": 230994,
    "questionWithBrackets": "Who was a film producer whose sibling was influenced by [Bob Newhart] and [Steve Martin] and married [Portia de Rossi]",
    "questionPatternModEntities": "Who was a film producer whose sibling was influenced by M2 and M3 and married M4",
    "questionTemplate": "Who was a [NP_SIMPLE] whose [ROLE_SIMPLE] was [VP_SIMPLE] by [entity] and [entity] and [VP_SIMPLE] [entity]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:film.producer .\n?x0 a ns:people.person .\n?x0 ns:people.person.sibling_s/ns:people.sibling_relationship.sibling|ns:fictional_universe.fictional_character.siblings/ns:fictional_universe.sibling_relationship_of_fictional_characters.siblings ?x1 .\n?x1 ns:influence.influence_node.influenced_by ns:m.012gq6 .\n?x1 ns:influence.influence_node.influenced_by ns:m.0p_47 .\n?x1 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ns:m.01pcz9 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x1 != ns:m.01pcz9 )\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 a M0 .\n?x0 a M1 .\n?x1 P1 M2 .\n?x1 P1 M3 .\n?x1 P2 M4 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x1 != M4 )\n}",
    "expectedResponse": "Vance DeGeneres",
    "recursionDepth": 39
  },
  {
    "questionIdx": 63136,
    "questionWithBrackets": "Was [Kitty Kornered]'s director influenced by a film distributor's male founder and influenced by [Buster Keaton]",
    "questionPatternModEntities": "Was M1 's director influenced by a film distributor 's male founder and influenced by M0",
    "questionTemplate": "Was [entity] 's [ROLE_SIMPLE] [VP_SIMPLE] by a [NP_SIMPLE] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] and [VP_SIMPLE] by [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.director.film ns:m.04sp_n .\n?x0 ns:influence.influence_node.influenced_by ?x1 .\n?x0 ns:influence.influence_node.influenced_by ns:m.0btj0 .\n?x1 ns:organization.organization_founder.organizations_founded ?x2 .\n?x1 ns:people.person.gender ns:m.05zppz .\n?x2 a ns:film.film_distributor\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x1 P2 ?x2 .\n?x1 P3 M2 .\n?x2 a M3\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 39
  },
  {
    "questionIdx": 184449,
    "questionWithBrackets": "What was written by [Jeff Nathanson], produced by a female person, and directed by [Allen Hughes]",
    "questionPatternModEntities": "What was written by M0 , produced by a female person , and directed by M1",
    "questionTemplate": "What was [VP_SIMPLE] by [entity] , [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [NP_SIMPLE] , and [VP_SIMPLE] by [entity]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.film.directed_by ns:m.0jx22s .\n?x0 ns:film.film.produced_by|ns:film.film.production_companies ?x1 .\n?x0 ns:film.film.written_by ns:m.08rnj6 .\n?x1 a ns:people.person .\n?x1 ns:people.person.gender ns:m.02zsn\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 ?x1 .\n?x0 P2 M1 .\n?x1 P3 M3 .\n?x1 a M2\n}",
    "expectedResponse": "New York, I Love You",
    "recursionDepth": 39
  },
  {
    "questionIdx": 127945,
    "questionWithBrackets": "Were [The Trial] and [Too Much Johnson] written and edited by a film's writer, costume designer, and cinematographer",
    "questionPatternModEntities": "Were M1 and M2 written and edited by a film 's writer , costume designer , and cinematographer",
    "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] and [VP_SIMPLE] by a [NP_SIMPLE] 's [ROLE_SIMPLE] , [ROLE_SIMPLE] , and [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.cinematographer.film ?x1 .\n?x0 ns:film.film_costumer_designer.costume_design_for_film ?x1 .\n?x0 ns:film.writer.film ?x1 .\n?x1 a ns:film.film .\nns:m.069mcz ns:film.film.edited_by ?x0 .\nns:m.069mcz ns:film.film.written_by ?x0 .\nns:m.0bh75n ns:film.film.edited_by ?x0 .\nns:m.0bh75n ns:film.film.written_by ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x1 a M0 .\nM1 P3 ?x0 .\nM1 P4 ?x0 .\nM2 P3 ?x0 .\nM2 P4 ?x0\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 39
  },
  {
    "questionIdx": 117308,
    "questionWithBrackets": "Were [God of Gamblers] and [A True Mob Story] produced by [Andrew Lau] and produced by a film producer's Chinese child",
    "questionPatternModEntities": "Were M2 and M4 produced by M3 and produced by a film producer 's Chinese child",
    "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by [entity] and [VP_SIMPLE] by a [NP_SIMPLE] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:people.person.nationality ns:m.0d05w3 .\n?x0 ns:people.person.parents|ns:fictional_universe.fictional_character.parents|ns:organization.organization.parent/ns:organization.organization_relationship.parent ?x1 .\n?x1 a ns:film.producer .\nns:m.073txn ns:film.film.produced_by|ns:film.film.production_companies ?x0 .\nns:m.073txn ns:film.film.produced_by|ns:film.film.production_companies ns:m.069_0y .\nns:m.0bqs4_n ns:film.film.produced_by|ns:film.film.production_companies ?x0 .\nns:m.0bqs4_n ns:film.film.produced_by|ns:film.film.production_companies ns:m.069_0y\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 ?x1 .\n?x1 a M1 .\nM2 P2 ?x0 .\nM2 P2 M3 .\nM4 P2 ?x0 .\nM4 P2 M3\n}",
    "expectedResponse": "No",
    "recursionDepth": 39
  },
  {
    "questionIdx": 184910,
    "questionWithBrackets": "What was written by [The Act of Killing]'s executive producer, executive produced by [Kevin L. Beggs], and produced by a film editor",
    "questionPatternModEntities": "What was written by M1 's executive producer , executive produced by M0 , and produced by a film editor",
    "questionTemplate": "What was [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by a [NP_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.film.executive_produced_by ns:m.0fq3wmx .\n?x0 ns:film.film.produced_by|ns:film.film.production_companies ?x1 .\n?x0 ns:film.film.written_by ?x2 .\n?x1 a ns:film.editor .\n?x2 ns:film.producer.films_executive_produced ns:m.0lqh8nl\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 ?x1 .\n?x0 P2 ?x2 .\n?x1 P3 M1 .\n?x2 a M2\n}",
    "expectedResponse": "Grizzly Man",
    "recursionDepth": 39
  },
  {
    "questionIdx": 181098,
    "questionWithBrackets": "What was produced by [CZ12]'s producer, cinematographer, and art director and distributed by [TriStar Pictures] and [Sony Pictures Entertainment]",
    "questionPatternModEntities": "What was produced by M2 's producer , cinematographer , and art director and distributed by M0 and M1",
    "questionTemplate": "What was [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] , [ROLE_SIMPLE] , and [ROLE_SIMPLE] and [VP_SIMPLE] by [entity] and [entity]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.film.distributors/ns:film.film_film_distributor_relationship.distributor ns:m.030_1m .\n?x0 ns:film.film.distributors/ns:film.film_film_distributor_relationship.distributor ns:m.03rwz3 .\n?x0 ns:film.film.produced_by|ns:film.film.production_companies ?x1 .\n?x1 ns:film.cinematographer.film ns:m.0hznzl6 .\n?x1 ns:film.film_art_director.films_art_directed ns:m.0hznzl6 .\n?x1 ns:film.producer.film|ns:film.production_company.films ns:m.0hznzl6\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P1 ?x1 .\n?x1 P2 M2 .\n?x1 P3 M2 .\n?x1 P4 M2\n}",
    "expectedResponse": "Gorgeous",
    "recursionDepth": 39
  },
  {
    "questionIdx": 64917,
    "questionWithBrackets": "Was [Louis C.K.: Chewed Up] directed and edited by a Mexican actor that an actor influenced",
    "questionPatternModEntities": "Was M2 directed and edited by a Mexican actor that a actor influenced",
    "questionTemplate": "Was [entity] [VP_SIMPLE] and [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [NP_SIMPLE] that a [NP_SIMPLE] [VP_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 a ns:film.actor .\n?x0 ns:influence.influence_node.influenced_by ?x1 .\n?x0 ns:people.person.nationality ns:m.0b90_r .\n?x1 a ns:film.actor .\nns:m.0cr_ltd ns:film.film.directed_by ?x0 .\nns:m.0cr_ltd ns:film.film.edited_by ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x0 P1 M1 .\n?x0 a M0 .\n?x1 a M0 .\nM2 P2 ?x0 .\nM2 P3 ?x0\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 39
  },
  {
    "questionIdx": 85687,
    "questionWithBrackets": "Was [Visions of Europe] directed by a female person's sibling and directed by [Theo Angelopoulos] and [Jean-Pierre Dardenne]",
    "questionPatternModEntities": "Was M2 directed by a female person 's sibling and directed by M3 and M4",
    "questionTemplate": "Was [entity] [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [NP_SIMPLE] 's [ROLE_SIMPLE] and [VP_SIMPLE] by [entity] and [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:people.person.sibling_s/ns:people.sibling_relationship.sibling|ns:fictional_universe.fictional_character.siblings/ns:fictional_universe.sibling_relationship_of_fictional_characters.siblings ?x1 .\n?x1 a ns:people.person .\n?x1 ns:people.person.gender ns:m.02zsn .\nFILTER ( ?x0 != ?x1 ) .\nns:m.0gkshd_ ns:film.film.directed_by ?x0 .\nns:m.0gkshd_ ns:film.film.directed_by ns:m.06zf4cd .\nns:m.0gkshd_ ns:film.film.directed_by ns:m.0gts8\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x1 P1 M1 .\n?x1 a M0 .\nFILTER ( ?x0 != ?x1 ) .\nM2 P2 ?x0 .\nM2 P2 M3 .\nM2 P2 M4\n}",
    "expectedResponse": "No",
    "recursionDepth": 39
  },
  {
    "questionIdx": 91588,
    "questionWithBrackets": "Was a character influenced by [Billy Lyell] and [Albert Camus] and influenced by [Enistasious Tosh Angelos]'s female spouse",
    "questionPatternModEntities": "Was a character influenced by M1 and M2 and influenced by M4 's female spouse",
    "questionTemplate": "Was a [NP_SIMPLE] [VP_SIMPLE] by [entity] and [entity] and [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 a ns:fictional_universe.fictional_character .\n?x0 ns:influence.influence_node.influenced_by ?x1 .\n?x0 ns:influence.influence_node.influenced_by ns:m.0gty1_b .\n?x0 ns:influence.influence_node.influenced_by ns:m.0lcx .\n?x1 ns:people.person.gender ns:m.02zsn .\n?x1 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ns:m.0k9zgnq .\nFILTER ( ?x1 != ns:m.0k9zgnq )\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 a M0 .\n?x1 P1 M3 .\n?x1 P2 M4 .\nFILTER ( ?x1 != M4 )\n}",
    "expectedResponse": "No",
    "recursionDepth": 39
  },
  {
    "questionIdx": 175798,
    "questionWithBrackets": "What was edited, written, directed, and executive produced by a spouse of [Stephanie Chao-Parkes]'s spouse",
    "questionPatternModEntities": "What was edited , written , directed , and executive produced by a spouse of M0 's spouse",
    "questionTemplate": "What was [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity] 's [ROLE_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.film.directed_by ?x1 .\n?x0 ns:film.film.edited_by ?x1 .\n?x0 ns:film.film.executive_produced_by ?x1 .\n?x0 ns:film.film.written_by ?x1 .\n?x1 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ?x2 .\n?x2 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ns:m.0z6lc6t .\nFILTER ( ?x1 != ?x2 ) .\nFILTER ( ?x2 != ns:m.0z6lc6t )\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x0 P3 ?x1 .\n?x1 P4 ?x2 .\n?x2 P4 M0 .\nFILTER ( ?x1 != ?x2 ) .\nFILTER ( ?x2 != M0 )\n}",
    "expectedResponse": "Under the Palms",
    "recursionDepth": 39
  },
  {
    "questionIdx": 121857,
    "questionWithBrackets": "Were [Nightmare Detective] and [Tetsuo: The Bullet Man] written and produced by a film's art director, director, and producer",
    "questionPatternModEntities": "Were M1 and M2 written and produced by a film 's art director , director , and producer",
    "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] and [VP_SIMPLE] by a [NP_SIMPLE] 's [ROLE_SIMPLE] , [ROLE_SIMPLE] , and [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.director.film ?x1 .\n?x0 ns:film.film_art_director.films_art_directed ?x1 .\n?x0 ns:film.producer.film|ns:film.production_company.films ?x1 .\n?x1 a ns:film.film .\nns:m.02qq666 ns:film.film.produced_by|ns:film.film.production_companies ?x0 .\nns:m.02qq666 ns:film.film.written_by ?x0 .\nns:m.06zq889 ns:film.film.produced_by|ns:film.film.production_companies ?x0 .\nns:m.06zq889 ns:film.film.written_by ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x1 a M0 .\nM1 P3 ?x0 .\nM1 P4 ?x0 .\nM2 P3 ?x0 .\nM2 P4 ?x0\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 39
  },
  {
    "questionIdx": 145125,
    "questionWithBrackets": "What did [Martin \u0160ul\u00edk] write, [Good Night, Dear]'s director and cinematographer produce, and [Janice Toomey] edit",
    "questionPatternModEntities": "What did M0 write , M2 's director and cinematographer produce , and M1 edit",
    "questionTemplate": "What did [entity] [VP_SIMPLE] , [entity] 's [ROLE_SIMPLE] and [ROLE_SIMPLE] [VP_SIMPLE] , and [entity] [VP_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.film.edited_by ns:m.0k22qp .\n?x0 ns:film.film.produced_by|ns:film.film.production_companies ?x1 .\n?x0 ns:film.film.written_by ns:m.0clq39 .\n?x1 ns:film.cinematographer.film ns:m.0tm61sc .\n?x1 ns:film.director.film ns:m.0tm61sc\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 ?x1 .\n?x0 P2 M1 .\n?x1 P3 M2 .\n?x1 P4 M2\n}",
    "expectedResponse": "Visions of Europe",
    "recursionDepth": 39
  },
  {
    "questionIdx": 129199,
    "questionWithBrackets": "Were [W.E.] and [Filth and Wisdom] directed by and written by a female executive producer of [Madonna: The Confessions Tour] and [I Am Because We Are]",
    "questionPatternModEntities": "Were M3 and M4 directed by and written by a female executive producer of M0 and M1",
    "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by and [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] and [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.producer.films_executive_produced ns:m.03cfts5 .\n?x0 ns:film.producer.films_executive_produced ns:m.0djc1kz .\n?x0 ns:people.person.gender ns:m.02zsn .\nns:m.02vpvxm ns:film.film.directed_by ?x0 .\nns:m.02vpvxm ns:film.film.written_by ?x0 .\nns:m.0ch4wh_ ns:film.film.directed_by ?x0 .\nns:m.0ch4wh_ ns:film.film.written_by ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P1 M2 .\nM3 P2 ?x0 .\nM3 P3 ?x0 .\nM4 P2 ?x0 .\nM4 P3 ?x0\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 39
  },
  {
    "questionIdx": 88634,
    "questionWithBrackets": "Was a Canadian screenwriter's parent influenced by [William S. Burroughs] and [Wyndham Lewis] and influenced by [Marcel Duchamp]",
    "questionPatternModEntities": "Was a Canadian screenwriter 's parent influenced by M0 and M1 and influenced by M2",
    "questionTemplate": "Was a [ADJECTIVE_SIMPLE] [NP_SIMPLE] 's [ROLE_SIMPLE] [VP_SIMPLE] by [entity] and [entity] and [VP_SIMPLE] by [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:influence.influence_node.influenced_by ns:m.0157fx .\n?x0 ns:influence.influence_node.influenced_by ns:m.08433 .\n?x0 ns:influence.influence_node.influenced_by ns:m.0bqch .\n?x0 ns:people.person.children|ns:fictional_universe.fictional_character.children|ns:organization.organization.child/ns:organization.organization_relationship.child ?x1 .\n?x1 a ns:film.writer .\n?x1 ns:people.person.nationality ns:m.0d060g\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P1 ?x1 .\n?x1 P2 M4 .\n?x1 a M3\n}",
    "expectedResponse": "No",
    "recursionDepth": 39
  },
  {
    "questionIdx": 1543,
    "questionWithBrackets": "Did [Antoine Bourseiller] marry an actor that married, was influenced by, and influenced [Samuel Cook]",
    "questionPatternModEntities": "Did M2 marry a actor that married , was influenced by , and influenced M1",
    "questionTemplate": "Did [entity] [VP_SIMPLE] a [NP_SIMPLE] that [VP_SIMPLE] , was [VP_SIMPLE] by , and [VP_SIMPLE] [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 a ns:film.actor .\n?x0 ns:influence.influence_node.influenced ns:m.0ggbl8x .\n?x0 ns:influence.influence_node.influenced_by ns:m.0ggbl8x .\n?x0 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ns:m.0ggbl8x .\nFILTER ( ?x0 != ns:m.0ggbl8x ) .\nFILTER ( ns:m.0jwhqh != ?x0 ) .\nns:m.0jwhqh ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M1 .\n?x0 P1 M1 .\n?x0 P2 M1 .\n?x0 a M0 .\nFILTER ( ?x0 != M1 ) .\nFILTER ( M2 != ?x0 ) .\nM2 P2 ?x0\n}",
    "expectedResponse": "No",
    "recursionDepth": 39
  },
  {
    "questionIdx": 58667,
    "questionWithBrackets": "Was [Holiday Makers] written by, executive produced by, and directed by a film's art director and editor",
    "questionPatternModEntities": "Was M1 written by , executive produced by , and directed by a film 's art director and editor",
    "questionTemplate": "Was [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by a [NP_SIMPLE] 's [ROLE_SIMPLE] and [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.editor.film ?x1 .\n?x0 ns:film.film_art_director.films_art_directed ?x1 .\n?x1 a ns:film.film .\nns:m.0cp1jxk ns:film.film.directed_by ?x0 .\nns:m.0cp1jxk ns:film.film.executive_produced_by ?x0 .\nns:m.0cp1jxk ns:film.film.written_by ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x1 a M0 .\nM1 P2 ?x0 .\nM1 P3 ?x0 .\nM1 P4 ?x0\n}",
    "expectedResponse": "No",
    "recursionDepth": 39
  },
  {
    "questionIdx": 8264,
    "questionWithBrackets": "Did [George Eliot] influence [J. K. Rowling], marry [Agnes Jervis]'s male spouse, and marry [John Walter Cross]",
    "questionPatternModEntities": "Did M2 influence M3 , marry M1 's male spouse , and marry M4",
    "questionTemplate": "Did [entity] [VP_SIMPLE] [entity] , [VP_SIMPLE] [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] , and [VP_SIMPLE] [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:people.person.gender ns:m.05zppz .\n?x0 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ns:m.0pxld58 .\nFILTER ( ?x0 != ns:m.0pxld58 ) .\nFILTER ( ns:m.03d_m != ?x0 ) .\nFILTER ( ns:m.03d_m != ns:m.0pxlfm8 ) .\nns:m.03d_m ns:influence.influence_node.influenced ns:m.042xh .\nns:m.03d_m ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ?x0 .\nns:m.03d_m ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ns:m.0pxlfm8\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M1 ) .\nFILTER ( M2 != ?x0 ) .\nFILTER ( M2 != M4 ) .\nM2 P1 ?x0 .\nM2 P1 M4 .\nM2 P2 M3\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 40
  },
  {
    "questionIdx": 57776,
    "questionWithBrackets": "Was [Halloween II] executive produced by a production company's Italian founder and edited by [Robert Q. Lovett] and [Janice Hampton]",
    "questionPatternModEntities": "Was M2 executive produced by a production company 's Italian founder and edited by M3 and M4",
    "questionTemplate": "Was [entity] [VP_SIMPLE] by a [NP_SIMPLE] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] and [VP_SIMPLE] by [entity] and [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:organization.organization_founder.organizations_founded ?x1 .\n?x0 ns:people.person.nationality ns:m.03rjj .\n?x1 a ns:film.production_company .\nns:m.06d5sb ns:film.film.edited_by ns:m.08627qj .\nns:m.06d5sb ns:film.film.edited_by ns:m.0jwvqz .\nns:m.06d5sb ns:film.film.executive_produced_by ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x0 P1 M0 .\n?x1 a M1 .\nM2 P2 ?x0 .\nM2 P3 M3 .\nM2 P3 M4\n}",
    "expectedResponse": "No",
    "recursionDepth": 40
  },
  {
    "questionIdx": 69562,
    "questionWithBrackets": "Was [Nobody Knows] edited, written, produced, and directed by a Japanese cinematographer of [Going Home (Part 6-11)]",
    "questionPatternModEntities": "Was M2 edited , written , produced , and directed by a Japanese cinematographer of M1",
    "questionTemplate": "Was [entity] [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.cinematographer.film ns:m.0rh7lw1 .\n?x0 ns:people.person.nationality ns:m.03_3d .\nns:m.047h7f ns:film.film.directed_by ?x0 .\nns:m.047h7f ns:film.film.edited_by ?x0 .\nns:m.047h7f ns:film.film.produced_by|ns:film.film.production_companies ?x0 .\nns:m.047h7f ns:film.film.written_by ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nM2 P2 ?x0 .\nM2 P3 ?x0 .\nM2 P4 ?x0 .\nM2 P5 ?x0\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 40
  },
  {
    "questionIdx": 22573,
    "questionWithBrackets": "Did [The Other Guys] star [Mother and Child]'s art director and star, star [Roy James Wilson], and star [James Mazzola]",
    "questionPatternModEntities": "Did M1 star M0 's art director and star , star M2 , and star M3",
    "questionTemplate": "Did [entity] [VP_SIMPLE] [entity] 's [ROLE_SIMPLE] and [ROLE_SIMPLE] , [VP_SIMPLE] [entity] , and [VP_SIMPLE] [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.actor.film/ns:film.performance.film ns:m.064mg8g .\n?x0 ns:film.film_art_director.films_art_directed ns:m.064mg8g .\nns:m.087vnr5 ns:film.film.starring/ns:film.performance.actor ?x0 .\nns:m.087vnr5 ns:film.film.starring/ns:film.performance.actor ns:m.0tlngq4 .\nns:m.087vnr5 ns:film.film.starring/ns:film.performance.actor ns:m.0vxgss3\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M0 .\nM1 P2 ?x0 .\nM1 P2 M2 .\nM1 P2 M3\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 40
  },
  {
    "questionIdx": 180963,
    "questionWithBrackets": "What was produced by [A Hole in My Heart]'s Swedish costume designer, produced by [Fasad AB], and distributed by [Nordisk Film]",
    "questionPatternModEntities": "What was produced by M2 's Swedish costume designer , produced by M1 , and distributed by M0",
    "questionTemplate": "What was [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.film.distributors/ns:film.film_film_distributor_relationship.distributor ns:m.03_81s .\n?x0 ns:film.film.produced_by|ns:film.film.production_companies ?x1 .\n?x0 ns:film.film.produced_by|ns:film.film.production_companies ns:m.07mp1m0 .\n?x1 ns:film.film_costumer_designer.costume_design_for_film ns:m.03xkr6 .\n?x1 ns:people.person.nationality ns:m.0d0vqn\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 ?x1 .\n?x0 P1 M1 .\n?x1 P2 M2 .\n?x1 P3 M3\n}",
    "expectedResponse": "The Ape",
    "recursionDepth": 40
  },
  {
    "questionIdx": 150200,
    "questionWithBrackets": "What did a male art director and producer of [Villa Antropoff] produce, write, and edit",
    "questionPatternModEntities": "What did a male art director and producer of M0 produce , write , and edit",
    "questionTemplate": "What did a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] and [ROLE_SIMPLE] of [entity] [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.film.edited_by ?x1 .\n?x0 ns:film.film.produced_by|ns:film.film.production_companies ?x1 .\n?x0 ns:film.film.written_by ?x1 .\n?x1 ns:film.film_art_director.films_art_directed ns:m.0k3dcff .\n?x1 ns:film.producer.film|ns:film.production_company.films ns:m.0k3dcff .\n?x1 ns:people.person.gender ns:m.05zppz\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x1 P3 M0 .\n?x1 P4 M1 .\n?x1 P5 M0\n}",
    "expectedResponse": "Wings and Oars; Villa Antropoff",
    "recursionDepth": 40
  },
  {
    "questionIdx": 7143,
    "questionWithBrackets": "Did [Evelyn Waugh] influence a sibling of [Hideous Kinky]'s producer's employee and marry [Pamela Stephenson] and [Iris Pressagh]",
    "questionPatternModEntities": "Did M1 influence a sibling of M0 's producer 's employee and marry M2 and M3",
    "questionTemplate": "Did [entity] [VP_SIMPLE] a [ROLE_SIMPLE] of [entity] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE] and [VP_SIMPLE] [entity] and [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:people.person.sibling_s/ns:people.sibling_relationship.sibling|ns:fictional_universe.fictional_character.siblings/ns:fictional_universe.sibling_relationship_of_fictional_characters.siblings ?x1 .\n?x1 ns:people.person.employment_history/ns:business.employment_tenure.company ?x2 .\n?x2 ns:film.producer.film|ns:film.production_company.films ns:m.0dtp46 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ns:m.0h0v2 != ns:m.01jj7_ ) .\nFILTER ( ns:m.0h0v2 != ns:m.0j4c3jz ) .\nns:m.0h0v2 ns:influence.influence_node.influenced ?x0 .\nns:m.0h0v2 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ns:m.01jj7_ .\nns:m.0h0v2 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ns:m.0j4c3jz\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x1 P1 ?x2 .\n?x2 P2 M0 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( M1 != M2 ) .\nFILTER ( M1 != M3 ) .\nM1 P3 ?x0 .\nM1 P4 M2 .\nM1 P4 M3\n}",
    "expectedResponse": "No",
    "recursionDepth": 40
  },
  {
    "questionIdx": 218980,
    "questionWithBrackets": "Who influenced [The Silence of the Sea]'s editor, producer, and executive producer and was influenced by [Henry David Thoreau] and [Thomas Carlyle]",
    "questionPatternModEntities": "Who influenced M3 's editor , producer , and executive producer and was influenced by M1 and M2",
    "questionTemplate": "Who [VP_SIMPLE] [entity] 's [ROLE_SIMPLE] , [ROLE_SIMPLE] , and [ROLE_SIMPLE] and was [VP_SIMPLE] by [entity] and [entity]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:people.person .\n?x0 ns:influence.influence_node.influenced ?x1 .\n?x0 ns:influence.influence_node.influenced_by ns:m.0bwx3 .\n?x0 ns:influence.influence_node.influenced_by ns:m.0ymtb .\n?x1 ns:film.editor.film ns:m.0bgspt .\n?x1 ns:film.producer.films_executive_produced ns:m.0bgspt .\n?x1 ns:film.producer.film|ns:film.production_company.films ns:m.0bgspt\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 M1 .\n?x0 P1 M2 .\n?x0 a M0 .\n?x1 P2 M3 .\n?x1 P3 M3 .\n?x1 P4 M3\n}",
    "expectedResponse": "Herman Melville",
    "recursionDepth": 40
  },
  {
    "questionIdx": 164130,
    "questionWithBrackets": "What screenwriter founded [Disney Channel], was employed by [Laugh-O-Gram Studio], and was employed by a production company",
    "questionPatternModEntities": "What screenwriter founded M2 , was employed by M1 , and was employed by a production company",
    "questionTemplate": "What [NP_SIMPLE] [VP_SIMPLE] [entity] , was [VP_SIMPLE] by [entity] , and was [VP_SIMPLE] by a [NP_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:film.writer .\n?x0 ns:organization.organization_founder.organizations_founded ns:m.0kc9f .\n?x0 ns:people.person.employment_history/ns:business.employment_tenure.company ?x1 .\n?x0 ns:people.person.employment_history/ns:business.employment_tenure.company ns:m.03tksd .\n?x1 a ns:film.production_company\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P0 M1 .\n?x0 P1 M2 .\n?x0 a M0 .\n?x1 a M3\n}",
    "expectedResponse": "Walt Disney",
    "recursionDepth": 40
  },
  {
    "questionIdx": 72275,
    "questionWithBrackets": "Was [Promises Written in Water] edited by, produced by, and executive produced by [Across the Wide Missouri]'s art director, director, and costume designer",
    "questionPatternModEntities": "Was M1 edited by , produced by , and executive produced by M0 's art director , director , and costume designer",
    "questionTemplate": "Was [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] , [ROLE_SIMPLE] , and [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.director.film ns:m.08qzwt .\n?x0 ns:film.film_art_director.films_art_directed ns:m.08qzwt .\n?x0 ns:film.film_costumer_designer.costume_design_for_film ns:m.08qzwt .\nns:m.0bh9qf1 ns:film.film.edited_by ?x0 .\nns:m.0bh9qf1 ns:film.film.executive_produced_by ?x0 .\nns:m.0bh9qf1 ns:film.film.produced_by|ns:film.film.production_companies ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M0 .\n?x0 P2 M0 .\nM1 P3 ?x0 .\nM1 P4 ?x0 .\nM1 P5 ?x0\n}",
    "expectedResponse": "No",
    "recursionDepth": 40
  },
  {
    "questionIdx": 170047,
    "questionWithBrackets": "What was directed by [Kaspar Heidelbach] and executive produced by a male person's German spouse",
    "questionPatternModEntities": "What was directed by M0 and executive produced by a male person 's German spouse",
    "questionTemplate": "What was [VP_SIMPLE] by [entity] and [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [NP_SIMPLE] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.film.directed_by ns:m.09k8f6q .\n?x0 ns:film.film.executive_produced_by ?x1 .\n?x1 ns:people.person.nationality ns:m.0345h .\n?x1 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ?x2 .\n?x2 a ns:people.person .\n?x2 ns:people.person.gender ns:m.05zppz .\nFILTER ( ?x1 != ?x2 )\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 M0 .\n?x1 P2 M1 .\n?x1 P3 ?x2 .\n?x2 P4 M3 .\n?x2 a M2 .\nFILTER ( ?x1 != ?x2 )\n}",
    "expectedResponse": "Der Untergang der Pamir",
    "recursionDepth": 40
  },
  {
    "questionIdx": 159169,
    "questionWithBrackets": "What film was produced, edited, directed, and written by [El Bruto]'s Mexican writer",
    "questionPatternModEntities": "What film was produced , edited , directed , and written by M1 's Mexican writer",
    "questionTemplate": "What [NP_SIMPLE] was [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:film.film .\n?x0 ns:film.film.directed_by ?x1 .\n?x0 ns:film.film.edited_by ?x1 .\n?x0 ns:film.film.produced_by|ns:film.film.production_companies ?x1 .\n?x0 ns:film.film.written_by ?x1 .\n?x1 ns:film.writer.film ns:m.0415g7c .\n?x1 ns:people.person.nationality ns:m.0b90_r\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x0 P3 ?x1 .\n?x0 a M0 .\n?x1 P4 M1 .\n?x1 P5 M2\n}",
    "expectedResponse": "An Andalusian Dog",
    "recursionDepth": 40
  },
  {
    "questionIdx": 55771,
    "questionWithBrackets": "Was [Fucking Different S\u00e3o Paulo]'s sequel directed by [Leave Blank]'s editor, written by [J\u00fcrgen Br\u00fcning], and edited by [Emilie Jouvet]",
    "questionPatternModEntities": "Was M2 's sequel directed by M3 's editor , written by M0 , and edited by M1",
    "questionTemplate": "Was [entity] 's [ROLE_SIMPLE] [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.film.directed_by ?x1 .\n?x0 ns:film.film.edited_by ns:m.0c0nk8k .\n?x0 ns:film.film.prequel ns:m.0bdt344 .\n?x0 ns:film.film.written_by ns:m.04lqwwr .\n?x1 ns:film.editor.film ns:m.0hp7vtv\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P2 M2 .\n?x0 P3 ?x1 .\n?x1 P4 M3\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 40
  },
  {
    "questionIdx": 159410,
    "questionWithBrackets": "What film whose editor executive produced [Crash My Funeral] did a cinematographer edit and [Andrea Ament] write",
    "questionPatternModEntities": "What film whose editor executive produced M3 did a cinematographer edit and M1 write",
    "questionTemplate": "What [NP_SIMPLE] whose [ROLE_SIMPLE] [VP_SIMPLE] [entity] did a [NP_SIMPLE] [VP_SIMPLE] and [entity] [VP_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:film.film .\n?x0 ns:film.film.edited_by ?x1 .\n?x0 ns:film.film.edited_by ?x2 .\n?x0 ns:film.film.written_by ns:m.0zzv1mt .\n?x1 a ns:film.cinematographer .\n?x2 ns:film.producer.films_executive_produced ns:m.0zp0j9w\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M1 .\n?x0 P1 ?x1 .\n?x0 P1 ?x2 .\n?x0 a M0 .\n?x1 a M2 .\n?x2 P2 M3\n}",
    "expectedResponse": "It's Not About the Shawerma",
    "recursionDepth": 40
  },
  {
    "questionIdx": 158860,
    "questionWithBrackets": "What film was edited by and executive produced by a Dutch film director that produced [War, Love, God & Madness]",
    "questionPatternModEntities": "What film was edited by and executive produced by a Dutch film director that produced M3",
    "questionTemplate": "What [NP_SIMPLE] was [VP_SIMPLE] by and [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [NP_SIMPLE] that [VP_SIMPLE] [entity]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:film.film .\n?x0 ns:film.film.edited_by ?x1 .\n?x0 ns:film.film.executive_produced_by ?x1 .\n?x1 a ns:film.director .\n?x1 ns:film.producer.film|ns:film.production_company.films ns:m.04nlbgc .\n?x1 ns:people.person.nationality ns:m.059j2\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 a M0 .\n?x1 P2 M2 .\n?x1 P3 M3 .\n?x1 a M1\n}",
    "expectedResponse": "Nesma's Birds",
    "recursionDepth": 40
  },
  {
    "questionIdx": 145099,
    "questionWithBrackets": "What did [Mark Frost] executive produce, [DumbLand]'s writer and star write, and [Mary Sweeney] edit",
    "questionPatternModEntities": "What did M0 executive produce , M2 's writer and star write , and M1 edit",
    "questionTemplate": "What did [entity] [VP_SIMPLE] , [entity] 's [ROLE_SIMPLE] and [ROLE_SIMPLE] [VP_SIMPLE] , and [entity] [VP_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.film.edited_by ns:m.02ptqpx .\n?x0 ns:film.film.executive_produced_by ns:m.06lv4f .\n?x0 ns:film.film.written_by ?x1 .\n?x1 ns:film.actor.film/ns:film.performance.film ns:m.0dkg6f .\n?x1 ns:film.writer.film ns:m.0dkg6f\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 ?x1 .\n?x0 P2 M1 .\n?x1 P3 M2 .\n?x1 P4 M2\n}",
    "expectedResponse": "Twin Peaks: Fire Walk With Me",
    "recursionDepth": 40
  },
  {
    "questionIdx": 111177,
    "questionWithBrackets": "Were [1968 with Tom Brokaw] and [An Unsullied Shield] directed by and written by a person's female actor's spouse",
    "questionPatternModEntities": "Were M2 and M3 directed by and written by a person 's female actor 's spouse",
    "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by and [VP_SIMPLE] by a [NP_SIMPLE] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] 's [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ?x1 .\n?x1 ns:film.actor.film/ns:film.performance.character ?x2 .\n?x1 ns:people.person.gender ns:m.02zsn .\n?x2 a ns:people.person .\nFILTER ( ?x0 != ?x1 ) .\nns:m.0_8z1by ns:film.film.directed_by ?x0 .\nns:m.0_8z1by ns:film.film.written_by ?x0 .\nns:m.0r5w388 ns:film.film.directed_by ?x0 .\nns:m.0r5w388 ns:film.film.written_by ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x1 P1 ?x2 .\n?x1 P2 M0 .\n?x2 a M1 .\nFILTER ( ?x0 != ?x1 ) .\nM2 P3 ?x0 .\nM2 P4 ?x0 .\nM3 P3 ?x0 .\nM3 P4 ?x0\n}",
    "expectedResponse": "No",
    "recursionDepth": 40
  },
  {
    "questionIdx": 173697,
    "questionWithBrackets": "What was edited by [Patrick Amos], edited by [Jean-Pierre Gorin], and edited by [Artist on Fire]'s French cinematographer",
    "questionPatternModEntities": "What was edited by M0 , edited by M1 , and edited by M3 's French cinematographer",
    "questionTemplate": "What was [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.film.edited_by ?x1 .\n?x0 ns:film.film.edited_by ns:m.04gs3_ .\n?x0 ns:film.film.edited_by ns:m.0h0ng0y .\n?x1 ns:film.cinematographer.film ns:m.0byp8kw .\n?x1 ns:people.person.nationality ns:m.0f8l9c\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x1 P1 M2 .\n?x1 P2 M3\n}",
    "expectedResponse": "Routine Pleasures",
    "recursionDepth": 40
  },
  {
    "questionIdx": 76539,
    "questionWithBrackets": "Was [Sin City: A Dame to Kill For] distributed by [Dimension Films] and [Columbia Pictures] and produced by [Spy Kids]'s sequel's editor and producer",
    "questionPatternModEntities": "Was M1 distributed by M2 and M3 and produced by M0 's sequel 's editor and producer",
    "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] and [entity] and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE] and [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.editor.film ?x1 .\n?x0 ns:film.producer.film|ns:film.production_company.films ?x1 .\n?x1 ns:film.film.prequel ns:m.02rrfzf .\nns:m.08q3xy ns:film.film.distributors/ns:film.film_film_distributor_relationship.distributor ns:m.017s11 .\nns:m.08q3xy ns:film.film.distributors/ns:film.film_film_distributor_relationship.distributor ns:m.032j_n .\nns:m.08q3xy ns:film.film.produced_by|ns:film.film.production_companies ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x1 P2 M0 .\nM1 P3 M2 .\nM1 P3 M3 .\nM1 P4 ?x0\n}",
    "expectedResponse": "No",
    "recursionDepth": 40
  },
  {
    "questionIdx": 10629,
    "questionWithBrackets": "Did [J. D. Salinger] influence [Fantastic Mr. Fox]'s writer and producer, influence [Jonathan Safran Foer], and marry [Sylvia Welter]",
    "questionPatternModEntities": "Did M1 influence M0 's writer and producer , influence M2 , and marry M3",
    "questionTemplate": "Did [entity] [VP_SIMPLE] [entity] 's [ROLE_SIMPLE] and [ROLE_SIMPLE] , [VP_SIMPLE] [entity] , and [VP_SIMPLE] [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.producer.film|ns:film.production_company.films ns:m.08s6mr .\n?x0 ns:film.writer.film ns:m.08s6mr .\nFILTER ( ns:m.041_y != ns:m.0n7vfrh ) .\nns:m.041_y ns:influence.influence_node.influenced ?x0 .\nns:m.041_y ns:influence.influence_node.influenced ns:m.03qg2l .\nns:m.041_y ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ns:m.0n7vfrh\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M0 .\nFILTER ( M1 != M3 ) .\nM1 P2 ?x0 .\nM1 P2 M2 .\nM1 P3 M3\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 40
  },
  {
    "questionIdx": 84374,
    "questionWithBrackets": "Was [Turtles Can Fly] produced by a producer and art director of [A Time for Drunken Horses] and produced by a cinematographer of [111 Girls]",
    "questionPatternModEntities": "Was M2 produced by a producer and art director of M1 and produced by a cinematographer of M0",
    "questionTemplate": "Was [entity] [VP_SIMPLE] by a [ROLE_SIMPLE] and [ROLE_SIMPLE] of [entity] and [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.cinematographer.film ns:m.0qprmpb .\n?x1 ns:film.film_art_director.films_art_directed ns:m.097p2g .\n?x1 ns:film.producer.film|ns:film.production_company.films ns:m.097p2g .\nns:m.054gjs ns:film.film.produced_by|ns:film.film.production_companies ?x0 .\nns:m.054gjs ns:film.film.produced_by|ns:film.film.production_companies ?x1\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x1 P1 M1 .\n?x1 P2 M1 .\nM2 P3 ?x0 .\nM2 P3 ?x1\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 40
  },
  {
    "questionIdx": 233511,
    "questionWithBrackets": "Who was an Italian male film editor that [Zombie Massacre] was written by and executive produced by",
    "questionPatternModEntities": "Who was a Italian male film editor that M2 was written by and executive produced by",
    "questionTemplate": "Who was a [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [NP_SIMPLE] that [entity] was [VP_SIMPLE] by and [VP_SIMPLE] by",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:film.editor .\n?x0 a ns:people.person .\n?x0 ns:film.producer.films_executive_produced ns:m.06ztc8_ .\n?x0 ns:film.writer.film ns:m.06ztc8_ .\n?x0 ns:people.person.gender ns:m.05zppz .\n?x0 ns:people.person.nationality ns:m.03rjj\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M2 .\n?x0 P1 M2 .\n?x0 P2 M3 .\n?x0 P3 M4 .\n?x0 a M0 .\n?x0 a M1\n}",
    "expectedResponse": "Marco Ristori",
    "recursionDepth": 40
  },
  {
    "questionIdx": 48691,
    "questionWithBrackets": "Was [Brutal Relax] edited by [Adri\u00e1n Cardona] and [Rafa Dengr\u00e1] and edited by [Fist Of Jesus]'s editor, costume designer, and writer",
    "questionPatternModEntities": "Was M1 edited by M2 and M3 and edited by M0 's editor , costume designer , and writer",
    "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] and [entity] and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] , [ROLE_SIMPLE] , and [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.editor.film ns:m.010s0v9j .\n?x0 ns:film.film_costumer_designer.costume_design_for_film ns:m.010s0v9j .\n?x0 ns:film.writer.film ns:m.010s0v9j .\nns:m.0hpfc9c ns:film.film.edited_by ?x0 .\nns:m.0hpfc9c ns:film.film.edited_by ns:m.0hpfc9j .\nns:m.0hpfc9c ns:film.film.edited_by ns:m.0hpfc9m\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M0 .\n?x0 P2 M0 .\nM1 P3 ?x0 .\nM1 P3 M2 .\nM1 P3 M3\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 40
  },
  {
    "questionIdx": 20297,
    "questionWithBrackets": "Did [S\u00f8ren Kierkegaard] influence [Karl Barth], influence [Walter Benjamin], and influence [Pi]'s male director",
    "questionPatternModEntities": "Did M2 influence M3 , influence M4 , and influence M1 's male director",
    "questionTemplate": "Did [entity] [VP_SIMPLE] [entity] , [VP_SIMPLE] [entity] , and [VP_SIMPLE] [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.director.film ns:m.02bz36 .\n?x0 ns:people.person.gender ns:m.05zppz .\nns:m.06qvh ns:influence.influence_node.influenced ?x0 .\nns:m.06qvh ns:influence.influence_node.influenced ns:m.01h2_6 .\nns:m.06qvh ns:influence.influence_node.influenced ns:m.01hcbh\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nM2 P2 ?x0 .\nM2 P2 M3 .\nM2 P2 M4\n}",
    "expectedResponse": "No",
    "recursionDepth": 40
  },
  {
    "questionIdx": 155552,
    "questionWithBrackets": "What film director that [Congregation Lady #3]'s actor's spouse was influenced by and influenced did [Jack Benny] influence",
    "questionPatternModEntities": "What film director that M2 's actor 's spouse was influenced by and influenced did M1 influence",
    "questionTemplate": "What [NP_SIMPLE] that [entity] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE] was [VP_SIMPLE] by and [VP_SIMPLE] did [entity] [VP_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:film.director .\n?x0 ns:influence.influence_node.influenced ?x1 .\n?x0 ns:influence.influence_node.influenced_by ?x1 .\n?x0 ns:influence.influence_node.influenced_by ns:m.0l5yl .\n?x1 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ?x2 .\n?x2 ns:film.actor.film/ns:film.performance.character ns:m.0vb3c95 .\nFILTER ( ?x1 != ?x2 )\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P1 M1 .\n?x0 a M0 .\n?x1 P2 ?x2 .\n?x2 P3 M2 .\nFILTER ( ?x1 != ?x2 )\n}",
    "expectedResponse": "Richard Pryor",
    "recursionDepth": 40
  },
  {
    "questionIdx": 173354,
    "questionWithBrackets": "What was edited by [Gareth O'Neil], written by an actor, and written by a sibling of [Jennifer Milmore]",
    "questionPatternModEntities": "What was edited by M0 , written by a actor , and written by a sibling of M2",
    "questionTemplate": "What was [VP_SIMPLE] by [entity] , [VP_SIMPLE] by a [NP_SIMPLE] , and [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.film.edited_by ns:m.0q2vpy0 .\n?x0 ns:film.film.written_by ?x1 .\n?x0 ns:film.film.written_by ?x2 .\n?x1 a ns:film.actor .\n?x2 ns:people.person.sibling_s/ns:people.sibling_relationship.sibling|ns:fictional_universe.fictional_character.siblings/ns:fictional_universe.sibling_relationship_of_fictional_characters.siblings ns:m.03h32r7 .\nFILTER ( ?x2 != ns:m.03h32r7 )\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P0 ?x2 .\n?x0 P1 M0 .\n?x1 a M1 .\n?x2 P2 M2 .\nFILTER ( ?x2 != M2 )\n}",
    "expectedResponse": "A Wake in Providence",
    "recursionDepth": 40
  },
  {
    "questionIdx": 50275,
    "questionWithBrackets": "Was [Chris Rock] influenced by [Deborah McGuire]'s spouse, influenced by [Tough Mice]'s actor, and influenced by [Bill Hicks]",
    "questionPatternModEntities": "Was M2 influenced by M1 's spouse , influenced by M0 's actor , and influenced by M3",
    "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] , [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] , and [VP_SIMPLE] by [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.actor.film/ns:film.performance.character ns:m.0h5pfzz .\n?x1 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ns:m.080dcv6 .\nFILTER ( ?x1 != ns:m.080dcv6 ) .\nns:m.016_mj ns:influence.influence_node.influenced_by ?x0 .\nns:m.016_mj ns:influence.influence_node.influenced_by ?x1 .\nns:m.016_mj ns:influence.influence_node.influenced_by ns:m.01wp_jm\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x1 P1 M1 .\nFILTER ( ?x1 != M1 ) .\nM2 P2 ?x0 .\nM2 P2 ?x1 .\nM2 P2 M3\n}",
    "expectedResponse": "No",
    "recursionDepth": 40
  },
  {
    "questionIdx": 162531,
    "questionWithBrackets": "What person whose country of nationality employed [Henry Arthur Blake] and employed [John Bowring] played [Cock Head] and [Sword Hua]",
    "questionPatternModEntities": "What person whose country of nationality employed M3 and employed M4 played M1 and M2",
    "questionTemplate": "What [NP_SIMPLE] whose [ROLE_SIMPLE] [VP_SIMPLE] [entity] and [VP_SIMPLE] [entity] [VP_SIMPLE] [entity] and [entity]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:people.person .\n?x0 ns:film.actor.film/ns:film.performance.character ns:m.0h0zhkz .\n?x0 ns:film.actor.film/ns:film.performance.character ns:m.0h0zhmq .\n?x0 ns:people.person.nationality ?x1 .\n?x1 ns:business.employer.employees/ns:business.employment_tenure.person ns:m.01w5mx .\n?x1 ns:business.employer.employees/ns:business.employment_tenure.person ns:m.02pfy9\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 M1 .\n?x0 P1 M2 .\n?x0 a M0 .\n?x1 P2 M3 .\n?x1 P2 M4\n}",
    "expectedResponse": "Nicholas Tse",
    "recursionDepth": 40
  },
  {
    "questionIdx": 80496,
    "questionWithBrackets": "Was [The Exploding Girl] executive produced by a film editor, written by [David Self], and executive produced by a film director",
    "questionPatternModEntities": "Was M2 executive produced by a film editor , written by M3 , and executive produced by a film director",
    "questionTemplate": "Was [entity] [VP_SIMPLE] by a [NP_SIMPLE] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by a [NP_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 a ns:film.editor .\n?x1 a ns:film.director .\nns:m.05sqd88 ns:film.film.executive_produced_by ?x0 .\nns:m.05sqd88 ns:film.film.executive_produced_by ?x1 .\nns:m.05sqd88 ns:film.film.written_by ns:m.02rqh8k\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 a M0 .\n?x1 a M1 .\nM2 P0 ?x0 .\nM2 P0 ?x1 .\nM2 P1 M3\n}",
    "expectedResponse": "No",
    "recursionDepth": 40
  },
  {
    "questionIdx": 181976,
    "questionWithBrackets": "What was produced by a French editor of [The Crazy Ray] and distributed by a company's founder",
    "questionPatternModEntities": "What was produced by a French editor of M2 and distributed by a company 's founder",
    "questionTemplate": "What was [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] and [VP_SIMPLE] by a [NP_SIMPLE] 's [ROLE_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.film.distributors/ns:film.film_film_distributor_relationship.distributor ?x1 .\n?x0 ns:film.film.produced_by|ns:film.film.production_companies ?x2 .\n?x1 ns:organization.organization_founder.organizations_founded ?x3 .\n?x2 ns:film.editor.film ns:m.0g3d77 .\n?x2 ns:people.person.nationality ns:m.0f8l9c .\n?x3 a ns:business.employer\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x2 .\n?x1 P2 ?x3 .\n?x2 P3 M1 .\n?x2 P4 M2 .\n?x3 a M0\n}",
    "expectedResponse": "I Married a Witch",
    "recursionDepth": 40
  },
  {
    "questionIdx": 157271,
    "questionWithBrackets": "What film executive produced by a costume designer and edited by [Lawrence Fajardo] did a costume designer produce",
    "questionPatternModEntities": "What film executive produced by a costume designer and edited by M1 did a costume designer produce",
    "questionTemplate": "What [NP_SIMPLE] [VP_SIMPLE] by a [NP_SIMPLE] and [VP_SIMPLE] by [entity] did a [NP_SIMPLE] [VP_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:film.film .\n?x0 ns:film.film.edited_by ns:m.09rn56m .\n?x0 ns:film.film.executive_produced_by ?x1 .\n?x0 ns:film.film.produced_by|ns:film.film.production_companies ?x2 .\n?x1 a ns:film.film_costumer_designer .\n?x2 a ns:film.film_costumer_designer\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x2 .\n?x0 P2 M1 .\n?x0 a M0 .\n?x1 a M2 .\n?x2 a M2\n}",
    "expectedResponse": "Amok",
    "recursionDepth": 40
  },
  {
    "questionIdx": 224947,
    "questionWithBrackets": "Who was a British actor that [The Special Relationship] was written by and [Killers] was executive produced by",
    "questionPatternModEntities": "Who was a British actor that M2 was written by and M3 was executive produced by",
    "questionTemplate": "Who was a [ADJECTIVE_SIMPLE] [NP_SIMPLE] that [entity] was [VP_SIMPLE] by and [entity] was [VP_SIMPLE] by",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:film.actor .\n?x0 a ns:people.person .\n?x0 ns:film.producer.films_executive_produced ns:m.05m_jsg .\n?x0 ns:film.writer.film ns:m.06wc7k7 .\n?x0 ns:people.person.nationality ns:m.07ssc\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M2 .\n?x0 P1 M3 .\n?x0 P2 M4 .\n?x0 a M0 .\n?x0 a M1\n}",
    "expectedResponse": "Peter Morgan",
    "recursionDepth": 40
  },
  {
    "questionIdx": 52630,
    "questionWithBrackets": "Was [Dimension Films] a production company whose employee and founder executive produced [The Road to El Dorado] and executive produced [Scary Movie 5]",
    "questionPatternModEntities": "Was M2 a production company whose employee and founder executive produced M0 and executive produced M1",
    "questionTemplate": "Was [entity] a [NP_SIMPLE] whose [ROLE_SIMPLE] and [ROLE_SIMPLE] [VP_SIMPLE] [entity] and [VP_SIMPLE] [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.producer.films_executive_produced ns:m.03r6q1 .\n?x0 ns:film.producer.films_executive_produced ns:m.0kg2b5h .\nns:m.032j_n a ns:film.production_company .\nns:m.032j_n ns:business.employer.employees/ns:business.employment_tenure.person ?x0 .\nns:m.032j_n ns:organization.organization.founders ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\nM2 P1 ?x0 .\nM2 P2 ?x0 .\nM2 a M3\n}",
    "expectedResponse": "No",
    "recursionDepth": 40
  },
  {
    "questionIdx": 123021,
    "questionWithBrackets": "Were [Querida Bamako], [Almost a Husband], [Cupid's Victory], [Paging a Wife], and [Al's Troubles] executive produced by [Abe Stern] and directed by a person",
    "questionPatternModEntities": "Were M1 , M3 , M4 , M5 , and M6 executive produced by M2 and directed by a person",
    "questionTemplate": "Were [entity] , [entity] , [entity] , [entity] , and [entity] [VP_SIMPLE] by [entity] and [VP_SIMPLE] by a [NP_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 a ns:people.person .\nns:m.0b6ygdq ns:film.film.directed_by ?x0 .\nns:m.0b6ygdq ns:film.film.executive_produced_by ns:m.02z337g .\nns:m.0b6ygf_ ns:film.film.directed_by ?x0 .\nns:m.0b6ygf_ ns:film.film.executive_produced_by ns:m.02z337g .\nns:m.0b6yghz ns:film.film.directed_by ?x0 .\nns:m.0b6yghz ns:film.film.executive_produced_by ns:m.02z337g .\nns:m.0b6ygkz ns:film.film.directed_by ?x0 .\nns:m.0b6ygkz ns:film.film.executive_produced_by ns:m.02z337g .\nns:m.0j65bq4 ns:film.film.directed_by ?x0 .\nns:m.0j65bq4 ns:film.film.executive_produced_by ns:m.02z337g\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 a M0 .\nM1 P0 M2 .\nM1 P1 ?x0 .\nM3 P0 M2 .\nM3 P1 ?x0 .\nM4 P0 M2 .\nM4 P1 ?x0 .\nM5 P0 M2 .\nM5 P1 ?x0 .\nM6 P0 M2 .\nM6 P1 ?x0\n}",
    "expectedResponse": "No",
    "recursionDepth": 40
  },
  {
    "questionIdx": 229759,
    "questionWithBrackets": "Who was a female Chinese cinematographer that [Grave Goods] was executive produced by and produced by",
    "questionPatternModEntities": "Who was a female Chinese cinematographer that M2 was executive produced by and produced by",
    "questionTemplate": "Who was a [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [NP_SIMPLE] that [entity] was [VP_SIMPLE] by and [VP_SIMPLE] by",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:film.cinematographer .\n?x0 a ns:people.person .\n?x0 ns:film.producer.films_executive_produced ns:m.0w1tctl .\n?x0 ns:film.producer.film|ns:film.production_company.films ns:m.0w1tctl .\n?x0 ns:people.person.gender ns:m.02zsn .\n?x0 ns:people.person.nationality ns:m.0d05w3\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M2 .\n?x0 P1 M3 .\n?x0 P2 M2 .\n?x0 P3 M4 .\n?x0 a M0 .\n?x0 a M1\n}",
    "expectedResponse": "Leslie Tai",
    "recursionDepth": 40
  },
  {
    "questionIdx": 235548,
    "questionWithBrackets": "Who was influenced by [Black Book]'s Dutch writer, influenced by [David Cronenberg], and influenced by [David Lynch]",
    "questionPatternModEntities": "Who was influenced by M3 's Dutch writer , influenced by M1 , and influenced by M2",
    "questionTemplate": "Who was [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:people.person .\n?x0 ns:influence.influence_node.influenced_by ?x1 .\n?x0 ns:influence.influence_node.influenced_by ns:m.026dx .\n?x0 ns:influence.influence_node.influenced_by ns:m.026fd .\n?x1 ns:film.writer.film ns:m.0b40y4 .\n?x1 ns:people.person.nationality ns:m.059j2\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 a M0 .\n?x1 P1 M3 .\n?x1 P2 M4\n}",
    "expectedResponse": "Takashi Miike",
    "recursionDepth": 40
  },
  {
    "questionIdx": 119702,
    "questionWithBrackets": "Were [Knocked Up] and [The 40-Year-Old Virgin] produced, directed, and written by an actor that influenced [Rip Taylor]",
    "questionPatternModEntities": "Were M2 and M3 produced , directed , and written by a actor that influenced M1",
    "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by a [NP_SIMPLE] that [VP_SIMPLE] [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 a ns:film.actor .\n?x0 ns:influence.influence_node.influenced ns:m.06tgh0 .\nns:m.06fpsx ns:film.film.directed_by ?x0 .\nns:m.06fpsx ns:film.film.produced_by|ns:film.film.production_companies ?x0 .\nns:m.06fpsx ns:film.film.written_by ?x0 .\nns:m.0bvn25 ns:film.film.directed_by ?x0 .\nns:m.0bvn25 ns:film.film.produced_by|ns:film.film.production_companies ?x0 .\nns:m.0bvn25 ns:film.film.written_by ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M1 .\n?x0 a M0 .\nM2 P1 ?x0 .\nM2 P2 ?x0 .\nM2 P3 ?x0 .\nM3 P1 ?x0 .\nM3 P2 ?x0 .\nM3 P3 ?x0\n}",
    "expectedResponse": "No",
    "recursionDepth": 40
  },
  {
    "questionIdx": 155337,
    "questionWithBrackets": "What film director did an art director marry, [Anthony Burgess] and [H. P. Lovecraft] influence, and [Christiane Kubrick] marry",
    "questionPatternModEntities": "What film director did a art director marry , M1 and M2 influence , and M3 marry",
    "questionTemplate": "What [NP_SIMPLE] did a [NP_SIMPLE] [VP_SIMPLE] , [entity] and [entity] [VP_SIMPLE] , and [entity] [VP_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:film.director .\n?x0 ns:influence.influence_node.influenced_by ns:m.03j0d .\n?x0 ns:influence.influence_node.influenced_by ns:m.0d4jl .\n?x0 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ?x1 .\n?x0 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ns:m.09385j .\n?x1 a ns:film.film_art_director .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x0 != ns:m.09385j )\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P1 ?x1 .\n?x0 P1 M3 .\n?x0 a M0 .\n?x1 a M4 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x0 != M3 )\n}",
    "expectedResponse": "Stanley Kubrick",
    "recursionDepth": 40
  },
  {
    "questionIdx": 158988,
    "questionWithBrackets": "What film was executive produced by [Marcy Garriott] and [Mark Duplass] and executive produced by [The Capsule]'s costume designer and director",
    "questionPatternModEntities": "What film was executive produced by M1 and M2 and executive produced by M3 's costume designer and director",
    "questionTemplate": "What [NP_SIMPLE] was [VP_SIMPLE] by [entity] and [entity] and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] and [ROLE_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:film.film .\n?x0 ns:film.film.executive_produced_by ?x1 .\n?x0 ns:film.film.executive_produced_by ns:m.06zmyx8 .\n?x0 ns:film.film.executive_produced_by ns:m.0gblspx .\n?x1 ns:film.director.film ns:m.0pxbqrn .\n?x1 ns:film.film_costumer_designer.costume_design_for_film ns:m.0pxbqrn\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 a M0 .\n?x1 P1 M3 .\n?x1 P2 M3\n}",
    "expectedResponse": "Lovers of Hate",
    "recursionDepth": 40
  },
  {
    "questionIdx": 69076,
    "questionWithBrackets": "Was [New York, I Love You] directed by [Jos\u00e9 Padilha], directed by [Salaam Baalak Trust]'s female founder, and produced by [\u00c1lex de la Iglesia]",
    "questionPatternModEntities": "Was M2 directed by M4 , directed by M0 's female founder , and produced by M3",
    "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] , and [VP_SIMPLE] by [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:organization.organization_founder.organizations_founded ns:m.04lf_5q .\n?x0 ns:people.person.gender ns:m.02zsn .\nns:m.02z3r8t ns:film.film.directed_by ?x0 .\nns:m.02z3r8t ns:film.film.directed_by ns:m.0jvz9g .\nns:m.02z3r8t ns:film.film.produced_by|ns:film.film.production_companies ns:m.097kqh\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nM2 P2 M3 .\nM2 P3 ?x0 .\nM2 P3 M4\n}",
    "expectedResponse": "No",
    "recursionDepth": 41
  },
  {
    "questionIdx": 19640,
    "questionWithBrackets": "Did [Stanford University] employ a female person and employ a founder and employee of [Infinera]",
    "questionPatternModEntities": "Did M3 employ a female person and employ a founder and employee of M2",
    "questionTemplate": "Did [entity] [VP_SIMPLE] a [ADJECTIVE_SIMPLE] [NP_SIMPLE] and [VP_SIMPLE] a [ROLE_SIMPLE] and [ROLE_SIMPLE] of [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 a ns:people.person .\n?x0 ns:people.person.gender ns:m.02zsn .\n?x1 ns:organization.organization_founder.organizations_founded ns:m.02h5bdm .\n?x1 ns:people.person.employment_history/ns:business.employment_tenure.company ns:m.02h5bdm .\nns:m.06pwq ns:business.employer.employees/ns:business.employment_tenure.person ?x0 .\nns:m.06pwq ns:business.employer.employees/ns:business.employment_tenure.person ?x1\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M1 .\n?x0 a M0 .\n?x1 P1 M2 .\n?x1 P2 M2 .\nM3 P3 ?x0 .\nM3 P3 ?x1\n}",
    "expectedResponse": "No",
    "recursionDepth": 41
  },
  {
    "questionIdx": 1732,
    "questionWithBrackets": "Did [Arnon Milchan] produce [Halloween H20: 20 Years Later], executive produce [The Butler], and executive produce [Scary Movie 4]'s prequel's prequel",
    "questionPatternModEntities": "Did M1 produce M3 , executive produce M2 , and executive produce M0 's prequel 's prequel",
    "questionTemplate": "Did [entity] [VP_SIMPLE] [entity] , [VP_SIMPLE] [entity] , and [VP_SIMPLE] [entity] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.film.sequel ?x1 .\n?x1 ns:film.film.sequel ns:m.07h9gp .\nns:m.04pqqb ns:film.producer.films_executive_produced ?x0 .\nns:m.04pqqb ns:film.producer.films_executive_produced ns:m.0lkvn87 .\nns:m.04pqqb ns:film.producer.film|ns:film.production_company.films ns:m.03tb_8\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x1 P0 M0 .\nM1 P1 ?x0 .\nM1 P1 M2 .\nM1 P2 M3\n}",
    "expectedResponse": "No",
    "recursionDepth": 41
  },
  {
    "questionIdx": 72785,
    "questionWithBrackets": "Was [Promises Written in Water] written by, produced by, and executive produced by a cinematographer and costume designer of a film",
    "questionPatternModEntities": "Was M1 written by , produced by , and executive produced by a cinematographer and costume designer of a film",
    "questionTemplate": "Was [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by a [ROLE_SIMPLE] and [ROLE_SIMPLE] of a [NP_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.cinematographer.film ?x1 .\n?x0 ns:film.film_costumer_designer.costume_design_for_film ?x1 .\n?x1 a ns:film.film .\nns:m.0bh9qf1 ns:film.film.executive_produced_by ?x0 .\nns:m.0bh9qf1 ns:film.film.produced_by|ns:film.film.production_companies ?x0 .\nns:m.0bh9qf1 ns:film.film.written_by ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x1 a M0 .\nM1 P2 ?x0 .\nM1 P3 ?x0 .\nM1 P4 ?x0\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 41
  },
  {
    "questionIdx": 37285,
    "questionWithBrackets": "Did a male person's parent found a film producer and found [Works Progress Administration]'s child",
    "questionPatternModEntities": "Did a male person 's parent found a film producer and found M0 's child",
    "questionTemplate": "Did a [ADJECTIVE_SIMPLE] [NP_SIMPLE] 's [ROLE_SIMPLE] [VP_SIMPLE] a [NP_SIMPLE] and [VP_SIMPLE] [entity] 's [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:organization.organization_founder.organizations_founded ?x1 .\n?x0 ns:organization.organization_founder.organizations_founded ?x2 .\n?x0 ns:people.person.children|ns:fictional_universe.fictional_character.children|ns:organization.organization.child/ns:organization.organization_relationship.child ?x3 .\n?x1 ns:people.person.parents|ns:fictional_universe.fictional_character.parents|ns:organization.organization.parent/ns:organization.organization_relationship.parent ns:m.0fh58 .\n?x2 a ns:film.producer .\n?x3 a ns:people.person .\n?x3 ns:people.person.gender ns:m.05zppz\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x0 P0 ?x2 .\n?x0 P1 ?x3 .\n?x1 P2 M0 .\n?x2 a M1 .\n?x3 P3 M3 .\n?x3 a M2\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 41
  },
  {
    "questionIdx": 177374,
    "questionWithBrackets": "What was executive produced by [The Capsule]'s costume designer, director, and writer and executive produced by [Jay Duplass] and [Marcy Garriott]",
    "questionPatternModEntities": "What was executive produced by M2 's costume designer , director , and writer and executive produced by M0 and M1",
    "questionTemplate": "What was [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] , [ROLE_SIMPLE] , and [ROLE_SIMPLE] and [VP_SIMPLE] by [entity] and [entity]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.film.executive_produced_by ?x1 .\n?x0 ns:film.film.executive_produced_by ns:m.047q6x6 .\n?x0 ns:film.film.executive_produced_by ns:m.0gblspx .\n?x1 ns:film.director.film ns:m.0pxbqrn .\n?x1 ns:film.film_costumer_designer.costume_design_for_film ns:m.0pxbqrn .\n?x1 ns:film.writer.film ns:m.0pxbqrn\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x1 P1 M2 .\n?x1 P2 M2 .\n?x1 P3 M2\n}",
    "expectedResponse": "Lovers of Hate",
    "recursionDepth": 41
  },
  {
    "questionIdx": 187752,
    "questionWithBrackets": "Which British female film director was employed by [MTV] and was employed by a production company",
    "questionPatternModEntities": "Which British female film director was employed by M1 and was employed by a production company",
    "questionTemplate": "Which [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [NP_SIMPLE] was [VP_SIMPLE] by [entity] and was [VP_SIMPLE] by a [NP_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:film.director .\n?x0 ns:people.person.employment_history/ns:business.employment_tenure.company ?x1 .\n?x0 ns:people.person.employment_history/ns:business.employment_tenure.company ns:m.04rqd .\n?x0 ns:people.person.gender ns:m.02zsn .\n?x0 ns:people.person.nationality ns:m.07ssc .\n?x1 a ns:film.production_company\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P0 M1 .\n?x0 P1 M2 .\n?x0 P2 M3 .\n?x0 a M0 .\n?x1 a M4\n}",
    "expectedResponse": "Alexandra Billington",
    "recursionDepth": 41
  },
  {
    "questionIdx": 55716,
    "questionWithBrackets": "Was [From Vegas to Macau] executive produced by [Mr. & Mrs. Gambler]'s writer, executive producer, and producer and produced by [Liu Jian De]'s parent",
    "questionPatternModEntities": "Was M2 executive produced by M0 's writer , executive producer , and producer and produced by M1 's parent",
    "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] , [ROLE_SIMPLE] , and [ROLE_SIMPLE] and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.producer.films_executive_produced ns:m.0jsn8d3 .\n?x0 ns:film.producer.film|ns:film.production_company.films ns:m.0jsn8d3 .\n?x0 ns:film.writer.film ns:m.0jsn8d3 .\n?x1 ns:people.person.children|ns:fictional_universe.fictional_character.children|ns:organization.organization.child/ns:organization.organization_relationship.child ns:m.0ws8m5v .\nns:m.0wfrfnv ns:film.film.executive_produced_by ?x0 .\nns:m.0wfrfnv ns:film.film.produced_by|ns:film.film.production_companies ?x1\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M0 .\n?x0 P2 M0 .\n?x1 P3 M1 .\nM2 P4 ?x0 .\nM2 P5 ?x1\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 41
  },
  {
    "questionIdx": 184965,
    "questionWithBrackets": "What was written by [Tommy Karlsson], directed by [Robert P. Olsson], and executive produced by [Kammaren]'s Swedish cinematographer",
    "questionPatternModEntities": "What was written by M0 , directed by M1 , and executive produced by M3 's Swedish cinematographer",
    "questionTemplate": "What was [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.film.directed_by ns:m.026476g .\n?x0 ns:film.film.executive_produced_by ?x1 .\n?x0 ns:film.film.written_by ns:m.027d53w .\n?x1 ns:film.cinematographer.film ns:m.0kv9g1 .\n?x1 ns:people.person.nationality ns:m.0d0vqn\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 M0 .\n?x0 P2 M1 .\n?x1 P3 M2 .\n?x1 P4 M3\n}",
    "expectedResponse": "Fyren",
    "recursionDepth": 41
  },
  {
    "questionIdx": 179275,
    "questionWithBrackets": "What was executive produced, written, produced, and edited by a screenwriter that [Gita Pullapilly] married",
    "questionPatternModEntities": "What was executive produced , written , produced , and edited by a screenwriter that M1 married",
    "questionTemplate": "What was [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by a [NP_SIMPLE] that [entity] [VP_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.film.edited_by ?x1 .\n?x0 ns:film.film.executive_produced_by ?x1 .\n?x0 ns:film.film.produced_by|ns:film.film.production_companies ?x1 .\n?x0 ns:film.film.written_by ?x1 .\n?x1 a ns:film.writer .\n?x1 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ns:m.0bbyq2b .\nFILTER ( ?x1 != ns:m.0bbyq2b )\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x0 P3 ?x1 .\n?x1 P4 M1 .\n?x1 a M0 .\nFILTER ( ?x1 != M1 )\n}",
    "expectedResponse": "Beneath the Harvest Sky",
    "recursionDepth": 41
  },
  {
    "questionIdx": 150902,
    "questionWithBrackets": "What did a spouse of an executive producer of [Harve Karbo] and [Romance & Cigarettes] edit and [Mira Nair] and [Jiang Wen] direct",
    "questionPatternModEntities": "What did a spouse of a executive producer of M2 and M3 edit and M0 and M1 direct",
    "questionTemplate": "What did a [ROLE_SIMPLE] of a [ROLE_SIMPLE] of [entity] and [entity] [VP_SIMPLE] and [entity] and [entity] [VP_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.film.directed_by ns:m.042rnl .\n?x0 ns:film.film.directed_by ns:m.0kvsb .\n?x0 ns:film.film.edited_by ?x1 .\n?x1 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ?x2 .\n?x2 ns:film.producer.films_executive_produced ns:m.06xqr4 .\n?x2 ns:film.producer.films_executive_produced ns:m.0hzbf4k .\nFILTER ( ?x1 != ?x2 )\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 M0 .\n?x0 P1 M1 .\n?x1 P2 ?x2 .\n?x2 P3 M2 .\n?x2 P3 M3 .\nFILTER ( ?x1 != ?x2 )\n}",
    "expectedResponse": "New York, I Love You",
    "recursionDepth": 41
  },
  {
    "questionIdx": 145131,
    "questionWithBrackets": "What did [Martina Gusman]'s spouse edit, direct, produce, write, and executive produce",
    "questionPatternModEntities": "What did M0 's spouse edit , direct , produce , write , and executive produce",
    "questionTemplate": "What did [entity] 's [ROLE_SIMPLE] [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.film.directed_by ?x1 .\n?x0 ns:film.film.edited_by ?x1 .\n?x0 ns:film.film.executive_produced_by ?x1 .\n?x0 ns:film.film.produced_by|ns:film.film.production_companies ?x1 .\n?x0 ns:film.film.written_by ?x1 .\n?x1 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ns:m.04lz8hk .\nFILTER ( ?x1 != ns:m.04lz8hk )\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x0 P3 ?x1 .\n?x0 P4 ?x1 .\n?x1 P5 M0 .\nFILTER ( ?x1 != M0 )\n}",
    "expectedResponse": "White Elephant",
    "recursionDepth": 41
  },
  {
    "questionIdx": 56137,
    "questionWithBrackets": "Was [Garret Schuelke] influenced by [Carl Sandburg], influenced by [Contempt]'s German star, and influenced by [Vincent van Gogh]",
    "questionPatternModEntities": "Was M2 influenced by M3 , influenced by M1 's German star , and influenced by M4",
    "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] , and [VP_SIMPLE] by [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.actor.film/ns:film.performance.film ns:m.046t_0 .\n?x0 ns:people.person.nationality ns:m.0345h .\nns:m.066b7gk ns:influence.influence_node.influenced_by ?x0 .\nns:m.066b7gk ns:influence.influence_node.influenced_by ns:m.07_m2 .\nns:m.066b7gk ns:influence.influence_node.influenced_by ns:m.0b281\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nM2 P2 ?x0 .\nM2 P2 M3 .\nM2 P2 M4\n}",
    "expectedResponse": "No",
    "recursionDepth": 41
  },
  {
    "questionIdx": 85265,
    "questionWithBrackets": "Was [Viagem na Chuva] produced, executive produced, edited, written, and directed by an art director of [Goat Story 2]",
    "questionPatternModEntities": "Was M1 produced , executive produced , edited , written , and directed by a art director of M0",
    "questionTemplate": "Was [entity] [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.film_art_director.films_art_directed ns:m.0nbtt_1 .\nns:m.011p1tds ns:film.film.directed_by ?x0 .\nns:m.011p1tds ns:film.film.edited_by ?x0 .\nns:m.011p1tds ns:film.film.executive_produced_by ?x0 .\nns:m.011p1tds ns:film.film.produced_by|ns:film.film.production_companies ?x0 .\nns:m.011p1tds ns:film.film.written_by ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 ?x0 .\nM1 P2 ?x0 .\nM1 P3 ?x0 .\nM1 P4 ?x0 .\nM1 P5 ?x0\n}",
    "expectedResponse": "No",
    "recursionDepth": 41
  },
  {
    "questionIdx": 67578,
    "questionWithBrackets": "Was [Miffy the Movie] written by [Fine Trossel], edited by a Dutch film director, and executive produced by [Moez Kamoun]",
    "questionPatternModEntities": "Was M2 written by M4 , edited by a Dutch film director , and executive produced by M3",
    "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] , [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [NP_SIMPLE] , and [VP_SIMPLE] by [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 a ns:film.director .\n?x0 ns:people.person.nationality ns:m.059j2 .\nns:m.01012b1c ns:film.film.edited_by ?x0 .\nns:m.01012b1c ns:film.film.executive_produced_by ns:m.0fpq3jz .\nns:m.01012b1c ns:film.film.written_by ns:m.010q1jjj\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M1 .\n?x0 a M0 .\nM2 P1 M3 .\nM2 P2 M4 .\nM2 P3 ?x0\n}",
    "expectedResponse": "No",
    "recursionDepth": 41
  },
  {
    "questionIdx": 163964,
    "questionWithBrackets": "What production company whose employee married [Nicole Kidman] was founded by [Mary Pickford] and founded by [Sydney Chaplin]'s sibling",
    "questionPatternModEntities": "What production company whose employee married M3 was founded by M1 and founded by M2 's sibling",
    "questionTemplate": "What [NP_SIMPLE] whose [ROLE_SIMPLE] [VP_SIMPLE] [entity] was [VP_SIMPLE] by [entity] and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:film.production_company .\n?x0 ns:business.employer.employees/ns:business.employment_tenure.person ?x1 .\n?x0 ns:organization.organization.founders ?x2 .\n?x0 ns:organization.organization.founders ns:m.04rfq .\n?x1 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ns:m.05dbf .\n?x2 ns:people.person.sibling_s/ns:people.sibling_relationship.sibling|ns:fictional_universe.fictional_character.siblings/ns:fictional_universe.sibling_relationship_of_fictional_characters.siblings ns:m.04_lr8 .\nFILTER ( ?x1 != ns:m.05dbf ) .\nFILTER ( ?x2 != ns:m.04_lr8 )\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P0 M1 .\n?x0 P1 ?x2 .\n?x0 a M0 .\n?x1 P2 M2 .\n?x2 P3 M3 .\nFILTER ( ?x1 != M2 ) .\nFILTER ( ?x2 != M3 )\n}",
    "expectedResponse": "United Artists",
    "recursionDepth": 41
  },
  {
    "questionIdx": 214576,
    "questionWithBrackets": "Who did [Mark Ames] influence and a film's director, star, cinematographer, and writer influence",
    "questionPatternModEntities": "Who did M1 influence and a film 's director , star , cinematographer , and writer influence",
    "questionTemplate": "Who did [entity] [VP_SIMPLE] and a [NP_SIMPLE] 's [ROLE_SIMPLE] , [ROLE_SIMPLE] , [ROLE_SIMPLE] , and [ROLE_SIMPLE] [VP_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:people.person .\n?x0 ns:influence.influence_node.influenced_by ?x1 .\n?x0 ns:influence.influence_node.influenced_by ns:m.06r7jt .\n?x1 ns:film.actor.film/ns:film.performance.film ?x2 .\n?x1 ns:film.cinematographer.film ?x2 .\n?x1 ns:film.director.film ?x2 .\n?x1 ns:film.writer.film ?x2 .\n?x2 a ns:film.film\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P0 M1 .\n?x0 a M0 .\n?x1 P1 ?x2 .\n?x1 P2 ?x2 .\n?x1 P3 ?x2 .\n?x1 P4 ?x2 .\n?x2 a M2\n}",
    "expectedResponse": "Garret Schuelke",
    "recursionDepth": 41
  },
  {
    "questionIdx": 118586,
    "questionWithBrackets": "Were [It's Not About the Shawerma] and [A Man, A Woman, And A Killer] produced by a cinematographer that [Lockout] was written by and was executive produced by",
    "questionPatternModEntities": "Were M2 and M3 produced by a cinematographer that M1 was written by and was executive produced by",
    "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by a [NP_SIMPLE] that [entity] was [VP_SIMPLE] by and was [VP_SIMPLE] by",
    "sparql": "SELECT count(*) WHERE {\n?x0 a ns:film.cinematographer .\n?x0 ns:film.producer.films_executive_produced ns:m.0gjd79j .\n?x0 ns:film.writer.film ns:m.0gjd79j .\nns:m.0gkscq5 ns:film.film.produced_by|ns:film.film.production_companies ?x0 .\nns:m.0zztylq ns:film.film.produced_by|ns:film.film.production_companies ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M1 .\n?x0 P1 M1 .\n?x0 a M0 .\nM2 P2 ?x0 .\nM3 P2 ?x0\n}",
    "expectedResponse": "No",
    "recursionDepth": 41
  },
  {
    "questionIdx": 117974,
    "questionWithBrackets": "Were [Hollywood Movie], [The Letter], [Bride of the Regiment], [When Were You Born], and [Dark Shadows] produced by a person's employer's child and parent",
    "questionPatternModEntities": "Were M1 , M2 , M3 , M4 , and M5 produced by a person 's employer 's child and parent",
    "questionTemplate": "Were [entity] , [entity] , [entity] , [entity] , and [entity] [VP_SIMPLE] by a [NP_SIMPLE] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE] and [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:people.person.children|ns:fictional_universe.fictional_character.children|ns:organization.organization.child/ns:organization.organization_relationship.child ?x1 .\n?x0 ns:people.person.parents|ns:fictional_universe.fictional_character.parents|ns:organization.organization.parent/ns:organization.organization_relationship.parent ?x1 .\n?x1 ns:business.employer.employees/ns:business.employment_tenure.person ?x2 .\n?x2 a ns:people.person .\nns:m.0173wl ns:film.film.produced_by|ns:film.film.production_companies ?x0 .\nns:m.02pzpbr ns:film.film.produced_by|ns:film.film.production_companies ?x0 .\nns:m.09g7vfw ns:film.film.produced_by|ns:film.film.production_companies ?x0 .\nns:m.0cmd1vx ns:film.film.produced_by|ns:film.film.production_companies ?x0 .\nns:m.0rh7r4v ns:film.film.produced_by|ns:film.film.production_companies ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x1 P2 ?x2 .\n?x2 a M0 .\nM1 P3 ?x0 .\nM2 P3 ?x0 .\nM3 P3 ?x0 .\nM4 P3 ?x0 .\nM5 P3 ?x0\n}",
    "expectedResponse": "No",
    "recursionDepth": 41
  },
  {
    "questionIdx": 87310,
    "questionWithBrackets": "Was [Xiaoxi Xu] a Chinese person that [Grave Goods] was written by, executive produced by, and edited by",
    "questionPatternModEntities": "Was M0 a Chinese person that M2 was written by , executive produced by , and edited by",
    "questionTemplate": "Was [entity] a [ADJECTIVE_SIMPLE] [NP_SIMPLE] that [entity] was [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by",
    "sparql": "SELECT count(*) WHERE {\nns:m.011c3pm0 a ns:people.person .\nns:m.011c3pm0 ns:film.editor.film ns:m.0w1tctl .\nns:m.011c3pm0 ns:film.producer.films_executive_produced ns:m.0w1tctl .\nns:m.011c3pm0 ns:film.writer.film ns:m.0w1tctl .\nns:m.011c3pm0 ns:people.person.nationality ns:m.0d05w3\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M2 .\nM0 P1 M2 .\nM0 P2 M2 .\nM0 P3 M3 .\nM0 a M1\n}",
    "expectedResponse": "No",
    "recursionDepth": 41
  },
  {
    "questionIdx": 121216,
    "questionWithBrackets": "Were [Mimic 2] and [Roadflower] executive produced by [Harvey Weinstein] and produced by [Marvel Television]'s parent's employee and founder",
    "questionPatternModEntities": "Were M1 and M3 executive produced by M2 and produced by M0 's parent 's employee and founder",
    "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by [entity] and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE] and [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:organization.organization_founder.organizations_founded ?x1 .\n?x0 ns:people.person.employment_history/ns:business.employment_tenure.company ?x1 .\n?x1 ns:people.person.children|ns:fictional_universe.fictional_character.children|ns:organization.organization.child/ns:organization.organization_relationship.child ns:m.0jwx5s8 .\nns:m.026gfr1 ns:film.film.executive_produced_by ns:m.05hj_k .\nns:m.026gfr1 ns:film.film.produced_by|ns:film.film.production_companies ?x0 .\nns:m.03gvy8n ns:film.film.executive_produced_by ns:m.05hj_k .\nns:m.03gvy8n ns:film.film.produced_by|ns:film.film.production_companies ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x1 P2 M0 .\nM1 P3 M2 .\nM1 P4 ?x0 .\nM3 P3 M2 .\nM3 P4 ?x0\n}",
    "expectedResponse": "No",
    "recursionDepth": 41
  },
  {
    "questionIdx": 142850,
    "questionWithBrackets": "What did [Daniele Mazzocca] executive produce, [Jacopo Quadri] edit, and [The Smile of the Leader]'s editor and writer executive produce",
    "questionPatternModEntities": "What did M0 executive produce , M1 edit , and M2 's editor and writer executive produce",
    "questionTemplate": "What did [entity] [VP_SIMPLE] , [entity] [VP_SIMPLE] , and [entity] 's [ROLE_SIMPLE] and [ROLE_SIMPLE] [VP_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.film.edited_by ns:m.0k7ch2 .\n?x0 ns:film.film.executive_produced_by ?x1 .\n?x0 ns:film.film.executive_produced_by ns:m.0ndbwd8 .\n?x1 ns:film.editor.film ns:m.010sk2q2 .\n?x1 ns:film.writer.film ns:m.010sk2q2\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x1 P2 M2 .\n?x1 P3 M2\n}",
    "expectedResponse": "BirdWatchers",
    "recursionDepth": 41
  },
  {
    "questionIdx": 48686,
    "questionWithBrackets": "Was [Brutal Relax] directed by a film producer and directed by a costume designer, art director, and editor of [Fist Of Jesus]",
    "questionPatternModEntities": "Was M2 directed by a film producer and directed by a costume designer , art director , and editor of M0",
    "questionTemplate": "Was [entity] [VP_SIMPLE] by a [NP_SIMPLE] and [VP_SIMPLE] by a [ROLE_SIMPLE] , [ROLE_SIMPLE] , and [ROLE_SIMPLE] of [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.editor.film ns:m.010s0v9j .\n?x0 ns:film.film_art_director.films_art_directed ns:m.010s0v9j .\n?x0 ns:film.film_costumer_designer.costume_design_for_film ns:m.010s0v9j .\n?x1 a ns:film.producer .\nns:m.0hpfc9c ns:film.film.directed_by ?x0 .\nns:m.0hpfc9c ns:film.film.directed_by ?x1\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M0 .\n?x0 P2 M0 .\n?x1 a M1 .\nM2 P3 ?x0 .\nM2 P3 ?x1\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 41
  },
  {
    "questionIdx": 175597,
    "questionWithBrackets": "What was edited, executive produced, and written by a Chinese art director that produced [Hot Summer Days]",
    "questionPatternModEntities": "What was edited , executive produced , and written by a Chinese art director that produced M2",
    "questionTemplate": "What was [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [NP_SIMPLE] that [VP_SIMPLE] [entity]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.film.edited_by ?x1 .\n?x0 ns:film.film.executive_produced_by ?x1 .\n?x0 ns:film.film.written_by ?x1 .\n?x1 a ns:film.film_art_director .\n?x1 ns:film.producer.film|ns:film.production_company.films ns:m.0c00qsf .\n?x1 ns:people.person.nationality ns:m.0d05w3\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x1 P3 M1 .\n?x1 P4 M2 .\n?x1 a M0\n}",
    "expectedResponse": "The Midnight After",
    "recursionDepth": 41
  },
  {
    "questionIdx": 104423,
    "questionWithBrackets": "Was a production company that [APriori Capital Partners] acquired, [Orion Pictures] was acquired by, and [TPG Capital] acquired [RadView Software]",
    "questionPatternModEntities": "Was a production company that M2 acquired , M4 was acquired by , and M3 acquired M0",
    "questionTemplate": "Was a [NP_SIMPLE] that [entity] [VP_SIMPLE] , [entity] was [VP_SIMPLE] by , and [entity] [VP_SIMPLE] [entity]",
    "sparql": "SELECT count(*) WHERE {\nns:m.03p311t a ns:film.production_company .\nns:m.03p311t ns:organization.organization.acquired_by/ns:business.acquisition.acquiring_company ns:m.02qb2mr .\nns:m.03p311t ns:organization.organization.acquired_by/ns:business.acquisition.acquiring_company ns:m.03yqpb .\nns:m.03p311t ns:organization.organization.companies_acquired/ns:business.acquisition.company_acquired ns:m.01f_mw\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M2 .\nM0 P0 M3 .\nM0 P1 M4 .\nM0 a M1\n}",
    "expectedResponse": "No",
    "recursionDepth": 41
  },
  {
    "questionIdx": 122900,
    "questionWithBrackets": "Were [Project A Part II] and [Police Story 2] directed by [CZ12]'s producer, art director, and executive producer and executive produced by [Ana Moravi]",
    "questionPatternModEntities": "Were M1 and M3 directed by M0 's producer , art director , and executive producer and executive produced by M2",
    "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] , [ROLE_SIMPLE] , and [ROLE_SIMPLE] and [VP_SIMPLE] by [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.film_art_director.films_art_directed ns:m.0hznzl6 .\n?x0 ns:film.producer.films_executive_produced ns:m.0hznzl6 .\n?x0 ns:film.producer.film|ns:film.production_company.films ns:m.0hznzl6 .\nns:m.081jcn ns:film.film.directed_by ?x0 .\nns:m.081jcn ns:film.film.executive_produced_by ns:m.011shf4h .\nns:m.0c41bm ns:film.film.directed_by ?x0 .\nns:m.0c41bm ns:film.film.executive_produced_by ns:m.011shf4h\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M0 .\n?x0 P2 M0 .\nM1 P3 M2 .\nM1 P4 ?x0 .\nM3 P3 M2 .\nM3 P4 ?x0\n}",
    "expectedResponse": "No",
    "recursionDepth": 41
  },
  {
    "questionIdx": 146966,
    "questionWithBrackets": "What did [The Brown Bunny]'s costume designer executive produce, produce, write, direct, and edit",
    "questionPatternModEntities": "What did M0 's costume designer executive produce , produce , write , direct , and edit",
    "questionTemplate": "What did [entity] 's [ROLE_SIMPLE] [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.film.directed_by ?x1 .\n?x0 ns:film.film.edited_by ?x1 .\n?x0 ns:film.film.executive_produced_by ?x1 .\n?x0 ns:film.film.produced_by|ns:film.film.production_companies ?x1 .\n?x0 ns:film.film.written_by ?x1 .\n?x1 ns:film.film_costumer_designer.costume_design_for_film ns:m.01n9cy\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x0 P3 ?x1 .\n?x0 P4 ?x1 .\n?x1 P5 M0\n}",
    "expectedResponse": "Promises Written in Water",
    "recursionDepth": 41
  },
  {
    "questionIdx": 174550,
    "questionWithBrackets": "What was edited by an actor, edited by [Adri\u00e1n Garc\u00eda Bogliano] and [Takanori Tsujimoto], and directed by an actor",
    "questionPatternModEntities": "What was edited by a actor , edited by M0 and M1 , and directed by a actor",
    "questionTemplate": "What was [VP_SIMPLE] by a [NP_SIMPLE] , [VP_SIMPLE] by [entity] and [entity] , and [VP_SIMPLE] by a [NP_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.film.directed_by ?x1 .\n?x0 ns:film.film.edited_by ?x2 .\n?x0 ns:film.film.edited_by ns:m.0dxfsh0 .\n?x0 ns:film.film.edited_by ns:m.0gblx2c .\n?x1 a ns:film.actor .\n?x2 a ns:film.actor\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P1 ?x2 .\n?x1 a M2 .\n?x2 a M2\n}",
    "expectedResponse": "The ABCs of Death",
    "recursionDepth": 41
  },
  {
    "questionIdx": 142270,
    "questionWithBrackets": "What did [Beauty and the Beast]'s art director write, a screenwriter executive produce, and a cinematographer write",
    "questionPatternModEntities": "What did M1 's art director write , a screenwriter executive produce , and a cinematographer write",
    "questionTemplate": "What did [entity] 's [ROLE_SIMPLE] [VP_SIMPLE] , a [NP_SIMPLE] [VP_SIMPLE] , and a [NP_SIMPLE] [VP_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.film.executive_produced_by ?x1 .\n?x0 ns:film.film.written_by ?x2 .\n?x0 ns:film.film.written_by ?x3 .\n?x1 a ns:film.writer .\n?x2 ns:film.film_art_director.films_art_directed ns:m.0_7w6 .\n?x3 a ns:film.cinematographer\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x2 .\n?x0 P1 ?x3 .\n?x1 a M0 .\n?x2 P2 M1 .\n?x3 a M2\n}",
    "expectedResponse": "The Brave Little Toaster",
    "recursionDepth": 41
  },
  {
    "questionIdx": 83505,
    "questionWithBrackets": "Was [Three... Extremes] directed by a director and editor of [O Porto] and edited by a film editor's sibling",
    "questionPatternModEntities": "Was M2 directed by a director and editor of M1 and edited by a film editor 's sibling",
    "questionTemplate": "Was [entity] [VP_SIMPLE] by a [ROLE_SIMPLE] and [ROLE_SIMPLE] of [entity] and [VP_SIMPLE] by a [NP_SIMPLE] 's [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:people.person.sibling_s/ns:people.sibling_relationship.sibling|ns:fictional_universe.fictional_character.siblings/ns:fictional_universe.sibling_relationship_of_fictional_characters.siblings ?x1 .\n?x1 a ns:film.editor .\n?x2 ns:film.director.film ns:m.0_skr6c .\n?x2 ns:film.editor.film ns:m.0_skr6c .\nFILTER ( ?x0 != ?x1 ) .\nns:m.06cm6h ns:film.film.directed_by ?x2 .\nns:m.06cm6h ns:film.film.edited_by ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x1 a M0 .\n?x2 P1 M1 .\n?x2 P2 M1 .\nFILTER ( ?x0 != ?x1 ) .\nM2 P3 ?x0 .\nM2 P4 ?x2\n}",
    "expectedResponse": "No",
    "recursionDepth": 41
  },
  {
    "questionIdx": 120805,
    "questionWithBrackets": "Were [Manuelle Labor] and [Tony Conrad, DreaMinimalist] written by, edited by, and produced by a female editor of [All My Relations]",
    "questionPatternModEntities": "Were M2 and M3 written by , edited by , and produced by a female editor of M1",
    "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.editor.film ns:m.09v769j .\n?x0 ns:people.person.gender ns:m.02zsn .\nns:m.04p5nfr ns:film.film.edited_by ?x0 .\nns:m.04p5nfr ns:film.film.produced_by|ns:film.film.production_companies ?x0 .\nns:m.04p5nfr ns:film.film.written_by ?x0 .\nns:m.04p5p0h ns:film.film.edited_by ?x0 .\nns:m.04p5p0h ns:film.film.produced_by|ns:film.film.production_companies ?x0 .\nns:m.04p5p0h ns:film.film.written_by ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nM2 P2 ?x0 .\nM2 P3 ?x0 .\nM2 P4 ?x0 .\nM3 P2 ?x0 .\nM3 P3 ?x0 .\nM3 P4 ?x0\n}",
    "expectedResponse": "No",
    "recursionDepth": 41
  },
  {
    "questionIdx": 7872,
    "questionWithBrackets": "Did [Friedrich Nietzsche] influence [Karl Marx] and [Ysabeau S. Wilce] and influence an actor's sibling's parent's parent",
    "questionPatternModEntities": "Did M1 influence M2 and M3 and influence a actor 's sibling 's parent 's parent",
    "questionTemplate": "Did [entity] [VP_SIMPLE] [entity] and [entity] and [VP_SIMPLE] a [NP_SIMPLE] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:people.person.children|ns:fictional_universe.fictional_character.children|ns:organization.organization.child/ns:organization.organization_relationship.child ?x1 .\n?x1 ns:people.person.children|ns:fictional_universe.fictional_character.children|ns:organization.organization.child/ns:organization.organization_relationship.child ?x2 .\n?x2 ns:people.person.sibling_s/ns:people.sibling_relationship.sibling|ns:fictional_universe.fictional_character.siblings/ns:fictional_universe.sibling_relationship_of_fictional_characters.siblings ?x3 .\n?x3 a ns:film.actor .\nFILTER ( ?x2 != ?x3 ) .\nns:m.02wh0 ns:influence.influence_node.influenced ?x0 .\nns:m.02wh0 ns:influence.influence_node.influenced ns:m.048cl .\nns:m.02wh0 ns:influence.influence_node.influenced ns:m.064klb6\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x1 P0 ?x2 .\n?x2 P1 ?x3 .\n?x3 a M0 .\nFILTER ( ?x2 != ?x3 ) .\nM1 P2 ?x0 .\nM1 P2 M2 .\nM1 P2 M3\n}",
    "expectedResponse": "No",
    "recursionDepth": 41
  },
  {
    "questionIdx": 7750,
    "questionWithBrackets": "Did [Franklin D. Roosevelt] found a company, found a company, and found [Federal Reserve System] and [Office of Strategic Services]",
    "questionPatternModEntities": "Did M1 found a company , found a company , and found M2 and M3",
    "questionTemplate": "Did [entity] [VP_SIMPLE] a [NP_SIMPLE] , [VP_SIMPLE] a [NP_SIMPLE] , and [VP_SIMPLE] [entity] and [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 a ns:business.employer .\n?x1 a ns:business.employer .\nns:m.02yy8 ns:organization.organization_founder.organizations_founded ?x0 .\nns:m.02yy8 ns:organization.organization_founder.organizations_founded ?x1 .\nns:m.02yy8 ns:organization.organization_founder.organizations_founded ns:m.02xmb .\nns:m.02yy8 ns:organization.organization_founder.organizations_founded ns:m.05p50\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 a M0 .\n?x1 a M0 .\nM1 P0 ?x0 .\nM1 P0 ?x1 .\nM1 P0 M2 .\nM1 P0 M3\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 41
  },
  {
    "questionIdx": 221900,
    "questionWithBrackets": "Who married, influenced, and was influenced by a screenwriter whose spouse married [Chantal Darget]",
    "questionPatternModEntities": "Who married , influenced , and was influenced by a screenwriter whose spouse married M2",
    "questionTemplate": "Who [VP_SIMPLE] , [VP_SIMPLE] , and was [VP_SIMPLE] by a [NP_SIMPLE] whose [ROLE_SIMPLE] [VP_SIMPLE] [entity]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:people.person .\n?x0 ns:influence.influence_node.influenced ?x1 .\n?x0 ns:influence.influence_node.influenced_by ?x1 .\n?x0 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ?x1 .\n?x1 a ns:film.writer .\n?x1 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ?x2 .\n?x2 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ns:m.0bvb0l1 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x1 != ?x2 ) .\nFILTER ( ?x2 != ns:m.0bvb0l1 )\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x0 a M0 .\n?x1 P2 ?x2 .\n?x1 a M1 .\n?x2 P2 M2 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ?x1 != ?x2 ) .\nFILTER ( ?x2 != M2 )\n}",
    "expectedResponse": "Jacques Demy",
    "recursionDepth": 41
  },
  {
    "questionIdx": 234557,
    "questionWithBrackets": "Who was employed by [Johns Hopkins University], founded [Trilateral Commission], and was employed by a cinematographer's employer",
    "questionPatternModEntities": "Who was employed by M1 , founded M2 , and was employed by a cinematographer 's employer",
    "questionTemplate": "Who was [VP_SIMPLE] by [entity] , [VP_SIMPLE] [entity] , and was [VP_SIMPLE] by a [NP_SIMPLE] 's [ROLE_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:people.person .\n?x0 ns:organization.organization_founder.organizations_founded ns:m.013bfb .\n?x0 ns:people.person.employment_history/ns:business.employment_tenure.company ?x1 .\n?x0 ns:people.person.employment_history/ns:business.employment_tenure.company ns:m.09kvv .\n?x1 ns:business.employer.employees/ns:business.employment_tenure.person ?x2 .\n?x2 a ns:film.cinematographer\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P0 M1 .\n?x0 P1 M2 .\n?x0 a M0 .\n?x1 P2 ?x2 .\n?x2 a M3\n}",
    "expectedResponse": "Zbigniew Brzezinski",
    "recursionDepth": 41
  },
  {
    "questionIdx": 118099,
    "questionWithBrackets": "Were [Housemaids] and [High-Rise] directed by [Learning Uncle Vincent]'s costume designer, cinematographer, and writer and executive produced by [Rachel Daisy Ellis]",
    "questionPatternModEntities": "Were M1 and M3 directed by M0 's costume designer , cinematographer , and writer and executive produced by M2",
    "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] , [ROLE_SIMPLE] , and [ROLE_SIMPLE] and [VP_SIMPLE] by [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.cinematographer.film ns:m.0gxnnvk .\n?x0 ns:film.film_costumer_designer.costume_design_for_film ns:m.0gxnnvk .\n?x0 ns:film.writer.film ns:m.0gxnnvk .\nns:m.0crzsx4 ns:film.film.directed_by ?x0 .\nns:m.0crzsx4 ns:film.film.executive_produced_by ns:m.0s9ktkq .\nns:m.0s9lg1j ns:film.film.directed_by ?x0 .\nns:m.0s9lg1j ns:film.film.executive_produced_by ns:m.0s9ktkq\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M0 .\n?x0 P2 M0 .\nM1 P3 M2 .\nM1 P4 ?x0 .\nM3 P3 M2 .\nM3 P4 ?x0\n}",
    "expectedResponse": "No",
    "recursionDepth": 41
  },
  {
    "questionIdx": 124875,
    "questionWithBrackets": "Were [Spirited Away] and [On Your Mark] edited by [Takeshi Seyama] and directed by a Japanese employee of a company",
    "questionPatternModEntities": "Were M2 and M4 edited by M3 and directed by a Japanese employee of a company",
    "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by [entity] and [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of a [NP_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:people.person.employment_history/ns:business.employment_tenure.company ?x1 .\n?x0 ns:people.person.nationality ns:m.03_3d .\n?x1 a ns:business.employer .\nns:m.02xm38 ns:film.film.directed_by ?x0 .\nns:m.02xm38 ns:film.film.edited_by ns:m.0282qln .\nns:m.0j6b5 ns:film.film.directed_by ?x0 .\nns:m.0j6b5 ns:film.film.edited_by ns:m.0282qln\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x0 P1 M0 .\n?x1 a M1 .\nM2 P2 M3 .\nM2 P3 ?x0 .\nM4 P2 M3 .\nM4 P3 ?x0\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 41
  },
  {
    "questionIdx": 89719,
    "questionWithBrackets": "Was a French screenwriter influenced by a parent of [Regina Johanna Bach] and influenced by [Giovanni Boccaccio] [Milan Kundera]",
    "questionPatternModEntities": "Was a French screenwriter influenced by a parent of M0 and influenced by M3 M1",
    "questionTemplate": "Was a [ADJECTIVE_SIMPLE] [NP_SIMPLE] [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity] and [VP_SIMPLE] by [entity] [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:people.person.children|ns:fictional_universe.fictional_character.children|ns:organization.organization.child/ns:organization.organization_relationship.child ns:m.09lmpg5 .\nns:m.0951s a ns:film.writer .\nns:m.0951s ns:influence.influence_node.influenced_by ?x0 .\nns:m.0951s ns:influence.influence_node.influenced_by ns:m.03d66 .\nns:m.0951s ns:people.person.nationality ns:m.0f8l9c\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 ?x0 .\nM1 P1 M3 .\nM1 P2 M4 .\nM1 a M2\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 41
  },
  {
    "questionIdx": 218546,
    "questionWithBrackets": "Who influenced [Ludwig Wittgenstein], was influenced by [Arthur Schopenhauer], and was influenced by a character's child",
    "questionPatternModEntities": "Who influenced M1 , was influenced by M2 , and was influenced by a character 's child",
    "questionTemplate": "Who [VP_SIMPLE] [entity] , was [VP_SIMPLE] by [entity] , and was [VP_SIMPLE] by a [NP_SIMPLE] 's [ROLE_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:people.person .\n?x0 ns:influence.influence_node.influenced ns:m.04hcw .\n?x0 ns:influence.influence_node.influenced_by ?x1 .\n?x0 ns:influence.influence_node.influenced_by ns:m.0j3v .\n?x1 ns:people.person.parents|ns:fictional_universe.fictional_character.parents|ns:organization.organization.parent/ns:organization.organization_relationship.parent ?x2 .\n?x2 a ns:fictional_universe.fictional_character\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M1 .\n?x0 P1 ?x1 .\n?x0 P1 M2 .\n?x0 a M0 .\n?x1 P2 ?x2 .\n?x2 a M3\n}",
    "expectedResponse": "Otto Weininger",
    "recursionDepth": 41
  },
  {
    "questionIdx": 129636,
    "questionWithBrackets": "Were [White Stork Is Coming] and [Animation vs. Animator 1] edited, produced, directed, written, and executive produced by a film editor",
    "questionPatternModEntities": "Were M1 and M2 edited , produced , directed , written , and executive produced by a film editor",
    "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by a [NP_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 a ns:film.editor .\nns:m.0108m1yx ns:film.film.directed_by ?x0 .\nns:m.0108m1yx ns:film.film.edited_by ?x0 .\nns:m.0108m1yx ns:film.film.executive_produced_by ?x0 .\nns:m.0108m1yx ns:film.film.produced_by|ns:film.film.production_companies ?x0 .\nns:m.0108m1yx ns:film.film.written_by ?x0 .\nns:m.0zxyz5j ns:film.film.directed_by ?x0 .\nns:m.0zxyz5j ns:film.film.edited_by ?x0 .\nns:m.0zxyz5j ns:film.film.executive_produced_by ?x0 .\nns:m.0zxyz5j ns:film.film.produced_by|ns:film.film.production_companies ?x0 .\nns:m.0zxyz5j ns:film.film.written_by ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 a M0 .\nM1 P0 ?x0 .\nM1 P1 ?x0 .\nM1 P2 ?x0 .\nM1 P3 ?x0 .\nM1 P4 ?x0 .\nM2 P0 ?x0 .\nM2 P1 ?x0 .\nM2 P2 ?x0 .\nM2 P3 ?x0 .\nM2 P4 ?x0\n}",
    "expectedResponse": "No",
    "recursionDepth": 42
  },
  {
    "questionIdx": 172016,
    "questionWithBrackets": "What was directed, produced, executive produced, and written by [Kinefaktura]'s writer, cinematographer, and art director",
    "questionPatternModEntities": "What was directed , produced , executive produced , and written by M0 's writer , cinematographer , and art director",
    "questionTemplate": "What was [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] , [ROLE_SIMPLE] , and [ROLE_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.film.directed_by ?x1 .\n?x0 ns:film.film.executive_produced_by ?x1 .\n?x0 ns:film.film.produced_by|ns:film.film.production_companies ?x1 .\n?x0 ns:film.film.written_by ?x1 .\n?x1 ns:film.cinematographer.film ns:m.0vsh_8l .\n?x1 ns:film.film_art_director.films_art_directed ns:m.0vsh_8l .\n?x1 ns:film.writer.film ns:m.0vsh_8l\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x0 P3 ?x1 .\n?x1 P4 M0 .\n?x1 P5 M0 .\n?x1 P6 M0\n}",
    "expectedResponse": "FFF1",
    "recursionDepth": 42
  },
  {
    "questionIdx": 185244,
    "questionWithBrackets": "What was written by a director of [Wholphin: Issue 10], executive produced by [Scream 3]'s producer, and directed by [Brett Ratner]",
    "questionPatternModEntities": "What was written by a director of M2 , executive produced by M1 's producer , and directed by M0",
    "questionTemplate": "What was [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity] , [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] , and [VP_SIMPLE] by [entity]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.film.directed_by ns:m.0162c8 .\n?x0 ns:film.film.executive_produced_by ?x1 .\n?x0 ns:film.film.written_by ?x2 .\n?x1 ns:film.producer.film|ns:film.production_company.films ns:m.02v63m .\n?x2 ns:film.director.film ns:m.0crs094\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x2 .\n?x0 P2 M0 .\n?x1 P3 M1 .\n?x2 P4 M2\n}",
    "expectedResponse": "New York, I Love You",
    "recursionDepth": 42
  },
  {
    "questionIdx": 147872,
    "questionWithBrackets": "What did [Warner Home Video] distribute, a Chinese film producer's sibling produce, and [Siren Visual] distribute",
    "questionPatternModEntities": "What did M0 distribute , a Chinese film producer 's sibling produce , and M1 distribute",
    "questionTemplate": "What did [entity] [VP_SIMPLE] , a [ADJECTIVE_SIMPLE] [NP_SIMPLE] 's [ROLE_SIMPLE] [VP_SIMPLE] , and [entity] [VP_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.film.distributors/ns:film.film_film_distributor_relationship.distributor ns:m.04mkft .\n?x0 ns:film.film.distributors/ns:film.film_film_distributor_relationship.distributor ns:m.09gjmbj .\n?x0 ns:film.film.produced_by|ns:film.film.production_companies ?x1 .\n?x1 ns:people.person.sibling_s/ns:people.sibling_relationship.sibling|ns:fictional_universe.fictional_character.siblings/ns:fictional_universe.sibling_relationship_of_fictional_characters.siblings ?x2 .\n?x2 a ns:film.producer .\n?x2 ns:people.person.nationality ns:m.0d05w3 .\nFILTER ( ?x1 != ?x2 )\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P1 ?x1 .\n?x1 P2 ?x2 .\n?x2 P3 M3 .\n?x2 a M2 .\nFILTER ( ?x1 != ?x2 )\n}",
    "expectedResponse": "The Water Margin",
    "recursionDepth": 42
  },
  {
    "questionIdx": 79570,
    "questionWithBrackets": "Was [The Boat That Rocked] directed by, executive produced by, and written by a male founder of [Make Poverty History] and [Comic Relief]",
    "questionPatternModEntities": "Was M3 directed by , executive produced by , and written by a male founder of M0 and M1",
    "questionTemplate": "Was [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] and [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:organization.organization_founder.organizations_founded ns:m.058n6s .\n?x0 ns:organization.organization_founder.organizations_founded ns:m.0q055 .\n?x0 ns:people.person.gender ns:m.05zppz .\nns:m.03ydlnj ns:film.film.directed_by ?x0 .\nns:m.03ydlnj ns:film.film.executive_produced_by ?x0 .\nns:m.03ydlnj ns:film.film.written_by ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P1 M2 .\nM3 P2 ?x0 .\nM3 P3 ?x0 .\nM3 P4 ?x0\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 42
  },
  {
    "questionIdx": 175530,
    "questionWithBrackets": "What was edited, directed, executive produced, written, and produced by a Chinese film producer",
    "questionPatternModEntities": "What was edited , directed , executive produced , written , and produced by a Chinese film producer",
    "questionTemplate": "What was [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [NP_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.film.directed_by ?x1 .\n?x0 ns:film.film.edited_by ?x1 .\n?x0 ns:film.film.executive_produced_by ?x1 .\n?x0 ns:film.film.produced_by|ns:film.film.production_companies ?x1 .\n?x0 ns:film.film.written_by ?x1 .\n?x1 a ns:film.producer .\n?x1 ns:people.person.nationality ns:m.0d05w3\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x0 P3 ?x1 .\n?x0 P4 ?x1 .\n?x1 P5 M1 .\n?x1 a M0\n}",
    "expectedResponse": "Grave Goods; Double Fikret",
    "recursionDepth": 42
  },
  {
    "questionIdx": 178650,
    "questionWithBrackets": "What was executive produced by, edited by, directed by, produced by, and written by [Nico Rockwell]'s parent",
    "questionPatternModEntities": "What was executive produced by , edited by , directed by , produced by , and written by M0 's parent",
    "questionTemplate": "What was [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.film.directed_by ?x1 .\n?x0 ns:film.film.edited_by ?x1 .\n?x0 ns:film.film.executive_produced_by ?x1 .\n?x0 ns:film.film.produced_by|ns:film.film.production_companies ?x1 .\n?x0 ns:film.film.written_by ?x1 .\n?x1 ns:people.person.children|ns:fictional_universe.fictional_character.children|ns:organization.organization.child/ns:organization.organization_relationship.child ns:m.0j2yhwf\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x0 P3 ?x1 .\n?x0 P4 ?x1 .\n?x1 P5 M0\n}",
    "expectedResponse": "Little Feet",
    "recursionDepth": 42
  },
  {
    "questionIdx": 22634,
    "questionWithBrackets": "Did [The Prize] and [My Favorite Spy] star [Jack Chefe], star [Sayre Dearing], and star a film producer's actor",
    "questionPatternModEntities": "Did M1 and M4 star M2 , star M3 , and star a film producer 's actor",
    "questionTemplate": "Did [entity] and [entity] [VP_SIMPLE] [entity] , [VP_SIMPLE] [entity] , and [VP_SIMPLE] a [NP_SIMPLE] 's [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.actor.film/ns:film.performance.character ?x1 .\n?x1 a ns:film.producer .\nns:m.026p_bs ns:film.film.starring/ns:film.performance.actor ?x0 .\nns:m.026p_bs ns:film.film.starring/ns:film.performance.actor ns:m.0k1s_ns .\nns:m.026p_bs ns:film.film.starring/ns:film.performance.actor ns:m.0pyrn08 .\nns:m.02wwdml ns:film.film.starring/ns:film.performance.actor ?x0 .\nns:m.02wwdml ns:film.film.starring/ns:film.performance.actor ns:m.0k1s_ns .\nns:m.02wwdml ns:film.film.starring/ns:film.performance.actor ns:m.0pyrn08\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x1 a M0 .\nM1 P1 ?x0 .\nM1 P1 M2 .\nM1 P1 M3 .\nM4 P1 ?x0 .\nM4 P1 M2 .\nM4 P1 M3\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 42
  },
  {
    "questionIdx": 64321,
    "questionWithBrackets": "Was [Life! Camera Action...] produced by, written by, executive produced by, directed by, and edited by a costume designer",
    "questionPatternModEntities": "Was M1 produced by , written by , executive produced by , directed by , and edited by a costume designer",
    "questionTemplate": "Was [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by a [NP_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 a ns:film.film_costumer_designer .\nns:m.0qft7d6 ns:film.film.directed_by ?x0 .\nns:m.0qft7d6 ns:film.film.edited_by ?x0 .\nns:m.0qft7d6 ns:film.film.executive_produced_by ?x0 .\nns:m.0qft7d6 ns:film.film.produced_by|ns:film.film.production_companies ?x0 .\nns:m.0qft7d6 ns:film.film.written_by ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 a M0 .\nM1 P0 ?x0 .\nM1 P1 ?x0 .\nM1 P2 ?x0 .\nM1 P3 ?x0 .\nM1 P4 ?x0\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 42
  },
  {
    "questionIdx": 143810,
    "questionWithBrackets": "What did [Harve Karbo]'s executive producer's spouse edit, [Yao Meng] write, and [Anthony Minghella] and [Natalie Portman] write",
    "questionPatternModEntities": "What did M3 's executive producer 's spouse edit , M0 write , and M1 and M2 write",
    "questionTemplate": "What did [entity] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE] [VP_SIMPLE] , [entity] [VP_SIMPLE] , and [entity] and [entity] [VP_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.film.edited_by ?x1 .\n?x0 ns:film.film.written_by ns:m.02hfp_ .\n?x0 ns:film.film.written_by ns:m.08lftln .\n?x0 ns:film.film.written_by ns:m.09l3p .\n?x1 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ?x2 .\n?x2 ns:film.producer.films_executive_produced ns:m.0hzbf4k .\nFILTER ( ?x1 != ?x2 )\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P1 ?x1 .\n?x1 P2 ?x2 .\n?x2 P3 M3 .\nFILTER ( ?x1 != ?x2 )\n}",
    "expectedResponse": "New York, I Love You",
    "recursionDepth": 42
  },
  {
    "questionIdx": 5614,
    "questionWithBrackets": "Did [Definitely, Maybe] star [Meissa Hampton], star a spouse and child of [Christine Koch], and star [Gerard Bianco Jr.]",
    "questionPatternModEntities": "Did M1 star M2 , star a spouse and child of M0 , and star M3",
    "questionTemplate": "Did [entity] [VP_SIMPLE] [entity] , [VP_SIMPLE] a [ROLE_SIMPLE] and [ROLE_SIMPLE] of [entity] , and [VP_SIMPLE] [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:people.person.parents|ns:fictional_universe.fictional_character.parents|ns:organization.organization.parent/ns:organization.organization_relationship.parent ns:m.0pyszpp .\n?x0 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ns:m.0pyszpp .\nFILTER ( ?x0 != ns:m.0pyszpp ) .\nns:m.02z3rqk ns:film.film.starring/ns:film.performance.actor ?x0 .\nns:m.02z3rqk ns:film.film.starring/ns:film.performance.actor ns:m.0c1g2s2 .\nns:m.02z3rqk ns:film.film.starring/ns:film.performance.actor ns:m.0vnycbx\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M0 .\nFILTER ( ?x0 != M0 ) .\nM1 P2 ?x0 .\nM1 P2 M2 .\nM1 P2 M3\n}",
    "expectedResponse": "No",
    "recursionDepth": 42
  },
  {
    "questionIdx": 115963,
    "questionWithBrackets": "Were [DreamWorks Animation] and [DreamWorks Records] founded by [David Geffen] and [Jeffrey Katzenberg] and founded by an employee and founder of [Clarium Capital]",
    "questionPatternModEntities": "Were M1 and M4 founded by M2 and M3 and founded by a employee and founder of M0",
    "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by [entity] and [entity] and [VP_SIMPLE] by a [ROLE_SIMPLE] and [ROLE_SIMPLE] of [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:organization.organization_founder.organizations_founded ns:m.0cc5416 .\n?x0 ns:people.person.employment_history/ns:business.employment_tenure.company ns:m.0cc5416 .\nns:m.04gmlt ns:organization.organization.founders ?x0 .\nns:m.04gmlt ns:organization.organization.founders ns:m.01vhrz .\nns:m.04gmlt ns:organization.organization.founders ns:m.02rq9n .\nns:m.056ws9 ns:organization.organization.founders ?x0 .\nns:m.056ws9 ns:organization.organization.founders ns:m.01vhrz .\nns:m.056ws9 ns:organization.organization.founders ns:m.02rq9n\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M0 .\nM1 P2 ?x0 .\nM1 P2 M2 .\nM1 P2 M3 .\nM4 P2 ?x0 .\nM4 P2 M2 .\nM4 P2 M3\n}",
    "expectedResponse": "No",
    "recursionDepth": 42
  },
  {
    "questionIdx": 171396,
    "questionWithBrackets": "What was directed by, edited by, written by, executive produced by, and produced by [William Radochia]'s sibling",
    "questionPatternModEntities": "What was directed by , edited by , written by , executive produced by , and produced by M0 's sibling",
    "questionTemplate": "What was [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.film.directed_by ?x1 .\n?x0 ns:film.film.edited_by ?x1 .\n?x0 ns:film.film.executive_produced_by ?x1 .\n?x0 ns:film.film.produced_by|ns:film.film.production_companies ?x1 .\n?x0 ns:film.film.written_by ?x1 .\n?x1 ns:people.person.sibling_s/ns:people.sibling_relationship.sibling|ns:fictional_universe.fictional_character.siblings/ns:fictional_universe.sibling_relationship_of_fictional_characters.siblings ns:m.011nw623 .\nFILTER ( ?x1 != ns:m.011nw623 )\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x0 P3 ?x1 .\n?x0 P4 ?x1 .\n?x1 P5 M0 .\nFILTER ( ?x1 != M0 )\n}",
    "expectedResponse": "Little Pen Lost",
    "recursionDepth": 42
  },
  {
    "questionIdx": 47865,
    "questionWithBrackets": "Was [Bill Hicks] a film producer that a star of [The Secret Life of Pets] and [American Hustle] was influenced by and [Sam Kinison] influenced",
    "questionPatternModEntities": "Was M2 a film producer that a star of M0 and M1 was influenced by and M4 influenced",
    "questionTemplate": "Was [entity] a [NP_SIMPLE] that a [ROLE_SIMPLE] of [entity] and [entity] was [VP_SIMPLE] by and [entity] [VP_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.actor.film/ns:film.performance.film ns:m.0115c2x3 .\n?x0 ns:film.actor.film/ns:film.performance.film ns:m.0ryt9m1 .\nns:m.01wp_jm a ns:film.producer .\nns:m.01wp_jm ns:influence.influence_node.influenced ?x0 .\nns:m.01wp_jm ns:influence.influence_node.influenced_by ns:m.02gt7m\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\nM2 P1 ?x0 .\nM2 P2 M4 .\nM2 a M3\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 42
  },
  {
    "questionIdx": 774,
    "questionWithBrackets": "Did [Alan Becker] executive produce, edit, produce, write, and direct [Animation vs. Animator 1]'s sequel",
    "questionPatternModEntities": "Did M1 executive produce , edit , produce , write , and direct M0 's sequel",
    "questionTemplate": "Did [entity] [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] [entity] 's [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.film.prequel ns:m.0108m1yx .\nns:m.0108mkjv ns:film.director.film ?x0 .\nns:m.0108mkjv ns:film.editor.film ?x0 .\nns:m.0108mkjv ns:film.producer.films_executive_produced ?x0 .\nns:m.0108mkjv ns:film.producer.film|ns:film.production_company.films ?x0 .\nns:m.0108mkjv ns:film.writer.film ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 ?x0 .\nM1 P2 ?x0 .\nM1 P3 ?x0 .\nM1 P4 ?x0 .\nM1 P5 ?x0\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 42
  },
  {
    "questionIdx": 175524,
    "questionWithBrackets": "What was edited, directed, executive produced, and written by [Bullet Ballet]'s cinematographer, star, and editor",
    "questionPatternModEntities": "What was edited , directed , executive produced , and written by M0 's cinematographer , star , and editor",
    "questionTemplate": "What was [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] , [ROLE_SIMPLE] , and [ROLE_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.film.directed_by ?x1 .\n?x0 ns:film.film.edited_by ?x1 .\n?x0 ns:film.film.executive_produced_by ?x1 .\n?x0 ns:film.film.written_by ?x1 .\n?x1 ns:film.actor.film/ns:film.performance.film ns:m.0b2981 .\n?x1 ns:film.cinematographer.film ns:m.0b2981 .\n?x1 ns:film.editor.film ns:m.0b2981\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x0 P3 ?x1 .\n?x1 P4 M0 .\n?x1 P5 M0 .\n?x1 P6 M0\n}",
    "expectedResponse": "Tetsuo II: Body Hammer",
    "recursionDepth": 42
  },
  {
    "questionIdx": 29638,
    "questionWithBrackets": "Did a character's spouse's female actor executive produce, write, and produce [Words Unspoken]",
    "questionPatternModEntities": "Did a character 's spouse 's female actor executive produce , write , and produce M0",
    "questionTemplate": "Did a [NP_SIMPLE] 's [ROLE_SIMPLE] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.actor.film/ns:film.performance.character ?x1 .\n?x0 ns:film.producer.films_executive_produced ns:m.0h2bj_j .\n?x0 ns:film.producer.film|ns:film.production_company.films ns:m.0h2bj_j .\n?x0 ns:film.writer.film ns:m.0h2bj_j .\n?x0 ns:people.person.gender ns:m.02zsn .\n?x1 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ?x2 .\n?x2 a ns:fictional_universe.fictional_character .\nFILTER ( ?x1 != ?x2 )\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M0 .\n?x0 P2 M0 .\n?x0 P3 ?x1 .\n?x0 P4 M1 .\n?x1 P5 ?x2 .\n?x2 a M2 .\nFILTER ( ?x1 != ?x2 )\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 42
  },
  {
    "questionIdx": 235201,
    "questionWithBrackets": "Who was employed by a production company's child, employed by [EA Mobile] and [Electronic Arts], and employed by [The Walt Disney Company]",
    "questionPatternModEntities": "Who was employed by a production company 's child , employed by M1 and M2 , and employed by M3",
    "questionTemplate": "Who was [VP_SIMPLE] by a [NP_SIMPLE] 's [ROLE_SIMPLE] , [VP_SIMPLE] by [entity] and [entity] , and [VP_SIMPLE] by [entity]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:people.person .\n?x0 ns:people.person.employment_history/ns:business.employment_tenure.company ?x1 .\n?x0 ns:people.person.employment_history/ns:business.employment_tenure.company ns:m.01n073 .\n?x0 ns:people.person.employment_history/ns:business.employment_tenure.company ns:m.064424 .\n?x0 ns:people.person.employment_history/ns:business.employment_tenure.company ns:m.09b3v .\n?x1 ns:people.person.parents|ns:fictional_universe.fictional_character.parents|ns:organization.organization.parent/ns:organization.organization_relationship.parent ?x2 .\n?x2 a ns:film.production_company\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P0 M3 .\n?x0 a M0 .\n?x1 P1 ?x2 .\n?x2 a M4\n}",
    "expectedResponse": "Mitch Lasky",
    "recursionDepth": 42
  },
  {
    "questionIdx": 121335,
    "questionWithBrackets": "Were [Monsieur Verdoux] and [The Great Dictator] written by a British founder of [National Car Rental] and [Hollywood Athletic Club] and edited by [Willard Nico]",
    "questionPatternModEntities": "Were M3 and M5 written by a British founder of M0 and M1 and edited by M4",
    "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] and [entity] and [VP_SIMPLE] by [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:organization.organization_founder.organizations_founded ns:m.07vlg_ .\n?x0 ns:organization.organization_founder.organizations_founded ns:m.0bbz0qs .\n?x0 ns:people.person.nationality ns:m.07ssc .\nns:m.02nmmc ns:film.film.edited_by ns:m.0g9ckvg .\nns:m.02nmmc ns:film.film.written_by ?x0 .\nns:m.0gy4z ns:film.film.edited_by ns:m.0g9ckvg .\nns:m.0gy4z ns:film.film.written_by ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P1 M2 .\nM3 P2 ?x0 .\nM3 P3 M4 .\nM5 P2 ?x0 .\nM5 P3 M4\n}",
    "expectedResponse": "No",
    "recursionDepth": 42
  },
  {
    "questionIdx": 236640,
    "questionWithBrackets": "Who was influenced by [Lucretius] and [Clifford Geertz], influenced [Bryan Reynolds], and married an art director of [The Sleep of Death]",
    "questionPatternModEntities": "Who was influenced by M2 and M3 , influenced M1 , and married a art director of M4",
    "questionTemplate": "Who was [VP_SIMPLE] by [entity] and [entity] , [VP_SIMPLE] [entity] , and [VP_SIMPLE] a [ROLE_SIMPLE] of [entity]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:people.person .\n?x0 ns:influence.influence_node.influenced ns:m.02pg9_9 .\n?x0 ns:influence.influence_node.influenced_by ns:m.0303rh .\n?x0 ns:influence.influence_node.influenced_by ns:m.0987k .\n?x0 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ?x1 .\n?x1 ns:film.film_art_director.films_art_directed ns:m.0ddc7vx .\nFILTER ( ?x0 != ?x1 )\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M1 .\n?x0 P1 M2 .\n?x0 P1 M3 .\n?x0 P2 ?x1 .\n?x0 a M0 .\n?x1 P3 M4 .\nFILTER ( ?x0 != ?x1 )\n}",
    "expectedResponse": "Stephen Greenblatt",
    "recursionDepth": 42
  },
  {
    "questionIdx": 79639,
    "questionWithBrackets": "Was [The Brown Bunny] edited and produced by an art director that [Janine Loves Jenna] was executive produced by and starred",
    "questionPatternModEntities": "Was M2 edited and produced by a art director that M1 was executive produced by and starred",
    "questionTemplate": "Was [entity] [VP_SIMPLE] and [VP_SIMPLE] by a [NP_SIMPLE] that [entity] was [VP_SIMPLE] by and [VP_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 a ns:film.film_art_director .\n?x0 ns:film.actor.film/ns:film.performance.film ns:m.05kd8b8 .\n?x0 ns:film.producer.films_executive_produced ns:m.05kd8b8 .\nns:m.01n9cy ns:film.film.edited_by ?x0 .\nns:m.01n9cy ns:film.film.produced_by|ns:film.film.production_companies ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M1 .\n?x0 P1 M1 .\n?x0 a M0 .\nM2 P2 ?x0 .\nM2 P3 ?x0\n}",
    "expectedResponse": "No",
    "recursionDepth": 42
  },
  {
    "questionIdx": 172540,
    "questionWithBrackets": "What was distributed by [Sony Pictures Entertainment], distributed by [Vampires: Los Muertos]'s cinematographer, and produced by a screenwriter's sibling",
    "questionPatternModEntities": "What was distributed by M0 , distributed by M1 's cinematographer , and produced by a screenwriter 's sibling",
    "questionTemplate": "What was [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] , and [VP_SIMPLE] by a [NP_SIMPLE] 's [ROLE_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.film.distributors/ns:film.film_film_distributor_relationship.distributor ?x1 .\n?x0 ns:film.film.distributors/ns:film.film_film_distributor_relationship.distributor ns:m.03rwz3 .\n?x0 ns:film.film.produced_by|ns:film.film.production_companies ?x2 .\n?x1 ns:film.cinematographer.film ns:m.0frc02 .\n?x2 ns:people.person.sibling_s/ns:people.sibling_relationship.sibling|ns:fictional_universe.fictional_character.siblings/ns:fictional_universe.sibling_relationship_of_fictional_characters.siblings ?x3 .\n?x3 a ns:film.writer .\nFILTER ( ?x2 != ?x3 )\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P0 M0 .\n?x0 P1 ?x2 .\n?x1 P2 M1 .\n?x2 P3 ?x3 .\n?x3 a M2 .\nFILTER ( ?x2 != ?x3 )\n}",
    "expectedResponse": "The Messengers",
    "recursionDepth": 42
  },
  {
    "questionIdx": 121473,
    "questionWithBrackets": "Were [Mucheettukalikkaarante Makal], [Nakshthrakoodaram], [Maru Malarchi], [Anantha Poongathe], [Indira], and [Padheyam] edited by a film director and edited by [V. T. Vijayan]",
    "questionPatternModEntities": "Were M1 , M3 , M4 , M5 , M6 , and M7 edited by a film director and edited by M2",
    "questionTemplate": "Were [entity] , [entity] , [entity] , [entity] , [entity] , and [entity] [VP_SIMPLE] by a [NP_SIMPLE] and [VP_SIMPLE] by [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 a ns:film.director .\nns:m.0121lkbc ns:film.film.edited_by ?x0 .\nns:m.0121lkbc ns:film.film.edited_by ns:m.03cldz0 .\nns:m.02pqkzr ns:film.film.edited_by ?x0 .\nns:m.02pqkzr ns:film.film.edited_by ns:m.03cldz0 .\nns:m.0b3wxm ns:film.film.edited_by ?x0 .\nns:m.0b3wxm ns:film.film.edited_by ns:m.03cldz0 .\nns:m.0by1y6r ns:film.film.edited_by ?x0 .\nns:m.0by1y6r ns:film.film.edited_by ns:m.03cldz0 .\nns:m.0cz9zfs ns:film.film.edited_by ?x0 .\nns:m.0cz9zfs ns:film.film.edited_by ns:m.03cldz0 .\nns:m.0hncgxx ns:film.film.edited_by ?x0 .\nns:m.0hncgxx ns:film.film.edited_by ns:m.03cldz0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 a M0 .\nM1 P0 ?x0 .\nM1 P0 M2 .\nM3 P0 ?x0 .\nM3 P0 M2 .\nM4 P0 ?x0 .\nM4 P0 M2 .\nM5 P0 ?x0 .\nM5 P0 M2 .\nM6 P0 ?x0 .\nM6 P0 M2 .\nM7 P0 ?x0 .\nM7 P0 M2\n}",
    "expectedResponse": "No",
    "recursionDepth": 42
  },
  {
    "questionIdx": 68677,
    "questionWithBrackets": "Was [Nadie te querr\u00e1 como yo] executive produced by, edited by, directed by, written by, and produced by a film editor",
    "questionPatternModEntities": "Was M1 executive produced by , edited by , directed by , written by , and produced by a film editor",
    "questionTemplate": "Was [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by a [NP_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 a ns:film.editor .\nns:m.0gg7q5r ns:film.film.directed_by ?x0 .\nns:m.0gg7q5r ns:film.film.edited_by ?x0 .\nns:m.0gg7q5r ns:film.film.executive_produced_by ?x0 .\nns:m.0gg7q5r ns:film.film.produced_by|ns:film.film.production_companies ?x0 .\nns:m.0gg7q5r ns:film.film.written_by ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 a M0 .\nM1 P0 ?x0 .\nM1 P1 ?x0 .\nM1 P2 ?x0 .\nM1 P3 ?x0 .\nM1 P4 ?x0\n}",
    "expectedResponse": "No",
    "recursionDepth": 42
  },
  {
    "questionIdx": 168806,
    "questionWithBrackets": "What was a production company whose employee and founder directed [Empty Socks] and [Alice Solves the Puzzle] and directed [Servants' Entrance]",
    "questionPatternModEntities": "What was a production company whose employee and founder directed M1 and M2 and directed M3",
    "questionTemplate": "What was a [NP_SIMPLE] whose [ROLE_SIMPLE] and [ROLE_SIMPLE] [VP_SIMPLE] [entity] and [entity] and [VP_SIMPLE] [entity]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:film.production_company .\n?x0 ns:business.employer.employees/ns:business.employment_tenure.person ?x1 .\n?x0 ns:organization.organization.founders ?x1 .\n?x1 ns:film.director.film ns:m.012gd4ts .\n?x1 ns:film.director.film ns:m.0281fyy .\n?x1 ns:film.director.film ns:m.0805n71\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 a M0 .\n?x1 P2 M1 .\n?x1 P2 M2 .\n?x1 P2 M3\n}",
    "expectedResponse": "Walt Disney Animation Studios; The Walt Disney Company",
    "recursionDepth": 42
  },
  {
    "questionIdx": 55742,
    "questionWithBrackets": "Was [Frosted Chocolate Mouse] produced, directed, written, and edited by [Avenge But One Of My Two Eyes]'s editor, cinematographer, and writer",
    "questionPatternModEntities": "Was M1 produced , directed , written , and edited by M0 's editor , cinematographer , and writer",
    "questionTemplate": "Was [entity] [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] , [ROLE_SIMPLE] , and [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.cinematographer.film ns:m.06_96xj .\n?x0 ns:film.editor.film ns:m.06_96xj .\n?x0 ns:film.writer.film ns:m.06_96xj .\nns:m.0k3dcg7 ns:film.film.directed_by ?x0 .\nns:m.0k3dcg7 ns:film.film.edited_by ?x0 .\nns:m.0k3dcg7 ns:film.film.produced_by|ns:film.film.production_companies ?x0 .\nns:m.0k3dcg7 ns:film.film.written_by ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M0 .\n?x0 P2 M0 .\nM1 P3 ?x0 .\nM1 P4 ?x0 .\nM1 P5 ?x0 .\nM1 P6 ?x0\n}",
    "expectedResponse": "No",
    "recursionDepth": 42
  },
  {
    "questionIdx": 50842,
    "questionWithBrackets": "Was [Communist Party of China] founded by a spouse of [Symphony of Lianhua]'s Chinese star and founded by [Li Dazhao] and [Zhou Enlai]",
    "questionPatternModEntities": "Was M2 founded by a spouse of M1 's Chinese star and founded by M3 and M4",
    "questionTemplate": "Was [entity] [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] and [VP_SIMPLE] by [entity] and [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ?x1 .\n?x1 ns:film.actor.film/ns:film.performance.film ns:m.0v1gc0y .\n?x1 ns:people.person.nationality ns:m.0d05w3 .\nFILTER ( ?x0 != ?x1 ) .\nns:m.02189 ns:organization.organization.founders ?x0 .\nns:m.02189 ns:organization.organization.founders ns:m.02d42c .\nns:m.02189 ns:organization.organization.founders ns:m.0dbk8\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x1 P1 M0 .\n?x1 P2 M1 .\nFILTER ( ?x0 != ?x1 ) .\nM2 P3 ?x0 .\nM2 P3 M3 .\nM2 P3 M4\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 42
  },
  {
    "questionIdx": 82709,
    "questionWithBrackets": "Was [The Tempest] executive produced by [Tino Puri], produced by [Jason K. Lau], and written by [Fool's Fire]'s director and costume designer",
    "questionPatternModEntities": "Was M1 executive produced by M2 , produced by M3 , and written by M0 's director and costume designer",
    "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] and [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.director.film ns:m.0c0l48s .\n?x0 ns:film.film_costumer_designer.costume_design_for_film ns:m.0c0l48s .\nns:m.04zx0rb ns:film.film.executive_produced_by ns:m.0gbpfl4 .\nns:m.04zx0rb ns:film.film.produced_by|ns:film.film.production_companies ns:m.0cpm0_7 .\nns:m.04zx0rb ns:film.film.written_by ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M0 .\nM1 P2 M2 .\nM1 P3 ?x0 .\nM1 P4 M3\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 42
  },
  {
    "questionIdx": 234462,
    "questionWithBrackets": "Who was employed by [Code for America] and [Macromedia], founded [Allison Randal]'s employer, and was employed by [MySQL AB]",
    "questionPatternModEntities": "Who was employed by M1 and M2 , founded M4 's employer , and was employed by M3",
    "questionTemplate": "Who was [VP_SIMPLE] by [entity] and [entity] , [VP_SIMPLE] [entity] 's [ROLE_SIMPLE] , and was [VP_SIMPLE] by [entity]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:people.person .\n?x0 ns:organization.organization_founder.organizations_founded ?x1 .\n?x0 ns:people.person.employment_history/ns:business.employment_tenure.company ns:m.0180df .\n?x0 ns:people.person.employment_history/ns:business.employment_tenure.company ns:m.0297wy .\n?x0 ns:people.person.employment_history/ns:business.employment_tenure.company ns:m.0g5rs3z .\n?x1 ns:business.employer.employees/ns:business.employment_tenure.person ns:m.02qzhwp\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P0 M3 .\n?x0 P1 ?x1 .\n?x0 a M0 .\n?x1 P2 M4\n}",
    "expectedResponse": "Tim O'Reilly",
    "recursionDepth": 42
  },
  {
    "questionIdx": 81910,
    "questionWithBrackets": "Was [The Newburgh Sting] produced, edited, directed, written, and executive produced by a film director's spouse",
    "questionPatternModEntities": "Was M1 produced , edited , directed , written , and executive produced by a film director 's spouse",
    "questionTemplate": "Was [entity] [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by a [NP_SIMPLE] 's [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ?x1 .\n?x1 a ns:film.director .\nFILTER ( ?x0 != ?x1 ) .\nns:m.010bdvxw ns:film.film.directed_by ?x0 .\nns:m.010bdvxw ns:film.film.edited_by ?x0 .\nns:m.010bdvxw ns:film.film.executive_produced_by ?x0 .\nns:m.010bdvxw ns:film.film.produced_by|ns:film.film.production_companies ?x0 .\nns:m.010bdvxw ns:film.film.written_by ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x1 a M0 .\nFILTER ( ?x0 != ?x1 ) .\nM1 P1 ?x0 .\nM1 P2 ?x0 .\nM1 P3 ?x0 .\nM1 P4 ?x0 .\nM1 P5 ?x0\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 42
  },
  {
    "questionIdx": 171392,
    "questionWithBrackets": "What was directed by, edited by, written by, executive produced by, and produced by [Quentin Heilbroner]'s parent",
    "questionPatternModEntities": "What was directed by , edited by , written by , executive produced by , and produced by M0 's parent",
    "questionTemplate": "What was [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.film.directed_by ?x1 .\n?x0 ns:film.film.edited_by ?x1 .\n?x0 ns:film.film.executive_produced_by ?x1 .\n?x0 ns:film.film.produced_by|ns:film.film.production_companies ?x1 .\n?x0 ns:film.film.written_by ?x1 .\n?x1 ns:people.person.children|ns:fictional_universe.fictional_character.children|ns:organization.organization.child/ns:organization.organization_relationship.child ns:m.010flpzw\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x0 P3 ?x1 .\n?x0 P4 ?x1 .\n?x1 P5 M0\n}",
    "expectedResponse": "The Newburgh Sting",
    "recursionDepth": 42
  },
  {
    "questionIdx": 62165,
    "questionWithBrackets": "Was [Judd Apatow] influenced by [Bullets over Broadway]'s director and writer and influenced by a writer of [Mizugumo Monmon] and [A Woman Under the Influence]",
    "questionPatternModEntities": "Was M3 influenced by M2 's director and writer and influenced by a writer of M0 and M1",
    "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] and [ROLE_SIMPLE] and [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity] and [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.writer.film ns:m.0gjkg8 .\n?x0 ns:film.writer.film ns:m.0k5nq .\n?x1 ns:film.director.film ns:m.0421ng .\n?x1 ns:film.writer.film ns:m.0421ng .\nns:m.05ty4m ns:influence.influence_node.influenced_by ?x0 .\nns:m.05ty4m ns:influence.influence_node.influenced_by ?x1\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x1 P0 M2 .\n?x1 P1 M2 .\nM3 P2 ?x0 .\nM3 P2 ?x1\n}",
    "expectedResponse": "No",
    "recursionDepth": 42
  },
  {
    "questionIdx": 70478,
    "questionWithBrackets": "Was [Paleolito] executive produced by, directed by, written by, produced by, and edited by an art director",
    "questionPatternModEntities": "Was M1 executive produced by , directed by , written by , produced by , and edited by a art director",
    "questionTemplate": "Was [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by a [NP_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 a ns:film.film_art_director .\nns:m.0107h1wl ns:film.film.directed_by ?x0 .\nns:m.0107h1wl ns:film.film.edited_by ?x0 .\nns:m.0107h1wl ns:film.film.executive_produced_by ?x0 .\nns:m.0107h1wl ns:film.film.produced_by|ns:film.film.production_companies ?x0 .\nns:m.0107h1wl ns:film.film.written_by ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 a M0 .\nM1 P0 ?x0 .\nM1 P1 ?x0 .\nM1 P2 ?x0 .\nM1 P3 ?x0 .\nM1 P4 ?x0\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 42
  },
  {
    "questionIdx": 961,
    "questionWithBrackets": "Did [Alex Kendrick] write, direct, produce, executive produce, and edit [Facing the Giants]'s prequel",
    "questionPatternModEntities": "Did M1 write , direct , produce , executive produce , and edit M0 's prequel",
    "questionTemplate": "Did [entity] [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] [entity] 's [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.film.sequel ns:m.0dyrhk .\nns:m.027zpfp ns:film.director.film ?x0 .\nns:m.027zpfp ns:film.editor.film ?x0 .\nns:m.027zpfp ns:film.producer.films_executive_produced ?x0 .\nns:m.027zpfp ns:film.producer.film|ns:film.production_company.films ?x0 .\nns:m.027zpfp ns:film.writer.film ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 ?x0 .\nM1 P2 ?x0 .\nM1 P3 ?x0 .\nM1 P4 ?x0 .\nM1 P5 ?x0\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 42
  },
  {
    "questionIdx": 763,
    "questionWithBrackets": "Did [Alan Becker] executive produce, direct, produce, edit, and write [Animator vs Animation 3]'s prequel",
    "questionPatternModEntities": "Did M1 executive produce , direct , produce , edit , and write M0 's prequel",
    "questionTemplate": "Did [entity] [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] [entity] 's [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.film.sequel ns:m.010lfbym .\nns:m.0108mkjv ns:film.director.film ?x0 .\nns:m.0108mkjv ns:film.editor.film ?x0 .\nns:m.0108mkjv ns:film.producer.films_executive_produced ?x0 .\nns:m.0108mkjv ns:film.producer.film|ns:film.production_company.films ?x0 .\nns:m.0108mkjv ns:film.writer.film ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 ?x0 .\nM1 P2 ?x0 .\nM1 P3 ?x0 .\nM1 P4 ?x0 .\nM1 P5 ?x0\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 42
  },
  {
    "questionIdx": 236266,
    "questionWithBrackets": "Who was influenced by [Italianamerican]'s cinematographer's male spouse and was influenced by [Nancy Holt] and [Bruce Nauman]",
    "questionPatternModEntities": "Who was influenced by M4 's cinematographer 's male spouse and was influenced by M1 and M2",
    "questionTemplate": "Who was [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] and was [VP_SIMPLE] by [entity] and [entity]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:people.person .\n?x0 ns:influence.influence_node.influenced_by ?x1 .\n?x0 ns:influence.influence_node.influenced_by ns:m.02679w3 .\n?x0 ns:influence.influence_node.influenced_by ns:m.0d97b .\n?x1 ns:people.person.gender ns:m.05zppz .\n?x1 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ?x2 .\n?x2 ns:film.cinematographer.film ns:m.0b3_43 .\nFILTER ( ?x1 != ?x2 )\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 a M0 .\n?x1 P1 M3 .\n?x1 P2 ?x2 .\n?x2 P3 M4 .\nFILTER ( ?x1 != ?x2 )\n}",
    "expectedResponse": "Peter Campus",
    "recursionDepth": 42
  },
  {
    "questionIdx": 76630,
    "questionWithBrackets": "Was [Skeleton Girl] directed by, executive produced by, edited by, written by, and produced by a film director",
    "questionPatternModEntities": "Was M1 directed by , executive produced by , edited by , written by , and produced by a film director",
    "questionTemplate": "Was [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by a [NP_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 a ns:film.director .\nns:m.0ph3y0k ns:film.film.directed_by ?x0 .\nns:m.0ph3y0k ns:film.film.edited_by ?x0 .\nns:m.0ph3y0k ns:film.film.executive_produced_by ?x0 .\nns:m.0ph3y0k ns:film.film.produced_by|ns:film.film.production_companies ?x0 .\nns:m.0ph3y0k ns:film.film.written_by ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 a M0 .\nM1 P0 ?x0 .\nM1 P1 ?x0 .\nM1 P2 ?x0 .\nM1 P3 ?x0 .\nM1 P4 ?x0\n}",
    "expectedResponse": "No",
    "recursionDepth": 42
  },
  {
    "questionIdx": 235791,
    "questionWithBrackets": "Who was influenced by [Django Unchained]'s director, writer, and star and was influenced by [Hubert Selby, Jr.] and [Buddy Holly]",
    "questionPatternModEntities": "Who was influenced by M3 's director , writer , and star and was influenced by M1 and M2",
    "questionTemplate": "Who was [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] , [ROLE_SIMPLE] , and [ROLE_SIMPLE] and was [VP_SIMPLE] by [entity] and [entity]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:people.person .\n?x0 ns:influence.influence_node.influenced_by ?x1 .\n?x0 ns:influence.influence_node.influenced_by ns:m.01vs_yt .\n?x0 ns:influence.influence_node.influenced_by ns:m.0nk02 .\n?x1 ns:film.actor.film/ns:film.performance.film ns:m.0gwjw0c .\n?x1 ns:film.director.film ns:m.0gwjw0c .\n?x1 ns:film.writer.film ns:m.0gwjw0c\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 a M0 .\n?x1 P1 M3 .\n?x1 P2 M3 .\n?x1 P3 M3\n}",
    "expectedResponse": "Garret Schuelke",
    "recursionDepth": 42
  },
  {
    "questionIdx": 21979,
    "questionWithBrackets": "Did [The Departed] star a producer and editor of [The Gay Marriage Thing], star [Buddy Dolan], and star [Steve Scarfo]",
    "questionPatternModEntities": "Did M1 star a producer and editor of M0 , star M2 , and star M3",
    "questionTemplate": "Did [entity] [VP_SIMPLE] a [ROLE_SIMPLE] and [ROLE_SIMPLE] of [entity] , [VP_SIMPLE] [entity] , and [VP_SIMPLE] [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.editor.film ns:m.05p156z .\n?x0 ns:film.producer.film|ns:film.production_company.films ns:m.05p156z .\nns:m.04vr_f ns:film.film.starring/ns:film.performance.actor ?x0 .\nns:m.04vr_f ns:film.film.starring/ns:film.performance.actor ns:m.0gc853n .\nns:m.04vr_f ns:film.film.starring/ns:film.performance.actor ns:m.0vx3cxz\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M0 .\nM1 P2 ?x0 .\nM1 P2 M2 .\nM1 P2 M3\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 42
  },
  {
    "questionIdx": 196663,
    "questionWithBrackets": "Which cinematographer was influenced by a Dutch film director, influenced by [David Lynch], and influenced by [David Cronenberg]",
    "questionPatternModEntities": "Which cinematographer was influenced by a Dutch film director , influenced by M1 , and influenced by M2",
    "questionTemplate": "Which [NP_SIMPLE] was [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [NP_SIMPLE] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:film.cinematographer .\n?x0 ns:influence.influence_node.influenced_by ?x1 .\n?x0 ns:influence.influence_node.influenced_by ns:m.026dx .\n?x0 ns:influence.influence_node.influenced_by ns:m.026fd .\n?x1 a ns:film.director .\n?x1 ns:people.person.nationality ns:m.059j2\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 a M0 .\n?x1 P1 M4 .\n?x1 a M3\n}",
    "expectedResponse": "Takashi Miike",
    "recursionDepth": 42
  },
  {
    "questionIdx": 47010,
    "questionWithBrackets": "Was [Bad Taste] edited by and produced by a costume designer that [Cercle de l'Oratoire] employed and was founded by",
    "questionPatternModEntities": "Was M2 edited by and produced by a costume designer that M1 employed and was founded by",
    "questionTemplate": "Was [entity] [VP_SIMPLE] by and [VP_SIMPLE] by a [NP_SIMPLE] that [entity] [VP_SIMPLE] and was [VP_SIMPLE] by",
    "sparql": "SELECT count(*) WHERE {\n?x0 a ns:film.film_costumer_designer .\n?x0 ns:organization.organization_founder.organizations_founded ns:m.03c0ztn .\n?x0 ns:people.person.employment_history/ns:business.employment_tenure.company ns:m.03c0ztn .\nns:m.02mkwj ns:film.film.edited_by ?x0 .\nns:m.02mkwj ns:film.film.produced_by|ns:film.film.production_companies ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M1 .\n?x0 P1 M1 .\n?x0 a M0 .\nM2 P2 ?x0 .\nM2 P3 ?x0\n}",
    "expectedResponse": "No",
    "recursionDepth": 42
  },
  {
    "questionIdx": 215030,
    "questionWithBrackets": "Who did [Tetsuo II: Body Hammer]'s director, cinematographer, and executive producer influence, [Rachel Weisz] marry, and [Terry Gilliam] influence",
    "questionPatternModEntities": "Who did M3 's director , cinematographer , and executive producer influence , M2 marry , and M1 influence",
    "questionTemplate": "Who did [entity] 's [ROLE_SIMPLE] , [ROLE_SIMPLE] , and [ROLE_SIMPLE] [VP_SIMPLE] , [entity] [VP_SIMPLE] , and [entity] [VP_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:people.person .\n?x0 ns:influence.influence_node.influenced_by ?x1 .\n?x0 ns:influence.influence_node.influenced_by ns:m.07h5d .\n?x0 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ns:m.014x77 .\n?x1 ns:film.cinematographer.film ns:m.0brs6b .\n?x1 ns:film.director.film ns:m.0brs6b .\n?x1 ns:film.producer.films_executive_produced ns:m.0brs6b .\nFILTER ( ?x0 != ns:m.014x77 )\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P0 M1 .\n?x0 P1 M2 .\n?x0 a M0 .\n?x1 P2 M3 .\n?x1 P3 M3 .\n?x1 P4 M3 .\nFILTER ( ?x0 != M2 )\n}",
    "expectedResponse": "Darren Aronofsky",
    "recursionDepth": 43
  },
  {
    "questionIdx": 127083,
    "questionWithBrackets": "Were [The Hudsucker Proxy] and [A Serious Man] written by [Philippa Boyens], executive produced by a person, and directed by an actor",
    "questionPatternModEntities": "Were M2 and M4 written by M3 , executive produced by a person , and directed by a actor",
    "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by [entity] , [VP_SIMPLE] by a [NP_SIMPLE] , and [VP_SIMPLE] by a [NP_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 a ns:people.person .\n?x1 a ns:film.actor .\nns:m.016y0b ns:film.film.directed_by ?x1 .\nns:m.016y0b ns:film.film.executive_produced_by ?x0 .\nns:m.016y0b ns:film.film.written_by ns:m.02bfy5 .\nns:m.02r1c18 ns:film.film.directed_by ?x1 .\nns:m.02r1c18 ns:film.film.executive_produced_by ?x0 .\nns:m.02r1c18 ns:film.film.written_by ns:m.02bfy5\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 a M0 .\n?x1 a M1 .\nM2 P0 ?x0 .\nM2 P1 M3 .\nM2 P2 ?x1 .\nM4 P0 ?x0 .\nM4 P1 M3 .\nM4 P2 ?x1\n}",
    "expectedResponse": "No",
    "recursionDepth": 43
  },
  {
    "questionIdx": 58671,
    "questionWithBrackets": "Was [Holiday Road] directed by a person, written by [Mary McIlwain] and [Daron Nefcy], and written by [Annalisa Bugliani]'s spouse",
    "questionPatternModEntities": "Was M2 directed by a person , written by M3 and M4 , and written by M0 's spouse",
    "questionTemplate": "Was [entity] [VP_SIMPLE] by a [NP_SIMPLE] , [VP_SIMPLE] by [entity] and [entity] , and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ns:m.0h28b9t .\n?x1 a ns:people.person .\nFILTER ( ?x0 != ns:m.0h28b9t ) .\nns:m.0h2lzkf ns:film.film.directed_by ?x1 .\nns:m.0h2lzkf ns:film.film.written_by ?x0 .\nns:m.0h2lzkf ns:film.film.written_by ns:m.0gdn72_ .\nns:m.0h2lzkf ns:film.film.written_by ns:m.0hb_989\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x1 a M1 .\nFILTER ( ?x0 != M0 ) .\nM2 P1 ?x0 .\nM2 P1 M3 .\nM2 P1 M4 .\nM2 P2 ?x1\n}",
    "expectedResponse": "No",
    "recursionDepth": 43
  },
  {
    "questionIdx": 115876,
    "questionWithBrackets": "Were [Donald in Mathmagic Land] and [The Brave Little Tailor] produced by a film director that founded [Walt Disney Pictures] and [The Walt Disney Company] and founded [Walt Disney Records]",
    "questionPatternModEntities": "Were M4 and M5 produced by a film director that founded M1 and M2 and founded M3",
    "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by a [NP_SIMPLE] that [VP_SIMPLE] [entity] and [entity] and [VP_SIMPLE] [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 a ns:film.director .\n?x0 ns:organization.organization_founder.organizations_founded ns:m.01795t .\n?x0 ns:organization.organization_founder.organizations_founded ns:m.03tg5s .\n?x0 ns:organization.organization_founder.organizations_founded ns:m.09b3v .\nns:m.06qr39 ns:film.film.produced_by|ns:film.film.production_companies ?x0 .\nns:m.08nqgk ns:film.film.produced_by|ns:film.film.production_companies ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P0 M3 .\n?x0 a M0 .\nM4 P1 ?x0 .\nM5 P1 ?x0\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 43
  },
  {
    "questionIdx": 172502,
    "questionWithBrackets": "What was distributed by [RKO Pictures], produced by an art director, and distributed by [Mystery of the Wax Museum]'s distributor and producer",
    "questionPatternModEntities": "What was distributed by M0 , produced by a art director , and distributed by M1 's distributor and producer",
    "questionTemplate": "What was [VP_SIMPLE] by [entity] , [VP_SIMPLE] by a [NP_SIMPLE] , and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] and [ROLE_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.film.distributors/ns:film.film_film_distributor_relationship.distributor ?x1 .\n?x0 ns:film.film.distributors/ns:film.film_film_distributor_relationship.distributor ns:m.0k9ctht .\n?x0 ns:film.film.produced_by|ns:film.film.production_companies ?x2 .\n?x1 ns:film.film_distributor.films_distributed/ns:film.film_film_distributor_relationship.film ns:m.06ljyr .\n?x1 ns:film.producer.film|ns:film.production_company.films ns:m.06ljyr .\n?x2 a ns:film.film_art_director\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P0 M0 .\n?x0 P1 ?x2 .\n?x1 P2 M1 .\n?x1 P3 M1 .\n?x2 a M2\n}",
    "expectedResponse": "Citizen Kane",
    "recursionDepth": 43
  },
  {
    "questionIdx": 120996,
    "questionWithBrackets": "Were [Meet Marlon Brando] and [Salesman] directed by a male person's spouse and directed by [Albert Maysles] and [David Maysles]",
    "questionPatternModEntities": "Were M2 and M5 directed by a male person 's spouse and directed by M3 and M4",
    "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [NP_SIMPLE] 's [ROLE_SIMPLE] and [VP_SIMPLE] by [entity] and [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ?x1 .\n?x1 a ns:people.person .\n?x1 ns:people.person.gender ns:m.05zppz .\nFILTER ( ?x0 != ?x1 ) .\nns:m.0k430 ns:film.film.directed_by ?x0 .\nns:m.0k430 ns:film.film.directed_by ns:m.0252pz5 .\nns:m.0k430 ns:film.film.directed_by ns:m.0252pzf .\nns:m.0w0h40s ns:film.film.directed_by ?x0 .\nns:m.0w0h40s ns:film.film.directed_by ns:m.0252pz5 .\nns:m.0w0h40s ns:film.film.directed_by ns:m.0252pzf\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x1 P1 M1 .\n?x1 a M0 .\nFILTER ( ?x0 != ?x1 ) .\nM2 P2 ?x0 .\nM2 P2 M3 .\nM2 P2 M4 .\nM5 P2 ?x0 .\nM5 P2 M3 .\nM5 P2 M4\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 43
  },
  {
    "questionIdx": 148364,
    "questionWithBrackets": "What did a French film producer that [Jean Epstein] was influenced by edit, produce, and direct",
    "questionPatternModEntities": "What did a French film producer that M1 was influenced by edit , produce , and direct",
    "questionTemplate": "What did a [ADJECTIVE_SIMPLE] [NP_SIMPLE] that [entity] was [VP_SIMPLE] by [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.film.directed_by ?x1 .\n?x0 ns:film.film.edited_by ?x1 .\n?x0 ns:film.film.produced_by|ns:film.film.production_companies ?x1 .\n?x1 a ns:film.producer .\n?x1 ns:influence.influence_node.influenced ns:m.07g1jy .\n?x1 ns:people.person.nationality ns:m.0f8l9c\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x1 P3 M1 .\n?x1 P4 M2 .\n?x1 a M0\n}",
    "expectedResponse": "The Wheel; Napol\u00e9on",
    "recursionDepth": 43
  },
  {
    "questionIdx": 170248,
    "questionWithBrackets": "What was directed by [Porto of My Childhood]'s writer and star, directed by [Chen Kaige], and directed by a film producer",
    "questionPatternModEntities": "What was directed by M1 's writer and star , directed by M0 , and directed by a film producer",
    "questionTemplate": "What was [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] and [ROLE_SIMPLE] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by a [NP_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.film.directed_by ?x1 .\n?x0 ns:film.film.directed_by ?x2 .\n?x0 ns:film.film.directed_by ns:m.0253dk .\n?x1 ns:film.actor.film/ns:film.performance.film ns:m.0bgk8gc .\n?x1 ns:film.writer.film ns:m.0bgk8gc .\n?x2 a ns:film.producer\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P0 ?x2 .\n?x0 P0 M0 .\n?x1 P1 M1 .\n?x1 P2 M1 .\n?x2 a M2\n}",
    "expectedResponse": "To Each His Own Cinema",
    "recursionDepth": 43
  },
  {
    "questionIdx": 58250,
    "questionWithBrackets": "Was [Heinemann] acquired by [Octopus Publishing] and [Thomas Tilling] and acquired by a company that [Random House UK] and [Philip Morris USA] acquired",
    "questionPatternModEntities": "Was M3 acquired by M4 and M5 and acquired by a company that M1 and M2 acquired",
    "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] and [entity] and [VP_SIMPLE] by a [NP_SIMPLE] that [entity] and [entity] [VP_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 a ns:business.employer .\n?x0 ns:organization.organization.acquired_by/ns:business.acquisition.acquiring_company ns:m.03kjrs .\n?x0 ns:organization.organization.acquired_by/ns:business.acquisition.acquiring_company ns:m.05qhtqc .\nns:m.0dt43d ns:organization.organization.acquired_by/ns:business.acquisition.acquiring_company ?x0 .\nns:m.0dt43d ns:organization.organization.acquired_by/ns:business.acquisition.acquiring_company ns:m.03nww9n .\nns:m.0dt43d ns:organization.organization.acquired_by/ns:business.acquisition.acquiring_company ns:m.05pxdjf\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 a M0 .\nM3 P0 ?x0 .\nM3 P0 M4 .\nM3 P0 M5\n}",
    "expectedResponse": "No",
    "recursionDepth": 43
  },
  {
    "questionIdx": 224977,
    "questionWithBrackets": "Who was a British art director that [Vincenzo Natali] was influenced by and [Rachel Weisz]'s spouse was influenced by",
    "questionPatternModEntities": "Who was a British art director that M2 was influenced by and M4 's spouse was influenced by",
    "questionTemplate": "Who was a [ADJECTIVE_SIMPLE] [NP_SIMPLE] that [entity] was [VP_SIMPLE] by and [entity] 's [ROLE_SIMPLE] was [VP_SIMPLE] by",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:film.film_art_director .\n?x0 a ns:people.person .\n?x0 ns:influence.influence_node.influenced ?x1 .\n?x0 ns:influence.influence_node.influenced ns:m.07kvyt .\n?x0 ns:people.person.nationality ns:m.07ssc .\n?x1 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ns:m.014x77 .\nFILTER ( ?x1 != ns:m.014x77 )\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P0 M2 .\n?x0 P1 M3 .\n?x0 a M0 .\n?x0 a M1 .\n?x1 P2 M4 .\nFILTER ( ?x1 != M4 )\n}",
    "expectedResponse": "Terry Gilliam",
    "recursionDepth": 43
  },
  {
    "questionIdx": 221644,
    "questionWithBrackets": "Who married a star of [Angela Mooney], was influenced by an art director, and was influenced by [Roger Angell]",
    "questionPatternModEntities": "Who married a star of M3 , was influenced by a art director , and was influenced by M1",
    "questionTemplate": "Who [VP_SIMPLE] a [ROLE_SIMPLE] of [entity] , was [VP_SIMPLE] by a [NP_SIMPLE] , and was [VP_SIMPLE] by [entity]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:people.person .\n?x0 ns:influence.influence_node.influenced_by ?x1 .\n?x0 ns:influence.influence_node.influenced_by ns:m.06l7l .\n?x0 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ?x2 .\n?x1 a ns:film.film_art_director .\n?x2 ns:film.actor.film/ns:film.performance.film ns:m.0bw3xl7 .\nFILTER ( ?x0 != ?x2 )\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P0 M1 .\n?x0 P1 ?x2 .\n?x0 a M0 .\n?x1 a M2 .\n?x2 P2 M3 .\nFILTER ( ?x0 != ?x2 )\n}",
    "expectedResponse": "Woody Allen",
    "recursionDepth": 43
  },
  {
    "questionIdx": 151655,
    "questionWithBrackets": "What did an editor of [Suite Ancienne] executive produce, write, produce, direct, and edit",
    "questionPatternModEntities": "What did a editor of M0 executive produce , write , produce , direct , and edit",
    "questionTemplate": "What did a [ROLE_SIMPLE] of [entity] [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.film.directed_by ?x1 .\n?x0 ns:film.film.edited_by ?x1 .\n?x0 ns:film.film.executive_produced_by ?x1 .\n?x0 ns:film.film.produced_by|ns:film.film.production_companies ?x1 .\n?x0 ns:film.film.written_by ?x1 .\n?x1 ns:film.editor.film ns:m.010nr1g9\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x0 P3 ?x1 .\n?x0 P4 ?x1 .\n?x1 P5 M0\n}",
    "expectedResponse": "Dead People",
    "recursionDepth": 43
  },
  {
    "questionIdx": 72521,
    "questionWithBrackets": "Was [Promises Written in Water] executive produced by, written by, produced by, directed by, and edited by [The Brown Bunny]'s costume designer",
    "questionPatternModEntities": "Was M1 executive produced by , written by , produced by , directed by , and edited by M0 's costume designer",
    "questionTemplate": "Was [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.film_costumer_designer.costume_design_for_film ns:m.01n9cy .\nns:m.0bh9qf1 ns:film.film.directed_by ?x0 .\nns:m.0bh9qf1 ns:film.film.edited_by ?x0 .\nns:m.0bh9qf1 ns:film.film.executive_produced_by ?x0 .\nns:m.0bh9qf1 ns:film.film.produced_by|ns:film.film.production_companies ?x0 .\nns:m.0bh9qf1 ns:film.film.written_by ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 ?x0 .\nM1 P2 ?x0 .\nM1 P3 ?x0 .\nM1 P4 ?x0 .\nM1 P5 ?x0\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 43
  },
  {
    "questionIdx": 2091,
    "questionWithBrackets": "Did [Bajarse al moro] and [Blindfolded Eyes] star [Carmen Maura] and star a Spanish screenwriter's female child",
    "questionPatternModEntities": "Did M3 and M5 star M4 and star a Spanish screenwriter 's female child",
    "questionTemplate": "Did [entity] and [entity] [VP_SIMPLE] [entity] and [VP_SIMPLE] a [ADJECTIVE_SIMPLE] [NP_SIMPLE] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:people.person.gender ns:m.02zsn .\n?x0 ns:people.person.parents|ns:fictional_universe.fictional_character.parents|ns:organization.organization.parent/ns:organization.organization_relationship.parent ?x1 .\n?x1 a ns:film.writer .\n?x1 ns:people.person.nationality ns:m.06mkj .\nns:m.03qkkh1 ns:film.film.starring/ns:film.performance.actor ?x0 .\nns:m.03qkkh1 ns:film.film.starring/ns:film.performance.actor ns:m.089m1l .\nns:m.06414kf ns:film.film.starring/ns:film.performance.actor ?x0 .\nns:m.06414kf ns:film.film.starring/ns:film.performance.actor ns:m.089m1l\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 ?x1 .\n?x1 P2 M2 .\n?x1 a M1 .\nM3 P3 ?x0 .\nM3 P3 M4 .\nM5 P3 ?x0 .\nM5 P3 M4\n}",
    "expectedResponse": "No",
    "recursionDepth": 43
  },
  {
    "questionIdx": 180999,
    "questionWithBrackets": "What was produced by [Andy Bausch] and [Klaus Maeck], written by [Micha\u0142 Englert], and produced by a Swedish film producer",
    "questionPatternModEntities": "What was produced by M1 and M2 , written by M0 , and produced by a Swedish film producer",
    "questionTemplate": "What was [VP_SIMPLE] by [entity] and [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [NP_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.film.produced_by|ns:film.film.production_companies ?x1 .\n?x0 ns:film.film.produced_by|ns:film.film.production_companies ns:m.038wxz .\n?x0 ns:film.film.produced_by|ns:film.film.production_companies ns:m.0c0bp4y .\n?x0 ns:film.film.written_by ns:m.093fk9c .\n?x1 a ns:film.producer .\n?x1 ns:people.person.nationality ns:m.0d0vqn\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 ?x1 .\n?x0 P1 M1 .\n?x0 P1 M2 .\n?x1 P2 M4 .\n?x1 a M3\n}",
    "expectedResponse": "Visions of Europe",
    "recursionDepth": 43
  },
  {
    "questionIdx": 145433,
    "questionWithBrackets": "What did [My Name Is Bruce]'s producer and star found and [The Evil Dead]'s executive producer, director, and writer found",
    "questionPatternModEntities": "What did M0 's producer and star found and M1 's executive producer , director , and writer found",
    "questionTemplate": "What did [entity] 's [ROLE_SIMPLE] and [ROLE_SIMPLE] [VP_SIMPLE] and [entity] 's [ROLE_SIMPLE] , [ROLE_SIMPLE] , and [ROLE_SIMPLE] [VP_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:organization.organization.founders ?x1 .\n?x0 ns:organization.organization.founders ?x2 .\n?x1 ns:film.actor.film/ns:film.performance.film ns:m.0bdt9s .\n?x1 ns:film.producer.film|ns:film.production_company.films ns:m.0bdt9s .\n?x2 ns:film.director.film ns:m.02jqk .\n?x2 ns:film.producer.films_executive_produced ns:m.02jqk .\n?x2 ns:film.writer.film ns:m.02jqk\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P0 ?x2 .\n?x1 P1 M0 .\n?x1 P2 M0 .\n?x2 P3 M1 .\n?x2 P4 M1 .\n?x2 P5 M1\n}",
    "expectedResponse": "Renaissance Pictures",
    "recursionDepth": 43
  },
  {
    "questionIdx": 69339,
    "questionWithBrackets": "Was [Nicole Scherzinger] influenced by [Joe Strummer], influenced by a female actor of [Violet Parr], and influenced by [Jeff Tweedy]",
    "questionPatternModEntities": "Was M2 influenced by M3 , influenced by a female actor of M0 , and influenced by M4",
    "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] , [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] , and [VP_SIMPLE] by [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.actor.film/ns:film.performance.character ns:m.06k0bf .\n?x0 ns:people.person.gender ns:m.02zsn .\nns:m.0gps0z ns:influence.influence_node.influenced_by ?x0 .\nns:m.0gps0z ns:influence.influence_node.influenced_by ns:m.01w5gg6 .\nns:m.0gps0z ns:influence.influence_node.influenced_by ns:m.03ryzd\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nM2 P2 ?x0 .\nM2 P2 M3 .\nM2 P2 M4\n}",
    "expectedResponse": "No",
    "recursionDepth": 43
  },
  {
    "questionIdx": 59024,
    "questionWithBrackets": "Was [Human Rights Association] founded by a film director, founded by [Ali Sirmen] and [Murat Belge], and founded by [Enid Bennett]'s spouse",
    "questionPatternModEntities": "Was M2 founded by a film director , founded by M3 and M4 , and founded by M1 's spouse",
    "questionTemplate": "Was [entity] [VP_SIMPLE] by a [NP_SIMPLE] , [VP_SIMPLE] by [entity] and [entity] , and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 a ns:film.director .\n?x1 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ns:m.0ks0jf .\nFILTER ( ?x1 != ns:m.0ks0jf ) .\nns:m.02r1shh ns:organization.organization.founders ?x0 .\nns:m.02r1shh ns:organization.organization.founders ?x1 .\nns:m.02r1shh ns:organization.organization.founders ns:m.0819rb .\nns:m.02r1shh ns:organization.organization.founders ns:m.0w37w9g\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 a M0 .\n?x1 P0 M1 .\nFILTER ( ?x1 != M1 ) .\nM2 P1 ?x0 .\nM2 P1 ?x1 .\nM2 P1 M3 .\nM2 P1 M4\n}",
    "expectedResponse": "No",
    "recursionDepth": 43
  },
  {
    "questionIdx": 67980,
    "questionWithBrackets": "Was [Monga] written by, executive produced by, produced by, directed by, and edited by [Cyclist friend]'s actor",
    "questionPatternModEntities": "Was M1 written by , executive produced by , produced by , directed by , and edited by M0 's actor",
    "questionTemplate": "Was [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.actor.film/ns:film.performance.character ns:m.0pct3wf .\nns:m.0b74yg0 ns:film.film.directed_by ?x0 .\nns:m.0b74yg0 ns:film.film.edited_by ?x0 .\nns:m.0b74yg0 ns:film.film.executive_produced_by ?x0 .\nns:m.0b74yg0 ns:film.film.produced_by|ns:film.film.production_companies ?x0 .\nns:m.0b74yg0 ns:film.film.written_by ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 ?x0 .\nM1 P2 ?x0 .\nM1 P3 ?x0 .\nM1 P4 ?x0 .\nM1 P5 ?x0\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 43
  },
  {
    "questionIdx": 25785,
    "questionWithBrackets": "Did [Zoolander] star [Jackie Johnson], star a film producer's Swedish child, and star [Dallas Kane Hewitt]",
    "questionPatternModEntities": "Did M2 star M3 , star a film producer 's Swedish child , and star M4",
    "questionTemplate": "Did [entity] [VP_SIMPLE] [entity] , [VP_SIMPLE] a [NP_SIMPLE] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] , and [VP_SIMPLE] [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:people.person.nationality ns:m.0d0vqn .\n?x0 ns:people.person.parents|ns:fictional_universe.fictional_character.parents|ns:organization.organization.parent/ns:organization.organization_relationship.parent ?x1 .\n?x1 a ns:film.producer .\nns:m.01shy7 ns:film.film.starring/ns:film.performance.actor ?x0 .\nns:m.01shy7 ns:film.film.starring/ns:film.performance.actor ns:m.096y28 .\nns:m.01shy7 ns:film.film.starring/ns:film.performance.actor ns:m.0p7lf0q\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 ?x1 .\n?x1 a M1 .\nM2 P2 ?x0 .\nM2 P2 M3 .\nM2 P2 M4\n}",
    "expectedResponse": "No",
    "recursionDepth": 43
  },
  {
    "questionIdx": 111120,
    "questionWithBrackets": "Were ['Wag Kang Lilingon], [A Very Special Love], [Ikaw pa rin: Bongga ka boy!], [You Changed My Life], [Status: Single], and [Sisterakas] executive produced by a person and edited by [Marya Ignacio]",
    "questionPatternModEntities": "Were M1 , M3 , M4 , M5 , M6 , and M7 executive produced by a person and edited by M2",
    "questionTemplate": "Were [entity] , [entity] , [entity] , [entity] , [entity] , and [entity] [VP_SIMPLE] by a [NP_SIMPLE] and [VP_SIMPLE] by [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 a ns:people.person .\nns:m.02w91vx ns:film.film.edited_by ns:m.0hn61l5 .\nns:m.02w91vx ns:film.film.executive_produced_by ?x0 .\nns:m.047gs0x ns:film.film.edited_by ns:m.0hn61l5 .\nns:m.047gs0x ns:film.film.executive_produced_by ?x0 .\nns:m.04j04p8 ns:film.film.edited_by ns:m.0hn61l5 .\nns:m.04j04p8 ns:film.film.executive_produced_by ?x0 .\nns:m.04zxypl ns:film.film.edited_by ns:m.0hn61l5 .\nns:m.04zxypl ns:film.film.executive_produced_by ?x0 .\nns:m.0crr__p ns:film.film.edited_by ns:m.0hn61l5 .\nns:m.0crr__p ns:film.film.executive_produced_by ?x0 .\nns:m.0k2dvs7 ns:film.film.edited_by ns:m.0hn61l5 .\nns:m.0k2dvs7 ns:film.film.executive_produced_by ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 a M0 .\nM1 P0 ?x0 .\nM1 P1 M2 .\nM3 P0 ?x0 .\nM3 P1 M2 .\nM4 P0 ?x0 .\nM4 P1 M2 .\nM5 P0 ?x0 .\nM5 P1 M2 .\nM6 P0 ?x0 .\nM6 P1 M2 .\nM7 P0 ?x0 .\nM7 P1 M2\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 43
  },
  {
    "questionIdx": 179036,
    "questionWithBrackets": "What was executive produced, directed, produced, edited, and written by [Samad be madreseh miravad]'s writer and star",
    "questionPatternModEntities": "What was executive produced , directed , produced , edited , and written by M0 's writer and star",
    "questionTemplate": "What was [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] and [ROLE_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.film.directed_by ?x1 .\n?x0 ns:film.film.edited_by ?x1 .\n?x0 ns:film.film.executive_produced_by ?x1 .\n?x0 ns:film.film.produced_by|ns:film.film.production_companies ?x1 .\n?x0 ns:film.film.written_by ?x1 .\n?x1 ns:film.actor.film/ns:film.performance.film ns:g.12qhkj517 .\n?x1 ns:film.writer.film ns:g.12qhkj517\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x0 P3 ?x1 .\n?x0 P4 ?x1 .\n?x1 P5 M0 .\n?x1 P6 M0\n}",
    "expectedResponse": "Samad dar rah ejdeha",
    "recursionDepth": 43
  },
  {
    "questionIdx": 220941,
    "questionWithBrackets": "Who married [Surrender, Dorothy]'s star and executive producer, was influenced by [Groucho Marx], and was influenced by [Cole Porter]",
    "questionPatternModEntities": "Who married M3 's star and executive producer , was influenced by M1 , and was influenced by M2",
    "questionTemplate": "Who [VP_SIMPLE] [entity] 's [ROLE_SIMPLE] and [ROLE_SIMPLE] , was [VP_SIMPLE] by [entity] , and was [VP_SIMPLE] by [entity]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:people.person .\n?x0 ns:influence.influence_node.influenced_by ns:m.01jrvr6 .\n?x0 ns:influence.influence_node.influenced_by ns:m.01wj9y9 .\n?x0 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ?x1 .\n?x1 ns:film.actor.film/ns:film.performance.film ns:m.04j10wf .\n?x1 ns:film.producer.films_executive_produced ns:m.04j10wf .\nFILTER ( ?x0 != ?x1 )\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P1 ?x1 .\n?x0 a M0 .\n?x1 P2 M3 .\n?x1 P3 M3 .\nFILTER ( ?x0 != ?x1 )\n}",
    "expectedResponse": "Woody Allen",
    "recursionDepth": 43
  },
  {
    "questionIdx": 119375,
    "questionWithBrackets": "Were [Johnny Guitar], [Sands of Iwo Jima], [Under Fiesta Stars], [The Maverick Queen], and [Stardust on the Sage] distributed and produced by a film producer's employer's child",
    "questionPatternModEntities": "Were M1 , M2 , M3 , M4 , and M5 distributed and produced by a film producer 's employer 's child",
    "questionTemplate": "Were [entity] , [entity] , [entity] , [entity] , and [entity] [VP_SIMPLE] and [VP_SIMPLE] by a [NP_SIMPLE] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:people.person.parents|ns:fictional_universe.fictional_character.parents|ns:organization.organization.parent/ns:organization.organization_relationship.parent ?x1 .\n?x1 ns:business.employer.employees/ns:business.employment_tenure.person ?x2 .\n?x2 a ns:film.producer .\nns:m.0147f1 ns:film.film.distributors/ns:film.film_film_distributor_relationship.distributor ?x0 .\nns:m.0147f1 ns:film.film.produced_by|ns:film.film.production_companies ?x0 .\nns:m.03jp4yj ns:film.film.distributors/ns:film.film_film_distributor_relationship.distributor ?x0 .\nns:m.03jp4yj ns:film.film.produced_by|ns:film.film.production_companies ?x0 .\nns:m.04w25m ns:film.film.distributors/ns:film.film_film_distributor_relationship.distributor ?x0 .\nns:m.04w25m ns:film.film.produced_by|ns:film.film.production_companies ?x0 .\nns:m.09s283v ns:film.film.distributors/ns:film.film_film_distributor_relationship.distributor ?x0 .\nns:m.09s283v ns:film.film.produced_by|ns:film.film.production_companies ?x0 .\nns:m.0crw7z4 ns:film.film.distributors/ns:film.film_film_distributor_relationship.distributor ?x0 .\nns:m.0crw7z4 ns:film.film.produced_by|ns:film.film.production_companies ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x1 P1 ?x2 .\n?x2 a M0 .\nM1 P2 ?x0 .\nM1 P3 ?x0 .\nM2 P2 ?x0 .\nM2 P3 ?x0 .\nM3 P2 ?x0 .\nM3 P3 ?x0 .\nM4 P2 ?x0 .\nM4 P3 ?x0 .\nM5 P2 ?x0 .\nM5 P3 ?x0\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 43
  },
  {
    "questionIdx": 125589,
    "questionWithBrackets": "Were [Tetsuo: The Iron Man] and [Nightmare Detective] edited, produced, and directed by an executive producer, cinematographer, and art director of [Erasable Cities]",
    "questionPatternModEntities": "Were M1 and M2 edited , produced , and directed by a executive producer , cinematographer , and art director of M0",
    "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by a [ROLE_SIMPLE] , [ROLE_SIMPLE] , and [ROLE_SIMPLE] of [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.cinematographer.film ns:m.0k3qrys .\n?x0 ns:film.film_art_director.films_art_directed ns:m.0k3qrys .\n?x0 ns:film.producer.films_executive_produced ns:m.0k3qrys .\nns:m.02qq666 ns:film.film.directed_by ?x0 .\nns:m.02qq666 ns:film.film.edited_by ?x0 .\nns:m.02qq666 ns:film.film.produced_by|ns:film.film.production_companies ?x0 .\nns:m.05m0x0 ns:film.film.directed_by ?x0 .\nns:m.05m0x0 ns:film.film.edited_by ?x0 .\nns:m.05m0x0 ns:film.film.produced_by|ns:film.film.production_companies ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M0 .\n?x0 P2 M0 .\nM1 P3 ?x0 .\nM1 P4 ?x0 .\nM1 P5 ?x0 .\nM2 P3 ?x0 .\nM2 P4 ?x0 .\nM2 P5 ?x0\n}",
    "expectedResponse": "No",
    "recursionDepth": 43
  },
  {
    "questionIdx": 179034,
    "questionWithBrackets": "What was executive produced, directed, produced, edited, and written by [Dreams from the Woods]'s Swedish writer",
    "questionPatternModEntities": "What was executive produced , directed , produced , edited , and written by M0 's Swedish writer",
    "questionTemplate": "What was [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.film.directed_by ?x1 .\n?x0 ns:film.film.edited_by ?x1 .\n?x0 ns:film.film.executive_produced_by ?x1 .\n?x0 ns:film.film.produced_by|ns:film.film.production_companies ?x1 .\n?x0 ns:film.film.written_by ?x1 .\n?x1 ns:film.writer.film ns:m.0cj7gny .\n?x1 ns:people.person.nationality ns:m.0d0vqn\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x0 P3 ?x1 .\n?x0 P4 ?x1 .\n?x1 P5 M0 .\n?x1 P6 M1\n}",
    "expectedResponse": "The Tale of Little Puppetboy",
    "recursionDepth": 43
  },
  {
    "questionIdx": 232207,
    "questionWithBrackets": "Who was a screenwriter that [AQP Collective]'s founder and employee was influenced by and [Giannina Braschi] was influenced by",
    "questionPatternModEntities": "Who was a screenwriter that M3 's founder and employee was influenced by and M2 was influenced by",
    "questionTemplate": "Who was a [NP_SIMPLE] that [entity] 's [ROLE_SIMPLE] and [ROLE_SIMPLE] was [VP_SIMPLE] by and [entity] was [VP_SIMPLE] by",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:film.writer .\n?x0 a ns:people.person .\n?x0 ns:influence.influence_node.influenced ?x1 .\n?x0 ns:influence.influence_node.influenced ns:m.02pjnlx .\n?x1 ns:organization.organization_founder.organizations_founded ns:m.03wyqg3 .\n?x1 ns:people.person.employment_history/ns:business.employment_tenure.company ns:m.03wyqg3\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P0 M2 .\n?x0 a M0 .\n?x0 a M1 .\n?x1 P1 M3 .\n?x1 P2 M3\n}",
    "expectedResponse": "James Joyce",
    "recursionDepth": 43
  },
  {
    "questionIdx": 114691,
    "questionWithBrackets": "Were [Charlie Callas] and [Marcel Marceau] influenced by a film's producer, editor, and writer and influenced by [Groucho Marx]",
    "questionPatternModEntities": "Were M1 and M3 influenced by a film 's producer , editor , and writer and influenced by M2",
    "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by a [NP_SIMPLE] 's [ROLE_SIMPLE] , [ROLE_SIMPLE] , and [ROLE_SIMPLE] and [VP_SIMPLE] by [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.editor.film ?x1 .\n?x0 ns:film.producer.film|ns:film.production_company.films ?x1 .\n?x0 ns:film.writer.film ?x1 .\n?x1 a ns:film.film .\nns:m.017_65 ns:influence.influence_node.influenced_by ?x0 .\nns:m.017_65 ns:influence.influence_node.influenced_by ns:m.01wj9y9 .\nns:m.0frqwk ns:influence.influence_node.influenced_by ?x0 .\nns:m.0frqwk ns:influence.influence_node.influenced_by ns:m.01wj9y9\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x1 a M0 .\nM1 P3 ?x0 .\nM1 P3 M2 .\nM3 P3 ?x0 .\nM3 P3 M2\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 43
  },
  {
    "questionIdx": 86684,
    "questionWithBrackets": "Was [White Elephant] directed by, executive produced by, edited by, written by, and produced by [1988: The Remake]'s producer",
    "questionPatternModEntities": "Was M1 directed by , executive produced by , edited by , written by , and produced by M0 's producer",
    "questionTemplate": "Was [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.producer.film|ns:film.production_company.films ns:m.0zncdr9 .\nns:m.0jkyb3n ns:film.film.directed_by ?x0 .\nns:m.0jkyb3n ns:film.film.edited_by ?x0 .\nns:m.0jkyb3n ns:film.film.executive_produced_by ?x0 .\nns:m.0jkyb3n ns:film.film.produced_by|ns:film.film.production_companies ?x0 .\nns:m.0jkyb3n ns:film.film.written_by ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 ?x0 .\nM1 P2 ?x0 .\nM1 P3 ?x0 .\nM1 P4 ?x0 .\nM1 P5 ?x0\n}",
    "expectedResponse": "No",
    "recursionDepth": 43
  },
  {
    "questionIdx": 119188,
    "questionWithBrackets": "Were [Jersey Girl], [Hail, Caesar!], [A Serious Man], [Burn After Reading], and [O Brother, Where Art Thou?] edited by [Where the Girls Are]'s executive producer and edited by a screenwriter",
    "questionPatternModEntities": "Were M2 , M3 , M4 , M5 , and M6 edited by M1 's executive producer and edited by a screenwriter",
    "questionTemplate": "Were [entity] , [entity] , [entity] , [entity] , and [entity] [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] and [VP_SIMPLE] by a [NP_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 a ns:film.writer .\n?x1 ns:film.producer.films_executive_produced ns:m.04hz17f .\nns:m.02704ff ns:film.film.edited_by ?x0 .\nns:m.02704ff ns:film.film.edited_by ?x1 .\nns:m.02qzh2 ns:film.film.edited_by ?x0 .\nns:m.02qzh2 ns:film.film.edited_by ?x1 .\nns:m.02r1c18 ns:film.film.edited_by ?x0 .\nns:m.02r1c18 ns:film.film.edited_by ?x1 .\nns:m.05kr4 ns:film.film.edited_by ?x0 .\nns:m.05kr4 ns:film.film.edited_by ?x1 .\nns:m.0b_rqq ns:film.film.edited_by ?x0 .\nns:m.0b_rqq ns:film.film.edited_by ?x1\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 a M0 .\n?x1 P0 M1 .\nM2 P1 ?x0 .\nM2 P1 ?x1 .\nM3 P1 ?x0 .\nM3 P1 ?x1 .\nM4 P1 ?x0 .\nM4 P1 ?x1 .\nM5 P1 ?x0 .\nM5 P1 ?x1 .\nM6 P1 ?x0 .\nM6 P1 ?x1\n}",
    "expectedResponse": "No",
    "recursionDepth": 43
  },
  {
    "questionIdx": 179191,
    "questionWithBrackets": "What was executive produced, produced, written, edited, and directed by [Goat Story 2]'s cinematographer and art director",
    "questionPatternModEntities": "What was executive produced , produced , written , edited , and directed by M0 's cinematographer and art director",
    "questionTemplate": "What was [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] and [ROLE_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.film.directed_by ?x1 .\n?x0 ns:film.film.edited_by ?x1 .\n?x0 ns:film.film.executive_produced_by ?x1 .\n?x0 ns:film.film.produced_by|ns:film.film.production_companies ?x1 .\n?x0 ns:film.film.written_by ?x1 .\n?x1 ns:film.cinematographer.film ns:m.0nbtt_1 .\n?x1 ns:film.film_art_director.films_art_directed ns:m.0nbtt_1\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x0 P3 ?x1 .\n?x0 P4 ?x1 .\n?x1 P5 M0 .\n?x1 P6 M0\n}",
    "expectedResponse": "Goat Story",
    "recursionDepth": 43
  },
  {
    "questionIdx": 20413,
    "questionWithBrackets": "Did [Talk Radio] star a Mexican costume designer's spouse, star [Theresa Bell], and star [Carl Kissin]",
    "questionPatternModEntities": "Did M2 star a Mexican costume designer 's spouse , star M3 , and star M4",
    "questionTemplate": "Did [entity] [VP_SIMPLE] a [ADJECTIVE_SIMPLE] [NP_SIMPLE] 's [ROLE_SIMPLE] , [VP_SIMPLE] [entity] , and [VP_SIMPLE] [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ?x1 .\n?x1 a ns:film.film_costumer_designer .\n?x1 ns:people.person.nationality ns:m.0b90_r .\nFILTER ( ?x0 != ?x1 ) .\nns:m.071bj2 ns:film.film.starring/ns:film.performance.actor ?x0 .\nns:m.071bj2 ns:film.film.starring/ns:film.performance.actor ns:m.0tl4rzc .\nns:m.071bj2 ns:film.film.starring/ns:film.performance.actor ns:m.0tl5kyn\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x1 P1 M1 .\n?x1 a M0 .\nFILTER ( ?x0 != ?x1 ) .\nM2 P2 ?x0 .\nM2 P2 M3 .\nM2 P2 M4\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 43
  },
  {
    "questionIdx": 122150,
    "questionWithBrackets": "Were [Obsession], [Phantom of the Paradise], [Blow Out], [The Fury], and [Mission: Impossible] edited by a screenwriter's sibling and directed by [Brian De Palma]",
    "questionPatternModEntities": "Were M1 , M3 , M4 , M5 , and M6 edited by a screenwriter 's sibling and directed by M2",
    "questionTemplate": "Were [entity] , [entity] , [entity] , [entity] , and [entity] [VP_SIMPLE] by a [NP_SIMPLE] 's [ROLE_SIMPLE] and [VP_SIMPLE] by [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:people.person.sibling_s/ns:people.sibling_relationship.sibling|ns:fictional_universe.fictional_character.siblings/ns:fictional_universe.sibling_relationship_of_fictional_characters.siblings ?x1 .\n?x1 a ns:film.writer .\nFILTER ( ?x0 != ?x1 ) .\nns:m.035w2k ns:film.film.directed_by ns:m.01c6l .\nns:m.035w2k ns:film.film.edited_by ?x0 .\nns:m.04sgl8 ns:film.film.directed_by ns:m.01c6l .\nns:m.04sgl8 ns:film.film.edited_by ?x0 .\nns:m.04wh_s ns:film.film.directed_by ns:m.01c6l .\nns:m.04wh_s ns:film.film.edited_by ?x0 .\nns:m.05dyyx ns:film.film.directed_by ns:m.01c6l .\nns:m.05dyyx ns:film.film.edited_by ?x0 .\nns:m.08t6yk ns:film.film.directed_by ns:m.01c6l .\nns:m.08t6yk ns:film.film.edited_by ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x1 a M0 .\nFILTER ( ?x0 != ?x1 ) .\nM1 P1 ?x0 .\nM1 P2 M2 .\nM3 P1 ?x0 .\nM3 P2 M2 .\nM4 P1 ?x0 .\nM4 P2 M2 .\nM5 P1 ?x0 .\nM5 P2 M2 .\nM6 P1 ?x0 .\nM6 P2 M2\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 43
  },
  {
    "questionIdx": 175547,
    "questionWithBrackets": "What was edited, directed, produced, executive produced, and written by [Baby, I Love You.]'s producer and cinematographer",
    "questionPatternModEntities": "What was edited , directed , produced , executive produced , and written by M0 's producer and cinematographer",
    "questionTemplate": "What was [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] and [ROLE_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.film.directed_by ?x1 .\n?x0 ns:film.film.edited_by ?x1 .\n?x0 ns:film.film.executive_produced_by ?x1 .\n?x0 ns:film.film.produced_by|ns:film.film.production_companies ?x1 .\n?x0 ns:film.film.written_by ?x1 .\n?x1 ns:film.cinematographer.film ns:m.011_z9lq .\n?x1 ns:film.producer.film|ns:film.production_company.films ns:m.011_z9lq\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x0 P3 ?x1 .\n?x0 P4 ?x1 .\n?x1 P5 M0 .\n?x1 P6 M0\n}",
    "expectedResponse": "Baby, I Love You.; Planet Utero",
    "recursionDepth": 43
  },
  {
    "questionIdx": 168292,
    "questionWithBrackets": "What was a film distributor whose male founder and employee played [Max Rockatansky] and played [Tim Melville]",
    "questionPatternModEntities": "What was a film distributor whose male founder and employee played M1 and played M2",
    "questionTemplate": "What was a [NP_SIMPLE] whose [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] and [ROLE_SIMPLE] [VP_SIMPLE] [entity] and [VP_SIMPLE] [entity]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:film.film_distributor .\n?x0 ns:business.employer.employees/ns:business.employment_tenure.person ?x1 .\n?x0 ns:organization.organization.founders ?x1 .\n?x1 ns:film.actor.film/ns:film.performance.character ns:m.05spy34 .\n?x1 ns:film.actor.film/ns:film.performance.character ns:m.090wrh .\n?x1 ns:people.person.gender ns:m.05zppz\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 a M0 .\n?x1 P2 M1 .\n?x1 P2 M2 .\n?x1 P3 M3\n}",
    "expectedResponse": "Icon Productions",
    "recursionDepth": 43
  },
  {
    "questionIdx": 205446,
    "questionWithBrackets": "Which film was written by [Hamsun]'s editor and cinematographer, edited by [Niels Dekker], and executive produced by [Mariano Vanhoof]",
    "questionPatternModEntities": "Which film was written by M3 's editor and cinematographer , edited by M2 , and executive produced by M1",
    "questionTemplate": "Which [NP_SIMPLE] was [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] and [ROLE_SIMPLE] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:film.film .\n?x0 ns:film.film.edited_by ns:m.0gwvlhx .\n?x0 ns:film.film.executive_produced_by ns:m.0jmw6f0 .\n?x0 ns:film.film.written_by ?x1 .\n?x1 ns:film.cinematographer.film ns:m.05f6kpj .\n?x1 ns:film.editor.film ns:m.05f6kpj\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M1 .\n?x0 P1 ?x1 .\n?x0 P2 M2 .\n?x0 a M0 .\n?x1 P3 M3 .\n?x1 P4 M3\n}",
    "expectedResponse": "Visions of Europe",
    "recursionDepth": 44
  },
  {
    "questionIdx": 83572,
    "questionWithBrackets": "Was [Tim Burton] a cinematographer that [Lena Gieseke] married and a character that influenced [Garret Schuelke] was influenced by",
    "questionPatternModEntities": "Was M2 a cinematographer that M4 married and a character that influenced M1 was influenced by",
    "questionTemplate": "Was [entity] a [NP_SIMPLE] that [entity] [VP_SIMPLE] and a [NP_SIMPLE] that [VP_SIMPLE] [entity] was [VP_SIMPLE] by",
    "sparql": "SELECT count(*) WHERE {\n?x0 a ns:fictional_universe.fictional_character .\n?x0 ns:influence.influence_node.influenced ns:m.066b7gk .\nFILTER ( ns:m.07rd7 != ns:m.0hpr979 ) .\nns:m.07rd7 a ns:film.cinematographer .\nns:m.07rd7 ns:influence.influence_node.influenced ?x0 .\nns:m.07rd7 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ns:m.0hpr979\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M1 .\n?x0 a M0 .\nFILTER ( M2 != M4 ) .\nM2 P0 ?x0 .\nM2 P1 M4 .\nM2 a M3\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 44
  },
  {
    "questionIdx": 73996,
    "questionWithBrackets": "Was [Richard Lewis] influenced by an actor and influenced by a cinematographer that [It Rains on Our Love] and [The High Sign] were written by",
    "questionPatternModEntities": "Was M4 influenced by a actor and influenced by a cinematographer that M2 and M3 were written by",
    "questionTemplate": "Was [entity] [VP_SIMPLE] by a [NP_SIMPLE] and [VP_SIMPLE] by a [NP_SIMPLE] that [entity] and [entity] were [VP_SIMPLE] by",
    "sparql": "SELECT count(*) WHERE {\n?x0 a ns:film.actor .\n?x1 a ns:film.cinematographer .\n?x1 ns:film.writer.film ns:m.02r9cv1 .\n?x1 ns:film.writer.film ns:m.0gmjm6 .\nns:m.01fvf9 ns:influence.influence_node.influenced_by ?x0 .\nns:m.01fvf9 ns:influence.influence_node.influenced_by ?x1\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 a M0 .\n?x1 P0 M2 .\n?x1 P0 M3 .\n?x1 a M1 .\nM4 P1 ?x0 .\nM4 P1 ?x1\n}",
    "expectedResponse": "No",
    "recursionDepth": 44
  },
  {
    "questionIdx": 97423,
    "questionWithBrackets": "Was a film distributor that was founded by [John Ju]'s employer's founder and employed [Fred Graver] and [David T. Cassaro] [CBS]",
    "questionPatternModEntities": "Was a film distributor that was founded by M0 's employer 's founder and employed M3 and M4 M1",
    "questionTemplate": "Was a [NP_SIMPLE] that was [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE] and [VP_SIMPLE] [entity] and [entity] [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:organization.organization_founder.organizations_founded ?x1 .\n?x1 ns:business.employer.employees/ns:business.employment_tenure.person ns:m.02z_mbk .\nns:m.09d5h a ns:film.film_distributor .\nns:m.09d5h ns:business.employer.employees/ns:business.employment_tenure.person ns:m.04h_k3f .\nns:m.09d5h ns:business.employer.employees/ns:business.employment_tenure.person ns:m.092b80 .\nns:m.09d5h ns:organization.organization.founders ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x1 P1 M0 .\nM1 P1 M3 .\nM1 P1 M4 .\nM1 P2 ?x0 .\nM1 a M2\n}",
    "expectedResponse": "No",
    "recursionDepth": 44
  },
  {
    "questionIdx": 235444,
    "questionWithBrackets": "Who was influenced by [Arizona Motel Clerk]'s actor's sibling, was influenced by [Edmund Husserl], and was influenced by [Karl Marx]",
    "questionPatternModEntities": "Who was influenced by M3 's actor 's sibling , was influenced by M1 , and was influenced by M2",
    "questionTemplate": "Who was [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE] , was [VP_SIMPLE] by [entity] , and was [VP_SIMPLE] by [entity]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:people.person .\n?x0 ns:influence.influence_node.influenced_by ?x1 .\n?x0 ns:influence.influence_node.influenced_by ns:m.02ln1 .\n?x0 ns:influence.influence_node.influenced_by ns:m.048cl .\n?x1 ns:people.person.sibling_s/ns:people.sibling_relationship.sibling|ns:fictional_universe.fictional_character.siblings/ns:fictional_universe.sibling_relationship_of_fictional_characters.siblings ?x2 .\n?x2 ns:film.actor.film/ns:film.performance.character ns:m.0yq97cz .\nFILTER ( ?x1 != ?x2 )\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 a M0 .\n?x1 P1 ?x2 .\n?x2 P2 M3 .\nFILTER ( ?x1 != ?x2 )\n}",
    "expectedResponse": "Pierre Bourdieu; Michel Foucault",
    "recursionDepth": 44
  },
  {
    "questionIdx": 120859,
    "questionWithBrackets": "Were [Martin McDonagh] and [Garret Schuelke] influenced by a star and cinematographer of [Death Proof] and influenced by an executive producer of [Twin Peaks: Fire Walk With Me]",
    "questionPatternModEntities": "Were M2 and M3 influenced by a star and cinematographer of M1 and influenced by a executive producer of M0",
    "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by a [ROLE_SIMPLE] and [ROLE_SIMPLE] of [entity] and [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.producer.films_executive_produced ns:m.01kjr0 .\n?x1 ns:film.actor.film/ns:film.performance.film ns:m.03bxrfl .\n?x1 ns:film.cinematographer.film ns:m.03bxrfl .\nns:m.040rjq ns:influence.influence_node.influenced_by ?x0 .\nns:m.040rjq ns:influence.influence_node.influenced_by ?x1 .\nns:m.066b7gk ns:influence.influence_node.influenced_by ?x0 .\nns:m.066b7gk ns:influence.influence_node.influenced_by ?x1\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x1 P1 M1 .\n?x1 P2 M1 .\nM2 P3 ?x0 .\nM2 P3 ?x1 .\nM3 P3 ?x0 .\nM3 P3 ?x1\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 44
  },
  {
    "questionIdx": 215287,
    "questionWithBrackets": "Who did [Warren Plath]'s female German sibling influence and [The Prince and the Showgirl]'s female executive producer influence",
    "questionPatternModEntities": "Who did M1 's female German sibling influence and M4 's female executive producer influence",
    "questionTemplate": "Who did [entity] 's [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] [VP_SIMPLE] and [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] [VP_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:people.person .\n?x0 ns:influence.influence_node.influenced_by ?x1 .\n?x0 ns:influence.influence_node.influenced_by ?x2 .\n?x1 ns:people.person.gender ns:m.02zsn .\n?x1 ns:people.person.nationality ns:m.0345h .\n?x1 ns:people.person.sibling_s/ns:people.sibling_relationship.sibling|ns:fictional_universe.fictional_character.siblings/ns:fictional_universe.sibling_relationship_of_fictional_characters.siblings ns:m.05n4tpw .\n?x2 ns:film.producer.films_executive_produced ns:m.06cv63 .\n?x2 ns:people.person.gender ns:m.02zsn .\nFILTER ( ?x1 != ns:m.05n4tpw )\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P0 ?x2 .\n?x0 a M0 .\n?x1 P1 M1 .\n?x1 P2 M2 .\n?x1 P3 M3 .\n?x2 P3 M3 .\n?x2 P4 M4 .\nFILTER ( ?x1 != M1 )\n}",
    "expectedResponse": "Madonna",
    "recursionDepth": 44
  },
  {
    "questionIdx": 183530,
    "questionWithBrackets": "What was produced, directed, executive produced, written, and edited by an executive producer of [Che: Rise & Fall] and [La Raulito, Low Blows]",
    "questionPatternModEntities": "What was produced , directed , executive produced , written , and edited by a executive producer of M0 and M1",
    "questionTemplate": "What was [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity] and [entity]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.film.directed_by ?x1 .\n?x0 ns:film.film.edited_by ?x1 .\n?x0 ns:film.film.executive_produced_by ?x1 .\n?x0 ns:film.film.produced_by|ns:film.film.production_companies ?x1 .\n?x0 ns:film.film.written_by ?x1 .\n?x1 ns:film.producer.films_executive_produced ns:m.080gfks .\n?x1 ns:film.producer.films_executive_produced ns:m.0qsdn24\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x0 P3 ?x1 .\n?x0 P4 ?x1 .\n?x1 P5 M0 .\n?x1 P5 M1\n}",
    "expectedResponse": "Rita Dove: An American Poet",
    "recursionDepth": 44
  },
  {
    "questionIdx": 237625,
    "questionWithBrackets": "Who was influenced by [Tom Waits], influenced by [Mickey Spillane] and [David Lynch], and influenced by [Studio Ghibli]'s employee and founder",
    "questionPatternModEntities": "Who was influenced by M1 , influenced by M2 and M3 , and influenced by M4 's employee and founder",
    "questionTemplate": "Who was [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] and [entity] , and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] and [ROLE_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:people.person .\n?x0 ns:influence.influence_node.influenced_by ?x1 .\n?x0 ns:influence.influence_node.influenced_by ns:m.012cy5 .\n?x0 ns:influence.influence_node.influenced_by ns:m.026dx .\n?x0 ns:influence.influence_node.influenced_by ns:m.03h_fqv .\n?x1 ns:organization.organization_founder.organizations_founded ns:m.0130kc .\n?x1 ns:people.person.employment_history/ns:business.employment_tenure.company ns:m.0130kc\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P0 M3 .\n?x0 a M0 .\n?x1 P1 M4 .\n?x1 P2 M4\n}",
    "expectedResponse": "Garret Schuelke",
    "recursionDepth": 44
  },
  {
    "questionIdx": 125829,
    "questionWithBrackets": "Were [The Big Lebowski] and [A Serious Man] executive produced by an actor, edited by [Racer Rodr\u00edguez]'s parent, and edited by [Ethan Coen]",
    "questionPatternModEntities": "Were M2 and M4 executive produced by a actor , edited by M1 's parent , and edited by M3",
    "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by a [NP_SIMPLE] , [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] , and [VP_SIMPLE] by [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 a ns:film.actor .\n?x1 ns:people.person.children|ns:fictional_universe.fictional_character.children|ns:organization.organization.child/ns:organization.organization_relationship.child ns:m.0k4906 .\nns:m.02r1c18 ns:film.film.edited_by ?x1 .\nns:m.02r1c18 ns:film.film.edited_by ns:m.02kxbwx .\nns:m.02r1c18 ns:film.film.executive_produced_by ?x0 .\nns:m.07bwr ns:film.film.edited_by ?x1 .\nns:m.07bwr ns:film.film.edited_by ns:m.02kxbwx .\nns:m.07bwr ns:film.film.executive_produced_by ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 a M0 .\n?x1 P0 M1 .\nM2 P1 ?x0 .\nM2 P2 ?x1 .\nM2 P2 M3 .\nM4 P1 ?x0 .\nM4 P2 ?x1 .\nM4 P2 M3\n}",
    "expectedResponse": "No",
    "recursionDepth": 44
  },
  {
    "questionIdx": 118427,
    "questionWithBrackets": "Were [Inquietude [light Version]] and [Samad dar rah ejdeha] executive produced by, edited by, and directed by [Samad dar-be-dar mishavad]'s director, star, and executive producer",
    "questionPatternModEntities": "Were M1 and M2 executive produced by , edited by , and directed by M0 's director , star , and executive producer",
    "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] , [ROLE_SIMPLE] , and [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.actor.film/ns:film.performance.film ns:g.12qhk8l3t .\n?x0 ns:film.director.film ns:g.12qhk8l3t .\n?x0 ns:film.producer.films_executive_produced ns:g.12qhk8l3t .\nns:g.121_c37n ns:film.film.directed_by ?x0 .\nns:g.121_c37n ns:film.film.edited_by ?x0 .\nns:g.121_c37n ns:film.film.executive_produced_by ?x0 .\nns:m.011qztzx ns:film.film.directed_by ?x0 .\nns:m.011qztzx ns:film.film.edited_by ?x0 .\nns:m.011qztzx ns:film.film.executive_produced_by ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M0 .\n?x0 P2 M0 .\nM1 P3 ?x0 .\nM1 P4 ?x0 .\nM1 P5 ?x0 .\nM2 P3 ?x0 .\nM2 P4 ?x0 .\nM2 P5 ?x0\n}",
    "expectedResponse": "No",
    "recursionDepth": 44
  },
  {
    "questionIdx": 231398,
    "questionWithBrackets": "Who was a male Swedish cinematographer that was employed by [Royal Dramatic Theatre] and was employed by [Residenz Theatre]",
    "questionPatternModEntities": "Who was a male Swedish cinematographer that was employed by M2 and was employed by M3",
    "questionTemplate": "Who was a [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [NP_SIMPLE] that was [VP_SIMPLE] by [entity] and was [VP_SIMPLE] by [entity]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:film.cinematographer .\n?x0 a ns:people.person .\n?x0 ns:people.person.employment_history/ns:business.employment_tenure.company ns:m.02qg49s .\n?x0 ns:people.person.employment_history/ns:business.employment_tenure.company ns:m.09rcs7 .\n?x0 ns:people.person.gender ns:m.05zppz .\n?x0 ns:people.person.nationality ns:m.0d0vqn\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M2 .\n?x0 P0 M3 .\n?x0 P1 M4 .\n?x0 P2 M5 .\n?x0 a M0 .\n?x0 a M1\n}",
    "expectedResponse": "Ingmar Bergman",
    "recursionDepth": 44
  },
  {
    "questionIdx": 119536,
    "questionWithBrackets": "Were [Kasal, Kasali, Kasalo] and [Love Begins with One Hello] executive produced by [Vic Sotto] and [Malou N. Santos] and directed by a film's director and writer",
    "questionPatternModEntities": "Were M1 and M4 executive produced by M2 and M3 and directed by a film 's director and writer",
    "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by [entity] and [entity] and [VP_SIMPLE] by a [NP_SIMPLE] 's [ROLE_SIMPLE] and [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.director.film ?x1 .\n?x0 ns:film.writer.film ?x1 .\n?x1 a ns:film.film .\nns:m.027d5dt ns:film.film.directed_by ?x0 .\nns:m.027d5dt ns:film.film.executive_produced_by ns:m.0bffb2d .\nns:m.027d5dt ns:film.film.executive_produced_by ns:m.0gvyx6 .\nns:m.04jkwnh ns:film.film.directed_by ?x0 .\nns:m.04jkwnh ns:film.film.executive_produced_by ns:m.0bffb2d .\nns:m.04jkwnh ns:film.film.executive_produced_by ns:m.0gvyx6\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x1 a M0 .\nM1 P2 M2 .\nM1 P2 M3 .\nM1 P3 ?x0 .\nM4 P2 M2 .\nM4 P2 M3 .\nM4 P3 ?x0\n}",
    "expectedResponse": "No",
    "recursionDepth": 44
  },
  {
    "questionIdx": 176594,
    "questionWithBrackets": "What was executive produced by [Ivan Rehder], written by a costume designer, and executive produced by a male actor",
    "questionPatternModEntities": "What was executive produced by M0 , written by a costume designer , and executive produced by a male actor",
    "questionTemplate": "What was [VP_SIMPLE] by [entity] , [VP_SIMPLE] by a [NP_SIMPLE] , and [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [NP_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.film.executive_produced_by ?x1 .\n?x0 ns:film.film.executive_produced_by ns:m.0hh2bk2 .\n?x0 ns:film.film.written_by ?x2 .\n?x1 a ns:film.actor .\n?x1 ns:people.person.gender ns:m.05zppz .\n?x2 a ns:film.film_costumer_designer\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P0 M0 .\n?x0 P1 ?x2 .\n?x1 P2 M2 .\n?x1 a M1 .\n?x2 a M3\n}",
    "expectedResponse": "Bright Day!",
    "recursionDepth": 44
  },
  {
    "questionIdx": 129443,
    "questionWithBrackets": "Were [Welcome to the Rileys], [Yatzy], [All That Matters Is Past], [Through A Glass, Darkly], and [90 Minutes] executive produced by a film editor and executive produced by a screenwriter",
    "questionPatternModEntities": "Were M2 , M3 , M4 , M5 , and M6 executive produced by a film editor and executive produced by a screenwriter",
    "questionTemplate": "Were [entity] , [entity] , [entity] , [entity] , and [entity] [VP_SIMPLE] by a [NP_SIMPLE] and [VP_SIMPLE] by a [NP_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 a ns:film.writer .\n?x1 a ns:film.editor .\nns:m.04q86tb ns:film.film.executive_produced_by ?x0 .\nns:m.04q86tb ns:film.film.executive_produced_by ?x1 .\nns:m.0bdv8p3 ns:film.film.executive_produced_by ?x0 .\nns:m.0bdv8p3 ns:film.film.executive_produced_by ?x1 .\nns:m.0cjc8y7 ns:film.film.executive_produced_by ?x0 .\nns:m.0cjc8y7 ns:film.film.executive_produced_by ?x1 .\nns:m.0n5szc3 ns:film.film.executive_produced_by ?x0 .\nns:m.0n5szc3 ns:film.film.executive_produced_by ?x1 .\nns:m.0p79ptq ns:film.film.executive_produced_by ?x0 .\nns:m.0p79ptq ns:film.film.executive_produced_by ?x1\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 a M0 .\n?x1 a M1 .\nM2 P0 ?x0 .\nM2 P0 ?x1 .\nM3 P0 ?x0 .\nM3 P0 ?x1 .\nM4 P0 ?x0 .\nM4 P0 ?x1 .\nM5 P0 ?x0 .\nM5 P0 ?x1 .\nM6 P0 ?x0 .\nM6 P0 ?x1\n}",
    "expectedResponse": "No",
    "recursionDepth": 44
  },
  {
    "questionIdx": 57643,
    "questionWithBrackets": "Was [H. Jon Benjamin] influenced by a costume designer and star of [Chimes at Midnight] and influenced by an employee of [KJOE] and [WTHR]",
    "questionPatternModEntities": "Was M3 influenced by a costume designer and star of M2 and influenced by a employee of M0 and M1",
    "questionTemplate": "Was [entity] [VP_SIMPLE] by a [ROLE_SIMPLE] and [ROLE_SIMPLE] of [entity] and [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity] and [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:people.person.employment_history/ns:business.employment_tenure.company ns:m.06l8j5 .\n?x0 ns:people.person.employment_history/ns:business.employment_tenure.company ns:m.07k4byy .\n?x1 ns:film.actor.film/ns:film.performance.film ns:m.07jpg0 .\n?x1 ns:film.film_costumer_designer.costume_design_for_film ns:m.07jpg0 .\nns:m.05rx__ ns:influence.influence_node.influenced_by ?x0 .\nns:m.05rx__ ns:influence.influence_node.influenced_by ?x1\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x1 P1 M2 .\n?x1 P2 M2 .\nM3 P3 ?x0 .\nM3 P3 ?x1\n}",
    "expectedResponse": "No",
    "recursionDepth": 44
  },
  {
    "questionIdx": 178805,
    "questionWithBrackets": "What was executive produced by, produced by, edited by, written by, and directed by a cinematographer of [The Weight of Chains]",
    "questionPatternModEntities": "What was executive produced by , produced by , edited by , written by , and directed by a cinematographer of M0",
    "questionTemplate": "What was [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.film.directed_by ?x1 .\n?x0 ns:film.film.edited_by ?x1 .\n?x0 ns:film.film.executive_produced_by ?x1 .\n?x0 ns:film.film.produced_by|ns:film.film.production_companies ?x1 .\n?x0 ns:film.film.written_by ?x1 .\n?x1 ns:film.cinematographer.film ns:m.0ds6ps9\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x0 P3 ?x1 .\n?x0 P4 ?x1 .\n?x1 P5 M0\n}",
    "expectedResponse": "The Presumption of Justice",
    "recursionDepth": 44
  },
  {
    "questionIdx": 752,
    "questionWithBrackets": "Did [Alan Becker] edit, write, executive produce, produce, and direct a prequel of [Animator vs Animation 3]",
    "questionPatternModEntities": "Did M1 edit , write , executive produce , produce , and direct a prequel of M0",
    "questionTemplate": "Did [entity] [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] a [ROLE_SIMPLE] of [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.film.sequel ns:m.010lfbym .\nns:m.0108mkjv ns:film.director.film ?x0 .\nns:m.0108mkjv ns:film.editor.film ?x0 .\nns:m.0108mkjv ns:film.producer.films_executive_produced ?x0 .\nns:m.0108mkjv ns:film.producer.film|ns:film.production_company.films ?x0 .\nns:m.0108mkjv ns:film.writer.film ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 ?x0 .\nM1 P2 ?x0 .\nM1 P3 ?x0 .\nM1 P4 ?x0 .\nM1 P5 ?x0\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 44
  },
  {
    "questionIdx": 181963,
    "questionWithBrackets": "What was produced by a Dutch founder of [Fortissimo Films], executive produced by [Meileen Choo], and executive produced by [Pawadee Chantanom]",
    "questionPatternModEntities": "What was produced by a Dutch founder of M2 , executive produced by M0 , and executive produced by M1",
    "questionTemplate": "What was [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.film.executive_produced_by ns:m.0bff24x .\n?x0 ns:film.film.executive_produced_by ns:m.0bff254 .\n?x0 ns:film.film.produced_by|ns:film.film.production_companies ?x1 .\n?x1 ns:organization.organization_founder.organizations_founded ns:m.03d2c8d .\n?x1 ns:people.person.nationality ns:m.059j2\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P1 ?x1 .\n?x1 P2 M2 .\n?x1 P3 M3\n}",
    "expectedResponse": "Last Life in the Universe",
    "recursionDepth": 44
  },
  {
    "questionIdx": 82101,
    "questionWithBrackets": "Was [The Pawnshop] written, produced, and directed by a British actor whose spouse played [Allisa Randall]",
    "questionPatternModEntities": "Was M3 written , produced , and directed by a British actor whose spouse played M2",
    "questionTemplate": "Was [entity] [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [NP_SIMPLE] whose [ROLE_SIMPLE] [VP_SIMPLE] [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 a ns:film.actor .\n?x0 ns:people.person.nationality ns:m.07ssc .\n?x0 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ?x1 .\n?x1 ns:film.actor.film/ns:film.performance.character ns:m.0s91n2_ .\nFILTER ( ?x0 != ?x1 ) .\nns:m.07m2js ns:film.film.directed_by ?x0 .\nns:m.07m2js ns:film.film.produced_by|ns:film.film.production_companies ?x0 .\nns:m.07m2js ns:film.film.written_by ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M1 .\n?x0 P1 ?x1 .\n?x0 a M0 .\n?x1 P2 M2 .\nFILTER ( ?x0 != ?x1 ) .\nM3 P3 ?x0 .\nM3 P4 ?x0 .\nM3 P5 ?x0\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 44
  },
  {
    "questionIdx": 225102,
    "questionWithBrackets": "Who was a British film director whose parent influenced [Poppy Z. Brite] and was influenced by [Joseph Conrad] and [Henry James]",
    "questionPatternModEntities": "Who was a British film director whose parent influenced M3 and was influenced by M4 and M5",
    "questionTemplate": "Who was a [ADJECTIVE_SIMPLE] [NP_SIMPLE] whose [ROLE_SIMPLE] [VP_SIMPLE] [entity] and was [VP_SIMPLE] by [entity] and [entity]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:film.director .\n?x0 a ns:people.person .\n?x0 ns:people.person.nationality ns:m.07ssc .\n?x0 ns:people.person.parents|ns:fictional_universe.fictional_character.parents|ns:organization.organization.parent/ns:organization.organization_relationship.parent ?x1 .\n?x1 ns:influence.influence_node.influenced ns:m.0n8cg .\n?x1 ns:influence.influence_node.influenced_by ns:m.040_9 .\n?x1 ns:influence.influence_node.influenced_by ns:m.0l99s\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M2 .\n?x0 P1 ?x1 .\n?x0 a M0 .\n?x0 a M1 .\n?x1 P2 M3 .\n?x1 P3 M4 .\n?x1 P3 M5\n}",
    "expectedResponse": "Louis Theroux",
    "recursionDepth": 44
  },
  {
    "questionIdx": 2235,
    "questionWithBrackets": "Did [Before Night Falls] star [Walkover]'s sequel's writer and art director, star [Antonio Zavala], and star [Lois Barrag\u00e1n]",
    "questionPatternModEntities": "Did M1 star M0 's sequel 's writer and art director , star M2 , and star M3",
    "questionTemplate": "Did [entity] [VP_SIMPLE] [entity] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE] and [ROLE_SIMPLE] , [VP_SIMPLE] [entity] , and [VP_SIMPLE] [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.film_art_director.films_art_directed ?x1 .\n?x0 ns:film.writer.film ?x1 .\n?x1 ns:film.film.prequel ns:m.0h_c2zg .\nns:m.0clh4y ns:film.film.starring/ns:film.performance.actor ?x0 .\nns:m.0clh4y ns:film.film.starring/ns:film.performance.actor ns:m.0gc5xdj .\nns:m.0clh4y ns:film.film.starring/ns:film.performance.actor ns:m.0w9jz4g\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x1 P2 M0 .\nM1 P3 ?x0 .\nM1 P3 M2 .\nM1 P3 M3\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 44
  },
  {
    "questionIdx": 10427,
    "questionWithBrackets": "Did [Iron Man 2] star a film producer, star an art director of [Rushmore], and star [Jennifer Lynne Johnson] and [Kylette Zamora]",
    "questionPatternModEntities": "Did M2 star a film producer , star a art director of M0 , and star M3 and M4",
    "questionTemplate": "Did [entity] [VP_SIMPLE] a [NP_SIMPLE] , [VP_SIMPLE] a [ROLE_SIMPLE] of [entity] , and [VP_SIMPLE] [entity] and [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.film_art_director.films_art_directed ns:m.024lt6 .\n?x1 a ns:film.producer .\nns:m.05qbckf ns:film.film.starring/ns:film.performance.actor ?x0 .\nns:m.05qbckf ns:film.film.starring/ns:film.performance.actor ?x1 .\nns:m.05qbckf ns:film.film.starring/ns:film.performance.actor ns:m.0p97bft .\nns:m.05qbckf ns:film.film.starring/ns:film.performance.actor ns:m.0y5dr7q\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x1 a M1 .\nM2 P1 ?x0 .\nM2 P1 ?x1 .\nM2 P1 M3 .\nM2 P1 M4\n}",
    "expectedResponse": "No",
    "recursionDepth": 44
  },
  {
    "questionIdx": 85279,
    "questionWithBrackets": "Was [Viagem na Chuva] written, directed, edited, produced, and executive produced by [Far West: A True Western]'s editor and art director",
    "questionPatternModEntities": "Was M1 written , directed , edited , produced , and executive produced by M0 's editor and art director",
    "questionTemplate": "Was [entity] [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] and [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.editor.film ns:m.0107hywx .\n?x0 ns:film.film_art_director.films_art_directed ns:m.0107hywx .\nns:m.011p1tds ns:film.film.directed_by ?x0 .\nns:m.011p1tds ns:film.film.edited_by ?x0 .\nns:m.011p1tds ns:film.film.executive_produced_by ?x0 .\nns:m.011p1tds ns:film.film.produced_by|ns:film.film.production_companies ?x0 .\nns:m.011p1tds ns:film.film.written_by ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M0 .\nM1 P2 ?x0 .\nM1 P3 ?x0 .\nM1 P4 ?x0 .\nM1 P5 ?x0 .\nM1 P6 ?x0\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 44
  },
  {
    "questionIdx": 208737,
    "questionWithBrackets": "Which person was influenced by a person, married [Marjorie Bonner], and was influenced by [Nikolai Dostoyevsky]'s sibling",
    "questionPatternModEntities": "Which person was influenced by a person , married M1 , and was influenced by M2 's sibling",
    "questionTemplate": "Which [NP_SIMPLE] was [VP_SIMPLE] by a [NP_SIMPLE] , [VP_SIMPLE] [entity] , and was [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:people.person .\n?x0 ns:influence.influence_node.influenced_by ?x1 .\n?x0 ns:influence.influence_node.influenced_by ?x2 .\n?x0 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ns:m.09v84d4 .\n?x1 ns:people.person.sibling_s/ns:people.sibling_relationship.sibling|ns:fictional_universe.fictional_character.siblings/ns:fictional_universe.sibling_relationship_of_fictional_characters.siblings ns:m.0rbdkgn .\n?x2 a ns:people.person .\nFILTER ( ?x0 != ns:m.09v84d4 ) .\nFILTER ( ?x1 != ns:m.0rbdkgn )\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P0 ?x2 .\n?x0 P1 M1 .\n?x0 a M0 .\n?x1 P2 M2 .\n?x2 a M0 .\nFILTER ( ?x0 != M1 ) .\nFILTER ( ?x1 != M2 )\n}",
    "expectedResponse": "Malcolm Lowry",
    "recursionDepth": 44
  },
  {
    "questionIdx": 119267,
    "questionWithBrackets": "Were [Joe Velikovsky] and [David Foster Wallace] influenced by [Don DeLillo] and [Franz Kafka] and influenced by [Eraserhead]'s editor, director, and art director",
    "questionPatternModEntities": "Were M1 and M4 influenced by M2 and M3 and influenced by M0 's editor , director , and art director",
    "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by [entity] and [entity] and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] , [ROLE_SIMPLE] , and [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.director.film ns:m.027jhb .\n?x0 ns:film.editor.film ns:m.027jhb .\n?x0 ns:film.film_art_director.films_art_directed ns:m.027jhb .\nns:m.065zt7y ns:influence.influence_node.influenced_by ?x0 .\nns:m.065zt7y ns:influence.influence_node.influenced_by ns:m.03f0324 .\nns:m.065zt7y ns:influence.influence_node.influenced_by ns:m.0n6kf .\nns:m.0cbgl ns:influence.influence_node.influenced_by ?x0 .\nns:m.0cbgl ns:influence.influence_node.influenced_by ns:m.03f0324 .\nns:m.0cbgl ns:influence.influence_node.influenced_by ns:m.0n6kf\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M0 .\n?x0 P2 M0 .\nM1 P3 ?x0 .\nM1 P3 M2 .\nM1 P3 M3 .\nM4 P3 ?x0 .\nM4 P3 M2 .\nM4 P3 M3\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 44
  },
  {
    "questionIdx": 120331,
    "questionWithBrackets": "Were [Loneliness Is Soul] and [It's Not About the Shawerma] directed by, written by, and executive produced by [Blues for the Avatar]'s executive producer, editor, and director",
    "questionPatternModEntities": "Were M1 and M2 directed by , written by , and executive produced by M0 's executive producer , editor , and director",
    "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] , [ROLE_SIMPLE] , and [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.director.film ns:m.0znn7j_ .\n?x0 ns:film.editor.film ns:m.0znn7j_ .\n?x0 ns:film.producer.films_executive_produced ns:m.0znn7j_ .\nns:m.0zd5p8f ns:film.film.directed_by ?x0 .\nns:m.0zd5p8f ns:film.film.executive_produced_by ?x0 .\nns:m.0zd5p8f ns:film.film.written_by ?x0 .\nns:m.0zztylq ns:film.film.directed_by ?x0 .\nns:m.0zztylq ns:film.film.executive_produced_by ?x0 .\nns:m.0zztylq ns:film.film.written_by ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M0 .\n?x0 P2 M0 .\nM1 P3 ?x0 .\nM1 P4 ?x0 .\nM1 P5 ?x0 .\nM2 P3 ?x0 .\nM2 P4 ?x0 .\nM2 P5 ?x0\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 44
  },
  {
    "questionIdx": 173145,
    "questionWithBrackets": "What was edited by [Beatrice Murch]'s parent, directed by a costume designer of [Chimes at Midnight], and edited by [Virgil W. Vogel] and [Aaron Stell]",
    "questionPatternModEntities": "What was edited by M2 's parent , directed by a costume designer of M3 , and edited by M0 and M1",
    "questionTemplate": "What was [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] , [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity] , and [VP_SIMPLE] by [entity] and [entity]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.film.directed_by ?x1 .\n?x0 ns:film.film.edited_by ?x2 .\n?x0 ns:film.film.edited_by ns:m.0g5s84z .\n?x0 ns:film.film.edited_by ns:m.0k3935 .\n?x1 ns:film.film_costumer_designer.costume_design_for_film ns:m.07jpg0 .\n?x2 ns:people.person.children|ns:fictional_universe.fictional_character.children|ns:organization.organization.child/ns:organization.organization_relationship.child ns:m.0k3q6b6\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P1 ?x2 .\n?x1 P2 M2 .\n?x2 P3 M3\n}",
    "expectedResponse": "Touch of Evil",
    "recursionDepth": 45
  },
  {
    "questionIdx": 85660,
    "questionWithBrackets": "Was [Visions of Europe] directed by [Jean Genet Is Dead]'s cinematographer and art director, written by [Jean Pierre Magro], and produced by [Donatella Botti] and [Maria Jo\u00e3o Mayer]",
    "questionPatternModEntities": "Was M1 directed by M0 's cinematographer and art director , written by M2 , and produced by M3 and M4",
    "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] and [ROLE_SIMPLE] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity] and [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.cinematographer.film ns:m.0gybg9q .\n?x0 ns:film.film_art_director.films_art_directed ns:m.0gybg9q .\nns:m.0gkshd_ ns:film.film.directed_by ?x0 .\nns:m.0gkshd_ ns:film.film.produced_by|ns:film.film.production_companies ns:m.04qkwkn .\nns:m.0gkshd_ ns:film.film.produced_by|ns:film.film.production_companies ns:m.07m25ff .\nns:m.0gkshd_ ns:film.film.written_by ns:m.0w_gmwk\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M0 .\nM1 P2 M2 .\nM1 P3 M3 .\nM1 P3 M4 .\nM1 P4 ?x0\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 45
  },
  {
    "questionIdx": 14346,
    "questionWithBrackets": "Did [Massimo D'Anolfi] and [Andreas Gr\u00e4fenstein] executive produce, write, produce, direct, and edit a film",
    "questionPatternModEntities": "Did M1 and M2 executive produce , write , produce , direct , and edit a film",
    "questionTemplate": "Did [entity] and [entity] [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] a [NP_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 a ns:film.film .\nns:m.0gblv4f ns:film.director.film ?x0 .\nns:m.0gblv4f ns:film.editor.film ?x0 .\nns:m.0gblv4f ns:film.producer.films_executive_produced ?x0 .\nns:m.0gblv4f ns:film.producer.film|ns:film.production_company.films ?x0 .\nns:m.0gblv4f ns:film.writer.film ?x0 .\nns:m.0s96mm5 ns:film.director.film ?x0 .\nns:m.0s96mm5 ns:film.editor.film ?x0 .\nns:m.0s96mm5 ns:film.producer.films_executive_produced ?x0 .\nns:m.0s96mm5 ns:film.producer.film|ns:film.production_company.films ?x0 .\nns:m.0s96mm5 ns:film.writer.film ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 a M0 .\nM1 P0 ?x0 .\nM1 P1 ?x0 .\nM1 P2 ?x0 .\nM1 P3 ?x0 .\nM1 P4 ?x0 .\nM2 P0 ?x0 .\nM2 P1 ?x0 .\nM2 P2 ?x0 .\nM2 P3 ?x0 .\nM2 P4 ?x0\n}",
    "expectedResponse": "No",
    "recursionDepth": 45
  },
  {
    "questionIdx": 69550,
    "questionWithBrackets": "Was [No Strings Attached] executive produced by [Spyglass Entertainment]'s employee and founder and produced by a Canadian person's spouse",
    "questionPatternModEntities": "Was M3 executive produced by M0 's employee and founder and produced by a Canadian person 's spouse",
    "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] and [ROLE_SIMPLE] and [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [NP_SIMPLE] 's [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:organization.organization_founder.organizations_founded ns:m.05rrtf .\n?x0 ns:people.person.employment_history/ns:business.employment_tenure.company ns:m.05rrtf .\n?x1 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ?x2 .\n?x2 a ns:people.person .\n?x2 ns:people.person.nationality ns:m.0d060g .\nFILTER ( ?x1 != ?x2 ) .\nns:m.0dlkhvv ns:film.film.executive_produced_by ?x0 .\nns:m.0dlkhvv ns:film.film.produced_by|ns:film.film.production_companies ?x1\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M0 .\n?x1 P2 ?x2 .\n?x2 P3 M2 .\n?x2 a M1 .\nFILTER ( ?x1 != ?x2 ) .\nM3 P4 ?x0 .\nM3 P5 ?x1\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 45
  },
  {
    "questionIdx": 143378,
    "questionWithBrackets": "What did [FilmFlex] and [Lions Gate Entertainment] distribute, an editor and writer of [Earth Days] produce, and [Roadside Attractions] distribute",
    "questionPatternModEntities": "What did M0 and M1 distribute , a editor and writer of M3 produce , and M2 distribute",
    "questionTemplate": "What did [entity] and [entity] [VP_SIMPLE] , a [ROLE_SIMPLE] and [ROLE_SIMPLE] of [entity] [VP_SIMPLE] , and [entity] [VP_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.film.distributors/ns:film.film_film_distributor_relationship.distributor ns:m.03czrpj .\n?x0 ns:film.film.distributors/ns:film.film_film_distributor_relationship.distributor ns:m.03xq0f .\n?x0 ns:film.film.distributors/ns:film.film_film_distributor_relationship.distributor ns:m.03xsby .\n?x0 ns:film.film.produced_by|ns:film.film.production_companies ?x1 .\n?x1 ns:film.editor.film ns:m.05h2689 .\n?x1 ns:film.writer.film ns:m.05h2689\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P1 ?x1 .\n?x1 P2 M3 .\n?x1 P3 M3\n}",
    "expectedResponse": "The Conspirator",
    "recursionDepth": 45
  },
  {
    "questionIdx": 87391,
    "questionWithBrackets": "Was [Yamakasi] founded by a sibling of an actor, founded by [Alvin Ailey] and [Malik Diouf], and founded by [David Belle]",
    "questionPatternModEntities": "Was M1 founded by a sibling of a actor , founded by M2 and M3 , and founded by M4",
    "questionTemplate": "Was [entity] [VP_SIMPLE] by a [ROLE_SIMPLE] of a [NP_SIMPLE] , [VP_SIMPLE] by [entity] and [entity] , and [VP_SIMPLE] by [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:people.person.sibling_s/ns:people.sibling_relationship.sibling|ns:fictional_universe.fictional_character.siblings/ns:fictional_universe.sibling_relationship_of_fictional_characters.siblings ?x1 .\n?x1 a ns:film.actor .\nFILTER ( ?x0 != ?x1 ) .\nns:m.0dcys4 ns:organization.organization.founders ?x0 .\nns:m.0dcys4 ns:organization.organization.founders ns:m.02hkzh .\nns:m.0dcys4 ns:organization.organization.founders ns:m.05zc13 .\nns:m.0dcys4 ns:organization.organization.founders ns:m.0gdktpw\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x1 a M0 .\nFILTER ( ?x0 != ?x1 ) .\nM1 P1 ?x0 .\nM1 P1 M2 .\nM1 P1 M3 .\nM1 P1 M4\n}",
    "expectedResponse": "No",
    "recursionDepth": 45
  },
  {
    "questionIdx": 113675,
    "questionWithBrackets": "Were [Blues for the Avatar] and [It's Not About the Shawerma] executive produced by and written by a person that wrote and directed [Star Wars Holiday Special]",
    "questionPatternModEntities": "Were M2 and M3 executive produced by and written by a person that wrote and directed M1",
    "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by and [VP_SIMPLE] by a [NP_SIMPLE] that [VP_SIMPLE] and [VP_SIMPLE] [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 a ns:people.person .\n?x0 ns:film.director.film ns:m.0199wf .\n?x0 ns:film.writer.film ns:m.0199wf .\nns:m.0znn7j_ ns:film.film.executive_produced_by ?x0 .\nns:m.0znn7j_ ns:film.film.written_by ?x0 .\nns:m.0zztylq ns:film.film.executive_produced_by ?x0 .\nns:m.0zztylq ns:film.film.written_by ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M1 .\n?x0 P1 M1 .\n?x0 a M0 .\nM2 P2 ?x0 .\nM2 P3 ?x0 .\nM3 P2 ?x0 .\nM3 P3 ?x0\n}",
    "expectedResponse": "No",
    "recursionDepth": 45
  },
  {
    "questionIdx": 182140,
    "questionWithBrackets": "What was produced by a cinematographer, written by [David Kennard], and written by a founder and employee of [Video Arts]",
    "questionPatternModEntities": "What was produced by a cinematographer , written by M0 , and written by a founder and employee of M1",
    "questionTemplate": "What was [VP_SIMPLE] by a [NP_SIMPLE] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by a [ROLE_SIMPLE] and [ROLE_SIMPLE] of [entity]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.film.produced_by|ns:film.film.production_companies ?x1 .\n?x0 ns:film.film.written_by ?x2 .\n?x0 ns:film.film.written_by ns:m.0nftqp0 .\n?x1 a ns:film.cinematographer .\n?x2 ns:organization.organization_founder.organizations_founded ns:m.0d30j9 .\n?x2 ns:people.person.employment_history/ns:business.employment_tenure.company ns:m.0d30j9\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P0 M0 .\n?x0 P1 ?x2 .\n?x1 P2 M1 .\n?x1 P3 M1 .\n?x2 a M2\n}",
    "expectedResponse": "Wine for the Confused",
    "recursionDepth": 45
  },
  {
    "questionIdx": 238691,
    "questionWithBrackets": "Who was influenced by a writer of [Getting Acquainted] and [His Favourite Pastime], influenced by [Nipsey Russell], and influenced by [Fun and Fancy Free]'s star",
    "questionPatternModEntities": "Who was influenced by a writer of M2 and M3 , influenced by M1 , and influenced by M4 's star",
    "questionTemplate": "Who was [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity] and [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:people.person .\n?x0 ns:influence.influence_node.influenced_by ?x1 .\n?x0 ns:influence.influence_node.influenced_by ?x2 .\n?x0 ns:influence.influence_node.influenced_by ns:m.04ct6p .\n?x1 ns:film.writer.film ns:m.02rd2jv .\n?x1 ns:film.writer.film ns:m.02rd8fr .\n?x2 ns:film.actor.film/ns:film.performance.film ns:m.054rdz\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P0 ?x2 .\n?x0 P0 M1 .\n?x0 a M0 .\n?x1 P1 M2 .\n?x1 P1 M3 .\n?x2 P2 M4\n}",
    "expectedResponse": "Michael Jackson",
    "recursionDepth": 45
  },
  {
    "questionIdx": 176993,
    "questionWithBrackets": "What was executive produced by [Mother and Child]'s art director and star, executive produced by a person, and written by [Elan Mastai]",
    "questionPatternModEntities": "What was executive produced by M1 's art director and star , executive produced by a person , and written by M0",
    "questionTemplate": "What was [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] and [ROLE_SIMPLE] , [VP_SIMPLE] by a [NP_SIMPLE] , and [VP_SIMPLE] by [entity]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.film.executive_produced_by ?x1 .\n?x0 ns:film.film.executive_produced_by ?x2 .\n?x0 ns:film.film.written_by ns:m.0jtbsz .\n?x1 ns:film.actor.film/ns:film.performance.film ns:m.064mg8g .\n?x1 ns:film.film_art_director.films_art_directed ns:m.064mg8g .\n?x2 a ns:people.person\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P0 ?x2 .\n?x0 P1 M0 .\n?x1 P2 M1 .\n?x1 P3 M1 .\n?x2 a M2\n}",
    "expectedResponse": "The Samaritan",
    "recursionDepth": 45
  },
  {
    "questionIdx": 236678,
    "questionWithBrackets": "Who was influenced by [Manhattan Murder Mystery]'s director, was influenced by a film producer, and influenced [Ron Bennington] and [Artie Lange]",
    "questionPatternModEntities": "Who was influenced by M3 's director , was influenced by a film producer , and influenced M1 and M2",
    "questionTemplate": "Who was [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] , was [VP_SIMPLE] by a [NP_SIMPLE] , and [VP_SIMPLE] [entity] and [entity]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:people.person .\n?x0 ns:influence.influence_node.influenced ns:m.01xwqn .\n?x0 ns:influence.influence_node.influenced ns:m.077vqz .\n?x0 ns:influence.influence_node.influenced_by ?x1 .\n?x0 ns:influence.influence_node.influenced_by ?x2 .\n?x1 ns:film.director.film ns:m.04k9yp .\n?x2 a ns:film.producer\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P1 ?x1 .\n?x0 P1 ?x2 .\n?x0 a M0 .\n?x1 P2 M3 .\n?x2 a M4\n}",
    "expectedResponse": "Bill Hicks",
    "recursionDepth": 45
  },
  {
    "questionIdx": 125572,
    "questionWithBrackets": "Were [Tetsuo: The Iron Man] and [A Snake of June] produced by, edited by, and directed by a star, writer, and art director of [Tetsuo II: Body Hammer]",
    "questionPatternModEntities": "Were M1 and M2 produced by , edited by , and directed by a star , writer , and art director of M0",
    "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by a [ROLE_SIMPLE] , [ROLE_SIMPLE] , and [ROLE_SIMPLE] of [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.actor.film/ns:film.performance.film ns:m.0brs6b .\n?x0 ns:film.film_art_director.films_art_directed ns:m.0brs6b .\n?x0 ns:film.writer.film ns:m.0brs6b .\nns:m.03m9g_y ns:film.film.directed_by ?x0 .\nns:m.03m9g_y ns:film.film.edited_by ?x0 .\nns:m.03m9g_y ns:film.film.produced_by|ns:film.film.production_companies ?x0 .\nns:m.05m0x0 ns:film.film.directed_by ?x0 .\nns:m.05m0x0 ns:film.film.edited_by ?x0 .\nns:m.05m0x0 ns:film.film.produced_by|ns:film.film.production_companies ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M0 .\n?x0 P2 M0 .\nM1 P3 ?x0 .\nM1 P4 ?x0 .\nM1 P5 ?x0 .\nM2 P3 ?x0 .\nM2 P4 ?x0 .\nM2 P5 ?x0\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 45
  },
  {
    "questionIdx": 118385,
    "questionWithBrackets": "Were [Inglourious Basterds] and [Death Proof] written by [Quentin Tarantino], edited by [Elizabeth Rowin]'s spouse, and executive produced by [Harvey Weinstein] and [Bob Weinstein]",
    "questionPatternModEntities": "Were M1 and M5 written by M4 , edited by M0 's spouse , and executive produced by M2 and M3",
    "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] , and [VP_SIMPLE] by [entity] and [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ns:m.0gxbq_f .\nFILTER ( ?x0 != ns:m.0gxbq_f ) .\nns:m.02yvct ns:film.film.edited_by ?x0 .\nns:m.02yvct ns:film.film.executive_produced_by ns:m.05hj_k .\nns:m.02yvct ns:film.film.executive_produced_by ns:m.06q8hf .\nns:m.02yvct ns:film.film.written_by ns:m.0693l .\nns:m.03bxrfl ns:film.film.edited_by ?x0 .\nns:m.03bxrfl ns:film.film.executive_produced_by ns:m.05hj_k .\nns:m.03bxrfl ns:film.film.executive_produced_by ns:m.06q8hf .\nns:m.03bxrfl ns:film.film.written_by ns:m.0693l\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nFILTER ( ?x0 != M0 ) .\nM1 P1 M2 .\nM1 P1 M3 .\nM1 P2 M4 .\nM1 P3 ?x0 .\nM5 P1 M2 .\nM5 P1 M3 .\nM5 P2 M4 .\nM5 P3 ?x0\n}",
    "expectedResponse": "No",
    "recursionDepth": 45
  },
  {
    "questionIdx": 193497,
    "questionWithBrackets": "Which actor was influenced by [Friedrich Nietzsche], influenced by [Walter Benjamin], and influenced by a company's parent's employee",
    "questionPatternModEntities": "Which actor was influenced by M1 , influenced by M2 , and influenced by a company 's parent 's employee",
    "questionTemplate": "Which [NP_SIMPLE] was [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by a [NP_SIMPLE] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:film.actor .\n?x0 ns:influence.influence_node.influenced_by ?x1 .\n?x0 ns:influence.influence_node.influenced_by ns:m.01h2_6 .\n?x0 ns:influence.influence_node.influenced_by ns:m.02wh0 .\n?x1 ns:people.person.employment_history/ns:business.employment_tenure.company ?x2 .\n?x2 ns:people.person.children|ns:fictional_universe.fictional_character.children|ns:organization.organization.child/ns:organization.organization_relationship.child ?x3 .\n?x3 a ns:business.employer\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 a M0 .\n?x1 P1 ?x2 .\n?x2 P2 ?x3 .\n?x3 a M3\n}",
    "expectedResponse": "Giorgio Agamben; Avital Ronell",
    "recursionDepth": 45
  },
  {
    "questionIdx": 130551,
    "questionWithBrackets": "Were [yogendrachavda] and [Yogendra Chavda] influenced by [Mark Zuckerberg] and [Bill Gates] and influenced by a founder and employee of a production company",
    "questionPatternModEntities": "Were M1 and M4 influenced by M2 and M3 and influenced by a founder and employee of a production company",
    "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by [entity] and [entity] and [VP_SIMPLE] by a [ROLE_SIMPLE] and [ROLE_SIMPLE] of a [NP_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:organization.organization_founder.organizations_founded ?x1 .\n?x0 ns:people.person.employment_history/ns:business.employment_tenure.company ?x1 .\n?x1 a ns:film.production_company .\nns:m.0_h979x ns:influence.influence_node.influenced_by ?x0 .\nns:m.0_h979x ns:influence.influence_node.influenced_by ns:m.017nt .\nns:m.0_h979x ns:influence.influence_node.influenced_by ns:m.086dny .\nns:m.0_kvlrg ns:influence.influence_node.influenced_by ?x0 .\nns:m.0_kvlrg ns:influence.influence_node.influenced_by ns:m.017nt .\nns:m.0_kvlrg ns:influence.influence_node.influenced_by ns:m.086dny\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x1 a M0 .\nM1 P2 ?x0 .\nM1 P2 M2 .\nM1 P2 M3 .\nM4 P2 ?x0 .\nM4 P2 M2 .\nM4 P2 M3\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 45
  },
  {
    "questionIdx": 236851,
    "questionWithBrackets": "Who was influenced by [Orson Welles], influenced by an editor and producer of [Killer's Kiss], and influenced by a costume designer",
    "questionPatternModEntities": "Who was influenced by M1 , influenced by a editor and producer of M3 , and influenced by a costume designer",
    "questionTemplate": "Who was [VP_SIMPLE] by [entity] , [VP_SIMPLE] by a [ROLE_SIMPLE] and [ROLE_SIMPLE] of [entity] , and [VP_SIMPLE] by a [NP_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:people.person .\n?x0 ns:influence.influence_node.influenced_by ?x1 .\n?x0 ns:influence.influence_node.influenced_by ?x2 .\n?x0 ns:influence.influence_node.influenced_by ns:m.05kh_ .\n?x1 a ns:film.film_costumer_designer .\n?x2 ns:film.editor.film ns:m.046639 .\n?x2 ns:film.producer.film|ns:film.production_company.films ns:m.046639\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P0 ?x2 .\n?x0 P0 M1 .\n?x0 a M0 .\n?x1 a M2 .\n?x2 P1 M3 .\n?x2 P2 M3\n}",
    "expectedResponse": "Wes Anderson",
    "recursionDepth": 45
  },
  {
    "questionIdx": 125038,
    "questionWithBrackets": "Were [Steve Bartman: Catching Hell] and [Babe, I Love You] executive produced by [Charo Santos-Concio], executive produced by [Vicente del Rosario Jr.] and [Malou N. Santos], and edited by a cinematographer",
    "questionPatternModEntities": "Were M1 and M5 executive produced by M2 , executive produced by M3 and M4 , and edited by a cinematographer",
    "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] and [entity] , and [VP_SIMPLE] by a [NP_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 a ns:film.cinematographer .\nns:m.0bbyl25 ns:film.film.edited_by ?x0 .\nns:m.0bbyl25 ns:film.film.executive_produced_by ns:m.02vq8xn .\nns:m.0bbyl25 ns:film.film.executive_produced_by ns:m.08627jx .\nns:m.0bbyl25 ns:film.film.executive_produced_by ns:m.0bffb2d .\nns:m.0gfqwp3 ns:film.film.edited_by ?x0 .\nns:m.0gfqwp3 ns:film.film.executive_produced_by ns:m.02vq8xn .\nns:m.0gfqwp3 ns:film.film.executive_produced_by ns:m.08627jx .\nns:m.0gfqwp3 ns:film.film.executive_produced_by ns:m.0bffb2d\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 a M0 .\nM1 P0 M2 .\nM1 P0 M3 .\nM1 P0 M4 .\nM1 P1 ?x0 .\nM5 P0 M2 .\nM5 P0 M3 .\nM5 P0 M4 .\nM5 P1 ?x0\n}",
    "expectedResponse": "No",
    "recursionDepth": 45
  },
  {
    "questionIdx": 68574,
    "questionWithBrackets": "Was [Myglaren] written by a Mexican screenwriter's sibling, written by [Paul Mayeda Berges], and executive produced by [Maria K\u00f6pf]",
    "questionPatternModEntities": "Was M2 written by a Mexican screenwriter 's sibling , written by M4 , and executive produced by M3",
    "questionTemplate": "Was [entity] [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [NP_SIMPLE] 's [ROLE_SIMPLE] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:people.person.sibling_s/ns:people.sibling_relationship.sibling|ns:fictional_universe.fictional_character.siblings/ns:fictional_universe.sibling_relationship_of_fictional_characters.siblings ?x1 .\n?x1 a ns:film.writer .\n?x1 ns:people.person.nationality ns:m.0b90_r .\nFILTER ( ?x0 != ?x1 ) .\nns:m.0b6m6g_ ns:film.film.executive_produced_by ns:m.0j_vyd .\nns:m.0b6m6g_ ns:film.film.written_by ?x0 .\nns:m.0b6m6g_ ns:film.film.written_by ns:m.06j997\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x1 P1 M1 .\n?x1 a M0 .\nFILTER ( ?x0 != ?x1 ) .\nM2 P2 M3 .\nM2 P3 ?x0 .\nM2 P3 M4\n}",
    "expectedResponse": "No",
    "recursionDepth": 45
  },
  {
    "questionIdx": 125648,
    "questionWithBrackets": "Were [Thalaimurai], [9mm Sunrise], [Vampire Blvd.], [The Roller Blade Seven], [Super Hero Central], and [Undercover X] edited by and produced by [Cyberdyne Tech #2]'s Japanese actor",
    "questionPatternModEntities": "Were M2 , M3 , M4 , M5 , M6 , and M7 edited by and produced by M1 's Japanese actor",
    "questionTemplate": "Were [entity] , [entity] , [entity] , [entity] , [entity] , and [entity] [VP_SIMPLE] by and [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.actor.film/ns:film.performance.character ns:m.0z4stdc .\n?x0 ns:people.person.nationality ns:m.03_3d .\nns:m.0125_fzs ns:film.film.edited_by ?x0 .\nns:m.0125_fzs ns:film.film.produced_by|ns:film.film.production_companies ?x0 .\nns:m.074s65 ns:film.film.edited_by ?x0 .\nns:m.074s65 ns:film.film.produced_by|ns:film.film.production_companies ?x0 .\nns:m.07grly ns:film.film.edited_by ?x0 .\nns:m.07grly ns:film.film.produced_by|ns:film.film.production_companies ?x0 .\nns:m.08c8nm ns:film.film.edited_by ?x0 .\nns:m.08c8nm ns:film.film.produced_by|ns:film.film.production_companies ?x0 .\nns:m.08c8xx ns:film.film.edited_by ?x0 .\nns:m.08c8xx ns:film.film.produced_by|ns:film.film.production_companies ?x0 .\nns:m.0f2fxg ns:film.film.edited_by ?x0 .\nns:m.0f2fxg ns:film.film.produced_by|ns:film.film.production_companies ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nM2 P2 ?x0 .\nM2 P3 ?x0 .\nM3 P2 ?x0 .\nM3 P3 ?x0 .\nM4 P2 ?x0 .\nM4 P3 ?x0 .\nM5 P2 ?x0 .\nM5 P3 ?x0 .\nM6 P2 ?x0 .\nM6 P3 ?x0 .\nM7 P2 ?x0 .\nM7 P3 ?x0\n}",
    "expectedResponse": "No",
    "recursionDepth": 45
  },
  {
    "questionIdx": 120346,
    "questionWithBrackets": "Were [Loneliness Is Soul] and [Welcome to Serendipity] directed, written, produced, and executive produced by an executive producer and cinematographer of [White Stork Is Coming]",
    "questionPatternModEntities": "Were M1 and M2 directed , written , produced , and executive produced by a executive producer and cinematographer of M0",
    "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by a [ROLE_SIMPLE] and [ROLE_SIMPLE] of [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.cinematographer.film ns:m.0zxyz5j .\n?x0 ns:film.producer.films_executive_produced ns:m.0zxyz5j .\nns:m.0zd5p8f ns:film.film.directed_by ?x0 .\nns:m.0zd5p8f ns:film.film.executive_produced_by ?x0 .\nns:m.0zd5p8f ns:film.film.produced_by|ns:film.film.production_companies ?x0 .\nns:m.0zd5p8f ns:film.film.written_by ?x0 .\nns:m.0zkdj6y ns:film.film.directed_by ?x0 .\nns:m.0zkdj6y ns:film.film.executive_produced_by ?x0 .\nns:m.0zkdj6y ns:film.film.produced_by|ns:film.film.production_companies ?x0 .\nns:m.0zkdj6y ns:film.film.written_by ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M0 .\nM1 P2 ?x0 .\nM1 P3 ?x0 .\nM1 P4 ?x0 .\nM1 P5 ?x0 .\nM2 P2 ?x0 .\nM2 P3 ?x0 .\nM2 P4 ?x0 .\nM2 P5 ?x0\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 45
  },
  {
    "questionIdx": 213780,
    "questionWithBrackets": "Who did [B. Traven] and [Kurt Vonnegut] influence and a film's editor, star, cinematographer, and writer influence",
    "questionPatternModEntities": "Who did M1 and M2 influence and a film 's editor , star , cinematographer , and writer influence",
    "questionTemplate": "Who did [entity] and [entity] [VP_SIMPLE] and a [NP_SIMPLE] 's [ROLE_SIMPLE] , [ROLE_SIMPLE] , [ROLE_SIMPLE] , and [ROLE_SIMPLE] [VP_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:people.person .\n?x0 ns:influence.influence_node.influenced_by ?x1 .\n?x0 ns:influence.influence_node.influenced_by ns:m.03r50z .\n?x0 ns:influence.influence_node.influenced_by ns:m.049gc .\n?x1 ns:film.actor.film/ns:film.performance.film ?x2 .\n?x1 ns:film.cinematographer.film ?x2 .\n?x1 ns:film.editor.film ?x2 .\n?x1 ns:film.writer.film ?x2 .\n?x2 a ns:film.film\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 a M0 .\n?x1 P1 ?x2 .\n?x1 P2 ?x2 .\n?x1 P3 ?x2 .\n?x1 P4 ?x2 .\n?x2 a M3\n}",
    "expectedResponse": "Garret Schuelke",
    "recursionDepth": 45
  },
  {
    "questionIdx": 25771,
    "questionWithBrackets": "Did [Zisis Kokkinidis] and [Miriam Albert Sobrino] executive produce, direct, produce, edit, and write a film",
    "questionPatternModEntities": "Did M1 and M2 executive produce , direct , produce , edit , and write a film",
    "questionTemplate": "Did [entity] and [entity] [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] a [NP_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 a ns:film.film .\nns:m.010s5stq ns:film.director.film ?x0 .\nns:m.010s5stq ns:film.editor.film ?x0 .\nns:m.010s5stq ns:film.producer.films_executive_produced ?x0 .\nns:m.010s5stq ns:film.producer.film|ns:film.production_company.films ?x0 .\nns:m.010s5stq ns:film.writer.film ?x0 .\nns:m.0n9gc1k ns:film.director.film ?x0 .\nns:m.0n9gc1k ns:film.editor.film ?x0 .\nns:m.0n9gc1k ns:film.producer.films_executive_produced ?x0 .\nns:m.0n9gc1k ns:film.producer.film|ns:film.production_company.films ?x0 .\nns:m.0n9gc1k ns:film.writer.film ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 a M0 .\nM1 P0 ?x0 .\nM1 P1 ?x0 .\nM1 P2 ?x0 .\nM1 P3 ?x0 .\nM1 P4 ?x0 .\nM2 P0 ?x0 .\nM2 P1 ?x0 .\nM2 P2 ?x0 .\nM2 P3 ?x0 .\nM2 P4 ?x0\n}",
    "expectedResponse": "No",
    "recursionDepth": 45
  },
  {
    "questionIdx": 129777,
    "questionWithBrackets": "Were [White Stork Is Coming] and [Rick's Canoe] executive produced by, directed by, written by, produced by, and edited by a screenwriter",
    "questionPatternModEntities": "Were M1 and M2 executive produced by , directed by , written by , produced by , and edited by a screenwriter",
    "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by a [NP_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 a ns:film.writer .\nns:m.0zvz2b2 ns:film.film.directed_by ?x0 .\nns:m.0zvz2b2 ns:film.film.edited_by ?x0 .\nns:m.0zvz2b2 ns:film.film.executive_produced_by ?x0 .\nns:m.0zvz2b2 ns:film.film.produced_by|ns:film.film.production_companies ?x0 .\nns:m.0zvz2b2 ns:film.film.written_by ?x0 .\nns:m.0zxyz5j ns:film.film.directed_by ?x0 .\nns:m.0zxyz5j ns:film.film.edited_by ?x0 .\nns:m.0zxyz5j ns:film.film.executive_produced_by ?x0 .\nns:m.0zxyz5j ns:film.film.produced_by|ns:film.film.production_companies ?x0 .\nns:m.0zxyz5j ns:film.film.written_by ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 a M0 .\nM1 P0 ?x0 .\nM1 P1 ?x0 .\nM1 P2 ?x0 .\nM1 P3 ?x0 .\nM1 P4 ?x0 .\nM2 P0 ?x0 .\nM2 P1 ?x0 .\nM2 P2 ?x0 .\nM2 P3 ?x0 .\nM2 P4 ?x0\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 46
  },
  {
    "questionIdx": 112428,
    "questionWithBrackets": "Were [Animator vs Animation 2] and [Taprobana] produced by, written by, executive produced by, directed by, and edited by an actor",
    "questionPatternModEntities": "Were M1 and M2 produced by , written by , executive produced by , directed by , and edited by a actor",
    "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by a [NP_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 a ns:film.actor .\nns:m.0107y6nl ns:film.film.directed_by ?x0 .\nns:m.0107y6nl ns:film.film.edited_by ?x0 .\nns:m.0107y6nl ns:film.film.executive_produced_by ?x0 .\nns:m.0107y6nl ns:film.film.produced_by|ns:film.film.production_companies ?x0 .\nns:m.0107y6nl ns:film.film.written_by ?x0 .\nns:m.0108mkjq ns:film.film.directed_by ?x0 .\nns:m.0108mkjq ns:film.film.edited_by ?x0 .\nns:m.0108mkjq ns:film.film.executive_produced_by ?x0 .\nns:m.0108mkjq ns:film.film.produced_by|ns:film.film.production_companies ?x0 .\nns:m.0108mkjq ns:film.film.written_by ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 a M0 .\nM1 P0 ?x0 .\nM1 P1 ?x0 .\nM1 P2 ?x0 .\nM1 P3 ?x0 .\nM1 P4 ?x0 .\nM2 P0 ?x0 .\nM2 P1 ?x0 .\nM2 P2 ?x0 .\nM2 P3 ?x0 .\nM2 P4 ?x0\n}",
    "expectedResponse": "No",
    "recursionDepth": 46
  },
  {
    "questionIdx": 116082,
    "questionWithBrackets": "Were [DreamWorks Studios] and [DreamWorks Animation] founded by [David Geffen], founded by a director of [Amazing Stories: Book One] and [Catch Me If You Can], and founded by [Jeffrey Katzenberg]",
    "questionPatternModEntities": "Were M2 and M5 founded by M3 , founded by a director of M0 and M1 , and founded by M4",
    "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by [entity] , [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity] and [entity] , and [VP_SIMPLE] by [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.director.film ns:m.01flv_ .\n?x0 ns:film.director.film ns:m.02ww_d1 .\nns:m.01gb54 ns:organization.organization.founders ?x0 .\nns:m.01gb54 ns:organization.organization.founders ns:m.01vhrz .\nns:m.01gb54 ns:organization.organization.founders ns:m.02rq9n .\nns:m.056ws9 ns:organization.organization.founders ?x0 .\nns:m.056ws9 ns:organization.organization.founders ns:m.01vhrz .\nns:m.056ws9 ns:organization.organization.founders ns:m.02rq9n\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\nM2 P1 ?x0 .\nM2 P1 M3 .\nM2 P1 M4 .\nM5 P1 ?x0 .\nM5 P1 M3 .\nM5 P1 M4\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 46
  },
  {
    "questionIdx": 181993,
    "questionWithBrackets": "What was produced by a Japanese costume designer, edited by a person, and written by [Anne-Marie Mackay] and [Michel Comte]",
    "questionPatternModEntities": "What was produced by a Japanese costume designer , edited by a person , and written by M0 and M1",
    "questionTemplate": "What was [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [NP_SIMPLE] , [VP_SIMPLE] by a [NP_SIMPLE] , and [VP_SIMPLE] by [entity] and [entity]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.film.edited_by ?x1 .\n?x0 ns:film.film.produced_by|ns:film.film.production_companies ?x2 .\n?x0 ns:film.film.written_by ns:m.0bnthf0 .\n?x0 ns:film.film.written_by ns:m.0h22dgg .\n?x1 a ns:people.person .\n?x2 a ns:film.film_costumer_designer .\n?x2 ns:people.person.nationality ns:m.03_3d\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x2 .\n?x1 P3 M3 .\n?x1 a M2 .\n?x2 a M4\n}",
    "expectedResponse": "The Girl from Nagasaki",
    "recursionDepth": 46
  },
  {
    "questionIdx": 113666,
    "questionWithBrackets": "Were [Blues for the Avatar] and [It's Not About the Shawerma] directed by, written by, edited by, executive produced by, and produced by a cinematographer",
    "questionPatternModEntities": "Were M1 and M2 directed by , written by , edited by , executive produced by , and produced by a cinematographer",
    "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by a [NP_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 a ns:film.cinematographer .\nns:m.0znn7j_ ns:film.film.directed_by ?x0 .\nns:m.0znn7j_ ns:film.film.edited_by ?x0 .\nns:m.0znn7j_ ns:film.film.executive_produced_by ?x0 .\nns:m.0znn7j_ ns:film.film.produced_by|ns:film.film.production_companies ?x0 .\nns:m.0znn7j_ ns:film.film.written_by ?x0 .\nns:m.0zztylq ns:film.film.directed_by ?x0 .\nns:m.0zztylq ns:film.film.edited_by ?x0 .\nns:m.0zztylq ns:film.film.executive_produced_by ?x0 .\nns:m.0zztylq ns:film.film.produced_by|ns:film.film.production_companies ?x0 .\nns:m.0zztylq ns:film.film.written_by ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 a M0 .\nM1 P0 ?x0 .\nM1 P1 ?x0 .\nM1 P2 ?x0 .\nM1 P3 ?x0 .\nM1 P4 ?x0 .\nM2 P0 ?x0 .\nM2 P1 ?x0 .\nM2 P2 ?x0 .\nM2 P3 ?x0 .\nM2 P4 ?x0\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 46
  },
  {
    "questionIdx": 147391,
    "questionWithBrackets": "What did [The Miners' Hymns]'s writer and editor edit, produce, direct, write, and executive produce",
    "questionPatternModEntities": "What did M0 's writer and editor edit , produce , direct , write , and executive produce",
    "questionTemplate": "What did [entity] 's [ROLE_SIMPLE] and [ROLE_SIMPLE] [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.film.directed_by ?x1 .\n?x0 ns:film.film.edited_by ?x1 .\n?x0 ns:film.film.executive_produced_by ?x1 .\n?x0 ns:film.film.produced_by|ns:film.film.production_companies ?x1 .\n?x0 ns:film.film.written_by ?x1 .\n?x1 ns:film.editor.film ns:m.0gkg41j .\n?x1 ns:film.writer.film ns:m.0gkg41j\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x0 P3 ?x1 .\n?x0 P4 ?x1 .\n?x1 P5 M0 .\n?x1 P6 M0\n}",
    "expectedResponse": "Just Ancient Loops",
    "recursionDepth": 46
  },
  {
    "questionIdx": 41221,
    "questionWithBrackets": "Did an actor influenced by [Albert Camus] and influenced by [Rainer Maria Rilke] influence and marry [Sylvie Le Bon-de Beauvoir]'s parent",
    "questionPatternModEntities": "Did a actor influenced by M1 and influenced by M2 influence and marry M3 's parent",
    "questionTemplate": "Did a [NP_SIMPLE] [VP_SIMPLE] by [entity] and [VP_SIMPLE] by [entity] [VP_SIMPLE] and [VP_SIMPLE] [entity] 's [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 a ns:film.actor .\n?x0 ns:influence.influence_node.influenced ?x1 .\n?x0 ns:influence.influence_node.influenced_by ns:m.06l0f .\n?x0 ns:influence.influence_node.influenced_by ns:m.0lcx .\n?x0 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ?x1 .\n?x1 ns:people.person.children|ns:fictional_universe.fictional_character.children|ns:organization.organization.child/ns:organization.organization_relationship.child ns:m.03mf5g2 .\nFILTER ( ?x0 != ?x1 )\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x0 P1 M1 .\n?x0 P1 M2 .\n?x0 P2 ?x1 .\n?x0 a M0 .\n?x1 P3 M3 .\nFILTER ( ?x0 != ?x1 )\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 46
  },
  {
    "questionIdx": 113841,
    "questionWithBrackets": "Were [Blues for the Avatar] and [White Stork Is Coming] produced by, directed by, executive produced by, written by, and edited by a cinematographer",
    "questionPatternModEntities": "Were M1 and M2 produced by , directed by , executive produced by , written by , and edited by a cinematographer",
    "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by a [NP_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 a ns:film.cinematographer .\nns:m.0znn7j_ ns:film.film.directed_by ?x0 .\nns:m.0znn7j_ ns:film.film.edited_by ?x0 .\nns:m.0znn7j_ ns:film.film.executive_produced_by ?x0 .\nns:m.0znn7j_ ns:film.film.produced_by|ns:film.film.production_companies ?x0 .\nns:m.0znn7j_ ns:film.film.written_by ?x0 .\nns:m.0zxyz5j ns:film.film.directed_by ?x0 .\nns:m.0zxyz5j ns:film.film.edited_by ?x0 .\nns:m.0zxyz5j ns:film.film.executive_produced_by ?x0 .\nns:m.0zxyz5j ns:film.film.produced_by|ns:film.film.production_companies ?x0 .\nns:m.0zxyz5j ns:film.film.written_by ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 a M0 .\nM1 P0 ?x0 .\nM1 P1 ?x0 .\nM1 P2 ?x0 .\nM1 P3 ?x0 .\nM1 P4 ?x0 .\nM2 P0 ?x0 .\nM2 P1 ?x0 .\nM2 P2 ?x0 .\nM2 P3 ?x0 .\nM2 P4 ?x0\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 46
  },
  {
    "questionIdx": 111421,
    "questionWithBrackets": "Were [A Doctor's Job!] and [Rick's Canoe] directed by, written by, executive produced by, produced by, and edited by a person",
    "questionPatternModEntities": "Were M1 and M2 directed by , written by , executive produced by , produced by , and edited by a person",
    "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by a [NP_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 a ns:people.person .\nns:m.0gfpm7n ns:film.film.directed_by ?x0 .\nns:m.0gfpm7n ns:film.film.edited_by ?x0 .\nns:m.0gfpm7n ns:film.film.executive_produced_by ?x0 .\nns:m.0gfpm7n ns:film.film.produced_by|ns:film.film.production_companies ?x0 .\nns:m.0gfpm7n ns:film.film.written_by ?x0 .\nns:m.0zvz2b2 ns:film.film.directed_by ?x0 .\nns:m.0zvz2b2 ns:film.film.edited_by ?x0 .\nns:m.0zvz2b2 ns:film.film.executive_produced_by ?x0 .\nns:m.0zvz2b2 ns:film.film.produced_by|ns:film.film.production_companies ?x0 .\nns:m.0zvz2b2 ns:film.film.written_by ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 a M0 .\nM1 P0 ?x0 .\nM1 P1 ?x0 .\nM1 P2 ?x0 .\nM1 P3 ?x0 .\nM1 P4 ?x0 .\nM2 P0 ?x0 .\nM2 P1 ?x0 .\nM2 P2 ?x0 .\nM2 P3 ?x0 .\nM2 P4 ?x0\n}",
    "expectedResponse": "No",
    "recursionDepth": 46
  },
  {
    "questionIdx": 17172,
    "questionWithBrackets": "Did [Princeton University] employ [Banesh Hoffmann] and [Lisa Randall], employ a cinematographer and executive producer of [Black Bareback Riders 4], and employ [Gigliola Staffilani]",
    "questionPatternModEntities": "Did M1 employ M2 and M3 , employ a cinematographer and executive producer of M0 , and employ M4",
    "questionTemplate": "Did [entity] [VP_SIMPLE] [entity] and [entity] , [VP_SIMPLE] a [ROLE_SIMPLE] and [ROLE_SIMPLE] of [entity] , and [VP_SIMPLE] [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.cinematographer.film ns:m.063tqk8 .\n?x0 ns:film.producer.films_executive_produced ns:m.063tqk8 .\nns:m.05zl0 ns:business.employer.employees/ns:business.employment_tenure.person ?x0 .\nns:m.05zl0 ns:business.employer.employees/ns:business.employment_tenure.person ns:m.031mp0 .\nns:m.05zl0 ns:business.employer.employees/ns:business.employment_tenure.person ns:m.09r8d1 .\nns:m.05zl0 ns:business.employer.employees/ns:business.employment_tenure.person ns:m.0fpphbt\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M0 .\nM1 P2 ?x0 .\nM1 P2 M2 .\nM1 P2 M3 .\nM1 P2 M4\n}",
    "expectedResponse": "No",
    "recursionDepth": 46
  },
  {
    "questionIdx": 112948,
    "questionWithBrackets": "Were [Baby, I Love You.] and [Animation vs. Animator 1] edited by, written by, executive produced by, produced by, and directed by an actor",
    "questionPatternModEntities": "Were M1 and M2 edited by , written by , executive produced by , produced by , and directed by a actor",
    "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by a [NP_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 a ns:film.actor .\nns:m.0108m1yx ns:film.film.directed_by ?x0 .\nns:m.0108m1yx ns:film.film.edited_by ?x0 .\nns:m.0108m1yx ns:film.film.executive_produced_by ?x0 .\nns:m.0108m1yx ns:film.film.produced_by|ns:film.film.production_companies ?x0 .\nns:m.0108m1yx ns:film.film.written_by ?x0 .\nns:m.011_z9lq ns:film.film.directed_by ?x0 .\nns:m.011_z9lq ns:film.film.edited_by ?x0 .\nns:m.011_z9lq ns:film.film.executive_produced_by ?x0 .\nns:m.011_z9lq ns:film.film.produced_by|ns:film.film.production_companies ?x0 .\nns:m.011_z9lq ns:film.film.written_by ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 a M0 .\nM1 P0 ?x0 .\nM1 P1 ?x0 .\nM1 P2 ?x0 .\nM1 P3 ?x0 .\nM1 P4 ?x0 .\nM2 P0 ?x0 .\nM2 P1 ?x0 .\nM2 P2 ?x0 .\nM2 P3 ?x0 .\nM2 P4 ?x0\n}",
    "expectedResponse": "No",
    "recursionDepth": 46
  },
  {
    "questionIdx": 144653,
    "questionWithBrackets": "What did [Kinefaktura]'s art director and writer produce, executive produce, edit, direct, and write",
    "questionPatternModEntities": "What did M0 's art director and writer produce , executive produce , edit , direct , and write",
    "questionTemplate": "What did [entity] 's [ROLE_SIMPLE] and [ROLE_SIMPLE] [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.film.directed_by ?x1 .\n?x0 ns:film.film.edited_by ?x1 .\n?x0 ns:film.film.executive_produced_by ?x1 .\n?x0 ns:film.film.produced_by|ns:film.film.production_companies ?x1 .\n?x0 ns:film.film.written_by ?x1 .\n?x1 ns:film.film_art_director.films_art_directed ns:m.0vsh_8l .\n?x1 ns:film.writer.film ns:m.0vsh_8l\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x0 P3 ?x1 .\n?x0 P4 ?x1 .\n?x1 P5 M0 .\n?x1 P6 M0\n}",
    "expectedResponse": "FFF1",
    "recursionDepth": 46
  },
  {
    "questionIdx": 145996,
    "questionWithBrackets": "What did [Rangga Maya Barack-Evans] and [Robin Cowie] executive produce, a British screenwriter edit, and a film editor edit",
    "questionPatternModEntities": "What did M0 and M1 executive produce , a British screenwriter edit , and a film editor edit",
    "questionTemplate": "What did [entity] and [entity] [VP_SIMPLE] , a [ADJECTIVE_SIMPLE] [NP_SIMPLE] [VP_SIMPLE] , and a [NP_SIMPLE] [VP_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.film.edited_by ?x1 .\n?x0 ns:film.film.edited_by ?x2 .\n?x0 ns:film.film.executive_produced_by ns:m.0b69svf .\n?x0 ns:film.film.executive_produced_by ns:m.0hls1rq .\n?x1 a ns:film.writer .\n?x1 ns:people.person.nationality ns:m.07ssc .\n?x2 a ns:film.editor\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P1 ?x1 .\n?x0 P1 ?x2 .\n?x1 P2 M3 .\n?x1 a M2 .\n?x2 a M4\n}",
    "expectedResponse": "V/H/S/2",
    "recursionDepth": 46
  },
  {
    "questionIdx": 125358,
    "questionWithBrackets": "Were [Taprobana] and [Baby, I Love You.] executive produced by, produced by, directed by, edited by, and written by an actor",
    "questionPatternModEntities": "Were M1 and M2 executive produced by , produced by , directed by , edited by , and written by a actor",
    "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by a [NP_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 a ns:film.actor .\nns:m.0107y6nl ns:film.film.directed_by ?x0 .\nns:m.0107y6nl ns:film.film.edited_by ?x0 .\nns:m.0107y6nl ns:film.film.executive_produced_by ?x0 .\nns:m.0107y6nl ns:film.film.produced_by|ns:film.film.production_companies ?x0 .\nns:m.0107y6nl ns:film.film.written_by ?x0 .\nns:m.011_z9lq ns:film.film.directed_by ?x0 .\nns:m.011_z9lq ns:film.film.edited_by ?x0 .\nns:m.011_z9lq ns:film.film.executive_produced_by ?x0 .\nns:m.011_z9lq ns:film.film.produced_by|ns:film.film.production_companies ?x0 .\nns:m.011_z9lq ns:film.film.written_by ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 a M0 .\nM1 P0 ?x0 .\nM1 P1 ?x0 .\nM1 P2 ?x0 .\nM1 P3 ?x0 .\nM1 P4 ?x0 .\nM2 P0 ?x0 .\nM2 P1 ?x0 .\nM2 P2 ?x0 .\nM2 P3 ?x0 .\nM2 P4 ?x0\n}",
    "expectedResponse": "No",
    "recursionDepth": 46
  },
  {
    "questionIdx": 123381,
    "questionWithBrackets": "Were [Rick's Canoe] and [It's Not About the Shawerma] edited, directed, executive produced, written, and produced by a film's director",
    "questionPatternModEntities": "Were M1 and M2 edited , directed , executive produced , written , and produced by a film 's director",
    "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by a [NP_SIMPLE] 's [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.director.film ?x1 .\n?x1 a ns:film.film .\nns:m.0zvz2b2 ns:film.film.directed_by ?x0 .\nns:m.0zvz2b2 ns:film.film.edited_by ?x0 .\nns:m.0zvz2b2 ns:film.film.executive_produced_by ?x0 .\nns:m.0zvz2b2 ns:film.film.produced_by|ns:film.film.production_companies ?x0 .\nns:m.0zvz2b2 ns:film.film.written_by ?x0 .\nns:m.0zztylq ns:film.film.directed_by ?x0 .\nns:m.0zztylq ns:film.film.edited_by ?x0 .\nns:m.0zztylq ns:film.film.executive_produced_by ?x0 .\nns:m.0zztylq ns:film.film.produced_by|ns:film.film.production_companies ?x0 .\nns:m.0zztylq ns:film.film.written_by ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x1 a M0 .\nM1 P1 ?x0 .\nM1 P2 ?x0 .\nM1 P3 ?x0 .\nM1 P4 ?x0 .\nM1 P5 ?x0 .\nM2 P1 ?x0 .\nM2 P2 ?x0 .\nM2 P3 ?x0 .\nM2 P4 ?x0 .\nM2 P5 ?x0\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 46
  },
  {
    "questionIdx": 118645,
    "questionWithBrackets": "Were [It's Not About the Shawerma] and [Planet Utero] executive produced by, directed by, edited by, written by, and produced by a cinematographer",
    "questionPatternModEntities": "Were M1 and M2 executive produced by , directed by , edited by , written by , and produced by a cinematographer",
    "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by a [NP_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 a ns:film.cinematographer .\nns:m.0107h0v4 ns:film.film.directed_by ?x0 .\nns:m.0107h0v4 ns:film.film.edited_by ?x0 .\nns:m.0107h0v4 ns:film.film.executive_produced_by ?x0 .\nns:m.0107h0v4 ns:film.film.produced_by|ns:film.film.production_companies ?x0 .\nns:m.0107h0v4 ns:film.film.written_by ?x0 .\nns:m.0zztylq ns:film.film.directed_by ?x0 .\nns:m.0zztylq ns:film.film.edited_by ?x0 .\nns:m.0zztylq ns:film.film.executive_produced_by ?x0 .\nns:m.0zztylq ns:film.film.produced_by|ns:film.film.production_companies ?x0 .\nns:m.0zztylq ns:film.film.written_by ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 a M0 .\nM1 P0 ?x0 .\nM1 P1 ?x0 .\nM1 P2 ?x0 .\nM1 P3 ?x0 .\nM1 P4 ?x0 .\nM2 P0 ?x0 .\nM2 P1 ?x0 .\nM2 P2 ?x0 .\nM2 P3 ?x0 .\nM2 P4 ?x0\n}",
    "expectedResponse": "No",
    "recursionDepth": 46
  },
  {
    "questionIdx": 122700,
    "questionWithBrackets": "Were [Planet Utero] and [Baby, I Love You.] executive produced by, directed by, edited by, written by, and produced by a person",
    "questionPatternModEntities": "Were M1 and M2 executive produced by , directed by , edited by , written by , and produced by a person",
    "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by a [NP_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 a ns:people.person .\nns:m.0107h0v4 ns:film.film.directed_by ?x0 .\nns:m.0107h0v4 ns:film.film.edited_by ?x0 .\nns:m.0107h0v4 ns:film.film.executive_produced_by ?x0 .\nns:m.0107h0v4 ns:film.film.produced_by|ns:film.film.production_companies ?x0 .\nns:m.0107h0v4 ns:film.film.written_by ?x0 .\nns:m.011_z9lq ns:film.film.directed_by ?x0 .\nns:m.011_z9lq ns:film.film.edited_by ?x0 .\nns:m.011_z9lq ns:film.film.executive_produced_by ?x0 .\nns:m.011_z9lq ns:film.film.produced_by|ns:film.film.production_companies ?x0 .\nns:m.011_z9lq ns:film.film.written_by ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 a M0 .\nM1 P0 ?x0 .\nM1 P1 ?x0 .\nM1 P2 ?x0 .\nM1 P3 ?x0 .\nM1 P4 ?x0 .\nM2 P0 ?x0 .\nM2 P1 ?x0 .\nM2 P2 ?x0 .\nM2 P3 ?x0 .\nM2 P4 ?x0\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 46
  },
  {
    "questionIdx": 113249,
    "questionWithBrackets": "Were [Beck \u2013 Den svaga l\u00e4nken] and [Beck \u2013 Advokaten] edited by [Closet Cases of the Nerd Kind]'s editor, executive produced by [\u00c5sa Sj\u00f6berg], and executive produced by [Niva Westlin Dahl] and [B\u00f6rje Hansson]",
    "questionPatternModEntities": "Were M1 and M5 edited by M0 's editor , executive produced by M2 , and executive produced by M3 and M4",
    "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity] and [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.editor.film ns:m.0blbpl .\nns:m.06zkfq5 ns:film.film.edited_by ?x0 .\nns:m.06zkfq5 ns:film.film.executive_produced_by ns:m.0j3q6js .\nns:m.06zkfq5 ns:film.film.executive_produced_by ns:m.0tk9tbd .\nns:m.06zkfq5 ns:film.film.executive_produced_by ns:m.0y7nr8b .\nns:m.06zsf3m ns:film.film.edited_by ?x0 .\nns:m.06zsf3m ns:film.film.executive_produced_by ns:m.0j3q6js .\nns:m.06zsf3m ns:film.film.executive_produced_by ns:m.0tk9tbd .\nns:m.06zsf3m ns:film.film.executive_produced_by ns:m.0y7nr8b\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 M2 .\nM1 P1 M3 .\nM1 P1 M4 .\nM1 P2 ?x0 .\nM5 P1 M2 .\nM5 P1 M3 .\nM5 P1 M4 .\nM5 P2 ?x0\n}",
    "expectedResponse": "No",
    "recursionDepth": 46
  },
  {
    "questionIdx": 174398,
    "questionWithBrackets": "What was edited by a film's writer, producer, cinematographer, and costume designer and written by [Herv\u00e9-Pierre Gustave] and [Thomas Wallon]",
    "questionPatternModEntities": "What was edited by a film 's writer , producer , cinematographer , and costume designer and written by M0 and M1",
    "questionTemplate": "What was [VP_SIMPLE] by a [NP_SIMPLE] 's [ROLE_SIMPLE] , [ROLE_SIMPLE] , [ROLE_SIMPLE] , and [ROLE_SIMPLE] and [VP_SIMPLE] by [entity] and [entity]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.film.edited_by ?x1 .\n?x0 ns:film.film.written_by ns:m.0kfb9td .\n?x0 ns:film.film.written_by ns:m.0pz72ms .\n?x1 ns:film.cinematographer.film ?x2 .\n?x1 ns:film.film_costumer_designer.costume_design_for_film ?x2 .\n?x1 ns:film.producer.film|ns:film.production_company.films ?x2 .\n?x1 ns:film.writer.film ?x2 .\n?x2 a ns:film.film\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P1 ?x1 .\n?x1 P2 ?x2 .\n?x1 P3 ?x2 .\n?x1 P4 ?x2 .\n?x1 P5 ?x2 .\n?x2 a M2\n}",
    "expectedResponse": "Hip Moves",
    "recursionDepth": 46
  },
  {
    "questionIdx": 182239,
    "questionWithBrackets": "What was produced by a film director's sibling's spouse, written by [Charlotte and Her Boyfriend]'s editor, and directed by [Luigi Comencini]",
    "questionPatternModEntities": "What was produced by a film director 's sibling 's spouse , written by M1 's editor , and directed by M0",
    "questionTemplate": "What was [VP_SIMPLE] by a [NP_SIMPLE] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE] , [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] , and [VP_SIMPLE] by [entity]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.film.directed_by ns:m.02qg0gn .\n?x0 ns:film.film.produced_by|ns:film.film.production_companies ?x1 .\n?x0 ns:film.film.written_by ?x2 .\n?x1 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ?x3 .\n?x2 ns:film.editor.film ns:m.0bfx8h .\n?x3 ns:people.person.sibling_s/ns:people.sibling_relationship.sibling|ns:fictional_universe.fictional_character.siblings/ns:fictional_universe.sibling_relationship_of_fictional_characters.siblings ?x4 .\n?x4 a ns:film.director .\nFILTER ( ?x1 != ?x3 ) .\nFILTER ( ?x3 != ?x4 )\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x2 .\n?x0 P2 M0 .\n?x1 P3 M1 .\n?x2 P4 ?x3 .\n?x3 P5 ?x4 .\n?x4 a M2 .\nFILTER ( ?x2 != ?x3 ) .\nFILTER ( ?x3 != ?x4 )\n}",
    "expectedResponse": "The French as Seen By...",
    "recursionDepth": 46
  },
  {
    "questionIdx": 159384,
    "questionWithBrackets": "What film whose cinematographer and star executive produced [Freedom's Fury] and [Killing Zoe] did [Gaiam Vivendi Entertainment] distribute and [The Weinstein Company] distribute",
    "questionPatternModEntities": "What film whose cinematographer and star executive produced M3 and M4 did M1 distribute and M2 distribute",
    "questionTemplate": "What [NP_SIMPLE] whose [ROLE_SIMPLE] and [ROLE_SIMPLE] [VP_SIMPLE] [entity] and [entity] did [entity] [VP_SIMPLE] and [entity] [VP_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:film.film .\n?x0 ns:film.film.cinematography ?x1 .\n?x0 ns:film.film.distributors/ns:film.film_film_distributor_relationship.distributor ns:m.061dn_ .\n?x0 ns:film.film.distributors/ns:film.film_film_distributor_relationship.distributor ns:m.080cdty .\n?x0 ns:film.film.starring/ns:film.performance.actor ?x1 .\n?x1 ns:film.producer.films_executive_produced ns:m.030xp1 .\n?x1 ns:film.producer.films_executive_produced ns:m.0bwkmrt\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 M1 .\n?x0 P1 M2 .\n?x0 P2 ?x1 .\n?x0 a M0 .\n?x1 P3 M3 .\n?x1 P3 M4\n}",
    "expectedResponse": "Grindhouse",
    "recursionDepth": 46
  },
  {
    "questionIdx": 111443,
    "questionWithBrackets": "Were [A Doctor's Job!] and [The Shoe Shiner] produced by, written by, edited by, executive produced by, and directed by a film editor",
    "questionPatternModEntities": "Were M1 and M2 produced by , written by , edited by , executive produced by , and directed by a film editor",
    "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by a [NP_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 a ns:film.editor .\nns:m.0gfpm7n ns:film.film.directed_by ?x0 .\nns:m.0gfpm7n ns:film.film.edited_by ?x0 .\nns:m.0gfpm7n ns:film.film.executive_produced_by ?x0 .\nns:m.0gfpm7n ns:film.film.produced_by|ns:film.film.production_companies ?x0 .\nns:m.0gfpm7n ns:film.film.written_by ?x0 .\nns:m.0s9k0q2 ns:film.film.directed_by ?x0 .\nns:m.0s9k0q2 ns:film.film.edited_by ?x0 .\nns:m.0s9k0q2 ns:film.film.executive_produced_by ?x0 .\nns:m.0s9k0q2 ns:film.film.produced_by|ns:film.film.production_companies ?x0 .\nns:m.0s9k0q2 ns:film.film.written_by ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 a M0 .\nM1 P0 ?x0 .\nM1 P1 ?x0 .\nM1 P2 ?x0 .\nM1 P3 ?x0 .\nM1 P4 ?x0 .\nM2 P0 ?x0 .\nM2 P1 ?x0 .\nM2 P2 ?x0 .\nM2 P3 ?x0 .\nM2 P4 ?x0\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 46
  },
  {
    "questionIdx": 143643,
    "questionWithBrackets": "What did [Goat Story 2]'s editor and art director edit, direct, write, executive produce, and produce",
    "questionPatternModEntities": "What did M0 's editor and art director edit , direct , write , executive produce , and produce",
    "questionTemplate": "What did [entity] 's [ROLE_SIMPLE] and [ROLE_SIMPLE] [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.film.directed_by ?x1 .\n?x0 ns:film.film.edited_by ?x1 .\n?x0 ns:film.film.executive_produced_by ?x1 .\n?x0 ns:film.film.produced_by|ns:film.film.production_companies ?x1 .\n?x0 ns:film.film.written_by ?x1 .\n?x1 ns:film.editor.film ns:m.0nbtt_1 .\n?x1 ns:film.film_art_director.films_art_directed ns:m.0nbtt_1\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x0 P3 ?x1 .\n?x0 P4 ?x1 .\n?x1 P5 M0 .\n?x1 P6 M0\n}",
    "expectedResponse": "Goat Story",
    "recursionDepth": 46
  },
  {
    "questionIdx": 113368,
    "questionWithBrackets": "Were [Bella Loves Jenna] and [Krystal Method] directed by an art director, editor, and star of [Kurulus] and executive produced by a film director",
    "questionPatternModEntities": "Were M2 and M3 directed by a art director , editor , and star of M1 and executive produced by a film director",
    "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by a [ROLE_SIMPLE] , [ROLE_SIMPLE] , and [ROLE_SIMPLE] of [entity] and [VP_SIMPLE] by a [NP_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 a ns:film.director .\n?x1 ns:film.actor.film/ns:film.performance.film ns:m.0vmvxy4 .\n?x1 ns:film.editor.film ns:m.0vmvxy4 .\n?x1 ns:film.film_art_director.films_art_directed ns:m.0vmvxy4 .\nns:m.05wv_m1 ns:film.film.directed_by ?x1 .\nns:m.05wv_m1 ns:film.film.executive_produced_by ?x0 .\nns:m.0w15yfn ns:film.film.directed_by ?x1 .\nns:m.0w15yfn ns:film.film.executive_produced_by ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 a M0 .\n?x1 P0 M1 .\n?x1 P1 M1 .\n?x1 P2 M1 .\nM2 P3 ?x0 .\nM2 P4 ?x1 .\nM3 P3 ?x0 .\nM3 P4 ?x1\n}",
    "expectedResponse": "No",
    "recursionDepth": 46
  },
  {
    "questionIdx": 55234,
    "questionWithBrackets": "Was [Flywheel] executive produced by, written by, directed by, edited by, and produced by a company's founder",
    "questionPatternModEntities": "Was M1 executive produced by , written by , directed by , edited by , and produced by a company 's founder",
    "questionTemplate": "Was [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by a [NP_SIMPLE] 's [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:organization.organization_founder.organizations_founded ?x1 .\n?x1 a ns:business.employer .\nns:m.0kvgt0 ns:film.film.directed_by ?x0 .\nns:m.0kvgt0 ns:film.film.edited_by ?x0 .\nns:m.0kvgt0 ns:film.film.executive_produced_by ?x0 .\nns:m.0kvgt0 ns:film.film.produced_by|ns:film.film.production_companies ?x0 .\nns:m.0kvgt0 ns:film.film.written_by ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x1 a M0 .\nM1 P1 ?x0 .\nM1 P2 ?x0 .\nM1 P3 ?x0 .\nM1 P4 ?x0 .\nM1 P5 ?x0\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 46
  },
  {
    "questionIdx": 142517,
    "questionWithBrackets": "What did [Carancho]'s star and director produce, edit, write, executive produce, and direct",
    "questionPatternModEntities": "What did M0 's star and director produce , edit , write , executive produce , and direct",
    "questionTemplate": "What did [entity] 's [ROLE_SIMPLE] and [ROLE_SIMPLE] [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.film.directed_by ?x1 .\n?x0 ns:film.film.edited_by ?x1 .\n?x0 ns:film.film.executive_produced_by ?x1 .\n?x0 ns:film.film.produced_by|ns:film.film.production_companies ?x1 .\n?x0 ns:film.film.written_by ?x1 .\n?x1 ns:film.actor.film/ns:film.performance.film ns:m.0bv8qsf .\n?x1 ns:film.director.film ns:m.0bv8qsf\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x0 P3 ?x1 .\n?x0 P4 ?x1 .\n?x1 P5 M0 .\n?x1 P6 M0\n}",
    "expectedResponse": "White Elephant",
    "recursionDepth": 46
  },
  {
    "questionIdx": 57153,
    "questionWithBrackets": "Was [Gorgeous] produced by a film's sequel's art director, written by [Troublesome Night 3]'s star, and written by [Yiu Fai Lo]",
    "questionPatternModEntities": "Was M2 produced by a film 's sequel 's art director , written by M0 's star , and written by M3",
    "questionTemplate": "Was [entity] [VP_SIMPLE] by a [NP_SIMPLE] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE] , [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] , and [VP_SIMPLE] by [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.actor.film/ns:film.performance.film ns:m.0b6kpxt .\n?x1 ns:film.film_art_director.films_art_directed ?x2 .\n?x2 ns:film.film.prequel ?x3 .\n?x3 a ns:film.film .\nns:m.03r2rh ns:film.film.produced_by|ns:film.film.production_companies ?x1 .\nns:m.03r2rh ns:film.film.written_by ?x0 .\nns:m.03r2rh ns:film.film.written_by ns:m.0jxln4\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x1 P1 ?x2 .\n?x2 P2 ?x3 .\n?x3 a M1 .\nM2 P3 ?x0 .\nM2 P3 M3 .\nM2 P4 ?x1\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 47
  },
  {
    "questionIdx": 137056,
    "questionWithBrackets": "What actor whose sibling executive produced [Luck by Chance] and wrote [Talaash] founded and was employed by [Excel Entertainment]",
    "questionPatternModEntities": "What actor whose sibling executive produced M3 and wrote M2 founded and was employed by M1",
    "questionTemplate": "What [NP_SIMPLE] whose [ROLE_SIMPLE] [VP_SIMPLE] [entity] and [VP_SIMPLE] [entity] [VP_SIMPLE] and was [VP_SIMPLE] by [entity]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:film.actor .\n?x0 ns:organization.organization_founder.organizations_founded ns:m.03cm8f6 .\n?x0 ns:people.person.employment_history/ns:business.employment_tenure.company ns:m.03cm8f6 .\n?x0 ns:people.person.sibling_s/ns:people.sibling_relationship.sibling|ns:fictional_universe.fictional_character.siblings/ns:fictional_universe.sibling_relationship_of_fictional_characters.siblings ?x1 .\n?x1 ns:film.producer.films_executive_produced ns:m.0kvfhx .\n?x1 ns:film.writer.film ns:m.0gx3rq1 .\nFILTER ( ?x0 != ?x1 )\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 M1 .\n?x0 P2 M1 .\n?x0 a M0 .\n?x1 P3 M2 .\n?x1 P4 M3 .\nFILTER ( ?x0 != ?x1 )\n}",
    "expectedResponse": "Farhan Akhtar",
    "recursionDepth": 47
  },
  {
    "questionIdx": 4428,
    "questionWithBrackets": "Did [Columbia University] employ [Anthony Burgess], employ an art director, and employ [Lauder William Jones]'s employer's Chinese employee",
    "questionPatternModEntities": "Did M3 employ M4 , employ a art director , and employ M1 's employer 's Chinese employee",
    "questionTemplate": "Did [entity] [VP_SIMPLE] [entity] , [VP_SIMPLE] a [NP_SIMPLE] , and [VP_SIMPLE] [entity] 's [ROLE_SIMPLE] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:people.person.employment_history/ns:business.employment_tenure.company ?x1 .\n?x0 ns:people.person.nationality ns:m.0d05w3 .\n?x1 ns:business.employer.employees/ns:business.employment_tenure.person ns:m.03ckwmq .\n?x2 a ns:film.film_art_director .\nns:m.01w5m ns:business.employer.employees/ns:business.employment_tenure.person ?x0 .\nns:m.01w5m ns:business.employer.employees/ns:business.employment_tenure.person ?x2 .\nns:m.01w5m ns:business.employer.employees/ns:business.employment_tenure.person ns:m.0d4jl\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x0 P1 M0 .\n?x1 P2 M1 .\n?x2 a M2 .\nM3 P2 ?x0 .\nM3 P2 ?x2 .\nM3 P2 M4\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 47
  },
  {
    "questionIdx": 115864,
    "questionWithBrackets": "Were [Don't Give Up on Us] and [For The First Time] executive produced by [Cesar Concio]'s female spouse, directed by [Wenn V. Deramas], and executive produced by [Malou N. Santos]",
    "questionPatternModEntities": "Were M2 and M5 executive produced by M1 's female spouse , directed by M4 , and executive produced by M3",
    "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:people.person.gender ns:m.02zsn .\n?x0 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ns:m.0hnjrz3 .\nFILTER ( ?x0 != ns:m.0hnjrz3 ) .\nns:m.0288xlr ns:film.film.directed_by ns:m.07kbxg8 .\nns:m.0288xlr ns:film.film.executive_produced_by ?x0 .\nns:m.0288xlr ns:film.film.executive_produced_by ns:m.0bffb2d .\nns:m.04gtq5h ns:film.film.directed_by ns:m.07kbxg8 .\nns:m.04gtq5h ns:film.film.executive_produced_by ?x0 .\nns:m.04gtq5h ns:film.film.executive_produced_by ns:m.0bffb2d\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nFILTER ( ?x0 != M1 ) .\nM2 P2 ?x0 .\nM2 P2 M3 .\nM2 P3 M4 .\nM5 P2 ?x0 .\nM5 P2 M3 .\nM5 P3 M4\n}",
    "expectedResponse": "No",
    "recursionDepth": 47
  },
  {
    "questionIdx": 129799,
    "questionWithBrackets": "Were [White Stork Is Coming] and [Rick's Canoe] written by, edited by, directed by, executive produced by, and produced by [The Higden Man]'s editor",
    "questionPatternModEntities": "Were M1 and M2 written by , edited by , directed by , executive produced by , and produced by M0 's editor",
    "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.editor.film ns:m.0_g0qr6 .\nns:m.0zvz2b2 ns:film.film.directed_by ?x0 .\nns:m.0zvz2b2 ns:film.film.edited_by ?x0 .\nns:m.0zvz2b2 ns:film.film.executive_produced_by ?x0 .\nns:m.0zvz2b2 ns:film.film.produced_by|ns:film.film.production_companies ?x0 .\nns:m.0zvz2b2 ns:film.film.written_by ?x0 .\nns:m.0zxyz5j ns:film.film.directed_by ?x0 .\nns:m.0zxyz5j ns:film.film.edited_by ?x0 .\nns:m.0zxyz5j ns:film.film.executive_produced_by ?x0 .\nns:m.0zxyz5j ns:film.film.produced_by|ns:film.film.production_companies ?x0 .\nns:m.0zxyz5j ns:film.film.written_by ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 ?x0 .\nM1 P2 ?x0 .\nM1 P3 ?x0 .\nM1 P4 ?x0 .\nM1 P5 ?x0 .\nM2 P1 ?x0 .\nM2 P2 ?x0 .\nM2 P3 ?x0 .\nM2 P4 ?x0 .\nM2 P5 ?x0\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 47
  },
  {
    "questionIdx": 183781,
    "questionWithBrackets": "What was produced, written, executive produced, directed, and edited by [The Brown Bunny]'s costume designer, cinematographer, and producer",
    "questionPatternModEntities": "What was produced , written , executive produced , directed , and edited by M0 's costume designer , cinematographer , and producer",
    "questionTemplate": "What was [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] , [ROLE_SIMPLE] , and [ROLE_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.film.directed_by ?x1 .\n?x0 ns:film.film.edited_by ?x1 .\n?x0 ns:film.film.executive_produced_by ?x1 .\n?x0 ns:film.film.produced_by|ns:film.film.production_companies ?x1 .\n?x0 ns:film.film.written_by ?x1 .\n?x1 ns:film.cinematographer.film ns:m.01n9cy .\n?x1 ns:film.film_costumer_designer.costume_design_for_film ns:m.01n9cy .\n?x1 ns:film.producer.film|ns:film.production_company.films ns:m.01n9cy\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x0 P3 ?x1 .\n?x0 P4 ?x1 .\n?x1 P5 M0 .\n?x1 P6 M0 .\n?x1 P7 M0\n}",
    "expectedResponse": "Promises Written in Water",
    "recursionDepth": 47
  },
  {
    "questionIdx": 107512,
    "questionWithBrackets": "Was an American person that married [Mrs. Kalman]'s actor and influenced a Japanese cinematographer [David Lynch]",
    "questionPatternModEntities": "Was a American person that married M2 's actor and influenced a Japanese cinematographer M3",
    "questionTemplate": "Was a [ADJECTIVE_SIMPLE] [NP_SIMPLE] that [VP_SIMPLE] [entity] 's [ROLE_SIMPLE] and [VP_SIMPLE] a [ADJECTIVE_SIMPLE] [NP_SIMPLE] [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 a ns:film.cinematographer .\n?x0 ns:people.person.nationality ns:m.03_3d .\n?x1 ns:film.actor.film/ns:film.performance.character ns:m.0gz5ly_ .\nFILTER ( ns:m.026dx != ?x1 ) .\nns:m.026dx a ns:people.person .\nns:m.026dx ns:influence.influence_node.influenced ?x0 .\nns:m.026dx ns:people.person.nationality ns:m.09c7w0 .\nns:m.026dx ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ?x1\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M1 .\n?x0 a M0 .\n?x1 P1 M2 .\nFILTER ( M3 != ?x1 ) .\nM3 P0 M5 .\nM3 P2 ?x0 .\nM3 P3 ?x1 .\nM3 a M4\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 47
  },
  {
    "questionIdx": 126391,
    "questionWithBrackets": "Were [The Fifth Wall] and [It's Not About the Shawerma] executive produced by, produced by, directed by, written by, and edited by [Anatomie des Weggehens]'s writer",
    "questionPatternModEntities": "Were M1 and M2 executive produced by , produced by , directed by , written by , and edited by M0 's writer",
    "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.writer.film ns:m.0xn160y .\nns:m.0_2zrgs ns:film.film.directed_by ?x0 .\nns:m.0_2zrgs ns:film.film.edited_by ?x0 .\nns:m.0_2zrgs ns:film.film.executive_produced_by ?x0 .\nns:m.0_2zrgs ns:film.film.produced_by|ns:film.film.production_companies ?x0 .\nns:m.0_2zrgs ns:film.film.written_by ?x0 .\nns:m.0zztylq ns:film.film.directed_by ?x0 .\nns:m.0zztylq ns:film.film.edited_by ?x0 .\nns:m.0zztylq ns:film.film.executive_produced_by ?x0 .\nns:m.0zztylq ns:film.film.produced_by|ns:film.film.production_companies ?x0 .\nns:m.0zztylq ns:film.film.written_by ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 ?x0 .\nM1 P2 ?x0 .\nM1 P3 ?x0 .\nM1 P4 ?x0 .\nM1 P5 ?x0 .\nM2 P1 ?x0 .\nM2 P2 ?x0 .\nM2 P3 ?x0 .\nM2 P4 ?x0 .\nM2 P5 ?x0\n}",
    "expectedResponse": "No",
    "recursionDepth": 47
  },
  {
    "questionIdx": 181708,
    "questionWithBrackets": "What was produced by [South from Granada]'s female executive producer's Spanish spouse and produced by a costume designer's sibling",
    "questionPatternModEntities": "What was produced by M1 's female executive producer 's Spanish spouse and produced by a costume designer 's sibling",
    "questionTemplate": "What was [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] and [VP_SIMPLE] by a [NP_SIMPLE] 's [ROLE_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.film.produced_by|ns:film.film.production_companies ?x1 .\n?x0 ns:film.film.produced_by|ns:film.film.production_companies ?x2 .\n?x1 ns:people.person.nationality ns:m.06mkj .\n?x1 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ?x3 .\n?x2 ns:people.person.sibling_s/ns:people.sibling_relationship.sibling|ns:fictional_universe.fictional_character.siblings/ns:fictional_universe.sibling_relationship_of_fictional_characters.siblings ?x4 .\n?x3 ns:film.producer.films_executive_produced ns:m.02z31k3 .\n?x3 ns:people.person.gender ns:m.02zsn .\n?x4 a ns:film.film_costumer_designer .\nFILTER ( ?x1 != ?x3 ) .\nFILTER ( ?x2 != ?x4 )\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P0 ?x2 .\n?x1 P1 M0 .\n?x1 P2 ?x3 .\n?x2 P3 ?x4 .\n?x3 P4 M1 .\n?x3 P5 M2 .\n?x4 a M3 .\nFILTER ( ?x1 != ?x3 ) .\nFILTER ( ?x2 != ?x4 )\n}",
    "expectedResponse": "La vida alegre",
    "recursionDepth": 47
  },
  {
    "questionIdx": 122664,
    "questionWithBrackets": "Were [Planet Terror] and [Harmonica's Howl] edited by a cinematographer and star of [Road To Ythaca], edited by [Guto Parente], and produced by [Rita Toledo]",
    "questionPatternModEntities": "Were M1 and M4 edited by a cinematographer and star of M0 , edited by M3 , and produced by M2",
    "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by a [ROLE_SIMPLE] and [ROLE_SIMPLE] of [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.actor.film/ns:film.performance.film ns:m.0g4trsz .\n?x0 ns:film.cinematographer.film ns:m.0g4trsz .\nns:m.03bxrfz ns:film.film.edited_by ?x0 .\nns:m.03bxrfz ns:film.film.edited_by ns:m.0g4trt7 .\nns:m.03bxrfz ns:film.film.produced_by|ns:film.film.production_companies ns:m.07469m5 .\nns:m.0rh87h_ ns:film.film.edited_by ?x0 .\nns:m.0rh87h_ ns:film.film.edited_by ns:m.0g4trt7 .\nns:m.0rh87h_ ns:film.film.produced_by|ns:film.film.production_companies ns:m.07469m5\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M0 .\nM1 P2 M2 .\nM1 P3 ?x0 .\nM1 P3 M3 .\nM4 P2 M2 .\nM4 P3 ?x0 .\nM4 P3 M3\n}",
    "expectedResponse": "No",
    "recursionDepth": 47
  },
  {
    "questionIdx": 178832,
    "questionWithBrackets": "What was executive produced by, produced by, written by, edited by, and directed by [The Brown Bunny]'s editor and costume designer",
    "questionPatternModEntities": "What was executive produced by , produced by , written by , edited by , and directed by M0 's editor and costume designer",
    "questionTemplate": "What was [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] and [ROLE_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.film.directed_by ?x1 .\n?x0 ns:film.film.edited_by ?x1 .\n?x0 ns:film.film.executive_produced_by ?x1 .\n?x0 ns:film.film.produced_by|ns:film.film.production_companies ?x1 .\n?x0 ns:film.film.written_by ?x1 .\n?x1 ns:film.editor.film ns:m.01n9cy .\n?x1 ns:film.film_costumer_designer.costume_design_for_film ns:m.01n9cy\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x0 P3 ?x1 .\n?x0 P4 ?x1 .\n?x1 P5 M0 .\n?x1 P6 M0\n}",
    "expectedResponse": "Promises Written in Water",
    "recursionDepth": 47
  },
  {
    "questionIdx": 52318,
    "questionWithBrackets": "Was [Derek Wayne Johnson] influenced by a film's star and costume designer, influenced by [John Huston], and influenced by a costume designer",
    "questionPatternModEntities": "Was M2 influenced by a film 's star and costume designer , influenced by M3 , and influenced by a costume designer",
    "questionTemplate": "Was [entity] [VP_SIMPLE] by a [NP_SIMPLE] 's [ROLE_SIMPLE] and [ROLE_SIMPLE] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by a [NP_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 a ns:film.film_costumer_designer .\n?x1 ns:film.actor.film/ns:film.performance.film ?x2 .\n?x1 ns:film.film_costumer_designer.costume_design_for_film ?x2 .\n?x2 a ns:film.film .\nns:m.0v9clzh ns:influence.influence_node.influenced_by ?x0 .\nns:m.0v9clzh ns:influence.influence_node.influenced_by ?x1 .\nns:m.0v9clzh ns:influence.influence_node.influenced_by ns:m.0c12h\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 a M0 .\n?x1 P0 ?x2 .\n?x1 P1 ?x2 .\n?x2 a M1 .\nM2 P2 ?x0 .\nM2 P2 ?x1 .\nM2 P2 M3\n}",
    "expectedResponse": "No",
    "recursionDepth": 47
  },
  {
    "questionIdx": 113726,
    "questionWithBrackets": "Were [Blues for the Avatar] and [Rick's Canoe] edited by, directed by, written by, produced by, and executive produced by [Morgan\u2019s Cake]'s editor",
    "questionPatternModEntities": "Were M1 and M2 edited by , directed by , written by , produced by , and executive produced by M0 's editor",
    "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.editor.film ns:m.0bvc29c .\nns:m.0znn7j_ ns:film.film.directed_by ?x0 .\nns:m.0znn7j_ ns:film.film.edited_by ?x0 .\nns:m.0znn7j_ ns:film.film.executive_produced_by ?x0 .\nns:m.0znn7j_ ns:film.film.produced_by|ns:film.film.production_companies ?x0 .\nns:m.0znn7j_ ns:film.film.written_by ?x0 .\nns:m.0zvz2b2 ns:film.film.directed_by ?x0 .\nns:m.0zvz2b2 ns:film.film.edited_by ?x0 .\nns:m.0zvz2b2 ns:film.film.executive_produced_by ?x0 .\nns:m.0zvz2b2 ns:film.film.produced_by|ns:film.film.production_companies ?x0 .\nns:m.0zvz2b2 ns:film.film.written_by ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 ?x0 .\nM1 P2 ?x0 .\nM1 P3 ?x0 .\nM1 P4 ?x0 .\nM1 P5 ?x0 .\nM2 P1 ?x0 .\nM2 P2 ?x0 .\nM2 P3 ?x0 .\nM2 P4 ?x0 .\nM2 P5 ?x0\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 47
  },
  {
    "questionIdx": 186003,
    "questionWithBrackets": "What was written by, edited by, directed by, executive produced by, and produced by [Far West: A True Western]'s art director and director",
    "questionPatternModEntities": "What was written by , edited by , directed by , executive produced by , and produced by M0 's art director and director",
    "questionTemplate": "What was [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] and [ROLE_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.film.directed_by ?x1 .\n?x0 ns:film.film.edited_by ?x1 .\n?x0 ns:film.film.executive_produced_by ?x1 .\n?x0 ns:film.film.produced_by|ns:film.film.production_companies ?x1 .\n?x0 ns:film.film.written_by ?x1 .\n?x1 ns:film.director.film ns:m.0107hywx .\n?x1 ns:film.film_art_director.films_art_directed ns:m.0107hywx\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x0 P3 ?x1 .\n?x0 P4 ?x1 .\n?x1 P5 M0 .\n?x1 P6 M0\n}",
    "expectedResponse": "Viagem na Chuva",
    "recursionDepth": 47
  },
  {
    "questionIdx": 16244,
    "questionWithBrackets": "Did [Osmosis Jones] star [Ben Stein], star [Head of State]'s director and star, and star a film producer's founder",
    "questionPatternModEntities": "Did M2 star M3 , star M0 's director and star , and star a film producer 's founder",
    "questionTemplate": "Did [entity] [VP_SIMPLE] [entity] , [VP_SIMPLE] [entity] 's [ROLE_SIMPLE] and [ROLE_SIMPLE] , and [VP_SIMPLE] a [NP_SIMPLE] 's [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.actor.film/ns:film.performance.film ns:m.039lgd .\n?x0 ns:film.director.film ns:m.039lgd .\n?x1 ns:organization.organization_founder.organizations_founded ?x2 .\n?x2 a ns:film.producer .\nns:m.0dqwvw ns:film.film.starring/ns:film.performance.actor ?x0 .\nns:m.0dqwvw ns:film.film.starring/ns:film.performance.actor ?x1 .\nns:m.0dqwvw ns:film.film.starring/ns:film.performance.actor ns:m.01n1gc\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M0 .\n?x1 P2 ?x2 .\n?x2 a M1 .\nM2 P3 ?x0 .\nM2 P3 ?x1 .\nM2 P3 M3\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 47
  },
  {
    "questionIdx": 116684,
    "questionWithBrackets": "Were [Fighting Elegy], [It's Not About the Shawerma], [Blues for the Avatar], [White Stork Is Coming], and [Rick's Canoe] edited by, produced by, and executive produced by an actor's parent",
    "questionPatternModEntities": "Were M1 , M2 , M3 , M4 , and M5 edited by , produced by , and executive produced by a actor 's parent",
    "questionTemplate": "Were [entity] , [entity] , [entity] , [entity] , and [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by a [NP_SIMPLE] 's [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:people.person.children|ns:fictional_universe.fictional_character.children|ns:organization.organization.child/ns:organization.organization_relationship.child ?x1 .\n?x1 a ns:film.actor .\nns:m.09sgzr ns:film.film.edited_by ?x0 .\nns:m.09sgzr ns:film.film.executive_produced_by ?x0 .\nns:m.09sgzr ns:film.film.produced_by|ns:film.film.production_companies ?x0 .\nns:m.0znn7j_ ns:film.film.edited_by ?x0 .\nns:m.0znn7j_ ns:film.film.executive_produced_by ?x0 .\nns:m.0znn7j_ ns:film.film.produced_by|ns:film.film.production_companies ?x0 .\nns:m.0zvz2b2 ns:film.film.edited_by ?x0 .\nns:m.0zvz2b2 ns:film.film.executive_produced_by ?x0 .\nns:m.0zvz2b2 ns:film.film.produced_by|ns:film.film.production_companies ?x0 .\nns:m.0zxyz5j ns:film.film.edited_by ?x0 .\nns:m.0zxyz5j ns:film.film.executive_produced_by ?x0 .\nns:m.0zxyz5j ns:film.film.produced_by|ns:film.film.production_companies ?x0 .\nns:m.0zztylq ns:film.film.edited_by ?x0 .\nns:m.0zztylq ns:film.film.executive_produced_by ?x0 .\nns:m.0zztylq ns:film.film.produced_by|ns:film.film.production_companies ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x1 a M0 .\nM1 P1 ?x0 .\nM1 P2 ?x0 .\nM1 P3 ?x0 .\nM2 P1 ?x0 .\nM2 P2 ?x0 .\nM2 P3 ?x0 .\nM3 P1 ?x0 .\nM3 P2 ?x0 .\nM3 P3 ?x0 .\nM4 P1 ?x0 .\nM4 P2 ?x0 .\nM4 P3 ?x0 .\nM5 P1 ?x0 .\nM5 P2 ?x0 .\nM5 P3 ?x0\n}",
    "expectedResponse": "No",
    "recursionDepth": 47
  },
  {
    "questionIdx": 184754,
    "questionWithBrackets": "What was written by [Raining in the Mountain]'s writer, executive producer, and art director, directed by a film director, and produced by [Run Run Shaw]",
    "questionPatternModEntities": "What was written by M1 's writer , executive producer , and art director , directed by a film director , and produced by M0",
    "questionTemplate": "What was [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] , [ROLE_SIMPLE] , and [ROLE_SIMPLE] , [VP_SIMPLE] by a [NP_SIMPLE] , and [VP_SIMPLE] by [entity]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.film.directed_by ?x1 .\n?x0 ns:film.film.produced_by|ns:film.film.production_companies ns:m.01d_fv .\n?x0 ns:film.film.written_by ?x2 .\n?x1 a ns:film.director .\n?x2 ns:film.film_art_director.films_art_directed ns:m.02q6mzs .\n?x2 ns:film.producer.films_executive_produced ns:m.02q6mzs .\n?x2 ns:film.writer.film ns:m.02q6mzs\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 M0 .\n?x0 P2 ?x2 .\n?x1 P3 M1 .\n?x1 P4 M1 .\n?x1 P5 M1 .\n?x2 a M2\n}",
    "expectedResponse": "Come Drink with Me",
    "recursionDepth": 47
  },
  {
    "questionIdx": 171358,
    "questionWithBrackets": "What was directed by, edited by, produced by, executive produced by, and written by [Methel Island]'s executive producer and editor",
    "questionPatternModEntities": "What was directed by , edited by , produced by , executive produced by , and written by M0 's executive producer and editor",
    "questionTemplate": "What was [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] and [ROLE_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.film.directed_by ?x1 .\n?x0 ns:film.film.edited_by ?x1 .\n?x0 ns:film.film.executive_produced_by ?x1 .\n?x0 ns:film.film.produced_by|ns:film.film.production_companies ?x1 .\n?x0 ns:film.film.written_by ?x1 .\n?x1 ns:film.editor.film ns:m.0_skg56 .\n?x1 ns:film.producer.films_executive_produced ns:m.0_skg56\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x0 P3 ?x1 .\n?x0 P4 ?x1 .\n?x1 P5 M0 .\n?x1 P6 M0\n}",
    "expectedResponse": "Methel Island; Gender Games",
    "recursionDepth": 47
  },
  {
    "questionIdx": 151035,
    "questionWithBrackets": "What did a writer of [Samad Goes to the City] and [Maslakh] produce, write, edit, direct, and executive produce",
    "questionPatternModEntities": "What did a writer of M0 and M1 produce , write , edit , direct , and executive produce",
    "questionTemplate": "What did a [ROLE_SIMPLE] of [entity] and [entity] [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.film.directed_by ?x1 .\n?x0 ns:film.film.edited_by ?x1 .\n?x0 ns:film.film.executive_produced_by ?x1 .\n?x0 ns:film.film.produced_by|ns:film.film.production_companies ?x1 .\n?x0 ns:film.film.written_by ?x1 .\n?x1 ns:film.writer.film ns:g.12qhk7m8r .\n?x1 ns:film.writer.film ns:g.12qhkd1dp\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x0 P3 ?x1 .\n?x0 P4 ?x1 .\n?x1 P5 M0 .\n?x1 P5 M1\n}",
    "expectedResponse": "Samad dar rah ejdeha",
    "recursionDepth": 47
  },
  {
    "questionIdx": 129781,
    "questionWithBrackets": "Were [White Stork Is Coming] and [Rick's Canoe] executive produced by, produced by, directed by, edited by, and written by [Crash My Funeral]'s executive producer",
    "questionPatternModEntities": "Were M1 and M2 executive produced by , produced by , directed by , edited by , and written by M0 's executive producer",
    "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.producer.films_executive_produced ns:m.0zp0j9w .\nns:m.0zvz2b2 ns:film.film.directed_by ?x0 .\nns:m.0zvz2b2 ns:film.film.edited_by ?x0 .\nns:m.0zvz2b2 ns:film.film.executive_produced_by ?x0 .\nns:m.0zvz2b2 ns:film.film.produced_by|ns:film.film.production_companies ?x0 .\nns:m.0zvz2b2 ns:film.film.written_by ?x0 .\nns:m.0zxyz5j ns:film.film.directed_by ?x0 .\nns:m.0zxyz5j ns:film.film.edited_by ?x0 .\nns:m.0zxyz5j ns:film.film.executive_produced_by ?x0 .\nns:m.0zxyz5j ns:film.film.produced_by|ns:film.film.production_companies ?x0 .\nns:m.0zxyz5j ns:film.film.written_by ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 ?x0 .\nM1 P2 ?x0 .\nM1 P3 ?x0 .\nM1 P4 ?x0 .\nM1 P5 ?x0 .\nM2 P1 ?x0 .\nM2 P2 ?x0 .\nM2 P3 ?x0 .\nM2 P4 ?x0 .\nM2 P5 ?x0\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 47
  },
  {
    "questionIdx": 235615,
    "questionWithBrackets": "Who was influenced by [Chaz Bufe] and [Sarah Vowell], influenced by a film editor, and influenced by [Studio Ghibli]'s founder and employee",
    "questionPatternModEntities": "Who was influenced by M1 and M2 , influenced by a film editor , and influenced by M3 's founder and employee",
    "questionTemplate": "Who was [VP_SIMPLE] by [entity] and [entity] , [VP_SIMPLE] by a [NP_SIMPLE] , and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] and [ROLE_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:people.person .\n?x0 ns:influence.influence_node.influenced_by ?x1 .\n?x0 ns:influence.influence_node.influenced_by ?x2 .\n?x0 ns:influence.influence_node.influenced_by ns:m.02mwnp .\n?x0 ns:influence.influence_node.influenced_by ns:m.0586l6 .\n?x1 ns:organization.organization_founder.organizations_founded ns:m.0130kc .\n?x1 ns:people.person.employment_history/ns:business.employment_tenure.company ns:m.0130kc .\n?x2 a ns:film.editor\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P0 ?x2 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 a M0 .\n?x1 P1 M3 .\n?x1 P2 M3 .\n?x2 a M4\n}",
    "expectedResponse": "Garret Schuelke",
    "recursionDepth": 47
  },
  {
    "questionIdx": 218045,
    "questionWithBrackets": "Who influenced [Busboy Productions]'s male founder, was influenced by [Robert Benchley], and was influenced by [The Touch]'s director",
    "questionPatternModEntities": "Who influenced M2 's male founder , was influenced by M1 , and was influenced by M4 's director",
    "questionTemplate": "Who [VP_SIMPLE] [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] , was [VP_SIMPLE] by [entity] , and was [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:people.person .\n?x0 ns:influence.influence_node.influenced ?x1 .\n?x0 ns:influence.influence_node.influenced_by ?x2 .\n?x0 ns:influence.influence_node.influenced_by ns:m.03gph9 .\n?x1 ns:organization.organization_founder.organizations_founded ns:m.08jsny .\n?x1 ns:people.person.gender ns:m.05zppz .\n?x2 ns:film.director.film ns:m.05tt3_\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x2 .\n?x0 P1 M1 .\n?x0 a M0 .\n?x1 P2 M2 .\n?x1 P3 M3 .\n?x2 P4 M4\n}",
    "expectedResponse": "Woody Allen",
    "recursionDepth": 47
  },
  {
    "questionIdx": 127458,
    "questionWithBrackets": "Were [The Matrix] and [Speed Racer] produced by [Silver Pictures], written by a female executive producer of [Bound], and directed by [Andy Wachowski]",
    "questionPatternModEntities": "Were M2 and M5 produced by M3 , written by a female executive producer of M0 , and directed by M4",
    "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by [entity] , [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] , and [VP_SIMPLE] by [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.producer.films_executive_produced ns:m.01l25p .\n?x0 ns:people.person.gender ns:m.02zsn .\nns:m.027gy0k ns:film.film.directed_by ns:m.03nzd5h .\nns:m.027gy0k ns:film.film.produced_by|ns:film.film.production_companies ns:m.05h4t7 .\nns:m.027gy0k ns:film.film.written_by ?x0 .\nns:m.07cz2 ns:film.film.directed_by ns:m.03nzd5h .\nns:m.07cz2 ns:film.film.produced_by|ns:film.film.production_companies ns:m.05h4t7 .\nns:m.07cz2 ns:film.film.written_by ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nM2 P2 ?x0 .\nM2 P3 M3 .\nM2 P4 M4 .\nM5 P2 ?x0 .\nM5 P3 M3 .\nM5 P4 M4\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 47
  },
  {
    "questionIdx": 220864,
    "questionWithBrackets": "Who married [Sarah Parkinson], was influenced by [Buster Keaton], and was influenced by [The Gold Rush]'s producer, writer, and star",
    "questionPatternModEntities": "Who married M2 , was influenced by M1 , and was influenced by M3 's producer , writer , and star",
    "questionTemplate": "Who [VP_SIMPLE] [entity] , was [VP_SIMPLE] by [entity] , and was [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] , [ROLE_SIMPLE] , and [ROLE_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:people.person .\n?x0 ns:influence.influence_node.influenced_by ?x1 .\n?x0 ns:influence.influence_node.influenced_by ns:m.0btj0 .\n?x0 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ns:m.0288p4q .\n?x1 ns:film.actor.film/ns:film.performance.film ns:m.0jsfp .\n?x1 ns:film.producer.film|ns:film.production_company.films ns:m.0jsfp .\n?x1 ns:film.writer.film ns:m.0jsfp .\nFILTER ( ?x0 != ns:m.0288p4q )\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P0 M1 .\n?x0 P1 M2 .\n?x0 a M0 .\n?x1 P2 M3 .\n?x1 P3 M3 .\n?x1 P4 M3 .\nFILTER ( ?x0 != M2 )\n}",
    "expectedResponse": "Paul Merton",
    "recursionDepth": 47
  },
  {
    "questionIdx": 113680,
    "questionWithBrackets": "Were [Blues for the Avatar] and [It's Not About the Shawerma] executive produced by, produced by, directed by, edited by, and written by [Promoted to Glory]'s director",
    "questionPatternModEntities": "Were M1 and M2 executive produced by , produced by , directed by , edited by , and written by M0 's director",
    "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.director.film ns:m.0ghf7cz .\nns:m.0znn7j_ ns:film.film.directed_by ?x0 .\nns:m.0znn7j_ ns:film.film.edited_by ?x0 .\nns:m.0znn7j_ ns:film.film.executive_produced_by ?x0 .\nns:m.0znn7j_ ns:film.film.produced_by|ns:film.film.production_companies ?x0 .\nns:m.0znn7j_ ns:film.film.written_by ?x0 .\nns:m.0zztylq ns:film.film.directed_by ?x0 .\nns:m.0zztylq ns:film.film.edited_by ?x0 .\nns:m.0zztylq ns:film.film.executive_produced_by ?x0 .\nns:m.0zztylq ns:film.film.produced_by|ns:film.film.production_companies ?x0 .\nns:m.0zztylq ns:film.film.written_by ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 ?x0 .\nM1 P2 ?x0 .\nM1 P3 ?x0 .\nM1 P4 ?x0 .\nM1 P5 ?x0 .\nM2 P1 ?x0 .\nM2 P2 ?x0 .\nM2 P3 ?x0 .\nM2 P4 ?x0 .\nM2 P5 ?x0\n}",
    "expectedResponse": "No",
    "recursionDepth": 47
  },
  {
    "questionIdx": 122344,
    "questionWithBrackets": "Were [PT Golden Energy Mines] and [Apple Corps] founded by [Paul McCartney], founded by a film's cinematographer, and founded by [John Lennon] and [George Harrison]",
    "questionPatternModEntities": "Were M1 and M5 founded by M2 , founded by a film 's cinematographer , and founded by M3 and M4",
    "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by [entity] , [VP_SIMPLE] by a [NP_SIMPLE] 's [ROLE_SIMPLE] , and [VP_SIMPLE] by [entity] and [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.cinematographer.film ?x1 .\n?x1 a ns:film.film .\nns:m.02_7z_ ns:organization.organization.founders ?x0 .\nns:m.02_7z_ ns:organization.organization.founders ns:m.01vsl3_ .\nns:m.02_7z_ ns:organization.organization.founders ns:m.03bnv .\nns:m.02_7z_ ns:organization.organization.founders ns:m.03j24kf .\nns:m.0gtpjxs ns:organization.organization.founders ?x0 .\nns:m.0gtpjxs ns:organization.organization.founders ns:m.01vsl3_ .\nns:m.0gtpjxs ns:organization.organization.founders ns:m.03bnv .\nns:m.0gtpjxs ns:organization.organization.founders ns:m.03j24kf\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x1 a M0 .\nM1 P1 ?x0 .\nM1 P1 M2 .\nM1 P1 M3 .\nM1 P1 M4 .\nM5 P1 ?x0 .\nM5 P1 M2 .\nM5 P1 M3 .\nM5 P1 M4\n}",
    "expectedResponse": "No",
    "recursionDepth": 47
  },
  {
    "questionIdx": 176649,
    "questionWithBrackets": "What was executive produced by [Jeff Sackman] and [Michael Paseornek] and directed by a film's costume designer, star, producer, and art director",
    "questionPatternModEntities": "What was executive produced by M0 and M1 and directed by a film 's costume designer , star , producer , and art director",
    "questionTemplate": "What was [VP_SIMPLE] by [entity] and [entity] and [VP_SIMPLE] by a [NP_SIMPLE] 's [ROLE_SIMPLE] , [ROLE_SIMPLE] , [ROLE_SIMPLE] , and [ROLE_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.film.directed_by ?x1 .\n?x0 ns:film.film.executive_produced_by ns:m.0jtw4c .\n?x0 ns:film.film.executive_produced_by ns:m.0jz4vz .\n?x1 ns:film.actor.film/ns:film.performance.film ?x2 .\n?x1 ns:film.film_art_director.films_art_directed ?x2 .\n?x1 ns:film.film_costumer_designer.costume_design_for_film ?x2 .\n?x1 ns:film.producer.film|ns:film.production_company.films ?x2 .\n?x2 a ns:film.film\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P1 ?x1 .\n?x1 P2 ?x2 .\n?x1 P3 ?x2 .\n?x1 P4 ?x2 .\n?x1 P5 ?x2 .\n?x2 a M2\n}",
    "expectedResponse": "Buffalo '66",
    "recursionDepth": 47
  },
  {
    "questionIdx": 125431,
    "questionWithBrackets": "Were [Temporary Release] and [Frihed p\u00e5 pr\u00f8ve.(2010)] edited by a costume designer that [Vibeke Winding] married, written by [Erik Clausen], and produced by [Peter Ingemann]",
    "questionPatternModEntities": "Were M2 and M5 edited by a costume designer that M1 married , written by M3 , and produced by M4",
    "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by a [NP_SIMPLE] that [entity] [VP_SIMPLE] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 a ns:film.film_costumer_designer .\n?x0 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ns:m.0j48d86 .\nFILTER ( ?x0 != ns:m.0j48d86 ) .\nns:m.09jyt90 ns:film.film.edited_by ?x0 .\nns:m.09jyt90 ns:film.film.produced_by|ns:film.film.production_companies ns:m.09gqy1_ .\nns:m.09jyt90 ns:film.film.written_by ns:m.09fc2zg .\nns:m.09jyt93 ns:film.film.edited_by ?x0 .\nns:m.09jyt93 ns:film.film.produced_by|ns:film.film.production_companies ns:m.09gqy1_ .\nns:m.09jyt93 ns:film.film.written_by ns:m.09fc2zg\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M1 .\n?x0 a M0 .\nFILTER ( ?x0 != M1 ) .\nM2 P1 M3 .\nM2 P2 M4 .\nM2 P3 ?x0 .\nM5 P1 M3 .\nM5 P2 M4 .\nM5 P3 ?x0\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 48
  },
  {
    "questionIdx": 82453,
    "questionWithBrackets": "Was [The Silence of the Sea] written by, produced by, edited by, executive produced by, and directed by [Un flic]'s French director",
    "questionPatternModEntities": "Was M2 written by , produced by , edited by , executive produced by , and directed by M1 's French director",
    "questionTemplate": "Was [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.director.film ns:m.0b1lwc .\n?x0 ns:people.person.nationality ns:m.0f8l9c .\nns:m.0bgspt ns:film.film.directed_by ?x0 .\nns:m.0bgspt ns:film.film.edited_by ?x0 .\nns:m.0bgspt ns:film.film.executive_produced_by ?x0 .\nns:m.0bgspt ns:film.film.produced_by|ns:film.film.production_companies ?x0 .\nns:m.0bgspt ns:film.film.written_by ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nM2 P2 ?x0 .\nM2 P3 ?x0 .\nM2 P4 ?x0 .\nM2 P5 ?x0 .\nM2 P6 ?x0\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 48
  },
  {
    "questionIdx": 56975,
    "questionWithBrackets": "Was [Goat Story] executive produced by, written by, directed by, edited by, and produced by [Goat Story 2]'s art director and editor",
    "questionPatternModEntities": "Was M1 executive produced by , written by , directed by , edited by , and produced by M0 's art director and editor",
    "questionTemplate": "Was [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] and [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.editor.film ns:m.0nbtt_1 .\n?x0 ns:film.film_art_director.films_art_directed ns:m.0nbtt_1 .\nns:m.02qvsld ns:film.film.directed_by ?x0 .\nns:m.02qvsld ns:film.film.edited_by ?x0 .\nns:m.02qvsld ns:film.film.executive_produced_by ?x0 .\nns:m.02qvsld ns:film.film.produced_by|ns:film.film.production_companies ?x0 .\nns:m.02qvsld ns:film.film.written_by ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M0 .\nM1 P2 ?x0 .\nM1 P3 ?x0 .\nM1 P4 ?x0 .\nM1 P5 ?x0 .\nM1 P6 ?x0\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 48
  },
  {
    "questionIdx": 181620,
    "questionWithBrackets": "What was produced by [Recount]'s producer, executive producer, and director, distributed by [Universal Studios] and [FilmFlex], and distributed by [DreamWorks Studios]",
    "questionPatternModEntities": "What was produced by M3 's producer , executive producer , and director , distributed by M0 and M1 , and distributed by M2",
    "questionTemplate": "What was [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] , [ROLE_SIMPLE] , and [ROLE_SIMPLE] , [VP_SIMPLE] by [entity] and [entity] , and [VP_SIMPLE] by [entity]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.film.distributors/ns:film.film_film_distributor_relationship.distributor ns:m.016tw3 .\n?x0 ns:film.film.distributors/ns:film.film_film_distributor_relationship.distributor ns:m.01gb54 .\n?x0 ns:film.film.distributors/ns:film.film_film_distributor_relationship.distributor ns:m.03xq0f .\n?x0 ns:film.film.produced_by|ns:film.film.production_companies ?x1 .\n?x1 ns:film.director.film ns:m.043mk4y .\n?x1 ns:film.producer.films_executive_produced ns:m.043mk4y .\n?x1 ns:film.producer.film|ns:film.production_company.films ns:m.043mk4y\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P1 ?x1 .\n?x1 P2 M3 .\n?x1 P3 M3 .\n?x1 P4 M3\n}",
    "expectedResponse": "Meet the Fockers",
    "recursionDepth": 48
  },
  {
    "questionIdx": 164708,
    "questionWithBrackets": "What screenwriter was influenced by [Louis C.K.: Chewed Up]'s Mexican executive producer and influenced [Inside the CIA]'s executive producer, director, and star",
    "questionPatternModEntities": "What screenwriter was influenced by M2 's Mexican executive producer and influenced M1 's executive producer , director , and star",
    "questionTemplate": "What [NP_SIMPLE] was [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] and [VP_SIMPLE] [entity] 's [ROLE_SIMPLE] , [ROLE_SIMPLE] , and [ROLE_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:film.writer .\n?x0 ns:influence.influence_node.influenced ?x1 .\n?x0 ns:influence.influence_node.influenced_by ?x2 .\n?x1 ns:film.actor.film/ns:film.performance.film ns:m.099m9s .\n?x1 ns:film.director.film ns:m.099m9s .\n?x1 ns:film.producer.films_executive_produced ns:m.099m9s .\n?x2 ns:film.producer.films_executive_produced ns:m.0cr_ltd .\n?x2 ns:people.person.nationality ns:m.0b90_r\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x2 .\n?x0 a M0 .\n?x1 P2 M1 .\n?x1 P3 M1 .\n?x1 P4 M1 .\n?x2 P2 M2 .\n?x2 P5 M3\n}",
    "expectedResponse": "Ricky Gervais",
    "recursionDepth": 48
  },
  {
    "questionIdx": 80555,
    "questionWithBrackets": "Was [The Fifth Wall] directed, produced, edited, written, and executive produced by [The Private Life Of Fenfen]'s producer, director, and editor",
    "questionPatternModEntities": "Was M1 directed , produced , edited , written , and executive produced by M0 's producer , director , and editor",
    "questionTemplate": "Was [entity] [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] , [ROLE_SIMPLE] , and [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.director.film ns:m.0_zb30t .\n?x0 ns:film.editor.film ns:m.0_zb30t .\n?x0 ns:film.producer.film|ns:film.production_company.films ns:m.0_zb30t .\nns:m.0_2zrgs ns:film.film.directed_by ?x0 .\nns:m.0_2zrgs ns:film.film.edited_by ?x0 .\nns:m.0_2zrgs ns:film.film.executive_produced_by ?x0 .\nns:m.0_2zrgs ns:film.film.produced_by|ns:film.film.production_companies ?x0 .\nns:m.0_2zrgs ns:film.film.written_by ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M0 .\n?x0 P2 M0 .\nM1 P3 ?x0 .\nM1 P4 ?x0 .\nM1 P5 ?x0 .\nM1 P6 ?x0 .\nM1 P7 ?x0\n}",
    "expectedResponse": "No",
    "recursionDepth": 48
  },
  {
    "questionIdx": 44471,
    "questionWithBrackets": "Was [African Independence] executive produced by, written by, produced by, directed by, and edited by [Rhode Island School of Design]'s male employee",
    "questionPatternModEntities": "Was M2 executive produced by , written by , produced by , directed by , and edited by M0 's male employee",
    "questionTemplate": "Was [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:people.person.employment_history/ns:business.employment_tenure.company ns:m.02s62q .\n?x0 ns:people.person.gender ns:m.05zppz .\nns:m.0qftyqj ns:film.film.directed_by ?x0 .\nns:m.0qftyqj ns:film.film.edited_by ?x0 .\nns:m.0qftyqj ns:film.film.executive_produced_by ?x0 .\nns:m.0qftyqj ns:film.film.produced_by|ns:film.film.production_companies ?x0 .\nns:m.0qftyqj ns:film.film.written_by ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nM2 P2 ?x0 .\nM2 P3 ?x0 .\nM2 P4 ?x0 .\nM2 P5 ?x0 .\nM2 P6 ?x0\n}",
    "expectedResponse": "No",
    "recursionDepth": 48
  },
  {
    "questionIdx": 124359,
    "questionWithBrackets": "Were [Senseless] and [Mimic] produced by a film distributor's founder and employee, distributed by [Universal Studios], and distributed by [Miramax]",
    "questionPatternModEntities": "Were M1 and M4 produced by a film distributor 's founder and employee , distributed by M2 , and distributed by M3",
    "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by a [NP_SIMPLE] 's [ROLE_SIMPLE] and [ROLE_SIMPLE] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:organization.organization_founder.organizations_founded ?x1 .\n?x0 ns:people.person.employment_history/ns:business.employment_tenure.company ?x1 .\n?x1 a ns:film.film_distributor .\nns:m.04d0ng ns:film.film.distributors/ns:film.film_film_distributor_relationship.distributor ns:m.016tw3 .\nns:m.04d0ng ns:film.film.distributors/ns:film.film_film_distributor_relationship.distributor ns:m.0jz9f .\nns:m.04d0ng ns:film.film.produced_by|ns:film.film.production_companies ?x0 .\nns:m.0bnxck ns:film.film.distributors/ns:film.film_film_distributor_relationship.distributor ns:m.016tw3 .\nns:m.0bnxck ns:film.film.distributors/ns:film.film_film_distributor_relationship.distributor ns:m.0jz9f .\nns:m.0bnxck ns:film.film.produced_by|ns:film.film.production_companies ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x1 a M0 .\nM1 P2 M2 .\nM1 P2 M3 .\nM1 P3 ?x0 .\nM4 P2 M2 .\nM4 P2 M3 .\nM4 P3 ?x0\n}",
    "expectedResponse": "No",
    "recursionDepth": 48
  },
  {
    "questionIdx": 9817,
    "questionWithBrackets": "Did [Home Makeover] and [Despicable Me 2] star [Dana Gaier], star [Steve Carell] and [Russell Brand], and star [Amblimation]'s French employee",
    "questionPatternModEntities": "Did M2 and M6 star M3 , star M4 and M5 , and star M0 's French employee",
    "questionTemplate": "Did [entity] and [entity] [VP_SIMPLE] [entity] , [VP_SIMPLE] [entity] and [entity] , and [VP_SIMPLE] [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:people.person.employment_history/ns:business.employment_tenure.company ns:m.052_rb .\n?x0 ns:people.person.nationality ns:m.0f8l9c .\nns:m.0gwn31_ ns:film.film.starring/ns:film.performance.actor ?x0 .\nns:m.0gwn31_ ns:film.film.starring/ns:film.performance.actor ns:m.04t2l2 .\nns:m.0gwn31_ ns:film.film.starring/ns:film.performance.actor ns:m.06crng .\nns:m.0gwn31_ ns:film.film.starring/ns:film.performance.actor ns:m.084jxb2 .\nns:m.0h2clfr ns:film.film.starring/ns:film.performance.actor ?x0 .\nns:m.0h2clfr ns:film.film.starring/ns:film.performance.actor ns:m.04t2l2 .\nns:m.0h2clfr ns:film.film.starring/ns:film.performance.actor ns:m.06crng .\nns:m.0h2clfr ns:film.film.starring/ns:film.performance.actor ns:m.084jxb2\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nM2 P2 ?x0 .\nM2 P2 M3 .\nM2 P2 M4 .\nM2 P2 M5 .\nM6 P2 ?x0 .\nM6 P2 M3 .\nM6 P2 M4 .\nM6 P2 M5\n}",
    "expectedResponse": "No",
    "recursionDepth": 48
  },
  {
    "questionIdx": 1205,
    "questionWithBrackets": "Did [Amparo Fortuny] produce, direct, and executive produce a film that was edited by and produced by [Aron Gaudet]",
    "questionPatternModEntities": "Did M2 produce , direct , and executive produce a film that was edited by and produced by M1",
    "questionTemplate": "Did [entity] [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] a [NP_SIMPLE] that was [VP_SIMPLE] by and [VP_SIMPLE] by [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 a ns:film.film .\n?x0 ns:film.film.edited_by ns:m.0bbvkq1 .\n?x0 ns:film.film.produced_by|ns:film.film.production_companies ns:m.0bbvkq1 .\nns:m.01146zrh ns:film.director.film ?x0 .\nns:m.01146zrh ns:film.producer.films_executive_produced ?x0 .\nns:m.01146zrh ns:film.producer.film|ns:film.production_company.films ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M1 .\n?x0 P1 M1 .\n?x0 a M0 .\nM2 P2 ?x0 .\nM2 P3 ?x0 .\nM2 P4 ?x0\n}",
    "expectedResponse": "No",
    "recursionDepth": 48
  },
  {
    "questionIdx": 235537,
    "questionWithBrackets": "Who was influenced by [Bill Hicks] and [George Carlin], influenced by [Strangled Eggs]'s male star, and influenced by [Tetragrammaton Records]'s founder",
    "questionPatternModEntities": "Who was influenced by M1 and M2 , influenced by M4 's male star , and influenced by M3 's founder",
    "questionTemplate": "Who was [VP_SIMPLE] by [entity] and [entity] , [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] , and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:people.person .\n?x0 ns:influence.influence_node.influenced_by ?x1 .\n?x0 ns:influence.influence_node.influenced_by ?x2 .\n?x0 ns:influence.influence_node.influenced_by ns:m.014z8v .\n?x0 ns:influence.influence_node.influenced_by ns:m.01wp_jm .\n?x1 ns:organization.organization_founder.organizations_founded ns:m.07d7_m .\n?x2 ns:film.actor.film/ns:film.performance.film ns:m.05q8md4 .\n?x2 ns:people.person.gender ns:m.05zppz\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P0 ?x2 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 a M0 .\n?x1 P1 M3 .\n?x2 P2 M4 .\n?x2 P3 M5\n}",
    "expectedResponse": "Dave Chappelle",
    "recursionDepth": 48
  },
  {
    "questionIdx": 46976,
    "questionWithBrackets": "Was [Backstreets of Paris] directed by, executive produced by, produced by, written by, and edited by [BSE Recordings]'s French founder",
    "questionPatternModEntities": "Was M2 directed by , executive produced by , produced by , written by , and edited by M0 's French founder",
    "questionTemplate": "Was [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:organization.organization_founder.organizations_founded ns:m.0w3ddjm .\n?x0 ns:people.person.nationality ns:m.0f8l9c .\nns:m.0hypxj2 ns:film.film.directed_by ?x0 .\nns:m.0hypxj2 ns:film.film.edited_by ?x0 .\nns:m.0hypxj2 ns:film.film.executive_produced_by ?x0 .\nns:m.0hypxj2 ns:film.film.produced_by|ns:film.film.production_companies ?x0 .\nns:m.0hypxj2 ns:film.film.written_by ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nM2 P2 ?x0 .\nM2 P3 ?x0 .\nM2 P4 ?x0 .\nM2 P5 ?x0 .\nM2 P6 ?x0\n}",
    "expectedResponse": "No",
    "recursionDepth": 48
  },
  {
    "questionIdx": 9452,
    "questionWithBrackets": "Did [Harvey Weinstein] and [Bob Weinstein] found a film distributor, found a producer of [The Fighter] and [Django Unchained], and found [Weinstein Books]",
    "questionPatternModEntities": "Did M3 and M5 found a film distributor , found a producer of M0 and M1 , and found M4",
    "questionTemplate": "Did [entity] and [entity] [VP_SIMPLE] a [NP_SIMPLE] , [VP_SIMPLE] a [ROLE_SIMPLE] of [entity] and [entity] , and [VP_SIMPLE] [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.producer.film|ns:film.production_company.films ns:m.047d21r .\n?x0 ns:film.producer.film|ns:film.production_company.films ns:m.0gwjw0c .\n?x1 a ns:film.film_distributor .\nns:m.05hj_k ns:organization.organization_founder.organizations_founded ?x0 .\nns:m.05hj_k ns:organization.organization_founder.organizations_founded ?x1 .\nns:m.05hj_k ns:organization.organization_founder.organizations_founded ns:m.09tmcn7 .\nns:m.06q8hf ns:organization.organization_founder.organizations_founded ?x0 .\nns:m.06q8hf ns:organization.organization_founder.organizations_founded ?x1 .\nns:m.06q8hf ns:organization.organization_founder.organizations_founded ns:m.09tmcn7\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P0 M1 .\n?x1 a M2 .\nM3 P1 ?x0 .\nM3 P1 ?x1 .\nM3 P1 M4 .\nM5 P1 ?x0 .\nM5 P1 ?x1 .\nM5 P1 M4\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 48
  },
  {
    "questionIdx": 150907,
    "questionWithBrackets": "What did a star and cinematographer of [Baby, I Love You.] direct, edit, executive produce, produce, and write",
    "questionPatternModEntities": "What did a star and cinematographer of M0 direct , edit , executive produce , produce , and write",
    "questionTemplate": "What did a [ROLE_SIMPLE] and [ROLE_SIMPLE] of [entity] [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.film.directed_by ?x1 .\n?x0 ns:film.film.edited_by ?x1 .\n?x0 ns:film.film.executive_produced_by ?x1 .\n?x0 ns:film.film.produced_by|ns:film.film.production_companies ?x1 .\n?x0 ns:film.film.written_by ?x1 .\n?x1 ns:film.actor.film/ns:film.performance.film ns:m.011_z9lq .\n?x1 ns:film.cinematographer.film ns:m.011_z9lq\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x0 P3 ?x1 .\n?x0 P4 ?x1 .\n?x1 P5 M0 .\n?x1 P6 M0\n}",
    "expectedResponse": "Baby, I Love You.; Planet Utero",
    "recursionDepth": 48
  },
  {
    "questionIdx": 85274,
    "questionWithBrackets": "Was [Viagem na Chuva] written by, executive produced by, directed by, produced by, and edited by [Kinefaktura]'s art director and director",
    "questionPatternModEntities": "Was M1 written by , executive produced by , directed by , produced by , and edited by M0 's art director and director",
    "questionTemplate": "Was [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] and [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.director.film ns:m.0vsh_8l .\n?x0 ns:film.film_art_director.films_art_directed ns:m.0vsh_8l .\nns:m.011p1tds ns:film.film.directed_by ?x0 .\nns:m.011p1tds ns:film.film.edited_by ?x0 .\nns:m.011p1tds ns:film.film.executive_produced_by ?x0 .\nns:m.011p1tds ns:film.film.produced_by|ns:film.film.production_companies ?x0 .\nns:m.011p1tds ns:film.film.written_by ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M0 .\nM1 P2 ?x0 .\nM1 P3 ?x0 .\nM1 P4 ?x0 .\nM1 P5 ?x0 .\nM1 P6 ?x0\n}",
    "expectedResponse": "No",
    "recursionDepth": 48
  },
  {
    "questionIdx": 120295,
    "questionWithBrackets": "Were [Lituania Tilsit] and [Apple Corps] founded by [Ringo Starr], founded by [John Lennon] and [Paul McCartney], and founded by a British film producer",
    "questionPatternModEntities": "Were M2 and M6 founded by M3 , founded by M4 and M5 , and founded by a British film producer",
    "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] and [entity] , and [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [NP_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 a ns:film.producer .\n?x0 ns:people.person.nationality ns:m.07ssc .\nns:m.02_7z_ ns:organization.organization.founders ?x0 .\nns:m.02_7z_ ns:organization.organization.founders ns:m.01vrnsk .\nns:m.02_7z_ ns:organization.organization.founders ns:m.01vsl3_ .\nns:m.02_7z_ ns:organization.organization.founders ns:m.03j24kf .\nns:m.0h1bnbh ns:organization.organization.founders ?x0 .\nns:m.0h1bnbh ns:organization.organization.founders ns:m.01vrnsk .\nns:m.0h1bnbh ns:organization.organization.founders ns:m.01vsl3_ .\nns:m.0h1bnbh ns:organization.organization.founders ns:m.03j24kf\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M1 .\n?x0 a M0 .\nM2 P1 ?x0 .\nM2 P1 M3 .\nM2 P1 M4 .\nM2 P1 M5 .\nM6 P1 ?x0 .\nM6 P1 M3 .\nM6 P1 M4 .\nM6 P1 M5\n}",
    "expectedResponse": "No",
    "recursionDepth": 48
  },
  {
    "questionIdx": 118654,
    "questionWithBrackets": "Were [It's Not About the Shawerma] and [Rick's Canoe] directed, executive produced, edited, written, and produced by [Dream a Little Dream]'s editor and producer",
    "questionPatternModEntities": "Were M1 and M2 directed , executive produced , edited , written , and produced by M0 's editor and producer",
    "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] and [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.editor.film ns:m.09bfrf .\n?x0 ns:film.producer.film|ns:film.production_company.films ns:m.09bfrf .\nns:m.0zvz2b2 ns:film.film.directed_by ?x0 .\nns:m.0zvz2b2 ns:film.film.edited_by ?x0 .\nns:m.0zvz2b2 ns:film.film.executive_produced_by ?x0 .\nns:m.0zvz2b2 ns:film.film.produced_by|ns:film.film.production_companies ?x0 .\nns:m.0zvz2b2 ns:film.film.written_by ?x0 .\nns:m.0zztylq ns:film.film.directed_by ?x0 .\nns:m.0zztylq ns:film.film.edited_by ?x0 .\nns:m.0zztylq ns:film.film.executive_produced_by ?x0 .\nns:m.0zztylq ns:film.film.produced_by|ns:film.film.production_companies ?x0 .\nns:m.0zztylq ns:film.film.written_by ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M0 .\nM1 P2 ?x0 .\nM1 P3 ?x0 .\nM1 P4 ?x0 .\nM1 P5 ?x0 .\nM1 P6 ?x0 .\nM2 P2 ?x0 .\nM2 P3 ?x0 .\nM2 P4 ?x0 .\nM2 P5 ?x0 .\nM2 P6 ?x0\n}",
    "expectedResponse": "No",
    "recursionDepth": 48
  },
  {
    "questionIdx": 103390,
    "questionWithBrackets": "Was a person that a cinematographer's spouse married, [Catherine Deneuve] married, and [Wes Anderson] was influenced by [Martin Scorsese]",
    "questionPatternModEntities": "Was a person that a cinematographer 's spouse married , M4 married , and M3 was influenced by M1",
    "questionTemplate": "Was a [NP_SIMPLE] that a [NP_SIMPLE] 's [ROLE_SIMPLE] [VP_SIMPLE] , [entity] [VP_SIMPLE] , and [entity] was [VP_SIMPLE] by [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ?x1 .\n?x1 a ns:film.cinematographer .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( ns:m.04sry != ?x0 ) .\nFILTER ( ns:m.04sry != ns:m.0cbkc ) .\nns:m.04sry a ns:people.person .\nns:m.04sry ns:influence.influence_node.influenced ns:m.02ld6x .\nns:m.04sry ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ?x0 .\nns:m.04sry ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ns:m.0cbkc\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x1 a M0 .\nFILTER ( ?x0 != ?x1 ) .\nFILTER ( M1 != ?x0 ) .\nFILTER ( M1 != M4 ) .\nM1 P0 ?x0 .\nM1 P0 M4 .\nM1 P1 M3 .\nM1 a M2\n}",
    "expectedResponse": "No",
    "recursionDepth": 48
  },
  {
    "questionIdx": 236231,
    "questionWithBrackets": "Who was influenced by [Hubert Selby, Jr.], influenced by [Tetsuo II: Body Hammer]'s executive producer, director, and cinematographer, and influenced by [New Jersey Drive]'s executive producer",
    "questionPatternModEntities": "Who was influenced by M1 , influenced by M3 's executive producer , director , and cinematographer , and influenced by M2 's executive producer",
    "questionTemplate": "Who was [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] , [ROLE_SIMPLE] , and [ROLE_SIMPLE] , and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:people.person .\n?x0 ns:influence.influence_node.influenced_by ?x1 .\n?x0 ns:influence.influence_node.influenced_by ?x2 .\n?x0 ns:influence.influence_node.influenced_by ns:m.0nk02 .\n?x1 ns:film.producer.films_executive_produced ns:m.03d05ct .\n?x2 ns:film.cinematographer.film ns:m.0brs6b .\n?x2 ns:film.director.film ns:m.0brs6b .\n?x2 ns:film.producer.films_executive_produced ns:m.0brs6b\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P0 ?x2 .\n?x0 P0 M1 .\n?x0 a M0 .\n?x1 P1 M2 .\n?x2 P1 M3 .\n?x2 P2 M3 .\n?x2 P3 M3\n}",
    "expectedResponse": "Darren Aronofsky",
    "recursionDepth": 48
  },
  {
    "questionIdx": 51478,
    "questionWithBrackets": "Was [Daniel Jewel] employed by [Momentum Pictures], employed by a film distributor's child and parent, and employed by [Spooky Swabs]'s producer",
    "questionPatternModEntities": "Was M2 employed by M3 , employed by a film distributor 's child and parent , and employed by M1 's producer",
    "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] , [VP_SIMPLE] by a [NP_SIMPLE] 's [ROLE_SIMPLE] and [ROLE_SIMPLE] , and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:people.person.children|ns:fictional_universe.fictional_character.children|ns:organization.organization.child/ns:organization.organization_relationship.child ?x1 .\n?x0 ns:people.person.parents|ns:fictional_universe.fictional_character.parents|ns:organization.organization.parent/ns:organization.organization_relationship.parent ?x1 .\n?x1 a ns:film.film_distributor .\n?x2 ns:film.producer.film|ns:film.production_company.films ns:m.04jl6d7 .\nns:m.03nn1cn ns:people.person.employment_history/ns:business.employment_tenure.company ?x0 .\nns:m.03nn1cn ns:people.person.employment_history/ns:business.employment_tenure.company ?x2 .\nns:m.03nn1cn ns:people.person.employment_history/ns:business.employment_tenure.company ns:m.04ggdyk\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x1 a M0 .\n?x2 P2 M1 .\nM2 P3 ?x0 .\nM2 P3 ?x2 .\nM2 P3 M3\n}",
    "expectedResponse": "No",
    "recursionDepth": 48
  },
  {
    "questionIdx": 118744,
    "questionWithBrackets": "Were [It's Not About the Shawerma] and [The Fifth Wall] produced, edited, executive produced, written, and directed by [Inquietude [light Version]]'s executive producer and editor",
    "questionPatternModEntities": "Were M1 and M2 produced , edited , executive produced , written , and directed by M0 's executive producer and editor",
    "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] and [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.editor.film ns:m.011qztzx .\n?x0 ns:film.producer.films_executive_produced ns:m.011qztzx .\nns:m.0_2zrgs ns:film.film.directed_by ?x0 .\nns:m.0_2zrgs ns:film.film.edited_by ?x0 .\nns:m.0_2zrgs ns:film.film.executive_produced_by ?x0 .\nns:m.0_2zrgs ns:film.film.produced_by|ns:film.film.production_companies ?x0 .\nns:m.0_2zrgs ns:film.film.written_by ?x0 .\nns:m.0zztylq ns:film.film.directed_by ?x0 .\nns:m.0zztylq ns:film.film.edited_by ?x0 .\nns:m.0zztylq ns:film.film.executive_produced_by ?x0 .\nns:m.0zztylq ns:film.film.produced_by|ns:film.film.production_companies ?x0 .\nns:m.0zztylq ns:film.film.written_by ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M0 .\nM1 P2 ?x0 .\nM1 P3 ?x0 .\nM1 P4 ?x0 .\nM1 P5 ?x0 .\nM1 P6 ?x0 .\nM2 P2 ?x0 .\nM2 P3 ?x0 .\nM2 P4 ?x0 .\nM2 P5 ?x0 .\nM2 P6 ?x0\n}",
    "expectedResponse": "No",
    "recursionDepth": 48
  },
  {
    "questionIdx": 64838,
    "questionWithBrackets": "Was [Los Enchiladas!] produced, executive produced, and written by a film director influenced by [Bob Newhart] and influenced by [Jerry Seinfeld]",
    "questionPatternModEntities": "Was M3 produced , executive produced , and written by a film director influenced by M1 and influenced by M2",
    "questionTemplate": "Was [entity] [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by a [NP_SIMPLE] [VP_SIMPLE] by [entity] and [VP_SIMPLE] by [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 a ns:film.director .\n?x0 ns:influence.influence_node.influenced_by ns:m.012gq6 .\n?x0 ns:influence.influence_node.influenced_by ns:m.0q5hw .\nns:m.0bsmhk ns:film.film.executive_produced_by ?x0 .\nns:m.0bsmhk ns:film.film.produced_by|ns:film.film.production_companies ?x0 .\nns:m.0bsmhk ns:film.film.written_by ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 a M0 .\nM3 P1 ?x0 .\nM3 P2 ?x0 .\nM3 P3 ?x0\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 48
  },
  {
    "questionIdx": 71345,
    "questionWithBrackets": "Was [Peter Thiel] an American person that [National War Labor Board] was founded by, [War Industries Board] was founded by, and [Bryn Mawr College] employed",
    "questionPatternModEntities": "Was M0 a American person that M3 was founded by , M4 was founded by , and M2 employed",
    "questionTemplate": "Was [entity] a [ADJECTIVE_SIMPLE] [NP_SIMPLE] that [entity] was [VP_SIMPLE] by , [entity] was [VP_SIMPLE] by , and [entity] [VP_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\nns:m.02w8m6 a ns:people.person .\nns:m.02w8m6 ns:organization.organization_founder.organizations_founded ns:m.02s63v .\nns:m.02w8m6 ns:organization.organization_founder.organizations_founded ns:m.051kqv .\nns:m.02w8m6 ns:people.person.employment_history/ns:business.employment_tenure.company ns:m.01g7_r .\nns:m.02w8m6 ns:people.person.nationality ns:m.09c7w0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\nM0 P0 M2 .\nM0 P1 M3 .\nM0 P1 M4 .\nM0 P2 M5 .\nM0 a M1\n}",
    "expectedResponse": "No",
    "recursionDepth": 48
  },
  {
    "questionIdx": 54398,
    "questionWithBrackets": "Was [Everlasting Regret] executive produced by a spouse of [Xiaoman Lu], executive produced by [Zhong-lun Ren] and [Jinjun Hu], and edited by [Lan Yu]'s costume designer",
    "questionPatternModEntities": "Was M2 executive produced by a spouse of M0 , executive produced by M3 and M4 , and edited by M1 's costume designer",
    "questionTemplate": "Was [entity] [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity] , [VP_SIMPLE] by [entity] and [entity] , and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ns:m.0w_5n2r .\n?x1 ns:film.film_costumer_designer.costume_design_for_film ns:m.024xxj .\nFILTER ( ?x0 != ns:m.0w_5n2r ) .\nns:m.083zww ns:film.film.edited_by ?x1 .\nns:m.083zww ns:film.film.executive_produced_by ?x0 .\nns:m.083zww ns:film.film.executive_produced_by ns:m.08mm9bj .\nns:m.083zww ns:film.film.executive_produced_by ns:m.0y_hdpp\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x1 P1 M1 .\nFILTER ( ?x0 != M0 ) .\nM2 P2 ?x0 .\nM2 P2 M3 .\nM2 P2 M4 .\nM2 P3 ?x1\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 48
  },
  {
    "questionIdx": 125794,
    "questionWithBrackets": "Were [The Battle of Russia] and [Divide and Conquer] directed by [Salvatore Capra]'s Italian child, directed by a person, and written by [Anthony Veiller]",
    "questionPatternModEntities": "Were M3 and M5 directed by M1 's Italian child , directed by a person , and written by M4",
    "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] , [VP_SIMPLE] by a [NP_SIMPLE] , and [VP_SIMPLE] by [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:people.person.nationality ns:m.03rjj .\n?x0 ns:people.person.parents|ns:fictional_universe.fictional_character.parents|ns:organization.organization.parent/ns:organization.organization_relationship.parent ns:m.0j54fcq .\n?x1 a ns:people.person .\nns:m.08z9ks ns:film.film.directed_by ?x0 .\nns:m.08z9ks ns:film.film.directed_by ?x1 .\nns:m.08z9ks ns:film.film.written_by ns:m.0k0vwc .\nns:m.0c7gcz ns:film.film.directed_by ?x0 .\nns:m.0c7gcz ns:film.film.directed_by ?x1 .\nns:m.0c7gcz ns:film.film.written_by ns:m.0k0vwc\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x1 a M2 .\nM3 P2 M4 .\nM3 P3 ?x0 .\nM3 P3 ?x1 .\nM5 P2 M4 .\nM5 P3 ?x0 .\nM5 P3 ?x1\n}",
    "expectedResponse": "No",
    "recursionDepth": 48
  },
  {
    "questionIdx": 72116,
    "questionWithBrackets": "Was [Promises Written in Water] directed by, executive produced by, edited by, written by, and produced by [The Brown Bunny]'s art director and costume designer",
    "questionPatternModEntities": "Was M1 directed by , executive produced by , edited by , written by , and produced by M0 's art director and costume designer",
    "questionTemplate": "Was [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] and [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.film_art_director.films_art_directed ns:m.01n9cy .\n?x0 ns:film.film_costumer_designer.costume_design_for_film ns:m.01n9cy .\nns:m.0bh9qf1 ns:film.film.directed_by ?x0 .\nns:m.0bh9qf1 ns:film.film.edited_by ?x0 .\nns:m.0bh9qf1 ns:film.film.executive_produced_by ?x0 .\nns:m.0bh9qf1 ns:film.film.produced_by|ns:film.film.production_companies ?x0 .\nns:m.0bh9qf1 ns:film.film.written_by ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M0 .\nM1 P2 ?x0 .\nM1 P3 ?x0 .\nM1 P4 ?x0 .\nM1 P5 ?x0 .\nM1 P6 ?x0\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 48
  },
  {
    "questionIdx": 175629,
    "questionWithBrackets": "What was edited, executive produced, produced, directed, and written by a star, writer, and executive producer of [Animator vs Animation 2]",
    "questionPatternModEntities": "What was edited , executive produced , produced , directed , and written by a star , writer , and executive producer of M0",
    "questionTemplate": "What was [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] by a [ROLE_SIMPLE] , [ROLE_SIMPLE] , and [ROLE_SIMPLE] of [entity]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.film.directed_by ?x1 .\n?x0 ns:film.film.edited_by ?x1 .\n?x0 ns:film.film.executive_produced_by ?x1 .\n?x0 ns:film.film.produced_by|ns:film.film.production_companies ?x1 .\n?x0 ns:film.film.written_by ?x1 .\n?x1 ns:film.actor.film/ns:film.performance.film ns:m.0108mkjq .\n?x1 ns:film.producer.films_executive_produced ns:m.0108mkjq .\n?x1 ns:film.writer.film ns:m.0108mkjq\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x0 P3 ?x1 .\n?x0 P4 ?x1 .\n?x1 P5 M0 .\n?x1 P6 M0 .\n?x1 P7 M0\n}",
    "expectedResponse": "Animator vs Animation 2; Animation vs. Animator 1",
    "recursionDepth": 49
  },
  {
    "questionIdx": 112635,
    "questionWithBrackets": "Were [Apple Records] and [Apple Corps] founded by [George Harrison] and [Ringo Starr], founded by [Duet for Four]'s executive producer and star, and founded by [John Lennon]",
    "questionPatternModEntities": "Were M1 and M5 founded by M2 and M3 , founded by M0 's executive producer and star , and founded by M4",
    "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by [entity] and [entity] , [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] and [ROLE_SIMPLE] , and [VP_SIMPLE] by [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.actor.film/ns:film.performance.film ns:m.0n5wknw .\n?x0 ns:film.producer.films_executive_produced ns:m.0n5wknw .\nns:m.019n_t ns:organization.organization.founders ?x0 .\nns:m.019n_t ns:organization.organization.founders ns:m.01vrnsk .\nns:m.019n_t ns:organization.organization.founders ns:m.01vsl3_ .\nns:m.019n_t ns:organization.organization.founders ns:m.03bnv .\nns:m.02_7z_ ns:organization.organization.founders ?x0 .\nns:m.02_7z_ ns:organization.organization.founders ns:m.01vrnsk .\nns:m.02_7z_ ns:organization.organization.founders ns:m.01vsl3_ .\nns:m.02_7z_ ns:organization.organization.founders ns:m.03bnv\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M0 .\nM1 P2 ?x0 .\nM1 P2 M2 .\nM1 P2 M3 .\nM1 P2 M4 .\nM5 P2 ?x0 .\nM5 P2 M2 .\nM5 P2 M3 .\nM5 P2 M4\n}",
    "expectedResponse": "No",
    "recursionDepth": 49
  },
  {
    "questionIdx": 176876,
    "questionWithBrackets": "What was executive produced by [Mariano Vanhoof], directed by a Swedish film editor that wrote [Here is Your Life], and edited by [Alari Hainla]",
    "questionPatternModEntities": "What was executive produced by M0 , directed by a Swedish film editor that wrote M3 , and edited by M1",
    "questionTemplate": "What was [VP_SIMPLE] by [entity] , [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [NP_SIMPLE] that [VP_SIMPLE] [entity] , and [VP_SIMPLE] by [entity]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.film.directed_by ?x1 .\n?x0 ns:film.film.edited_by ns:m.0w_h3m_ .\n?x0 ns:film.film.executive_produced_by ns:m.0jmw6f0 .\n?x1 a ns:film.editor .\n?x1 ns:film.writer.film ns:m.04svlgc .\n?x1 ns:people.person.nationality ns:m.0d0vqn\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P2 ?x1 .\n?x1 P3 M3 .\n?x1 P4 M4 .\n?x1 a M2\n}",
    "expectedResponse": "Visions of Europe",
    "recursionDepth": 49
  },
  {
    "questionIdx": 51953,
    "questionWithBrackets": "Was [Dead Man Walking] produced by [Guido de Laurentiis], produced by [V\u00e9ra Belmont] and [Leo Pescarolo], and edited by [Prince Leo]'s actor's male sibling",
    "questionPatternModEntities": "Was M2 produced by M3 , produced by M4 and M5 , and edited by M1 's actor 's male sibling",
    "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] and [entity] , and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:people.person.gender ns:m.05zppz .\n?x0 ns:people.person.sibling_s/ns:people.sibling_relationship.sibling|ns:fictional_universe.fictional_character.siblings/ns:fictional_universe.sibling_relationship_of_fictional_characters.siblings ?x1 .\n?x1 ns:film.actor.film/ns:film.performance.character ns:m.0_mt2zh .\nFILTER ( ?x0 != ?x1 ) .\nns:m.0gjk1d ns:film.film.edited_by ?x0 .\nns:m.0gjk1d ns:film.film.produced_by|ns:film.film.production_companies ns:m.0bnnv79 .\nns:m.0gjk1d ns:film.film.produced_by|ns:film.film.production_companies ns:m.0bnnv7d .\nns:m.0gjk1d ns:film.film.produced_by|ns:film.film.production_companies ns:m.0g9tyfw\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x0 P1 M0 .\n?x1 P2 M1 .\nFILTER ( ?x0 != ?x1 ) .\nM2 P3 M3 .\nM2 P3 M4 .\nM2 P3 M5 .\nM2 P4 ?x0\n}",
    "expectedResponse": "No",
    "recursionDepth": 49
  },
  {
    "questionIdx": 121530,
    "questionWithBrackets": "Were [My Boss' Daughter] and [Music of the Heart] executive produced by [Soul Men]'s executive producer, edited by a film producer, and executive produced by [Miramax]'s employee",
    "questionPatternModEntities": "Were M3 and M4 executive produced by M0 's executive producer , edited by a film producer , and executive produced by M1 's employee",
    "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] , [VP_SIMPLE] by a [NP_SIMPLE] , and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.producer.films_executive_produced ns:m.03nxfs5 .\n?x1 ns:people.person.employment_history/ns:business.employment_tenure.company ns:m.0jz9f .\n?x2 a ns:film.producer .\nns:m.032zcf ns:film.film.edited_by ?x2 .\nns:m.032zcf ns:film.film.executive_produced_by ?x0 .\nns:m.032zcf ns:film.film.executive_produced_by ?x1 .\nns:m.0d2l2_ ns:film.film.edited_by ?x2 .\nns:m.0d2l2_ ns:film.film.executive_produced_by ?x0 .\nns:m.0d2l2_ ns:film.film.executive_produced_by ?x1\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x1 P1 M1 .\n?x2 a M2 .\nM3 P2 ?x0 .\nM3 P2 ?x1 .\nM3 P3 ?x2 .\nM4 P2 ?x0 .\nM4 P2 ?x1 .\nM4 P3 ?x2\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 49
  },
  {
    "questionIdx": 184112,
    "questionWithBrackets": "What was written by [Carl Reiner], written by a screenwriter, and produced by a film distributor whose employee edited [The Goonies]",
    "questionPatternModEntities": "What was written by M0 , written by a screenwriter , and produced by a film distributor whose employee edited M3",
    "questionTemplate": "What was [VP_SIMPLE] by [entity] , [VP_SIMPLE] by a [NP_SIMPLE] , and [VP_SIMPLE] by a [NP_SIMPLE] whose [ROLE_SIMPLE] [VP_SIMPLE] [entity]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.film.produced_by|ns:film.film.production_companies ?x1 .\n?x0 ns:film.film.written_by ?x2 .\n?x0 ns:film.film.written_by ns:m.0pnf3 .\n?x1 a ns:film.film_distributor .\n?x1 ns:business.employer.employees/ns:business.employment_tenure.person ?x3 .\n?x2 a ns:film.writer .\n?x3 ns:film.editor.film ns:m.0mbql\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P0 M0 .\n?x0 P1 ?x2 .\n?x1 a M1 .\n?x2 P2 ?x3 .\n?x2 a M2 .\n?x3 P3 M3\n}",
    "expectedResponse": "The Thrill of It All",
    "recursionDepth": 49
  },
  {
    "questionIdx": 57631,
    "questionWithBrackets": "Was [H. Jon Benjamin] influenced by [Michael Gough], influenced by [Norbit]'s star, producer, and writer, and influenced by [Christopher Lee] and [David Letterman]",
    "questionPatternModEntities": "Was M1 influenced by M2 , influenced by M0 's star , producer , and writer , and influenced by M3 and M4",
    "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] , [ROLE_SIMPLE] , and [ROLE_SIMPLE] , and [VP_SIMPLE] by [entity] and [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.actor.film/ns:film.performance.film ns:m.0kv2hv .\n?x0 ns:film.producer.film|ns:film.production_company.films ns:m.0kv2hv .\n?x0 ns:film.writer.film ns:m.0kv2hv .\nns:m.05rx__ ns:influence.influence_node.influenced_by ?x0 .\nns:m.05rx__ ns:influence.influence_node.influenced_by ns:m.029_3 .\nns:m.05rx__ ns:influence.influence_node.influenced_by ns:m.02_p8v .\nns:m.05rx__ ns:influence.influence_node.influenced_by ns:m.0f0kz\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M0 .\n?x0 P2 M0 .\nM1 P3 ?x0 .\nM1 P3 M2 .\nM1 P3 M3 .\nM1 P3 M4\n}",
    "expectedResponse": "No",
    "recursionDepth": 49
  },
  {
    "questionIdx": 129750,
    "questionWithBrackets": "Were [White Stork Is Coming] and [Rick's Canoe] directed by, edited by, written by, produced by, and executive produced by an editor of [Someone Like Me]",
    "questionPatternModEntities": "Were M1 and M2 directed by , edited by , written by , produced by , and executive produced by a editor of M0",
    "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.editor.film ns:m.0zgtvfg .\nns:m.0zvz2b2 ns:film.film.directed_by ?x0 .\nns:m.0zvz2b2 ns:film.film.edited_by ?x0 .\nns:m.0zvz2b2 ns:film.film.executive_produced_by ?x0 .\nns:m.0zvz2b2 ns:film.film.produced_by|ns:film.film.production_companies ?x0 .\nns:m.0zvz2b2 ns:film.film.written_by ?x0 .\nns:m.0zxyz5j ns:film.film.directed_by ?x0 .\nns:m.0zxyz5j ns:film.film.edited_by ?x0 .\nns:m.0zxyz5j ns:film.film.executive_produced_by ?x0 .\nns:m.0zxyz5j ns:film.film.produced_by|ns:film.film.production_companies ?x0 .\nns:m.0zxyz5j ns:film.film.written_by ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\nM1 P1 ?x0 .\nM1 P2 ?x0 .\nM1 P3 ?x0 .\nM1 P4 ?x0 .\nM1 P5 ?x0 .\nM2 P1 ?x0 .\nM2 P2 ?x0 .\nM2 P3 ?x0 .\nM2 P4 ?x0 .\nM2 P5 ?x0\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 49
  },
  {
    "questionIdx": 175010,
    "questionWithBrackets": "What was edited by, directed by, produced by, executive produced by, and written by a writer and producer of [Night of Fish]",
    "questionPatternModEntities": "What was edited by , directed by , produced by , executive produced by , and written by a writer and producer of M0",
    "questionTemplate": "What was [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by a [ROLE_SIMPLE] and [ROLE_SIMPLE] of [entity]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.film.directed_by ?x1 .\n?x0 ns:film.film.edited_by ?x1 .\n?x0 ns:film.film.executive_produced_by ?x1 .\n?x0 ns:film.film.produced_by|ns:film.film.production_companies ?x1 .\n?x0 ns:film.film.written_by ?x1 .\n?x1 ns:film.producer.film|ns:film.production_company.films ns:m.0yqxqzm .\n?x1 ns:film.writer.film ns:m.0yqxqzm\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x0 P3 ?x1 .\n?x0 P4 ?x1 .\n?x1 P5 M0 .\n?x1 P6 M0\n}",
    "expectedResponse": "Flame of Mountain",
    "recursionDepth": 49
  },
  {
    "questionIdx": 9143,
    "questionWithBrackets": "Did [Hank Williams], [Roy Orbison], [The Shadows], [The Beatles], and [Jimmy Reed] influence a film director that [CSNY/D\u00e9j\u00e0 Vu] was written by and [Made in Heaven] starred",
    "questionPatternModEntities": "Did M3 , M4 , M5 , M6 , and M7 influence a film director that M1 was written by and M2 starred",
    "questionTemplate": "Did [entity] , [entity] , [entity] , [entity] , and [entity] [VP_SIMPLE] a [NP_SIMPLE] that [entity] was [VP_SIMPLE] by and [entity] [VP_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 a ns:film.director .\n?x0 ns:film.actor.film/ns:film.performance.film ns:m.02q7sv0 .\n?x0 ns:film.writer.film ns:m.03m3zmd .\nns:m.015phm ns:influence.influence_node.influenced ?x0 .\nns:m.015qh4 ns:influence.influence_node.influenced ?x0 .\nns:m.05_ncl ns:influence.influence_node.influenced ?x0 .\nns:m.06m61 ns:influence.influence_node.influenced ?x0 .\nns:m.07c0j ns:influence.influence_node.influenced ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M1 .\n?x0 P1 M2 .\n?x0 a M0 .\nM3 P2 ?x0 .\nM4 P2 ?x0 .\nM5 P2 ?x0 .\nM6 P2 ?x0 .\nM7 P2 ?x0\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 49
  },
  {
    "questionIdx": 238794,
    "questionWithBrackets": "Who was influenced by an actor, was influenced by a French film director, and influenced [Patti Smith] and [Peter Lamborn Wilson]",
    "questionPatternModEntities": "Who was influenced by a actor , was influenced by a French film director , and influenced M1 and M2",
    "questionTemplate": "Who was [VP_SIMPLE] by a [NP_SIMPLE] , was [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [NP_SIMPLE] , and [VP_SIMPLE] [entity] and [entity]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:people.person .\n?x0 ns:influence.influence_node.influenced ns:m.0188lg .\n?x0 ns:influence.influence_node.influenced ns:m.05qw5 .\n?x0 ns:influence.influence_node.influenced_by ?x1 .\n?x0 ns:influence.influence_node.influenced_by ?x2 .\n?x1 a ns:film.actor .\n?x2 a ns:film.director .\n?x2 ns:people.person.nationality ns:m.0f8l9c\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P1 ?x1 .\n?x0 P1 ?x2 .\n?x0 a M0 .\n?x1 a M3 .\n?x2 P2 M5 .\n?x2 a M4\n}",
    "expectedResponse": "Allen Ginsberg",
    "recursionDepth": 49
  },
  {
    "questionIdx": 65367,
    "questionWithBrackets": "Was [Lumi\u00e8re and Company] executive produced by [Anne Andreu], directed by [Costa-Gavras], and directed by a French writer and cinematographer of [Une Catastrophe]",
    "questionPatternModEntities": "Was M2 executive produced by M3 , directed by M4 , and directed by a French writer and cinematographer of M0",
    "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] and [ROLE_SIMPLE] of [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.cinematographer.film ns:m.07l51nk .\n?x0 ns:film.writer.film ns:m.07l51nk .\n?x0 ns:people.person.nationality ns:m.0f8l9c .\nns:m.060hk0 ns:film.film.directed_by ?x0 .\nns:m.060hk0 ns:film.film.directed_by ns:m.01q4qv .\nns:m.060hk0 ns:film.film.executive_produced_by ns:m.0gx2zyl\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x0 P2 M0 .\nM2 P3 M3 .\nM2 P4 ?x0 .\nM2 P4 M4\n}",
    "expectedResponse": "No",
    "recursionDepth": 49
  },
  {
    "questionIdx": 119607,
    "questionWithBrackets": "Were [Kiki's Delivery Service], [Castle in the Sky], [Princess Mononoke], [Spirited Away], and [Whisper of the Heart] executive produced by a production company's founder and employee and edited by [Takeshi Seyama]",
    "questionPatternModEntities": "Were M1 , M3 , M4 , M5 , and M6 executive produced by a production company 's founder and employee and edited by M2",
    "questionTemplate": "Were [entity] , [entity] , [entity] , [entity] , and [entity] [VP_SIMPLE] by a [NP_SIMPLE] 's [ROLE_SIMPLE] and [ROLE_SIMPLE] and [VP_SIMPLE] by [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:organization.organization_founder.organizations_founded ?x1 .\n?x0 ns:people.person.employment_history/ns:business.employment_tenure.company ?x1 .\n?x1 a ns:film.production_company .\nns:m.012x63 ns:film.film.edited_by ns:m.0282qln .\nns:m.012x63 ns:film.film.executive_produced_by ?x0 .\nns:m.02gs6r ns:film.film.edited_by ns:m.0282qln .\nns:m.02gs6r ns:film.film.executive_produced_by ?x0 .\nns:m.0652f ns:film.film.edited_by ns:m.0282qln .\nns:m.0652f ns:film.film.executive_produced_by ?x0 .\nns:m.09k4d3y ns:film.film.edited_by ns:m.0282qln .\nns:m.09k4d3y ns:film.film.executive_produced_by ?x0 .\nns:m.0j6b5 ns:film.film.edited_by ns:m.0282qln .\nns:m.0j6b5 ns:film.film.executive_produced_by ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x1 a M0 .\nM1 P2 ?x0 .\nM1 P3 M2 .\nM3 P2 ?x0 .\nM3 P3 M2 .\nM4 P2 ?x0 .\nM4 P3 M2 .\nM5 P2 ?x0 .\nM5 P3 M2 .\nM6 P2 ?x0 .\nM6 P3 M2\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 49
  },
  {
    "questionIdx": 216924,
    "questionWithBrackets": "Who edited [1988: The Remake] and executive produced a film edited by [Glenn Douglass] and edited by [Christine Corrigan] and [Andrea Ament]",
    "questionPatternModEntities": "Who edited M1 and executive produced a film edited by M3 and edited by M4 and M5",
    "questionTemplate": "Who [VP_SIMPLE] [entity] and [VP_SIMPLE] a [NP_SIMPLE] [VP_SIMPLE] by [entity] and [VP_SIMPLE] by [entity] and [entity]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:people.person .\n?x0 ns:film.editor.film ns:m.0zncdr9 .\n?x0 ns:film.producer.films_executive_produced ?x1 .\n?x1 a ns:film.film .\n?x1 ns:film.film.edited_by ns:m.0zzv1mt .\n?x1 ns:film.film.edited_by ns:m.0zzv2f_ .\n?x1 ns:film.film.edited_by ns:m.0zzv2jp\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M1 .\n?x0 P1 ?x1 .\n?x0 a M0 .\n?x1 P2 M3 .\n?x1 P2 M4 .\n?x1 P2 M5 .\n?x1 a M2\n}",
    "expectedResponse": "Rick Schmidt",
    "recursionDepth": 49
  },
  {
    "questionIdx": 183234,
    "questionWithBrackets": "What was produced by, executive produced by, and written by an actor influenced by [Bobcat Goldthwait] and influenced by [Cheech & Chong]",
    "questionPatternModEntities": "What was produced by , executive produced by , and written by a actor influenced by M1 and influenced by M2",
    "questionTemplate": "What was [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by a [NP_SIMPLE] [VP_SIMPLE] by [entity] and [VP_SIMPLE] by [entity]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.film.executive_produced_by ?x1 .\n?x0 ns:film.film.produced_by|ns:film.film.production_companies ?x1 .\n?x0 ns:film.film.written_by ?x1 .\n?x1 a ns:film.actor .\n?x1 ns:influence.influence_node.influenced_by ns:m.016pb1 .\n?x1 ns:influence.influence_node.influenced_by ns:m.03kxdw\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x1 P3 M1 .\n?x1 P3 M2 .\n?x1 a M0\n}",
    "expectedResponse": "Los Enchiladas!",
    "recursionDepth": 49
  },
  {
    "questionIdx": 112035,
    "questionWithBrackets": "Were [Air Force] and [The Big Sleep] directed by a screenwriter that [Andrew Shearer]'s Canadian child married and executive produced by [Jack L. Warner]",
    "questionPatternModEntities": "Were M3 and M5 directed by a screenwriter that M2 's Canadian child married and executive produced by M4",
    "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by a [NP_SIMPLE] that [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] [VP_SIMPLE] and [VP_SIMPLE] by [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 a ns:film.writer .\n?x0 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ?x1 .\n?x1 ns:people.person.nationality ns:m.0d060g .\n?x1 ns:people.person.parents|ns:fictional_universe.fictional_character.parents|ns:organization.organization.parent/ns:organization.organization_relationship.parent ns:m.0hnsmwy .\nFILTER ( ?x0 != ?x1 ) .\nns:m.05k7xj ns:film.film.directed_by ?x0 .\nns:m.05k7xj ns:film.film.executive_produced_by ns:m.0m593 .\nns:m.0dlwcv ns:film.film.directed_by ?x0 .\nns:m.0dlwcv ns:film.film.executive_produced_by ns:m.0m593\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x0 a M0 .\n?x1 P1 M1 .\n?x1 P2 M2 .\nFILTER ( ?x0 != ?x1 ) .\nM3 P3 M4 .\nM3 P4 ?x0 .\nM5 P3 M4 .\nM5 P4 ?x0\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 49
  },
  {
    "questionIdx": 220904,
    "questionWithBrackets": "Who married [Sody Clampett] and was influenced by an actor that directed, produced, and edited [The Kid]",
    "questionPatternModEntities": "Who married M1 and was influenced by a actor that directed , produced , and edited M3",
    "questionTemplate": "Who [VP_SIMPLE] [entity] and was [VP_SIMPLE] by a [NP_SIMPLE] that [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE] [entity]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:people.person .\n?x0 ns:influence.influence_node.influenced_by ?x1 .\n?x0 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ns:m.0g271mm .\n?x1 a ns:film.actor .\n?x1 ns:film.director.film ns:m.04vl27 .\n?x1 ns:film.editor.film ns:m.04vl27 .\n?x1 ns:film.producer.film|ns:film.production_company.films ns:m.04vl27 .\nFILTER ( ?x0 != ns:m.0g271mm )\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 M1 .\n?x0 a M0 .\n?x1 P2 M3 .\n?x1 P3 M3 .\n?x1 P4 M3 .\n?x1 a M2 .\nFILTER ( ?x0 != M1 )\n}",
    "expectedResponse": "Bob Clampett",
    "recursionDepth": 49
  },
  {
    "questionIdx": 39099,
    "questionWithBrackets": "Did a screenwriter influenced by [Roy O. Disney]'s sibling and influenced by [Charlie Chaplin] influence [Justin Timberlake] and influence [Leigh Francis]",
    "questionPatternModEntities": "Did a screenwriter influenced by M4 's sibling and influenced by M3 influence M1 and influence M2",
    "questionTemplate": "Did a [NP_SIMPLE] [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] and [VP_SIMPLE] by [entity] [VP_SIMPLE] [entity] and [VP_SIMPLE] [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 a ns:film.writer .\n?x0 ns:influence.influence_node.influenced ns:m.04rcg1 .\n?x0 ns:influence.influence_node.influenced ns:m.0j1yf .\n?x0 ns:influence.influence_node.influenced_by ?x1 .\n?x0 ns:influence.influence_node.influenced_by ns:m.01lc5 .\n?x1 ns:people.person.sibling_s/ns:people.sibling_relationship.sibling|ns:fictional_universe.fictional_character.siblings/ns:fictional_universe.sibling_relationship_of_fictional_characters.siblings ns:m.015yg9 .\nFILTER ( ?x1 != ns:m.015yg9 )\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P1 ?x1 .\n?x0 P1 M3 .\n?x0 a M0 .\n?x1 P2 M4 .\nFILTER ( ?x1 != M4 )\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 49
  },
  {
    "questionIdx": 236559,
    "questionWithBrackets": "Who was influenced by [La rebeli\u00f3n de los colgados]'s Mexican writer, was influenced by [Gary Snyder] and [Jalal ad-Din Muhammad Rumi], and was influenced by [Hubert Selby, Jr.]",
    "questionPatternModEntities": "Who was influenced by M4 's Mexican writer , was influenced by M1 and M2 , and was influenced by M3",
    "questionTemplate": "Who was [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] , was [VP_SIMPLE] by [entity] and [entity] , and was [VP_SIMPLE] by [entity]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:people.person .\n?x0 ns:influence.influence_node.influenced_by ?x1 .\n?x0 ns:influence.influence_node.influenced_by ns:m.03bh5 .\n?x0 ns:influence.influence_node.influenced_by ns:m.0461p .\n?x0 ns:influence.influence_node.influenced_by ns:m.0nk02 .\n?x1 ns:film.writer.film ns:m.0z0_1s2 .\n?x1 ns:people.person.nationality ns:m.0b90_r\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P0 M3 .\n?x0 a M0 .\n?x1 P1 M4 .\n?x1 P2 M5\n}",
    "expectedResponse": "Garret Schuelke",
    "recursionDepth": 49
  },
  {
    "questionIdx": 184726,
    "questionWithBrackets": "What was written by [Peter Greenaway], edited by [Misch Bervard] and [Luis Villar], and edited by a film producer that [LoveMEATender] was edited by",
    "questionPatternModEntities": "What was written by M0 , edited by M1 and M2 , and edited by a film producer that M4 was edited by",
    "questionTemplate": "What was [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] and [entity] , and [VP_SIMPLE] by a [NP_SIMPLE] that [entity] was [VP_SIMPLE] by",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.film.edited_by ?x1 .\n?x0 ns:film.film.edited_by ns:m.0hpy9gc .\n?x0 ns:film.film.edited_by ns:m.0ndb3g4 .\n?x0 ns:film.film.written_by ns:m.0fdw2 .\n?x1 a ns:film.producer .\n?x1 ns:film.editor.film ns:m.0pdksd4\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 ?x1 .\n?x0 P1 M1 .\n?x0 P1 M2 .\n?x1 P2 M4 .\n?x1 a M3\n}",
    "expectedResponse": "Visions of Europe",
    "recursionDepth": 49
  },
  {
    "questionIdx": 118353,
    "questionWithBrackets": "Were [Infernal Affairs II] and [Infernal Affairs III] directed by [Alan Mak], directed by [Young and Dangerous 2]'s producer, director, and cinematographer, and edited by [Danny Pang Phat]",
    "questionPatternModEntities": "Were M1 and M4 directed by M3 , directed by M0 's producer , director , and cinematographer , and edited by M2",
    "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by [entity] , [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] , [ROLE_SIMPLE] , and [ROLE_SIMPLE] , and [VP_SIMPLE] by [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.cinematographer.film ns:m.0cc1tf .\n?x0 ns:film.director.film ns:m.0cc1tf .\n?x0 ns:film.producer.film|ns:film.production_company.films ns:m.0cc1tf .\nns:m.031ldd ns:film.film.directed_by ?x0 .\nns:m.031ldd ns:film.film.directed_by ns:m.02vknxw .\nns:m.031ldd ns:film.film.edited_by ns:m.0k6khk .\nns:m.0432_5 ns:film.film.directed_by ?x0 .\nns:m.0432_5 ns:film.film.directed_by ns:m.02vknxw .\nns:m.0432_5 ns:film.film.edited_by ns:m.0k6khk\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M0 .\n?x0 P2 M0 .\nM1 P3 M2 .\nM1 P4 ?x0 .\nM1 P4 M3 .\nM4 P3 M2 .\nM4 P4 ?x0 .\nM4 P4 M3\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 49
  },
  {
    "questionIdx": 56168,
    "questionWithBrackets": "Was [Garret Schuelke] influenced by [Gary Snyder] and [Dee Dee Ramone], influenced by [Renaldo and Clara]'s American editor, and influenced by [The Spanish Earth]'s writer",
    "questionPatternModEntities": "Was M3 influenced by M4 and M5 , influenced by M2 's American editor , and influenced by M0 's writer",
    "questionTemplate": "Was [entity] [VP_SIMPLE] by [entity] and [entity] , [VP_SIMPLE] by [entity] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] , and [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.writer.film ns:m.0fn1n5 .\n?x1 ns:film.editor.film ns:m.04w3c6 .\n?x1 ns:people.person.nationality ns:m.09c7w0 .\nns:m.066b7gk ns:influence.influence_node.influenced_by ?x0 .\nns:m.066b7gk ns:influence.influence_node.influenced_by ?x1 .\nns:m.066b7gk ns:influence.influence_node.influenced_by ns:m.01wcpd4 .\nns:m.066b7gk ns:influence.influence_node.influenced_by ns:m.03bh5\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x1 P1 M1 .\n?x1 P2 M2 .\nM3 P3 ?x0 .\nM3 P3 ?x1 .\nM3 P3 M4 .\nM3 P3 M5\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 49
  },
  {
    "questionIdx": 145855,
    "questionWithBrackets": "What did [Planet Utero]'s executive producer, cinematographer, and writer executive produce, edit, direct, produce, and write",
    "questionPatternModEntities": "What did M0 's executive producer , cinematographer , and writer executive produce , edit , direct , produce , and write",
    "questionTemplate": "What did [entity] 's [ROLE_SIMPLE] , [ROLE_SIMPLE] , and [ROLE_SIMPLE] [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.film.directed_by ?x1 .\n?x0 ns:film.film.edited_by ?x1 .\n?x0 ns:film.film.executive_produced_by ?x1 .\n?x0 ns:film.film.produced_by|ns:film.film.production_companies ?x1 .\n?x0 ns:film.film.written_by ?x1 .\n?x1 ns:film.cinematographer.film ns:m.0107h0v4 .\n?x1 ns:film.producer.films_executive_produced ns:m.0107h0v4 .\n?x1 ns:film.writer.film ns:m.0107h0v4\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x0 P3 ?x1 .\n?x0 P4 ?x1 .\n?x1 P5 M0 .\n?x1 P6 M0 .\n?x1 P7 M0\n}",
    "expectedResponse": "Baby, I Love You.; Planet Utero",
    "recursionDepth": 50
  },
  {
    "questionIdx": 174318,
    "questionWithBrackets": "What was edited by a film director, edited by a German female sibling of [Gabriel Genschow], and written by [Edgar Reitz]",
    "questionPatternModEntities": "What was edited by a film director , edited by a German female sibling of M1 , and written by M0",
    "questionTemplate": "What was [VP_SIMPLE] by a [NP_SIMPLE] , [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] , and [VP_SIMPLE] by [entity]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.film.edited_by ?x1 .\n?x0 ns:film.film.edited_by ?x2 .\n?x0 ns:film.film.written_by ns:m.04lsfm .\n?x1 ns:people.person.gender ns:m.02zsn .\n?x1 ns:people.person.nationality ns:m.0345h .\n?x1 ns:people.person.sibling_s/ns:people.sibling_relationship.sibling|ns:fictional_universe.fictional_character.siblings/ns:fictional_universe.sibling_relationship_of_fictional_characters.siblings ns:m.0mvtb30 .\n?x2 a ns:film.director .\nFILTER ( ?x1 != ns:m.0mvtb30 )\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 ?x1 .\n?x0 P1 ?x2 .\n?x1 P2 M1 .\n?x1 P3 M2 .\n?x1 P4 M3 .\n?x2 a M4 .\nFILTER ( ?x1 != M1 )\n}",
    "expectedResponse": "Germany in Autumn",
    "recursionDepth": 50
  },
  {
    "questionIdx": 144668,
    "questionWithBrackets": "What did [Kinefaktura]'s editor, art director, and writer edit, write, direct, produce, and executive produce",
    "questionPatternModEntities": "What did M0 's editor , art director , and writer edit , write , direct , produce , and executive produce",
    "questionTemplate": "What did [entity] 's [ROLE_SIMPLE] , [ROLE_SIMPLE] , and [ROLE_SIMPLE] [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , [VP_SIMPLE] , and [VP_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.film.directed_by ?x1 .\n?x0 ns:film.film.edited_by ?x1 .\n?x0 ns:film.film.executive_produced_by ?x1 .\n?x0 ns:film.film.produced_by|ns:film.film.production_companies ?x1 .\n?x0 ns:film.film.written_by ?x1 .\n?x1 ns:film.editor.film ns:m.0vsh_8l .\n?x1 ns:film.film_art_director.films_art_directed ns:m.0vsh_8l .\n?x1 ns:film.writer.film ns:m.0vsh_8l\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 ?x1 .\n?x0 P2 ?x1 .\n?x0 P3 ?x1 .\n?x0 P4 ?x1 .\n?x1 P5 M0 .\n?x1 P6 M0 .\n?x1 P7 M0\n}",
    "expectedResponse": "FFF1",
    "recursionDepth": 50
  },
  {
    "questionIdx": 37965,
    "questionWithBrackets": "Did a person that a film was produced by and [Spy Kids 3-D: Game Over] was produced by edit and executive produce [The Goonies]",
    "questionPatternModEntities": "Did a person that a film was produced by and M2 was produced by edit and executive produce M1",
    "questionTemplate": "Did a [NP_SIMPLE] that a [NP_SIMPLE] was [VP_SIMPLE] by and [entity] was [VP_SIMPLE] by [VP_SIMPLE] and [VP_SIMPLE] [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 a ns:people.person .\n?x0 ns:film.editor.film ns:m.0mbql .\n?x0 ns:film.producer.films_executive_produced ns:m.0mbql .\n?x0 ns:film.producer.film|ns:film.production_company.films ?x1 .\n?x0 ns:film.producer.film|ns:film.production_company.films ns:m.025s1wg .\n?x1 a ns:film.film\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M1 .\n?x0 P1 M1 .\n?x0 P2 ?x1 .\n?x0 P2 M2 .\n?x0 a M0 .\n?x1 a M3\n}",
    "expectedResponse": "No",
    "recursionDepth": 50
  },
  {
    "questionIdx": 11788,
    "questionWithBrackets": "Did [Johnny Carson] and [George Carlin] influence [Dennis Miller], influence [Judy Caprio]'s child, and influence a cinematographer's sibling's spouse",
    "questionPatternModEntities": "Did M2 and M4 influence M3 , influence M0 's child , and influence a cinematographer 's sibling 's spouse",
    "questionTemplate": "Did [entity] and [entity] [VP_SIMPLE] [entity] , [VP_SIMPLE] [entity] 's [ROLE_SIMPLE] , and [VP_SIMPLE] a [NP_SIMPLE] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:people.person.parents|ns:fictional_universe.fictional_character.parents|ns:organization.organization.parent/ns:organization.organization_relationship.parent ns:m.0gz72s2 .\n?x1 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ?x2 .\n?x2 ns:people.person.sibling_s/ns:people.sibling_relationship.sibling|ns:fictional_universe.fictional_character.siblings/ns:fictional_universe.sibling_relationship_of_fictional_characters.siblings ?x3 .\n?x3 a ns:film.cinematographer .\nFILTER ( ?x1 != ?x2 ) .\nFILTER ( ?x2 != ?x3 ) .\nns:m.014z8v ns:influence.influence_node.influenced ?x0 .\nns:m.014z8v ns:influence.influence_node.influenced ?x1 .\nns:m.014z8v ns:influence.influence_node.influenced ns:m.047sg84 .\nns:m.0ph2w ns:influence.influence_node.influenced ?x0 .\nns:m.0ph2w ns:influence.influence_node.influenced ?x1 .\nns:m.0ph2w ns:influence.influence_node.influenced ns:m.047sg84\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x1 P1 ?x2 .\n?x2 P2 ?x3 .\n?x3 a M1 .\nFILTER ( ?x1 != ?x2 ) .\nFILTER ( ?x2 != ?x3 ) .\nM2 P3 ?x0 .\nM2 P3 ?x1 .\nM2 P3 M3 .\nM4 P3 ?x0 .\nM4 P3 ?x1 .\nM4 P3 M3\n}",
    "expectedResponse": "No",
    "recursionDepth": 50
  },
  {
    "questionIdx": 113440,
    "questionWithBrackets": "Were [Bharthavudyogam] and [Rick's Canoe] produced by, edited by, directed by, executive produced by, and written by a film's editor",
    "questionPatternModEntities": "Were M1 and M2 produced by , edited by , directed by , executive produced by , and written by a film 's editor",
    "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by a [NP_SIMPLE] 's [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.editor.film ?x1 .\n?x1 a ns:film.film .\nns:m.0127xm7h ns:film.film.directed_by ?x0 .\nns:m.0127xm7h ns:film.film.edited_by ?x0 .\nns:m.0127xm7h ns:film.film.executive_produced_by ?x0 .\nns:m.0127xm7h ns:film.film.produced_by|ns:film.film.production_companies ?x0 .\nns:m.0127xm7h ns:film.film.written_by ?x0 .\nns:m.0zvz2b2 ns:film.film.directed_by ?x0 .\nns:m.0zvz2b2 ns:film.film.edited_by ?x0 .\nns:m.0zvz2b2 ns:film.film.executive_produced_by ?x0 .\nns:m.0zvz2b2 ns:film.film.produced_by|ns:film.film.production_companies ?x0 .\nns:m.0zvz2b2 ns:film.film.written_by ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x1 a M0 .\nM1 P1 ?x0 .\nM1 P2 ?x0 .\nM1 P3 ?x0 .\nM1 P4 ?x0 .\nM1 P5 ?x0 .\nM2 P1 ?x0 .\nM2 P2 ?x0 .\nM2 P3 ?x0 .\nM2 P4 ?x0 .\nM2 P5 ?x0\n}",
    "expectedResponse": "No",
    "recursionDepth": 50
  },
  {
    "questionIdx": 121499,
    "questionWithBrackets": "Were [Murder 2] and [Kajraare] written by a production company's employee, written by a screenwriter's sibling, and edited by [Devendra Murdeshwar]",
    "questionPatternModEntities": "Were M2 and M4 written by a production company 's employee , written by a screenwriter 's sibling , and edited by M3",
    "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by a [NP_SIMPLE] 's [ROLE_SIMPLE] , [VP_SIMPLE] by a [NP_SIMPLE] 's [ROLE_SIMPLE] , and [VP_SIMPLE] by [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:people.person.sibling_s/ns:people.sibling_relationship.sibling|ns:fictional_universe.fictional_character.siblings/ns:fictional_universe.sibling_relationship_of_fictional_characters.siblings ?x1 .\n?x1 a ns:film.writer .\n?x2 ns:people.person.employment_history/ns:business.employment_tenure.company ?x3 .\n?x3 a ns:film.production_company .\nFILTER ( ?x0 != ?x1 ) .\nns:m.03mhjb1 ns:film.film.edited_by ns:m.0h5swhj .\nns:m.03mhjb1 ns:film.film.written_by ?x0 .\nns:m.03mhjb1 ns:film.film.written_by ?x2 .\nns:m.0gvv8q4 ns:film.film.edited_by ns:m.0h5swhj .\nns:m.0gvv8q4 ns:film.film.written_by ?x0 .\nns:m.0gvv8q4 ns:film.film.written_by ?x2\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x1 a M0 .\n?x2 P1 ?x3 .\n?x3 a M1 .\nFILTER ( ?x0 != ?x1 ) .\nM2 P2 ?x0 .\nM2 P2 ?x2 .\nM2 P3 M3 .\nM4 P2 ?x0 .\nM4 P2 ?x2 .\nM4 P3 M3\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 50
  },
  {
    "questionIdx": 33962,
    "questionWithBrackets": "Did a film editor influence [I Am So Proud of You]'s star, writer, and cinematographer, influence a film director, and influence [Christopher Largen]",
    "questionPatternModEntities": "Did a film editor influence M2 's star , writer , and cinematographer , influence a film director , and influence M1",
    "questionTemplate": "Did a [NP_SIMPLE] [VP_SIMPLE] [entity] 's [ROLE_SIMPLE] , [ROLE_SIMPLE] , and [ROLE_SIMPLE] , [VP_SIMPLE] a [NP_SIMPLE] , and [VP_SIMPLE] [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 a ns:film.editor .\n?x0 ns:influence.influence_node.influenced ?x1 .\n?x0 ns:influence.influence_node.influenced ?x2 .\n?x0 ns:influence.influence_node.influenced ns:m.0bqnky .\n?x1 ns:film.actor.film/ns:film.performance.film ns:m.05p793f .\n?x1 ns:film.cinematographer.film ns:m.05p793f .\n?x1 ns:film.writer.film ns:m.05p793f .\n?x2 a ns:film.director\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x0 P0 ?x2 .\n?x0 P0 M1 .\n?x0 a M0 .\n?x1 P1 M2 .\n?x1 P2 M2 .\n?x1 P3 M2 .\n?x2 a M3\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 50
  },
  {
    "questionIdx": 74388,
    "questionWithBrackets": "Was [Robbie Bonham] influenced by a Spanish screenwriter, influenced by an actor, and influenced by an actor's spouse",
    "questionPatternModEntities": "Was M3 influenced by a Spanish screenwriter , influenced by a actor , and influenced by a actor 's spouse",
    "questionTemplate": "Was [entity] [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [NP_SIMPLE] , [VP_SIMPLE] by a [NP_SIMPLE] , and [VP_SIMPLE] by a [NP_SIMPLE] 's [ROLE_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ?x1 .\n?x1 a ns:film.actor .\n?x2 a ns:film.actor .\n?x3 a ns:film.writer .\n?x3 ns:people.person.nationality ns:m.06mkj .\nFILTER ( ?x0 != ?x1 ) .\nns:m.02x988q ns:influence.influence_node.influenced_by ?x0 .\nns:m.02x988q ns:influence.influence_node.influenced_by ?x2 .\nns:m.02x988q ns:influence.influence_node.influenced_by ?x3\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x1 a M0 .\n?x2 a M0 .\n?x3 P1 M2 .\n?x3 a M1 .\nFILTER ( ?x0 != ?x1 ) .\nM3 P2 ?x0 .\nM3 P2 ?x2 .\nM3 P2 ?x3\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 50
  },
  {
    "questionIdx": 75854,
    "questionWithBrackets": "Was [Sepet] written by and directed by a film director whose employer acquired [MicroMUSE] and [PricewaterhouseCoopers] and acquired [Rational Software]",
    "questionPatternModEntities": "Was M4 written by and directed by a film director whose employer acquired M1 and M2 and acquired M3",
    "questionTemplate": "Was [entity] [VP_SIMPLE] by and [VP_SIMPLE] by a [NP_SIMPLE] whose [ROLE_SIMPLE] [VP_SIMPLE] [entity] and [entity] and [VP_SIMPLE] [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 a ns:film.director .\n?x0 ns:people.person.employment_history/ns:business.employment_tenure.company ?x1 .\n?x1 ns:organization.organization.companies_acquired/ns:business.acquisition.company_acquired ns:m.012_78 .\n?x1 ns:organization.organization.companies_acquired/ns:business.acquisition.company_acquired ns:m.01xtmx .\n?x1 ns:organization.organization.companies_acquired/ns:business.acquisition.company_acquired ns:m.0bbqpg .\nns:m.06hl_c ns:film.film.directed_by ?x0 .\nns:m.06hl_c ns:film.film.written_by ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 ?x1 .\n?x0 a M0 .\n?x1 P1 M1 .\n?x1 P1 M2 .\n?x1 P1 M3 .\nM4 P2 ?x0 .\nM4 P3 ?x0\n}",
    "expectedResponse": "Yes",
    "recursionDepth": 50
  },
  {
    "questionIdx": 195020,
    "questionWithBrackets": "Which character was influenced by [Dick Gregory], was influenced by [Mort Sahl] and [Dewey 'Pigmeat' Markham], and was influenced by a character's sibling",
    "questionPatternModEntities": "Which character was influenced by M1 , was influenced by M2 and M3 , and was influenced by a character 's sibling",
    "questionTemplate": "Which [NP_SIMPLE] was [VP_SIMPLE] by [entity] , was [VP_SIMPLE] by [entity] and [entity] , and was [VP_SIMPLE] by a [NP_SIMPLE] 's [ROLE_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:fictional_universe.fictional_character .\n?x0 ns:influence.influence_node.influenced_by ?x1 .\n?x0 ns:influence.influence_node.influenced_by ns:m.01dgtv .\n?x0 ns:influence.influence_node.influenced_by ns:m.01jpwfr .\n?x0 ns:influence.influence_node.influenced_by ns:m.02v2zl .\n?x1 ns:people.person.sibling_s/ns:people.sibling_relationship.sibling|ns:fictional_universe.fictional_character.siblings/ns:fictional_universe.sibling_relationship_of_fictional_characters.siblings ?x2 .\n?x2 a ns:fictional_universe.fictional_character .\nFILTER ( ?x1 != ?x2 )\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P0 M3 .\n?x0 a M0 .\n?x1 P1 ?x2 .\n?x2 a M0 .\nFILTER ( ?x1 != ?x2 )\n}",
    "expectedResponse": "Chris Rock",
    "recursionDepth": 50
  },
  {
    "questionIdx": 236038,
    "questionWithBrackets": "Who was influenced by [George Carlin] and [Rodney Dangerfield], influenced by a producer, star, and writer of [Norbit], and influenced by [Steve Martin]",
    "questionPatternModEntities": "Who was influenced by M1 and M2 , influenced by a producer , star , and writer of M4 , and influenced by M3",
    "questionTemplate": "Who was [VP_SIMPLE] by [entity] and [entity] , [VP_SIMPLE] by a [ROLE_SIMPLE] , [ROLE_SIMPLE] , and [ROLE_SIMPLE] of [entity] , and [VP_SIMPLE] by [entity]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:people.person .\n?x0 ns:influence.influence_node.influenced_by ?x1 .\n?x0 ns:influence.influence_node.influenced_by ns:m.014z8v .\n?x0 ns:influence.influence_node.influenced_by ns:m.015b67 .\n?x0 ns:influence.influence_node.influenced_by ns:m.0p_47 .\n?x1 ns:film.actor.film/ns:film.performance.film ns:m.0kv2hv .\n?x1 ns:film.producer.film|ns:film.production_company.films ns:m.0kv2hv .\n?x1 ns:film.writer.film ns:m.0kv2hv\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 P0 M3 .\n?x0 a M0 .\n?x1 P1 M4 .\n?x1 P2 M4 .\n?x1 P3 M4\n}",
    "expectedResponse": "Chris Rock; Artie Lange",
    "recursionDepth": 50
  },
  {
    "questionIdx": 48957,
    "questionWithBrackets": "Was [By Way of the Mountains] edited by, executive produced by, written by, produced by, and directed by a French actor of [Parvulesco]",
    "questionPatternModEntities": "Was M2 edited by , executive produced by , written by , produced by , and directed by a French actor of M1",
    "questionTemplate": "Was [entity] [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , [VP_SIMPLE] by , and [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.actor.film/ns:film.performance.character ns:m.045ncyp .\n?x0 ns:people.person.nationality ns:m.0f8l9c .\nns:m.0_rh8qx ns:film.film.directed_by ?x0 .\nns:m.0_rh8qx ns:film.film.edited_by ?x0 .\nns:m.0_rh8qx ns:film.film.executive_produced_by ?x0 .\nns:m.0_rh8qx ns:film.film.produced_by|ns:film.film.production_companies ?x0 .\nns:m.0_rh8qx ns:film.film.written_by ?x0\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\nM2 P2 ?x0 .\nM2 P3 ?x0 .\nM2 P4 ?x0 .\nM2 P5 ?x0 .\nM2 P6 ?x0\n}",
    "expectedResponse": "No",
    "recursionDepth": 50
  },
  {
    "questionIdx": 177981,
    "questionWithBrackets": "What was executive produced by a producer and star of [Eight Crazy Nights], executive produced by [Albert S. Ruddy], and written by a director of [By Virtue Fall]",
    "questionPatternModEntities": "What was executive produced by a producer and star of M1 , executive produced by M0 , and written by a director of M2",
    "questionTemplate": "What was [VP_SIMPLE] by a [ROLE_SIMPLE] and [ROLE_SIMPLE] of [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by a [ROLE_SIMPLE] of [entity]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.film.executive_produced_by ?x1 .\n?x0 ns:film.film.executive_produced_by ns:m.05bdqt .\n?x0 ns:film.film.written_by ?x2 .\n?x1 ns:film.actor.film/ns:film.performance.film ns:m.02m7tn .\n?x1 ns:film.producer.film|ns:film.production_company.films ns:m.02m7tn .\n?x2 ns:film.director.film ns:m.0gxn0nn\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P0 M0 .\n?x0 P1 ?x2 .\n?x1 P2 M1 .\n?x1 P3 M1 .\n?x2 P4 M2\n}",
    "expectedResponse": "The Longest Yard",
    "recursionDepth": 50
  },
  {
    "questionIdx": 77500,
    "questionWithBrackets": "Was [Steven Spielberg] a film director that [Mimic]'s distributor and producer employed, [DreamWorks Studios] employed, and [Amblimation] was founded by",
    "questionPatternModEntities": "Was M1 a film director that M0 's distributor and producer employed , M3 employed , and M4 was founded by",
    "questionTemplate": "Was [entity] a [NP_SIMPLE] that [entity] 's [ROLE_SIMPLE] and [ROLE_SIMPLE] [VP_SIMPLE] , [entity] [VP_SIMPLE] , and [entity] was [VP_SIMPLE] by",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:film.film_distributor.films_distributed/ns:film.film_film_distributor_relationship.film ns:m.04d0ng .\n?x0 ns:film.producer.film|ns:film.production_company.films ns:m.04d0ng .\nns:m.06pj8 a ns:film.director .\nns:m.06pj8 ns:organization.organization_founder.organizations_founded ns:m.052_rb .\nns:m.06pj8 ns:people.person.employment_history/ns:business.employment_tenure.company ?x0 .\nns:m.06pj8 ns:people.person.employment_history/ns:business.employment_tenure.company ns:m.01gb54\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M0 .\nM1 P2 ?x0 .\nM1 P2 M3 .\nM1 P3 M4 .\nM1 a M2\n}",
    "expectedResponse": "No",
    "recursionDepth": 50
  },
  {
    "questionIdx": 205627,
    "questionWithBrackets": "Which film whose director, editor, and costume designer wrote [The Cow] and directed [Tehran, Tehran] and [Rumi's Kimia] was written by [Vahideh Mohammadifar]",
    "questionPatternModEntities": "Which film whose director , editor , and costume designer wrote M2 and directed M3 and M4 was written by M1",
    "questionTemplate": "Which [NP_SIMPLE] whose [ROLE_SIMPLE] , [ROLE_SIMPLE] , and [ROLE_SIMPLE] [VP_SIMPLE] [entity] and [VP_SIMPLE] [entity] and [entity] was [VP_SIMPLE] by [entity]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:film.film .\n?x0 ns:film.film.costume_design_by ?x1 .\n?x0 ns:film.film.directed_by ?x1 .\n?x0 ns:film.film.edited_by ?x1 .\n?x0 ns:film.film.written_by ns:m.0gsyc62 .\n?x1 ns:film.director.film ns:m.0dg9sh1 .\n?x1 ns:film.director.film ns:m.0glrz7d .\n?x1 ns:film.writer.film ns:m.0dfx9n\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 M1 .\n?x0 P2 ?x1 .\n?x0 P3 ?x1 .\n?x0 a M0 .\n?x1 P4 M2 .\n?x1 P5 M3 .\n?x1 P5 M4\n}",
    "expectedResponse": "To Stay Alive",
    "recursionDepth": 50
  },
  {
    "questionIdx": 203370,
    "questionWithBrackets": "Which film editor was influenced by [Ill Met by Moonlight]'s director, influenced by [The Kingdom of Diamonds]'s director and costume designer, and influenced by a person",
    "questionPatternModEntities": "Which film editor was influenced by M2 's director , influenced by M1 's director and costume designer , and influenced by a person",
    "questionTemplate": "Which [NP_SIMPLE] was [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] , [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] and [ROLE_SIMPLE] , and [VP_SIMPLE] by a [NP_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:film.editor .\n?x0 ns:influence.influence_node.influenced_by ?x1 .\n?x0 ns:influence.influence_node.influenced_by ?x2 .\n?x0 ns:influence.influence_node.influenced_by ?x3 .\n?x1 ns:film.director.film ns:m.098dmr .\n?x1 ns:film.film_costumer_designer.costume_design_for_film ns:m.098dmr .\n?x2 ns:film.director.film ns:m.0h08ml4 .\n?x3 a ns:people.person\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P0 ?x2 .\n?x0 P0 ?x3 .\n?x0 a M0 .\n?x1 P1 M1 .\n?x1 P2 M1 .\n?x2 P2 M2 .\n?x3 a M3\n}",
    "expectedResponse": "Martin Scorsese",
    "recursionDepth": 50
  },
  {
    "questionIdx": 119103,
    "questionWithBrackets": "Were [James Joyce] and [Machado de Assis] influenced by an Italian sibling of [Francesco Alighieri], influenced by [John Milton], and influenced by a screenwriter",
    "questionPatternModEntities": "Were M3 and M5 influenced by a Italian sibling of M0 , influenced by M4 , and influenced by a screenwriter",
    "questionTemplate": "Were [entity] and [entity] [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] of [entity] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by a [NP_SIMPLE]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:people.person.nationality ns:m.03rjj .\n?x0 ns:people.person.sibling_s/ns:people.sibling_relationship.sibling|ns:fictional_universe.fictional_character.siblings/ns:fictional_universe.sibling_relationship_of_fictional_characters.siblings ns:m.0y5mvbz .\n?x1 a ns:film.writer .\nFILTER ( ?x0 != ns:m.0y5mvbz ) .\nns:m.01vc3g ns:influence.influence_node.influenced_by ?x0 .\nns:m.01vc3g ns:influence.influence_node.influenced_by ?x1 .\nns:m.01vc3g ns:influence.influence_node.influenced_by ns:m.0448r .\nns:m.03_87 ns:influence.influence_node.influenced_by ?x0 .\nns:m.03_87 ns:influence.influence_node.influenced_by ?x1 .\nns:m.03_87 ns:influence.influence_node.influenced_by ns:m.0448r\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 M1 .\n?x1 a M2 .\nFILTER ( ?x0 != M0 ) .\nM3 P2 ?x0 .\nM3 P2 ?x1 .\nM3 P2 M4 .\nM5 P2 ?x0 .\nM5 P2 ?x1 .\nM5 P2 M4\n}",
    "expectedResponse": "No",
    "recursionDepth": 50
  },
  {
    "questionIdx": 151149,
    "questionWithBrackets": "What did an Italian art director's spouse's spouse executive produce, [David S. Sterling] produce, and a film editor direct",
    "questionPatternModEntities": "What did a Italian art director 's spouse 's spouse executive produce , M0 produce , and a film editor direct",
    "questionTemplate": "What did a [ADJECTIVE_SIMPLE] [NP_SIMPLE] 's [ROLE_SIMPLE] 's [ROLE_SIMPLE] [VP_SIMPLE] , [entity] [VP_SIMPLE] , and a [NP_SIMPLE] [VP_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.film.directed_by ?x1 .\n?x0 ns:film.film.executive_produced_by ?x2 .\n?x0 ns:film.film.produced_by|ns:film.film.production_companies ns:m.0hg_4f6 .\n?x1 a ns:film.editor .\n?x2 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ?x3 .\n?x3 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ?x4 .\n?x4 a ns:film.film_art_director .\n?x4 ns:people.person.nationality ns:m.03rjj .\nFILTER ( ?x2 != ?x3 ) .\nFILTER ( ?x3 != ?x4 )\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P1 M0 .\n?x0 P2 ?x2 .\n?x1 P3 ?x3 .\n?x2 a M3 .\n?x3 P3 ?x4 .\n?x4 P4 M2 .\n?x4 a M1 .\nFILTER ( ?x1 != ?x3 ) .\nFILTER ( ?x3 != ?x4 )\n}",
    "expectedResponse": "The Brides of Sodom",
    "recursionDepth": 50
  },
  {
    "questionIdx": 156353,
    "questionWithBrackets": "What film distributor was founded by [Sadie Warner]'s sibling, was founded by [Sam Warner] and [Albert Warner], and was founded by a film producer",
    "questionPatternModEntities": "What film distributor was founded by M4 's sibling , was founded by M1 and M2 , and was founded by a film producer",
    "questionTemplate": "What [NP_SIMPLE] was [VP_SIMPLE] by [entity] 's [ROLE_SIMPLE] , was [VP_SIMPLE] by [entity] and [entity] , and was [VP_SIMPLE] by a [NP_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 a ns:film.film_distributor .\n?x0 ns:organization.organization.founders ?x1 .\n?x0 ns:organization.organization.founders ?x2 .\n?x0 ns:organization.organization.founders ns:m.02z15d .\n?x0 ns:organization.organization.founders ns:m.06qq7g .\n?x1 a ns:film.producer .\n?x2 ns:people.person.sibling_s/ns:people.sibling_relationship.sibling|ns:fictional_universe.fictional_character.siblings/ns:fictional_universe.sibling_relationship_of_fictional_characters.siblings ns:m.0hmz46s .\nFILTER ( ?x2 != ns:m.0hmz46s )\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 ?x1 .\n?x0 P0 ?x2 .\n?x0 P0 M1 .\n?x0 P0 M2 .\n?x0 a M0 .\n?x1 a M3 .\n?x2 P1 M4 .\nFILTER ( ?x2 != M4 )\n}",
    "expectedResponse": "Warner Bros. Entertainment",
    "recursionDepth": 50
  },
  {
    "questionIdx": 80980,
    "questionWithBrackets": "Was [The Guilt Trip] executive produced by a female person's Canadian spouse, directed by [Hal Mohr], and written by [Dashiell Hammett]",
    "questionPatternModEntities": "Was M3 executive produced by a female person 's Canadian spouse , directed by M5 , and written by M4",
    "questionTemplate": "Was [entity] [VP_SIMPLE] by a [ADJECTIVE_SIMPLE] [NP_SIMPLE] 's [ADJECTIVE_SIMPLE] [ROLE_SIMPLE] , [VP_SIMPLE] by [entity] , and [VP_SIMPLE] by [entity]",
    "sparql": "SELECT count(*) WHERE {\n?x0 ns:people.person.nationality ns:m.0d060g .\n?x0 ns:people.person.spouse_s/ns:people.marriage.spouse|ns:fictional_universe.fictional_character.married_to/ns:fictional_universe.marriage_of_fictional_characters.spouses ?x1 .\n?x1 a ns:people.person .\n?x1 ns:people.person.gender ns:m.02zsn .\nFILTER ( ?x0 != ?x1 ) .\nns:m.0gmff58 ns:film.film.directed_by ns:m.0f_zkz .\nns:m.0gmff58 ns:film.film.executive_produced_by ?x0 .\nns:m.0gmff58 ns:film.film.written_by ns:m.012cph\n}",
    "sparqlPattern": "SELECT count(*) WHERE {\n?x0 P0 M0 .\n?x0 P1 ?x1 .\n?x1 P2 M2 .\n?x1 a M1 .\nFILTER ( ?x0 != ?x1 ) .\nM3 P3 ?x0 .\nM3 P4 M4 .\nM3 P5 M5\n}",
    "expectedResponse": "No",
    "recursionDepth": 50
  },
  {
    "questionIdx": 172219,
    "questionWithBrackets": "What was distributed by [Dimension Films], produced by a film's cinematographer, and produced by a film producer's founder and employee",
    "questionPatternModEntities": "What was distributed by M0 , produced by a film 's cinematographer , and produced by a film producer 's founder and employee",
    "questionTemplate": "What was [VP_SIMPLE] by [entity] , [VP_SIMPLE] by a [NP_SIMPLE] 's [ROLE_SIMPLE] , and [VP_SIMPLE] by a [NP_SIMPLE] 's [ROLE_SIMPLE] and [ROLE_SIMPLE]",
    "sparql": "SELECT DISTINCT ?x0 WHERE {\n?x0 ns:film.film.distributors/ns:film.film_film_distributor_relationship.distributor ns:m.032j_n .\n?x0 ns:film.film.produced_by|ns:film.film.production_companies ?x1 .\n?x0 ns:film.film.produced_by|ns:film.film.production_companies ?x2 .\n?x1 ns:organization.organization_founder.organizations_founded ?x3 .\n?x1 ns:people.person.employment_history/ns:business.employment_tenure.company ?x3 .\n?x2 ns:film.cinematographer.film ?x4 .\n?x3 a ns:film.producer .\n?x4 a ns:film.film\n}",
    "sparqlPattern": "SELECT DISTINCT ?x0 WHERE {\n?x0 P0 M0 .\n?x0 P1 ?x1 .\n?x0 P1 ?x2 .\n?x1 P2 ?x3 .\n?x1 P3 ?x3 .\n?x2 P4 ?x4 .\n?x3 a M1 .\n?x4 a M2\n}",
    "expectedResponse": "The Accidental Spy",
    "recursionDepth": 50
  }
]